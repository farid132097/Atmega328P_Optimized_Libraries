
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000325a  000032ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000325a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  0080011a  0080011a  00003308  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000018aa  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004896  00000000  00000000  00004c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  000094a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002335  00000000  00000000  00009a63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ae0  00000000  00000000  0000bd98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001aad  00000000  00000000  0000c878  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c18  00000000  00000000  0000e325  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000ff3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	f2 e3       	ldi	r31, 0x32	; 50
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3b       	cpi	r26, 0xB7	; 183
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 20 18 	call	0x3040	; 0x3040 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timebase_DownCounter_SS_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 84 05 	call	0xb08	; 0xb08 <Timebase_Timer_Await_SubSeconds>
	UART_Transmit_Text("Timebase\r\n");
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     120:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     122:	0e 94 2d 18 	call	0x305a	; 0x305a <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     132:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     13c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     13e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     19e:	20 93 c4 00 	sts	0x00C4, r18
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
}
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
}
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
  sei();
     1d2:	78 94       	sei
}
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1d6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1e0:	90 93 c6 00 	sts	0x00C6, r25
}
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1f0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
    val=UDR0;
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     220:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     22e:	80 91 24 01 	lds	r24, 0x0124
}
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     234:	10 92 24 01 	sts	0x0124, r1
}
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     29c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2d4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     34a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3ba:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3be:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3fe:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 ee 18 	call	0x31dc	; 0x31dc <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
      i++;
     440:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     44c:	b0 92 23 01 	sts	0x0123, r11
  }
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     47c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
  UDR0=val;
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
}
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
}
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     50a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5e0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
  sei();
     5e8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSecondsShadow = 0;
     62c:	10 92 5a 01 	sts	0x015A, r1
     630:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.SecondsShadow = 0;
     634:	10 92 5b 01 	sts	0x015B, r1
     638:	10 92 5c 01 	sts	0x015C, r1
     63c:	10 92 5d 01 	sts	0x015D, r1
     640:	10 92 5e 01 	sts	0x015E, r1
  Timebase->Time.SubSeconds = 0;
     644:	10 92 54 01 	sts	0x0154, r1
     648:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     64c:	10 92 55 01 	sts	0x0155, r1
     650:	10 92 56 01 	sts	0x0156, r1
     654:	10 92 57 01 	sts	0x0157, r1
     658:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.VariablesSync = 0;
     65c:	10 92 5f 01 	sts	0x015F, r1
  Timebase->Time.LastSample = 0;
     660:	10 92 4f 01 	sts	0x014F, r1
     664:	10 92 50 01 	sts	0x0150, r1
     668:	10 92 51 01 	sts	0x0151, r1
     66c:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     670:	10 92 60 01 	sts	0x0160, r1
     674:	10 92 61 01 	sts	0x0161, r1
     678:	10 92 62 01 	sts	0x0162, r1
     67c:	10 92 63 01 	sts	0x0163, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     680:	10 92 64 01 	sts	0x0164, r1
     684:	10 92 65 01 	sts	0x0165, r1
     688:	10 92 66 01 	sts	0x0166, r1
     68c:	10 92 67 01 	sts	0x0167, r1
	Timebase->Time.Status = 0;
     690:	10 92 68 01 	sts	0x0168, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     694:	10 92 69 01 	sts	0x0169, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     698:	10 92 6a 01 	sts	0x016A, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     69c:	10 92 84 01 	sts	0x0184, r1
    Timebase->UpCounter[i].EndValue = 0;
     6a0:	10 92 85 01 	sts	0x0185, r1
     6a4:	10 92 86 01 	sts	0x0186, r1
     6a8:	10 92 87 01 	sts	0x0187, r1
     6ac:	10 92 88 01 	sts	0x0188, r1
    Timebase->UpCounter[i].Target = 0;
     6b0:	10 92 89 01 	sts	0x0189, r1
     6b4:	10 92 8a 01 	sts	0x018A, r1
     6b8:	10 92 8b 01 	sts	0x018B, r1
     6bc:	10 92 8c 01 	sts	0x018C, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6c0:	10 92 8d 01 	sts	0x018D, r1
     6c4:	10 92 8e 01 	sts	0x018E, r1
     6c8:	10 92 8f 01 	sts	0x018F, r1
     6cc:	10 92 90 01 	sts	0x0190, r1
    Timebase->UpCounter[i].Value = 0;
     6d0:	10 92 91 01 	sts	0x0191, r1
     6d4:	10 92 92 01 	sts	0x0192, r1
     6d8:	10 92 93 01 	sts	0x0193, r1
     6dc:	10 92 94 01 	sts	0x0194, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6e0:	10 92 95 01 	sts	0x0195, r1
     6e4:	10 92 96 01 	sts	0x0196, r1
     6e8:	10 92 97 01 	sts	0x0197, r1
     6ec:	10 92 98 01 	sts	0x0198, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6f0:	10 92 6b 01 	sts	0x016B, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6f4:	10 92 6c 01 	sts	0x016C, r1
     6f8:	10 92 6d 01 	sts	0x016D, r1
     6fc:	10 92 6e 01 	sts	0x016E, r1
     700:	10 92 6f 01 	sts	0x016F, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     704:	10 92 70 01 	sts	0x0170, r1
     708:	10 92 71 01 	sts	0x0171, r1
     70c:	10 92 72 01 	sts	0x0172, r1
     710:	10 92 73 01 	sts	0x0173, r1
    Timebase->UpCounterSS[i].Target = 0;
     714:	10 92 74 01 	sts	0x0174, r1
     718:	10 92 75 01 	sts	0x0175, r1
     71c:	10 92 76 01 	sts	0x0176, r1
     720:	10 92 77 01 	sts	0x0177, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     724:	10 92 78 01 	sts	0x0178, r1
     728:	10 92 79 01 	sts	0x0179, r1
     72c:	10 92 7a 01 	sts	0x017A, r1
     730:	10 92 7b 01 	sts	0x017B, r1
    Timebase->UpCounterSS[i].Value = 0;
     734:	10 92 7c 01 	sts	0x017C, r1
     738:	10 92 7d 01 	sts	0x017D, r1
     73c:	10 92 7e 01 	sts	0x017E, r1
     740:	10 92 7f 01 	sts	0x017F, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     744:	10 92 80 01 	sts	0x0180, r1
     748:	10 92 81 01 	sts	0x0181, r1
     74c:	10 92 82 01 	sts	0x0182, r1
     750:	10 92 83 01 	sts	0x0183, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     754:	10 92 aa 01 	sts	0x01AA, r1
    Timebase->DownCounter[i].EndValue = 0;
     758:	10 92 ab 01 	sts	0x01AB, r1
     75c:	10 92 ac 01 	sts	0x01AC, r1
     760:	10 92 ad 01 	sts	0x01AD, r1
     764:	10 92 ae 01 	sts	0x01AE, r1
    Timebase->DownCounter[i].Value = 0;
     768:	10 92 af 01 	sts	0x01AF, r1
     76c:	10 92 b0 01 	sts	0x01B0, r1
     770:	10 92 b1 01 	sts	0x01B1, r1
     774:	10 92 b2 01 	sts	0x01B2, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     778:	10 92 b3 01 	sts	0x01B3, r1
     77c:	10 92 b4 01 	sts	0x01B4, r1
     780:	10 92 b5 01 	sts	0x01B5, r1
     784:	10 92 b6 01 	sts	0x01B6, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     788:	10 92 99 01 	sts	0x0199, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     78c:	10 92 9a 01 	sts	0x019A, r1
     790:	10 92 9b 01 	sts	0x019B, r1
     794:	10 92 9c 01 	sts	0x019C, r1
     798:	10 92 9d 01 	sts	0x019D, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     79c:	10 92 9e 01 	sts	0x019E, r1
     7a0:	10 92 9f 01 	sts	0x019F, r1
     7a4:	10 92 a0 01 	sts	0x01A0, r1
     7a8:	10 92 a1 01 	sts	0x01A1, r1
    Timebase->DownCounterSS[i].Value = 0;
     7ac:	10 92 a2 01 	sts	0x01A2, r1
     7b0:	10 92 a3 01 	sts	0x01A3, r1
     7b4:	10 92 a4 01 	sts	0x01A4, r1
     7b8:	10 92 a5 01 	sts	0x01A5, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7bc:	10 92 a6 01 	sts	0x01A6, r1
     7c0:	10 92 a7 01 	sts	0x01A7, r1
     7c4:	10 92 a8 01 	sts	0x01A8, r1
     7c8:	10 92 a9 01 	sts	0x01A9, r1
  }
  #endif
  
}
     7cc:	08 95       	ret

000007ce <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7ce:	7f 92       	push	r7
     7d0:	8f 92       	push	r8
     7d2:	9f 92       	push	r9
     7d4:	af 92       	push	r10
     7d6:	bf 92       	push	r11
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	df 93       	push	r29
     7e6:	cf 93       	push	r28
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	2a 97       	sbiw	r28, 0x0a	; 10
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     7fa:	c0 90 49 01 	lds	r12, 0x0149
     7fe:	d0 90 4a 01 	lds	r13, 0x014A
     802:	f6 01       	movw	r30, r12
     804:	80 81       	ld	r24, Z
     806:	80 ff       	sbrs	r24, 0
     808:	31 c0       	rjmp	.+98     	; 0x86c <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     80a:	01 30       	cpi	r16, 0x01	; 1
     80c:	11 05       	cpc	r17, r1
     80e:	11 f4       	brne	.+4      	; 0x814 <Timebase_Timer_Config+0x46>
     810:	96 e0       	ldi	r25, 0x06	; 6
     812:	19 c0       	rjmp	.+50     	; 0x846 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     814:	02 30       	cpi	r16, 0x02	; 2
     816:	11 05       	cpc	r17, r1
     818:	11 f4       	brne	.+4      	; 0x81e <Timebase_Timer_Config+0x50>
     81a:	95 e0       	ldi	r25, 0x05	; 5
     81c:	14 c0       	rjmp	.+40     	; 0x846 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     81e:	04 30       	cpi	r16, 0x04	; 4
     820:	11 05       	cpc	r17, r1
     822:	11 f4       	brne	.+4      	; 0x828 <Timebase_Timer_Config+0x5a>
     824:	94 e0       	ldi	r25, 0x04	; 4
     826:	0f c0       	rjmp	.+30     	; 0x846 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     828:	08 30       	cpi	r16, 0x08	; 8
     82a:	11 05       	cpc	r17, r1
     82c:	11 f4       	brne	.+4      	; 0x832 <Timebase_Timer_Config+0x64>
     82e:	93 e0       	ldi	r25, 0x03	; 3
     830:	0a c0       	rjmp	.+20     	; 0x846 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     832:	00 31       	cpi	r16, 0x10	; 16
     834:	11 05       	cpc	r17, r1
     836:	11 f4       	brne	.+4      	; 0x83c <Timebase_Timer_Config+0x6e>
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	05 c0       	rjmp	.+10     	; 0x846 <Timebase_Timer_Config+0x78>
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	00 32       	cpi	r16, 0x20	; 32
     840:	11 05       	cpc	r17, r1
     842:	09 f4       	brne	.+2      	; 0x846 <Timebase_Timer_Config+0x78>
     844:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     846:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     848:	84 b7       	in	r24, 0x34	; 52
     84a:	87 7f       	andi	r24, 0xF7	; 247
     84c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     84e:	80 91 60 00 	lds	r24, 0x0060
     852:	80 68       	ori	r24, 0x80	; 128
     854:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     858:	80 91 60 00 	lds	r24, 0x0060
     85c:	88 61       	ori	r24, 0x18	; 24
     85e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     862:	90 64       	ori	r25, 0x40	; 64
     864:	90 93 60 00 	sts	0x0060, r25
    sei();
     868:	78 94       	sei
     86a:	67 c0       	rjmp	.+206    	; 0x93a <__stack+0x3b>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     86c:	81 fd       	sbrc	r24, 1
     86e:	65 c0       	rjmp	.+202    	; 0x93a <__stack+0x3b>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     870:	82 ff       	sbrs	r24, 2
     872:	63 c0       	rjmp	.+198    	; 0x93a <__stack+0x3b>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     874:	de 01       	movw	r26, r28
     876:	11 96       	adiw	r26, 0x01	; 1
     878:	e0 e1       	ldi	r30, 0x10	; 16
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	01 90       	ld	r0, Z+
     880:	0d 92       	st	X+, r0
     882:	81 50       	subi	r24, 0x01	; 1
     884:	e1 f7       	brne	.-8      	; 0x87e <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     886:	98 01       	movw	r18, r16
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	50 e0       	ldi	r21, 0x00	; 0
     88c:	60 e0       	ldi	r22, 0x00	; 0
     88e:	7b e1       	ldi	r23, 0x1B	; 27
     890:	87 eb       	ldi	r24, 0xB7	; 183
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
     898:	72 2e       	mov	r7, r18
     89a:	83 2e       	mov	r8, r19
     89c:	94 2e       	mov	r9, r20
     89e:	e5 2e       	mov	r14, r21
     8a0:	5e 01       	movw	r10, r28
     8a2:	08 94       	sec
     8a4:	a1 1c       	adc	r10, r1
     8a6:	b1 1c       	adc	r11, r1
     8a8:	c9 01       	movw	r24, r18
     8aa:	da 01       	movw	r26, r20
     8ac:	9c 01       	movw	r18, r24
     8ae:	ad 01       	movw	r20, r26
     8b0:	ff 24       	eor	r15, r15
     8b2:	14 c0       	rjmp	.+40     	; 0x8dc <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     8b4:	f5 01       	movw	r30, r10
     8b6:	21 91       	ld	r18, Z+
     8b8:	31 91       	ld	r19, Z+
     8ba:	5f 01       	movw	r10, r30
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	67 2d       	mov	r22, r7
     8c2:	78 2d       	mov	r23, r8
     8c4:	89 2d       	mov	r24, r9
     8c6:	9e 2d       	mov	r25, r14
     8c8:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
     8cc:	c9 01       	movw	r24, r18
     8ce:	da 01       	movw	r26, r20
     8d0:	9c 01       	movw	r18, r24
     8d2:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8d4:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8d6:	f5 e0       	ldi	r31, 0x05	; 5
     8d8:	ff 16       	cp	r15, r31
     8da:	31 f0       	breq	.+12     	; 0x8e8 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8dc:	2f 3f       	cpi	r18, 0xFF	; 255
     8de:	31 05       	cpc	r19, r1
     8e0:	41 05       	cpc	r20, r1
     8e2:	51 05       	cpc	r21, r1
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <Timebase_Timer_Config+0x11a>
     8e6:	34 f7       	brge	.-52     	; 0x8b4 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8e8:	8f 2d       	mov	r24, r15
     8ea:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8ec:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8ee:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8f0:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8f4:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8f6:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8f8:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     8fa:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     8fc:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     8fe:	88 23       	and	r24, r24
     900:	11 f4       	brne	.+4      	; 0x906 <__stack+0x7>
	  TCCR0B = (1<<CS00);
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0f c0       	rjmp	.+30     	; 0x924 <__stack+0x25>
	}else if(clock_div_index == 1){
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	11 f4       	brne	.+4      	; 0x90e <__stack+0xf>
	  TCCR0B = (1<<CS01);
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	0b c0       	rjmp	.+22     	; 0x924 <__stack+0x25>
	}else if(clock_div_index == 2){
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	11 f4       	brne	.+4      	; 0x916 <__stack+0x17>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	07 c0       	rjmp	.+14     	; 0x924 <__stack+0x25>
	}else if(clock_div_index == 3){
     916:	83 30       	cpi	r24, 0x03	; 3
     918:	11 f4       	brne	.+4      	; 0x91e <__stack+0x1f>
	  TCCR0B = (1<<CS02);
     91a:	84 e0       	ldi	r24, 0x04	; 4
     91c:	03 c0       	rjmp	.+6      	; 0x924 <__stack+0x25>
	}else if(clock_div_index == 4){
     91e:	84 30       	cpi	r24, 0x04	; 4
     920:	11 f4       	brne	.+4      	; 0x926 <__stack+0x27>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     926:	82 2f       	mov	r24, r18
     928:	80 95       	com	r24
     92a:	f6 01       	movw	r30, r12
     92c:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     92e:	83 81       	ldd	r24, Z+3	; 0x03
     930:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 6e 00 	sts	0x006E, r24
    sei();
     938:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     93a:	f6 01       	movw	r30, r12
     93c:	12 83       	std	Z+2, r17	; 0x02
     93e:	01 83       	std	Z+1, r16	; 0x01
}
     940:	2a 96       	adiw	r28, 0x0a	; 10
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	cf 91       	pop	r28
     94e:	df 91       	pop	r29
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	cf 90       	pop	r12
     95c:	bf 90       	pop	r11
     95e:	af 90       	pop	r10
     960:	9f 90       	pop	r9
     962:	8f 90       	pop	r8
     964:	7f 90       	pop	r7
     966:	08 95       	ret

00000968 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     968:	f8 94       	cli
}
     96a:	08 95       	ret

0000096c <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     96c:	78 94       	sei
}
     96e:	08 95       	ret

00000970 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     970:	e0 91 49 01 	lds	r30, 0x0149
     974:	f0 91 4a 01 	lds	r31, 0x014A
     978:	87 8d       	ldd	r24, Z+31	; 0x1f
}
     97a:	08 95       	ret

0000097c <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     97c:	e0 91 49 01 	lds	r30, 0x0149
     980:	f0 91 4a 01 	lds	r31, 0x014A
     984:	87 8d       	ldd	r24, Z+31	; 0x1f
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     986:	8f 33       	cpi	r24, 0x3F	; 63
     988:	18 f4       	brcc	.+6      	; 0x990 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     98a:	87 8d       	ldd	r24, Z+31	; 0x1f
     98c:	8f 5f       	subi	r24, 0xFF	; 255
     98e:	87 8f       	std	Z+31, r24	; 0x1f
     990:	08 95       	ret

00000992 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     992:	e0 91 49 01 	lds	r30, 0x0149
     996:	f0 91 4a 01 	lds	r31, 0x014A
     99a:	87 8d       	ldd	r24, Z+31	; 0x1f
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     99c:	88 23       	and	r24, r24
     99e:	19 f0       	breq	.+6      	; 0x9a6 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     9a0:	87 8d       	ldd	r24, Z+31	; 0x1f
     9a2:	81 50       	subi	r24, 0x01	; 1
     9a4:	87 8f       	std	Z+31, r24	; 0x1f
     9a6:	08 95       	ret

000009a8 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     9a8:	e0 91 49 01 	lds	r30, 0x0149
     9ac:	f0 91 4a 01 	lds	r31, 0x014A
     9b0:	17 8e       	std	Z+31, r1	; 0x1f
}
     9b2:	08 95       	ret

000009b4 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     9b4:	e0 91 49 01 	lds	r30, 0x0149
     9b8:	f0 91 4a 01 	lds	r31, 0x014A
     9bc:	26 85       	ldd	r18, Z+14	; 0x0e
     9be:	37 85       	ldd	r19, Z+15	; 0x0f
}
     9c0:	c9 01       	movw	r24, r18
     9c2:	08 95       	ret

000009c4 <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     9c4:	e0 91 49 01 	lds	r30, 0x0149
     9c8:	f0 91 4a 01 	lds	r31, 0x014A
     9cc:	20 89       	ldd	r18, Z+16	; 0x10
     9ce:	31 89       	ldd	r19, Z+17	; 0x11
     9d0:	42 89       	ldd	r20, Z+18	; 0x12
     9d2:	53 89       	ldd	r21, Z+19	; 0x13
}
     9d4:	b9 01       	movw	r22, r18
     9d6:	ca 01       	movw	r24, r20
     9d8:	08 95       	ret

000009da <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9da:	e0 91 49 01 	lds	r30, 0x0149
     9de:	f0 91 4a 01 	lds	r31, 0x014A
     9e2:	20 85       	ldd	r18, Z+8	; 0x08
     9e4:	31 85       	ldd	r19, Z+9	; 0x09
}
     9e6:	c9 01       	movw	r24, r18
     9e8:	08 95       	ret

000009ea <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9ea:	e0 91 49 01 	lds	r30, 0x0149
     9ee:	f0 91 4a 01 	lds	r31, 0x014A
     9f2:	22 85       	ldd	r18, Z+10	; 0x0a
     9f4:	33 85       	ldd	r19, Z+11	; 0x0b
     9f6:	44 85       	ldd	r20, Z+12	; 0x0c
     9f8:	55 85       	ldd	r21, Z+13	; 0x0d
}
     9fa:	b9 01       	movw	r22, r18
     9fc:	ca 01       	movw	r24, r20
     9fe:	08 95       	ret

00000a00 <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     a00:	e0 91 49 01 	lds	r30, 0x0149
     a04:	f0 91 4a 01 	lds	r31, 0x014A
     a08:	91 87       	std	Z+9, r25	; 0x09
     a0a:	80 87       	std	Z+8, r24	; 0x08
}
     a0c:	08 95       	ret

00000a0e <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     a0e:	e0 91 49 01 	lds	r30, 0x0149
     a12:	f0 91 4a 01 	lds	r31, 0x014A
     a16:	62 87       	std	Z+10, r22	; 0x0a
     a18:	73 87       	std	Z+11, r23	; 0x0b
     a1a:	84 87       	std	Z+12, r24	; 0x0c
     a1c:	95 87       	std	Z+13, r25	; 0x0d
}
     a1e:	08 95       	ret

00000a20 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     a20:	e0 91 49 01 	lds	r30, 0x0149
     a24:	f0 91 4a 01 	lds	r31, 0x014A
     a28:	84 89       	ldd	r24, Z+20	; 0x14
     a2a:	88 23       	and	r24, r24
     a2c:	81 f4       	brne	.+32     	; 0xa4e <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a2e:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
  
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     a30:	86 85       	ldd	r24, Z+14	; 0x0e
     a32:	97 85       	ldd	r25, Z+15	; 0x0f
     a34:	91 87       	std	Z+9, r25	; 0x09
     a36:	80 87       	std	Z+8, r24	; 0x08
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     a38:	80 89       	ldd	r24, Z+16	; 0x10
     a3a:	91 89       	ldd	r25, Z+17	; 0x11
     a3c:	a2 89       	ldd	r26, Z+18	; 0x12
     a3e:	b3 89       	ldd	r27, Z+19	; 0x13
     a40:	82 87       	std	Z+10, r24	; 0x0a
     a42:	93 87       	std	Z+11, r25	; 0x0b
     a44:	a4 87       	std	Z+12, r26	; 0x0c
     a46:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a48:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	84 8b       	std	Z+20, r24	; 0x14
     a4e:	08 95       	ret

00000a50 <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     a50:	6f 92       	push	r6
     a52:	7f 92       	push	r7
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a6e:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     a70:	c0 91 49 01 	lds	r28, 0x0149
     a74:	d0 91 4a 01 	lds	r29, 0x014A
     a78:	ee 84       	ldd	r14, Y+14	; 0x0e
     a7a:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     a7c:	28 89       	ldd	r18, Y+16	; 0x10
     a7e:	39 89       	ldd	r19, Y+17	; 0x11
     a80:	4a 89       	ldd	r20, Y+18	; 0x12
     a82:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a84:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a86:	69 81       	ldd	r22, Y+1	; 0x01
     a88:	7a 81       	ldd	r23, Y+2	; 0x02
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsi3>
     a92:	3b 01       	movw	r6, r22
     a94:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a96:	00 e0       	ldi	r16, 0x00	; 0
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	6e 0c       	add	r6, r14
     a9c:	7f 1c       	adc	r7, r15
     a9e:	80 1e       	adc	r8, r16
     aa0:	91 1e       	adc	r9, r17
  smpl_val += value;
     aa2:	cc 24       	eor	r12, r12
     aa4:	dd 24       	eor	r13, r13
     aa6:	6a 0c       	add	r6, r10
     aa8:	7b 1c       	adc	r7, r11
     aaa:	8c 1c       	adc	r8, r12
     aac:	9d 1c       	adc	r9, r13
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ab8:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     aba:	ee 84       	ldd	r14, Y+14	; 0x0e
     abc:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     abe:	28 89       	ldd	r18, Y+16	; 0x10
     ac0:	39 89       	ldd	r19, Y+17	; 0x11
     ac2:	4a 89       	ldd	r20, Y+18	; 0x12
     ac4:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ac6:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     ac8:	69 81       	ldd	r22, Y+1	; 0x01
     aca:	7a 81       	ldd	r23, Y+2	; 0x02
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsi3>
	curr_val += curr_ss;
     ad4:	00 e0       	ldi	r16, 0x00	; 0
     ad6:	10 e0       	ldi	r17, 0x00	; 0
     ad8:	6e 0d       	add	r22, r14
     ada:	7f 1d       	adc	r23, r15
     adc:	80 1f       	adc	r24, r16
     ade:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     ae0:	66 15       	cp	r22, r6
     ae2:	77 05       	cpc	r23, r7
     ae4:	88 05       	cpc	r24, r8
     ae6:	99 05       	cpc	r25, r9
     ae8:	3c f3       	brlt	.-50     	; 0xab8 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	af 90       	pop	r10
     afe:	9f 90       	pop	r9
     b00:	8f 90       	pop	r8
     b02:	7f 90       	pop	r7
     b04:	6f 90       	pop	r6
     b06:	08 95       	ret

00000b08 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     b08:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b0a:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b0c:	e0 91 49 01 	lds	r30, 0x0149
     b10:	f0 91 4a 01 	lds	r31, 0x014A
     b14:	01 c0       	rjmp	.+2      	; 0xb18 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b16:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b18:	86 85       	ldd	r24, Z+14	; 0x0e
     b1a:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b1c:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     b1e:	24 81       	ldd	r18, Z+4	; 0x04
     b20:	35 81       	ldd	r19, Z+5	; 0x05
     b22:	46 81       	ldd	r20, Z+6	; 0x06
     b24:	57 81       	ldd	r21, Z+7	; 0x07
     b26:	a0 e0       	ldi	r26, 0x00	; 0
     b28:	b0 e0       	ldi	r27, 0x00	; 0
     b2a:	82 17       	cp	r24, r18
     b2c:	93 07       	cpc	r25, r19
     b2e:	a4 07       	cpc	r26, r20
     b30:	b5 07       	cpc	r27, r21
     b32:	89 f7       	brne	.-30     	; 0xb16 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b34:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b36:	86 85       	ldd	r24, Z+14	; 0x0e
     b38:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b3a:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	84 83       	std	Z+4, r24	; 0x04
     b42:	95 83       	std	Z+5, r25	; 0x05
     b44:	a6 83       	std	Z+6, r26	; 0x06
     b46:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     b48:	24 81       	ldd	r18, Z+4	; 0x04
     b4a:	35 81       	ldd	r19, Z+5	; 0x05
     b4c:	46 81       	ldd	r20, Z+6	; 0x06
     b4e:	57 81       	ldd	r21, Z+7	; 0x07
     b50:	cb 01       	movw	r24, r22
     b52:	a0 e0       	ldi	r26, 0x00	; 0
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	82 0f       	add	r24, r18
     b58:	93 1f       	adc	r25, r19
     b5a:	a4 1f       	adc	r26, r20
     b5c:	b5 1f       	adc	r27, r21
     b5e:	84 83       	std	Z+4, r24	; 0x04
     b60:	95 83       	std	Z+5, r25	; 0x05
     b62:	a6 83       	std	Z+6, r26	; 0x06
     b64:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     b66:	24 81       	ldd	r18, Z+4	; 0x04
     b68:	35 81       	ldd	r19, Z+5	; 0x05
     b6a:	46 81       	ldd	r20, Z+6	; 0x06
     b6c:	57 81       	ldd	r21, Z+7	; 0x07
     b6e:	81 81       	ldd	r24, Z+1	; 0x01
     b70:	92 81       	ldd	r25, Z+2	; 0x02
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	28 17       	cp	r18, r24
     b78:	39 07       	cpc	r19, r25
     b7a:	4a 07       	cpc	r20, r26
     b7c:	5b 07       	cpc	r21, r27
     b7e:	84 f0       	brlt	.+32     	; 0xba0 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b80:	24 81       	ldd	r18, Z+4	; 0x04
     b82:	35 81       	ldd	r19, Z+5	; 0x05
     b84:	46 81       	ldd	r20, Z+6	; 0x06
     b86:	57 81       	ldd	r21, Z+7	; 0x07
     b88:	81 81       	ldd	r24, Z+1	; 0x01
     b8a:	92 81       	ldd	r25, Z+2	; 0x02
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	28 1b       	sub	r18, r24
     b92:	39 0b       	sbc	r19, r25
     b94:	4a 0b       	sbc	r20, r26
     b96:	5b 0b       	sbc	r21, r27
     b98:	24 83       	std	Z+4, r18	; 0x04
     b9a:	35 83       	std	Z+5, r19	; 0x05
     b9c:	46 83       	std	Z+6, r20	; 0x06
     b9e:	57 83       	std	Z+7, r21	; 0x07
     ba0:	08 95       	ret

00000ba2 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ba2:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     ba4:	e0 91 49 01 	lds	r30, 0x0149
     ba8:	f0 91 4a 01 	lds	r31, 0x014A
     bac:	20 89       	ldd	r18, Z+16	; 0x10
     bae:	31 89       	ldd	r19, Z+17	; 0x11
     bb0:	42 89       	ldd	r20, Z+18	; 0x12
     bb2:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bb4:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	a4 1f       	adc	r26, r20
     bc0:	b5 1f       	adc	r27, r21
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	06 c0       	rjmp	.+12     	; 0xbd8 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bcc:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     bce:	20 89       	ldd	r18, Z+16	; 0x10
     bd0:	31 89       	ldd	r19, Z+17	; 0x11
     bd2:	42 89       	ldd	r20, Z+18	; 0x12
     bd4:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bd6:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     bd8:	28 17       	cp	r18, r24
     bda:	39 07       	cpc	r19, r25
     bdc:	4a 07       	cpc	r20, r26
     bde:	5b 07       	cpc	r21, r27
     be0:	ac f3       	brlt	.-22     	; 0xbcc <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     be2:	08 95       	ret

00000be4 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     be4:	e0 91 49 01 	lds	r30, 0x0149
     be8:	f0 91 4a 01 	lds	r31, 0x014A
     bec:	15 8a       	std	Z+21, r1	; 0x15
     bee:	16 8a       	std	Z+22, r1	; 0x16
     bf0:	17 8a       	std	Z+23, r1	; 0x17
     bf2:	10 8e       	std	Z+24, r1	; 0x18
  Timebase->Time.StartTimeSubSeconds = 0;
     bf4:	11 8e       	std	Z+25, r1	; 0x19
     bf6:	12 8e       	std	Z+26, r1	; 0x1a
     bf8:	13 8e       	std	Z+27, r1	; 0x1b
     bfa:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.Status = COUNTER_STATE_RESET;
     bfc:	15 8e       	std	Z+29, r1	; 0x1d
}
     bfe:	08 95       	ret

00000c00 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     c00:	e0 91 49 01 	lds	r30, 0x0149
     c04:	f0 91 4a 01 	lds	r31, 0x014A
     c08:	85 8d       	ldd	r24, Z+29	; 0x1d
     c0a:	88 23       	and	r24, r24
     c0c:	a1 f4       	brne	.+40     	; 0xc36 <Timebase_Window_Timer_Start+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c0e:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     c10:	80 89       	ldd	r24, Z+16	; 0x10
     c12:	91 89       	ldd	r25, Z+17	; 0x11
     c14:	a2 89       	ldd	r26, Z+18	; 0x12
     c16:	b3 89       	ldd	r27, Z+19	; 0x13
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
     c18:	85 8b       	std	Z+21, r24	; 0x15
     c1a:	96 8b       	std	Z+22, r25	; 0x16
     c1c:	a7 8b       	std	Z+23, r26	; 0x17
     c1e:	b0 8f       	std	Z+24, r27	; 0x18


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     c20:	86 85       	ldd	r24, Z+14	; 0x0e
     c22:	97 85       	ldd	r25, Z+15	; 0x0f

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	81 8f       	std	Z+25, r24	; 0x19
     c2a:	92 8f       	std	Z+26, r25	; 0x1a
     c2c:	a3 8f       	std	Z+27, r26	; 0x1b
     c2e:	b4 8f       	std	Z+28, r27	; 0x1c
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     c30:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	85 8f       	std	Z+29, r24	; 0x1d
     c36:	08 95       	ret

00000c38 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     c38:	ef 92       	push	r14
     c3a:	ff 92       	push	r15
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c44:	c0 91 49 01 	lds	r28, 0x0149
     c48:	d0 91 4a 01 	lds	r29, 0x014A
     c4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	21 f0       	breq	.+8      	; 0xc5a <Timebase_Window_Timer_Get_Interval+0x22>
     c52:	ee 24       	eor	r14, r14
     c54:	ff 24       	eor	r15, r15
     c56:	87 01       	movw	r16, r14
     c58:	25 c0       	rjmp	.+74     	; 0xca4 <Timebase_Window_Timer_Get_Interval+0x6c>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c5a:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     c5c:	28 89       	ldd	r18, Y+16	; 0x10
     c5e:	39 89       	ldd	r19, Y+17	; 0x11
     c60:	4a 89       	ldd	r20, Y+18	; 0x12
     c62:	5b 89       	ldd	r21, Y+19	; 0x13


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     c64:	8e 85       	ldd	r24, Y+14	; 0x0e
     c66:	9f 85       	ldd	r25, Y+15	; 0x0f
int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
     c68:	7c 01       	movw	r14, r24
     c6a:	00 e0       	ldi	r16, 0x00	; 0
     c6c:	10 e0       	ldi	r17, 0x00	; 0
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     c6e:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
	curr_s -= Timebase->Time.StartTimeSeconds;
     c70:	8d 89       	ldd	r24, Y+21	; 0x15
     c72:	9e 89       	ldd	r25, Y+22	; 0x16
     c74:	af 89       	ldd	r26, Y+23	; 0x17
     c76:	b8 8d       	ldd	r27, Y+24	; 0x18
     c78:	28 1b       	sub	r18, r24
     c7a:	39 0b       	sbc	r19, r25
     c7c:	4a 0b       	sbc	r20, r26
     c7e:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c80:	69 81       	ldd	r22, Y+1	; 0x01
     c82:	7a 81       	ldd	r23, Y+2	; 0x02
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsi3>
	curr_s += curr_ss;
     c8c:	29 8d       	ldd	r18, Y+25	; 0x19
     c8e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     c90:	4b 8d       	ldd	r20, Y+27	; 0x1b
     c92:	5c 8d       	ldd	r21, Y+28	; 0x1c
     c94:	e2 1a       	sub	r14, r18
     c96:	f3 0a       	sbc	r15, r19
     c98:	04 0b       	sbc	r16, r20
     c9a:	15 0b       	sbc	r17, r21
     c9c:	e6 0e       	add	r14, r22
     c9e:	f7 1e       	adc	r15, r23
     ca0:	08 1f       	adc	r16, r24
     ca2:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     ca4:	b7 01       	movw	r22, r14
     ca6:	c8 01       	movw	r24, r16
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     cb6:	0e 94 1c 06 	call	0xc38	; 0xc38 <Timebase_Window_Timer_Get_Interval>
     cba:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     cbc:	e0 91 49 01 	lds	r30, 0x0149
     cc0:	f0 91 4a 01 	lds	r31, 0x014A
     cc4:	85 8d       	ldd	r24, Z+29	; 0x1d
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	49 f4       	brne	.+18     	; 0xcdc <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     cca:	15 8a       	std	Z+21, r1	; 0x15
     ccc:	16 8a       	std	Z+22, r1	; 0x16
     cce:	17 8a       	std	Z+23, r1	; 0x17
     cd0:	10 8e       	std	Z+24, r1	; 0x18
  Timebase->Time.StartTimeSubSeconds = 0;
     cd2:	11 8e       	std	Z+25, r1	; 0x19
     cd4:	12 8e       	std	Z+26, r1	; 0x1a
     cd6:	13 8e       	std	Z+27, r1	; 0x1b
     cd8:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.Status = COUNTER_STATE_RESET;
     cda:	15 8e       	std	Z+29, r1	; 0x1d
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     cdc:	82 2f       	mov	r24, r18
     cde:	08 95       	ret

00000ce0 <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     ce0:	e0 91 49 01 	lds	r30, 0x0149
     ce4:	f0 91 4a 01 	lds	r31, 0x014A
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	29 e1       	ldi	r18, 0x19	; 25
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	ac 01       	movw	r20, r24
     cf0:	42 9f       	mul	r20, r18
     cf2:	c0 01       	movw	r24, r0
     cf4:	43 9f       	mul	r20, r19
     cf6:	90 0d       	add	r25, r0
     cf8:	52 9f       	mul	r21, r18
     cfa:	90 0d       	add	r25, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	e8 0f       	add	r30, r24
     d00:	f9 1f       	adc	r31, r25
     d02:	80 a1       	ldd	r24, Z+32	; 0x20
     d04:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     d06:	8f 70       	andi	r24, 0x0F	; 15
     d08:	08 95       	ret

00000d0a <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     d0a:	e0 91 49 01 	lds	r30, 0x0149
     d0e:	f0 91 4a 01 	lds	r31, 0x014A
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	29 e1       	ldi	r18, 0x19	; 25
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	ac 01       	movw	r20, r24
     d1a:	42 9f       	mul	r20, r18
     d1c:	c0 01       	movw	r24, r0
     d1e:	43 9f       	mul	r20, r19
     d20:	90 0d       	add	r25, r0
     d22:	52 9f       	mul	r21, r18
     d24:	90 0d       	add	r25, r0
     d26:	11 24       	eor	r1, r1
     d28:	e8 0f       	add	r30, r24
     d2a:	f9 1f       	adc	r31, r25
     d2c:	6f 70       	andi	r22, 0x0F	; 15
     d2e:	66 0f       	add	r22, r22
     d30:	80 a1       	ldd	r24, Z+32	; 0x20
     d32:	81 7e       	andi	r24, 0xE1	; 225
     d34:	86 2b       	or	r24, r22
     d36:	80 a3       	std	Z+32, r24	; 0x20
}
     d38:	08 95       	ret

00000d3a <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     d3a:	e0 91 49 01 	lds	r30, 0x0149
     d3e:	f0 91 4a 01 	lds	r31, 0x014A
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	29 e1       	ldi	r18, 0x19	; 25
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	ac 01       	movw	r20, r24
     d4a:	42 9f       	mul	r20, r18
     d4c:	c0 01       	movw	r24, r0
     d4e:	43 9f       	mul	r20, r19
     d50:	90 0d       	add	r25, r0
     d52:	52 9f       	mul	r21, r18
     d54:	90 0d       	add	r25, r0
     d56:	11 24       	eor	r1, r1
     d58:	e8 0f       	add	r30, r24
     d5a:	f9 1f       	adc	r31, r25
     d5c:	df 01       	movw	r26, r30
     d5e:	d1 96       	adiw	r26, 0x31	; 49
     d60:	61 a9       	ldd	r22, Z+49	; 0x31
     d62:	11 96       	adiw	r26, 0x01	; 1
     d64:	7c 91       	ld	r23, X
     d66:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	8c 91       	ld	r24, X
     d6c:	12 97       	sbiw	r26, 0x02	; 2
     d6e:	13 96       	adiw	r26, 0x03	; 3
     d70:	9c 91       	ld	r25, X
     d72:	08 95       	ret

00000d74 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     d78:	c0 91 49 01 	lds	r28, 0x0149
     d7c:	d0 91 4a 01 	lds	r29, 0x014A
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	29 e1       	ldi	r18, 0x19	; 25
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	fc 01       	movw	r30, r24
     d88:	e2 9f       	mul	r30, r18
     d8a:	c0 01       	movw	r24, r0
     d8c:	e3 9f       	mul	r30, r19
     d8e:	90 0d       	add	r25, r0
     d90:	f2 9f       	mul	r31, r18
     d92:	90 0d       	add	r25, r0
     d94:	11 24       	eor	r1, r1
     d96:	c8 0f       	add	r28, r24
     d98:	d9 1f       	adc	r29, r25
     d9a:	ca 01       	movw	r24, r20
     d9c:	db 01       	movw	r26, r22
     d9e:	b7 ff       	sbrs	r27, 7
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <Timebase_UpCounter_SS_Set_Value+0x36>
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	89 ab       	std	Y+49, r24	; 0x31
     dac:	9a ab       	std	Y+50, r25	; 0x32
     dae:	ab ab       	std	Y+51, r26	; 0x33
     db0:	bc ab       	std	Y+52, r27	; 0x34
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     db8:	e0 91 49 01 	lds	r30, 0x0149
     dbc:	f0 91 4a 01 	lds	r31, 0x014A
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	29 e1       	ldi	r18, 0x19	; 25
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	ac 01       	movw	r20, r24
     dc8:	42 9f       	mul	r20, r18
     dca:	c0 01       	movw	r24, r0
     dcc:	43 9f       	mul	r20, r19
     dce:	90 0d       	add	r25, r0
     dd0:	52 9f       	mul	r21, r18
     dd2:	90 0d       	add	r25, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	e8 0f       	add	r30, r24
     dd8:	f9 1f       	adc	r31, r25
     dda:	df 01       	movw	r26, r30
     ddc:	91 96       	adiw	r26, 0x21	; 33
     dde:	61 a1       	ldd	r22, Z+33	; 0x21
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	7c 91       	ld	r23, X
     de4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     de6:	12 96       	adiw	r26, 0x02	; 2
     de8:	8c 91       	ld	r24, X
     dea:	12 97       	sbiw	r26, 0x02	; 2
     dec:	13 96       	adiw	r26, 0x03	; 3
     dee:	9c 91       	ld	r25, X
     df0:	08 95       	ret

00000df2 <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     df2:	e0 91 49 01 	lds	r30, 0x0149
     df6:	f0 91 4a 01 	lds	r31, 0x014A
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	29 e1       	ldi	r18, 0x19	; 25
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	ac 01       	movw	r20, r24
     e02:	42 9f       	mul	r20, r18
     e04:	c0 01       	movw	r24, r0
     e06:	43 9f       	mul	r20, r19
     e08:	90 0d       	add	r25, r0
     e0a:	52 9f       	mul	r21, r18
     e0c:	90 0d       	add	r25, r0
     e0e:	11 24       	eor	r1, r1
     e10:	e8 0f       	add	r30, r24
     e12:	f9 1f       	adc	r31, r25
     e14:	df 01       	movw	r26, r30
     e16:	95 96       	adiw	r26, 0x25	; 37
     e18:	65 a1       	ldd	r22, Z+37	; 0x25
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	7c 91       	ld	r23, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	8c 91       	ld	r24, X
     e24:	12 97       	sbiw	r26, 0x02	; 2
     e26:	13 96       	adiw	r26, 0x03	; 3
     e28:	9c 91       	ld	r25, X
     e2a:	08 95       	ret

00000e2c <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     e2c:	e0 91 49 01 	lds	r30, 0x0149
     e30:	f0 91 4a 01 	lds	r31, 0x014A
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	29 e1       	ldi	r18, 0x19	; 25
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	dc 01       	movw	r26, r24
     e3c:	a2 9f       	mul	r26, r18
     e3e:	c0 01       	movw	r24, r0
     e40:	a3 9f       	mul	r26, r19
     e42:	90 0d       	add	r25, r0
     e44:	b2 9f       	mul	r27, r18
     e46:	90 0d       	add	r25, r0
     e48:	11 24       	eor	r1, r1
     e4a:	e8 0f       	add	r30, r24
     e4c:	f9 1f       	adc	r31, r25
     e4e:	41 a3       	std	Z+33, r20	; 0x21
     e50:	52 a3       	std	Z+34, r21	; 0x22
     e52:	63 a3       	std	Z+35, r22	; 0x23
     e54:	74 a3       	std	Z+36, r23	; 0x24
}
     e56:	08 95       	ret

00000e58 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     e58:	e0 91 49 01 	lds	r30, 0x0149
     e5c:	f0 91 4a 01 	lds	r31, 0x014A
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	29 e1       	ldi	r18, 0x19	; 25
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	dc 01       	movw	r26, r24
     e68:	a2 9f       	mul	r26, r18
     e6a:	c0 01       	movw	r24, r0
     e6c:	a3 9f       	mul	r26, r19
     e6e:	90 0d       	add	r25, r0
     e70:	b2 9f       	mul	r27, r18
     e72:	90 0d       	add	r25, r0
     e74:	11 24       	eor	r1, r1
     e76:	e8 0f       	add	r30, r24
     e78:	f9 1f       	adc	r31, r25
     e7a:	45 a3       	std	Z+37, r20	; 0x25
     e7c:	56 a3       	std	Z+38, r21	; 0x26
     e7e:	67 a3       	std	Z+39, r22	; 0x27
     e80:	70 a7       	std	Z+40, r23	; 0x28
}
     e82:	08 95       	ret

00000e84 <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     e84:	e0 91 49 01 	lds	r30, 0x0149
     e88:	f0 91 4a 01 	lds	r31, 0x014A
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	29 e1       	ldi	r18, 0x19	; 25
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	ac 01       	movw	r20, r24
     e94:	42 9f       	mul	r20, r18
     e96:	c0 01       	movw	r24, r0
     e98:	43 9f       	mul	r20, r19
     e9a:	90 0d       	add	r25, r0
     e9c:	52 9f       	mul	r21, r18
     e9e:	90 0d       	add	r25, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	e8 0f       	add	r30, r24
     ea4:	f9 1f       	adc	r31, r25
     ea6:	df 01       	movw	r26, r30
     ea8:	99 96       	adiw	r26, 0x29	; 41
     eaa:	61 a5       	ldd	r22, Z+41	; 0x29
     eac:	11 96       	adiw	r26, 0x01	; 1
     eae:	7c 91       	ld	r23, X
     eb0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     eb2:	12 96       	adiw	r26, 0x02	; 2
     eb4:	8c 91       	ld	r24, X
     eb6:	12 97       	sbiw	r26, 0x02	; 2
     eb8:	13 96       	adiw	r26, 0x03	; 3
     eba:	9c 91       	ld	r25, X
     ebc:	08 95       	ret

00000ebe <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     ebe:	e0 91 49 01 	lds	r30, 0x0149
     ec2:	f0 91 4a 01 	lds	r31, 0x014A
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	29 e1       	ldi	r18, 0x19	; 25
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	dc 01       	movw	r26, r24
     ece:	a2 9f       	mul	r26, r18
     ed0:	c0 01       	movw	r24, r0
     ed2:	a3 9f       	mul	r26, r19
     ed4:	90 0d       	add	r25, r0
     ed6:	b2 9f       	mul	r27, r18
     ed8:	90 0d       	add	r25, r0
     eda:	11 24       	eor	r1, r1
     edc:	e8 0f       	add	r30, r24
     ede:	f9 1f       	adc	r31, r25
     ee0:	41 a7       	std	Z+41, r20	; 0x29
     ee2:	52 a7       	std	Z+42, r21	; 0x2a
     ee4:	63 a7       	std	Z+43, r22	; 0x2b
     ee6:	74 a7       	std	Z+44, r23	; 0x2c
}
     ee8:	08 95       	ret

00000eea <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     eea:	e0 91 49 01 	lds	r30, 0x0149
     eee:	f0 91 4a 01 	lds	r31, 0x014A
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	29 e1       	ldi	r18, 0x19	; 25
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	ac 01       	movw	r20, r24
     efa:	42 9f       	mul	r20, r18
     efc:	c0 01       	movw	r24, r0
     efe:	43 9f       	mul	r20, r19
     f00:	90 0d       	add	r25, r0
     f02:	52 9f       	mul	r21, r18
     f04:	90 0d       	add	r25, r0
     f06:	11 24       	eor	r1, r1
     f08:	e8 0f       	add	r30, r24
     f0a:	f9 1f       	adc	r31, r25
     f0c:	df 01       	movw	r26, r30
     f0e:	9d 96       	adiw	r26, 0x2d	; 45
     f10:	65 a5       	ldd	r22, Z+45	; 0x2d
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	7c 91       	ld	r23, X
     f16:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	8c 91       	ld	r24, X
     f1c:	12 97       	sbiw	r26, 0x02	; 2
     f1e:	13 96       	adiw	r26, 0x03	; 3
     f20:	9c 91       	ld	r25, X
     f22:	08 95       	ret

00000f24 <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     f28:	c0 91 49 01 	lds	r28, 0x0149
     f2c:	d0 91 4a 01 	lds	r29, 0x014A
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	29 e1       	ldi	r18, 0x19	; 25
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	fc 01       	movw	r30, r24
     f38:	e2 9f       	mul	r30, r18
     f3a:	c0 01       	movw	r24, r0
     f3c:	e3 9f       	mul	r30, r19
     f3e:	90 0d       	add	r25, r0
     f40:	f2 9f       	mul	r31, r18
     f42:	90 0d       	add	r25, r0
     f44:	11 24       	eor	r1, r1
     f46:	c8 0f       	add	r28, r24
     f48:	d9 1f       	adc	r29, r25
     f4a:	ca 01       	movw	r24, r20
     f4c:	db 01       	movw	r26, r22
     f4e:	b7 ff       	sbrs	r27, 7
     f50:	04 c0       	rjmp	.+8      	; 0xf5a <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	a0 e0       	ldi	r26, 0x00	; 0
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	8d a7       	std	Y+45, r24	; 0x2d
     f5c:	9e a7       	std	Y+46, r25	; 0x2e
     f5e:	af a7       	std	Y+47, r26	; 0x2f
     f60:	b8 ab       	std	Y+48, r27	; 0x30
}
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     f68:	e0 91 49 01 	lds	r30, 0x0149
     f6c:	f0 91 4a 01 	lds	r31, 0x014A
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	29 e1       	ldi	r18, 0x19	; 25
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	ac 01       	movw	r20, r24
     f78:	42 9f       	mul	r20, r18
     f7a:	c0 01       	movw	r24, r0
     f7c:	43 9f       	mul	r20, r19
     f7e:	90 0d       	add	r25, r0
     f80:	52 9f       	mul	r21, r18
     f82:	90 0d       	add	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	e8 0f       	add	r30, r24
     f88:	f9 1f       	adc	r31, r25
     f8a:	df 01       	movw	r26, r30
     f8c:	d5 96       	adiw	r26, 0x35	; 53
     f8e:	65 a9       	ldd	r22, Z+53	; 0x35
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	7c 91       	ld	r23, X
     f94:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     f96:	12 96       	adiw	r26, 0x02	; 2
     f98:	8c 91       	ld	r24, X
     f9a:	12 97       	sbiw	r26, 0x02	; 2
     f9c:	13 96       	adiw	r26, 0x03	; 3
     f9e:	9c 91       	ld	r25, X
     fa0:	08 95       	ret

00000fa2 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     fa2:	e0 91 49 01 	lds	r30, 0x0149
     fa6:	f0 91 4a 01 	lds	r31, 0x014A
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	29 e1       	ldi	r18, 0x19	; 25
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	dc 01       	movw	r26, r24
     fb2:	a2 9f       	mul	r26, r18
     fb4:	c0 01       	movw	r24, r0
     fb6:	a3 9f       	mul	r26, r19
     fb8:	90 0d       	add	r25, r0
     fba:	b2 9f       	mul	r27, r18
     fbc:	90 0d       	add	r25, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	e8 0f       	add	r30, r24
     fc2:	f9 1f       	adc	r31, r25
     fc4:	45 ab       	std	Z+53, r20	; 0x35
     fc6:	56 ab       	std	Z+54, r21	; 0x36
     fc8:	67 ab       	std	Z+55, r22	; 0x37
     fca:	70 af       	std	Z+56, r23	; 0x38
}
     fcc:	08 95       	ret

00000fce <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     fce:	e0 91 49 01 	lds	r30, 0x0149
     fd2:	f0 91 4a 01 	lds	r31, 0x014A
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	29 e1       	ldi	r18, 0x19	; 25
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	ac 01       	movw	r20, r24
     fde:	42 9f       	mul	r20, r18
     fe0:	c0 01       	movw	r24, r0
     fe2:	43 9f       	mul	r20, r19
     fe4:	90 0d       	add	r25, r0
     fe6:	52 9f       	mul	r21, r18
     fe8:	90 0d       	add	r25, r0
     fea:	11 24       	eor	r1, r1
     fec:	e8 0f       	add	r30, r24
     fee:	f9 1f       	adc	r31, r25
     ff0:	80 a1       	ldd	r24, Z+32	; 0x20
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	08 95       	ret

00000ff6 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     ff6:	e0 91 49 01 	lds	r30, 0x0149
     ffa:	f0 91 4a 01 	lds	r31, 0x014A
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	29 e1       	ldi	r18, 0x19	; 25
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	ac 01       	movw	r20, r24
    1006:	42 9f       	mul	r20, r18
    1008:	c0 01       	movw	r24, r0
    100a:	43 9f       	mul	r20, r19
    100c:	90 0d       	add	r25, r0
    100e:	52 9f       	mul	r21, r18
    1010:	90 0d       	add	r25, r0
    1012:	11 24       	eor	r1, r1
    1014:	e8 0f       	add	r30, r24
    1016:	f9 1f       	adc	r31, r25
    1018:	80 a1       	ldd	r24, Z+32	; 0x20
    101a:	81 60       	ori	r24, 0x01	; 1
    101c:	80 a3       	std	Z+32, r24	; 0x20
}
    101e:	08 95       	ret

00001020 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1020:	e0 91 49 01 	lds	r30, 0x0149
    1024:	f0 91 4a 01 	lds	r31, 0x014A
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	29 e1       	ldi	r18, 0x19	; 25
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	ac 01       	movw	r20, r24
    1030:	42 9f       	mul	r20, r18
    1032:	c0 01       	movw	r24, r0
    1034:	43 9f       	mul	r20, r19
    1036:	90 0d       	add	r25, r0
    1038:	52 9f       	mul	r21, r18
    103a:	90 0d       	add	r25, r0
    103c:	11 24       	eor	r1, r1
    103e:	e8 0f       	add	r30, r24
    1040:	f9 1f       	adc	r31, r25
    1042:	80 a1       	ldd	r24, Z+32	; 0x20
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	80 a3       	std	Z+32, r24	; 0x20
}
    1048:	08 95       	ret

0000104a <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    104a:	e0 91 49 01 	lds	r30, 0x0149
    104e:	f0 91 4a 01 	lds	r31, 0x014A
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	29 e1       	ldi	r18, 0x19	; 25
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	ac 01       	movw	r20, r24
    105a:	42 9f       	mul	r20, r18
    105c:	c0 01       	movw	r24, r0
    105e:	43 9f       	mul	r20, r19
    1060:	90 0d       	add	r25, r0
    1062:	52 9f       	mul	r21, r18
    1064:	90 0d       	add	r25, r0
    1066:	11 24       	eor	r1, r1
    1068:	e8 0f       	add	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	80 a1       	ldd	r24, Z+32	; 0x20

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    106e:	11 aa       	std	Z+49, r1	; 0x31
    1070:	12 aa       	std	Z+50, r1	; 0x32
    1072:	13 aa       	std	Z+51, r1	; 0x33
    1074:	14 aa       	std	Z+52, r1	; 0x34
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1076:	11 a2       	std	Z+33, r1	; 0x21
    1078:	12 a2       	std	Z+34, r1	; 0x22
    107a:	13 a2       	std	Z+35, r1	; 0x23
    107c:	14 a2       	std	Z+36, r1	; 0x24
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    107e:	15 a2       	std	Z+37, r1	; 0x25
    1080:	16 a2       	std	Z+38, r1	; 0x26
    1082:	17 a2       	std	Z+39, r1	; 0x27
    1084:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    1086:	11 a6       	std	Z+41, r1	; 0x29
    1088:	12 a6       	std	Z+42, r1	; 0x2a
    108a:	13 a6       	std	Z+43, r1	; 0x2b
    108c:	14 a6       	std	Z+44, r1	; 0x2c

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    108e:	15 a6       	std	Z+45, r1	; 0x2d
    1090:	16 a6       	std	Z+46, r1	; 0x2e
    1092:	17 a6       	std	Z+47, r1	; 0x2f
    1094:	10 aa       	std	Z+48, r1	; 0x30
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1096:	15 aa       	std	Z+53, r1	; 0x35
    1098:	16 aa       	std	Z+54, r1	; 0x36
    109a:	17 aa       	std	Z+55, r1	; 0x37
    109c:	10 ae       	std	Z+56, r1	; 0x38
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    109e:	80 7e       	andi	r24, 0xE0	; 224
    10a0:	80 a3       	std	Z+32, r24	; 0x20
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
    10a2:	08 95       	ret

000010a4 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    10a4:	0e 94 25 08 	call	0x104a	; 0x104a <Timebase_UpCounter_SS_Reset>
}
    10a8:	08 95       	ret

000010aa <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10aa:	e0 91 49 01 	lds	r30, 0x0149
    10ae:	f0 91 4a 01 	lds	r31, 0x014A
    10b2:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    10b4:	29 e1       	ldi	r18, 0x19	; 25
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	ac 01       	movw	r20, r24
    10ba:	42 9f       	mul	r20, r18
    10bc:	c0 01       	movw	r24, r0
    10be:	43 9f       	mul	r20, r19
    10c0:	90 0d       	add	r25, r0
    10c2:	52 9f       	mul	r21, r18
    10c4:	90 0d       	add	r25, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	e8 0f       	add	r30, r24
    10ca:	f9 1f       	adc	r31, r25
    10cc:	90 a1       	ldd	r25, Z+32	; 0x20
    10ce:	89 2f       	mov	r24, r25
    10d0:	86 95       	lsr	r24
    10d2:	8f 70       	andi	r24, 0x0F	; 15
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	19 f0       	breq	.+6      	; 0x10de <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    10d8:	91 7e       	andi	r25, 0xE1	; 225
    10da:	92 60       	ori	r25, 0x02	; 2
    10dc:	90 a3       	std	Z+32, r25	; 0x20
    10de:	08 95       	ret

000010e0 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10e0:	e0 91 49 01 	lds	r30, 0x0149
    10e4:	f0 91 4a 01 	lds	r31, 0x014A
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    10ea:	29 e1       	ldi	r18, 0x19	; 25
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	ac 01       	movw	r20, r24
    10f0:	42 9f       	mul	r20, r18
    10f2:	c0 01       	movw	r24, r0
    10f4:	43 9f       	mul	r20, r19
    10f6:	90 0d       	add	r25, r0
    10f8:	52 9f       	mul	r21, r18
    10fa:	90 0d       	add	r25, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	e8 0f       	add	r30, r24
    1100:	f9 1f       	adc	r31, r25
    1102:	90 a1       	ldd	r25, Z+32	; 0x20
    1104:	89 2f       	mov	r24, r25
    1106:	86 95       	lsr	r24
    1108:	8f 70       	andi	r24, 0x0F	; 15
    110a:	82 30       	cpi	r24, 0x02	; 2
    110c:	19 f0       	breq	.+6      	; 0x1114 <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    110e:	91 7e       	andi	r25, 0xE1	; 225
    1110:	94 60       	ori	r25, 0x04	; 4
    1112:	90 a3       	std	Z+32, r25	; 0x20
    1114:	08 95       	ret

00001116 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1116:	2f 92       	push	r2
    1118:	3f 92       	push	r3
    111a:	4f 92       	push	r4
    111c:	5f 92       	push	r5
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	af 92       	push	r10
    1128:	bf 92       	push	r11
    112a:	cf 92       	push	r12
    112c:	df 92       	push	r13
    112e:	ef 92       	push	r14
    1130:	ff 92       	push	r15
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	df 93       	push	r29
    1138:	cf 93       	push	r28
    113a:	00 d0       	rcall	.+0      	; 0x113c <Timebase_UpCounter_SS_Set_Securely+0x26>
    113c:	00 d0       	rcall	.+0      	; 0x113e <Timebase_UpCounter_SS_Set_Securely+0x28>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	4a 01       	movw	r8, r20
    1144:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1146:	20 91 49 01 	lds	r18, 0x0149
    114a:	30 91 4a 01 	lds	r19, 0x014A
    114e:	3c 83       	std	Y+4, r19	; 0x04
    1150:	2b 83       	std	Y+3, r18	; 0x03
    1152:	a8 2f       	mov	r26, r24
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ba 83       	std	Y+2, r27	; 0x02
    1158:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    115a:	89 e1       	ldi	r24, 0x19	; 25
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a8 9f       	mul	r26, r24
    1160:	f0 01       	movw	r30, r0
    1162:	a9 9f       	mul	r26, r25
    1164:	f0 0d       	add	r31, r0
    1166:	b8 9f       	mul	r27, r24
    1168:	f0 0d       	add	r31, r0
    116a:	11 24       	eor	r1, r1
    116c:	e2 0f       	add	r30, r18
    116e:	f3 1f       	adc	r31, r19
    1170:	80 a1       	ldd	r24, Z+32	; 0x20
    1172:	86 95       	lsr	r24
    1174:	8f 70       	andi	r24, 0x0F	; 15
    1176:	09 f0       	breq	.+2      	; 0x117a <Timebase_UpCounter_SS_Set_Securely+0x64>
    1178:	75 c0       	rjmp	.+234    	; 0x1264 <Timebase_UpCounter_SS_Set_Securely+0x14e>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    117a:	11 aa       	std	Z+49, r1	; 0x31
    117c:	12 aa       	std	Z+50, r1	; 0x32
    117e:	13 aa       	std	Z+51, r1	; 0x33
    1180:	14 aa       	std	Z+52, r1	; 0x34

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    1182:	15 a6       	std	Z+45, r1	; 0x2d
    1184:	16 a6       	std	Z+46, r1	; 0x2e
    1186:	17 a6       	std	Z+47, r1	; 0x2f
    1188:	10 aa       	std	Z+48, r1	; 0x30
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    118a:	41 a7       	std	Z+41, r20	; 0x29
    118c:	52 a7       	std	Z+42, r21	; 0x2a
    118e:	63 a7       	std	Z+43, r22	; 0x2b
    1190:	74 a7       	std	Z+44, r23	; 0x2c
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1192:	f9 01       	movw	r30, r18
    1194:	c0 84       	ldd	r12, Z+8	; 0x08
    1196:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1198:	22 84       	ldd	r2, Z+10	; 0x0a
    119a:	33 84       	ldd	r3, Z+11	; 0x0b
    119c:	44 84       	ldd	r4, Z+12	; 0x0c
    119e:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    11a0:	21 81       	ldd	r18, Z+1	; 0x01
    11a2:	32 81       	ldd	r19, Z+2	; 0x02
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	c5 01       	movw	r24, r10
    11aa:	b4 01       	movw	r22, r8
    11ac:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    11b0:	7b 01       	movw	r14, r22
    11b2:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    11b4:	ab 81       	ldd	r26, Y+3	; 0x03
    11b6:	bc 81       	ldd	r27, Y+4	; 0x04
    11b8:	11 96       	adiw	r26, 0x01	; 1
    11ba:	2d 91       	ld	r18, X+
    11bc:	3c 91       	ld	r19, X
    11be:	12 97       	sbiw	r26, 0x02	; 2
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	c5 01       	movw	r24, r10
    11c6:	b4 01       	movw	r22, r8
    11c8:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    11cc:	c9 01       	movw	r24, r18
    11ce:	da 01       	movw	r26, r20
    11d0:	3c 01       	movw	r6, r24
    11d2:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
    11d4:	56 01       	movw	r10, r12
    11d6:	cc 24       	eor	r12, r12
    11d8:	dd 24       	eor	r13, r13
    11da:	ae 0c       	add	r10, r14
    11dc:	bf 1c       	adc	r11, r15
    11de:	c0 1e       	adc	r12, r16
    11e0:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    11e2:	eb 81       	ldd	r30, Y+3	; 0x03
    11e4:	fc 81       	ldd	r31, Y+4	; 0x04
    11e6:	81 81       	ldd	r24, Z+1	; 0x01
    11e8:	92 81       	ldd	r25, Z+2	; 0x02
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	a8 16       	cp	r10, r24
    11f0:	b9 06       	cpc	r11, r25
    11f2:	ca 06       	cpc	r12, r26
    11f4:	db 06       	cpc	r13, r27
    11f6:	94 f0       	brlt	.+36     	; 0x121c <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
    11f8:	08 94       	sec
    11fa:	61 1c       	adc	r6, r1
    11fc:	71 1c       	adc	r7, r1
    11fe:	81 1c       	adc	r8, r1
    1200:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    1202:	21 81       	ldd	r18, Z+1	; 0x01
    1204:	32 81       	ldd	r19, Z+2	; 0x02
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	50 e0       	ldi	r21, 0x00	; 0
    120a:	c6 01       	movw	r24, r12
    120c:	b5 01       	movw	r22, r10
    120e:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    1212:	ac 01       	movw	r20, r24
    1214:	cb 01       	movw	r24, r22
    1216:	da 01       	movw	r26, r20
    1218:	5c 01       	movw	r10, r24
    121a:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    121c:	89 e1       	ldi	r24, 0x19	; 25
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	29 81       	ldd	r18, Y+1	; 0x01
    1222:	3a 81       	ldd	r19, Y+2	; 0x02
    1224:	28 9f       	mul	r18, r24
    1226:	f0 01       	movw	r30, r0
    1228:	29 9f       	mul	r18, r25
    122a:	f0 0d       	add	r31, r0
    122c:	38 9f       	mul	r19, r24
    122e:	f0 0d       	add	r31, r0
    1230:	11 24       	eor	r1, r1
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	e8 0f       	add	r30, r24
    1238:	f9 1f       	adc	r31, r25
    123a:	26 0c       	add	r2, r6
    123c:	37 1c       	adc	r3, r7
    123e:	48 1c       	adc	r4, r8
    1240:	59 1c       	adc	r5, r9
    1242:	21 a2       	std	Z+33, r2	; 0x21
    1244:	32 a2       	std	Z+34, r3	; 0x22
    1246:	43 a2       	std	Z+35, r4	; 0x23
    1248:	54 a2       	std	Z+36, r5	; 0x24
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    124a:	a5 a2       	std	Z+37, r10	; 0x25
    124c:	b6 a2       	std	Z+38, r11	; 0x26
    124e:	c7 a2       	std	Z+39, r12	; 0x27
    1250:	d0 a6       	std	Z+40, r13	; 0x28
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1252:	90 a1       	ldd	r25, Z+32	; 0x20
    1254:	89 2f       	mov	r24, r25
    1256:	86 95       	lsr	r24
    1258:	8f 70       	andi	r24, 0x0F	; 15
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	19 f0       	breq	.+6      	; 0x1264 <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    125e:	91 7e       	andi	r25, 0xE1	; 225
    1260:	92 60       	ori	r25, 0x02	; 2
    1262:	90 a3       	std	Z+32, r25	; 0x20
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	cf 91       	pop	r28
    126e:	df 91       	pop	r29
    1270:	1f 91       	pop	r17
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	df 90       	pop	r13
    127a:	cf 90       	pop	r12
    127c:	bf 90       	pop	r11
    127e:	af 90       	pop	r10
    1280:	9f 90       	pop	r9
    1282:	8f 90       	pop	r8
    1284:	7f 90       	pop	r7
    1286:	6f 90       	pop	r6
    1288:	5f 90       	pop	r5
    128a:	4f 90       	pop	r4
    128c:	3f 90       	pop	r3
    128e:	2f 90       	pop	r2
    1290:	08 95       	ret

00001292 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    1292:	df 92       	push	r13
    1294:	ef 92       	push	r14
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	d8 2e       	mov	r13, r24
    129e:	7a 01       	movw	r14, r20
    12a0:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    12a2:	0e 94 25 08 	call	0x104a	; 0x104a <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    12a6:	8d 2d       	mov	r24, r13
    12a8:	b8 01       	movw	r22, r16
    12aa:	a7 01       	movw	r20, r14
    12ac:	0e 94 8b 08 	call	0x1116	; 0x1116 <Timebase_UpCounter_SS_Set_Securely>
} 
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	08 95       	ret

000012bc <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    12bc:	2f 92       	push	r2
    12be:	3f 92       	push	r3
    12c0:	4f 92       	push	r4
    12c2:	5f 92       	push	r5
    12c4:	6f 92       	push	r6
    12c6:	7f 92       	push	r7
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <Timebase_UpCounter_SS_Update+0x26>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <Timebase_UpCounter_SS_Update+0x28>
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <Timebase_UpCounter_SS_Update+0x2a>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    12ea:	20 90 49 01 	lds	r2, 0x0149
    12ee:	30 90 4a 01 	lds	r3, 0x014A
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3e 83       	std	Y+6, r19	; 0x06
    12f8:	2d 83       	std	Y+5, r18	; 0x05
    12fa:	89 e1       	ldi	r24, 0x19	; 25
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	28 9f       	mul	r18, r24
    1300:	b0 01       	movw	r22, r0
    1302:	29 9f       	mul	r18, r25
    1304:	70 0d       	add	r23, r0
    1306:	38 9f       	mul	r19, r24
    1308:	70 0d       	add	r23, r0
    130a:	11 24       	eor	r1, r1
    130c:	62 0d       	add	r22, r2
    130e:	73 1d       	adc	r23, r3
    1310:	db 01       	movw	r26, r22
    1312:	90 96       	adiw	r26, 0x20	; 32
    1314:	8c 91       	ld	r24, X
    1316:	90 97       	sbiw	r26, 0x20	; 32
    1318:	86 95       	lsr	r24
    131a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	09 f0       	breq	.+2      	; 0x1322 <Timebase_UpCounter_SS_Update+0x66>
    1320:	b3 c0       	rjmp	.+358    	; 0x1488 <Timebase_UpCounter_SS_Update+0x1cc>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1322:	f1 01       	movw	r30, r2
    1324:	22 85       	ldd	r18, Z+10	; 0x0a
    1326:	33 85       	ldd	r19, Z+11	; 0x0b
    1328:	44 85       	ldd	r20, Z+12	; 0x0c
    132a:	55 85       	ldd	r21, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    132c:	80 85       	ldd	r24, Z+8	; 0x08
    132e:	91 85       	ldd	r25, Z+9	; 0x09

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
    1330:	2c 01       	movw	r4, r24
    1332:	66 24       	eor	r6, r6
    1334:	77 24       	eor	r7, r7
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
    1336:	91 96       	adiw	r26, 0x21	; 33
    1338:	8d 90       	ld	r8, X+
    133a:	9d 90       	ld	r9, X+
    133c:	ad 90       	ld	r10, X+
    133e:	bc 90       	ld	r11, X
    1340:	94 97       	sbiw	r26, 0x24	; 36
    1342:	82 1a       	sub	r8, r18
    1344:	93 0a       	sbc	r9, r19
    1346:	a4 0a       	sbc	r10, r20
    1348:	b5 0a       	sbc	r11, r21
    134a:	b7 fe       	sbrs	r11, 7
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <Timebase_UpCounter_SS_Update+0x98>
    134e:	88 24       	eor	r8, r8
    1350:	99 24       	eor	r9, r9
    1352:	54 01       	movw	r10, r8
	if(curr_s < 0){
	  curr_s = 0;
	}
	curr_s *= Timebase->Config.UpdateRate;
    1354:	d1 01       	movw	r26, r2
    1356:	11 96       	adiw	r26, 0x01	; 1
    1358:	2d 91       	ld	r18, X+
    135a:	3c 91       	ld	r19, X
    135c:	12 97       	sbiw	r26, 0x02	; 2
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
    135e:	89 e1       	ldi	r24, 0x19	; 25
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	4d 81       	ldd	r20, Y+5	; 0x05
    1364:	5e 81       	ldd	r21, Y+6	; 0x06
    1366:	48 9f       	mul	r20, r24
    1368:	f0 01       	movw	r30, r0
    136a:	49 9f       	mul	r20, r25
    136c:	f0 0d       	add	r31, r0
    136e:	58 9f       	mul	r21, r24
    1370:	f0 0d       	add	r31, r0
    1372:	11 24       	eor	r1, r1
    1374:	e2 0d       	add	r30, r2
    1376:	f3 1d       	adc	r31, r3
    1378:	e5 a0       	ldd	r14, Z+37	; 0x25
    137a:	f6 a0       	ldd	r15, Z+38	; 0x26
    137c:	07 a1       	ldd	r16, Z+39	; 0x27
    137e:	10 a5       	ldd	r17, Z+40	; 0x28
    1380:	e4 18       	sub	r14, r4
    1382:	f5 08       	sbc	r15, r5
    1384:	06 09       	sbc	r16, r6
    1386:	17 09       	sbc	r17, r7
    1388:	17 ff       	sbrs	r17, 7
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <Timebase_UpCounter_SS_Update+0xd6>
    138c:	ee 24       	eor	r14, r14
    138e:	ff 24       	eor	r15, r15
    1390:	87 01       	movw	r16, r14
	if(curr_ss < 0){
	  curr_ss = 0;
	}
	curr_ss += curr_s;
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	c5 01       	movw	r24, r10
    1398:	b4 01       	movw	r22, r8
    139a:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsi3>
    139e:	6e 0d       	add	r22, r14
    13a0:	7f 1d       	adc	r23, r15
    13a2:	80 1f       	adc	r24, r16
    13a4:	91 1f       	adc	r25, r17

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    13a6:	29 e1       	ldi	r18, 0x19	; 25
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	ad 81       	ldd	r26, Y+5	; 0x05
    13ac:	be 81       	ldd	r27, Y+6	; 0x06
    13ae:	a2 9f       	mul	r26, r18
    13b0:	f0 01       	movw	r30, r0
    13b2:	a3 9f       	mul	r26, r19
    13b4:	f0 0d       	add	r31, r0
    13b6:	b2 9f       	mul	r27, r18
    13b8:	f0 0d       	add	r31, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	e2 0d       	add	r30, r2
    13be:	f3 1d       	adc	r31, r3
    13c0:	65 a7       	std	Z+45, r22	; 0x2d
    13c2:	76 a7       	std	Z+46, r23	; 0x2e
    13c4:	87 a7       	std	Z+47, r24	; 0x2f
    13c6:	90 ab       	std	Z+48, r25	; 0x30
	if(curr_ss < 0){
	  curr_ss = 0;
	}
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    13c8:	21 a5       	ldd	r18, Z+41	; 0x29
    13ca:	32 a5       	ldd	r19, Z+42	; 0x2a
    13cc:	43 a5       	ldd	r20, Z+43	; 0x2b
    13ce:	54 a5       	ldd	r21, Z+44	; 0x2c

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    13d0:	26 1b       	sub	r18, r22
    13d2:	37 0b       	sbc	r19, r23
    13d4:	48 0b       	sbc	r20, r24
    13d6:	59 0b       	sbc	r21, r25
    13d8:	57 ff       	sbrs	r21, 7
    13da:	04 c0       	rjmp	.+8      	; 0x13e4 <Timebase_UpCounter_SS_Update+0x128>
    13dc:	20 e0       	ldi	r18, 0x00	; 0
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	21 ab       	std	Z+49, r18	; 0x31
    13e6:	32 ab       	std	Z+50, r19	; 0x32
    13e8:	43 ab       	std	Z+51, r20	; 0x33
    13ea:	54 ab       	std	Z+52, r21	; 0x34
	  curr_ss = 0;
	}
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    13ec:	89 e1       	ldi	r24, 0x19	; 25
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	ed 81       	ldd	r30, Y+5	; 0x05
    13f2:	fe 81       	ldd	r31, Y+6	; 0x06
    13f4:	e8 9f       	mul	r30, r24
    13f6:	b0 01       	movw	r22, r0
    13f8:	e9 9f       	mul	r30, r25
    13fa:	70 0d       	add	r23, r0
    13fc:	f8 9f       	mul	r31, r24
    13fe:	70 0d       	add	r23, r0
    1400:	11 24       	eor	r1, r1
    1402:	62 0d       	add	r22, r2
    1404:	73 1d       	adc	r23, r3
    1406:	fb 01       	movw	r30, r22
    1408:	85 a5       	ldd	r24, Z+45	; 0x2d
    140a:	96 a5       	ldd	r25, Z+46	; 0x2e
    140c:	a7 a5       	ldd	r26, Z+47	; 0x2f
    140e:	b0 a9       	ldd	r27, Z+48	; 0x30
    1410:	18 16       	cp	r1, r24
    1412:	19 06       	cpc	r1, r25
    1414:	1a 06       	cpc	r1, r26
    1416:	1b 06       	cpc	r1, r27
    1418:	0c f4       	brge	.+2      	; 0x141c <Timebase_UpCounter_SS_Update+0x160>
    141a:	c6 c0       	rjmp	.+396    	; 0x15a8 <Timebase_UpCounter_SS_Update+0x2ec>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    141c:	db 01       	movw	r26, r22
    141e:	91 96       	adiw	r26, 0x21	; 33
    1420:	1d 92       	st	X+, r1
    1422:	1d 92       	st	X+, r1
    1424:	1d 92       	st	X+, r1
    1426:	1c 92       	st	X, r1
    1428:	94 97       	sbiw	r26, 0x24	; 36
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    142a:	15 a2       	std	Z+37, r1	; 0x25
    142c:	16 a2       	std	Z+38, r1	; 0x26
    142e:	17 a2       	std	Z+39, r1	; 0x27
    1430:	10 a6       	std	Z+40, r1	; 0x28

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    1432:	9d 96       	adiw	r26, 0x2d	; 45
    1434:	1d 92       	st	X+, r1
    1436:	1d 92       	st	X+, r1
    1438:	1d 92       	st	X+, r1
    143a:	1c 92       	st	X, r1
    143c:	d0 97       	sbiw	r26, 0x30	; 48
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
    143e:	b9 96       	adiw	r30, 0x29	; 41

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    1440:	99 96       	adiw	r26, 0x29	; 41
    1442:	2c 91       	ld	r18, X
    1444:	31 81       	ldd	r19, Z+1	; 0x01
    1446:	42 81       	ldd	r20, Z+2	; 0x02
    1448:	53 81       	ldd	r21, Z+3	; 0x03
    144a:	c9 01       	movw	r24, r18
    144c:	da 01       	movw	r26, r20
    144e:	b7 ff       	sbrs	r27, 7
    1450:	04 c0       	rjmp	.+8      	; 0x145a <Timebase_UpCounter_SS_Update+0x19e>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	a0 e0       	ldi	r26, 0x00	; 0
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	fb 01       	movw	r30, r22
    145c:	81 ab       	std	Z+49, r24	; 0x31
    145e:	92 ab       	std	Z+50, r25	; 0x32
    1460:	a3 ab       	std	Z+51, r26	; 0x33
    1462:	b4 ab       	std	Z+52, r27	; 0x34
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1464:	89 e1       	ldi	r24, 0x19	; 25
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	2d 81       	ldd	r18, Y+5	; 0x05
    146a:	3e 81       	ldd	r19, Y+6	; 0x06
    146c:	28 9f       	mul	r18, r24
    146e:	f0 01       	movw	r30, r0
    1470:	29 9f       	mul	r18, r25
    1472:	f0 0d       	add	r31, r0
    1474:	38 9f       	mul	r19, r24
    1476:	f0 0d       	add	r31, r0
    1478:	11 24       	eor	r1, r1
    147a:	e2 0d       	add	r30, r2
    147c:	f3 1d       	adc	r31, r3
    147e:	80 a1       	ldd	r24, Z+32	; 0x20
    1480:	81 7e       	andi	r24, 0xE1	; 225
    1482:	88 60       	ori	r24, 0x08	; 8
    1484:	80 a3       	std	Z+32, r24	; 0x20
    1486:	90 c0       	rjmp	.+288    	; 0x15a8 <Timebase_UpCounter_SS_Update+0x2ec>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1488:	82 30       	cpi	r24, 0x02	; 2
    148a:	09 f0       	breq	.+2      	; 0x148e <Timebase_UpCounter_SS_Update+0x1d2>
    148c:	8d c0       	rjmp	.+282    	; 0x15a8 <Timebase_UpCounter_SS_Update+0x2ec>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    148e:	d1 01       	movw	r26, r2
    1490:	1a 96       	adiw	r26, 0x0a	; 10
    1492:	8d 91       	ld	r24, X+
    1494:	9d 91       	ld	r25, X+
    1496:	0d 90       	ld	r0, X+
    1498:	bc 91       	ld	r27, X
    149a:	a0 2d       	mov	r26, r0
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	9a 83       	std	Y+2, r25	; 0x02
    14a0:	ab 83       	std	Y+3, r26	; 0x03
    14a2:	bc 83       	std	Y+4, r27	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    14a4:	f1 01       	movw	r30, r2
    14a6:	80 84       	ldd	r8, Z+8	; 0x08
    14a8:	91 84       	ldd	r9, Z+9	; 0x09
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
    14aa:	db 01       	movw	r26, r22
    14ac:	9d 96       	adiw	r26, 0x2d	; 45
    14ae:	ad 90       	ld	r10, X+
    14b0:	bd 90       	ld	r11, X+
    14b2:	cd 90       	ld	r12, X+
    14b4:	dc 90       	ld	r13, X
    14b6:	d0 97       	sbiw	r26, 0x30	; 48
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	int32_t value = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    14b8:	21 81       	ldd	r18, Z+1	; 0x01
    14ba:	32 81       	ldd	r19, Z+2	; 0x02
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	c6 01       	movw	r24, r12
    14c2:	b5 01       	movw	r22, r10
    14c4:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    14c8:	7b 01       	movw	r14, r22
    14ca:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    14cc:	f1 01       	movw	r30, r2
    14ce:	21 81       	ldd	r18, Z+1	; 0x01
    14d0:	32 81       	ldd	r19, Z+2	; 0x02
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	50 e0       	ldi	r21, 0x00	; 0
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    14de:	c9 01       	movw	r24, r18
    14e0:	da 01       	movw	r26, r20
    14e2:	2c 01       	movw	r4, r24
    14e4:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
    14e6:	aa 24       	eor	r10, r10
    14e8:	bb 24       	eor	r11, r11
    14ea:	8e 0c       	add	r8, r14
    14ec:	9f 1c       	adc	r9, r15
    14ee:	a0 1e       	adc	r10, r16
    14f0:	b1 1e       	adc	r11, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    14f2:	d1 01       	movw	r26, r2
    14f4:	11 96       	adiw	r26, 0x01	; 1
    14f6:	8d 91       	ld	r24, X+
    14f8:	9c 91       	ld	r25, X
    14fa:	12 97       	sbiw	r26, 0x02	; 2
    14fc:	a0 e0       	ldi	r26, 0x00	; 0
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	88 16       	cp	r8, r24
    1502:	99 06       	cpc	r9, r25
    1504:	aa 06       	cpc	r10, r26
    1506:	bb 06       	cpc	r11, r27
    1508:	9c f0       	brlt	.+38     	; 0x1530 <Timebase_UpCounter_SS_Update+0x274>
	  sec_val += 1;
    150a:	08 94       	sec
    150c:	41 1c       	adc	r4, r1
    150e:	51 1c       	adc	r5, r1
    1510:	61 1c       	adc	r6, r1
    1512:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    1514:	f1 01       	movw	r30, r2
    1516:	21 81       	ldd	r18, Z+1	; 0x01
    1518:	32 81       	ldd	r19, Z+2	; 0x02
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	c5 01       	movw	r24, r10
    1520:	b4 01       	movw	r22, r8
    1522:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    1526:	ac 01       	movw	r20, r24
    1528:	cb 01       	movw	r24, r22
    152a:	da 01       	movw	r26, r20
    152c:	4c 01       	movw	r8, r24
    152e:	5d 01       	movw	r10, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	2d 81       	ldd	r18, Y+5	; 0x05
    1536:	3e 81       	ldd	r19, Y+6	; 0x06
    1538:	28 9f       	mul	r18, r24
    153a:	80 01       	movw	r16, r0
    153c:	29 9f       	mul	r18, r25
    153e:	10 0d       	add	r17, r0
    1540:	38 9f       	mul	r19, r24
    1542:	10 0d       	add	r17, r0
    1544:	11 24       	eor	r1, r1
    1546:	02 0d       	add	r16, r2
    1548:	13 1d       	adc	r17, r3
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	ab 81       	ldd	r26, Y+3	; 0x03
    1550:	bc 81       	ldd	r27, Y+4	; 0x04
    1552:	84 0d       	add	r24, r4
    1554:	95 1d       	adc	r25, r5
    1556:	a6 1d       	adc	r26, r6
    1558:	b7 1d       	adc	r27, r7
    155a:	f8 01       	movw	r30, r16
    155c:	81 a3       	std	Z+33, r24	; 0x21
    155e:	92 a3       	std	Z+34, r25	; 0x22
    1560:	a3 a3       	std	Z+35, r26	; 0x23
    1562:	b4 a3       	std	Z+36, r27	; 0x24
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    1564:	d8 01       	movw	r26, r16
    1566:	95 96       	adiw	r26, 0x25	; 37
    1568:	8d 92       	st	X+, r8
    156a:	9d 92       	st	X+, r9
    156c:	ad 92       	st	X+, r10
    156e:	bc 92       	st	X, r11
    1570:	98 97       	sbiw	r26, 0x28	; 40
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
    1572:	99 96       	adiw	r26, 0x29	; 41
    1574:	2d 91       	ld	r18, X+
    1576:	3d 91       	ld	r19, X+
    1578:	4d 91       	ld	r20, X+
    157a:	5c 91       	ld	r21, X
    157c:	9c 97       	sbiw	r26, 0x2c	; 44
    157e:	9d 96       	adiw	r26, 0x2d	; 45
    1580:	8d 91       	ld	r24, X+
    1582:	9d 91       	ld	r25, X+
    1584:	0d 90       	ld	r0, X+
    1586:	bc 91       	ld	r27, X
    1588:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    158a:	28 1b       	sub	r18, r24
    158c:	39 0b       	sbc	r19, r25
    158e:	4a 0b       	sbc	r20, r26
    1590:	5b 0b       	sbc	r21, r27
    1592:	57 ff       	sbrs	r21, 7
    1594:	04 c0       	rjmp	.+8      	; 0x159e <Timebase_UpCounter_SS_Update+0x2e2>
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	f8 01       	movw	r30, r16
    15a0:	21 ab       	std	Z+49, r18	; 0x31
    15a2:	32 ab       	std	Z+50, r19	; 0x32
    15a4:	43 ab       	std	Z+51, r20	; 0x33
    15a6:	54 ab       	std	Z+52, r21	; 0x34
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    15a8:	26 96       	adiw	r28, 0x06	; 6
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	3f 90       	pop	r3
    15d6:	2f 90       	pop	r2
    15d8:	08 95       	ret

000015da <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	e0 91 49 01 	lds	r30, 0x0149
    15e0:	f0 91 4a 01 	lds	r31, 0x014A
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	29 e1       	ldi	r18, 0x19	; 25
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	bc 01       	movw	r22, r24
    15ec:	62 9f       	mul	r22, r18
    15ee:	c0 01       	movw	r24, r0
    15f0:	63 9f       	mul	r22, r19
    15f2:	90 0d       	add	r25, r0
    15f4:	72 9f       	mul	r23, r18
    15f6:	90 0d       	add	r25, r0
    15f8:	11 24       	eor	r1, r1
    15fa:	e8 0f       	add	r30, r24
    15fc:	f9 1f       	adc	r31, r25
    15fe:	80 a1       	ldd	r24, Z+32	; 0x20
    1600:	86 95       	lsr	r24
    1602:	8f 70       	andi	r24, 0x0F	; 15
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	09 f4       	brne	.+2      	; 0x160a <Timebase_UpCounter_SS_Expired+0x30>
    1608:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    160a:	84 2f       	mov	r24, r20
    160c:	08 95       	ret

0000160e <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    160e:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1610:	e0 91 49 01 	lds	r30, 0x0149
    1614:	f0 91 4a 01 	lds	r31, 0x014A
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	89 e1       	ldi	r24, 0x19	; 25
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	bc 01       	movw	r22, r24
    1622:	26 9f       	mul	r18, r22
    1624:	c0 01       	movw	r24, r0
    1626:	27 9f       	mul	r18, r23
    1628:	90 0d       	add	r25, r0
    162a:	36 9f       	mul	r19, r22
    162c:	90 0d       	add	r25, r0
    162e:	11 24       	eor	r1, r1
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	80 a1       	ldd	r24, Z+32	; 0x20
    1636:	86 95       	lsr	r24
    1638:	8f 70       	andi	r24, 0x0F	; 15
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	11 f0       	breq	.+4      	; 0x1642 <Timebase_UpCounter_SS_Expired_Event+0x34>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1642:	84 2f       	mov	r24, r20
    1644:	0e 94 25 08 	call	0x104a	; 0x104a <Timebase_UpCounter_SS_Reset>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    164a:	08 95       	ret

0000164c <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    164c:	e0 91 49 01 	lds	r30, 0x0149
    1650:	f0 91 4a 01 	lds	r31, 0x014A
    1654:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1656:	29 e1       	ldi	r18, 0x19	; 25
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	dc 01       	movw	r26, r24
    165c:	a2 9f       	mul	r26, r18
    165e:	c0 01       	movw	r24, r0
    1660:	a3 9f       	mul	r26, r19
    1662:	90 0d       	add	r25, r0
    1664:	b2 9f       	mul	r27, r18
    1666:	90 0d       	add	r25, r0
    1668:	11 24       	eor	r1, r1
    166a:	e8 0f       	add	r30, r24
    166c:	f9 1f       	adc	r31, r25
    166e:	80 a1       	ldd	r24, Z+32	; 0x20
    1670:	80 fd       	sbrc	r24, 0
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1674:	81 a9       	ldd	r24, Z+49	; 0x31
    1676:	92 a9       	ldd	r25, Z+50	; 0x32
    1678:	a3 a9       	ldd	r26, Z+51	; 0x33
    167a:	b4 a9       	ldd	r27, Z+52	; 0x34
    167c:	84 0f       	add	r24, r20
    167e:	95 1f       	adc	r25, r21
    1680:	a6 1f       	adc	r26, r22
    1682:	b7 1f       	adc	r27, r23
    1684:	85 ab       	std	Z+53, r24	; 0x35
    1686:	96 ab       	std	Z+54, r25	; 0x36
    1688:	a7 ab       	std	Z+55, r26	; 0x37
    168a:	b0 af       	std	Z+56, r27	; 0x38
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    168c:	80 a1       	ldd	r24, Z+32	; 0x20
    168e:	81 60       	ori	r24, 0x01	; 1
    1690:	80 a3       	std	Z+32, r24	; 0x20
    1692:	08 95       	ret

00001694 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1694:	e0 91 49 01 	lds	r30, 0x0149
    1698:	f0 91 4a 01 	lds	r31, 0x014A
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	29 e1       	ldi	r18, 0x19	; 25
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	ac 01       	movw	r20, r24
    16a4:	42 9f       	mul	r20, r18
    16a6:	c0 01       	movw	r24, r0
    16a8:	43 9f       	mul	r20, r19
    16aa:	90 0d       	add	r25, r0
    16ac:	52 9f       	mul	r21, r18
    16ae:	90 0d       	add	r25, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	e8 0f       	add	r30, r24
    16b4:	f9 1f       	adc	r31, r25
    16b6:	25 a9       	ldd	r18, Z+53	; 0x35
    16b8:	36 a9       	ldd	r19, Z+54	; 0x36
    16ba:	47 a9       	ldd	r20, Z+55	; 0x37
    16bc:	50 ad       	ldd	r21, Z+56	; 0x38
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    16be:	81 a9       	ldd	r24, Z+49	; 0x31
    16c0:	92 a9       	ldd	r25, Z+50	; 0x32
    16c2:	a3 a9       	ldd	r26, Z+51	; 0x33
    16c4:	b4 a9       	ldd	r27, Z+52	; 0x34
    16c6:	28 1b       	sub	r18, r24
    16c8:	39 0b       	sbc	r19, r25
    16ca:	4a 0b       	sbc	r20, r26
    16cc:	5b 0b       	sbc	r21, r27
    16ce:	57 ff       	sbrs	r21, 7
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    16da:	b9 01       	movw	r22, r18
    16dc:	ca 01       	movw	r24, r20
    16de:	08 95       	ret

000016e0 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    16e4:	c0 91 49 01 	lds	r28, 0x0149
    16e8:	d0 91 4a 01 	lds	r29, 0x014A
    16ec:	68 2f       	mov	r22, r24
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	89 e1       	ldi	r24, 0x19	; 25
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	68 9f       	mul	r22, r24
    16f6:	f0 01       	movw	r30, r0
    16f8:	69 9f       	mul	r22, r25
    16fa:	f0 0d       	add	r31, r0
    16fc:	78 9f       	mul	r23, r24
    16fe:	f0 0d       	add	r31, r0
    1700:	11 24       	eor	r1, r1
    1702:	ec 0f       	add	r30, r28
    1704:	fd 1f       	adc	r31, r29
    1706:	25 a9       	ldd	r18, Z+53	; 0x35
    1708:	36 a9       	ldd	r19, Z+54	; 0x36
    170a:	47 a9       	ldd	r20, Z+55	; 0x37
    170c:	50 ad       	ldd	r21, Z+56	; 0x38
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    170e:	81 a9       	ldd	r24, Z+49	; 0x31
    1710:	92 a9       	ldd	r25, Z+50	; 0x32
    1712:	a3 a9       	ldd	r26, Z+51	; 0x33
    1714:	b4 a9       	ldd	r27, Z+52	; 0x34
    1716:	28 1b       	sub	r18, r24
    1718:	39 0b       	sbc	r19, r25
    171a:	4a 0b       	sbc	r20, r26
    171c:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    171e:	57 fd       	sbrc	r21, 7
    1720:	07 c0       	rjmp	.+14     	; 0x1730 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1722:	21 15       	cp	r18, r1
    1724:	31 05       	cpc	r19, r1
    1726:	41 05       	cpc	r20, r1
    1728:	51 05       	cpc	r21, r1
    172a:	11 f0       	breq	.+4      	; 0x1730 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	12 c0       	rjmp	.+36     	; 0x1754 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	89 e1       	ldi	r24, 0x19	; 25
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	ac 01       	movw	r20, r24
    1738:	64 9f       	mul	r22, r20
    173a:	c0 01       	movw	r24, r0
    173c:	65 9f       	mul	r22, r21
    173e:	90 0d       	add	r25, r0
    1740:	74 9f       	mul	r23, r20
    1742:	90 0d       	add	r25, r0
    1744:	11 24       	eor	r1, r1
    1746:	c8 0f       	add	r28, r24
    1748:	d9 1f       	adc	r29, r25
    174a:	88 a1       	ldd	r24, Y+32	; 0x20
    174c:	80 ff       	sbrs	r24, 0
    174e:	21 e0       	ldi	r18, 0x01	; 1
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1754:	82 2f       	mov	r24, r18
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    175c:	1f 93       	push	r17
    175e:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1760:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <Timebase_UpCounter_SS_Period_Value_Expired>
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	11 f0       	breq	.+4      	; 0x176c <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	16 c0       	rjmp	.+44     	; 0x1798 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    176c:	e0 91 49 01 	lds	r30, 0x0149
    1770:	f0 91 4a 01 	lds	r31, 0x014A
    1774:	21 2f       	mov	r18, r17
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	89 e1       	ldi	r24, 0x19	; 25
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	ac 01       	movw	r20, r24
    177e:	24 9f       	mul	r18, r20
    1780:	c0 01       	movw	r24, r0
    1782:	25 9f       	mul	r18, r21
    1784:	90 0d       	add	r25, r0
    1786:	34 9f       	mul	r19, r20
    1788:	90 0d       	add	r25, r0
    178a:	11 24       	eor	r1, r1
    178c:	e8 0f       	add	r30, r24
    178e:	f9 1f       	adc	r31, r25
    1790:	80 a1       	ldd	r24, Z+32	; 0x20
    1792:	8e 7f       	andi	r24, 0xFE	; 254
    1794:	80 a3       	std	Z+32, r24	; 0x20
    1796:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1798:	1f 91       	pop	r17
    179a:	08 95       	ret

0000179c <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <Timebase_UpCounter_SS_Update>
  }
}
    17a2:	08 95       	ret

000017a4 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	0e 94 25 08 	call	0x104a	; 0x104a <Timebase_UpCounter_SS_Reset>
  }
}
    17aa:	08 95       	ret

000017ac <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    17ac:	e0 91 49 01 	lds	r30, 0x0149
    17b0:	f0 91 4a 01 	lds	r31, 0x014A
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	25 e1       	ldi	r18, 0x15	; 21
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	ac 01       	movw	r20, r24
    17bc:	42 9f       	mul	r20, r18
    17be:	c0 01       	movw	r24, r0
    17c0:	43 9f       	mul	r20, r19
    17c2:	90 0d       	add	r25, r0
    17c4:	52 9f       	mul	r21, r18
    17c6:	90 0d       	add	r25, r0
    17c8:	11 24       	eor	r1, r1
    17ca:	e8 0f       	add	r30, r24
    17cc:	f9 1f       	adc	r31, r25
    17ce:	81 ad       	ldd	r24, Z+57	; 0x39
    17d0:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    17d2:	8f 70       	andi	r24, 0x0F	; 15
    17d4:	08 95       	ret

000017d6 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    17d6:	e0 91 49 01 	lds	r30, 0x0149
    17da:	f0 91 4a 01 	lds	r31, 0x014A
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	25 e1       	ldi	r18, 0x15	; 21
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	ac 01       	movw	r20, r24
    17e6:	42 9f       	mul	r20, r18
    17e8:	c0 01       	movw	r24, r0
    17ea:	43 9f       	mul	r20, r19
    17ec:	90 0d       	add	r25, r0
    17ee:	52 9f       	mul	r21, r18
    17f0:	90 0d       	add	r25, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	e8 0f       	add	r30, r24
    17f6:	f9 1f       	adc	r31, r25
    17f8:	6f 70       	andi	r22, 0x0F	; 15
    17fa:	66 0f       	add	r22, r22
    17fc:	81 ad       	ldd	r24, Z+57	; 0x39
    17fe:	81 7e       	andi	r24, 0xE1	; 225
    1800:	86 2b       	or	r24, r22
    1802:	81 af       	std	Z+57, r24	; 0x39
}
    1804:	08 95       	ret

00001806 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1806:	e0 91 49 01 	lds	r30, 0x0149
    180a:	f0 91 4a 01 	lds	r31, 0x014A
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	25 e1       	ldi	r18, 0x15	; 21
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	ac 01       	movw	r20, r24
    1816:	42 9f       	mul	r20, r18
    1818:	c0 01       	movw	r24, r0
    181a:	43 9f       	mul	r20, r19
    181c:	90 0d       	add	r25, r0
    181e:	52 9f       	mul	r21, r18
    1820:	90 0d       	add	r25, r0
    1822:	11 24       	eor	r1, r1
    1824:	e8 0f       	add	r30, r24
    1826:	f9 1f       	adc	r31, r25
    1828:	ea 5b       	subi	r30, 0xBA	; 186
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	08 95       	ret

00001836 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    183a:	c0 91 49 01 	lds	r28, 0x0149
    183e:	d0 91 4a 01 	lds	r29, 0x014A
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	25 e1       	ldi	r18, 0x15	; 21
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	fc 01       	movw	r30, r24
    184a:	e2 9f       	mul	r30, r18
    184c:	c0 01       	movw	r24, r0
    184e:	e3 9f       	mul	r30, r19
    1850:	90 0d       	add	r25, r0
    1852:	f2 9f       	mul	r31, r18
    1854:	90 0d       	add	r25, r0
    1856:	11 24       	eor	r1, r1
    1858:	c8 0f       	add	r28, r24
    185a:	d9 1f       	adc	r29, r25
    185c:	ca 5b       	subi	r28, 0xBA	; 186
    185e:	df 4f       	sbci	r29, 0xFF	; 255
    1860:	ca 01       	movw	r24, r20
    1862:	db 01       	movw	r26, r22
    1864:	b7 ff       	sbrs	r27, 7
    1866:	04 c0       	rjmp	.+8      	; 0x1870 <Timebase_UpCounter_Set_Value+0x3a>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	88 83       	st	Y, r24
    1872:	99 83       	std	Y+1, r25	; 0x01
    1874:	aa 83       	std	Y+2, r26	; 0x02
    1876:	bb 83       	std	Y+3, r27	; 0x03
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    187e:	e0 91 49 01 	lds	r30, 0x0149
    1882:	f0 91 4a 01 	lds	r31, 0x014A
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	25 e1       	ldi	r18, 0x15	; 21
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	ac 01       	movw	r20, r24
    188e:	42 9f       	mul	r20, r18
    1890:	c0 01       	movw	r24, r0
    1892:	43 9f       	mul	r20, r19
    1894:	90 0d       	add	r25, r0
    1896:	52 9f       	mul	r21, r18
    1898:	90 0d       	add	r25, r0
    189a:	11 24       	eor	r1, r1
    189c:	e8 0f       	add	r30, r24
    189e:	f9 1f       	adc	r31, r25
    18a0:	df 01       	movw	r26, r30
    18a2:	da 96       	adiw	r26, 0x3a	; 58
    18a4:	62 ad       	ldd	r22, Z+58	; 0x3a
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	7c 91       	ld	r23, X
    18aa:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    18ac:	12 96       	adiw	r26, 0x02	; 2
    18ae:	8c 91       	ld	r24, X
    18b0:	12 97       	sbiw	r26, 0x02	; 2
    18b2:	13 96       	adiw	r26, 0x03	; 3
    18b4:	9c 91       	ld	r25, X
    18b6:	08 95       	ret

000018b8 <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    18b8:	e0 91 49 01 	lds	r30, 0x0149
    18bc:	f0 91 4a 01 	lds	r31, 0x014A
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	25 e1       	ldi	r18, 0x15	; 21
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	ac 01       	movw	r20, r24
    18c8:	42 9f       	mul	r20, r18
    18ca:	c0 01       	movw	r24, r0
    18cc:	43 9f       	mul	r20, r19
    18ce:	90 0d       	add	r25, r0
    18d0:	52 9f       	mul	r21, r18
    18d2:	90 0d       	add	r25, r0
    18d4:	11 24       	eor	r1, r1
    18d6:	e8 0f       	add	r30, r24
    18d8:	f9 1f       	adc	r31, r25
    18da:	df 01       	movw	r26, r30
    18dc:	da 96       	adiw	r26, 0x3a	; 58
    18de:	62 ad       	ldd	r22, Z+58	; 0x3a
    18e0:	11 96       	adiw	r26, 0x01	; 1
    18e2:	7c 91       	ld	r23, X
    18e4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	8c 91       	ld	r24, X
    18ea:	12 97       	sbiw	r26, 0x02	; 2
    18ec:	13 96       	adiw	r26, 0x03	; 3
    18ee:	9c 91       	ld	r25, X
    18f0:	08 95       	ret

000018f2 <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    18f2:	e0 91 49 01 	lds	r30, 0x0149
    18f6:	f0 91 4a 01 	lds	r31, 0x014A
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	25 e1       	ldi	r18, 0x15	; 21
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	dc 01       	movw	r26, r24
    1902:	a2 9f       	mul	r26, r18
    1904:	c0 01       	movw	r24, r0
    1906:	a3 9f       	mul	r26, r19
    1908:	90 0d       	add	r25, r0
    190a:	b2 9f       	mul	r27, r18
    190c:	90 0d       	add	r25, r0
    190e:	11 24       	eor	r1, r1
    1910:	e8 0f       	add	r30, r24
    1912:	f9 1f       	adc	r31, r25
    1914:	42 af       	std	Z+58, r20	; 0x3a
    1916:	53 af       	std	Z+59, r21	; 0x3b
    1918:	64 af       	std	Z+60, r22	; 0x3c
    191a:	75 af       	std	Z+61, r23	; 0x3d
}
    191c:	08 95       	ret

0000191e <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    191e:	e0 91 49 01 	lds	r30, 0x0149
    1922:	f0 91 4a 01 	lds	r31, 0x014A
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	25 e1       	ldi	r18, 0x15	; 21
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	dc 01       	movw	r26, r24
    192e:	a2 9f       	mul	r26, r18
    1930:	c0 01       	movw	r24, r0
    1932:	a3 9f       	mul	r26, r19
    1934:	90 0d       	add	r25, r0
    1936:	b2 9f       	mul	r27, r18
    1938:	90 0d       	add	r25, r0
    193a:	11 24       	eor	r1, r1
    193c:	e8 0f       	add	r30, r24
    193e:	f9 1f       	adc	r31, r25
    1940:	42 af       	std	Z+58, r20	; 0x3a
    1942:	53 af       	std	Z+59, r21	; 0x3b
    1944:	64 af       	std	Z+60, r22	; 0x3c
    1946:	75 af       	std	Z+61, r23	; 0x3d
}
    1948:	08 95       	ret

0000194a <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    194a:	e0 91 49 01 	lds	r30, 0x0149
    194e:	f0 91 4a 01 	lds	r31, 0x014A
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	25 e1       	ldi	r18, 0x15	; 21
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	ac 01       	movw	r20, r24
    195a:	42 9f       	mul	r20, r18
    195c:	c0 01       	movw	r24, r0
    195e:	43 9f       	mul	r20, r19
    1960:	90 0d       	add	r25, r0
    1962:	52 9f       	mul	r21, r18
    1964:	90 0d       	add	r25, r0
    1966:	11 24       	eor	r1, r1
    1968:	e8 0f       	add	r30, r24
    196a:	f9 1f       	adc	r31, r25
    196c:	fe 96       	adiw	r30, 0x3e	; 62
    196e:	60 81       	ld	r22, Z
    1970:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Target;
}
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	08 95       	ret

00001978 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1978:	e0 91 49 01 	lds	r30, 0x0149
    197c:	f0 91 4a 01 	lds	r31, 0x014A
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	25 e1       	ldi	r18, 0x15	; 21
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	dc 01       	movw	r26, r24
    1988:	a2 9f       	mul	r26, r18
    198a:	c0 01       	movw	r24, r0
    198c:	a3 9f       	mul	r26, r19
    198e:	90 0d       	add	r25, r0
    1990:	b2 9f       	mul	r27, r18
    1992:	90 0d       	add	r25, r0
    1994:	11 24       	eor	r1, r1
    1996:	e8 0f       	add	r30, r24
    1998:	f9 1f       	adc	r31, r25
    199a:	fe 96       	adiw	r30, 0x3e	; 62
    199c:	40 83       	st	Z, r20
    199e:	51 83       	std	Z+1, r21	; 0x01
    19a0:	62 83       	std	Z+2, r22	; 0x02
    19a2:	73 83       	std	Z+3, r23	; 0x03
}
    19a4:	08 95       	ret

000019a6 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    19a6:	e0 91 49 01 	lds	r30, 0x0149
    19aa:	f0 91 4a 01 	lds	r31, 0x014A
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	25 e1       	ldi	r18, 0x15	; 21
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	ac 01       	movw	r20, r24
    19b6:	42 9f       	mul	r20, r18
    19b8:	c0 01       	movw	r24, r0
    19ba:	43 9f       	mul	r20, r19
    19bc:	90 0d       	add	r25, r0
    19be:	52 9f       	mul	r21, r18
    19c0:	90 0d       	add	r25, r0
    19c2:	11 24       	eor	r1, r1
    19c4:	e8 0f       	add	r30, r24
    19c6:	f9 1f       	adc	r31, r25
    19c8:	ee 5b       	subi	r30, 0xBE	; 190
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	08 95       	ret

000019d6 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    19da:	c0 91 49 01 	lds	r28, 0x0149
    19de:	d0 91 4a 01 	lds	r29, 0x014A
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	25 e1       	ldi	r18, 0x15	; 21
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	fc 01       	movw	r30, r24
    19ea:	e2 9f       	mul	r30, r18
    19ec:	c0 01       	movw	r24, r0
    19ee:	e3 9f       	mul	r30, r19
    19f0:	90 0d       	add	r25, r0
    19f2:	f2 9f       	mul	r31, r18
    19f4:	90 0d       	add	r25, r0
    19f6:	11 24       	eor	r1, r1
    19f8:	c8 0f       	add	r28, r24
    19fa:	d9 1f       	adc	r29, r25
    19fc:	ce 5b       	subi	r28, 0xBE	; 190
    19fe:	df 4f       	sbci	r29, 0xFF	; 255
    1a00:	ca 01       	movw	r24, r20
    1a02:	db 01       	movw	r26, r22
    1a04:	b7 ff       	sbrs	r27, 7
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <Timebase_UpCounter_Set_TemporaryValue+0x3a>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	88 83       	st	Y, r24
    1a12:	99 83       	std	Y+1, r25	; 0x01
    1a14:	aa 83       	std	Y+2, r26	; 0x02
    1a16:	bb 83       	std	Y+3, r27	; 0x03
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1a1e:	e0 91 49 01 	lds	r30, 0x0149
    1a22:	f0 91 4a 01 	lds	r31, 0x014A
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	25 e1       	ldi	r18, 0x15	; 21
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	ac 01       	movw	r20, r24
    1a2e:	42 9f       	mul	r20, r18
    1a30:	c0 01       	movw	r24, r0
    1a32:	43 9f       	mul	r20, r19
    1a34:	90 0d       	add	r25, r0
    1a36:	52 9f       	mul	r21, r18
    1a38:	90 0d       	add	r25, r0
    1a3a:	11 24       	eor	r1, r1
    1a3c:	e8 0f       	add	r30, r24
    1a3e:	f9 1f       	adc	r31, r25
    1a40:	e6 5b       	subi	r30, 0xB6	; 182
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	08 95       	ret

00001a4e <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1a4e:	e0 91 49 01 	lds	r30, 0x0149
    1a52:	f0 91 4a 01 	lds	r31, 0x014A
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	25 e1       	ldi	r18, 0x15	; 21
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	a2 9f       	mul	r26, r18
    1a60:	c0 01       	movw	r24, r0
    1a62:	a3 9f       	mul	r26, r19
    1a64:	90 0d       	add	r25, r0
    1a66:	b2 9f       	mul	r27, r18
    1a68:	90 0d       	add	r25, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	e8 0f       	add	r30, r24
    1a6e:	f9 1f       	adc	r31, r25
    1a70:	e6 5b       	subi	r30, 0xB6	; 182
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	40 83       	st	Z, r20
    1a76:	51 83       	std	Z+1, r21	; 0x01
    1a78:	62 83       	std	Z+2, r22	; 0x02
    1a7a:	73 83       	std	Z+3, r23	; 0x03
}
    1a7c:	08 95       	ret

00001a7e <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    1a7e:	e0 91 49 01 	lds	r30, 0x0149
    1a82:	f0 91 4a 01 	lds	r31, 0x014A
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	25 e1       	ldi	r18, 0x15	; 21
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	ac 01       	movw	r20, r24
    1a8e:	42 9f       	mul	r20, r18
    1a90:	c0 01       	movw	r24, r0
    1a92:	43 9f       	mul	r20, r19
    1a94:	90 0d       	add	r25, r0
    1a96:	52 9f       	mul	r21, r18
    1a98:	90 0d       	add	r25, r0
    1a9a:	11 24       	eor	r1, r1
    1a9c:	e8 0f       	add	r30, r24
    1a9e:	f9 1f       	adc	r31, r25
    1aa0:	81 ad       	ldd	r24, Z+57	; 0x39
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    1aa2:	81 70       	andi	r24, 0x01	; 1
    1aa4:	08 95       	ret

00001aa6 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1aa6:	e0 91 49 01 	lds	r30, 0x0149
    1aaa:	f0 91 4a 01 	lds	r31, 0x014A
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	25 e1       	ldi	r18, 0x15	; 21
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	42 9f       	mul	r20, r18
    1ab8:	c0 01       	movw	r24, r0
    1aba:	43 9f       	mul	r20, r19
    1abc:	90 0d       	add	r25, r0
    1abe:	52 9f       	mul	r21, r18
    1ac0:	90 0d       	add	r25, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f9 1f       	adc	r31, r25
    1ac8:	81 ad       	ldd	r24, Z+57	; 0x39
    1aca:	81 60       	ori	r24, 0x01	; 1
    1acc:	81 af       	std	Z+57, r24	; 0x39
}
    1ace:	08 95       	ret

00001ad0 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ad0:	e0 91 49 01 	lds	r30, 0x0149
    1ad4:	f0 91 4a 01 	lds	r31, 0x014A
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	25 e1       	ldi	r18, 0x15	; 21
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	ac 01       	movw	r20, r24
    1ae0:	42 9f       	mul	r20, r18
    1ae2:	c0 01       	movw	r24, r0
    1ae4:	43 9f       	mul	r20, r19
    1ae6:	90 0d       	add	r25, r0
    1ae8:	52 9f       	mul	r21, r18
    1aea:	90 0d       	add	r25, r0
    1aec:	11 24       	eor	r1, r1
    1aee:	e8 0f       	add	r30, r24
    1af0:	f9 1f       	adc	r31, r25
    1af2:	81 ad       	ldd	r24, Z+57	; 0x39
    1af4:	8e 7f       	andi	r24, 0xFE	; 254
    1af6:	81 af       	std	Z+57, r24	; 0x39
}
    1af8:	08 95       	ret

00001afa <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1afa:	e0 91 49 01 	lds	r30, 0x0149
    1afe:	f0 91 4a 01 	lds	r31, 0x014A
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	25 e1       	ldi	r18, 0x15	; 21
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	ac 01       	movw	r20, r24
    1b0a:	42 9f       	mul	r20, r18
    1b0c:	c0 01       	movw	r24, r0
    1b0e:	43 9f       	mul	r20, r19
    1b10:	90 0d       	add	r25, r0
    1b12:	52 9f       	mul	r21, r18
    1b14:	90 0d       	add	r25, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	e8 0f       	add	r30, r24
    1b1a:	f9 1f       	adc	r31, r25
    1b1c:	81 ad       	ldd	r24, Z+57	; 0x39

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1b1e:	ea 5b       	subi	r30, 0xBA	; 186
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	10 82       	st	Z, r1
    1b24:	11 82       	std	Z+1, r1	; 0x01
    1b26:	12 82       	std	Z+2, r1	; 0x02
    1b28:	13 82       	std	Z+3, r1	; 0x03
    1b2a:	e6 54       	subi	r30, 0x46	; 70
    1b2c:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1b2e:	12 ae       	std	Z+58, r1	; 0x3a
    1b30:	13 ae       	std	Z+59, r1	; 0x3b
    1b32:	14 ae       	std	Z+60, r1	; 0x3c
    1b34:	15 ae       	std	Z+61, r1	; 0x3d
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1b36:	fe 96       	adiw	r30, 0x3e	; 62
    1b38:	11 92       	st	Z+, r1
    1b3a:	11 92       	st	Z+, r1
    1b3c:	11 92       	st	Z+, r1
    1b3e:	11 92       	st	Z+, r1

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1b40:	10 82       	st	Z, r1
    1b42:	11 82       	std	Z+1, r1	; 0x01
    1b44:	12 82       	std	Z+2, r1	; 0x02
    1b46:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1b48:	38 96       	adiw	r30, 0x08	; 8
    1b4a:	10 82       	st	Z, r1
    1b4c:	11 82       	std	Z+1, r1	; 0x01
    1b4e:	12 82       	std	Z+2, r1	; 0x02
    1b50:	13 82       	std	Z+3, r1	; 0x03
    1b52:	ea 54       	subi	r30, 0x4A	; 74
    1b54:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1b56:	80 7e       	andi	r24, 0xE0	; 224
    1b58:	81 af       	std	Z+57, r24	; 0x39
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    1b5a:	08 95       	ret

00001b5c <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1b5c:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Timebase_UpCounter_Reset>
}
    1b60:	08 95       	ret

00001b62 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1b62:	e0 91 49 01 	lds	r30, 0x0149
    1b66:	f0 91 4a 01 	lds	r31, 0x014A
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1b6c:	25 e1       	ldi	r18, 0x15	; 21
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	ac 01       	movw	r20, r24
    1b72:	42 9f       	mul	r20, r18
    1b74:	c0 01       	movw	r24, r0
    1b76:	43 9f       	mul	r20, r19
    1b78:	90 0d       	add	r25, r0
    1b7a:	52 9f       	mul	r21, r18
    1b7c:	90 0d       	add	r25, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	e8 0f       	add	r30, r24
    1b82:	f9 1f       	adc	r31, r25
    1b84:	91 ad       	ldd	r25, Z+57	; 0x39
    1b86:	89 2f       	mov	r24, r25
    1b88:	86 95       	lsr	r24
    1b8a:	8f 70       	andi	r24, 0x0F	; 15
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	19 f0       	breq	.+6      	; 0x1b96 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1b90:	91 7e       	andi	r25, 0xE1	; 225
    1b92:	92 60       	ori	r25, 0x02	; 2
    1b94:	91 af       	std	Z+57, r25	; 0x39
    1b96:	08 95       	ret

00001b98 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1b98:	e0 91 49 01 	lds	r30, 0x0149
    1b9c:	f0 91 4a 01 	lds	r31, 0x014A
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1ba2:	25 e1       	ldi	r18, 0x15	; 21
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	ac 01       	movw	r20, r24
    1ba8:	42 9f       	mul	r20, r18
    1baa:	c0 01       	movw	r24, r0
    1bac:	43 9f       	mul	r20, r19
    1bae:	90 0d       	add	r25, r0
    1bb0:	52 9f       	mul	r21, r18
    1bb2:	90 0d       	add	r25, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	e8 0f       	add	r30, r24
    1bb8:	f9 1f       	adc	r31, r25
    1bba:	91 ad       	ldd	r25, Z+57	; 0x39
    1bbc:	89 2f       	mov	r24, r25
    1bbe:	86 95       	lsr	r24
    1bc0:	8f 70       	andi	r24, 0x0F	; 15
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	19 f0       	breq	.+6      	; 0x1bcc <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1bc6:	91 7e       	andi	r25, 0xE1	; 225
    1bc8:	94 60       	ori	r25, 0x04	; 4
    1bca:	91 af       	std	Z+57, r25	; 0x39
    1bcc:	08 95       	ret

00001bce <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1bce:	a0 91 49 01 	lds	r26, 0x0149
    1bd2:	b0 91 4a 01 	lds	r27, 0x014A
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1bd8:	25 e1       	ldi	r18, 0x15	; 21
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	82 9f       	mul	r24, r18
    1bde:	f0 01       	movw	r30, r0
    1be0:	83 9f       	mul	r24, r19
    1be2:	f0 0d       	add	r31, r0
    1be4:	92 9f       	mul	r25, r18
    1be6:	f0 0d       	add	r31, r0
    1be8:	11 24       	eor	r1, r1
    1bea:	ea 0f       	add	r30, r26
    1bec:	fb 1f       	adc	r31, r27
    1bee:	81 ad       	ldd	r24, Z+57	; 0x39
    1bf0:	86 95       	lsr	r24
    1bf2:	8f 70       	andi	r24, 0x0F	; 15
    1bf4:	31 f5       	brne	.+76     	; 0x1c42 <Timebase_UpCounter_Set_Securely+0x74>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1bf6:	ea 5b       	subi	r30, 0xBA	; 186
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	10 82       	st	Z, r1
    1bfc:	11 82       	std	Z+1, r1	; 0x01
    1bfe:	12 82       	std	Z+2, r1	; 0x02
    1c00:	13 82       	std	Z+3, r1	; 0x03

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1c02:	12 92       	st	-Z, r1
    1c04:	12 92       	st	-Z, r1
    1c06:	12 92       	st	-Z, r1
    1c08:	12 92       	st	-Z, r1
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1c0a:	72 93       	st	-Z, r23
    1c0c:	62 93       	st	-Z, r22
    1c0e:	52 93       	st	-Z, r21
    1c10:	42 93       	st	-Z, r20
    1c12:	fe 97       	sbiw	r30, 0x3e	; 62
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1c14:	1a 96       	adiw	r26, 0x0a	; 10
    1c16:	8d 91       	ld	r24, X+
    1c18:	9d 91       	ld	r25, X+
    1c1a:	0d 90       	ld	r0, X+
    1c1c:	bc 91       	ld	r27, X
    1c1e:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1c20:	84 0f       	add	r24, r20
    1c22:	95 1f       	adc	r25, r21
    1c24:	a6 1f       	adc	r26, r22
    1c26:	b7 1f       	adc	r27, r23
    1c28:	82 af       	std	Z+58, r24	; 0x3a
    1c2a:	93 af       	std	Z+59, r25	; 0x3b
    1c2c:	a4 af       	std	Z+60, r26	; 0x3c
    1c2e:	b5 af       	std	Z+61, r27	; 0x3d
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1c30:	91 ad       	ldd	r25, Z+57	; 0x39
    1c32:	89 2f       	mov	r24, r25
    1c34:	86 95       	lsr	r24
    1c36:	8f 70       	andi	r24, 0x0F	; 15
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <Timebase_UpCounter_Set_Securely+0x74>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1c3c:	91 7e       	andi	r25, 0xE1	; 225
    1c3e:	92 60       	ori	r25, 0x02	; 2
    1c40:	91 af       	std	Z+57, r25	; 0x39
    1c42:	08 95       	ret

00001c44 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	d8 2e       	mov	r13, r24
    1c50:	7a 01       	movw	r14, r20
    1c52:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    1c54:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    1c58:	8d 2d       	mov	r24, r13
    1c5a:	b8 01       	movw	r22, r16
    1c5c:	a7 01       	movw	r20, r14
    1c5e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Timebase_UpCounter_Set_Securely>
} 
    1c62:	1f 91       	pop	r17
    1c64:	0f 91       	pop	r16
    1c66:	ff 90       	pop	r15
    1c68:	ef 90       	pop	r14
    1c6a:	df 90       	pop	r13
    1c6c:	08 95       	ret

00001c6e <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1c76:	60 91 49 01 	lds	r22, 0x0149
    1c7a:	70 91 4a 01 	lds	r23, 0x014A
    1c7e:	08 2f       	mov	r16, r24
    1c80:	10 e0       	ldi	r17, 0x00	; 0
    1c82:	85 e1       	ldi	r24, 0x15	; 21
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	08 9f       	mul	r16, r24
    1c88:	f0 01       	movw	r30, r0
    1c8a:	09 9f       	mul	r16, r25
    1c8c:	f0 0d       	add	r31, r0
    1c8e:	18 9f       	mul	r17, r24
    1c90:	f0 0d       	add	r31, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	e6 0f       	add	r30, r22
    1c96:	f7 1f       	adc	r31, r23
    1c98:	81 ad       	ldd	r24, Z+57	; 0x39
    1c9a:	86 95       	lsr	r24
    1c9c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <Timebase_UpCounter_Update+0x36>
    1ca2:	7b c0       	rjmp	.+246    	; 0x1d9a <Timebase_UpCounter_Update+0x12c>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1ca4:	eb 01       	movw	r28, r22
    1ca6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ca8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1caa:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cac:	bd 85       	ldd	r27, Y+13	; 0x0d

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    1cae:	22 ad       	ldd	r18, Z+58	; 0x3a
    1cb0:	33 ad       	ldd	r19, Z+59	; 0x3b
    1cb2:	44 ad       	ldd	r20, Z+60	; 0x3c
    1cb4:	55 ad       	ldd	r21, Z+61	; 0x3d
    1cb6:	28 1b       	sub	r18, r24
    1cb8:	39 0b       	sbc	r19, r25
    1cba:	4a 0b       	sbc	r20, r26
    1cbc:	5b 0b       	sbc	r21, r27
    1cbe:	57 ff       	sbrs	r21, 7
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <Timebase_UpCounter_Update+0x5c>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1cca:	85 e1       	ldi	r24, 0x15	; 21
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	08 9f       	mul	r16, r24
    1cd0:	f0 01       	movw	r30, r0
    1cd2:	09 9f       	mul	r16, r25
    1cd4:	f0 0d       	add	r31, r0
    1cd6:	18 9f       	mul	r17, r24
    1cd8:	f0 0d       	add	r31, r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	e6 0f       	add	r30, r22
    1cde:	f7 1f       	adc	r31, r23
    1ce0:	ee 5b       	subi	r30, 0xBE	; 190
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	20 83       	st	Z, r18
    1ce6:	31 83       	std	Z+1, r19	; 0x01
    1ce8:	42 83       	std	Z+2, r20	; 0x02
    1cea:	53 83       	std	Z+3, r21	; 0x03
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    1cec:	b2 91       	ld	r27, -Z
    1cee:	a2 91       	ld	r26, -Z
    1cf0:	92 91       	ld	r25, -Z
    1cf2:	82 91       	ld	r24, -Z

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1cf4:	38 96       	adiw	r30, 0x08	; 8
    1cf6:	82 1b       	sub	r24, r18
    1cf8:	93 0b       	sbc	r25, r19
    1cfa:	a4 0b       	sbc	r26, r20
    1cfc:	b5 0b       	sbc	r27, r21
    1cfe:	b7 ff       	sbrs	r27, 7
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <Timebase_UpCounter_Update+0x9c>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	80 83       	st	Z, r24
    1d0c:	91 83       	std	Z+1, r25	; 0x01
    1d0e:	a2 83       	std	Z+2, r26	; 0x02
    1d10:	b3 83       	std	Z+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1d12:	85 e1       	ldi	r24, 0x15	; 21
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	08 9f       	mul	r16, r24
    1d18:	e0 01       	movw	r28, r0
    1d1a:	09 9f       	mul	r16, r25
    1d1c:	d0 0d       	add	r29, r0
    1d1e:	18 9f       	mul	r17, r24
    1d20:	d0 0d       	add	r29, r0
    1d22:	11 24       	eor	r1, r1
    1d24:	c6 0f       	add	r28, r22
    1d26:	d7 1f       	adc	r29, r23
    1d28:	fe 01       	movw	r30, r28
    1d2a:	ee 5b       	subi	r30, 0xBE	; 190
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	80 81       	ld	r24, Z
    1d30:	91 81       	ldd	r25, Z+1	; 0x01
    1d32:	a2 81       	ldd	r26, Z+2	; 0x02
    1d34:	b3 81       	ldd	r27, Z+3	; 0x03
    1d36:	18 16       	cp	r1, r24
    1d38:	19 06       	cpc	r1, r25
    1d3a:	1a 06       	cpc	r1, r26
    1d3c:	1b 06       	cpc	r1, r27
    1d3e:	0c f4       	brge	.+2      	; 0x1d42 <Timebase_UpCounter_Update+0xd4>
    1d40:	57 c0       	rjmp	.+174    	; 0x1df0 <Timebase_UpCounter_Update+0x182>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1d42:	1a ae       	std	Y+58, r1	; 0x3a
    1d44:	1b ae       	std	Y+59, r1	; 0x3b
    1d46:	1c ae       	std	Y+60, r1	; 0x3c
    1d48:	1d ae       	std	Y+61, r1	; 0x3d

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1d4a:	10 82       	st	Z, r1
    1d4c:	11 82       	std	Z+1, r1	; 0x01
    1d4e:	12 82       	std	Z+2, r1	; 0x02
    1d50:	13 82       	std	Z+3, r1	; 0x03
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    1d52:	fe 01       	movw	r30, r28
    1d54:	fe 96       	adiw	r30, 0x3e	; 62

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1d56:	ca 5b       	subi	r28, 0xBA	; 186
    1d58:	df 4f       	sbci	r29, 0xFF	; 255
    1d5a:	20 81       	ld	r18, Z
    1d5c:	31 81       	ldd	r19, Z+1	; 0x01
    1d5e:	42 81       	ldd	r20, Z+2	; 0x02
    1d60:	53 81       	ldd	r21, Z+3	; 0x03
    1d62:	c9 01       	movw	r24, r18
    1d64:	da 01       	movw	r26, r20
    1d66:	b7 ff       	sbrs	r27, 7
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <Timebase_UpCounter_Update+0x104>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	a0 e0       	ldi	r26, 0x00	; 0
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	88 83       	st	Y, r24
    1d74:	99 83       	std	Y+1, r25	; 0x01
    1d76:	aa 83       	std	Y+2, r26	; 0x02
    1d78:	bb 83       	std	Y+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1d7a:	85 e1       	ldi	r24, 0x15	; 21
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	08 9f       	mul	r16, r24
    1d80:	f0 01       	movw	r30, r0
    1d82:	09 9f       	mul	r16, r25
    1d84:	f0 0d       	add	r31, r0
    1d86:	18 9f       	mul	r17, r24
    1d88:	f0 0d       	add	r31, r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	e6 0f       	add	r30, r22
    1d8e:	f7 1f       	adc	r31, r23
    1d90:	81 ad       	ldd	r24, Z+57	; 0x39
    1d92:	81 7e       	andi	r24, 0xE1	; 225
    1d94:	88 60       	ori	r24, 0x08	; 8
    1d96:	81 af       	std	Z+57, r24	; 0x39
    1d98:	2b c0       	rjmp	.+86     	; 0x1df0 <Timebase_UpCounter_Update+0x182>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	49 f5       	brne	.+82     	; 0x1df0 <Timebase_UpCounter_Update+0x182>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1d9e:	eb 01       	movw	r28, r22
    1da0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1da4:	ac 85       	ldd	r26, Y+12	; 0x0c
    1da6:	bd 85       	ldd	r27, Y+13	; 0x0d
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1da8:	ee 5b       	subi	r30, 0xBE	; 190
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	20 81       	ld	r18, Z
    1dae:	31 81       	ldd	r19, Z+1	; 0x01
    1db0:	42 81       	ldd	r20, Z+2	; 0x02
    1db2:	53 81       	ldd	r21, Z+3	; 0x03
    1db4:	e2 54       	subi	r30, 0x42	; 66
    1db6:	f0 40       	sbci	r31, 0x00	; 0
    1db8:	82 0f       	add	r24, r18
    1dba:	93 1f       	adc	r25, r19
    1dbc:	a4 1f       	adc	r26, r20
    1dbe:	b5 1f       	adc	r27, r21
    1dc0:	82 af       	std	Z+58, r24	; 0x3a
    1dc2:	93 af       	std	Z+59, r25	; 0x3b
    1dc4:	a4 af       	std	Z+60, r26	; 0x3c
    1dc6:	b5 af       	std	Z+61, r27	; 0x3d
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    1dc8:	fe 96       	adiw	r30, 0x3e	; 62
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	a2 81       	ldd	r26, Z+2	; 0x02
    1dd0:	b3 81       	ldd	r27, Z+3	; 0x03

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1dd2:	38 96       	adiw	r30, 0x08	; 8
    1dd4:	82 1b       	sub	r24, r18
    1dd6:	93 0b       	sbc	r25, r19
    1dd8:	a4 0b       	sbc	r26, r20
    1dda:	b5 0b       	sbc	r27, r21
    1ddc:	b7 ff       	sbrs	r27, 7
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <Timebase_UpCounter_Update+0x17a>
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a0 e0       	ldi	r26, 0x00	; 0
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	80 83       	st	Z, r24
    1dea:	91 83       	std	Z+1, r25	; 0x01
    1dec:	a2 83       	std	Z+2, r26	; 0x02
    1dee:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	e0 91 49 01 	lds	r30, 0x0149
    1e00:	f0 91 4a 01 	lds	r31, 0x014A
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	25 e1       	ldi	r18, 0x15	; 21
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	62 9f       	mul	r22, r18
    1e0e:	c0 01       	movw	r24, r0
    1e10:	63 9f       	mul	r22, r19
    1e12:	90 0d       	add	r25, r0
    1e14:	72 9f       	mul	r23, r18
    1e16:	90 0d       	add	r25, r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	e8 0f       	add	r30, r24
    1e1c:	f9 1f       	adc	r31, r25
    1e1e:	81 ad       	ldd	r24, Z+57	; 0x39
    1e20:	86 95       	lsr	r24
    1e22:	8f 70       	andi	r24, 0x0F	; 15
    1e24:	84 30       	cpi	r24, 0x04	; 4
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <Timebase_UpCounter_Expired+0x30>
    1e28:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1e2a:	84 2f       	mov	r24, r20
    1e2c:	08 95       	ret

00001e2e <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1e2e:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1e30:	e0 91 49 01 	lds	r30, 0x0149
    1e34:	f0 91 4a 01 	lds	r31, 0x014A
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	85 e1       	ldi	r24, 0x15	; 21
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	bc 01       	movw	r22, r24
    1e42:	26 9f       	mul	r18, r22
    1e44:	c0 01       	movw	r24, r0
    1e46:	27 9f       	mul	r18, r23
    1e48:	90 0d       	add	r25, r0
    1e4a:	36 9f       	mul	r19, r22
    1e4c:	90 0d       	add	r25, r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	e8 0f       	add	r30, r24
    1e52:	f9 1f       	adc	r31, r25
    1e54:	81 ad       	ldd	r24, Z+57	; 0x39
    1e56:	86 95       	lsr	r24
    1e58:	8f 70       	andi	r24, 0x0F	; 15
    1e5a:	84 30       	cpi	r24, 0x04	; 4
    1e5c:	11 f0       	breq	.+4      	; 0x1e62 <Timebase_UpCounter_Expired_Event+0x34>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1e62:	84 2f       	mov	r24, r20
    1e64:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Timebase_UpCounter_Reset>
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1e6a:	08 95       	ret

00001e6c <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1e70:	c0 91 49 01 	lds	r28, 0x0149
    1e74:	d0 91 4a 01 	lds	r29, 0x014A
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1e7a:	25 e1       	ldi	r18, 0x15	; 21
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	fc 01       	movw	r30, r24
    1e80:	e2 9f       	mul	r30, r18
    1e82:	c0 01       	movw	r24, r0
    1e84:	e3 9f       	mul	r30, r19
    1e86:	90 0d       	add	r25, r0
    1e88:	f2 9f       	mul	r31, r18
    1e8a:	90 0d       	add	r25, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	c8 0f       	add	r28, r24
    1e90:	d9 1f       	adc	r29, r25
    1e92:	89 ad       	ldd	r24, Y+57	; 0x39
    1e94:	80 fd       	sbrc	r24, 0
    1e96:	16 c0       	rjmp	.+44     	; 0x1ec4 <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1e98:	fe 01       	movw	r30, r28
    1e9a:	e6 5b       	subi	r30, 0xB6	; 182
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	ca 5b       	subi	r28, 0xBA	; 186
    1ea0:	df 4f       	sbci	r29, 0xFF	; 255
    1ea2:	88 81       	ld	r24, Y
    1ea4:	99 81       	ldd	r25, Y+1	; 0x01
    1ea6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ea8:	bb 81       	ldd	r27, Y+3	; 0x03
    1eaa:	c6 54       	subi	r28, 0x46	; 70
    1eac:	d0 40       	sbci	r29, 0x00	; 0
    1eae:	84 0f       	add	r24, r20
    1eb0:	95 1f       	adc	r25, r21
    1eb2:	a6 1f       	adc	r26, r22
    1eb4:	b7 1f       	adc	r27, r23
    1eb6:	80 83       	st	Z, r24
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	a2 83       	std	Z+2, r26	; 0x02
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1ebe:	89 ad       	ldd	r24, Y+57	; 0x39
    1ec0:	81 60       	ori	r24, 0x01	; 1
    1ec2:	89 af       	std	Y+57, r24	; 0x39
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1eca:	e0 91 49 01 	lds	r30, 0x0149
    1ece:	f0 91 4a 01 	lds	r31, 0x014A
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1ed4:	25 e1       	ldi	r18, 0x15	; 21
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	ac 01       	movw	r20, r24
    1eda:	42 9f       	mul	r20, r18
    1edc:	c0 01       	movw	r24, r0
    1ede:	43 9f       	mul	r20, r19
    1ee0:	90 0d       	add	r25, r0
    1ee2:	52 9f       	mul	r21, r18
    1ee4:	90 0d       	add	r25, r0
    1ee6:	11 24       	eor	r1, r1
    1ee8:	e8 0f       	add	r30, r24
    1eea:	f9 1f       	adc	r31, r25
    1eec:	df 01       	movw	r26, r30
    1eee:	aa 5b       	subi	r26, 0xBA	; 186
    1ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef2:	e6 5b       	subi	r30, 0xB6	; 182
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	20 81       	ld	r18, Z
    1ef8:	31 81       	ldd	r19, Z+1	; 0x01
    1efa:	42 81       	ldd	r20, Z+2	; 0x02
    1efc:	53 81       	ldd	r21, Z+3	; 0x03
    1efe:	8d 91       	ld	r24, X+
    1f00:	9d 91       	ld	r25, X+
    1f02:	0d 90       	ld	r0, X+
    1f04:	bc 91       	ld	r27, X
    1f06:	a0 2d       	mov	r26, r0
    1f08:	28 1b       	sub	r18, r24
    1f0a:	39 0b       	sbc	r19, r25
    1f0c:	4a 0b       	sbc	r20, r26
    1f0e:	5b 0b       	sbc	r21, r27
    1f10:	57 ff       	sbrs	r21, 7
    1f12:	04 c0       	rjmp	.+8      	; 0x1f1c <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1f1c:	b9 01       	movw	r22, r18
    1f1e:	ca 01       	movw	r24, r20
    1f20:	08 95       	ret

00001f22 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1f22:	cf 93       	push	r28
    1f24:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1f26:	c0 91 49 01 	lds	r28, 0x0149
    1f2a:	d0 91 4a 01 	lds	r29, 0x014A
    1f2e:	68 2f       	mov	r22, r24
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1f32:	85 e1       	ldi	r24, 0x15	; 21
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	68 9f       	mul	r22, r24
    1f38:	f0 01       	movw	r30, r0
    1f3a:	69 9f       	mul	r22, r25
    1f3c:	f0 0d       	add	r31, r0
    1f3e:	78 9f       	mul	r23, r24
    1f40:	f0 0d       	add	r31, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	ec 0f       	add	r30, r28
    1f46:	fd 1f       	adc	r31, r29
    1f48:	df 01       	movw	r26, r30
    1f4a:	aa 5b       	subi	r26, 0xBA	; 186
    1f4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f4e:	e6 5b       	subi	r30, 0xB6	; 182
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	20 81       	ld	r18, Z
    1f54:	31 81       	ldd	r19, Z+1	; 0x01
    1f56:	42 81       	ldd	r20, Z+2	; 0x02
    1f58:	53 81       	ldd	r21, Z+3	; 0x03
    1f5a:	8d 91       	ld	r24, X+
    1f5c:	9d 91       	ld	r25, X+
    1f5e:	0d 90       	ld	r0, X+
    1f60:	bc 91       	ld	r27, X
    1f62:	a0 2d       	mov	r26, r0
    1f64:	28 1b       	sub	r18, r24
    1f66:	39 0b       	sbc	r19, r25
    1f68:	4a 0b       	sbc	r20, r26
    1f6a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1f6c:	57 fd       	sbrc	r21, 7
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <Timebase_UpCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1f70:	21 15       	cp	r18, r1
    1f72:	31 05       	cpc	r19, r1
    1f74:	41 05       	cpc	r20, r1
    1f76:	51 05       	cpc	r21, r1
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	12 c0       	rjmp	.+36     	; 0x1fa2 <Timebase_UpCounter_Period_Value_Expired+0x80>
    1f7e:	20 e0       	ldi	r18, 0x00	; 0
    1f80:	85 e1       	ldi	r24, 0x15	; 21
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	ac 01       	movw	r20, r24
    1f86:	64 9f       	mul	r22, r20
    1f88:	c0 01       	movw	r24, r0
    1f8a:	65 9f       	mul	r22, r21
    1f8c:	90 0d       	add	r25, r0
    1f8e:	74 9f       	mul	r23, r20
    1f90:	90 0d       	add	r25, r0
    1f92:	11 24       	eor	r1, r1
    1f94:	c8 0f       	add	r28, r24
    1f96:	d9 1f       	adc	r29, r25
    1f98:	89 ad       	ldd	r24, Y+57	; 0x39
    1f9a:	80 ff       	sbrs	r24, 0
    1f9c:	21 e0       	ldi	r18, 0x01	; 1
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1fa2:	82 2f       	mov	r24, r18
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	08 95       	ret

00001faa <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1faa:	1f 93       	push	r17
    1fac:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1fae:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <Timebase_UpCounter_Period_Value_Expired>
    1fb2:	81 30       	cpi	r24, 0x01	; 1
    1fb4:	11 f0       	breq	.+4      	; 0x1fba <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	16 c0       	rjmp	.+44     	; 0x1fe6 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1fba:	e0 91 49 01 	lds	r30, 0x0149
    1fbe:	f0 91 4a 01 	lds	r31, 0x014A
    1fc2:	21 2f       	mov	r18, r17
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	85 e1       	ldi	r24, 0x15	; 21
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	ac 01       	movw	r20, r24
    1fcc:	24 9f       	mul	r18, r20
    1fce:	c0 01       	movw	r24, r0
    1fd0:	25 9f       	mul	r18, r21
    1fd2:	90 0d       	add	r25, r0
    1fd4:	34 9f       	mul	r19, r20
    1fd6:	90 0d       	add	r25, r0
    1fd8:	11 24       	eor	r1, r1
    1fda:	e8 0f       	add	r30, r24
    1fdc:	f9 1f       	adc	r31, r25
    1fde:	81 ad       	ldd	r24, Z+57	; 0x39
    1fe0:	8e 7f       	andi	r24, 0xFE	; 254
    1fe2:	81 af       	std	Z+57, r24	; 0x39
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <Timebase_UpCounter_Update>
  }
}
    1ff0:	08 95       	ret

00001ff2 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <Timebase_UpCounter_Reset>
  }
}
    1ff8:	08 95       	ret

00001ffa <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1ffa:	e0 91 49 01 	lds	r30, 0x0149
    1ffe:	f0 91 4a 01 	lds	r31, 0x014A
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9c 01       	movw	r18, r24
    2006:	44 e0       	ldi	r20, 0x04	; 4
    2008:	22 0f       	add	r18, r18
    200a:	33 1f       	adc	r19, r19
    200c:	4a 95       	dec	r20
    200e:	e1 f7       	brne	.-8      	; 0x2008 <Timebase_DownCounter_SS_Get_Status+0xe>
    2010:	28 0f       	add	r18, r24
    2012:	39 1f       	adc	r19, r25
    2014:	e2 0f       	add	r30, r18
    2016:	f3 1f       	adc	r31, r19
    2018:	e2 5b       	subi	r30, 0xB2	; 178
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    2020:	8f 70       	andi	r24, 0x0F	; 15
    2022:	08 95       	ret

00002024 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2024:	e0 91 49 01 	lds	r30, 0x0149
    2028:	f0 91 4a 01 	lds	r31, 0x014A
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9c 01       	movw	r18, r24
    2030:	54 e0       	ldi	r21, 0x04	; 4
    2032:	22 0f       	add	r18, r18
    2034:	33 1f       	adc	r19, r19
    2036:	5a 95       	dec	r21
    2038:	e1 f7       	brne	.-8      	; 0x2032 <Timebase_DownCounter_SS_Set_Status+0xe>
    203a:	28 0f       	add	r18, r24
    203c:	39 1f       	adc	r19, r25
    203e:	e2 0f       	add	r30, r18
    2040:	f3 1f       	adc	r31, r19
    2042:	e2 5b       	subi	r30, 0xB2	; 178
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	6f 70       	andi	r22, 0x0F	; 15
    2048:	66 0f       	add	r22, r22
    204a:	80 81       	ld	r24, Z
    204c:	81 7e       	andi	r24, 0xE1	; 225
    204e:	86 2b       	or	r24, r22
    2050:	80 83       	st	Z, r24
}
    2052:	08 95       	ret

00002054 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    2054:	e0 91 49 01 	lds	r30, 0x0149
    2058:	f0 91 4a 01 	lds	r31, 0x014A
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	9c 01       	movw	r18, r24
    2060:	64 e0       	ldi	r22, 0x04	; 4
    2062:	22 0f       	add	r18, r18
    2064:	33 1f       	adc	r19, r19
    2066:	6a 95       	dec	r22
    2068:	e1 f7       	brne	.-8      	; 0x2062 <Timebase_DownCounter_SS_Get_Value+0xe>
    206a:	28 0f       	add	r18, r24
    206c:	39 1f       	adc	r19, r25
    206e:	e2 0f       	add	r30, r18
    2070:	f3 1f       	adc	r31, r19
    2072:	e9 5a       	subi	r30, 0xA9	; 169
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	08 95       	ret

00002080 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2080:	e0 91 49 01 	lds	r30, 0x0149
    2084:	f0 91 4a 01 	lds	r31, 0x014A
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9c 01       	movw	r18, r24
    208c:	a4 e0       	ldi	r26, 0x04	; 4
    208e:	22 0f       	add	r18, r18
    2090:	33 1f       	adc	r19, r19
    2092:	aa 95       	dec	r26
    2094:	e1 f7       	brne	.-8      	; 0x208e <Timebase_DownCounter_SS_Set_Value+0xe>
    2096:	28 0f       	add	r18, r24
    2098:	39 1f       	adc	r19, r25
    209a:	e2 0f       	add	r30, r18
    209c:	f3 1f       	adc	r31, r19
    209e:	e9 5a       	subi	r30, 0xA9	; 169
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	40 83       	st	Z, r20
    20a4:	51 83       	std	Z+1, r21	; 0x01
    20a6:	62 83       	std	Z+2, r22	; 0x02
    20a8:	73 83       	std	Z+3, r23	; 0x03
}
    20aa:	08 95       	ret

000020ac <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    20ac:	e0 91 49 01 	lds	r30, 0x0149
    20b0:	f0 91 4a 01 	lds	r31, 0x014A
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9c 01       	movw	r18, r24
    20b8:	b4 e0       	ldi	r27, 0x04	; 4
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	ba 95       	dec	r27
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    20c2:	28 0f       	add	r18, r24
    20c4:	39 1f       	adc	r19, r25
    20c6:	e2 0f       	add	r30, r18
    20c8:	f3 1f       	adc	r31, r19
    20ca:	e1 5b       	subi	r30, 0xB1	; 177
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	08 95       	ret

000020d8 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    20d8:	e0 91 49 01 	lds	r30, 0x0149
    20dc:	f0 91 4a 01 	lds	r31, 0x014A
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 01       	movw	r18, r24
    20e4:	44 e0       	ldi	r20, 0x04	; 4
    20e6:	22 0f       	add	r18, r18
    20e8:	33 1f       	adc	r19, r19
    20ea:	4a 95       	dec	r20
    20ec:	e1 f7       	brne	.-8      	; 0x20e6 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    20ee:	28 0f       	add	r18, r24
    20f0:	39 1f       	adc	r19, r25
    20f2:	e2 0f       	add	r30, r18
    20f4:	f3 1f       	adc	r31, r19
    20f6:	ed 5a       	subi	r30, 0xAD	; 173
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	08 95       	ret

00002104 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2104:	e0 91 49 01 	lds	r30, 0x0149
    2108:	f0 91 4a 01 	lds	r31, 0x014A
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9c 01       	movw	r18, r24
    2110:	a4 e0       	ldi	r26, 0x04	; 4
    2112:	22 0f       	add	r18, r18
    2114:	33 1f       	adc	r19, r19
    2116:	aa 95       	dec	r26
    2118:	e1 f7       	brne	.-8      	; 0x2112 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    211a:	28 0f       	add	r18, r24
    211c:	39 1f       	adc	r19, r25
    211e:	e2 0f       	add	r30, r18
    2120:	f3 1f       	adc	r31, r19
    2122:	e1 5b       	subi	r30, 0xB1	; 177
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	40 83       	st	Z, r20
    2128:	51 83       	std	Z+1, r21	; 0x01
    212a:	62 83       	std	Z+2, r22	; 0x02
    212c:	73 83       	std	Z+3, r23	; 0x03
}
    212e:	08 95       	ret

00002130 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2130:	e0 91 49 01 	lds	r30, 0x0149
    2134:	f0 91 4a 01 	lds	r31, 0x014A
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 01       	movw	r18, r24
    213c:	b4 e0       	ldi	r27, 0x04	; 4
    213e:	22 0f       	add	r18, r18
    2140:	33 1f       	adc	r19, r19
    2142:	ba 95       	dec	r27
    2144:	e1 f7       	brne	.-8      	; 0x213e <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    2146:	28 0f       	add	r18, r24
    2148:	39 1f       	adc	r19, r25
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	ed 5a       	subi	r30, 0xAD	; 173
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	40 83       	st	Z, r20
    2154:	51 83       	std	Z+1, r21	; 0x01
    2156:	62 83       	std	Z+2, r22	; 0x02
    2158:	73 83       	std	Z+3, r23	; 0x03
}
    215a:	08 95       	ret

0000215c <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    215c:	e0 91 49 01 	lds	r30, 0x0149
    2160:	f0 91 4a 01 	lds	r31, 0x014A
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9c 01       	movw	r18, r24
    2168:	44 e0       	ldi	r20, 0x04	; 4
    216a:	22 0f       	add	r18, r18
    216c:	33 1f       	adc	r19, r19
    216e:	4a 95       	dec	r20
    2170:	e1 f7       	brne	.-8      	; 0x216a <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    2172:	28 0f       	add	r18, r24
    2174:	39 1f       	adc	r19, r25
    2176:	e2 0f       	add	r30, r18
    2178:	f3 1f       	adc	r31, r19
    217a:	e5 5a       	subi	r30, 0xA5	; 165
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	08 95       	ret

00002188 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    2188:	e0 91 49 01 	lds	r30, 0x0149
    218c:	f0 91 4a 01 	lds	r31, 0x014A
    2190:	28 2f       	mov	r18, r24
    2192:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2194:	77 ff       	sbrs	r23, 7
    2196:	11 c0       	rjmp	.+34     	; 0x21ba <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2198:	c9 01       	movw	r24, r18
    219a:	b4 e0       	ldi	r27, 0x04	; 4
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	ba 95       	dec	r27
    21a2:	e1 f7       	brne	.-8      	; 0x219c <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    21a4:	82 0f       	add	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	e8 0f       	add	r30, r24
    21aa:	f9 1f       	adc	r31, r25
    21ac:	e5 5a       	subi	r30, 0xA5	; 165
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	10 82       	st	Z, r1
    21b2:	11 82       	std	Z+1, r1	; 0x01
    21b4:	12 82       	std	Z+2, r1	; 0x02
    21b6:	13 82       	std	Z+3, r1	; 0x03
    21b8:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    21ba:	c9 01       	movw	r24, r18
    21bc:	a4 e0       	ldi	r26, 0x04	; 4
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	aa 95       	dec	r26
    21c4:	e1 f7       	brne	.-8      	; 0x21be <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    21c6:	82 0f       	add	r24, r18
    21c8:	93 1f       	adc	r25, r19
    21ca:	e8 0f       	add	r30, r24
    21cc:	f9 1f       	adc	r31, r25
    21ce:	e5 5a       	subi	r30, 0xA5	; 165
    21d0:	ff 4f       	sbci	r31, 0xFF	; 255
    21d2:	40 83       	st	Z, r20
    21d4:	51 83       	std	Z+1, r21	; 0x01
    21d6:	62 83       	std	Z+2, r22	; 0x02
    21d8:	73 83       	std	Z+3, r23	; 0x03
    21da:	08 95       	ret

000021dc <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    21dc:	e0 91 49 01 	lds	r30, 0x0149
    21e0:	f0 91 4a 01 	lds	r31, 0x014A
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9c 01       	movw	r18, r24
    21e8:	44 e0       	ldi	r20, 0x04	; 4
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	4a 95       	dec	r20
    21f0:	e1 f7       	brne	.-8      	; 0x21ea <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    21f2:	28 0f       	add	r18, r24
    21f4:	39 1f       	adc	r19, r25
    21f6:	e2 0f       	add	r30, r18
    21f8:	f3 1f       	adc	r31, r19
    21fa:	e2 5b       	subi	r30, 0xB2	; 178
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    2200:	81 70       	andi	r24, 0x01	; 1
    2202:	08 95       	ret

00002204 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    2204:	e0 91 49 01 	lds	r30, 0x0149
    2208:	f0 91 4a 01 	lds	r31, 0x014A
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9c 01       	movw	r18, r24
    2210:	54 e0       	ldi	r21, 0x04	; 4
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	5a 95       	dec	r21
    2218:	e1 f7       	brne	.-8      	; 0x2212 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    221a:	28 0f       	add	r18, r24
    221c:	39 1f       	adc	r19, r25
    221e:	e2 0f       	add	r30, r18
    2220:	f3 1f       	adc	r31, r19
    2222:	e2 5b       	subi	r30, 0xB2	; 178
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	81 60       	ori	r24, 0x01	; 1
    222a:	80 83       	st	Z, r24
}
    222c:	08 95       	ret

0000222e <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    222e:	e0 91 49 01 	lds	r30, 0x0149
    2232:	f0 91 4a 01 	lds	r31, 0x014A
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9c 01       	movw	r18, r24
    223a:	64 e0       	ldi	r22, 0x04	; 4
    223c:	22 0f       	add	r18, r18
    223e:	33 1f       	adc	r19, r19
    2240:	6a 95       	dec	r22
    2242:	e1 f7       	brne	.-8      	; 0x223c <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    2244:	28 0f       	add	r18, r24
    2246:	39 1f       	adc	r19, r25
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	e2 5b       	subi	r30, 0xB2	; 178
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	8e 7f       	andi	r24, 0xFE	; 254
    2254:	80 83       	st	Z, r24
}
    2256:	08 95       	ret

00002258 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2258:	e0 91 49 01 	lds	r30, 0x0149
    225c:	f0 91 4a 01 	lds	r31, 0x014A
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9c 01       	movw	r18, r24
    2264:	74 e0       	ldi	r23, 0x04	; 4
    2266:	22 0f       	add	r18, r18
    2268:	33 1f       	adc	r19, r19
    226a:	7a 95       	dec	r23
    226c:	e1 f7       	brne	.-8      	; 0x2266 <Timebase_DownCounter_SS_Reset+0xe>
    226e:	28 0f       	add	r18, r24
    2270:	39 1f       	adc	r19, r25
    2272:	e2 0f       	add	r30, r18
    2274:	f3 1f       	adc	r31, r19
    2276:	ed 5a       	subi	r30, 0xAD	; 173
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	10 82       	st	Z, r1
    227c:	11 82       	std	Z+1, r1	; 0x01
    227e:	12 82       	std	Z+2, r1	; 0x02
    2280:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2282:	12 92       	st	-Z, r1
    2284:	12 92       	st	-Z, r1
    2286:	12 92       	st	-Z, r1
    2288:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    228a:	38 96       	adiw	r30, 0x08	; 8
    228c:	10 82       	st	Z, r1
    228e:	11 82       	std	Z+1, r1	; 0x01
    2290:	12 82       	std	Z+2, r1	; 0x02
    2292:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2294:	39 97       	sbiw	r30, 0x09	; 9
    2296:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2298:	80 7e       	andi	r24, 0xE0	; 224
    229a:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    229c:	08 95       	ret

0000229e <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    229e:	e0 91 49 01 	lds	r30, 0x0149
    22a2:	f0 91 4a 01 	lds	r31, 0x014A
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	9c 01       	movw	r18, r24
    22aa:	a4 e0       	ldi	r26, 0x04	; 4
    22ac:	22 0f       	add	r18, r18
    22ae:	33 1f       	adc	r19, r19
    22b0:	aa 95       	dec	r26
    22b2:	e1 f7       	brne	.-8      	; 0x22ac <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    22b4:	28 0f       	add	r18, r24
    22b6:	39 1f       	adc	r19, r25
    22b8:	e2 0f       	add	r30, r18
    22ba:	f3 1f       	adc	r31, r19
    22bc:	ed 5a       	subi	r30, 0xAD	; 173
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	10 82       	st	Z, r1
    22c2:	11 82       	std	Z+1, r1	; 0x01
    22c4:	12 82       	std	Z+2, r1	; 0x02
    22c6:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    22c8:	12 92       	st	-Z, r1
    22ca:	12 92       	st	-Z, r1
    22cc:	12 92       	st	-Z, r1
    22ce:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    22d0:	38 96       	adiw	r30, 0x08	; 8
    22d2:	10 82       	st	Z, r1
    22d4:	11 82       	std	Z+1, r1	; 0x01
    22d6:	12 82       	std	Z+2, r1	; 0x02
    22d8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    22da:	39 97       	sbiw	r30, 0x09	; 9
    22dc:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    22de:	80 7e       	andi	r24, 0xE0	; 224
    22e0:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    22e2:	08 95       	ret

000022e4 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    22e4:	e0 91 49 01 	lds	r30, 0x0149
    22e8:	f0 91 4a 01 	lds	r31, 0x014A
    22ec:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    22ee:	9c 01       	movw	r18, r24
    22f0:	b4 e0       	ldi	r27, 0x04	; 4
    22f2:	22 0f       	add	r18, r18
    22f4:	33 1f       	adc	r19, r19
    22f6:	ba 95       	dec	r27
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <Timebase_DownCounter_SS_Start+0xe>
    22fa:	28 0f       	add	r18, r24
    22fc:	39 1f       	adc	r19, r25
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	e2 5b       	subi	r30, 0xB2	; 178
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	90 81       	ld	r25, Z
    2308:	89 2f       	mov	r24, r25
    230a:	86 95       	lsr	r24
    230c:	8f 70       	andi	r24, 0x0F	; 15
    230e:	81 30       	cpi	r24, 0x01	; 1
    2310:	19 f0       	breq	.+6      	; 0x2318 <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2312:	91 7e       	andi	r25, 0xE1	; 225
    2314:	92 60       	ori	r25, 0x02	; 2
    2316:	90 83       	st	Z, r25
    2318:	08 95       	ret

0000231a <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    231a:	e0 91 49 01 	lds	r30, 0x0149
    231e:	f0 91 4a 01 	lds	r31, 0x014A
    2322:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    2324:	9c 01       	movw	r18, r24
    2326:	44 e0       	ldi	r20, 0x04	; 4
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	4a 95       	dec	r20
    232e:	e1 f7       	brne	.-8      	; 0x2328 <Timebase_DownCounter_SS_Stop+0xe>
    2330:	28 0f       	add	r18, r24
    2332:	39 1f       	adc	r19, r25
    2334:	e2 0f       	add	r30, r18
    2336:	f3 1f       	adc	r31, r19
    2338:	e2 5b       	subi	r30, 0xB2	; 178
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	90 81       	ld	r25, Z
    233e:	89 2f       	mov	r24, r25
    2340:	86 95       	lsr	r24
    2342:	8f 70       	andi	r24, 0x0F	; 15
    2344:	82 30       	cpi	r24, 0x02	; 2
    2346:	19 f0       	breq	.+6      	; 0x234e <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2348:	91 7e       	andi	r25, 0xE1	; 225
    234a:	94 60       	ori	r25, 0x04	; 4
    234c:	90 83       	st	Z, r25
    234e:	08 95       	ret

00002350 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    2350:	2f 92       	push	r2
    2352:	3f 92       	push	r3
    2354:	4f 92       	push	r4
    2356:	5f 92       	push	r5
    2358:	6f 92       	push	r6
    235a:	7f 92       	push	r7
    235c:	8f 92       	push	r8
    235e:	9f 92       	push	r9
    2360:	af 92       	push	r10
    2362:	bf 92       	push	r11
    2364:	cf 92       	push	r12
    2366:	df 92       	push	r13
    2368:	ef 92       	push	r14
    236a:	ff 92       	push	r15
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	00 d0       	rcall	.+0      	; 0x2376 <Timebase_DownCounter_SS_Set_Securely+0x26>
    2376:	00 d0       	rcall	.+0      	; 0x2378 <Timebase_DownCounter_SS_Set_Securely+0x28>
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	4a 01       	movw	r8, r20
    237e:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2380:	20 91 49 01 	lds	r18, 0x0149
    2384:	30 91 4a 01 	lds	r19, 0x014A
    2388:	3c 83       	std	Y+4, r19	; 0x04
    238a:	2b 83       	std	Y+3, r18	; 0x03
    238c:	a8 2f       	mov	r26, r24
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	ba 83       	std	Y+2, r27	; 0x02
    2392:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    2394:	fd 01       	movw	r30, r26
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	6a 95       	dec	r22
    239e:	e1 f7       	brne	.-8      	; 0x2398 <Timebase_DownCounter_SS_Set_Securely+0x48>
    23a0:	ea 0f       	add	r30, r26
    23a2:	fb 1f       	adc	r31, r27
    23a4:	e2 0f       	add	r30, r18
    23a6:	f3 1f       	adc	r31, r19
    23a8:	e2 5b       	subi	r30, 0xB2	; 178
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 81       	ld	r24, Z
    23ae:	ee 54       	subi	r30, 0x4E	; 78
    23b0:	f0 40       	sbci	r31, 0x00	; 0
    23b2:	86 95       	lsr	r24
    23b4:	8f 70       	andi	r24, 0x0F	; 15
    23b6:	09 f0       	breq	.+2      	; 0x23ba <Timebase_DownCounter_SS_Set_Securely+0x6a>
    23b8:	72 c0       	rjmp	.+228    	; 0x249e <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    23ba:	e9 5a       	subi	r30, 0xA9	; 169
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	80 82       	st	Z, r8
    23c0:	91 82       	std	Z+1, r9	; 0x01
    23c2:	a2 82       	std	Z+2, r10	; 0x02
    23c4:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    23c6:	f9 01       	movw	r30, r18
    23c8:	c0 84       	ldd	r12, Z+8	; 0x08
    23ca:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    23cc:	22 84       	ldd	r2, Z+10	; 0x0a
    23ce:	33 84       	ldd	r3, Z+11	; 0x0b
    23d0:	44 84       	ldd	r4, Z+12	; 0x0c
    23d2:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    23d4:	21 81       	ldd	r18, Z+1	; 0x01
    23d6:	32 81       	ldd	r19, Z+2	; 0x02
    23d8:	40 e0       	ldi	r20, 0x00	; 0
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	c5 01       	movw	r24, r10
    23de:	b4 01       	movw	r22, r8
    23e0:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    23e4:	7b 01       	movw	r14, r22
    23e6:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    23e8:	ab 81       	ldd	r26, Y+3	; 0x03
    23ea:	bc 81       	ldd	r27, Y+4	; 0x04
    23ec:	11 96       	adiw	r26, 0x01	; 1
    23ee:	2d 91       	ld	r18, X+
    23f0:	3c 91       	ld	r19, X
    23f2:	12 97       	sbiw	r26, 0x02	; 2
    23f4:	40 e0       	ldi	r20, 0x00	; 0
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	c5 01       	movw	r24, r10
    23fa:	b4 01       	movw	r22, r8
    23fc:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    2400:	c9 01       	movw	r24, r18
    2402:	da 01       	movw	r26, r20
    2404:	3c 01       	movw	r6, r24
    2406:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    2408:	56 01       	movw	r10, r12
    240a:	cc 24       	eor	r12, r12
    240c:	dd 24       	eor	r13, r13
    240e:	ae 0c       	add	r10, r14
    2410:	bf 1c       	adc	r11, r15
    2412:	c0 1e       	adc	r12, r16
    2414:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    2416:	eb 81       	ldd	r30, Y+3	; 0x03
    2418:	fc 81       	ldd	r31, Y+4	; 0x04
    241a:	81 81       	ldd	r24, Z+1	; 0x01
    241c:	92 81       	ldd	r25, Z+2	; 0x02
    241e:	a0 e0       	ldi	r26, 0x00	; 0
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	a8 16       	cp	r10, r24
    2424:	b9 06       	cpc	r11, r25
    2426:	ca 06       	cpc	r12, r26
    2428:	db 06       	cpc	r13, r27
    242a:	94 f0       	brlt	.+36     	; 0x2450 <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    242c:	08 94       	sec
    242e:	61 1c       	adc	r6, r1
    2430:	71 1c       	adc	r7, r1
    2432:	81 1c       	adc	r8, r1
    2434:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    2436:	21 81       	ldd	r18, Z+1	; 0x01
    2438:	32 81       	ldd	r19, Z+2	; 0x02
    243a:	40 e0       	ldi	r20, 0x00	; 0
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	c6 01       	movw	r24, r12
    2440:	b5 01       	movw	r22, r10
    2442:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    2446:	ac 01       	movw	r20, r24
    2448:	cb 01       	movw	r24, r22
    244a:	da 01       	movw	r26, r20
    244c:	5c 01       	movw	r10, r24
    244e:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2450:	e9 81       	ldd	r30, Y+1	; 0x01
    2452:	fa 81       	ldd	r31, Y+2	; 0x02
    2454:	54 e0       	ldi	r21, 0x04	; 4
    2456:	ee 0f       	add	r30, r30
    2458:	ff 1f       	adc	r31, r31
    245a:	5a 95       	dec	r21
    245c:	e1 f7       	brne	.-8      	; 0x2456 <Timebase_DownCounter_SS_Set_Securely+0x106>
    245e:	29 81       	ldd	r18, Y+1	; 0x01
    2460:	3a 81       	ldd	r19, Y+2	; 0x02
    2462:	e2 0f       	add	r30, r18
    2464:	f3 1f       	adc	r31, r19
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	e8 0f       	add	r30, r24
    246c:	f9 1f       	adc	r31, r25
    246e:	e1 5b       	subi	r30, 0xB1	; 177
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	26 0c       	add	r2, r6
    2474:	37 1c       	adc	r3, r7
    2476:	48 1c       	adc	r4, r8
    2478:	59 1c       	adc	r5, r9
    247a:	21 92       	st	Z+, r2
    247c:	31 92       	st	Z+, r3
    247e:	41 92       	st	Z+, r4
    2480:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2482:	a0 82       	st	Z, r10
    2484:	b1 82       	std	Z+1, r11	; 0x01
    2486:	c2 82       	std	Z+2, r12	; 0x02
    2488:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    248a:	35 97       	sbiw	r30, 0x05	; 5
    248c:	90 81       	ld	r25, Z
    248e:	89 2f       	mov	r24, r25
    2490:	86 95       	lsr	r24
    2492:	8f 70       	andi	r24, 0x0F	; 15
    2494:	81 30       	cpi	r24, 0x01	; 1
    2496:	19 f0       	breq	.+6      	; 0x249e <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2498:	91 7e       	andi	r25, 0xE1	; 225
    249a:	92 60       	ori	r25, 0x02	; 2
    249c:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	1f 91       	pop	r17
    24ac:	0f 91       	pop	r16
    24ae:	ff 90       	pop	r15
    24b0:	ef 90       	pop	r14
    24b2:	df 90       	pop	r13
    24b4:	cf 90       	pop	r12
    24b6:	bf 90       	pop	r11
    24b8:	af 90       	pop	r10
    24ba:	9f 90       	pop	r9
    24bc:	8f 90       	pop	r8
    24be:	7f 90       	pop	r7
    24c0:	6f 90       	pop	r6
    24c2:	5f 90       	pop	r5
    24c4:	4f 90       	pop	r4
    24c6:	3f 90       	pop	r3
    24c8:	2f 90       	pop	r2
    24ca:	08 95       	ret

000024cc <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    24cc:	e0 91 49 01 	lds	r30, 0x0149
    24d0:	f0 91 4a 01 	lds	r31, 0x014A
    24d4:	a8 2f       	mov	r26, r24
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	9d 01       	movw	r18, r26
    24da:	94 e0       	ldi	r25, 0x04	; 4
    24dc:	22 0f       	add	r18, r18
    24de:	33 1f       	adc	r19, r19
    24e0:	9a 95       	dec	r25
    24e2:	e1 f7       	brne	.-8      	; 0x24dc <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    24e4:	2a 0f       	add	r18, r26
    24e6:	3b 1f       	adc	r19, r27
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	ed 5a       	subi	r30, 0xAD	; 173
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	10 82       	st	Z, r1
    24f2:	11 82       	std	Z+1, r1	; 0x01
    24f4:	12 82       	std	Z+2, r1	; 0x02
    24f6:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    24f8:	12 92       	st	-Z, r1
    24fa:	12 92       	st	-Z, r1
    24fc:	12 92       	st	-Z, r1
    24fe:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2500:	38 96       	adiw	r30, 0x08	; 8
    2502:	10 82       	st	Z, r1
    2504:	11 82       	std	Z+1, r1	; 0x01
    2506:	12 82       	std	Z+2, r1	; 0x02
    2508:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    250a:	39 97       	sbiw	r30, 0x09	; 9
    250c:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    250e:	90 7e       	andi	r25, 0xE0	; 224
    2510:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2512:	0e 94 a8 11 	call	0x2350	; 0x2350 <Timebase_DownCounter_SS_Set_Securely>
} 
    2516:	08 95       	ret

00002518 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    2518:	2f 92       	push	r2
    251a:	3f 92       	push	r3
    251c:	4f 92       	push	r4
    251e:	5f 92       	push	r5
    2520:	6f 92       	push	r6
    2522:	7f 92       	push	r7
    2524:	8f 92       	push	r8
    2526:	9f 92       	push	r9
    2528:	af 92       	push	r10
    252a:	bf 92       	push	r11
    252c:	cf 92       	push	r12
    252e:	df 92       	push	r13
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    253c:	c0 90 49 01 	lds	r12, 0x0149
    2540:	d0 90 4a 01 	lds	r13, 0x014A
    2544:	08 2f       	mov	r16, r24
    2546:	10 e0       	ldi	r17, 0x00	; 0
    2548:	e8 01       	movw	r28, r16
    254a:	34 e0       	ldi	r19, 0x04	; 4
    254c:	cc 0f       	add	r28, r28
    254e:	dd 1f       	adc	r29, r29
    2550:	3a 95       	dec	r19
    2552:	e1 f7       	brne	.-8      	; 0x254c <Timebase_DownCounter_SS_Update+0x34>
    2554:	c0 0f       	add	r28, r16
    2556:	d1 1f       	adc	r29, r17
    2558:	cc 0d       	add	r28, r12
    255a:	dd 1d       	adc	r29, r13
    255c:	c2 5b       	subi	r28, 0xB2	; 178
    255e:	df 4f       	sbci	r29, 0xFF	; 255
    2560:	88 81       	ld	r24, Y
    2562:	ce 54       	subi	r28, 0x4E	; 78
    2564:	d0 40       	sbci	r29, 0x00	; 0
    2566:	86 95       	lsr	r24
    2568:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	09 f0       	breq	.+2      	; 0x2570 <Timebase_DownCounter_SS_Update+0x58>
    256e:	5d c0       	rjmp	.+186    	; 0x262a <Timebase_DownCounter_SS_Update+0x112>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2570:	f6 01       	movw	r30, r12
    2572:	80 85       	ldd	r24, Z+8	; 0x08
    2574:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    2576:	4c 01       	movw	r8, r24
    2578:	aa 24       	eor	r10, r10
    257a:	bb 24       	eor	r11, r11
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    257c:	82 85       	ldd	r24, Z+10	; 0x0a
    257e:	93 85       	ldd	r25, Z+11	; 0x0b
    2580:	a4 85       	ldd	r26, Z+12	; 0x0c
    2582:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    2584:	c1 5b       	subi	r28, 0xB1	; 177
    2586:	df 4f       	sbci	r29, 0xFF	; 255
    2588:	28 80       	ld	r2, Y
    258a:	39 80       	ldd	r3, Y+1	; 0x01
    258c:	4a 80       	ldd	r4, Y+2	; 0x02
    258e:	5b 80       	ldd	r5, Y+3	; 0x03
    2590:	28 1a       	sub	r2, r24
    2592:	39 0a       	sbc	r3, r25
    2594:	4a 0a       	sbc	r4, r26
    2596:	5b 0a       	sbc	r5, r27
    2598:	57 fe       	sbrs	r5, 7
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <Timebase_DownCounter_SS_Update+0x8a>
    259c:	22 24       	eor	r2, r2
    259e:	33 24       	eor	r3, r3
    25a0:	21 01       	movw	r4, r2
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    25a2:	f6 01       	movw	r30, r12
    25a4:	21 81       	ldd	r18, Z+1	; 0x01
    25a6:	32 81       	ldd	r19, Z+2	; 0x02
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	50 e0       	ldi	r21, 0x00	; 0
    25ac:	c2 01       	movw	r24, r4
    25ae:	b1 01       	movw	r22, r2
    25b0:	0e 94 cf 18 	call	0x319e	; 0x319e <__mulsi3>
	temp_s += temp_ss;
    25b4:	f8 01       	movw	r30, r16
    25b6:	24 e0       	ldi	r18, 0x04	; 4
    25b8:	ee 0f       	add	r30, r30
    25ba:	ff 1f       	adc	r31, r31
    25bc:	2a 95       	dec	r18
    25be:	e1 f7       	brne	.-8      	; 0x25b8 <Timebase_DownCounter_SS_Update+0xa0>
    25c0:	e0 0f       	add	r30, r16
    25c2:	f1 1f       	adc	r31, r17
    25c4:	ec 0d       	add	r30, r12
    25c6:	fd 1d       	adc	r31, r13
    25c8:	ef 01       	movw	r28, r30
    25ca:	cd 5a       	subi	r28, 0xAD	; 173
    25cc:	df 4f       	sbci	r29, 0xFF	; 255
    25ce:	28 81       	ld	r18, Y
    25d0:	39 81       	ldd	r19, Y+1	; 0x01
    25d2:	4a 81       	ldd	r20, Y+2	; 0x02
    25d4:	5b 81       	ldd	r21, Y+3	; 0x03
    25d6:	28 19       	sub	r18, r8
    25d8:	39 09       	sbc	r19, r9
    25da:	4a 09       	sbc	r20, r10
    25dc:	5b 09       	sbc	r21, r11
    25de:	26 0f       	add	r18, r22
    25e0:	37 1f       	adc	r19, r23
    25e2:	48 1f       	adc	r20, r24
    25e4:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    25e6:	df 01       	movw	r26, r30
    25e8:	a9 5a       	subi	r26, 0xA9	; 169
    25ea:	bf 4f       	sbci	r27, 0xFF	; 255
    25ec:	2d 93       	st	X+, r18
    25ee:	3d 93       	st	X+, r19
    25f0:	4d 93       	st	X+, r20
    25f2:	5c 93       	st	X, r21
    25f4:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    25f6:	12 16       	cp	r1, r18
    25f8:	13 06       	cpc	r1, r19
    25fa:	14 06       	cpc	r1, r20
    25fc:	15 06       	cpc	r1, r21
    25fe:	0c f4       	brge	.+2      	; 0x2602 <Timebase_DownCounter_SS_Update+0xea>
    2600:	48 c0       	rjmp	.+144    	; 0x2692 <Timebase_DownCounter_SS_Update+0x17a>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2602:	18 82       	st	Y, r1
    2604:	19 82       	std	Y+1, r1	; 0x01
    2606:	1a 82       	std	Y+2, r1	; 0x02
    2608:	1b 82       	std	Y+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    260a:	e1 5b       	subi	r30, 0xB1	; 177
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	10 82       	st	Z, r1
    2610:	11 82       	std	Z+1, r1	; 0x01
    2612:	12 82       	std	Z+2, r1	; 0x02
    2614:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2616:	1d 92       	st	X+, r1
    2618:	1d 92       	st	X+, r1
    261a:	1d 92       	st	X+, r1
    261c:	1c 92       	st	X, r1
    261e:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2620:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2622:	80 7e       	andi	r24, 0xE0	; 224
    2624:	88 60       	ori	r24, 0x08	; 8
    2626:	80 83       	st	Z, r24
    2628:	34 c0       	rjmp	.+104    	; 0x2692 <Timebase_DownCounter_SS_Update+0x17a>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    262a:	82 30       	cpi	r24, 0x02	; 2
    262c:	91 f5       	brne	.+100    	; 0x2692 <Timebase_DownCounter_SS_Update+0x17a>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    262e:	f6 01       	movw	r30, r12
    2630:	60 84       	ldd	r6, Z+8	; 0x08
    2632:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2634:	e2 84       	ldd	r14, Z+10	; 0x0a
    2636:	f3 84       	ldd	r15, Z+11	; 0x0b
    2638:	04 85       	ldd	r16, Z+12	; 0x0c
    263a:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    263c:	c9 5a       	subi	r28, 0xA9	; 169
    263e:	df 4f       	sbci	r29, 0xFF	; 255
    2640:	28 80       	ld	r2, Y
    2642:	39 80       	ldd	r3, Y+1	; 0x01
    2644:	4a 80       	ldd	r4, Y+2	; 0x02
    2646:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    2648:	21 81       	ldd	r18, Z+1	; 0x01
    264a:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    264c:	a1 80       	ldd	r10, Z+1	; 0x01
    264e:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2650:	28 97       	sbiw	r28, 0x08	; 8
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	c2 01       	movw	r24, r4
    2658:	b1 01       	movw	r22, r2
    265a:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    265e:	e2 0e       	add	r14, r18
    2660:	f3 1e       	adc	r15, r19
    2662:	04 1f       	adc	r16, r20
    2664:	15 1f       	adc	r17, r21
    2666:	e9 92       	st	Y+, r14
    2668:	f9 92       	st	Y+, r15
    266a:	09 93       	st	Y+, r16
    266c:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    266e:	cc 24       	eor	r12, r12
    2670:	dd 24       	eor	r13, r13
    2672:	c2 01       	movw	r24, r4
    2674:	b1 01       	movw	r22, r2
    2676:	a6 01       	movw	r20, r12
    2678:	95 01       	movw	r18, r10
    267a:	0e 94 10 19 	call	0x3220	; 0x3220 <__divmodsi4>
    267e:	88 24       	eor	r8, r8
    2680:	99 24       	eor	r9, r9
    2682:	66 0e       	add	r6, r22
    2684:	77 1e       	adc	r7, r23
    2686:	88 1e       	adc	r8, r24
    2688:	99 1e       	adc	r9, r25
    268a:	68 82       	st	Y, r6
    268c:	79 82       	std	Y+1, r7	; 0x01
    268e:	8a 82       	std	Y+2, r8	; 0x02
    2690:	9b 82       	std	Y+3, r9	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	ff 90       	pop	r15
    269c:	ef 90       	pop	r14
    269e:	df 90       	pop	r13
    26a0:	cf 90       	pop	r12
    26a2:	bf 90       	pop	r11
    26a4:	af 90       	pop	r10
    26a6:	9f 90       	pop	r9
    26a8:	8f 90       	pop	r8
    26aa:	7f 90       	pop	r7
    26ac:	6f 90       	pop	r6
    26ae:	5f 90       	pop	r5
    26b0:	4f 90       	pop	r4
    26b2:	3f 90       	pop	r3
    26b4:	2f 90       	pop	r2
    26b6:	08 95       	ret

000026b8 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	e0 91 49 01 	lds	r30, 0x0149
    26be:	f0 91 4a 01 	lds	r31, 0x014A
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c 01       	movw	r18, r24
    26c6:	54 e0       	ldi	r21, 0x04	; 4
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	5a 95       	dec	r21
    26ce:	e1 f7       	brne	.-8      	; 0x26c8 <Timebase_DownCounter_SS_Expired+0x10>
    26d0:	28 0f       	add	r18, r24
    26d2:	39 1f       	adc	r19, r25
    26d4:	e2 0f       	add	r30, r18
    26d6:	f3 1f       	adc	r31, r19
    26d8:	e2 5b       	subi	r30, 0xB2	; 178
    26da:	ff 4f       	sbci	r31, 0xFF	; 255
    26dc:	80 81       	ld	r24, Z
    26de:	86 95       	lsr	r24
    26e0:	8f 70       	andi	r24, 0x0F	; 15
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <Timebase_DownCounter_SS_Expired+0x30>
    26e6:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    26e8:	84 2f       	mov	r24, r20
    26ea:	08 95       	ret

000026ec <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    26ec:	e0 91 49 01 	lds	r30, 0x0149
    26f0:	f0 91 4a 01 	lds	r31, 0x014A
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    26f6:	9c 01       	movw	r18, r24
    26f8:	64 e0       	ldi	r22, 0x04	; 4
    26fa:	22 0f       	add	r18, r18
    26fc:	33 1f       	adc	r19, r19
    26fe:	6a 95       	dec	r22
    2700:	e1 f7       	brne	.-8      	; 0x26fa <Timebase_DownCounter_SS_Expired_Event+0xe>
    2702:	28 0f       	add	r18, r24
    2704:	39 1f       	adc	r19, r25
    2706:	e2 0f       	add	r30, r18
    2708:	f3 1f       	adc	r31, r19
    270a:	df 01       	movw	r26, r30
    270c:	a2 5b       	subi	r26, 0xB2	; 178
    270e:	bf 4f       	sbci	r27, 0xFF	; 255
    2710:	8c 91       	ld	r24, X
    2712:	86 95       	lsr	r24
    2714:	8f 70       	andi	r24, 0x0F	; 15
    2716:	84 30       	cpi	r24, 0x04	; 4
    2718:	11 f0       	breq	.+4      	; 0x271e <Timebase_DownCounter_SS_Expired_Event+0x32>
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    271e:	ed 5a       	subi	r30, 0xAD	; 173
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	10 82       	st	Z, r1
    2724:	11 82       	std	Z+1, r1	; 0x01
    2726:	12 82       	std	Z+2, r1	; 0x02
    2728:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    272a:	12 92       	st	-Z, r1
    272c:	12 92       	st	-Z, r1
    272e:	12 92       	st	-Z, r1
    2730:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2732:	38 96       	adiw	r30, 0x08	; 8
    2734:	10 82       	st	Z, r1
    2736:	11 82       	std	Z+1, r1	; 0x01
    2738:	12 82       	std	Z+2, r1	; 0x02
    273a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    273c:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    273e:	80 7e       	andi	r24, 0xE0	; 224
    2740:	8c 93       	st	X, r24
    2742:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2744:	08 95       	ret

00002746 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    274a:	c0 91 49 01 	lds	r28, 0x0149
    274e:	d0 91 4a 01 	lds	r29, 0x014A
    2752:	28 2f       	mov	r18, r24
    2754:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2756:	f9 01       	movw	r30, r18
    2758:	a4 e0       	ldi	r26, 0x04	; 4
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	aa 95       	dec	r26
    2760:	e1 f7       	brne	.-8      	; 0x275a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2762:	e2 0f       	add	r30, r18
    2764:	f3 1f       	adc	r31, r19
    2766:	ec 0f       	add	r30, r28
    2768:	fd 1f       	adc	r31, r29
    276a:	e2 5b       	subi	r30, 0xB2	; 178
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	ee 54       	subi	r30, 0x4E	; 78
    2772:	f0 40       	sbci	r31, 0x00	; 0
    2774:	80 fd       	sbrc	r24, 0
    2776:	24 c0       	rjmp	.+72     	; 0x27c0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    2778:	e9 5a       	subi	r30, 0xA9	; 169
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	81 91       	ld	r24, Z+
    277e:	91 91       	ld	r25, Z+
    2780:	a1 91       	ld	r26, Z+
    2782:	b1 91       	ld	r27, Z+
    2784:	84 1b       	sub	r24, r20
    2786:	95 0b       	sbc	r25, r21
    2788:	a6 0b       	sbc	r26, r22
    278a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    278c:	b7 ff       	sbrs	r27, 7
    278e:	05 c0       	rjmp	.+10     	; 0x279a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2790:	10 82       	st	Z, r1
    2792:	11 82       	std	Z+1, r1	; 0x01
    2794:	12 82       	std	Z+2, r1	; 0x02
    2796:	13 82       	std	Z+3, r1	; 0x03
    2798:	04 c0       	rjmp	.+8      	; 0x27a2 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    279a:	80 83       	st	Z, r24
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	a2 83       	std	Z+2, r26	; 0x02
    27a0:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    27a2:	f9 01       	movw	r30, r18
    27a4:	74 e0       	ldi	r23, 0x04	; 4
    27a6:	ee 0f       	add	r30, r30
    27a8:	ff 1f       	adc	r31, r31
    27aa:	7a 95       	dec	r23
    27ac:	e1 f7       	brne	.-8      	; 0x27a6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	ec 0f       	add	r30, r28
    27b4:	fd 1f       	adc	r31, r29
    27b6:	e2 5b       	subi	r30, 0xB2	; 178
    27b8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ba:	80 81       	ld	r24, Z
    27bc:	81 60       	ori	r24, 0x01	; 1
    27be:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    27c6:	e0 91 49 01 	lds	r30, 0x0149
    27ca:	f0 91 4a 01 	lds	r31, 0x014A
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    27d0:	9c 01       	movw	r18, r24
    27d2:	b4 e0       	ldi	r27, 0x04	; 4
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	ba 95       	dec	r27
    27da:	e1 f7       	brne	.-8      	; 0x27d4 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    27dc:	28 0f       	add	r18, r24
    27de:	39 1f       	adc	r19, r25
    27e0:	e2 0f       	add	r30, r18
    27e2:	f3 1f       	adc	r31, r19
    27e4:	df 01       	movw	r26, r30
    27e6:	a5 5a       	subi	r26, 0xA5	; 165
    27e8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ea:	e9 5a       	subi	r30, 0xA9	; 169
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	20 81       	ld	r18, Z
    27f0:	31 81       	ldd	r19, Z+1	; 0x01
    27f2:	42 81       	ldd	r20, Z+2	; 0x02
    27f4:	53 81       	ldd	r21, Z+3	; 0x03
    27f6:	8d 91       	ld	r24, X+
    27f8:	9d 91       	ld	r25, X+
    27fa:	0d 90       	ld	r0, X+
    27fc:	bc 91       	ld	r27, X
    27fe:	a0 2d       	mov	r26, r0
    2800:	28 1b       	sub	r18, r24
    2802:	39 0b       	sbc	r19, r25
    2804:	4a 0b       	sbc	r20, r26
    2806:	5b 0b       	sbc	r21, r27
    2808:	57 ff       	sbrs	r21, 7
    280a:	04 c0       	rjmp	.+8      	; 0x2814 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2814:	b9 01       	movw	r22, r18
    2816:	ca 01       	movw	r24, r20
    2818:	08 95       	ret

0000281a <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    281e:	c0 91 49 01 	lds	r28, 0x0149
    2822:	d0 91 4a 01 	lds	r29, 0x014A
    2826:	68 2f       	mov	r22, r24
    2828:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    282a:	fb 01       	movw	r30, r22
    282c:	44 e0       	ldi	r20, 0x04	; 4
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	4a 95       	dec	r20
    2834:	e1 f7       	brne	.-8      	; 0x282e <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    2836:	e6 0f       	add	r30, r22
    2838:	f7 1f       	adc	r31, r23
    283a:	ec 0f       	add	r30, r28
    283c:	fd 1f       	adc	r31, r29
    283e:	df 01       	movw	r26, r30
    2840:	a5 5a       	subi	r26, 0xA5	; 165
    2842:	bf 4f       	sbci	r27, 0xFF	; 255
    2844:	e9 5a       	subi	r30, 0xA9	; 169
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	20 81       	ld	r18, Z
    284a:	31 81       	ldd	r19, Z+1	; 0x01
    284c:	42 81       	ldd	r20, Z+2	; 0x02
    284e:	53 81       	ldd	r21, Z+3	; 0x03
    2850:	8d 91       	ld	r24, X+
    2852:	9d 91       	ld	r25, X+
    2854:	0d 90       	ld	r0, X+
    2856:	bc 91       	ld	r27, X
    2858:	a0 2d       	mov	r26, r0
    285a:	28 1b       	sub	r18, r24
    285c:	39 0b       	sbc	r19, r25
    285e:	4a 0b       	sbc	r20, r26
    2860:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2862:	57 fd       	sbrc	r21, 7
    2864:	07 c0       	rjmp	.+14     	; 0x2874 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2866:	21 15       	cp	r18, r1
    2868:	31 05       	cpc	r19, r1
    286a:	41 05       	cpc	r20, r1
    286c:	51 05       	cpc	r21, r1
    286e:	11 f0       	breq	.+4      	; 0x2874 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	12 c0       	rjmp	.+36     	; 0x2898 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	cb 01       	movw	r24, r22
    2878:	34 e0       	ldi	r19, 0x04	; 4
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	3a 95       	dec	r19
    2880:	e1 f7       	brne	.-8      	; 0x287a <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2882:	86 0f       	add	r24, r22
    2884:	97 1f       	adc	r25, r23
    2886:	c8 0f       	add	r28, r24
    2888:	d9 1f       	adc	r29, r25
    288a:	c2 5b       	subi	r28, 0xB2	; 178
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	88 81       	ld	r24, Y
    2890:	80 ff       	sbrs	r24, 0
    2892:	21 e0       	ldi	r18, 0x01	; 1
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2898:	82 2f       	mov	r24, r18
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	08 95       	ret

000028a0 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    28a0:	1f 93       	push	r17
    28a2:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    28a4:	0e 94 0d 14 	call	0x281a	; 0x281a <Timebase_DownCounter_SS_Period_Value_Expired>
    28a8:	81 30       	cpi	r24, 0x01	; 1
    28aa:	11 f0       	breq	.+4      	; 0x28b0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	16 c0       	rjmp	.+44     	; 0x28dc <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28b0:	e0 91 49 01 	lds	r30, 0x0149
    28b4:	f0 91 4a 01 	lds	r31, 0x014A
    28b8:	21 2f       	mov	r18, r17
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	c9 01       	movw	r24, r18
    28be:	54 e0       	ldi	r21, 0x04	; 4
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	5a 95       	dec	r21
    28c6:	e1 f7       	brne	.-8      	; 0x28c0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    28c8:	82 0f       	add	r24, r18
    28ca:	93 1f       	adc	r25, r19
    28cc:	e8 0f       	add	r30, r24
    28ce:	f9 1f       	adc	r31, r25
    28d0:	e2 5b       	subi	r30, 0xB2	; 178
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	80 81       	ld	r24, Z
    28d6:	8e 7f       	andi	r24, 0xFE	; 254
    28d8:	80 83       	st	Z, r24
    28da:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    28dc:	1f 91       	pop	r17
    28de:	08 95       	ret

000028e0 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	0e 94 8c 12 	call	0x2518	; 0x2518 <Timebase_DownCounter_SS_Update>
  }
}
    28e6:	08 95       	ret

000028e8 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    28e8:	e0 91 49 01 	lds	r30, 0x0149
    28ec:	f0 91 4a 01 	lds	r31, 0x014A
    28f0:	ed 5a       	subi	r30, 0xAD	; 173
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	10 82       	st	Z, r1
    28f6:	11 82       	std	Z+1, r1	; 0x01
    28f8:	12 82       	std	Z+2, r1	; 0x02
    28fa:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    28fc:	12 92       	st	-Z, r1
    28fe:	12 92       	st	-Z, r1
    2900:	12 92       	st	-Z, r1
    2902:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2904:	38 96       	adiw	r30, 0x08	; 8
    2906:	10 82       	st	Z, r1
    2908:	11 82       	std	Z+1, r1	; 0x01
    290a:	12 82       	std	Z+2, r1	; 0x02
    290c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    290e:	39 97       	sbiw	r30, 0x09	; 9
    2910:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2912:	80 7e       	andi	r24, 0xE0	; 224
    2914:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    2916:	08 95       	ret

00002918 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    2918:	e0 91 49 01 	lds	r30, 0x0149
    291c:	f0 91 4a 01 	lds	r31, 0x014A
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	2d e0       	ldi	r18, 0x0D	; 13
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	ac 01       	movw	r20, r24
    2928:	42 9f       	mul	r20, r18
    292a:	c0 01       	movw	r24, r0
    292c:	43 9f       	mul	r20, r19
    292e:	90 0d       	add	r25, r0
    2930:	52 9f       	mul	r21, r18
    2932:	90 0d       	add	r25, r0
    2934:	11 24       	eor	r1, r1
    2936:	e8 0f       	add	r30, r24
    2938:	f9 1f       	adc	r31, r25
    293a:	e1 5a       	subi	r30, 0xA1	; 161
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2942:	8f 70       	andi	r24, 0x0F	; 15
    2944:	08 95       	ret

00002946 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2946:	e0 91 49 01 	lds	r30, 0x0149
    294a:	f0 91 4a 01 	lds	r31, 0x014A
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	2d e0       	ldi	r18, 0x0D	; 13
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	ac 01       	movw	r20, r24
    2956:	42 9f       	mul	r20, r18
    2958:	c0 01       	movw	r24, r0
    295a:	43 9f       	mul	r20, r19
    295c:	90 0d       	add	r25, r0
    295e:	52 9f       	mul	r21, r18
    2960:	90 0d       	add	r25, r0
    2962:	11 24       	eor	r1, r1
    2964:	e8 0f       	add	r30, r24
    2966:	f9 1f       	adc	r31, r25
    2968:	e1 5a       	subi	r30, 0xA1	; 161
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	6f 70       	andi	r22, 0x0F	; 15
    296e:	66 0f       	add	r22, r22
    2970:	80 81       	ld	r24, Z
    2972:	81 7e       	andi	r24, 0xE1	; 225
    2974:	86 2b       	or	r24, r22
    2976:	80 83       	st	Z, r24
}
    2978:	08 95       	ret

0000297a <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    297a:	e0 91 49 01 	lds	r30, 0x0149
    297e:	f0 91 4a 01 	lds	r31, 0x014A
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	2d e0       	ldi	r18, 0x0D	; 13
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	ac 01       	movw	r20, r24
    298a:	42 9f       	mul	r20, r18
    298c:	c0 01       	movw	r24, r0
    298e:	43 9f       	mul	r20, r19
    2990:	90 0d       	add	r25, r0
    2992:	52 9f       	mul	r21, r18
    2994:	90 0d       	add	r25, r0
    2996:	11 24       	eor	r1, r1
    2998:	e8 0f       	add	r30, r24
    299a:	f9 1f       	adc	r31, r25
    299c:	ec 59       	subi	r30, 0x9C	; 156
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	60 81       	ld	r22, Z
    29a2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	08 95       	ret

000029aa <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    29aa:	e0 91 49 01 	lds	r30, 0x0149
    29ae:	f0 91 4a 01 	lds	r31, 0x014A
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	2d e0       	ldi	r18, 0x0D	; 13
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	dc 01       	movw	r26, r24
    29ba:	a2 9f       	mul	r26, r18
    29bc:	c0 01       	movw	r24, r0
    29be:	a3 9f       	mul	r26, r19
    29c0:	90 0d       	add	r25, r0
    29c2:	b2 9f       	mul	r27, r18
    29c4:	90 0d       	add	r25, r0
    29c6:	11 24       	eor	r1, r1
    29c8:	e8 0f       	add	r30, r24
    29ca:	f9 1f       	adc	r31, r25
    29cc:	ec 59       	subi	r30, 0x9C	; 156
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	40 83       	st	Z, r20
    29d2:	51 83       	std	Z+1, r21	; 0x01
    29d4:	62 83       	std	Z+2, r22	; 0x02
    29d6:	73 83       	std	Z+3, r23	; 0x03
}
    29d8:	08 95       	ret

000029da <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    29da:	e0 91 49 01 	lds	r30, 0x0149
    29de:	f0 91 4a 01 	lds	r31, 0x014A
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	2d e0       	ldi	r18, 0x0D	; 13
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	ac 01       	movw	r20, r24
    29ea:	42 9f       	mul	r20, r18
    29ec:	c0 01       	movw	r24, r0
    29ee:	43 9f       	mul	r20, r19
    29f0:	90 0d       	add	r25, r0
    29f2:	52 9f       	mul	r21, r18
    29f4:	90 0d       	add	r25, r0
    29f6:	11 24       	eor	r1, r1
    29f8:	e8 0f       	add	r30, r24
    29fa:	f9 1f       	adc	r31, r25
    29fc:	e0 5a       	subi	r30, 0xA0	; 160
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	08 95       	ret

00002a0a <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a0a:	e0 91 49 01 	lds	r30, 0x0149
    2a0e:	f0 91 4a 01 	lds	r31, 0x014A
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	2d e0       	ldi	r18, 0x0D	; 13
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	dc 01       	movw	r26, r24
    2a1a:	a2 9f       	mul	r26, r18
    2a1c:	c0 01       	movw	r24, r0
    2a1e:	a3 9f       	mul	r26, r19
    2a20:	90 0d       	add	r25, r0
    2a22:	b2 9f       	mul	r27, r18
    2a24:	90 0d       	add	r25, r0
    2a26:	11 24       	eor	r1, r1
    2a28:	e8 0f       	add	r30, r24
    2a2a:	f9 1f       	adc	r31, r25
    2a2c:	e0 5a       	subi	r30, 0xA0	; 160
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	40 83       	st	Z, r20
    2a32:	51 83       	std	Z+1, r21	; 0x01
    2a34:	62 83       	std	Z+2, r22	; 0x02
    2a36:	73 83       	std	Z+3, r23	; 0x03
}
    2a38:	08 95       	ret

00002a3a <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    2a3a:	e0 91 49 01 	lds	r30, 0x0149
    2a3e:	f0 91 4a 01 	lds	r31, 0x014A
    2a42:	90 e0       	ldi	r25, 0x00	; 0
    2a44:	2d e0       	ldi	r18, 0x0D	; 13
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	ac 01       	movw	r20, r24
    2a4a:	42 9f       	mul	r20, r18
    2a4c:	c0 01       	movw	r24, r0
    2a4e:	43 9f       	mul	r20, r19
    2a50:	90 0d       	add	r25, r0
    2a52:	52 9f       	mul	r21, r18
    2a54:	90 0d       	add	r25, r0
    2a56:	11 24       	eor	r1, r1
    2a58:	e8 0f       	add	r30, r24
    2a5a:	f9 1f       	adc	r31, r25
    2a5c:	e8 59       	subi	r30, 0x98	; 152
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	08 95       	ret

00002a6a <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2a6a:	e0 91 49 01 	lds	r30, 0x0149
    2a6e:	f0 91 4a 01 	lds	r31, 0x014A
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2a76:	77 ff       	sbrs	r23, 7
    2a78:	13 c0       	rjmp	.+38     	; 0x2aa0 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    2a7a:	8d e0       	ldi	r24, 0x0D	; 13
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	ac 01       	movw	r20, r24
    2a80:	24 9f       	mul	r18, r20
    2a82:	c0 01       	movw	r24, r0
    2a84:	25 9f       	mul	r18, r21
    2a86:	90 0d       	add	r25, r0
    2a88:	34 9f       	mul	r19, r20
    2a8a:	90 0d       	add	r25, r0
    2a8c:	11 24       	eor	r1, r1
    2a8e:	e8 0f       	add	r30, r24
    2a90:	f9 1f       	adc	r31, r25
    2a92:	e8 59       	subi	r30, 0x98	; 152
    2a94:	ff 4f       	sbci	r31, 0xFF	; 255
    2a96:	10 82       	st	Z, r1
    2a98:	11 82       	std	Z+1, r1	; 0x01
    2a9a:	12 82       	std	Z+2, r1	; 0x02
    2a9c:	13 82       	std	Z+3, r1	; 0x03
    2a9e:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2aa0:	8d e0       	ldi	r24, 0x0D	; 13
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	2a 9f       	mul	r18, r26
    2aa8:	c0 01       	movw	r24, r0
    2aaa:	2b 9f       	mul	r18, r27
    2aac:	90 0d       	add	r25, r0
    2aae:	3a 9f       	mul	r19, r26
    2ab0:	90 0d       	add	r25, r0
    2ab2:	11 24       	eor	r1, r1
    2ab4:	e8 0f       	add	r30, r24
    2ab6:	f9 1f       	adc	r31, r25
    2ab8:	e8 59       	subi	r30, 0x98	; 152
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	40 83       	st	Z, r20
    2abe:	51 83       	std	Z+1, r21	; 0x01
    2ac0:	62 83       	std	Z+2, r22	; 0x02
    2ac2:	73 83       	std	Z+3, r23	; 0x03
    2ac4:	08 95       	ret

00002ac6 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    2ac6:	e0 91 49 01 	lds	r30, 0x0149
    2aca:	f0 91 4a 01 	lds	r31, 0x014A
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	2d e0       	ldi	r18, 0x0D	; 13
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	ac 01       	movw	r20, r24
    2ad6:	42 9f       	mul	r20, r18
    2ad8:	c0 01       	movw	r24, r0
    2ada:	43 9f       	mul	r20, r19
    2adc:	90 0d       	add	r25, r0
    2ade:	52 9f       	mul	r21, r18
    2ae0:	90 0d       	add	r25, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	e8 0f       	add	r30, r24
    2ae6:	f9 1f       	adc	r31, r25
    2ae8:	e1 5a       	subi	r30, 0xA1	; 161
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2aee:	81 70       	andi	r24, 0x01	; 1
    2af0:	08 95       	ret

00002af2 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2af2:	e0 91 49 01 	lds	r30, 0x0149
    2af6:	f0 91 4a 01 	lds	r31, 0x014A
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	2d e0       	ldi	r18, 0x0D	; 13
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	ac 01       	movw	r20, r24
    2b02:	42 9f       	mul	r20, r18
    2b04:	c0 01       	movw	r24, r0
    2b06:	43 9f       	mul	r20, r19
    2b08:	90 0d       	add	r25, r0
    2b0a:	52 9f       	mul	r21, r18
    2b0c:	90 0d       	add	r25, r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	e8 0f       	add	r30, r24
    2b12:	f9 1f       	adc	r31, r25
    2b14:	e1 5a       	subi	r30, 0xA1	; 161
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	80 81       	ld	r24, Z
    2b1a:	81 60       	ori	r24, 0x01	; 1
    2b1c:	80 83       	st	Z, r24
}
    2b1e:	08 95       	ret

00002b20 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b20:	e0 91 49 01 	lds	r30, 0x0149
    2b24:	f0 91 4a 01 	lds	r31, 0x014A
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	2d e0       	ldi	r18, 0x0D	; 13
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	ac 01       	movw	r20, r24
    2b30:	42 9f       	mul	r20, r18
    2b32:	c0 01       	movw	r24, r0
    2b34:	43 9f       	mul	r20, r19
    2b36:	90 0d       	add	r25, r0
    2b38:	52 9f       	mul	r21, r18
    2b3a:	90 0d       	add	r25, r0
    2b3c:	11 24       	eor	r1, r1
    2b3e:	e8 0f       	add	r30, r24
    2b40:	f9 1f       	adc	r31, r25
    2b42:	e1 5a       	subi	r30, 0xA1	; 161
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	80 81       	ld	r24, Z
    2b48:	8e 7f       	andi	r24, 0xFE	; 254
    2b4a:	80 83       	st	Z, r24
}
    2b4c:	08 95       	ret

00002b4e <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2b4e:	e0 91 49 01 	lds	r30, 0x0149
    2b52:	f0 91 4a 01 	lds	r31, 0x014A
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	2d e0       	ldi	r18, 0x0D	; 13
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	ac 01       	movw	r20, r24
    2b5e:	42 9f       	mul	r20, r18
    2b60:	c0 01       	movw	r24, r0
    2b62:	43 9f       	mul	r20, r19
    2b64:	90 0d       	add	r25, r0
    2b66:	52 9f       	mul	r21, r18
    2b68:	90 0d       	add	r25, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	e8 0f       	add	r30, r24
    2b6e:	f9 1f       	adc	r31, r25
    2b70:	e0 5a       	subi	r30, 0xA0	; 160
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	11 92       	st	Z+, r1
    2b76:	11 92       	st	Z+, r1
    2b78:	11 92       	st	Z+, r1
    2b7a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2b7c:	10 82       	st	Z, r1
    2b7e:	11 82       	std	Z+1, r1	; 0x01
    2b80:	12 82       	std	Z+2, r1	; 0x02
    2b82:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2b84:	35 97       	sbiw	r30, 0x05	; 5
    2b86:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b88:	80 7e       	andi	r24, 0xE0	; 224
    2b8a:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2b8c:	08 95       	ret

00002b8e <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2b8e:	e0 91 49 01 	lds	r30, 0x0149
    2b92:	f0 91 4a 01 	lds	r31, 0x014A
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	2d e0       	ldi	r18, 0x0D	; 13
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	ac 01       	movw	r20, r24
    2b9e:	42 9f       	mul	r20, r18
    2ba0:	c0 01       	movw	r24, r0
    2ba2:	43 9f       	mul	r20, r19
    2ba4:	90 0d       	add	r25, r0
    2ba6:	52 9f       	mul	r21, r18
    2ba8:	90 0d       	add	r25, r0
    2baa:	11 24       	eor	r1, r1
    2bac:	e8 0f       	add	r30, r24
    2bae:	f9 1f       	adc	r31, r25
    2bb0:	e0 5a       	subi	r30, 0xA0	; 160
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	11 92       	st	Z+, r1
    2bb6:	11 92       	st	Z+, r1
    2bb8:	11 92       	st	Z+, r1
    2bba:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2bbc:	10 82       	st	Z, r1
    2bbe:	11 82       	std	Z+1, r1	; 0x01
    2bc0:	12 82       	std	Z+2, r1	; 0x02
    2bc2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2bc4:	35 97       	sbiw	r30, 0x05	; 5
    2bc6:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2bc8:	80 7e       	andi	r24, 0xE0	; 224
    2bca:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2bcc:	08 95       	ret

00002bce <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2bce:	e0 91 49 01 	lds	r30, 0x0149
    2bd2:	f0 91 4a 01 	lds	r31, 0x014A
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2bd8:	2d e0       	ldi	r18, 0x0D	; 13
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	ac 01       	movw	r20, r24
    2bde:	42 9f       	mul	r20, r18
    2be0:	c0 01       	movw	r24, r0
    2be2:	43 9f       	mul	r20, r19
    2be4:	90 0d       	add	r25, r0
    2be6:	52 9f       	mul	r21, r18
    2be8:	90 0d       	add	r25, r0
    2bea:	11 24       	eor	r1, r1
    2bec:	e8 0f       	add	r30, r24
    2bee:	f9 1f       	adc	r31, r25
    2bf0:	e1 5a       	subi	r30, 0xA1	; 161
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	90 81       	ld	r25, Z
    2bf6:	89 2f       	mov	r24, r25
    2bf8:	86 95       	lsr	r24
    2bfa:	8f 70       	andi	r24, 0x0F	; 15
    2bfc:	81 30       	cpi	r24, 0x01	; 1
    2bfe:	19 f0       	breq	.+6      	; 0x2c06 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c00:	91 7e       	andi	r25, 0xE1	; 225
    2c02:	92 60       	ori	r25, 0x02	; 2
    2c04:	90 83       	st	Z, r25
    2c06:	08 95       	ret

00002c08 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2c08:	e0 91 49 01 	lds	r30, 0x0149
    2c0c:	f0 91 4a 01 	lds	r31, 0x014A
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2c12:	2d e0       	ldi	r18, 0x0D	; 13
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	ac 01       	movw	r20, r24
    2c18:	42 9f       	mul	r20, r18
    2c1a:	c0 01       	movw	r24, r0
    2c1c:	43 9f       	mul	r20, r19
    2c1e:	90 0d       	add	r25, r0
    2c20:	52 9f       	mul	r21, r18
    2c22:	90 0d       	add	r25, r0
    2c24:	11 24       	eor	r1, r1
    2c26:	e8 0f       	add	r30, r24
    2c28:	f9 1f       	adc	r31, r25
    2c2a:	e1 5a       	subi	r30, 0xA1	; 161
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	90 81       	ld	r25, Z
    2c30:	89 2f       	mov	r24, r25
    2c32:	86 95       	lsr	r24
    2c34:	8f 70       	andi	r24, 0x0F	; 15
    2c36:	82 30       	cpi	r24, 0x02	; 2
    2c38:	19 f0       	breq	.+6      	; 0x2c40 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c3a:	91 7e       	andi	r25, 0xE1	; 225
    2c3c:	94 60       	ori	r25, 0x04	; 4
    2c3e:	90 83       	st	Z, r25
    2c40:	08 95       	ret

00002c42 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2c46:	a0 91 49 01 	lds	r26, 0x0149
    2c4a:	b0 91 4a 01 	lds	r27, 0x014A
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2c50:	2d e0       	ldi	r18, 0x0D	; 13
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	82 9f       	mul	r24, r18
    2c56:	f0 01       	movw	r30, r0
    2c58:	83 9f       	mul	r24, r19
    2c5a:	f0 0d       	add	r31, r0
    2c5c:	92 9f       	mul	r25, r18
    2c5e:	f0 0d       	add	r31, r0
    2c60:	11 24       	eor	r1, r1
    2c62:	ea 0f       	add	r30, r26
    2c64:	fb 1f       	adc	r31, r27
    2c66:	ef 01       	movw	r28, r30
    2c68:	c1 5a       	subi	r28, 0xA1	; 161
    2c6a:	df 4f       	sbci	r29, 0xFF	; 255
    2c6c:	88 81       	ld	r24, Y
    2c6e:	86 95       	lsr	r24
    2c70:	8f 70       	andi	r24, 0x0F	; 15
    2c72:	e9 f4       	brne	.+58     	; 0x2cae <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c74:	ec 59       	subi	r30, 0x9C	; 156
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	40 83       	st	Z, r20
    2c7a:	51 83       	std	Z+1, r21	; 0x01
    2c7c:	62 83       	std	Z+2, r22	; 0x02
    2c7e:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2c80:	1a 96       	adiw	r26, 0x0a	; 10
    2c82:	8d 91       	ld	r24, X+
    2c84:	9d 91       	ld	r25, X+
    2c86:	0d 90       	ld	r0, X+
    2c88:	bc 91       	ld	r27, X
    2c8a:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2c8c:	84 0f       	add	r24, r20
    2c8e:	95 1f       	adc	r25, r21
    2c90:	a6 1f       	adc	r26, r22
    2c92:	b7 1f       	adc	r27, r23
    2c94:	b2 93       	st	-Z, r27
    2c96:	a2 93       	st	-Z, r26
    2c98:	92 93       	st	-Z, r25
    2c9a:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2c9c:	98 81       	ld	r25, Y
    2c9e:	89 2f       	mov	r24, r25
    2ca0:	86 95       	lsr	r24
    2ca2:	8f 70       	andi	r24, 0x0F	; 15
    2ca4:	81 30       	cpi	r24, 0x01	; 1
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2ca8:	91 7e       	andi	r25, 0xE1	; 225
    2caa:	92 60       	ori	r25, 0x02	; 2
    2cac:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	08 95       	ret

00002cb4 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2cb4:	cf 93       	push	r28
    2cb6:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2cb8:	e0 91 49 01 	lds	r30, 0x0149
    2cbc:	f0 91 4a 01 	lds	r31, 0x014A
    2cc0:	a8 2f       	mov	r26, r24
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	2d e0       	ldi	r18, 0x0D	; 13
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	e9 01       	movw	r28, r18
    2cca:	ac 9f       	mul	r26, r28
    2ccc:	90 01       	movw	r18, r0
    2cce:	ad 9f       	mul	r26, r29
    2cd0:	30 0d       	add	r19, r0
    2cd2:	bc 9f       	mul	r27, r28
    2cd4:	30 0d       	add	r19, r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	e2 0f       	add	r30, r18
    2cda:	f3 1f       	adc	r31, r19
    2cdc:	e0 5a       	subi	r30, 0xA0	; 160
    2cde:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce0:	11 92       	st	Z+, r1
    2ce2:	11 92       	st	Z+, r1
    2ce4:	11 92       	st	Z+, r1
    2ce6:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2ce8:	10 82       	st	Z, r1
    2cea:	11 82       	std	Z+1, r1	; 0x01
    2cec:	12 82       	std	Z+2, r1	; 0x02
    2cee:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2cf0:	35 97       	sbiw	r30, 0x05	; 5
    2cf2:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2cf4:	90 7e       	andi	r25, 0xE0	; 224
    2cf6:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2cf8:	0e 94 21 16 	call	0x2c42	; 0x2c42 <Timebase_DownCounter_Set_Securely>
} 
    2cfc:	df 91       	pop	r29
    2cfe:	cf 91       	pop	r28
    2d00:	08 95       	ret

00002d02 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2d0a:	a0 91 49 01 	lds	r26, 0x0149
    2d0e:	b0 91 4a 01 	lds	r27, 0x014A
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	2d e0       	ldi	r18, 0x0D	; 13
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	82 9f       	mul	r24, r18
    2d1a:	f0 01       	movw	r30, r0
    2d1c:	83 9f       	mul	r24, r19
    2d1e:	f0 0d       	add	r31, r0
    2d20:	92 9f       	mul	r25, r18
    2d22:	f0 0d       	add	r31, r0
    2d24:	11 24       	eor	r1, r1
    2d26:	ea 0f       	add	r30, r26
    2d28:	fb 1f       	adc	r31, r27
    2d2a:	8f 01       	movw	r16, r30
    2d2c:	01 5a       	subi	r16, 0xA1	; 161
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	e8 01       	movw	r28, r16
    2d32:	88 81       	ld	r24, Y
    2d34:	86 95       	lsr	r24
    2d36:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    2d38:	81 30       	cpi	r24, 0x01	; 1
    2d3a:	69 f5       	brne	.+90     	; 0x2d96 <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2d3c:	1a 96       	adiw	r26, 0x0a	; 10
    2d3e:	2d 91       	ld	r18, X+
    2d40:	3d 91       	ld	r19, X+
    2d42:	4d 91       	ld	r20, X+
    2d44:	5c 91       	ld	r21, X
    2d46:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    2d48:	bf 01       	movw	r22, r30
    2d4a:	60 5a       	subi	r22, 0xA0	; 160
    2d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4e:	eb 01       	movw	r28, r22
    2d50:	88 81       	ld	r24, Y
    2d52:	99 81       	ldd	r25, Y+1	; 0x01
    2d54:	aa 81       	ldd	r26, Y+2	; 0x02
    2d56:	bb 81       	ldd	r27, Y+3	; 0x03
    2d58:	82 1b       	sub	r24, r18
    2d5a:	93 0b       	sbc	r25, r19
    2d5c:	a4 0b       	sbc	r26, r20
    2d5e:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2d60:	ec 59       	subi	r30, 0x9C	; 156
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 83       	st	Z, r24
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	a2 83       	std	Z+2, r26	; 0x02
    2d6a:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2d6c:	18 16       	cp	r1, r24
    2d6e:	19 06       	cpc	r1, r25
    2d70:	1a 06       	cpc	r1, r26
    2d72:	1b 06       	cpc	r1, r27
    2d74:	34 f1       	brlt	.+76     	; 0x2dc2 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2d76:	db 01       	movw	r26, r22
    2d78:	1d 92       	st	X+, r1
    2d7a:	1d 92       	st	X+, r1
    2d7c:	1d 92       	st	X+, r1
    2d7e:	1c 92       	st	X, r1
    2d80:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2d82:	10 82       	st	Z, r1
    2d84:	11 82       	std	Z+1, r1	; 0x01
    2d86:	12 82       	std	Z+2, r1	; 0x02
    2d88:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d8a:	e8 01       	movw	r28, r16
    2d8c:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2d8e:	80 7e       	andi	r24, 0xE0	; 224
    2d90:	88 60       	ori	r24, 0x08	; 8
    2d92:	88 83       	st	Y, r24
    2d94:	16 c0       	rjmp	.+44     	; 0x2dc2 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2d96:	82 30       	cpi	r24, 0x02	; 2
    2d98:	a1 f4       	brne	.+40     	; 0x2dc2 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2d9a:	1a 96       	adiw	r26, 0x0a	; 10
    2d9c:	8d 91       	ld	r24, X+
    2d9e:	9d 91       	ld	r25, X+
    2da0:	0d 90       	ld	r0, X+
    2da2:	bc 91       	ld	r27, X
    2da4:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2da6:	ec 59       	subi	r30, 0x9C	; 156
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	20 81       	ld	r18, Z
    2dac:	31 81       	ldd	r19, Z+1	; 0x01
    2dae:	42 81       	ldd	r20, Z+2	; 0x02
    2db0:	53 81       	ldd	r21, Z+3	; 0x03
    2db2:	82 0f       	add	r24, r18
    2db4:	93 1f       	adc	r25, r19
    2db6:	a4 1f       	adc	r26, r20
    2db8:	b5 1f       	adc	r27, r21
    2dba:	b2 93       	st	-Z, r27
    2dbc:	a2 93       	st	-Z, r26
    2dbe:	92 93       	st	-Z, r25
    2dc0:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	1f 91       	pop	r17
    2dc8:	0f 91       	pop	r16
    2dca:	08 95       	ret

00002dcc <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2dcc:	40 e0       	ldi	r20, 0x00	; 0
    2dce:	e0 91 49 01 	lds	r30, 0x0149
    2dd2:	f0 91 4a 01 	lds	r31, 0x014A
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	2d e0       	ldi	r18, 0x0D	; 13
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	bc 01       	movw	r22, r24
    2dde:	62 9f       	mul	r22, r18
    2de0:	c0 01       	movw	r24, r0
    2de2:	63 9f       	mul	r22, r19
    2de4:	90 0d       	add	r25, r0
    2de6:	72 9f       	mul	r23, r18
    2de8:	90 0d       	add	r25, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	e8 0f       	add	r30, r24
    2dee:	f9 1f       	adc	r31, r25
    2df0:	e1 5a       	subi	r30, 0xA1	; 161
    2df2:	ff 4f       	sbci	r31, 0xFF	; 255
    2df4:	80 81       	ld	r24, Z
    2df6:	86 95       	lsr	r24
    2df8:	8f 70       	andi	r24, 0x0F	; 15
    2dfa:	84 30       	cpi	r24, 0x04	; 4
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <Timebase_DownCounter_Expired+0x34>
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2e00:	84 2f       	mov	r24, r20
    2e02:	08 95       	ret

00002e04 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2e04:	e0 91 49 01 	lds	r30, 0x0149
    2e08:	f0 91 4a 01 	lds	r31, 0x014A
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2e0e:	2d e0       	ldi	r18, 0x0D	; 13
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	ac 01       	movw	r20, r24
    2e14:	42 9f       	mul	r20, r18
    2e16:	c0 01       	movw	r24, r0
    2e18:	43 9f       	mul	r20, r19
    2e1a:	90 0d       	add	r25, r0
    2e1c:	52 9f       	mul	r21, r18
    2e1e:	90 0d       	add	r25, r0
    2e20:	11 24       	eor	r1, r1
    2e22:	e8 0f       	add	r30, r24
    2e24:	f9 1f       	adc	r31, r25
    2e26:	df 01       	movw	r26, r30
    2e28:	a1 5a       	subi	r26, 0xA1	; 161
    2e2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2c:	8c 91       	ld	r24, X
    2e2e:	86 95       	lsr	r24
    2e30:	8f 70       	andi	r24, 0x0F	; 15
    2e32:	84 30       	cpi	r24, 0x04	; 4
    2e34:	11 f0       	breq	.+4      	; 0x2e3a <Timebase_DownCounter_Expired_Event+0x36>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2e3a:	e0 5a       	subi	r30, 0xA0	; 160
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	11 92       	st	Z+, r1
    2e40:	11 92       	st	Z+, r1
    2e42:	11 92       	st	Z+, r1
    2e44:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2e46:	10 82       	st	Z, r1
    2e48:	11 82       	std	Z+1, r1	; 0x01
    2e4a:	12 82       	std	Z+2, r1	; 0x02
    2e4c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2e4e:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2e50:	80 7e       	andi	r24, 0xE0	; 224
    2e52:	8c 93       	st	X, r24
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2e56:	08 95       	ret

00002e58 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2e5c:	c0 91 49 01 	lds	r28, 0x0149
    2e60:	d0 91 4a 01 	lds	r29, 0x014A
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2e68:	8d e0       	ldi	r24, 0x0D	; 13
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	28 9f       	mul	r18, r24
    2e6e:	f0 01       	movw	r30, r0
    2e70:	29 9f       	mul	r18, r25
    2e72:	f0 0d       	add	r31, r0
    2e74:	38 9f       	mul	r19, r24
    2e76:	f0 0d       	add	r31, r0
    2e78:	11 24       	eor	r1, r1
    2e7a:	ec 0f       	add	r30, r28
    2e7c:	fd 1f       	adc	r31, r29
    2e7e:	e1 5a       	subi	r30, 0xA1	; 161
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	ef 55       	subi	r30, 0x5F	; 95
    2e86:	f0 40       	sbci	r31, 0x00	; 0
    2e88:	80 fd       	sbrc	r24, 0
    2e8a:	25 c0       	rjmp	.+74     	; 0x2ed6 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2e8c:	ec 59       	subi	r30, 0x9C	; 156
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	81 91       	ld	r24, Z+
    2e92:	91 91       	ld	r25, Z+
    2e94:	a1 91       	ld	r26, Z+
    2e96:	b1 91       	ld	r27, Z+
    2e98:	84 1b       	sub	r24, r20
    2e9a:	95 0b       	sbc	r25, r21
    2e9c:	a6 0b       	sbc	r26, r22
    2e9e:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2ea0:	b7 ff       	sbrs	r27, 7
    2ea2:	05 c0       	rjmp	.+10     	; 0x2eae <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2ea4:	10 82       	st	Z, r1
    2ea6:	11 82       	std	Z+1, r1	; 0x01
    2ea8:	12 82       	std	Z+2, r1	; 0x02
    2eaa:	13 82       	std	Z+3, r1	; 0x03
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2eae:	80 83       	st	Z, r24
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	a2 83       	std	Z+2, r26	; 0x02
    2eb4:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2eb6:	8d e0       	ldi	r24, 0x0D	; 13
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	28 9f       	mul	r18, r24
    2ebc:	f0 01       	movw	r30, r0
    2ebe:	29 9f       	mul	r18, r25
    2ec0:	f0 0d       	add	r31, r0
    2ec2:	38 9f       	mul	r19, r24
    2ec4:	f0 0d       	add	r31, r0
    2ec6:	11 24       	eor	r1, r1
    2ec8:	ec 0f       	add	r30, r28
    2eca:	fd 1f       	adc	r31, r29
    2ecc:	e1 5a       	subi	r30, 0xA1	; 161
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	80 81       	ld	r24, Z
    2ed2:	81 60       	ori	r24, 0x01	; 1
    2ed4:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2ed6:	df 91       	pop	r29
    2ed8:	cf 91       	pop	r28
    2eda:	08 95       	ret

00002edc <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2edc:	e0 91 49 01 	lds	r30, 0x0149
    2ee0:	f0 91 4a 01 	lds	r31, 0x014A
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2ee6:	2d e0       	ldi	r18, 0x0D	; 13
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	ac 01       	movw	r20, r24
    2eec:	42 9f       	mul	r20, r18
    2eee:	c0 01       	movw	r24, r0
    2ef0:	43 9f       	mul	r20, r19
    2ef2:	90 0d       	add	r25, r0
    2ef4:	52 9f       	mul	r21, r18
    2ef6:	90 0d       	add	r25, r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	e8 0f       	add	r30, r24
    2efc:	f9 1f       	adc	r31, r25
    2efe:	df 01       	movw	r26, r30
    2f00:	a8 59       	subi	r26, 0x98	; 152
    2f02:	bf 4f       	sbci	r27, 0xFF	; 255
    2f04:	ec 59       	subi	r30, 0x9C	; 156
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	20 81       	ld	r18, Z
    2f0a:	31 81       	ldd	r19, Z+1	; 0x01
    2f0c:	42 81       	ldd	r20, Z+2	; 0x02
    2f0e:	53 81       	ldd	r21, Z+3	; 0x03
    2f10:	8d 91       	ld	r24, X+
    2f12:	9d 91       	ld	r25, X+
    2f14:	0d 90       	ld	r0, X+
    2f16:	bc 91       	ld	r27, X
    2f18:	a0 2d       	mov	r26, r0
    2f1a:	28 1b       	sub	r18, r24
    2f1c:	39 0b       	sbc	r19, r25
    2f1e:	4a 0b       	sbc	r20, r26
    2f20:	5b 0b       	sbc	r21, r27
    2f22:	57 ff       	sbrs	r21, 7
    2f24:	04 c0       	rjmp	.+8      	; 0x2f2e <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e0       	ldi	r20, 0x00	; 0
    2f2c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2f2e:	b9 01       	movw	r22, r18
    2f30:	ca 01       	movw	r24, r20
    2f32:	08 95       	ret

00002f34 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2f38:	c0 91 49 01 	lds	r28, 0x0149
    2f3c:	d0 91 4a 01 	lds	r29, 0x014A
    2f40:	68 2f       	mov	r22, r24
    2f42:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2f44:	8d e0       	ldi	r24, 0x0D	; 13
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	68 9f       	mul	r22, r24
    2f4a:	f0 01       	movw	r30, r0
    2f4c:	69 9f       	mul	r22, r25
    2f4e:	f0 0d       	add	r31, r0
    2f50:	78 9f       	mul	r23, r24
    2f52:	f0 0d       	add	r31, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	ec 0f       	add	r30, r28
    2f58:	fd 1f       	adc	r31, r29
    2f5a:	df 01       	movw	r26, r30
    2f5c:	a8 59       	subi	r26, 0x98	; 152
    2f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f60:	ec 59       	subi	r30, 0x9C	; 156
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	20 81       	ld	r18, Z
    2f66:	31 81       	ldd	r19, Z+1	; 0x01
    2f68:	42 81       	ldd	r20, Z+2	; 0x02
    2f6a:	53 81       	ldd	r21, Z+3	; 0x03
    2f6c:	8d 91       	ld	r24, X+
    2f6e:	9d 91       	ld	r25, X+
    2f70:	0d 90       	ld	r0, X+
    2f72:	bc 91       	ld	r27, X
    2f74:	a0 2d       	mov	r26, r0
    2f76:	28 1b       	sub	r18, r24
    2f78:	39 0b       	sbc	r19, r25
    2f7a:	4a 0b       	sbc	r20, r26
    2f7c:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2f7e:	57 fd       	sbrc	r21, 7
    2f80:	07 c0       	rjmp	.+14     	; 0x2f90 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2f82:	21 15       	cp	r18, r1
    2f84:	31 05       	cpc	r19, r1
    2f86:	41 05       	cpc	r20, r1
    2f88:	51 05       	cpc	r21, r1
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <Timebase_DownCounter_Period_Value_Expired+0x84>
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	8d e0       	ldi	r24, 0x0D	; 13
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	ac 01       	movw	r20, r24
    2f98:	64 9f       	mul	r22, r20
    2f9a:	c0 01       	movw	r24, r0
    2f9c:	65 9f       	mul	r22, r21
    2f9e:	90 0d       	add	r25, r0
    2fa0:	74 9f       	mul	r23, r20
    2fa2:	90 0d       	add	r25, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	c8 0f       	add	r28, r24
    2fa8:	d9 1f       	adc	r29, r25
    2faa:	c1 5a       	subi	r28, 0xA1	; 161
    2fac:	df 4f       	sbci	r29, 0xFF	; 255
    2fae:	88 81       	ld	r24, Y
    2fb0:	80 ff       	sbrs	r24, 0
    2fb2:	21 e0       	ldi	r18, 0x01	; 1
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2fb8:	82 2f       	mov	r24, r18
    2fba:	df 91       	pop	r29
    2fbc:	cf 91       	pop	r28
    2fbe:	08 95       	ret

00002fc0 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2fc0:	1f 93       	push	r17
    2fc2:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2fc4:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <Timebase_DownCounter_Period_Value_Expired>
    2fc8:	81 30       	cpi	r24, 0x01	; 1
    2fca:	11 f0       	breq	.+4      	; 0x2fd0 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	18 c0       	rjmp	.+48     	; 0x3000 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2fd0:	e0 91 49 01 	lds	r30, 0x0149
    2fd4:	f0 91 4a 01 	lds	r31, 0x014A
    2fd8:	21 2f       	mov	r18, r17
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	8d e0       	ldi	r24, 0x0D	; 13
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	ac 01       	movw	r20, r24
    2fe2:	24 9f       	mul	r18, r20
    2fe4:	c0 01       	movw	r24, r0
    2fe6:	25 9f       	mul	r18, r21
    2fe8:	90 0d       	add	r25, r0
    2fea:	34 9f       	mul	r19, r20
    2fec:	90 0d       	add	r25, r0
    2fee:	11 24       	eor	r1, r1
    2ff0:	e8 0f       	add	r30, r24
    2ff2:	f9 1f       	adc	r31, r25
    2ff4:	e1 5a       	subi	r30, 0xA1	; 161
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	80 81       	ld	r24, Z
    2ffa:	8e 7f       	andi	r24, 0xFE	; 254
    2ffc:	80 83       	st	Z, r24
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3000:	1f 91       	pop	r17
    3002:	08 95       	ret

00003004 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	0e 94 81 16 	call	0x2d02	; 0x2d02 <Timebase_DownCounter_Update>
  }
}
    300a:	08 95       	ret

0000300c <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    300c:	e0 91 49 01 	lds	r30, 0x0149
    3010:	f0 91 4a 01 	lds	r31, 0x014A
    3014:	e0 5a       	subi	r30, 0xA0	; 160
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	11 92       	st	Z+, r1
    301a:	11 92       	st	Z+, r1
    301c:	11 92       	st	Z+, r1
    301e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    3020:	10 82       	st	Z, r1
    3022:	11 82       	std	Z+1, r1	; 0x01
    3024:	12 82       	std	Z+2, r1	; 0x02
    3026:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    3028:	35 97       	sbiw	r30, 0x05	; 5
    302a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    302c:	80 7e       	andi	r24, 0xE0	; 224
    302e:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    3030:	08 95       	ret

00003032 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    3032:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    3036:	0e 94 74 14 	call	0x28e8	; 0x28e8 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    303a:	0e 94 06 18 	call	0x300c	; 0x300c <Timebase_DownCounter_Reset_All>
  #endif
  
}
    303e:	08 95       	ret

00003040 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    3040:	0f 93       	push	r16
    3042:	1f 93       	push	r17
    3044:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    3046:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    304a:	c8 01       	movw	r24, r16
    304c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <Timebase_Timer_Config>
  Timebase_Reset();
    3050:	0e 94 19 18 	call	0x3032	; 0x3032 <Timebase_Reset>
}
    3054:	1f 91       	pop	r17
    3056:	0f 91       	pop	r16
    3058:	08 95       	ret

0000305a <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    305a:	e0 91 49 01 	lds	r30, 0x0149
    305e:	f0 91 4a 01 	lds	r31, 0x014A
    3062:	86 8d       	ldd	r24, Z+30	; 0x1e
    3064:	82 ff       	sbrs	r24, 2
    3066:	0b c0       	rjmp	.+22     	; 0x307e <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3068:	0e 94 10 05 	call	0xa20	; 0xa20 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    306c:	0e 94 ce 0b 	call	0x179c	; 0x179c <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    3070:	e0 91 49 01 	lds	r30, 0x0149
    3074:	f0 91 4a 01 	lds	r31, 0x014A
    3078:	86 8d       	ldd	r24, Z+30	; 0x1e
    307a:	8b 7f       	andi	r24, 0xFB	; 251
    307c:	86 8f       	std	Z+30, r24	; 0x1e
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    307e:	e0 91 49 01 	lds	r30, 0x0149
    3082:	f0 91 4a 01 	lds	r31, 0x014A
    3086:	86 8d       	ldd	r24, Z+30	; 0x1e
    3088:	80 ff       	sbrs	r24, 0
    308a:	0b c0       	rjmp	.+22     	; 0x30a2 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    308c:	0e 94 10 05 	call	0xa20	; 0xa20 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    3090:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    3094:	e0 91 49 01 	lds	r30, 0x0149
    3098:	f0 91 4a 01 	lds	r31, 0x014A
    309c:	86 8d       	ldd	r24, Z+30	; 0x1e
    309e:	8e 7f       	andi	r24, 0xFE	; 254
    30a0:	86 8f       	std	Z+30, r24	; 0x1e
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    30a2:	e0 91 49 01 	lds	r30, 0x0149
    30a6:	f0 91 4a 01 	lds	r31, 0x014A
    30aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    30ac:	83 ff       	sbrs	r24, 3
    30ae:	0b c0       	rjmp	.+22     	; 0x30c6 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    30b0:	0e 94 10 05 	call	0xa20	; 0xa20 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    30b4:	0e 94 70 14 	call	0x28e0	; 0x28e0 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    30b8:	e0 91 49 01 	lds	r30, 0x0149
    30bc:	f0 91 4a 01 	lds	r31, 0x014A
    30c0:	86 8d       	ldd	r24, Z+30	; 0x1e
    30c2:	87 7f       	andi	r24, 0xF7	; 247
    30c4:	86 8f       	std	Z+30, r24	; 0x1e
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    30c6:	e0 91 49 01 	lds	r30, 0x0149
    30ca:	f0 91 4a 01 	lds	r31, 0x014A
    30ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    30d0:	81 ff       	sbrs	r24, 1
    30d2:	0b c0       	rjmp	.+22     	; 0x30ea <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    30d4:	0e 94 10 05 	call	0xa20	; 0xa20 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    30d8:	0e 94 02 18 	call	0x3004	; 0x3004 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    30dc:	e0 91 49 01 	lds	r30, 0x0149
    30e0:	f0 91 4a 01 	lds	r31, 0x014A
    30e4:	86 8d       	ldd	r24, Z+30	; 0x1e
    30e6:	8d 7f       	andi	r24, 0xFD	; 253
    30e8:	86 8f       	std	Z+30, r24	; 0x1e
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    30ea:	e0 91 49 01 	lds	r30, 0x0149
    30ee:	f0 91 4a 01 	lds	r31, 0x014A
    30f2:	14 8a       	std	Z+20, r1	; 0x14
}
    30f4:	08 95       	ret

000030f6 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    30f6:	e0 91 49 01 	lds	r30, 0x0149
    30fa:	f0 91 4a 01 	lds	r31, 0x014A
    30fe:	86 85       	ldd	r24, Z+14	; 0x0e
    3100:	97 85       	ldd	r25, Z+15	; 0x0f
    3102:	01 96       	adiw	r24, 0x01	; 1
    3104:	97 87       	std	Z+15, r25	; 0x0f
    3106:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    3108:	86 8d       	ldd	r24, Z+30	; 0x1e
    310a:	84 60       	ori	r24, 0x04	; 4
    310c:	86 8f       	std	Z+30, r24	; 0x1e
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    310e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3110:	88 60       	ori	r24, 0x08	; 8
    3112:	86 8f       	std	Z+30, r24	; 0x1e
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    3114:	26 85       	ldd	r18, Z+14	; 0x0e
    3116:	37 85       	ldd	r19, Z+15	; 0x0f
    3118:	81 81       	ldd	r24, Z+1	; 0x01
    311a:	92 81       	ldd	r25, Z+2	; 0x02
    311c:	28 17       	cp	r18, r24
    311e:	39 07       	cpc	r19, r25
    3120:	98 f0       	brcs	.+38     	; 0x3148 <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    3122:	80 89       	ldd	r24, Z+16	; 0x10
    3124:	91 89       	ldd	r25, Z+17	; 0x11
    3126:	a2 89       	ldd	r26, Z+18	; 0x12
    3128:	b3 89       	ldd	r27, Z+19	; 0x13
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	a1 1d       	adc	r26, r1
    312e:	b1 1d       	adc	r27, r1
    3130:	80 8b       	std	Z+16, r24	; 0x10
    3132:	91 8b       	std	Z+17, r25	; 0x11
    3134:	a2 8b       	std	Z+18, r26	; 0x12
    3136:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    3138:	17 86       	std	Z+15, r1	; 0x0f
    313a:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    313c:	86 8d       	ldd	r24, Z+30	; 0x1e
    313e:	81 60       	ori	r24, 0x01	; 1
    3140:	86 8f       	std	Z+30, r24	; 0x1e
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    3142:	86 8d       	ldd	r24, Z+30	; 0x1e
    3144:	82 60       	ori	r24, 0x02	; 2
    3146:	86 8f       	std	Z+30, r24	; 0x1e
    3148:	08 95       	ret

0000314a <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	2f 93       	push	r18
    3156:	3f 93       	push	r19
    3158:	4f 93       	push	r20
    315a:	5f 93       	push	r21
    315c:	6f 93       	push	r22
    315e:	7f 93       	push	r23
    3160:	8f 93       	push	r24
    3162:	9f 93       	push	r25
    3164:	af 93       	push	r26
    3166:	bf 93       	push	r27
    3168:	ef 93       	push	r30
    316a:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    316c:	e0 91 49 01 	lds	r30, 0x0149
    3170:	f0 91 4a 01 	lds	r31, 0x014A
    3174:	83 81       	ldd	r24, Z+3	; 0x03
    3176:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    3178:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <Timebase_ISR_Executables>
}
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	bf 91       	pop	r27
    3182:	af 91       	pop	r26
    3184:	9f 91       	pop	r25
    3186:	8f 91       	pop	r24
    3188:	7f 91       	pop	r23
    318a:	6f 91       	pop	r22
    318c:	5f 91       	pop	r21
    318e:	4f 91       	pop	r20
    3190:	3f 91       	pop	r19
    3192:	2f 91       	pop	r18
    3194:	0f 90       	pop	r0
    3196:	0f be       	out	0x3f, r0	; 63
    3198:	0f 90       	pop	r0
    319a:	1f 90       	pop	r1
    319c:	18 95       	reti

0000319e <__mulsi3>:
    319e:	62 9f       	mul	r22, r18
    31a0:	d0 01       	movw	r26, r0
    31a2:	73 9f       	mul	r23, r19
    31a4:	f0 01       	movw	r30, r0
    31a6:	82 9f       	mul	r24, r18
    31a8:	e0 0d       	add	r30, r0
    31aa:	f1 1d       	adc	r31, r1
    31ac:	64 9f       	mul	r22, r20
    31ae:	e0 0d       	add	r30, r0
    31b0:	f1 1d       	adc	r31, r1
    31b2:	92 9f       	mul	r25, r18
    31b4:	f0 0d       	add	r31, r0
    31b6:	83 9f       	mul	r24, r19
    31b8:	f0 0d       	add	r31, r0
    31ba:	74 9f       	mul	r23, r20
    31bc:	f0 0d       	add	r31, r0
    31be:	65 9f       	mul	r22, r21
    31c0:	f0 0d       	add	r31, r0
    31c2:	99 27       	eor	r25, r25
    31c4:	72 9f       	mul	r23, r18
    31c6:	b0 0d       	add	r27, r0
    31c8:	e1 1d       	adc	r30, r1
    31ca:	f9 1f       	adc	r31, r25
    31cc:	63 9f       	mul	r22, r19
    31ce:	b0 0d       	add	r27, r0
    31d0:	e1 1d       	adc	r30, r1
    31d2:	f9 1f       	adc	r31, r25
    31d4:	bd 01       	movw	r22, r26
    31d6:	cf 01       	movw	r24, r30
    31d8:	11 24       	eor	r1, r1
    31da:	08 95       	ret

000031dc <__udivmodsi4>:
    31dc:	a1 e2       	ldi	r26, 0x21	; 33
    31de:	1a 2e       	mov	r1, r26
    31e0:	aa 1b       	sub	r26, r26
    31e2:	bb 1b       	sub	r27, r27
    31e4:	fd 01       	movw	r30, r26
    31e6:	0d c0       	rjmp	.+26     	; 0x3202 <__udivmodsi4_ep>

000031e8 <__udivmodsi4_loop>:
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	ee 1f       	adc	r30, r30
    31ee:	ff 1f       	adc	r31, r31
    31f0:	a2 17       	cp	r26, r18
    31f2:	b3 07       	cpc	r27, r19
    31f4:	e4 07       	cpc	r30, r20
    31f6:	f5 07       	cpc	r31, r21
    31f8:	20 f0       	brcs	.+8      	; 0x3202 <__udivmodsi4_ep>
    31fa:	a2 1b       	sub	r26, r18
    31fc:	b3 0b       	sbc	r27, r19
    31fe:	e4 0b       	sbc	r30, r20
    3200:	f5 0b       	sbc	r31, r21

00003202 <__udivmodsi4_ep>:
    3202:	66 1f       	adc	r22, r22
    3204:	77 1f       	adc	r23, r23
    3206:	88 1f       	adc	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	1a 94       	dec	r1
    320c:	69 f7       	brne	.-38     	; 0x31e8 <__udivmodsi4_loop>
    320e:	60 95       	com	r22
    3210:	70 95       	com	r23
    3212:	80 95       	com	r24
    3214:	90 95       	com	r25
    3216:	9b 01       	movw	r18, r22
    3218:	ac 01       	movw	r20, r24
    321a:	bd 01       	movw	r22, r26
    321c:	cf 01       	movw	r24, r30
    321e:	08 95       	ret

00003220 <__divmodsi4>:
    3220:	97 fb       	bst	r25, 7
    3222:	09 2e       	mov	r0, r25
    3224:	05 26       	eor	r0, r21
    3226:	0e d0       	rcall	.+28     	; 0x3244 <__divmodsi4_neg1>
    3228:	57 fd       	sbrc	r21, 7
    322a:	04 d0       	rcall	.+8      	; 0x3234 <__divmodsi4_neg2>
    322c:	d7 df       	rcall	.-82     	; 0x31dc <__udivmodsi4>
    322e:	0a d0       	rcall	.+20     	; 0x3244 <__divmodsi4_neg1>
    3230:	00 1c       	adc	r0, r0
    3232:	38 f4       	brcc	.+14     	; 0x3242 <__divmodsi4_exit>

00003234 <__divmodsi4_neg2>:
    3234:	50 95       	com	r21
    3236:	40 95       	com	r20
    3238:	30 95       	com	r19
    323a:	21 95       	neg	r18
    323c:	3f 4f       	sbci	r19, 0xFF	; 255
    323e:	4f 4f       	sbci	r20, 0xFF	; 255
    3240:	5f 4f       	sbci	r21, 0xFF	; 255

00003242 <__divmodsi4_exit>:
    3242:	08 95       	ret

00003244 <__divmodsi4_neg1>:
    3244:	f6 f7       	brtc	.-4      	; 0x3242 <__divmodsi4_exit>
    3246:	90 95       	com	r25
    3248:	80 95       	com	r24
    324a:	70 95       	com	r23
    324c:	61 95       	neg	r22
    324e:	7f 4f       	sbci	r23, 0xFF	; 255
    3250:	8f 4f       	sbci	r24, 0xFF	; 255
    3252:	9f 4f       	sbci	r25, 0xFF	; 255
    3254:	08 95       	ret

00003256 <_exit>:
    3256:	f8 94       	cli

00003258 <__stop_program>:
    3258:	ff cf       	rjmp	.-2      	; 0x3258 <__stop_program>
