
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000030ec  00003180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  00800114  00800114  00003194  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017aa  00000000  00000000  000031f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000046a0  00000000  00000000  0000499e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021cc  00000000  00000000  000095ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  0000b7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000199b  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b76  00000000  00000000  0000dbb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f729  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f0 e3       	ldi	r31, 0x30	; 48
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3a       	cpi	r26, 0xA7	; 167
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 f4 17 	call	0x2fe8	; 0x2fe8 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 02 15 	call	0x2a04	; 0x2a04 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e2       	ldi	r20, 0x20	; 32
      dc:	5e e4       	ldi	r21, 0x4E	; 78
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 90 05 	call	0xb20	; 0xb20 <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	42 e1       	ldi	r20, 0x12	; 18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	51 e7       	ldi	r21, 0x71	; 113
      fa:	62 e0       	ldi	r22, 0x02	; 2
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	4e e0       	ldi	r20, 0x0E	; 14
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 03 13 	call	0x2606	; 0x2606 <Timebase_DownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(50);
     110:	82 e3       	ldi	r24, 0x32	; 50
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 07 03 	call	0x60e	; 0x60e <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 a2 03 	call	0x744	; 0x744 <Timebase_UpCounter_SS_Get_Value>
     11e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 09 09 	call	0x1212	; 0x1212 <Timebase_UpCounter_Get_Value>
     130:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <Timebase_DownCounter_SS_Get_Value>
     142:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 9f 11 	call	0x233e	; 0x233e <Timebase_DownCounter_Get_Value>
     154:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     160:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     162:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     166:	5e 98       	cbi	0x0b, 6	; 11
     168:	d3 cf       	rjmp	.-90     	; 0x110 <main+0x6a>

0000016a <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     16a:	85 e4       	ldi	r24, 0x45	; 69
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	90 93 44 01 	sts	0x0144, r25
     172:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.TimerType.Value = 0;
     176:	10 92 45 01 	sts	0x0145, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     17a:	80 91 45 01 	lds	r24, 0x0145
     17e:	84 60       	ori	r24, 0x04	; 4
     180:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     184:	80 91 45 01 	lds	r24, 0x0145
     188:	87 70       	andi	r24, 0x07	; 7
     18a:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.UpdateRate = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 47 01 	sts	0x0147, r25
     196:	80 93 46 01 	sts	0x0146, r24
  Timebase->Time.OVFUpdateValue=0;
     19a:	10 92 48 01 	sts	0x0148, r1
  Timebase->Time.SubSecondsShadow = 0;
     19e:	10 92 54 01 	sts	0x0154, r1
     1a2:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.SecondsShadow = 0;
     1a6:	10 92 55 01 	sts	0x0155, r1
     1aa:	10 92 56 01 	sts	0x0156, r1
     1ae:	10 92 57 01 	sts	0x0157, r1
     1b2:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.SubSeconds = 0;
     1b6:	10 92 4e 01 	sts	0x014E, r1
     1ba:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Time.Seconds = 0;
     1be:	10 92 4f 01 	sts	0x014F, r1
     1c2:	10 92 50 01 	sts	0x0150, r1
     1c6:	10 92 51 01 	sts	0x0151, r1
     1ca:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.VariablesSync = 0;
     1ce:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.LastSample = 0;
     1d2:	10 92 49 01 	sts	0x0149, r1
     1d6:	10 92 4a 01 	sts	0x014A, r1
     1da:	10 92 4b 01 	sts	0x014B, r1
     1de:	10 92 4c 01 	sts	0x014C, r1
    Timebase->Time.StartTimeSeconds = 0;
	Timebase->Time.StartTimeSubSeconds = 0;
	Timebase->Time.Status = 0;
  #endif
  
  Timebase->UpdateRequest = 0;
     1e2:	10 92 5a 01 	sts	0x015A, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     1e6:	10 92 74 01 	sts	0x0174, r1
    Timebase->UpCounter[i].EndValue = 0;
     1ea:	10 92 75 01 	sts	0x0175, r1
     1ee:	10 92 76 01 	sts	0x0176, r1
     1f2:	10 92 77 01 	sts	0x0177, r1
     1f6:	10 92 78 01 	sts	0x0178, r1
    Timebase->UpCounter[i].Target = 0;
     1fa:	10 92 79 01 	sts	0x0179, r1
     1fe:	10 92 7a 01 	sts	0x017A, r1
     202:	10 92 7b 01 	sts	0x017B, r1
     206:	10 92 7c 01 	sts	0x017C, r1
    Timebase->UpCounter[i].Temporary = 0;    
     20a:	10 92 7d 01 	sts	0x017D, r1
     20e:	10 92 7e 01 	sts	0x017E, r1
     212:	10 92 7f 01 	sts	0x017F, r1
     216:	10 92 80 01 	sts	0x0180, r1
    Timebase->UpCounter[i].Value = 0;
     21a:	10 92 81 01 	sts	0x0181, r1
     21e:	10 92 82 01 	sts	0x0182, r1
     222:	10 92 83 01 	sts	0x0183, r1
     226:	10 92 84 01 	sts	0x0184, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     22a:	10 92 85 01 	sts	0x0185, r1
     22e:	10 92 86 01 	sts	0x0186, r1
     232:	10 92 87 01 	sts	0x0187, r1
     236:	10 92 88 01 	sts	0x0188, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     23a:	10 92 5b 01 	sts	0x015B, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     23e:	10 92 5c 01 	sts	0x015C, r1
     242:	10 92 5d 01 	sts	0x015D, r1
     246:	10 92 5e 01 	sts	0x015E, r1
     24a:	10 92 5f 01 	sts	0x015F, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     24e:	10 92 60 01 	sts	0x0160, r1
     252:	10 92 61 01 	sts	0x0161, r1
     256:	10 92 62 01 	sts	0x0162, r1
     25a:	10 92 63 01 	sts	0x0163, r1
    Timebase->UpCounterSS[i].Target = 0;
     25e:	10 92 64 01 	sts	0x0164, r1
     262:	10 92 65 01 	sts	0x0165, r1
     266:	10 92 66 01 	sts	0x0166, r1
     26a:	10 92 67 01 	sts	0x0167, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     26e:	10 92 68 01 	sts	0x0168, r1
     272:	10 92 69 01 	sts	0x0169, r1
     276:	10 92 6a 01 	sts	0x016A, r1
     27a:	10 92 6b 01 	sts	0x016B, r1
    Timebase->UpCounterSS[i].Value = 0;
     27e:	10 92 6c 01 	sts	0x016C, r1
     282:	10 92 6d 01 	sts	0x016D, r1
     286:	10 92 6e 01 	sts	0x016E, r1
     28a:	10 92 6f 01 	sts	0x016F, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     28e:	10 92 70 01 	sts	0x0170, r1
     292:	10 92 71 01 	sts	0x0171, r1
     296:	10 92 72 01 	sts	0x0172, r1
     29a:	10 92 73 01 	sts	0x0173, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     29e:	10 92 9a 01 	sts	0x019A, r1
    Timebase->DownCounter[i].EndValue = 0;
     2a2:	10 92 9b 01 	sts	0x019B, r1
     2a6:	10 92 9c 01 	sts	0x019C, r1
     2aa:	10 92 9d 01 	sts	0x019D, r1
     2ae:	10 92 9e 01 	sts	0x019E, r1
    Timebase->DownCounter[i].Value = 0;
     2b2:	10 92 9f 01 	sts	0x019F, r1
     2b6:	10 92 a0 01 	sts	0x01A0, r1
     2ba:	10 92 a1 01 	sts	0x01A1, r1
     2be:	10 92 a2 01 	sts	0x01A2, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     2c2:	10 92 a3 01 	sts	0x01A3, r1
     2c6:	10 92 a4 01 	sts	0x01A4, r1
     2ca:	10 92 a5 01 	sts	0x01A5, r1
     2ce:	10 92 a6 01 	sts	0x01A6, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     2d2:	10 92 89 01 	sts	0x0189, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     2d6:	10 92 8a 01 	sts	0x018A, r1
     2da:	10 92 8b 01 	sts	0x018B, r1
     2de:	10 92 8c 01 	sts	0x018C, r1
     2e2:	10 92 8d 01 	sts	0x018D, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     2e6:	10 92 8e 01 	sts	0x018E, r1
     2ea:	10 92 8f 01 	sts	0x018F, r1
     2ee:	10 92 90 01 	sts	0x0190, r1
     2f2:	10 92 91 01 	sts	0x0191, r1
    Timebase->DownCounterSS[i].Value = 0;
     2f6:	10 92 92 01 	sts	0x0192, r1
     2fa:	10 92 93 01 	sts	0x0193, r1
     2fe:	10 92 94 01 	sts	0x0194, r1
     302:	10 92 95 01 	sts	0x0195, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     306:	10 92 96 01 	sts	0x0196, r1
     30a:	10 92 97 01 	sts	0x0197, r1
     30e:	10 92 98 01 	sts	0x0198, r1
     312:	10 92 99 01 	sts	0x0199, r1
  }
  #endif
  
}
     316:	08 95       	ret

00000318 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     318:	7f 92       	push	r7
     31a:	8f 92       	push	r8
     31c:	9f 92       	push	r9
     31e:	af 92       	push	r10
     320:	bf 92       	push	r11
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	2a 97       	sbiw	r28, 0x0a	; 10
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     344:	c0 90 43 01 	lds	r12, 0x0143
     348:	d0 90 44 01 	lds	r13, 0x0144
     34c:	f6 01       	movw	r30, r12
     34e:	80 81       	ld	r24, Z
     350:	80 ff       	sbrs	r24, 0
     352:	31 c0       	rjmp	.+98     	; 0x3b6 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     354:	01 30       	cpi	r16, 0x01	; 1
     356:	11 05       	cpc	r17, r1
     358:	11 f4       	brne	.+4      	; 0x35e <Timebase_Timer_Config+0x46>
     35a:	96 e0       	ldi	r25, 0x06	; 6
     35c:	19 c0       	rjmp	.+50     	; 0x390 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     35e:	02 30       	cpi	r16, 0x02	; 2
     360:	11 05       	cpc	r17, r1
     362:	11 f4       	brne	.+4      	; 0x368 <Timebase_Timer_Config+0x50>
     364:	95 e0       	ldi	r25, 0x05	; 5
     366:	14 c0       	rjmp	.+40     	; 0x390 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     368:	04 30       	cpi	r16, 0x04	; 4
     36a:	11 05       	cpc	r17, r1
     36c:	11 f4       	brne	.+4      	; 0x372 <Timebase_Timer_Config+0x5a>
     36e:	94 e0       	ldi	r25, 0x04	; 4
     370:	0f c0       	rjmp	.+30     	; 0x390 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     372:	08 30       	cpi	r16, 0x08	; 8
     374:	11 05       	cpc	r17, r1
     376:	11 f4       	brne	.+4      	; 0x37c <Timebase_Timer_Config+0x64>
     378:	93 e0       	ldi	r25, 0x03	; 3
     37a:	0a c0       	rjmp	.+20     	; 0x390 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     37c:	00 31       	cpi	r16, 0x10	; 16
     37e:	11 05       	cpc	r17, r1
     380:	11 f4       	brne	.+4      	; 0x386 <Timebase_Timer_Config+0x6e>
     382:	92 e0       	ldi	r25, 0x02	; 2
     384:	05 c0       	rjmp	.+10     	; 0x390 <Timebase_Timer_Config+0x78>
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	00 32       	cpi	r16, 0x20	; 32
     38a:	11 05       	cpc	r17, r1
     38c:	09 f4       	brne	.+2      	; 0x390 <Timebase_Timer_Config+0x78>
     38e:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     390:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     392:	84 b7       	in	r24, 0x34	; 52
     394:	87 7f       	andi	r24, 0xF7	; 247
     396:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     398:	80 91 60 00 	lds	r24, 0x0060
     39c:	80 68       	ori	r24, 0x80	; 128
     39e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     3a2:	80 91 60 00 	lds	r24, 0x0060
     3a6:	88 61       	ori	r24, 0x18	; 24
     3a8:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     3ac:	90 64       	ori	r25, 0x40	; 64
     3ae:	90 93 60 00 	sts	0x0060, r25
    sei();
     3b2:	78 94       	sei
     3b4:	67 c0       	rjmp	.+206    	; 0x484 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     3b6:	81 fd       	sbrc	r24, 1
     3b8:	65 c0       	rjmp	.+202    	; 0x484 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	63 c0       	rjmp	.+198    	; 0x484 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     3be:	de 01       	movw	r26, r28
     3c0:	11 96       	adiw	r26, 0x01	; 1
     3c2:	e5 e0       	ldi	r30, 0x05	; 5
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	81 50       	subi	r24, 0x01	; 1
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     3d0:	98 01       	movw	r18, r16
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	7b e1       	ldi	r23, 0x1B	; 27
     3da:	87 eb       	ldi	r24, 0xB7	; 183
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     3e2:	72 2e       	mov	r7, r18
     3e4:	83 2e       	mov	r8, r19
     3e6:	94 2e       	mov	r9, r20
     3e8:	e5 2e       	mov	r14, r21
     3ea:	5e 01       	movw	r10, r28
     3ec:	08 94       	sec
     3ee:	a1 1c       	adc	r10, r1
     3f0:	b1 1c       	adc	r11, r1
     3f2:	c9 01       	movw	r24, r18
     3f4:	da 01       	movw	r26, r20
     3f6:	9c 01       	movw	r18, r24
     3f8:	ad 01       	movw	r20, r26
     3fa:	ff 24       	eor	r15, r15
     3fc:	14 c0       	rjmp	.+40     	; 0x426 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     3fe:	f5 01       	movw	r30, r10
     400:	21 91       	ld	r18, Z+
     402:	31 91       	ld	r19, Z+
     404:	5f 01       	movw	r10, r30
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	67 2d       	mov	r22, r7
     40c:	78 2d       	mov	r23, r8
     40e:	89 2d       	mov	r24, r9
     410:	9e 2d       	mov	r25, r14
     412:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     416:	c9 01       	movw	r24, r18
     418:	da 01       	movw	r26, r20
     41a:	9c 01       	movw	r18, r24
     41c:	ad 01       	movw	r20, r26
	  clock_div_index++;
     41e:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     420:	f5 e0       	ldi	r31, 0x05	; 5
     422:	ff 16       	cp	r15, r31
     424:	31 f0       	breq	.+12     	; 0x432 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     426:	2f 3f       	cpi	r18, 0xFF	; 255
     428:	31 05       	cpc	r19, r1
     42a:	41 05       	cpc	r20, r1
     42c:	51 05       	cpc	r21, r1
     42e:	09 f0       	breq	.+2      	; 0x432 <Timebase_Timer_Config+0x11a>
     430:	34 f7       	brge	.-52     	; 0x3fe <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     432:	8f 2d       	mov	r24, r15
     434:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     436:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     438:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     43a:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     43e:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     440:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     442:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     444:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     446:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     448:	88 23       	and	r24, r24
     44a:	11 f4       	brne	.+4      	; 0x450 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0f c0       	rjmp	.+30     	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	11 f4       	brne	.+4      	; 0x458 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	0b c0       	rjmp	.+22     	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	11 f4       	brne	.+4      	; 0x460 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	07 c0       	rjmp	.+14     	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	11 f4       	brne	.+4      	; 0x468 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	03 c0       	rjmp	.+6      	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	11 f4       	brne	.+4      	; 0x470 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     46c:	85 e0       	ldi	r24, 0x05	; 5
     46e:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     470:	82 2f       	mov	r24, r18
     472:	80 95       	com	r24
     474:	f6 01       	movw	r30, r12
     476:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     478:	83 81       	ldd	r24, Z+3	; 0x03
     47a:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 6e 00 	sts	0x006E, r24
    sei();
     482:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     484:	f6 01       	movw	r30, r12
     486:	12 83       	std	Z+2, r17	; 0x02
     488:	01 83       	std	Z+1, r16	; 0x01
}
     48a:	2a 96       	adiw	r28, 0x0a	; 10
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	08 95       	ret

000004b2 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     4b2:	f8 94       	cli
}
     4b4:	08 95       	ret

000004b6 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     4b6:	78 94       	sei
}
     4b8:	08 95       	ret

000004ba <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     4ba:	e0 91 43 01 	lds	r30, 0x0143
     4be:	f0 91 44 01 	lds	r31, 0x0144
     4c2:	26 85       	ldd	r18, Z+14	; 0x0e
     4c4:	37 85       	ldd	r19, Z+15	; 0x0f
}
     4c6:	c9 01       	movw	r24, r18
     4c8:	08 95       	ret

000004ca <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     4ca:	e0 91 43 01 	lds	r30, 0x0143
     4ce:	f0 91 44 01 	lds	r31, 0x0144
     4d2:	20 89       	ldd	r18, Z+16	; 0x10
     4d4:	31 89       	ldd	r19, Z+17	; 0x11
     4d6:	42 89       	ldd	r20, Z+18	; 0x12
     4d8:	53 89       	ldd	r21, Z+19	; 0x13
}
     4da:	b9 01       	movw	r22, r18
     4dc:	ca 01       	movw	r24, r20
     4de:	08 95       	ret

000004e0 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     4e0:	e0 91 43 01 	lds	r30, 0x0143
     4e4:	f0 91 44 01 	lds	r31, 0x0144
     4e8:	20 85       	ldd	r18, Z+8	; 0x08
     4ea:	31 85       	ldd	r19, Z+9	; 0x09
}
     4ec:	c9 01       	movw	r24, r18
     4ee:	08 95       	ret

000004f0 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     4f0:	e0 91 43 01 	lds	r30, 0x0143
     4f4:	f0 91 44 01 	lds	r31, 0x0144
     4f8:	22 85       	ldd	r18, Z+10	; 0x0a
     4fa:	33 85       	ldd	r19, Z+11	; 0x0b
     4fc:	44 85       	ldd	r20, Z+12	; 0x0c
     4fe:	55 85       	ldd	r21, Z+13	; 0x0d
}
     500:	b9 01       	movw	r22, r18
     502:	ca 01       	movw	r24, r20
     504:	08 95       	ret

00000506 <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     506:	e0 91 43 01 	lds	r30, 0x0143
     50a:	f0 91 44 01 	lds	r31, 0x0144
     50e:	91 87       	std	Z+9, r25	; 0x09
     510:	80 87       	std	Z+8, r24	; 0x08
}
     512:	08 95       	ret

00000514 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     514:	e0 91 43 01 	lds	r30, 0x0143
     518:	f0 91 44 01 	lds	r31, 0x0144
     51c:	62 87       	std	Z+10, r22	; 0x0a
     51e:	73 87       	std	Z+11, r23	; 0x0b
     520:	84 87       	std	Z+12, r24	; 0x0c
     522:	95 87       	std	Z+13, r25	; 0x0d
}
     524:	08 95       	ret

00000526 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     526:	e0 91 43 01 	lds	r30, 0x0143
     52a:	f0 91 44 01 	lds	r31, 0x0144
     52e:	84 89       	ldd	r24, Z+20	; 0x14
     530:	88 23       	and	r24, r24
     532:	81 f4       	brne	.+32     	; 0x554 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     534:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
  
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     536:	86 85       	ldd	r24, Z+14	; 0x0e
     538:	97 85       	ldd	r25, Z+15	; 0x0f
     53a:	91 87       	std	Z+9, r25	; 0x09
     53c:	80 87       	std	Z+8, r24	; 0x08
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     53e:	80 89       	ldd	r24, Z+16	; 0x10
     540:	91 89       	ldd	r25, Z+17	; 0x11
     542:	a2 89       	ldd	r26, Z+18	; 0x12
     544:	b3 89       	ldd	r27, Z+19	; 0x13
     546:	82 87       	std	Z+10, r24	; 0x0a
     548:	93 87       	std	Z+11, r25	; 0x0b
     54a:	a4 87       	std	Z+12, r26	; 0x0c
     54c:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     54e:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	84 8b       	std	Z+20, r24	; 0x14
     554:	08 95       	ret

00000556 <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     556:	6f 92       	push	r6
     558:	7f 92       	push	r7
     55a:	8f 92       	push	r8
     55c:	9f 92       	push	r9
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     574:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     576:	c0 91 43 01 	lds	r28, 0x0143
     57a:	d0 91 44 01 	lds	r29, 0x0144
     57e:	ee 84       	ldd	r14, Y+14	; 0x0e
     580:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     582:	28 89       	ldd	r18, Y+16	; 0x10
     584:	39 89       	ldd	r19, Y+17	; 0x11
     586:	4a 89       	ldd	r20, Y+18	; 0x12
     588:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     58a:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     58c:	69 81       	ldd	r22, Y+1	; 0x01
     58e:	7a 81       	ldd	r23, Y+2	; 0x02
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsi3>
     598:	3b 01       	movw	r6, r22
     59a:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	6e 0c       	add	r6, r14
     5a2:	7f 1c       	adc	r7, r15
     5a4:	80 1e       	adc	r8, r16
     5a6:	91 1e       	adc	r9, r17
  smpl_val += value;
     5a8:	cc 24       	eor	r12, r12
     5aa:	dd 24       	eor	r13, r13
     5ac:	6a 0c       	add	r6, r10
     5ae:	7b 1c       	adc	r7, r11
     5b0:	8c 1c       	adc	r8, r12
     5b2:	9d 1c       	adc	r9, r13
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5be:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5c0:	ee 84       	ldd	r14, Y+14	; 0x0e
     5c2:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     5c4:	28 89       	ldd	r18, Y+16	; 0x10
     5c6:	39 89       	ldd	r19, Y+17	; 0x11
     5c8:	4a 89       	ldd	r20, Y+18	; 0x12
     5ca:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     5cc:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	7a 81       	ldd	r23, Y+2	; 0x02
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsi3>
	curr_val += curr_ss;
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	6e 0d       	add	r22, r14
     5e0:	7f 1d       	adc	r23, r15
     5e2:	80 1f       	adc	r24, r16
     5e4:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5e6:	66 15       	cp	r22, r6
     5e8:	77 05       	cpc	r23, r7
     5ea:	88 05       	cpc	r24, r8
     5ec:	99 05       	cpc	r25, r9
     5ee:	3c f3       	brlt	.-50     	; 0x5be <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	08 95       	ret

0000060e <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     60e:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     610:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     612:	e0 91 43 01 	lds	r30, 0x0143
     616:	f0 91 44 01 	lds	r31, 0x0144
     61a:	01 c0       	rjmp	.+2      	; 0x61e <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     61c:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     61e:	86 85       	ldd	r24, Z+14	; 0x0e
     620:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     622:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     624:	24 81       	ldd	r18, Z+4	; 0x04
     626:	35 81       	ldd	r19, Z+5	; 0x05
     628:	46 81       	ldd	r20, Z+6	; 0x06
     62a:	57 81       	ldd	r21, Z+7	; 0x07
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	a4 07       	cpc	r26, r20
     636:	b5 07       	cpc	r27, r21
     638:	89 f7       	brne	.-30     	; 0x61c <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     63a:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     63c:	86 85       	ldd	r24, Z+14	; 0x0e
     63e:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     640:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	84 83       	std	Z+4, r24	; 0x04
     648:	95 83       	std	Z+5, r25	; 0x05
     64a:	a6 83       	std	Z+6, r26	; 0x06
     64c:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     64e:	24 81       	ldd	r18, Z+4	; 0x04
     650:	35 81       	ldd	r19, Z+5	; 0x05
     652:	46 81       	ldd	r20, Z+6	; 0x06
     654:	57 81       	ldd	r21, Z+7	; 0x07
     656:	cb 01       	movw	r24, r22
     658:	a0 e0       	ldi	r26, 0x00	; 0
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	82 0f       	add	r24, r18
     65e:	93 1f       	adc	r25, r19
     660:	a4 1f       	adc	r26, r20
     662:	b5 1f       	adc	r27, r21
     664:	84 83       	std	Z+4, r24	; 0x04
     666:	95 83       	std	Z+5, r25	; 0x05
     668:	a6 83       	std	Z+6, r26	; 0x06
     66a:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     66c:	24 81       	ldd	r18, Z+4	; 0x04
     66e:	35 81       	ldd	r19, Z+5	; 0x05
     670:	46 81       	ldd	r20, Z+6	; 0x06
     672:	57 81       	ldd	r21, Z+7	; 0x07
     674:	81 81       	ldd	r24, Z+1	; 0x01
     676:	92 81       	ldd	r25, Z+2	; 0x02
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	28 17       	cp	r18, r24
     67e:	39 07       	cpc	r19, r25
     680:	4a 07       	cpc	r20, r26
     682:	5b 07       	cpc	r21, r27
     684:	84 f0       	brlt	.+32     	; 0x6a6 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     686:	24 81       	ldd	r18, Z+4	; 0x04
     688:	35 81       	ldd	r19, Z+5	; 0x05
     68a:	46 81       	ldd	r20, Z+6	; 0x06
     68c:	57 81       	ldd	r21, Z+7	; 0x07
     68e:	81 81       	ldd	r24, Z+1	; 0x01
     690:	92 81       	ldd	r25, Z+2	; 0x02
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	28 1b       	sub	r18, r24
     698:	39 0b       	sbc	r19, r25
     69a:	4a 0b       	sbc	r20, r26
     69c:	5b 0b       	sbc	r21, r27
     69e:	24 83       	std	Z+4, r18	; 0x04
     6a0:	35 83       	std	Z+5, r19	; 0x05
     6a2:	46 83       	std	Z+6, r20	; 0x06
     6a4:	57 83       	std	Z+7, r21	; 0x07
     6a6:	08 95       	ret

000006a8 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6a8:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6aa:	e0 91 43 01 	lds	r30, 0x0143
     6ae:	f0 91 44 01 	lds	r31, 0x0144
     6b2:	20 89       	ldd	r18, Z+16	; 0x10
     6b4:	31 89       	ldd	r19, Z+17	; 0x11
     6b6:	42 89       	ldd	r20, Z+18	; 0x12
     6b8:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     6ba:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	82 0f       	add	r24, r18
     6c2:	93 1f       	adc	r25, r19
     6c4:	a4 1f       	adc	r26, r20
     6c6:	b5 1f       	adc	r27, r21
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6d2:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6d4:	20 89       	ldd	r18, Z+16	; 0x10
     6d6:	31 89       	ldd	r19, Z+17	; 0x11
     6d8:	42 89       	ldd	r20, Z+18	; 0x12
     6da:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     6dc:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     6de:	28 17       	cp	r18, r24
     6e0:	39 07       	cpc	r19, r25
     6e2:	4a 07       	cpc	r20, r26
     6e4:	5b 07       	cpc	r21, r27
     6e6:	ac f3       	brlt	.-22     	; 0x6d2 <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     6e8:	08 95       	ret

000006ea <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     6ea:	e0 91 43 01 	lds	r30, 0x0143
     6ee:	f0 91 44 01 	lds	r31, 0x0144
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	29 e1       	ldi	r18, 0x19	; 25
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	ac 01       	movw	r20, r24
     6fa:	42 9f       	mul	r20, r18
     6fc:	c0 01       	movw	r24, r0
     6fe:	43 9f       	mul	r20, r19
     700:	90 0d       	add	r25, r0
     702:	52 9f       	mul	r21, r18
     704:	90 0d       	add	r25, r0
     706:	11 24       	eor	r1, r1
     708:	e8 0f       	add	r30, r24
     70a:	f9 1f       	adc	r31, r25
     70c:	86 89       	ldd	r24, Z+22	; 0x16
     70e:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	08 95       	ret

00000714 <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     714:	e0 91 43 01 	lds	r30, 0x0143
     718:	f0 91 44 01 	lds	r31, 0x0144
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	29 e1       	ldi	r18, 0x19	; 25
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	ac 01       	movw	r20, r24
     724:	42 9f       	mul	r20, r18
     726:	c0 01       	movw	r24, r0
     728:	43 9f       	mul	r20, r19
     72a:	90 0d       	add	r25, r0
     72c:	52 9f       	mul	r21, r18
     72e:	90 0d       	add	r25, r0
     730:	11 24       	eor	r1, r1
     732:	e8 0f       	add	r30, r24
     734:	f9 1f       	adc	r31, r25
     736:	6f 70       	andi	r22, 0x0F	; 15
     738:	66 0f       	add	r22, r22
     73a:	86 89       	ldd	r24, Z+22	; 0x16
     73c:	81 7e       	andi	r24, 0xE1	; 225
     73e:	86 2b       	or	r24, r22
     740:	86 8b       	std	Z+22, r24	; 0x16
}
     742:	08 95       	ret

00000744 <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     744:	e0 91 43 01 	lds	r30, 0x0143
     748:	f0 91 44 01 	lds	r31, 0x0144
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	29 e1       	ldi	r18, 0x19	; 25
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	ac 01       	movw	r20, r24
     754:	42 9f       	mul	r20, r18
     756:	c0 01       	movw	r24, r0
     758:	43 9f       	mul	r20, r19
     75a:	90 0d       	add	r25, r0
     75c:	52 9f       	mul	r21, r18
     75e:	90 0d       	add	r25, r0
     760:	11 24       	eor	r1, r1
     762:	e8 0f       	add	r30, r24
     764:	f9 1f       	adc	r31, r25
     766:	df 01       	movw	r26, r30
     768:	97 96       	adiw	r26, 0x27	; 39
     76a:	67 a1       	ldd	r22, Z+39	; 0x27
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     782:	c0 91 43 01 	lds	r28, 0x0143
     786:	d0 91 44 01 	lds	r29, 0x0144
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	29 e1       	ldi	r18, 0x19	; 25
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	e2 9f       	mul	r30, r18
     794:	c0 01       	movw	r24, r0
     796:	e3 9f       	mul	r30, r19
     798:	90 0d       	add	r25, r0
     79a:	f2 9f       	mul	r31, r18
     79c:	90 0d       	add	r25, r0
     79e:	11 24       	eor	r1, r1
     7a0:	c8 0f       	add	r28, r24
     7a2:	d9 1f       	adc	r29, r25
     7a4:	ca 01       	movw	r24, r20
     7a6:	db 01       	movw	r26, r22
     7a8:	b7 ff       	sbrs	r27, 7
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <Timebase_UpCounter_SS_Set_Value+0x36>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	8f a3       	std	Y+39, r24	; 0x27
     7b6:	98 a7       	std	Y+40, r25	; 0x28
     7b8:	a9 a7       	std	Y+41, r26	; 0x29
     7ba:	ba a7       	std	Y+42, r27	; 0x2a
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     7c2:	e0 91 43 01 	lds	r30, 0x0143
     7c6:	f0 91 44 01 	lds	r31, 0x0144
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	29 e1       	ldi	r18, 0x19	; 25
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	ac 01       	movw	r20, r24
     7d2:	42 9f       	mul	r20, r18
     7d4:	c0 01       	movw	r24, r0
     7d6:	43 9f       	mul	r20, r19
     7d8:	90 0d       	add	r25, r0
     7da:	52 9f       	mul	r21, r18
     7dc:	90 0d       	add	r25, r0
     7de:	11 24       	eor	r1, r1
     7e0:	e8 0f       	add	r30, r24
     7e2:	f9 1f       	adc	r31, r25
     7e4:	df 01       	movw	r26, r30
     7e6:	57 96       	adiw	r26, 0x17	; 23
     7e8:	67 89       	ldd	r22, Z+23	; 0x17
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	7c 91       	ld	r23, X
     7ee:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     7f0:	12 96       	adiw	r26, 0x02	; 2
     7f2:	8c 91       	ld	r24, X
     7f4:	12 97       	sbiw	r26, 0x02	; 2
     7f6:	13 96       	adiw	r26, 0x03	; 3
     7f8:	9c 91       	ld	r25, X
     7fa:	08 95       	ret

000007fc <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     7fc:	e0 91 43 01 	lds	r30, 0x0143
     800:	f0 91 44 01 	lds	r31, 0x0144
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	29 e1       	ldi	r18, 0x19	; 25
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	ac 01       	movw	r20, r24
     80c:	42 9f       	mul	r20, r18
     80e:	c0 01       	movw	r24, r0
     810:	43 9f       	mul	r20, r19
     812:	90 0d       	add	r25, r0
     814:	52 9f       	mul	r21, r18
     816:	90 0d       	add	r25, r0
     818:	11 24       	eor	r1, r1
     81a:	e8 0f       	add	r30, r24
     81c:	f9 1f       	adc	r31, r25
     81e:	df 01       	movw	r26, r30
     820:	5b 96       	adiw	r26, 0x1b	; 27
     822:	63 8d       	ldd	r22, Z+27	; 0x1b
     824:	11 96       	adiw	r26, 0x01	; 1
     826:	7c 91       	ld	r23, X
     828:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     82a:	12 96       	adiw	r26, 0x02	; 2
     82c:	8c 91       	ld	r24, X
     82e:	12 97       	sbiw	r26, 0x02	; 2
     830:	13 96       	adiw	r26, 0x03	; 3
     832:	9c 91       	ld	r25, X
     834:	08 95       	ret

00000836 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     836:	e0 91 43 01 	lds	r30, 0x0143
     83a:	f0 91 44 01 	lds	r31, 0x0144
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	29 e1       	ldi	r18, 0x19	; 25
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	dc 01       	movw	r26, r24
     846:	a2 9f       	mul	r26, r18
     848:	c0 01       	movw	r24, r0
     84a:	a3 9f       	mul	r26, r19
     84c:	90 0d       	add	r25, r0
     84e:	b2 9f       	mul	r27, r18
     850:	90 0d       	add	r25, r0
     852:	11 24       	eor	r1, r1
     854:	e8 0f       	add	r30, r24
     856:	f9 1f       	adc	r31, r25
     858:	47 8b       	std	Z+23, r20	; 0x17
     85a:	50 8f       	std	Z+24, r21	; 0x18
     85c:	61 8f       	std	Z+25, r22	; 0x19
     85e:	72 8f       	std	Z+26, r23	; 0x1a
}
     860:	08 95       	ret

00000862 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     862:	e0 91 43 01 	lds	r30, 0x0143
     866:	f0 91 44 01 	lds	r31, 0x0144
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	29 e1       	ldi	r18, 0x19	; 25
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	dc 01       	movw	r26, r24
     872:	a2 9f       	mul	r26, r18
     874:	c0 01       	movw	r24, r0
     876:	a3 9f       	mul	r26, r19
     878:	90 0d       	add	r25, r0
     87a:	b2 9f       	mul	r27, r18
     87c:	90 0d       	add	r25, r0
     87e:	11 24       	eor	r1, r1
     880:	e8 0f       	add	r30, r24
     882:	f9 1f       	adc	r31, r25
     884:	43 8f       	std	Z+27, r20	; 0x1b
     886:	54 8f       	std	Z+28, r21	; 0x1c
     888:	65 8f       	std	Z+29, r22	; 0x1d
     88a:	76 8f       	std	Z+30, r23	; 0x1e
}
     88c:	08 95       	ret

0000088e <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     88e:	e0 91 43 01 	lds	r30, 0x0143
     892:	f0 91 44 01 	lds	r31, 0x0144
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	29 e1       	ldi	r18, 0x19	; 25
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	ac 01       	movw	r20, r24
     89e:	42 9f       	mul	r20, r18
     8a0:	c0 01       	movw	r24, r0
     8a2:	43 9f       	mul	r20, r19
     8a4:	90 0d       	add	r25, r0
     8a6:	52 9f       	mul	r21, r18
     8a8:	90 0d       	add	r25, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
     8b0:	df 01       	movw	r26, r30
     8b2:	5f 96       	adiw	r26, 0x1f	; 31
     8b4:	67 8d       	ldd	r22, Z+31	; 0x1f
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	7c 91       	ld	r23, X
     8ba:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     8bc:	12 96       	adiw	r26, 0x02	; 2
     8be:	8c 91       	ld	r24, X
     8c0:	12 97       	sbiw	r26, 0x02	; 2
     8c2:	13 96       	adiw	r26, 0x03	; 3
     8c4:	9c 91       	ld	r25, X
     8c6:	08 95       	ret

000008c8 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     8c8:	e0 91 43 01 	lds	r30, 0x0143
     8cc:	f0 91 44 01 	lds	r31, 0x0144
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	29 e1       	ldi	r18, 0x19	; 25
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	dc 01       	movw	r26, r24
     8d8:	a2 9f       	mul	r26, r18
     8da:	c0 01       	movw	r24, r0
     8dc:	a3 9f       	mul	r26, r19
     8de:	90 0d       	add	r25, r0
     8e0:	b2 9f       	mul	r27, r18
     8e2:	90 0d       	add	r25, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	e8 0f       	add	r30, r24
     8e8:	f9 1f       	adc	r31, r25
     8ea:	47 8f       	std	Z+31, r20	; 0x1f
     8ec:	50 a3       	std	Z+32, r21	; 0x20
     8ee:	61 a3       	std	Z+33, r22	; 0x21
     8f0:	72 a3       	std	Z+34, r23	; 0x22
}
     8f2:	08 95       	ret

000008f4 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     8f4:	e0 91 43 01 	lds	r30, 0x0143
     8f8:	f0 91 44 01 	lds	r31, 0x0144
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	29 e1       	ldi	r18, 0x19	; 25
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	ac 01       	movw	r20, r24
     904:	42 9f       	mul	r20, r18
     906:	c0 01       	movw	r24, r0
     908:	43 9f       	mul	r20, r19
     90a:	90 0d       	add	r25, r0
     90c:	52 9f       	mul	r21, r18
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	e8 0f       	add	r30, r24
     914:	f9 1f       	adc	r31, r25
     916:	df 01       	movw	r26, r30
     918:	93 96       	adiw	r26, 0x23	; 35
     91a:	63 a1       	ldd	r22, Z+35	; 0x23
     91c:	11 96       	adiw	r26, 0x01	; 1
     91e:	7c 91       	ld	r23, X
     920:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	8c 91       	ld	r24, X
     926:	12 97       	sbiw	r26, 0x02	; 2
     928:	13 96       	adiw	r26, 0x03	; 3
     92a:	9c 91       	ld	r25, X
     92c:	08 95       	ret

0000092e <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     932:	c0 91 43 01 	lds	r28, 0x0143
     936:	d0 91 44 01 	lds	r29, 0x0144
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	29 e1       	ldi	r18, 0x19	; 25
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	e2 9f       	mul	r30, r18
     944:	c0 01       	movw	r24, r0
     946:	e3 9f       	mul	r30, r19
     948:	90 0d       	add	r25, r0
     94a:	f2 9f       	mul	r31, r18
     94c:	90 0d       	add	r25, r0
     94e:	11 24       	eor	r1, r1
     950:	c8 0f       	add	r28, r24
     952:	d9 1f       	adc	r29, r25
     954:	ca 01       	movw	r24, r20
     956:	db 01       	movw	r26, r22
     958:	b7 ff       	sbrs	r27, 7
     95a:	04 c0       	rjmp	.+8      	; 0x964 <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	8b a3       	std	Y+35, r24	; 0x23
     966:	9c a3       	std	Y+36, r25	; 0x24
     968:	ad a3       	std	Y+37, r26	; 0x25
     96a:	be a3       	std	Y+38, r27	; 0x26
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     972:	e0 91 43 01 	lds	r30, 0x0143
     976:	f0 91 44 01 	lds	r31, 0x0144
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	29 e1       	ldi	r18, 0x19	; 25
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	ac 01       	movw	r20, r24
     982:	42 9f       	mul	r20, r18
     984:	c0 01       	movw	r24, r0
     986:	43 9f       	mul	r20, r19
     988:	90 0d       	add	r25, r0
     98a:	52 9f       	mul	r21, r18
     98c:	90 0d       	add	r25, r0
     98e:	11 24       	eor	r1, r1
     990:	e8 0f       	add	r30, r24
     992:	f9 1f       	adc	r31, r25
     994:	df 01       	movw	r26, r30
     996:	9b 96       	adiw	r26, 0x2b	; 43
     998:	63 a5       	ldd	r22, Z+43	; 0x2b
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	7c 91       	ld	r23, X
     99e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	8c 91       	ld	r24, X
     9a4:	12 97       	sbiw	r26, 0x02	; 2
     9a6:	13 96       	adiw	r26, 0x03	; 3
     9a8:	9c 91       	ld	r25, X
     9aa:	08 95       	ret

000009ac <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     9ac:	e0 91 43 01 	lds	r30, 0x0143
     9b0:	f0 91 44 01 	lds	r31, 0x0144
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	29 e1       	ldi	r18, 0x19	; 25
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	dc 01       	movw	r26, r24
     9bc:	a2 9f       	mul	r26, r18
     9be:	c0 01       	movw	r24, r0
     9c0:	a3 9f       	mul	r26, r19
     9c2:	90 0d       	add	r25, r0
     9c4:	b2 9f       	mul	r27, r18
     9c6:	90 0d       	add	r25, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	e8 0f       	add	r30, r24
     9cc:	f9 1f       	adc	r31, r25
     9ce:	43 a7       	std	Z+43, r20	; 0x2b
     9d0:	54 a7       	std	Z+44, r21	; 0x2c
     9d2:	65 a7       	std	Z+45, r22	; 0x2d
     9d4:	76 a7       	std	Z+46, r23	; 0x2e
}
     9d6:	08 95       	ret

000009d8 <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     9d8:	e0 91 43 01 	lds	r30, 0x0143
     9dc:	f0 91 44 01 	lds	r31, 0x0144
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	29 e1       	ldi	r18, 0x19	; 25
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	ac 01       	movw	r20, r24
     9e8:	42 9f       	mul	r20, r18
     9ea:	c0 01       	movw	r24, r0
     9ec:	43 9f       	mul	r20, r19
     9ee:	90 0d       	add	r25, r0
     9f0:	52 9f       	mul	r21, r18
     9f2:	90 0d       	add	r25, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	e8 0f       	add	r30, r24
     9f8:	f9 1f       	adc	r31, r25
     9fa:	86 89       	ldd	r24, Z+22	; 0x16
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     9fc:	81 70       	andi	r24, 0x01	; 1
     9fe:	08 95       	ret

00000a00 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a00:	e0 91 43 01 	lds	r30, 0x0143
     a04:	f0 91 44 01 	lds	r31, 0x0144
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	29 e1       	ldi	r18, 0x19	; 25
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	ac 01       	movw	r20, r24
     a10:	42 9f       	mul	r20, r18
     a12:	c0 01       	movw	r24, r0
     a14:	43 9f       	mul	r20, r19
     a16:	90 0d       	add	r25, r0
     a18:	52 9f       	mul	r21, r18
     a1a:	90 0d       	add	r25, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	e8 0f       	add	r30, r24
     a20:	f9 1f       	adc	r31, r25
     a22:	86 89       	ldd	r24, Z+22	; 0x16
     a24:	81 60       	ori	r24, 0x01	; 1
     a26:	86 8b       	std	Z+22, r24	; 0x16
}
     a28:	08 95       	ret

00000a2a <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a2a:	e0 91 43 01 	lds	r30, 0x0143
     a2e:	f0 91 44 01 	lds	r31, 0x0144
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	29 e1       	ldi	r18, 0x19	; 25
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	ac 01       	movw	r20, r24
     a3a:	42 9f       	mul	r20, r18
     a3c:	c0 01       	movw	r24, r0
     a3e:	43 9f       	mul	r20, r19
     a40:	90 0d       	add	r25, r0
     a42:	52 9f       	mul	r21, r18
     a44:	90 0d       	add	r25, r0
     a46:	11 24       	eor	r1, r1
     a48:	e8 0f       	add	r30, r24
     a4a:	f9 1f       	adc	r31, r25
     a4c:	86 89       	ldd	r24, Z+22	; 0x16
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	86 8b       	std	Z+22, r24	; 0x16
}
     a52:	08 95       	ret

00000a54 <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     a54:	e0 91 43 01 	lds	r30, 0x0143
     a58:	f0 91 44 01 	lds	r31, 0x0144
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	29 e1       	ldi	r18, 0x19	; 25
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	ac 01       	movw	r20, r24
     a64:	42 9f       	mul	r20, r18
     a66:	c0 01       	movw	r24, r0
     a68:	43 9f       	mul	r20, r19
     a6a:	90 0d       	add	r25, r0
     a6c:	52 9f       	mul	r21, r18
     a6e:	90 0d       	add	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	e8 0f       	add	r30, r24
     a74:	f9 1f       	adc	r31, r25
     a76:	86 89       	ldd	r24, Z+22	; 0x16

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     a78:	17 a2       	std	Z+39, r1	; 0x27
     a7a:	10 a6       	std	Z+40, r1	; 0x28
     a7c:	11 a6       	std	Z+41, r1	; 0x29
     a7e:	12 a6       	std	Z+42, r1	; 0x2a
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     a80:	17 8a       	std	Z+23, r1	; 0x17
     a82:	10 8e       	std	Z+24, r1	; 0x18
     a84:	11 8e       	std	Z+25, r1	; 0x19
     a86:	12 8e       	std	Z+26, r1	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     a88:	13 8e       	std	Z+27, r1	; 0x1b
     a8a:	14 8e       	std	Z+28, r1	; 0x1c
     a8c:	15 8e       	std	Z+29, r1	; 0x1d
     a8e:	16 8e       	std	Z+30, r1	; 0x1e
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     a90:	17 8e       	std	Z+31, r1	; 0x1f
     a92:	10 a2       	std	Z+32, r1	; 0x20
     a94:	11 a2       	std	Z+33, r1	; 0x21
     a96:	12 a2       	std	Z+34, r1	; 0x22

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     a98:	13 a2       	std	Z+35, r1	; 0x23
     a9a:	14 a2       	std	Z+36, r1	; 0x24
     a9c:	15 a2       	std	Z+37, r1	; 0x25
     a9e:	16 a2       	std	Z+38, r1	; 0x26
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     aa0:	13 a6       	std	Z+43, r1	; 0x2b
     aa2:	14 a6       	std	Z+44, r1	; 0x2c
     aa4:	15 a6       	std	Z+45, r1	; 0x2d
     aa6:	16 a6       	std	Z+46, r1	; 0x2e
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     aa8:	80 7e       	andi	r24, 0xE0	; 224
     aaa:	86 8b       	std	Z+22, r24	; 0x16
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
     aac:	08 95       	ret

00000aae <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     aae:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
}
     ab2:	08 95       	ret

00000ab4 <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     ab4:	e0 91 43 01 	lds	r30, 0x0143
     ab8:	f0 91 44 01 	lds	r31, 0x0144
     abc:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     abe:	29 e1       	ldi	r18, 0x19	; 25
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	ac 01       	movw	r20, r24
     ac4:	42 9f       	mul	r20, r18
     ac6:	c0 01       	movw	r24, r0
     ac8:	43 9f       	mul	r20, r19
     aca:	90 0d       	add	r25, r0
     acc:	52 9f       	mul	r21, r18
     ace:	90 0d       	add	r25, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	e8 0f       	add	r30, r24
     ad4:	f9 1f       	adc	r31, r25
     ad6:	96 89       	ldd	r25, Z+22	; 0x16
     ad8:	89 2f       	mov	r24, r25
     ada:	86 95       	lsr	r24
     adc:	8f 70       	andi	r24, 0x0F	; 15
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	19 f0       	breq	.+6      	; 0xae8 <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     ae2:	91 7e       	andi	r25, 0xE1	; 225
     ae4:	92 60       	ori	r25, 0x02	; 2
     ae6:	96 8b       	std	Z+22, r25	; 0x16
     ae8:	08 95       	ret

00000aea <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     aea:	e0 91 43 01 	lds	r30, 0x0143
     aee:	f0 91 44 01 	lds	r31, 0x0144
     af2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     af4:	29 e1       	ldi	r18, 0x19	; 25
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	ac 01       	movw	r20, r24
     afa:	42 9f       	mul	r20, r18
     afc:	c0 01       	movw	r24, r0
     afe:	43 9f       	mul	r20, r19
     b00:	90 0d       	add	r25, r0
     b02:	52 9f       	mul	r21, r18
     b04:	90 0d       	add	r25, r0
     b06:	11 24       	eor	r1, r1
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
     b0c:	96 89       	ldd	r25, Z+22	; 0x16
     b0e:	89 2f       	mov	r24, r25
     b10:	86 95       	lsr	r24
     b12:	8f 70       	andi	r24, 0x0F	; 15
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	19 f0       	breq	.+6      	; 0xb1e <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     b18:	91 7e       	andi	r25, 0xE1	; 225
     b1a:	94 60       	ori	r25, 0x04	; 4
     b1c:	96 8b       	std	Z+22, r25	; 0x16
     b1e:	08 95       	ret

00000b20 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
     b20:	2f 92       	push	r2
     b22:	3f 92       	push	r3
     b24:	4f 92       	push	r4
     b26:	5f 92       	push	r5
     b28:	6f 92       	push	r6
     b2a:	7f 92       	push	r7
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	df 93       	push	r29
     b42:	cf 93       	push	r28
     b44:	00 d0       	rcall	.+0      	; 0xb46 <Timebase_UpCounter_SS_Set_Securely+0x26>
     b46:	00 d0       	rcall	.+0      	; 0xb48 <Timebase_UpCounter_SS_Set_Securely+0x28>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	4a 01       	movw	r8, r20
     b4e:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     b50:	20 91 43 01 	lds	r18, 0x0143
     b54:	30 91 44 01 	lds	r19, 0x0144
     b58:	3c 83       	std	Y+4, r19	; 0x04
     b5a:	2b 83       	std	Y+3, r18	; 0x03
     b5c:	a8 2f       	mov	r26, r24
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ba 83       	std	Y+2, r27	; 0x02
     b62:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     b64:	89 e1       	ldi	r24, 0x19	; 25
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a8 9f       	mul	r26, r24
     b6a:	f0 01       	movw	r30, r0
     b6c:	a9 9f       	mul	r26, r25
     b6e:	f0 0d       	add	r31, r0
     b70:	b8 9f       	mul	r27, r24
     b72:	f0 0d       	add	r31, r0
     b74:	11 24       	eor	r1, r1
     b76:	e2 0f       	add	r30, r18
     b78:	f3 1f       	adc	r31, r19
     b7a:	86 89       	ldd	r24, Z+22	; 0x16
     b7c:	86 95       	lsr	r24
     b7e:	8f 70       	andi	r24, 0x0F	; 15
     b80:	09 f0       	breq	.+2      	; 0xb84 <Timebase_UpCounter_SS_Set_Securely+0x64>
     b82:	75 c0       	rjmp	.+234    	; 0xc6e <Timebase_UpCounter_SS_Set_Securely+0x14e>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     b84:	17 a2       	std	Z+39, r1	; 0x27
     b86:	10 a6       	std	Z+40, r1	; 0x28
     b88:	11 a6       	std	Z+41, r1	; 0x29
     b8a:	12 a6       	std	Z+42, r1	; 0x2a

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     b8c:	13 a2       	std	Z+35, r1	; 0x23
     b8e:	14 a2       	std	Z+36, r1	; 0x24
     b90:	15 a2       	std	Z+37, r1	; 0x25
     b92:	16 a2       	std	Z+38, r1	; 0x26
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     b94:	47 8f       	std	Z+31, r20	; 0x1f
     b96:	50 a3       	std	Z+32, r21	; 0x20
     b98:	61 a3       	std	Z+33, r22	; 0x21
     b9a:	72 a3       	std	Z+34, r23	; 0x22
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     b9c:	f9 01       	movw	r30, r18
     b9e:	c0 84       	ldd	r12, Z+8	; 0x08
     ba0:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ba2:	22 84       	ldd	r2, Z+10	; 0x0a
     ba4:	33 84       	ldd	r3, Z+11	; 0x0b
     ba6:	44 84       	ldd	r4, Z+12	; 0x0c
     ba8:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
     baa:	21 81       	ldd	r18, Z+1	; 0x01
     bac:	32 81       	ldd	r19, Z+2	; 0x02
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     bba:	7b 01       	movw	r14, r22
     bbc:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
     bbe:	ab 81       	ldd	r26, Y+3	; 0x03
     bc0:	bc 81       	ldd	r27, Y+4	; 0x04
     bc2:	11 96       	adiw	r26, 0x01	; 1
     bc4:	2d 91       	ld	r18, X+
     bc6:	3c 91       	ld	r19, X
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	c5 01       	movw	r24, r10
     bd0:	b4 01       	movw	r22, r8
     bd2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     bd6:	c9 01       	movw	r24, r18
     bd8:	da 01       	movw	r26, r20
     bda:	3c 01       	movw	r6, r24
     bdc:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
     bde:	56 01       	movw	r10, r12
     be0:	cc 24       	eor	r12, r12
     be2:	dd 24       	eor	r13, r13
     be4:	ae 0c       	add	r10, r14
     be6:	bf 1c       	adc	r11, r15
     be8:	c0 1e       	adc	r12, r16
     bea:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     bec:	eb 81       	ldd	r30, Y+3	; 0x03
     bee:	fc 81       	ldd	r31, Y+4	; 0x04
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	92 81       	ldd	r25, Z+2	; 0x02
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	a8 16       	cp	r10, r24
     bfa:	b9 06       	cpc	r11, r25
     bfc:	ca 06       	cpc	r12, r26
     bfe:	db 06       	cpc	r13, r27
     c00:	94 f0       	brlt	.+36     	; 0xc26 <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
     c02:	08 94       	sec
     c04:	61 1c       	adc	r6, r1
     c06:	71 1c       	adc	r7, r1
     c08:	81 1c       	adc	r8, r1
     c0a:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     c0c:	21 81       	ldd	r18, Z+1	; 0x01
     c0e:	32 81       	ldd	r19, Z+2	; 0x02
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	c6 01       	movw	r24, r12
     c16:	b5 01       	movw	r22, r10
     c18:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     c1c:	ac 01       	movw	r20, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	da 01       	movw	r26, r20
     c22:	5c 01       	movw	r10, r24
     c24:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     c26:	89 e1       	ldi	r24, 0x19	; 25
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	29 81       	ldd	r18, Y+1	; 0x01
     c2c:	3a 81       	ldd	r19, Y+2	; 0x02
     c2e:	28 9f       	mul	r18, r24
     c30:	f0 01       	movw	r30, r0
     c32:	29 9f       	mul	r18, r25
     c34:	f0 0d       	add	r31, r0
     c36:	38 9f       	mul	r19, r24
     c38:	f0 0d       	add	r31, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	e8 0f       	add	r30, r24
     c42:	f9 1f       	adc	r31, r25
     c44:	26 0c       	add	r2, r6
     c46:	37 1c       	adc	r3, r7
     c48:	48 1c       	adc	r4, r8
     c4a:	59 1c       	adc	r5, r9
     c4c:	27 8a       	std	Z+23, r2	; 0x17
     c4e:	30 8e       	std	Z+24, r3	; 0x18
     c50:	41 8e       	std	Z+25, r4	; 0x19
     c52:	52 8e       	std	Z+26, r5	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     c54:	a3 8e       	std	Z+27, r10	; 0x1b
     c56:	b4 8e       	std	Z+28, r11	; 0x1c
     c58:	c5 8e       	std	Z+29, r12	; 0x1d
     c5a:	d6 8e       	std	Z+30, r13	; 0x1e
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     c5c:	96 89       	ldd	r25, Z+22	; 0x16
     c5e:	89 2f       	mov	r24, r25
     c60:	86 95       	lsr	r24
     c62:	8f 70       	andi	r24, 0x0F	; 15
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	19 f0       	breq	.+6      	; 0xc6e <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c68:	91 7e       	andi	r25, 0xE1	; 225
     c6a:	92 60       	ori	r25, 0x02	; 2
     c6c:	96 8b       	std	Z+22, r25	; 0x16
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	7f 90       	pop	r7
     c90:	6f 90       	pop	r6
     c92:	5f 90       	pop	r5
     c94:	4f 90       	pop	r4
     c96:	3f 90       	pop	r3
     c98:	2f 90       	pop	r2
     c9a:	08 95       	ret

00000c9c <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	d8 2e       	mov	r13, r24
     ca8:	7a 01       	movw	r14, r20
     caa:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
     cac:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
     cb0:	8d 2d       	mov	r24, r13
     cb2:	b8 01       	movw	r22, r16
     cb4:	a7 01       	movw	r20, r14
     cb6:	0e 94 90 05 	call	0xb20	; 0xb20 <Timebase_UpCounter_SS_Set_Securely>
} 
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	08 95       	ret

00000cc6 <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
     cc6:	2f 92       	push	r2
     cc8:	3f 92       	push	r3
     cca:	4f 92       	push	r4
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <Timebase_UpCounter_SS_Update+0x26>
     cec:	00 d0       	rcall	.+0      	; 0xcee <Timebase_UpCounter_SS_Update+0x28>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <Timebase_UpCounter_SS_Update+0x2a>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     cf4:	20 90 43 01 	lds	r2, 0x0143
     cf8:	30 90 44 01 	lds	r3, 0x0144
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	3e 83       	std	Y+6, r19	; 0x06
     d02:	2d 83       	std	Y+5, r18	; 0x05
     d04:	89 e1       	ldi	r24, 0x19	; 25
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	28 9f       	mul	r18, r24
     d0a:	b0 01       	movw	r22, r0
     d0c:	29 9f       	mul	r18, r25
     d0e:	70 0d       	add	r23, r0
     d10:	38 9f       	mul	r19, r24
     d12:	70 0d       	add	r23, r0
     d14:	11 24       	eor	r1, r1
     d16:	62 0d       	add	r22, r2
     d18:	73 1d       	adc	r23, r3
     d1a:	db 01       	movw	r26, r22
     d1c:	56 96       	adiw	r26, 0x16	; 22
     d1e:	8c 91       	ld	r24, X
     d20:	56 97       	sbiw	r26, 0x16	; 22
     d22:	86 95       	lsr	r24
     d24:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	09 f0       	breq	.+2      	; 0xd2c <Timebase_UpCounter_SS_Update+0x66>
     d2a:	b3 c0       	rjmp	.+358    	; 0xe92 <Timebase_UpCounter_SS_Update+0x1cc>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d2c:	f1 01       	movw	r30, r2
     d2e:	22 85       	ldd	r18, Z+10	; 0x0a
     d30:	33 85       	ldd	r19, Z+11	; 0x0b
     d32:	44 85       	ldd	r20, Z+12	; 0x0c
     d34:	55 85       	ldd	r21, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d36:	80 85       	ldd	r24, Z+8	; 0x08
     d38:	91 85       	ldd	r25, Z+9	; 0x09

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
     d3a:	2c 01       	movw	r4, r24
     d3c:	66 24       	eor	r6, r6
     d3e:	77 24       	eor	r7, r7
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
     d40:	57 96       	adiw	r26, 0x17	; 23
     d42:	ad 90       	ld	r10, X+
     d44:	bd 90       	ld	r11, X+
     d46:	cd 90       	ld	r12, X+
     d48:	dc 90       	ld	r13, X
     d4a:	5a 97       	sbiw	r26, 0x1a	; 26
     d4c:	a2 1a       	sub	r10, r18
     d4e:	b3 0a       	sbc	r11, r19
     d50:	c4 0a       	sbc	r12, r20
     d52:	d5 0a       	sbc	r13, r21
     d54:	d7 fe       	sbrs	r13, 7
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <Timebase_UpCounter_SS_Update+0x98>
     d58:	aa 24       	eor	r10, r10
     d5a:	bb 24       	eor	r11, r11
     d5c:	65 01       	movw	r12, r10
	if(curr_s < 0){
	  curr_s = 0;
	}
	curr_s *= Timebase->Config.UpdateRate;
     d5e:	d1 01       	movw	r26, r2
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	2d 91       	ld	r18, X+
     d64:	3c 91       	ld	r19, X
     d66:	12 97       	sbiw	r26, 0x02	; 2
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
     d68:	89 e1       	ldi	r24, 0x19	; 25
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	4d 81       	ldd	r20, Y+5	; 0x05
     d6e:	5e 81       	ldd	r21, Y+6	; 0x06
     d70:	48 9f       	mul	r20, r24
     d72:	f0 01       	movw	r30, r0
     d74:	49 9f       	mul	r20, r25
     d76:	f0 0d       	add	r31, r0
     d78:	58 9f       	mul	r21, r24
     d7a:	f0 0d       	add	r31, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	e2 0d       	add	r30, r2
     d80:	f3 1d       	adc	r31, r3
     d82:	e3 8c       	ldd	r14, Z+27	; 0x1b
     d84:	f4 8c       	ldd	r15, Z+28	; 0x1c
     d86:	05 8d       	ldd	r16, Z+29	; 0x1d
     d88:	16 8d       	ldd	r17, Z+30	; 0x1e
     d8a:	e4 18       	sub	r14, r4
     d8c:	f5 08       	sbc	r15, r5
     d8e:	06 09       	sbc	r16, r6
     d90:	17 09       	sbc	r17, r7
	curr_ss += curr_s;
     d92:	40 e0       	ldi	r20, 0x00	; 0
     d94:	50 e0       	ldi	r21, 0x00	; 0
     d96:	c6 01       	movw	r24, r12
     d98:	b5 01       	movw	r22, r10
     d9a:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsi3>
     d9e:	e6 0e       	add	r14, r22
     da0:	f7 1e       	adc	r15, r23
     da2:	08 1f       	adc	r16, r24
     da4:	19 1f       	adc	r17, r25
     da6:	17 ff       	sbrs	r17, 7
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <Timebase_UpCounter_SS_Update+0xea>
     daa:	ee 24       	eor	r14, r14
     dac:	ff 24       	eor	r15, r15
     dae:	87 01       	movw	r16, r14

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     db0:	89 e1       	ldi	r24, 0x19	; 25
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	ad 81       	ldd	r26, Y+5	; 0x05
     db6:	be 81       	ldd	r27, Y+6	; 0x06
     db8:	a8 9f       	mul	r26, r24
     dba:	f0 01       	movw	r30, r0
     dbc:	a9 9f       	mul	r26, r25
     dbe:	f0 0d       	add	r31, r0
     dc0:	b8 9f       	mul	r27, r24
     dc2:	f0 0d       	add	r31, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	e2 0d       	add	r30, r2
     dc8:	f3 1d       	adc	r31, r3
     dca:	e3 a2       	std	Z+35, r14	; 0x23
     dcc:	f4 a2       	std	Z+36, r15	; 0x24
     dce:	05 a3       	std	Z+37, r16	; 0x25
     dd0:	16 a3       	std	Z+38, r17	; 0x26
	}
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
     dd2:	87 8d       	ldd	r24, Z+31	; 0x1f
     dd4:	90 a1       	ldd	r25, Z+32	; 0x20
     dd6:	a1 a1       	ldd	r26, Z+33	; 0x21
     dd8:	b2 a1       	ldd	r27, Z+34	; 0x22

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     dda:	8e 19       	sub	r24, r14
     ddc:	9f 09       	sbc	r25, r15
     dde:	a0 0b       	sbc	r26, r16
     de0:	b1 0b       	sbc	r27, r17
     de2:	b7 ff       	sbrs	r27, 7
     de4:	04 c0       	rjmp	.+8      	; 0xdee <Timebase_UpCounter_SS_Update+0x128>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	a0 e0       	ldi	r26, 0x00	; 0
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	87 a3       	std	Z+39, r24	; 0x27
     df0:	90 a7       	std	Z+40, r25	; 0x28
     df2:	a1 a7       	std	Z+41, r26	; 0x29
     df4:	b2 a7       	std	Z+42, r27	; 0x2a
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
     df6:	89 e1       	ldi	r24, 0x19	; 25
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	ed 81       	ldd	r30, Y+5	; 0x05
     dfc:	fe 81       	ldd	r31, Y+6	; 0x06
     dfe:	e8 9f       	mul	r30, r24
     e00:	b0 01       	movw	r22, r0
     e02:	e9 9f       	mul	r30, r25
     e04:	70 0d       	add	r23, r0
     e06:	f8 9f       	mul	r31, r24
     e08:	70 0d       	add	r23, r0
     e0a:	11 24       	eor	r1, r1
     e0c:	62 0d       	add	r22, r2
     e0e:	73 1d       	adc	r23, r3
     e10:	fb 01       	movw	r30, r22
     e12:	83 a1       	ldd	r24, Z+35	; 0x23
     e14:	94 a1       	ldd	r25, Z+36	; 0x24
     e16:	a5 a1       	ldd	r26, Z+37	; 0x25
     e18:	b6 a1       	ldd	r27, Z+38	; 0x26
     e1a:	18 16       	cp	r1, r24
     e1c:	19 06       	cpc	r1, r25
     e1e:	1a 06       	cpc	r1, r26
     e20:	1b 06       	cpc	r1, r27
     e22:	0c f4       	brge	.+2      	; 0xe26 <Timebase_UpCounter_SS_Update+0x160>
     e24:	c7 c0       	rjmp	.+398    	; 0xfb4 <Timebase_UpCounter_SS_Update+0x2ee>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     e26:	db 01       	movw	r26, r22
     e28:	57 96       	adiw	r26, 0x17	; 23
     e2a:	1d 92       	st	X+, r1
     e2c:	1d 92       	st	X+, r1
     e2e:	1d 92       	st	X+, r1
     e30:	1c 92       	st	X, r1
     e32:	5a 97       	sbiw	r26, 0x1a	; 26
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     e34:	13 8e       	std	Z+27, r1	; 0x1b
     e36:	14 8e       	std	Z+28, r1	; 0x1c
     e38:	15 8e       	std	Z+29, r1	; 0x1d
     e3a:	16 8e       	std	Z+30, r1	; 0x1e

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     e3c:	93 96       	adiw	r26, 0x23	; 35
     e3e:	1d 92       	st	X+, r1
     e40:	1d 92       	st	X+, r1
     e42:	1d 92       	st	X+, r1
     e44:	1c 92       	st	X, r1
     e46:	96 97       	sbiw	r26, 0x26	; 38
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
     e48:	7f 96       	adiw	r30, 0x1f	; 31

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     e4a:	5f 96       	adiw	r26, 0x1f	; 31
     e4c:	2c 91       	ld	r18, X
     e4e:	31 81       	ldd	r19, Z+1	; 0x01
     e50:	42 81       	ldd	r20, Z+2	; 0x02
     e52:	53 81       	ldd	r21, Z+3	; 0x03
     e54:	c9 01       	movw	r24, r18
     e56:	da 01       	movw	r26, r20
     e58:	b7 ff       	sbrs	r27, 7
     e5a:	04 c0       	rjmp	.+8      	; 0xe64 <Timebase_UpCounter_SS_Update+0x19e>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	fb 01       	movw	r30, r22
     e66:	87 a3       	std	Z+39, r24	; 0x27
     e68:	90 a7       	std	Z+40, r25	; 0x28
     e6a:	a1 a7       	std	Z+41, r26	; 0x29
     e6c:	b2 a7       	std	Z+42, r27	; 0x2a
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     e6e:	89 e1       	ldi	r24, 0x19	; 25
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	2d 81       	ldd	r18, Y+5	; 0x05
     e74:	3e 81       	ldd	r19, Y+6	; 0x06
     e76:	28 9f       	mul	r18, r24
     e78:	f0 01       	movw	r30, r0
     e7a:	29 9f       	mul	r18, r25
     e7c:	f0 0d       	add	r31, r0
     e7e:	38 9f       	mul	r19, r24
     e80:	f0 0d       	add	r31, r0
     e82:	11 24       	eor	r1, r1
     e84:	e2 0d       	add	r30, r2
     e86:	f3 1d       	adc	r31, r3
     e88:	86 89       	ldd	r24, Z+22	; 0x16
     e8a:	81 7e       	andi	r24, 0xE1	; 225
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	86 8b       	std	Z+22, r24	; 0x16
     e90:	91 c0       	rjmp	.+290    	; 0xfb4 <Timebase_UpCounter_SS_Update+0x2ee>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     e92:	82 30       	cpi	r24, 0x02	; 2
     e94:	09 f0       	breq	.+2      	; 0xe98 <Timebase_UpCounter_SS_Update+0x1d2>
     e96:	8e c0       	rjmp	.+284    	; 0xfb4 <Timebase_UpCounter_SS_Update+0x2ee>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e98:	d1 01       	movw	r26, r2
     e9a:	1a 96       	adiw	r26, 0x0a	; 10
     e9c:	8d 91       	ld	r24, X+
     e9e:	9d 91       	ld	r25, X+
     ea0:	0d 90       	ld	r0, X+
     ea2:	bc 91       	ld	r27, X
     ea4:	a0 2d       	mov	r26, r0
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	ab 83       	std	Y+3, r26	; 0x03
     eac:	bc 83       	std	Y+4, r27	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     eae:	f1 01       	movw	r30, r2
     eb0:	80 84       	ldd	r8, Z+8	; 0x08
     eb2:	91 84       	ldd	r9, Z+9	; 0x09
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
     eb4:	db 01       	movw	r26, r22
     eb6:	93 96       	adiw	r26, 0x23	; 35
     eb8:	ad 90       	ld	r10, X+
     eba:	bd 90       	ld	r11, X+
     ebc:	cd 90       	ld	r12, X+
     ebe:	dc 90       	ld	r13, X
     ec0:	96 97       	sbiw	r26, 0x26	; 38
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	int32_t value = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
     ec2:	21 81       	ldd	r18, Z+1	; 0x01
     ec4:	32 81       	ldd	r19, Z+2	; 0x02
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	c6 01       	movw	r24, r12
     ecc:	b5 01       	movw	r22, r10
     ece:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     ed2:	7b 01       	movw	r14, r22
     ed4:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
     ed6:	f1 01       	movw	r30, r2
     ed8:	21 81       	ldd	r18, Z+1	; 0x01
     eda:	32 81       	ldd	r19, Z+2	; 0x02
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	c6 01       	movw	r24, r12
     ee2:	b5 01       	movw	r22, r10
     ee4:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     ee8:	c9 01       	movw	r24, r18
     eea:	da 01       	movw	r26, r20
     eec:	2c 01       	movw	r4, r24
     eee:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
     ef0:	54 01       	movw	r10, r8
     ef2:	cc 24       	eor	r12, r12
     ef4:	dd 24       	eor	r13, r13
     ef6:	ae 0c       	add	r10, r14
     ef8:	bf 1c       	adc	r11, r15
     efa:	c0 1e       	adc	r12, r16
     efc:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     efe:	d1 01       	movw	r26, r2
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	8d 91       	ld	r24, X+
     f04:	9c 91       	ld	r25, X
     f06:	12 97       	sbiw	r26, 0x02	; 2
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	a8 16       	cp	r10, r24
     f0e:	b9 06       	cpc	r11, r25
     f10:	ca 06       	cpc	r12, r26
     f12:	db 06       	cpc	r13, r27
     f14:	9c f0       	brlt	.+38     	; 0xf3c <Timebase_UpCounter_SS_Update+0x276>
	  sec_val += 1;
     f16:	08 94       	sec
     f18:	41 1c       	adc	r4, r1
     f1a:	51 1c       	adc	r5, r1
     f1c:	61 1c       	adc	r6, r1
     f1e:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     f20:	f1 01       	movw	r30, r2
     f22:	21 81       	ldd	r18, Z+1	; 0x01
     f24:	32 81       	ldd	r19, Z+2	; 0x02
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	c6 01       	movw	r24, r12
     f2c:	b5 01       	movw	r22, r10
     f2e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
     f32:	ac 01       	movw	r20, r24
     f34:	cb 01       	movw	r24, r22
     f36:	da 01       	movw	r26, r20
     f38:	5c 01       	movw	r10, r24
     f3a:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     f3c:	89 e1       	ldi	r24, 0x19	; 25
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	2d 81       	ldd	r18, Y+5	; 0x05
     f42:	3e 81       	ldd	r19, Y+6	; 0x06
     f44:	28 9f       	mul	r18, r24
     f46:	80 01       	movw	r16, r0
     f48:	29 9f       	mul	r18, r25
     f4a:	10 0d       	add	r17, r0
     f4c:	38 9f       	mul	r19, r24
     f4e:	10 0d       	add	r17, r0
     f50:	11 24       	eor	r1, r1
     f52:	02 0d       	add	r16, r2
     f54:	13 1d       	adc	r17, r3
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	ab 81       	ldd	r26, Y+3	; 0x03
     f5c:	bc 81       	ldd	r27, Y+4	; 0x04
     f5e:	84 0d       	add	r24, r4
     f60:	95 1d       	adc	r25, r5
     f62:	a6 1d       	adc	r26, r6
     f64:	b7 1d       	adc	r27, r7
     f66:	f8 01       	movw	r30, r16
     f68:	87 8b       	std	Z+23, r24	; 0x17
     f6a:	90 8f       	std	Z+24, r25	; 0x18
     f6c:	a1 8f       	std	Z+25, r26	; 0x19
     f6e:	b2 8f       	std	Z+26, r27	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     f70:	d8 01       	movw	r26, r16
     f72:	5b 96       	adiw	r26, 0x1b	; 27
     f74:	ad 92       	st	X+, r10
     f76:	bd 92       	st	X+, r11
     f78:	cd 92       	st	X+, r12
     f7a:	dc 92       	st	X, r13
     f7c:	5e 97       	sbiw	r26, 0x1e	; 30
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
     f7e:	5f 96       	adiw	r26, 0x1f	; 31
     f80:	2d 91       	ld	r18, X+
     f82:	3d 91       	ld	r19, X+
     f84:	4d 91       	ld	r20, X+
     f86:	5c 91       	ld	r21, X
     f88:	92 97       	sbiw	r26, 0x22	; 34
     f8a:	93 96       	adiw	r26, 0x23	; 35
     f8c:	8d 91       	ld	r24, X+
     f8e:	9d 91       	ld	r25, X+
     f90:	0d 90       	ld	r0, X+
     f92:	bc 91       	ld	r27, X
     f94:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     f96:	28 1b       	sub	r18, r24
     f98:	39 0b       	sbc	r19, r25
     f9a:	4a 0b       	sbc	r20, r26
     f9c:	5b 0b       	sbc	r21, r27
     f9e:	57 ff       	sbrs	r21, 7
     fa0:	04 c0       	rjmp	.+8      	; 0xfaa <Timebase_UpCounter_SS_Update+0x2e4>
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	f8 01       	movw	r30, r16
     fac:	27 a3       	std	Z+39, r18	; 0x27
     fae:	30 a7       	std	Z+40, r19	; 0x28
     fb0:	41 a7       	std	Z+41, r20	; 0x29
     fb2:	52 a7       	std	Z+42, r21	; 0x2a
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	bf 90       	pop	r11
     fd2:	af 90       	pop	r10
     fd4:	9f 90       	pop	r9
     fd6:	8f 90       	pop	r8
     fd8:	7f 90       	pop	r7
     fda:	6f 90       	pop	r6
     fdc:	5f 90       	pop	r5
     fde:	4f 90       	pop	r4
     fe0:	3f 90       	pop	r3
     fe2:	2f 90       	pop	r2
     fe4:	08 95       	ret

00000fe6 <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	e0 91 43 01 	lds	r30, 0x0143
     fec:	f0 91 44 01 	lds	r31, 0x0144
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	29 e1       	ldi	r18, 0x19	; 25
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	bc 01       	movw	r22, r24
     ff8:	62 9f       	mul	r22, r18
     ffa:	c0 01       	movw	r24, r0
     ffc:	63 9f       	mul	r22, r19
     ffe:	90 0d       	add	r25, r0
    1000:	72 9f       	mul	r23, r18
    1002:	90 0d       	add	r25, r0
    1004:	11 24       	eor	r1, r1
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	86 89       	ldd	r24, Z+22	; 0x16
    100c:	86 95       	lsr	r24
    100e:	8f 70       	andi	r24, 0x0F	; 15
    1010:	84 30       	cpi	r24, 0x04	; 4
    1012:	09 f4       	brne	.+2      	; 0x1016 <Timebase_UpCounter_SS_Expired+0x30>
    1014:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1016:	84 2f       	mov	r24, r20
    1018:	08 95       	ret

0000101a <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    101a:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    101c:	e0 91 43 01 	lds	r30, 0x0143
    1020:	f0 91 44 01 	lds	r31, 0x0144
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	89 e1       	ldi	r24, 0x19	; 25
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	bc 01       	movw	r22, r24
    102e:	26 9f       	mul	r18, r22
    1030:	c0 01       	movw	r24, r0
    1032:	27 9f       	mul	r18, r23
    1034:	90 0d       	add	r25, r0
    1036:	36 9f       	mul	r19, r22
    1038:	90 0d       	add	r25, r0
    103a:	11 24       	eor	r1, r1
    103c:	e8 0f       	add	r30, r24
    103e:	f9 1f       	adc	r31, r25
    1040:	86 89       	ldd	r24, Z+22	; 0x16
    1042:	86 95       	lsr	r24
    1044:	8f 70       	andi	r24, 0x0F	; 15
    1046:	84 30       	cpi	r24, 0x04	; 4
    1048:	11 f0       	breq	.+4      	; 0x104e <Timebase_UpCounter_SS_Expired_Event+0x34>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    104e:	84 2f       	mov	r24, r20
    1050:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1056:	08 95       	ret

00001058 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    1058:	e0 91 43 01 	lds	r30, 0x0143
    105c:	f0 91 44 01 	lds	r31, 0x0144
    1060:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1062:	29 e1       	ldi	r18, 0x19	; 25
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	dc 01       	movw	r26, r24
    1068:	a2 9f       	mul	r26, r18
    106a:	c0 01       	movw	r24, r0
    106c:	a3 9f       	mul	r26, r19
    106e:	90 0d       	add	r25, r0
    1070:	b2 9f       	mul	r27, r18
    1072:	90 0d       	add	r25, r0
    1074:	11 24       	eor	r1, r1
    1076:	e8 0f       	add	r30, r24
    1078:	f9 1f       	adc	r31, r25
    107a:	86 89       	ldd	r24, Z+22	; 0x16
    107c:	80 fd       	sbrc	r24, 0
    107e:	0f c0       	rjmp	.+30     	; 0x109e <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1080:	87 a1       	ldd	r24, Z+39	; 0x27
    1082:	90 a5       	ldd	r25, Z+40	; 0x28
    1084:	a1 a5       	ldd	r26, Z+41	; 0x29
    1086:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1088:	84 0f       	add	r24, r20
    108a:	95 1f       	adc	r25, r21
    108c:	a6 1f       	adc	r26, r22
    108e:	b7 1f       	adc	r27, r23
    1090:	83 a7       	std	Z+43, r24	; 0x2b
    1092:	94 a7       	std	Z+44, r25	; 0x2c
    1094:	a5 a7       	std	Z+45, r26	; 0x2d
    1096:	b6 a7       	std	Z+46, r27	; 0x2e
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1098:	86 89       	ldd	r24, Z+22	; 0x16
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	86 8b       	std	Z+22, r24	; 0x16
    109e:	08 95       	ret

000010a0 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    10a0:	e0 91 43 01 	lds	r30, 0x0143
    10a4:	f0 91 44 01 	lds	r31, 0x0144
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	29 e1       	ldi	r18, 0x19	; 25
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	ac 01       	movw	r20, r24
    10b0:	42 9f       	mul	r20, r18
    10b2:	c0 01       	movw	r24, r0
    10b4:	43 9f       	mul	r20, r19
    10b6:	90 0d       	add	r25, r0
    10b8:	52 9f       	mul	r21, r18
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	e8 0f       	add	r30, r24
    10c0:	f9 1f       	adc	r31, r25
    10c2:	23 a5       	ldd	r18, Z+43	; 0x2b
    10c4:	34 a5       	ldd	r19, Z+44	; 0x2c
    10c6:	45 a5       	ldd	r20, Z+45	; 0x2d
    10c8:	56 a5       	ldd	r21, Z+46	; 0x2e
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    10ca:	87 a1       	ldd	r24, Z+39	; 0x27
    10cc:	90 a5       	ldd	r25, Z+40	; 0x28
    10ce:	a1 a5       	ldd	r26, Z+41	; 0x29
    10d0:	b2 a5       	ldd	r27, Z+42	; 0x2a
    10d2:	28 1b       	sub	r18, r24
    10d4:	39 0b       	sbc	r19, r25
    10d6:	4a 0b       	sbc	r20, r26
    10d8:	5b 0b       	sbc	r21, r27
    10da:	57 ff       	sbrs	r21, 7
    10dc:	04 c0       	rjmp	.+8      	; 0x10e6 <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    10e6:	b9 01       	movw	r22, r18
    10e8:	ca 01       	movw	r24, r20
    10ea:	08 95       	ret

000010ec <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    10f0:	c0 91 43 01 	lds	r28, 0x0143
    10f4:	d0 91 44 01 	lds	r29, 0x0144
    10f8:	68 2f       	mov	r22, r24
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	89 e1       	ldi	r24, 0x19	; 25
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	68 9f       	mul	r22, r24
    1102:	f0 01       	movw	r30, r0
    1104:	69 9f       	mul	r22, r25
    1106:	f0 0d       	add	r31, r0
    1108:	78 9f       	mul	r23, r24
    110a:	f0 0d       	add	r31, r0
    110c:	11 24       	eor	r1, r1
    110e:	ec 0f       	add	r30, r28
    1110:	fd 1f       	adc	r31, r29
    1112:	23 a5       	ldd	r18, Z+43	; 0x2b
    1114:	34 a5       	ldd	r19, Z+44	; 0x2c
    1116:	45 a5       	ldd	r20, Z+45	; 0x2d
    1118:	56 a5       	ldd	r21, Z+46	; 0x2e
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    111a:	87 a1       	ldd	r24, Z+39	; 0x27
    111c:	90 a5       	ldd	r25, Z+40	; 0x28
    111e:	a1 a5       	ldd	r26, Z+41	; 0x29
    1120:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1122:	28 1b       	sub	r18, r24
    1124:	39 0b       	sbc	r19, r25
    1126:	4a 0b       	sbc	r20, r26
    1128:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    112a:	57 fd       	sbrc	r21, 7
    112c:	07 c0       	rjmp	.+14     	; 0x113c <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	41 05       	cpc	r20, r1
    1134:	51 05       	cpc	r21, r1
    1136:	11 f0       	breq	.+4      	; 0x113c <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	12 c0       	rjmp	.+36     	; 0x1160 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	89 e1       	ldi	r24, 0x19	; 25
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	ac 01       	movw	r20, r24
    1144:	64 9f       	mul	r22, r20
    1146:	c0 01       	movw	r24, r0
    1148:	65 9f       	mul	r22, r21
    114a:	90 0d       	add	r25, r0
    114c:	74 9f       	mul	r23, r20
    114e:	90 0d       	add	r25, r0
    1150:	11 24       	eor	r1, r1
    1152:	c8 0f       	add	r28, r24
    1154:	d9 1f       	adc	r29, r25
    1156:	8e 89       	ldd	r24, Y+22	; 0x16
    1158:	80 ff       	sbrs	r24, 0
    115a:	21 e0       	ldi	r18, 0x01	; 1
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1160:	82 2f       	mov	r24, r18
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	08 95       	ret

00001168 <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1168:	1f 93       	push	r17
    116a:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    116c:	0e 94 76 08 	call	0x10ec	; 0x10ec <Timebase_UpCounter_SS_Period_Value_Expired>
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	11 f0       	breq	.+4      	; 0x1178 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	16 c0       	rjmp	.+44     	; 0x11a4 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1178:	e0 91 43 01 	lds	r30, 0x0143
    117c:	f0 91 44 01 	lds	r31, 0x0144
    1180:	21 2f       	mov	r18, r17
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	89 e1       	ldi	r24, 0x19	; 25
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	ac 01       	movw	r20, r24
    118a:	24 9f       	mul	r18, r20
    118c:	c0 01       	movw	r24, r0
    118e:	25 9f       	mul	r18, r21
    1190:	90 0d       	add	r25, r0
    1192:	34 9f       	mul	r19, r20
    1194:	90 0d       	add	r25, r0
    1196:	11 24       	eor	r1, r1
    1198:	e8 0f       	add	r30, r24
    119a:	f9 1f       	adc	r31, r25
    119c:	86 89       	ldd	r24, Z+22	; 0x16
    119e:	8e 7f       	andi	r24, 0xFE	; 254
    11a0:	86 8b       	std	Z+22, r24	; 0x16
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11a4:	1f 91       	pop	r17
    11a6:	08 95       	ret

000011a8 <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Timebase_UpCounter_SS_Update>
  }
}
    11ae:	08 95       	ret

000011b0 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
  }
}
    11b6:	08 95       	ret

000011b8 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    11b8:	e0 91 43 01 	lds	r30, 0x0143
    11bc:	f0 91 44 01 	lds	r31, 0x0144
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	25 e1       	ldi	r18, 0x15	; 21
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	ac 01       	movw	r20, r24
    11c8:	42 9f       	mul	r20, r18
    11ca:	c0 01       	movw	r24, r0
    11cc:	43 9f       	mul	r20, r19
    11ce:	90 0d       	add	r25, r0
    11d0:	52 9f       	mul	r21, r18
    11d2:	90 0d       	add	r25, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	e8 0f       	add	r30, r24
    11d8:	f9 1f       	adc	r31, r25
    11da:	87 a5       	ldd	r24, Z+47	; 0x2f
    11dc:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    11de:	8f 70       	andi	r24, 0x0F	; 15
    11e0:	08 95       	ret

000011e2 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    11e2:	e0 91 43 01 	lds	r30, 0x0143
    11e6:	f0 91 44 01 	lds	r31, 0x0144
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	25 e1       	ldi	r18, 0x15	; 21
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	ac 01       	movw	r20, r24
    11f2:	42 9f       	mul	r20, r18
    11f4:	c0 01       	movw	r24, r0
    11f6:	43 9f       	mul	r20, r19
    11f8:	90 0d       	add	r25, r0
    11fa:	52 9f       	mul	r21, r18
    11fc:	90 0d       	add	r25, r0
    11fe:	11 24       	eor	r1, r1
    1200:	e8 0f       	add	r30, r24
    1202:	f9 1f       	adc	r31, r25
    1204:	6f 70       	andi	r22, 0x0F	; 15
    1206:	66 0f       	add	r22, r22
    1208:	87 a5       	ldd	r24, Z+47	; 0x2f
    120a:	81 7e       	andi	r24, 0xE1	; 225
    120c:	86 2b       	or	r24, r22
    120e:	87 a7       	std	Z+47, r24	; 0x2f
}
    1210:	08 95       	ret

00001212 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1212:	e0 91 43 01 	lds	r30, 0x0143
    1216:	f0 91 44 01 	lds	r31, 0x0144
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	25 e1       	ldi	r18, 0x15	; 21
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	ac 01       	movw	r20, r24
    1222:	42 9f       	mul	r20, r18
    1224:	c0 01       	movw	r24, r0
    1226:	43 9f       	mul	r20, r19
    1228:	90 0d       	add	r25, r0
    122a:	52 9f       	mul	r21, r18
    122c:	90 0d       	add	r25, r0
    122e:	11 24       	eor	r1, r1
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	df 01       	movw	r26, r30
    1236:	dc 96       	adiw	r26, 0x3c	; 60
    1238:	64 ad       	ldd	r22, Z+60	; 0x3c
    123a:	11 96       	adiw	r26, 0x01	; 1
    123c:	7c 91       	ld	r23, X
    123e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Value;
}
    1240:	12 96       	adiw	r26, 0x02	; 2
    1242:	8c 91       	ld	r24, X
    1244:	12 97       	sbiw	r26, 0x02	; 2
    1246:	13 96       	adiw	r26, 0x03	; 3
    1248:	9c 91       	ld	r25, X
    124a:	08 95       	ret

0000124c <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1250:	c0 91 43 01 	lds	r28, 0x0143
    1254:	d0 91 44 01 	lds	r29, 0x0144
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	25 e1       	ldi	r18, 0x15	; 21
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	fc 01       	movw	r30, r24
    1260:	e2 9f       	mul	r30, r18
    1262:	c0 01       	movw	r24, r0
    1264:	e3 9f       	mul	r30, r19
    1266:	90 0d       	add	r25, r0
    1268:	f2 9f       	mul	r31, r18
    126a:	90 0d       	add	r25, r0
    126c:	11 24       	eor	r1, r1
    126e:	c8 0f       	add	r28, r24
    1270:	d9 1f       	adc	r29, r25
    1272:	ca 01       	movw	r24, r20
    1274:	db 01       	movw	r26, r22
    1276:	b7 ff       	sbrs	r27, 7
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <Timebase_UpCounter_Set_Value+0x36>
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a0 e0       	ldi	r26, 0x00	; 0
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	8c af       	std	Y+60, r24	; 0x3c
    1284:	9d af       	std	Y+61, r25	; 0x3d
    1286:	ae af       	std	Y+62, r26	; 0x3e
    1288:	bf af       	std	Y+63, r27	; 0x3f
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    1290:	e0 91 43 01 	lds	r30, 0x0143
    1294:	f0 91 44 01 	lds	r31, 0x0144
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	25 e1       	ldi	r18, 0x15	; 21
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ac 01       	movw	r20, r24
    12a0:	42 9f       	mul	r20, r18
    12a2:	c0 01       	movw	r24, r0
    12a4:	43 9f       	mul	r20, r19
    12a6:	90 0d       	add	r25, r0
    12a8:	52 9f       	mul	r21, r18
    12aa:	90 0d       	add	r25, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	e8 0f       	add	r30, r24
    12b0:	f9 1f       	adc	r31, r25
    12b2:	df 01       	movw	r26, r30
    12b4:	d0 96       	adiw	r26, 0x30	; 48
    12b6:	60 a9       	ldd	r22, Z+48	; 0x30
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	7c 91       	ld	r23, X
    12bc:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    12be:	12 96       	adiw	r26, 0x02	; 2
    12c0:	8c 91       	ld	r24, X
    12c2:	12 97       	sbiw	r26, 0x02	; 2
    12c4:	13 96       	adiw	r26, 0x03	; 3
    12c6:	9c 91       	ld	r25, X
    12c8:	08 95       	ret

000012ca <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    12ca:	e0 91 43 01 	lds	r30, 0x0143
    12ce:	f0 91 44 01 	lds	r31, 0x0144
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	25 e1       	ldi	r18, 0x15	; 21
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	ac 01       	movw	r20, r24
    12da:	42 9f       	mul	r20, r18
    12dc:	c0 01       	movw	r24, r0
    12de:	43 9f       	mul	r20, r19
    12e0:	90 0d       	add	r25, r0
    12e2:	52 9f       	mul	r21, r18
    12e4:	90 0d       	add	r25, r0
    12e6:	11 24       	eor	r1, r1
    12e8:	e8 0f       	add	r30, r24
    12ea:	f9 1f       	adc	r31, r25
    12ec:	df 01       	movw	r26, r30
    12ee:	d0 96       	adiw	r26, 0x30	; 48
    12f0:	60 a9       	ldd	r22, Z+48	; 0x30
    12f2:	11 96       	adiw	r26, 0x01	; 1
    12f4:	7c 91       	ld	r23, X
    12f6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    12f8:	12 96       	adiw	r26, 0x02	; 2
    12fa:	8c 91       	ld	r24, X
    12fc:	12 97       	sbiw	r26, 0x02	; 2
    12fe:	13 96       	adiw	r26, 0x03	; 3
    1300:	9c 91       	ld	r25, X
    1302:	08 95       	ret

00001304 <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1304:	e0 91 43 01 	lds	r30, 0x0143
    1308:	f0 91 44 01 	lds	r31, 0x0144
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	25 e1       	ldi	r18, 0x15	; 21
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	dc 01       	movw	r26, r24
    1314:	a2 9f       	mul	r26, r18
    1316:	c0 01       	movw	r24, r0
    1318:	a3 9f       	mul	r26, r19
    131a:	90 0d       	add	r25, r0
    131c:	b2 9f       	mul	r27, r18
    131e:	90 0d       	add	r25, r0
    1320:	11 24       	eor	r1, r1
    1322:	e8 0f       	add	r30, r24
    1324:	f9 1f       	adc	r31, r25
    1326:	40 ab       	std	Z+48, r20	; 0x30
    1328:	51 ab       	std	Z+49, r21	; 0x31
    132a:	62 ab       	std	Z+50, r22	; 0x32
    132c:	73 ab       	std	Z+51, r23	; 0x33
}
    132e:	08 95       	ret

00001330 <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1330:	e0 91 43 01 	lds	r30, 0x0143
    1334:	f0 91 44 01 	lds	r31, 0x0144
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	25 e1       	ldi	r18, 0x15	; 21
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	dc 01       	movw	r26, r24
    1340:	a2 9f       	mul	r26, r18
    1342:	c0 01       	movw	r24, r0
    1344:	a3 9f       	mul	r26, r19
    1346:	90 0d       	add	r25, r0
    1348:	b2 9f       	mul	r27, r18
    134a:	90 0d       	add	r25, r0
    134c:	11 24       	eor	r1, r1
    134e:	e8 0f       	add	r30, r24
    1350:	f9 1f       	adc	r31, r25
    1352:	40 ab       	std	Z+48, r20	; 0x30
    1354:	51 ab       	std	Z+49, r21	; 0x31
    1356:	62 ab       	std	Z+50, r22	; 0x32
    1358:	73 ab       	std	Z+51, r23	; 0x33
}
    135a:	08 95       	ret

0000135c <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    135c:	e0 91 43 01 	lds	r30, 0x0143
    1360:	f0 91 44 01 	lds	r31, 0x0144
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	25 e1       	ldi	r18, 0x15	; 21
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	ac 01       	movw	r20, r24
    136c:	42 9f       	mul	r20, r18
    136e:	c0 01       	movw	r24, r0
    1370:	43 9f       	mul	r20, r19
    1372:	90 0d       	add	r25, r0
    1374:	52 9f       	mul	r21, r18
    1376:	90 0d       	add	r25, r0
    1378:	11 24       	eor	r1, r1
    137a:	e8 0f       	add	r30, r24
    137c:	f9 1f       	adc	r31, r25
    137e:	df 01       	movw	r26, r30
    1380:	d4 96       	adiw	r26, 0x34	; 52
    1382:	64 a9       	ldd	r22, Z+52	; 0x34
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	7c 91       	ld	r23, X
    1388:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    138a:	12 96       	adiw	r26, 0x02	; 2
    138c:	8c 91       	ld	r24, X
    138e:	12 97       	sbiw	r26, 0x02	; 2
    1390:	13 96       	adiw	r26, 0x03	; 3
    1392:	9c 91       	ld	r25, X
    1394:	08 95       	ret

00001396 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1396:	e0 91 43 01 	lds	r30, 0x0143
    139a:	f0 91 44 01 	lds	r31, 0x0144
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	25 e1       	ldi	r18, 0x15	; 21
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	dc 01       	movw	r26, r24
    13a6:	a2 9f       	mul	r26, r18
    13a8:	c0 01       	movw	r24, r0
    13aa:	a3 9f       	mul	r26, r19
    13ac:	90 0d       	add	r25, r0
    13ae:	b2 9f       	mul	r27, r18
    13b0:	90 0d       	add	r25, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	e8 0f       	add	r30, r24
    13b6:	f9 1f       	adc	r31, r25
    13b8:	44 ab       	std	Z+52, r20	; 0x34
    13ba:	55 ab       	std	Z+53, r21	; 0x35
    13bc:	66 ab       	std	Z+54, r22	; 0x36
    13be:	77 ab       	std	Z+55, r23	; 0x37
}
    13c0:	08 95       	ret

000013c2 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    13c2:	e0 91 43 01 	lds	r30, 0x0143
    13c6:	f0 91 44 01 	lds	r31, 0x0144
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	25 e1       	ldi	r18, 0x15	; 21
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	ac 01       	movw	r20, r24
    13d2:	42 9f       	mul	r20, r18
    13d4:	c0 01       	movw	r24, r0
    13d6:	43 9f       	mul	r20, r19
    13d8:	90 0d       	add	r25, r0
    13da:	52 9f       	mul	r21, r18
    13dc:	90 0d       	add	r25, r0
    13de:	11 24       	eor	r1, r1
    13e0:	e8 0f       	add	r30, r24
    13e2:	f9 1f       	adc	r31, r25
    13e4:	df 01       	movw	r26, r30
    13e6:	d8 96       	adiw	r26, 0x38	; 56
    13e8:	60 ad       	ldd	r22, Z+56	; 0x38
    13ea:	11 96       	adiw	r26, 0x01	; 1
    13ec:	7c 91       	ld	r23, X
    13ee:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
    13f0:	12 96       	adiw	r26, 0x02	; 2
    13f2:	8c 91       	ld	r24, X
    13f4:	12 97       	sbiw	r26, 0x02	; 2
    13f6:	13 96       	adiw	r26, 0x03	; 3
    13f8:	9c 91       	ld	r25, X
    13fa:	08 95       	ret

000013fc <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1400:	c0 91 43 01 	lds	r28, 0x0143
    1404:	d0 91 44 01 	lds	r29, 0x0144
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	25 e1       	ldi	r18, 0x15	; 21
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	fc 01       	movw	r30, r24
    1410:	e2 9f       	mul	r30, r18
    1412:	c0 01       	movw	r24, r0
    1414:	e3 9f       	mul	r30, r19
    1416:	90 0d       	add	r25, r0
    1418:	f2 9f       	mul	r31, r18
    141a:	90 0d       	add	r25, r0
    141c:	11 24       	eor	r1, r1
    141e:	c8 0f       	add	r28, r24
    1420:	d9 1f       	adc	r29, r25
    1422:	ca 01       	movw	r24, r20
    1424:	db 01       	movw	r26, r22
    1426:	b7 ff       	sbrs	r27, 7
    1428:	04 c0       	rjmp	.+8      	; 0x1432 <Timebase_UpCounter_Set_TemporaryValue+0x36>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 e0       	ldi	r26, 0x00	; 0
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	88 af       	std	Y+56, r24	; 0x38
    1434:	99 af       	std	Y+57, r25	; 0x39
    1436:	aa af       	std	Y+58, r26	; 0x3a
    1438:	bb af       	std	Y+59, r27	; 0x3b
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	08 95       	ret

00001440 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1440:	e0 91 43 01 	lds	r30, 0x0143
    1444:	f0 91 44 01 	lds	r31, 0x0144
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	25 e1       	ldi	r18, 0x15	; 21
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	ac 01       	movw	r20, r24
    1450:	42 9f       	mul	r20, r18
    1452:	c0 01       	movw	r24, r0
    1454:	43 9f       	mul	r20, r19
    1456:	90 0d       	add	r25, r0
    1458:	52 9f       	mul	r21, r18
    145a:	90 0d       	add	r25, r0
    145c:	11 24       	eor	r1, r1
    145e:	e8 0f       	add	r30, r24
    1460:	f9 1f       	adc	r31, r25
    1462:	e0 5c       	subi	r30, 0xC0	; 192
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	60 81       	ld	r22, Z
    1468:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    146a:	82 81       	ldd	r24, Z+2	; 0x02
    146c:	93 81       	ldd	r25, Z+3	; 0x03
    146e:	08 95       	ret

00001470 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1470:	e0 91 43 01 	lds	r30, 0x0143
    1474:	f0 91 44 01 	lds	r31, 0x0144
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	25 e1       	ldi	r18, 0x15	; 21
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	dc 01       	movw	r26, r24
    1480:	a2 9f       	mul	r26, r18
    1482:	c0 01       	movw	r24, r0
    1484:	a3 9f       	mul	r26, r19
    1486:	90 0d       	add	r25, r0
    1488:	b2 9f       	mul	r27, r18
    148a:	90 0d       	add	r25, r0
    148c:	11 24       	eor	r1, r1
    148e:	e8 0f       	add	r30, r24
    1490:	f9 1f       	adc	r31, r25
    1492:	e0 5c       	subi	r30, 0xC0	; 192
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	40 83       	st	Z, r20
    1498:	51 83       	std	Z+1, r21	; 0x01
    149a:	62 83       	std	Z+2, r22	; 0x02
    149c:	73 83       	std	Z+3, r23	; 0x03
}
    149e:	08 95       	ret

000014a0 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    14a0:	e0 91 43 01 	lds	r30, 0x0143
    14a4:	f0 91 44 01 	lds	r31, 0x0144
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	25 e1       	ldi	r18, 0x15	; 21
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	ac 01       	movw	r20, r24
    14b0:	42 9f       	mul	r20, r18
    14b2:	c0 01       	movw	r24, r0
    14b4:	43 9f       	mul	r20, r19
    14b6:	90 0d       	add	r25, r0
    14b8:	52 9f       	mul	r21, r18
    14ba:	90 0d       	add	r25, r0
    14bc:	11 24       	eor	r1, r1
    14be:	e8 0f       	add	r30, r24
    14c0:	f9 1f       	adc	r31, r25
    14c2:	87 a5       	ldd	r24, Z+47	; 0x2f
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    14c4:	81 70       	andi	r24, 0x01	; 1
    14c6:	08 95       	ret

000014c8 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    14c8:	e0 91 43 01 	lds	r30, 0x0143
    14cc:	f0 91 44 01 	lds	r31, 0x0144
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	25 e1       	ldi	r18, 0x15	; 21
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	ac 01       	movw	r20, r24
    14d8:	42 9f       	mul	r20, r18
    14da:	c0 01       	movw	r24, r0
    14dc:	43 9f       	mul	r20, r19
    14de:	90 0d       	add	r25, r0
    14e0:	52 9f       	mul	r21, r18
    14e2:	90 0d       	add	r25, r0
    14e4:	11 24       	eor	r1, r1
    14e6:	e8 0f       	add	r30, r24
    14e8:	f9 1f       	adc	r31, r25
    14ea:	87 a5       	ldd	r24, Z+47	; 0x2f
    14ec:	81 60       	ori	r24, 0x01	; 1
    14ee:	87 a7       	std	Z+47, r24	; 0x2f
}
    14f0:	08 95       	ret

000014f2 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14f2:	e0 91 43 01 	lds	r30, 0x0143
    14f6:	f0 91 44 01 	lds	r31, 0x0144
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	25 e1       	ldi	r18, 0x15	; 21
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	ac 01       	movw	r20, r24
    1502:	42 9f       	mul	r20, r18
    1504:	c0 01       	movw	r24, r0
    1506:	43 9f       	mul	r20, r19
    1508:	90 0d       	add	r25, r0
    150a:	52 9f       	mul	r21, r18
    150c:	90 0d       	add	r25, r0
    150e:	11 24       	eor	r1, r1
    1510:	e8 0f       	add	r30, r24
    1512:	f9 1f       	adc	r31, r25
    1514:	87 a5       	ldd	r24, Z+47	; 0x2f
    1516:	8e 7f       	andi	r24, 0xFE	; 254
    1518:	87 a7       	std	Z+47, r24	; 0x2f
}
    151a:	08 95       	ret

0000151c <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    151c:	e0 91 43 01 	lds	r30, 0x0143
    1520:	f0 91 44 01 	lds	r31, 0x0144
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	25 e1       	ldi	r18, 0x15	; 21
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	ac 01       	movw	r20, r24
    152c:	42 9f       	mul	r20, r18
    152e:	c0 01       	movw	r24, r0
    1530:	43 9f       	mul	r20, r19
    1532:	90 0d       	add	r25, r0
    1534:	52 9f       	mul	r21, r18
    1536:	90 0d       	add	r25, r0
    1538:	11 24       	eor	r1, r1
    153a:	e8 0f       	add	r30, r24
    153c:	f9 1f       	adc	r31, r25
    153e:	87 a5       	ldd	r24, Z+47	; 0x2f

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1540:	14 ae       	std	Z+60, r1	; 0x3c
    1542:	15 ae       	std	Z+61, r1	; 0x3d
    1544:	16 ae       	std	Z+62, r1	; 0x3e
    1546:	17 ae       	std	Z+63, r1	; 0x3f
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1548:	10 aa       	std	Z+48, r1	; 0x30
    154a:	11 aa       	std	Z+49, r1	; 0x31
    154c:	12 aa       	std	Z+50, r1	; 0x32
    154e:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1550:	14 aa       	std	Z+52, r1	; 0x34
    1552:	15 aa       	std	Z+53, r1	; 0x35
    1554:	16 aa       	std	Z+54, r1	; 0x36
    1556:	17 aa       	std	Z+55, r1	; 0x37

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1558:	10 ae       	std	Z+56, r1	; 0x38
    155a:	11 ae       	std	Z+57, r1	; 0x39
    155c:	12 ae       	std	Z+58, r1	; 0x3a
    155e:	13 ae       	std	Z+59, r1	; 0x3b
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1560:	e0 5c       	subi	r30, 0xC0	; 192
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	10 82       	st	Z, r1
    1566:	11 82       	std	Z+1, r1	; 0x01
    1568:	12 82       	std	Z+2, r1	; 0x02
    156a:	13 82       	std	Z+3, r1	; 0x03
    156c:	e0 54       	subi	r30, 0x40	; 64
    156e:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1570:	80 7e       	andi	r24, 0xE0	; 224
    1572:	87 a7       	std	Z+47, r24	; 0x2f
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    1574:	08 95       	ret

00001576 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1576:	0e 94 8e 0a 	call	0x151c	; 0x151c <Timebase_UpCounter_Reset>
}
    157a:	08 95       	ret

0000157c <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    157c:	e0 91 43 01 	lds	r30, 0x0143
    1580:	f0 91 44 01 	lds	r31, 0x0144
    1584:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1586:	25 e1       	ldi	r18, 0x15	; 21
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	ac 01       	movw	r20, r24
    158c:	42 9f       	mul	r20, r18
    158e:	c0 01       	movw	r24, r0
    1590:	43 9f       	mul	r20, r19
    1592:	90 0d       	add	r25, r0
    1594:	52 9f       	mul	r21, r18
    1596:	90 0d       	add	r25, r0
    1598:	11 24       	eor	r1, r1
    159a:	e8 0f       	add	r30, r24
    159c:	f9 1f       	adc	r31, r25
    159e:	97 a5       	ldd	r25, Z+47	; 0x2f
    15a0:	89 2f       	mov	r24, r25
    15a2:	86 95       	lsr	r24
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    15aa:	91 7e       	andi	r25, 0xE1	; 225
    15ac:	92 60       	ori	r25, 0x02	; 2
    15ae:	97 a7       	std	Z+47, r25	; 0x2f
    15b0:	08 95       	ret

000015b2 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    15b2:	e0 91 43 01 	lds	r30, 0x0143
    15b6:	f0 91 44 01 	lds	r31, 0x0144
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    15bc:	25 e1       	ldi	r18, 0x15	; 21
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	ac 01       	movw	r20, r24
    15c2:	42 9f       	mul	r20, r18
    15c4:	c0 01       	movw	r24, r0
    15c6:	43 9f       	mul	r20, r19
    15c8:	90 0d       	add	r25, r0
    15ca:	52 9f       	mul	r21, r18
    15cc:	90 0d       	add	r25, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	e8 0f       	add	r30, r24
    15d2:	f9 1f       	adc	r31, r25
    15d4:	97 a5       	ldd	r25, Z+47	; 0x2f
    15d6:	89 2f       	mov	r24, r25
    15d8:	86 95       	lsr	r24
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	19 f0       	breq	.+6      	; 0x15e6 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    15e0:	91 7e       	andi	r25, 0xE1	; 225
    15e2:	94 60       	ori	r25, 0x04	; 4
    15e4:	97 a7       	std	Z+47, r25	; 0x2f
    15e6:	08 95       	ret

000015e8 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    15e8:	a0 91 43 01 	lds	r26, 0x0143
    15ec:	b0 91 44 01 	lds	r27, 0x0144
    15f0:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    15f2:	25 e1       	ldi	r18, 0x15	; 21
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	82 9f       	mul	r24, r18
    15f8:	f0 01       	movw	r30, r0
    15fa:	83 9f       	mul	r24, r19
    15fc:	f0 0d       	add	r31, r0
    15fe:	92 9f       	mul	r25, r18
    1600:	f0 0d       	add	r31, r0
    1602:	11 24       	eor	r1, r1
    1604:	ea 0f       	add	r30, r26
    1606:	fb 1f       	adc	r31, r27
    1608:	87 a5       	ldd	r24, Z+47	; 0x2f
    160a:	86 95       	lsr	r24
    160c:	8f 70       	andi	r24, 0x0F	; 15
    160e:	19 f5       	brne	.+70     	; 0x1656 <Timebase_UpCounter_Set_Securely+0x6e>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1610:	14 ae       	std	Z+60, r1	; 0x3c
    1612:	15 ae       	std	Z+61, r1	; 0x3d
    1614:	16 ae       	std	Z+62, r1	; 0x3e
    1616:	17 ae       	std	Z+63, r1	; 0x3f

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1618:	10 ae       	std	Z+56, r1	; 0x38
    161a:	11 ae       	std	Z+57, r1	; 0x39
    161c:	12 ae       	std	Z+58, r1	; 0x3a
    161e:	13 ae       	std	Z+59, r1	; 0x3b
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1620:	44 ab       	std	Z+52, r20	; 0x34
    1622:	55 ab       	std	Z+53, r21	; 0x35
    1624:	66 ab       	std	Z+54, r22	; 0x36
    1626:	77 ab       	std	Z+55, r23	; 0x37
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1628:	1a 96       	adiw	r26, 0x0a	; 10
    162a:	8d 91       	ld	r24, X+
    162c:	9d 91       	ld	r25, X+
    162e:	0d 90       	ld	r0, X+
    1630:	bc 91       	ld	r27, X
    1632:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1634:	84 0f       	add	r24, r20
    1636:	95 1f       	adc	r25, r21
    1638:	a6 1f       	adc	r26, r22
    163a:	b7 1f       	adc	r27, r23
    163c:	80 ab       	std	Z+48, r24	; 0x30
    163e:	91 ab       	std	Z+49, r25	; 0x31
    1640:	a2 ab       	std	Z+50, r26	; 0x32
    1642:	b3 ab       	std	Z+51, r27	; 0x33
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1644:	97 a5       	ldd	r25, Z+47	; 0x2f
    1646:	89 2f       	mov	r24, r25
    1648:	86 95       	lsr	r24
    164a:	8f 70       	andi	r24, 0x0F	; 15
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	19 f0       	breq	.+6      	; 0x1656 <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1650:	91 7e       	andi	r25, 0xE1	; 225
    1652:	92 60       	ori	r25, 0x02	; 2
    1654:	97 a7       	std	Z+47, r25	; 0x2f
    1656:	08 95       	ret

00001658 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1658:	df 92       	push	r13
    165a:	ef 92       	push	r14
    165c:	ff 92       	push	r15
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	d8 2e       	mov	r13, r24
    1664:	7a 01       	movw	r14, r20
    1666:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    1668:	0e 94 8e 0a 	call	0x151c	; 0x151c <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    166c:	8d 2d       	mov	r24, r13
    166e:	b8 01       	movw	r22, r16
    1670:	a7 01       	movw	r20, r14
    1672:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <Timebase_UpCounter_Set_Securely>
} 
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	08 95       	ret

00001682 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    168a:	60 91 43 01 	lds	r22, 0x0143
    168e:	70 91 44 01 	lds	r23, 0x0144
    1692:	08 2f       	mov	r16, r24
    1694:	10 e0       	ldi	r17, 0x00	; 0
    1696:	85 e1       	ldi	r24, 0x15	; 21
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	08 9f       	mul	r16, r24
    169c:	f0 01       	movw	r30, r0
    169e:	09 9f       	mul	r16, r25
    16a0:	f0 0d       	add	r31, r0
    16a2:	18 9f       	mul	r17, r24
    16a4:	f0 0d       	add	r31, r0
    16a6:	11 24       	eor	r1, r1
    16a8:	e6 0f       	add	r30, r22
    16aa:	f7 1f       	adc	r31, r23
    16ac:	87 a5       	ldd	r24, Z+47	; 0x2f
    16ae:	86 95       	lsr	r24
    16b0:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	09 f0       	breq	.+2      	; 0x16b8 <Timebase_UpCounter_Update+0x36>
    16b6:	73 c0       	rjmp	.+230    	; 0x179e <Timebase_UpCounter_Update+0x11c>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16b8:	eb 01       	movw	r28, r22
    16ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    16bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    16be:	ac 85       	ldd	r26, Y+12	; 0x0c
    16c0:	bd 85       	ldd	r27, Y+13	; 0x0d

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    16c2:	20 a9       	ldd	r18, Z+48	; 0x30
    16c4:	31 a9       	ldd	r19, Z+49	; 0x31
    16c6:	42 a9       	ldd	r20, Z+50	; 0x32
    16c8:	53 a9       	ldd	r21, Z+51	; 0x33
    16ca:	28 1b       	sub	r18, r24
    16cc:	39 0b       	sbc	r19, r25
    16ce:	4a 0b       	sbc	r20, r26
    16d0:	5b 0b       	sbc	r21, r27
    16d2:	57 ff       	sbrs	r21, 7
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <Timebase_UpCounter_Update+0x5c>
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    16de:	85 e1       	ldi	r24, 0x15	; 21
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	08 9f       	mul	r16, r24
    16e4:	f0 01       	movw	r30, r0
    16e6:	09 9f       	mul	r16, r25
    16e8:	f0 0d       	add	r31, r0
    16ea:	18 9f       	mul	r17, r24
    16ec:	f0 0d       	add	r31, r0
    16ee:	11 24       	eor	r1, r1
    16f0:	e6 0f       	add	r30, r22
    16f2:	f7 1f       	adc	r31, r23
    16f4:	20 af       	std	Z+56, r18	; 0x38
    16f6:	31 af       	std	Z+57, r19	; 0x39
    16f8:	42 af       	std	Z+58, r20	; 0x3a
    16fa:	53 af       	std	Z+59, r21	; 0x3b
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    16fc:	84 a9       	ldd	r24, Z+52	; 0x34
    16fe:	95 a9       	ldd	r25, Z+53	; 0x35
    1700:	a6 a9       	ldd	r26, Z+54	; 0x36
    1702:	b7 a9       	ldd	r27, Z+55	; 0x37

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1704:	82 1b       	sub	r24, r18
    1706:	93 0b       	sbc	r25, r19
    1708:	a4 0b       	sbc	r26, r20
    170a:	b5 0b       	sbc	r27, r21
    170c:	b7 ff       	sbrs	r27, 7
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <Timebase_UpCounter_Update+0x96>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	84 af       	std	Z+60, r24	; 0x3c
    171a:	95 af       	std	Z+61, r25	; 0x3d
    171c:	a6 af       	std	Z+62, r26	; 0x3e
    171e:	b7 af       	std	Z+63, r27	; 0x3f
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1720:	85 e1       	ldi	r24, 0x15	; 21
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	08 9f       	mul	r16, r24
    1726:	e0 01       	movw	r28, r0
    1728:	09 9f       	mul	r16, r25
    172a:	d0 0d       	add	r29, r0
    172c:	18 9f       	mul	r17, r24
    172e:	d0 0d       	add	r29, r0
    1730:	11 24       	eor	r1, r1
    1732:	c6 0f       	add	r28, r22
    1734:	d7 1f       	adc	r29, r23
    1736:	88 ad       	ldd	r24, Y+56	; 0x38
    1738:	99 ad       	ldd	r25, Y+57	; 0x39
    173a:	aa ad       	ldd	r26, Y+58	; 0x3a
    173c:	bb ad       	ldd	r27, Y+59	; 0x3b
    173e:	18 16       	cp	r1, r24
    1740:	19 06       	cpc	r1, r25
    1742:	1a 06       	cpc	r1, r26
    1744:	1b 06       	cpc	r1, r27
    1746:	0c f4       	brge	.+2      	; 0x174a <Timebase_UpCounter_Update+0xc8>
    1748:	4f c0       	rjmp	.+158    	; 0x17e8 <Timebase_UpCounter_Update+0x166>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    174a:	18 aa       	std	Y+48, r1	; 0x30
    174c:	19 aa       	std	Y+49, r1	; 0x31
    174e:	1a aa       	std	Y+50, r1	; 0x32
    1750:	1b aa       	std	Y+51, r1	; 0x33

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1752:	18 ae       	std	Y+56, r1	; 0x38
    1754:	19 ae       	std	Y+57, r1	; 0x39
    1756:	1a ae       	std	Y+58, r1	; 0x3a
    1758:	1b ae       	std	Y+59, r1	; 0x3b
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    175a:	fe 01       	movw	r30, r28
    175c:	f4 96       	adiw	r30, 0x34	; 52

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    175e:	2c a9       	ldd	r18, Y+52	; 0x34
    1760:	31 81       	ldd	r19, Z+1	; 0x01
    1762:	42 81       	ldd	r20, Z+2	; 0x02
    1764:	53 81       	ldd	r21, Z+3	; 0x03
    1766:	c9 01       	movw	r24, r18
    1768:	da 01       	movw	r26, r20
    176a:	b7 ff       	sbrs	r27, 7
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <Timebase_UpCounter_Update+0xf4>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e0       	ldi	r26, 0x00	; 0
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	8c af       	std	Y+60, r24	; 0x3c
    1778:	9d af       	std	Y+61, r25	; 0x3d
    177a:	ae af       	std	Y+62, r26	; 0x3e
    177c:	bf af       	std	Y+63, r27	; 0x3f
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    177e:	85 e1       	ldi	r24, 0x15	; 21
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	08 9f       	mul	r16, r24
    1784:	f0 01       	movw	r30, r0
    1786:	09 9f       	mul	r16, r25
    1788:	f0 0d       	add	r31, r0
    178a:	18 9f       	mul	r17, r24
    178c:	f0 0d       	add	r31, r0
    178e:	11 24       	eor	r1, r1
    1790:	e6 0f       	add	r30, r22
    1792:	f7 1f       	adc	r31, r23
    1794:	87 a5       	ldd	r24, Z+47	; 0x2f
    1796:	81 7e       	andi	r24, 0xE1	; 225
    1798:	88 60       	ori	r24, 0x08	; 8
    179a:	87 a7       	std	Z+47, r24	; 0x2f
    179c:	25 c0       	rjmp	.+74     	; 0x17e8 <Timebase_UpCounter_Update+0x166>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	19 f5       	brne	.+70     	; 0x17e8 <Timebase_UpCounter_Update+0x166>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    17a2:	eb 01       	movw	r28, r22
    17a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17a8:	ac 85       	ldd	r26, Y+12	; 0x0c
    17aa:	bd 85       	ldd	r27, Y+13	; 0x0d
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    17ac:	20 ad       	ldd	r18, Z+56	; 0x38
    17ae:	31 ad       	ldd	r19, Z+57	; 0x39
    17b0:	42 ad       	ldd	r20, Z+58	; 0x3a
    17b2:	53 ad       	ldd	r21, Z+59	; 0x3b
    17b4:	82 0f       	add	r24, r18
    17b6:	93 1f       	adc	r25, r19
    17b8:	a4 1f       	adc	r26, r20
    17ba:	b5 1f       	adc	r27, r21
    17bc:	80 ab       	std	Z+48, r24	; 0x30
    17be:	91 ab       	std	Z+49, r25	; 0x31
    17c0:	a2 ab       	std	Z+50, r26	; 0x32
    17c2:	b3 ab       	std	Z+51, r27	; 0x33
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    17c4:	84 a9       	ldd	r24, Z+52	; 0x34
    17c6:	95 a9       	ldd	r25, Z+53	; 0x35
    17c8:	a6 a9       	ldd	r26, Z+54	; 0x36
    17ca:	b7 a9       	ldd	r27, Z+55	; 0x37

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    17cc:	82 1b       	sub	r24, r18
    17ce:	93 0b       	sbc	r25, r19
    17d0:	a4 0b       	sbc	r26, r20
    17d2:	b5 0b       	sbc	r27, r21
    17d4:	b7 ff       	sbrs	r27, 7
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <Timebase_UpCounter_Update+0x15e>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	84 af       	std	Z+60, r24	; 0x3c
    17e2:	95 af       	std	Z+61, r25	; 0x3d
    17e4:	a6 af       	std	Z+62, r26	; 0x3e
    17e6:	b7 af       	std	Z+63, r27	; 0x3f
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	08 95       	ret

000017f2 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	e0 91 43 01 	lds	r30, 0x0143
    17f8:	f0 91 44 01 	lds	r31, 0x0144
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	25 e1       	ldi	r18, 0x15	; 21
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	bc 01       	movw	r22, r24
    1804:	62 9f       	mul	r22, r18
    1806:	c0 01       	movw	r24, r0
    1808:	63 9f       	mul	r22, r19
    180a:	90 0d       	add	r25, r0
    180c:	72 9f       	mul	r23, r18
    180e:	90 0d       	add	r25, r0
    1810:	11 24       	eor	r1, r1
    1812:	e8 0f       	add	r30, r24
    1814:	f9 1f       	adc	r31, r25
    1816:	87 a5       	ldd	r24, Z+47	; 0x2f
    1818:	86 95       	lsr	r24
    181a:	8f 70       	andi	r24, 0x0F	; 15
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	09 f4       	brne	.+2      	; 0x1822 <Timebase_UpCounter_Expired+0x30>
    1820:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1822:	84 2f       	mov	r24, r20
    1824:	08 95       	ret

00001826 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1826:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1828:	e0 91 43 01 	lds	r30, 0x0143
    182c:	f0 91 44 01 	lds	r31, 0x0144
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	85 e1       	ldi	r24, 0x15	; 21
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	bc 01       	movw	r22, r24
    183a:	26 9f       	mul	r18, r22
    183c:	c0 01       	movw	r24, r0
    183e:	27 9f       	mul	r18, r23
    1840:	90 0d       	add	r25, r0
    1842:	36 9f       	mul	r19, r22
    1844:	90 0d       	add	r25, r0
    1846:	11 24       	eor	r1, r1
    1848:	e8 0f       	add	r30, r24
    184a:	f9 1f       	adc	r31, r25
    184c:	87 a5       	ldd	r24, Z+47	; 0x2f
    184e:	86 95       	lsr	r24
    1850:	8f 70       	andi	r24, 0x0F	; 15
    1852:	84 30       	cpi	r24, 0x04	; 4
    1854:	11 f0       	breq	.+4      	; 0x185a <Timebase_UpCounter_Expired_Event+0x34>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    185a:	84 2f       	mov	r24, r20
    185c:	0e 94 8e 0a 	call	0x151c	; 0x151c <Timebase_UpCounter_Reset>
    1860:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1862:	08 95       	ret

00001864 <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1864:	e0 91 43 01 	lds	r30, 0x0143
    1868:	f0 91 44 01 	lds	r31, 0x0144
    186c:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    186e:	25 e1       	ldi	r18, 0x15	; 21
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	dc 01       	movw	r26, r24
    1874:	a2 9f       	mul	r26, r18
    1876:	c0 01       	movw	r24, r0
    1878:	a3 9f       	mul	r26, r19
    187a:	90 0d       	add	r25, r0
    187c:	b2 9f       	mul	r27, r18
    187e:	90 0d       	add	r25, r0
    1880:	11 24       	eor	r1, r1
    1882:	e8 0f       	add	r30, r24
    1884:	f9 1f       	adc	r31, r25
    1886:	87 a5       	ldd	r24, Z+47	; 0x2f
    1888:	80 fd       	sbrc	r24, 0
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <Timebase_UpCounter_Set_Period_Value_Securely+0x4e>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    188c:	84 ad       	ldd	r24, Z+60	; 0x3c
    188e:	95 ad       	ldd	r25, Z+61	; 0x3d
    1890:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1892:	b7 ad       	ldd	r27, Z+63	; 0x3f
    1894:	84 0f       	add	r24, r20
    1896:	95 1f       	adc	r25, r21
    1898:	a6 1f       	adc	r26, r22
    189a:	b7 1f       	adc	r27, r23
    189c:	e0 5c       	subi	r30, 0xC0	; 192
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 83       	st	Z, r24
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	a2 83       	std	Z+2, r26	; 0x02
    18a6:	b3 83       	std	Z+3, r27	; 0x03
    18a8:	e0 54       	subi	r30, 0x40	; 64
    18aa:	f0 40       	sbci	r31, 0x00	; 0
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    18ac:	87 a5       	ldd	r24, Z+47	; 0x2f
    18ae:	81 60       	ori	r24, 0x01	; 1
    18b0:	87 a7       	std	Z+47, r24	; 0x2f
    18b2:	08 95       	ret

000018b4 <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    18b4:	e0 91 43 01 	lds	r30, 0x0143
    18b8:	f0 91 44 01 	lds	r31, 0x0144
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    18be:	25 e1       	ldi	r18, 0x15	; 21
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	ac 01       	movw	r20, r24
    18c4:	42 9f       	mul	r20, r18
    18c6:	c0 01       	movw	r24, r0
    18c8:	43 9f       	mul	r20, r19
    18ca:	90 0d       	add	r25, r0
    18cc:	52 9f       	mul	r21, r18
    18ce:	90 0d       	add	r25, r0
    18d0:	11 24       	eor	r1, r1
    18d2:	e8 0f       	add	r30, r24
    18d4:	f9 1f       	adc	r31, r25
    18d6:	e0 5c       	subi	r30, 0xC0	; 192
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	20 81       	ld	r18, Z
    18dc:	31 81       	ldd	r19, Z+1	; 0x01
    18de:	42 81       	ldd	r20, Z+2	; 0x02
    18e0:	53 81       	ldd	r21, Z+3	; 0x03
    18e2:	e0 54       	subi	r30, 0x40	; 64
    18e4:	f0 40       	sbci	r31, 0x00	; 0
    18e6:	84 ad       	ldd	r24, Z+60	; 0x3c
    18e8:	95 ad       	ldd	r25, Z+61	; 0x3d
    18ea:	a6 ad       	ldd	r26, Z+62	; 0x3e
    18ec:	b7 ad       	ldd	r27, Z+63	; 0x3f
    18ee:	28 1b       	sub	r18, r24
    18f0:	39 0b       	sbc	r19, r25
    18f2:	4a 0b       	sbc	r20, r26
    18f4:	5b 0b       	sbc	r21, r27
    18f6:	57 ff       	sbrs	r21, 7
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <Timebase_UpCounter_Get_Remaining_Period_Value+0x4e>
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e0       	ldi	r20, 0x00	; 0
    1900:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1902:	b9 01       	movw	r22, r18
    1904:	ca 01       	movw	r24, r20
    1906:	08 95       	ret

00001908 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    190c:	c0 91 43 01 	lds	r28, 0x0143
    1910:	d0 91 44 01 	lds	r29, 0x0144
    1914:	68 2f       	mov	r22, r24
    1916:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1918:	85 e1       	ldi	r24, 0x15	; 21
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	68 9f       	mul	r22, r24
    191e:	f0 01       	movw	r30, r0
    1920:	69 9f       	mul	r22, r25
    1922:	f0 0d       	add	r31, r0
    1924:	78 9f       	mul	r23, r24
    1926:	f0 0d       	add	r31, r0
    1928:	11 24       	eor	r1, r1
    192a:	ec 0f       	add	r30, r28
    192c:	fd 1f       	adc	r31, r29
    192e:	e0 5c       	subi	r30, 0xC0	; 192
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	20 81       	ld	r18, Z
    1934:	31 81       	ldd	r19, Z+1	; 0x01
    1936:	42 81       	ldd	r20, Z+2	; 0x02
    1938:	53 81       	ldd	r21, Z+3	; 0x03
    193a:	e0 54       	subi	r30, 0x40	; 64
    193c:	f0 40       	sbci	r31, 0x00	; 0
    193e:	84 ad       	ldd	r24, Z+60	; 0x3c
    1940:	95 ad       	ldd	r25, Z+61	; 0x3d
    1942:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1944:	b7 ad       	ldd	r27, Z+63	; 0x3f
    1946:	28 1b       	sub	r18, r24
    1948:	39 0b       	sbc	r19, r25
    194a:	4a 0b       	sbc	r20, r26
    194c:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    194e:	57 fd       	sbrc	r21, 7
    1950:	07 c0       	rjmp	.+14     	; 0x1960 <Timebase_UpCounter_Period_Value_Expired+0x58>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1952:	21 15       	cp	r18, r1
    1954:	31 05       	cpc	r19, r1
    1956:	41 05       	cpc	r20, r1
    1958:	51 05       	cpc	r21, r1
    195a:	11 f0       	breq	.+4      	; 0x1960 <Timebase_UpCounter_Period_Value_Expired+0x58>
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	12 c0       	rjmp	.+36     	; 0x1984 <Timebase_UpCounter_Period_Value_Expired+0x7c>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	85 e1       	ldi	r24, 0x15	; 21
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	ac 01       	movw	r20, r24
    1968:	64 9f       	mul	r22, r20
    196a:	c0 01       	movw	r24, r0
    196c:	65 9f       	mul	r22, r21
    196e:	90 0d       	add	r25, r0
    1970:	74 9f       	mul	r23, r20
    1972:	90 0d       	add	r25, r0
    1974:	11 24       	eor	r1, r1
    1976:	c8 0f       	add	r28, r24
    1978:	d9 1f       	adc	r29, r25
    197a:	8f a5       	ldd	r24, Y+47	; 0x2f
    197c:	80 ff       	sbrs	r24, 0
    197e:	21 e0       	ldi	r18, 0x01	; 1
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1984:	82 2f       	mov	r24, r18
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	08 95       	ret

0000198c <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    198c:	1f 93       	push	r17
    198e:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1990:	0e 94 84 0c 	call	0x1908	; 0x1908 <Timebase_UpCounter_Period_Value_Expired>
    1994:	81 30       	cpi	r24, 0x01	; 1
    1996:	11 f0       	breq	.+4      	; 0x199c <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	16 c0       	rjmp	.+44     	; 0x19c8 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    199c:	e0 91 43 01 	lds	r30, 0x0143
    19a0:	f0 91 44 01 	lds	r31, 0x0144
    19a4:	21 2f       	mov	r18, r17
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	85 e1       	ldi	r24, 0x15	; 21
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	ac 01       	movw	r20, r24
    19ae:	24 9f       	mul	r18, r20
    19b0:	c0 01       	movw	r24, r0
    19b2:	25 9f       	mul	r18, r21
    19b4:	90 0d       	add	r25, r0
    19b6:	34 9f       	mul	r19, r20
    19b8:	90 0d       	add	r25, r0
    19ba:	11 24       	eor	r1, r1
    19bc:	e8 0f       	add	r30, r24
    19be:	f9 1f       	adc	r31, r25
    19c0:	87 a5       	ldd	r24, Z+47	; 0x2f
    19c2:	8e 7f       	andi	r24, 0xFE	; 254
    19c4:	87 a7       	std	Z+47, r24	; 0x2f
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19c8:	1f 91       	pop	r17
    19ca:	08 95       	ret

000019cc <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	0e 94 41 0b 	call	0x1682	; 0x1682 <Timebase_UpCounter_Update>
  }
}
    19d2:	08 95       	ret

000019d4 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	0e 94 8e 0a 	call	0x151c	; 0x151c <Timebase_UpCounter_Reset>
  }
}
    19da:	08 95       	ret

000019dc <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    19dc:	e0 91 43 01 	lds	r30, 0x0143
    19e0:	f0 91 44 01 	lds	r31, 0x0144
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9c 01       	movw	r18, r24
    19e8:	44 e0       	ldi	r20, 0x04	; 4
    19ea:	22 0f       	add	r18, r18
    19ec:	33 1f       	adc	r19, r19
    19ee:	4a 95       	dec	r20
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <Timebase_DownCounter_SS_Get_Status+0xe>
    19f2:	28 0f       	add	r18, r24
    19f4:	39 1f       	adc	r19, r25
    19f6:	e2 0f       	add	r30, r18
    19f8:	f3 1f       	adc	r31, r19
    19fa:	ec 5b       	subi	r30, 0xBC	; 188
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1a02:	8f 70       	andi	r24, 0x0F	; 15
    1a04:	08 95       	ret

00001a06 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1a06:	e0 91 43 01 	lds	r30, 0x0143
    1a0a:	f0 91 44 01 	lds	r31, 0x0144
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c 01       	movw	r18, r24
    1a12:	54 e0       	ldi	r21, 0x04	; 4
    1a14:	22 0f       	add	r18, r18
    1a16:	33 1f       	adc	r19, r19
    1a18:	5a 95       	dec	r21
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <Timebase_DownCounter_SS_Set_Status+0xe>
    1a1c:	28 0f       	add	r18, r24
    1a1e:	39 1f       	adc	r19, r25
    1a20:	e2 0f       	add	r30, r18
    1a22:	f3 1f       	adc	r31, r19
    1a24:	ec 5b       	subi	r30, 0xBC	; 188
    1a26:	ff 4f       	sbci	r31, 0xFF	; 255
    1a28:	6f 70       	andi	r22, 0x0F	; 15
    1a2a:	66 0f       	add	r22, r22
    1a2c:	80 81       	ld	r24, Z
    1a2e:	81 7e       	andi	r24, 0xE1	; 225
    1a30:	86 2b       	or	r24, r22
    1a32:	80 83       	st	Z, r24
}
    1a34:	08 95       	ret

00001a36 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1a36:	e0 91 43 01 	lds	r30, 0x0143
    1a3a:	f0 91 44 01 	lds	r31, 0x0144
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	9c 01       	movw	r18, r24
    1a42:	64 e0       	ldi	r22, 0x04	; 4
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	6a 95       	dec	r22
    1a4a:	e1 f7       	brne	.-8      	; 0x1a44 <Timebase_DownCounter_SS_Get_Value+0xe>
    1a4c:	28 0f       	add	r18, r24
    1a4e:	39 1f       	adc	r19, r25
    1a50:	e2 0f       	add	r30, r18
    1a52:	f3 1f       	adc	r31, r19
    1a54:	e3 5b       	subi	r30, 0xB3	; 179
    1a56:	ff 4f       	sbci	r31, 0xFF	; 255
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1a5c:	82 81       	ldd	r24, Z+2	; 0x02
    1a5e:	93 81       	ldd	r25, Z+3	; 0x03
    1a60:	08 95       	ret

00001a62 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1a62:	e0 91 43 01 	lds	r30, 0x0143
    1a66:	f0 91 44 01 	lds	r31, 0x0144
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9c 01       	movw	r18, r24
    1a6e:	a4 e0       	ldi	r26, 0x04	; 4
    1a70:	22 0f       	add	r18, r18
    1a72:	33 1f       	adc	r19, r19
    1a74:	aa 95       	dec	r26
    1a76:	e1 f7       	brne	.-8      	; 0x1a70 <Timebase_DownCounter_SS_Set_Value+0xe>
    1a78:	28 0f       	add	r18, r24
    1a7a:	39 1f       	adc	r19, r25
    1a7c:	e2 0f       	add	r30, r18
    1a7e:	f3 1f       	adc	r31, r19
    1a80:	e3 5b       	subi	r30, 0xB3	; 179
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	40 83       	st	Z, r20
    1a86:	51 83       	std	Z+1, r21	; 0x01
    1a88:	62 83       	std	Z+2, r22	; 0x02
    1a8a:	73 83       	std	Z+3, r23	; 0x03
}
    1a8c:	08 95       	ret

00001a8e <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1a8e:	e0 91 43 01 	lds	r30, 0x0143
    1a92:	f0 91 44 01 	lds	r31, 0x0144
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9c 01       	movw	r18, r24
    1a9a:	b4 e0       	ldi	r27, 0x04	; 4
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	ba 95       	dec	r27
    1aa2:	e1 f7       	brne	.-8      	; 0x1a9c <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1aa4:	28 0f       	add	r18, r24
    1aa6:	39 1f       	adc	r19, r25
    1aa8:	e2 0f       	add	r30, r18
    1aaa:	f3 1f       	adc	r31, r19
    1aac:	eb 5b       	subi	r30, 0xBB	; 187
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	08 95       	ret

00001aba <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1aba:	e0 91 43 01 	lds	r30, 0x0143
    1abe:	f0 91 44 01 	lds	r31, 0x0144
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	44 e0       	ldi	r20, 0x04	; 4
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	4a 95       	dec	r20
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1ad0:	28 0f       	add	r18, r24
    1ad2:	39 1f       	adc	r19, r25
    1ad4:	e2 0f       	add	r30, r18
    1ad6:	f3 1f       	adc	r31, r19
    1ad8:	e7 5b       	subi	r30, 0xB7	; 183
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	08 95       	ret

00001ae6 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ae6:	e0 91 43 01 	lds	r30, 0x0143
    1aea:	f0 91 44 01 	lds	r31, 0x0144
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9c 01       	movw	r18, r24
    1af2:	a4 e0       	ldi	r26, 0x04	; 4
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	aa 95       	dec	r26
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1afc:	28 0f       	add	r18, r24
    1afe:	39 1f       	adc	r19, r25
    1b00:	e2 0f       	add	r30, r18
    1b02:	f3 1f       	adc	r31, r19
    1b04:	eb 5b       	subi	r30, 0xBB	; 187
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	40 83       	st	Z, r20
    1b0a:	51 83       	std	Z+1, r21	; 0x01
    1b0c:	62 83       	std	Z+2, r22	; 0x02
    1b0e:	73 83       	std	Z+3, r23	; 0x03
}
    1b10:	08 95       	ret

00001b12 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1b12:	e0 91 43 01 	lds	r30, 0x0143
    1b16:	f0 91 44 01 	lds	r31, 0x0144
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9c 01       	movw	r18, r24
    1b1e:	b4 e0       	ldi	r27, 0x04	; 4
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	ba 95       	dec	r27
    1b26:	e1 f7       	brne	.-8      	; 0x1b20 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1b28:	28 0f       	add	r18, r24
    1b2a:	39 1f       	adc	r19, r25
    1b2c:	e2 0f       	add	r30, r18
    1b2e:	f3 1f       	adc	r31, r19
    1b30:	e7 5b       	subi	r30, 0xB7	; 183
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	40 83       	st	Z, r20
    1b36:	51 83       	std	Z+1, r21	; 0x01
    1b38:	62 83       	std	Z+2, r22	; 0x02
    1b3a:	73 83       	std	Z+3, r23	; 0x03
}
    1b3c:	08 95       	ret

00001b3e <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1b3e:	e0 91 43 01 	lds	r30, 0x0143
    1b42:	f0 91 44 01 	lds	r31, 0x0144
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	9c 01       	movw	r18, r24
    1b4a:	44 e0       	ldi	r20, 0x04	; 4
    1b4c:	22 0f       	add	r18, r18
    1b4e:	33 1f       	adc	r19, r19
    1b50:	4a 95       	dec	r20
    1b52:	e1 f7       	brne	.-8      	; 0x1b4c <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1b54:	28 0f       	add	r18, r24
    1b56:	39 1f       	adc	r19, r25
    1b58:	e2 0f       	add	r30, r18
    1b5a:	f3 1f       	adc	r31, r19
    1b5c:	ef 5a       	subi	r30, 0xAF	; 175
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	08 95       	ret

00001b6a <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1b6a:	e0 91 43 01 	lds	r30, 0x0143
    1b6e:	f0 91 44 01 	lds	r31, 0x0144
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1b76:	77 ff       	sbrs	r23, 7
    1b78:	11 c0       	rjmp	.+34     	; 0x1b9c <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	b4 e0       	ldi	r27, 0x04	; 4
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	ba 95       	dec	r27
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1b86:	82 0f       	add	r24, r18
    1b88:	93 1f       	adc	r25, r19
    1b8a:	e8 0f       	add	r30, r24
    1b8c:	f9 1f       	adc	r31, r25
    1b8e:	ef 5a       	subi	r30, 0xAF	; 175
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	10 82       	st	Z, r1
    1b94:	11 82       	std	Z+1, r1	; 0x01
    1b96:	12 82       	std	Z+2, r1	; 0x02
    1b98:	13 82       	std	Z+3, r1	; 0x03
    1b9a:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	a4 e0       	ldi	r26, 0x04	; 4
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	aa 95       	dec	r26
    1ba6:	e1 f7       	brne	.-8      	; 0x1ba0 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1ba8:	82 0f       	add	r24, r18
    1baa:	93 1f       	adc	r25, r19
    1bac:	e8 0f       	add	r30, r24
    1bae:	f9 1f       	adc	r31, r25
    1bb0:	ef 5a       	subi	r30, 0xAF	; 175
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	40 83       	st	Z, r20
    1bb6:	51 83       	std	Z+1, r21	; 0x01
    1bb8:	62 83       	std	Z+2, r22	; 0x02
    1bba:	73 83       	std	Z+3, r23	; 0x03
    1bbc:	08 95       	ret

00001bbe <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1bbe:	e0 91 43 01 	lds	r30, 0x0143
    1bc2:	f0 91 44 01 	lds	r31, 0x0144
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 01       	movw	r18, r24
    1bca:	44 e0       	ldi	r20, 0x04	; 4
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	4a 95       	dec	r20
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1bd4:	28 0f       	add	r18, r24
    1bd6:	39 1f       	adc	r19, r25
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	ec 5b       	subi	r30, 0xBC	; 188
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1be2:	81 70       	andi	r24, 0x01	; 1
    1be4:	08 95       	ret

00001be6 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1be6:	e0 91 43 01 	lds	r30, 0x0143
    1bea:	f0 91 44 01 	lds	r31, 0x0144
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9c 01       	movw	r18, r24
    1bf2:	54 e0       	ldi	r21, 0x04	; 4
    1bf4:	22 0f       	add	r18, r18
    1bf6:	33 1f       	adc	r19, r19
    1bf8:	5a 95       	dec	r21
    1bfa:	e1 f7       	brne	.-8      	; 0x1bf4 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1bfc:	28 0f       	add	r18, r24
    1bfe:	39 1f       	adc	r19, r25
    1c00:	e2 0f       	add	r30, r18
    1c02:	f3 1f       	adc	r31, r19
    1c04:	ec 5b       	subi	r30, 0xBC	; 188
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	80 81       	ld	r24, Z
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	80 83       	st	Z, r24
}
    1c0e:	08 95       	ret

00001c10 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1c10:	e0 91 43 01 	lds	r30, 0x0143
    1c14:	f0 91 44 01 	lds	r31, 0x0144
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	64 e0       	ldi	r22, 0x04	; 4
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	6a 95       	dec	r22
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1c26:	28 0f       	add	r18, r24
    1c28:	39 1f       	adc	r19, r25
    1c2a:	e2 0f       	add	r30, r18
    1c2c:	f3 1f       	adc	r31, r19
    1c2e:	ec 5b       	subi	r30, 0xBC	; 188
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	8e 7f       	andi	r24, 0xFE	; 254
    1c36:	80 83       	st	Z, r24
}
    1c38:	08 95       	ret

00001c3a <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1c3a:	e0 91 43 01 	lds	r30, 0x0143
    1c3e:	f0 91 44 01 	lds	r31, 0x0144
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 01       	movw	r18, r24
    1c46:	74 e0       	ldi	r23, 0x04	; 4
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	7a 95       	dec	r23
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <Timebase_DownCounter_SS_Reset+0xe>
    1c50:	28 0f       	add	r18, r24
    1c52:	39 1f       	adc	r19, r25
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	e7 5b       	subi	r30, 0xB7	; 183
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	10 82       	st	Z, r1
    1c5e:	11 82       	std	Z+1, r1	; 0x01
    1c60:	12 82       	std	Z+2, r1	; 0x02
    1c62:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1c64:	12 92       	st	-Z, r1
    1c66:	12 92       	st	-Z, r1
    1c68:	12 92       	st	-Z, r1
    1c6a:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c6c:	38 96       	adiw	r30, 0x08	; 8
    1c6e:	10 82       	st	Z, r1
    1c70:	11 82       	std	Z+1, r1	; 0x01
    1c72:	12 82       	std	Z+2, r1	; 0x02
    1c74:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c76:	39 97       	sbiw	r30, 0x09	; 9
    1c78:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1c7a:	80 7e       	andi	r24, 0xE0	; 224
    1c7c:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1c7e:	08 95       	ret

00001c80 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1c80:	e0 91 43 01 	lds	r30, 0x0143
    1c84:	f0 91 44 01 	lds	r31, 0x0144
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	a4 e0       	ldi	r26, 0x04	; 4
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	aa 95       	dec	r26
    1c94:	e1 f7       	brne	.-8      	; 0x1c8e <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1c96:	28 0f       	add	r18, r24
    1c98:	39 1f       	adc	r19, r25
    1c9a:	e2 0f       	add	r30, r18
    1c9c:	f3 1f       	adc	r31, r19
    1c9e:	e7 5b       	subi	r30, 0xB7	; 183
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	10 82       	st	Z, r1
    1ca4:	11 82       	std	Z+1, r1	; 0x01
    1ca6:	12 82       	std	Z+2, r1	; 0x02
    1ca8:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1caa:	12 92       	st	-Z, r1
    1cac:	12 92       	st	-Z, r1
    1cae:	12 92       	st	-Z, r1
    1cb0:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1cb2:	38 96       	adiw	r30, 0x08	; 8
    1cb4:	10 82       	st	Z, r1
    1cb6:	11 82       	std	Z+1, r1	; 0x01
    1cb8:	12 82       	std	Z+2, r1	; 0x02
    1cba:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1cbc:	39 97       	sbiw	r30, 0x09	; 9
    1cbe:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1cc0:	80 7e       	andi	r24, 0xE0	; 224
    1cc2:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1cc4:	08 95       	ret

00001cc6 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1cc6:	e0 91 43 01 	lds	r30, 0x0143
    1cca:	f0 91 44 01 	lds	r31, 0x0144
    1cce:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	b4 e0       	ldi	r27, 0x04	; 4
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	ba 95       	dec	r27
    1cda:	e1 f7       	brne	.-8      	; 0x1cd4 <Timebase_DownCounter_SS_Start+0xe>
    1cdc:	28 0f       	add	r18, r24
    1cde:	39 1f       	adc	r19, r25
    1ce0:	e2 0f       	add	r30, r18
    1ce2:	f3 1f       	adc	r31, r19
    1ce4:	ec 5b       	subi	r30, 0xBC	; 188
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	90 81       	ld	r25, Z
    1cea:	89 2f       	mov	r24, r25
    1cec:	86 95       	lsr	r24
    1cee:	8f 70       	andi	r24, 0x0F	; 15
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1cf4:	91 7e       	andi	r25, 0xE1	; 225
    1cf6:	92 60       	ori	r25, 0x02	; 2
    1cf8:	90 83       	st	Z, r25
    1cfa:	08 95       	ret

00001cfc <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1cfc:	e0 91 43 01 	lds	r30, 0x0143
    1d00:	f0 91 44 01 	lds	r31, 0x0144
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1d06:	9c 01       	movw	r18, r24
    1d08:	44 e0       	ldi	r20, 0x04	; 4
    1d0a:	22 0f       	add	r18, r18
    1d0c:	33 1f       	adc	r19, r19
    1d0e:	4a 95       	dec	r20
    1d10:	e1 f7       	brne	.-8      	; 0x1d0a <Timebase_DownCounter_SS_Stop+0xe>
    1d12:	28 0f       	add	r18, r24
    1d14:	39 1f       	adc	r19, r25
    1d16:	e2 0f       	add	r30, r18
    1d18:	f3 1f       	adc	r31, r19
    1d1a:	ec 5b       	subi	r30, 0xBC	; 188
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	90 81       	ld	r25, Z
    1d20:	89 2f       	mov	r24, r25
    1d22:	86 95       	lsr	r24
    1d24:	8f 70       	andi	r24, 0x0F	; 15
    1d26:	82 30       	cpi	r24, 0x02	; 2
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1d2a:	91 7e       	andi	r25, 0xE1	; 225
    1d2c:	94 60       	ori	r25, 0x04	; 4
    1d2e:	90 83       	st	Z, r25
    1d30:	08 95       	ret

00001d32 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1d32:	2f 92       	push	r2
    1d34:	3f 92       	push	r3
    1d36:	4f 92       	push	r4
    1d38:	5f 92       	push	r5
    1d3a:	6f 92       	push	r6
    1d3c:	7f 92       	push	r7
    1d3e:	8f 92       	push	r8
    1d40:	9f 92       	push	r9
    1d42:	af 92       	push	r10
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <Timebase_DownCounter_SS_Set_Securely+0x28>
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	4a 01       	movw	r8, r20
    1d60:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1d62:	20 91 43 01 	lds	r18, 0x0143
    1d66:	30 91 44 01 	lds	r19, 0x0144
    1d6a:	3c 83       	std	Y+4, r19	; 0x04
    1d6c:	2b 83       	std	Y+3, r18	; 0x03
    1d6e:	a8 2f       	mov	r26, r24
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	ba 83       	std	Y+2, r27	; 0x02
    1d74:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1d76:	fd 01       	movw	r30, r26
    1d78:	64 e0       	ldi	r22, 0x04	; 4
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	6a 95       	dec	r22
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <Timebase_DownCounter_SS_Set_Securely+0x48>
    1d82:	ea 0f       	add	r30, r26
    1d84:	fb 1f       	adc	r31, r27
    1d86:	e2 0f       	add	r30, r18
    1d88:	f3 1f       	adc	r31, r19
    1d8a:	ec 5b       	subi	r30, 0xBC	; 188
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	e4 54       	subi	r30, 0x44	; 68
    1d92:	f0 40       	sbci	r31, 0x00	; 0
    1d94:	86 95       	lsr	r24
    1d96:	8f 70       	andi	r24, 0x0F	; 15
    1d98:	09 f0       	breq	.+2      	; 0x1d9c <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1d9a:	72 c0       	rjmp	.+228    	; 0x1e80 <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1d9c:	e3 5b       	subi	r30, 0xB3	; 179
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	80 82       	st	Z, r8
    1da2:	91 82       	std	Z+1, r9	; 0x01
    1da4:	a2 82       	std	Z+2, r10	; 0x02
    1da6:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1da8:	f9 01       	movw	r30, r18
    1daa:	c0 84       	ldd	r12, Z+8	; 0x08
    1dac:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1dae:	22 84       	ldd	r2, Z+10	; 0x0a
    1db0:	33 84       	ldd	r3, Z+11	; 0x0b
    1db2:	44 84       	ldd	r4, Z+12	; 0x0c
    1db4:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1db6:	21 81       	ldd	r18, Z+1	; 0x01
    1db8:	32 81       	ldd	r19, Z+2	; 0x02
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
    1dbe:	c5 01       	movw	r24, r10
    1dc0:	b4 01       	movw	r22, r8
    1dc2:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
    1dc6:	7b 01       	movw	r14, r22
    1dc8:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1dca:	ab 81       	ldd	r26, Y+3	; 0x03
    1dcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1dce:	11 96       	adiw	r26, 0x01	; 1
    1dd0:	2d 91       	ld	r18, X+
    1dd2:	3c 91       	ld	r19, X
    1dd4:	12 97       	sbiw	r26, 0x02	; 2
    1dd6:	40 e0       	ldi	r20, 0x00	; 0
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	c5 01       	movw	r24, r10
    1ddc:	b4 01       	movw	r22, r8
    1dde:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
    1de2:	c9 01       	movw	r24, r18
    1de4:	da 01       	movw	r26, r20
    1de6:	3c 01       	movw	r6, r24
    1de8:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1dea:	56 01       	movw	r10, r12
    1dec:	cc 24       	eor	r12, r12
    1dee:	dd 24       	eor	r13, r13
    1df0:	ae 0c       	add	r10, r14
    1df2:	bf 1c       	adc	r11, r15
    1df4:	c0 1e       	adc	r12, r16
    1df6:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1df8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfc:	81 81       	ldd	r24, Z+1	; 0x01
    1dfe:	92 81       	ldd	r25, Z+2	; 0x02
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	a8 16       	cp	r10, r24
    1e06:	b9 06       	cpc	r11, r25
    1e08:	ca 06       	cpc	r12, r26
    1e0a:	db 06       	cpc	r13, r27
    1e0c:	94 f0       	brlt	.+36     	; 0x1e32 <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    1e0e:	08 94       	sec
    1e10:	61 1c       	adc	r6, r1
    1e12:	71 1c       	adc	r7, r1
    1e14:	81 1c       	adc	r8, r1
    1e16:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1e18:	21 81       	ldd	r18, Z+1	; 0x01
    1e1a:	32 81       	ldd	r19, Z+2	; 0x02
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	50 e0       	ldi	r21, 0x00	; 0
    1e20:	c6 01       	movw	r24, r12
    1e22:	b5 01       	movw	r22, r10
    1e24:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
    1e28:	ac 01       	movw	r20, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	da 01       	movw	r26, r20
    1e2e:	5c 01       	movw	r10, r24
    1e30:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e32:	e9 81       	ldd	r30, Y+1	; 0x01
    1e34:	fa 81       	ldd	r31, Y+2	; 0x02
    1e36:	54 e0       	ldi	r21, 0x04	; 4
    1e38:	ee 0f       	add	r30, r30
    1e3a:	ff 1f       	adc	r31, r31
    1e3c:	5a 95       	dec	r21
    1e3e:	e1 f7       	brne	.-8      	; 0x1e38 <Timebase_DownCounter_SS_Set_Securely+0x106>
    1e40:	29 81       	ldd	r18, Y+1	; 0x01
    1e42:	3a 81       	ldd	r19, Y+2	; 0x02
    1e44:	e2 0f       	add	r30, r18
    1e46:	f3 1f       	adc	r31, r19
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	e8 0f       	add	r30, r24
    1e4e:	f9 1f       	adc	r31, r25
    1e50:	eb 5b       	subi	r30, 0xBB	; 187
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	26 0c       	add	r2, r6
    1e56:	37 1c       	adc	r3, r7
    1e58:	48 1c       	adc	r4, r8
    1e5a:	59 1c       	adc	r5, r9
    1e5c:	21 92       	st	Z+, r2
    1e5e:	31 92       	st	Z+, r3
    1e60:	41 92       	st	Z+, r4
    1e62:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e64:	a0 82       	st	Z, r10
    1e66:	b1 82       	std	Z+1, r11	; 0x01
    1e68:	c2 82       	std	Z+2, r12	; 0x02
    1e6a:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1e6c:	35 97       	sbiw	r30, 0x05	; 5
    1e6e:	90 81       	ld	r25, Z
    1e70:	89 2f       	mov	r24, r25
    1e72:	86 95       	lsr	r24
    1e74:	8f 70       	andi	r24, 0x0F	; 15
    1e76:	81 30       	cpi	r24, 0x01	; 1
    1e78:	19 f0       	breq	.+6      	; 0x1e80 <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e7a:	91 7e       	andi	r25, 0xE1	; 225
    1e7c:	92 60       	ori	r25, 0x02	; 2
    1e7e:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1e80:	0f 90       	pop	r0
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	1f 91       	pop	r17
    1e8e:	0f 91       	pop	r16
    1e90:	ff 90       	pop	r15
    1e92:	ef 90       	pop	r14
    1e94:	df 90       	pop	r13
    1e96:	cf 90       	pop	r12
    1e98:	bf 90       	pop	r11
    1e9a:	af 90       	pop	r10
    1e9c:	9f 90       	pop	r9
    1e9e:	8f 90       	pop	r8
    1ea0:	7f 90       	pop	r7
    1ea2:	6f 90       	pop	r6
    1ea4:	5f 90       	pop	r5
    1ea6:	4f 90       	pop	r4
    1ea8:	3f 90       	pop	r3
    1eaa:	2f 90       	pop	r2
    1eac:	08 95       	ret

00001eae <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1eae:	e0 91 43 01 	lds	r30, 0x0143
    1eb2:	f0 91 44 01 	lds	r31, 0x0144
    1eb6:	a8 2f       	mov	r26, r24
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	9d 01       	movw	r18, r26
    1ebc:	94 e0       	ldi	r25, 0x04	; 4
    1ebe:	22 0f       	add	r18, r18
    1ec0:	33 1f       	adc	r19, r19
    1ec2:	9a 95       	dec	r25
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    1ec6:	2a 0f       	add	r18, r26
    1ec8:	3b 1f       	adc	r19, r27
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	e7 5b       	subi	r30, 0xB7	; 183
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	10 82       	st	Z, r1
    1ed4:	11 82       	std	Z+1, r1	; 0x01
    1ed6:	12 82       	std	Z+2, r1	; 0x02
    1ed8:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1eda:	12 92       	st	-Z, r1
    1edc:	12 92       	st	-Z, r1
    1ede:	12 92       	st	-Z, r1
    1ee0:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ee2:	38 96       	adiw	r30, 0x08	; 8
    1ee4:	10 82       	st	Z, r1
    1ee6:	11 82       	std	Z+1, r1	; 0x01
    1ee8:	12 82       	std	Z+2, r1	; 0x02
    1eea:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1eec:	39 97       	sbiw	r30, 0x09	; 9
    1eee:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ef0:	90 7e       	andi	r25, 0xE0	; 224
    1ef2:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1ef4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <Timebase_DownCounter_SS_Set_Securely>
} 
    1ef8:	08 95       	ret

00001efa <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1efa:	2f 92       	push	r2
    1efc:	3f 92       	push	r3
    1efe:	4f 92       	push	r4
    1f00:	5f 92       	push	r5
    1f02:	6f 92       	push	r6
    1f04:	7f 92       	push	r7
    1f06:	8f 92       	push	r8
    1f08:	9f 92       	push	r9
    1f0a:	af 92       	push	r10
    1f0c:	bf 92       	push	r11
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f1e:	e0 91 43 01 	lds	r30, 0x0143
    1f22:	f0 91 44 01 	lds	r31, 0x0144
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	ec 01       	movw	r28, r24
    1f2a:	44 e0       	ldi	r20, 0x04	; 4
    1f2c:	cc 0f       	add	r28, r28
    1f2e:	dd 1f       	adc	r29, r29
    1f30:	4a 95       	dec	r20
    1f32:	e1 f7       	brne	.-8      	; 0x1f2c <Timebase_DownCounter_SS_Update+0x32>
    1f34:	c8 0f       	add	r28, r24
    1f36:	d9 1f       	adc	r29, r25
    1f38:	ce 0f       	add	r28, r30
    1f3a:	df 1f       	adc	r29, r31
    1f3c:	34 e4       	ldi	r19, 0x44	; 68
    1f3e:	c3 2e       	mov	r12, r19
    1f40:	d1 2c       	mov	r13, r1
    1f42:	cc 0e       	add	r12, r28
    1f44:	dd 1e       	adc	r13, r29
    1f46:	d6 01       	movw	r26, r12
    1f48:	8c 91       	ld	r24, X
    1f4a:	86 95       	lsr	r24
    1f4c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1f4e:	81 30       	cpi	r24, 0x01	; 1
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <Timebase_DownCounter_SS_Update+0x5a>
    1f52:	4e c0       	rjmp	.+156    	; 0x1ff0 <Timebase_DownCounter_SS_Update+0xf6>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1f54:	e0 84       	ldd	r14, Z+8	; 0x08
    1f56:	f1 84       	ldd	r15, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    1f58:	00 e0       	ldi	r16, 0x00	; 0
    1f5a:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1f5c:	62 84       	ldd	r6, Z+10	; 0x0a
    1f5e:	73 84       	ldd	r7, Z+11	; 0x0b
    1f60:	84 84       	ldd	r8, Z+12	; 0x0c
    1f62:	95 84       	ldd	r9, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    1f64:	25 e4       	ldi	r18, 0x45	; 69
    1f66:	a2 2e       	mov	r10, r18
    1f68:	b1 2c       	mov	r11, r1
    1f6a:	ac 0e       	add	r10, r28
    1f6c:	bd 1e       	adc	r11, r29
    1f6e:	d5 01       	movw	r26, r10
    1f70:	2d 91       	ld	r18, X+
    1f72:	3d 91       	ld	r19, X+
    1f74:	4d 91       	ld	r20, X+
    1f76:	5c 91       	ld	r21, X
    1f78:	26 19       	sub	r18, r6
    1f7a:	37 09       	sbc	r19, r7
    1f7c:	48 09       	sbc	r20, r8
    1f7e:	59 09       	sbc	r21, r9
	temp_s *= Timebase->Config.UpdateRate;
    1f80:	61 81       	ldd	r22, Z+1	; 0x01
    1f82:	72 81       	ldd	r23, Z+2	; 0x02

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	0e 94 18 18 	call	0x3030	; 0x3030 <__mulsi3>
    1f8c:	6e 19       	sub	r22, r14
    1f8e:	7f 09       	sbc	r23, r15
    1f90:	80 0b       	sbc	r24, r16
    1f92:	91 0b       	sbc	r25, r17
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
    1f94:	de 01       	movw	r26, r28
    1f96:	a7 5b       	subi	r26, 0xB7	; 183
    1f98:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9a:	2d 91       	ld	r18, X+
    1f9c:	3d 91       	ld	r19, X+
    1f9e:	4d 91       	ld	r20, X+
    1fa0:	5c 91       	ld	r21, X
    1fa2:	13 97       	sbiw	r26, 0x03	; 3
    1fa4:	62 0f       	add	r22, r18
    1fa6:	73 1f       	adc	r23, r19
    1fa8:	84 1f       	adc	r24, r20
    1faa:	95 1f       	adc	r25, r21
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1fac:	fe 01       	movw	r30, r28
    1fae:	e3 5b       	subi	r30, 0xB3	; 179
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	60 83       	st	Z, r22
    1fb4:	71 83       	std	Z+1, r23	; 0x01
    1fb6:	82 83       	std	Z+2, r24	; 0x02
    1fb8:	93 83       	std	Z+3, r25	; 0x03
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    1fba:	16 16       	cp	r1, r22
    1fbc:	17 06       	cpc	r1, r23
    1fbe:	18 06       	cpc	r1, r24
    1fc0:	19 06       	cpc	r1, r25
    1fc2:	0c f4       	brge	.+2      	; 0x1fc6 <Timebase_DownCounter_SS_Update+0xcc>
    1fc4:	48 c0       	rjmp	.+144    	; 0x2056 <Timebase_DownCounter_SS_Update+0x15c>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1fc6:	1d 92       	st	X+, r1
    1fc8:	1d 92       	st	X+, r1
    1fca:	1d 92       	st	X+, r1
    1fcc:	1c 92       	st	X, r1
    1fce:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fd0:	d5 01       	movw	r26, r10
    1fd2:	1d 92       	st	X+, r1
    1fd4:	1d 92       	st	X+, r1
    1fd6:	1d 92       	st	X+, r1
    1fd8:	1c 92       	st	X, r1
    1fda:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1fdc:	10 82       	st	Z, r1
    1fde:	11 82       	std	Z+1, r1	; 0x01
    1fe0:	12 82       	std	Z+2, r1	; 0x02
    1fe2:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1fe4:	f6 01       	movw	r30, r12
    1fe6:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1fe8:	80 7e       	andi	r24, 0xE0	; 224
    1fea:	88 60       	ori	r24, 0x08	; 8
    1fec:	80 83       	st	Z, r24
    1fee:	33 c0       	rjmp	.+102    	; 0x2056 <Timebase_DownCounter_SS_Update+0x15c>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	89 f5       	brne	.+98     	; 0x2056 <Timebase_DownCounter_SS_Update+0x15c>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1ff4:	60 84       	ldd	r6, Z+8	; 0x08
    1ff6:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1ff8:	e2 84       	ldd	r14, Z+10	; 0x0a
    1ffa:	f3 84       	ldd	r15, Z+11	; 0x0b
    1ffc:	04 85       	ldd	r16, Z+12	; 0x0c
    1ffe:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2000:	c3 5b       	subi	r28, 0xB3	; 179
    2002:	df 4f       	sbci	r29, 0xFF	; 255
    2004:	28 80       	ld	r2, Y
    2006:	39 80       	ldd	r3, Y+1	; 0x01
    2008:	4a 80       	ldd	r4, Y+2	; 0x02
    200a:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    200c:	21 81       	ldd	r18, Z+1	; 0x01
    200e:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    2010:	a1 80       	ldd	r10, Z+1	; 0x01
    2012:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2014:	28 97       	sbiw	r28, 0x08	; 8
    2016:	40 e0       	ldi	r20, 0x00	; 0
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	c2 01       	movw	r24, r4
    201c:	b1 01       	movw	r22, r2
    201e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
    2022:	e2 0e       	add	r14, r18
    2024:	f3 1e       	adc	r15, r19
    2026:	04 1f       	adc	r16, r20
    2028:	15 1f       	adc	r17, r21
    202a:	e9 92       	st	Y+, r14
    202c:	f9 92       	st	Y+, r15
    202e:	09 93       	st	Y+, r16
    2030:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2032:	cc 24       	eor	r12, r12
    2034:	dd 24       	eor	r13, r13
    2036:	c2 01       	movw	r24, r4
    2038:	b1 01       	movw	r22, r2
    203a:	a6 01       	movw	r20, r12
    203c:	95 01       	movw	r18, r10
    203e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <__divmodsi4>
    2042:	88 24       	eor	r8, r8
    2044:	99 24       	eor	r9, r9
    2046:	66 0e       	add	r6, r22
    2048:	77 1e       	adc	r7, r23
    204a:	88 1e       	adc	r8, r24
    204c:	99 1e       	adc	r9, r25
    204e:	68 82       	st	Y, r6
    2050:	79 82       	std	Y+1, r7	; 0x01
    2052:	8a 82       	std	Y+2, r8	; 0x02
    2054:	9b 82       	std	Y+3, r9	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	df 90       	pop	r13
    2064:	cf 90       	pop	r12
    2066:	bf 90       	pop	r11
    2068:	af 90       	pop	r10
    206a:	9f 90       	pop	r9
    206c:	8f 90       	pop	r8
    206e:	7f 90       	pop	r7
    2070:	6f 90       	pop	r6
    2072:	5f 90       	pop	r5
    2074:	4f 90       	pop	r4
    2076:	3f 90       	pop	r3
    2078:	2f 90       	pop	r2
    207a:	08 95       	ret

0000207c <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	e0 91 43 01 	lds	r30, 0x0143
    2082:	f0 91 44 01 	lds	r31, 0x0144
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 01       	movw	r18, r24
    208a:	54 e0       	ldi	r21, 0x04	; 4
    208c:	22 0f       	add	r18, r18
    208e:	33 1f       	adc	r19, r19
    2090:	5a 95       	dec	r21
    2092:	e1 f7       	brne	.-8      	; 0x208c <Timebase_DownCounter_SS_Expired+0x10>
    2094:	28 0f       	add	r18, r24
    2096:	39 1f       	adc	r19, r25
    2098:	e2 0f       	add	r30, r18
    209a:	f3 1f       	adc	r31, r19
    209c:	ec 5b       	subi	r30, 0xBC	; 188
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	86 95       	lsr	r24
    20a4:	8f 70       	andi	r24, 0x0F	; 15
    20a6:	84 30       	cpi	r24, 0x04	; 4
    20a8:	09 f4       	brne	.+2      	; 0x20ac <Timebase_DownCounter_SS_Expired+0x30>
    20aa:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    20ac:	84 2f       	mov	r24, r20
    20ae:	08 95       	ret

000020b0 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    20b0:	e0 91 43 01 	lds	r30, 0x0143
    20b4:	f0 91 44 01 	lds	r31, 0x0144
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    20ba:	9c 01       	movw	r18, r24
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	22 0f       	add	r18, r18
    20c0:	33 1f       	adc	r19, r19
    20c2:	6a 95       	dec	r22
    20c4:	e1 f7       	brne	.-8      	; 0x20be <Timebase_DownCounter_SS_Expired_Event+0xe>
    20c6:	28 0f       	add	r18, r24
    20c8:	39 1f       	adc	r19, r25
    20ca:	e2 0f       	add	r30, r18
    20cc:	f3 1f       	adc	r31, r19
    20ce:	df 01       	movw	r26, r30
    20d0:	ac 5b       	subi	r26, 0xBC	; 188
    20d2:	bf 4f       	sbci	r27, 0xFF	; 255
    20d4:	8c 91       	ld	r24, X
    20d6:	86 95       	lsr	r24
    20d8:	8f 70       	andi	r24, 0x0F	; 15
    20da:	84 30       	cpi	r24, 0x04	; 4
    20dc:	11 f0       	breq	.+4      	; 0x20e2 <Timebase_DownCounter_SS_Expired_Event+0x32>
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    20e2:	e7 5b       	subi	r30, 0xB7	; 183
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	10 82       	st	Z, r1
    20e8:	11 82       	std	Z+1, r1	; 0x01
    20ea:	12 82       	std	Z+2, r1	; 0x02
    20ec:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    20ee:	12 92       	st	-Z, r1
    20f0:	12 92       	st	-Z, r1
    20f2:	12 92       	st	-Z, r1
    20f4:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    20f6:	38 96       	adiw	r30, 0x08	; 8
    20f8:	10 82       	st	Z, r1
    20fa:	11 82       	std	Z+1, r1	; 0x01
    20fc:	12 82       	std	Z+2, r1	; 0x02
    20fe:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2100:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2102:	80 7e       	andi	r24, 0xE0	; 224
    2104:	8c 93       	st	X, r24
    2106:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2108:	08 95       	ret

0000210a <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    210e:	c0 91 43 01 	lds	r28, 0x0143
    2112:	d0 91 44 01 	lds	r29, 0x0144
    2116:	28 2f       	mov	r18, r24
    2118:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    211a:	f9 01       	movw	r30, r18
    211c:	a4 e0       	ldi	r26, 0x04	; 4
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	aa 95       	dec	r26
    2124:	e1 f7       	brne	.-8      	; 0x211e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2126:	e2 0f       	add	r30, r18
    2128:	f3 1f       	adc	r31, r19
    212a:	ec 0f       	add	r30, r28
    212c:	fd 1f       	adc	r31, r29
    212e:	ec 5b       	subi	r30, 0xBC	; 188
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	80 81       	ld	r24, Z
    2134:	e4 54       	subi	r30, 0x44	; 68
    2136:	f0 40       	sbci	r31, 0x00	; 0
    2138:	80 fd       	sbrc	r24, 0
    213a:	24 c0       	rjmp	.+72     	; 0x2184 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    213c:	e3 5b       	subi	r30, 0xB3	; 179
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	81 91       	ld	r24, Z+
    2142:	91 91       	ld	r25, Z+
    2144:	a1 91       	ld	r26, Z+
    2146:	b1 91       	ld	r27, Z+
    2148:	84 1b       	sub	r24, r20
    214a:	95 0b       	sbc	r25, r21
    214c:	a6 0b       	sbc	r26, r22
    214e:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2150:	b7 ff       	sbrs	r27, 7
    2152:	05 c0       	rjmp	.+10     	; 0x215e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2154:	10 82       	st	Z, r1
    2156:	11 82       	std	Z+1, r1	; 0x01
    2158:	12 82       	std	Z+2, r1	; 0x02
    215a:	13 82       	std	Z+3, r1	; 0x03
    215c:	04 c0       	rjmp	.+8      	; 0x2166 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    215e:	80 83       	st	Z, r24
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	a2 83       	std	Z+2, r26	; 0x02
    2164:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    2166:	f9 01       	movw	r30, r18
    2168:	74 e0       	ldi	r23, 0x04	; 4
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	7a 95       	dec	r23
    2170:	e1 f7       	brne	.-8      	; 0x216a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	ec 0f       	add	r30, r28
    2178:	fd 1f       	adc	r31, r29
    217a:	ec 5b       	subi	r30, 0xBC	; 188
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	80 81       	ld	r24, Z
    2180:	81 60       	ori	r24, 0x01	; 1
    2182:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    218a:	e0 91 43 01 	lds	r30, 0x0143
    218e:	f0 91 44 01 	lds	r31, 0x0144
    2192:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2194:	9c 01       	movw	r18, r24
    2196:	b4 e0       	ldi	r27, 0x04	; 4
    2198:	22 0f       	add	r18, r18
    219a:	33 1f       	adc	r19, r19
    219c:	ba 95       	dec	r27
    219e:	e1 f7       	brne	.-8      	; 0x2198 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    21a0:	28 0f       	add	r18, r24
    21a2:	39 1f       	adc	r19, r25
    21a4:	e2 0f       	add	r30, r18
    21a6:	f3 1f       	adc	r31, r19
    21a8:	df 01       	movw	r26, r30
    21aa:	af 5a       	subi	r26, 0xAF	; 175
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	e3 5b       	subi	r30, 0xB3	; 179
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	20 81       	ld	r18, Z
    21b4:	31 81       	ldd	r19, Z+1	; 0x01
    21b6:	42 81       	ldd	r20, Z+2	; 0x02
    21b8:	53 81       	ldd	r21, Z+3	; 0x03
    21ba:	8d 91       	ld	r24, X+
    21bc:	9d 91       	ld	r25, X+
    21be:	0d 90       	ld	r0, X+
    21c0:	bc 91       	ld	r27, X
    21c2:	a0 2d       	mov	r26, r0
    21c4:	28 1b       	sub	r18, r24
    21c6:	39 0b       	sbc	r19, r25
    21c8:	4a 0b       	sbc	r20, r26
    21ca:	5b 0b       	sbc	r21, r27
    21cc:	57 ff       	sbrs	r21, 7
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    21d8:	b9 01       	movw	r22, r18
    21da:	ca 01       	movw	r24, r20
    21dc:	08 95       	ret

000021de <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    21e2:	c0 91 43 01 	lds	r28, 0x0143
    21e6:	d0 91 44 01 	lds	r29, 0x0144
    21ea:	68 2f       	mov	r22, r24
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    21ee:	fb 01       	movw	r30, r22
    21f0:	44 e0       	ldi	r20, 0x04	; 4
    21f2:	ee 0f       	add	r30, r30
    21f4:	ff 1f       	adc	r31, r31
    21f6:	4a 95       	dec	r20
    21f8:	e1 f7       	brne	.-8      	; 0x21f2 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    21fa:	e6 0f       	add	r30, r22
    21fc:	f7 1f       	adc	r31, r23
    21fe:	ec 0f       	add	r30, r28
    2200:	fd 1f       	adc	r31, r29
    2202:	df 01       	movw	r26, r30
    2204:	af 5a       	subi	r26, 0xAF	; 175
    2206:	bf 4f       	sbci	r27, 0xFF	; 255
    2208:	e3 5b       	subi	r30, 0xB3	; 179
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	20 81       	ld	r18, Z
    220e:	31 81       	ldd	r19, Z+1	; 0x01
    2210:	42 81       	ldd	r20, Z+2	; 0x02
    2212:	53 81       	ldd	r21, Z+3	; 0x03
    2214:	8d 91       	ld	r24, X+
    2216:	9d 91       	ld	r25, X+
    2218:	0d 90       	ld	r0, X+
    221a:	bc 91       	ld	r27, X
    221c:	a0 2d       	mov	r26, r0
    221e:	28 1b       	sub	r18, r24
    2220:	39 0b       	sbc	r19, r25
    2222:	4a 0b       	sbc	r20, r26
    2224:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2226:	57 fd       	sbrc	r21, 7
    2228:	07 c0       	rjmp	.+14     	; 0x2238 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    222a:	21 15       	cp	r18, r1
    222c:	31 05       	cpc	r19, r1
    222e:	41 05       	cpc	r20, r1
    2230:	51 05       	cpc	r21, r1
    2232:	11 f0       	breq	.+4      	; 0x2238 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	12 c0       	rjmp	.+36     	; 0x225c <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	cb 01       	movw	r24, r22
    223c:	34 e0       	ldi	r19, 0x04	; 4
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	3a 95       	dec	r19
    2244:	e1 f7       	brne	.-8      	; 0x223e <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2246:	86 0f       	add	r24, r22
    2248:	97 1f       	adc	r25, r23
    224a:	c8 0f       	add	r28, r24
    224c:	d9 1f       	adc	r29, r25
    224e:	cc 5b       	subi	r28, 0xBC	; 188
    2250:	df 4f       	sbci	r29, 0xFF	; 255
    2252:	88 81       	ld	r24, Y
    2254:	80 ff       	sbrs	r24, 0
    2256:	21 e0       	ldi	r18, 0x01	; 1
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    225c:	82 2f       	mov	r24, r18
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    2264:	1f 93       	push	r17
    2266:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2268:	0e 94 ef 10 	call	0x21de	; 0x21de <Timebase_DownCounter_SS_Period_Value_Expired>
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	11 f0       	breq	.+4      	; 0x2274 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	16 c0       	rjmp	.+44     	; 0x22a0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2274:	e0 91 43 01 	lds	r30, 0x0143
    2278:	f0 91 44 01 	lds	r31, 0x0144
    227c:	21 2f       	mov	r18, r17
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	c9 01       	movw	r24, r18
    2282:	54 e0       	ldi	r21, 0x04	; 4
    2284:	88 0f       	add	r24, r24
    2286:	99 1f       	adc	r25, r25
    2288:	5a 95       	dec	r21
    228a:	e1 f7       	brne	.-8      	; 0x2284 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    228c:	82 0f       	add	r24, r18
    228e:	93 1f       	adc	r25, r19
    2290:	e8 0f       	add	r30, r24
    2292:	f9 1f       	adc	r31, r25
    2294:	ec 5b       	subi	r30, 0xBC	; 188
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	8e 7f       	andi	r24, 0xFE	; 254
    229c:	80 83       	st	Z, r24
    229e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    22a0:	1f 91       	pop	r17
    22a2:	08 95       	ret

000022a4 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <Timebase_DownCounter_SS_Update>
  }
}
    22aa:	08 95       	ret

000022ac <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    22ac:	e0 91 43 01 	lds	r30, 0x0143
    22b0:	f0 91 44 01 	lds	r31, 0x0144
    22b4:	e7 5b       	subi	r30, 0xB7	; 183
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	10 82       	st	Z, r1
    22ba:	11 82       	std	Z+1, r1	; 0x01
    22bc:	12 82       	std	Z+2, r1	; 0x02
    22be:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    22c0:	12 92       	st	-Z, r1
    22c2:	12 92       	st	-Z, r1
    22c4:	12 92       	st	-Z, r1
    22c6:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    22c8:	38 96       	adiw	r30, 0x08	; 8
    22ca:	10 82       	st	Z, r1
    22cc:	11 82       	std	Z+1, r1	; 0x01
    22ce:	12 82       	std	Z+2, r1	; 0x02
    22d0:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    22d2:	39 97       	sbiw	r30, 0x09	; 9
    22d4:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    22d6:	80 7e       	andi	r24, 0xE0	; 224
    22d8:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    22da:	08 95       	ret

000022dc <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    22dc:	e0 91 43 01 	lds	r30, 0x0143
    22e0:	f0 91 44 01 	lds	r31, 0x0144
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	2d e0       	ldi	r18, 0x0D	; 13
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	ac 01       	movw	r20, r24
    22ec:	42 9f       	mul	r20, r18
    22ee:	c0 01       	movw	r24, r0
    22f0:	43 9f       	mul	r20, r19
    22f2:	90 0d       	add	r25, r0
    22f4:	52 9f       	mul	r21, r18
    22f6:	90 0d       	add	r25, r0
    22f8:	11 24       	eor	r1, r1
    22fa:	e8 0f       	add	r30, r24
    22fc:	f9 1f       	adc	r31, r25
    22fe:	eb 5a       	subi	r30, 0xAB	; 171
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2306:	8f 70       	andi	r24, 0x0F	; 15
    2308:	08 95       	ret

0000230a <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    230a:	e0 91 43 01 	lds	r30, 0x0143
    230e:	f0 91 44 01 	lds	r31, 0x0144
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	2d e0       	ldi	r18, 0x0D	; 13
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	ac 01       	movw	r20, r24
    231a:	42 9f       	mul	r20, r18
    231c:	c0 01       	movw	r24, r0
    231e:	43 9f       	mul	r20, r19
    2320:	90 0d       	add	r25, r0
    2322:	52 9f       	mul	r21, r18
    2324:	90 0d       	add	r25, r0
    2326:	11 24       	eor	r1, r1
    2328:	e8 0f       	add	r30, r24
    232a:	f9 1f       	adc	r31, r25
    232c:	eb 5a       	subi	r30, 0xAB	; 171
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	6f 70       	andi	r22, 0x0F	; 15
    2332:	66 0f       	add	r22, r22
    2334:	80 81       	ld	r24, Z
    2336:	81 7e       	andi	r24, 0xE1	; 225
    2338:	86 2b       	or	r24, r22
    233a:	80 83       	st	Z, r24
}
    233c:	08 95       	ret

0000233e <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    233e:	e0 91 43 01 	lds	r30, 0x0143
    2342:	f0 91 44 01 	lds	r31, 0x0144
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	2d e0       	ldi	r18, 0x0D	; 13
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	ac 01       	movw	r20, r24
    234e:	42 9f       	mul	r20, r18
    2350:	c0 01       	movw	r24, r0
    2352:	43 9f       	mul	r20, r19
    2354:	90 0d       	add	r25, r0
    2356:	52 9f       	mul	r21, r18
    2358:	90 0d       	add	r25, r0
    235a:	11 24       	eor	r1, r1
    235c:	e8 0f       	add	r30, r24
    235e:	f9 1f       	adc	r31, r25
    2360:	e6 5a       	subi	r30, 0xA6	; 166
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	08 95       	ret

0000236e <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    236e:	e0 91 43 01 	lds	r30, 0x0143
    2372:	f0 91 44 01 	lds	r31, 0x0144
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	2d e0       	ldi	r18, 0x0D	; 13
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	dc 01       	movw	r26, r24
    237e:	a2 9f       	mul	r26, r18
    2380:	c0 01       	movw	r24, r0
    2382:	a3 9f       	mul	r26, r19
    2384:	90 0d       	add	r25, r0
    2386:	b2 9f       	mul	r27, r18
    2388:	90 0d       	add	r25, r0
    238a:	11 24       	eor	r1, r1
    238c:	e8 0f       	add	r30, r24
    238e:	f9 1f       	adc	r31, r25
    2390:	e6 5a       	subi	r30, 0xA6	; 166
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	40 83       	st	Z, r20
    2396:	51 83       	std	Z+1, r21	; 0x01
    2398:	62 83       	std	Z+2, r22	; 0x02
    239a:	73 83       	std	Z+3, r23	; 0x03
}
    239c:	08 95       	ret

0000239e <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    239e:	e0 91 43 01 	lds	r30, 0x0143
    23a2:	f0 91 44 01 	lds	r31, 0x0144
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	2d e0       	ldi	r18, 0x0D	; 13
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	ac 01       	movw	r20, r24
    23ae:	42 9f       	mul	r20, r18
    23b0:	c0 01       	movw	r24, r0
    23b2:	43 9f       	mul	r20, r19
    23b4:	90 0d       	add	r25, r0
    23b6:	52 9f       	mul	r21, r18
    23b8:	90 0d       	add	r25, r0
    23ba:	11 24       	eor	r1, r1
    23bc:	e8 0f       	add	r30, r24
    23be:	f9 1f       	adc	r31, r25
    23c0:	ea 5a       	subi	r30, 0xAA	; 170
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	08 95       	ret

000023ce <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    23ce:	e0 91 43 01 	lds	r30, 0x0143
    23d2:	f0 91 44 01 	lds	r31, 0x0144
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	2d e0       	ldi	r18, 0x0D	; 13
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	dc 01       	movw	r26, r24
    23de:	a2 9f       	mul	r26, r18
    23e0:	c0 01       	movw	r24, r0
    23e2:	a3 9f       	mul	r26, r19
    23e4:	90 0d       	add	r25, r0
    23e6:	b2 9f       	mul	r27, r18
    23e8:	90 0d       	add	r25, r0
    23ea:	11 24       	eor	r1, r1
    23ec:	e8 0f       	add	r30, r24
    23ee:	f9 1f       	adc	r31, r25
    23f0:	ea 5a       	subi	r30, 0xAA	; 170
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	40 83       	st	Z, r20
    23f6:	51 83       	std	Z+1, r21	; 0x01
    23f8:	62 83       	std	Z+2, r22	; 0x02
    23fa:	73 83       	std	Z+3, r23	; 0x03
}
    23fc:	08 95       	ret

000023fe <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    23fe:	e0 91 43 01 	lds	r30, 0x0143
    2402:	f0 91 44 01 	lds	r31, 0x0144
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	2d e0       	ldi	r18, 0x0D	; 13
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	ac 01       	movw	r20, r24
    240e:	42 9f       	mul	r20, r18
    2410:	c0 01       	movw	r24, r0
    2412:	43 9f       	mul	r20, r19
    2414:	90 0d       	add	r25, r0
    2416:	52 9f       	mul	r21, r18
    2418:	90 0d       	add	r25, r0
    241a:	11 24       	eor	r1, r1
    241c:	e8 0f       	add	r30, r24
    241e:	f9 1f       	adc	r31, r25
    2420:	e2 5a       	subi	r30, 0xA2	; 162
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	08 95       	ret

0000242e <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    242e:	e0 91 43 01 	lds	r30, 0x0143
    2432:	f0 91 44 01 	lds	r31, 0x0144
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    243a:	77 ff       	sbrs	r23, 7
    243c:	13 c0       	rjmp	.+38     	; 0x2464 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    243e:	8d e0       	ldi	r24, 0x0D	; 13
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	ac 01       	movw	r20, r24
    2444:	24 9f       	mul	r18, r20
    2446:	c0 01       	movw	r24, r0
    2448:	25 9f       	mul	r18, r21
    244a:	90 0d       	add	r25, r0
    244c:	34 9f       	mul	r19, r20
    244e:	90 0d       	add	r25, r0
    2450:	11 24       	eor	r1, r1
    2452:	e8 0f       	add	r30, r24
    2454:	f9 1f       	adc	r31, r25
    2456:	e2 5a       	subi	r30, 0xA2	; 162
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	10 82       	st	Z, r1
    245c:	11 82       	std	Z+1, r1	; 0x01
    245e:	12 82       	std	Z+2, r1	; 0x02
    2460:	13 82       	std	Z+3, r1	; 0x03
    2462:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2464:	8d e0       	ldi	r24, 0x0D	; 13
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	dc 01       	movw	r26, r24
    246a:	2a 9f       	mul	r18, r26
    246c:	c0 01       	movw	r24, r0
    246e:	2b 9f       	mul	r18, r27
    2470:	90 0d       	add	r25, r0
    2472:	3a 9f       	mul	r19, r26
    2474:	90 0d       	add	r25, r0
    2476:	11 24       	eor	r1, r1
    2478:	e8 0f       	add	r30, r24
    247a:	f9 1f       	adc	r31, r25
    247c:	e2 5a       	subi	r30, 0xA2	; 162
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	40 83       	st	Z, r20
    2482:	51 83       	std	Z+1, r21	; 0x01
    2484:	62 83       	std	Z+2, r22	; 0x02
    2486:	73 83       	std	Z+3, r23	; 0x03
    2488:	08 95       	ret

0000248a <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    248a:	e0 91 43 01 	lds	r30, 0x0143
    248e:	f0 91 44 01 	lds	r31, 0x0144
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	2d e0       	ldi	r18, 0x0D	; 13
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	ac 01       	movw	r20, r24
    249a:	42 9f       	mul	r20, r18
    249c:	c0 01       	movw	r24, r0
    249e:	43 9f       	mul	r20, r19
    24a0:	90 0d       	add	r25, r0
    24a2:	52 9f       	mul	r21, r18
    24a4:	90 0d       	add	r25, r0
    24a6:	11 24       	eor	r1, r1
    24a8:	e8 0f       	add	r30, r24
    24aa:	f9 1f       	adc	r31, r25
    24ac:	eb 5a       	subi	r30, 0xAB	; 171
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    24b2:	81 70       	andi	r24, 0x01	; 1
    24b4:	08 95       	ret

000024b6 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    24b6:	e0 91 43 01 	lds	r30, 0x0143
    24ba:	f0 91 44 01 	lds	r31, 0x0144
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	2d e0       	ldi	r18, 0x0D	; 13
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	ac 01       	movw	r20, r24
    24c6:	42 9f       	mul	r20, r18
    24c8:	c0 01       	movw	r24, r0
    24ca:	43 9f       	mul	r20, r19
    24cc:	90 0d       	add	r25, r0
    24ce:	52 9f       	mul	r21, r18
    24d0:	90 0d       	add	r25, r0
    24d2:	11 24       	eor	r1, r1
    24d4:	e8 0f       	add	r30, r24
    24d6:	f9 1f       	adc	r31, r25
    24d8:	eb 5a       	subi	r30, 0xAB	; 171
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	81 60       	ori	r24, 0x01	; 1
    24e0:	80 83       	st	Z, r24
}
    24e2:	08 95       	ret

000024e4 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24e4:	e0 91 43 01 	lds	r30, 0x0143
    24e8:	f0 91 44 01 	lds	r31, 0x0144
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	2d e0       	ldi	r18, 0x0D	; 13
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	ac 01       	movw	r20, r24
    24f4:	42 9f       	mul	r20, r18
    24f6:	c0 01       	movw	r24, r0
    24f8:	43 9f       	mul	r20, r19
    24fa:	90 0d       	add	r25, r0
    24fc:	52 9f       	mul	r21, r18
    24fe:	90 0d       	add	r25, r0
    2500:	11 24       	eor	r1, r1
    2502:	e8 0f       	add	r30, r24
    2504:	f9 1f       	adc	r31, r25
    2506:	eb 5a       	subi	r30, 0xAB	; 171
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	8e 7f       	andi	r24, 0xFE	; 254
    250e:	80 83       	st	Z, r24
}
    2510:	08 95       	ret

00002512 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2512:	e0 91 43 01 	lds	r30, 0x0143
    2516:	f0 91 44 01 	lds	r31, 0x0144
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	2d e0       	ldi	r18, 0x0D	; 13
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	ac 01       	movw	r20, r24
    2522:	42 9f       	mul	r20, r18
    2524:	c0 01       	movw	r24, r0
    2526:	43 9f       	mul	r20, r19
    2528:	90 0d       	add	r25, r0
    252a:	52 9f       	mul	r21, r18
    252c:	90 0d       	add	r25, r0
    252e:	11 24       	eor	r1, r1
    2530:	e8 0f       	add	r30, r24
    2532:	f9 1f       	adc	r31, r25
    2534:	ea 5a       	subi	r30, 0xAA	; 170
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	11 92       	st	Z+, r1
    253a:	11 92       	st	Z+, r1
    253c:	11 92       	st	Z+, r1
    253e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2540:	10 82       	st	Z, r1
    2542:	11 82       	std	Z+1, r1	; 0x01
    2544:	12 82       	std	Z+2, r1	; 0x02
    2546:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2548:	35 97       	sbiw	r30, 0x05	; 5
    254a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    254c:	80 7e       	andi	r24, 0xE0	; 224
    254e:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2550:	08 95       	ret

00002552 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2552:	e0 91 43 01 	lds	r30, 0x0143
    2556:	f0 91 44 01 	lds	r31, 0x0144
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	2d e0       	ldi	r18, 0x0D	; 13
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	ac 01       	movw	r20, r24
    2562:	42 9f       	mul	r20, r18
    2564:	c0 01       	movw	r24, r0
    2566:	43 9f       	mul	r20, r19
    2568:	90 0d       	add	r25, r0
    256a:	52 9f       	mul	r21, r18
    256c:	90 0d       	add	r25, r0
    256e:	11 24       	eor	r1, r1
    2570:	e8 0f       	add	r30, r24
    2572:	f9 1f       	adc	r31, r25
    2574:	ea 5a       	subi	r30, 0xAA	; 170
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	11 92       	st	Z+, r1
    257a:	11 92       	st	Z+, r1
    257c:	11 92       	st	Z+, r1
    257e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2580:	10 82       	st	Z, r1
    2582:	11 82       	std	Z+1, r1	; 0x01
    2584:	12 82       	std	Z+2, r1	; 0x02
    2586:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2588:	35 97       	sbiw	r30, 0x05	; 5
    258a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    258c:	80 7e       	andi	r24, 0xE0	; 224
    258e:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2590:	08 95       	ret

00002592 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2592:	e0 91 43 01 	lds	r30, 0x0143
    2596:	f0 91 44 01 	lds	r31, 0x0144
    259a:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    259c:	2d e0       	ldi	r18, 0x0D	; 13
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	ac 01       	movw	r20, r24
    25a2:	42 9f       	mul	r20, r18
    25a4:	c0 01       	movw	r24, r0
    25a6:	43 9f       	mul	r20, r19
    25a8:	90 0d       	add	r25, r0
    25aa:	52 9f       	mul	r21, r18
    25ac:	90 0d       	add	r25, r0
    25ae:	11 24       	eor	r1, r1
    25b0:	e8 0f       	add	r30, r24
    25b2:	f9 1f       	adc	r31, r25
    25b4:	eb 5a       	subi	r30, 0xAB	; 171
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	90 81       	ld	r25, Z
    25ba:	89 2f       	mov	r24, r25
    25bc:	86 95       	lsr	r24
    25be:	8f 70       	andi	r24, 0x0F	; 15
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	19 f0       	breq	.+6      	; 0x25ca <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25c4:	91 7e       	andi	r25, 0xE1	; 225
    25c6:	92 60       	ori	r25, 0x02	; 2
    25c8:	90 83       	st	Z, r25
    25ca:	08 95       	ret

000025cc <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    25cc:	e0 91 43 01 	lds	r30, 0x0143
    25d0:	f0 91 44 01 	lds	r31, 0x0144
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    25d6:	2d e0       	ldi	r18, 0x0D	; 13
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	ac 01       	movw	r20, r24
    25dc:	42 9f       	mul	r20, r18
    25de:	c0 01       	movw	r24, r0
    25e0:	43 9f       	mul	r20, r19
    25e2:	90 0d       	add	r25, r0
    25e4:	52 9f       	mul	r21, r18
    25e6:	90 0d       	add	r25, r0
    25e8:	11 24       	eor	r1, r1
    25ea:	e8 0f       	add	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	eb 5a       	subi	r30, 0xAB	; 171
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	90 81       	ld	r25, Z
    25f4:	89 2f       	mov	r24, r25
    25f6:	86 95       	lsr	r24
    25f8:	8f 70       	andi	r24, 0x0F	; 15
    25fa:	82 30       	cpi	r24, 0x02	; 2
    25fc:	19 f0       	breq	.+6      	; 0x2604 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25fe:	91 7e       	andi	r25, 0xE1	; 225
    2600:	94 60       	ori	r25, 0x04	; 4
    2602:	90 83       	st	Z, r25
    2604:	08 95       	ret

00002606 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    260a:	a0 91 43 01 	lds	r26, 0x0143
    260e:	b0 91 44 01 	lds	r27, 0x0144
    2612:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2614:	2d e0       	ldi	r18, 0x0D	; 13
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	82 9f       	mul	r24, r18
    261a:	f0 01       	movw	r30, r0
    261c:	83 9f       	mul	r24, r19
    261e:	f0 0d       	add	r31, r0
    2620:	92 9f       	mul	r25, r18
    2622:	f0 0d       	add	r31, r0
    2624:	11 24       	eor	r1, r1
    2626:	ea 0f       	add	r30, r26
    2628:	fb 1f       	adc	r31, r27
    262a:	ef 01       	movw	r28, r30
    262c:	cb 5a       	subi	r28, 0xAB	; 171
    262e:	df 4f       	sbci	r29, 0xFF	; 255
    2630:	88 81       	ld	r24, Y
    2632:	86 95       	lsr	r24
    2634:	8f 70       	andi	r24, 0x0F	; 15
    2636:	e9 f4       	brne	.+58     	; 0x2672 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2638:	e6 5a       	subi	r30, 0xA6	; 166
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	40 83       	st	Z, r20
    263e:	51 83       	std	Z+1, r21	; 0x01
    2640:	62 83       	std	Z+2, r22	; 0x02
    2642:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2644:	1a 96       	adiw	r26, 0x0a	; 10
    2646:	8d 91       	ld	r24, X+
    2648:	9d 91       	ld	r25, X+
    264a:	0d 90       	ld	r0, X+
    264c:	bc 91       	ld	r27, X
    264e:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2650:	84 0f       	add	r24, r20
    2652:	95 1f       	adc	r25, r21
    2654:	a6 1f       	adc	r26, r22
    2656:	b7 1f       	adc	r27, r23
    2658:	b2 93       	st	-Z, r27
    265a:	a2 93       	st	-Z, r26
    265c:	92 93       	st	-Z, r25
    265e:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2660:	98 81       	ld	r25, Y
    2662:	89 2f       	mov	r24, r25
    2664:	86 95       	lsr	r24
    2666:	8f 70       	andi	r24, 0x0F	; 15
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	19 f0       	breq	.+6      	; 0x2672 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    266c:	91 7e       	andi	r25, 0xE1	; 225
    266e:	92 60       	ori	r25, 0x02	; 2
    2670:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    2672:	df 91       	pop	r29
    2674:	cf 91       	pop	r28
    2676:	08 95       	ret

00002678 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    267c:	e0 91 43 01 	lds	r30, 0x0143
    2680:	f0 91 44 01 	lds	r31, 0x0144
    2684:	a8 2f       	mov	r26, r24
    2686:	b0 e0       	ldi	r27, 0x00	; 0
    2688:	2d e0       	ldi	r18, 0x0D	; 13
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	e9 01       	movw	r28, r18
    268e:	ac 9f       	mul	r26, r28
    2690:	90 01       	movw	r18, r0
    2692:	ad 9f       	mul	r26, r29
    2694:	30 0d       	add	r19, r0
    2696:	bc 9f       	mul	r27, r28
    2698:	30 0d       	add	r19, r0
    269a:	11 24       	eor	r1, r1
    269c:	e2 0f       	add	r30, r18
    269e:	f3 1f       	adc	r31, r19
    26a0:	ea 5a       	subi	r30, 0xAA	; 170
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	11 92       	st	Z+, r1
    26a6:	11 92       	st	Z+, r1
    26a8:	11 92       	st	Z+, r1
    26aa:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    26ac:	10 82       	st	Z, r1
    26ae:	11 82       	std	Z+1, r1	; 0x01
    26b0:	12 82       	std	Z+2, r1	; 0x02
    26b2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    26b4:	35 97       	sbiw	r30, 0x05	; 5
    26b6:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    26b8:	90 7e       	andi	r25, 0xE0	; 224
    26ba:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    26bc:	0e 94 03 13 	call	0x2606	; 0x2606 <Timebase_DownCounter_Set_Securely>
} 
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    26ce:	a0 91 43 01 	lds	r26, 0x0143
    26d2:	b0 91 44 01 	lds	r27, 0x0144
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	2d e0       	ldi	r18, 0x0D	; 13
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	82 9f       	mul	r24, r18
    26de:	f0 01       	movw	r30, r0
    26e0:	83 9f       	mul	r24, r19
    26e2:	f0 0d       	add	r31, r0
    26e4:	92 9f       	mul	r25, r18
    26e6:	f0 0d       	add	r31, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	ea 0f       	add	r30, r26
    26ec:	fb 1f       	adc	r31, r27
    26ee:	8f 01       	movw	r16, r30
    26f0:	0b 5a       	subi	r16, 0xAB	; 171
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	e8 01       	movw	r28, r16
    26f6:	88 81       	ld	r24, Y
    26f8:	86 95       	lsr	r24
    26fa:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    26fc:	81 30       	cpi	r24, 0x01	; 1
    26fe:	69 f5       	brne	.+90     	; 0x275a <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2700:	1a 96       	adiw	r26, 0x0a	; 10
    2702:	2d 91       	ld	r18, X+
    2704:	3d 91       	ld	r19, X+
    2706:	4d 91       	ld	r20, X+
    2708:	5c 91       	ld	r21, X
    270a:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    270c:	bf 01       	movw	r22, r30
    270e:	6a 5a       	subi	r22, 0xAA	; 170
    2710:	7f 4f       	sbci	r23, 0xFF	; 255
    2712:	eb 01       	movw	r28, r22
    2714:	88 81       	ld	r24, Y
    2716:	99 81       	ldd	r25, Y+1	; 0x01
    2718:	aa 81       	ldd	r26, Y+2	; 0x02
    271a:	bb 81       	ldd	r27, Y+3	; 0x03
    271c:	82 1b       	sub	r24, r18
    271e:	93 0b       	sbc	r25, r19
    2720:	a4 0b       	sbc	r26, r20
    2722:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2724:	e6 5a       	subi	r30, 0xA6	; 166
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	80 83       	st	Z, r24
    272a:	91 83       	std	Z+1, r25	; 0x01
    272c:	a2 83       	std	Z+2, r26	; 0x02
    272e:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2730:	18 16       	cp	r1, r24
    2732:	19 06       	cpc	r1, r25
    2734:	1a 06       	cpc	r1, r26
    2736:	1b 06       	cpc	r1, r27
    2738:	34 f1       	brlt	.+76     	; 0x2786 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    273a:	db 01       	movw	r26, r22
    273c:	1d 92       	st	X+, r1
    273e:	1d 92       	st	X+, r1
    2740:	1d 92       	st	X+, r1
    2742:	1c 92       	st	X, r1
    2744:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2746:	10 82       	st	Z, r1
    2748:	11 82       	std	Z+1, r1	; 0x01
    274a:	12 82       	std	Z+2, r1	; 0x02
    274c:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    274e:	e8 01       	movw	r28, r16
    2750:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2752:	80 7e       	andi	r24, 0xE0	; 224
    2754:	88 60       	ori	r24, 0x08	; 8
    2756:	88 83       	st	Y, r24
    2758:	16 c0       	rjmp	.+44     	; 0x2786 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    275a:	82 30       	cpi	r24, 0x02	; 2
    275c:	a1 f4       	brne	.+40     	; 0x2786 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    275e:	1a 96       	adiw	r26, 0x0a	; 10
    2760:	8d 91       	ld	r24, X+
    2762:	9d 91       	ld	r25, X+
    2764:	0d 90       	ld	r0, X+
    2766:	bc 91       	ld	r27, X
    2768:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    276a:	e6 5a       	subi	r30, 0xA6	; 166
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	20 81       	ld	r18, Z
    2770:	31 81       	ldd	r19, Z+1	; 0x01
    2772:	42 81       	ldd	r20, Z+2	; 0x02
    2774:	53 81       	ldd	r21, Z+3	; 0x03
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	a4 1f       	adc	r26, r20
    277c:	b5 1f       	adc	r27, r21
    277e:	b2 93       	st	-Z, r27
    2780:	a2 93       	st	-Z, r26
    2782:	92 93       	st	-Z, r25
    2784:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	08 95       	ret

00002790 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	e0 91 43 01 	lds	r30, 0x0143
    2796:	f0 91 44 01 	lds	r31, 0x0144
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	2d e0       	ldi	r18, 0x0D	; 13
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	bc 01       	movw	r22, r24
    27a2:	62 9f       	mul	r22, r18
    27a4:	c0 01       	movw	r24, r0
    27a6:	63 9f       	mul	r22, r19
    27a8:	90 0d       	add	r25, r0
    27aa:	72 9f       	mul	r23, r18
    27ac:	90 0d       	add	r25, r0
    27ae:	11 24       	eor	r1, r1
    27b0:	e8 0f       	add	r30, r24
    27b2:	f9 1f       	adc	r31, r25
    27b4:	eb 5a       	subi	r30, 0xAB	; 171
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	80 81       	ld	r24, Z
    27ba:	86 95       	lsr	r24
    27bc:	8f 70       	andi	r24, 0x0F	; 15
    27be:	84 30       	cpi	r24, 0x04	; 4
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <Timebase_DownCounter_Expired+0x34>
    27c2:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    27c4:	84 2f       	mov	r24, r20
    27c6:	08 95       	ret

000027c8 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    27c8:	e0 91 43 01 	lds	r30, 0x0143
    27cc:	f0 91 44 01 	lds	r31, 0x0144
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    27d2:	2d e0       	ldi	r18, 0x0D	; 13
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	ac 01       	movw	r20, r24
    27d8:	42 9f       	mul	r20, r18
    27da:	c0 01       	movw	r24, r0
    27dc:	43 9f       	mul	r20, r19
    27de:	90 0d       	add	r25, r0
    27e0:	52 9f       	mul	r21, r18
    27e2:	90 0d       	add	r25, r0
    27e4:	11 24       	eor	r1, r1
    27e6:	e8 0f       	add	r30, r24
    27e8:	f9 1f       	adc	r31, r25
    27ea:	df 01       	movw	r26, r30
    27ec:	ab 5a       	subi	r26, 0xAB	; 171
    27ee:	bf 4f       	sbci	r27, 0xFF	; 255
    27f0:	8c 91       	ld	r24, X
    27f2:	86 95       	lsr	r24
    27f4:	8f 70       	andi	r24, 0x0F	; 15
    27f6:	84 30       	cpi	r24, 0x04	; 4
    27f8:	11 f0       	breq	.+4      	; 0x27fe <Timebase_DownCounter_Expired_Event+0x36>
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    27fe:	ea 5a       	subi	r30, 0xAA	; 170
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	11 92       	st	Z+, r1
    2804:	11 92       	st	Z+, r1
    2806:	11 92       	st	Z+, r1
    2808:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    280a:	10 82       	st	Z, r1
    280c:	11 82       	std	Z+1, r1	; 0x01
    280e:	12 82       	std	Z+2, r1	; 0x02
    2810:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2812:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2814:	80 7e       	andi	r24, 0xE0	; 224
    2816:	8c 93       	st	X, r24
    2818:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    281a:	08 95       	ret

0000281c <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2820:	c0 91 43 01 	lds	r28, 0x0143
    2824:	d0 91 44 01 	lds	r29, 0x0144
    2828:	28 2f       	mov	r18, r24
    282a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    282c:	8d e0       	ldi	r24, 0x0D	; 13
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	28 9f       	mul	r18, r24
    2832:	f0 01       	movw	r30, r0
    2834:	29 9f       	mul	r18, r25
    2836:	f0 0d       	add	r31, r0
    2838:	38 9f       	mul	r19, r24
    283a:	f0 0d       	add	r31, r0
    283c:	11 24       	eor	r1, r1
    283e:	ec 0f       	add	r30, r28
    2840:	fd 1f       	adc	r31, r29
    2842:	eb 5a       	subi	r30, 0xAB	; 171
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	e5 55       	subi	r30, 0x55	; 85
    284a:	f0 40       	sbci	r31, 0x00	; 0
    284c:	80 fd       	sbrc	r24, 0
    284e:	25 c0       	rjmp	.+74     	; 0x289a <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2850:	e6 5a       	subi	r30, 0xA6	; 166
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	81 91       	ld	r24, Z+
    2856:	91 91       	ld	r25, Z+
    2858:	a1 91       	ld	r26, Z+
    285a:	b1 91       	ld	r27, Z+
    285c:	84 1b       	sub	r24, r20
    285e:	95 0b       	sbc	r25, r21
    2860:	a6 0b       	sbc	r26, r22
    2862:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2864:	b7 ff       	sbrs	r27, 7
    2866:	05 c0       	rjmp	.+10     	; 0x2872 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2868:	10 82       	st	Z, r1
    286a:	11 82       	std	Z+1, r1	; 0x01
    286c:	12 82       	std	Z+2, r1	; 0x02
    286e:	13 82       	std	Z+3, r1	; 0x03
    2870:	04 c0       	rjmp	.+8      	; 0x287a <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2872:	80 83       	st	Z, r24
    2874:	91 83       	std	Z+1, r25	; 0x01
    2876:	a2 83       	std	Z+2, r26	; 0x02
    2878:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    287a:	8d e0       	ldi	r24, 0x0D	; 13
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	28 9f       	mul	r18, r24
    2880:	f0 01       	movw	r30, r0
    2882:	29 9f       	mul	r18, r25
    2884:	f0 0d       	add	r31, r0
    2886:	38 9f       	mul	r19, r24
    2888:	f0 0d       	add	r31, r0
    288a:	11 24       	eor	r1, r1
    288c:	ec 0f       	add	r30, r28
    288e:	fd 1f       	adc	r31, r29
    2890:	eb 5a       	subi	r30, 0xAB	; 171
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	81 60       	ori	r24, 0x01	; 1
    2898:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	08 95       	ret

000028a0 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    28a0:	e0 91 43 01 	lds	r30, 0x0143
    28a4:	f0 91 44 01 	lds	r31, 0x0144
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    28aa:	2d e0       	ldi	r18, 0x0D	; 13
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	ac 01       	movw	r20, r24
    28b0:	42 9f       	mul	r20, r18
    28b2:	c0 01       	movw	r24, r0
    28b4:	43 9f       	mul	r20, r19
    28b6:	90 0d       	add	r25, r0
    28b8:	52 9f       	mul	r21, r18
    28ba:	90 0d       	add	r25, r0
    28bc:	11 24       	eor	r1, r1
    28be:	e8 0f       	add	r30, r24
    28c0:	f9 1f       	adc	r31, r25
    28c2:	df 01       	movw	r26, r30
    28c4:	a2 5a       	subi	r26, 0xA2	; 162
    28c6:	bf 4f       	sbci	r27, 0xFF	; 255
    28c8:	e6 5a       	subi	r30, 0xA6	; 166
    28ca:	ff 4f       	sbci	r31, 0xFF	; 255
    28cc:	20 81       	ld	r18, Z
    28ce:	31 81       	ldd	r19, Z+1	; 0x01
    28d0:	42 81       	ldd	r20, Z+2	; 0x02
    28d2:	53 81       	ldd	r21, Z+3	; 0x03
    28d4:	8d 91       	ld	r24, X+
    28d6:	9d 91       	ld	r25, X+
    28d8:	0d 90       	ld	r0, X+
    28da:	bc 91       	ld	r27, X
    28dc:	a0 2d       	mov	r26, r0
    28de:	28 1b       	sub	r18, r24
    28e0:	39 0b       	sbc	r19, r25
    28e2:	4a 0b       	sbc	r20, r26
    28e4:	5b 0b       	sbc	r21, r27
    28e6:	57 ff       	sbrs	r21, 7
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    28f2:	b9 01       	movw	r22, r18
    28f4:	ca 01       	movw	r24, r20
    28f6:	08 95       	ret

000028f8 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    28fc:	c0 91 43 01 	lds	r28, 0x0143
    2900:	d0 91 44 01 	lds	r29, 0x0144
    2904:	68 2f       	mov	r22, r24
    2906:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2908:	8d e0       	ldi	r24, 0x0D	; 13
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	68 9f       	mul	r22, r24
    290e:	f0 01       	movw	r30, r0
    2910:	69 9f       	mul	r22, r25
    2912:	f0 0d       	add	r31, r0
    2914:	78 9f       	mul	r23, r24
    2916:	f0 0d       	add	r31, r0
    2918:	11 24       	eor	r1, r1
    291a:	ec 0f       	add	r30, r28
    291c:	fd 1f       	adc	r31, r29
    291e:	df 01       	movw	r26, r30
    2920:	a2 5a       	subi	r26, 0xA2	; 162
    2922:	bf 4f       	sbci	r27, 0xFF	; 255
    2924:	e6 5a       	subi	r30, 0xA6	; 166
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	20 81       	ld	r18, Z
    292a:	31 81       	ldd	r19, Z+1	; 0x01
    292c:	42 81       	ldd	r20, Z+2	; 0x02
    292e:	53 81       	ldd	r21, Z+3	; 0x03
    2930:	8d 91       	ld	r24, X+
    2932:	9d 91       	ld	r25, X+
    2934:	0d 90       	ld	r0, X+
    2936:	bc 91       	ld	r27, X
    2938:	a0 2d       	mov	r26, r0
    293a:	28 1b       	sub	r18, r24
    293c:	39 0b       	sbc	r19, r25
    293e:	4a 0b       	sbc	r20, r26
    2940:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2942:	57 fd       	sbrc	r21, 7
    2944:	07 c0       	rjmp	.+14     	; 0x2954 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2946:	21 15       	cp	r18, r1
    2948:	31 05       	cpc	r19, r1
    294a:	41 05       	cpc	r20, r1
    294c:	51 05       	cpc	r21, r1
    294e:	11 f0       	breq	.+4      	; 0x2954 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	14 c0       	rjmp	.+40     	; 0x297c <Timebase_DownCounter_Period_Value_Expired+0x84>
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	8d e0       	ldi	r24, 0x0D	; 13
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	ac 01       	movw	r20, r24
    295c:	64 9f       	mul	r22, r20
    295e:	c0 01       	movw	r24, r0
    2960:	65 9f       	mul	r22, r21
    2962:	90 0d       	add	r25, r0
    2964:	74 9f       	mul	r23, r20
    2966:	90 0d       	add	r25, r0
    2968:	11 24       	eor	r1, r1
    296a:	c8 0f       	add	r28, r24
    296c:	d9 1f       	adc	r29, r25
    296e:	cb 5a       	subi	r28, 0xAB	; 171
    2970:	df 4f       	sbci	r29, 0xFF	; 255
    2972:	88 81       	ld	r24, Y
    2974:	80 ff       	sbrs	r24, 0
    2976:	21 e0       	ldi	r18, 0x01	; 1
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    297c:	82 2f       	mov	r24, r18
    297e:	df 91       	pop	r29
    2980:	cf 91       	pop	r28
    2982:	08 95       	ret

00002984 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2984:	1f 93       	push	r17
    2986:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2988:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <Timebase_DownCounter_Period_Value_Expired>
    298c:	81 30       	cpi	r24, 0x01	; 1
    298e:	11 f0       	breq	.+4      	; 0x2994 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	18 c0       	rjmp	.+48     	; 0x29c4 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2994:	e0 91 43 01 	lds	r30, 0x0143
    2998:	f0 91 44 01 	lds	r31, 0x0144
    299c:	21 2f       	mov	r18, r17
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	8d e0       	ldi	r24, 0x0D	; 13
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	ac 01       	movw	r20, r24
    29a6:	24 9f       	mul	r18, r20
    29a8:	c0 01       	movw	r24, r0
    29aa:	25 9f       	mul	r18, r21
    29ac:	90 0d       	add	r25, r0
    29ae:	34 9f       	mul	r19, r20
    29b0:	90 0d       	add	r25, r0
    29b2:	11 24       	eor	r1, r1
    29b4:	e8 0f       	add	r30, r24
    29b6:	f9 1f       	adc	r31, r25
    29b8:	eb 5a       	subi	r30, 0xAB	; 171
    29ba:	ff 4f       	sbci	r31, 0xFF	; 255
    29bc:	80 81       	ld	r24, Z
    29be:	8e 7f       	andi	r24, 0xFE	; 254
    29c0:	80 83       	st	Z, r24
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    29c4:	1f 91       	pop	r17
    29c6:	08 95       	ret

000029c8 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    29c8:	80 e0       	ldi	r24, 0x00	; 0
    29ca:	0e 94 63 13 	call	0x26c6	; 0x26c6 <Timebase_DownCounter_Update>
  }
}
    29ce:	08 95       	ret

000029d0 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    29d0:	e0 91 43 01 	lds	r30, 0x0143
    29d4:	f0 91 44 01 	lds	r31, 0x0144
    29d8:	ea 5a       	subi	r30, 0xAA	; 170
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	11 92       	st	Z+, r1
    29de:	11 92       	st	Z+, r1
    29e0:	11 92       	st	Z+, r1
    29e2:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    29e4:	10 82       	st	Z, r1
    29e6:	11 82       	std	Z+1, r1	; 0x01
    29e8:	12 82       	std	Z+2, r1	; 0x02
    29ea:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    29ec:	35 97       	sbiw	r30, 0x05	; 5
    29ee:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    29f0:	80 7e       	andi	r24, 0xE0	; 224
    29f2:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    29f4:	08 95       	ret

000029f6 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    29f6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    29fa:	0e 94 56 11 	call	0x22ac	; 0x22ac <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    29fe:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2a02:	08 95       	ret

00002a04 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2a0a:	0e 94 b5 00 	call	0x16a	; 0x16a <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2a0e:	c8 01       	movw	r24, r16
    2a10:	0e 94 8c 01 	call	0x318	; 0x318 <Timebase_Timer_Config>
  Timebase_Reset();
    2a14:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Timebase_Reset>
}
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	08 95       	ret

00002a1e <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2a1e:	e0 91 43 01 	lds	r30, 0x0143
    2a22:	f0 91 44 01 	lds	r31, 0x0144
    2a26:	85 89       	ldd	r24, Z+21	; 0x15
    2a28:	82 ff       	sbrs	r24, 2
    2a2a:	0b c0       	rjmp	.+22     	; 0x2a42 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a2c:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    2a30:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2a34:	e0 91 43 01 	lds	r30, 0x0143
    2a38:	f0 91 44 01 	lds	r31, 0x0144
    2a3c:	85 89       	ldd	r24, Z+21	; 0x15
    2a3e:	8b 7f       	andi	r24, 0xFB	; 251
    2a40:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2a42:	e0 91 43 01 	lds	r30, 0x0143
    2a46:	f0 91 44 01 	lds	r31, 0x0144
    2a4a:	85 89       	ldd	r24, Z+21	; 0x15
    2a4c:	80 ff       	sbrs	r24, 0
    2a4e:	0b c0       	rjmp	.+22     	; 0x2a66 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a50:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    2a54:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2a58:	e0 91 43 01 	lds	r30, 0x0143
    2a5c:	f0 91 44 01 	lds	r31, 0x0144
    2a60:	85 89       	ldd	r24, Z+21	; 0x15
    2a62:	8e 7f       	andi	r24, 0xFE	; 254
    2a64:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2a66:	e0 91 43 01 	lds	r30, 0x0143
    2a6a:	f0 91 44 01 	lds	r31, 0x0144
    2a6e:	85 89       	ldd	r24, Z+21	; 0x15
    2a70:	83 ff       	sbrs	r24, 3
    2a72:	0b c0       	rjmp	.+22     	; 0x2a8a <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a74:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    2a78:	0e 94 52 11 	call	0x22a4	; 0x22a4 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2a7c:	e0 91 43 01 	lds	r30, 0x0143
    2a80:	f0 91 44 01 	lds	r31, 0x0144
    2a84:	85 89       	ldd	r24, Z+21	; 0x15
    2a86:	87 7f       	andi	r24, 0xF7	; 247
    2a88:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2a8a:	e0 91 43 01 	lds	r30, 0x0143
    2a8e:	f0 91 44 01 	lds	r31, 0x0144
    2a92:	85 89       	ldd	r24, Z+21	; 0x15
    2a94:	81 ff       	sbrs	r24, 1
    2a96:	0b c0       	rjmp	.+22     	; 0x2aae <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a98:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    2a9c:	0e 94 e4 14 	call	0x29c8	; 0x29c8 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2aa0:	e0 91 43 01 	lds	r30, 0x0143
    2aa4:	f0 91 44 01 	lds	r31, 0x0144
    2aa8:	85 89       	ldd	r24, Z+21	; 0x15
    2aaa:	8d 7f       	andi	r24, 0xFD	; 253
    2aac:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    2aae:	e0 91 43 01 	lds	r30, 0x0143
    2ab2:	f0 91 44 01 	lds	r31, 0x0144
    2ab6:	14 8a       	std	Z+20, r1	; 0x14
}
    2ab8:	08 95       	ret

00002aba <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    2aba:	e0 91 43 01 	lds	r30, 0x0143
    2abe:	f0 91 44 01 	lds	r31, 0x0144
    2ac2:	86 85       	ldd	r24, Z+14	; 0x0e
    2ac4:	97 85       	ldd	r25, Z+15	; 0x0f
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	97 87       	std	Z+15, r25	; 0x0f
    2aca:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2acc:	85 89       	ldd	r24, Z+21	; 0x15
    2ace:	84 60       	ori	r24, 0x04	; 4
    2ad0:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2ad2:	85 89       	ldd	r24, Z+21	; 0x15
    2ad4:	88 60       	ori	r24, 0x08	; 8
    2ad6:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    2ad8:	26 85       	ldd	r18, Z+14	; 0x0e
    2ada:	37 85       	ldd	r19, Z+15	; 0x0f
    2adc:	81 81       	ldd	r24, Z+1	; 0x01
    2ade:	92 81       	ldd	r25, Z+2	; 0x02
    2ae0:	28 17       	cp	r18, r24
    2ae2:	39 07       	cpc	r19, r25
    2ae4:	98 f0       	brcs	.+38     	; 0x2b0c <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    2ae6:	80 89       	ldd	r24, Z+16	; 0x10
    2ae8:	91 89       	ldd	r25, Z+17	; 0x11
    2aea:	a2 89       	ldd	r26, Z+18	; 0x12
    2aec:	b3 89       	ldd	r27, Z+19	; 0x13
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	a1 1d       	adc	r26, r1
    2af2:	b1 1d       	adc	r27, r1
    2af4:	80 8b       	std	Z+16, r24	; 0x10
    2af6:	91 8b       	std	Z+17, r25	; 0x11
    2af8:	a2 8b       	std	Z+18, r26	; 0x12
    2afa:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    2afc:	17 86       	std	Z+15, r1	; 0x0f
    2afe:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2b00:	85 89       	ldd	r24, Z+21	; 0x15
    2b02:	81 60       	ori	r24, 0x01	; 1
    2b04:	85 8b       	std	Z+21, r24	; 0x15
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2b06:	85 89       	ldd	r24, Z+21	; 0x15
    2b08:	82 60       	ori	r24, 0x02	; 2
    2b0a:	85 8b       	std	Z+21, r24	; 0x15
    2b0c:	08 95       	ret

00002b0e <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2b0e:	1f 92       	push	r1
    2b10:	0f 92       	push	r0
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	0f 92       	push	r0
    2b16:	11 24       	eor	r1, r1
    2b18:	2f 93       	push	r18
    2b1a:	3f 93       	push	r19
    2b1c:	4f 93       	push	r20
    2b1e:	5f 93       	push	r21
    2b20:	6f 93       	push	r22
    2b22:	7f 93       	push	r23
    2b24:	8f 93       	push	r24
    2b26:	9f 93       	push	r25
    2b28:	af 93       	push	r26
    2b2a:	bf 93       	push	r27
    2b2c:	ef 93       	push	r30
    2b2e:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2b30:	e0 91 43 01 	lds	r30, 0x0143
    2b34:	f0 91 44 01 	lds	r31, 0x0144
    2b38:	83 81       	ldd	r24, Z+3	; 0x03
    2b3a:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2b3c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Timebase_ISR_Executables>
}
    2b40:	ff 91       	pop	r31
    2b42:	ef 91       	pop	r30
    2b44:	bf 91       	pop	r27
    2b46:	af 91       	pop	r26
    2b48:	9f 91       	pop	r25
    2b4a:	8f 91       	pop	r24
    2b4c:	7f 91       	pop	r23
    2b4e:	6f 91       	pop	r22
    2b50:	5f 91       	pop	r21
    2b52:	4f 91       	pop	r20
    2b54:	3f 91       	pop	r19
    2b56:	2f 91       	pop	r18
    2b58:	0f 90       	pop	r0
    2b5a:	0f be       	out	0x3f, r0	; 63
    2b5c:	0f 90       	pop	r0
    2b5e:	1f 90       	pop	r1
    2b60:	18 95       	reti

00002b62 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    2b62:	10 92 14 01 	sts	0x0114, r1
    2b66:	e5 e1       	ldi	r30, 0x15	; 21
    2b68:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    2b6a:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	ed 31       	cpi	r30, 0x1D	; 29
    2b70:	f8 07       	cpc	r31, r24
    2b72:	d9 f7       	brne	.-10     	; 0x2b6a <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    2b74:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
    2b76:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
    2b78:	80 e2       	ldi	r24, 0x20	; 32
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	93 a3       	std	Z+35, r25	; 0x23
    2b7e:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
    2b80:	15 a2       	std	Z+37, r1	; 0x25
    2b82:	14 a2       	std	Z+36, r1	; 0x24
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	04 c0       	rjmp	.+8      	; 0x2b90 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
    2b88:	ec 5e       	subi	r30, 0xEC	; 236
    2b8a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8c:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
    2b8e:	2f 5f       	subi	r18, 0xFF	; 255
    2b90:	80 91 3f 01 	lds	r24, 0x013F
    2b94:	90 91 40 01 	lds	r25, 0x0140
    2b98:	e2 2f       	mov	r30, r18
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	e8 17       	cp	r30, r24
    2b9e:	f9 07       	cpc	r31, r25
    2ba0:	98 f3       	brcs	.-26     	; 0x2b88 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
    2ba2:	08 95       	ret

00002ba4 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    2ba4:	08 95       	ret

00002ba6 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    2ba6:	08 95       	ret

00002ba8 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    2ba8:	9b 01       	movw	r18, r22
    2baa:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    2bac:	60 e6       	ldi	r22, 0x60	; 96
    2bae:	73 ee       	ldi	r23, 0xE3	; 227
    2bb0:	86 e1       	ldi	r24, 0x16	; 22
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodsi4>
    2bb8:	21 50       	subi	r18, 0x01	; 1
    2bba:	30 40       	sbci	r19, 0x00	; 0
    2bbc:	40 40       	sbci	r20, 0x00	; 0
    2bbe:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    2bc0:	e0 ec       	ldi	r30, 0xC0	; 192
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	80 81       	ld	r24, Z
    2bc6:	82 60       	ori	r24, 0x02	; 2
    2bc8:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    2bca:	bb 27       	eor	r27, r27
    2bcc:	a5 2f       	mov	r26, r21
    2bce:	94 2f       	mov	r25, r20
    2bd0:	83 2f       	mov	r24, r19
    2bd2:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    2bd6:	20 93 c4 00 	sts	0x00C4, r18
}
    2bda:	08 95       	ret

00002bdc <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    2bdc:	e1 ec       	ldi	r30, 0xC1	; 193
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	88 60       	ori	r24, 0x08	; 8
    2be4:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2be6:	86 e0       	ldi	r24, 0x06	; 6
    2be8:	80 93 c2 00 	sts	0x00C2, r24
}
    2bec:	08 95       	ret

00002bee <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    2bee:	e1 ec       	ldi	r30, 0xC1	; 193
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	80 61       	ori	r24, 0x10	; 16
    2bf6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2bf8:	86 e0       	ldi	r24, 0x06	; 6
    2bfa:	80 93 c2 00 	sts	0x00C2, r24
}
    2bfe:	08 95       	ret

00002c00 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    2c00:	e1 ec       	ldi	r30, 0xC1	; 193
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	80 81       	ld	r24, Z
    2c06:	80 68       	ori	r24, 0x80	; 128
    2c08:	80 83       	st	Z, r24
  sei();
    2c0a:	78 94       	sei
}
    2c0c:	08 95       	ret

00002c0e <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    2c0e:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    2c10:	80 91 c0 00 	lds	r24, 0x00C0
    2c14:	85 ff       	sbrs	r24, 5
    2c16:	fc cf       	rjmp	.-8      	; 0x2c10 <UART_Transmit_Byte+0x2>
  UDR0=val;
    2c18:	90 93 c6 00 	sts	0x00C6, r25
}
    2c1c:	08 95       	ret

00002c1e <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	0f 92       	push	r0
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    2c28:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    2c2a:	80 91 c0 00 	lds	r24, 0x00C0
    2c2e:	84 ff       	sbrs	r24, 4
    2c30:	05 c0       	rjmp	.+10     	; 0x2c3c <UART_Receive_Byte+0x1e>
    val=UDR0;
    2c32:	80 91 c6 00 	lds	r24, 0x00C6
    2c36:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	08 c0       	rjmp	.+16     	; 0x2c4c <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    2c3c:	80 91 c0 00 	lds	r24, 0x00C0
    2c40:	83 ff       	sbrs	r24, 3
    2c42:	07 c0       	rjmp	.+14     	; 0x2c52 <UART_Receive_Byte+0x34>
    val=UDR0;
    2c44:	80 91 c6 00 	lds	r24, 0x00C6
    2c48:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    2c4a:	82 e0       	ldi	r24, 0x02	; 2
    2c4c:	80 93 14 01 	sts	0x0114, r24
    2c50:	05 c0       	rjmp	.+10     	; 0x2c5c <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    2c52:	80 91 c6 00 	lds	r24, 0x00C6
    2c56:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    2c58:	10 92 14 01 	sts	0x0114, r1
  }
  return val;
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
    2c66:	80 91 1e 01 	lds	r24, 0x011E
}
    2c6a:	08 95       	ret

00002c6c <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
    2c6c:	10 92 1e 01 	sts	0x011E, r1
}
    2c70:	08 95       	ret

00002c72 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	ab 01       	movw	r20, r22
    2c7a:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    2c7c:	4f 3f       	cpi	r20, 0xFF	; 255
    2c7e:	51 05       	cpc	r21, r1
    2c80:	61 05       	cpc	r22, r1
    2c82:	71 05       	cpc	r23, r1
    2c84:	09 f0       	breq	.+2      	; 0x2c88 <UART_Transmit_Byte_Hex+0x16>
    2c86:	28 f4       	brcc	.+10     	; 0x2c92 <UART_Transmit_Byte_Hex+0x20>
    2c88:	e8 e0       	ldi	r30, 0x08	; 8
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	c2 e0       	ldi	r28, 0x02	; 2
    2c8e:	d0 e0       	ldi	r29, 0x00	; 0
    2c90:	11 c0       	rjmp	.+34     	; 0x2cb4 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    2c92:	40 30       	cpi	r20, 0x00	; 0
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	58 07       	cpc	r21, r24
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	68 07       	cpc	r22, r24
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	78 07       	cpc	r23, r24
    2ca0:	28 f0       	brcs	.+10     	; 0x2cac <UART_Transmit_Byte_Hex+0x3a>
    2ca2:	e0 e2       	ldi	r30, 0x20	; 32
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	c8 e0       	ldi	r28, 0x08	; 8
    2ca8:	d0 e0       	ldi	r29, 0x00	; 0
    2caa:	04 c0       	rjmp	.+8      	; 0x2cb4 <UART_Transmit_Byte_Hex+0x42>
    2cac:	e0 e1       	ldi	r30, 0x10	; 16
    2cae:	f0 e0       	ldi	r31, 0x00	; 0
    2cb0:	c4 e0       	ldi	r28, 0x04	; 4
    2cb2:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2cb4:	80 91 c0 00 	lds	r24, 0x00C0
    2cb8:	85 ff       	sbrs	r24, 5
    2cba:	fc cf       	rjmp	.-8      	; 0x2cb4 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    2cbc:	80 e3       	ldi	r24, 0x30	; 48
    2cbe:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2cc2:	80 91 c0 00 	lds	r24, 0x00C0
    2cc6:	85 ff       	sbrs	r24, 5
    2cc8:	fc cf       	rjmp	.-8      	; 0x2cc2 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    2cca:	88 e7       	ldi	r24, 0x78	; 120
    2ccc:	80 93 c6 00 	sts	0x00C6, r24
    2cd0:	10 e0       	ldi	r17, 0x00	; 0
    2cd2:	1f c0       	rjmp	.+62     	; 0x2d12 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    2cd4:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    2cd6:	db 01       	movw	r26, r22
    2cd8:	ca 01       	movw	r24, r20
    2cda:	0e 2e       	mov	r0, r30
    2cdc:	04 c0       	rjmp	.+8      	; 0x2ce6 <UART_Transmit_Byte_Hex+0x74>
    2cde:	b6 95       	lsr	r27
    2ce0:	a7 95       	ror	r26
    2ce2:	97 95       	ror	r25
    2ce4:	87 95       	ror	r24
    2ce6:	0a 94       	dec	r0
    2ce8:	d2 f7       	brpl	.-12     	; 0x2cde <UART_Transmit_Byte_Hex+0x6c>
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	8f 70       	andi	r24, 0x0F	; 15
    2cee:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    2cf0:	8a 30       	cpi	r24, 0x0A	; 10
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	20 f0       	brcs	.+8      	; 0x2cfe <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    2cf6:	9c 01       	movw	r18, r24
    2cf8:	29 5c       	subi	r18, 0xC9	; 201
    2cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    2cfe:	9c 01       	movw	r18, r24
    2d00:	20 5d       	subi	r18, 0xD0	; 208
    2d02:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d04:	80 91 c0 00 	lds	r24, 0x00C0
    2d08:	85 ff       	sbrs	r24, 5
    2d0a:	fc cf       	rjmp	.-8      	; 0x2d04 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    2d0c:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    2d10:	1f 5f       	subi	r17, 0xFF	; 255
    2d12:	81 2f       	mov	r24, r17
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	8c 17       	cp	r24, r28
    2d18:	9d 07       	cpc	r25, r29
    2d1a:	e0 f2       	brcs	.-72     	; 0x2cd4 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	08 95       	ret

00002d24 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    2d24:	cf 92       	push	r12
    2d26:	df 92       	push	r13
    2d28:	ef 92       	push	r14
    2d2a:	ff 92       	push	r15
    2d2c:	0f 93       	push	r16
    2d2e:	1f 93       	push	r17
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	ab 01       	movw	r20, r22
    2d36:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    2d38:	4f 3f       	cpi	r20, 0xFF	; 255
    2d3a:	51 05       	cpc	r21, r1
    2d3c:	61 05       	cpc	r22, r1
    2d3e:	71 05       	cpc	r23, r1
    2d40:	09 f0       	breq	.+2      	; 0x2d44 <UART_Transmit_Byte_Bin+0x20>
    2d42:	10 f4       	brcc	.+4      	; 0x2d48 <UART_Transmit_Byte_Bin+0x24>
    2d44:	97 e0       	ldi	r25, 0x07	; 7
    2d46:	0b c0       	rjmp	.+22     	; 0x2d5e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    2d48:	40 30       	cpi	r20, 0x00	; 0
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	58 07       	cpc	r21, r24
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	68 07       	cpc	r22, r24
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	78 07       	cpc	r23, r24
    2d56:	10 f0       	brcs	.+4      	; 0x2d5c <UART_Transmit_Byte_Bin+0x38>
    2d58:	9f e1       	ldi	r25, 0x1F	; 31
    2d5a:	01 c0       	rjmp	.+2      	; 0x2d5e <UART_Transmit_Byte_Bin+0x3a>
    2d5c:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d5e:	80 91 c0 00 	lds	r24, 0x00C0
    2d62:	85 ff       	sbrs	r24, 5
    2d64:	fc cf       	rjmp	.-8      	; 0x2d5e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    2d66:	80 e3       	ldi	r24, 0x30	; 48
    2d68:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d6c:	80 91 c0 00 	lds	r24, 0x00C0
    2d70:	85 ff       	sbrs	r24, 5
    2d72:	fc cf       	rjmp	.-8      	; 0x2d6c <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    2d74:	82 e6       	ldi	r24, 0x62	; 98
    2d76:	80 93 c6 00 	sts	0x00C6, r24
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    2d7e:	e9 2f       	mov	r30, r25
    2d80:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2d82:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2d84:	11 e3       	ldi	r17, 0x31	; 49
    2d86:	ef 01       	movw	r28, r30
    2d88:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    2d8a:	cf 01       	movw	r24, r30
    2d8c:	82 1b       	sub	r24, r18
    2d8e:	93 0b       	sbc	r25, r19
    2d90:	6a 01       	movw	r12, r20
    2d92:	7b 01       	movw	r14, r22
    2d94:	04 c0       	rjmp	.+8      	; 0x2d9e <UART_Transmit_Byte_Bin+0x7a>
    2d96:	f6 94       	lsr	r15
    2d98:	e7 94       	ror	r14
    2d9a:	d7 94       	ror	r13
    2d9c:	c7 94       	ror	r12
    2d9e:	8a 95       	dec	r24
    2da0:	d2 f7       	brpl	.-12     	; 0x2d96 <UART_Transmit_Byte_Bin+0x72>
    2da2:	d7 01       	movw	r26, r14
    2da4:	c6 01       	movw	r24, r12
    2da6:	81 70       	andi	r24, 0x01	; 1
    2da8:	90 70       	andi	r25, 0x00	; 0
    2daa:	89 2b       	or	r24, r25
    2dac:	39 f0       	breq	.+14     	; 0x2dbc <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dae:	80 91 c0 00 	lds	r24, 0x00C0
    2db2:	85 ff       	sbrs	r24, 5
    2db4:	fc cf       	rjmp	.-8      	; 0x2dae <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    2db6:	10 93 c6 00 	sts	0x00C6, r17
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dbc:	80 91 c0 00 	lds	r24, 0x00C0
    2dc0:	85 ff       	sbrs	r24, 5
    2dc2:	fc cf       	rjmp	.-8      	; 0x2dbc <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    2dc4:	00 93 c6 00 	sts	0x00C6, r16
    2dc8:	2f 5f       	subi	r18, 0xFF	; 255
    2dca:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2dcc:	2c 17       	cp	r18, r28
    2dce:	3d 07       	cpc	r19, r29
    2dd0:	e1 f6       	brne	.-72     	; 0x2d8a <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	1f 91       	pop	r17
    2dd8:	0f 91       	pop	r16
    2dda:	ff 90       	pop	r15
    2ddc:	ef 90       	pop	r14
    2dde:	df 90       	pop	r13
    2de0:	cf 90       	pop	r12
    2de2:	08 95       	ret

00002de4 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    2de4:	ac 01       	movw	r20, r24
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dea:	80 91 c0 00 	lds	r24, 0x00C0
    2dee:	85 ff       	sbrs	r24, 5
    2df0:	fc cf       	rjmp	.-8      	; 0x2dea <UART_Transmit_Text+0x6>
  UDR0=val;
    2df2:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    2df6:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    2df8:	fa 01       	movw	r30, r20
    2dfa:	e2 0f       	add	r30, r18
    2dfc:	f1 1d       	adc	r31, r1
    2dfe:	e0 81       	ld	r30, Z
    2e00:	ee 23       	and	r30, r30
    2e02:	99 f7       	brne	.-26     	; 0x2dea <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    2e04:	08 95       	ret

00002e06 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    2e06:	8f e0       	ldi	r24, 0x0F	; 15
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <UART_Transmit_Text>
}
    2e0e:	08 95       	ret

00002e10 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    2e10:	82 e1       	ldi	r24, 0x12	; 18
    2e12:	91 e0       	ldi	r25, 0x01	; 1
    2e14:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <UART_Transmit_Text>
}
    2e18:	08 95       	ret

00002e1a <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	6b 01       	movw	r12, r22
    2e2a:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    2e2c:	61 15       	cp	r22, r1
    2e2e:	71 05       	cpc	r23, r1
    2e30:	81 05       	cpc	r24, r1
    2e32:	91 05       	cpc	r25, r1
    2e34:	31 f4       	brne	.+12     	; 0x2e42 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    2e36:	10 92 15 01 	sts	0x0115, r1
    UART.InputNumberDigits=1;
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	80 93 1d 01 	sts	0x011D, r24
    2e40:	23 c0       	rjmp	.+70     	; 0x2e88 <UART_Determine_Digit_Numbers+0x6e>
    2e42:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    2e44:	0b 2d       	mov	r16, r11
    2e46:	10 e0       	ldi	r17, 0x00	; 0
    2e48:	0c 5e       	subi	r16, 0xEC	; 236
    2e4a:	1e 4f       	sbci	r17, 0xFE	; 254
    2e4c:	c7 01       	movw	r24, r14
    2e4e:	b6 01       	movw	r22, r12
    2e50:	2a e0       	ldi	r18, 0x0A	; 10
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e0       	ldi	r20, 0x00	; 0
    2e56:	50 e0       	ldi	r21, 0x00	; 0
    2e58:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodsi4>
    2e5c:	f8 01       	movw	r30, r16
    2e5e:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    2e60:	c7 01       	movw	r24, r14
    2e62:	b6 01       	movw	r22, r12
    2e64:	2a e0       	ldi	r18, 0x0A	; 10
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e0       	ldi	r20, 0x00	; 0
    2e6a:	50 e0       	ldi	r21, 0x00	; 0
    2e6c:	0e 94 37 18 	call	0x306e	; 0x306e <__udivmodsi4>
    2e70:	c9 01       	movw	r24, r18
    2e72:	da 01       	movw	r26, r20
    2e74:	6c 01       	movw	r12, r24
    2e76:	7d 01       	movw	r14, r26
      i++;
    2e78:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    2e7a:	c1 14       	cp	r12, r1
    2e7c:	d1 04       	cpc	r13, r1
    2e7e:	e1 04       	cpc	r14, r1
    2e80:	f1 04       	cpc	r15, r1
    2e82:	01 f7       	brne	.-64     	; 0x2e44 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    2e84:	b0 92 1d 01 	sts	0x011D, r11
  }
}
    2e88:	1f 91       	pop	r17
    2e8a:	0f 91       	pop	r16
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	bf 90       	pop	r11
    2e96:	08 95       	ret

00002e98 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2e98:	e0 91 1d 01 	lds	r30, 0x011D
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    2e9e:	2e 2f       	mov	r18, r30
    2ea0:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    2ea2:	e2 2f       	mov	r30, r18
    2ea4:	f0 e0       	ldi	r31, 0x00	; 0
    2ea6:	ec 5e       	subi	r30, 0xEC	; 236
    2ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eaa:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2eac:	80 91 c0 00 	lds	r24, 0x00C0
    2eb0:	85 ff       	sbrs	r24, 5
    2eb2:	fc cf       	rjmp	.-8      	; 0x2eac <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    2eb4:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2eb6:	90 93 c6 00 	sts	0x00C6, r25
    2eba:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2ebc:	ee 23       	and	r30, r30
    2ebe:	79 f7       	brne	.-34     	; 0x2e9e <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    2ec0:	08 95       	ret

00002ec2 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    2ec2:	9b 01       	movw	r18, r22
    2ec4:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2ec6:	97 ff       	sbrs	r25, 7
    2ec8:	0e c0       	rjmp	.+28     	; 0x2ee6 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2eca:	80 91 c0 00 	lds	r24, 0x00C0
    2ece:	85 ff       	sbrs	r24, 5
    2ed0:	fc cf       	rjmp	.-8      	; 0x2eca <UART_Transmit_Number+0x8>
  UDR0=val;
    2ed2:	8d e2       	ldi	r24, 0x2D	; 45
    2ed4:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2ed8:	50 95       	com	r21
    2eda:	40 95       	com	r20
    2edc:	30 95       	com	r19
    2ede:	21 95       	neg	r18
    2ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ee4:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    2ee6:	ca 01       	movw	r24, r20
    2ee8:	b9 01       	movw	r22, r18
    2eea:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    2eee:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <UART_Transmit_Number_Digits>
}
    2ef2:	08 95       	ret

00002ef4 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	ec 5e       	subi	r30, 0xEC	; 236
    2ef8:	fe 4f       	sbci	r31, 0xFE	; 254
    2efa:	83 85       	ldd	r24, Z+11	; 0x0b
}
    2efc:	08 95       	ret

00002efe <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
    2efe:	20 91 41 01 	lds	r18, 0x0141
    2f02:	30 91 42 01 	lds	r19, 0x0142
}
    2f06:	c9 01       	movw	r24, r18
    2f08:	08 95       	ret

00002f0a <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
    2f0a:	10 92 14 01 	sts	0x0114, r1
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	06 c0       	rjmp	.+12     	; 0x2f20 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
    2f14:	f9 01       	movw	r30, r18
    2f16:	ec 5e       	subi	r30, 0xEC	; 236
    2f18:	fe 4f       	sbci	r31, 0xFE	; 254
    2f1a:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
    2f1c:	2f 5f       	subi	r18, 0xFF	; 255
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	80 91 3f 01 	lds	r24, 0x013F
    2f24:	90 91 40 01 	lds	r25, 0x0140
    2f28:	28 17       	cp	r18, r24
    2f2a:	39 07       	cpc	r19, r25
    2f2c:	98 f3       	brcs	.-26     	; 0x2f14 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
    2f2e:	10 92 42 01 	sts	0x0142, r1
    2f32:	10 92 41 01 	sts	0x0141, r1
  #endif
}
    2f36:	08 95       	ret

00002f38 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	0f 92       	push	r0
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
    2f42:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
    2f44:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <UART_Receive_Byte>
    2f48:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
    2f4a:	80 91 14 01 	lds	r24, 0x0114
    2f4e:	88 23       	and	r24, r24
    2f50:	19 f5       	brne	.+70     	; 0x2f98 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	80 93 1e 01 	sts	0x011E, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
    2f58:	e0 91 41 01 	lds	r30, 0x0141
    2f5c:	f0 91 42 01 	lds	r31, 0x0142
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	ec 5e       	subi	r30, 0xEC	; 236
    2f64:	fe 4f       	sbci	r31, 0xFE	; 254
    2f66:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
    2f68:	80 91 41 01 	lds	r24, 0x0141
    2f6c:	90 91 42 01 	lds	r25, 0x0142
    2f70:	01 96       	adiw	r24, 0x01	; 1
    2f72:	90 93 42 01 	sts	0x0142, r25
    2f76:	80 93 41 01 	sts	0x0141, r24

    if(UART.BufferIndex>=UART.BufferSize){
    2f7a:	20 91 41 01 	lds	r18, 0x0141
    2f7e:	30 91 42 01 	lds	r19, 0x0142
    2f82:	80 91 3f 01 	lds	r24, 0x013F
    2f86:	90 91 40 01 	lds	r25, 0x0140
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	20 f0       	brcs	.+8      	; 0x2f98 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
    2f90:	10 92 42 01 	sts	0x0142, r1
    2f94:	10 92 41 01 	sts	0x0141, r1
    }
  }
}
    2f98:	0f 90       	pop	r0
    2f9a:	cf 91       	pop	r28
    2f9c:	df 91       	pop	r29
    2f9e:	08 95       	ret

00002fa0 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	2f 93       	push	r18
    2fac:	3f 93       	push	r19
    2fae:	4f 93       	push	r20
    2fb0:	5f 93       	push	r21
    2fb2:	6f 93       	push	r22
    2fb4:	7f 93       	push	r23
    2fb6:	8f 93       	push	r24
    2fb8:	9f 93       	push	r25
    2fba:	af 93       	push	r26
    2fbc:	bf 93       	push	r27
    2fbe:	ef 93       	push	r30
    2fc0:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
    2fc2:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <UART_Interrupt_Service_Routine>
}
    2fc6:	ff 91       	pop	r31
    2fc8:	ef 91       	pop	r30
    2fca:	bf 91       	pop	r27
    2fcc:	af 91       	pop	r26
    2fce:	9f 91       	pop	r25
    2fd0:	8f 91       	pop	r24
    2fd2:	7f 91       	pop	r23
    2fd4:	6f 91       	pop	r22
    2fd6:	5f 91       	pop	r21
    2fd8:	4f 91       	pop	r20
    2fda:	3f 91       	pop	r19
    2fdc:	2f 91       	pop	r18
    2fde:	0f 90       	pop	r0
    2fe0:	0f be       	out	0x3f, r0	; 63
    2fe2:	0f 90       	pop	r0
    2fe4:	1f 90       	pop	r1
    2fe6:	18 95       	reti

00002fe8 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	7b 01       	movw	r14, r22
    2ff2:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    2ff4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    2ff8:	c8 01       	movw	r24, r16
    2ffa:	b7 01       	movw	r22, r14
    2ffc:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    3000:	e1 ec       	ldi	r30, 0xC1	; 193
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	88 60       	ori	r24, 0x08	; 8
    3008:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    300a:	a2 ec       	ldi	r26, 0xC2	; 194
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	96 e0       	ldi	r25, 0x06	; 6
    3010:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    3012:	80 81       	ld	r24, Z
    3014:	80 61       	ori	r24, 0x10	; 16
    3016:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    3018:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    301a:	80 81       	ld	r24, Z
    301c:	80 68       	ori	r24, 0x80	; 128
    301e:	80 83       	st	Z, r24
  sei();
    3020:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
    3022:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <UART_Flush_Buffer>
}
    3026:	1f 91       	pop	r17
    3028:	0f 91       	pop	r16
    302a:	ff 90       	pop	r15
    302c:	ef 90       	pop	r14
    302e:	08 95       	ret

00003030 <__mulsi3>:
    3030:	62 9f       	mul	r22, r18
    3032:	d0 01       	movw	r26, r0
    3034:	73 9f       	mul	r23, r19
    3036:	f0 01       	movw	r30, r0
    3038:	82 9f       	mul	r24, r18
    303a:	e0 0d       	add	r30, r0
    303c:	f1 1d       	adc	r31, r1
    303e:	64 9f       	mul	r22, r20
    3040:	e0 0d       	add	r30, r0
    3042:	f1 1d       	adc	r31, r1
    3044:	92 9f       	mul	r25, r18
    3046:	f0 0d       	add	r31, r0
    3048:	83 9f       	mul	r24, r19
    304a:	f0 0d       	add	r31, r0
    304c:	74 9f       	mul	r23, r20
    304e:	f0 0d       	add	r31, r0
    3050:	65 9f       	mul	r22, r21
    3052:	f0 0d       	add	r31, r0
    3054:	99 27       	eor	r25, r25
    3056:	72 9f       	mul	r23, r18
    3058:	b0 0d       	add	r27, r0
    305a:	e1 1d       	adc	r30, r1
    305c:	f9 1f       	adc	r31, r25
    305e:	63 9f       	mul	r22, r19
    3060:	b0 0d       	add	r27, r0
    3062:	e1 1d       	adc	r30, r1
    3064:	f9 1f       	adc	r31, r25
    3066:	bd 01       	movw	r22, r26
    3068:	cf 01       	movw	r24, r30
    306a:	11 24       	eor	r1, r1
    306c:	08 95       	ret

0000306e <__udivmodsi4>:
    306e:	a1 e2       	ldi	r26, 0x21	; 33
    3070:	1a 2e       	mov	r1, r26
    3072:	aa 1b       	sub	r26, r26
    3074:	bb 1b       	sub	r27, r27
    3076:	fd 01       	movw	r30, r26
    3078:	0d c0       	rjmp	.+26     	; 0x3094 <__udivmodsi4_ep>

0000307a <__udivmodsi4_loop>:
    307a:	aa 1f       	adc	r26, r26
    307c:	bb 1f       	adc	r27, r27
    307e:	ee 1f       	adc	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	a2 17       	cp	r26, r18
    3084:	b3 07       	cpc	r27, r19
    3086:	e4 07       	cpc	r30, r20
    3088:	f5 07       	cpc	r31, r21
    308a:	20 f0       	brcs	.+8      	; 0x3094 <__udivmodsi4_ep>
    308c:	a2 1b       	sub	r26, r18
    308e:	b3 0b       	sbc	r27, r19
    3090:	e4 0b       	sbc	r30, r20
    3092:	f5 0b       	sbc	r31, r21

00003094 <__udivmodsi4_ep>:
    3094:	66 1f       	adc	r22, r22
    3096:	77 1f       	adc	r23, r23
    3098:	88 1f       	adc	r24, r24
    309a:	99 1f       	adc	r25, r25
    309c:	1a 94       	dec	r1
    309e:	69 f7       	brne	.-38     	; 0x307a <__udivmodsi4_loop>
    30a0:	60 95       	com	r22
    30a2:	70 95       	com	r23
    30a4:	80 95       	com	r24
    30a6:	90 95       	com	r25
    30a8:	9b 01       	movw	r18, r22
    30aa:	ac 01       	movw	r20, r24
    30ac:	bd 01       	movw	r22, r26
    30ae:	cf 01       	movw	r24, r30
    30b0:	08 95       	ret

000030b2 <__divmodsi4>:
    30b2:	97 fb       	bst	r25, 7
    30b4:	09 2e       	mov	r0, r25
    30b6:	05 26       	eor	r0, r21
    30b8:	0e d0       	rcall	.+28     	; 0x30d6 <__divmodsi4_neg1>
    30ba:	57 fd       	sbrc	r21, 7
    30bc:	04 d0       	rcall	.+8      	; 0x30c6 <__divmodsi4_neg2>
    30be:	d7 df       	rcall	.-82     	; 0x306e <__udivmodsi4>
    30c0:	0a d0       	rcall	.+20     	; 0x30d6 <__divmodsi4_neg1>
    30c2:	00 1c       	adc	r0, r0
    30c4:	38 f4       	brcc	.+14     	; 0x30d4 <__divmodsi4_exit>

000030c6 <__divmodsi4_neg2>:
    30c6:	50 95       	com	r21
    30c8:	40 95       	com	r20
    30ca:	30 95       	com	r19
    30cc:	21 95       	neg	r18
    30ce:	3f 4f       	sbci	r19, 0xFF	; 255
    30d0:	4f 4f       	sbci	r20, 0xFF	; 255
    30d2:	5f 4f       	sbci	r21, 0xFF	; 255

000030d4 <__divmodsi4_exit>:
    30d4:	08 95       	ret

000030d6 <__divmodsi4_neg1>:
    30d6:	f6 f7       	brtc	.-4      	; 0x30d4 <__divmodsi4_exit>
    30d8:	90 95       	com	r25
    30da:	80 95       	com	r24
    30dc:	70 95       	com	r23
    30de:	61 95       	neg	r22
    30e0:	7f 4f       	sbci	r23, 0xFF	; 255
    30e2:	8f 4f       	sbci	r24, 0xFF	; 255
    30e4:	9f 4f       	sbci	r25, 0xFF	; 255
    30e6:	08 95       	ret

000030e8 <_exit>:
    30e8:	f8 94       	cli

000030ea <__stop_program>:
    30ea:	ff cf       	rjmp	.-2      	; 0x30ea <__stop_program>
