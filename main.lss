
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000009da  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800110  00800110  00000a7e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000544  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d79  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000045a  00000000  00000000  00001d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b13  00000000  00000000  000021f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a3  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006f2  00000000  00000000  0000369b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00003d8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 33       	cpi	r26, 0x31	; 49
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	71 ee       	ldi	r23, 0xE1	; 225
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 76 04 	call	0x8ec	; 0x8ec <UART_Init>
  Timebase_Init(1000);
  b2:	88 ee       	ldi	r24, 0xE8	; 232
  b4:	93 e0       	ldi	r25, 0x03	; 3
  b6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<0);
  ba:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
  bc:	58 98       	cbi	0x0b, 0	; 11
  be:	88 e8       	ldi	r24, 0x88	; 136
  c0:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	2c e2       	ldi	r18, 0x2C	; 44
  c4:	31 e0       	ldi	r19, 0x01	; 1
  c6:	f9 01       	movw	r30, r18
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x2a>

000000d2 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
  d2:	8c e1       	ldi	r24, 0x1C	; 28
  d4:	91 e0       	ldi	r25, 0x01	; 1
  d6:	90 93 1b 01 	sts	0x011B, r25
  da:	80 93 1a 01 	sts	0x011A, r24
  Timebase->Config.UpdateRate = 1;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	90 93 1d 01 	sts	0x011D, r25
  e6:	80 93 1c 01 	sts	0x011C, r24
  Timebase->Time.OVFUpdateValue=0;
  ea:	10 92 1e 01 	sts	0x011E, r1
  Timebase->Time.SubSecondsShadow = 0;
  ee:	10 92 2a 01 	sts	0x012A, r1
  f2:	10 92 29 01 	sts	0x0129, r1
  Timebase->Time.SecondsShadow = 0;
  f6:	10 92 2b 01 	sts	0x012B, r1
  fa:	10 92 2c 01 	sts	0x012C, r1
  fe:	10 92 2d 01 	sts	0x012D, r1
 102:	10 92 2e 01 	sts	0x012E, r1
  Timebase->Time.SubSeconds = 0;
 106:	10 92 24 01 	sts	0x0124, r1
 10a:	10 92 23 01 	sts	0x0123, r1
  Timebase->Time.Seconds = 0;
 10e:	10 92 25 01 	sts	0x0125, r1
 112:	10 92 26 01 	sts	0x0126, r1
 116:	10 92 27 01 	sts	0x0127, r1
 11a:	10 92 28 01 	sts	0x0128, r1
  Timebase->Time.VariablesSync = 0;
 11e:	10 92 2f 01 	sts	0x012F, r1
  Timebase->Time.LastSample = 0;
 122:	10 92 1f 01 	sts	0x011F, r1
 126:	10 92 20 01 	sts	0x0120, r1
 12a:	10 92 21 01 	sts	0x0121, r1
 12e:	10 92 22 01 	sts	0x0122, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
 132:	10 92 30 01 	sts	0x0130, r1
    Timebase->LPDownCounter[i].Value = 0;
    Timebase->LPDownCounter[i].PeriodValue = 0;
  }
  #endif
  
}
 136:	08 95       	ret

00000138 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
 138:	8f 92       	push	r8
 13a:	9f 92       	push	r9
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	df 93       	push	r29
 14c:	cf 93       	push	r28
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	2a 97       	sbiw	r28, 0x0a	; 10
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
 160:	de 01       	movw	r26, r28
 162:	11 96       	adiw	r26, 0x01	; 1
 164:	e0 e0       	ldi	r30, 0x00	; 0
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	01 90       	ld	r0, Z+
 16c:	0d 92       	st	X+, r0
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	e1 f7       	brne	.-8      	; 0x16a <Timebase_Timer_Config+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
 172:	94 01       	movw	r18, r8
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	7b e1       	ldi	r23, 0x1B	; 27
 17c:	87 eb       	ldi	r24, 0xB7	; 183
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divmodsi4>
 184:	b2 2e       	mov	r11, r18
 186:	c3 2e       	mov	r12, r19
 188:	d4 2e       	mov	r13, r20
 18a:	05 2f       	mov	r16, r21
 18c:	7e 01       	movw	r14, r28
 18e:	08 94       	sec
 190:	e1 1c       	adc	r14, r1
 192:	f1 1c       	adc	r15, r1
 194:	c9 01       	movw	r24, r18
 196:	da 01       	movw	r26, r20
 198:	9c 01       	movw	r18, r24
 19a:	ad 01       	movw	r20, r26
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	13 c0       	rjmp	.+38     	; 0x1c6 <Timebase_Timer_Config+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
 1a0:	f7 01       	movw	r30, r14
 1a2:	21 91       	ld	r18, Z+
 1a4:	31 91       	ld	r19, Z+
 1a6:	7f 01       	movw	r14, r30
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	6b 2d       	mov	r22, r11
 1ae:	7c 2d       	mov	r23, r12
 1b0:	8d 2d       	mov	r24, r13
 1b2:	90 2f       	mov	r25, r16
 1b4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__divmodsi4>
 1b8:	c9 01       	movw	r24, r18
 1ba:	da 01       	movw	r26, r20
 1bc:	9c 01       	movw	r18, r24
 1be:	ad 01       	movw	r20, r26
	clock_div_index++;
 1c0:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
 1c2:	15 30       	cpi	r17, 0x05	; 5
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <Timebase_Timer_Config+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
 1c6:	2f 3f       	cpi	r18, 0xFF	; 255
 1c8:	31 05       	cpc	r19, r1
 1ca:	41 05       	cpc	r20, r1
 1cc:	51 05       	cpc	r21, r1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <Timebase_Timer_Config+0x9a>
 1d0:	3c f7       	brge	.-50     	; 0x1a0 <Timebase_Timer_Config+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
 1d2:	81 2f       	mov	r24, r17
 1d4:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
 1d6:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
 1d8:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
 1da:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
 1de:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
 1e0:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
 1e2:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
 1e4:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
 1e6:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
 1e8:	88 23       	and	r24, r24
 1ea:	11 f4       	brne	.+4      	; 0x1f0 <Timebase_Timer_Config+0xb8>
	TCCR0B = (1<<CS00);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0f c0       	rjmp	.+30     	; 0x20e <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 1){
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <Timebase_Timer_Config+0xc0>
	TCCR0B = (1<<CS01);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0b c0       	rjmp	.+22     	; 0x20e <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 2){
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	11 f4       	brne	.+4      	; 0x200 <Timebase_Timer_Config+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	07 c0       	rjmp	.+14     	; 0x20e <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 3){
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	11 f4       	brne	.+4      	; 0x208 <Timebase_Timer_Config+0xd0>
	TCCR0B = (1<<CS02);
 204:	84 e0       	ldi	r24, 0x04	; 4
 206:	03 c0       	rjmp	.+6      	; 0x20e <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 4){
 208:	84 30       	cpi	r24, 0x04	; 4
 20a:	11 f4       	brne	.+4      	; 0x210 <Timebase_Timer_Config+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
 20c:	85 e0       	ldi	r24, 0x05	; 5
 20e:	85 bd       	out	0x25, r24	; 37
  }
	
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
 210:	e0 91 1a 01 	lds	r30, 0x011A
 214:	f0 91 1b 01 	lds	r31, 0x011B
 218:	82 2f       	mov	r24, r18
 21a:	80 95       	com	r24
 21c:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
 21e:	82 81       	ldd	r24, Z+2	; 0x02
 220:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 6e 00 	sts	0x006E, r24
  sei();
 228:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
 22a:	91 82       	std	Z+1, r9	; 0x01
 22c:	80 82       	st	Z, r8
}
 22e:	2a 96       	adiw	r28, 0x0a	; 10
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	cf 91       	pop	r28
 23c:	df 91       	pop	r29
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	bf 90       	pop	r11
 24c:	9f 90       	pop	r9
 24e:	8f 90       	pop	r8
 250:	08 95       	ret

00000252 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 252:	f8 94       	cli
}
 254:	08 95       	ret

00000256 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
 256:	78 94       	sei
}
 258:	08 95       	ret

0000025a <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
 25a:	e0 91 1a 01 	lds	r30, 0x011A
 25e:	f0 91 1b 01 	lds	r31, 0x011B
 262:	25 85       	ldd	r18, Z+13	; 0x0d
 264:	36 85       	ldd	r19, Z+14	; 0x0e
}
 266:	c9 01       	movw	r24, r18
 268:	08 95       	ret

0000026a <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
 26a:	e0 91 1a 01 	lds	r30, 0x011A
 26e:	f0 91 1b 01 	lds	r31, 0x011B
 272:	27 85       	ldd	r18, Z+15	; 0x0f
 274:	30 89       	ldd	r19, Z+16	; 0x10
 276:	41 89       	ldd	r20, Z+17	; 0x11
 278:	52 89       	ldd	r21, Z+18	; 0x12
}
 27a:	b9 01       	movw	r22, r18
 27c:	ca 01       	movw	r24, r20
 27e:	08 95       	ret

00000280 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
 280:	e0 91 1a 01 	lds	r30, 0x011A
 284:	f0 91 1b 01 	lds	r31, 0x011B
 288:	27 81       	ldd	r18, Z+7	; 0x07
 28a:	30 85       	ldd	r19, Z+8	; 0x08
}
 28c:	c9 01       	movw	r24, r18
 28e:	08 95       	ret

00000290 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
 290:	e0 91 1a 01 	lds	r30, 0x011A
 294:	f0 91 1b 01 	lds	r31, 0x011B
 298:	21 85       	ldd	r18, Z+9	; 0x09
 29a:	32 85       	ldd	r19, Z+10	; 0x0a
 29c:	43 85       	ldd	r20, Z+11	; 0x0b
 29e:	54 85       	ldd	r21, Z+12	; 0x0c
}
 2a0:	b9 01       	movw	r22, r18
 2a2:	ca 01       	movw	r24, r20
 2a4:	08 95       	ret

000002a6 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
 2a6:	e0 91 1a 01 	lds	r30, 0x011A
 2aa:	f0 91 1b 01 	lds	r31, 0x011B
 2ae:	90 87       	std	Z+8, r25	; 0x08
 2b0:	87 83       	std	Z+7, r24	; 0x07
}
 2b2:	08 95       	ret

000002b4 <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
 2b4:	e0 91 1a 01 	lds	r30, 0x011A
 2b8:	f0 91 1b 01 	lds	r31, 0x011B
 2bc:	61 87       	std	Z+9, r22	; 0x09
 2be:	72 87       	std	Z+10, r23	; 0x0a
 2c0:	83 87       	std	Z+11, r24	; 0x0b
 2c2:	94 87       	std	Z+12, r25	; 0x0c
}
 2c4:	08 95       	ret

000002c6 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
 2c6:	e0 91 1a 01 	lds	r30, 0x011A
 2ca:	f0 91 1b 01 	lds	r31, 0x011B
 2ce:	25 85       	ldd	r18, Z+13	; 0x0d
 2d0:	36 85       	ldd	r19, Z+14	; 0x0e
    tmp1 = Timebase->Time.SubSecondsShadow;
 2d2:	85 85       	ldd	r24, Z+13	; 0x0d
 2d4:	96 85       	ldd	r25, Z+14	; 0x0e
	if(tmp0 == tmp1){
 2d6:	28 17       	cp	r18, r24
 2d8:	39 07       	cpc	r19, r25
 2da:	c9 f7       	brne	.-14     	; 0x2ce <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
 2dc:	c9 01       	movw	r24, r18
 2de:	08 95       	ret

000002e0 <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
 2e0:	e0 91 1a 01 	lds	r30, 0x011A
 2e4:	f0 91 1b 01 	lds	r31, 0x011B
 2e8:	27 85       	ldd	r18, Z+15	; 0x0f
 2ea:	30 89       	ldd	r19, Z+16	; 0x10
 2ec:	41 89       	ldd	r20, Z+17	; 0x11
 2ee:	52 89       	ldd	r21, Z+18	; 0x12
    tmp1 = Timebase->Time.SecondsShadow;
 2f0:	87 85       	ldd	r24, Z+15	; 0x0f
 2f2:	90 89       	ldd	r25, Z+16	; 0x10
 2f4:	a1 89       	ldd	r26, Z+17	; 0x11
 2f6:	b2 89       	ldd	r27, Z+18	; 0x12
	if(tmp0 == tmp1){
 2f8:	28 17       	cp	r18, r24
 2fa:	39 07       	cpc	r19, r25
 2fc:	4a 07       	cpc	r20, r26
 2fe:	5b 07       	cpc	r21, r27
 300:	99 f7       	brne	.-26     	; 0x2e8 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
 302:	b9 01       	movw	r22, r18
 304:	ca 01       	movw	r24, r20
 306:	08 95       	ret

00000308 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
 308:	e0 91 1a 01 	lds	r30, 0x011A
 30c:	f0 91 1b 01 	lds	r31, 0x011B
 310:	83 89       	ldd	r24, Z+19	; 0x13
 312:	88 23       	and	r24, r24
 314:	81 f4       	brne	.+32     	; 0x336 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 316:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
 318:	85 85       	ldd	r24, Z+13	; 0x0d
 31a:	96 85       	ldd	r25, Z+14	; 0x0e
 31c:	90 87       	std	Z+8, r25	; 0x08
 31e:	87 83       	std	Z+7, r24	; 0x07
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
 320:	87 85       	ldd	r24, Z+15	; 0x0f
 322:	90 89       	ldd	r25, Z+16	; 0x10
 324:	a1 89       	ldd	r26, Z+17	; 0x11
 326:	b2 89       	ldd	r27, Z+18	; 0x12
 328:	81 87       	std	Z+9, r24	; 0x09
 32a:	92 87       	std	Z+10, r25	; 0x0a
 32c:	a3 87       	std	Z+11, r26	; 0x0b
 32e:	b4 87       	std	Z+12, r27	; 0x0c
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 330:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	83 8b       	std	Z+19, r24	; 0x13
 336:	08 95       	ret

00000338 <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
 338:	6f 92       	push	r6
 33a:	7f 92       	push	r7
 33c:	8f 92       	push	r8
 33e:	9f 92       	push	r9
 340:	af 92       	push	r10
 342:	bf 92       	push	r11
 344:	cf 92       	push	r12
 346:	df 92       	push	r13
 348:	ef 92       	push	r14
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 356:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
 358:	c0 91 1a 01 	lds	r28, 0x011A
 35c:	d0 91 1b 01 	lds	r29, 0x011B
 360:	ed 84       	ldd	r14, Y+13	; 0x0d
 362:	fe 84       	ldd	r15, Y+14	; 0x0e
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
 364:	2f 85       	ldd	r18, Y+15	; 0x0f
 366:	38 89       	ldd	r19, Y+16	; 0x10
 368:	49 89       	ldd	r20, Y+17	; 0x11
 36a:	5a 89       	ldd	r21, Y+18	; 0x12
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 36c:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
 36e:	68 81       	ld	r22, Y
 370:	79 81       	ldd	r23, Y+1	; 0x01
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsi3>
 37a:	3b 01       	movw	r6, r22
 37c:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
 37e:	00 e0       	ldi	r16, 0x00	; 0
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	6e 0c       	add	r6, r14
 384:	7f 1c       	adc	r7, r15
 386:	80 1e       	adc	r8, r16
 388:	91 1e       	adc	r9, r17
  smpl_val += value;
 38a:	cc 24       	eor	r12, r12
 38c:	dd 24       	eor	r13, r13
 38e:	6a 0c       	add	r6, r10
 390:	7b 1c       	adc	r7, r11
 392:	8c 1c       	adc	r8, r12
 394:	9d 1c       	adc	r9, r13
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	14 c0       	rjmp	.+40     	; 0x3c8 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 3a0:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
 3a2:	ed 84       	ldd	r14, Y+13	; 0x0d
 3a4:	fe 84       	ldd	r15, Y+14	; 0x0e
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
 3a6:	2f 85       	ldd	r18, Y+15	; 0x0f
 3a8:	38 89       	ldd	r19, Y+16	; 0x10
 3aa:	49 89       	ldd	r20, Y+17	; 0x11
 3ac:	5a 89       	ldd	r21, Y+18	; 0x12
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 3ae:	78 94       	sei
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
 3b0:	68 81       	ld	r22, Y
 3b2:	79 81       	ldd	r23, Y+1	; 0x01
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 8f 04 	call	0x91e	; 0x91e <__mulsi3>
	curr_val += curr_ss;
 3bc:	00 e0       	ldi	r16, 0x00	; 0
 3be:	10 e0       	ldi	r17, 0x00	; 0
 3c0:	6e 0d       	add	r22, r14
 3c2:	7f 1d       	adc	r23, r15
 3c4:	80 1f       	adc	r24, r16
 3c6:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
 3c8:	66 15       	cp	r22, r6
 3ca:	77 05       	cpc	r23, r7
 3cc:	88 05       	cpc	r24, r8
 3ce:	99 05       	cpc	r25, r9
 3d0:	3c f3       	brlt	.-50     	; 0x3a0 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	9f 90       	pop	r9
 3e8:	8f 90       	pop	r8
 3ea:	7f 90       	pop	r7
 3ec:	6f 90       	pop	r6
 3ee:	08 95       	ret

000003f0 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
 3f0:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 3f2:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
 3f4:	e0 91 1a 01 	lds	r30, 0x011A
 3f8:	f0 91 1b 01 	lds	r31, 0x011B
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 3fe:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
 400:	85 85       	ldd	r24, Z+13	; 0x0d
 402:	96 85       	ldd	r25, Z+14	; 0x0e
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 404:	78 94       	sei
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
 406:	23 81       	ldd	r18, Z+3	; 0x03
 408:	34 81       	ldd	r19, Z+4	; 0x04
 40a:	45 81       	ldd	r20, Z+5	; 0x05
 40c:	56 81       	ldd	r21, Z+6	; 0x06
 40e:	a0 e0       	ldi	r26, 0x00	; 0
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	82 17       	cp	r24, r18
 414:	93 07       	cpc	r25, r19
 416:	a4 07       	cpc	r26, r20
 418:	b5 07       	cpc	r27, r21
 41a:	89 f7       	brne	.-30     	; 0x3fe <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 41c:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
 41e:	85 85       	ldd	r24, Z+13	; 0x0d
 420:	96 85       	ldd	r25, Z+14	; 0x0e
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 422:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
 424:	a0 e0       	ldi	r26, 0x00	; 0
 426:	b0 e0       	ldi	r27, 0x00	; 0
 428:	83 83       	std	Z+3, r24	; 0x03
 42a:	94 83       	std	Z+4, r25	; 0x04
 42c:	a5 83       	std	Z+5, r26	; 0x05
 42e:	b6 83       	std	Z+6, r27	; 0x06
  Timebase->Time.LastSample += value;
 430:	23 81       	ldd	r18, Z+3	; 0x03
 432:	34 81       	ldd	r19, Z+4	; 0x04
 434:	45 81       	ldd	r20, Z+5	; 0x05
 436:	56 81       	ldd	r21, Z+6	; 0x06
 438:	cb 01       	movw	r24, r22
 43a:	a0 e0       	ldi	r26, 0x00	; 0
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	82 0f       	add	r24, r18
 440:	93 1f       	adc	r25, r19
 442:	a4 1f       	adc	r26, r20
 444:	b5 1f       	adc	r27, r21
 446:	83 83       	std	Z+3, r24	; 0x03
 448:	94 83       	std	Z+4, r25	; 0x04
 44a:	a5 83       	std	Z+5, r26	; 0x05
 44c:	b6 83       	std	Z+6, r27	; 0x06
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
 44e:	23 81       	ldd	r18, Z+3	; 0x03
 450:	34 81       	ldd	r19, Z+4	; 0x04
 452:	45 81       	ldd	r20, Z+5	; 0x05
 454:	56 81       	ldd	r21, Z+6	; 0x06
 456:	80 81       	ld	r24, Z
 458:	91 81       	ldd	r25, Z+1	; 0x01
 45a:	a0 e0       	ldi	r26, 0x00	; 0
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	28 17       	cp	r18, r24
 460:	39 07       	cpc	r19, r25
 462:	4a 07       	cpc	r20, r26
 464:	5b 07       	cpc	r21, r27
 466:	84 f0       	brlt	.+32     	; 0x488 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
 468:	23 81       	ldd	r18, Z+3	; 0x03
 46a:	34 81       	ldd	r19, Z+4	; 0x04
 46c:	45 81       	ldd	r20, Z+5	; 0x05
 46e:	56 81       	ldd	r21, Z+6	; 0x06
 470:	80 81       	ld	r24, Z
 472:	91 81       	ldd	r25, Z+1	; 0x01
 474:	a0 e0       	ldi	r26, 0x00	; 0
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	28 1b       	sub	r18, r24
 47a:	39 0b       	sbc	r19, r25
 47c:	4a 0b       	sbc	r20, r26
 47e:	5b 0b       	sbc	r21, r27
 480:	23 83       	std	Z+3, r18	; 0x03
 482:	34 83       	std	Z+4, r19	; 0x04
 484:	45 83       	std	Z+5, r20	; 0x05
 486:	56 83       	std	Z+6, r21	; 0x06
 488:	08 95       	ret

0000048a <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 48a:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
 48c:	e0 91 1a 01 	lds	r30, 0x011A
 490:	f0 91 1b 01 	lds	r31, 0x011B
 494:	27 85       	ldd	r18, Z+15	; 0x0f
 496:	30 89       	ldd	r19, Z+16	; 0x10
 498:	41 89       	ldd	r20, Z+17	; 0x11
 49a:	52 89       	ldd	r21, Z+18	; 0x12
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 49c:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
 49e:	a0 e0       	ldi	r26, 0x00	; 0
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	82 0f       	add	r24, r18
 4a4:	93 1f       	adc	r25, r19
 4a6:	a4 1f       	adc	r26, r20
 4a8:	b5 1f       	adc	r27, r21
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
 4b4:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
 4b6:	27 85       	ldd	r18, Z+15	; 0x0f
 4b8:	30 89       	ldd	r19, Z+16	; 0x10
 4ba:	41 89       	ldd	r20, Z+17	; 0x11
 4bc:	52 89       	ldd	r21, Z+18	; 0x12
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
 4be:	78 94       	sei
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
 4c0:	28 17       	cp	r18, r24
 4c2:	39 07       	cpc	r19, r25
 4c4:	4a 07       	cpc	r20, r26
 4c6:	5b 07       	cpc	r21, r27
 4c8:	ac f3       	brlt	.-22     	; 0x4b4 <Timebase_Timer_Delay_Seconds+0x2a>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
 4ca:	08 95       	ret

000004cc <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
 4cc:	e0 91 1a 01 	lds	r30, 0x011A
 4d0:	f0 91 1b 01 	lds	r31, 0x011B
 4d4:	84 89       	ldd	r24, Z+20	; 0x14
}
 4d6:	08 95       	ret

000004d8 <Timebase_Reset>:
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
 4d8:	08 95       	ret

000004da <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
 4da:	08 95       	ret

000004dc <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
 4dc:	0f 93       	push	r16
 4de:	1f 93       	push	r17
 4e0:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
 4e2:	0e 94 69 00 	call	0xd2	; 0xd2 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
 4e6:	c8 01       	movw	r24, r16
 4e8:	0e 94 9c 00 	call	0x138	; 0x138 <Timebase_Timer_Config>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Config(1);
  Timebase_LP_Reset();
  #endif
  
}
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <Timebase_Main_Loop_Executables>:
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
 4f2:	e0 91 1a 01 	lds	r30, 0x011A
 4f6:	f0 91 1b 01 	lds	r31, 0x011B
 4fa:	13 8a       	std	Z+19, r1	; 0x13
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
 4fc:	08 95       	ret

000004fe <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
 4fe:	e0 91 1a 01 	lds	r30, 0x011A
 502:	f0 91 1b 01 	lds	r31, 0x011B
 506:	85 85       	ldd	r24, Z+13	; 0x0d
 508:	96 85       	ldd	r25, Z+14	; 0x0e
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	96 87       	std	Z+14, r25	; 0x0e
 50e:	85 87       	std	Z+13, r24	; 0x0d
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
 510:	25 85       	ldd	r18, Z+13	; 0x0d
 512:	36 85       	ldd	r19, Z+14	; 0x0e
 514:	80 81       	ld	r24, Z
 516:	91 81       	ldd	r25, Z+1	; 0x01
 518:	28 17       	cp	r18, r24
 51a:	39 07       	cpc	r19, r25
 51c:	68 f0       	brcs	.+26     	; 0x538 <Timebase_ISR_Executables+0x3a>
    Timebase->Time.SubSecondsShadow = 0;
 51e:	16 86       	std	Z+14, r1	; 0x0e
 520:	15 86       	std	Z+13, r1	; 0x0d
    Timebase->Time.SecondsShadow++;
 522:	87 85       	ldd	r24, Z+15	; 0x0f
 524:	90 89       	ldd	r25, Z+16	; 0x10
 526:	a1 89       	ldd	r26, Z+17	; 0x11
 528:	b2 89       	ldd	r27, Z+18	; 0x12
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	a1 1d       	adc	r26, r1
 52e:	b1 1d       	adc	r27, r1
 530:	87 87       	std	Z+15, r24	; 0x0f
 532:	90 8b       	std	Z+16, r25	; 0x10
 534:	a1 8b       	std	Z+17, r26	; 0x11
 536:	b2 8b       	std	Z+18, r27	; 0x12
 538:	08 95       	ret

0000053a <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
 55c:	e0 91 1a 01 	lds	r30, 0x011A
 560:	f0 91 1b 01 	lds	r31, 0x011B
 564:	82 81       	ldd	r24, Z+2	; 0x02
 566:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
 568:	0e 94 7f 02 	call	0x4fe	; 0x4fe <Timebase_ISR_Executables>
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	3f 91       	pop	r19
 582:	2f 91       	pop	r18
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
 58e:	08 95       	ret

00000590 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
 590:	10 92 10 01 	sts	0x0110, r1
 594:	e1 e1       	ldi	r30, 0x11	; 17
 596:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
 598:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	e9 31       	cpi	r30, 0x19	; 25
 59e:	f8 07       	cpc	r31, r24
 5a0:	d9 f7       	brne	.-10     	; 0x598 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
 5a2:	10 82       	st	Z, r1
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
  }
  #endif
  
}
 5a4:	08 95       	ret

000005a6 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
 5a6:	08 95       	ret

000005a8 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
 5a8:	08 95       	ret

000005aa <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
 5aa:	9b 01       	movw	r18, r22
 5ac:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
 5ae:	60 e6       	ldi	r22, 0x60	; 96
 5b0:	73 ee       	ldi	r23, 0xE3	; 227
 5b2:	86 e1       	ldi	r24, 0x16	; 22
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodsi4>
 5ba:	21 50       	subi	r18, 0x01	; 1
 5bc:	30 40       	sbci	r19, 0x00	; 0
 5be:	40 40       	sbci	r20, 0x00	; 0
 5c0:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
 5c2:	e0 ec       	ldi	r30, 0xC0	; 192
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	80 81       	ld	r24, Z
 5c8:	82 60       	ori	r24, 0x02	; 2
 5ca:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 5cc:	bb 27       	eor	r27, r27
 5ce:	a5 2f       	mov	r26, r21
 5d0:	94 2f       	mov	r25, r20
 5d2:	83 2f       	mov	r24, r19
 5d4:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 5d8:	20 93 c4 00 	sts	0x00C4, r18
}
 5dc:	08 95       	ret

000005de <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 5de:	e1 ec       	ldi	r30, 0xC1	; 193
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	88 60       	ori	r24, 0x08	; 8
 5e6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 5e8:	86 e0       	ldi	r24, 0x06	; 6
 5ea:	80 93 c2 00 	sts	0x00C2, r24
}
 5ee:	08 95       	ret

000005f0 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 5f0:	e1 ec       	ldi	r30, 0xC1	; 193
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	80 61       	ori	r24, 0x10	; 16
 5f8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	80 93 c2 00 	sts	0x00C2, r24
}
 600:	08 95       	ret

00000602 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 602:	e1 ec       	ldi	r30, 0xC1	; 193
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	80 68       	ori	r24, 0x80	; 128
 60a:	80 83       	st	Z, r24
  sei();
 60c:	78 94       	sei
}
 60e:	08 95       	ret

00000610 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
 610:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
 612:	80 91 c0 00 	lds	r24, 0x00C0
 616:	85 ff       	sbrs	r24, 5
 618:	fc cf       	rjmp	.-8      	; 0x612 <UART_Transmit_Byte+0x2>
  UDR0=val;
 61a:	90 93 c6 00 	sts	0x00C6, r25
}
 61e:	08 95       	ret

00000620 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 620:	df 93       	push	r29
 622:	cf 93       	push	r28
 624:	0f 92       	push	r0
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 62a:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
 62c:	80 91 c0 00 	lds	r24, 0x00C0
 630:	84 ff       	sbrs	r24, 4
 632:	05 c0       	rjmp	.+10     	; 0x63e <UART_Receive_Byte+0x1e>
    val=UDR0;
 634:	80 91 c6 00 	lds	r24, 0x00C6
 638:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 c0       	rjmp	.+16     	; 0x64e <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
 63e:	80 91 c0 00 	lds	r24, 0x00C0
 642:	83 ff       	sbrs	r24, 3
 644:	07 c0       	rjmp	.+14     	; 0x654 <UART_Receive_Byte+0x34>
    val=UDR0;
 646:	80 91 c6 00 	lds	r24, 0x00C6
 64a:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	80 93 10 01 	sts	0x0110, r24
 652:	05 c0       	rjmp	.+10     	; 0x65e <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
 654:	80 91 c6 00 	lds	r24, 0x00C6
 658:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 65a:	10 92 10 01 	sts	0x0110, r1
  }
  return val;
 65e:	89 81       	ldd	r24, Y+1	; 0x01
}
 660:	0f 90       	pop	r0
 662:	cf 91       	pop	r28
 664:	df 91       	pop	r29
 666:	08 95       	ret

00000668 <UART_Transmit_Byte_Hex>:
}
#endif



void UART_Transmit_Byte_Hex(uint32_t val){
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	ab 01       	movw	r20, r22
 670:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 672:	4f 3f       	cpi	r20, 0xFF	; 255
 674:	51 05       	cpc	r21, r1
 676:	61 05       	cpc	r22, r1
 678:	71 05       	cpc	r23, r1
 67a:	09 f0       	breq	.+2      	; 0x67e <UART_Transmit_Byte_Hex+0x16>
 67c:	28 f4       	brcc	.+10     	; 0x688 <UART_Transmit_Byte_Hex+0x20>
 67e:	e8 e0       	ldi	r30, 0x08	; 8
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	c2 e0       	ldi	r28, 0x02	; 2
 684:	d0 e0       	ldi	r29, 0x00	; 0
 686:	11 c0       	rjmp	.+34     	; 0x6aa <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 688:	40 30       	cpi	r20, 0x00	; 0
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	58 07       	cpc	r21, r24
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	68 07       	cpc	r22, r24
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	78 07       	cpc	r23, r24
 696:	28 f0       	brcs	.+10     	; 0x6a2 <UART_Transmit_Byte_Hex+0x3a>
 698:	e0 e2       	ldi	r30, 0x20	; 32
 69a:	f0 e0       	ldi	r31, 0x00	; 0
 69c:	c8 e0       	ldi	r28, 0x08	; 8
 69e:	d0 e0       	ldi	r29, 0x00	; 0
 6a0:	04 c0       	rjmp	.+8      	; 0x6aa <UART_Transmit_Byte_Hex+0x42>
 6a2:	e0 e1       	ldi	r30, 0x10	; 16
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	c4 e0       	ldi	r28, 0x04	; 4
 6a8:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 6aa:	80 91 c0 00 	lds	r24, 0x00C0
 6ae:	85 ff       	sbrs	r24, 5
 6b0:	fc cf       	rjmp	.-8      	; 0x6aa <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
 6b2:	80 e3       	ldi	r24, 0x30	; 48
 6b4:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 6b8:	80 91 c0 00 	lds	r24, 0x00C0
 6bc:	85 ff       	sbrs	r24, 5
 6be:	fc cf       	rjmp	.-8      	; 0x6b8 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
 6c0:	88 e7       	ldi	r24, 0x78	; 120
 6c2:	80 93 c6 00 	sts	0x00C6, r24
 6c6:	10 e0       	ldi	r17, 0x00	; 0
 6c8:	1f c0       	rjmp	.+62     	; 0x708 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 6ca:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 6cc:	db 01       	movw	r26, r22
 6ce:	ca 01       	movw	r24, r20
 6d0:	0e 2e       	mov	r0, r30
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <UART_Transmit_Byte_Hex+0x74>
 6d4:	b6 95       	lsr	r27
 6d6:	a7 95       	ror	r26
 6d8:	97 95       	ror	r25
 6da:	87 95       	ror	r24
 6dc:	0a 94       	dec	r0
 6de:	d2 f7       	brpl	.-12     	; 0x6d4 <UART_Transmit_Byte_Hex+0x6c>
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	8f 70       	andi	r24, 0x0F	; 15
 6e4:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 6e6:	8a 30       	cpi	r24, 0x0A	; 10
 6e8:	91 05       	cpc	r25, r1
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
 6ec:	9c 01       	movw	r18, r24
 6ee:	29 5c       	subi	r18, 0xC9	; 201
 6f0:	3f 4f       	sbci	r19, 0xFF	; 255
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
 6f4:	9c 01       	movw	r18, r24
 6f6:	20 5d       	subi	r18, 0xD0	; 208
 6f8:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 6fa:	80 91 c0 00 	lds	r24, 0x00C0
 6fe:	85 ff       	sbrs	r24, 5
 700:	fc cf       	rjmp	.-8      	; 0x6fa <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
 702:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 706:	1f 5f       	subi	r17, 0xFF	; 255
 708:	81 2f       	mov	r24, r17
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	8c 17       	cp	r24, r28
 70e:	9d 07       	cpc	r25, r29
 710:	e0 f2       	brcs	.-72     	; 0x6ca <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
 712:	df 91       	pop	r29
 714:	cf 91       	pop	r28
 716:	1f 91       	pop	r17
 718:	08 95       	ret

0000071a <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
 71a:	cf 92       	push	r12
 71c:	df 92       	push	r13
 71e:	ef 92       	push	r14
 720:	ff 92       	push	r15
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	ab 01       	movw	r20, r22
 72c:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 72e:	4f 3f       	cpi	r20, 0xFF	; 255
 730:	51 05       	cpc	r21, r1
 732:	61 05       	cpc	r22, r1
 734:	71 05       	cpc	r23, r1
 736:	09 f0       	breq	.+2      	; 0x73a <UART_Transmit_Byte_Bin+0x20>
 738:	10 f4       	brcc	.+4      	; 0x73e <UART_Transmit_Byte_Bin+0x24>
 73a:	97 e0       	ldi	r25, 0x07	; 7
 73c:	0b c0       	rjmp	.+22     	; 0x754 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 73e:	40 30       	cpi	r20, 0x00	; 0
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	58 07       	cpc	r21, r24
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	68 07       	cpc	r22, r24
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	78 07       	cpc	r23, r24
 74c:	10 f0       	brcs	.+4      	; 0x752 <UART_Transmit_Byte_Bin+0x38>
 74e:	9f e1       	ldi	r25, 0x1F	; 31
 750:	01 c0       	rjmp	.+2      	; 0x754 <UART_Transmit_Byte_Bin+0x3a>
 752:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 754:	80 91 c0 00 	lds	r24, 0x00C0
 758:	85 ff       	sbrs	r24, 5
 75a:	fc cf       	rjmp	.-8      	; 0x754 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
 75c:	80 e3       	ldi	r24, 0x30	; 48
 75e:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 762:	80 91 c0 00 	lds	r24, 0x00C0
 766:	85 ff       	sbrs	r24, 5
 768:	fc cf       	rjmp	.-8      	; 0x762 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
 76a:	82 e6       	ldi	r24, 0x62	; 98
 76c:	80 93 c6 00 	sts	0x00C6, r24
 770:	20 e0       	ldi	r18, 0x00	; 0
 772:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
 774:	e9 2f       	mov	r30, r25
 776:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 778:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 77a:	11 e3       	ldi	r17, 0x31	; 49
 77c:	ef 01       	movw	r28, r30
 77e:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
 780:	cf 01       	movw	r24, r30
 782:	82 1b       	sub	r24, r18
 784:	93 0b       	sbc	r25, r19
 786:	6a 01       	movw	r12, r20
 788:	7b 01       	movw	r14, r22
 78a:	04 c0       	rjmp	.+8      	; 0x794 <UART_Transmit_Byte_Bin+0x7a>
 78c:	f6 94       	lsr	r15
 78e:	e7 94       	ror	r14
 790:	d7 94       	ror	r13
 792:	c7 94       	ror	r12
 794:	8a 95       	dec	r24
 796:	d2 f7       	brpl	.-12     	; 0x78c <UART_Transmit_Byte_Bin+0x72>
 798:	d7 01       	movw	r26, r14
 79a:	c6 01       	movw	r24, r12
 79c:	81 70       	andi	r24, 0x01	; 1
 79e:	90 70       	andi	r25, 0x00	; 0
 7a0:	89 2b       	or	r24, r25
 7a2:	39 f0       	breq	.+14     	; 0x7b2 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 7a4:	80 91 c0 00 	lds	r24, 0x00C0
 7a8:	85 ff       	sbrs	r24, 5
 7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
 7ac:	10 93 c6 00 	sts	0x00C6, r17
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 7b2:	80 91 c0 00 	lds	r24, 0x00C0
 7b6:	85 ff       	sbrs	r24, 5
 7b8:	fc cf       	rjmp	.-8      	; 0x7b2 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
 7ba:	00 93 c6 00 	sts	0x00C6, r16
 7be:	2f 5f       	subi	r18, 0xFF	; 255
 7c0:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 7c2:	2c 17       	cp	r18, r28
 7c4:	3d 07       	cpc	r19, r29
 7c6:	e1 f6       	brne	.-72     	; 0x780 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	ff 90       	pop	r15
 7d2:	ef 90       	pop	r14
 7d4:	df 90       	pop	r13
 7d6:	cf 90       	pop	r12
 7d8:	08 95       	ret

000007da <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
 7da:	ac 01       	movw	r20, r24
 7dc:	20 e0       	ldi	r18, 0x00	; 0
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 7e0:	80 91 c0 00 	lds	r24, 0x00C0
 7e4:	85 ff       	sbrs	r24, 5
 7e6:	fc cf       	rjmp	.-8      	; 0x7e0 <UART_Transmit_Text+0x6>
  UDR0=val;
 7e8:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 7ec:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 7ee:	fa 01       	movw	r30, r20
 7f0:	e2 0f       	add	r30, r18
 7f2:	f1 1d       	adc	r31, r1
 7f4:	e0 81       	ld	r30, Z
 7f6:	ee 23       	and	r30, r30
 7f8:	99 f7       	brne	.-26     	; 0x7e0 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 7fa:	08 95       	ret

000007fc <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
 7fc:	8a e0       	ldi	r24, 0x0A	; 10
 7fe:	91 e0       	ldi	r25, 0x01	; 1
 800:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_Transmit_Text>
}
 804:	08 95       	ret

00000806 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
 806:	8d e0       	ldi	r24, 0x0D	; 13
 808:	91 e0       	ldi	r25, 0x01	; 1
 80a:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_Transmit_Text>
}
 80e:	08 95       	ret

00000810 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 810:	bf 92       	push	r11
 812:	cf 92       	push	r12
 814:	df 92       	push	r13
 816:	ef 92       	push	r14
 818:	ff 92       	push	r15
 81a:	0f 93       	push	r16
 81c:	1f 93       	push	r17
 81e:	6b 01       	movw	r12, r22
 820:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	81 05       	cpc	r24, r1
 828:	91 05       	cpc	r25, r1
 82a:	31 f4       	brne	.+12     	; 0x838 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 82c:	10 92 11 01 	sts	0x0111, r1
    UART.InputNumberDigits=1;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	80 93 19 01 	sts	0x0119, r24
 836:	23 c0       	rjmp	.+70     	; 0x87e <UART_Determine_Digit_Numbers+0x6e>
 838:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 83a:	0b 2d       	mov	r16, r11
 83c:	10 e0       	ldi	r17, 0x00	; 0
 83e:	00 5f       	subi	r16, 0xF0	; 240
 840:	1e 4f       	sbci	r17, 0xFE	; 254
 842:	c7 01       	movw	r24, r14
 844:	b6 01       	movw	r22, r12
 846:	2a e0       	ldi	r18, 0x0A	; 10
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	40 e0       	ldi	r20, 0x00	; 0
 84c:	50 e0       	ldi	r21, 0x00	; 0
 84e:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodsi4>
 852:	f8 01       	movw	r30, r16
 854:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 856:	c7 01       	movw	r24, r14
 858:	b6 01       	movw	r22, r12
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	40 e0       	ldi	r20, 0x00	; 0
 860:	50 e0       	ldi	r21, 0x00	; 0
 862:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodsi4>
 866:	c9 01       	movw	r24, r18
 868:	da 01       	movw	r26, r20
 86a:	6c 01       	movw	r12, r24
 86c:	7d 01       	movw	r14, r26
      i++;
 86e:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 870:	c1 14       	cp	r12, r1
 872:	d1 04       	cpc	r13, r1
 874:	e1 04       	cpc	r14, r1
 876:	f1 04       	cpc	r15, r1
 878:	01 f7       	brne	.-64     	; 0x83a <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 87a:	b0 92 19 01 	sts	0x0119, r11
  }
}
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	ff 90       	pop	r15
 884:	ef 90       	pop	r14
 886:	df 90       	pop	r13
 888:	cf 90       	pop	r12
 88a:	bf 90       	pop	r11
 88c:	08 95       	ret

0000088e <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 88e:	e0 91 19 01 	lds	r30, 0x0119
 892:	0f c0       	rjmp	.+30     	; 0x8b2 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 894:	2e 2f       	mov	r18, r30
 896:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 898:	e2 2f       	mov	r30, r18
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	e0 5f       	subi	r30, 0xF0	; 240
 89e:	fe 4f       	sbci	r31, 0xFE	; 254
 8a0:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 8a2:	80 91 c0 00 	lds	r24, 0x00C0
 8a6:	85 ff       	sbrs	r24, 5
 8a8:	fc cf       	rjmp	.-8      	; 0x8a2 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
 8aa:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
 8ac:	90 93 c6 00 	sts	0x00C6, r25
 8b0:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 8b2:	ee 23       	and	r30, r30
 8b4:	79 f7       	brne	.-34     	; 0x894 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 8b6:	08 95       	ret

000008b8 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 8b8:	9b 01       	movw	r18, r22
 8ba:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 8bc:	97 ff       	sbrs	r25, 7
 8be:	0e c0       	rjmp	.+28     	; 0x8dc <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
 8c0:	80 91 c0 00 	lds	r24, 0x00C0
 8c4:	85 ff       	sbrs	r24, 5
 8c6:	fc cf       	rjmp	.-8      	; 0x8c0 <UART_Transmit_Number+0x8>
  UDR0=val;
 8c8:	8d e2       	ldi	r24, 0x2D	; 45
 8ca:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 8ce:	50 95       	com	r21
 8d0:	40 95       	com	r20
 8d2:	30 95       	com	r19
 8d4:	21 95       	neg	r18
 8d6:	3f 4f       	sbci	r19, 0xFF	; 255
 8d8:	4f 4f       	sbci	r20, 0xFF	; 255
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 8dc:	ca 01       	movw	r24, r20
 8de:	b9 01       	movw	r22, r18
 8e0:	0e 94 08 04 	call	0x810	; 0x810 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 8e4:	0e 94 47 04 	call	0x88e	; 0x88e <UART_Transmit_Number_Digits>
}
 8e8:	08 95       	ret

000008ea <UART_Flush_Buffer>:
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
  #endif
}
 8ea:	08 95       	ret

000008ec <UART_Init>:
}
#endif



void UART_Init(uint32_t baud){
 8ec:	ef 92       	push	r14
 8ee:	ff 92       	push	r15
 8f0:	0f 93       	push	r16
 8f2:	1f 93       	push	r17
 8f4:	7b 01       	movw	r14, r22
 8f6:	8c 01       	movw	r16, r24
  UART_Struct_Init();
 8f8:	0e 94 c8 02 	call	0x590	; 0x590 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
 8fc:	c8 01       	movw	r24, r16
 8fe:	b7 01       	movw	r22, r14
 900:	0e 94 d5 02 	call	0x5aa	; 0x5aa <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 904:	e1 ec       	ldi	r30, 0xC1	; 193
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	88 60       	ori	r24, 0x08	; 8
 90c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
 90e:	86 e0       	ldi	r24, 0x06	; 6
 910:	80 93 c2 00 	sts	0x00C2, r24
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
}
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	ff 90       	pop	r15
 91a:	ef 90       	pop	r14
 91c:	08 95       	ret

0000091e <__mulsi3>:
 91e:	62 9f       	mul	r22, r18
 920:	d0 01       	movw	r26, r0
 922:	73 9f       	mul	r23, r19
 924:	f0 01       	movw	r30, r0
 926:	82 9f       	mul	r24, r18
 928:	e0 0d       	add	r30, r0
 92a:	f1 1d       	adc	r31, r1
 92c:	64 9f       	mul	r22, r20
 92e:	e0 0d       	add	r30, r0
 930:	f1 1d       	adc	r31, r1
 932:	92 9f       	mul	r25, r18
 934:	f0 0d       	add	r31, r0
 936:	83 9f       	mul	r24, r19
 938:	f0 0d       	add	r31, r0
 93a:	74 9f       	mul	r23, r20
 93c:	f0 0d       	add	r31, r0
 93e:	65 9f       	mul	r22, r21
 940:	f0 0d       	add	r31, r0
 942:	99 27       	eor	r25, r25
 944:	72 9f       	mul	r23, r18
 946:	b0 0d       	add	r27, r0
 948:	e1 1d       	adc	r30, r1
 94a:	f9 1f       	adc	r31, r25
 94c:	63 9f       	mul	r22, r19
 94e:	b0 0d       	add	r27, r0
 950:	e1 1d       	adc	r30, r1
 952:	f9 1f       	adc	r31, r25
 954:	bd 01       	movw	r22, r26
 956:	cf 01       	movw	r24, r30
 958:	11 24       	eor	r1, r1
 95a:	08 95       	ret

0000095c <__udivmodsi4>:
 95c:	a1 e2       	ldi	r26, 0x21	; 33
 95e:	1a 2e       	mov	r1, r26
 960:	aa 1b       	sub	r26, r26
 962:	bb 1b       	sub	r27, r27
 964:	fd 01       	movw	r30, r26
 966:	0d c0       	rjmp	.+26     	; 0x982 <__udivmodsi4_ep>

00000968 <__udivmodsi4_loop>:
 968:	aa 1f       	adc	r26, r26
 96a:	bb 1f       	adc	r27, r27
 96c:	ee 1f       	adc	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	a2 17       	cp	r26, r18
 972:	b3 07       	cpc	r27, r19
 974:	e4 07       	cpc	r30, r20
 976:	f5 07       	cpc	r31, r21
 978:	20 f0       	brcs	.+8      	; 0x982 <__udivmodsi4_ep>
 97a:	a2 1b       	sub	r26, r18
 97c:	b3 0b       	sbc	r27, r19
 97e:	e4 0b       	sbc	r30, r20
 980:	f5 0b       	sbc	r31, r21

00000982 <__udivmodsi4_ep>:
 982:	66 1f       	adc	r22, r22
 984:	77 1f       	adc	r23, r23
 986:	88 1f       	adc	r24, r24
 988:	99 1f       	adc	r25, r25
 98a:	1a 94       	dec	r1
 98c:	69 f7       	brne	.-38     	; 0x968 <__udivmodsi4_loop>
 98e:	60 95       	com	r22
 990:	70 95       	com	r23
 992:	80 95       	com	r24
 994:	90 95       	com	r25
 996:	9b 01       	movw	r18, r22
 998:	ac 01       	movw	r20, r24
 99a:	bd 01       	movw	r22, r26
 99c:	cf 01       	movw	r24, r30
 99e:	08 95       	ret

000009a0 <__divmodsi4>:
 9a0:	97 fb       	bst	r25, 7
 9a2:	09 2e       	mov	r0, r25
 9a4:	05 26       	eor	r0, r21
 9a6:	0e d0       	rcall	.+28     	; 0x9c4 <__divmodsi4_neg1>
 9a8:	57 fd       	sbrc	r21, 7
 9aa:	04 d0       	rcall	.+8      	; 0x9b4 <__divmodsi4_neg2>
 9ac:	d7 df       	rcall	.-82     	; 0x95c <__udivmodsi4>
 9ae:	0a d0       	rcall	.+20     	; 0x9c4 <__divmodsi4_neg1>
 9b0:	00 1c       	adc	r0, r0
 9b2:	38 f4       	brcc	.+14     	; 0x9c2 <__divmodsi4_exit>

000009b4 <__divmodsi4_neg2>:
 9b4:	50 95       	com	r21
 9b6:	40 95       	com	r20
 9b8:	30 95       	com	r19
 9ba:	21 95       	neg	r18
 9bc:	3f 4f       	sbci	r19, 0xFF	; 255
 9be:	4f 4f       	sbci	r20, 0xFF	; 255
 9c0:	5f 4f       	sbci	r21, 0xFF	; 255

000009c2 <__divmodsi4_exit>:
 9c2:	08 95       	ret

000009c4 <__divmodsi4_neg1>:
 9c4:	f6 f7       	brtc	.-4      	; 0x9c2 <__divmodsi4_exit>
 9c6:	90 95       	com	r25
 9c8:	80 95       	com	r24
 9ca:	70 95       	com	r23
 9cc:	61 95       	neg	r22
 9ce:	7f 4f       	sbci	r23, 0xFF	; 255
 9d0:	8f 4f       	sbci	r24, 0xFF	; 255
 9d2:	9f 4f       	sbci	r25, 0xFF	; 255
 9d4:	08 95       	ret

000009d6 <_exit>:
 9d6:	f8 94       	cli

000009d8 <__stop_program>:
 9d8:	ff cf       	rjmp	.-2      	; 0x9d8 <__stop_program>
