
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002244  000022d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008d  0080011c  0080011c  000022f4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000022f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000120f  00000000  00000000  00002354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000034e5  00000000  00000000  00003563  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e7  00000000  00000000  00006a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a54  00000000  00000000  0000702f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000850  00000000  00000000  00008a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000013e7  00000000  00000000  000092d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000114c  00000000  00000000  0000a6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000b807  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e4       	ldi	r30, 0x44	; 68
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3a       	cpi	r26, 0xA9	; 169
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 20 11 	jmp	0x2240	; 0x2240 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "timebase.h"
#include "uart.h"

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
  
  UART_Init(19200);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	7b e4       	ldi	r23, 0x4B	; 75
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 c4 02 	call	0x588	; 0x588 <UART_Init>
  Timebase_Init(1000);
      b6:	88 ee       	ldi	r24, 0xE8	; 232
      b8:	93 e0       	ldi	r25, 0x03	; 3
      ba:	0e 94 54 10 	call	0x20a8	; 0x20a8 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD|=(1<<5);
      be:	55 9a       	sbi	0x0a, 5	; 10
  PORTD&=~(1<<5);
      c0:	5d 98       	cbi	0x0b, 5	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	c8 ec       	ldi	r28, 0xC8	; 200
      c4:	d0 e0       	ldi	r29, 0x00	; 0
  
  while(1){
    
    UART_Transmit_Text("Timebase ");
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	91 e0       	ldi	r25, 0x01	; 1
      ca:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
      ce:	0e 94 aa 04 	call	0x954	; 0x954 <Timebase_Timer_Get_Seconds>
      d2:	0e 94 31 02 	call	0x462	; 0x462 <UART_Transmit_Number>
	UART_Transmit_Text(" ");
      d6:	8a e0       	ldi	r24, 0x0A	; 10
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
      de:	0e 94 a2 04 	call	0x944	; 0x944 <Timebase_Timer_Get_SubSeconds>
      e2:	a0 e0       	ldi	r26, 0x00	; 0
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	bc 01       	movw	r22, r24
      e8:	cd 01       	movw	r24, r26
      ea:	0e 94 31 02 	call	0x462	; 0x462 <UART_Transmit_Number>
	UART_Transmit_New_Line();
      ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit_New_Line>
      f2:	88 ee       	ldi	r24, 0xE8	; 232
      f4:	93 e0       	ldi	r25, 0x03	; 3
      f6:	fe 01       	movw	r30, r28
      f8:	31 97       	sbiw	r30, 0x01	; 1
      fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x52>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x50>
     100:	e2 cf       	rjmp	.-60     	; 0xc6 <main+0x20>

00000102 <UART_Struct_Init>:
     102:	10 92 1c 01 	sts	0x011C, r1
     106:	ed e1       	ldi	r30, 0x1D	; 29
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	11 92       	st	Z+, r1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	e5 32       	cpi	r30, 0x25	; 37
     110:	f8 07       	cpc	r31, r24
     112:	d9 f7       	brne	.-10     	; 0x10a <UART_Struct_Init+0x8>
     114:	10 82       	st	Z, r1
     116:	11 82       	std	Z+1, r1	; 0x01
     118:	80 e2       	ldi	r24, 0x20	; 32
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	93 a3       	std	Z+35, r25	; 0x23
     11e:	82 a3       	std	Z+34, r24	; 0x22
     120:	15 a2       	std	Z+37, r1	; 0x25
     122:	14 a2       	std	Z+36, r1	; 0x24
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	04 c0       	rjmp	.+8      	; 0x130 <UART_Struct_Init+0x2e>
     128:	e4 5e       	subi	r30, 0xE4	; 228
     12a:	fe 4f       	sbci	r31, 0xFE	; 254
     12c:	13 86       	std	Z+11, r1	; 0x0b
     12e:	2f 5f       	subi	r18, 0xFF	; 255
     130:	80 91 47 01 	lds	r24, 0x0147
     134:	90 91 48 01 	lds	r25, 0x0148
     138:	e2 2f       	mov	r30, r18
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	e8 17       	cp	r30, r24
     13e:	f9 07       	cpc	r31, r25
     140:	98 f3       	brcs	.-26     	; 0x128 <UART_Struct_Init+0x26>
     142:	08 95       	ret

00000144 <UART_Config_GPIO>:
     144:	08 95       	ret

00000146 <UART_Config_Clock>:
     146:	08 95       	ret

00000148 <UART_Config_BAUD_Rate>:
     148:	9b 01       	movw	r18, r22
     14a:	ac 01       	movw	r20, r24
     14c:	60 e4       	ldi	r22, 0x40	; 64
     14e:	72 e4       	ldi	r23, 0x42	; 66
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__udivmodsi4>
     158:	21 50       	subi	r18, 0x01	; 1
     15a:	30 40       	sbci	r19, 0x00	; 0
     15c:	40 40       	sbci	r20, 0x00	; 0
     15e:	50 40       	sbci	r21, 0x00	; 0
     160:	e0 ec       	ldi	r30, 0xC0	; 192
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	82 60       	ori	r24, 0x02	; 2
     168:	80 83       	st	Z, r24
     16a:	bb 27       	eor	r27, r27
     16c:	a5 2f       	mov	r26, r21
     16e:	94 2f       	mov	r25, r20
     170:	83 2f       	mov	r24, r19
     172:	80 93 c5 00 	sts	0x00C5, r24
     176:	20 93 c4 00 	sts	0x00C4, r18
     17a:	08 95       	ret

0000017c <UART_Config_Transmitter>:
     17c:	e1 ec       	ldi	r30, 0xC1	; 193
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	88 60       	ori	r24, 0x08	; 8
     184:	80 83       	st	Z, r24
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	80 93 c2 00 	sts	0x00C2, r24
     18c:	08 95       	ret

0000018e <UART_Config_Receiver>:
     18e:	e1 ec       	ldi	r30, 0xC1	; 193
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	80 61       	ori	r24, 0x10	; 16
     196:	80 83       	st	Z, r24
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	80 93 c2 00 	sts	0x00C2, r24
     19e:	08 95       	ret

000001a0 <UART_Config_Receiver_Interrupt>:
     1a0:	e1 ec       	ldi	r30, 0xC1	; 193
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	80 68       	ori	r24, 0x80	; 128
     1a8:	80 83       	st	Z, r24
     1aa:	78 94       	sei
     1ac:	08 95       	ret

000001ae <UART_Transmit_Byte>:
     1ae:	98 2f       	mov	r25, r24
     1b0:	80 91 c0 00 	lds	r24, 0x00C0
     1b4:	85 ff       	sbrs	r24, 5
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <UART_Transmit_Byte+0x2>
     1b8:	90 93 c6 00 	sts	0x00C6, r25
     1bc:	08 95       	ret

000001be <UART_Receive_Byte>:
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	0f 92       	push	r0
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	19 82       	std	Y+1, r1	; 0x01
     1ca:	80 91 c0 00 	lds	r24, 0x00C0
     1ce:	84 ff       	sbrs	r24, 4
     1d0:	05 c0       	rjmp	.+10     	; 0x1dc <UART_Receive_Byte+0x1e>
     1d2:	80 91 c6 00 	lds	r24, 0x00C6
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	08 c0       	rjmp	.+16     	; 0x1ec <UART_Receive_Byte+0x2e>
     1dc:	80 91 c0 00 	lds	r24, 0x00C0
     1e0:	83 ff       	sbrs	r24, 3
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <UART_Receive_Byte+0x34>
     1e4:	80 91 c6 00 	lds	r24, 0x00C6
     1e8:	89 83       	std	Y+1, r24	; 0x01
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 1c 01 	sts	0x011C, r24
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <UART_Receive_Byte+0x3e>
     1f2:	80 91 c6 00 	lds	r24, 0x00C6
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	10 92 1c 01 	sts	0x011C, r1
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	0f 90       	pop	r0
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <UART_Last_Received_Byte>:
     206:	80 91 26 01 	lds	r24, 0x0126
     20a:	08 95       	ret

0000020c <UART_Reset_Last_Received_Byte>:
     20c:	10 92 26 01 	sts	0x0126, r1
     210:	08 95       	ret

00000212 <UART_Transmit_Byte_Hex>:
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ab 01       	movw	r20, r22
     21a:	bc 01       	movw	r22, r24
     21c:	4f 3f       	cpi	r20, 0xFF	; 255
     21e:	51 05       	cpc	r21, r1
     220:	61 05       	cpc	r22, r1
     222:	71 05       	cpc	r23, r1
     224:	09 f0       	breq	.+2      	; 0x228 <UART_Transmit_Byte_Hex+0x16>
     226:	28 f4       	brcc	.+10     	; 0x232 <UART_Transmit_Byte_Hex+0x20>
     228:	e8 e0       	ldi	r30, 0x08	; 8
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	c2 e0       	ldi	r28, 0x02	; 2
     22e:	d0 e0       	ldi	r29, 0x00	; 0
     230:	11 c0       	rjmp	.+34     	; 0x254 <UART_Transmit_Byte_Hex+0x42>
     232:	40 30       	cpi	r20, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	58 07       	cpc	r21, r24
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	68 07       	cpc	r22, r24
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	78 07       	cpc	r23, r24
     240:	28 f0       	brcs	.+10     	; 0x24c <UART_Transmit_Byte_Hex+0x3a>
     242:	e0 e2       	ldi	r30, 0x20	; 32
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	c8 e0       	ldi	r28, 0x08	; 8
     248:	d0 e0       	ldi	r29, 0x00	; 0
     24a:	04 c0       	rjmp	.+8      	; 0x254 <UART_Transmit_Byte_Hex+0x42>
     24c:	e0 e1       	ldi	r30, 0x10	; 16
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	c4 e0       	ldi	r28, 0x04	; 4
     252:	d0 e0       	ldi	r29, 0x00	; 0
     254:	80 91 c0 00 	lds	r24, 0x00C0
     258:	85 ff       	sbrs	r24, 5
     25a:	fc cf       	rjmp	.-8      	; 0x254 <UART_Transmit_Byte_Hex+0x42>
     25c:	80 e3       	ldi	r24, 0x30	; 48
     25e:	80 93 c6 00 	sts	0x00C6, r24
     262:	80 91 c0 00 	lds	r24, 0x00C0
     266:	85 ff       	sbrs	r24, 5
     268:	fc cf       	rjmp	.-8      	; 0x262 <UART_Transmit_Byte_Hex+0x50>
     26a:	88 e7       	ldi	r24, 0x78	; 120
     26c:	80 93 c6 00 	sts	0x00C6, r24
     270:	10 e0       	ldi	r17, 0x00	; 0
     272:	1f c0       	rjmp	.+62     	; 0x2b2 <UART_Transmit_Byte_Hex+0xa0>
     274:	34 97       	sbiw	r30, 0x04	; 4
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	0e 2e       	mov	r0, r30
     27c:	04 c0       	rjmp	.+8      	; 0x286 <UART_Transmit_Byte_Hex+0x74>
     27e:	b6 95       	lsr	r27
     280:	a7 95       	ror	r26
     282:	97 95       	ror	r25
     284:	87 95       	ror	r24
     286:	0a 94       	dec	r0
     288:	d2 f7       	brpl	.-12     	; 0x27e <UART_Transmit_Byte_Hex+0x6c>
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	90 70       	andi	r25, 0x00	; 0
     290:	8a 30       	cpi	r24, 0x0A	; 10
     292:	91 05       	cpc	r25, r1
     294:	20 f0       	brcs	.+8      	; 0x29e <UART_Transmit_Byte_Hex+0x8c>
     296:	9c 01       	movw	r18, r24
     298:	29 5c       	subi	r18, 0xC9	; 201
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <UART_Transmit_Byte_Hex+0x92>
     29e:	9c 01       	movw	r18, r24
     2a0:	20 5d       	subi	r18, 0xD0	; 208
     2a2:	3f 4f       	sbci	r19, 0xFF	; 255
     2a4:	80 91 c0 00 	lds	r24, 0x00C0
     2a8:	85 ff       	sbrs	r24, 5
     2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <UART_Transmit_Byte_Hex+0x92>
     2ac:	20 93 c6 00 	sts	0x00C6, r18
     2b0:	1f 5f       	subi	r17, 0xFF	; 255
     2b2:	81 2f       	mov	r24, r17
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	8c 17       	cp	r24, r28
     2b8:	9d 07       	cpc	r25, r29
     2ba:	e0 f2       	brcs	.-72     	; 0x274 <UART_Transmit_Byte_Hex+0x62>
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	08 95       	ret

000002c4 <UART_Transmit_Byte_Bin>:
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ab 01       	movw	r20, r22
     2d6:	bc 01       	movw	r22, r24
     2d8:	4f 3f       	cpi	r20, 0xFF	; 255
     2da:	51 05       	cpc	r21, r1
     2dc:	61 05       	cpc	r22, r1
     2de:	71 05       	cpc	r23, r1
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <UART_Transmit_Byte_Bin+0x20>
     2e2:	10 f4       	brcc	.+4      	; 0x2e8 <UART_Transmit_Byte_Bin+0x24>
     2e4:	97 e0       	ldi	r25, 0x07	; 7
     2e6:	0b c0       	rjmp	.+22     	; 0x2fe <UART_Transmit_Byte_Bin+0x3a>
     2e8:	40 30       	cpi	r20, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	58 07       	cpc	r21, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	68 07       	cpc	r22, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	78 07       	cpc	r23, r24
     2f6:	10 f0       	brcs	.+4      	; 0x2fc <UART_Transmit_Byte_Bin+0x38>
     2f8:	9f e1       	ldi	r25, 0x1F	; 31
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <UART_Transmit_Byte_Bin+0x3a>
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	80 91 c0 00 	lds	r24, 0x00C0
     302:	85 ff       	sbrs	r24, 5
     304:	fc cf       	rjmp	.-8      	; 0x2fe <UART_Transmit_Byte_Bin+0x3a>
     306:	80 e3       	ldi	r24, 0x30	; 48
     308:	80 93 c6 00 	sts	0x00C6, r24
     30c:	80 91 c0 00 	lds	r24, 0x00C0
     310:	85 ff       	sbrs	r24, 5
     312:	fc cf       	rjmp	.-8      	; 0x30c <UART_Transmit_Byte_Bin+0x48>
     314:	82 e6       	ldi	r24, 0x62	; 98
     316:	80 93 c6 00 	sts	0x00C6, r24
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	e9 2f       	mov	r30, r25
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	00 e3       	ldi	r16, 0x30	; 48
     324:	11 e3       	ldi	r17, 0x31	; 49
     326:	ef 01       	movw	r28, r30
     328:	21 96       	adiw	r28, 0x01	; 1
     32a:	cf 01       	movw	r24, r30
     32c:	82 1b       	sub	r24, r18
     32e:	93 0b       	sbc	r25, r19
     330:	6a 01       	movw	r12, r20
     332:	7b 01       	movw	r14, r22
     334:	04 c0       	rjmp	.+8      	; 0x33e <UART_Transmit_Byte_Bin+0x7a>
     336:	f6 94       	lsr	r15
     338:	e7 94       	ror	r14
     33a:	d7 94       	ror	r13
     33c:	c7 94       	ror	r12
     33e:	8a 95       	dec	r24
     340:	d2 f7       	brpl	.-12     	; 0x336 <UART_Transmit_Byte_Bin+0x72>
     342:	d7 01       	movw	r26, r14
     344:	c6 01       	movw	r24, r12
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	89 2b       	or	r24, r25
     34c:	39 f0       	breq	.+14     	; 0x35c <UART_Transmit_Byte_Bin+0x98>
     34e:	80 91 c0 00 	lds	r24, 0x00C0
     352:	85 ff       	sbrs	r24, 5
     354:	fc cf       	rjmp	.-8      	; 0x34e <UART_Transmit_Byte_Bin+0x8a>
     356:	10 93 c6 00 	sts	0x00C6, r17
     35a:	06 c0       	rjmp	.+12     	; 0x368 <UART_Transmit_Byte_Bin+0xa4>
     35c:	80 91 c0 00 	lds	r24, 0x00C0
     360:	85 ff       	sbrs	r24, 5
     362:	fc cf       	rjmp	.-8      	; 0x35c <UART_Transmit_Byte_Bin+0x98>
     364:	00 93 c6 00 	sts	0x00C6, r16
     368:	2f 5f       	subi	r18, 0xFF	; 255
     36a:	3f 4f       	sbci	r19, 0xFF	; 255
     36c:	2c 17       	cp	r18, r28
     36e:	3d 07       	cpc	r19, r29
     370:	e1 f6       	brne	.-72     	; 0x32a <UART_Transmit_Byte_Bin+0x66>
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	08 95       	ret

00000384 <UART_Transmit_Text>:
     384:	ac 01       	movw	r20, r24
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	07 c0       	rjmp	.+14     	; 0x398 <UART_Transmit_Text+0x14>
     38a:	80 91 c0 00 	lds	r24, 0x00C0
     38e:	85 ff       	sbrs	r24, 5
     390:	fc cf       	rjmp	.-8      	; 0x38a <UART_Transmit_Text+0x6>
     392:	e0 93 c6 00 	sts	0x00C6, r30
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	fa 01       	movw	r30, r20
     39a:	e2 0f       	add	r30, r18
     39c:	f1 1d       	adc	r31, r1
     39e:	e0 81       	ld	r30, Z
     3a0:	ee 23       	and	r30, r30
     3a2:	99 f7       	brne	.-26     	; 0x38a <UART_Transmit_Text+0x6>
     3a4:	08 95       	ret

000003a6 <UART_Transmit_New_Line>:
     3a6:	8c e0       	ldi	r24, 0x0C	; 12
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
     3ae:	08 95       	ret

000003b0 <UART_Transmit_Space>:
     3b0:	8f e0       	ldi	r24, 0x0F	; 15
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
     3b8:	08 95       	ret

000003ba <UART_Determine_Digit_Numbers>:
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	6b 01       	movw	r12, r22
     3ca:	7c 01       	movw	r14, r24
     3cc:	61 15       	cp	r22, r1
     3ce:	71 05       	cpc	r23, r1
     3d0:	81 05       	cpc	r24, r1
     3d2:	91 05       	cpc	r25, r1
     3d4:	31 f4       	brne	.+12     	; 0x3e2 <UART_Determine_Digit_Numbers+0x28>
     3d6:	10 92 1d 01 	sts	0x011D, r1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 25 01 	sts	0x0125, r24
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <UART_Determine_Digit_Numbers+0x6e>
     3e2:	bb 24       	eor	r11, r11
     3e4:	0b 2d       	mov	r16, r11
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	04 5e       	subi	r16, 0xE4	; 228
     3ea:	1e 4f       	sbci	r17, 0xFE	; 254
     3ec:	c7 01       	movw	r24, r14
     3ee:	b6 01       	movw	r22, r12
     3f0:	2a e0       	ldi	r18, 0x0A	; 10
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__udivmodsi4>
     3fc:	f8 01       	movw	r30, r16
     3fe:	61 83       	std	Z+1, r22	; 0x01
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__udivmodsi4>
     410:	c9 01       	movw	r24, r18
     412:	da 01       	movw	r26, r20
     414:	6c 01       	movw	r12, r24
     416:	7d 01       	movw	r14, r26
     418:	b3 94       	inc	r11
     41a:	c1 14       	cp	r12, r1
     41c:	d1 04       	cpc	r13, r1
     41e:	e1 04       	cpc	r14, r1
     420:	f1 04       	cpc	r15, r1
     422:	01 f7       	brne	.-64     	; 0x3e4 <UART_Determine_Digit_Numbers+0x2a>
     424:	b0 92 25 01 	sts	0x0125, r11
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	08 95       	ret

00000438 <UART_Transmit_Number_Digits>:
     438:	e0 91 25 01 	lds	r30, 0x0125
     43c:	0f c0       	rjmp	.+30     	; 0x45c <UART_Transmit_Number_Digits+0x24>
     43e:	2e 2f       	mov	r18, r30
     440:	21 50       	subi	r18, 0x01	; 1
     442:	e2 2f       	mov	r30, r18
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	e4 5e       	subi	r30, 0xE4	; 228
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	80 91 c0 00 	lds	r24, 0x00C0
     450:	85 ff       	sbrs	r24, 5
     452:	fc cf       	rjmp	.-8      	; 0x44c <UART_Transmit_Number_Digits+0x14>
     454:	90 5d       	subi	r25, 0xD0	; 208
     456:	90 93 c6 00 	sts	0x00C6, r25
     45a:	e2 2f       	mov	r30, r18
     45c:	ee 23       	and	r30, r30
     45e:	79 f7       	brne	.-34     	; 0x43e <UART_Transmit_Number_Digits+0x6>
     460:	08 95       	ret

00000462 <UART_Transmit_Number>:
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	97 ff       	sbrs	r25, 7
     468:	0e c0       	rjmp	.+28     	; 0x486 <UART_Transmit_Number+0x24>
     46a:	80 91 c0 00 	lds	r24, 0x00C0
     46e:	85 ff       	sbrs	r24, 5
     470:	fc cf       	rjmp	.-8      	; 0x46a <UART_Transmit_Number+0x8>
     472:	8d e2       	ldi	r24, 0x2D	; 45
     474:	80 93 c6 00 	sts	0x00C6, r24
     478:	50 95       	com	r21
     47a:	40 95       	com	r20
     47c:	30 95       	com	r19
     47e:	21 95       	neg	r18
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	4f 4f       	sbci	r20, 0xFF	; 255
     484:	5f 4f       	sbci	r21, 0xFF	; 255
     486:	ca 01       	movw	r24, r20
     488:	b9 01       	movw	r22, r18
     48a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <UART_Determine_Digit_Numbers>
     48e:	0e 94 1c 02 	call	0x438	; 0x438 <UART_Transmit_Number_Digits>
     492:	08 95       	ret

00000494 <UART_Read_From_Buffer>:
     494:	fc 01       	movw	r30, r24
     496:	e4 5e       	subi	r30, 0xE4	; 228
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	83 85       	ldd	r24, Z+11	; 0x0b
     49c:	08 95       	ret

0000049e <UART_Current_Buffer_Index>:
     49e:	20 91 49 01 	lds	r18, 0x0149
     4a2:	30 91 4a 01 	lds	r19, 0x014A
     4a6:	c9 01       	movw	r24, r18
     4a8:	08 95       	ret

000004aa <UART_Flush_Buffer>:
     4aa:	10 92 1c 01 	sts	0x011C, r1
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <UART_Flush_Buffer+0x16>
     4b4:	f9 01       	movw	r30, r18
     4b6:	e4 5e       	subi	r30, 0xE4	; 228
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	13 86       	std	Z+11, r1	; 0x0b
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	80 91 47 01 	lds	r24, 0x0147
     4c4:	90 91 48 01 	lds	r25, 0x0148
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	98 f3       	brcs	.-26     	; 0x4b4 <UART_Flush_Buffer+0xa>
     4ce:	10 92 4a 01 	sts	0x014A, r1
     4d2:	10 92 49 01 	sts	0x0149, r1
     4d6:	08 95       	ret

000004d8 <UART_Interrupt_Service_Routine>:
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	19 82       	std	Y+1, r1	; 0x01
     4e4:	0e 94 df 00 	call	0x1be	; 0x1be <UART_Receive_Byte>
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	80 91 1c 01 	lds	r24, 0x011C
     4ee:	88 23       	and	r24, r24
     4f0:	19 f5       	brne	.+70     	; 0x538 <UART_Interrupt_Service_Routine+0x60>
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	80 93 26 01 	sts	0x0126, r24
     4f8:	e0 91 49 01 	lds	r30, 0x0149
     4fc:	f0 91 4a 01 	lds	r31, 0x014A
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	e4 5e       	subi	r30, 0xE4	; 228
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	83 87       	std	Z+11, r24	; 0x0b
     508:	80 91 49 01 	lds	r24, 0x0149
     50c:	90 91 4a 01 	lds	r25, 0x014A
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	90 93 4a 01 	sts	0x014A, r25
     516:	80 93 49 01 	sts	0x0149, r24
     51a:	20 91 49 01 	lds	r18, 0x0149
     51e:	30 91 4a 01 	lds	r19, 0x014A
     522:	80 91 47 01 	lds	r24, 0x0147
     526:	90 91 48 01 	lds	r25, 0x0148
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	20 f0       	brcs	.+8      	; 0x538 <UART_Interrupt_Service_Routine+0x60>
     530:	10 92 4a 01 	sts	0x014A, r1
     534:	10 92 49 01 	sts	0x0149, r1
     538:	0f 90       	pop	r0
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <__vector_18>:
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31
     562:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <UART_Interrupt_Service_Routine>
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <UART_Init>:
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	7b 01       	movw	r14, r22
     592:	8c 01       	movw	r16, r24
     594:	0e 94 81 00 	call	0x102	; 0x102 <UART_Struct_Init>
     598:	c8 01       	movw	r24, r16
     59a:	b7 01       	movw	r22, r14
     59c:	0e 94 a4 00 	call	0x148	; 0x148 <UART_Config_BAUD_Rate>
     5a0:	e1 ec       	ldi	r30, 0xC1	; 193
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	88 60       	ori	r24, 0x08	; 8
     5a8:	80 83       	st	Z, r24
     5aa:	a2 ec       	ldi	r26, 0xC2	; 194
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	96 e0       	ldi	r25, 0x06	; 6
     5b0:	9c 93       	st	X, r25
     5b2:	80 81       	ld	r24, Z
     5b4:	80 61       	ori	r24, 0x10	; 16
     5b6:	80 83       	st	Z, r24
     5b8:	9c 93       	st	X, r25
     5ba:	80 81       	ld	r24, Z
     5bc:	80 68       	ori	r24, 0x80	; 128
     5be:	80 83       	st	Z, r24
     5c0:	78 94       	sei
     5c2:	0e 94 55 02 	call	0x4aa	; 0x4aa <UART_Flush_Buffer>
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5d0:	8d e4       	ldi	r24, 0x4D	; 77
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	90 93 4c 01 	sts	0x014C, r25
     5d8:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.Value = 0;
     5dc:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5e0:	80 91 4d 01 	lds	r24, 0x014D
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5ea:	80 91 4d 01 	lds	r24, 0x014D
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.UpdateRate = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 4f 01 	sts	0x014F, r25
     5fc:	80 93 4e 01 	sts	0x014E, r24
  Timebase->Time.OVFUpdateValue=0;
     600:	10 92 50 01 	sts	0x0150, r1
  Timebase->Time.SubSeconds = 0;
     604:	10 92 56 01 	sts	0x0156, r1
     608:	10 92 55 01 	sts	0x0155, r1
  Timebase->Time.Seconds = 0;
     60c:	10 92 57 01 	sts	0x0157, r1
     610:	10 92 58 01 	sts	0x0158, r1
     614:	10 92 59 01 	sts	0x0159, r1
     618:	10 92 5a 01 	sts	0x015A, r1
  Timebase->Time.LastSample = 0;
     61c:	10 92 51 01 	sts	0x0151, r1
     620:	10 92 52 01 	sts	0x0152, r1
     624:	10 92 53 01 	sts	0x0153, r1
     628:	10 92 54 01 	sts	0x0154, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     62c:	10 92 5b 01 	sts	0x015B, r1
     630:	10 92 5c 01 	sts	0x015C, r1
     634:	10 92 5d 01 	sts	0x015D, r1
     638:	10 92 5e 01 	sts	0x015E, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     63c:	10 92 5f 01 	sts	0x015F, r1
     640:	10 92 60 01 	sts	0x0160, r1
     644:	10 92 61 01 	sts	0x0161, r1
     648:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.Status = 0;
     64c:	10 92 63 01 	sts	0x0163, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     650:	10 92 64 01 	sts	0x0164, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     654:	10 92 65 01 	sts	0x0165, r1
    Timebase->UpCounter[i].EndValue = 0;
     658:	10 92 66 01 	sts	0x0166, r1
     65c:	10 92 67 01 	sts	0x0167, r1
     660:	10 92 68 01 	sts	0x0168, r1
     664:	10 92 69 01 	sts	0x0169, r1
    Timebase->UpCounter[i].Target = 0;
     668:	10 92 6a 01 	sts	0x016A, r1
     66c:	10 92 6b 01 	sts	0x016B, r1
     670:	10 92 6c 01 	sts	0x016C, r1
     674:	10 92 6d 01 	sts	0x016D, r1
    Timebase->UpCounter[i].Temporary = 0;    
     678:	10 92 6e 01 	sts	0x016E, r1
     67c:	10 92 6f 01 	sts	0x016F, r1
     680:	10 92 70 01 	sts	0x0170, r1
     684:	10 92 71 01 	sts	0x0171, r1
    Timebase->UpCounter[i].Value = 0;
     688:	10 92 72 01 	sts	0x0172, r1
     68c:	10 92 73 01 	sts	0x0173, r1
     690:	10 92 74 01 	sts	0x0174, r1
     694:	10 92 75 01 	sts	0x0175, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     698:	10 92 76 01 	sts	0x0176, r1
     69c:	10 92 77 01 	sts	0x0177, r1
     6a0:	10 92 78 01 	sts	0x0178, r1
     6a4:	10 92 79 01 	sts	0x0179, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounter[i].SS.Status.StatusByte = 0;  
     6a8:	10 92 7a 01 	sts	0x017A, r1
    Timebase->UpCounter[i].SS.EndValue = 0;
     6ac:	10 92 7b 01 	sts	0x017B, r1
     6b0:	10 92 7c 01 	sts	0x017C, r1
     6b4:	10 92 7d 01 	sts	0x017D, r1
     6b8:	10 92 7e 01 	sts	0x017E, r1
    Timebase->UpCounter[i].SS.Target = 0;
     6bc:	10 92 7f 01 	sts	0x017F, r1
     6c0:	10 92 80 01 	sts	0x0180, r1
     6c4:	10 92 81 01 	sts	0x0181, r1
     6c8:	10 92 82 01 	sts	0x0182, r1
    Timebase->UpCounter[i].SS.Temporary = 0;    
     6cc:	10 92 83 01 	sts	0x0183, r1
     6d0:	10 92 84 01 	sts	0x0184, r1
     6d4:	10 92 85 01 	sts	0x0185, r1
     6d8:	10 92 86 01 	sts	0x0186, r1
    Timebase->UpCounter[i].SS.Value = 0;
     6dc:	10 92 87 01 	sts	0x0187, r1
     6e0:	10 92 88 01 	sts	0x0188, r1
     6e4:	10 92 89 01 	sts	0x0189, r1
     6e8:	10 92 8a 01 	sts	0x018A, r1
    Timebase->UpCounter[i].SS.PeriodValue = 0;
     6ec:	10 92 8b 01 	sts	0x018B, r1
     6f0:	10 92 8c 01 	sts	0x018C, r1
     6f4:	10 92 8d 01 	sts	0x018D, r1
     6f8:	10 92 8e 01 	sts	0x018E, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     6fc:	10 92 8f 01 	sts	0x018F, r1
    Timebase->DownCounter[i].EndValue = 0;
     700:	10 92 90 01 	sts	0x0190, r1
     704:	10 92 91 01 	sts	0x0191, r1
     708:	10 92 92 01 	sts	0x0192, r1
     70c:	10 92 93 01 	sts	0x0193, r1
    Timebase->DownCounter[i].Value = 0;
     710:	10 92 94 01 	sts	0x0194, r1
     714:	10 92 95 01 	sts	0x0195, r1
     718:	10 92 96 01 	sts	0x0196, r1
     71c:	10 92 97 01 	sts	0x0197, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     720:	10 92 98 01 	sts	0x0198, r1
     724:	10 92 99 01 	sts	0x0199, r1
     728:	10 92 9a 01 	sts	0x019A, r1
     72c:	10 92 9b 01 	sts	0x019B, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounter[i].SS.Status.StatusByte = 0; 
     730:	10 92 9c 01 	sts	0x019C, r1
    Timebase->DownCounter[i].SS.EndValue = 0;
     734:	10 92 9d 01 	sts	0x019D, r1
     738:	10 92 9e 01 	sts	0x019E, r1
     73c:	10 92 9f 01 	sts	0x019F, r1
     740:	10 92 a0 01 	sts	0x01A0, r1
    Timebase->DownCounter[i].SS.Value = 0;
     744:	10 92 a1 01 	sts	0x01A1, r1
     748:	10 92 a2 01 	sts	0x01A2, r1
     74c:	10 92 a3 01 	sts	0x01A3, r1
     750:	10 92 a4 01 	sts	0x01A4, r1
    Timebase->DownCounter[i].SS.PeriodValue = 0;
     754:	10 92 a5 01 	sts	0x01A5, r1
     758:	10 92 a6 01 	sts	0x01A6, r1
     75c:	10 92 a7 01 	sts	0x01A7, r1
     760:	10 92 a8 01 	sts	0x01A8, r1
  }
  #endif
  
}
     764:	08 95       	ret

00000766 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     766:	7f 92       	push	r7
     768:	8f 92       	push	r8
     76a:	9f 92       	push	r9
     76c:	af 92       	push	r10
     76e:	bf 92       	push	r11
     770:	cf 92       	push	r12
     772:	df 92       	push	r13
     774:	ef 92       	push	r14
     776:	ff 92       	push	r15
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	df 93       	push	r29
     77e:	cf 93       	push	r28
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	2a 97       	sbiw	r28, 0x0a	; 10
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     792:	c0 90 4b 01 	lds	r12, 0x014B
     796:	d0 90 4c 01 	lds	r13, 0x014C
     79a:	f6 01       	movw	r30, r12
     79c:	80 81       	ld	r24, Z
     79e:	80 ff       	sbrs	r24, 0
     7a0:	31 c0       	rjmp	.+98     	; 0x804 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     7a2:	01 30       	cpi	r16, 0x01	; 1
     7a4:	11 05       	cpc	r17, r1
     7a6:	11 f4       	brne	.+4      	; 0x7ac <Timebase_Timer_Config+0x46>
     7a8:	96 e0       	ldi	r25, 0x06	; 6
     7aa:	19 c0       	rjmp	.+50     	; 0x7de <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     7ac:	02 30       	cpi	r16, 0x02	; 2
     7ae:	11 05       	cpc	r17, r1
     7b0:	11 f4       	brne	.+4      	; 0x7b6 <Timebase_Timer_Config+0x50>
     7b2:	95 e0       	ldi	r25, 0x05	; 5
     7b4:	14 c0       	rjmp	.+40     	; 0x7de <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     7b6:	04 30       	cpi	r16, 0x04	; 4
     7b8:	11 05       	cpc	r17, r1
     7ba:	11 f4       	brne	.+4      	; 0x7c0 <Timebase_Timer_Config+0x5a>
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	0f c0       	rjmp	.+30     	; 0x7de <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     7c0:	08 30       	cpi	r16, 0x08	; 8
     7c2:	11 05       	cpc	r17, r1
     7c4:	11 f4       	brne	.+4      	; 0x7ca <Timebase_Timer_Config+0x64>
     7c6:	93 e0       	ldi	r25, 0x03	; 3
     7c8:	0a c0       	rjmp	.+20     	; 0x7de <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     7ca:	00 31       	cpi	r16, 0x10	; 16
     7cc:	11 05       	cpc	r17, r1
     7ce:	11 f4       	brne	.+4      	; 0x7d4 <Timebase_Timer_Config+0x6e>
     7d0:	92 e0       	ldi	r25, 0x02	; 2
     7d2:	05 c0       	rjmp	.+10     	; 0x7de <Timebase_Timer_Config+0x78>
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	00 32       	cpi	r16, 0x20	; 32
     7d8:	11 05       	cpc	r17, r1
     7da:	09 f4       	brne	.+2      	; 0x7de <Timebase_Timer_Config+0x78>
     7dc:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     7de:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     7e0:	84 b7       	in	r24, 0x34	; 52
     7e2:	87 7f       	andi	r24, 0xF7	; 247
     7e4:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     7e6:	80 91 60 00 	lds	r24, 0x0060
     7ea:	80 68       	ori	r24, 0x80	; 128
     7ec:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     7f0:	80 91 60 00 	lds	r24, 0x0060
     7f4:	88 61       	ori	r24, 0x18	; 24
     7f6:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     7fa:	90 64       	ori	r25, 0x40	; 64
     7fc:	90 93 60 00 	sts	0x0060, r25
    sei();
     800:	78 94       	sei
     802:	67 c0       	rjmp	.+206    	; 0x8d2 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     804:	81 fd       	sbrc	r24, 1
     806:	65 c0       	rjmp	.+202    	; 0x8d2 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     808:	82 ff       	sbrs	r24, 2
     80a:	63 c0       	rjmp	.+198    	; 0x8d2 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     80c:	de 01       	movw	r26, r28
     80e:	11 96       	adiw	r26, 0x01	; 1
     810:	e1 e1       	ldi	r30, 0x11	; 17
     812:	f1 e0       	ldi	r31, 0x01	; 1
     814:	8a e0       	ldi	r24, 0x0A	; 10
     816:	01 90       	ld	r0, Z+
     818:	0d 92       	st	X+, r0
     81a:	81 50       	subi	r24, 0x01	; 1
     81c:	e1 f7       	brne	.-8      	; 0x816 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     81e:	98 01       	movw	r18, r16
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	72 e1       	ldi	r23, 0x12	; 18
     828:	8a e7       	ldi	r24, 0x7A	; 122
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     830:	72 2e       	mov	r7, r18
     832:	83 2e       	mov	r8, r19
     834:	94 2e       	mov	r9, r20
     836:	e5 2e       	mov	r14, r21
     838:	5e 01       	movw	r10, r28
     83a:	08 94       	sec
     83c:	a1 1c       	adc	r10, r1
     83e:	b1 1c       	adc	r11, r1
     840:	c9 01       	movw	r24, r18
     842:	da 01       	movw	r26, r20
     844:	9c 01       	movw	r18, r24
     846:	ad 01       	movw	r20, r26
     848:	ff 24       	eor	r15, r15
     84a:	14 c0       	rjmp	.+40     	; 0x874 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     84c:	f5 01       	movw	r30, r10
     84e:	21 91       	ld	r18, Z+
     850:	31 91       	ld	r19, Z+
     852:	5f 01       	movw	r10, r30
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	67 2d       	mov	r22, r7
     85a:	78 2d       	mov	r23, r8
     85c:	89 2d       	mov	r24, r9
     85e:	9e 2d       	mov	r25, r14
     860:	0e 94 05 11 	call	0x220a	; 0x220a <__divmodsi4>
     864:	c9 01       	movw	r24, r18
     866:	da 01       	movw	r26, r20
     868:	9c 01       	movw	r18, r24
     86a:	ad 01       	movw	r20, r26
	  clock_div_index++;
     86c:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     86e:	f5 e0       	ldi	r31, 0x05	; 5
     870:	ff 16       	cp	r15, r31
     872:	31 f0       	breq	.+12     	; 0x880 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     874:	2f 3f       	cpi	r18, 0xFF	; 255
     876:	31 05       	cpc	r19, r1
     878:	41 05       	cpc	r20, r1
     87a:	51 05       	cpc	r21, r1
     87c:	09 f0       	breq	.+2      	; 0x880 <Timebase_Timer_Config+0x11a>
     87e:	34 f7       	brge	.-52     	; 0x84c <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     880:	8f 2d       	mov	r24, r15
     882:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     884:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     886:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     888:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     88c:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     88e:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     890:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     892:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     894:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     896:	88 23       	and	r24, r24
     898:	11 f4       	brne	.+4      	; 0x89e <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	11 f4       	brne	.+4      	; 0x8a6 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     8a2:	82 e0       	ldi	r24, 0x02	; 2
     8a4:	0b c0       	rjmp	.+22     	; 0x8bc <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     8a6:	82 30       	cpi	r24, 0x02	; 2
     8a8:	11 f4       	brne	.+4      	; 0x8ae <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	07 c0       	rjmp	.+14     	; 0x8bc <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	11 f4       	brne	.+4      	; 0x8b6 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	03 c0       	rjmp	.+6      	; 0x8bc <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     8b6:	84 30       	cpi	r24, 0x04	; 4
     8b8:	11 f4       	brne	.+4      	; 0x8be <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     8be:	82 2f       	mov	r24, r18
     8c0:	80 95       	com	r24
     8c2:	f6 01       	movw	r30, r12
     8c4:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     8c6:	83 81       	ldd	r24, Z+3	; 0x03
     8c8:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	80 93 6e 00 	sts	0x006E, r24
    sei();
     8d0:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     8d2:	f6 01       	movw	r30, r12
     8d4:	12 83       	std	Z+2, r17	; 0x02
     8d6:	01 83       	std	Z+1, r16	; 0x01
}
     8d8:	2a 96       	adiw	r28, 0x0a	; 10
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	cf 91       	pop	r28
     8e6:	df 91       	pop	r29
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	ff 90       	pop	r15
     8ee:	ef 90       	pop	r14
     8f0:	df 90       	pop	r13
     8f2:	cf 90       	pop	r12
     8f4:	bf 90       	pop	r11
     8f6:	af 90       	pop	r10
     8f8:	9f 90       	pop	r9
     8fa:	8f 90       	pop	r8
     8fc:	7f 90       	pop	r7
     8fe:	08 95       	ret

00000900 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     900:	e0 91 4b 01 	lds	r30, 0x014B
     904:	f0 91 4c 01 	lds	r31, 0x014C
     908:	87 89       	ldd	r24, Z+23	; 0x17
}
     90a:	08 95       	ret

0000090c <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     90c:	e0 91 4b 01 	lds	r30, 0x014B
     910:	f0 91 4c 01 	lds	r31, 0x014C
     914:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     916:	8f 33       	cpi	r24, 0x3F	; 63
     918:	18 f4       	brcc	.+6      	; 0x920 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     91a:	87 89       	ldd	r24, Z+23	; 0x17
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	87 8b       	std	Z+23, r24	; 0x17
     920:	08 95       	ret

00000922 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     922:	e0 91 4b 01 	lds	r30, 0x014B
     926:	f0 91 4c 01 	lds	r31, 0x014C
     92a:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     92c:	88 23       	and	r24, r24
     92e:	19 f0       	breq	.+6      	; 0x936 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     930:	87 89       	ldd	r24, Z+23	; 0x17
     932:	81 50       	subi	r24, 0x01	; 1
     934:	87 8b       	std	Z+23, r24	; 0x17
     936:	08 95       	ret

00000938 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     938:	e0 91 4b 01 	lds	r30, 0x014B
     93c:	f0 91 4c 01 	lds	r31, 0x014C
     940:	17 8a       	std	Z+23, r1	; 0x17
}
     942:	08 95       	ret

00000944 <Timebase_Timer_Get_SubSeconds>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     944:	e0 91 4b 01 	lds	r30, 0x014B
     948:	f0 91 4c 01 	lds	r31, 0x014C
     94c:	20 85       	ldd	r18, Z+8	; 0x08
     94e:	31 85       	ldd	r19, Z+9	; 0x09
}
     950:	c9 01       	movw	r24, r18
     952:	08 95       	ret

00000954 <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     954:	e0 91 4b 01 	lds	r30, 0x014B
     958:	f0 91 4c 01 	lds	r31, 0x014C
     95c:	22 85       	ldd	r18, Z+10	; 0x0a
     95e:	33 85       	ldd	r19, Z+11	; 0x0b
     960:	44 85       	ldd	r20, Z+12	; 0x0c
     962:	55 85       	ldd	r21, Z+13	; 0x0d
}
     964:	b9 01       	movw	r22, r18
     966:	ca 01       	movw	r24, r20
     968:	08 95       	ret

0000096a <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     96a:	e0 91 4b 01 	lds	r30, 0x014B
     96e:	f0 91 4c 01 	lds	r31, 0x014C
     972:	91 87       	std	Z+9, r25	; 0x09
     974:	80 87       	std	Z+8, r24	; 0x08
}
     976:	08 95       	ret

00000978 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     978:	e0 91 4b 01 	lds	r30, 0x014B
     97c:	f0 91 4c 01 	lds	r31, 0x014C
     980:	62 87       	std	Z+10, r22	; 0x0a
     982:	73 87       	std	Z+11, r23	; 0x0b
     984:	84 87       	std	Z+12, r24	; 0x0c
     986:	95 87       	std	Z+13, r25	; 0x0d
}
     988:	08 95       	ret

0000098a <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     98a:	9c 01       	movw	r18, r24

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     98c:	e0 91 4b 01 	lds	r30, 0x014B
     990:	f0 91 4c 01 	lds	r31, 0x014C
     994:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     996:	8f 33       	cpi	r24, 0x3F	; 63
     998:	18 f4       	brcc	.+6      	; 0x9a0 <Timebase_Timer_Delay_SubSeconds+0x16>
    Timebase->ActiveTokens += 1;
     99a:	87 89       	ldd	r24, Z+23	; 0x17
     99c:	8f 5f       	subi	r24, 0xFF	; 255
     99e:	87 8b       	std	Z+23, r24	; 0x17


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9a0:	80 85       	ldd	r24, Z+8	; 0x08
     9a2:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds();
     9a4:	a0 e0       	ldi	r26, 0x00	; 0
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
  temp += value;
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	28 0f       	add	r18, r24
     9ae:	39 1f       	adc	r19, r25
     9b0:	4a 1f       	adc	r20, r26
     9b2:	5b 1f       	adc	r21, r27


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9b4:	80 85       	ldd	r24, Z+8	; 0x08
     9b6:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds();
  temp += value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	82 17       	cp	r24, r18
     9be:	93 07       	cpc	r25, r19
     9c0:	a4 07       	cpc	r26, r20
     9c2:	b5 07       	cpc	r27, r21
     9c4:	bc f3       	brlt	.-18     	; 0x9b4 <Timebase_Timer_Delay_SubSeconds+0x2a>

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     9c6:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     9c8:	88 23       	and	r24, r24
     9ca:	19 f0       	breq	.+6      	; 0x9d2 <Timebase_Timer_Delay_SubSeconds+0x48>
    Timebase->ActiveTokens -= 1;
     9cc:	87 89       	ldd	r24, Z+23	; 0x17
     9ce:	81 50       	subi	r24, 0x01	; 1
     9d0:	87 8b       	std	Z+23, r24	; 0x17
     9d2:	08 95       	ret

000009d4 <Timebase_Timer_Await_SubSeconds>:
  Timebase_Token_Remove();
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     9d4:	bc 01       	movw	r22, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9d6:	e0 91 4b 01 	lds	r30, 0x014B
     9da:	f0 91 4c 01 	lds	r31, 0x014C
     9de:	80 85       	ldd	r24, Z+8	; 0x08
     9e0:	91 85       	ldd	r25, Z+9	; 0x09
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     9e2:	24 81       	ldd	r18, Z+4	; 0x04
     9e4:	35 81       	ldd	r19, Z+5	; 0x05
     9e6:	46 81       	ldd	r20, Z+6	; 0x06
     9e8:	57 81       	ldd	r21, Z+7	; 0x07
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	82 17       	cp	r24, r18
     9f0:	93 07       	cpc	r25, r19
     9f2:	a4 07       	cpc	r26, r20
     9f4:	b5 07       	cpc	r27, r21
     9f6:	99 f7       	brne	.-26     	; 0x9de <Timebase_Timer_Await_SubSeconds+0xa>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9f8:	80 85       	ldd	r24, Z+8	; 0x08
     9fa:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     9fc:	86 0f       	add	r24, r22
     9fe:	97 1f       	adc	r25, r23
     a00:	a0 e0       	ldi	r26, 0x00	; 0
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	84 83       	std	Z+4, r24	; 0x04
     a06:	95 83       	std	Z+5, r25	; 0x05
     a08:	a6 83       	std	Z+6, r26	; 0x06
     a0a:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     a0c:	24 81       	ldd	r18, Z+4	; 0x04
     a0e:	35 81       	ldd	r19, Z+5	; 0x05
     a10:	46 81       	ldd	r20, Z+6	; 0x06
     a12:	57 81       	ldd	r21, Z+7	; 0x07
     a14:	81 81       	ldd	r24, Z+1	; 0x01
     a16:	92 81       	ldd	r25, Z+2	; 0x02
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	28 17       	cp	r18, r24
     a1e:	39 07       	cpc	r19, r25
     a20:	4a 07       	cpc	r20, r26
     a22:	5b 07       	cpc	r21, r27
     a24:	84 f0       	brlt	.+32     	; 0xa46 <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     a26:	24 81       	ldd	r18, Z+4	; 0x04
     a28:	35 81       	ldd	r19, Z+5	; 0x05
     a2a:	46 81       	ldd	r20, Z+6	; 0x06
     a2c:	57 81       	ldd	r21, Z+7	; 0x07
     a2e:	81 81       	ldd	r24, Z+1	; 0x01
     a30:	92 81       	ldd	r25, Z+2	; 0x02
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	28 1b       	sub	r18, r24
     a38:	39 0b       	sbc	r19, r25
     a3a:	4a 0b       	sbc	r20, r26
     a3c:	5b 0b       	sbc	r21, r27
     a3e:	24 83       	std	Z+4, r18	; 0x04
     a40:	35 83       	std	Z+5, r19	; 0x05
     a42:	46 83       	std	Z+6, r20	; 0x06
     a44:	57 83       	std	Z+7, r21	; 0x07
     a46:	08 95       	ret

00000a48 <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a50:	e0 91 4b 01 	lds	r30, 0x014B
     a54:	f0 91 4c 01 	lds	r31, 0x014C
     a58:	22 85       	ldd	r18, Z+10	; 0x0a
     a5a:	33 85       	ldd	r19, Z+11	; 0x0b
     a5c:	44 85       	ldd	r20, Z+12	; 0x0c
     a5e:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     a60:	7c 01       	movw	r14, r24
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	e2 0e       	add	r14, r18
     a68:	f3 1e       	adc	r15, r19
     a6a:	04 1f       	adc	r16, r20
     a6c:	15 1f       	adc	r17, r21
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a6e:	82 85       	ldd	r24, Z+10	; 0x0a
     a70:	93 85       	ldd	r25, Z+11	; 0x0b
     a72:	a4 85       	ldd	r26, Z+12	; 0x0c
     a74:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     a76:	8e 15       	cp	r24, r14
     a78:	9f 05       	cpc	r25, r15
     a7a:	a0 07       	cpc	r26, r16
     a7c:	b1 07       	cpc	r27, r17
     a7e:	bc f3       	brlt	.-18     	; 0xa6e <Timebase_Timer_Delay_Seconds+0x26>
}
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	ff 90       	pop	r15
     a86:	ef 90       	pop	r14
     a88:	08 95       	ret

00000a8a <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     a8a:	e0 91 4b 01 	lds	r30, 0x014B
     a8e:	f0 91 4c 01 	lds	r31, 0x014C
     a92:	16 86       	std	Z+14, r1	; 0x0e
     a94:	17 86       	std	Z+15, r1	; 0x0f
     a96:	10 8a       	std	Z+16, r1	; 0x10
     a98:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     a9a:	12 8a       	std	Z+18, r1	; 0x12
     a9c:	13 8a       	std	Z+19, r1	; 0x13
     a9e:	14 8a       	std	Z+20, r1	; 0x14
     aa0:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     aa2:	16 8a       	std	Z+22, r1	; 0x16
}
     aa4:	08 95       	ret

00000aa6 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     aa6:	e0 91 4b 01 	lds	r30, 0x014B
     aaa:	f0 91 4c 01 	lds	r31, 0x014C
     aae:	86 89       	ldd	r24, Z+22	; 0x16
     ab0:	88 23       	and	r24, r24
     ab2:	91 f4       	brne	.+36     	; 0xad8 <Timebase_Window_Timer_Start+0x32>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ab4:	82 85       	ldd	r24, Z+10	; 0x0a
     ab6:	93 85       	ldd	r25, Z+11	; 0x0b
     ab8:	a4 85       	ldd	r26, Z+12	; 0x0c
     aba:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     abc:	86 87       	std	Z+14, r24	; 0x0e
     abe:	97 87       	std	Z+15, r25	; 0x0f
     ac0:	a0 8b       	std	Z+16, r26	; 0x10
     ac2:	b1 8b       	std	Z+17, r27	; 0x11


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ac4:	80 85       	ldd	r24, Z+8	; 0x08
     ac6:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	82 8b       	std	Z+18, r24	; 0x12
     ace:	93 8b       	std	Z+19, r25	; 0x13
     ad0:	a4 8b       	std	Z+20, r26	; 0x14
     ad2:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	86 8b       	std	Z+22, r24	; 0x16
     ad8:	08 95       	ret

00000ada <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     ae6:	c0 91 4b 01 	lds	r28, 0x014B
     aea:	d0 91 4c 01 	lds	r29, 0x014C
     aee:	8e 89       	ldd	r24, Y+22	; 0x16
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	21 f0       	breq	.+8      	; 0xafc <Timebase_Window_Timer_Get_Interval+0x22>
     af4:	ee 24       	eor	r14, r14
     af6:	ff 24       	eor	r15, r15
     af8:	87 01       	movw	r16, r14
     afa:	23 c0       	rjmp	.+70     	; 0xb42 <Timebase_Window_Timer_Get_Interval+0x68>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     afc:	2a 85       	ldd	r18, Y+10	; 0x0a
     afe:	3b 85       	ldd	r19, Y+11	; 0x0b
     b00:	4c 85       	ldd	r20, Y+12	; 0x0c
     b02:	5d 85       	ldd	r21, Y+13	; 0x0d


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     b04:	88 85       	ldd	r24, Y+8	; 0x08
     b06:	99 85       	ldd	r25, Y+9	; 0x09


int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    int32_t curr_s = Timebase_Timer_Get_Seconds();
    int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
     b08:	7c 01       	movw	r14, r24
     b0a:	00 e0       	ldi	r16, 0x00	; 0
     b0c:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     b0e:	8e 85       	ldd	r24, Y+14	; 0x0e
     b10:	9f 85       	ldd	r25, Y+15	; 0x0f
     b12:	a8 89       	ldd	r26, Y+16	; 0x10
     b14:	b9 89       	ldd	r27, Y+17	; 0x11
     b16:	28 1b       	sub	r18, r24
     b18:	39 0b       	sbc	r19, r25
     b1a:	4a 0b       	sbc	r20, r26
     b1c:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     b1e:	69 81       	ldd	r22, Y+1	; 0x01
     b20:	7a 81       	ldd	r23, Y+2	; 0x02
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 b0 10 	call	0x2160	; 0x2160 <__mulsi3>
	curr_s += curr_ss;
     b2a:	2a 89       	ldd	r18, Y+18	; 0x12
     b2c:	3b 89       	ldd	r19, Y+19	; 0x13
     b2e:	4c 89       	ldd	r20, Y+20	; 0x14
     b30:	5d 89       	ldd	r21, Y+21	; 0x15
     b32:	e2 1a       	sub	r14, r18
     b34:	f3 0a       	sbc	r15, r19
     b36:	04 0b       	sbc	r16, r20
     b38:	15 0b       	sbc	r17, r21
     b3a:	e6 0e       	add	r14, r22
     b3c:	f7 1e       	adc	r15, r23
     b3e:	08 1f       	adc	r16, r24
     b40:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     b42:	b7 01       	movw	r22, r14
     b44:	c8 01       	movw	r24, r16
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     b54:	0e 94 6d 05 	call	0xada	; 0xada <Timebase_Window_Timer_Get_Interval>
     b58:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     b5a:	e0 91 4b 01 	lds	r30, 0x014B
     b5e:	f0 91 4c 01 	lds	r31, 0x014C
     b62:	86 89       	ldd	r24, Z+22	; 0x16
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	49 f4       	brne	.+18     	; 0xb7a <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b68:	16 86       	std	Z+14, r1	; 0x0e
     b6a:	17 86       	std	Z+15, r1	; 0x0f
     b6c:	10 8a       	std	Z+16, r1	; 0x10
     b6e:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     b70:	12 8a       	std	Z+18, r1	; 0x12
     b72:	13 8a       	std	Z+19, r1	; 0x13
     b74:	14 8a       	std	Z+20, r1	; 0x14
     b76:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b78:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     b7a:	82 2f       	mov	r24, r18
     b7c:	08 95       	ret

00000b7e <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
     b7e:	e0 91 4b 01 	lds	r30, 0x014B
     b82:	f0 91 4c 01 	lds	r31, 0x014C
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	2a e2       	ldi	r18, 0x2A	; 42
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	ac 01       	movw	r20, r24
     b8e:	42 9f       	mul	r20, r18
     b90:	c0 01       	movw	r24, r0
     b92:	43 9f       	mul	r20, r19
     b94:	90 0d       	add	r25, r0
     b96:	52 9f       	mul	r21, r18
     b98:	90 0d       	add	r25, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	e8 0f       	add	r30, r24
     b9e:	f9 1f       	adc	r31, r25
     ba0:	80 8d       	ldd	r24, Z+24	; 0x18
     ba2:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
     ba4:	8f 70       	andi	r24, 0x0F	; 15
     ba6:	08 95       	ret

00000ba8 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     ba8:	e0 91 4b 01 	lds	r30, 0x014B
     bac:	f0 91 4c 01 	lds	r31, 0x014C
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	2a e2       	ldi	r18, 0x2A	; 42
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	ac 01       	movw	r20, r24
     bb8:	42 9f       	mul	r20, r18
     bba:	c0 01       	movw	r24, r0
     bbc:	43 9f       	mul	r20, r19
     bbe:	90 0d       	add	r25, r0
     bc0:	52 9f       	mul	r21, r18
     bc2:	90 0d       	add	r25, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	e8 0f       	add	r30, r24
     bc8:	f9 1f       	adc	r31, r25
     bca:	6f 70       	andi	r22, 0x0F	; 15
     bcc:	66 0f       	add	r22, r22
     bce:	80 8d       	ldd	r24, Z+24	; 0x18
     bd0:	81 7e       	andi	r24, 0xE1	; 225
     bd2:	86 2b       	or	r24, r22
     bd4:	80 8f       	std	Z+24, r24	; 0x18
}
     bd6:	08 95       	ret

00000bd8 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
     bd8:	e0 91 4b 01 	lds	r30, 0x014B
     bdc:	f0 91 4c 01 	lds	r31, 0x014C
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	2a e2       	ldi	r18, 0x2A	; 42
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	ac 01       	movw	r20, r24
     be8:	42 9f       	mul	r20, r18
     bea:	c0 01       	movw	r24, r0
     bec:	43 9f       	mul	r20, r19
     bee:	90 0d       	add	r25, r0
     bf0:	52 9f       	mul	r21, r18
     bf2:	90 0d       	add	r25, r0
     bf4:	11 24       	eor	r1, r1
     bf6:	e8 0f       	add	r30, r24
     bf8:	f9 1f       	adc	r31, r25
     bfa:	df 01       	movw	r26, r30
     bfc:	95 96       	adiw	r26, 0x25	; 37
     bfe:	65 a1       	ldd	r22, Z+37	; 0x25
     c00:	11 96       	adiw	r26, 0x01	; 1
     c02:	7c 91       	ld	r23, X
     c04:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Value;
}
     c06:	12 96       	adiw	r26, 0x02	; 2
     c08:	8c 91       	ld	r24, X
     c0a:	12 97       	sbiw	r26, 0x02	; 2
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 91       	ld	r25, X
     c10:	08 95       	ret

00000c12 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     c12:	e0 91 4b 01 	lds	r30, 0x014B
     c16:	f0 91 4c 01 	lds	r31, 0x014C
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	2a e2       	ldi	r18, 0x2A	; 42
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	dc 01       	movw	r26, r24
     c22:	a2 9f       	mul	r26, r18
     c24:	c0 01       	movw	r24, r0
     c26:	a3 9f       	mul	r26, r19
     c28:	90 0d       	add	r25, r0
     c2a:	b2 9f       	mul	r27, r18
     c2c:	90 0d       	add	r25, r0
     c2e:	11 24       	eor	r1, r1
     c30:	e8 0f       	add	r30, r24
     c32:	f9 1f       	adc	r31, r25
     c34:	45 a3       	std	Z+37, r20	; 0x25
     c36:	56 a3       	std	Z+38, r21	; 0x26
     c38:	67 a3       	std	Z+39, r22	; 0x27
     c3a:	70 a7       	std	Z+40, r23	; 0x28
}
     c3c:	08 95       	ret

00000c3e <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
     c3e:	e0 91 4b 01 	lds	r30, 0x014B
     c42:	f0 91 4c 01 	lds	r31, 0x014C
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	2a e2       	ldi	r18, 0x2A	; 42
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	ac 01       	movw	r20, r24
     c4e:	42 9f       	mul	r20, r18
     c50:	c0 01       	movw	r24, r0
     c52:	43 9f       	mul	r20, r19
     c54:	90 0d       	add	r25, r0
     c56:	52 9f       	mul	r21, r18
     c58:	90 0d       	add	r25, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	e8 0f       	add	r30, r24
     c5e:	f9 1f       	adc	r31, r25
     c60:	df 01       	movw	r26, r30
     c62:	59 96       	adiw	r26, 0x19	; 25
     c64:	61 8d       	ldd	r22, Z+25	; 0x19
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	7c 91       	ld	r23, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	8c 91       	ld	r24, X
     c70:	12 97       	sbiw	r26, 0x02	; 2
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 91       	ld	r25, X
     c76:	08 95       	ret

00000c78 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     c78:	e0 91 4b 01 	lds	r30, 0x014B
     c7c:	f0 91 4c 01 	lds	r31, 0x014C
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	2a e2       	ldi	r18, 0x2A	; 42
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	dc 01       	movw	r26, r24
     c88:	a2 9f       	mul	r26, r18
     c8a:	c0 01       	movw	r24, r0
     c8c:	a3 9f       	mul	r26, r19
     c8e:	90 0d       	add	r25, r0
     c90:	b2 9f       	mul	r27, r18
     c92:	90 0d       	add	r25, r0
     c94:	11 24       	eor	r1, r1
     c96:	e8 0f       	add	r30, r24
     c98:	f9 1f       	adc	r31, r25
     c9a:	41 8f       	std	Z+25, r20	; 0x19
     c9c:	52 8f       	std	Z+26, r21	; 0x1a
     c9e:	63 8f       	std	Z+27, r22	; 0x1b
     ca0:	74 8f       	std	Z+28, r23	; 0x1c
}
     ca2:	08 95       	ret

00000ca4 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
     ca4:	e0 91 4b 01 	lds	r30, 0x014B
     ca8:	f0 91 4c 01 	lds	r31, 0x014C
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2a e2       	ldi	r18, 0x2A	; 42
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	ac 01       	movw	r20, r24
     cb4:	42 9f       	mul	r20, r18
     cb6:	c0 01       	movw	r24, r0
     cb8:	43 9f       	mul	r20, r19
     cba:	90 0d       	add	r25, r0
     cbc:	52 9f       	mul	r21, r18
     cbe:	90 0d       	add	r25, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	e8 0f       	add	r30, r24
     cc4:	f9 1f       	adc	r31, r25
     cc6:	df 01       	movw	r26, r30
     cc8:	5d 96       	adiw	r26, 0x1d	; 29
     cca:	65 8d       	ldd	r22, Z+29	; 0x1d
     ccc:	11 96       	adiw	r26, 0x01	; 1
     cce:	7c 91       	ld	r23, X
     cd0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
     cd2:	12 96       	adiw	r26, 0x02	; 2
     cd4:	8c 91       	ld	r24, X
     cd6:	12 97       	sbiw	r26, 0x02	; 2
     cd8:	13 96       	adiw	r26, 0x03	; 3
     cda:	9c 91       	ld	r25, X
     cdc:	08 95       	ret

00000cde <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     cde:	e0 91 4b 01 	lds	r30, 0x014B
     ce2:	f0 91 4c 01 	lds	r31, 0x014C
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2a e2       	ldi	r18, 0x2A	; 42
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	dc 01       	movw	r26, r24
     cee:	a2 9f       	mul	r26, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	a3 9f       	mul	r26, r19
     cf4:	90 0d       	add	r25, r0
     cf6:	b2 9f       	mul	r27, r18
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	e8 0f       	add	r30, r24
     cfe:	f9 1f       	adc	r31, r25
     d00:	45 8f       	std	Z+29, r20	; 0x1d
     d02:	56 8f       	std	Z+30, r21	; 0x1e
     d04:	67 8f       	std	Z+31, r22	; 0x1f
     d06:	70 a3       	std	Z+32, r23	; 0x20
}
     d08:	08 95       	ret

00000d0a <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
     d0a:	e0 91 4b 01 	lds	r30, 0x014B
     d0e:	f0 91 4c 01 	lds	r31, 0x014C
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	2a e2       	ldi	r18, 0x2A	; 42
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	ac 01       	movw	r20, r24
     d1a:	42 9f       	mul	r20, r18
     d1c:	c0 01       	movw	r24, r0
     d1e:	43 9f       	mul	r20, r19
     d20:	90 0d       	add	r25, r0
     d22:	52 9f       	mul	r21, r18
     d24:	90 0d       	add	r25, r0
     d26:	11 24       	eor	r1, r1
     d28:	e8 0f       	add	r30, r24
     d2a:	f9 1f       	adc	r31, r25
     d2c:	df 01       	movw	r26, r30
     d2e:	91 96       	adiw	r26, 0x21	; 33
     d30:	61 a1       	ldd	r22, Z+33	; 0x21
     d32:	11 96       	adiw	r26, 0x01	; 1
     d34:	7c 91       	ld	r23, X
     d36:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
     d38:	12 96       	adiw	r26, 0x02	; 2
     d3a:	8c 91       	ld	r24, X
     d3c:	12 97       	sbiw	r26, 0x02	; 2
     d3e:	13 96       	adiw	r26, 0x03	; 3
     d40:	9c 91       	ld	r25, X
     d42:	08 95       	ret

00000d44 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     d44:	e0 91 4b 01 	lds	r30, 0x014B
     d48:	f0 91 4c 01 	lds	r31, 0x014C
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	2a e2       	ldi	r18, 0x2A	; 42
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	dc 01       	movw	r26, r24
     d54:	a2 9f       	mul	r26, r18
     d56:	c0 01       	movw	r24, r0
     d58:	a3 9f       	mul	r26, r19
     d5a:	90 0d       	add	r25, r0
     d5c:	b2 9f       	mul	r27, r18
     d5e:	90 0d       	add	r25, r0
     d60:	11 24       	eor	r1, r1
     d62:	e8 0f       	add	r30, r24
     d64:	f9 1f       	adc	r31, r25
     d66:	41 a3       	std	Z+33, r20	; 0x21
     d68:	52 a3       	std	Z+34, r21	; 0x22
     d6a:	63 a3       	std	Z+35, r22	; 0x23
     d6c:	74 a3       	std	Z+36, r23	; 0x24
}
     d6e:	08 95       	ret

00000d70 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
     d70:	e0 91 4b 01 	lds	r30, 0x014B
     d74:	f0 91 4c 01 	lds	r31, 0x014C
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	2a e2       	ldi	r18, 0x2A	; 42
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	ac 01       	movw	r20, r24
     d80:	42 9f       	mul	r20, r18
     d82:	c0 01       	movw	r24, r0
     d84:	43 9f       	mul	r20, r19
     d86:	90 0d       	add	r25, r0
     d88:	52 9f       	mul	r21, r18
     d8a:	90 0d       	add	r25, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	e8 0f       	add	r30, r24
     d90:	f9 1f       	adc	r31, r25
     d92:	df 01       	movw	r26, r30
     d94:	99 96       	adiw	r26, 0x29	; 41
     d96:	61 a5       	ldd	r22, Z+41	; 0x29
     d98:	11 96       	adiw	r26, 0x01	; 1
     d9a:	7c 91       	ld	r23, X
     d9c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].PeriodValue;
}
     d9e:	12 96       	adiw	r26, 0x02	; 2
     da0:	8c 91       	ld	r24, X
     da2:	12 97       	sbiw	r26, 0x02	; 2
     da4:	13 96       	adiw	r26, 0x03	; 3
     da6:	9c 91       	ld	r25, X
     da8:	08 95       	ret

00000daa <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     daa:	e0 91 4b 01 	lds	r30, 0x014B
     dae:	f0 91 4c 01 	lds	r31, 0x014C
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2a e2       	ldi	r18, 0x2A	; 42
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	dc 01       	movw	r26, r24
     dba:	a2 9f       	mul	r26, r18
     dbc:	c0 01       	movw	r24, r0
     dbe:	a3 9f       	mul	r26, r19
     dc0:	90 0d       	add	r25, r0
     dc2:	b2 9f       	mul	r27, r18
     dc4:	90 0d       	add	r25, r0
     dc6:	11 24       	eor	r1, r1
     dc8:	e8 0f       	add	r30, r24
     dca:	f9 1f       	adc	r31, r25
     dcc:	41 a7       	std	Z+41, r20	; 0x29
     dce:	52 a7       	std	Z+42, r21	; 0x2a
     dd0:	63 a7       	std	Z+43, r22	; 0x2b
     dd2:	74 a7       	std	Z+44, r23	; 0x2c
}
     dd4:	08 95       	ret

00000dd6 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
     dd6:	e0 91 4b 01 	lds	r30, 0x014B
     dda:	f0 91 4c 01 	lds	r31, 0x014C
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	2a e2       	ldi	r18, 0x2A	; 42
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	ac 01       	movw	r20, r24
     de6:	42 9f       	mul	r20, r18
     de8:	c0 01       	movw	r24, r0
     dea:	43 9f       	mul	r20, r19
     dec:	90 0d       	add	r25, r0
     dee:	52 9f       	mul	r21, r18
     df0:	90 0d       	add	r25, r0
     df2:	11 24       	eor	r1, r1
     df4:	e8 0f       	add	r30, r24
     df6:	f9 1f       	adc	r31, r25
     df8:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
     dfa:	81 70       	andi	r24, 0x01	; 1
     dfc:	08 95       	ret

00000dfe <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
     dfe:	e0 91 4b 01 	lds	r30, 0x014B
     e02:	f0 91 4c 01 	lds	r31, 0x014C
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	2a e2       	ldi	r18, 0x2A	; 42
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	ac 01       	movw	r20, r24
     e0e:	42 9f       	mul	r20, r18
     e10:	c0 01       	movw	r24, r0
     e12:	43 9f       	mul	r20, r19
     e14:	90 0d       	add	r25, r0
     e16:	52 9f       	mul	r21, r18
     e18:	90 0d       	add	r25, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	e8 0f       	add	r30, r24
     e1e:	f9 1f       	adc	r31, r25
     e20:	80 8d       	ldd	r24, Z+24	; 0x18
     e22:	81 60       	ori	r24, 0x01	; 1
     e24:	80 8f       	std	Z+24, r24	; 0x18
}
     e26:	08 95       	ret

00000e28 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     e28:	e0 91 4b 01 	lds	r30, 0x014B
     e2c:	f0 91 4c 01 	lds	r31, 0x014C
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	2a e2       	ldi	r18, 0x2A	; 42
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	ac 01       	movw	r20, r24
     e38:	42 9f       	mul	r20, r18
     e3a:	c0 01       	movw	r24, r0
     e3c:	43 9f       	mul	r20, r19
     e3e:	90 0d       	add	r25, r0
     e40:	52 9f       	mul	r21, r18
     e42:	90 0d       	add	r25, r0
     e44:	11 24       	eor	r1, r1
     e46:	e8 0f       	add	r30, r24
     e48:	f9 1f       	adc	r31, r25
     e4a:	80 8d       	ldd	r24, Z+24	; 0x18
     e4c:	8e 7f       	andi	r24, 0xFE	; 254
     e4e:	80 8f       	std	Z+24, r24	; 0x18
}
     e50:	08 95       	ret

00000e52 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     e52:	e0 91 4b 01 	lds	r30, 0x014B
     e56:	f0 91 4c 01 	lds	r31, 0x014C
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	2a e2       	ldi	r18, 0x2A	; 42
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	ac 01       	movw	r20, r24
     e62:	42 9f       	mul	r20, r18
     e64:	c0 01       	movw	r24, r0
     e66:	43 9f       	mul	r20, r19
     e68:	90 0d       	add	r25, r0
     e6a:	52 9f       	mul	r21, r18
     e6c:	90 0d       	add	r25, r0
     e6e:	11 24       	eor	r1, r1
     e70:	e8 0f       	add	r30, r24
     e72:	f9 1f       	adc	r31, r25
     e74:	80 8d       	ldd	r24, Z+24	; 0x18
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     e76:	15 a2       	std	Z+37, r1	; 0x25
     e78:	16 a2       	std	Z+38, r1	; 0x26
     e7a:	17 a2       	std	Z+39, r1	; 0x27
     e7c:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     e7e:	11 8e       	std	Z+25, r1	; 0x19
     e80:	12 8e       	std	Z+26, r1	; 0x1a
     e82:	13 8e       	std	Z+27, r1	; 0x1b
     e84:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     e86:	15 8e       	std	Z+29, r1	; 0x1d
     e88:	16 8e       	std	Z+30, r1	; 0x1e
     e8a:	17 8e       	std	Z+31, r1	; 0x1f
     e8c:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     e8e:	11 a2       	std	Z+33, r1	; 0x21
     e90:	12 a2       	std	Z+34, r1	; 0x22
     e92:	13 a2       	std	Z+35, r1	; 0x23
     e94:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     e96:	11 a6       	std	Z+41, r1	; 0x29
     e98:	12 a6       	std	Z+42, r1	; 0x2a
     e9a:	13 a6       	std	Z+43, r1	; 0x2b
     e9c:	14 a6       	std	Z+44, r1	; 0x2c
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     e9e:	80 7e       	andi	r24, 0xE0	; 224
     ea0:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
     ea2:	08 95       	ret

00000ea4 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
     ea4:	0e 94 29 07 	call	0xe52	; 0xe52 <Timebase_UpCounter_Reset>
}
     ea8:	08 95       	ret

00000eaa <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     eaa:	e0 91 4b 01 	lds	r30, 0x014B
     eae:	f0 91 4c 01 	lds	r31, 0x014C
     eb2:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     eb4:	2a e2       	ldi	r18, 0x2A	; 42
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	ac 01       	movw	r20, r24
     eba:	42 9f       	mul	r20, r18
     ebc:	c0 01       	movw	r24, r0
     ebe:	43 9f       	mul	r20, r19
     ec0:	90 0d       	add	r25, r0
     ec2:	52 9f       	mul	r21, r18
     ec4:	90 0d       	add	r25, r0
     ec6:	11 24       	eor	r1, r1
     ec8:	e8 0f       	add	r30, r24
     eca:	f9 1f       	adc	r31, r25
     ecc:	90 8d       	ldd	r25, Z+24	; 0x18
     ece:	89 2f       	mov	r24, r25
     ed0:	86 95       	lsr	r24
     ed2:	8f 70       	andi	r24, 0x0F	; 15
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	19 f0       	breq	.+6      	; 0xede <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     ed8:	91 7e       	andi	r25, 0xE1	; 225
     eda:	92 60       	ori	r25, 0x02	; 2
     edc:	90 8f       	std	Z+24, r25	; 0x18
     ede:	08 95       	ret

00000ee0 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     ee0:	e0 91 4b 01 	lds	r30, 0x014B
     ee4:	f0 91 4c 01 	lds	r31, 0x014C
     ee8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     eea:	2a e2       	ldi	r18, 0x2A	; 42
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	ac 01       	movw	r20, r24
     ef0:	42 9f       	mul	r20, r18
     ef2:	c0 01       	movw	r24, r0
     ef4:	43 9f       	mul	r20, r19
     ef6:	90 0d       	add	r25, r0
     ef8:	52 9f       	mul	r21, r18
     efa:	90 0d       	add	r25, r0
     efc:	11 24       	eor	r1, r1
     efe:	e8 0f       	add	r30, r24
     f00:	f9 1f       	adc	r31, r25
     f02:	90 8d       	ldd	r25, Z+24	; 0x18
     f04:	89 2f       	mov	r24, r25
     f06:	86 95       	lsr	r24
     f08:	8f 70       	andi	r24, 0x0F	; 15
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	19 f0       	breq	.+6      	; 0xf14 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     f0e:	91 7e       	andi	r25, 0xE1	; 225
     f10:	94 60       	ori	r25, 0x04	; 4
     f12:	90 8f       	std	Z+24, r25	; 0x18
     f14:	08 95       	ret

00000f16 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     f16:	a0 91 4b 01 	lds	r26, 0x014B
     f1a:	b0 91 4c 01 	lds	r27, 0x014C
     f1e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     f20:	2a e2       	ldi	r18, 0x2A	; 42
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	82 9f       	mul	r24, r18
     f26:	f0 01       	movw	r30, r0
     f28:	83 9f       	mul	r24, r19
     f2a:	f0 0d       	add	r31, r0
     f2c:	92 9f       	mul	r25, r18
     f2e:	f0 0d       	add	r31, r0
     f30:	11 24       	eor	r1, r1
     f32:	ea 0f       	add	r30, r26
     f34:	fb 1f       	adc	r31, r27
     f36:	80 8d       	ldd	r24, Z+24	; 0x18
     f38:	86 95       	lsr	r24
     f3a:	8f 70       	andi	r24, 0x0F	; 15
     f3c:	19 f5       	brne	.+70     	; 0xf84 <Timebase_UpCounter_Set_Securely+0x6e>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     f3e:	15 a2       	std	Z+37, r1	; 0x25
     f40:	16 a2       	std	Z+38, r1	; 0x26
     f42:	17 a2       	std	Z+39, r1	; 0x27
     f44:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     f46:	11 a2       	std	Z+33, r1	; 0x21
     f48:	12 a2       	std	Z+34, r1	; 0x22
     f4a:	13 a2       	std	Z+35, r1	; 0x23
     f4c:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     f4e:	45 8f       	std	Z+29, r20	; 0x1d
     f50:	56 8f       	std	Z+30, r21	; 0x1e
     f52:	67 8f       	std	Z+31, r22	; 0x1f
     f54:	70 a3       	std	Z+32, r23	; 0x20
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f56:	1a 96       	adiw	r26, 0x0a	; 10
     f58:	8d 91       	ld	r24, X+
     f5a:	9d 91       	ld	r25, X+
     f5c:	0d 90       	ld	r0, X+
     f5e:	bc 91       	ld	r27, X
     f60:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     f62:	84 0f       	add	r24, r20
     f64:	95 1f       	adc	r25, r21
     f66:	a6 1f       	adc	r26, r22
     f68:	b7 1f       	adc	r27, r23
     f6a:	81 8f       	std	Z+25, r24	; 0x19
     f6c:	92 8f       	std	Z+26, r25	; 0x1a
     f6e:	a3 8f       	std	Z+27, r26	; 0x1b
     f70:	b4 8f       	std	Z+28, r27	; 0x1c
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     f72:	90 8d       	ldd	r25, Z+24	; 0x18
     f74:	89 2f       	mov	r24, r25
     f76:	86 95       	lsr	r24
     f78:	8f 70       	andi	r24, 0x0F	; 15
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	19 f0       	breq	.+6      	; 0xf84 <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     f7e:	91 7e       	andi	r25, 0xE1	; 225
     f80:	92 60       	ori	r25, 0x02	; 2
     f82:	90 8f       	std	Z+24, r25	; 0x18
     f84:	08 95       	ret

00000f86 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
     f86:	df 92       	push	r13
     f88:	ef 92       	push	r14
     f8a:	ff 92       	push	r15
     f8c:	0f 93       	push	r16
     f8e:	1f 93       	push	r17
     f90:	d8 2e       	mov	r13, r24
     f92:	7a 01       	movw	r14, r20
     f94:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
     f96:	0e 94 29 07 	call	0xe52	; 0xe52 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
     f9a:	8d 2d       	mov	r24, r13
     f9c:	b8 01       	movw	r22, r16
     f9e:	a7 01       	movw	r20, r14
     fa0:	0e 94 8b 07 	call	0xf16	; 0xf16 <Timebase_UpCounter_Set_Securely>
} 
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	ff 90       	pop	r15
     faa:	ef 90       	pop	r14
     fac:	df 90       	pop	r13
     fae:	08 95       	ret

00000fb0 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
     fb0:	ef 92       	push	r14
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     fb8:	a0 91 4b 01 	lds	r26, 0x014B
     fbc:	b0 91 4c 01 	lds	r27, 0x014C
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	2a e2       	ldi	r18, 0x2A	; 42
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	82 9f       	mul	r24, r18
     fc8:	f0 01       	movw	r30, r0
     fca:	83 9f       	mul	r24, r19
     fcc:	f0 0d       	add	r31, r0
     fce:	92 9f       	mul	r25, r18
     fd0:	f0 0d       	add	r31, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	ea 0f       	add	r30, r26
     fd6:	fb 1f       	adc	r31, r27
     fd8:	80 8d       	ldd	r24, Z+24	; 0x18
     fda:	86 95       	lsr	r24
     fdc:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Reset( window );
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     fde:	81 30       	cpi	r24, 0x01	; 1
     fe0:	b1 f5       	brne	.+108    	; 0x104e <Timebase_UpCounter_Update+0x9e>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     fe2:	1a 96       	adiw	r26, 0x0a	; 10
     fe4:	8d 91       	ld	r24, X+
     fe6:	9d 91       	ld	r25, X+
     fe8:	0d 90       	ld	r0, X+
     fea:	bc 91       	ld	r27, X
     fec:	a0 2d       	mov	r26, r0
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
     fee:	21 8d       	ldd	r18, Z+25	; 0x19
     ff0:	32 8d       	ldd	r19, Z+26	; 0x1a
     ff2:	43 8d       	ldd	r20, Z+27	; 0x1b
     ff4:	54 8d       	ldd	r21, Z+28	; 0x1c
     ff6:	28 1b       	sub	r18, r24
     ff8:	39 0b       	sbc	r19, r25
     ffa:	4a 0b       	sbc	r20, r26
     ffc:	5b 0b       	sbc	r21, r27
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     ffe:	21 a3       	std	Z+33, r18	; 0x21
    1000:	32 a3       	std	Z+34, r19	; 0x22
    1002:	43 a3       	std	Z+35, r20	; 0x23
    1004:	54 a3       	std	Z+36, r21	; 0x24
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1006:	e5 8c       	ldd	r14, Z+29	; 0x1d
    1008:	f6 8c       	ldd	r15, Z+30	; 0x1e
    100a:	07 8d       	ldd	r16, Z+31	; 0x1f
    100c:	10 a1       	ldd	r17, Z+32	; 0x20
    100e:	d8 01       	movw	r26, r16
    1010:	c7 01       	movw	r24, r14
    1012:	82 1b       	sub	r24, r18
    1014:	93 0b       	sbc	r25, r19
    1016:	a4 0b       	sbc	r26, r20
    1018:	b5 0b       	sbc	r27, r21
    101a:	85 a3       	std	Z+37, r24	; 0x25
    101c:	96 a3       	std	Z+38, r25	; 0x26
    101e:	a7 a3       	std	Z+39, r26	; 0x27
    1020:	b0 a7       	std	Z+40, r27	; 0x28

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1022:	12 16       	cp	r1, r18
    1024:	13 06       	cpc	r1, r19
    1026:	14 06       	cpc	r1, r20
    1028:	15 06       	cpc	r1, r21
    102a:	8c f1       	brlt	.+98     	; 0x108e <Timebase_UpCounter_Update+0xde>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    102c:	11 8e       	std	Z+25, r1	; 0x19
    102e:	12 8e       	std	Z+26, r1	; 0x1a
    1030:	13 8e       	std	Z+27, r1	; 0x1b
    1032:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1034:	11 a2       	std	Z+33, r1	; 0x21
    1036:	12 a2       	std	Z+34, r1	; 0x22
    1038:	13 a2       	std	Z+35, r1	; 0x23
    103a:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    103c:	e5 a2       	std	Z+37, r14	; 0x25
    103e:	f6 a2       	std	Z+38, r15	; 0x26
    1040:	07 a3       	std	Z+39, r16	; 0x27
    1042:	10 a7       	std	Z+40, r17	; 0x28
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1044:	80 8d       	ldd	r24, Z+24	; 0x18
    1046:	81 7e       	andi	r24, 0xE1	; 225
    1048:	88 60       	ori	r24, 0x08	; 8
    104a:	80 8f       	std	Z+24, r24	; 0x18
    104c:	20 c0       	rjmp	.+64     	; 0x108e <Timebase_UpCounter_Update+0xde>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    104e:	82 30       	cpi	r24, 0x02	; 2
    1050:	f1 f4       	brne	.+60     	; 0x108e <Timebase_UpCounter_Update+0xde>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1052:	1a 96       	adiw	r26, 0x0a	; 10
    1054:	8d 91       	ld	r24, X+
    1056:	9d 91       	ld	r25, X+
    1058:	0d 90       	ld	r0, X+
    105a:	bc 91       	ld	r27, X
    105c:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    105e:	21 a1       	ldd	r18, Z+33	; 0x21
    1060:	32 a1       	ldd	r19, Z+34	; 0x22
    1062:	43 a1       	ldd	r20, Z+35	; 0x23
    1064:	54 a1       	ldd	r21, Z+36	; 0x24
    1066:	82 0f       	add	r24, r18
    1068:	93 1f       	adc	r25, r19
    106a:	a4 1f       	adc	r26, r20
    106c:	b5 1f       	adc	r27, r21
    106e:	81 8f       	std	Z+25, r24	; 0x19
    1070:	92 8f       	std	Z+26, r25	; 0x1a
    1072:	a3 8f       	std	Z+27, r26	; 0x1b
    1074:	b4 8f       	std	Z+28, r27	; 0x1c
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1076:	85 8d       	ldd	r24, Z+29	; 0x1d
    1078:	96 8d       	ldd	r25, Z+30	; 0x1e
    107a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    107c:	b0 a1       	ldd	r27, Z+32	; 0x20
    107e:	82 1b       	sub	r24, r18
    1080:	93 0b       	sbc	r25, r19
    1082:	a4 0b       	sbc	r26, r20
    1084:	b5 0b       	sbc	r27, r21
    1086:	85 a3       	std	Z+37, r24	; 0x25
    1088:	96 a3       	std	Z+38, r25	; 0x26
    108a:	a7 a3       	std	Z+39, r26	; 0x27
    108c:	b0 a7       	std	Z+40, r27	; 0x28
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + Timebase_Timer_Get_Seconds());
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	08 95       	ret

00001098 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	e0 91 4b 01 	lds	r30, 0x014B
    109e:	f0 91 4c 01 	lds	r31, 0x014C
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	2a e2       	ldi	r18, 0x2A	; 42
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	bc 01       	movw	r22, r24
    10aa:	62 9f       	mul	r22, r18
    10ac:	c0 01       	movw	r24, r0
    10ae:	63 9f       	mul	r22, r19
    10b0:	90 0d       	add	r25, r0
    10b2:	72 9f       	mul	r23, r18
    10b4:	90 0d       	add	r25, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	e8 0f       	add	r30, r24
    10ba:	f9 1f       	adc	r31, r25
    10bc:	80 8d       	ldd	r24, Z+24	; 0x18
    10be:	86 95       	lsr	r24
    10c0:	8f 70       	andi	r24, 0x0F	; 15
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <Timebase_UpCounter_Expired+0x30>
    10c6:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    10c8:	84 2f       	mov	r24, r20
    10ca:	08 95       	ret

000010cc <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    10cc:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    10ce:	e0 91 4b 01 	lds	r30, 0x014B
    10d2:	f0 91 4c 01 	lds	r31, 0x014C
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8a e2       	ldi	r24, 0x2A	; 42
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	bc 01       	movw	r22, r24
    10e0:	26 9f       	mul	r18, r22
    10e2:	c0 01       	movw	r24, r0
    10e4:	27 9f       	mul	r18, r23
    10e6:	90 0d       	add	r25, r0
    10e8:	36 9f       	mul	r19, r22
    10ea:	90 0d       	add	r25, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	e8 0f       	add	r30, r24
    10f0:	f9 1f       	adc	r31, r25
    10f2:	80 8d       	ldd	r24, Z+24	; 0x18
    10f4:	86 95       	lsr	r24
    10f6:	8f 70       	andi	r24, 0x0F	; 15
    10f8:	84 30       	cpi	r24, 0x04	; 4
    10fa:	11 f0       	breq	.+4      	; 0x1100 <Timebase_UpCounter_Expired_Event+0x34>
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1100:	84 2f       	mov	r24, r20
    1102:	0e 94 29 07 	call	0xe52	; 0xe52 <Timebase_UpCounter_Reset>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1108:	08 95       	ret

0000110a <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    110a:	e0 91 4b 01 	lds	r30, 0x014B
    110e:	f0 91 4c 01 	lds	r31, 0x014C
    1112:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    1114:	2a e2       	ldi	r18, 0x2A	; 42
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	dc 01       	movw	r26, r24
    111a:	a2 9f       	mul	r26, r18
    111c:	c0 01       	movw	r24, r0
    111e:	a3 9f       	mul	r26, r19
    1120:	90 0d       	add	r25, r0
    1122:	b2 9f       	mul	r27, r18
    1124:	90 0d       	add	r25, r0
    1126:	11 24       	eor	r1, r1
    1128:	e8 0f       	add	r30, r24
    112a:	f9 1f       	adc	r31, r25
    112c:	80 8d       	ldd	r24, Z+24	; 0x18
    112e:	80 fd       	sbrc	r24, 0
    1130:	0f c0       	rjmp	.+30     	; 0x1150 <Timebase_UpCounter_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1132:	85 a1       	ldd	r24, Z+37	; 0x25
    1134:	96 a1       	ldd	r25, Z+38	; 0x26
    1136:	a7 a1       	ldd	r26, Z+39	; 0x27
    1138:	b0 a5       	ldd	r27, Z+40	; 0x28
    113a:	84 0f       	add	r24, r20
    113c:	95 1f       	adc	r25, r21
    113e:	a6 1f       	adc	r26, r22
    1140:	b7 1f       	adc	r27, r23
    1142:	81 a7       	std	Z+41, r24	; 0x29
    1144:	92 a7       	std	Z+42, r25	; 0x2a
    1146:	a3 a7       	std	Z+43, r26	; 0x2b
    1148:	b4 a7       	std	Z+44, r27	; 0x2c
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    114a:	80 8d       	ldd	r24, Z+24	; 0x18
    114c:	81 60       	ori	r24, 0x01	; 1
    114e:	80 8f       	std	Z+24, r24	; 0x18
    1150:	08 95       	ret

00001152 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1152:	e0 91 4b 01 	lds	r30, 0x014B
    1156:	f0 91 4c 01 	lds	r31, 0x014C
    115a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    115c:	2a e2       	ldi	r18, 0x2A	; 42
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	ac 01       	movw	r20, r24
    1162:	42 9f       	mul	r20, r18
    1164:	c0 01       	movw	r24, r0
    1166:	43 9f       	mul	r20, r19
    1168:	90 0d       	add	r25, r0
    116a:	52 9f       	mul	r21, r18
    116c:	90 0d       	add	r25, r0
    116e:	11 24       	eor	r1, r1
    1170:	e8 0f       	add	r30, r24
    1172:	f9 1f       	adc	r31, r25
    1174:	21 a5       	ldd	r18, Z+41	; 0x29
    1176:	32 a5       	ldd	r19, Z+42	; 0x2a
    1178:	43 a5       	ldd	r20, Z+43	; 0x2b
    117a:	54 a5       	ldd	r21, Z+44	; 0x2c
    117c:	85 a1       	ldd	r24, Z+37	; 0x25
    117e:	96 a1       	ldd	r25, Z+38	; 0x26
    1180:	a7 a1       	ldd	r26, Z+39	; 0x27
    1182:	b0 a5       	ldd	r27, Z+40	; 0x28
    1184:	28 1b       	sub	r18, r24
    1186:	39 0b       	sbc	r19, r25
    1188:	4a 0b       	sbc	r20, r26
    118a:	5b 0b       	sbc	r21, r27
    118c:	57 ff       	sbrs	r21, 7
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <Timebase_UpCounter_Get_Remaining_Period_Value+0x46>
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1198:	b9 01       	movw	r22, r18
    119a:	ca 01       	movw	r24, r20
    119c:	08 95       	ret

0000119e <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    11a2:	c0 91 4b 01 	lds	r28, 0x014B
    11a6:	d0 91 4c 01 	lds	r29, 0x014C
    11aa:	68 2f       	mov	r22, r24
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    11ae:	8a e2       	ldi	r24, 0x2A	; 42
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	68 9f       	mul	r22, r24
    11b4:	f0 01       	movw	r30, r0
    11b6:	69 9f       	mul	r22, r25
    11b8:	f0 0d       	add	r31, r0
    11ba:	78 9f       	mul	r23, r24
    11bc:	f0 0d       	add	r31, r0
    11be:	11 24       	eor	r1, r1
    11c0:	ec 0f       	add	r30, r28
    11c2:	fd 1f       	adc	r31, r29
    11c4:	21 a5       	ldd	r18, Z+41	; 0x29
    11c6:	32 a5       	ldd	r19, Z+42	; 0x2a
    11c8:	43 a5       	ldd	r20, Z+43	; 0x2b
    11ca:	54 a5       	ldd	r21, Z+44	; 0x2c
    11cc:	85 a1       	ldd	r24, Z+37	; 0x25
    11ce:	96 a1       	ldd	r25, Z+38	; 0x26
    11d0:	a7 a1       	ldd	r26, Z+39	; 0x27
    11d2:	b0 a5       	ldd	r27, Z+40	; 0x28
    11d4:	28 1b       	sub	r18, r24
    11d6:	39 0b       	sbc	r19, r25
    11d8:	4a 0b       	sbc	r20, r26
    11da:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    11dc:	57 fd       	sbrc	r21, 7
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <Timebase_UpCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_UpCounter_Get_Period_Flag( window )){
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	41 05       	cpc	r20, r1
    11e6:	51 05       	cpc	r21, r1
    11e8:	11 f0       	breq	.+4      	; 0x11ee <Timebase_UpCounter_Period_Value_Expired+0x50>
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <Timebase_UpCounter_Period_Value_Expired+0x74>
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	8a e2       	ldi	r24, 0x2A	; 42
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	ac 01       	movw	r20, r24
    11f6:	64 9f       	mul	r22, r20
    11f8:	c0 01       	movw	r24, r0
    11fa:	65 9f       	mul	r22, r21
    11fc:	90 0d       	add	r25, r0
    11fe:	74 9f       	mul	r23, r20
    1200:	90 0d       	add	r25, r0
    1202:	11 24       	eor	r1, r1
    1204:	c8 0f       	add	r28, r24
    1206:	d9 1f       	adc	r29, r25
    1208:	88 8d       	ldd	r24, Y+24	; 0x18
    120a:	80 ff       	sbrs	r24, 0
    120c:	21 e0       	ldi	r18, 0x01	; 1
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1212:	82 2f       	mov	r24, r18
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	08 95       	ret

0000121a <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    121a:	1f 93       	push	r17
    121c:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == 1){
    121e:	0e 94 cf 08 	call	0x119e	; 0x119e <Timebase_UpCounter_Period_Value_Expired>
    1222:	81 30       	cpi	r24, 0x01	; 1
    1224:	11 f0       	breq	.+4      	; 0x122a <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	16 c0       	rjmp	.+44     	; 0x1256 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    122a:	e0 91 4b 01 	lds	r30, 0x014B
    122e:	f0 91 4c 01 	lds	r31, 0x014C
    1232:	21 2f       	mov	r18, r17
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8a e2       	ldi	r24, 0x2A	; 42
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	ac 01       	movw	r20, r24
    123c:	24 9f       	mul	r18, r20
    123e:	c0 01       	movw	r24, r0
    1240:	25 9f       	mul	r18, r21
    1242:	90 0d       	add	r25, r0
    1244:	34 9f       	mul	r19, r20
    1246:	90 0d       	add	r25, r0
    1248:	11 24       	eor	r1, r1
    124a:	e8 0f       	add	r30, r24
    124c:	f9 1f       	adc	r31, r25
    124e:	80 8d       	ldd	r24, Z+24	; 0x18
    1250:	8e 7f       	andi	r24, 0xFE	; 254
    1252:	80 8f       	std	Z+24, r24	; 0x18
    1254:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1256:	1f 91       	pop	r17
    1258:	08 95       	ret

0000125a <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <Timebase_UpCounter_Update>
  }
}
    1260:	08 95       	ret

00001262 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0e 94 29 07 	call	0xe52	; 0xe52 <Timebase_UpCounter_Reset>
  }
}
    1268:	08 95       	ret

0000126a <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    126a:	e0 91 4b 01 	lds	r30, 0x014B
    126e:	f0 91 4c 01 	lds	r31, 0x014C
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2a e1       	ldi	r18, 0x1A	; 26
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	ac 01       	movw	r20, r24
    127a:	42 9f       	mul	r20, r18
    127c:	c0 01       	movw	r24, r0
    127e:	43 9f       	mul	r20, r19
    1280:	90 0d       	add	r25, r0
    1282:	52 9f       	mul	r21, r18
    1284:	90 0d       	add	r25, r0
    1286:	11 24       	eor	r1, r1
    1288:	e8 0f       	add	r30, r24
    128a:	f9 1f       	adc	r31, r25
    128c:	ee 5b       	subi	r30, 0xBE	; 190
    128e:	ff 4f       	sbci	r31, 0xFF	; 255
    1290:	80 81       	ld	r24, Z
    1292:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    1294:	8f 70       	andi	r24, 0x0F	; 15
    1296:	08 95       	ret

00001298 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1298:	e0 91 4b 01 	lds	r30, 0x014B
    129c:	f0 91 4c 01 	lds	r31, 0x014C
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	2a e1       	ldi	r18, 0x1A	; 26
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	ac 01       	movw	r20, r24
    12a8:	42 9f       	mul	r20, r18
    12aa:	c0 01       	movw	r24, r0
    12ac:	43 9f       	mul	r20, r19
    12ae:	90 0d       	add	r25, r0
    12b0:	52 9f       	mul	r21, r18
    12b2:	90 0d       	add	r25, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	e8 0f       	add	r30, r24
    12b8:	f9 1f       	adc	r31, r25
    12ba:	ee 5b       	subi	r30, 0xBE	; 190
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	6f 70       	andi	r22, 0x0F	; 15
    12c0:	66 0f       	add	r22, r22
    12c2:	80 81       	ld	r24, Z
    12c4:	81 7e       	andi	r24, 0xE1	; 225
    12c6:	86 2b       	or	r24, r22
    12c8:	80 83       	st	Z, r24
}
    12ca:	08 95       	ret

000012cc <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    12cc:	e0 91 4b 01 	lds	r30, 0x014B
    12d0:	f0 91 4c 01 	lds	r31, 0x014C
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	2a e1       	ldi	r18, 0x1A	; 26
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	ac 01       	movw	r20, r24
    12dc:	42 9f       	mul	r20, r18
    12de:	c0 01       	movw	r24, r0
    12e0:	43 9f       	mul	r20, r19
    12e2:	90 0d       	add	r25, r0
    12e4:	52 9f       	mul	r21, r18
    12e6:	90 0d       	add	r25, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	e8 0f       	add	r30, r24
    12ec:	f9 1f       	adc	r31, r25
    12ee:	e9 5b       	subi	r30, 0xB9	; 185
    12f0:	ff 4f       	sbci	r31, 0xFF	; 255
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    12f6:	82 81       	ldd	r24, Z+2	; 0x02
    12f8:	93 81       	ldd	r25, Z+3	; 0x03
    12fa:	08 95       	ret

000012fc <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    12fc:	e0 91 4b 01 	lds	r30, 0x014B
    1300:	f0 91 4c 01 	lds	r31, 0x014C
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	2a e1       	ldi	r18, 0x1A	; 26
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	dc 01       	movw	r26, r24
    130c:	a2 9f       	mul	r26, r18
    130e:	c0 01       	movw	r24, r0
    1310:	a3 9f       	mul	r26, r19
    1312:	90 0d       	add	r25, r0
    1314:	b2 9f       	mul	r27, r18
    1316:	90 0d       	add	r25, r0
    1318:	11 24       	eor	r1, r1
    131a:	e8 0f       	add	r30, r24
    131c:	f9 1f       	adc	r31, r25
    131e:	e9 5b       	subi	r30, 0xB9	; 185
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	40 83       	st	Z, r20
    1324:	51 83       	std	Z+1, r21	; 0x01
    1326:	62 83       	std	Z+2, r22	; 0x02
    1328:	73 83       	std	Z+3, r23	; 0x03
}
    132a:	08 95       	ret

0000132c <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    132c:	e0 91 4b 01 	lds	r30, 0x014B
    1330:	f0 91 4c 01 	lds	r31, 0x014C
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	2a e1       	ldi	r18, 0x1A	; 26
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	ac 01       	movw	r20, r24
    133c:	42 9f       	mul	r20, r18
    133e:	c0 01       	movw	r24, r0
    1340:	43 9f       	mul	r20, r19
    1342:	90 0d       	add	r25, r0
    1344:	52 9f       	mul	r21, r18
    1346:	90 0d       	add	r25, r0
    1348:	11 24       	eor	r1, r1
    134a:	e8 0f       	add	r30, r24
    134c:	f9 1f       	adc	r31, r25
    134e:	ed 5b       	subi	r30, 0xBD	; 189
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	60 81       	ld	r22, Z
    1354:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	08 95       	ret

0000135c <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    135c:	e0 91 4b 01 	lds	r30, 0x014B
    1360:	f0 91 4c 01 	lds	r31, 0x014C
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	2a e1       	ldi	r18, 0x1A	; 26
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	dc 01       	movw	r26, r24
    136c:	a2 9f       	mul	r26, r18
    136e:	c0 01       	movw	r24, r0
    1370:	a3 9f       	mul	r26, r19
    1372:	90 0d       	add	r25, r0
    1374:	b2 9f       	mul	r27, r18
    1376:	90 0d       	add	r25, r0
    1378:	11 24       	eor	r1, r1
    137a:	e8 0f       	add	r30, r24
    137c:	f9 1f       	adc	r31, r25
    137e:	ed 5b       	subi	r30, 0xBD	; 189
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	40 83       	st	Z, r20
    1384:	51 83       	std	Z+1, r21	; 0x01
    1386:	62 83       	std	Z+2, r22	; 0x02
    1388:	73 83       	std	Z+3, r23	; 0x03
}
    138a:	08 95       	ret

0000138c <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    138c:	e0 91 4b 01 	lds	r30, 0x014B
    1390:	f0 91 4c 01 	lds	r31, 0x014C
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	2a e1       	ldi	r18, 0x1A	; 26
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	ac 01       	movw	r20, r24
    139c:	42 9f       	mul	r20, r18
    139e:	c0 01       	movw	r24, r0
    13a0:	43 9f       	mul	r20, r19
    13a2:	90 0d       	add	r25, r0
    13a4:	52 9f       	mul	r21, r18
    13a6:	90 0d       	add	r25, r0
    13a8:	11 24       	eor	r1, r1
    13aa:	e8 0f       	add	r30, r24
    13ac:	f9 1f       	adc	r31, r25
    13ae:	e5 5b       	subi	r30, 0xB5	; 181
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    13b6:	82 81       	ldd	r24, Z+2	; 0x02
    13b8:	93 81       	ldd	r25, Z+3	; 0x03
    13ba:	08 95       	ret

000013bc <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    13bc:	e0 91 4b 01 	lds	r30, 0x014B
    13c0:	f0 91 4c 01 	lds	r31, 0x014C
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    13c8:	77 ff       	sbrs	r23, 7
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    13cc:	8a e1       	ldi	r24, 0x1A	; 26
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	ac 01       	movw	r20, r24
    13d2:	24 9f       	mul	r18, r20
    13d4:	c0 01       	movw	r24, r0
    13d6:	25 9f       	mul	r18, r21
    13d8:	90 0d       	add	r25, r0
    13da:	34 9f       	mul	r19, r20
    13dc:	90 0d       	add	r25, r0
    13de:	11 24       	eor	r1, r1
    13e0:	e8 0f       	add	r30, r24
    13e2:	f9 1f       	adc	r31, r25
    13e4:	e5 5b       	subi	r30, 0xB5	; 181
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	10 82       	st	Z, r1
    13ea:	11 82       	std	Z+1, r1	; 0x01
    13ec:	12 82       	std	Z+2, r1	; 0x02
    13ee:	13 82       	std	Z+3, r1	; 0x03
    13f0:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    13f2:	8a e1       	ldi	r24, 0x1A	; 26
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	dc 01       	movw	r26, r24
    13f8:	2a 9f       	mul	r18, r26
    13fa:	c0 01       	movw	r24, r0
    13fc:	2b 9f       	mul	r18, r27
    13fe:	90 0d       	add	r25, r0
    1400:	3a 9f       	mul	r19, r26
    1402:	90 0d       	add	r25, r0
    1404:	11 24       	eor	r1, r1
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	e5 5b       	subi	r30, 0xB5	; 181
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	40 83       	st	Z, r20
    1410:	51 83       	std	Z+1, r21	; 0x01
    1412:	62 83       	std	Z+2, r22	; 0x02
    1414:	73 83       	std	Z+3, r23	; 0x03
    1416:	08 95       	ret

00001418 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    1418:	e0 91 4b 01 	lds	r30, 0x014B
    141c:	f0 91 4c 01 	lds	r31, 0x014C
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	2a e1       	ldi	r18, 0x1A	; 26
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	ac 01       	movw	r20, r24
    1428:	42 9f       	mul	r20, r18
    142a:	c0 01       	movw	r24, r0
    142c:	43 9f       	mul	r20, r19
    142e:	90 0d       	add	r25, r0
    1430:	52 9f       	mul	r21, r18
    1432:	90 0d       	add	r25, r0
    1434:	11 24       	eor	r1, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	ee 5b       	subi	r30, 0xBE	; 190
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    1440:	81 70       	andi	r24, 0x01	; 1
    1442:	08 95       	ret

00001444 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1444:	e0 91 4b 01 	lds	r30, 0x014B
    1448:	f0 91 4c 01 	lds	r31, 0x014C
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	2a e1       	ldi	r18, 0x1A	; 26
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	ac 01       	movw	r20, r24
    1454:	42 9f       	mul	r20, r18
    1456:	c0 01       	movw	r24, r0
    1458:	43 9f       	mul	r20, r19
    145a:	90 0d       	add	r25, r0
    145c:	52 9f       	mul	r21, r18
    145e:	90 0d       	add	r25, r0
    1460:	11 24       	eor	r1, r1
    1462:	e8 0f       	add	r30, r24
    1464:	f9 1f       	adc	r31, r25
    1466:	ee 5b       	subi	r30, 0xBE	; 190
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	80 81       	ld	r24, Z
    146c:	81 60       	ori	r24, 0x01	; 1
    146e:	80 83       	st	Z, r24
}
    1470:	08 95       	ret

00001472 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1472:	e0 91 4b 01 	lds	r30, 0x014B
    1476:	f0 91 4c 01 	lds	r31, 0x014C
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	2a e1       	ldi	r18, 0x1A	; 26
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	ac 01       	movw	r20, r24
    1482:	42 9f       	mul	r20, r18
    1484:	c0 01       	movw	r24, r0
    1486:	43 9f       	mul	r20, r19
    1488:	90 0d       	add	r25, r0
    148a:	52 9f       	mul	r21, r18
    148c:	90 0d       	add	r25, r0
    148e:	11 24       	eor	r1, r1
    1490:	e8 0f       	add	r30, r24
    1492:	f9 1f       	adc	r31, r25
    1494:	ee 5b       	subi	r30, 0xBE	; 190
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	80 81       	ld	r24, Z
    149a:	8e 7f       	andi	r24, 0xFE	; 254
    149c:	80 83       	st	Z, r24
}
    149e:	08 95       	ret

000014a0 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    14a0:	e0 91 4b 01 	lds	r30, 0x014B
    14a4:	f0 91 4c 01 	lds	r31, 0x014C
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	2a e1       	ldi	r18, 0x1A	; 26
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	ac 01       	movw	r20, r24
    14b0:	42 9f       	mul	r20, r18
    14b2:	c0 01       	movw	r24, r0
    14b4:	43 9f       	mul	r20, r19
    14b6:	90 0d       	add	r25, r0
    14b8:	52 9f       	mul	r21, r18
    14ba:	90 0d       	add	r25, r0
    14bc:	11 24       	eor	r1, r1
    14be:	e8 0f       	add	r30, r24
    14c0:	f9 1f       	adc	r31, r25
    14c2:	ed 5b       	subi	r30, 0xBD	; 189
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	11 92       	st	Z+, r1
    14c8:	11 92       	st	Z+, r1
    14ca:	11 92       	st	Z+, r1
    14cc:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    14ce:	10 82       	st	Z, r1
    14d0:	11 82       	std	Z+1, r1	; 0x01
    14d2:	12 82       	std	Z+2, r1	; 0x02
    14d4:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14d6:	35 97       	sbiw	r30, 0x05	; 5
    14d8:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    14da:	80 7e       	andi	r24, 0xE0	; 224
    14dc:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    14de:	08 95       	ret

000014e0 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    14e0:	e0 91 4b 01 	lds	r30, 0x014B
    14e4:	f0 91 4c 01 	lds	r31, 0x014C
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	2a e1       	ldi	r18, 0x1A	; 26
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	ac 01       	movw	r20, r24
    14f0:	42 9f       	mul	r20, r18
    14f2:	c0 01       	movw	r24, r0
    14f4:	43 9f       	mul	r20, r19
    14f6:	90 0d       	add	r25, r0
    14f8:	52 9f       	mul	r21, r18
    14fa:	90 0d       	add	r25, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	e8 0f       	add	r30, r24
    1500:	f9 1f       	adc	r31, r25
    1502:	ed 5b       	subi	r30, 0xBD	; 189
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	11 92       	st	Z+, r1
    1508:	11 92       	st	Z+, r1
    150a:	11 92       	st	Z+, r1
    150c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    150e:	10 82       	st	Z, r1
    1510:	11 82       	std	Z+1, r1	; 0x01
    1512:	12 82       	std	Z+2, r1	; 0x02
    1514:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1516:	35 97       	sbiw	r30, 0x05	; 5
    1518:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    151a:	80 7e       	andi	r24, 0xE0	; 224
    151c:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    151e:	08 95       	ret

00001520 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1520:	e0 91 4b 01 	lds	r30, 0x014B
    1524:	f0 91 4c 01 	lds	r31, 0x014C
    1528:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    152a:	2a e1       	ldi	r18, 0x1A	; 26
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	ac 01       	movw	r20, r24
    1530:	42 9f       	mul	r20, r18
    1532:	c0 01       	movw	r24, r0
    1534:	43 9f       	mul	r20, r19
    1536:	90 0d       	add	r25, r0
    1538:	52 9f       	mul	r21, r18
    153a:	90 0d       	add	r25, r0
    153c:	11 24       	eor	r1, r1
    153e:	e8 0f       	add	r30, r24
    1540:	f9 1f       	adc	r31, r25
    1542:	ee 5b       	subi	r30, 0xBE	; 190
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	90 81       	ld	r25, Z
    1548:	89 2f       	mov	r24, r25
    154a:	86 95       	lsr	r24
    154c:	8f 70       	andi	r24, 0x0F	; 15
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	19 f0       	breq	.+6      	; 0x1558 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1552:	91 7e       	andi	r25, 0xE1	; 225
    1554:	92 60       	ori	r25, 0x02	; 2
    1556:	90 83       	st	Z, r25
    1558:	08 95       	ret

0000155a <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    155a:	e0 91 4b 01 	lds	r30, 0x014B
    155e:	f0 91 4c 01 	lds	r31, 0x014C
    1562:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1564:	2a e1       	ldi	r18, 0x1A	; 26
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	ac 01       	movw	r20, r24
    156a:	42 9f       	mul	r20, r18
    156c:	c0 01       	movw	r24, r0
    156e:	43 9f       	mul	r20, r19
    1570:	90 0d       	add	r25, r0
    1572:	52 9f       	mul	r21, r18
    1574:	90 0d       	add	r25, r0
    1576:	11 24       	eor	r1, r1
    1578:	e8 0f       	add	r30, r24
    157a:	f9 1f       	adc	r31, r25
    157c:	ee 5b       	subi	r30, 0xBE	; 190
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	90 81       	ld	r25, Z
    1582:	89 2f       	mov	r24, r25
    1584:	86 95       	lsr	r24
    1586:	8f 70       	andi	r24, 0x0F	; 15
    1588:	82 30       	cpi	r24, 0x02	; 2
    158a:	19 f0       	breq	.+6      	; 0x1592 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    158c:	91 7e       	andi	r25, 0xE1	; 225
    158e:	94 60       	ori	r25, 0x04	; 4
    1590:	90 83       	st	Z, r25
    1592:	08 95       	ret

00001594 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    1594:	cf 93       	push	r28
    1596:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1598:	a0 91 4b 01 	lds	r26, 0x014B
    159c:	b0 91 4c 01 	lds	r27, 0x014C
    15a0:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    15a2:	2a e1       	ldi	r18, 0x1A	; 26
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	82 9f       	mul	r24, r18
    15a8:	f0 01       	movw	r30, r0
    15aa:	83 9f       	mul	r24, r19
    15ac:	f0 0d       	add	r31, r0
    15ae:	92 9f       	mul	r25, r18
    15b0:	f0 0d       	add	r31, r0
    15b2:	11 24       	eor	r1, r1
    15b4:	ea 0f       	add	r30, r26
    15b6:	fb 1f       	adc	r31, r27
    15b8:	ef 01       	movw	r28, r30
    15ba:	ce 5b       	subi	r28, 0xBE	; 190
    15bc:	df 4f       	sbci	r29, 0xFF	; 255
    15be:	88 81       	ld	r24, Y
    15c0:	86 95       	lsr	r24
    15c2:	8f 70       	andi	r24, 0x0F	; 15
    15c4:	e9 f4       	brne	.+58     	; 0x1600 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    15c6:	e9 5b       	subi	r30, 0xB9	; 185
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	40 83       	st	Z, r20
    15cc:	51 83       	std	Z+1, r21	; 0x01
    15ce:	62 83       	std	Z+2, r22	; 0x02
    15d0:	73 83       	std	Z+3, r23	; 0x03
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15d2:	1a 96       	adiw	r26, 0x0a	; 10
    15d4:	8d 91       	ld	r24, X+
    15d6:	9d 91       	ld	r25, X+
    15d8:	0d 90       	ld	r0, X+
    15da:	bc 91       	ld	r27, X
    15dc:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    15de:	84 0f       	add	r24, r20
    15e0:	95 1f       	adc	r25, r21
    15e2:	a6 1f       	adc	r26, r22
    15e4:	b7 1f       	adc	r27, r23
    15e6:	b2 93       	st	-Z, r27
    15e8:	a2 93       	st	-Z, r26
    15ea:	92 93       	st	-Z, r25
    15ec:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    15ee:	98 81       	ld	r25, Y
    15f0:	89 2f       	mov	r24, r25
    15f2:	86 95       	lsr	r24
    15f4:	8f 70       	andi	r24, 0x0F	; 15
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	19 f0       	breq	.+6      	; 0x1600 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    15fa:	91 7e       	andi	r25, 0xE1	; 225
    15fc:	92 60       	ori	r25, 0x02	; 2
    15fe:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    1606:	cf 93       	push	r28
    1608:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    160a:	e0 91 4b 01 	lds	r30, 0x014B
    160e:	f0 91 4c 01 	lds	r31, 0x014C
    1612:	a8 2f       	mov	r26, r24
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	2a e1       	ldi	r18, 0x1A	; 26
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	e9 01       	movw	r28, r18
    161c:	ac 9f       	mul	r26, r28
    161e:	90 01       	movw	r18, r0
    1620:	ad 9f       	mul	r26, r29
    1622:	30 0d       	add	r19, r0
    1624:	bc 9f       	mul	r27, r28
    1626:	30 0d       	add	r19, r0
    1628:	11 24       	eor	r1, r1
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	ed 5b       	subi	r30, 0xBD	; 189
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	11 92       	st	Z+, r1
    1634:	11 92       	st	Z+, r1
    1636:	11 92       	st	Z+, r1
    1638:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    163a:	10 82       	st	Z, r1
    163c:	11 82       	std	Z+1, r1	; 0x01
    163e:	12 82       	std	Z+2, r1	; 0x02
    1640:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1642:	35 97       	sbiw	r30, 0x05	; 5
    1644:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1646:	90 7e       	andi	r25, 0xE0	; 224
    1648:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    164a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Timebase_DownCounter_Set_Securely>
} 
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	08 95       	ret

00001654 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    165c:	a0 91 4b 01 	lds	r26, 0x014B
    1660:	b0 91 4c 01 	lds	r27, 0x014C
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	2a e1       	ldi	r18, 0x1A	; 26
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	82 9f       	mul	r24, r18
    166c:	f0 01       	movw	r30, r0
    166e:	83 9f       	mul	r24, r19
    1670:	f0 0d       	add	r31, r0
    1672:	92 9f       	mul	r25, r18
    1674:	f0 0d       	add	r31, r0
    1676:	11 24       	eor	r1, r1
    1678:	ea 0f       	add	r30, r26
    167a:	fb 1f       	adc	r31, r27
    167c:	8f 01       	movw	r16, r30
    167e:	0e 5b       	subi	r16, 0xBE	; 190
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	e8 01       	movw	r28, r16
    1684:	88 81       	ld	r24, Y
    1686:	86 95       	lsr	r24
    1688:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	69 f5       	brne	.+90     	; 0x16e8 <Timebase_DownCounter_Update+0x94>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    168e:	1a 96       	adiw	r26, 0x0a	; 10
    1690:	2d 91       	ld	r18, X+
    1692:	3d 91       	ld	r19, X+
    1694:	4d 91       	ld	r20, X+
    1696:	5c 91       	ld	r21, X
    1698:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    169a:	bf 01       	movw	r22, r30
    169c:	6d 5b       	subi	r22, 0xBD	; 189
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	eb 01       	movw	r28, r22
    16a2:	88 81       	ld	r24, Y
    16a4:	99 81       	ldd	r25, Y+1	; 0x01
    16a6:	aa 81       	ldd	r26, Y+2	; 0x02
    16a8:	bb 81       	ldd	r27, Y+3	; 0x03
    16aa:	82 1b       	sub	r24, r18
    16ac:	93 0b       	sbc	r25, r19
    16ae:	a4 0b       	sbc	r26, r20
    16b0:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    16b2:	e9 5b       	subi	r30, 0xB9	; 185
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 83       	st	Z, r24
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	a2 83       	std	Z+2, r26	; 0x02
    16bc:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    16be:	18 16       	cp	r1, r24
    16c0:	19 06       	cpc	r1, r25
    16c2:	1a 06       	cpc	r1, r26
    16c4:	1b 06       	cpc	r1, r27
    16c6:	34 f1       	brlt	.+76     	; 0x1714 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    16c8:	db 01       	movw	r26, r22
    16ca:	1d 92       	st	X+, r1
    16cc:	1d 92       	st	X+, r1
    16ce:	1d 92       	st	X+, r1
    16d0:	1c 92       	st	X, r1
    16d2:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    16d4:	10 82       	st	Z, r1
    16d6:	11 82       	std	Z+1, r1	; 0x01
    16d8:	12 82       	std	Z+2, r1	; 0x02
    16da:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    16dc:	e8 01       	movw	r28, r16
    16de:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16e0:	80 7e       	andi	r24, 0xE0	; 224
    16e2:	88 60       	ori	r24, 0x08	; 8
    16e4:	88 83       	st	Y, r24
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){ 
    16e8:	82 30       	cpi	r24, 0x02	; 2
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <Timebase_DownCounter_Update+0xc0>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16ec:	1a 96       	adiw	r26, 0x0a	; 10
    16ee:	8d 91       	ld	r24, X+
    16f0:	9d 91       	ld	r25, X+
    16f2:	0d 90       	ld	r0, X+
    16f4:	bc 91       	ld	r27, X
    16f6:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    16f8:	e9 5b       	subi	r30, 0xB9	; 185
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	20 81       	ld	r18, Z
    16fe:	31 81       	ldd	r19, Z+1	; 0x01
    1700:	42 81       	ldd	r20, Z+2	; 0x02
    1702:	53 81       	ldd	r21, Z+3	; 0x03
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	a4 1f       	adc	r26, r20
    170a:	b5 1f       	adc	r27, r21
    170c:	b2 93       	st	-Z, r27
    170e:	a2 93       	st	-Z, r26
    1710:	92 93       	st	-Z, r25
    1712:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){ 
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	e0 91 4b 01 	lds	r30, 0x014B
    1724:	f0 91 4c 01 	lds	r31, 0x014C
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	2a e1       	ldi	r18, 0x1A	; 26
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	bc 01       	movw	r22, r24
    1730:	62 9f       	mul	r22, r18
    1732:	c0 01       	movw	r24, r0
    1734:	63 9f       	mul	r22, r19
    1736:	90 0d       	add	r25, r0
    1738:	72 9f       	mul	r23, r18
    173a:	90 0d       	add	r25, r0
    173c:	11 24       	eor	r1, r1
    173e:	e8 0f       	add	r30, r24
    1740:	f9 1f       	adc	r31, r25
    1742:	ee 5b       	subi	r30, 0xBE	; 190
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	80 81       	ld	r24, Z
    1748:	86 95       	lsr	r24
    174a:	8f 70       	andi	r24, 0x0F	; 15
    174c:	84 30       	cpi	r24, 0x04	; 4
    174e:	09 f4       	brne	.+2      	; 0x1752 <Timebase_DownCounter_Expired+0x34>
    1750:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1752:	84 2f       	mov	r24, r20
    1754:	08 95       	ret

00001756 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1756:	e0 91 4b 01 	lds	r30, 0x014B
    175a:	f0 91 4c 01 	lds	r31, 0x014C
    175e:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1760:	2a e1       	ldi	r18, 0x1A	; 26
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	ac 01       	movw	r20, r24
    1766:	42 9f       	mul	r20, r18
    1768:	c0 01       	movw	r24, r0
    176a:	43 9f       	mul	r20, r19
    176c:	90 0d       	add	r25, r0
    176e:	52 9f       	mul	r21, r18
    1770:	90 0d       	add	r25, r0
    1772:	11 24       	eor	r1, r1
    1774:	e8 0f       	add	r30, r24
    1776:	f9 1f       	adc	r31, r25
    1778:	df 01       	movw	r26, r30
    177a:	ae 5b       	subi	r26, 0xBE	; 190
    177c:	bf 4f       	sbci	r27, 0xFF	; 255
    177e:	8c 91       	ld	r24, X
    1780:	86 95       	lsr	r24
    1782:	8f 70       	andi	r24, 0x0F	; 15
    1784:	84 30       	cpi	r24, 0x04	; 4
    1786:	11 f0       	breq	.+4      	; 0x178c <Timebase_DownCounter_Expired_Event+0x36>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    178c:	ed 5b       	subi	r30, 0xBD	; 189
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	11 92       	st	Z+, r1
    1792:	11 92       	st	Z+, r1
    1794:	11 92       	st	Z+, r1
    1796:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1798:	10 82       	st	Z, r1
    179a:	11 82       	std	Z+1, r1	; 0x01
    179c:	12 82       	std	Z+2, r1	; 0x02
    179e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    17a0:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    17a2:	80 7e       	andi	r24, 0xE0	; 224
    17a4:	8c 93       	st	X, r24
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    17a8:	08 95       	ret

000017aa <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    17ae:	c0 91 4b 01 	lds	r28, 0x014B
    17b2:	d0 91 4c 01 	lds	r29, 0x014C
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    17ba:	8a e1       	ldi	r24, 0x1A	; 26
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	28 9f       	mul	r18, r24
    17c0:	f0 01       	movw	r30, r0
    17c2:	29 9f       	mul	r18, r25
    17c4:	f0 0d       	add	r31, r0
    17c6:	38 9f       	mul	r19, r24
    17c8:	f0 0d       	add	r31, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	ec 0f       	add	r30, r28
    17ce:	fd 1f       	adc	r31, r29
    17d0:	ee 5b       	subi	r30, 0xBE	; 190
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	e2 54       	subi	r30, 0x42	; 66
    17d8:	f0 40       	sbci	r31, 0x00	; 0
    17da:	80 fd       	sbrc	r24, 0
    17dc:	25 c0       	rjmp	.+74     	; 0x1828 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    17de:	e9 5b       	subi	r30, 0xB9	; 185
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	81 91       	ld	r24, Z+
    17e4:	91 91       	ld	r25, Z+
    17e6:	a1 91       	ld	r26, Z+
    17e8:	b1 91       	ld	r27, Z+
    17ea:	84 1b       	sub	r24, r20
    17ec:	95 0b       	sbc	r25, r21
    17ee:	a6 0b       	sbc	r26, r22
    17f0:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    17f2:	b7 ff       	sbrs	r27, 7
    17f4:	05 c0       	rjmp	.+10     	; 0x1800 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    17f6:	10 82       	st	Z, r1
    17f8:	11 82       	std	Z+1, r1	; 0x01
    17fa:	12 82       	std	Z+2, r1	; 0x02
    17fc:	13 82       	std	Z+3, r1	; 0x03
    17fe:	04 c0       	rjmp	.+8      	; 0x1808 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1800:	80 83       	st	Z, r24
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1808:	8a e1       	ldi	r24, 0x1A	; 26
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	28 9f       	mul	r18, r24
    180e:	f0 01       	movw	r30, r0
    1810:	29 9f       	mul	r18, r25
    1812:	f0 0d       	add	r31, r0
    1814:	38 9f       	mul	r19, r24
    1816:	f0 0d       	add	r31, r0
    1818:	11 24       	eor	r1, r1
    181a:	ec 0f       	add	r30, r28
    181c:	fd 1f       	adc	r31, r29
    181e:	ee 5b       	subi	r30, 0xBE	; 190
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	80 81       	ld	r24, Z
    1824:	81 60       	ori	r24, 0x01	; 1
    1826:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    182e:	e0 91 4b 01 	lds	r30, 0x014B
    1832:	f0 91 4c 01 	lds	r31, 0x014C
    1836:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1838:	2a e1       	ldi	r18, 0x1A	; 26
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	ac 01       	movw	r20, r24
    183e:	42 9f       	mul	r20, r18
    1840:	c0 01       	movw	r24, r0
    1842:	43 9f       	mul	r20, r19
    1844:	90 0d       	add	r25, r0
    1846:	52 9f       	mul	r21, r18
    1848:	90 0d       	add	r25, r0
    184a:	11 24       	eor	r1, r1
    184c:	e8 0f       	add	r30, r24
    184e:	f9 1f       	adc	r31, r25
    1850:	df 01       	movw	r26, r30
    1852:	a5 5b       	subi	r26, 0xB5	; 181
    1854:	bf 4f       	sbci	r27, 0xFF	; 255
    1856:	e9 5b       	subi	r30, 0xB9	; 185
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	20 81       	ld	r18, Z
    185c:	31 81       	ldd	r19, Z+1	; 0x01
    185e:	42 81       	ldd	r20, Z+2	; 0x02
    1860:	53 81       	ldd	r21, Z+3	; 0x03
    1862:	8d 91       	ld	r24, X+
    1864:	9d 91       	ld	r25, X+
    1866:	0d 90       	ld	r0, X+
    1868:	bc 91       	ld	r27, X
    186a:	a0 2d       	mov	r26, r0
    186c:	28 1b       	sub	r18, r24
    186e:	39 0b       	sbc	r19, r25
    1870:	4a 0b       	sbc	r20, r26
    1872:	5b 0b       	sbc	r21, r27
    1874:	57 ff       	sbrs	r21, 7
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1880:	b9 01       	movw	r22, r18
    1882:	ca 01       	movw	r24, r20
    1884:	08 95       	ret

00001886 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    188a:	c0 91 4b 01 	lds	r28, 0x014B
    188e:	d0 91 4c 01 	lds	r29, 0x014C
    1892:	68 2f       	mov	r22, r24
    1894:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1896:	8a e1       	ldi	r24, 0x1A	; 26
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	68 9f       	mul	r22, r24
    189c:	f0 01       	movw	r30, r0
    189e:	69 9f       	mul	r22, r25
    18a0:	f0 0d       	add	r31, r0
    18a2:	78 9f       	mul	r23, r24
    18a4:	f0 0d       	add	r31, r0
    18a6:	11 24       	eor	r1, r1
    18a8:	ec 0f       	add	r30, r28
    18aa:	fd 1f       	adc	r31, r29
    18ac:	df 01       	movw	r26, r30
    18ae:	a5 5b       	subi	r26, 0xB5	; 181
    18b0:	bf 4f       	sbci	r27, 0xFF	; 255
    18b2:	e9 5b       	subi	r30, 0xB9	; 185
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	20 81       	ld	r18, Z
    18b8:	31 81       	ldd	r19, Z+1	; 0x01
    18ba:	42 81       	ldd	r20, Z+2	; 0x02
    18bc:	53 81       	ldd	r21, Z+3	; 0x03
    18be:	8d 91       	ld	r24, X+
    18c0:	9d 91       	ld	r25, X+
    18c2:	0d 90       	ld	r0, X+
    18c4:	bc 91       	ld	r27, X
    18c6:	a0 2d       	mov	r26, r0
    18c8:	28 1b       	sub	r18, r24
    18ca:	39 0b       	sbc	r19, r25
    18cc:	4a 0b       	sbc	r20, r26
    18ce:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    18d0:	57 fd       	sbrc	r21, 7
    18d2:	07 c0       	rjmp	.+14     	; 0x18e2 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    18d4:	21 15       	cp	r18, r1
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 05       	cpc	r20, r1
    18da:	51 05       	cpc	r21, r1
    18dc:	11 f0       	breq	.+4      	; 0x18e2 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <Timebase_DownCounter_Period_Value_Expired+0x84>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	8a e1       	ldi	r24, 0x1A	; 26
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	ac 01       	movw	r20, r24
    18ea:	64 9f       	mul	r22, r20
    18ec:	c0 01       	movw	r24, r0
    18ee:	65 9f       	mul	r22, r21
    18f0:	90 0d       	add	r25, r0
    18f2:	74 9f       	mul	r23, r20
    18f4:	90 0d       	add	r25, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	c8 0f       	add	r28, r24
    18fa:	d9 1f       	adc	r29, r25
    18fc:	ce 5b       	subi	r28, 0xBE	; 190
    18fe:	df 4f       	sbci	r29, 0xFF	; 255
    1900:	88 81       	ld	r24, Y
    1902:	80 ff       	sbrs	r24, 0
    1904:	21 e0       	ldi	r18, 0x01	; 1
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    190a:	82 2f       	mov	r24, r18
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1912:	1f 93       	push	r17
    1914:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    1916:	0e 94 43 0c 	call	0x1886	; 0x1886 <Timebase_DownCounter_Period_Value_Expired>
    191a:	81 30       	cpi	r24, 0x01	; 1
    191c:	11 f0       	breq	.+4      	; 0x1922 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	18 c0       	rjmp	.+48     	; 0x1952 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1922:	e0 91 4b 01 	lds	r30, 0x014B
    1926:	f0 91 4c 01 	lds	r31, 0x014C
    192a:	21 2f       	mov	r18, r17
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	8a e1       	ldi	r24, 0x1A	; 26
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	ac 01       	movw	r20, r24
    1934:	24 9f       	mul	r18, r20
    1936:	c0 01       	movw	r24, r0
    1938:	25 9f       	mul	r18, r21
    193a:	90 0d       	add	r25, r0
    193c:	34 9f       	mul	r19, r20
    193e:	90 0d       	add	r25, r0
    1940:	11 24       	eor	r1, r1
    1942:	e8 0f       	add	r30, r24
    1944:	f9 1f       	adc	r31, r25
    1946:	ee 5b       	subi	r30, 0xBE	; 190
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	80 81       	ld	r24, Z
    194c:	8e 7f       	andi	r24, 0xFE	; 254
    194e:	80 83       	st	Z, r24
    1950:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1952:	1f 91       	pop	r17
    1954:	08 95       	ret

00001956 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0e 94 2a 0b 	call	0x1654	; 0x1654 <Timebase_DownCounter_Update>
  }
}
    195c:	08 95       	ret

0000195e <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    195e:	e0 91 4b 01 	lds	r30, 0x014B
    1962:	f0 91 4c 01 	lds	r31, 0x014C
    1966:	ed 5b       	subi	r30, 0xBD	; 189
    1968:	ff 4f       	sbci	r31, 0xFF	; 255
    196a:	11 92       	st	Z+, r1
    196c:	11 92       	st	Z+, r1
    196e:	11 92       	st	Z+, r1
    1970:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1972:	10 82       	st	Z, r1
    1974:	11 82       	std	Z+1, r1	; 0x01
    1976:	12 82       	std	Z+2, r1	; 0x02
    1978:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    197a:	35 97       	sbiw	r30, 0x05	; 5
    197c:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    197e:	80 7e       	andi	r24, 0xE0	; 224
    1980:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    1982:	08 95       	ret

00001984 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1984:	e0 91 4b 01 	lds	r30, 0x014B
    1988:	f0 91 4c 01 	lds	r31, 0x014C
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	2a e1       	ldi	r18, 0x1A	; 26
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	ac 01       	movw	r20, r24
    1994:	42 9f       	mul	r20, r18
    1996:	c0 01       	movw	r24, r0
    1998:	43 9f       	mul	r20, r19
    199a:	90 0d       	add	r25, r0
    199c:	52 9f       	mul	r21, r18
    199e:	90 0d       	add	r25, r0
    19a0:	11 24       	eor	r1, r1
    19a2:	e8 0f       	add	r30, r24
    19a4:	f9 1f       	adc	r31, r25
    19a6:	e1 5b       	subi	r30, 0xB1	; 177
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 81       	ld	r24, Z
    19ac:	86 95       	lsr	r24
  return Timebase->DownCounter[window].SS.Status.Value;
}
    19ae:	8f 70       	andi	r24, 0x0F	; 15
    19b0:	08 95       	ret

000019b2 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    19b2:	e0 91 4b 01 	lds	r30, 0x014B
    19b6:	f0 91 4c 01 	lds	r31, 0x014C
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	2a e1       	ldi	r18, 0x1A	; 26
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	ac 01       	movw	r20, r24
    19c2:	42 9f       	mul	r20, r18
    19c4:	c0 01       	movw	r24, r0
    19c6:	43 9f       	mul	r20, r19
    19c8:	90 0d       	add	r25, r0
    19ca:	52 9f       	mul	r21, r18
    19cc:	90 0d       	add	r25, r0
    19ce:	11 24       	eor	r1, r1
    19d0:	e8 0f       	add	r30, r24
    19d2:	f9 1f       	adc	r31, r25
    19d4:	e1 5b       	subi	r30, 0xB1	; 177
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	6f 70       	andi	r22, 0x0F	; 15
    19da:	66 0f       	add	r22, r22
    19dc:	80 81       	ld	r24, Z
    19de:	81 7e       	andi	r24, 0xE1	; 225
    19e0:	86 2b       	or	r24, r22
    19e2:	80 83       	st	Z, r24
}
    19e4:	08 95       	ret

000019e6 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    19e6:	e0 91 4b 01 	lds	r30, 0x014B
    19ea:	f0 91 4c 01 	lds	r31, 0x014C
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	2a e1       	ldi	r18, 0x1A	; 26
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	ac 01       	movw	r20, r24
    19f6:	42 9f       	mul	r20, r18
    19f8:	c0 01       	movw	r24, r0
    19fa:	43 9f       	mul	r20, r19
    19fc:	90 0d       	add	r25, r0
    19fe:	52 9f       	mul	r21, r18
    1a00:	90 0d       	add	r25, r0
    1a02:	11 24       	eor	r1, r1
    1a04:	e8 0f       	add	r30, r24
    1a06:	f9 1f       	adc	r31, r25
    1a08:	ec 5a       	subi	r30, 0xAC	; 172
    1a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].SS.Value;
}
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	08 95       	ret

00001a16 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1a16:	e0 91 4b 01 	lds	r30, 0x014B
    1a1a:	f0 91 4c 01 	lds	r31, 0x014C
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	2a e1       	ldi	r18, 0x1A	; 26
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	dc 01       	movw	r26, r24
    1a26:	a2 9f       	mul	r26, r18
    1a28:	c0 01       	movw	r24, r0
    1a2a:	a3 9f       	mul	r26, r19
    1a2c:	90 0d       	add	r25, r0
    1a2e:	b2 9f       	mul	r27, r18
    1a30:	90 0d       	add	r25, r0
    1a32:	11 24       	eor	r1, r1
    1a34:	e8 0f       	add	r30, r24
    1a36:	f9 1f       	adc	r31, r25
    1a38:	ec 5a       	subi	r30, 0xAC	; 172
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	40 83       	st	Z, r20
    1a3e:	51 83       	std	Z+1, r21	; 0x01
    1a40:	62 83       	std	Z+2, r22	; 0x02
    1a42:	73 83       	std	Z+3, r23	; 0x03
}
    1a44:	08 95       	ret

00001a46 <Timebase_DownCounter_SS_Get_EndValue>:

int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
    1a46:	e0 91 4b 01 	lds	r30, 0x014B
    1a4a:	f0 91 4c 01 	lds	r31, 0x014C
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	2a e1       	ldi	r18, 0x1A	; 26
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	ac 01       	movw	r20, r24
    1a56:	42 9f       	mul	r20, r18
    1a58:	c0 01       	movw	r24, r0
    1a5a:	43 9f       	mul	r20, r19
    1a5c:	90 0d       	add	r25, r0
    1a5e:	52 9f       	mul	r21, r18
    1a60:	90 0d       	add	r25, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	e8 0f       	add	r30, r24
    1a66:	f9 1f       	adc	r31, r25
    1a68:	e0 5b       	subi	r30, 0xB0	; 176
    1a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].SS.EndValue;
}
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	08 95       	ret

00001a76 <Timebase_DownCounter_SS_Set_EndValue>:

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1a76:	e0 91 4b 01 	lds	r30, 0x014B
    1a7a:	f0 91 4c 01 	lds	r31, 0x014C
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	2a e1       	ldi	r18, 0x1A	; 26
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	dc 01       	movw	r26, r24
    1a86:	a2 9f       	mul	r26, r18
    1a88:	c0 01       	movw	r24, r0
    1a8a:	a3 9f       	mul	r26, r19
    1a8c:	90 0d       	add	r25, r0
    1a8e:	b2 9f       	mul	r27, r18
    1a90:	90 0d       	add	r25, r0
    1a92:	11 24       	eor	r1, r1
    1a94:	e8 0f       	add	r30, r24
    1a96:	f9 1f       	adc	r31, r25
    1a98:	e0 5b       	subi	r30, 0xB0	; 176
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	40 83       	st	Z, r20
    1a9e:	51 83       	std	Z+1, r21	; 0x01
    1aa0:	62 83       	std	Z+2, r22	; 0x02
    1aa2:	73 83       	std	Z+3, r23	; 0x03
}
    1aa4:	08 95       	ret

00001aa6 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1aa6:	e0 91 4b 01 	lds	r30, 0x014B
    1aaa:	f0 91 4c 01 	lds	r31, 0x014C
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	2a e1       	ldi	r18, 0x1A	; 26
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	42 9f       	mul	r20, r18
    1ab8:	c0 01       	movw	r24, r0
    1aba:	43 9f       	mul	r20, r19
    1abc:	90 0d       	add	r25, r0
    1abe:	52 9f       	mul	r21, r18
    1ac0:	90 0d       	add	r25, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	e8 0f       	add	r30, r24
    1ac6:	f9 1f       	adc	r31, r25
    1ac8:	e8 5a       	subi	r30, 0xA8	; 168
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	60 81       	ld	r22, Z
    1ace:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].SS.PeriodValue;
}
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	93 81       	ldd	r25, Z+3	; 0x03
    1ad4:	08 95       	ret

00001ad6 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1ad6:	e0 91 4b 01 	lds	r30, 0x014B
    1ada:	f0 91 4c 01 	lds	r31, 0x014C
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1ae2:	77 ff       	sbrs	r23, 7
    1ae4:	13 c0       	rjmp	.+38     	; 0x1b0c <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].SS.PeriodValue = 0;
    1ae6:	8a e1       	ldi	r24, 0x1A	; 26
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	ac 01       	movw	r20, r24
    1aec:	24 9f       	mul	r18, r20
    1aee:	c0 01       	movw	r24, r0
    1af0:	25 9f       	mul	r18, r21
    1af2:	90 0d       	add	r25, r0
    1af4:	34 9f       	mul	r19, r20
    1af6:	90 0d       	add	r25, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	e8 0f       	add	r30, r24
    1afc:	f9 1f       	adc	r31, r25
    1afe:	e8 5a       	subi	r30, 0xA8	; 168
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	10 82       	st	Z, r1
    1b04:	11 82       	std	Z+1, r1	; 0x01
    1b06:	12 82       	std	Z+2, r1	; 0x02
    1b08:	13 82       	std	Z+3, r1	; 0x03
    1b0a:	08 95       	ret
  }else{
    Timebase->DownCounter[window].SS.PeriodValue = value;
    1b0c:	8a e1       	ldi	r24, 0x1A	; 26
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	dc 01       	movw	r26, r24
    1b12:	2a 9f       	mul	r18, r26
    1b14:	c0 01       	movw	r24, r0
    1b16:	2b 9f       	mul	r18, r27
    1b18:	90 0d       	add	r25, r0
    1b1a:	3a 9f       	mul	r19, r26
    1b1c:	90 0d       	add	r25, r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	e8 0f       	add	r30, r24
    1b22:	f9 1f       	adc	r31, r25
    1b24:	e8 5a       	subi	r30, 0xA8	; 168
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	40 83       	st	Z, r20
    1b2a:	51 83       	std	Z+1, r21	; 0x01
    1b2c:	62 83       	std	Z+2, r22	; 0x02
    1b2e:	73 83       	std	Z+3, r23	; 0x03
    1b30:	08 95       	ret

00001b32 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1b32:	e0 91 4b 01 	lds	r30, 0x014B
    1b36:	f0 91 4c 01 	lds	r31, 0x014C
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	2a e1       	ldi	r18, 0x1A	; 26
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	ac 01       	movw	r20, r24
    1b42:	42 9f       	mul	r20, r18
    1b44:	c0 01       	movw	r24, r0
    1b46:	43 9f       	mul	r20, r19
    1b48:	90 0d       	add	r25, r0
    1b4a:	52 9f       	mul	r21, r18
    1b4c:	90 0d       	add	r25, r0
    1b4e:	11 24       	eor	r1, r1
    1b50:	e8 0f       	add	r30, r24
    1b52:	f9 1f       	adc	r31, r25
    1b54:	e1 5b       	subi	r30, 0xB1	; 177
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].SS.Status.PeriodFlag;
}
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	08 95       	ret

00001b5e <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
    1b5e:	e0 91 4b 01 	lds	r30, 0x014B
    1b62:	f0 91 4c 01 	lds	r31, 0x014C
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	2a e1       	ldi	r18, 0x1A	; 26
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	42 9f       	mul	r20, r18
    1b70:	c0 01       	movw	r24, r0
    1b72:	43 9f       	mul	r20, r19
    1b74:	90 0d       	add	r25, r0
    1b76:	52 9f       	mul	r21, r18
    1b78:	90 0d       	add	r25, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	e8 0f       	add	r30, r24
    1b7e:	f9 1f       	adc	r31, r25
    1b80:	e1 5b       	subi	r30, 0xB1	; 177
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	81 60       	ori	r24, 0x01	; 1
    1b88:	80 83       	st	Z, r24
}
    1b8a:	08 95       	ret

00001b8c <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    1b8c:	e0 91 4b 01 	lds	r30, 0x014B
    1b90:	f0 91 4c 01 	lds	r31, 0x014C
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	2a e1       	ldi	r18, 0x1A	; 26
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	ac 01       	movw	r20, r24
    1b9c:	42 9f       	mul	r20, r18
    1b9e:	c0 01       	movw	r24, r0
    1ba0:	43 9f       	mul	r20, r19
    1ba2:	90 0d       	add	r25, r0
    1ba4:	52 9f       	mul	r21, r18
    1ba6:	90 0d       	add	r25, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	e8 0f       	add	r30, r24
    1bac:	f9 1f       	adc	r31, r25
    1bae:	e1 5b       	subi	r30, 0xB1	; 177
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8e 7f       	andi	r24, 0xFE	; 254
    1bb6:	80 83       	st	Z, r24
}
    1bb8:	08 95       	ret

00001bba <Timebase_DownCounter_SS_Reset>:
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1bba:	e0 91 4b 01 	lds	r30, 0x014B
    1bbe:	f0 91 4c 01 	lds	r31, 0x014C
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	2a e1       	ldi	r18, 0x1A	; 26
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	ac 01       	movw	r20, r24
    1bca:	42 9f       	mul	r20, r18
    1bcc:	c0 01       	movw	r24, r0
    1bce:	43 9f       	mul	r20, r19
    1bd0:	90 0d       	add	r25, r0
    1bd2:	52 9f       	mul	r21, r18
    1bd4:	90 0d       	add	r25, r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	e8 0f       	add	r30, r24
    1bda:	f9 1f       	adc	r31, r25
    1bdc:	e0 5b       	subi	r30, 0xB0	; 176
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	11 92       	st	Z+, r1
    1be2:	11 92       	st	Z+, r1
    1be4:	11 92       	st	Z+, r1
    1be6:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1be8:	10 82       	st	Z, r1
    1bea:	11 82       	std	Z+1, r1	; 0x01
    1bec:	12 82       	std	Z+2, r1	; 0x02
    1bee:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1bf0:	35 97       	sbiw	r30, 0x05	; 5
    1bf2:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    1bf4:	80 7e       	andi	r24, 0xE0	; 224
    1bf6:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Reset(uint8_t window){
  Timebase_DownCounter_SS_Set_EndValue(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1bf8:	08 95       	ret

00001bfa <Timebase_DownCounter_SS_Clear_All_Flags>:
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1bfa:	e0 91 4b 01 	lds	r30, 0x014B
    1bfe:	f0 91 4c 01 	lds	r31, 0x014C
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	2a e1       	ldi	r18, 0x1A	; 26
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	ac 01       	movw	r20, r24
    1c0a:	42 9f       	mul	r20, r18
    1c0c:	c0 01       	movw	r24, r0
    1c0e:	43 9f       	mul	r20, r19
    1c10:	90 0d       	add	r25, r0
    1c12:	52 9f       	mul	r21, r18
    1c14:	90 0d       	add	r25, r0
    1c16:	11 24       	eor	r1, r1
    1c18:	e8 0f       	add	r30, r24
    1c1a:	f9 1f       	adc	r31, r25
    1c1c:	e0 5b       	subi	r30, 0xB0	; 176
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	11 92       	st	Z+, r1
    1c22:	11 92       	st	Z+, r1
    1c24:	11 92       	st	Z+, r1
    1c26:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1c28:	10 82       	st	Z, r1
    1c2a:	11 82       	std	Z+1, r1	; 0x01
    1c2c:	12 82       	std	Z+2, r1	; 0x02
    1c2e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1c30:	35 97       	sbiw	r30, 0x05	; 5
    1c32:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    1c34:	80 7e       	andi	r24, 0xE0	; 224
    1c36:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1c38:	08 95       	ret

00001c3a <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
    1c3a:	e0 91 4b 01 	lds	r30, 0x014B
    1c3e:	f0 91 4c 01 	lds	r31, 0x014C
    1c42:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1c44:	2a e1       	ldi	r18, 0x1A	; 26
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	ac 01       	movw	r20, r24
    1c4a:	42 9f       	mul	r20, r18
    1c4c:	c0 01       	movw	r24, r0
    1c4e:	43 9f       	mul	r20, r19
    1c50:	90 0d       	add	r25, r0
    1c52:	52 9f       	mul	r21, r18
    1c54:	90 0d       	add	r25, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	e8 0f       	add	r30, r24
    1c5a:	f9 1f       	adc	r31, r25
    1c5c:	e1 5b       	subi	r30, 0xB1	; 177
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	90 81       	ld	r25, Z
    1c62:	89 2f       	mov	r24, r25
    1c64:	86 95       	lsr	r24
    1c66:	8f 70       	andi	r24, 0x0F	; 15
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <Timebase_DownCounter_SS_Start+0x38>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1c6c:	91 7e       	andi	r25, 0xE1	; 225
    1c6e:	92 60       	ori	r25, 0x02	; 2
    1c70:	90 83       	st	Z, r25
    1c72:	08 95       	ret

00001c74 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
    1c74:	e0 91 4b 01 	lds	r30, 0x014B
    1c78:	f0 91 4c 01 	lds	r31, 0x014C
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1c7e:	2a e1       	ldi	r18, 0x1A	; 26
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	ac 01       	movw	r20, r24
    1c84:	42 9f       	mul	r20, r18
    1c86:	c0 01       	movw	r24, r0
    1c88:	43 9f       	mul	r20, r19
    1c8a:	90 0d       	add	r25, r0
    1c8c:	52 9f       	mul	r21, r18
    1c8e:	90 0d       	add	r25, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	e8 0f       	add	r30, r24
    1c94:	f9 1f       	adc	r31, r25
    1c96:	e1 5b       	subi	r30, 0xB1	; 177
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	90 81       	ld	r25, Z
    1c9c:	89 2f       	mov	r24, r25
    1c9e:	86 95       	lsr	r24
    1ca0:	8f 70       	andi	r24, 0x0F	; 15
    1ca2:	82 30       	cpi	r24, 0x02	; 2
    1ca4:	19 f0       	breq	.+6      	; 0x1cac <Timebase_DownCounter_SS_Stop+0x38>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1ca6:	91 7e       	andi	r25, 0xE1	; 225
    1ca8:	94 60       	ori	r25, 0x04	; 4
    1caa:	90 83       	st	Z, r25
    1cac:	08 95       	ret

00001cae <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
    1cb2:	a0 91 4b 01 	lds	r26, 0x014B
    1cb6:	b0 91 4c 01 	lds	r27, 0x014C
    1cba:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1cbc:	2a e1       	ldi	r18, 0x1A	; 26
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	82 9f       	mul	r24, r18
    1cc2:	f0 01       	movw	r30, r0
    1cc4:	83 9f       	mul	r24, r19
    1cc6:	f0 0d       	add	r31, r0
    1cc8:	92 9f       	mul	r25, r18
    1cca:	f0 0d       	add	r31, r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	ea 0f       	add	r30, r26
    1cd0:	fb 1f       	adc	r31, r27
    1cd2:	ef 01       	movw	r28, r30
    1cd4:	c1 5b       	subi	r28, 0xB1	; 177
    1cd6:	df 4f       	sbci	r29, 0xFF	; 255
    1cd8:	88 81       	ld	r24, Y
    1cda:	86 95       	lsr	r24
    1cdc:	8f 70       	andi	r24, 0x0F	; 15
    1cde:	e9 f4       	brne	.+58     	; 0x1d1a <Timebase_DownCounter_SS_Set_Securely+0x6c>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1ce0:	ec 5a       	subi	r30, 0xAC	; 172
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	40 83       	st	Z, r20
    1ce6:	51 83       	std	Z+1, r21	; 0x01
    1ce8:	62 83       	std	Z+2, r22	; 0x02
    1cea:	73 83       	std	Z+3, r23	; 0x03
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1cec:	1a 96       	adiw	r26, 0x0a	; 10
    1cee:	8d 91       	ld	r24, X+
    1cf0:	9d 91       	ld	r25, X+
    1cf2:	0d 90       	ld	r0, X+
    1cf4:	bc 91       	ld	r27, X
    1cf6:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1cf8:	84 0f       	add	r24, r20
    1cfa:	95 1f       	adc	r25, r21
    1cfc:	a6 1f       	adc	r26, r22
    1cfe:	b7 1f       	adc	r27, r23
    1d00:	b2 93       	st	-Z, r27
    1d02:	a2 93       	st	-Z, r26
    1d04:	92 93       	st	-Z, r25
    1d06:	82 93       	st	-Z, r24
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1d08:	98 81       	ld	r25, Y
    1d0a:	89 2f       	mov	r24, r25
    1d0c:	86 95       	lsr	r24
    1d0e:	8f 70       	andi	r24, 0x0F	; 15
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	19 f0       	breq	.+6      	; 0x1d1a <Timebase_DownCounter_SS_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1d14:	91 7e       	andi	r25, 0xE1	; 225
    1d16:	92 60       	ori	r25, 0x02	; 2
    1d18:	98 83       	st	Y, r25
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
    Timebase_DownCounter_SS_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	08 95       	ret

00001d20 <Timebase_DownCounter_SS_Set_Forcefully>:

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    1d20:	cf 93       	push	r28
    1d22:	df 93       	push	r29
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1d24:	e0 91 4b 01 	lds	r30, 0x014B
    1d28:	f0 91 4c 01 	lds	r31, 0x014C
    1d2c:	a8 2f       	mov	r26, r24
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	2a e1       	ldi	r18, 0x1A	; 26
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	e9 01       	movw	r28, r18
    1d36:	ac 9f       	mul	r26, r28
    1d38:	90 01       	movw	r18, r0
    1d3a:	ad 9f       	mul	r26, r29
    1d3c:	30 0d       	add	r19, r0
    1d3e:	bc 9f       	mul	r27, r28
    1d40:	30 0d       	add	r19, r0
    1d42:	11 24       	eor	r1, r1
    1d44:	e2 0f       	add	r30, r18
    1d46:	f3 1f       	adc	r31, r19
    1d48:	e0 5b       	subi	r30, 0xB0	; 176
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	11 92       	st	Z+, r1
    1d4e:	11 92       	st	Z+, r1
    1d50:	11 92       	st	Z+, r1
    1d52:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1d54:	10 82       	st	Z, r1
    1d56:	11 82       	std	Z+1, r1	; 0x01
    1d58:	12 82       	std	Z+2, r1	; 0x02
    1d5a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1d5c:	35 97       	sbiw	r30, 0x05	; 5
    1d5e:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    1d60:	90 7e       	andi	r25, 0xE0	; 224
    1d62:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1d64:	0e 94 57 0e 	call	0x1cae	; 0x1cae <Timebase_DownCounter_SS_Set_Securely>
} 
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	08 95       	ret

00001d6e <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
    1d76:	a0 91 4b 01 	lds	r26, 0x014B
    1d7a:	b0 91 4c 01 	lds	r27, 0x014C
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	2a e1       	ldi	r18, 0x1A	; 26
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	82 9f       	mul	r24, r18
    1d86:	f0 01       	movw	r30, r0
    1d88:	83 9f       	mul	r24, r19
    1d8a:	f0 0d       	add	r31, r0
    1d8c:	92 9f       	mul	r25, r18
    1d8e:	f0 0d       	add	r31, r0
    1d90:	11 24       	eor	r1, r1
    1d92:	ea 0f       	add	r30, r26
    1d94:	fb 1f       	adc	r31, r27
    1d96:	8f 01       	movw	r16, r30
    1d98:	01 5b       	subi	r16, 0xB1	; 177
    1d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d9c:	e8 01       	movw	r28, r16
    1d9e:	88 81       	ld	r24, Y
    1da0:	86 95       	lsr	r24
    1da2:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	69 f5       	brne	.+90     	; 0x1e02 <Timebase_DownCounter_SS_Update+0x94>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1da8:	1a 96       	adiw	r26, 0x0a	; 10
    1daa:	2d 91       	ld	r18, X+
    1dac:	3d 91       	ld	r19, X+
    1dae:	4d 91       	ld	r20, X+
    1db0:	5c 91       	ld	r21, X
    1db2:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_SS_Set_Value(window, Timebase_DownCounter_SS_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    1db4:	bf 01       	movw	r22, r30
    1db6:	60 5b       	subi	r22, 0xB0	; 176
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	eb 01       	movw	r28, r22
    1dbc:	88 81       	ld	r24, Y
    1dbe:	99 81       	ldd	r25, Y+1	; 0x01
    1dc0:	aa 81       	ldd	r26, Y+2	; 0x02
    1dc2:	bb 81       	ldd	r27, Y+3	; 0x03
    1dc4:	82 1b       	sub	r24, r18
    1dc6:	93 0b       	sbc	r25, r19
    1dc8:	a4 0b       	sbc	r26, r20
    1dca:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1dcc:	ec 5a       	subi	r30, 0xAC	; 172
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_SS_Set_Value(window, Timebase_DownCounter_SS_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    1dd8:	18 16       	cp	r1, r24
    1dda:	19 06       	cpc	r1, r25
    1ddc:	1a 06       	cpc	r1, r26
    1dde:	1b 06       	cpc	r1, r27
    1de0:	34 f1       	brlt	.+76     	; 0x1e2e <Timebase_DownCounter_SS_Update+0xc0>
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1de2:	db 01       	movw	r26, r22
    1de4:	1d 92       	st	X+, r1
    1de6:	1d 92       	st	X+, r1
    1de8:	1d 92       	st	X+, r1
    1dea:	1c 92       	st	X, r1
    1dec:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1dee:	10 82       	st	Z, r1
    1df0:	11 82       	std	Z+1, r1	; 0x01
    1df2:	12 82       	std	Z+2, r1	; 0x02
    1df4:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    1df6:	e8 01       	movw	r28, r16
    1df8:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1dfa:	80 7e       	andi	r24, 0xE0	; 224
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	88 83       	st	Y, r24
    1e00:	16 c0       	rjmp	.+44     	; 0x1e2e <Timebase_DownCounter_SS_Update+0xc0>
    Timebase_DownCounter_SS_Set_Value(window, Timebase_DownCounter_SS_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){ 
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	a1 f4       	brne	.+40     	; 0x1e2e <Timebase_DownCounter_SS_Update+0xc0>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1e06:	1a 96       	adiw	r26, 0x0a	; 10
    1e08:	8d 91       	ld	r24, X+
    1e0a:	9d 91       	ld	r25, X+
    1e0c:	0d 90       	ld	r0, X+
    1e0e:	bc 91       	ld	r27, X
    1e10:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1e12:	ec 5a       	subi	r30, 0xAC	; 172
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	20 81       	ld	r18, Z
    1e18:	31 81       	ldd	r19, Z+1	; 0x01
    1e1a:	42 81       	ldd	r20, Z+2	; 0x02
    1e1c:	53 81       	ldd	r21, Z+3	; 0x03
    1e1e:	82 0f       	add	r24, r18
    1e20:	93 1f       	adc	r25, r19
    1e22:	a4 1f       	adc	r26, r20
    1e24:	b5 1f       	adc	r27, r21
    1e26:	b2 93       	st	-Z, r27
    1e28:	a2 93       	st	-Z, r26
    1e2a:	92 93       	st	-Z, r25
    1e2c:	82 93       	st	-Z, r24
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){ 
    Timebase_DownCounter_SS_Set_EndValue(window, Timebase_DownCounter_SS_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    1e2e:	df 91       	pop	r29
    1e30:	cf 91       	pop	r28
    1e32:	1f 91       	pop	r17
    1e34:	0f 91       	pop	r16
    1e36:	08 95       	ret

00001e38 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	e0 91 4b 01 	lds	r30, 0x014B
    1e3e:	f0 91 4c 01 	lds	r31, 0x014C
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	2a e1       	ldi	r18, 0x1A	; 26
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	bc 01       	movw	r22, r24
    1e4a:	62 9f       	mul	r22, r18
    1e4c:	c0 01       	movw	r24, r0
    1e4e:	63 9f       	mul	r22, r19
    1e50:	90 0d       	add	r25, r0
    1e52:	72 9f       	mul	r23, r18
    1e54:	90 0d       	add	r25, r0
    1e56:	11 24       	eor	r1, r1
    1e58:	e8 0f       	add	r30, r24
    1e5a:	f9 1f       	adc	r31, r25
    1e5c:	e1 5b       	subi	r30, 0xB1	; 177
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	86 95       	lsr	r24
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	84 30       	cpi	r24, 0x04	; 4
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <Timebase_DownCounter_SS_Expired+0x34>
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1e6c:	84 2f       	mov	r24, r20
    1e6e:	08 95       	ret

00001e70 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
    1e70:	e0 91 4b 01 	lds	r30, 0x014B
    1e74:	f0 91 4c 01 	lds	r31, 0x014C
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1e7a:	2a e1       	ldi	r18, 0x1A	; 26
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	ac 01       	movw	r20, r24
    1e80:	42 9f       	mul	r20, r18
    1e82:	c0 01       	movw	r24, r0
    1e84:	43 9f       	mul	r20, r19
    1e86:	90 0d       	add	r25, r0
    1e88:	52 9f       	mul	r21, r18
    1e8a:	90 0d       	add	r25, r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	e8 0f       	add	r30, r24
    1e90:	f9 1f       	adc	r31, r25
    1e92:	df 01       	movw	r26, r30
    1e94:	a1 5b       	subi	r26, 0xB1	; 177
    1e96:	bf 4f       	sbci	r27, 0xFF	; 255
    1e98:	8c 91       	ld	r24, X
    1e9a:	86 95       	lsr	r24
    1e9c:	8f 70       	andi	r24, 0x0F	; 15
    1e9e:	84 30       	cpi	r24, 0x04	; 4
    1ea0:	11 f0       	breq	.+4      	; 0x1ea6 <Timebase_DownCounter_SS_Expired_Event+0x36>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	08 95       	ret
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    1ea6:	e0 5b       	subi	r30, 0xB0	; 176
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	11 92       	st	Z+, r1
    1eac:	11 92       	st	Z+, r1
    1eae:	11 92       	st	Z+, r1
    1eb0:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    1eb2:	10 82       	st	Z, r1
    1eb4:	11 82       	std	Z+1, r1	; 0x01
    1eb6:	12 82       	std	Z+2, r1	; 0x02
    1eb8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    1eba:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    1ebc:	80 7e       	andi	r24, 0xE0	; 224
    1ebe:	8c 93       	st	X, r24
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1ec2:	08 95       	ret

00001ec4 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.PeriodFlag;
    1ec8:	c0 91 4b 01 	lds	r28, 0x014B
    1ecc:	d0 91 4c 01 	lds	r29, 0x014C
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    1ed4:	8a e1       	ldi	r24, 0x1A	; 26
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	28 9f       	mul	r18, r24
    1eda:	f0 01       	movw	r30, r0
    1edc:	29 9f       	mul	r18, r25
    1ede:	f0 0d       	add	r31, r0
    1ee0:	38 9f       	mul	r19, r24
    1ee2:	f0 0d       	add	r31, r0
    1ee4:	11 24       	eor	r1, r1
    1ee6:	ec 0f       	add	r30, r28
    1ee8:	fd 1f       	adc	r31, r29
    1eea:	e1 5b       	subi	r30, 0xB1	; 177
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	ef 54       	subi	r30, 0x4F	; 79
    1ef2:	f0 40       	sbci	r31, 0x00	; 0
    1ef4:	80 fd       	sbrc	r24, 0
    1ef6:	25 c0       	rjmp	.+74     	; 0x1f42 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1ef8:	ec 5a       	subi	r30, 0xAC	; 172
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	81 91       	ld	r24, Z+
    1efe:	91 91       	ld	r25, Z+
    1f00:	a1 91       	ld	r26, Z+
    1f02:	b1 91       	ld	r27, Z+
    1f04:	84 1b       	sub	r24, r20
    1f06:	95 0b       	sbc	r25, r21
    1f08:	a6 0b       	sbc	r26, r22
    1f0a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].SS.PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1f0c:	b7 ff       	sbrs	r27, 7
    1f0e:	05 c0       	rjmp	.+10     	; 0x1f1a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].SS.PeriodValue = 0;
    1f10:	10 82       	st	Z, r1
    1f12:	11 82       	std	Z+1, r1	; 0x01
    1f14:	12 82       	std	Z+2, r1	; 0x02
    1f16:	13 82       	std	Z+3, r1	; 0x03
    1f18:	04 c0       	rjmp	.+8      	; 0x1f22 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].SS.PeriodValue = value;
    1f1a:	80 83       	st	Z, r24
    1f1c:	91 83       	std	Z+1, r25	; 0x01
    1f1e:	a2 83       	std	Z+2, r26	; 0x02
    1f20:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
    1f22:	8a e1       	ldi	r24, 0x1A	; 26
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	28 9f       	mul	r18, r24
    1f28:	f0 01       	movw	r30, r0
    1f2a:	29 9f       	mul	r18, r25
    1f2c:	f0 0d       	add	r31, r0
    1f2e:	38 9f       	mul	r19, r24
    1f30:	f0 0d       	add	r31, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	ec 0f       	add	r30, r28
    1f36:	fd 1f       	adc	r31, r29
    1f38:	e1 5b       	subi	r30, 0xB1	; 177
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 81       	ld	r24, Z
    1f3e:	81 60       	ori	r24, 0x01	; 1
    1f40:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    1f42:	df 91       	pop	r29
    1f44:	cf 91       	pop	r28
    1f46:	08 95       	ret

00001f48 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
    1f48:	e0 91 4b 01 	lds	r30, 0x014B
    1f4c:	f0 91 4c 01 	lds	r31, 0x014C
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1f52:	2a e1       	ldi	r18, 0x1A	; 26
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	ac 01       	movw	r20, r24
    1f58:	42 9f       	mul	r20, r18
    1f5a:	c0 01       	movw	r24, r0
    1f5c:	43 9f       	mul	r20, r19
    1f5e:	90 0d       	add	r25, r0
    1f60:	52 9f       	mul	r21, r18
    1f62:	90 0d       	add	r25, r0
    1f64:	11 24       	eor	r1, r1
    1f66:	e8 0f       	add	r30, r24
    1f68:	f9 1f       	adc	r31, r25
    1f6a:	df 01       	movw	r26, r30
    1f6c:	a8 5a       	subi	r26, 0xA8	; 168
    1f6e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f70:	ec 5a       	subi	r30, 0xAC	; 172
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	20 81       	ld	r18, Z
    1f76:	31 81       	ldd	r19, Z+1	; 0x01
    1f78:	42 81       	ldd	r20, Z+2	; 0x02
    1f7a:	53 81       	ldd	r21, Z+3	; 0x03
    1f7c:	8d 91       	ld	r24, X+
    1f7e:	9d 91       	ld	r25, X+
    1f80:	0d 90       	ld	r0, X+
    1f82:	bc 91       	ld	r27, X
    1f84:	a0 2d       	mov	r26, r0
    1f86:	28 1b       	sub	r18, r24
    1f88:	39 0b       	sbc	r19, r25
    1f8a:	4a 0b       	sbc	r20, r26
    1f8c:	5b 0b       	sbc	r21, r27
    1f8e:	57 ff       	sbrs	r21, 7
    1f90:	04 c0       	rjmp	.+8      	; 0x1f9a <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x52>
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e0       	ldi	r20, 0x00	; 0
    1f98:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	ca 01       	movw	r24, r20
    1f9e:	08 95       	ret

00001fa0 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1fa0:	cf 93       	push	r28
    1fa2:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
    1fa4:	c0 91 4b 01 	lds	r28, 0x014B
    1fa8:	d0 91 4c 01 	lds	r29, 0x014C
    1fac:	68 2f       	mov	r22, r24
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1fb0:	8a e1       	ldi	r24, 0x1A	; 26
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	68 9f       	mul	r22, r24
    1fb6:	f0 01       	movw	r30, r0
    1fb8:	69 9f       	mul	r22, r25
    1fba:	f0 0d       	add	r31, r0
    1fbc:	78 9f       	mul	r23, r24
    1fbe:	f0 0d       	add	r31, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	ec 0f       	add	r30, r28
    1fc4:	fd 1f       	adc	r31, r29
    1fc6:	df 01       	movw	r26, r30
    1fc8:	a8 5a       	subi	r26, 0xA8	; 168
    1fca:	bf 4f       	sbci	r27, 0xFF	; 255
    1fcc:	ec 5a       	subi	r30, 0xAC	; 172
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	20 81       	ld	r18, Z
    1fd2:	31 81       	ldd	r19, Z+1	; 0x01
    1fd4:	42 81       	ldd	r20, Z+2	; 0x02
    1fd6:	53 81       	ldd	r21, Z+3	; 0x03
    1fd8:	8d 91       	ld	r24, X+
    1fda:	9d 91       	ld	r25, X+
    1fdc:	0d 90       	ld	r0, X+
    1fde:	bc 91       	ld	r27, X
    1fe0:	a0 2d       	mov	r26, r0
    1fe2:	28 1b       	sub	r18, r24
    1fe4:	39 0b       	sbc	r19, r25
    1fe6:	4a 0b       	sbc	r20, r26
    1fe8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1fea:	57 fd       	sbrc	r21, 7
    1fec:	07 c0       	rjmp	.+14     	; 0x1ffc <Timebase_DownCounter_SS_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1fee:	21 15       	cp	r18, r1
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	41 05       	cpc	r20, r1
    1ff4:	51 05       	cpc	r21, r1
    1ff6:	11 f0       	breq	.+4      	; 0x1ffc <Timebase_DownCounter_SS_Period_Value_Expired+0x5c>
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <Timebase_DownCounter_SS_Period_Value_Expired+0x84>
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	8a e1       	ldi	r24, 0x1A	; 26
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	ac 01       	movw	r20, r24
    2004:	64 9f       	mul	r22, r20
    2006:	c0 01       	movw	r24, r0
    2008:	65 9f       	mul	r22, r21
    200a:	90 0d       	add	r25, r0
    200c:	74 9f       	mul	r23, r20
    200e:	90 0d       	add	r25, r0
    2010:	11 24       	eor	r1, r1
    2012:	c8 0f       	add	r28, r24
    2014:	d9 1f       	adc	r29, r25
    2016:	c1 5b       	subi	r28, 0xB1	; 177
    2018:	df 4f       	sbci	r29, 0xFF	; 255
    201a:	88 81       	ld	r24, Y
    201c:	80 ff       	sbrs	r24, 0
    201e:	21 e0       	ldi	r18, 0x01	; 1
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    2024:	82 2f       	mov	r24, r18
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	08 95       	ret

0000202c <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    202c:	1f 93       	push	r17
    202e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    2030:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <Timebase_DownCounter_SS_Period_Value_Expired>
    2034:	81 30       	cpi	r24, 0x01	; 1
    2036:	11 f0       	breq	.+4      	; 0x203c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	18 c0       	rjmp	.+48     	; 0x206c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    203c:	e0 91 4b 01 	lds	r30, 0x014B
    2040:	f0 91 4c 01 	lds	r31, 0x014C
    2044:	21 2f       	mov	r18, r17
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	8a e1       	ldi	r24, 0x1A	; 26
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	ac 01       	movw	r20, r24
    204e:	24 9f       	mul	r18, r20
    2050:	c0 01       	movw	r24, r0
    2052:	25 9f       	mul	r18, r21
    2054:	90 0d       	add	r25, r0
    2056:	34 9f       	mul	r19, r20
    2058:	90 0d       	add	r25, r0
    205a:	11 24       	eor	r1, r1
    205c:	e8 0f       	add	r30, r24
    205e:	f9 1f       	adc	r31, r25
    2060:	e1 5b       	subi	r30, 0xB1	; 177
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	8e 7f       	andi	r24, 0xFE	; 254
    2068:	80 83       	st	Z, r24
    206a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    206c:	1f 91       	pop	r17
    206e:	08 95       	ret

00002070 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_SS_Update(i);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <Timebase_DownCounter_SS_Update>
  }
}
    2076:	08 95       	ret

00002078 <Timebase_DownCounter_SS_Reset_All>:
int32_t Timebase_DownCounter_SS_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].SS.EndValue;
}

void Timebase_DownCounter_SS_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.EndValue = value;
    2078:	e0 91 4b 01 	lds	r30, 0x014B
    207c:	f0 91 4c 01 	lds	r31, 0x014C
    2080:	e0 5b       	subi	r30, 0xB0	; 176
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	11 92       	st	Z+, r1
    2086:	11 92       	st	Z+, r1
    2088:	11 92       	st	Z+, r1
    208a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].SS.Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].SS.Value = value;
    208c:	10 82       	st	Z, r1
    208e:	11 82       	std	Z+1, r1	; 0x01
    2090:	12 82       	std	Z+2, r1	; 0x02
    2092:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].SS.Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].SS.Status.Value = value;
    2094:	35 97       	sbiw	r30, 0x05	; 5
    2096:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].SS.Status.PeriodFlag = 0;
    2098:	80 7e       	andi	r24, 0xE0	; 224
    209a:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    209c:	08 95       	ret

0000209e <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    209e:	0e 94 31 09 	call	0x1262	; 0x1262 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    20a2:	0e 94 af 0c 	call	0x195e	; 0x195e <Timebase_DownCounter_Reset_All>
  #endif
}
    20a6:	08 95       	ret

000020a8 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    20ae:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    20b2:	c8 01       	movw	r24, r16
    20b4:	0e 94 b3 03 	call	0x766	; 0x766 <Timebase_Timer_Config>
  Timebase_Reset();
    20b8:	0e 94 4f 10 	call	0x209e	; 0x209e <Timebase_Reset>
}
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	08 95       	ret

000020c2 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
    20c2:	0e 94 2d 09 	call	0x125a	; 0x125a <Timebase_UpCounter_Update_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    20c6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <Timebase_DownCounter_Update_All>
  #endif
}
    20ca:	08 95       	ret

000020cc <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    20cc:	e0 91 4b 01 	lds	r30, 0x014B
    20d0:	f0 91 4c 01 	lds	r31, 0x014C
    20d4:	80 85       	ldd	r24, Z+8	; 0x08
    20d6:	91 85       	ldd	r25, Z+9	; 0x09
    20d8:	01 96       	adiw	r24, 0x01	; 1
    20da:	91 87       	std	Z+9, r25	; 0x09
    20dc:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    20de:	83 81       	ldd	r24, Z+3	; 0x03
    20e0:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    20e2:	80 85       	ldd	r24, Z+8	; 0x08
    20e4:	91 85       	ldd	r25, Z+9	; 0x09
    20e6:	61 81       	ldd	r22, Z+1	; 0x01
    20e8:	72 81       	ldd	r23, Z+2	; 0x02
    20ea:	0e 94 cf 10 	call	0x219e	; 0x219e <__udivmodhi4>
    20ee:	89 2b       	or	r24, r25
    20f0:	81 f4       	brne	.+32     	; 0x2112 <Timebase_ISR_Executables+0x46>
    Timebase->Time.Seconds++;
    20f2:	82 85       	ldd	r24, Z+10	; 0x0a
    20f4:	93 85       	ldd	r25, Z+11	; 0x0b
    20f6:	a4 85       	ldd	r26, Z+12	; 0x0c
    20f8:	b5 85       	ldd	r27, Z+13	; 0x0d
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	a1 1d       	adc	r26, r1
    20fe:	b1 1d       	adc	r27, r1
    2100:	82 87       	std	Z+10, r24	; 0x0a
    2102:	93 87       	std	Z+11, r25	; 0x0b
    2104:	a4 87       	std	Z+12, r26	; 0x0c
    2106:	b5 87       	std	Z+13, r27	; 0x0d

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    2108:	87 89       	ldd	r24, Z+23	; 0x17
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
    210a:	88 23       	and	r24, r24
    210c:	11 f4       	brne	.+4      	; 0x2112 <Timebase_ISR_Executables+0x46>
      Timebase->Time.SubSeconds = 0;
    210e:	11 86       	std	Z+9, r1	; 0x09
    2110:	10 86       	std	Z+8, r1	; 0x08
    2112:	08 95       	ret

00002114 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2114:	1f 92       	push	r1
    2116:	0f 92       	push	r0
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	0f 92       	push	r0
    211c:	11 24       	eor	r1, r1
    211e:	2f 93       	push	r18
    2120:	3f 93       	push	r19
    2122:	4f 93       	push	r20
    2124:	5f 93       	push	r21
    2126:	6f 93       	push	r22
    2128:	7f 93       	push	r23
    212a:	8f 93       	push	r24
    212c:	9f 93       	push	r25
    212e:	af 93       	push	r26
    2130:	bf 93       	push	r27
    2132:	ef 93       	push	r30
    2134:	ff 93       	push	r31
  PORTD|=(1<<5);
    2136:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    2138:	0e 94 66 10 	call	0x20cc	; 0x20cc <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    213c:	5d 98       	cbi	0x0b, 5	; 11
}
    213e:	ff 91       	pop	r31
    2140:	ef 91       	pop	r30
    2142:	bf 91       	pop	r27
    2144:	af 91       	pop	r26
    2146:	9f 91       	pop	r25
    2148:	8f 91       	pop	r24
    214a:	7f 91       	pop	r23
    214c:	6f 91       	pop	r22
    214e:	5f 91       	pop	r21
    2150:	4f 91       	pop	r20
    2152:	3f 91       	pop	r19
    2154:	2f 91       	pop	r18
    2156:	0f 90       	pop	r0
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	0f 90       	pop	r0
    215c:	1f 90       	pop	r1
    215e:	18 95       	reti

00002160 <__mulsi3>:
    2160:	62 9f       	mul	r22, r18
    2162:	d0 01       	movw	r26, r0
    2164:	73 9f       	mul	r23, r19
    2166:	f0 01       	movw	r30, r0
    2168:	82 9f       	mul	r24, r18
    216a:	e0 0d       	add	r30, r0
    216c:	f1 1d       	adc	r31, r1
    216e:	64 9f       	mul	r22, r20
    2170:	e0 0d       	add	r30, r0
    2172:	f1 1d       	adc	r31, r1
    2174:	92 9f       	mul	r25, r18
    2176:	f0 0d       	add	r31, r0
    2178:	83 9f       	mul	r24, r19
    217a:	f0 0d       	add	r31, r0
    217c:	74 9f       	mul	r23, r20
    217e:	f0 0d       	add	r31, r0
    2180:	65 9f       	mul	r22, r21
    2182:	f0 0d       	add	r31, r0
    2184:	99 27       	eor	r25, r25
    2186:	72 9f       	mul	r23, r18
    2188:	b0 0d       	add	r27, r0
    218a:	e1 1d       	adc	r30, r1
    218c:	f9 1f       	adc	r31, r25
    218e:	63 9f       	mul	r22, r19
    2190:	b0 0d       	add	r27, r0
    2192:	e1 1d       	adc	r30, r1
    2194:	f9 1f       	adc	r31, r25
    2196:	bd 01       	movw	r22, r26
    2198:	cf 01       	movw	r24, r30
    219a:	11 24       	eor	r1, r1
    219c:	08 95       	ret

0000219e <__udivmodhi4>:
    219e:	aa 1b       	sub	r26, r26
    21a0:	bb 1b       	sub	r27, r27
    21a2:	51 e1       	ldi	r21, 0x11	; 17
    21a4:	07 c0       	rjmp	.+14     	; 0x21b4 <__udivmodhi4_ep>

000021a6 <__udivmodhi4_loop>:
    21a6:	aa 1f       	adc	r26, r26
    21a8:	bb 1f       	adc	r27, r27
    21aa:	a6 17       	cp	r26, r22
    21ac:	b7 07       	cpc	r27, r23
    21ae:	10 f0       	brcs	.+4      	; 0x21b4 <__udivmodhi4_ep>
    21b0:	a6 1b       	sub	r26, r22
    21b2:	b7 0b       	sbc	r27, r23

000021b4 <__udivmodhi4_ep>:
    21b4:	88 1f       	adc	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	5a 95       	dec	r21
    21ba:	a9 f7       	brne	.-22     	; 0x21a6 <__udivmodhi4_loop>
    21bc:	80 95       	com	r24
    21be:	90 95       	com	r25
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	08 95       	ret

000021c6 <__udivmodsi4>:
    21c6:	a1 e2       	ldi	r26, 0x21	; 33
    21c8:	1a 2e       	mov	r1, r26
    21ca:	aa 1b       	sub	r26, r26
    21cc:	bb 1b       	sub	r27, r27
    21ce:	fd 01       	movw	r30, r26
    21d0:	0d c0       	rjmp	.+26     	; 0x21ec <__udivmodsi4_ep>

000021d2 <__udivmodsi4_loop>:
    21d2:	aa 1f       	adc	r26, r26
    21d4:	bb 1f       	adc	r27, r27
    21d6:	ee 1f       	adc	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	a2 17       	cp	r26, r18
    21dc:	b3 07       	cpc	r27, r19
    21de:	e4 07       	cpc	r30, r20
    21e0:	f5 07       	cpc	r31, r21
    21e2:	20 f0       	brcs	.+8      	; 0x21ec <__udivmodsi4_ep>
    21e4:	a2 1b       	sub	r26, r18
    21e6:	b3 0b       	sbc	r27, r19
    21e8:	e4 0b       	sbc	r30, r20
    21ea:	f5 0b       	sbc	r31, r21

000021ec <__udivmodsi4_ep>:
    21ec:	66 1f       	adc	r22, r22
    21ee:	77 1f       	adc	r23, r23
    21f0:	88 1f       	adc	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	1a 94       	dec	r1
    21f6:	69 f7       	brne	.-38     	; 0x21d2 <__udivmodsi4_loop>
    21f8:	60 95       	com	r22
    21fa:	70 95       	com	r23
    21fc:	80 95       	com	r24
    21fe:	90 95       	com	r25
    2200:	9b 01       	movw	r18, r22
    2202:	ac 01       	movw	r20, r24
    2204:	bd 01       	movw	r22, r26
    2206:	cf 01       	movw	r24, r30
    2208:	08 95       	ret

0000220a <__divmodsi4>:
    220a:	97 fb       	bst	r25, 7
    220c:	09 2e       	mov	r0, r25
    220e:	05 26       	eor	r0, r21
    2210:	0e d0       	rcall	.+28     	; 0x222e <__divmodsi4_neg1>
    2212:	57 fd       	sbrc	r21, 7
    2214:	04 d0       	rcall	.+8      	; 0x221e <__divmodsi4_neg2>
    2216:	d7 df       	rcall	.-82     	; 0x21c6 <__udivmodsi4>
    2218:	0a d0       	rcall	.+20     	; 0x222e <__divmodsi4_neg1>
    221a:	00 1c       	adc	r0, r0
    221c:	38 f4       	brcc	.+14     	; 0x222c <__divmodsi4_exit>

0000221e <__divmodsi4_neg2>:
    221e:	50 95       	com	r21
    2220:	40 95       	com	r20
    2222:	30 95       	com	r19
    2224:	21 95       	neg	r18
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	4f 4f       	sbci	r20, 0xFF	; 255
    222a:	5f 4f       	sbci	r21, 0xFF	; 255

0000222c <__divmodsi4_exit>:
    222c:	08 95       	ret

0000222e <__divmodsi4_neg1>:
    222e:	f6 f7       	brtc	.-4      	; 0x222c <__divmodsi4_exit>
    2230:	90 95       	com	r25
    2232:	80 95       	com	r24
    2234:	70 95       	com	r23
    2236:	61 95       	neg	r22
    2238:	7f 4f       	sbci	r23, 0xFF	; 255
    223a:	8f 4f       	sbci	r24, 0xFF	; 255
    223c:	9f 4f       	sbci	r25, 0xFF	; 255
    223e:	08 95       	ret

00002240 <_exit>:
    2240:	f8 94       	cli

00002242 <__stop_program>:
    2242:	ff cf       	rjmp	.-2      	; 0x2242 <__stop_program>
