
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000006fe  00000792  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  0080013a  0080013a  000007cc  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000048e  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1f  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d8  00000000  00000000  000017b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000948  00000000  00000000  00001a91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002e0  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f6  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000074a  00000000  00000000  00002bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000032fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 36       	cpi	r26, 0x67	; 103
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "debug.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  Debug_Init();
  aa:	0e 94 50 03 	call	0x6a0	; 0x6a0 <Debug_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	c8 ec       	ldi	r28, 0xC8	; 200
  b0:	d0 e0       	ldi	r29, 0x00	; 0
  
  while(1){
    
	Debug_Tx_Parameter_NL("ADC_VAL",125);
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	4d e7       	ldi	r20, 0x7D	; 125
  b8:	50 e0       	ldi	r21, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	0e 94 d7 01 	call	0x3ae	; 0x3ae <Debug_Tx_Parameter_NL>
  c2:	88 ee       	ldi	r24, 0xE8	; 232
  c4:	93 e0       	ldi	r25, 0x03	; 3
  c6:	fe 01       	movw	r30, r28
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
  d0:	f0 cf       	rjmp	.-32     	; 0xb2 <main+0xc>

000000d2 <Debug_Struct_Init>:
}debug_t;

debug_t debug;

void Debug_Struct_Init(void){
  debug.error=0;
  d2:	10 92 3a 01 	sts	0x013A, r1
  debug.datareg=0;
  d6:	10 92 3b 01 	sts	0x013B, r1
  debug.databsy=1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 3c 01 	sts	0x013C, r24
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  e4:	fc 01       	movw	r30, r24
  e6:	e6 5c       	subi	r30, 0xC6	; 198
  e8:	fe 4f       	sbci	r31, 0xFE	; 254
  ea:	13 82       	std	Z+3, r1	; 0x03
  ec:	01 96       	adiw	r24, 0x01	; 1

void Debug_Struct_Init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
  ee:	80 32       	cpi	r24, 0x20	; 32
  f0:	91 05       	cpc	r25, r1
  f2:	c1 f7       	brne	.-16     	; 0xe4 <Debug_Struct_Init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  f4:	10 92 5d 01 	sts	0x015D, r1
  f8:	ee e5       	ldi	r30, 0x5E	; 94
  fa:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
  fc:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	e6 36       	cpi	r30, 0x66	; 102
 102:	f8 07       	cpc	r31, r24
 104:	d9 f7       	brne	.-10     	; 0xfc <Debug_Struct_Init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
 106:	10 82       	st	Z, r1
}
 108:	08 95       	ret

0000010a <Debug_Timings_Init>:

void Debug_Timings_Init(void){

  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 10a:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 10c:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 10e:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
  
  #endif
}
 116:	08 95       	ret

00000118 <Debug_Timer_Start>:

void Debug_Timer_Start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
 11c:	ee e6       	ldi	r30, 0x6E	; 110
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	10 82       	st	Z, r1
  TCNT0 =200;
 122:	88 ec       	ldi	r24, 0xC8	; 200
 124:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
 12e:	80 83       	st	Z, r24
  TCNT2 =10;
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #endif
}
 130:	08 95       	ret

00000132 <Debug_Timer_Stop>:

void Debug_Timer_Stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
 132:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
 136:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
 138:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 13a:	08 95       	ret

0000013c <Debug_GPIO_Init>:

void Debug_GPIO_Init(void){
  #ifdef DEBUG_ENABLE_TX
  DEBUG_TX_DDR   |= (1<<DEBUG_TX_bp);
 13c:	51 9a       	sbi	0x0a, 1	; 10
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 13e:	59 9a       	sbi	0x0b, 1	; 11
  
  #ifdef DEBUG_ENABLE_DBG
  DEBUG_TEST_DDR |= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 140:	08 95       	ret

00000142 <Debug_Tx_Pin_High>:

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_High(void){
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 142:	59 9a       	sbi	0x0b, 1	; 11
} 
 144:	08 95       	ret

00000146 <Debug_Tx_Pin_Low>:
#endif

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
 146:	59 98       	cbi	0x0b, 1	; 11
}
 148:	08 95       	ret

0000014a <Debug_Tx_Pin_Set_State>:
#endif


#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_Set_State(uint8_t pin_state){
  if(pin_state==1){
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	11 f4       	brne	.+4      	; 0x152 <Debug_Tx_Pin_Set_State+0x8>
  #endif
}

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_High(void){
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 14e:	59 9a       	sbi	0x0b, 1	; 11
 150:	08 95       	ret
} 
#endif

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
 152:	59 98       	cbi	0x0b, 1	; 11
 154:	08 95       	ret

00000156 <Debug_Rx_Pin_Get_State>:
}
#endif


uint8_t Debug_Rx_Pin_Get_State(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 156:	89 b1       	in	r24, 0x09	; 9
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	25 e0       	ldi	r18, 0x05	; 5
 15c:	96 95       	lsr	r25
 15e:	87 95       	ror	r24
 160:	2a 95       	dec	r18
 162:	e1 f7       	brne	.-8      	; 0x15c <Debug_Rx_Pin_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 164:	81 70       	andi	r24, 0x01	; 1
 166:	08 95       	ret

00000168 <Debug_Delay>:

void Debug_Delay(uint16_t val){
 168:	ac 01       	movw	r20, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  TIMER_COUNT_REG=0;
 16a:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_BAUD_RATE_9600
  TIMER_PRESCALER_REG=TIM0_BAUD_9600[0];
 16c:	80 91 08 01 	lds	r24, 0x0108
 170:	85 bd       	out	0x25, r24	; 37
  while(TIMER_COUNT_REG<TIM0_BAUD_9600[1]){}
 172:	20 91 0a 01 	lds	r18, 0x010A
 176:	30 91 0b 01 	lds	r19, 0x010B
 17a:	86 b5       	in	r24, 0x26	; 38
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	82 17       	cp	r24, r18
 180:	93 07       	cpc	r25, r19
 182:	d8 f3       	brcs	.-10     	; 0x17a <Debug_Delay+0x12>
  TIMER_COUNT_REG=0;
 184:	16 bc       	out	0x26, r1	; 38
  TIMER_PRESCALER_REG=TIM0_BAUD_115200[0];
  while(TIMER_COUNT_REG<TIM0_BAUD_115200[1]){}
  TIMER_COUNT_REG=0;
  #endif
	
  while(TIMER_COUNT_REG<val){}
 186:	86 b5       	in	r24, 0x26	; 38
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	84 17       	cp	r24, r20
 18c:	95 07       	cpc	r25, r21
 18e:	d8 f3       	brcs	.-10     	; 0x186 <Debug_Delay+0x1e>
  TIMER_PRESCALER_REG=0;
 190:	15 bc       	out	0x25, r1	; 37
}
 192:	08 95       	ret

00000194 <Debug_Delay_Tx_Bits>:


void Debug_Delay_Tx_Bits(void){
  #ifdef  DEBUG_USE_TIMER0
    #ifdef DEBUG_BAUD_RATE_9600
    Debug_Delay(TIM0_BAUD_9600[2]);
 194:	80 91 0c 01 	lds	r24, 0x010C
 198:	90 91 0d 01 	lds	r25, 0x010D
 19c:	0e 94 b4 00 	call	0x168	; 0x168 <Debug_Delay>
	#ifdef DEBUG_BAUD_RATE_115200
    Debug_Delay(TIM2_BAUD_115200[2]);
    #endif
	
  #endif
}
 1a0:	08 95       	ret

000001a2 <Debug_Tx_Byte>:
  #endif
}
#endif

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Byte(uint8_t val){
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	df 93       	push	r29
 1ae:	cf 93       	push	r28
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2a 97       	sbiw	r28, 0x0a	; 10
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 96       	adiw	r30, 0x01	; 1
 1c4:	9a e0       	ldi	r25, 0x0A	; 10
 1c6:	df 01       	movw	r26, r30
 1c8:	1d 92       	st	X+, r1
 1ca:	9a 95       	dec	r25
 1cc:	e9 f7       	brne	.-6      	; 0x1c8 <Debug_Tx_Byte+0x26>
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	9a 87       	std	Y+10, r25	; 0x0a
 1d2:	fe 01       	movw	r30, r28
 1d4:	32 96       	adiw	r30, 0x02	; 2
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 1da:	48 2f       	mov	r20, r24
 1dc:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 1de:	61 e0       	ldi	r22, 0x01	; 1

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 1e0:	ca 01       	movw	r24, r20
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <Debug_Tx_Byte+0x48>
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <Debug_Tx_Byte+0x44>
 1ee:	80 ff       	sbrs	r24, 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <Debug_Tx_Byte+0x54>
	  buf[i+1]=1;
 1f2:	60 83       	st	Z, r22
 1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <Debug_Tx_Byte+0x56>
	}else{
	  buf[i+1]=0;
 1f6:	10 82       	st	Z, r1
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	31 96       	adiw	r30, 0x01	; 1
#endif

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 1fe:	28 30       	cpi	r18, 0x08	; 8
 200:	31 05       	cpc	r19, r1
 202:	71 f7       	brne	.-36     	; 0x1e0 <Debug_Tx_Byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 204:	df b6       	in	r13, 0x3f	; 63
  cli();
 206:	f8 94       	cli
 208:	8e 01       	movw	r16, r28
 20a:	0f 5f       	subi	r16, 0xFF	; 255
 20c:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
 20e:	3b e0       	ldi	r19, 0x0B	; 11
 210:	e3 2e       	mov	r14, r19
 212:	f1 2c       	mov	r15, r1
 214:	ec 0e       	add	r14, r28
 216:	fd 1e       	adc	r15, r29
#endif


#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_Set_State(uint8_t pin_state){
  if(pin_state==1){
 218:	f8 01       	movw	r30, r16
 21a:	80 81       	ld	r24, Z
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	11 f4       	brne	.+4      	; 0x224 <Debug_Tx_Byte+0x82>
  #endif
}

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_High(void){
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 220:	59 9a       	sbi	0x0b, 1	; 11
 222:	01 c0       	rjmp	.+2      	; 0x226 <Debug_Tx_Byte+0x84>
} 
#endif

#ifdef DEBUG_ENABLE_TX
void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
 224:	59 98       	cbi	0x0b, 1	; 11
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    Debug_Tx_Pin_Set_State(buf[i]);
	Debug_Delay_Tx_Bits();
 226:	0e 94 ca 00 	call	0x194	; 0x194 <Debug_Delay_Tx_Bits>
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 22e:	0e 15       	cp	r16, r14
 230:	1f 05       	cpc	r17, r15
 232:	91 f7       	brne	.-28     	; 0x218 <Debug_Tx_Byte+0x76>
    Debug_Tx_Pin_Set_State(buf[i]);
	Debug_Delay_Tx_Bits();
  }
  SREG=sreg;
 234:	df be       	out	0x3f, r13	; 63
}
 236:	2a 96       	adiw	r28, 0x0a	; 10
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	08 95       	ret

00000252 <Debug_Tx_NL>:



////////////////////////////////////For Text & Commons//////////////////////////////////
void Debug_Tx_NL(void){
  Debug_Tx_Byte('\r');
 252:	8d e0       	ldi	r24, 0x0D	; 13
 254:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
  Debug_Tx_Byte('\n');
 258:	8a e0       	ldi	r24, 0x0A	; 10
 25a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
}
 25e:	08 95       	ret

00000260 <Debug_Tx_SP>:

void Debug_Tx_SP(void){
  Debug_Tx_Byte(' ');
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
}
 266:	08 95       	ret

00000268 <Debug_Tx_CM>:

void Debug_Tx_CM(void){
  Debug_Tx_Byte(',');
 268:	8c e2       	ldi	r24, 0x2C	; 44
 26a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
}
 26e:	08 95       	ret

00000270 <Debug_Tx_Text>:

void Debug_Tx_Text(char *str){
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	03 c0       	rjmp	.+6      	; 0x282 <Debug_Tx_Text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        Debug_Tx_Byte(str[i]);
 27c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
        i++;
 280:	1f 5f       	subi	r17, 0xFF	; 255
  Debug_Tx_Byte(',');
}

void Debug_Tx_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 282:	fe 01       	movw	r30, r28
 284:	e1 0f       	add	r30, r17
 286:	f1 1d       	adc	r31, r1
 288:	80 81       	ld	r24, Z
 28a:	88 23       	and	r24, r24
 28c:	b9 f7       	brne	.-18     	; 0x27c <Debug_Tx_Text+0xc>
        Debug_Tx_Byte(str[i]);
        i++;
    }
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	08 95       	ret

00000296 <Debug_Tx_Text_NL>:

void Debug_Tx_Text_NL(char *str){
  Debug_Tx_Text(str);
 296:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_NL();
 29a:	0e 94 29 01 	call	0x252	; 0x252 <Debug_Tx_NL>
}
 29e:	08 95       	ret

000002a0 <Debug_Tx_Text_SP>:

void Debug_Tx_Text_SP(char *str){
  Debug_Tx_Text(str);
 2a0:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 2a4:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
}
 2a8:	08 95       	ret

000002aa <Debug_Tx_Text_CM>:

void Debug_Tx_Text_CM(char *str){
  Debug_Tx_Text(str);
 2aa:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_CM();
 2ae:	0e 94 34 01 	call	0x268	; 0x268 <Debug_Tx_CM>
}
 2b2:	08 95       	ret

000002b4 <Debug_Determine_Digit_Numbers>:



////////////////////////////////////For Decimal Numbers//////////////////////////////////

void Debug_Determine_Digit_Numbers(uint32_t num){
 2b4:	bf 92       	push	r11
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	6b 01       	movw	r12, r22
 2c4:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 2c6:	61 15       	cp	r22, r1
 2c8:	71 05       	cpc	r23, r1
 2ca:	81 05       	cpc	r24, r1
 2cc:	91 05       	cpc	r25, r1
 2ce:	31 f4       	brne	.+12     	; 0x2dc <Debug_Determine_Digit_Numbers+0x28>
    debug.digits[0]=0;
 2d0:	10 92 5e 01 	sts	0x015E, r1
    debug.input_num_digits=1;
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 66 01 	sts	0x0166, r24
 2da:	23 c0       	rjmp	.+70     	; 0x322 <Debug_Determine_Digit_Numbers+0x6e>
 2dc:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
 2de:	0b 2d       	mov	r16, r11
 2e0:	10 e0       	ldi	r17, 0x00	; 0
 2e2:	06 5c       	subi	r16, 0xC6	; 198
 2e4:	1e 4f       	sbci	r17, 0xFE	; 254
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	2a e0       	ldi	r18, 0x0A	; 10
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	40 e0       	ldi	r20, 0x00	; 0
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__udivmodsi4>
 2f6:	f8 01       	movw	r30, r16
 2f8:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	2a e0       	ldi	r18, 0x0A	; 10
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__udivmodsi4>
 30a:	c9 01       	movw	r24, r18
 30c:	da 01       	movw	r26, r20
 30e:	6c 01       	movw	r12, r24
 310:	7d 01       	movw	r14, r26
      i++;
 312:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
 314:	c1 14       	cp	r12, r1
 316:	d1 04       	cpc	r13, r1
 318:	e1 04       	cpc	r14, r1
 31a:	f1 04       	cpc	r15, r1
 31c:	01 f7       	brne	.-64     	; 0x2de <Debug_Determine_Digit_Numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
 31e:	b0 92 66 01 	sts	0x0166, r11
  }
}
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	df 90       	pop	r13
 32c:	cf 90       	pop	r12
 32e:	bf 90       	pop	r11
 330:	08 95       	ret

00000332 <Debug_Tx_Number_Digits>:

void Debug_Tx_Number_Digits(void){
 332:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 334:	10 91 66 01 	lds	r17, 0x0166
 338:	09 c0       	rjmp	.+18     	; 0x34c <Debug_Tx_Number_Digits+0x1a>
    uint8_t temp=i;
    temp-=1;
 33a:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
 33c:	e1 2f       	mov	r30, r17
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	e6 5c       	subi	r30, 0xC6	; 198
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    Debug_Tx_Byte(temp);
 346:	80 5d       	subi	r24, 0xD0	; 208
 348:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
	debug.input_num_digits=i;
  }
}

void Debug_Tx_Number_Digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
 34c:	11 23       	and	r17, r17
 34e:	a9 f7       	brne	.-22     	; 0x33a <Debug_Tx_Number_Digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    Debug_Tx_Byte(temp);
  }
}
 350:	1f 91       	pop	r17
 352:	08 95       	ret

00000354 <Debug_Tx_Number>:

void Debug_Tx_Number(int32_t num){
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	7b 01       	movw	r14, r22
 35e:	8c 01       	movw	r16, r24
  if(num<0){
 360:	97 ff       	sbrs	r25, 7
 362:	0b c0       	rjmp	.+22     	; 0x37a <Debug_Tx_Number+0x26>
    Debug_Tx_Byte('-');
 364:	8d e2       	ldi	r24, 0x2D	; 45
 366:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
	num=-num;
 36a:	10 95       	com	r17
 36c:	00 95       	com	r16
 36e:	f0 94       	com	r15
 370:	e0 94       	com	r14
 372:	e1 1c       	adc	r14, r1
 374:	f1 1c       	adc	r15, r1
 376:	01 1d       	adc	r16, r1
 378:	11 1d       	adc	r17, r1
  }
  Debug_Determine_Digit_Numbers((uint32_t)num);
 37a:	c8 01       	movw	r24, r16
 37c:	b7 01       	movw	r22, r14
 37e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Debug_Determine_Digit_Numbers>
  Debug_Tx_Number_Digits();
 382:	0e 94 99 01 	call	0x332	; 0x332 <Debug_Tx_Number_Digits>
}
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	08 95       	ret

00000390 <Debug_Tx_Number_NL>:

void Debug_Tx_Number_NL(int32_t num){
  Debug_Tx_Number(num);
 390:	0e 94 aa 01 	call	0x354	; 0x354 <Debug_Tx_Number>
  Debug_Tx_NL();
 394:	0e 94 29 01 	call	0x252	; 0x252 <Debug_Tx_NL>
}
 398:	08 95       	ret

0000039a <Debug_Tx_Number_SP>:

void Debug_Tx_Number_SP(int32_t num){
  Debug_Tx_Number(num);
 39a:	0e 94 aa 01 	call	0x354	; 0x354 <Debug_Tx_Number>
  Debug_Tx_SP();
 39e:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
}
 3a2:	08 95       	ret

000003a4 <Debug_Tx_Number_CM>:

void Debug_Tx_Number_CM(int32_t num){
  Debug_Tx_Number(num);
 3a4:	0e 94 aa 01 	call	0x354	; 0x354 <Debug_Tx_Number>
  Debug_Tx_CM();
 3a8:	0e 94 34 01 	call	0x268	; 0x268 <Debug_Tx_CM>
}
 3ac:	08 95       	ret

000003ae <Debug_Tx_Parameter_NL>:

void Debug_Tx_Parameter_NL(char *name, int32_t num){
 3ae:	ef 92       	push	r14
 3b0:	ff 92       	push	r15
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	7a 01       	movw	r14, r20
 3b8:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 3ba:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 3be:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_NL(num);
 3c2:	c8 01       	movw	r24, r16
 3c4:	b7 01       	movw	r22, r14
 3c6:	0e 94 c8 01 	call	0x390	; 0x390 <Debug_Tx_Number_NL>
}
 3ca:	1f 91       	pop	r17
 3cc:	0f 91       	pop	r16
 3ce:	ff 90       	pop	r15
 3d0:	ef 90       	pop	r14
 3d2:	08 95       	ret

000003d4 <Debug_Tx_Parameter_SP>:

void Debug_Tx_Parameter_SP(char *name, int32_t num){
 3d4:	ef 92       	push	r14
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	7a 01       	movw	r14, r20
 3de:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 3e0:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 3e4:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_SP(num);
 3e8:	c8 01       	movw	r24, r16
 3ea:	b7 01       	movw	r22, r14
 3ec:	0e 94 cd 01 	call	0x39a	; 0x39a <Debug_Tx_Number_SP>
}
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	ff 90       	pop	r15
 3f6:	ef 90       	pop	r14
 3f8:	08 95       	ret

000003fa <Debug_Tx_Parameter_CM>:

void Debug_Tx_Parameter_CM(char *name, int32_t num){
 3fa:	ef 92       	push	r14
 3fc:	ff 92       	push	r15
 3fe:	0f 93       	push	r16
 400:	1f 93       	push	r17
 402:	7a 01       	movw	r14, r20
 404:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 406:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 40a:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_CM(num);
 40e:	c8 01       	movw	r24, r16
 410:	b7 01       	movw	r22, r14
 412:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <Debug_Tx_Number_CM>
}
 416:	1f 91       	pop	r17
 418:	0f 91       	pop	r16
 41a:	ff 90       	pop	r15
 41c:	ef 90       	pop	r14
 41e:	08 95       	ret

00000420 <Debug_Tx_Hex>:



///////////////////////////For Hexadecimal Numbers//////////////////////////////////
void Debug_Tx_Hex(uint32_t val){
 420:	bf 92       	push	r11
 422:	cf 92       	push	r12
 424:	df 92       	push	r13
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	7b 01       	movw	r14, r22
 434:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
 436:	8f ef       	ldi	r24, 0xFF	; 255
 438:	e8 16       	cp	r14, r24
 43a:	f1 04       	cpc	r15, r1
 43c:	01 05       	cpc	r16, r1
 43e:	11 05       	cpc	r17, r1
 440:	09 f0       	breq	.+2      	; 0x444 <Debug_Tx_Hex+0x24>
 442:	30 f4       	brcc	.+12     	; 0x450 <Debug_Tx_Hex+0x30>
 444:	c8 e0       	ldi	r28, 0x08	; 8
 446:	d0 e0       	ldi	r29, 0x00	; 0
 448:	62 e0       	ldi	r22, 0x02	; 2
 44a:	c6 2e       	mov	r12, r22
 44c:	d1 2c       	mov	r13, r1
 44e:	14 c0       	rjmp	.+40     	; 0x478 <Debug_Tx_Hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	e8 16       	cp	r14, r24
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	f8 06       	cpc	r15, r24
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 07       	cpc	r16, r24
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	18 07       	cpc	r17, r24
 460:	30 f0       	brcs	.+12     	; 0x46e <Debug_Tx_Hex+0x4e>
 462:	c0 e2       	ldi	r28, 0x20	; 32
 464:	d0 e0       	ldi	r29, 0x00	; 0
 466:	58 e0       	ldi	r21, 0x08	; 8
 468:	c5 2e       	mov	r12, r21
 46a:	d1 2c       	mov	r13, r1
 46c:	05 c0       	rjmp	.+10     	; 0x478 <Debug_Tx_Hex+0x58>
 46e:	c0 e1       	ldi	r28, 0x10	; 16
 470:	d0 e0       	ldi	r29, 0x00	; 0
 472:	44 e0       	ldi	r20, 0x04	; 4
 474:	c4 2e       	mov	r12, r20
 476:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  Debug_Tx_Byte('0');
 478:	80 e3       	ldi	r24, 0x30	; 48
 47a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
  Debug_Tx_Byte('x');
 47e:	88 e7       	ldi	r24, 0x78	; 120
 480:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
 484:	bb 24       	eor	r11, r11
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <Debug_Tx_Hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
 488:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
 48a:	d8 01       	movw	r26, r16
 48c:	c7 01       	movw	r24, r14
 48e:	0c 2e       	mov	r0, r28
 490:	04 c0       	rjmp	.+8      	; 0x49a <Debug_Tx_Hex+0x7a>
 492:	b6 95       	lsr	r27
 494:	a7 95       	ror	r26
 496:	97 95       	ror	r25
 498:	87 95       	ror	r24
 49a:	0a 94       	dec	r0
 49c:	d2 f7       	brpl	.-12     	; 0x492 <Debug_Tx_Hex+0x72>
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
 4a4:	8a 30       	cpi	r24, 0x0A	; 10
 4a6:	91 05       	cpc	r25, r1
 4a8:	10 f0       	brcs	.+4      	; 0x4ae <Debug_Tx_Hex+0x8e>
	    hex_digit+=55;
 4aa:	c7 96       	adiw	r24, 0x37	; 55
 4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <Debug_Tx_Hex+0x90>
	  }else {
	    hex_digit+=48;
 4ae:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  Debug_Tx_Byte((uint8_t)hex_digit);
 4b0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
    index=32;
    loop_counter=8;
  }
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
 4b4:	b3 94       	inc	r11
 4b6:	8b 2d       	mov	r24, r11
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	8c 15       	cp	r24, r12
 4bc:	9d 05       	cpc	r25, r13
 4be:	20 f3       	brcs	.-56     	; 0x488 <Debug_Tx_Hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  Debug_Tx_Byte((uint8_t)hex_digit);
	}
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	bf 90       	pop	r11
 4d2:	08 95       	ret

000004d4 <Debug_Tx_Number_Hex_NL>:

void Debug_Tx_Number_Hex_NL(int32_t num){
  Debug_Tx_Hex(num);
 4d4:	0e 94 10 02 	call	0x420	; 0x420 <Debug_Tx_Hex>
  Debug_Tx_NL();
 4d8:	0e 94 29 01 	call	0x252	; 0x252 <Debug_Tx_NL>
}
 4dc:	08 95       	ret

000004de <Debug_Tx_Number_Hex_SP>:

void Debug_Tx_Number_Hex_SP(int32_t num){
  Debug_Tx_Hex(num);
 4de:	0e 94 10 02 	call	0x420	; 0x420 <Debug_Tx_Hex>
  Debug_Tx_SP();
 4e2:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
}
 4e6:	08 95       	ret

000004e8 <Debug_Tx_Number_Hex_CM>:

void Debug_Tx_Number_Hex_CM(int32_t num){
  Debug_Tx_Hex(num);
 4e8:	0e 94 10 02 	call	0x420	; 0x420 <Debug_Tx_Hex>
  Debug_Tx_CM();
 4ec:	0e 94 34 01 	call	0x268	; 0x268 <Debug_Tx_CM>
}
 4f0:	08 95       	ret

000004f2 <Debug_Tx_Parameter_Hex_NL>:

void Debug_Tx_Parameter_Hex_NL(char *name, int32_t num){
 4f2:	ef 92       	push	r14
 4f4:	ff 92       	push	r15
 4f6:	0f 93       	push	r16
 4f8:	1f 93       	push	r17
 4fa:	7a 01       	movw	r14, r20
 4fc:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 4fe:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 502:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_Hex_NL(num);
 506:	c8 01       	movw	r24, r16
 508:	b7 01       	movw	r22, r14
 50a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Debug_Tx_Number_Hex_NL>
}
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	ff 90       	pop	r15
 514:	ef 90       	pop	r14
 516:	08 95       	ret

00000518 <Debug_Tx_Parameter_Hex_SP>:

void Debug_Tx_Parameter_Hex_SP(char *name, int32_t num){
 518:	ef 92       	push	r14
 51a:	ff 92       	push	r15
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	7a 01       	movw	r14, r20
 522:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 524:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 528:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_Hex_SP(num);
 52c:	c8 01       	movw	r24, r16
 52e:	b7 01       	movw	r22, r14
 530:	0e 94 6f 02 	call	0x4de	; 0x4de <Debug_Tx_Number_Hex_SP>
}
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	ff 90       	pop	r15
 53a:	ef 90       	pop	r14
 53c:	08 95       	ret

0000053e <Debug_Tx_Parameter_Hex_CM>:

void Debug_Tx_Parameter_Hex_CM(char *name, int32_t num){
 53e:	ef 92       	push	r14
 540:	ff 92       	push	r15
 542:	0f 93       	push	r16
 544:	1f 93       	push	r17
 546:	7a 01       	movw	r14, r20
 548:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 54a:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 54e:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_Hex_CM(num);
 552:	c8 01       	movw	r24, r16
 554:	b7 01       	movw	r22, r14
 556:	0e 94 74 02 	call	0x4e8	; 0x4e8 <Debug_Tx_Number_Hex_CM>
}
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	ef 90       	pop	r14
 562:	08 95       	ret

00000564 <Debug_Tx_Bin>:


//////////////////////////////////For Binary Numbers////////////////////////////////////
void Debug_Tx_Bin(uint32_t val){
 564:	af 92       	push	r10
 566:	bf 92       	push	r11
 568:	cf 92       	push	r12
 56a:	df 92       	push	r13
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	7b 01       	movw	r14, r22
 57a:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
 57c:	6f 3f       	cpi	r22, 0xFF	; 255
 57e:	71 05       	cpc	r23, r1
 580:	81 05       	cpc	r24, r1
 582:	91 05       	cpc	r25, r1
 584:	09 f0       	breq	.+2      	; 0x588 <Debug_Tx_Bin+0x24>
 586:	18 f4       	brcc	.+6      	; 0x58e <Debug_Tx_Bin+0x2a>
 588:	f7 e0       	ldi	r31, 0x07	; 7
 58a:	df 2e       	mov	r13, r31
 58c:	0d c0       	rjmp	.+26     	; 0x5a8 <Debug_Tx_Bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
 58e:	60 30       	cpi	r22, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	73 07       	cpc	r23, r19
 594:	31 e0       	ldi	r19, 0x01	; 1
 596:	83 07       	cpc	r24, r19
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	93 07       	cpc	r25, r19
 59c:	18 f0       	brcs	.+6      	; 0x5a4 <Debug_Tx_Bin+0x40>
 59e:	ef e1       	ldi	r30, 0x1F	; 31
 5a0:	de 2e       	mov	r13, r30
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <Debug_Tx_Bin+0x44>
 5a4:	7f e0       	ldi	r23, 0x0F	; 15
 5a6:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  Debug_Tx_Byte('0');
 5a8:	80 e3       	ldi	r24, 0x30	; 48
 5aa:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
  Debug_Tx_Byte('b');
 5ae:	82 e6       	ldi	r24, 0x62	; 98
 5b0:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
 5b4:	c0 e0       	ldi	r28, 0x00	; 0
 5b6:	d0 e0       	ldi	r29, 0x00	; 0
  Debug_Tx_Number_Hex_CM(num);
}


//////////////////////////////////For Binary Numbers////////////////////////////////////
void Debug_Tx_Bin(uint32_t val){
 5b8:	cd 2c       	mov	r12, r13
 5ba:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 5bc:	56 01       	movw	r10, r12
 5be:	08 94       	sec
 5c0:	a1 1c       	adc	r10, r1
 5c2:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
 5c4:	c6 01       	movw	r24, r12
 5c6:	8c 1b       	sub	r24, r28
 5c8:	9d 0b       	sbc	r25, r29
 5ca:	a8 01       	movw	r20, r16
 5cc:	97 01       	movw	r18, r14
 5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <Debug_Tx_Bin+0x74>
 5d0:	56 95       	lsr	r21
 5d2:	47 95       	ror	r20
 5d4:	37 95       	ror	r19
 5d6:	27 95       	ror	r18
 5d8:	8a 95       	dec	r24
 5da:	d2 f7       	brpl	.-12     	; 0x5d0 <Debug_Tx_Bin+0x6c>
 5dc:	da 01       	movw	r26, r20
 5de:	c9 01       	movw	r24, r18
 5e0:	81 70       	andi	r24, 0x01	; 1
 5e2:	90 70       	andi	r25, 0x00	; 0
 5e4:	89 2b       	or	r24, r25
 5e6:	11 f0       	breq	.+4      	; 0x5ec <Debug_Tx_Bin+0x88>
      Debug_Tx_Byte( 49 );   
 5e8:	81 e3       	ldi	r24, 0x31	; 49
 5ea:	01 c0       	rjmp	.+2      	; 0x5ee <Debug_Tx_Bin+0x8a>
    }else{
      Debug_Tx_Byte( 48 );         
 5ec:	80 e3       	ldi	r24, 0x30	; 48
 5ee:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Debug_Tx_Byte>
 5f2:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  Debug_Tx_Byte('0');
  Debug_Tx_Byte('b');
  for(int i=loop_counter; i>=0; i--){
 5f4:	ca 15       	cp	r28, r10
 5f6:	db 05       	cpc	r29, r11
 5f8:	29 f7       	brne	.-54     	; 0x5c4 <Debug_Tx_Bin+0x60>
      Debug_Tx_Byte( 49 );   
    }else{
      Debug_Tx_Byte( 48 );         
    }
  }
}
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	ff 90       	pop	r15
 604:	ef 90       	pop	r14
 606:	df 90       	pop	r13
 608:	cf 90       	pop	r12
 60a:	bf 90       	pop	r11
 60c:	af 90       	pop	r10
 60e:	08 95       	ret

00000610 <Debug_Tx_Number_Bin_NL>:

void Debug_Tx_Number_Bin_NL(int32_t num){
  Debug_Tx_Bin(num);
 610:	0e 94 b2 02 	call	0x564	; 0x564 <Debug_Tx_Bin>
  Debug_Tx_NL();
 614:	0e 94 29 01 	call	0x252	; 0x252 <Debug_Tx_NL>
}
 618:	08 95       	ret

0000061a <Debug_Tx_Number_Bin_SP>:

void Debug_Tx_Number_Bin_SP(int32_t num){
  Debug_Tx_Bin(num);
 61a:	0e 94 b2 02 	call	0x564	; 0x564 <Debug_Tx_Bin>
  Debug_Tx_SP();
 61e:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
}
 622:	08 95       	ret

00000624 <Debug_Tx_Number_Bin_CM>:

void Debug_Tx_Number_Bin_CM(int32_t num){
  Debug_Tx_Bin(num);
 624:	0e 94 b2 02 	call	0x564	; 0x564 <Debug_Tx_Bin>
  Debug_Tx_CM();
 628:	0e 94 34 01 	call	0x268	; 0x268 <Debug_Tx_CM>
}
 62c:	08 95       	ret

0000062e <Debug_Tx_Parameter_Bin_NL>:

void Debug_Tx_Parameter_Bin_NL(char *name, int32_t num){
 62e:	ef 92       	push	r14
 630:	ff 92       	push	r15
 632:	0f 93       	push	r16
 634:	1f 93       	push	r17
 636:	7a 01       	movw	r14, r20
 638:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 63a:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 63e:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_Bin_NL(num);
 642:	c8 01       	movw	r24, r16
 644:	b7 01       	movw	r22, r14
 646:	0e 94 08 03 	call	0x610	; 0x610 <Debug_Tx_Number_Bin_NL>
}
 64a:	1f 91       	pop	r17
 64c:	0f 91       	pop	r16
 64e:	ff 90       	pop	r15
 650:	ef 90       	pop	r14
 652:	08 95       	ret

00000654 <Debug_Tx_Parameter_Bin_SP>:

void Debug_Tx_Parameter_Bin_SP(char *name, int32_t num){
 654:	ef 92       	push	r14
 656:	ff 92       	push	r15
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	7a 01       	movw	r14, r20
 65e:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 660:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 664:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_Bin_SP(num);
 668:	c8 01       	movw	r24, r16
 66a:	b7 01       	movw	r22, r14
 66c:	0e 94 0d 03 	call	0x61a	; 0x61a <Debug_Tx_Number_Bin_SP>
}
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	08 95       	ret

0000067a <Debug_Tx_Parameter_Bin_CM>:

void Debug_Tx_Parameter_Bin_CM(char *name, int32_t num){
 67a:	ef 92       	push	r14
 67c:	ff 92       	push	r15
 67e:	0f 93       	push	r16
 680:	1f 93       	push	r17
 682:	7a 01       	movw	r14, r20
 684:	8b 01       	movw	r16, r22
  Debug_Tx_Text(name);
 686:	0e 94 38 01 	call	0x270	; 0x270 <Debug_Tx_Text>
  Debug_Tx_SP();
 68a:	0e 94 30 01 	call	0x260	; 0x260 <Debug_Tx_SP>
  Debug_Tx_Number_Bin_CM(num);
 68e:	c8 01       	movw	r24, r16
 690:	b7 01       	movw	r22, r14
 692:	0e 94 12 03 	call	0x624	; 0x624 <Debug_Tx_Number_Bin_CM>
}
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	08 95       	ret

000006a0 <Debug_Init>:
}*/
  
  
  
void Debug_Init(void){
  Debug_Struct_Init();
 6a0:	0e 94 69 00 	call	0xd2	; 0xd2 <Debug_Struct_Init>
}

void Debug_Timings_Init(void){

  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
 6a4:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
 6a6:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
 6a8:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
 6ac:	8f ef       	ldi	r24, 0xFF	; 255
 6ae:	85 bb       	out	0x15, r24	; 21
  #endif
}

void Debug_GPIO_Init(void){
  #ifdef DEBUG_ENABLE_TX
  DEBUG_TX_DDR   |= (1<<DEBUG_TX_bp);
 6b0:	51 9a       	sbi	0x0a, 1	; 10
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 6b2:	59 9a       	sbi	0x0b, 1	; 11
  
void Debug_Init(void){
  Debug_Struct_Init();
  Debug_Timings_Init();
  Debug_GPIO_Init();
}
 6b4:	08 95       	ret

000006b6 <__udivmodsi4>:
 6b6:	a1 e2       	ldi	r26, 0x21	; 33
 6b8:	1a 2e       	mov	r1, r26
 6ba:	aa 1b       	sub	r26, r26
 6bc:	bb 1b       	sub	r27, r27
 6be:	fd 01       	movw	r30, r26
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <__udivmodsi4_ep>

000006c2 <__udivmodsi4_loop>:
 6c2:	aa 1f       	adc	r26, r26
 6c4:	bb 1f       	adc	r27, r27
 6c6:	ee 1f       	adc	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	a2 17       	cp	r26, r18
 6cc:	b3 07       	cpc	r27, r19
 6ce:	e4 07       	cpc	r30, r20
 6d0:	f5 07       	cpc	r31, r21
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__udivmodsi4_ep>
 6d4:	a2 1b       	sub	r26, r18
 6d6:	b3 0b       	sbc	r27, r19
 6d8:	e4 0b       	sbc	r30, r20
 6da:	f5 0b       	sbc	r31, r21

000006dc <__udivmodsi4_ep>:
 6dc:	66 1f       	adc	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	1a 94       	dec	r1
 6e6:	69 f7       	brne	.-38     	; 0x6c2 <__udivmodsi4_loop>
 6e8:	60 95       	com	r22
 6ea:	70 95       	com	r23
 6ec:	80 95       	com	r24
 6ee:	90 95       	com	r25
 6f0:	9b 01       	movw	r18, r22
 6f2:	ac 01       	movw	r20, r24
 6f4:	bd 01       	movw	r22, r26
 6f6:	cf 01       	movw	r24, r30
 6f8:	08 95       	ret

000006fa <_exit>:
 6fa:	f8 94       	cli

000006fc <__stop_program>:
 6fc:	ff cf       	rjmp	.-2      	; 0x6fc <__stop_program>
