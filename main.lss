
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001d9a  00001e2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  00800110  00800110  00001e3e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e11  00000000  00000000  00001e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ae0  00000000  00000000  00002caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  0000578f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001734  00000000  00000000  00005d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  000074c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ff5  00000000  00000000  00007b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fec  00000000  00000000  00008b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00009b35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 35 0e 	jmp	0x1c6a	; 0x1c6a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e9       	ldi	r30, 0x9A	; 154
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 3e       	cpi	r26, 0xEF	; 239
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 cb 0e 	jmp	0x1d96	; 0x1d96 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "timebase.h"
#include "uart.h"

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
  
  
  
  UART_Init(38400);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	76 e9       	ldi	r23, 0x96	; 150
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 cd 02 	call	0x59a	; 0x59a <UART_Init>
  Timebase_Init(1000);
      b6:	88 ee       	ldi	r24, 0xE8	; 232
      b8:	93 e0       	ldi	r25, 0x03	; 3
      ba:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      be:	8a b1       	in	r24, 0x0a	; 10
      c0:	80 66       	ori	r24, 0x60	; 96
      c2:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c4:	8b b1       	in	r24, 0x0b	; 11
      c6:	8f 79       	andi	r24, 0x9F	; 159
      c8:	8b b9       	out	0x0b, r24	; 11
      ca:	88 e8       	ldi	r24, 0x88	; 136
      cc:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ce:	2c e2       	ldi	r18, 0x2C	; 44
      d0:	31 e0       	ldi	r19, 0x01	; 1
      d2:	f9 01       	movw	r30, r18
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x2e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      da:	d9 f7       	brne	.-10     	; 0xd2 <main+0x2c>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	40 e1       	ldi	r20, 0x10	; 16
      e0:	57 e2       	ldi	r21, 0x27	; 39
      e2:	60 e0       	ldi	r22, 0x00	; 0
      e4:	70 e0       	ldi	r23, 0x00	; 0
      e6:	0e 94 23 0b 	call	0x1646	; 0x1646 <Timebase_DownCounter_SS_Set_Securely>
      ea:	cc e2       	ldi	r28, 0x2C	; 44
      ec:	d1 e0       	ldi	r29, 0x01	; 1
	
	/*UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSec(0));
	UART_Transmit_Space();
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSubSec(0));
	UART_Transmit_Space();*/
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	0e 94 ad 09 	call	0x135a	; 0x135a <Timebase_DownCounter_SS_Get_Value>
      f4:	0e 94 3a 02 	call	0x474	; 0x474 <UART_Transmit_Number>
	UART_Transmit_New_Line();
      f8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <UART_Transmit_New_Line>
      fc:	88 ee       	ldi	r24, 0xE8	; 232
      fe:	93 e0       	ldi	r25, 0x03	; 3
     100:	fe 01       	movw	r30, r28
     102:	31 97       	sbiw	r30, 0x01	; 1
     104:	f1 f7       	brne	.-4      	; 0x102 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     106:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     108:	d9 f7       	brne	.-10     	; 0x100 <main+0x5a>
	_delay_ms(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     10a:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     10c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     110:	5e 98       	cbi	0x0b, 6	; 11
     112:	ed cf       	rjmp	.-38     	; 0xee <main+0x48>

00000114 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     114:	10 92 10 01 	sts	0x0110, r1
     118:	e1 e1       	ldi	r30, 0x11	; 17
     11a:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     11c:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	e9 31       	cpi	r30, 0x19	; 25
     122:	f8 07       	cpc	r31, r24
     124:	d9 f7       	brne	.-10     	; 0x11c <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     126:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     128:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     12a:	80 e2       	ldi	r24, 0x20	; 32
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	93 a3       	std	Z+35, r25	; 0x23
     130:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     132:	15 a2       	std	Z+37, r1	; 0x25
     134:	14 a2       	std	Z+36, r1	; 0x24
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	04 c0       	rjmp	.+8      	; 0x142 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     13a:	e0 5f       	subi	r30, 0xF0	; 240
     13c:	fe 4f       	sbci	r31, 0xFE	; 254
     13e:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     140:	2f 5f       	subi	r18, 0xFF	; 255
     142:	80 91 3b 01 	lds	r24, 0x013B
     146:	90 91 3c 01 	lds	r25, 0x013C
     14a:	e2 2f       	mov	r30, r18
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	e8 17       	cp	r30, r24
     150:	f9 07       	cpc	r31, r25
     152:	98 f3       	brcs	.-26     	; 0x13a <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     154:	08 95       	ret

00000156 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     156:	08 95       	ret

00000158 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     158:	08 95       	ret

0000015a <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     15e:	60 e6       	ldi	r22, 0x60	; 96
     160:	73 ee       	ldi	r23, 0xE3	; 227
     162:	86 e1       	ldi	r24, 0x16	; 22
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
     16a:	21 50       	subi	r18, 0x01	; 1
     16c:	30 40       	sbci	r19, 0x00	; 0
     16e:	40 40       	sbci	r20, 0x00	; 0
     170:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     172:	e0 ec       	ldi	r30, 0xC0	; 192
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	82 60       	ori	r24, 0x02	; 2
     17a:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     17c:	bb 27       	eor	r27, r27
     17e:	a5 2f       	mov	r26, r21
     180:	94 2f       	mov	r25, r20
     182:	83 2f       	mov	r24, r19
     184:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     188:	20 93 c4 00 	sts	0x00C4, r18
}
     18c:	08 95       	ret

0000018e <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     18e:	e1 ec       	ldi	r30, 0xC1	; 193
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	88 60       	ori	r24, 0x08	; 8
     196:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	80 93 c2 00 	sts	0x00C2, r24
}
     19e:	08 95       	ret

000001a0 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1a0:	e1 ec       	ldi	r30, 0xC1	; 193
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	80 61       	ori	r24, 0x10	; 16
     1a8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1aa:	86 e0       	ldi	r24, 0x06	; 6
     1ac:	80 93 c2 00 	sts	0x00C2, r24
}
     1b0:	08 95       	ret

000001b2 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1b2:	e1 ec       	ldi	r30, 0xC1	; 193
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	80 68       	ori	r24, 0x80	; 128
     1ba:	80 83       	st	Z, r24
  sei();
     1bc:	78 94       	sei
}
     1be:	08 95       	ret

000001c0 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1c0:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1c2:	80 91 c0 00 	lds	r24, 0x00C0
     1c6:	85 ff       	sbrs	r24, 5
     1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1ca:	90 93 c6 00 	sts	0x00C6, r25
}
     1ce:	08 95       	ret

000001d0 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1d0:	df 93       	push	r29
     1d2:	cf 93       	push	r28
     1d4:	0f 92       	push	r0
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1da:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1dc:	80 91 c0 00 	lds	r24, 0x00C0
     1e0:	84 ff       	sbrs	r24, 4
     1e2:	05 c0       	rjmp	.+10     	; 0x1ee <UART_Receive_Byte+0x1e>
    val=UDR0;
     1e4:	80 91 c6 00 	lds	r24, 0x00C6
     1e8:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	08 c0       	rjmp	.+16     	; 0x1fe <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1ee:	80 91 c0 00 	lds	r24, 0x00C0
     1f2:	83 ff       	sbrs	r24, 3
     1f4:	07 c0       	rjmp	.+14     	; 0x204 <UART_Receive_Byte+0x34>
    val=UDR0;
     1f6:	80 91 c6 00 	lds	r24, 0x00C6
     1fa:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	80 93 10 01 	sts	0x0110, r24
     202:	05 c0       	rjmp	.+10     	; 0x20e <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     204:	80 91 c6 00 	lds	r24, 0x00C6
     208:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     20a:	10 92 10 01 	sts	0x0110, r1
  }
  return val;
     20e:	89 81       	ldd	r24, Y+1	; 0x01
}
     210:	0f 90       	pop	r0
     212:	cf 91       	pop	r28
     214:	df 91       	pop	r29
     216:	08 95       	ret

00000218 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     218:	80 91 1a 01 	lds	r24, 0x011A
}
     21c:	08 95       	ret

0000021e <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     21e:	10 92 1a 01 	sts	0x011A, r1
}
     222:	08 95       	ret

00000224 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     224:	1f 93       	push	r17
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	ab 01       	movw	r20, r22
     22c:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     22e:	4f 3f       	cpi	r20, 0xFF	; 255
     230:	51 05       	cpc	r21, r1
     232:	61 05       	cpc	r22, r1
     234:	71 05       	cpc	r23, r1
     236:	09 f0       	breq	.+2      	; 0x23a <UART_Transmit_Byte_Hex+0x16>
     238:	28 f4       	brcc	.+10     	; 0x244 <UART_Transmit_Byte_Hex+0x20>
     23a:	e8 e0       	ldi	r30, 0x08	; 8
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	c2 e0       	ldi	r28, 0x02	; 2
     240:	d0 e0       	ldi	r29, 0x00	; 0
     242:	11 c0       	rjmp	.+34     	; 0x266 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     244:	40 30       	cpi	r20, 0x00	; 0
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	58 07       	cpc	r21, r24
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	68 07       	cpc	r22, r24
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	78 07       	cpc	r23, r24
     252:	28 f0       	brcs	.+10     	; 0x25e <UART_Transmit_Byte_Hex+0x3a>
     254:	e0 e2       	ldi	r30, 0x20	; 32
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	c8 e0       	ldi	r28, 0x08	; 8
     25a:	d0 e0       	ldi	r29, 0x00	; 0
     25c:	04 c0       	rjmp	.+8      	; 0x266 <UART_Transmit_Byte_Hex+0x42>
     25e:	e0 e1       	ldi	r30, 0x10	; 16
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	c4 e0       	ldi	r28, 0x04	; 4
     264:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     266:	80 91 c0 00 	lds	r24, 0x00C0
     26a:	85 ff       	sbrs	r24, 5
     26c:	fc cf       	rjmp	.-8      	; 0x266 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     26e:	80 e3       	ldi	r24, 0x30	; 48
     270:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     274:	80 91 c0 00 	lds	r24, 0x00C0
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     27c:	88 e7       	ldi	r24, 0x78	; 120
     27e:	80 93 c6 00 	sts	0x00C6, r24
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	1f c0       	rjmp	.+62     	; 0x2c4 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     286:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     288:	db 01       	movw	r26, r22
     28a:	ca 01       	movw	r24, r20
     28c:	0e 2e       	mov	r0, r30
     28e:	04 c0       	rjmp	.+8      	; 0x298 <UART_Transmit_Byte_Hex+0x74>
     290:	b6 95       	lsr	r27
     292:	a7 95       	ror	r26
     294:	97 95       	ror	r25
     296:	87 95       	ror	r24
     298:	0a 94       	dec	r0
     29a:	d2 f7       	brpl	.-12     	; 0x290 <UART_Transmit_Byte_Hex+0x6c>
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2a2:	8a 30       	cpi	r24, 0x0A	; 10
     2a4:	91 05       	cpc	r25, r1
     2a6:	20 f0       	brcs	.+8      	; 0x2b0 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2a8:	9c 01       	movw	r18, r24
     2aa:	29 5c       	subi	r18, 0xC9	; 201
     2ac:	3f 4f       	sbci	r19, 0xFF	; 255
     2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2b0:	9c 01       	movw	r18, r24
     2b2:	20 5d       	subi	r18, 0xD0	; 208
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2b6:	80 91 c0 00 	lds	r24, 0x00C0
     2ba:	85 ff       	sbrs	r24, 5
     2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2be:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2c2:	1f 5f       	subi	r17, 0xFF	; 255
     2c4:	81 2f       	mov	r24, r17
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	8c 17       	cp	r24, r28
     2ca:	9d 07       	cpc	r25, r29
     2cc:	e0 f2       	brcs	.-72     	; 0x286 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	08 95       	ret

000002d6 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ab 01       	movw	r20, r22
     2e8:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2ea:	4f 3f       	cpi	r20, 0xFF	; 255
     2ec:	51 05       	cpc	r21, r1
     2ee:	61 05       	cpc	r22, r1
     2f0:	71 05       	cpc	r23, r1
     2f2:	09 f0       	breq	.+2      	; 0x2f6 <UART_Transmit_Byte_Bin+0x20>
     2f4:	10 f4       	brcc	.+4      	; 0x2fa <UART_Transmit_Byte_Bin+0x24>
     2f6:	97 e0       	ldi	r25, 0x07	; 7
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     2fa:	40 30       	cpi	r20, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	58 07       	cpc	r21, r24
     300:	81 e0       	ldi	r24, 0x01	; 1
     302:	68 07       	cpc	r22, r24
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	78 07       	cpc	r23, r24
     308:	10 f0       	brcs	.+4      	; 0x30e <UART_Transmit_Byte_Bin+0x38>
     30a:	9f e1       	ldi	r25, 0x1F	; 31
     30c:	01 c0       	rjmp	.+2      	; 0x310 <UART_Transmit_Byte_Bin+0x3a>
     30e:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     310:	80 91 c0 00 	lds	r24, 0x00C0
     314:	85 ff       	sbrs	r24, 5
     316:	fc cf       	rjmp	.-8      	; 0x310 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     318:	80 e3       	ldi	r24, 0x30	; 48
     31a:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     31e:	80 91 c0 00 	lds	r24, 0x00C0
     322:	85 ff       	sbrs	r24, 5
     324:	fc cf       	rjmp	.-8      	; 0x31e <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     326:	82 e6       	ldi	r24, 0x62	; 98
     328:	80 93 c6 00 	sts	0x00C6, r24
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     330:	e9 2f       	mov	r30, r25
     332:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     334:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     336:	11 e3       	ldi	r17, 0x31	; 49
     338:	ef 01       	movw	r28, r30
     33a:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     33c:	cf 01       	movw	r24, r30
     33e:	82 1b       	sub	r24, r18
     340:	93 0b       	sbc	r25, r19
     342:	6a 01       	movw	r12, r20
     344:	7b 01       	movw	r14, r22
     346:	04 c0       	rjmp	.+8      	; 0x350 <UART_Transmit_Byte_Bin+0x7a>
     348:	f6 94       	lsr	r15
     34a:	e7 94       	ror	r14
     34c:	d7 94       	ror	r13
     34e:	c7 94       	ror	r12
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <UART_Transmit_Byte_Bin+0x72>
     354:	d7 01       	movw	r26, r14
     356:	c6 01       	movw	r24, r12
     358:	81 70       	andi	r24, 0x01	; 1
     35a:	90 70       	andi	r25, 0x00	; 0
     35c:	89 2b       	or	r24, r25
     35e:	39 f0       	breq	.+14     	; 0x36e <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     360:	80 91 c0 00 	lds	r24, 0x00C0
     364:	85 ff       	sbrs	r24, 5
     366:	fc cf       	rjmp	.-8      	; 0x360 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     368:	10 93 c6 00 	sts	0x00C6, r17
     36c:	06 c0       	rjmp	.+12     	; 0x37a <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     36e:	80 91 c0 00 	lds	r24, 0x00C0
     372:	85 ff       	sbrs	r24, 5
     374:	fc cf       	rjmp	.-8      	; 0x36e <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     376:	00 93 c6 00 	sts	0x00C6, r16
     37a:	2f 5f       	subi	r18, 0xFF	; 255
     37c:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     37e:	2c 17       	cp	r18, r28
     380:	3d 07       	cpc	r19, r29
     382:	e1 f6       	brne	.-72     	; 0x33c <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	08 95       	ret

00000396 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     396:	ac 01       	movw	r20, r24
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	07 c0       	rjmp	.+14     	; 0x3aa <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     39c:	80 91 c0 00 	lds	r24, 0x00C0
     3a0:	85 ff       	sbrs	r24, 5
     3a2:	fc cf       	rjmp	.-8      	; 0x39c <UART_Transmit_Text+0x6>
  UDR0=val;
     3a4:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3aa:	fa 01       	movw	r30, r20
     3ac:	e2 0f       	add	r30, r18
     3ae:	f1 1d       	adc	r31, r1
     3b0:	e0 81       	ld	r30, Z
     3b2:	ee 23       	and	r30, r30
     3b4:	99 f7       	brne	.-26     	; 0x39c <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3b6:	08 95       	ret

000003b8 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
}
     3c0:	08 95       	ret

000003c2 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3c2:	83 e0       	ldi	r24, 0x03	; 3
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	0e 94 cb 01 	call	0x396	; 0x396 <UART_Transmit_Text>
}
     3ca:	08 95       	ret

000003cc <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3cc:	bf 92       	push	r11
     3ce:	cf 92       	push	r12
     3d0:	df 92       	push	r13
     3d2:	ef 92       	push	r14
     3d4:	ff 92       	push	r15
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3de:	61 15       	cp	r22, r1
     3e0:	71 05       	cpc	r23, r1
     3e2:	81 05       	cpc	r24, r1
     3e4:	91 05       	cpc	r25, r1
     3e6:	31 f4       	brne	.+12     	; 0x3f4 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3e8:	10 92 11 01 	sts	0x0111, r1
    UART.InputNumberDigits=1;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 19 01 	sts	0x0119, r24
     3f2:	23 c0       	rjmp	.+70     	; 0x43a <UART_Determine_Digit_Numbers+0x6e>
     3f4:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     3f6:	0b 2d       	mov	r16, r11
     3f8:	10 e0       	ldi	r17, 0x00	; 0
     3fa:	00 5f       	subi	r16, 0xF0	; 240
     3fc:	1e 4f       	sbci	r17, 0xFE	; 254
     3fe:	c7 01       	movw	r24, r14
     400:	b6 01       	movw	r22, r12
     402:	2a e0       	ldi	r18, 0x0A	; 10
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
     40e:	f8 01       	movw	r30, r16
     410:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	2a e0       	ldi	r18, 0x0A	; 10
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	0e 94 8e 0e 	call	0x1d1c	; 0x1d1c <__udivmodsi4>
     422:	c9 01       	movw	r24, r18
     424:	da 01       	movw	r26, r20
     426:	6c 01       	movw	r12, r24
     428:	7d 01       	movw	r14, r26
      i++;
     42a:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     42c:	c1 14       	cp	r12, r1
     42e:	d1 04       	cpc	r13, r1
     430:	e1 04       	cpc	r14, r1
     432:	f1 04       	cpc	r15, r1
     434:	01 f7       	brne	.-64     	; 0x3f6 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     436:	b0 92 19 01 	sts	0x0119, r11
  }
}
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	08 95       	ret

0000044a <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     44a:	e0 91 19 01 	lds	r30, 0x0119
     44e:	0f c0       	rjmp	.+30     	; 0x46e <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     450:	2e 2f       	mov	r18, r30
     452:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     454:	e2 2f       	mov	r30, r18
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	e0 5f       	subi	r30, 0xF0	; 240
     45a:	fe 4f       	sbci	r31, 0xFE	; 254
     45c:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     45e:	80 91 c0 00 	lds	r24, 0x00C0
     462:	85 ff       	sbrs	r24, 5
     464:	fc cf       	rjmp	.-8      	; 0x45e <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     466:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     468:	90 93 c6 00 	sts	0x00C6, r25
     46c:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     46e:	ee 23       	and	r30, r30
     470:	79 f7       	brne	.-34     	; 0x450 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     472:	08 95       	ret

00000474 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     474:	9b 01       	movw	r18, r22
     476:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     478:	97 ff       	sbrs	r25, 7
     47a:	0e c0       	rjmp	.+28     	; 0x498 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     47c:	80 91 c0 00 	lds	r24, 0x00C0
     480:	85 ff       	sbrs	r24, 5
     482:	fc cf       	rjmp	.-8      	; 0x47c <UART_Transmit_Number+0x8>
  UDR0=val;
     484:	8d e2       	ldi	r24, 0x2D	; 45
     486:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48a:	50 95       	com	r21
     48c:	40 95       	com	r20
     48e:	30 95       	com	r19
     490:	21 95       	neg	r18
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	4f 4f       	sbci	r20, 0xFF	; 255
     496:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     498:	ca 01       	movw	r24, r20
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4a0:	0e 94 25 02 	call	0x44a	; 0x44a <UART_Transmit_Number_Digits>
}
     4a4:	08 95       	ret

000004a6 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4a6:	fc 01       	movw	r30, r24
     4a8:	e0 5f       	subi	r30, 0xF0	; 240
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4ae:	08 95       	ret

000004b0 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4b0:	20 91 3d 01 	lds	r18, 0x013D
     4b4:	30 91 3e 01 	lds	r19, 0x013E
}
     4b8:	c9 01       	movw	r24, r18
     4ba:	08 95       	ret

000004bc <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4bc:	10 92 10 01 	sts	0x0110, r1
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4c6:	f9 01       	movw	r30, r18
     4c8:	e0 5f       	subi	r30, 0xF0	; 240
     4ca:	fe 4f       	sbci	r31, 0xFE	; 254
     4cc:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4ce:	2f 5f       	subi	r18, 0xFF	; 255
     4d0:	3f 4f       	sbci	r19, 0xFF	; 255
     4d2:	80 91 3b 01 	lds	r24, 0x013B
     4d6:	90 91 3c 01 	lds	r25, 0x013C
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	98 f3       	brcs	.-26     	; 0x4c6 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4e0:	10 92 3e 01 	sts	0x013E, r1
     4e4:	10 92 3d 01 	sts	0x013D, r1
  #endif
}
     4e8:	08 95       	ret

000004ea <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4ea:	df 93       	push	r29
     4ec:	cf 93       	push	r28
     4ee:	0f 92       	push	r0
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     4f4:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     4f6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <UART_Receive_Byte>
     4fa:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     4fc:	80 91 10 01 	lds	r24, 0x0110
     500:	88 23       	and	r24, r24
     502:	19 f5       	brne	.+70     	; 0x54a <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	80 93 1a 01 	sts	0x011A, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     50a:	e0 91 3d 01 	lds	r30, 0x013D
     50e:	f0 91 3e 01 	lds	r31, 0x013E
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	e0 5f       	subi	r30, 0xF0	; 240
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     51a:	80 91 3d 01 	lds	r24, 0x013D
     51e:	90 91 3e 01 	lds	r25, 0x013E
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	90 93 3e 01 	sts	0x013E, r25
     528:	80 93 3d 01 	sts	0x013D, r24

    if(UART.BufferIndex>=UART.BufferSize){
     52c:	20 91 3d 01 	lds	r18, 0x013D
     530:	30 91 3e 01 	lds	r19, 0x013E
     534:	80 91 3b 01 	lds	r24, 0x013B
     538:	90 91 3c 01 	lds	r25, 0x013C
     53c:	28 17       	cp	r18, r24
     53e:	39 07       	cpc	r19, r25
     540:	20 f0       	brcs	.+8      	; 0x54a <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     542:	10 92 3e 01 	sts	0x013E, r1
     546:	10 92 3d 01 	sts	0x013D, r1
    }
  }
}
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     552:	1f 92       	push	r1
     554:	0f 92       	push	r0
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	0f 92       	push	r0
     55a:	11 24       	eor	r1, r1
     55c:	2f 93       	push	r18
     55e:	3f 93       	push	r19
     560:	4f 93       	push	r20
     562:	5f 93       	push	r21
     564:	6f 93       	push	r22
     566:	7f 93       	push	r23
     568:	8f 93       	push	r24
     56a:	9f 93       	push	r25
     56c:	af 93       	push	r26
     56e:	bf 93       	push	r27
     570:	ef 93       	push	r30
     572:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     574:	0e 94 75 02 	call	0x4ea	; 0x4ea <UART_Interrupt_Service_Routine>
}
     578:	ff 91       	pop	r31
     57a:	ef 91       	pop	r30
     57c:	bf 91       	pop	r27
     57e:	af 91       	pop	r26
     580:	9f 91       	pop	r25
     582:	8f 91       	pop	r24
     584:	7f 91       	pop	r23
     586:	6f 91       	pop	r22
     588:	5f 91       	pop	r21
     58a:	4f 91       	pop	r20
     58c:	3f 91       	pop	r19
     58e:	2f 91       	pop	r18
     590:	0f 90       	pop	r0
     592:	0f be       	out	0x3f, r0	; 63
     594:	0f 90       	pop	r0
     596:	1f 90       	pop	r1
     598:	18 95       	reti

0000059a <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	7b 01       	movw	r14, r22
     5a4:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5a6:	0e 94 8a 00 	call	0x114	; 0x114 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5aa:	c8 01       	movw	r24, r16
     5ac:	b7 01       	movw	r22, r14
     5ae:	0e 94 ad 00 	call	0x15a	; 0x15a <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5b2:	e1 ec       	ldi	r30, 0xC1	; 193
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5bc:	a2 ec       	ldi	r26, 0xC2	; 194
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	96 e0       	ldi	r25, 0x06	; 6
     5c2:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5c4:	80 81       	ld	r24, Z
     5c6:	80 61       	ori	r24, 0x10	; 16
     5c8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ca:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5cc:	80 81       	ld	r24, Z
     5ce:	80 68       	ori	r24, 0x80	; 128
     5d0:	80 83       	st	Z, r24
  sei();
     5d2:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5d4:	0e 94 5e 02 	call	0x4bc	; 0x4bc <UART_Flush_Buffer>
}
     5d8:	1f 91       	pop	r17
     5da:	0f 91       	pop	r16
     5dc:	ff 90       	pop	r15
     5de:	ef 90       	pop	r14
     5e0:	08 95       	ret

000005e2 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5e2:	81 e4       	ldi	r24, 0x41	; 65
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	90 93 40 01 	sts	0x0140, r25
     5ea:	80 93 3f 01 	sts	0x013F, r24
  Timebase->Config.TimerType.Value = 0;
     5ee:	10 92 41 01 	sts	0x0141, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5f2:	80 91 41 01 	lds	r24, 0x0141
     5f6:	84 60       	ori	r24, 0x04	; 4
     5f8:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5fc:	80 91 41 01 	lds	r24, 0x0141
     600:	87 70       	andi	r24, 0x07	; 7
     602:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.UpdateRate = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 43 01 	sts	0x0143, r25
     60e:	80 93 42 01 	sts	0x0142, r24
  Timebase->Time.OVFUpdateValue=0;
     612:	10 92 44 01 	sts	0x0144, r1
  Timebase->Time.SubSeconds = 0;
     616:	10 92 4a 01 	sts	0x014A, r1
     61a:	10 92 49 01 	sts	0x0149, r1
  Timebase->Time.Seconds = 0;
     61e:	10 92 4b 01 	sts	0x014B, r1
     622:	10 92 4c 01 	sts	0x014C, r1
     626:	10 92 4d 01 	sts	0x014D, r1
     62a:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.LastSample = 0;
     62e:	10 92 45 01 	sts	0x0145, r1
     632:	10 92 46 01 	sts	0x0146, r1
     636:	10 92 47 01 	sts	0x0147, r1
     63a:	10 92 48 01 	sts	0x0148, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     63e:	10 92 4f 01 	sts	0x014F, r1
     642:	10 92 50 01 	sts	0x0150, r1
     646:	10 92 51 01 	sts	0x0151, r1
     64a:	10 92 52 01 	sts	0x0152, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     64e:	10 92 53 01 	sts	0x0153, r1
     652:	10 92 54 01 	sts	0x0154, r1
     656:	10 92 55 01 	sts	0x0155, r1
     65a:	10 92 56 01 	sts	0x0156, r1
	Timebase->Time.Status = 0;
     65e:	10 92 57 01 	sts	0x0157, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     662:	10 92 58 01 	sts	0x0158, r1
     666:	af ea       	ldi	r26, 0xAF	; 175
     668:	b1 e0       	ldi	r27, 0x01	; 1
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     66e:	2d e0       	ldi	r18, 0x0D	; 13
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	82 9f       	mul	r24, r18
     674:	f0 01       	movw	r30, r0
     676:	83 9f       	mul	r24, r19
     678:	f0 0d       	add	r31, r0
     67a:	92 9f       	mul	r25, r18
     67c:	f0 0d       	add	r31, r0
     67e:	11 24       	eor	r1, r1
     680:	e2 55       	subi	r30, 0x52	; 82
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     686:	1d 92       	st	X+, r1
     688:	1d 92       	st	X+, r1
     68a:	1d 92       	st	X+, r1
     68c:	1c 92       	st	X, r1
     68e:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     690:	14 96       	adiw	r26, 0x04	; 4
     692:	1d 92       	st	X+, r1
     694:	1d 92       	st	X+, r1
     696:	1d 92       	st	X+, r1
     698:	1c 92       	st	X, r1
     69a:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     69c:	18 96       	adiw	r26, 0x08	; 8
     69e:	1d 92       	st	X+, r1
     6a0:	1d 92       	st	X+, r1
     6a2:	1d 92       	st	X+, r1
     6a4:	1c 92       	st	X, r1
     6a6:	1b 97       	sbiw	r26, 0x0b	; 11
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     6ac:	85 30       	cpi	r24, 0x05	; 5
     6ae:	91 05       	cpc	r25, r1
     6b0:	01 f7       	brne	.-64     	; 0x672 <Timebase_Struct_Init+0x90>
     6b2:	aa e5       	ldi	r26, 0x5A	; 90
     6b4:	b1 e0       	ldi	r27, 0x01	; 1
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     6ba:	fc 01       	movw	r30, r24
     6bc:	24 e0       	ldi	r18, 0x04	; 4
     6be:	ee 0f       	add	r30, r30
     6c0:	ff 1f       	adc	r31, r31
     6c2:	2a 95       	dec	r18
     6c4:	e1 f7       	brne	.-8      	; 0x6be <Timebase_Struct_Init+0xdc>
     6c6:	e8 0f       	add	r30, r24
     6c8:	f9 1f       	adc	r31, r25
     6ca:	ef 5b       	subi	r30, 0xBF	; 191
     6cc:	fe 4f       	sbci	r31, 0xFE	; 254
     6ce:	10 8e       	std	Z+24, r1	; 0x18
    Timebase->DownCounterSS[i].EndValueSec = 0;
     6d0:	1d 92       	st	X+, r1
     6d2:	1d 92       	st	X+, r1
     6d4:	1d 92       	st	X+, r1
     6d6:	1c 92       	st	X, r1
     6d8:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     6da:	14 96       	adiw	r26, 0x04	; 4
     6dc:	1d 92       	st	X+, r1
     6de:	1d 92       	st	X+, r1
     6e0:	1d 92       	st	X+, r1
     6e2:	1c 92       	st	X, r1
     6e4:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     6e6:	18 96       	adiw	r26, 0x08	; 8
     6e8:	1d 92       	st	X+, r1
     6ea:	1d 92       	st	X+, r1
     6ec:	1d 92       	st	X+, r1
     6ee:	1c 92       	st	X, r1
     6f0:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     6f2:	1c 96       	adiw	r26, 0x0c	; 12
     6f4:	1d 92       	st	X+, r1
     6f6:	1d 92       	st	X+, r1
     6f8:	1d 92       	st	X+, r1
     6fa:	1c 92       	st	X, r1
     6fc:	1f 97       	sbiw	r26, 0x0f	; 15
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     702:	85 30       	cpi	r24, 0x05	; 5
     704:	91 05       	cpc	r25, r1
     706:	c9 f6       	brne	.-78     	; 0x6ba <Timebase_Struct_Init+0xd8>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     708:	08 95       	ret

0000070a <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     70a:	7f 92       	push	r7
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	df 93       	push	r29
     722:	cf 93       	push	r28
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	2a 97       	sbiw	r28, 0x0a	; 10
     72a:	0f b6       	in	r0, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	de bf       	out	0x3e, r29	; 62
     730:	0f be       	out	0x3f, r0	; 63
     732:	cd bf       	out	0x3d, r28	; 61
     734:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     736:	c0 90 3f 01 	lds	r12, 0x013F
     73a:	d0 90 40 01 	lds	r13, 0x0140
     73e:	f6 01       	movw	r30, r12
     740:	80 81       	ld	r24, Z
     742:	80 ff       	sbrs	r24, 0
     744:	31 c0       	rjmp	.+98     	; 0x7a8 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     746:	01 30       	cpi	r16, 0x01	; 1
     748:	11 05       	cpc	r17, r1
     74a:	11 f4       	brne	.+4      	; 0x750 <Timebase_Timer_Config+0x46>
     74c:	96 e0       	ldi	r25, 0x06	; 6
     74e:	19 c0       	rjmp	.+50     	; 0x782 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     750:	02 30       	cpi	r16, 0x02	; 2
     752:	11 05       	cpc	r17, r1
     754:	11 f4       	brne	.+4      	; 0x75a <Timebase_Timer_Config+0x50>
     756:	95 e0       	ldi	r25, 0x05	; 5
     758:	14 c0       	rjmp	.+40     	; 0x782 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     75a:	04 30       	cpi	r16, 0x04	; 4
     75c:	11 05       	cpc	r17, r1
     75e:	11 f4       	brne	.+4      	; 0x764 <Timebase_Timer_Config+0x5a>
     760:	94 e0       	ldi	r25, 0x04	; 4
     762:	0f c0       	rjmp	.+30     	; 0x782 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     764:	08 30       	cpi	r16, 0x08	; 8
     766:	11 05       	cpc	r17, r1
     768:	11 f4       	brne	.+4      	; 0x76e <Timebase_Timer_Config+0x64>
     76a:	93 e0       	ldi	r25, 0x03	; 3
     76c:	0a c0       	rjmp	.+20     	; 0x782 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     76e:	00 31       	cpi	r16, 0x10	; 16
     770:	11 05       	cpc	r17, r1
     772:	11 f4       	brne	.+4      	; 0x778 <Timebase_Timer_Config+0x6e>
     774:	92 e0       	ldi	r25, 0x02	; 2
     776:	05 c0       	rjmp	.+10     	; 0x782 <Timebase_Timer_Config+0x78>
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	00 32       	cpi	r16, 0x20	; 32
     77c:	11 05       	cpc	r17, r1
     77e:	09 f4       	brne	.+2      	; 0x782 <Timebase_Timer_Config+0x78>
     780:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     782:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     784:	84 b7       	in	r24, 0x34	; 52
     786:	87 7f       	andi	r24, 0xF7	; 247
     788:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     78a:	80 91 60 00 	lds	r24, 0x0060
     78e:	80 68       	ori	r24, 0x80	; 128
     790:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     794:	80 91 60 00 	lds	r24, 0x0060
     798:	88 61       	ori	r24, 0x18	; 24
     79a:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     79e:	90 64       	ori	r25, 0x40	; 64
     7a0:	90 93 60 00 	sts	0x0060, r25
    sei();
     7a4:	78 94       	sei
     7a6:	67 c0       	rjmp	.+206    	; 0x876 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     7a8:	81 fd       	sbrc	r24, 1
     7aa:	65 c0       	rjmp	.+202    	; 0x876 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     7ac:	82 ff       	sbrs	r24, 2
     7ae:	63 c0       	rjmp	.+198    	; 0x876 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     7b0:	de 01       	movw	r26, r28
     7b2:	11 96       	adiw	r26, 0x01	; 1
     7b4:	e5 e0       	ldi	r30, 0x05	; 5
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	8a e0       	ldi	r24, 0x0A	; 10
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     7c2:	98 01       	movw	r18, r16
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	7b e1       	ldi	r23, 0x1B	; 27
     7cc:	87 eb       	ldi	r24, 0xB7	; 183
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
     7d4:	72 2e       	mov	r7, r18
     7d6:	83 2e       	mov	r8, r19
     7d8:	94 2e       	mov	r9, r20
     7da:	e5 2e       	mov	r14, r21
     7dc:	5e 01       	movw	r10, r28
     7de:	08 94       	sec
     7e0:	a1 1c       	adc	r10, r1
     7e2:	b1 1c       	adc	r11, r1
     7e4:	c9 01       	movw	r24, r18
     7e6:	da 01       	movw	r26, r20
     7e8:	9c 01       	movw	r18, r24
     7ea:	ad 01       	movw	r20, r26
     7ec:	ff 24       	eor	r15, r15
     7ee:	14 c0       	rjmp	.+40     	; 0x818 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     7f0:	f5 01       	movw	r30, r10
     7f2:	21 91       	ld	r18, Z+
     7f4:	31 91       	ld	r19, Z+
     7f6:	5f 01       	movw	r10, r30
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	67 2d       	mov	r22, r7
     7fe:	78 2d       	mov	r23, r8
     800:	89 2d       	mov	r24, r9
     802:	9e 2d       	mov	r25, r14
     804:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
     808:	c9 01       	movw	r24, r18
     80a:	da 01       	movw	r26, r20
     80c:	9c 01       	movw	r18, r24
     80e:	ad 01       	movw	r20, r26
	  clock_div_index++;
     810:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     812:	f5 e0       	ldi	r31, 0x05	; 5
     814:	ff 16       	cp	r15, r31
     816:	31 f0       	breq	.+12     	; 0x824 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     818:	2f 3f       	cpi	r18, 0xFF	; 255
     81a:	31 05       	cpc	r19, r1
     81c:	41 05       	cpc	r20, r1
     81e:	51 05       	cpc	r21, r1
     820:	09 f0       	breq	.+2      	; 0x824 <Timebase_Timer_Config+0x11a>
     822:	34 f7       	brge	.-52     	; 0x7f0 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     824:	8f 2d       	mov	r24, r15
     826:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     828:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     82a:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     82c:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     830:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     832:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     834:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     836:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     838:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     83a:	88 23       	and	r24, r24
     83c:	11 f4       	brne	.+4      	; 0x842 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	0f c0       	rjmp	.+30     	; 0x860 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	11 f4       	brne	.+4      	; 0x84a <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	0b c0       	rjmp	.+22     	; 0x860 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     84a:	82 30       	cpi	r24, 0x02	; 2
     84c:	11 f4       	brne	.+4      	; 0x852 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	07 c0       	rjmp	.+14     	; 0x860 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     852:	83 30       	cpi	r24, 0x03	; 3
     854:	11 f4       	brne	.+4      	; 0x85a <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	03 c0       	rjmp	.+6      	; 0x860 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     85a:	84 30       	cpi	r24, 0x04	; 4
     85c:	11 f4       	brne	.+4      	; 0x862 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     85e:	85 e0       	ldi	r24, 0x05	; 5
     860:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     862:	82 2f       	mov	r24, r18
     864:	80 95       	com	r24
     866:	f6 01       	movw	r30, r12
     868:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     86a:	83 81       	ldd	r24, Z+3	; 0x03
     86c:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 6e 00 	sts	0x006E, r24
    sei();
     874:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     876:	f6 01       	movw	r30, r12
     878:	12 83       	std	Z+2, r17	; 0x02
     87a:	01 83       	std	Z+1, r16	; 0x01
}
     87c:	2a 96       	adiw	r28, 0x0a	; 10
     87e:	0f b6       	in	r0, 0x3f	; 63
     880:	f8 94       	cli
     882:	de bf       	out	0x3e, r29	; 62
     884:	0f be       	out	0x3f, r0	; 63
     886:	cd bf       	out	0x3d, r28	; 61
     888:	cf 91       	pop	r28
     88a:	df 91       	pop	r29
     88c:	1f 91       	pop	r17
     88e:	0f 91       	pop	r16
     890:	ff 90       	pop	r15
     892:	ef 90       	pop	r14
     894:	df 90       	pop	r13
     896:	cf 90       	pop	r12
     898:	bf 90       	pop	r11
     89a:	af 90       	pop	r10
     89c:	9f 90       	pop	r9
     89e:	8f 90       	pop	r8
     8a0:	7f 90       	pop	r7
     8a2:	08 95       	ret

000008a4 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8a4:	e0 91 3f 01 	lds	r30, 0x013F
     8a8:	f0 91 40 01 	lds	r31, 0x0140
     8ac:	87 89       	ldd	r24, Z+23	; 0x17
}
     8ae:	08 95       	ret

000008b0 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8b0:	e0 91 3f 01 	lds	r30, 0x013F
     8b4:	f0 91 40 01 	lds	r31, 0x0140
     8b8:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     8ba:	8f 33       	cpi	r24, 0x3F	; 63
     8bc:	18 f4       	brcc	.+6      	; 0x8c4 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     8be:	87 89       	ldd	r24, Z+23	; 0x17
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	87 8b       	std	Z+23, r24	; 0x17
     8c4:	08 95       	ret

000008c6 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8c6:	e0 91 3f 01 	lds	r30, 0x013F
     8ca:	f0 91 40 01 	lds	r31, 0x0140
     8ce:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8d0:	88 23       	and	r24, r24
     8d2:	19 f0       	breq	.+6      	; 0x8da <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8d4:	87 89       	ldd	r24, Z+23	; 0x17
     8d6:	81 50       	subi	r24, 0x01	; 1
     8d8:	87 8b       	std	Z+23, r24	; 0x17
     8da:	08 95       	ret

000008dc <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8dc:	e0 91 3f 01 	lds	r30, 0x013F
     8e0:	f0 91 40 01 	lds	r31, 0x0140
     8e4:	17 8a       	std	Z+23, r1	; 0x17
}
     8e6:	08 95       	ret

000008e8 <Timebase_Timer_Get_SubSeconds>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8e8:	e0 91 3f 01 	lds	r30, 0x013F
     8ec:	f0 91 40 01 	lds	r31, 0x0140
     8f0:	20 85       	ldd	r18, Z+8	; 0x08
     8f2:	31 85       	ldd	r19, Z+9	; 0x09
}
     8f4:	c9 01       	movw	r24, r18
     8f6:	08 95       	ret

000008f8 <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8f8:	e0 91 3f 01 	lds	r30, 0x013F
     8fc:	f0 91 40 01 	lds	r31, 0x0140
     900:	22 85       	ldd	r18, Z+10	; 0x0a
     902:	33 85       	ldd	r19, Z+11	; 0x0b
     904:	44 85       	ldd	r20, Z+12	; 0x0c
     906:	55 85       	ldd	r21, Z+13	; 0x0d
}
     908:	b9 01       	movw	r22, r18
     90a:	ca 01       	movw	r24, r20
     90c:	08 95       	ret

0000090e <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     90e:	e0 91 3f 01 	lds	r30, 0x013F
     912:	f0 91 40 01 	lds	r31, 0x0140
     916:	91 87       	std	Z+9, r25	; 0x09
     918:	80 87       	std	Z+8, r24	; 0x08
}
     91a:	08 95       	ret

0000091c <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     91c:	e0 91 3f 01 	lds	r30, 0x013F
     920:	f0 91 40 01 	lds	r31, 0x0140
     924:	62 87       	std	Z+10, r22	; 0x0a
     926:	73 87       	std	Z+11, r23	; 0x0b
     928:	84 87       	std	Z+12, r24	; 0x0c
     92a:	95 87       	std	Z+13, r25	; 0x0d
}
     92c:	08 95       	ret

0000092e <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     92e:	2f 92       	push	r2
     930:	3f 92       	push	r3
     932:	4f 92       	push	r4
     934:	5f 92       	push	r5
     936:	6f 92       	push	r6
     938:	7f 92       	push	r7
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	9c 01       	movw	r18, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     950:	e0 91 3f 01 	lds	r30, 0x013F
     954:	f0 91 40 01 	lds	r31, 0x0140
     958:	80 85       	ldd	r24, Z+8	; 0x08
     95a:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
     95c:	1c 01       	movw	r2, r24
     95e:	44 24       	eor	r4, r4
     960:	55 24       	eor	r5, r5
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     962:	62 84       	ldd	r6, Z+10	; 0x0a
     964:	73 84       	ldd	r7, Z+11	; 0x0b
     966:	84 84       	ldd	r8, Z+12	; 0x0c
     968:	95 84       	ldd	r9, Z+13	; 0x0d
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
  int32_t temp_s  = Timebase_Timer_Get_Seconds();
  int32_t subsec_val = value % Timebase->Config.UpdateRate;
     96a:	61 81       	ldd	r22, Z+1	; 0x01
     96c:	72 81       	ldd	r23, Z+2	; 0x02
     96e:	c9 01       	movw	r24, r18
     970:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodhi4>
     974:	7c 01       	movw	r14, r24
     976:	00 e0       	ldi	r16, 0x00	; 0
     978:	10 e0       	ldi	r17, 0x00	; 0
  int32_t sec_val    = value / Timebase->Config.UpdateRate;
     97a:	61 81       	ldd	r22, Z+1	; 0x01
     97c:	72 81       	ldd	r23, Z+2	; 0x02
     97e:	c9 01       	movw	r24, r18
     980:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodhi4>
     984:	5b 01       	movw	r10, r22
     986:	cc 24       	eor	r12, r12
     988:	dd 24       	eor	r13, r13
  subsec_val += temp_ss;
     98a:	e2 0c       	add	r14, r2
     98c:	f3 1c       	adc	r15, r3
     98e:	04 1d       	adc	r16, r4
     990:	15 1d       	adc	r17, r5
  if(subsec_val >= Timebase->Config.UpdateRate){
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	92 81       	ldd	r25, Z+2	; 0x02
     996:	a0 e0       	ldi	r26, 0x00	; 0
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e8 16       	cp	r14, r24
     99c:	f9 06       	cpc	r15, r25
     99e:	0a 07       	cpc	r16, r26
     9a0:	1b 07       	cpc	r17, r27
     9a2:	94 f0       	brlt	.+36     	; 0x9c8 <Timebase_Timer_Delay_SubSeconds+0x9a>
	sec_val += 1;
     9a4:	08 94       	sec
     9a6:	a1 1c       	adc	r10, r1
     9a8:	b1 1c       	adc	r11, r1
     9aa:	c1 1c       	adc	r12, r1
     9ac:	d1 1c       	adc	r13, r1
	subsec_val = subsec_val % Timebase->Config.UpdateRate;
     9ae:	21 81       	ldd	r18, Z+1	; 0x01
     9b0:	32 81       	ldd	r19, Z+2	; 0x02
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	c8 01       	movw	r24, r16
     9b8:	b7 01       	movw	r22, r14
     9ba:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
     9be:	ac 01       	movw	r20, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	da 01       	movw	r26, r20
     9c4:	7c 01       	movw	r14, r24
     9c6:	8d 01       	movw	r16, r26
  }
  sec_val += temp_s;
  
  while(temp_s <= sec_val){
     9c8:	a6 0c       	add	r10, r6
     9ca:	b7 1c       	adc	r11, r7
     9cc:	c8 1c       	adc	r12, r8
     9ce:	d9 1c       	adc	r13, r9
     9d0:	a6 14       	cp	r10, r6
     9d2:	b7 04       	cpc	r11, r7
     9d4:	c8 04       	cpc	r12, r8
     9d6:	d9 04       	cpc	r13, r9
     9d8:	34 f0       	brlt	.+12     	; 0x9e6 <Timebase_Timer_Delay_SubSeconds+0xb8>
    if(temp_ss >= subsec_val){
     9da:	2e 14       	cp	r2, r14
     9dc:	3f 04       	cpc	r3, r15
     9de:	40 06       	cpc	r4, r16
     9e0:	51 06       	cpc	r5, r17
     9e2:	0c f4       	brge	.+2      	; 0x9e6 <Timebase_Timer_Delay_SubSeconds+0xb8>
     9e4:	ff cf       	rjmp	.-2      	; 0x9e4 <Timebase_Timer_Delay_SubSeconds+0xb6>
	  break;
	}
  }
}
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	08 95       	ret

00000a08 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     a08:	bc 01       	movw	r22, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a0a:	e0 91 3f 01 	lds	r30, 0x013F
     a0e:	f0 91 40 01 	lds	r31, 0x0140
     a12:	80 85       	ldd	r24, Z+8	; 0x08
     a14:	91 85       	ldd	r25, Z+9	; 0x09
  }
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     a16:	24 81       	ldd	r18, Z+4	; 0x04
     a18:	35 81       	ldd	r19, Z+5	; 0x05
     a1a:	46 81       	ldd	r20, Z+6	; 0x06
     a1c:	57 81       	ldd	r21, Z+7	; 0x07
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	a4 07       	cpc	r26, r20
     a28:	b5 07       	cpc	r27, r21
     a2a:	99 f7       	brne	.-26     	; 0xa12 <Timebase_Timer_Await_SubSeconds+0xa>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a2c:	80 85       	ldd	r24, Z+8	; 0x08
     a2e:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     a30:	86 0f       	add	r24, r22
     a32:	97 1f       	adc	r25, r23
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	84 83       	std	Z+4, r24	; 0x04
     a3a:	95 83       	std	Z+5, r25	; 0x05
     a3c:	a6 83       	std	Z+6, r26	; 0x06
     a3e:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     a40:	24 81       	ldd	r18, Z+4	; 0x04
     a42:	35 81       	ldd	r19, Z+5	; 0x05
     a44:	46 81       	ldd	r20, Z+6	; 0x06
     a46:	57 81       	ldd	r21, Z+7	; 0x07
     a48:	81 81       	ldd	r24, Z+1	; 0x01
     a4a:	92 81       	ldd	r25, Z+2	; 0x02
     a4c:	a0 e0       	ldi	r26, 0x00	; 0
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	28 17       	cp	r18, r24
     a52:	39 07       	cpc	r19, r25
     a54:	4a 07       	cpc	r20, r26
     a56:	5b 07       	cpc	r21, r27
     a58:	84 f0       	brlt	.+32     	; 0xa7a <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     a5a:	24 81       	ldd	r18, Z+4	; 0x04
     a5c:	35 81       	ldd	r19, Z+5	; 0x05
     a5e:	46 81       	ldd	r20, Z+6	; 0x06
     a60:	57 81       	ldd	r21, Z+7	; 0x07
     a62:	81 81       	ldd	r24, Z+1	; 0x01
     a64:	92 81       	ldd	r25, Z+2	; 0x02
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	39 0b       	sbc	r19, r25
     a6e:	4a 0b       	sbc	r20, r26
     a70:	5b 0b       	sbc	r21, r27
     a72:	24 83       	std	Z+4, r18	; 0x04
     a74:	35 83       	std	Z+5, r19	; 0x05
     a76:	46 83       	std	Z+6, r20	; 0x06
     a78:	57 83       	std	Z+7, r21	; 0x07
     a7a:	08 95       	ret

00000a7c <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a84:	e0 91 3f 01 	lds	r30, 0x013F
     a88:	f0 91 40 01 	lds	r31, 0x0140
     a8c:	22 85       	ldd	r18, Z+10	; 0x0a
     a8e:	33 85       	ldd	r19, Z+11	; 0x0b
     a90:	44 85       	ldd	r20, Z+12	; 0x0c
     a92:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     a94:	7c 01       	movw	r14, r24
     a96:	00 e0       	ldi	r16, 0x00	; 0
     a98:	10 e0       	ldi	r17, 0x00	; 0
     a9a:	e2 0e       	add	r14, r18
     a9c:	f3 1e       	adc	r15, r19
     a9e:	04 1f       	adc	r16, r20
     aa0:	15 1f       	adc	r17, r21
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     aa2:	82 85       	ldd	r24, Z+10	; 0x0a
     aa4:	93 85       	ldd	r25, Z+11	; 0x0b
     aa6:	a4 85       	ldd	r26, Z+12	; 0x0c
     aa8:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     aaa:	8e 15       	cp	r24, r14
     aac:	9f 05       	cpc	r25, r15
     aae:	a0 07       	cpc	r26, r16
     ab0:	b1 07       	cpc	r27, r17
     ab2:	bc f3       	brlt	.-18     	; 0xaa2 <Timebase_Timer_Delay_Seconds+0x26>
}
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	08 95       	ret

00000abe <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     abe:	e0 91 3f 01 	lds	r30, 0x013F
     ac2:	f0 91 40 01 	lds	r31, 0x0140
     ac6:	16 86       	std	Z+14, r1	; 0x0e
     ac8:	17 86       	std	Z+15, r1	; 0x0f
     aca:	10 8a       	std	Z+16, r1	; 0x10
     acc:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     ace:	12 8a       	std	Z+18, r1	; 0x12
     ad0:	13 8a       	std	Z+19, r1	; 0x13
     ad2:	14 8a       	std	Z+20, r1	; 0x14
     ad4:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     ad6:	16 8a       	std	Z+22, r1	; 0x16
}
     ad8:	08 95       	ret

00000ada <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     ada:	e0 91 3f 01 	lds	r30, 0x013F
     ade:	f0 91 40 01 	lds	r31, 0x0140
     ae2:	86 89       	ldd	r24, Z+22	; 0x16
     ae4:	88 23       	and	r24, r24
     ae6:	91 f4       	brne	.+36     	; 0xb0c <Timebase_Window_Timer_Start+0x32>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ae8:	82 85       	ldd	r24, Z+10	; 0x0a
     aea:	93 85       	ldd	r25, Z+11	; 0x0b
     aec:	a4 85       	ldd	r26, Z+12	; 0x0c
     aee:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     af0:	86 87       	std	Z+14, r24	; 0x0e
     af2:	97 87       	std	Z+15, r25	; 0x0f
     af4:	a0 8b       	std	Z+16, r26	; 0x10
     af6:	b1 8b       	std	Z+17, r27	; 0x11


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     af8:	80 85       	ldd	r24, Z+8	; 0x08
     afa:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	82 8b       	std	Z+18, r24	; 0x12
     b02:	93 8b       	std	Z+19, r25	; 0x13
     b04:	a4 8b       	std	Z+20, r26	; 0x14
     b06:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	86 8b       	std	Z+22, r24	; 0x16
     b0c:	08 95       	ret

00000b0e <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     b1a:	c0 91 3f 01 	lds	r28, 0x013F
     b1e:	d0 91 40 01 	lds	r29, 0x0140
     b22:	8e 89       	ldd	r24, Y+22	; 0x16
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	21 f0       	breq	.+8      	; 0xb30 <Timebase_Window_Timer_Get_Interval+0x22>
     b28:	ee 24       	eor	r14, r14
     b2a:	ff 24       	eor	r15, r15
     b2c:	87 01       	movw	r16, r14
     b2e:	23 c0       	rjmp	.+70     	; 0xb76 <Timebase_Window_Timer_Get_Interval+0x68>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b30:	2a 85       	ldd	r18, Y+10	; 0x0a
     b32:	3b 85       	ldd	r19, Y+11	; 0x0b
     b34:	4c 85       	ldd	r20, Y+12	; 0x0c
     b36:	5d 85       	ldd	r21, Y+13	; 0x0d


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     b38:	88 85       	ldd	r24, Y+8	; 0x08
     b3a:	99 85       	ldd	r25, Y+9	; 0x09


int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    int32_t curr_s = Timebase_Timer_Get_Seconds();
    int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
     b3c:	7c 01       	movw	r14, r24
     b3e:	00 e0       	ldi	r16, 0x00	; 0
     b40:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     b42:	8e 85       	ldd	r24, Y+14	; 0x0e
     b44:	9f 85       	ldd	r25, Y+15	; 0x0f
     b46:	a8 89       	ldd	r26, Y+16	; 0x10
     b48:	b9 89       	ldd	r27, Y+17	; 0x11
     b4a:	28 1b       	sub	r18, r24
     b4c:	39 0b       	sbc	r19, r25
     b4e:	4a 0b       	sbc	r20, r26
     b50:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     b52:	69 81       	ldd	r22, Y+1	; 0x01
     b54:	7a 81       	ldd	r23, Y+2	; 0x02
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__mulsi3>
	curr_s += curr_ss;
     b5e:	2a 89       	ldd	r18, Y+18	; 0x12
     b60:	3b 89       	ldd	r19, Y+19	; 0x13
     b62:	4c 89       	ldd	r20, Y+20	; 0x14
     b64:	5d 89       	ldd	r21, Y+21	; 0x15
     b66:	e2 1a       	sub	r14, r18
     b68:	f3 0a       	sbc	r15, r19
     b6a:	04 0b       	sbc	r16, r20
     b6c:	15 0b       	sbc	r17, r21
     b6e:	e6 0e       	add	r14, r22
     b70:	f7 1e       	adc	r15, r23
     b72:	08 1f       	adc	r16, r24
     b74:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     b76:	b7 01       	movw	r22, r14
     b78:	c8 01       	movw	r24, r16
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	08 95       	ret

00000b88 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     b88:	0e 94 87 05 	call	0xb0e	; 0xb0e <Timebase_Window_Timer_Get_Interval>
     b8c:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     b8e:	e0 91 3f 01 	lds	r30, 0x013F
     b92:	f0 91 40 01 	lds	r31, 0x0140
     b96:	86 89       	ldd	r24, Z+22	; 0x16
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	49 f4       	brne	.+18     	; 0xbae <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b9c:	16 86       	std	Z+14, r1	; 0x0e
     b9e:	17 86       	std	Z+15, r1	; 0x0f
     ba0:	10 8a       	std	Z+16, r1	; 0x10
     ba2:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     ba4:	12 8a       	std	Z+18, r1	; 0x12
     ba6:	13 8a       	std	Z+19, r1	; 0x13
     ba8:	14 8a       	std	Z+20, r1	; 0x14
     baa:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     bac:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     bae:	82 2f       	mov	r24, r18
     bb0:	08 95       	ret

00000bb2 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
     bb2:	e0 91 3f 01 	lds	r30, 0x013F
     bb6:	f0 91 40 01 	lds	r31, 0x0140
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2d e0       	ldi	r18, 0x0D	; 13
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	ac 01       	movw	r20, r24
     bc2:	42 9f       	mul	r20, r18
     bc4:	c0 01       	movw	r24, r0
     bc6:	43 9f       	mul	r20, r19
     bc8:	90 0d       	add	r25, r0
     bca:	52 9f       	mul	r21, r18
     bcc:	90 0d       	add	r25, r0
     bce:	11 24       	eor	r1, r1
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25
     bd4:	e3 59       	subi	r30, 0x93	; 147
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	80 81       	ld	r24, Z
     bda:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
     bdc:	8f 70       	andi	r24, 0x0F	; 15
     bde:	08 95       	ret

00000be0 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     be0:	e0 91 3f 01 	lds	r30, 0x013F
     be4:	f0 91 40 01 	lds	r31, 0x0140
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	2d e0       	ldi	r18, 0x0D	; 13
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	ac 01       	movw	r20, r24
     bf0:	42 9f       	mul	r20, r18
     bf2:	c0 01       	movw	r24, r0
     bf4:	43 9f       	mul	r20, r19
     bf6:	90 0d       	add	r25, r0
     bf8:	52 9f       	mul	r21, r18
     bfa:	90 0d       	add	r25, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	e8 0f       	add	r30, r24
     c00:	f9 1f       	adc	r31, r25
     c02:	e3 59       	subi	r30, 0x93	; 147
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	6f 70       	andi	r22, 0x0F	; 15
     c08:	66 0f       	add	r22, r22
     c0a:	80 81       	ld	r24, Z
     c0c:	81 7e       	andi	r24, 0xE1	; 225
     c0e:	86 2b       	or	r24, r22
     c10:	80 83       	st	Z, r24
}
     c12:	08 95       	ret

00000c14 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
     c14:	e0 91 3f 01 	lds	r30, 0x013F
     c18:	f0 91 40 01 	lds	r31, 0x0140
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	2d e0       	ldi	r18, 0x0D	; 13
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	ac 01       	movw	r20, r24
     c24:	42 9f       	mul	r20, r18
     c26:	c0 01       	movw	r24, r0
     c28:	43 9f       	mul	r20, r19
     c2a:	90 0d       	add	r25, r0
     c2c:	52 9f       	mul	r21, r18
     c2e:	90 0d       	add	r25, r0
     c30:	11 24       	eor	r1, r1
     c32:	e8 0f       	add	r30, r24
     c34:	f9 1f       	adc	r31, r25
     c36:	ee 58       	subi	r30, 0x8E	; 142
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	60 81       	ld	r22, Z
     c3c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
     c3e:	82 81       	ldd	r24, Z+2	; 0x02
     c40:	93 81       	ldd	r25, Z+3	; 0x03
     c42:	08 95       	ret

00000c44 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     c44:	e0 91 3f 01 	lds	r30, 0x013F
     c48:	f0 91 40 01 	lds	r31, 0x0140
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	2d e0       	ldi	r18, 0x0D	; 13
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	dc 01       	movw	r26, r24
     c54:	a2 9f       	mul	r26, r18
     c56:	c0 01       	movw	r24, r0
     c58:	a3 9f       	mul	r26, r19
     c5a:	90 0d       	add	r25, r0
     c5c:	b2 9f       	mul	r27, r18
     c5e:	90 0d       	add	r25, r0
     c60:	11 24       	eor	r1, r1
     c62:	e8 0f       	add	r30, r24
     c64:	f9 1f       	adc	r31, r25
     c66:	ee 58       	subi	r30, 0x8E	; 142
     c68:	ff 4f       	sbci	r31, 0xFF	; 255
     c6a:	40 83       	st	Z, r20
     c6c:	51 83       	std	Z+1, r21	; 0x01
     c6e:	62 83       	std	Z+2, r22	; 0x02
     c70:	73 83       	std	Z+3, r23	; 0x03
}
     c72:	08 95       	ret

00000c74 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
     c74:	e0 91 3f 01 	lds	r30, 0x013F
     c78:	f0 91 40 01 	lds	r31, 0x0140
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	2d e0       	ldi	r18, 0x0D	; 13
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	ac 01       	movw	r20, r24
     c84:	42 9f       	mul	r20, r18
     c86:	c0 01       	movw	r24, r0
     c88:	43 9f       	mul	r20, r19
     c8a:	90 0d       	add	r25, r0
     c8c:	52 9f       	mul	r21, r18
     c8e:	90 0d       	add	r25, r0
     c90:	11 24       	eor	r1, r1
     c92:	e8 0f       	add	r30, r24
     c94:	f9 1f       	adc	r31, r25
     c96:	e2 59       	subi	r30, 0x92	; 146
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	60 81       	ld	r22, Z
     c9c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
     c9e:	82 81       	ldd	r24, Z+2	; 0x02
     ca0:	93 81       	ldd	r25, Z+3	; 0x03
     ca2:	08 95       	ret

00000ca4 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     ca4:	e0 91 3f 01 	lds	r30, 0x013F
     ca8:	f0 91 40 01 	lds	r31, 0x0140
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2d e0       	ldi	r18, 0x0D	; 13
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	dc 01       	movw	r26, r24
     cb4:	a2 9f       	mul	r26, r18
     cb6:	c0 01       	movw	r24, r0
     cb8:	a3 9f       	mul	r26, r19
     cba:	90 0d       	add	r25, r0
     cbc:	b2 9f       	mul	r27, r18
     cbe:	90 0d       	add	r25, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	e8 0f       	add	r30, r24
     cc4:	f9 1f       	adc	r31, r25
     cc6:	e2 59       	subi	r30, 0x92	; 146
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	40 83       	st	Z, r20
     ccc:	51 83       	std	Z+1, r21	; 0x01
     cce:	62 83       	std	Z+2, r22	; 0x02
     cd0:	73 83       	std	Z+3, r23	; 0x03
}
     cd2:	08 95       	ret

00000cd4 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
     cd4:	e0 91 3f 01 	lds	r30, 0x013F
     cd8:	f0 91 40 01 	lds	r31, 0x0140
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	2d e0       	ldi	r18, 0x0D	; 13
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	ac 01       	movw	r20, r24
     ce4:	42 9f       	mul	r20, r18
     ce6:	c0 01       	movw	r24, r0
     ce8:	43 9f       	mul	r20, r19
     cea:	90 0d       	add	r25, r0
     cec:	52 9f       	mul	r21, r18
     cee:	90 0d       	add	r25, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	e8 0f       	add	r30, r24
     cf4:	f9 1f       	adc	r31, r25
     cf6:	ea 58       	subi	r30, 0x8A	; 138
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	60 81       	ld	r22, Z
     cfc:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
     cfe:	82 81       	ldd	r24, Z+2	; 0x02
     d00:	93 81       	ldd	r25, Z+3	; 0x03
     d02:	08 95       	ret

00000d04 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     d04:	e0 91 3f 01 	lds	r30, 0x013F
     d08:	f0 91 40 01 	lds	r31, 0x0140
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     d10:	77 ff       	sbrs	r23, 7
     d12:	13 c0       	rjmp	.+38     	; 0xd3a <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
     d14:	8d e0       	ldi	r24, 0x0D	; 13
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	ac 01       	movw	r20, r24
     d1a:	24 9f       	mul	r18, r20
     d1c:	c0 01       	movw	r24, r0
     d1e:	25 9f       	mul	r18, r21
     d20:	90 0d       	add	r25, r0
     d22:	34 9f       	mul	r19, r20
     d24:	90 0d       	add	r25, r0
     d26:	11 24       	eor	r1, r1
     d28:	e8 0f       	add	r30, r24
     d2a:	f9 1f       	adc	r31, r25
     d2c:	ea 58       	subi	r30, 0x8A	; 138
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	10 82       	st	Z, r1
     d32:	11 82       	std	Z+1, r1	; 0x01
     d34:	12 82       	std	Z+2, r1	; 0x02
     d36:	13 82       	std	Z+3, r1	; 0x03
     d38:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
     d3a:	8d e0       	ldi	r24, 0x0D	; 13
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	dc 01       	movw	r26, r24
     d40:	2a 9f       	mul	r18, r26
     d42:	c0 01       	movw	r24, r0
     d44:	2b 9f       	mul	r18, r27
     d46:	90 0d       	add	r25, r0
     d48:	3a 9f       	mul	r19, r26
     d4a:	90 0d       	add	r25, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	e8 0f       	add	r30, r24
     d50:	f9 1f       	adc	r31, r25
     d52:	ea 58       	subi	r30, 0x8A	; 138
     d54:	ff 4f       	sbci	r31, 0xFF	; 255
     d56:	40 83       	st	Z, r20
     d58:	51 83       	std	Z+1, r21	; 0x01
     d5a:	62 83       	std	Z+2, r22	; 0x02
     d5c:	73 83       	std	Z+3, r23	; 0x03
     d5e:	08 95       	ret

00000d60 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
     d60:	e0 91 3f 01 	lds	r30, 0x013F
     d64:	f0 91 40 01 	lds	r31, 0x0140
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2d e0       	ldi	r18, 0x0D	; 13
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	ac 01       	movw	r20, r24
     d70:	42 9f       	mul	r20, r18
     d72:	c0 01       	movw	r24, r0
     d74:	43 9f       	mul	r20, r19
     d76:	90 0d       	add	r25, r0
     d78:	52 9f       	mul	r21, r18
     d7a:	90 0d       	add	r25, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	e8 0f       	add	r30, r24
     d80:	f9 1f       	adc	r31, r25
     d82:	e3 59       	subi	r30, 0x93	; 147
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
     d88:	81 70       	andi	r24, 0x01	; 1
     d8a:	08 95       	ret

00000d8c <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
     d8c:	e0 91 3f 01 	lds	r30, 0x013F
     d90:	f0 91 40 01 	lds	r31, 0x0140
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	2d e0       	ldi	r18, 0x0D	; 13
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	ac 01       	movw	r20, r24
     d9c:	42 9f       	mul	r20, r18
     d9e:	c0 01       	movw	r24, r0
     da0:	43 9f       	mul	r20, r19
     da2:	90 0d       	add	r25, r0
     da4:	52 9f       	mul	r21, r18
     da6:	90 0d       	add	r25, r0
     da8:	11 24       	eor	r1, r1
     daa:	e8 0f       	add	r30, r24
     dac:	f9 1f       	adc	r31, r25
     dae:	e3 59       	subi	r30, 0x93	; 147
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	80 81       	ld	r24, Z
     db4:	81 60       	ori	r24, 0x01	; 1
     db6:	80 83       	st	Z, r24
}
     db8:	08 95       	ret

00000dba <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     dba:	e0 91 3f 01 	lds	r30, 0x013F
     dbe:	f0 91 40 01 	lds	r31, 0x0140
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	2d e0       	ldi	r18, 0x0D	; 13
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	ac 01       	movw	r20, r24
     dca:	42 9f       	mul	r20, r18
     dcc:	c0 01       	movw	r24, r0
     dce:	43 9f       	mul	r20, r19
     dd0:	90 0d       	add	r25, r0
     dd2:	52 9f       	mul	r21, r18
     dd4:	90 0d       	add	r25, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	e8 0f       	add	r30, r24
     dda:	f9 1f       	adc	r31, r25
     ddc:	e3 59       	subi	r30, 0x93	; 147
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	80 81       	ld	r24, Z
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	80 83       	st	Z, r24
}
     de6:	08 95       	ret

00000de8 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     de8:	e0 91 3f 01 	lds	r30, 0x013F
     dec:	f0 91 40 01 	lds	r31, 0x0140
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	2d e0       	ldi	r18, 0x0D	; 13
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ac 01       	movw	r20, r24
     df8:	42 9f       	mul	r20, r18
     dfa:	c0 01       	movw	r24, r0
     dfc:	43 9f       	mul	r20, r19
     dfe:	90 0d       	add	r25, r0
     e00:	52 9f       	mul	r21, r18
     e02:	90 0d       	add	r25, r0
     e04:	11 24       	eor	r1, r1
     e06:	e8 0f       	add	r30, r24
     e08:	f9 1f       	adc	r31, r25
     e0a:	e2 59       	subi	r30, 0x92	; 146
     e0c:	ff 4f       	sbci	r31, 0xFF	; 255
     e0e:	11 92       	st	Z+, r1
     e10:	11 92       	st	Z+, r1
     e12:	11 92       	st	Z+, r1
     e14:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e16:	10 82       	st	Z, r1
     e18:	11 82       	std	Z+1, r1	; 0x01
     e1a:	12 82       	std	Z+2, r1	; 0x02
     e1c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e1e:	35 97       	sbiw	r30, 0x05	; 5
     e20:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e22:	80 7e       	andi	r24, 0xE0	; 224
     e24:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
     e26:	08 95       	ret

00000e28 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e28:	e0 91 3f 01 	lds	r30, 0x013F
     e2c:	f0 91 40 01 	lds	r31, 0x0140
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	2d e0       	ldi	r18, 0x0D	; 13
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	ac 01       	movw	r20, r24
     e38:	42 9f       	mul	r20, r18
     e3a:	c0 01       	movw	r24, r0
     e3c:	43 9f       	mul	r20, r19
     e3e:	90 0d       	add	r25, r0
     e40:	52 9f       	mul	r21, r18
     e42:	90 0d       	add	r25, r0
     e44:	11 24       	eor	r1, r1
     e46:	e8 0f       	add	r30, r24
     e48:	f9 1f       	adc	r31, r25
     e4a:	e2 59       	subi	r30, 0x92	; 146
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	11 92       	st	Z+, r1
     e50:	11 92       	st	Z+, r1
     e52:	11 92       	st	Z+, r1
     e54:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e56:	10 82       	st	Z, r1
     e58:	11 82       	std	Z+1, r1	; 0x01
     e5a:	12 82       	std	Z+2, r1	; 0x02
     e5c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e5e:	35 97       	sbiw	r30, 0x05	; 5
     e60:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e62:	80 7e       	andi	r24, 0xE0	; 224
     e64:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
     e66:	08 95       	ret

00000e68 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     e68:	e0 91 3f 01 	lds	r30, 0x013F
     e6c:	f0 91 40 01 	lds	r31, 0x0140
     e70:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     e72:	2d e0       	ldi	r18, 0x0D	; 13
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	ac 01       	movw	r20, r24
     e78:	42 9f       	mul	r20, r18
     e7a:	c0 01       	movw	r24, r0
     e7c:	43 9f       	mul	r20, r19
     e7e:	90 0d       	add	r25, r0
     e80:	52 9f       	mul	r21, r18
     e82:	90 0d       	add	r25, r0
     e84:	11 24       	eor	r1, r1
     e86:	e8 0f       	add	r30, r24
     e88:	f9 1f       	adc	r31, r25
     e8a:	e3 59       	subi	r30, 0x93	; 147
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	90 81       	ld	r25, Z
     e90:	89 2f       	mov	r24, r25
     e92:	86 95       	lsr	r24
     e94:	8f 70       	andi	r24, 0x0F	; 15
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	19 f0       	breq	.+6      	; 0xea0 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e9a:	91 7e       	andi	r25, 0xE1	; 225
     e9c:	92 60       	ori	r25, 0x02	; 2
     e9e:	90 83       	st	Z, r25
     ea0:	08 95       	ret

00000ea2 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     ea2:	e0 91 3f 01 	lds	r30, 0x013F
     ea6:	f0 91 40 01 	lds	r31, 0x0140
     eaa:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     eac:	2d e0       	ldi	r18, 0x0D	; 13
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	ac 01       	movw	r20, r24
     eb2:	42 9f       	mul	r20, r18
     eb4:	c0 01       	movw	r24, r0
     eb6:	43 9f       	mul	r20, r19
     eb8:	90 0d       	add	r25, r0
     eba:	52 9f       	mul	r21, r18
     ebc:	90 0d       	add	r25, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	e8 0f       	add	r30, r24
     ec2:	f9 1f       	adc	r31, r25
     ec4:	e3 59       	subi	r30, 0x93	; 147
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	90 81       	ld	r25, Z
     eca:	89 2f       	mov	r24, r25
     ecc:	86 95       	lsr	r24
     ece:	8f 70       	andi	r24, 0x0F	; 15
     ed0:	82 30       	cpi	r24, 0x02	; 2
     ed2:	19 f0       	breq	.+6      	; 0xeda <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ed4:	91 7e       	andi	r25, 0xE1	; 225
     ed6:	94 60       	ori	r25, 0x04	; 4
     ed8:	90 83       	st	Z, r25
     eda:	08 95       	ret

00000edc <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     ee0:	a0 91 3f 01 	lds	r26, 0x013F
     ee4:	b0 91 40 01 	lds	r27, 0x0140
     ee8:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     eea:	2d e0       	ldi	r18, 0x0D	; 13
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	82 9f       	mul	r24, r18
     ef0:	f0 01       	movw	r30, r0
     ef2:	83 9f       	mul	r24, r19
     ef4:	f0 0d       	add	r31, r0
     ef6:	92 9f       	mul	r25, r18
     ef8:	f0 0d       	add	r31, r0
     efa:	11 24       	eor	r1, r1
     efc:	ea 0f       	add	r30, r26
     efe:	fb 1f       	adc	r31, r27
     f00:	ef 01       	movw	r28, r30
     f02:	c3 59       	subi	r28, 0x93	; 147
     f04:	df 4f       	sbci	r29, 0xFF	; 255
     f06:	88 81       	ld	r24, Y
     f08:	86 95       	lsr	r24
     f0a:	8f 70       	andi	r24, 0x0F	; 15
     f0c:	e9 f4       	brne	.+58     	; 0xf48 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f0e:	ee 58       	subi	r30, 0x8E	; 142
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	40 83       	st	Z, r20
     f14:	51 83       	std	Z+1, r21	; 0x01
     f16:	62 83       	std	Z+2, r22	; 0x02
     f18:	73 83       	std	Z+3, r23	; 0x03
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f1a:	1a 96       	adiw	r26, 0x0a	; 10
     f1c:	8d 91       	ld	r24, X+
     f1e:	9d 91       	ld	r25, X+
     f20:	0d 90       	ld	r0, X+
     f22:	bc 91       	ld	r27, X
     f24:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f26:	84 0f       	add	r24, r20
     f28:	95 1f       	adc	r25, r21
     f2a:	a6 1f       	adc	r26, r22
     f2c:	b7 1f       	adc	r27, r23
     f2e:	b2 93       	st	-Z, r27
     f30:	a2 93       	st	-Z, r26
     f32:	92 93       	st	-Z, r25
     f34:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     f36:	98 81       	ld	r25, Y
     f38:	89 2f       	mov	r24, r25
     f3a:	86 95       	lsr	r24
     f3c:	8f 70       	andi	r24, 0x0F	; 15
     f3e:	81 30       	cpi	r24, 0x01	; 1
     f40:	19 f0       	breq	.+6      	; 0xf48 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f42:	91 7e       	andi	r25, 0xE1	; 225
     f44:	92 60       	ori	r25, 0x02	; 2
     f46:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f52:	e0 91 3f 01 	lds	r30, 0x013F
     f56:	f0 91 40 01 	lds	r31, 0x0140
     f5a:	a8 2f       	mov	r26, r24
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	2d e0       	ldi	r18, 0x0D	; 13
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	e9 01       	movw	r28, r18
     f64:	ac 9f       	mul	r26, r28
     f66:	90 01       	movw	r18, r0
     f68:	ad 9f       	mul	r26, r29
     f6a:	30 0d       	add	r19, r0
     f6c:	bc 9f       	mul	r27, r28
     f6e:	30 0d       	add	r19, r0
     f70:	11 24       	eor	r1, r1
     f72:	e2 0f       	add	r30, r18
     f74:	f3 1f       	adc	r31, r19
     f76:	e2 59       	subi	r30, 0x92	; 146
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	11 92       	st	Z+, r1
     f7c:	11 92       	st	Z+, r1
     f7e:	11 92       	st	Z+, r1
     f80:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f82:	10 82       	st	Z, r1
     f84:	11 82       	std	Z+1, r1	; 0x01
     f86:	12 82       	std	Z+2, r1	; 0x02
     f88:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f8a:	35 97       	sbiw	r30, 0x05	; 5
     f8c:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     f8e:	90 7e       	andi	r25, 0xE0	; 224
     f90:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
     f92:	0e 94 6e 07 	call	0xedc	; 0xedc <Timebase_DownCounter_Set_Securely>
} 
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
     f9c:	0f 93       	push	r16
     f9e:	1f 93       	push	r17
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     fa4:	a0 91 3f 01 	lds	r26, 0x013F
     fa8:	b0 91 40 01 	lds	r27, 0x0140
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	2d e0       	ldi	r18, 0x0D	; 13
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	82 9f       	mul	r24, r18
     fb4:	f0 01       	movw	r30, r0
     fb6:	83 9f       	mul	r24, r19
     fb8:	f0 0d       	add	r31, r0
     fba:	92 9f       	mul	r25, r18
     fbc:	f0 0d       	add	r31, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	ea 0f       	add	r30, r26
     fc2:	fb 1f       	adc	r31, r27
     fc4:	8f 01       	movw	r16, r30
     fc6:	03 59       	subi	r16, 0x93	; 147
     fc8:	1f 4f       	sbci	r17, 0xFF	; 255
     fca:	e8 01       	movw	r28, r16
     fcc:	88 81       	ld	r24, Y
     fce:	86 95       	lsr	r24
     fd0:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     fd2:	81 30       	cpi	r24, 0x01	; 1
     fd4:	69 f5       	brne	.+90     	; 0x1030 <Timebase_DownCounter_Update+0x94>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     fd6:	1a 96       	adiw	r26, 0x0a	; 10
     fd8:	2d 91       	ld	r18, X+
     fda:	3d 91       	ld	r19, X+
     fdc:	4d 91       	ld	r20, X+
     fde:	5c 91       	ld	r21, X
     fe0:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
     fe2:	bf 01       	movw	r22, r30
     fe4:	62 59       	subi	r22, 0x92	; 146
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	eb 01       	movw	r28, r22
     fea:	88 81       	ld	r24, Y
     fec:	99 81       	ldd	r25, Y+1	; 0x01
     fee:	aa 81       	ldd	r26, Y+2	; 0x02
     ff0:	bb 81       	ldd	r27, Y+3	; 0x03
     ff2:	82 1b       	sub	r24, r18
     ff4:	93 0b       	sbc	r25, r19
     ff6:	a4 0b       	sbc	r26, r20
     ff8:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     ffa:	ee 58       	subi	r30, 0x8E	; 142
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	80 83       	st	Z, r24
    1000:	91 83       	std	Z+1, r25	; 0x01
    1002:	a2 83       	std	Z+2, r26	; 0x02
    1004:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    1006:	18 16       	cp	r1, r24
    1008:	19 06       	cpc	r1, r25
    100a:	1a 06       	cpc	r1, r26
    100c:	1b 06       	cpc	r1, r27
    100e:	34 f1       	brlt	.+76     	; 0x105c <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1010:	db 01       	movw	r26, r22
    1012:	1d 92       	st	X+, r1
    1014:	1d 92       	st	X+, r1
    1016:	1d 92       	st	X+, r1
    1018:	1c 92       	st	X, r1
    101a:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    101c:	10 82       	st	Z, r1
    101e:	11 82       	std	Z+1, r1	; 0x01
    1020:	12 82       	std	Z+2, r1	; 0x02
    1022:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1024:	e8 01       	movw	r28, r16
    1026:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1028:	80 7e       	andi	r24, 0xE0	; 224
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	88 83       	st	Y, r24
    102e:	16 c0       	rjmp	.+44     	; 0x105c <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	a1 f4       	brne	.+40     	; 0x105c <Timebase_DownCounter_Update+0xc0>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1034:	1a 96       	adiw	r26, 0x0a	; 10
    1036:	8d 91       	ld	r24, X+
    1038:	9d 91       	ld	r25, X+
    103a:	0d 90       	ld	r0, X+
    103c:	bc 91       	ld	r27, X
    103e:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1040:	ee 58       	subi	r30, 0x8E	; 142
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	20 81       	ld	r18, Z
    1046:	31 81       	ldd	r19, Z+1	; 0x01
    1048:	42 81       	ldd	r20, Z+2	; 0x02
    104a:	53 81       	ldd	r21, Z+3	; 0x03
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	a4 1f       	adc	r26, r20
    1052:	b5 1f       	adc	r27, r21
    1054:	b2 93       	st	-Z, r27
    1056:	a2 93       	st	-Z, r26
    1058:	92 93       	st	-Z, r25
    105a:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	08 95       	ret

00001066 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    1066:	40 e0       	ldi	r20, 0x00	; 0
    1068:	e0 91 3f 01 	lds	r30, 0x013F
    106c:	f0 91 40 01 	lds	r31, 0x0140
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	2d e0       	ldi	r18, 0x0D	; 13
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	bc 01       	movw	r22, r24
    1078:	62 9f       	mul	r22, r18
    107a:	c0 01       	movw	r24, r0
    107c:	63 9f       	mul	r22, r19
    107e:	90 0d       	add	r25, r0
    1080:	72 9f       	mul	r23, r18
    1082:	90 0d       	add	r25, r0
    1084:	11 24       	eor	r1, r1
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	e3 59       	subi	r30, 0x93	; 147
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	80 81       	ld	r24, Z
    1090:	86 95       	lsr	r24
    1092:	8f 70       	andi	r24, 0x0F	; 15
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	09 f4       	brne	.+2      	; 0x109a <Timebase_DownCounter_Expired+0x34>
    1098:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    109a:	84 2f       	mov	r24, r20
    109c:	08 95       	ret

0000109e <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    109e:	e0 91 3f 01 	lds	r30, 0x013F
    10a2:	f0 91 40 01 	lds	r31, 0x0140
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    10a8:	2d e0       	ldi	r18, 0x0D	; 13
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	ac 01       	movw	r20, r24
    10ae:	42 9f       	mul	r20, r18
    10b0:	c0 01       	movw	r24, r0
    10b2:	43 9f       	mul	r20, r19
    10b4:	90 0d       	add	r25, r0
    10b6:	52 9f       	mul	r21, r18
    10b8:	90 0d       	add	r25, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	e8 0f       	add	r30, r24
    10be:	f9 1f       	adc	r31, r25
    10c0:	df 01       	movw	r26, r30
    10c2:	a3 59       	subi	r26, 0x93	; 147
    10c4:	bf 4f       	sbci	r27, 0xFF	; 255
    10c6:	8c 91       	ld	r24, X
    10c8:	86 95       	lsr	r24
    10ca:	8f 70       	andi	r24, 0x0F	; 15
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	11 f0       	breq	.+4      	; 0x10d4 <Timebase_DownCounter_Expired_Event+0x36>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    10d4:	e2 59       	subi	r30, 0x92	; 146
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	11 92       	st	Z+, r1
    10da:	11 92       	st	Z+, r1
    10dc:	11 92       	st	Z+, r1
    10de:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    10e0:	10 82       	st	Z, r1
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	12 82       	std	Z+2, r1	; 0x02
    10e6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    10e8:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    10ea:	80 7e       	andi	r24, 0xE0	; 224
    10ec:	8c 93       	st	X, r24
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    10f0:	08 95       	ret

000010f2 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    10f6:	c0 91 3f 01 	lds	r28, 0x013F
    10fa:	d0 91 40 01 	lds	r29, 0x0140
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    1102:	8d e0       	ldi	r24, 0x0D	; 13
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	28 9f       	mul	r18, r24
    1108:	f0 01       	movw	r30, r0
    110a:	29 9f       	mul	r18, r25
    110c:	f0 0d       	add	r31, r0
    110e:	38 9f       	mul	r19, r24
    1110:	f0 0d       	add	r31, r0
    1112:	11 24       	eor	r1, r1
    1114:	ec 0f       	add	r30, r28
    1116:	fd 1f       	adc	r31, r29
    1118:	e3 59       	subi	r30, 0x93	; 147
    111a:	ff 4f       	sbci	r31, 0xFF	; 255
    111c:	80 81       	ld	r24, Z
    111e:	ed 56       	subi	r30, 0x6D	; 109
    1120:	f0 40       	sbci	r31, 0x00	; 0
    1122:	80 fd       	sbrc	r24, 0
    1124:	25 c0       	rjmp	.+74     	; 0x1170 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    1126:	ee 58       	subi	r30, 0x8E	; 142
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	81 91       	ld	r24, Z+
    112c:	91 91       	ld	r25, Z+
    112e:	a1 91       	ld	r26, Z+
    1130:	b1 91       	ld	r27, Z+
    1132:	84 1b       	sub	r24, r20
    1134:	95 0b       	sbc	r25, r21
    1136:	a6 0b       	sbc	r26, r22
    1138:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    113a:	b7 ff       	sbrs	r27, 7
    113c:	05 c0       	rjmp	.+10     	; 0x1148 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    113e:	10 82       	st	Z, r1
    1140:	11 82       	std	Z+1, r1	; 0x01
    1142:	12 82       	std	Z+2, r1	; 0x02
    1144:	13 82       	std	Z+3, r1	; 0x03
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1148:	80 83       	st	Z, r24
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	a2 83       	std	Z+2, r26	; 0x02
    114e:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1150:	8d e0       	ldi	r24, 0x0D	; 13
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	28 9f       	mul	r18, r24
    1156:	f0 01       	movw	r30, r0
    1158:	29 9f       	mul	r18, r25
    115a:	f0 0d       	add	r31, r0
    115c:	38 9f       	mul	r19, r24
    115e:	f0 0d       	add	r31, r0
    1160:	11 24       	eor	r1, r1
    1162:	ec 0f       	add	r30, r28
    1164:	fd 1f       	adc	r31, r29
    1166:	e3 59       	subi	r30, 0x93	; 147
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 81       	ld	r24, Z
    116c:	81 60       	ori	r24, 0x01	; 1
    116e:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1176:	e0 91 3f 01 	lds	r30, 0x013F
    117a:	f0 91 40 01 	lds	r31, 0x0140
    117e:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1180:	2d e0       	ldi	r18, 0x0D	; 13
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	ac 01       	movw	r20, r24
    1186:	42 9f       	mul	r20, r18
    1188:	c0 01       	movw	r24, r0
    118a:	43 9f       	mul	r20, r19
    118c:	90 0d       	add	r25, r0
    118e:	52 9f       	mul	r21, r18
    1190:	90 0d       	add	r25, r0
    1192:	11 24       	eor	r1, r1
    1194:	e8 0f       	add	r30, r24
    1196:	f9 1f       	adc	r31, r25
    1198:	df 01       	movw	r26, r30
    119a:	aa 58       	subi	r26, 0x8A	; 138
    119c:	bf 4f       	sbci	r27, 0xFF	; 255
    119e:	ee 58       	subi	r30, 0x8E	; 142
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	20 81       	ld	r18, Z
    11a4:	31 81       	ldd	r19, Z+1	; 0x01
    11a6:	42 81       	ldd	r20, Z+2	; 0x02
    11a8:	53 81       	ldd	r21, Z+3	; 0x03
    11aa:	8d 91       	ld	r24, X+
    11ac:	9d 91       	ld	r25, X+
    11ae:	0d 90       	ld	r0, X+
    11b0:	bc 91       	ld	r27, X
    11b2:	a0 2d       	mov	r26, r0
    11b4:	28 1b       	sub	r18, r24
    11b6:	39 0b       	sbc	r19, r25
    11b8:	4a 0b       	sbc	r20, r26
    11ba:	5b 0b       	sbc	r21, r27
    11bc:	57 ff       	sbrs	r21, 7
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e0       	ldi	r20, 0x00	; 0
    11c6:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    11c8:	b9 01       	movw	r22, r18
    11ca:	ca 01       	movw	r24, r20
    11cc:	08 95       	ret

000011ce <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    11d2:	c0 91 3f 01 	lds	r28, 0x013F
    11d6:	d0 91 40 01 	lds	r29, 0x0140
    11da:	68 2f       	mov	r22, r24
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    11de:	8d e0       	ldi	r24, 0x0D	; 13
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	68 9f       	mul	r22, r24
    11e4:	f0 01       	movw	r30, r0
    11e6:	69 9f       	mul	r22, r25
    11e8:	f0 0d       	add	r31, r0
    11ea:	78 9f       	mul	r23, r24
    11ec:	f0 0d       	add	r31, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	ec 0f       	add	r30, r28
    11f2:	fd 1f       	adc	r31, r29
    11f4:	df 01       	movw	r26, r30
    11f6:	aa 58       	subi	r26, 0x8A	; 138
    11f8:	bf 4f       	sbci	r27, 0xFF	; 255
    11fa:	ee 58       	subi	r30, 0x8E	; 142
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	20 81       	ld	r18, Z
    1200:	31 81       	ldd	r19, Z+1	; 0x01
    1202:	42 81       	ldd	r20, Z+2	; 0x02
    1204:	53 81       	ldd	r21, Z+3	; 0x03
    1206:	8d 91       	ld	r24, X+
    1208:	9d 91       	ld	r25, X+
    120a:	0d 90       	ld	r0, X+
    120c:	bc 91       	ld	r27, X
    120e:	a0 2d       	mov	r26, r0
    1210:	28 1b       	sub	r18, r24
    1212:	39 0b       	sbc	r19, r25
    1214:	4a 0b       	sbc	r20, r26
    1216:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1218:	57 fd       	sbrc	r21, 7
    121a:	07 c0       	rjmp	.+14     	; 0x122a <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    121c:	21 15       	cp	r18, r1
    121e:	31 05       	cpc	r19, r1
    1220:	41 05       	cpc	r20, r1
    1222:	51 05       	cpc	r21, r1
    1224:	11 f0       	breq	.+4      	; 0x122a <Timebase_DownCounter_Period_Value_Expired+0x5c>
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <Timebase_DownCounter_Period_Value_Expired+0x84>
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	8d e0       	ldi	r24, 0x0D	; 13
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	ac 01       	movw	r20, r24
    1232:	64 9f       	mul	r22, r20
    1234:	c0 01       	movw	r24, r0
    1236:	65 9f       	mul	r22, r21
    1238:	90 0d       	add	r25, r0
    123a:	74 9f       	mul	r23, r20
    123c:	90 0d       	add	r25, r0
    123e:	11 24       	eor	r1, r1
    1240:	c8 0f       	add	r28, r24
    1242:	d9 1f       	adc	r29, r25
    1244:	c3 59       	subi	r28, 0x93	; 147
    1246:	df 4f       	sbci	r29, 0xFF	; 255
    1248:	88 81       	ld	r24, Y
    124a:	80 ff       	sbrs	r24, 0
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1252:	82 2f       	mov	r24, r18
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

0000125a <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    125a:	1f 93       	push	r17
    125c:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    125e:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Timebase_DownCounter_Period_Value_Expired>
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	11 f0       	breq	.+4      	; 0x126a <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	18 c0       	rjmp	.+48     	; 0x129a <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    126a:	e0 91 3f 01 	lds	r30, 0x013F
    126e:	f0 91 40 01 	lds	r31, 0x0140
    1272:	21 2f       	mov	r18, r17
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8d e0       	ldi	r24, 0x0D	; 13
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	ac 01       	movw	r20, r24
    127c:	24 9f       	mul	r18, r20
    127e:	c0 01       	movw	r24, r0
    1280:	25 9f       	mul	r18, r21
    1282:	90 0d       	add	r25, r0
    1284:	34 9f       	mul	r19, r20
    1286:	90 0d       	add	r25, r0
    1288:	11 24       	eor	r1, r1
    128a:	e8 0f       	add	r30, r24
    128c:	f9 1f       	adc	r31, r25
    128e:	e3 59       	subi	r30, 0x93	; 147
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	80 81       	ld	r24, Z
    1294:	8e 7f       	andi	r24, 0xFE	; 254
    1296:	80 83       	st	Z, r24
    1298:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    129a:	1f 91       	pop	r17
    129c:	08 95       	ret

0000129e <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    129e:	1f 93       	push	r17
    12a0:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    12a2:	81 2f       	mov	r24, r17
    12a4:	0e 94 ce 07 	call	0xf9c	; 0xf9c <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    12a8:	1f 5f       	subi	r17, 0xFF	; 255
    12aa:	15 30       	cpi	r17, 0x05	; 5
    12ac:	d1 f7       	brne	.-12     	; 0x12a2 <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    12ae:	1f 91       	pop	r17
    12b0:	08 95       	ret

000012b2 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    12b2:	40 91 3f 01 	lds	r20, 0x013F
    12b6:	50 91 40 01 	lds	r21, 0x0140
    12ba:	da 01       	movw	r26, r20
    12bc:	a2 59       	subi	r26, 0x92	; 146
    12be:	bf 4f       	sbci	r27, 0xFF	; 255
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    12c4:	6d e0       	ldi	r22, 0x0D	; 13
    12c6:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    12c8:	1d 92       	st	X+, r1
    12ca:	1d 92       	st	X+, r1
    12cc:	1d 92       	st	X+, r1
    12ce:	1c 92       	st	X, r1
    12d0:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    12d2:	14 96       	adiw	r26, 0x04	; 4
    12d4:	1d 92       	st	X+, r1
    12d6:	1d 92       	st	X+, r1
    12d8:	1d 92       	st	X+, r1
    12da:	1c 92       	st	X, r1
    12dc:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    12de:	26 9f       	mul	r18, r22
    12e0:	f0 01       	movw	r30, r0
    12e2:	27 9f       	mul	r18, r23
    12e4:	f0 0d       	add	r31, r0
    12e6:	36 9f       	mul	r19, r22
    12e8:	f0 0d       	add	r31, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	e4 0f       	add	r30, r20
    12ee:	f5 1f       	adc	r31, r21
    12f0:	e3 59       	subi	r30, 0x93	; 147
    12f2:	ff 4f       	sbci	r31, 0xFF	; 255
    12f4:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    12f6:	80 7e       	andi	r24, 0xE0	; 224
    12f8:	80 83       	st	Z, r24
    12fa:	2f 5f       	subi	r18, 0xFF	; 255
    12fc:	3f 4f       	sbci	r19, 0xFF	; 255
    12fe:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    1300:	25 30       	cpi	r18, 0x05	; 5
    1302:	31 05       	cpc	r19, r1
    1304:	09 f7       	brne	.-62     	; 0x12c8 <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    1306:	08 95       	ret

00001308 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1308:	e0 91 3f 01 	lds	r30, 0x013F
    130c:	f0 91 40 01 	lds	r31, 0x0140
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c 01       	movw	r18, r24
    1314:	44 e0       	ldi	r20, 0x04	; 4
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	4a 95       	dec	r20
    131c:	e1 f7       	brne	.-8      	; 0x1316 <Timebase_DownCounter_SS_Get_Status+0xe>
    131e:	28 0f       	add	r18, r24
    1320:	39 1f       	adc	r19, r25
    1322:	e2 0f       	add	r30, r18
    1324:	f3 1f       	adc	r31, r19
    1326:	80 8d       	ldd	r24, Z+24	; 0x18
    1328:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    132a:	8f 70       	andi	r24, 0x0F	; 15
    132c:	08 95       	ret

0000132e <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    132e:	e0 91 3f 01 	lds	r30, 0x013F
    1332:	f0 91 40 01 	lds	r31, 0x0140
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 01       	movw	r18, r24
    133a:	54 e0       	ldi	r21, 0x04	; 4
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	5a 95       	dec	r21
    1342:	e1 f7       	brne	.-8      	; 0x133c <Timebase_DownCounter_SS_Set_Status+0xe>
    1344:	28 0f       	add	r18, r24
    1346:	39 1f       	adc	r19, r25
    1348:	e2 0f       	add	r30, r18
    134a:	f3 1f       	adc	r31, r19
    134c:	6f 70       	andi	r22, 0x0F	; 15
    134e:	66 0f       	add	r22, r22
    1350:	80 8d       	ldd	r24, Z+24	; 0x18
    1352:	81 7e       	andi	r24, 0xE1	; 225
    1354:	86 2b       	or	r24, r22
    1356:	80 8f       	std	Z+24, r24	; 0x18
}
    1358:	08 95       	ret

0000135a <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    135a:	e0 91 3f 01 	lds	r30, 0x013F
    135e:	f0 91 40 01 	lds	r31, 0x0140
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	9c 01       	movw	r18, r24
    1366:	64 e0       	ldi	r22, 0x04	; 4
    1368:	22 0f       	add	r18, r18
    136a:	33 1f       	adc	r19, r19
    136c:	6a 95       	dec	r22
    136e:	e1 f7       	brne	.-8      	; 0x1368 <Timebase_DownCounter_SS_Get_Value+0xe>
    1370:	28 0f       	add	r18, r24
    1372:	39 1f       	adc	r19, r25
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	df 01       	movw	r26, r30
    137a:	91 96       	adiw	r26, 0x21	; 33
    137c:	61 a1       	ldd	r22, Z+33	; 0x21
    137e:	11 96       	adiw	r26, 0x01	; 1
    1380:	7c 91       	ld	r23, X
    1382:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
    1384:	12 96       	adiw	r26, 0x02	; 2
    1386:	8c 91       	ld	r24, X
    1388:	12 97       	sbiw	r26, 0x02	; 2
    138a:	13 96       	adiw	r26, 0x03	; 3
    138c:	9c 91       	ld	r25, X
    138e:	08 95       	ret

00001390 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1390:	e0 91 3f 01 	lds	r30, 0x013F
    1394:	f0 91 40 01 	lds	r31, 0x0140
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9c 01       	movw	r18, r24
    139c:	a4 e0       	ldi	r26, 0x04	; 4
    139e:	22 0f       	add	r18, r18
    13a0:	33 1f       	adc	r19, r19
    13a2:	aa 95       	dec	r26
    13a4:	e1 f7       	brne	.-8      	; 0x139e <Timebase_DownCounter_SS_Set_Value+0xe>
    13a6:	28 0f       	add	r18, r24
    13a8:	39 1f       	adc	r19, r25
    13aa:	e2 0f       	add	r30, r18
    13ac:	f3 1f       	adc	r31, r19
    13ae:	41 a3       	std	Z+33, r20	; 0x21
    13b0:	52 a3       	std	Z+34, r21	; 0x22
    13b2:	63 a3       	std	Z+35, r22	; 0x23
    13b4:	74 a3       	std	Z+36, r23	; 0x24
}
    13b6:	08 95       	ret

000013b8 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    13b8:	e0 91 3f 01 	lds	r30, 0x013F
    13bc:	f0 91 40 01 	lds	r31, 0x0140
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9c 01       	movw	r18, r24
    13c4:	b4 e0       	ldi	r27, 0x04	; 4
    13c6:	22 0f       	add	r18, r18
    13c8:	33 1f       	adc	r19, r19
    13ca:	ba 95       	dec	r27
    13cc:	e1 f7       	brne	.-8      	; 0x13c6 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    13ce:	28 0f       	add	r18, r24
    13d0:	39 1f       	adc	r19, r25
    13d2:	e2 0f       	add	r30, r18
    13d4:	f3 1f       	adc	r31, r19
    13d6:	df 01       	movw	r26, r30
    13d8:	59 96       	adiw	r26, 0x19	; 25
    13da:	61 8d       	ldd	r22, Z+25	; 0x19
    13dc:	11 96       	adiw	r26, 0x01	; 1
    13de:	7c 91       	ld	r23, X
    13e0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
    13e2:	12 96       	adiw	r26, 0x02	; 2
    13e4:	8c 91       	ld	r24, X
    13e6:	12 97       	sbiw	r26, 0x02	; 2
    13e8:	13 96       	adiw	r26, 0x03	; 3
    13ea:	9c 91       	ld	r25, X
    13ec:	08 95       	ret

000013ee <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    13ee:	e0 91 3f 01 	lds	r30, 0x013F
    13f2:	f0 91 40 01 	lds	r31, 0x0140
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 01       	movw	r18, r24
    13fa:	44 e0       	ldi	r20, 0x04	; 4
    13fc:	22 0f       	add	r18, r18
    13fe:	33 1f       	adc	r19, r19
    1400:	4a 95       	dec	r20
    1402:	e1 f7       	brne	.-8      	; 0x13fc <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1404:	28 0f       	add	r18, r24
    1406:	39 1f       	adc	r19, r25
    1408:	e2 0f       	add	r30, r18
    140a:	f3 1f       	adc	r31, r19
    140c:	df 01       	movw	r26, r30
    140e:	5d 96       	adiw	r26, 0x1d	; 29
    1410:	65 8d       	ldd	r22, Z+29	; 0x1d
    1412:	11 96       	adiw	r26, 0x01	; 1
    1414:	7c 91       	ld	r23, X
    1416:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1418:	12 96       	adiw	r26, 0x02	; 2
    141a:	8c 91       	ld	r24, X
    141c:	12 97       	sbiw	r26, 0x02	; 2
    141e:	13 96       	adiw	r26, 0x03	; 3
    1420:	9c 91       	ld	r25, X
    1422:	08 95       	ret

00001424 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1424:	e0 91 3f 01 	lds	r30, 0x013F
    1428:	f0 91 40 01 	lds	r31, 0x0140
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 01       	movw	r18, r24
    1430:	a4 e0       	ldi	r26, 0x04	; 4
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	aa 95       	dec	r26
    1438:	e1 f7       	brne	.-8      	; 0x1432 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    143a:	28 0f       	add	r18, r24
    143c:	39 1f       	adc	r19, r25
    143e:	e2 0f       	add	r30, r18
    1440:	f3 1f       	adc	r31, r19
    1442:	41 8f       	std	Z+25, r20	; 0x19
    1444:	52 8f       	std	Z+26, r21	; 0x1a
    1446:	63 8f       	std	Z+27, r22	; 0x1b
    1448:	74 8f       	std	Z+28, r23	; 0x1c
}
    144a:	08 95       	ret

0000144c <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    144c:	e0 91 3f 01 	lds	r30, 0x013F
    1450:	f0 91 40 01 	lds	r31, 0x0140
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 01       	movw	r18, r24
    1458:	b4 e0       	ldi	r27, 0x04	; 4
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	ba 95       	dec	r27
    1460:	e1 f7       	brne	.-8      	; 0x145a <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1462:	28 0f       	add	r18, r24
    1464:	39 1f       	adc	r19, r25
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	45 8f       	std	Z+29, r20	; 0x1d
    146c:	56 8f       	std	Z+30, r21	; 0x1e
    146e:	67 8f       	std	Z+31, r22	; 0x1f
    1470:	70 a3       	std	Z+32, r23	; 0x20
}
    1472:	08 95       	ret

00001474 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1474:	e0 91 3f 01 	lds	r30, 0x013F
    1478:	f0 91 40 01 	lds	r31, 0x0140
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	9c 01       	movw	r18, r24
    1480:	44 e0       	ldi	r20, 0x04	; 4
    1482:	22 0f       	add	r18, r18
    1484:	33 1f       	adc	r19, r19
    1486:	4a 95       	dec	r20
    1488:	e1 f7       	brne	.-8      	; 0x1482 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    148a:	28 0f       	add	r18, r24
    148c:	39 1f       	adc	r19, r25
    148e:	e2 0f       	add	r30, r18
    1490:	f3 1f       	adc	r31, r19
    1492:	df 01       	movw	r26, r30
    1494:	95 96       	adiw	r26, 0x25	; 37
    1496:	65 a1       	ldd	r22, Z+37	; 0x25
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	7c 91       	ld	r23, X
    149c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
    149e:	12 96       	adiw	r26, 0x02	; 2
    14a0:	8c 91       	ld	r24, X
    14a2:	12 97       	sbiw	r26, 0x02	; 2
    14a4:	13 96       	adiw	r26, 0x03	; 3
    14a6:	9c 91       	ld	r25, X
    14a8:	08 95       	ret

000014aa <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    14aa:	e0 91 3f 01 	lds	r30, 0x013F
    14ae:	f0 91 40 01 	lds	r31, 0x0140
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    14b6:	77 ff       	sbrs	r23, 7
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <Timebase_DownCounter_SS_Set_PeriodValue+0x2e>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    14ba:	c9 01       	movw	r24, r18
    14bc:	b4 e0       	ldi	r27, 0x04	; 4
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	ba 95       	dec	r27
    14c4:	e1 f7       	brne	.-8      	; 0x14be <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    14c6:	82 0f       	add	r24, r18
    14c8:	93 1f       	adc	r25, r19
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	15 a2       	std	Z+37, r1	; 0x25
    14d0:	16 a2       	std	Z+38, r1	; 0x26
    14d2:	17 a2       	std	Z+39, r1	; 0x27
    14d4:	10 a6       	std	Z+40, r1	; 0x28
    14d6:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    14d8:	c9 01       	movw	r24, r18
    14da:	a4 e0       	ldi	r26, 0x04	; 4
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	aa 95       	dec	r26
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    14e4:	82 0f       	add	r24, r18
    14e6:	93 1f       	adc	r25, r19
    14e8:	e8 0f       	add	r30, r24
    14ea:	f9 1f       	adc	r31, r25
    14ec:	45 a3       	std	Z+37, r20	; 0x25
    14ee:	56 a3       	std	Z+38, r21	; 0x26
    14f0:	67 a3       	std	Z+39, r22	; 0x27
    14f2:	70 a7       	std	Z+40, r23	; 0x28
    14f4:	08 95       	ret

000014f6 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    14f6:	e0 91 3f 01 	lds	r30, 0x013F
    14fa:	f0 91 40 01 	lds	r31, 0x0140
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	9c 01       	movw	r18, r24
    1502:	44 e0       	ldi	r20, 0x04	; 4
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	4a 95       	dec	r20
    150a:	e1 f7       	brne	.-8      	; 0x1504 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    150c:	28 0f       	add	r18, r24
    150e:	39 1f       	adc	r19, r25
    1510:	e2 0f       	add	r30, r18
    1512:	f3 1f       	adc	r31, r19
    1514:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1516:	81 70       	andi	r24, 0x01	; 1
    1518:	08 95       	ret

0000151a <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    151a:	e0 91 3f 01 	lds	r30, 0x013F
    151e:	f0 91 40 01 	lds	r31, 0x0140
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	9c 01       	movw	r18, r24
    1526:	54 e0       	ldi	r21, 0x04	; 4
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	5a 95       	dec	r21
    152e:	e1 f7       	brne	.-8      	; 0x1528 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1530:	28 0f       	add	r18, r24
    1532:	39 1f       	adc	r19, r25
    1534:	e2 0f       	add	r30, r18
    1536:	f3 1f       	adc	r31, r19
    1538:	80 8d       	ldd	r24, Z+24	; 0x18
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	80 8f       	std	Z+24, r24	; 0x18
}
    153e:	08 95       	ret

00001540 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1540:	e0 91 3f 01 	lds	r30, 0x013F
    1544:	f0 91 40 01 	lds	r31, 0x0140
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 01       	movw	r18, r24
    154c:	64 e0       	ldi	r22, 0x04	; 4
    154e:	22 0f       	add	r18, r18
    1550:	33 1f       	adc	r19, r19
    1552:	6a 95       	dec	r22
    1554:	e1 f7       	brne	.-8      	; 0x154e <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1556:	28 0f       	add	r18, r24
    1558:	39 1f       	adc	r19, r25
    155a:	e2 0f       	add	r30, r18
    155c:	f3 1f       	adc	r31, r19
    155e:	80 8d       	ldd	r24, Z+24	; 0x18
    1560:	8e 7f       	andi	r24, 0xFE	; 254
    1562:	80 8f       	std	Z+24, r24	; 0x18
}
    1564:	08 95       	ret

00001566 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1566:	e0 91 3f 01 	lds	r30, 0x013F
    156a:	f0 91 40 01 	lds	r31, 0x0140
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	9c 01       	movw	r18, r24
    1572:	74 e0       	ldi	r23, 0x04	; 4
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	7a 95       	dec	r23
    157a:	e1 f7       	brne	.-8      	; 0x1574 <Timebase_DownCounter_SS_Reset+0xe>
    157c:	28 0f       	add	r18, r24
    157e:	39 1f       	adc	r19, r25
    1580:	e2 0f       	add	r30, r18
    1582:	f3 1f       	adc	r31, r19
    1584:	15 8e       	std	Z+29, r1	; 0x1d
    1586:	16 8e       	std	Z+30, r1	; 0x1e
    1588:	17 8e       	std	Z+31, r1	; 0x1f
    158a:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    158c:	11 8e       	std	Z+25, r1	; 0x19
    158e:	12 8e       	std	Z+26, r1	; 0x1a
    1590:	13 8e       	std	Z+27, r1	; 0x1b
    1592:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1594:	11 a2       	std	Z+33, r1	; 0x21
    1596:	12 a2       	std	Z+34, r1	; 0x22
    1598:	13 a2       	std	Z+35, r1	; 0x23
    159a:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    159c:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    159e:	80 7e       	andi	r24, 0xE0	; 224
    15a0:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    15a2:	08 95       	ret

000015a4 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    15a4:	e0 91 3f 01 	lds	r30, 0x013F
    15a8:	f0 91 40 01 	lds	r31, 0x0140
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9c 01       	movw	r18, r24
    15b0:	a4 e0       	ldi	r26, 0x04	; 4
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	aa 95       	dec	r26
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    15ba:	28 0f       	add	r18, r24
    15bc:	39 1f       	adc	r19, r25
    15be:	e2 0f       	add	r30, r18
    15c0:	f3 1f       	adc	r31, r19
    15c2:	15 8e       	std	Z+29, r1	; 0x1d
    15c4:	16 8e       	std	Z+30, r1	; 0x1e
    15c6:	17 8e       	std	Z+31, r1	; 0x1f
    15c8:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    15ca:	11 8e       	std	Z+25, r1	; 0x19
    15cc:	12 8e       	std	Z+26, r1	; 0x1a
    15ce:	13 8e       	std	Z+27, r1	; 0x1b
    15d0:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    15d2:	11 a2       	std	Z+33, r1	; 0x21
    15d4:	12 a2       	std	Z+34, r1	; 0x22
    15d6:	13 a2       	std	Z+35, r1	; 0x23
    15d8:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    15da:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    15dc:	80 7e       	andi	r24, 0xE0	; 224
    15de:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    15e0:	08 95       	ret

000015e2 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    15e2:	e0 91 3f 01 	lds	r30, 0x013F
    15e6:	f0 91 40 01 	lds	r31, 0x0140
    15ea:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    15ec:	9c 01       	movw	r18, r24
    15ee:	b4 e0       	ldi	r27, 0x04	; 4
    15f0:	22 0f       	add	r18, r18
    15f2:	33 1f       	adc	r19, r19
    15f4:	ba 95       	dec	r27
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <Timebase_DownCounter_SS_Start+0xe>
    15f8:	28 0f       	add	r18, r24
    15fa:	39 1f       	adc	r19, r25
    15fc:	e2 0f       	add	r30, r18
    15fe:	f3 1f       	adc	r31, r19
    1600:	90 8d       	ldd	r25, Z+24	; 0x18
    1602:	89 2f       	mov	r24, r25
    1604:	86 95       	lsr	r24
    1606:	8f 70       	andi	r24, 0x0F	; 15
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	19 f0       	breq	.+6      	; 0x1612 <Timebase_DownCounter_SS_Start+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    160c:	91 7e       	andi	r25, 0xE1	; 225
    160e:	92 60       	ori	r25, 0x02	; 2
    1610:	90 8f       	std	Z+24, r25	; 0x18
    1612:	08 95       	ret

00001614 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1614:	e0 91 3f 01 	lds	r30, 0x013F
    1618:	f0 91 40 01 	lds	r31, 0x0140
    161c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    161e:	9c 01       	movw	r18, r24
    1620:	44 e0       	ldi	r20, 0x04	; 4
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	4a 95       	dec	r20
    1628:	e1 f7       	brne	.-8      	; 0x1622 <Timebase_DownCounter_SS_Stop+0xe>
    162a:	28 0f       	add	r18, r24
    162c:	39 1f       	adc	r19, r25
    162e:	e2 0f       	add	r30, r18
    1630:	f3 1f       	adc	r31, r19
    1632:	90 8d       	ldd	r25, Z+24	; 0x18
    1634:	89 2f       	mov	r24, r25
    1636:	86 95       	lsr	r24
    1638:	8f 70       	andi	r24, 0x0F	; 15
    163a:	82 30       	cpi	r24, 0x02	; 2
    163c:	19 f0       	breq	.+6      	; 0x1644 <Timebase_DownCounter_SS_Stop+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    163e:	91 7e       	andi	r25, 0xE1	; 225
    1640:	94 60       	ori	r25, 0x04	; 4
    1642:	90 8f       	std	Z+24, r25	; 0x18
    1644:	08 95       	ret

00001646 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1646:	2f 92       	push	r2
    1648:	3f 92       	push	r3
    164a:	4f 92       	push	r4
    164c:	5f 92       	push	r5
    164e:	6f 92       	push	r6
    1650:	7f 92       	push	r7
    1652:	8f 92       	push	r8
    1654:	9f 92       	push	r9
    1656:	af 92       	push	r10
    1658:	bf 92       	push	r11
    165a:	cf 92       	push	r12
    165c:	df 92       	push	r13
    165e:	ef 92       	push	r14
    1660:	ff 92       	push	r15
    1662:	0f 93       	push	r16
    1664:	1f 93       	push	r17
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <Timebase_DownCounter_SS_Set_Securely+0x26>
    166c:	00 d0       	rcall	.+0      	; 0x166e <Timebase_DownCounter_SS_Set_Securely+0x28>
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	4a 01       	movw	r8, r20
    1674:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1676:	20 91 3f 01 	lds	r18, 0x013F
    167a:	30 91 40 01 	lds	r19, 0x0140
    167e:	3c 83       	std	Y+4, r19	; 0x04
    1680:	2b 83       	std	Y+3, r18	; 0x03
    1682:	a8 2f       	mov	r26, r24
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ba 83       	std	Y+2, r27	; 0x02
    1688:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    168a:	fd 01       	movw	r30, r26
    168c:	64 e0       	ldi	r22, 0x04	; 4
    168e:	ee 0f       	add	r30, r30
    1690:	ff 1f       	adc	r31, r31
    1692:	6a 95       	dec	r22
    1694:	e1 f7       	brne	.-8      	; 0x168e <Timebase_DownCounter_SS_Set_Securely+0x48>
    1696:	ea 0f       	add	r30, r26
    1698:	fb 1f       	adc	r31, r27
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	80 8d       	ldd	r24, Z+24	; 0x18
    16a0:	86 95       	lsr	r24
    16a2:	8f 70       	andi	r24, 0x0F	; 15
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <Timebase_DownCounter_SS_Set_Securely+0x62>
    16a6:	6d c0       	rjmp	.+218    	; 0x1782 <Timebase_DownCounter_SS_Set_Securely+0x13c>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    16a8:	81 a2       	std	Z+33, r8	; 0x21
    16aa:	92 a2       	std	Z+34, r9	; 0x22
    16ac:	a3 a2       	std	Z+35, r10	; 0x23
    16ae:	b4 a2       	std	Z+36, r11	; 0x24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    16b0:	f9 01       	movw	r30, r18
    16b2:	c0 84       	ldd	r12, Z+8	; 0x08
    16b4:	d1 84       	ldd	r13, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16b6:	22 84       	ldd	r2, Z+10	; 0x0a
    16b8:	33 84       	ldd	r3, Z+11	; 0x0b
    16ba:	44 84       	ldd	r4, Z+12	; 0x0c
    16bc:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    16be:	21 81       	ldd	r18, Z+1	; 0x01
    16c0:	32 81       	ldd	r19, Z+2	; 0x02
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	50 e0       	ldi	r21, 0x00	; 0
    16c6:	c5 01       	movw	r24, r10
    16c8:	b4 01       	movw	r22, r8
    16ca:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
    16ce:	7b 01       	movw	r14, r22
    16d0:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    16d2:	ab 81       	ldd	r26, Y+3	; 0x03
    16d4:	bc 81       	ldd	r27, Y+4	; 0x04
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	2d 91       	ld	r18, X+
    16da:	3c 91       	ld	r19, X
    16dc:	12 97       	sbiw	r26, 0x02	; 2
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e0       	ldi	r21, 0x00	; 0
    16e2:	c5 01       	movw	r24, r10
    16e4:	b4 01       	movw	r22, r8
    16e6:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
    16ea:	c9 01       	movw	r24, r18
    16ec:	da 01       	movw	r26, r20
    16ee:	3c 01       	movw	r6, r24
    16f0:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    16f2:	56 01       	movw	r10, r12
    16f4:	cc 24       	eor	r12, r12
    16f6:	dd 24       	eor	r13, r13
    16f8:	ae 0c       	add	r10, r14
    16fa:	bf 1c       	adc	r11, r15
    16fc:	c0 1e       	adc	r12, r16
    16fe:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1700:	eb 81       	ldd	r30, Y+3	; 0x03
    1702:	fc 81       	ldd	r31, Y+4	; 0x04
    1704:	81 81       	ldd	r24, Z+1	; 0x01
    1706:	92 81       	ldd	r25, Z+2	; 0x02
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	a8 16       	cp	r10, r24
    170e:	b9 06       	cpc	r11, r25
    1710:	ca 06       	cpc	r12, r26
    1712:	db 06       	cpc	r13, r27
    1714:	94 f0       	brlt	.+36     	; 0x173a <Timebase_DownCounter_SS_Set_Securely+0xf4>
	  sec_val += 1;
    1716:	08 94       	sec
    1718:	61 1c       	adc	r6, r1
    171a:	71 1c       	adc	r7, r1
    171c:	81 1c       	adc	r8, r1
    171e:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1720:	21 81       	ldd	r18, Z+1	; 0x01
    1722:	32 81       	ldd	r19, Z+2	; 0x02
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	c6 01       	movw	r24, r12
    172a:	b5 01       	movw	r22, r10
    172c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
    1730:	ac 01       	movw	r20, r24
    1732:	cb 01       	movw	r24, r22
    1734:	da 01       	movw	r26, r20
    1736:	5c 01       	movw	r10, r24
    1738:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    173a:	e9 81       	ldd	r30, Y+1	; 0x01
    173c:	fa 81       	ldd	r31, Y+2	; 0x02
    173e:	54 e0       	ldi	r21, 0x04	; 4
    1740:	ee 0f       	add	r30, r30
    1742:	ff 1f       	adc	r31, r31
    1744:	5a 95       	dec	r21
    1746:	e1 f7       	brne	.-8      	; 0x1740 <Timebase_DownCounter_SS_Set_Securely+0xfa>
    1748:	29 81       	ldd	r18, Y+1	; 0x01
    174a:	3a 81       	ldd	r19, Y+2	; 0x02
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	e8 0f       	add	r30, r24
    1756:	f9 1f       	adc	r31, r25
    1758:	26 0c       	add	r2, r6
    175a:	37 1c       	adc	r3, r7
    175c:	48 1c       	adc	r4, r8
    175e:	59 1c       	adc	r5, r9
    1760:	21 8e       	std	Z+25, r2	; 0x19
    1762:	32 8e       	std	Z+26, r3	; 0x1a
    1764:	43 8e       	std	Z+27, r4	; 0x1b
    1766:	54 8e       	std	Z+28, r5	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1768:	a5 8e       	std	Z+29, r10	; 0x1d
    176a:	b6 8e       	std	Z+30, r11	; 0x1e
    176c:	c7 8e       	std	Z+31, r12	; 0x1f
    176e:	d0 a2       	std	Z+32, r13	; 0x20
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1770:	90 8d       	ldd	r25, Z+24	; 0x18
    1772:	89 2f       	mov	r24, r25
    1774:	86 95       	lsr	r24
    1776:	8f 70       	andi	r24, 0x0F	; 15
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	19 f0       	breq	.+6      	; 0x1782 <Timebase_DownCounter_SS_Set_Securely+0x13c>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    177c:	91 7e       	andi	r25, 0xE1	; 225
    177e:	92 60       	ori	r25, 0x02	; 2
    1780:	90 8f       	std	Z+24, r25	; 0x18
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	cf 91       	pop	r28
    178c:	df 91       	pop	r29
    178e:	1f 91       	pop	r17
    1790:	0f 91       	pop	r16
    1792:	ff 90       	pop	r15
    1794:	ef 90       	pop	r14
    1796:	df 90       	pop	r13
    1798:	cf 90       	pop	r12
    179a:	bf 90       	pop	r11
    179c:	af 90       	pop	r10
    179e:	9f 90       	pop	r9
    17a0:	8f 90       	pop	r8
    17a2:	7f 90       	pop	r7
    17a4:	6f 90       	pop	r6
    17a6:	5f 90       	pop	r5
    17a8:	4f 90       	pop	r4
    17aa:	3f 90       	pop	r3
    17ac:	2f 90       	pop	r2
    17ae:	08 95       	ret

000017b0 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    17b0:	e0 91 3f 01 	lds	r30, 0x013F
    17b4:	f0 91 40 01 	lds	r31, 0x0140
    17b8:	a8 2f       	mov	r26, r24
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	9d 01       	movw	r18, r26
    17be:	94 e0       	ldi	r25, 0x04	; 4
    17c0:	22 0f       	add	r18, r18
    17c2:	33 1f       	adc	r19, r19
    17c4:	9a 95       	dec	r25
    17c6:	e1 f7       	brne	.-8      	; 0x17c0 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    17c8:	2a 0f       	add	r18, r26
    17ca:	3b 1f       	adc	r19, r27
    17cc:	e2 0f       	add	r30, r18
    17ce:	f3 1f       	adc	r31, r19
    17d0:	15 8e       	std	Z+29, r1	; 0x1d
    17d2:	16 8e       	std	Z+30, r1	; 0x1e
    17d4:	17 8e       	std	Z+31, r1	; 0x1f
    17d6:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    17d8:	11 8e       	std	Z+25, r1	; 0x19
    17da:	12 8e       	std	Z+26, r1	; 0x1a
    17dc:	13 8e       	std	Z+27, r1	; 0x1b
    17de:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    17e0:	11 a2       	std	Z+33, r1	; 0x21
    17e2:	12 a2       	std	Z+34, r1	; 0x22
    17e4:	13 a2       	std	Z+35, r1	; 0x23
    17e6:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    17e8:	90 8d       	ldd	r25, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    17ea:	90 7e       	andi	r25, 0xE0	; 224
    17ec:	90 8f       	std	Z+24, r25	; 0x18
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    17ee:	0e 94 23 0b 	call	0x1646	; 0x1646 <Timebase_DownCounter_SS_Set_Securely>
} 
    17f2:	08 95       	ret

000017f4 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    17f4:	2f 92       	push	r2
    17f6:	3f 92       	push	r3
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	00 d0       	rcall	.+0      	; 0x181a <Timebase_DownCounter_SS_Update+0x26>
    181a:	00 d0       	rcall	.+0      	; 0x181c <Timebase_DownCounter_SS_Update+0x28>
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1820:	20 91 3f 01 	lds	r18, 0x013F
    1824:	30 91 40 01 	lds	r19, 0x0140
    1828:	3c 83       	std	Y+4, r19	; 0x04
    182a:	2b 83       	std	Y+3, r18	; 0x03
    182c:	c8 2e       	mov	r12, r24
    182e:	dd 24       	eor	r13, r13
    1830:	c6 01       	movw	r24, r12
    1832:	44 e0       	ldi	r20, 0x04	; 4
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	4a 95       	dec	r20
    183a:	e1 f7       	brne	.-8      	; 0x1834 <Timebase_DownCounter_SS_Update+0x40>
    183c:	8c 0d       	add	r24, r12
    183e:	9d 1d       	adc	r25, r13
    1840:	82 0f       	add	r24, r18
    1842:	93 1f       	adc	r25, r19
    1844:	9a 83       	std	Y+2, r25	; 0x02
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	fc 01       	movw	r30, r24
    184a:	80 8d       	ldd	r24, Z+24	; 0x18
    184c:	86 95       	lsr	r24
    184e:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	09 f0       	breq	.+2      	; 0x1856 <Timebase_DownCounter_SS_Update+0x62>
    1854:	56 c0       	rjmp	.+172    	; 0x1902 <Timebase_DownCounter_SS_Update+0x10e>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1856:	f9 01       	movw	r30, r18
    1858:	80 85       	ldd	r24, Z+8	; 0x08
    185a:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    185c:	4c 01       	movw	r8, r24
    185e:	aa 24       	eor	r10, r10
    1860:	bb 24       	eor	r11, r11
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1862:	82 85       	ldd	r24, Z+10	; 0x0a
    1864:	93 85       	ldd	r25, Z+11	; 0x0b
    1866:	a4 85       	ldd	r26, Z+12	; 0x0c
    1868:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    186a:	e9 81       	ldd	r30, Y+1	; 0x01
    186c:	fa 81       	ldd	r31, Y+2	; 0x02
    186e:	e1 8c       	ldd	r14, Z+25	; 0x19
    1870:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1872:	03 8d       	ldd	r16, Z+27	; 0x1b
    1874:	14 8d       	ldd	r17, Z+28	; 0x1c
    1876:	e8 1a       	sub	r14, r24
    1878:	f9 0a       	sbc	r15, r25
    187a:	0a 0b       	sbc	r16, r26
    187c:	1b 0b       	sbc	r17, r27
    187e:	17 ff       	sbrs	r17, 7
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <Timebase_DownCounter_SS_Update+0x94>
    1882:	ee 24       	eor	r14, r14
    1884:	ff 24       	eor	r15, r15
    1886:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    1888:	eb 81       	ldd	r30, Y+3	; 0x03
    188a:	fc 81       	ldd	r31, Y+4	; 0x04
    188c:	21 81       	ldd	r18, Z+1	; 0x01
    188e:	32 81       	ldd	r19, Z+2	; 0x02
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	c8 01       	movw	r24, r16
    1896:	b7 01       	movw	r22, r14
    1898:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__mulsi3>
	temp_s += temp_ss;
    189c:	f6 01       	movw	r30, r12
    189e:	24 e0       	ldi	r18, 0x04	; 4
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	2a 95       	dec	r18
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <Timebase_DownCounter_SS_Update+0xac>
    18a8:	ec 0d       	add	r30, r12
    18aa:	fd 1d       	adc	r31, r13
    18ac:	2b 81       	ldd	r18, Y+3	; 0x03
    18ae:	3c 81       	ldd	r19, Y+4	; 0x04
    18b0:	e2 0f       	add	r30, r18
    18b2:	f3 1f       	adc	r31, r19
    18b4:	25 8d       	ldd	r18, Z+29	; 0x1d
    18b6:	36 8d       	ldd	r19, Z+30	; 0x1e
    18b8:	47 8d       	ldd	r20, Z+31	; 0x1f
    18ba:	50 a1       	ldd	r21, Z+32	; 0x20
    18bc:	28 19       	sub	r18, r8
    18be:	39 09       	sbc	r19, r9
    18c0:	4a 09       	sbc	r20, r10
    18c2:	5b 09       	sbc	r21, r11
    18c4:	26 0f       	add	r18, r22
    18c6:	37 1f       	adc	r19, r23
    18c8:	48 1f       	adc	r20, r24
    18ca:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    18cc:	21 a3       	std	Z+33, r18	; 0x21
    18ce:	32 a3       	std	Z+34, r19	; 0x22
    18d0:	43 a3       	std	Z+35, r20	; 0x23
    18d2:	54 a3       	std	Z+36, r21	; 0x24
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    18d4:	12 16       	cp	r1, r18
    18d6:	13 06       	cpc	r1, r19
    18d8:	14 06       	cpc	r1, r20
    18da:	15 06       	cpc	r1, r21
    18dc:	0c f4       	brge	.+2      	; 0x18e0 <Timebase_DownCounter_SS_Update+0xec>
    18de:	4b c0       	rjmp	.+150    	; 0x1976 <Timebase_DownCounter_SS_Update+0x182>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    18e0:	15 8e       	std	Z+29, r1	; 0x1d
    18e2:	16 8e       	std	Z+30, r1	; 0x1e
    18e4:	17 8e       	std	Z+31, r1	; 0x1f
    18e6:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    18e8:	11 8e       	std	Z+25, r1	; 0x19
    18ea:	12 8e       	std	Z+26, r1	; 0x1a
    18ec:	13 8e       	std	Z+27, r1	; 0x1b
    18ee:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    18f0:	11 a2       	std	Z+33, r1	; 0x21
    18f2:	12 a2       	std	Z+34, r1	; 0x22
    18f4:	13 a2       	std	Z+35, r1	; 0x23
    18f6:	14 a2       	std	Z+36, r1	; 0x24
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    18f8:	80 8d       	ldd	r24, Z+24	; 0x18
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    18fa:	80 7e       	andi	r24, 0xE0	; 224
    18fc:	88 60       	ori	r24, 0x08	; 8
    18fe:	80 8f       	std	Z+24, r24	; 0x18
    1900:	3a c0       	rjmp	.+116    	; 0x1976 <Timebase_DownCounter_SS_Update+0x182>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	c1 f5       	brne	.+112    	; 0x1976 <Timebase_DownCounter_SS_Update+0x182>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	60 84       	ldd	r6, Z+8	; 0x08
    190c:	71 84       	ldd	r7, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    190e:	e2 84       	ldd	r14, Z+10	; 0x0a
    1910:	f3 84       	ldd	r15, Z+11	; 0x0b
    1912:	04 85       	ldd	r16, Z+12	; 0x0c
    1914:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1916:	e9 81       	ldd	r30, Y+1	; 0x01
    1918:	fa 81       	ldd	r31, Y+2	; 0x02
    191a:	21 a0       	ldd	r2, Z+33	; 0x21
    191c:	32 a0       	ldd	r3, Z+34	; 0x22
    191e:	43 a0       	ldd	r4, Z+35	; 0x23
    1920:	54 a0       	ldd	r5, Z+36	; 0x24
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    1922:	eb 81       	ldd	r30, Y+3	; 0x03
    1924:	fc 81       	ldd	r31, Y+4	; 0x04
    1926:	21 81       	ldd	r18, Z+1	; 0x01
    1928:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    192a:	a1 80       	ldd	r10, Z+1	; 0x01
    192c:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	c2 01       	movw	r24, r4
    1934:	b1 01       	movw	r22, r2
    1936:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
    193a:	e2 0e       	add	r14, r18
    193c:	f3 1e       	adc	r15, r19
    193e:	04 1f       	adc	r16, r20
    1940:	15 1f       	adc	r17, r21
    1942:	e9 81       	ldd	r30, Y+1	; 0x01
    1944:	fa 81       	ldd	r31, Y+2	; 0x02
    1946:	e1 8e       	std	Z+25, r14	; 0x19
    1948:	f2 8e       	std	Z+26, r15	; 0x1a
    194a:	03 8f       	std	Z+27, r16	; 0x1b
    194c:	14 8f       	std	Z+28, r17	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    194e:	cc 24       	eor	r12, r12
    1950:	dd 24       	eor	r13, r13
    1952:	c2 01       	movw	r24, r4
    1954:	b1 01       	movw	r22, r2
    1956:	a6 01       	movw	r20, r12
    1958:	95 01       	movw	r18, r10
    195a:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <__divmodsi4>
    195e:	88 24       	eor	r8, r8
    1960:	99 24       	eor	r9, r9
    1962:	66 0e       	add	r6, r22
    1964:	77 1e       	adc	r7, r23
    1966:	88 1e       	adc	r8, r24
    1968:	99 1e       	adc	r9, r25
    196a:	e9 81       	ldd	r30, Y+1	; 0x01
    196c:	fa 81       	ldd	r31, Y+2	; 0x02
    196e:	65 8e       	std	Z+29, r6	; 0x1d
    1970:	76 8e       	std	Z+30, r7	; 0x1e
    1972:	87 8e       	std	Z+31, r8	; 0x1f
    1974:	90 a2       	std	Z+32, r9	; 0x20
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	bf 90       	pop	r11
    1990:	af 90       	pop	r10
    1992:	9f 90       	pop	r9
    1994:	8f 90       	pop	r8
    1996:	7f 90       	pop	r7
    1998:	6f 90       	pop	r6
    199a:	5f 90       	pop	r5
    199c:	4f 90       	pop	r4
    199e:	3f 90       	pop	r3
    19a0:	2f 90       	pop	r2
    19a2:	08 95       	ret

000019a4 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	e0 91 3f 01 	lds	r30, 0x013F
    19aa:	f0 91 40 01 	lds	r31, 0x0140
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 01       	movw	r18, r24
    19b2:	54 e0       	ldi	r21, 0x04	; 4
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	5a 95       	dec	r21
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <Timebase_DownCounter_SS_Expired+0x10>
    19bc:	28 0f       	add	r18, r24
    19be:	39 1f       	adc	r19, r25
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	80 8d       	ldd	r24, Z+24	; 0x18
    19c6:	86 95       	lsr	r24
    19c8:	8f 70       	andi	r24, 0x0F	; 15
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <Timebase_DownCounter_SS_Expired+0x2c>
    19ce:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    19d0:	84 2f       	mov	r24, r20
    19d2:	08 95       	ret

000019d4 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    19d4:	e0 91 3f 01 	lds	r30, 0x013F
    19d8:	f0 91 40 01 	lds	r31, 0x0140
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    19de:	9c 01       	movw	r18, r24
    19e0:	64 e0       	ldi	r22, 0x04	; 4
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	6a 95       	dec	r22
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <Timebase_DownCounter_SS_Expired_Event+0xe>
    19ea:	28 0f       	add	r18, r24
    19ec:	39 1f       	adc	r19, r25
    19ee:	e2 0f       	add	r30, r18
    19f0:	f3 1f       	adc	r31, r19
    19f2:	80 8d       	ldd	r24, Z+24	; 0x18
    19f4:	86 95       	lsr	r24
    19f6:	8f 70       	andi	r24, 0x0F	; 15
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	11 f0       	breq	.+4      	; 0x1a00 <Timebase_DownCounter_SS_Expired_Event+0x2c>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1a00:	15 8e       	std	Z+29, r1	; 0x1d
    1a02:	16 8e       	std	Z+30, r1	; 0x1e
    1a04:	17 8e       	std	Z+31, r1	; 0x1f
    1a06:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1a08:	11 8e       	std	Z+25, r1	; 0x19
    1a0a:	12 8e       	std	Z+26, r1	; 0x1a
    1a0c:	13 8e       	std	Z+27, r1	; 0x1b
    1a0e:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1a10:	11 a2       	std	Z+33, r1	; 0x21
    1a12:	12 a2       	std	Z+34, r1	; 0x22
    1a14:	13 a2       	std	Z+35, r1	; 0x23
    1a16:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1a18:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1a1a:	80 7e       	andi	r24, 0xE0	; 224
    1a1c:	80 8f       	std	Z+24, r24	; 0x18
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1a20:	08 95       	ret

00001a22 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1a26:	c0 91 3f 01 	lds	r28, 0x013F
    1a2a:	d0 91 40 01 	lds	r29, 0x0140
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    1a32:	f9 01       	movw	r30, r18
    1a34:	a4 e0       	ldi	r26, 0x04	; 4
    1a36:	ee 0f       	add	r30, r30
    1a38:	ff 1f       	adc	r31, r31
    1a3a:	aa 95       	dec	r26
    1a3c:	e1 f7       	brne	.-8      	; 0x1a36 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    1a3e:	e2 0f       	add	r30, r18
    1a40:	f3 1f       	adc	r31, r19
    1a42:	ec 0f       	add	r30, r28
    1a44:	fd 1f       	adc	r31, r29
    1a46:	80 8d       	ldd	r24, Z+24	; 0x18
    1a48:	80 fd       	sbrc	r24, 0
    1a4a:	20 c0       	rjmp	.+64     	; 0x1a8c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1a4c:	81 a1       	ldd	r24, Z+33	; 0x21
    1a4e:	92 a1       	ldd	r25, Z+34	; 0x22
    1a50:	a3 a1       	ldd	r26, Z+35	; 0x23
    1a52:	b4 a1       	ldd	r27, Z+36	; 0x24
    1a54:	84 1b       	sub	r24, r20
    1a56:	95 0b       	sbc	r25, r21
    1a58:	a6 0b       	sbc	r26, r22
    1a5a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1a5c:	b7 ff       	sbrs	r27, 7
    1a5e:	05 c0       	rjmp	.+10     	; 0x1a6a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x48>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1a60:	15 a2       	std	Z+37, r1	; 0x25
    1a62:	16 a2       	std	Z+38, r1	; 0x26
    1a64:	17 a2       	std	Z+39, r1	; 0x27
    1a66:	10 a6       	std	Z+40, r1	; 0x28
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1a6a:	85 a3       	std	Z+37, r24	; 0x25
    1a6c:	96 a3       	std	Z+38, r25	; 0x26
    1a6e:	a7 a3       	std	Z+39, r26	; 0x27
    1a70:	b0 a7       	std	Z+40, r27	; 0x28
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1a72:	f9 01       	movw	r30, r18
    1a74:	74 e0       	ldi	r23, 0x04	; 4
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	7a 95       	dec	r23
    1a7c:	e1 f7       	brne	.-8      	; 0x1a76 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    1a7e:	e2 0f       	add	r30, r18
    1a80:	f3 1f       	adc	r31, r19
    1a82:	ec 0f       	add	r30, r28
    1a84:	fd 1f       	adc	r31, r29
    1a86:	80 8d       	ldd	r24, Z+24	; 0x18
    1a88:	81 60       	ori	r24, 0x01	; 1
    1a8a:	80 8f       	std	Z+24, r24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	08 95       	ret

00001a92 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1a92:	e0 91 3f 01 	lds	r30, 0x013F
    1a96:	f0 91 40 01 	lds	r31, 0x0140
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1a9c:	9c 01       	movw	r18, r24
    1a9e:	b4 e0       	ldi	r27, 0x04	; 4
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	ba 95       	dec	r27
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    1aa8:	28 0f       	add	r18, r24
    1aaa:	39 1f       	adc	r19, r25
    1aac:	e2 0f       	add	r30, r18
    1aae:	f3 1f       	adc	r31, r19
    1ab0:	21 a1       	ldd	r18, Z+33	; 0x21
    1ab2:	32 a1       	ldd	r19, Z+34	; 0x22
    1ab4:	43 a1       	ldd	r20, Z+35	; 0x23
    1ab6:	54 a1       	ldd	r21, Z+36	; 0x24
    1ab8:	85 a1       	ldd	r24, Z+37	; 0x25
    1aba:	96 a1       	ldd	r25, Z+38	; 0x26
    1abc:	a7 a1       	ldd	r26, Z+39	; 0x27
    1abe:	b0 a5       	ldd	r27, Z+40	; 0x28
    1ac0:	28 1b       	sub	r18, r24
    1ac2:	39 0b       	sbc	r19, r25
    1ac4:	4a 0b       	sbc	r20, r26
    1ac6:	5b 0b       	sbc	r21, r27
    1ac8:	57 ff       	sbrs	r21, 7
    1aca:	04 c0       	rjmp	.+8      	; 0x1ad4 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x42>
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1ad4:	b9 01       	movw	r22, r18
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	08 95       	ret

00001ada <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1ada:	cf 93       	push	r28
    1adc:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1ade:	c0 91 3f 01 	lds	r28, 0x013F
    1ae2:	d0 91 40 01 	lds	r29, 0x0140
    1ae6:	68 2f       	mov	r22, r24
    1ae8:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1aea:	fb 01       	movw	r30, r22
    1aec:	44 e0       	ldi	r20, 0x04	; 4
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	4a 95       	dec	r20
    1af4:	e1 f7       	brne	.-8      	; 0x1aee <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    1af6:	e6 0f       	add	r30, r22
    1af8:	f7 1f       	adc	r31, r23
    1afa:	ec 0f       	add	r30, r28
    1afc:	fd 1f       	adc	r31, r29
    1afe:	21 a1       	ldd	r18, Z+33	; 0x21
    1b00:	32 a1       	ldd	r19, Z+34	; 0x22
    1b02:	43 a1       	ldd	r20, Z+35	; 0x23
    1b04:	54 a1       	ldd	r21, Z+36	; 0x24
    1b06:	85 a1       	ldd	r24, Z+37	; 0x25
    1b08:	96 a1       	ldd	r25, Z+38	; 0x26
    1b0a:	a7 a1       	ldd	r26, Z+39	; 0x27
    1b0c:	b0 a5       	ldd	r27, Z+40	; 0x28
    1b0e:	28 1b       	sub	r18, r24
    1b10:	39 0b       	sbc	r19, r25
    1b12:	4a 0b       	sbc	r20, r26
    1b14:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1b16:	57 fd       	sbrc	r21, 7
    1b18:	07 c0       	rjmp	.+14     	; 0x1b28 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1b1a:	21 15       	cp	r18, r1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	41 05       	cpc	r20, r1
    1b20:	51 05       	cpc	r21, r1
    1b22:	11 f0       	breq	.+4      	; 0x1b28 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	10 c0       	rjmp	.+32     	; 0x1b48 <Timebase_DownCounter_SS_Period_Value_Expired+0x6e>
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	34 e0       	ldi	r19, 0x04	; 4
    1b2e:	88 0f       	add	r24, r24
    1b30:	99 1f       	adc	r25, r25
    1b32:	3a 95       	dec	r19
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <Timebase_DownCounter_SS_Period_Value_Expired+0x54>
    1b36:	86 0f       	add	r24, r22
    1b38:	97 1f       	adc	r25, r23
    1b3a:	c8 0f       	add	r28, r24
    1b3c:	d9 1f       	adc	r29, r25
    1b3e:	88 8d       	ldd	r24, Y+24	; 0x18
    1b40:	80 ff       	sbrs	r24, 0
    1b42:	21 e0       	ldi	r18, 0x01	; 1
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1b48:	82 2f       	mov	r24, r18
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1b50:	1f 93       	push	r17
    1b52:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    1b54:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <Timebase_DownCounter_SS_Period_Value_Expired>
    1b58:	81 30       	cpi	r24, 0x01	; 1
    1b5a:	11 f0       	breq	.+4      	; 0x1b60 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x38>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1b60:	e0 91 3f 01 	lds	r30, 0x013F
    1b64:	f0 91 40 01 	lds	r31, 0x0140
    1b68:	21 2f       	mov	r18, r17
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	c9 01       	movw	r24, r18
    1b6e:	54 e0       	ldi	r21, 0x04	; 4
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	5a 95       	dec	r21
    1b76:	e1 f7       	brne	.-8      	; 0x1b70 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    1b78:	82 0f       	add	r24, r18
    1b7a:	93 1f       	adc	r25, r19
    1b7c:	e8 0f       	add	r30, r24
    1b7e:	f9 1f       	adc	r31, r25
    1b80:	80 8d       	ldd	r24, Z+24	; 0x18
    1b82:	8e 7f       	andi	r24, 0xFE	; 254
    1b84:	80 8f       	std	Z+24, r24	; 0x18
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1b88:	1f 91       	pop	r17
    1b8a:	08 95       	ret

00001b8c <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    1b8c:	1f 93       	push	r17
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1b90:	81 2f       	mov	r24, r17
    1b92:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1b96:	1f 5f       	subi	r17, 0xFF	; 255
    1b98:	15 30       	cpi	r17, 0x05	; 5
    1b9a:	d1 f7       	brne	.-12     	; 0x1b90 <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    1b9c:	1f 91       	pop	r17
    1b9e:	08 95       	ret

00001ba0 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1ba0:	40 91 3f 01 	lds	r20, 0x013F
    1ba4:	50 91 40 01 	lds	r21, 0x0140
    1ba8:	da 01       	movw	r26, r20
    1baa:	59 96       	adiw	r26, 0x19	; 25
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	14 96       	adiw	r26, 0x04	; 4
    1bb2:	1d 92       	st	X+, r1
    1bb4:	1d 92       	st	X+, r1
    1bb6:	1d 92       	st	X+, r1
    1bb8:	1c 92       	st	X, r1
    1bba:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1bbc:	1d 92       	st	X+, r1
    1bbe:	1d 92       	st	X+, r1
    1bc0:	1d 92       	st	X+, r1
    1bc2:	1c 92       	st	X, r1
    1bc4:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1bc6:	18 96       	adiw	r26, 0x08	; 8
    1bc8:	1d 92       	st	X+, r1
    1bca:	1d 92       	st	X+, r1
    1bcc:	1d 92       	st	X+, r1
    1bce:	1c 92       	st	X, r1
    1bd0:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1bd2:	f9 01       	movw	r30, r18
    1bd4:	64 e0       	ldi	r22, 0x04	; 4
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	6a 95       	dec	r22
    1bdc:	e1 f7       	brne	.-8      	; 0x1bd6 <Timebase_DownCounter_SS_Reset_All+0x36>
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	e4 0f       	add	r30, r20
    1be4:	f5 1f       	adc	r31, r21
    1be6:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1be8:	80 7e       	andi	r24, 0xE0	; 224
    1bea:	80 8f       	std	Z+24, r24	; 0x18
    1bec:	2f 5f       	subi	r18, 0xFF	; 255
    1bee:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf0:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1bf2:	25 30       	cpi	r18, 0x05	; 5
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	e1 f6       	brne	.-72     	; 0x1bb0 <Timebase_DownCounter_SS_Reset_All+0x10>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1bf8:	08 95       	ret

00001bfa <Timebase_Reset>:
void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1bfa:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1bfe:	0e 94 59 09 	call	0x12b2	; 0x12b2 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    1c02:	08 95       	ret

00001c04 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1c0a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1c0e:	c8 01       	movw	r24, r16
    1c10:	0e 94 85 03 	call	0x70a	; 0x70a <Timebase_Timer_Config>
  Timebase_Reset();
    1c14:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <Timebase_Reset>
}
    1c18:	1f 91       	pop	r17
    1c1a:	0f 91       	pop	r16
    1c1c:	08 95       	ret

00001c1e <Timebase_Main_Loop_Executables>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Update_All();
    1c1e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <Timebase_DownCounter_SS_Update_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1c22:	0e 94 4f 09 	call	0x129e	; 0x129e <Timebase_DownCounter_Update_All>
  #endif
}
    1c26:	08 95       	ret

00001c28 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1c28:	e0 91 3f 01 	lds	r30, 0x013F
    1c2c:	f0 91 40 01 	lds	r31, 0x0140
    1c30:	80 85       	ldd	r24, Z+8	; 0x08
    1c32:	91 85       	ldd	r25, Z+9	; 0x09
    1c34:	01 96       	adiw	r24, 0x01	; 1
    1c36:	91 87       	std	Z+9, r25	; 0x09
    1c38:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1c3a:	83 81       	ldd	r24, Z+3	; 0x03
    1c3c:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1c3e:	80 85       	ldd	r24, Z+8	; 0x08
    1c40:	91 85       	ldd	r25, Z+9	; 0x09
    1c42:	61 81       	ldd	r22, Z+1	; 0x01
    1c44:	72 81       	ldd	r23, Z+2	; 0x02
    1c46:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodhi4>
    1c4a:	89 2b       	or	r24, r25
    1c4c:	69 f4       	brne	.+26     	; 0x1c68 <Timebase_ISR_Executables+0x40>
    Timebase->Time.Seconds++;
    1c4e:	82 85       	ldd	r24, Z+10	; 0x0a
    1c50:	93 85       	ldd	r25, Z+11	; 0x0b
    1c52:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c54:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c56:	01 96       	adiw	r24, 0x01	; 1
    1c58:	a1 1d       	adc	r26, r1
    1c5a:	b1 1d       	adc	r27, r1
    1c5c:	82 87       	std	Z+10, r24	; 0x0a
    1c5e:	93 87       	std	Z+11, r25	; 0x0b
    1c60:	a4 87       	std	Z+12, r26	; 0x0c
    1c62:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    1c64:	11 86       	std	Z+9, r1	; 0x09
    1c66:	10 86       	std	Z+8, r1	; 0x08
    1c68:	08 95       	ret

00001c6a <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    1c6a:	1f 92       	push	r1
    1c6c:	0f 92       	push	r0
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	0f 92       	push	r0
    1c72:	11 24       	eor	r1, r1
    1c74:	2f 93       	push	r18
    1c76:	3f 93       	push	r19
    1c78:	4f 93       	push	r20
    1c7a:	5f 93       	push	r21
    1c7c:	6f 93       	push	r22
    1c7e:	7f 93       	push	r23
    1c80:	8f 93       	push	r24
    1c82:	9f 93       	push	r25
    1c84:	af 93       	push	r26
    1c86:	bf 93       	push	r27
    1c88:	ef 93       	push	r30
    1c8a:	ff 93       	push	r31
  PORTD|=(1<<5);
    1c8c:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    1c8e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    1c92:	5d 98       	cbi	0x0b, 5	; 11
}
    1c94:	ff 91       	pop	r31
    1c96:	ef 91       	pop	r30
    1c98:	bf 91       	pop	r27
    1c9a:	af 91       	pop	r26
    1c9c:	9f 91       	pop	r25
    1c9e:	8f 91       	pop	r24
    1ca0:	7f 91       	pop	r23
    1ca2:	6f 91       	pop	r22
    1ca4:	5f 91       	pop	r21
    1ca6:	4f 91       	pop	r20
    1ca8:	3f 91       	pop	r19
    1caa:	2f 91       	pop	r18
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__mulsi3>:
    1cb6:	62 9f       	mul	r22, r18
    1cb8:	d0 01       	movw	r26, r0
    1cba:	73 9f       	mul	r23, r19
    1cbc:	f0 01       	movw	r30, r0
    1cbe:	82 9f       	mul	r24, r18
    1cc0:	e0 0d       	add	r30, r0
    1cc2:	f1 1d       	adc	r31, r1
    1cc4:	64 9f       	mul	r22, r20
    1cc6:	e0 0d       	add	r30, r0
    1cc8:	f1 1d       	adc	r31, r1
    1cca:	92 9f       	mul	r25, r18
    1ccc:	f0 0d       	add	r31, r0
    1cce:	83 9f       	mul	r24, r19
    1cd0:	f0 0d       	add	r31, r0
    1cd2:	74 9f       	mul	r23, r20
    1cd4:	f0 0d       	add	r31, r0
    1cd6:	65 9f       	mul	r22, r21
    1cd8:	f0 0d       	add	r31, r0
    1cda:	99 27       	eor	r25, r25
    1cdc:	72 9f       	mul	r23, r18
    1cde:	b0 0d       	add	r27, r0
    1ce0:	e1 1d       	adc	r30, r1
    1ce2:	f9 1f       	adc	r31, r25
    1ce4:	63 9f       	mul	r22, r19
    1ce6:	b0 0d       	add	r27, r0
    1ce8:	e1 1d       	adc	r30, r1
    1cea:	f9 1f       	adc	r31, r25
    1cec:	bd 01       	movw	r22, r26
    1cee:	cf 01       	movw	r24, r30
    1cf0:	11 24       	eor	r1, r1
    1cf2:	08 95       	ret

00001cf4 <__udivmodhi4>:
    1cf4:	aa 1b       	sub	r26, r26
    1cf6:	bb 1b       	sub	r27, r27
    1cf8:	51 e1       	ldi	r21, 0x11	; 17
    1cfa:	07 c0       	rjmp	.+14     	; 0x1d0a <__udivmodhi4_ep>

00001cfc <__udivmodhi4_loop>:
    1cfc:	aa 1f       	adc	r26, r26
    1cfe:	bb 1f       	adc	r27, r27
    1d00:	a6 17       	cp	r26, r22
    1d02:	b7 07       	cpc	r27, r23
    1d04:	10 f0       	brcs	.+4      	; 0x1d0a <__udivmodhi4_ep>
    1d06:	a6 1b       	sub	r26, r22
    1d08:	b7 0b       	sbc	r27, r23

00001d0a <__udivmodhi4_ep>:
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	5a 95       	dec	r21
    1d10:	a9 f7       	brne	.-22     	; 0x1cfc <__udivmodhi4_loop>
    1d12:	80 95       	com	r24
    1d14:	90 95       	com	r25
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	08 95       	ret

00001d1c <__udivmodsi4>:
    1d1c:	a1 e2       	ldi	r26, 0x21	; 33
    1d1e:	1a 2e       	mov	r1, r26
    1d20:	aa 1b       	sub	r26, r26
    1d22:	bb 1b       	sub	r27, r27
    1d24:	fd 01       	movw	r30, r26
    1d26:	0d c0       	rjmp	.+26     	; 0x1d42 <__udivmodsi4_ep>

00001d28 <__udivmodsi4_loop>:
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	ee 1f       	adc	r30, r30
    1d2e:	ff 1f       	adc	r31, r31
    1d30:	a2 17       	cp	r26, r18
    1d32:	b3 07       	cpc	r27, r19
    1d34:	e4 07       	cpc	r30, r20
    1d36:	f5 07       	cpc	r31, r21
    1d38:	20 f0       	brcs	.+8      	; 0x1d42 <__udivmodsi4_ep>
    1d3a:	a2 1b       	sub	r26, r18
    1d3c:	b3 0b       	sbc	r27, r19
    1d3e:	e4 0b       	sbc	r30, r20
    1d40:	f5 0b       	sbc	r31, r21

00001d42 <__udivmodsi4_ep>:
    1d42:	66 1f       	adc	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	1a 94       	dec	r1
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <__udivmodsi4_loop>
    1d4e:	60 95       	com	r22
    1d50:	70 95       	com	r23
    1d52:	80 95       	com	r24
    1d54:	90 95       	com	r25
    1d56:	9b 01       	movw	r18, r22
    1d58:	ac 01       	movw	r20, r24
    1d5a:	bd 01       	movw	r22, r26
    1d5c:	cf 01       	movw	r24, r30
    1d5e:	08 95       	ret

00001d60 <__divmodsi4>:
    1d60:	97 fb       	bst	r25, 7
    1d62:	09 2e       	mov	r0, r25
    1d64:	05 26       	eor	r0, r21
    1d66:	0e d0       	rcall	.+28     	; 0x1d84 <__divmodsi4_neg1>
    1d68:	57 fd       	sbrc	r21, 7
    1d6a:	04 d0       	rcall	.+8      	; 0x1d74 <__divmodsi4_neg2>
    1d6c:	d7 df       	rcall	.-82     	; 0x1d1c <__udivmodsi4>
    1d6e:	0a d0       	rcall	.+20     	; 0x1d84 <__divmodsi4_neg1>
    1d70:	00 1c       	adc	r0, r0
    1d72:	38 f4       	brcc	.+14     	; 0x1d82 <__divmodsi4_exit>

00001d74 <__divmodsi4_neg2>:
    1d74:	50 95       	com	r21
    1d76:	40 95       	com	r20
    1d78:	30 95       	com	r19
    1d7a:	21 95       	neg	r18
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d80:	5f 4f       	sbci	r21, 0xFF	; 255

00001d82 <__divmodsi4_exit>:
    1d82:	08 95       	ret

00001d84 <__divmodsi4_neg1>:
    1d84:	f6 f7       	brtc	.-4      	; 0x1d82 <__divmodsi4_exit>
    1d86:	90 95       	com	r25
    1d88:	80 95       	com	r24
    1d8a:	70 95       	com	r23
    1d8c:	61 95       	neg	r22
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	8f 4f       	sbci	r24, 0xFF	; 255
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	08 95       	ret

00001d96 <_exit>:
    1d96:	f8 94       	cli

00001d98 <__stop_program>:
    1d98:	ff cf       	rjmp	.-2      	; 0x1d98 <__stop_program>
