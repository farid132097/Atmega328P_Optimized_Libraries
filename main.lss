
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001e02  00001e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  0080012e  0080012e  00001ec4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e11  00000000  00000000  00001f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002abe  00000000  00000000  00002d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e6  00000000  00000000  000057f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017a0  00000000  00000000  00005dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  0000757c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000100d  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fa6  00000000  00000000  00008c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00009bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 c1 0d 	jmp	0x1b82	; 0x1b82 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e0       	ldi	r30, 0x02	; 2
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ad 30       	cpi	r26, 0x0D	; 13
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 c6 02 	call	0x58c	; 0x58c <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 af 0a 	call	0x155e	; 0x155e <Timebase_DownCounter_SS_Set_Securely>
	
	/*UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSec(0));
	UART_Transmit_Space();
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSubSec(0));
	UART_Transmit_Space();*/
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	0e 94 39 09 	call	0x1272	; 0x1272 <Timebase_DownCounter_SS_Get_Value>
      ec:	0e 94 33 02 	call	0x466	; 0x466 <UART_Transmit_Number>
	UART_Transmit_New_Line();
      f0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <UART_Transmit_New_Line>
	Timebase_Timer_Delay_SubSeconds(100);
      f4:	84 e6       	ldi	r24, 0x64	; 100
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <Timebase_Timer_Delay_SubSeconds>
	
	//Add update req flag
	PORTD |= (1<<6);
      fc:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
      fe:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     102:	5e 98       	cbi	0x0b, 6	; 11
     104:	f0 cf       	rjmp	.-32     	; 0xe6 <main+0x40>

00000106 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     106:	10 92 2e 01 	sts	0x012E, r1
     10a:	ef e2       	ldi	r30, 0x2F	; 47
     10c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     10e:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	e7 33       	cpi	r30, 0x37	; 55
     114:	f8 07       	cpc	r31, r24
     116:	d9 f7       	brne	.-10     	; 0x10e <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     118:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     11a:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     11c:	80 e2       	ldi	r24, 0x20	; 32
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	93 a3       	std	Z+35, r25	; 0x23
     122:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     124:	15 a2       	std	Z+37, r1	; 0x25
     126:	14 a2       	std	Z+36, r1	; 0x24
     128:	20 e0       	ldi	r18, 0x00	; 0
     12a:	04 c0       	rjmp	.+8      	; 0x134 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     12c:	e2 5d       	subi	r30, 0xD2	; 210
     12e:	fe 4f       	sbci	r31, 0xFE	; 254
     130:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     132:	2f 5f       	subi	r18, 0xFF	; 255
     134:	80 91 59 01 	lds	r24, 0x0159
     138:	90 91 5a 01 	lds	r25, 0x015A
     13c:	e2 2f       	mov	r30, r18
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	e8 17       	cp	r30, r24
     142:	f9 07       	cpc	r31, r25
     144:	98 f3       	brcs	.-26     	; 0x12c <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     146:	08 95       	ret

00000148 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     148:	08 95       	ret

0000014a <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     14a:	08 95       	ret

0000014c <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     14c:	9b 01       	movw	r18, r22
     14e:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     150:	60 e6       	ldi	r22, 0x60	; 96
     152:	73 ee       	ldi	r23, 0xE3	; 227
     154:	86 e1       	ldi	r24, 0x16	; 22
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodsi4>
     15c:	21 50       	subi	r18, 0x01	; 1
     15e:	30 40       	sbci	r19, 0x00	; 0
     160:	40 40       	sbci	r20, 0x00	; 0
     162:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     164:	e0 ec       	ldi	r30, 0xC0	; 192
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	82 60       	ori	r24, 0x02	; 2
     16c:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     16e:	bb 27       	eor	r27, r27
     170:	a5 2f       	mov	r26, r21
     172:	94 2f       	mov	r25, r20
     174:	83 2f       	mov	r24, r19
     176:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     17a:	20 93 c4 00 	sts	0x00C4, r18
}
     17e:	08 95       	ret

00000180 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     180:	e1 ec       	ldi	r30, 0xC1	; 193
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	88 60       	ori	r24, 0x08	; 8
     188:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     18a:	86 e0       	ldi	r24, 0x06	; 6
     18c:	80 93 c2 00 	sts	0x00C2, r24
}
     190:	08 95       	ret

00000192 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     192:	e1 ec       	ldi	r30, 0xC1	; 193
     194:	f0 e0       	ldi	r31, 0x00	; 0
     196:	80 81       	ld	r24, Z
     198:	80 61       	ori	r24, 0x10	; 16
     19a:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     19c:	86 e0       	ldi	r24, 0x06	; 6
     19e:	80 93 c2 00 	sts	0x00C2, r24
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	80 68       	ori	r24, 0x80	; 128
     1ac:	80 83       	st	Z, r24
  sei();
     1ae:	78 94       	sei
}
     1b0:	08 95       	ret

000001b2 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1b2:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1b4:	80 91 c0 00 	lds	r24, 0x00C0
     1b8:	85 ff       	sbrs	r24, 5
     1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1bc:	90 93 c6 00 	sts	0x00C6, r25
}
     1c0:	08 95       	ret

000001c2 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	0f 92       	push	r0
     1c8:	cd b7       	in	r28, 0x3d	; 61
     1ca:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1cc:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1ce:	80 91 c0 00 	lds	r24, 0x00C0
     1d2:	84 ff       	sbrs	r24, 4
     1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1d6:	80 91 c6 00 	lds	r24, 0x00C6
     1da:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	08 c0       	rjmp	.+16     	; 0x1f0 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1e0:	80 91 c0 00 	lds	r24, 0x00C0
     1e4:	83 ff       	sbrs	r24, 3
     1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <UART_Receive_Byte+0x34>
    val=UDR0;
     1e8:	80 91 c6 00 	lds	r24, 0x00C6
     1ec:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	80 93 2e 01 	sts	0x012E, r24
     1f4:	05 c0       	rjmp	.+10     	; 0x200 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     1f6:	80 91 c6 00 	lds	r24, 0x00C6
     1fa:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     1fc:	10 92 2e 01 	sts	0x012E, r1
  }
  return val;
     200:	89 81       	ldd	r24, Y+1	; 0x01
}
     202:	0f 90       	pop	r0
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	08 95       	ret

0000020a <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     20a:	80 91 38 01 	lds	r24, 0x0138
}
     20e:	08 95       	ret

00000210 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     210:	10 92 38 01 	sts	0x0138, r1
}
     214:	08 95       	ret

00000216 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ab 01       	movw	r20, r22
     21e:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     220:	4f 3f       	cpi	r20, 0xFF	; 255
     222:	51 05       	cpc	r21, r1
     224:	61 05       	cpc	r22, r1
     226:	71 05       	cpc	r23, r1
     228:	09 f0       	breq	.+2      	; 0x22c <UART_Transmit_Byte_Hex+0x16>
     22a:	28 f4       	brcc	.+10     	; 0x236 <UART_Transmit_Byte_Hex+0x20>
     22c:	e8 e0       	ldi	r30, 0x08	; 8
     22e:	f0 e0       	ldi	r31, 0x00	; 0
     230:	c2 e0       	ldi	r28, 0x02	; 2
     232:	d0 e0       	ldi	r29, 0x00	; 0
     234:	11 c0       	rjmp	.+34     	; 0x258 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     236:	40 30       	cpi	r20, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	58 07       	cpc	r21, r24
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	68 07       	cpc	r22, r24
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	78 07       	cpc	r23, r24
     244:	28 f0       	brcs	.+10     	; 0x250 <UART_Transmit_Byte_Hex+0x3a>
     246:	e0 e2       	ldi	r30, 0x20	; 32
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	c8 e0       	ldi	r28, 0x08	; 8
     24c:	d0 e0       	ldi	r29, 0x00	; 0
     24e:	04 c0       	rjmp	.+8      	; 0x258 <UART_Transmit_Byte_Hex+0x42>
     250:	e0 e1       	ldi	r30, 0x10	; 16
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c4 e0       	ldi	r28, 0x04	; 4
     256:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     258:	80 91 c0 00 	lds	r24, 0x00C0
     25c:	85 ff       	sbrs	r24, 5
     25e:	fc cf       	rjmp	.-8      	; 0x258 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     260:	80 e3       	ldi	r24, 0x30	; 48
     262:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     266:	80 91 c0 00 	lds	r24, 0x00C0
     26a:	85 ff       	sbrs	r24, 5
     26c:	fc cf       	rjmp	.-8      	; 0x266 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     26e:	88 e7       	ldi	r24, 0x78	; 120
     270:	80 93 c6 00 	sts	0x00C6, r24
     274:	10 e0       	ldi	r17, 0x00	; 0
     276:	1f c0       	rjmp	.+62     	; 0x2b6 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     278:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     27a:	db 01       	movw	r26, r22
     27c:	ca 01       	movw	r24, r20
     27e:	0e 2e       	mov	r0, r30
     280:	04 c0       	rjmp	.+8      	; 0x28a <UART_Transmit_Byte_Hex+0x74>
     282:	b6 95       	lsr	r27
     284:	a7 95       	ror	r26
     286:	97 95       	ror	r25
     288:	87 95       	ror	r24
     28a:	0a 94       	dec	r0
     28c:	d2 f7       	brpl	.-12     	; 0x282 <UART_Transmit_Byte_Hex+0x6c>
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	8f 70       	andi	r24, 0x0F	; 15
     292:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     294:	8a 30       	cpi	r24, 0x0A	; 10
     296:	91 05       	cpc	r25, r1
     298:	20 f0       	brcs	.+8      	; 0x2a2 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     29a:	9c 01       	movw	r18, r24
     29c:	29 5c       	subi	r18, 0xC9	; 201
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2a2:	9c 01       	movw	r18, r24
     2a4:	20 5d       	subi	r18, 0xD0	; 208
     2a6:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2a8:	80 91 c0 00 	lds	r24, 0x00C0
     2ac:	85 ff       	sbrs	r24, 5
     2ae:	fc cf       	rjmp	.-8      	; 0x2a8 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2b0:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2b4:	1f 5f       	subi	r17, 0xFF	; 255
     2b6:	81 2f       	mov	r24, r17
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	8c 17       	cp	r24, r28
     2bc:	9d 07       	cpc	r25, r29
     2be:	e0 f2       	brcs	.-72     	; 0x278 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	08 95       	ret

000002c8 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	ab 01       	movw	r20, r22
     2da:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2dc:	4f 3f       	cpi	r20, 0xFF	; 255
     2de:	51 05       	cpc	r21, r1
     2e0:	61 05       	cpc	r22, r1
     2e2:	71 05       	cpc	r23, r1
     2e4:	09 f0       	breq	.+2      	; 0x2e8 <UART_Transmit_Byte_Bin+0x20>
     2e6:	10 f4       	brcc	.+4      	; 0x2ec <UART_Transmit_Byte_Bin+0x24>
     2e8:	97 e0       	ldi	r25, 0x07	; 7
     2ea:	0b c0       	rjmp	.+22     	; 0x302 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	80 e0       	ldi	r24, 0x00	; 0
     2f0:	58 07       	cpc	r21, r24
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	68 07       	cpc	r22, r24
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	78 07       	cpc	r23, r24
     2fa:	10 f0       	brcs	.+4      	; 0x300 <UART_Transmit_Byte_Bin+0x38>
     2fc:	9f e1       	ldi	r25, 0x1F	; 31
     2fe:	01 c0       	rjmp	.+2      	; 0x302 <UART_Transmit_Byte_Bin+0x3a>
     300:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     302:	80 91 c0 00 	lds	r24, 0x00C0
     306:	85 ff       	sbrs	r24, 5
     308:	fc cf       	rjmp	.-8      	; 0x302 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     30a:	80 e3       	ldi	r24, 0x30	; 48
     30c:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     310:	80 91 c0 00 	lds	r24, 0x00C0
     314:	85 ff       	sbrs	r24, 5
     316:	fc cf       	rjmp	.-8      	; 0x310 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     318:	82 e6       	ldi	r24, 0x62	; 98
     31a:	80 93 c6 00 	sts	0x00C6, r24
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     322:	e9 2f       	mov	r30, r25
     324:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     326:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     328:	11 e3       	ldi	r17, 0x31	; 49
     32a:	ef 01       	movw	r28, r30
     32c:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     32e:	cf 01       	movw	r24, r30
     330:	82 1b       	sub	r24, r18
     332:	93 0b       	sbc	r25, r19
     334:	6a 01       	movw	r12, r20
     336:	7b 01       	movw	r14, r22
     338:	04 c0       	rjmp	.+8      	; 0x342 <UART_Transmit_Byte_Bin+0x7a>
     33a:	f6 94       	lsr	r15
     33c:	e7 94       	ror	r14
     33e:	d7 94       	ror	r13
     340:	c7 94       	ror	r12
     342:	8a 95       	dec	r24
     344:	d2 f7       	brpl	.-12     	; 0x33a <UART_Transmit_Byte_Bin+0x72>
     346:	d7 01       	movw	r26, r14
     348:	c6 01       	movw	r24, r12
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	90 70       	andi	r25, 0x00	; 0
     34e:	89 2b       	or	r24, r25
     350:	39 f0       	breq	.+14     	; 0x360 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     352:	80 91 c0 00 	lds	r24, 0x00C0
     356:	85 ff       	sbrs	r24, 5
     358:	fc cf       	rjmp	.-8      	; 0x352 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     35a:	10 93 c6 00 	sts	0x00C6, r17
     35e:	06 c0       	rjmp	.+12     	; 0x36c <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     360:	80 91 c0 00 	lds	r24, 0x00C0
     364:	85 ff       	sbrs	r24, 5
     366:	fc cf       	rjmp	.-8      	; 0x360 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     368:	00 93 c6 00 	sts	0x00C6, r16
     36c:	2f 5f       	subi	r18, 0xFF	; 255
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     370:	2c 17       	cp	r18, r28
     372:	3d 07       	cpc	r19, r29
     374:	e1 f6       	brne	.-72     	; 0x32e <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	08 95       	ret

00000388 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     388:	ac 01       	movw	r20, r24
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	07 c0       	rjmp	.+14     	; 0x39c <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     38e:	80 91 c0 00 	lds	r24, 0x00C0
     392:	85 ff       	sbrs	r24, 5
     394:	fc cf       	rjmp	.-8      	; 0x38e <UART_Transmit_Text+0x6>
  UDR0=val;
     396:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     39a:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     39c:	fa 01       	movw	r30, r20
     39e:	e2 0f       	add	r30, r18
     3a0:	f1 1d       	adc	r31, r1
     3a2:	e0 81       	ld	r30, Z
     3a4:	ee 23       	and	r30, r30
     3a6:	99 f7       	brne	.-26     	; 0x38e <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3a8:	08 95       	ret

000003aa <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
}
     3b2:	08 95       	ret

000003b4 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
}
     3bc:	08 95       	ret

000003be <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3be:	bf 92       	push	r11
     3c0:	cf 92       	push	r12
     3c2:	df 92       	push	r13
     3c4:	ef 92       	push	r14
     3c6:	ff 92       	push	r15
     3c8:	0f 93       	push	r16
     3ca:	1f 93       	push	r17
     3cc:	6b 01       	movw	r12, r22
     3ce:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3d0:	61 15       	cp	r22, r1
     3d2:	71 05       	cpc	r23, r1
     3d4:	81 05       	cpc	r24, r1
     3d6:	91 05       	cpc	r25, r1
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3da:	10 92 2f 01 	sts	0x012F, r1
    UART.InputNumberDigits=1;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	80 93 37 01 	sts	0x0137, r24
     3e4:	23 c0       	rjmp	.+70     	; 0x42c <UART_Determine_Digit_Numbers+0x6e>
     3e6:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     3e8:	0b 2d       	mov	r16, r11
     3ea:	10 e0       	ldi	r17, 0x00	; 0
     3ec:	02 5d       	subi	r16, 0xD2	; 210
     3ee:	1e 4f       	sbci	r17, 0xFE	; 254
     3f0:	c7 01       	movw	r24, r14
     3f2:	b6 01       	movw	r22, r12
     3f4:	2a e0       	ldi	r18, 0x0A	; 10
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e0       	ldi	r20, 0x00	; 0
     3fa:	50 e0       	ldi	r21, 0x00	; 0
     3fc:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodsi4>
     400:	f8 01       	movw	r30, r16
     402:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     404:	c7 01       	movw	r24, r14
     406:	b6 01       	movw	r22, r12
     408:	2a e0       	ldi	r18, 0x0A	; 10
     40a:	30 e0       	ldi	r19, 0x00	; 0
     40c:	40 e0       	ldi	r20, 0x00	; 0
     40e:	50 e0       	ldi	r21, 0x00	; 0
     410:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodsi4>
     414:	c9 01       	movw	r24, r18
     416:	da 01       	movw	r26, r20
     418:	6c 01       	movw	r12, r24
     41a:	7d 01       	movw	r14, r26
      i++;
     41c:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     41e:	c1 14       	cp	r12, r1
     420:	d1 04       	cpc	r13, r1
     422:	e1 04       	cpc	r14, r1
     424:	f1 04       	cpc	r15, r1
     426:	01 f7       	brne	.-64     	; 0x3e8 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     428:	b0 92 37 01 	sts	0x0137, r11
  }
}
     42c:	1f 91       	pop	r17
     42e:	0f 91       	pop	r16
     430:	ff 90       	pop	r15
     432:	ef 90       	pop	r14
     434:	df 90       	pop	r13
     436:	cf 90       	pop	r12
     438:	bf 90       	pop	r11
     43a:	08 95       	ret

0000043c <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     43c:	e0 91 37 01 	lds	r30, 0x0137
     440:	0f c0       	rjmp	.+30     	; 0x460 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     442:	2e 2f       	mov	r18, r30
     444:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     446:	e2 2f       	mov	r30, r18
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e2 5d       	subi	r30, 0xD2	; 210
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     450:	80 91 c0 00 	lds	r24, 0x00C0
     454:	85 ff       	sbrs	r24, 5
     456:	fc cf       	rjmp	.-8      	; 0x450 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     458:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     45a:	90 93 c6 00 	sts	0x00C6, r25
     45e:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	ee 23       	and	r30, r30
     462:	79 f7       	brne	.-34     	; 0x442 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     464:	08 95       	ret

00000466 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     466:	9b 01       	movw	r18, r22
     468:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     46a:	97 ff       	sbrs	r25, 7
     46c:	0e c0       	rjmp	.+28     	; 0x48a <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     46e:	80 91 c0 00 	lds	r24, 0x00C0
     472:	85 ff       	sbrs	r24, 5
     474:	fc cf       	rjmp	.-8      	; 0x46e <UART_Transmit_Number+0x8>
  UDR0=val;
     476:	8d e2       	ldi	r24, 0x2D	; 45
     478:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     47c:	50 95       	com	r21
     47e:	40 95       	com	r20
     480:	30 95       	com	r19
     482:	21 95       	neg	r18
     484:	3f 4f       	sbci	r19, 0xFF	; 255
     486:	4f 4f       	sbci	r20, 0xFF	; 255
     488:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     48a:	ca 01       	movw	r24, r20
     48c:	b9 01       	movw	r22, r18
     48e:	0e 94 df 01 	call	0x3be	; 0x3be <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     492:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_Transmit_Number_Digits>
}
     496:	08 95       	ret

00000498 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     498:	fc 01       	movw	r30, r24
     49a:	e2 5d       	subi	r30, 0xD2	; 210
     49c:	fe 4f       	sbci	r31, 0xFE	; 254
     49e:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4a0:	08 95       	ret

000004a2 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4a2:	20 91 5b 01 	lds	r18, 0x015B
     4a6:	30 91 5c 01 	lds	r19, 0x015C
}
     4aa:	c9 01       	movw	r24, r18
     4ac:	08 95       	ret

000004ae <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4ae:	10 92 2e 01 	sts	0x012E, r1
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4b8:	f9 01       	movw	r30, r18
     4ba:	e2 5d       	subi	r30, 0xD2	; 210
     4bc:	fe 4f       	sbci	r31, 0xFE	; 254
     4be:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4c0:	2f 5f       	subi	r18, 0xFF	; 255
     4c2:	3f 4f       	sbci	r19, 0xFF	; 255
     4c4:	80 91 59 01 	lds	r24, 0x0159
     4c8:	90 91 5a 01 	lds	r25, 0x015A
     4cc:	28 17       	cp	r18, r24
     4ce:	39 07       	cpc	r19, r25
     4d0:	98 f3       	brcs	.-26     	; 0x4b8 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4d2:	10 92 5c 01 	sts	0x015C, r1
     4d6:	10 92 5b 01 	sts	0x015B, r1
  #endif
}
     4da:	08 95       	ret

000004dc <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4dc:	df 93       	push	r29
     4de:	cf 93       	push	r28
     4e0:	0f 92       	push	r0
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     4e6:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     4e8:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <UART_Receive_Byte>
     4ec:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     4ee:	80 91 2e 01 	lds	r24, 0x012E
     4f2:	88 23       	and	r24, r24
     4f4:	19 f5       	brne	.+70     	; 0x53c <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	80 93 38 01 	sts	0x0138, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     4fc:	e0 91 5b 01 	lds	r30, 0x015B
     500:	f0 91 5c 01 	lds	r31, 0x015C
     504:	89 81       	ldd	r24, Y+1	; 0x01
     506:	e2 5d       	subi	r30, 0xD2	; 210
     508:	fe 4f       	sbci	r31, 0xFE	; 254
     50a:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     50c:	80 91 5b 01 	lds	r24, 0x015B
     510:	90 91 5c 01 	lds	r25, 0x015C
     514:	01 96       	adiw	r24, 0x01	; 1
     516:	90 93 5c 01 	sts	0x015C, r25
     51a:	80 93 5b 01 	sts	0x015B, r24

    if(UART.BufferIndex>=UART.BufferSize){
     51e:	20 91 5b 01 	lds	r18, 0x015B
     522:	30 91 5c 01 	lds	r19, 0x015C
     526:	80 91 59 01 	lds	r24, 0x0159
     52a:	90 91 5a 01 	lds	r25, 0x015A
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	20 f0       	brcs	.+8      	; 0x53c <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     534:	10 92 5c 01 	sts	0x015C, r1
     538:	10 92 5b 01 	sts	0x015B, r1
    }
  }
}
     53c:	0f 90       	pop	r0
     53e:	cf 91       	pop	r28
     540:	df 91       	pop	r29
     542:	08 95       	ret

00000544 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	4f 93       	push	r20
     554:	5f 93       	push	r21
     556:	6f 93       	push	r22
     558:	7f 93       	push	r23
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     566:	0e 94 6e 02 	call	0x4dc	; 0x4dc <UART_Interrupt_Service_Routine>
}
     56a:	ff 91       	pop	r31
     56c:	ef 91       	pop	r30
     56e:	bf 91       	pop	r27
     570:	af 91       	pop	r26
     572:	9f 91       	pop	r25
     574:	8f 91       	pop	r24
     576:	7f 91       	pop	r23
     578:	6f 91       	pop	r22
     57a:	5f 91       	pop	r21
     57c:	4f 91       	pop	r20
     57e:	3f 91       	pop	r19
     580:	2f 91       	pop	r18
     582:	0f 90       	pop	r0
     584:	0f be       	out	0x3f, r0	; 63
     586:	0f 90       	pop	r0
     588:	1f 90       	pop	r1
     58a:	18 95       	reti

0000058c <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     58c:	ef 92       	push	r14
     58e:	ff 92       	push	r15
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	7b 01       	movw	r14, r22
     596:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     598:	0e 94 83 00 	call	0x106	; 0x106 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     59c:	c8 01       	movw	r24, r16
     59e:	b7 01       	movw	r22, r14
     5a0:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5a4:	e1 ec       	ldi	r30, 0xC1	; 193
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	88 60       	ori	r24, 0x08	; 8
     5ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ae:	a2 ec       	ldi	r26, 0xC2	; 194
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	96 e0       	ldi	r25, 0x06	; 6
     5b4:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5b6:	80 81       	ld	r24, Z
     5b8:	80 61       	ori	r24, 0x10	; 16
     5ba:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5bc:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5be:	80 81       	ld	r24, Z
     5c0:	80 68       	ori	r24, 0x80	; 128
     5c2:	80 83       	st	Z, r24
  sei();
     5c4:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5c6:	0e 94 57 02 	call	0x4ae	; 0x4ae <UART_Flush_Buffer>
}
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	ff 90       	pop	r15
     5d0:	ef 90       	pop	r14
     5d2:	08 95       	ret

000005d4 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5d4:	8f e5       	ldi	r24, 0x5F	; 95
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	90 93 5e 01 	sts	0x015E, r25
     5dc:	80 93 5d 01 	sts	0x015D, r24
  Timebase->Config.TimerType.Value = 0;
     5e0:	10 92 5f 01 	sts	0x015F, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5e4:	80 91 5f 01 	lds	r24, 0x015F
     5e8:	84 60       	ori	r24, 0x04	; 4
     5ea:	80 93 5f 01 	sts	0x015F, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5ee:	80 91 5f 01 	lds	r24, 0x015F
     5f2:	87 70       	andi	r24, 0x07	; 7
     5f4:	80 93 5f 01 	sts	0x015F, r24
  Timebase->Config.UpdateRate = 1;
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	90 93 61 01 	sts	0x0161, r25
     600:	80 93 60 01 	sts	0x0160, r24
  Timebase->Time.OVFUpdateValue=0;
     604:	10 92 62 01 	sts	0x0162, r1
  Timebase->Time.SubSeconds = 0;
     608:	10 92 68 01 	sts	0x0168, r1
     60c:	10 92 67 01 	sts	0x0167, r1
  Timebase->Time.Seconds = 0;
     610:	10 92 69 01 	sts	0x0169, r1
     614:	10 92 6a 01 	sts	0x016A, r1
     618:	10 92 6b 01 	sts	0x016B, r1
     61c:	10 92 6c 01 	sts	0x016C, r1
  Timebase->Time.LastSample = 0;
     620:	10 92 63 01 	sts	0x0163, r1
     624:	10 92 64 01 	sts	0x0164, r1
     628:	10 92 65 01 	sts	0x0165, r1
     62c:	10 92 66 01 	sts	0x0166, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     630:	10 92 6d 01 	sts	0x016D, r1
     634:	10 92 6e 01 	sts	0x016E, r1
     638:	10 92 6f 01 	sts	0x016F, r1
     63c:	10 92 70 01 	sts	0x0170, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     640:	10 92 71 01 	sts	0x0171, r1
     644:	10 92 72 01 	sts	0x0172, r1
     648:	10 92 73 01 	sts	0x0173, r1
     64c:	10 92 74 01 	sts	0x0174, r1
	Timebase->Time.Status = 0;
     650:	10 92 75 01 	sts	0x0175, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     654:	10 92 76 01 	sts	0x0176, r1
     658:	ad ec       	ldi	r26, 0xCD	; 205
     65a:	b1 e0       	ldi	r27, 0x01	; 1
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     660:	2d e0       	ldi	r18, 0x0D	; 13
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	82 9f       	mul	r24, r18
     666:	f0 01       	movw	r30, r0
     668:	83 9f       	mul	r24, r19
     66a:	f0 0d       	add	r31, r0
     66c:	92 9f       	mul	r25, r18
     66e:	f0 0d       	add	r31, r0
     670:	11 24       	eor	r1, r1
     672:	e4 53       	subi	r30, 0x34	; 52
     674:	fe 4f       	sbci	r31, 0xFE	; 254
     676:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     678:	1d 92       	st	X+, r1
     67a:	1d 92       	st	X+, r1
     67c:	1d 92       	st	X+, r1
     67e:	1c 92       	st	X, r1
     680:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     682:	14 96       	adiw	r26, 0x04	; 4
     684:	1d 92       	st	X+, r1
     686:	1d 92       	st	X+, r1
     688:	1d 92       	st	X+, r1
     68a:	1c 92       	st	X, r1
     68c:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     68e:	18 96       	adiw	r26, 0x08	; 8
     690:	1d 92       	st	X+, r1
     692:	1d 92       	st	X+, r1
     694:	1d 92       	st	X+, r1
     696:	1c 92       	st	X, r1
     698:	1b 97       	sbiw	r26, 0x0b	; 11
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     69e:	85 30       	cpi	r24, 0x05	; 5
     6a0:	91 05       	cpc	r25, r1
     6a2:	01 f7       	brne	.-64     	; 0x664 <Timebase_Struct_Init+0x90>
     6a4:	a8 e7       	ldi	r26, 0x78	; 120
     6a6:	b1 e0       	ldi	r27, 0x01	; 1
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     6ac:	fc 01       	movw	r30, r24
     6ae:	24 e0       	ldi	r18, 0x04	; 4
     6b0:	ee 0f       	add	r30, r30
     6b2:	ff 1f       	adc	r31, r31
     6b4:	2a 95       	dec	r18
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <Timebase_Struct_Init+0xdc>
     6b8:	e8 0f       	add	r30, r24
     6ba:	f9 1f       	adc	r31, r25
     6bc:	e1 5a       	subi	r30, 0xA1	; 161
     6be:	fe 4f       	sbci	r31, 0xFE	; 254
     6c0:	10 8e       	std	Z+24, r1	; 0x18
    Timebase->DownCounterSS[i].EndValueSec = 0;
     6c2:	1d 92       	st	X+, r1
     6c4:	1d 92       	st	X+, r1
     6c6:	1d 92       	st	X+, r1
     6c8:	1c 92       	st	X, r1
     6ca:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     6cc:	14 96       	adiw	r26, 0x04	; 4
     6ce:	1d 92       	st	X+, r1
     6d0:	1d 92       	st	X+, r1
     6d2:	1d 92       	st	X+, r1
     6d4:	1c 92       	st	X, r1
     6d6:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     6d8:	18 96       	adiw	r26, 0x08	; 8
     6da:	1d 92       	st	X+, r1
     6dc:	1d 92       	st	X+, r1
     6de:	1d 92       	st	X+, r1
     6e0:	1c 92       	st	X, r1
     6e2:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     6e4:	1c 96       	adiw	r26, 0x0c	; 12
     6e6:	1d 92       	st	X+, r1
     6e8:	1d 92       	st	X+, r1
     6ea:	1d 92       	st	X+, r1
     6ec:	1c 92       	st	X, r1
     6ee:	1f 97       	sbiw	r26, 0x0f	; 15
     6f0:	01 96       	adiw	r24, 0x01	; 1
     6f2:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     6f4:	85 30       	cpi	r24, 0x05	; 5
     6f6:	91 05       	cpc	r25, r1
     6f8:	c9 f6       	brne	.-78     	; 0x6ac <Timebase_Struct_Init+0xd8>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     6fa:	08 95       	ret

000006fc <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     6fc:	7f 92       	push	r7
     6fe:	8f 92       	push	r8
     700:	9f 92       	push	r9
     702:	af 92       	push	r10
     704:	bf 92       	push	r11
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	cd b7       	in	r28, 0x3d	; 61
     718:	de b7       	in	r29, 0x3e	; 62
     71a:	2a 97       	sbiw	r28, 0x0a	; 10
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	de bf       	out	0x3e, r29	; 62
     722:	0f be       	out	0x3f, r0	; 63
     724:	cd bf       	out	0x3d, r28	; 61
     726:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     728:	c0 90 5d 01 	lds	r12, 0x015D
     72c:	d0 90 5e 01 	lds	r13, 0x015E
     730:	f6 01       	movw	r30, r12
     732:	80 81       	ld	r24, Z
     734:	80 ff       	sbrs	r24, 0
     736:	31 c0       	rjmp	.+98     	; 0x79a <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     738:	01 30       	cpi	r16, 0x01	; 1
     73a:	11 05       	cpc	r17, r1
     73c:	11 f4       	brne	.+4      	; 0x742 <Timebase_Timer_Config+0x46>
     73e:	96 e0       	ldi	r25, 0x06	; 6
     740:	19 c0       	rjmp	.+50     	; 0x774 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     742:	02 30       	cpi	r16, 0x02	; 2
     744:	11 05       	cpc	r17, r1
     746:	11 f4       	brne	.+4      	; 0x74c <Timebase_Timer_Config+0x50>
     748:	95 e0       	ldi	r25, 0x05	; 5
     74a:	14 c0       	rjmp	.+40     	; 0x774 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     74c:	04 30       	cpi	r16, 0x04	; 4
     74e:	11 05       	cpc	r17, r1
     750:	11 f4       	brne	.+4      	; 0x756 <Timebase_Timer_Config+0x5a>
     752:	94 e0       	ldi	r25, 0x04	; 4
     754:	0f c0       	rjmp	.+30     	; 0x774 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     756:	08 30       	cpi	r16, 0x08	; 8
     758:	11 05       	cpc	r17, r1
     75a:	11 f4       	brne	.+4      	; 0x760 <Timebase_Timer_Config+0x64>
     75c:	93 e0       	ldi	r25, 0x03	; 3
     75e:	0a c0       	rjmp	.+20     	; 0x774 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     760:	00 31       	cpi	r16, 0x10	; 16
     762:	11 05       	cpc	r17, r1
     764:	11 f4       	brne	.+4      	; 0x76a <Timebase_Timer_Config+0x6e>
     766:	92 e0       	ldi	r25, 0x02	; 2
     768:	05 c0       	rjmp	.+10     	; 0x774 <Timebase_Timer_Config+0x78>
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	00 32       	cpi	r16, 0x20	; 32
     76e:	11 05       	cpc	r17, r1
     770:	09 f4       	brne	.+2      	; 0x774 <Timebase_Timer_Config+0x78>
     772:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     774:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     776:	84 b7       	in	r24, 0x34	; 52
     778:	87 7f       	andi	r24, 0xF7	; 247
     77a:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     77c:	80 91 60 00 	lds	r24, 0x0060
     780:	80 68       	ori	r24, 0x80	; 128
     782:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     786:	80 91 60 00 	lds	r24, 0x0060
     78a:	88 61       	ori	r24, 0x18	; 24
     78c:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     790:	90 64       	ori	r25, 0x40	; 64
     792:	90 93 60 00 	sts	0x0060, r25
    sei();
     796:	78 94       	sei
     798:	67 c0       	rjmp	.+206    	; 0x868 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     79a:	81 fd       	sbrc	r24, 1
     79c:	65 c0       	rjmp	.+202    	; 0x868 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     79e:	82 ff       	sbrs	r24, 2
     7a0:	63 c0       	rjmp	.+198    	; 0x868 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     7a2:	de 01       	movw	r26, r28
     7a4:	11 96       	adiw	r26, 0x01	; 1
     7a6:	e3 e2       	ldi	r30, 0x23	; 35
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	8a e0       	ldi	r24, 0x0A	; 10
     7ac:	01 90       	ld	r0, Z+
     7ae:	0d 92       	st	X+, r0
     7b0:	81 50       	subi	r24, 0x01	; 1
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     7b4:	98 01       	movw	r18, r16
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	7b e1       	ldi	r23, 0x1B	; 27
     7be:	87 eb       	ldi	r24, 0xB7	; 183
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
     7c6:	72 2e       	mov	r7, r18
     7c8:	83 2e       	mov	r8, r19
     7ca:	94 2e       	mov	r9, r20
     7cc:	e5 2e       	mov	r14, r21
     7ce:	5e 01       	movw	r10, r28
     7d0:	08 94       	sec
     7d2:	a1 1c       	adc	r10, r1
     7d4:	b1 1c       	adc	r11, r1
     7d6:	c9 01       	movw	r24, r18
     7d8:	da 01       	movw	r26, r20
     7da:	9c 01       	movw	r18, r24
     7dc:	ad 01       	movw	r20, r26
     7de:	ff 24       	eor	r15, r15
     7e0:	14 c0       	rjmp	.+40     	; 0x80a <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     7e2:	f5 01       	movw	r30, r10
     7e4:	21 91       	ld	r18, Z+
     7e6:	31 91       	ld	r19, Z+
     7e8:	5f 01       	movw	r10, r30
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e0       	ldi	r21, 0x00	; 0
     7ee:	67 2d       	mov	r22, r7
     7f0:	78 2d       	mov	r23, r8
     7f2:	89 2d       	mov	r24, r9
     7f4:	9e 2d       	mov	r25, r14
     7f6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
     7fa:	c9 01       	movw	r24, r18
     7fc:	da 01       	movw	r26, r20
     7fe:	9c 01       	movw	r18, r24
     800:	ad 01       	movw	r20, r26
	  clock_div_index++;
     802:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     804:	f5 e0       	ldi	r31, 0x05	; 5
     806:	ff 16       	cp	r15, r31
     808:	31 f0       	breq	.+12     	; 0x816 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     80a:	2f 3f       	cpi	r18, 0xFF	; 255
     80c:	31 05       	cpc	r19, r1
     80e:	41 05       	cpc	r20, r1
     810:	51 05       	cpc	r21, r1
     812:	09 f0       	breq	.+2      	; 0x816 <Timebase_Timer_Config+0x11a>
     814:	34 f7       	brge	.-52     	; 0x7e2 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     816:	8f 2d       	mov	r24, r15
     818:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     81a:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     81c:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     81e:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     822:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     824:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     826:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     828:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     82a:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     82c:	88 23       	and	r24, r24
     82e:	11 f4       	brne	.+4      	; 0x834 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0f c0       	rjmp	.+30     	; 0x852 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	11 f4       	brne	.+4      	; 0x83c <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	0b c0       	rjmp	.+22     	; 0x852 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	11 f4       	brne	.+4      	; 0x844 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	07 c0       	rjmp	.+14     	; 0x852 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     844:	83 30       	cpi	r24, 0x03	; 3
     846:	11 f4       	brne	.+4      	; 0x84c <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	03 c0       	rjmp	.+6      	; 0x852 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     84c:	84 30       	cpi	r24, 0x04	; 4
     84e:	11 f4       	brne	.+4      	; 0x854 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     850:	85 e0       	ldi	r24, 0x05	; 5
     852:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     854:	82 2f       	mov	r24, r18
     856:	80 95       	com	r24
     858:	f6 01       	movw	r30, r12
     85a:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     85c:	83 81       	ldd	r24, Z+3	; 0x03
     85e:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	80 93 6e 00 	sts	0x006E, r24
    sei();
     866:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     868:	f6 01       	movw	r30, r12
     86a:	12 83       	std	Z+2, r17	; 0x02
     86c:	01 83       	std	Z+1, r16	; 0x01
}
     86e:	2a 96       	adiw	r28, 0x0a	; 10
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	de bf       	out	0x3e, r29	; 62
     876:	0f be       	out	0x3f, r0	; 63
     878:	cd bf       	out	0x3d, r28	; 61
     87a:	cf 91       	pop	r28
     87c:	df 91       	pop	r29
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	bf 90       	pop	r11
     88c:	af 90       	pop	r10
     88e:	9f 90       	pop	r9
     890:	8f 90       	pop	r8
     892:	7f 90       	pop	r7
     894:	08 95       	ret

00000896 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     896:	e0 91 5d 01 	lds	r30, 0x015D
     89a:	f0 91 5e 01 	lds	r31, 0x015E
     89e:	87 89       	ldd	r24, Z+23	; 0x17
}
     8a0:	08 95       	ret

000008a2 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8a2:	e0 91 5d 01 	lds	r30, 0x015D
     8a6:	f0 91 5e 01 	lds	r31, 0x015E
     8aa:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     8ac:	8f 33       	cpi	r24, 0x3F	; 63
     8ae:	18 f4       	brcc	.+6      	; 0x8b6 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     8b0:	87 89       	ldd	r24, Z+23	; 0x17
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	87 8b       	std	Z+23, r24	; 0x17
     8b6:	08 95       	ret

000008b8 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8b8:	e0 91 5d 01 	lds	r30, 0x015D
     8bc:	f0 91 5e 01 	lds	r31, 0x015E
     8c0:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8c2:	88 23       	and	r24, r24
     8c4:	19 f0       	breq	.+6      	; 0x8cc <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8c6:	87 89       	ldd	r24, Z+23	; 0x17
     8c8:	81 50       	subi	r24, 0x01	; 1
     8ca:	87 8b       	std	Z+23, r24	; 0x17
     8cc:	08 95       	ret

000008ce <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8ce:	e0 91 5d 01 	lds	r30, 0x015D
     8d2:	f0 91 5e 01 	lds	r31, 0x015E
     8d6:	17 8a       	std	Z+23, r1	; 0x17
}
     8d8:	08 95       	ret

000008da <Timebase_Timer_Get_SubSeconds>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8da:	e0 91 5d 01 	lds	r30, 0x015D
     8de:	f0 91 5e 01 	lds	r31, 0x015E
     8e2:	20 85       	ldd	r18, Z+8	; 0x08
     8e4:	31 85       	ldd	r19, Z+9	; 0x09
}
     8e6:	c9 01       	movw	r24, r18
     8e8:	08 95       	ret

000008ea <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8ea:	e0 91 5d 01 	lds	r30, 0x015D
     8ee:	f0 91 5e 01 	lds	r31, 0x015E
     8f2:	22 85       	ldd	r18, Z+10	; 0x0a
     8f4:	33 85       	ldd	r19, Z+11	; 0x0b
     8f6:	44 85       	ldd	r20, Z+12	; 0x0c
     8f8:	55 85       	ldd	r21, Z+13	; 0x0d
}
     8fa:	b9 01       	movw	r22, r18
     8fc:	ca 01       	movw	r24, r20
     8fe:	08 95       	ret

00000900 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     900:	e0 91 5d 01 	lds	r30, 0x015D
     904:	f0 91 5e 01 	lds	r31, 0x015E
     908:	91 87       	std	Z+9, r25	; 0x09
     90a:	80 87       	std	Z+8, r24	; 0x08
}
     90c:	08 95       	ret

0000090e <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     90e:	e0 91 5d 01 	lds	r30, 0x015D
     912:	f0 91 5e 01 	lds	r31, 0x015E
     916:	62 87       	std	Z+10, r22	; 0x0a
     918:	73 87       	std	Z+11, r23	; 0x0b
     91a:	84 87       	std	Z+12, r24	; 0x0c
     91c:	95 87       	std	Z+13, r25	; 0x0d
}
     91e:	08 95       	ret

00000920 <Timebase_Timer_Await_SubSeconds>:
	curr_s  = Timebase_Timer_Get_Seconds();
  }
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     920:	bc 01       	movw	r22, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     922:	e0 91 5d 01 	lds	r30, 0x015D
     926:	f0 91 5e 01 	lds	r31, 0x015E
     92a:	80 85       	ldd	r24, Z+8	; 0x08
     92c:	91 85       	ldd	r25, Z+9	; 0x09
  }
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     92e:	24 81       	ldd	r18, Z+4	; 0x04
     930:	35 81       	ldd	r19, Z+5	; 0x05
     932:	46 81       	ldd	r20, Z+6	; 0x06
     934:	57 81       	ldd	r21, Z+7	; 0x07
     936:	a0 e0       	ldi	r26, 0x00	; 0
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	82 17       	cp	r24, r18
     93c:	93 07       	cpc	r25, r19
     93e:	a4 07       	cpc	r26, r20
     940:	b5 07       	cpc	r27, r21
     942:	99 f7       	brne	.-26     	; 0x92a <Timebase_Timer_Await_SubSeconds+0xa>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     944:	80 85       	ldd	r24, Z+8	; 0x08
     946:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     948:	86 0f       	add	r24, r22
     94a:	97 1f       	adc	r25, r23
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	84 83       	std	Z+4, r24	; 0x04
     952:	95 83       	std	Z+5, r25	; 0x05
     954:	a6 83       	std	Z+6, r26	; 0x06
     956:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     958:	24 81       	ldd	r18, Z+4	; 0x04
     95a:	35 81       	ldd	r19, Z+5	; 0x05
     95c:	46 81       	ldd	r20, Z+6	; 0x06
     95e:	57 81       	ldd	r21, Z+7	; 0x07
     960:	81 81       	ldd	r24, Z+1	; 0x01
     962:	92 81       	ldd	r25, Z+2	; 0x02
     964:	a0 e0       	ldi	r26, 0x00	; 0
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	28 17       	cp	r18, r24
     96a:	39 07       	cpc	r19, r25
     96c:	4a 07       	cpc	r20, r26
     96e:	5b 07       	cpc	r21, r27
     970:	84 f0       	brlt	.+32     	; 0x992 <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     972:	24 81       	ldd	r18, Z+4	; 0x04
     974:	35 81       	ldd	r19, Z+5	; 0x05
     976:	46 81       	ldd	r20, Z+6	; 0x06
     978:	57 81       	ldd	r21, Z+7	; 0x07
     97a:	81 81       	ldd	r24, Z+1	; 0x01
     97c:	92 81       	ldd	r25, Z+2	; 0x02
     97e:	a0 e0       	ldi	r26, 0x00	; 0
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	4a 0b       	sbc	r20, r26
     988:	5b 0b       	sbc	r21, r27
     98a:	24 83       	std	Z+4, r18	; 0x04
     98c:	35 83       	std	Z+5, r19	; 0x05
     98e:	46 83       	std	Z+6, r20	; 0x06
     990:	57 83       	std	Z+7, r21	; 0x07
     992:	08 95       	ret

00000994 <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     99c:	e0 91 5d 01 	lds	r30, 0x015D
     9a0:	f0 91 5e 01 	lds	r31, 0x015E
     9a4:	22 85       	ldd	r18, Z+10	; 0x0a
     9a6:	33 85       	ldd	r19, Z+11	; 0x0b
     9a8:	44 85       	ldd	r20, Z+12	; 0x0c
     9aa:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     9ac:	7c 01       	movw	r14, r24
     9ae:	00 e0       	ldi	r16, 0x00	; 0
     9b0:	10 e0       	ldi	r17, 0x00	; 0
     9b2:	e2 0e       	add	r14, r18
     9b4:	f3 1e       	adc	r15, r19
     9b6:	04 1f       	adc	r16, r20
     9b8:	15 1f       	adc	r17, r21
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9ba:	82 85       	ldd	r24, Z+10	; 0x0a
     9bc:	93 85       	ldd	r25, Z+11	; 0x0b
     9be:	a4 85       	ldd	r26, Z+12	; 0x0c
     9c0:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     9c2:	8e 15       	cp	r24, r14
     9c4:	9f 05       	cpc	r25, r15
     9c6:	a0 07       	cpc	r26, r16
     9c8:	b1 07       	cpc	r27, r17
     9ca:	bc f3       	brlt	.-18     	; 0x9ba <Timebase_Timer_Delay_Seconds+0x26>
}
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	08 95       	ret

000009d6 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     9d6:	e0 91 5d 01 	lds	r30, 0x015D
     9da:	f0 91 5e 01 	lds	r31, 0x015E
     9de:	16 86       	std	Z+14, r1	; 0x0e
     9e0:	17 86       	std	Z+15, r1	; 0x0f
     9e2:	10 8a       	std	Z+16, r1	; 0x10
     9e4:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     9e6:	12 8a       	std	Z+18, r1	; 0x12
     9e8:	13 8a       	std	Z+19, r1	; 0x13
     9ea:	14 8a       	std	Z+20, r1	; 0x14
     9ec:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     9ee:	16 8a       	std	Z+22, r1	; 0x16
}
     9f0:	08 95       	ret

000009f2 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     9f2:	e0 91 5d 01 	lds	r30, 0x015D
     9f6:	f0 91 5e 01 	lds	r31, 0x015E
     9fa:	86 89       	ldd	r24, Z+22	; 0x16
     9fc:	88 23       	and	r24, r24
     9fe:	91 f4       	brne	.+36     	; 0xa24 <Timebase_Window_Timer_Start+0x32>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a00:	82 85       	ldd	r24, Z+10	; 0x0a
     a02:	93 85       	ldd	r25, Z+11	; 0x0b
     a04:	a4 85       	ldd	r26, Z+12	; 0x0c
     a06:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     a08:	86 87       	std	Z+14, r24	; 0x0e
     a0a:	97 87       	std	Z+15, r25	; 0x0f
     a0c:	a0 8b       	std	Z+16, r26	; 0x10
     a0e:	b1 8b       	std	Z+17, r27	; 0x11


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a10:	80 85       	ldd	r24, Z+8	; 0x08
     a12:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	82 8b       	std	Z+18, r24	; 0x12
     a1a:	93 8b       	std	Z+19, r25	; 0x13
     a1c:	a4 8b       	std	Z+20, r26	; 0x14
     a1e:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	86 8b       	std	Z+22, r24	; 0x16
     a24:	08 95       	ret

00000a26 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     a32:	c0 91 5d 01 	lds	r28, 0x015D
     a36:	d0 91 5e 01 	lds	r29, 0x015E
     a3a:	8e 89       	ldd	r24, Y+22	; 0x16
     a3c:	81 30       	cpi	r24, 0x01	; 1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <Timebase_Window_Timer_Get_Interval+0x22>
     a40:	ee 24       	eor	r14, r14
     a42:	ff 24       	eor	r15, r15
     a44:	87 01       	movw	r16, r14
     a46:	23 c0       	rjmp	.+70     	; 0xa8e <Timebase_Window_Timer_Get_Interval+0x68>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a48:	2a 85       	ldd	r18, Y+10	; 0x0a
     a4a:	3b 85       	ldd	r19, Y+11	; 0x0b
     a4c:	4c 85       	ldd	r20, Y+12	; 0x0c
     a4e:	5d 85       	ldd	r21, Y+13	; 0x0d


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a50:	88 85       	ldd	r24, Y+8	; 0x08
     a52:	99 85       	ldd	r25, Y+9	; 0x09


int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    int32_t curr_s = Timebase_Timer_Get_Seconds();
    int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
     a54:	7c 01       	movw	r14, r24
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     a5a:	8e 85       	ldd	r24, Y+14	; 0x0e
     a5c:	9f 85       	ldd	r25, Y+15	; 0x0f
     a5e:	a8 89       	ldd	r26, Y+16	; 0x10
     a60:	b9 89       	ldd	r27, Y+17	; 0x11
     a62:	28 1b       	sub	r18, r24
     a64:	39 0b       	sbc	r19, r25
     a66:	4a 0b       	sbc	r20, r26
     a68:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     a6a:	69 81       	ldd	r22, Y+1	; 0x01
     a6c:	7a 81       	ldd	r23, Y+2	; 0x02
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsi3>
	curr_s += curr_ss;
     a76:	2a 89       	ldd	r18, Y+18	; 0x12
     a78:	3b 89       	ldd	r19, Y+19	; 0x13
     a7a:	4c 89       	ldd	r20, Y+20	; 0x14
     a7c:	5d 89       	ldd	r21, Y+21	; 0x15
     a7e:	e2 1a       	sub	r14, r18
     a80:	f3 0a       	sbc	r15, r19
     a82:	04 0b       	sbc	r16, r20
     a84:	15 0b       	sbc	r17, r21
     a86:	e6 0e       	add	r14, r22
     a88:	f7 1e       	adc	r15, r23
     a8a:	08 1f       	adc	r16, r24
     a8c:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     a8e:	b7 01       	movw	r22, r14
     a90:	c8 01       	movw	r24, r16
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	08 95       	ret

00000aa0 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     aa0:	0e 94 13 05 	call	0xa26	; 0xa26 <Timebase_Window_Timer_Get_Interval>
     aa4:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     aa6:	e0 91 5d 01 	lds	r30, 0x015D
     aaa:	f0 91 5e 01 	lds	r31, 0x015E
     aae:	86 89       	ldd	r24, Z+22	; 0x16
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	49 f4       	brne	.+18     	; 0xac6 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     ab4:	16 86       	std	Z+14, r1	; 0x0e
     ab6:	17 86       	std	Z+15, r1	; 0x0f
     ab8:	10 8a       	std	Z+16, r1	; 0x10
     aba:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     abc:	12 8a       	std	Z+18, r1	; 0x12
     abe:	13 8a       	std	Z+19, r1	; 0x13
     ac0:	14 8a       	std	Z+20, r1	; 0x14
     ac2:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     ac4:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     ac6:	82 2f       	mov	r24, r18
     ac8:	08 95       	ret

00000aca <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
     aca:	e0 91 5d 01 	lds	r30, 0x015D
     ace:	f0 91 5e 01 	lds	r31, 0x015E
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	2d e0       	ldi	r18, 0x0D	; 13
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	ac 01       	movw	r20, r24
     ada:	42 9f       	mul	r20, r18
     adc:	c0 01       	movw	r24, r0
     ade:	43 9f       	mul	r20, r19
     ae0:	90 0d       	add	r25, r0
     ae2:	52 9f       	mul	r21, r18
     ae4:	90 0d       	add	r25, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	e8 0f       	add	r30, r24
     aea:	f9 1f       	adc	r31, r25
     aec:	e3 59       	subi	r30, 0x93	; 147
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	80 81       	ld	r24, Z
     af2:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
     af4:	8f 70       	andi	r24, 0x0F	; 15
     af6:	08 95       	ret

00000af8 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     af8:	e0 91 5d 01 	lds	r30, 0x015D
     afc:	f0 91 5e 01 	lds	r31, 0x015E
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	2d e0       	ldi	r18, 0x0D	; 13
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	ac 01       	movw	r20, r24
     b08:	42 9f       	mul	r20, r18
     b0a:	c0 01       	movw	r24, r0
     b0c:	43 9f       	mul	r20, r19
     b0e:	90 0d       	add	r25, r0
     b10:	52 9f       	mul	r21, r18
     b12:	90 0d       	add	r25, r0
     b14:	11 24       	eor	r1, r1
     b16:	e8 0f       	add	r30, r24
     b18:	f9 1f       	adc	r31, r25
     b1a:	e3 59       	subi	r30, 0x93	; 147
     b1c:	ff 4f       	sbci	r31, 0xFF	; 255
     b1e:	6f 70       	andi	r22, 0x0F	; 15
     b20:	66 0f       	add	r22, r22
     b22:	80 81       	ld	r24, Z
     b24:	81 7e       	andi	r24, 0xE1	; 225
     b26:	86 2b       	or	r24, r22
     b28:	80 83       	st	Z, r24
}
     b2a:	08 95       	ret

00000b2c <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
     b2c:	e0 91 5d 01 	lds	r30, 0x015D
     b30:	f0 91 5e 01 	lds	r31, 0x015E
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	2d e0       	ldi	r18, 0x0D	; 13
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	ac 01       	movw	r20, r24
     b3c:	42 9f       	mul	r20, r18
     b3e:	c0 01       	movw	r24, r0
     b40:	43 9f       	mul	r20, r19
     b42:	90 0d       	add	r25, r0
     b44:	52 9f       	mul	r21, r18
     b46:	90 0d       	add	r25, r0
     b48:	11 24       	eor	r1, r1
     b4a:	e8 0f       	add	r30, r24
     b4c:	f9 1f       	adc	r31, r25
     b4e:	ee 58       	subi	r30, 0x8E	; 142
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
     b56:	82 81       	ldd	r24, Z+2	; 0x02
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	08 95       	ret

00000b5c <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     b5c:	e0 91 5d 01 	lds	r30, 0x015D
     b60:	f0 91 5e 01 	lds	r31, 0x015E
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	2d e0       	ldi	r18, 0x0D	; 13
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	dc 01       	movw	r26, r24
     b6c:	a2 9f       	mul	r26, r18
     b6e:	c0 01       	movw	r24, r0
     b70:	a3 9f       	mul	r26, r19
     b72:	90 0d       	add	r25, r0
     b74:	b2 9f       	mul	r27, r18
     b76:	90 0d       	add	r25, r0
     b78:	11 24       	eor	r1, r1
     b7a:	e8 0f       	add	r30, r24
     b7c:	f9 1f       	adc	r31, r25
     b7e:	ee 58       	subi	r30, 0x8E	; 142
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	40 83       	st	Z, r20
     b84:	51 83       	std	Z+1, r21	; 0x01
     b86:	62 83       	std	Z+2, r22	; 0x02
     b88:	73 83       	std	Z+3, r23	; 0x03
}
     b8a:	08 95       	ret

00000b8c <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
     b8c:	e0 91 5d 01 	lds	r30, 0x015D
     b90:	f0 91 5e 01 	lds	r31, 0x015E
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	2d e0       	ldi	r18, 0x0D	; 13
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	ac 01       	movw	r20, r24
     b9c:	42 9f       	mul	r20, r18
     b9e:	c0 01       	movw	r24, r0
     ba0:	43 9f       	mul	r20, r19
     ba2:	90 0d       	add	r25, r0
     ba4:	52 9f       	mul	r21, r18
     ba6:	90 0d       	add	r25, r0
     ba8:	11 24       	eor	r1, r1
     baa:	e8 0f       	add	r30, r24
     bac:	f9 1f       	adc	r31, r25
     bae:	e2 59       	subi	r30, 0x92	; 146
     bb0:	ff 4f       	sbci	r31, 0xFF	; 255
     bb2:	60 81       	ld	r22, Z
     bb4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	08 95       	ret

00000bbc <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     bbc:	e0 91 5d 01 	lds	r30, 0x015D
     bc0:	f0 91 5e 01 	lds	r31, 0x015E
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	2d e0       	ldi	r18, 0x0D	; 13
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	dc 01       	movw	r26, r24
     bcc:	a2 9f       	mul	r26, r18
     bce:	c0 01       	movw	r24, r0
     bd0:	a3 9f       	mul	r26, r19
     bd2:	90 0d       	add	r25, r0
     bd4:	b2 9f       	mul	r27, r18
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	e2 59       	subi	r30, 0x92	; 146
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
     be2:	40 83       	st	Z, r20
     be4:	51 83       	std	Z+1, r21	; 0x01
     be6:	62 83       	std	Z+2, r22	; 0x02
     be8:	73 83       	std	Z+3, r23	; 0x03
}
     bea:	08 95       	ret

00000bec <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
     bec:	e0 91 5d 01 	lds	r30, 0x015D
     bf0:	f0 91 5e 01 	lds	r31, 0x015E
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	2d e0       	ldi	r18, 0x0D	; 13
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	ac 01       	movw	r20, r24
     bfc:	42 9f       	mul	r20, r18
     bfe:	c0 01       	movw	r24, r0
     c00:	43 9f       	mul	r20, r19
     c02:	90 0d       	add	r25, r0
     c04:	52 9f       	mul	r21, r18
     c06:	90 0d       	add	r25, r0
     c08:	11 24       	eor	r1, r1
     c0a:	e8 0f       	add	r30, r24
     c0c:	f9 1f       	adc	r31, r25
     c0e:	ea 58       	subi	r30, 0x8A	; 138
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
     c1a:	08 95       	ret

00000c1c <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     c1c:	e0 91 5d 01 	lds	r30, 0x015D
     c20:	f0 91 5e 01 	lds	r31, 0x015E
     c24:	28 2f       	mov	r18, r24
     c26:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     c28:	77 ff       	sbrs	r23, 7
     c2a:	13 c0       	rjmp	.+38     	; 0xc52 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
     c2c:	8d e0       	ldi	r24, 0x0D	; 13
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	ac 01       	movw	r20, r24
     c32:	24 9f       	mul	r18, r20
     c34:	c0 01       	movw	r24, r0
     c36:	25 9f       	mul	r18, r21
     c38:	90 0d       	add	r25, r0
     c3a:	34 9f       	mul	r19, r20
     c3c:	90 0d       	add	r25, r0
     c3e:	11 24       	eor	r1, r1
     c40:	e8 0f       	add	r30, r24
     c42:	f9 1f       	adc	r31, r25
     c44:	ea 58       	subi	r30, 0x8A	; 138
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	10 82       	st	Z, r1
     c4a:	11 82       	std	Z+1, r1	; 0x01
     c4c:	12 82       	std	Z+2, r1	; 0x02
     c4e:	13 82       	std	Z+3, r1	; 0x03
     c50:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
     c52:	8d e0       	ldi	r24, 0x0D	; 13
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	dc 01       	movw	r26, r24
     c58:	2a 9f       	mul	r18, r26
     c5a:	c0 01       	movw	r24, r0
     c5c:	2b 9f       	mul	r18, r27
     c5e:	90 0d       	add	r25, r0
     c60:	3a 9f       	mul	r19, r26
     c62:	90 0d       	add	r25, r0
     c64:	11 24       	eor	r1, r1
     c66:	e8 0f       	add	r30, r24
     c68:	f9 1f       	adc	r31, r25
     c6a:	ea 58       	subi	r30, 0x8A	; 138
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	40 83       	st	Z, r20
     c70:	51 83       	std	Z+1, r21	; 0x01
     c72:	62 83       	std	Z+2, r22	; 0x02
     c74:	73 83       	std	Z+3, r23	; 0x03
     c76:	08 95       	ret

00000c78 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
     c78:	e0 91 5d 01 	lds	r30, 0x015D
     c7c:	f0 91 5e 01 	lds	r31, 0x015E
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	2d e0       	ldi	r18, 0x0D	; 13
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	ac 01       	movw	r20, r24
     c88:	42 9f       	mul	r20, r18
     c8a:	c0 01       	movw	r24, r0
     c8c:	43 9f       	mul	r20, r19
     c8e:	90 0d       	add	r25, r0
     c90:	52 9f       	mul	r21, r18
     c92:	90 0d       	add	r25, r0
     c94:	11 24       	eor	r1, r1
     c96:	e8 0f       	add	r30, r24
     c98:	f9 1f       	adc	r31, r25
     c9a:	e3 59       	subi	r30, 0x93	; 147
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
     ca0:	81 70       	andi	r24, 0x01	; 1
     ca2:	08 95       	ret

00000ca4 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
     ca4:	e0 91 5d 01 	lds	r30, 0x015D
     ca8:	f0 91 5e 01 	lds	r31, 0x015E
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	2d e0       	ldi	r18, 0x0D	; 13
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	ac 01       	movw	r20, r24
     cb4:	42 9f       	mul	r20, r18
     cb6:	c0 01       	movw	r24, r0
     cb8:	43 9f       	mul	r20, r19
     cba:	90 0d       	add	r25, r0
     cbc:	52 9f       	mul	r21, r18
     cbe:	90 0d       	add	r25, r0
     cc0:	11 24       	eor	r1, r1
     cc2:	e8 0f       	add	r30, r24
     cc4:	f9 1f       	adc	r31, r25
     cc6:	e3 59       	subi	r30, 0x93	; 147
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
}
     cd0:	08 95       	ret

00000cd2 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     cd2:	e0 91 5d 01 	lds	r30, 0x015D
     cd6:	f0 91 5e 01 	lds	r31, 0x015E
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	2d e0       	ldi	r18, 0x0D	; 13
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	ac 01       	movw	r20, r24
     ce2:	42 9f       	mul	r20, r18
     ce4:	c0 01       	movw	r24, r0
     ce6:	43 9f       	mul	r20, r19
     ce8:	90 0d       	add	r25, r0
     cea:	52 9f       	mul	r21, r18
     cec:	90 0d       	add	r25, r0
     cee:	11 24       	eor	r1, r1
     cf0:	e8 0f       	add	r30, r24
     cf2:	f9 1f       	adc	r31, r25
     cf4:	e3 59       	subi	r30, 0x93	; 147
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	8e 7f       	andi	r24, 0xFE	; 254
     cfc:	80 83       	st	Z, r24
}
     cfe:	08 95       	ret

00000d00 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     d00:	e0 91 5d 01 	lds	r30, 0x015D
     d04:	f0 91 5e 01 	lds	r31, 0x015E
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	2d e0       	ldi	r18, 0x0D	; 13
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	ac 01       	movw	r20, r24
     d10:	42 9f       	mul	r20, r18
     d12:	c0 01       	movw	r24, r0
     d14:	43 9f       	mul	r20, r19
     d16:	90 0d       	add	r25, r0
     d18:	52 9f       	mul	r21, r18
     d1a:	90 0d       	add	r25, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	e8 0f       	add	r30, r24
     d20:	f9 1f       	adc	r31, r25
     d22:	e2 59       	subi	r30, 0x92	; 146
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	11 92       	st	Z+, r1
     d28:	11 92       	st	Z+, r1
     d2a:	11 92       	st	Z+, r1
     d2c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     d2e:	10 82       	st	Z, r1
     d30:	11 82       	std	Z+1, r1	; 0x01
     d32:	12 82       	std	Z+2, r1	; 0x02
     d34:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     d36:	35 97       	sbiw	r30, 0x05	; 5
     d38:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     d3a:	80 7e       	andi	r24, 0xE0	; 224
     d3c:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
     d3e:	08 95       	ret

00000d40 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     d40:	e0 91 5d 01 	lds	r30, 0x015D
     d44:	f0 91 5e 01 	lds	r31, 0x015E
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	2d e0       	ldi	r18, 0x0D	; 13
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	ac 01       	movw	r20, r24
     d50:	42 9f       	mul	r20, r18
     d52:	c0 01       	movw	r24, r0
     d54:	43 9f       	mul	r20, r19
     d56:	90 0d       	add	r25, r0
     d58:	52 9f       	mul	r21, r18
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	e2 59       	subi	r30, 0x92	; 146
     d64:	ff 4f       	sbci	r31, 0xFF	; 255
     d66:	11 92       	st	Z+, r1
     d68:	11 92       	st	Z+, r1
     d6a:	11 92       	st	Z+, r1
     d6c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     d6e:	10 82       	st	Z, r1
     d70:	11 82       	std	Z+1, r1	; 0x01
     d72:	12 82       	std	Z+2, r1	; 0x02
     d74:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     d76:	35 97       	sbiw	r30, 0x05	; 5
     d78:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     d7a:	80 7e       	andi	r24, 0xE0	; 224
     d7c:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
     d7e:	08 95       	ret

00000d80 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     d80:	e0 91 5d 01 	lds	r30, 0x015D
     d84:	f0 91 5e 01 	lds	r31, 0x015E
     d88:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     d8a:	2d e0       	ldi	r18, 0x0D	; 13
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	ac 01       	movw	r20, r24
     d90:	42 9f       	mul	r20, r18
     d92:	c0 01       	movw	r24, r0
     d94:	43 9f       	mul	r20, r19
     d96:	90 0d       	add	r25, r0
     d98:	52 9f       	mul	r21, r18
     d9a:	90 0d       	add	r25, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	e8 0f       	add	r30, r24
     da0:	f9 1f       	adc	r31, r25
     da2:	e3 59       	subi	r30, 0x93	; 147
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	90 81       	ld	r25, Z
     da8:	89 2f       	mov	r24, r25
     daa:	86 95       	lsr	r24
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	19 f0       	breq	.+6      	; 0xdb8 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     db2:	91 7e       	andi	r25, 0xE1	; 225
     db4:	92 60       	ori	r25, 0x02	; 2
     db6:	90 83       	st	Z, r25
     db8:	08 95       	ret

00000dba <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     dba:	e0 91 5d 01 	lds	r30, 0x015D
     dbe:	f0 91 5e 01 	lds	r31, 0x015E
     dc2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     dc4:	2d e0       	ldi	r18, 0x0D	; 13
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	ac 01       	movw	r20, r24
     dca:	42 9f       	mul	r20, r18
     dcc:	c0 01       	movw	r24, r0
     dce:	43 9f       	mul	r20, r19
     dd0:	90 0d       	add	r25, r0
     dd2:	52 9f       	mul	r21, r18
     dd4:	90 0d       	add	r25, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	e8 0f       	add	r30, r24
     dda:	f9 1f       	adc	r31, r25
     ddc:	e3 59       	subi	r30, 0x93	; 147
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	90 81       	ld	r25, Z
     de2:	89 2f       	mov	r24, r25
     de4:	86 95       	lsr	r24
     de6:	8f 70       	andi	r24, 0x0F	; 15
     de8:	82 30       	cpi	r24, 0x02	; 2
     dea:	19 f0       	breq	.+6      	; 0xdf2 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     dec:	91 7e       	andi	r25, 0xE1	; 225
     dee:	94 60       	ori	r25, 0x04	; 4
     df0:	90 83       	st	Z, r25
     df2:	08 95       	ret

00000df4 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     df8:	a0 91 5d 01 	lds	r26, 0x015D
     dfc:	b0 91 5e 01 	lds	r27, 0x015E
     e00:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     e02:	2d e0       	ldi	r18, 0x0D	; 13
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	82 9f       	mul	r24, r18
     e08:	f0 01       	movw	r30, r0
     e0a:	83 9f       	mul	r24, r19
     e0c:	f0 0d       	add	r31, r0
     e0e:	92 9f       	mul	r25, r18
     e10:	f0 0d       	add	r31, r0
     e12:	11 24       	eor	r1, r1
     e14:	ea 0f       	add	r30, r26
     e16:	fb 1f       	adc	r31, r27
     e18:	ef 01       	movw	r28, r30
     e1a:	c3 59       	subi	r28, 0x93	; 147
     e1c:	df 4f       	sbci	r29, 0xFF	; 255
     e1e:	88 81       	ld	r24, Y
     e20:	86 95       	lsr	r24
     e22:	8f 70       	andi	r24, 0x0F	; 15
     e24:	e9 f4       	brne	.+58     	; 0xe60 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e26:	ee 58       	subi	r30, 0x8E	; 142
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	40 83       	st	Z, r20
     e2c:	51 83       	std	Z+1, r21	; 0x01
     e2e:	62 83       	std	Z+2, r22	; 0x02
     e30:	73 83       	std	Z+3, r23	; 0x03
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e32:	1a 96       	adiw	r26, 0x0a	; 10
     e34:	8d 91       	ld	r24, X+
     e36:	9d 91       	ld	r25, X+
     e38:	0d 90       	ld	r0, X+
     e3a:	bc 91       	ld	r27, X
     e3c:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e3e:	84 0f       	add	r24, r20
     e40:	95 1f       	adc	r25, r21
     e42:	a6 1f       	adc	r26, r22
     e44:	b7 1f       	adc	r27, r23
     e46:	b2 93       	st	-Z, r27
     e48:	a2 93       	st	-Z, r26
     e4a:	92 93       	st	-Z, r25
     e4c:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     e4e:	98 81       	ld	r25, Y
     e50:	89 2f       	mov	r24, r25
     e52:	86 95       	lsr	r24
     e54:	8f 70       	andi	r24, 0x0F	; 15
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	19 f0       	breq	.+6      	; 0xe60 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e5a:	91 7e       	andi	r25, 0xE1	; 225
     e5c:	92 60       	ori	r25, 0x02	; 2
     e5e:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e6a:	e0 91 5d 01 	lds	r30, 0x015D
     e6e:	f0 91 5e 01 	lds	r31, 0x015E
     e72:	a8 2f       	mov	r26, r24
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	2d e0       	ldi	r18, 0x0D	; 13
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	e9 01       	movw	r28, r18
     e7c:	ac 9f       	mul	r26, r28
     e7e:	90 01       	movw	r18, r0
     e80:	ad 9f       	mul	r26, r29
     e82:	30 0d       	add	r19, r0
     e84:	bc 9f       	mul	r27, r28
     e86:	30 0d       	add	r19, r0
     e88:	11 24       	eor	r1, r1
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	e2 59       	subi	r30, 0x92	; 146
     e90:	ff 4f       	sbci	r31, 0xFF	; 255
     e92:	11 92       	st	Z+, r1
     e94:	11 92       	st	Z+, r1
     e96:	11 92       	st	Z+, r1
     e98:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e9a:	10 82       	st	Z, r1
     e9c:	11 82       	std	Z+1, r1	; 0x01
     e9e:	12 82       	std	Z+2, r1	; 0x02
     ea0:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ea2:	35 97       	sbiw	r30, 0x05	; 5
     ea4:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     ea6:	90 7e       	andi	r25, 0xE0	; 224
     ea8:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
     eaa:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <Timebase_DownCounter_Set_Securely>
} 
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     ebc:	a0 91 5d 01 	lds	r26, 0x015D
     ec0:	b0 91 5e 01 	lds	r27, 0x015E
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	2d e0       	ldi	r18, 0x0D	; 13
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	82 9f       	mul	r24, r18
     ecc:	f0 01       	movw	r30, r0
     ece:	83 9f       	mul	r24, r19
     ed0:	f0 0d       	add	r31, r0
     ed2:	92 9f       	mul	r25, r18
     ed4:	f0 0d       	add	r31, r0
     ed6:	11 24       	eor	r1, r1
     ed8:	ea 0f       	add	r30, r26
     eda:	fb 1f       	adc	r31, r27
     edc:	8f 01       	movw	r16, r30
     ede:	03 59       	subi	r16, 0x93	; 147
     ee0:	1f 4f       	sbci	r17, 0xFF	; 255
     ee2:	e8 01       	movw	r28, r16
     ee4:	88 81       	ld	r24, Y
     ee6:	86 95       	lsr	r24
     ee8:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	69 f5       	brne	.+90     	; 0xf48 <Timebase_DownCounter_Update+0x94>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     eee:	1a 96       	adiw	r26, 0x0a	; 10
     ef0:	2d 91       	ld	r18, X+
     ef2:	3d 91       	ld	r19, X+
     ef4:	4d 91       	ld	r20, X+
     ef6:	5c 91       	ld	r21, X
     ef8:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
     efa:	bf 01       	movw	r22, r30
     efc:	62 59       	subi	r22, 0x92	; 146
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	eb 01       	movw	r28, r22
     f02:	88 81       	ld	r24, Y
     f04:	99 81       	ldd	r25, Y+1	; 0x01
     f06:	aa 81       	ldd	r26, Y+2	; 0x02
     f08:	bb 81       	ldd	r27, Y+3	; 0x03
     f0a:	82 1b       	sub	r24, r18
     f0c:	93 0b       	sbc	r25, r19
     f0e:	a4 0b       	sbc	r26, r20
     f10:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f12:	ee 58       	subi	r30, 0x8E	; 142
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	80 83       	st	Z, r24
     f18:	91 83       	std	Z+1, r25	; 0x01
     f1a:	a2 83       	std	Z+2, r26	; 0x02
     f1c:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
     f1e:	18 16       	cp	r1, r24
     f20:	19 06       	cpc	r1, r25
     f22:	1a 06       	cpc	r1, r26
     f24:	1b 06       	cpc	r1, r27
     f26:	34 f1       	brlt	.+76     	; 0xf74 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f28:	db 01       	movw	r26, r22
     f2a:	1d 92       	st	X+, r1
     f2c:	1d 92       	st	X+, r1
     f2e:	1d 92       	st	X+, r1
     f30:	1c 92       	st	X, r1
     f32:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f34:	10 82       	st	Z, r1
     f36:	11 82       	std	Z+1, r1	; 0x01
     f38:	12 82       	std	Z+2, r1	; 0x02
     f3a:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     f3c:	e8 01       	movw	r28, r16
     f3e:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f40:	80 7e       	andi	r24, 0xE0	; 224
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	88 83       	st	Y, r24
     f46:	16 c0       	rjmp	.+44     	; 0xf74 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
     f48:	82 30       	cpi	r24, 0x02	; 2
     f4a:	a1 f4       	brne	.+40     	; 0xf74 <Timebase_DownCounter_Update+0xc0>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f4c:	1a 96       	adiw	r26, 0x0a	; 10
     f4e:	8d 91       	ld	r24, X+
     f50:	9d 91       	ld	r25, X+
     f52:	0d 90       	ld	r0, X+
     f54:	bc 91       	ld	r27, X
     f56:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f58:	ee 58       	subi	r30, 0x8E	; 142
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	20 81       	ld	r18, Z
     f5e:	31 81       	ldd	r19, Z+1	; 0x01
     f60:	42 81       	ldd	r20, Z+2	; 0x02
     f62:	53 81       	ldd	r21, Z+3	; 0x03
     f64:	82 0f       	add	r24, r18
     f66:	93 1f       	adc	r25, r19
     f68:	a4 1f       	adc	r26, r20
     f6a:	b5 1f       	adc	r27, r21
     f6c:	b2 93       	st	-Z, r27
     f6e:	a2 93       	st	-Z, r26
     f70:	92 93       	st	-Z, r25
     f72:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	08 95       	ret

00000f7e <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	e0 91 5d 01 	lds	r30, 0x015D
     f84:	f0 91 5e 01 	lds	r31, 0x015E
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2d e0       	ldi	r18, 0x0D	; 13
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	bc 01       	movw	r22, r24
     f90:	62 9f       	mul	r22, r18
     f92:	c0 01       	movw	r24, r0
     f94:	63 9f       	mul	r22, r19
     f96:	90 0d       	add	r25, r0
     f98:	72 9f       	mul	r23, r18
     f9a:	90 0d       	add	r25, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	e8 0f       	add	r30, r24
     fa0:	f9 1f       	adc	r31, r25
     fa2:	e3 59       	subi	r30, 0x93	; 147
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	80 81       	ld	r24, Z
     fa8:	86 95       	lsr	r24
     faa:	8f 70       	andi	r24, 0x0F	; 15
     fac:	84 30       	cpi	r24, 0x04	; 4
     fae:	09 f4       	brne	.+2      	; 0xfb2 <Timebase_DownCounter_Expired+0x34>
     fb0:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
     fb2:	84 2f       	mov	r24, r20
     fb4:	08 95       	ret

00000fb6 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     fb6:	e0 91 5d 01 	lds	r30, 0x015D
     fba:	f0 91 5e 01 	lds	r31, 0x015E
     fbe:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     fc0:	2d e0       	ldi	r18, 0x0D	; 13
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	ac 01       	movw	r20, r24
     fc6:	42 9f       	mul	r20, r18
     fc8:	c0 01       	movw	r24, r0
     fca:	43 9f       	mul	r20, r19
     fcc:	90 0d       	add	r25, r0
     fce:	52 9f       	mul	r21, r18
     fd0:	90 0d       	add	r25, r0
     fd2:	11 24       	eor	r1, r1
     fd4:	e8 0f       	add	r30, r24
     fd6:	f9 1f       	adc	r31, r25
     fd8:	df 01       	movw	r26, r30
     fda:	a3 59       	subi	r26, 0x93	; 147
     fdc:	bf 4f       	sbci	r27, 0xFF	; 255
     fde:	8c 91       	ld	r24, X
     fe0:	86 95       	lsr	r24
     fe2:	8f 70       	andi	r24, 0x0F	; 15
     fe4:	84 30       	cpi	r24, 0x04	; 4
     fe6:	11 f0       	breq	.+4      	; 0xfec <Timebase_DownCounter_Expired_Event+0x36>
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     fec:	e2 59       	subi	r30, 0x92	; 146
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	11 92       	st	Z+, r1
     ff2:	11 92       	st	Z+, r1
     ff4:	11 92       	st	Z+, r1
     ff6:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     ff8:	10 82       	st	Z, r1
     ffa:	11 82       	std	Z+1, r1	; 0x01
     ffc:	12 82       	std	Z+2, r1	; 0x02
     ffe:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1000:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1002:	80 7e       	andi	r24, 0xE0	; 224
    1004:	8c 93       	st	X, r24
    1006:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1008:	08 95       	ret

0000100a <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    100a:	cf 93       	push	r28
    100c:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    100e:	c0 91 5d 01 	lds	r28, 0x015D
    1012:	d0 91 5e 01 	lds	r29, 0x015E
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    101a:	8d e0       	ldi	r24, 0x0D	; 13
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	28 9f       	mul	r18, r24
    1020:	f0 01       	movw	r30, r0
    1022:	29 9f       	mul	r18, r25
    1024:	f0 0d       	add	r31, r0
    1026:	38 9f       	mul	r19, r24
    1028:	f0 0d       	add	r31, r0
    102a:	11 24       	eor	r1, r1
    102c:	ec 0f       	add	r30, r28
    102e:	fd 1f       	adc	r31, r29
    1030:	e3 59       	subi	r30, 0x93	; 147
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	80 81       	ld	r24, Z
    1036:	ed 56       	subi	r30, 0x6D	; 109
    1038:	f0 40       	sbci	r31, 0x00	; 0
    103a:	80 fd       	sbrc	r24, 0
    103c:	25 c0       	rjmp	.+74     	; 0x1088 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    103e:	ee 58       	subi	r30, 0x8E	; 142
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	81 91       	ld	r24, Z+
    1044:	91 91       	ld	r25, Z+
    1046:	a1 91       	ld	r26, Z+
    1048:	b1 91       	ld	r27, Z+
    104a:	84 1b       	sub	r24, r20
    104c:	95 0b       	sbc	r25, r21
    104e:	a6 0b       	sbc	r26, r22
    1050:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1052:	b7 ff       	sbrs	r27, 7
    1054:	05 c0       	rjmp	.+10     	; 0x1060 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    1056:	10 82       	st	Z, r1
    1058:	11 82       	std	Z+1, r1	; 0x01
    105a:	12 82       	std	Z+2, r1	; 0x02
    105c:	13 82       	std	Z+3, r1	; 0x03
    105e:	04 c0       	rjmp	.+8      	; 0x1068 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1060:	80 83       	st	Z, r24
    1062:	91 83       	std	Z+1, r25	; 0x01
    1064:	a2 83       	std	Z+2, r26	; 0x02
    1066:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1068:	8d e0       	ldi	r24, 0x0D	; 13
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	28 9f       	mul	r18, r24
    106e:	f0 01       	movw	r30, r0
    1070:	29 9f       	mul	r18, r25
    1072:	f0 0d       	add	r31, r0
    1074:	38 9f       	mul	r19, r24
    1076:	f0 0d       	add	r31, r0
    1078:	11 24       	eor	r1, r1
    107a:	ec 0f       	add	r30, r28
    107c:	fd 1f       	adc	r31, r29
    107e:	e3 59       	subi	r30, 0x93	; 147
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 81       	ld	r24, Z
    1084:	81 60       	ori	r24, 0x01	; 1
    1086:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	08 95       	ret

0000108e <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    108e:	e0 91 5d 01 	lds	r30, 0x015D
    1092:	f0 91 5e 01 	lds	r31, 0x015E
    1096:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1098:	2d e0       	ldi	r18, 0x0D	; 13
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	ac 01       	movw	r20, r24
    109e:	42 9f       	mul	r20, r18
    10a0:	c0 01       	movw	r24, r0
    10a2:	43 9f       	mul	r20, r19
    10a4:	90 0d       	add	r25, r0
    10a6:	52 9f       	mul	r21, r18
    10a8:	90 0d       	add	r25, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	e8 0f       	add	r30, r24
    10ae:	f9 1f       	adc	r31, r25
    10b0:	df 01       	movw	r26, r30
    10b2:	aa 58       	subi	r26, 0x8A	; 138
    10b4:	bf 4f       	sbci	r27, 0xFF	; 255
    10b6:	ee 58       	subi	r30, 0x8E	; 142
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	20 81       	ld	r18, Z
    10bc:	31 81       	ldd	r19, Z+1	; 0x01
    10be:	42 81       	ldd	r20, Z+2	; 0x02
    10c0:	53 81       	ldd	r21, Z+3	; 0x03
    10c2:	8d 91       	ld	r24, X+
    10c4:	9d 91       	ld	r25, X+
    10c6:	0d 90       	ld	r0, X+
    10c8:	bc 91       	ld	r27, X
    10ca:	a0 2d       	mov	r26, r0
    10cc:	28 1b       	sub	r18, r24
    10ce:	39 0b       	sbc	r19, r25
    10d0:	4a 0b       	sbc	r20, r26
    10d2:	5b 0b       	sbc	r21, r27
    10d4:	57 ff       	sbrs	r21, 7
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    10e0:	b9 01       	movw	r22, r18
    10e2:	ca 01       	movw	r24, r20
    10e4:	08 95       	ret

000010e6 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    10ea:	c0 91 5d 01 	lds	r28, 0x015D
    10ee:	d0 91 5e 01 	lds	r29, 0x015E
    10f2:	68 2f       	mov	r22, r24
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    10f6:	8d e0       	ldi	r24, 0x0D	; 13
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	68 9f       	mul	r22, r24
    10fc:	f0 01       	movw	r30, r0
    10fe:	69 9f       	mul	r22, r25
    1100:	f0 0d       	add	r31, r0
    1102:	78 9f       	mul	r23, r24
    1104:	f0 0d       	add	r31, r0
    1106:	11 24       	eor	r1, r1
    1108:	ec 0f       	add	r30, r28
    110a:	fd 1f       	adc	r31, r29
    110c:	df 01       	movw	r26, r30
    110e:	aa 58       	subi	r26, 0x8A	; 138
    1110:	bf 4f       	sbci	r27, 0xFF	; 255
    1112:	ee 58       	subi	r30, 0x8E	; 142
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	20 81       	ld	r18, Z
    1118:	31 81       	ldd	r19, Z+1	; 0x01
    111a:	42 81       	ldd	r20, Z+2	; 0x02
    111c:	53 81       	ldd	r21, Z+3	; 0x03
    111e:	8d 91       	ld	r24, X+
    1120:	9d 91       	ld	r25, X+
    1122:	0d 90       	ld	r0, X+
    1124:	bc 91       	ld	r27, X
    1126:	a0 2d       	mov	r26, r0
    1128:	28 1b       	sub	r18, r24
    112a:	39 0b       	sbc	r19, r25
    112c:	4a 0b       	sbc	r20, r26
    112e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1130:	57 fd       	sbrc	r21, 7
    1132:	07 c0       	rjmp	.+14     	; 0x1142 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    1134:	21 15       	cp	r18, r1
    1136:	31 05       	cpc	r19, r1
    1138:	41 05       	cpc	r20, r1
    113a:	51 05       	cpc	r21, r1
    113c:	11 f0       	breq	.+4      	; 0x1142 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	14 c0       	rjmp	.+40     	; 0x116a <Timebase_DownCounter_Period_Value_Expired+0x84>
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	8d e0       	ldi	r24, 0x0D	; 13
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	ac 01       	movw	r20, r24
    114a:	64 9f       	mul	r22, r20
    114c:	c0 01       	movw	r24, r0
    114e:	65 9f       	mul	r22, r21
    1150:	90 0d       	add	r25, r0
    1152:	74 9f       	mul	r23, r20
    1154:	90 0d       	add	r25, r0
    1156:	11 24       	eor	r1, r1
    1158:	c8 0f       	add	r28, r24
    115a:	d9 1f       	adc	r29, r25
    115c:	c3 59       	subi	r28, 0x93	; 147
    115e:	df 4f       	sbci	r29, 0xFF	; 255
    1160:	88 81       	ld	r24, Y
    1162:	80 ff       	sbrs	r24, 0
    1164:	21 e0       	ldi	r18, 0x01	; 1
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    116a:	82 2f       	mov	r24, r18
    116c:	df 91       	pop	r29
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1172:	1f 93       	push	r17
    1174:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    1176:	0e 94 73 08 	call	0x10e6	; 0x10e6 <Timebase_DownCounter_Period_Value_Expired>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	11 f0       	breq	.+4      	; 0x1182 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	18 c0       	rjmp	.+48     	; 0x11b2 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1182:	e0 91 5d 01 	lds	r30, 0x015D
    1186:	f0 91 5e 01 	lds	r31, 0x015E
    118a:	21 2f       	mov	r18, r17
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	8d e0       	ldi	r24, 0x0D	; 13
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	ac 01       	movw	r20, r24
    1194:	24 9f       	mul	r18, r20
    1196:	c0 01       	movw	r24, r0
    1198:	25 9f       	mul	r18, r21
    119a:	90 0d       	add	r25, r0
    119c:	34 9f       	mul	r19, r20
    119e:	90 0d       	add	r25, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	e8 0f       	add	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	e3 59       	subi	r30, 0x93	; 147
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	80 81       	ld	r24, Z
    11ac:	8e 7f       	andi	r24, 0xFE	; 254
    11ae:	80 83       	st	Z, r24
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    11b2:	1f 91       	pop	r17
    11b4:	08 95       	ret

000011b6 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    11b6:	1f 93       	push	r17
    11b8:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    11ba:	81 2f       	mov	r24, r17
    11bc:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    11c0:	1f 5f       	subi	r17, 0xFF	; 255
    11c2:	15 30       	cpi	r17, 0x05	; 5
    11c4:	d1 f7       	brne	.-12     	; 0x11ba <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    11c6:	1f 91       	pop	r17
    11c8:	08 95       	ret

000011ca <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    11ca:	40 91 5d 01 	lds	r20, 0x015D
    11ce:	50 91 5e 01 	lds	r21, 0x015E
    11d2:	da 01       	movw	r26, r20
    11d4:	a2 59       	subi	r26, 0x92	; 146
    11d6:	bf 4f       	sbci	r27, 0xFF	; 255
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    11dc:	6d e0       	ldi	r22, 0x0D	; 13
    11de:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    11e0:	1d 92       	st	X+, r1
    11e2:	1d 92       	st	X+, r1
    11e4:	1d 92       	st	X+, r1
    11e6:	1c 92       	st	X, r1
    11e8:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    11ea:	14 96       	adiw	r26, 0x04	; 4
    11ec:	1d 92       	st	X+, r1
    11ee:	1d 92       	st	X+, r1
    11f0:	1d 92       	st	X+, r1
    11f2:	1c 92       	st	X, r1
    11f4:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    11f6:	26 9f       	mul	r18, r22
    11f8:	f0 01       	movw	r30, r0
    11fa:	27 9f       	mul	r18, r23
    11fc:	f0 0d       	add	r31, r0
    11fe:	36 9f       	mul	r19, r22
    1200:	f0 0d       	add	r31, r0
    1202:	11 24       	eor	r1, r1
    1204:	e4 0f       	add	r30, r20
    1206:	f5 1f       	adc	r31, r21
    1208:	e3 59       	subi	r30, 0x93	; 147
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    120e:	80 7e       	andi	r24, 0xE0	; 224
    1210:	80 83       	st	Z, r24
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    1218:	25 30       	cpi	r18, 0x05	; 5
    121a:	31 05       	cpc	r19, r1
    121c:	09 f7       	brne	.-62     	; 0x11e0 <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    121e:	08 95       	ret

00001220 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1220:	e0 91 5d 01 	lds	r30, 0x015D
    1224:	f0 91 5e 01 	lds	r31, 0x015E
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	9c 01       	movw	r18, r24
    122c:	44 e0       	ldi	r20, 0x04	; 4
    122e:	22 0f       	add	r18, r18
    1230:	33 1f       	adc	r19, r19
    1232:	4a 95       	dec	r20
    1234:	e1 f7       	brne	.-8      	; 0x122e <Timebase_DownCounter_SS_Get_Status+0xe>
    1236:	28 0f       	add	r18, r24
    1238:	39 1f       	adc	r19, r25
    123a:	e2 0f       	add	r30, r18
    123c:	f3 1f       	adc	r31, r19
    123e:	80 8d       	ldd	r24, Z+24	; 0x18
    1240:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1242:	8f 70       	andi	r24, 0x0F	; 15
    1244:	08 95       	ret

00001246 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1246:	e0 91 5d 01 	lds	r30, 0x015D
    124a:	f0 91 5e 01 	lds	r31, 0x015E
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	9c 01       	movw	r18, r24
    1252:	54 e0       	ldi	r21, 0x04	; 4
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	5a 95       	dec	r21
    125a:	e1 f7       	brne	.-8      	; 0x1254 <Timebase_DownCounter_SS_Set_Status+0xe>
    125c:	28 0f       	add	r18, r24
    125e:	39 1f       	adc	r19, r25
    1260:	e2 0f       	add	r30, r18
    1262:	f3 1f       	adc	r31, r19
    1264:	6f 70       	andi	r22, 0x0F	; 15
    1266:	66 0f       	add	r22, r22
    1268:	80 8d       	ldd	r24, Z+24	; 0x18
    126a:	81 7e       	andi	r24, 0xE1	; 225
    126c:	86 2b       	or	r24, r22
    126e:	80 8f       	std	Z+24, r24	; 0x18
}
    1270:	08 95       	ret

00001272 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1272:	e0 91 5d 01 	lds	r30, 0x015D
    1276:	f0 91 5e 01 	lds	r31, 0x015E
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	9c 01       	movw	r18, r24
    127e:	64 e0       	ldi	r22, 0x04	; 4
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	6a 95       	dec	r22
    1286:	e1 f7       	brne	.-8      	; 0x1280 <Timebase_DownCounter_SS_Get_Value+0xe>
    1288:	28 0f       	add	r18, r24
    128a:	39 1f       	adc	r19, r25
    128c:	e2 0f       	add	r30, r18
    128e:	f3 1f       	adc	r31, r19
    1290:	df 01       	movw	r26, r30
    1292:	91 96       	adiw	r26, 0x21	; 33
    1294:	61 a1       	ldd	r22, Z+33	; 0x21
    1296:	11 96       	adiw	r26, 0x01	; 1
    1298:	7c 91       	ld	r23, X
    129a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
    129c:	12 96       	adiw	r26, 0x02	; 2
    129e:	8c 91       	ld	r24, X
    12a0:	12 97       	sbiw	r26, 0x02	; 2
    12a2:	13 96       	adiw	r26, 0x03	; 3
    12a4:	9c 91       	ld	r25, X
    12a6:	08 95       	ret

000012a8 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    12a8:	e0 91 5d 01 	lds	r30, 0x015D
    12ac:	f0 91 5e 01 	lds	r31, 0x015E
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 01       	movw	r18, r24
    12b4:	a4 e0       	ldi	r26, 0x04	; 4
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	aa 95       	dec	r26
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <Timebase_DownCounter_SS_Set_Value+0xe>
    12be:	28 0f       	add	r18, r24
    12c0:	39 1f       	adc	r19, r25
    12c2:	e2 0f       	add	r30, r18
    12c4:	f3 1f       	adc	r31, r19
    12c6:	41 a3       	std	Z+33, r20	; 0x21
    12c8:	52 a3       	std	Z+34, r21	; 0x22
    12ca:	63 a3       	std	Z+35, r22	; 0x23
    12cc:	74 a3       	std	Z+36, r23	; 0x24
}
    12ce:	08 95       	ret

000012d0 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    12d0:	e0 91 5d 01 	lds	r30, 0x015D
    12d4:	f0 91 5e 01 	lds	r31, 0x015E
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	9c 01       	movw	r18, r24
    12dc:	b4 e0       	ldi	r27, 0x04	; 4
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	ba 95       	dec	r27
    12e4:	e1 f7       	brne	.-8      	; 0x12de <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    12e6:	28 0f       	add	r18, r24
    12e8:	39 1f       	adc	r19, r25
    12ea:	e2 0f       	add	r30, r18
    12ec:	f3 1f       	adc	r31, r19
    12ee:	df 01       	movw	r26, r30
    12f0:	59 96       	adiw	r26, 0x19	; 25
    12f2:	61 8d       	ldd	r22, Z+25	; 0x19
    12f4:	11 96       	adiw	r26, 0x01	; 1
    12f6:	7c 91       	ld	r23, X
    12f8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
    12fa:	12 96       	adiw	r26, 0x02	; 2
    12fc:	8c 91       	ld	r24, X
    12fe:	12 97       	sbiw	r26, 0x02	; 2
    1300:	13 96       	adiw	r26, 0x03	; 3
    1302:	9c 91       	ld	r25, X
    1304:	08 95       	ret

00001306 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1306:	e0 91 5d 01 	lds	r30, 0x015D
    130a:	f0 91 5e 01 	lds	r31, 0x015E
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 01       	movw	r18, r24
    1312:	44 e0       	ldi	r20, 0x04	; 4
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	4a 95       	dec	r20
    131a:	e1 f7       	brne	.-8      	; 0x1314 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    131c:	28 0f       	add	r18, r24
    131e:	39 1f       	adc	r19, r25
    1320:	e2 0f       	add	r30, r18
    1322:	f3 1f       	adc	r31, r19
    1324:	df 01       	movw	r26, r30
    1326:	5d 96       	adiw	r26, 0x1d	; 29
    1328:	65 8d       	ldd	r22, Z+29	; 0x1d
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	7c 91       	ld	r23, X
    132e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	8c 91       	ld	r24, X
    1334:	12 97       	sbiw	r26, 0x02	; 2
    1336:	13 96       	adiw	r26, 0x03	; 3
    1338:	9c 91       	ld	r25, X
    133a:	08 95       	ret

0000133c <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    133c:	e0 91 5d 01 	lds	r30, 0x015D
    1340:	f0 91 5e 01 	lds	r31, 0x015E
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 01       	movw	r18, r24
    1348:	a4 e0       	ldi	r26, 0x04	; 4
    134a:	22 0f       	add	r18, r18
    134c:	33 1f       	adc	r19, r19
    134e:	aa 95       	dec	r26
    1350:	e1 f7       	brne	.-8      	; 0x134a <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1352:	28 0f       	add	r18, r24
    1354:	39 1f       	adc	r19, r25
    1356:	e2 0f       	add	r30, r18
    1358:	f3 1f       	adc	r31, r19
    135a:	41 8f       	std	Z+25, r20	; 0x19
    135c:	52 8f       	std	Z+26, r21	; 0x1a
    135e:	63 8f       	std	Z+27, r22	; 0x1b
    1360:	74 8f       	std	Z+28, r23	; 0x1c
}
    1362:	08 95       	ret

00001364 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1364:	e0 91 5d 01 	lds	r30, 0x015D
    1368:	f0 91 5e 01 	lds	r31, 0x015E
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	9c 01       	movw	r18, r24
    1370:	b4 e0       	ldi	r27, 0x04	; 4
    1372:	22 0f       	add	r18, r18
    1374:	33 1f       	adc	r19, r19
    1376:	ba 95       	dec	r27
    1378:	e1 f7       	brne	.-8      	; 0x1372 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    137a:	28 0f       	add	r18, r24
    137c:	39 1f       	adc	r19, r25
    137e:	e2 0f       	add	r30, r18
    1380:	f3 1f       	adc	r31, r19
    1382:	45 8f       	std	Z+29, r20	; 0x1d
    1384:	56 8f       	std	Z+30, r21	; 0x1e
    1386:	67 8f       	std	Z+31, r22	; 0x1f
    1388:	70 a3       	std	Z+32, r23	; 0x20
}
    138a:	08 95       	ret

0000138c <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    138c:	e0 91 5d 01 	lds	r30, 0x015D
    1390:	f0 91 5e 01 	lds	r31, 0x015E
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9c 01       	movw	r18, r24
    1398:	44 e0       	ldi	r20, 0x04	; 4
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	4a 95       	dec	r20
    13a0:	e1 f7       	brne	.-8      	; 0x139a <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    13a2:	28 0f       	add	r18, r24
    13a4:	39 1f       	adc	r19, r25
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	df 01       	movw	r26, r30
    13ac:	95 96       	adiw	r26, 0x25	; 37
    13ae:	65 a1       	ldd	r22, Z+37	; 0x25
    13b0:	11 96       	adiw	r26, 0x01	; 1
    13b2:	7c 91       	ld	r23, X
    13b4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	8c 91       	ld	r24, X
    13ba:	12 97       	sbiw	r26, 0x02	; 2
    13bc:	13 96       	adiw	r26, 0x03	; 3
    13be:	9c 91       	ld	r25, X
    13c0:	08 95       	ret

000013c2 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    13c2:	e0 91 5d 01 	lds	r30, 0x015D
    13c6:	f0 91 5e 01 	lds	r31, 0x015E
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    13ce:	77 ff       	sbrs	r23, 7
    13d0:	0f c0       	rjmp	.+30     	; 0x13f0 <Timebase_DownCounter_SS_Set_PeriodValue+0x2e>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    13d2:	c9 01       	movw	r24, r18
    13d4:	b4 e0       	ldi	r27, 0x04	; 4
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	ba 95       	dec	r27
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    13de:	82 0f       	add	r24, r18
    13e0:	93 1f       	adc	r25, r19
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
    13e6:	15 a2       	std	Z+37, r1	; 0x25
    13e8:	16 a2       	std	Z+38, r1	; 0x26
    13ea:	17 a2       	std	Z+39, r1	; 0x27
    13ec:	10 a6       	std	Z+40, r1	; 0x28
    13ee:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    13f0:	c9 01       	movw	r24, r18
    13f2:	a4 e0       	ldi	r26, 0x04	; 4
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	aa 95       	dec	r26
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	e8 0f       	add	r30, r24
    1402:	f9 1f       	adc	r31, r25
    1404:	45 a3       	std	Z+37, r20	; 0x25
    1406:	56 a3       	std	Z+38, r21	; 0x26
    1408:	67 a3       	std	Z+39, r22	; 0x27
    140a:	70 a7       	std	Z+40, r23	; 0x28
    140c:	08 95       	ret

0000140e <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    140e:	e0 91 5d 01 	lds	r30, 0x015D
    1412:	f0 91 5e 01 	lds	r31, 0x015E
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9c 01       	movw	r18, r24
    141a:	44 e0       	ldi	r20, 0x04	; 4
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	4a 95       	dec	r20
    1422:	e1 f7       	brne	.-8      	; 0x141c <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1424:	28 0f       	add	r18, r24
    1426:	39 1f       	adc	r19, r25
    1428:	e2 0f       	add	r30, r18
    142a:	f3 1f       	adc	r31, r19
    142c:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	08 95       	ret

00001432 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1432:	e0 91 5d 01 	lds	r30, 0x015D
    1436:	f0 91 5e 01 	lds	r31, 0x015E
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 01       	movw	r18, r24
    143e:	54 e0       	ldi	r21, 0x04	; 4
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	5a 95       	dec	r21
    1446:	e1 f7       	brne	.-8      	; 0x1440 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1448:	28 0f       	add	r18, r24
    144a:	39 1f       	adc	r19, r25
    144c:	e2 0f       	add	r30, r18
    144e:	f3 1f       	adc	r31, r19
    1450:	80 8d       	ldd	r24, Z+24	; 0x18
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	80 8f       	std	Z+24, r24	; 0x18
}
    1456:	08 95       	ret

00001458 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1458:	e0 91 5d 01 	lds	r30, 0x015D
    145c:	f0 91 5e 01 	lds	r31, 0x015E
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9c 01       	movw	r18, r24
    1464:	64 e0       	ldi	r22, 0x04	; 4
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	6a 95       	dec	r22
    146c:	e1 f7       	brne	.-8      	; 0x1466 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    146e:	28 0f       	add	r18, r24
    1470:	39 1f       	adc	r19, r25
    1472:	e2 0f       	add	r30, r18
    1474:	f3 1f       	adc	r31, r19
    1476:	80 8d       	ldd	r24, Z+24	; 0x18
    1478:	8e 7f       	andi	r24, 0xFE	; 254
    147a:	80 8f       	std	Z+24, r24	; 0x18
}
    147c:	08 95       	ret

0000147e <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    147e:	e0 91 5d 01 	lds	r30, 0x015D
    1482:	f0 91 5e 01 	lds	r31, 0x015E
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 01       	movw	r18, r24
    148a:	74 e0       	ldi	r23, 0x04	; 4
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	7a 95       	dec	r23
    1492:	e1 f7       	brne	.-8      	; 0x148c <Timebase_DownCounter_SS_Reset+0xe>
    1494:	28 0f       	add	r18, r24
    1496:	39 1f       	adc	r19, r25
    1498:	e2 0f       	add	r30, r18
    149a:	f3 1f       	adc	r31, r19
    149c:	15 8e       	std	Z+29, r1	; 0x1d
    149e:	16 8e       	std	Z+30, r1	; 0x1e
    14a0:	17 8e       	std	Z+31, r1	; 0x1f
    14a2:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    14a4:	11 8e       	std	Z+25, r1	; 0x19
    14a6:	12 8e       	std	Z+26, r1	; 0x1a
    14a8:	13 8e       	std	Z+27, r1	; 0x1b
    14aa:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    14ac:	11 a2       	std	Z+33, r1	; 0x21
    14ae:	12 a2       	std	Z+34, r1	; 0x22
    14b0:	13 a2       	std	Z+35, r1	; 0x23
    14b2:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    14b4:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    14b6:	80 7e       	andi	r24, 0xE0	; 224
    14b8:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    14ba:	08 95       	ret

000014bc <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    14bc:	e0 91 5d 01 	lds	r30, 0x015D
    14c0:	f0 91 5e 01 	lds	r31, 0x015E
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	9c 01       	movw	r18, r24
    14c8:	a4 e0       	ldi	r26, 0x04	; 4
    14ca:	22 0f       	add	r18, r18
    14cc:	33 1f       	adc	r19, r19
    14ce:	aa 95       	dec	r26
    14d0:	e1 f7       	brne	.-8      	; 0x14ca <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    14d2:	28 0f       	add	r18, r24
    14d4:	39 1f       	adc	r19, r25
    14d6:	e2 0f       	add	r30, r18
    14d8:	f3 1f       	adc	r31, r19
    14da:	15 8e       	std	Z+29, r1	; 0x1d
    14dc:	16 8e       	std	Z+30, r1	; 0x1e
    14de:	17 8e       	std	Z+31, r1	; 0x1f
    14e0:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    14e2:	11 8e       	std	Z+25, r1	; 0x19
    14e4:	12 8e       	std	Z+26, r1	; 0x1a
    14e6:	13 8e       	std	Z+27, r1	; 0x1b
    14e8:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    14ea:	11 a2       	std	Z+33, r1	; 0x21
    14ec:	12 a2       	std	Z+34, r1	; 0x22
    14ee:	13 a2       	std	Z+35, r1	; 0x23
    14f0:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    14f2:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    14f4:	80 7e       	andi	r24, 0xE0	; 224
    14f6:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    14f8:	08 95       	ret

000014fa <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    14fa:	e0 91 5d 01 	lds	r30, 0x015D
    14fe:	f0 91 5e 01 	lds	r31, 0x015E
    1502:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1504:	9c 01       	movw	r18, r24
    1506:	b4 e0       	ldi	r27, 0x04	; 4
    1508:	22 0f       	add	r18, r18
    150a:	33 1f       	adc	r19, r19
    150c:	ba 95       	dec	r27
    150e:	e1 f7       	brne	.-8      	; 0x1508 <Timebase_DownCounter_SS_Start+0xe>
    1510:	28 0f       	add	r18, r24
    1512:	39 1f       	adc	r19, r25
    1514:	e2 0f       	add	r30, r18
    1516:	f3 1f       	adc	r31, r19
    1518:	90 8d       	ldd	r25, Z+24	; 0x18
    151a:	89 2f       	mov	r24, r25
    151c:	86 95       	lsr	r24
    151e:	8f 70       	andi	r24, 0x0F	; 15
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	19 f0       	breq	.+6      	; 0x152a <Timebase_DownCounter_SS_Start+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1524:	91 7e       	andi	r25, 0xE1	; 225
    1526:	92 60       	ori	r25, 0x02	; 2
    1528:	90 8f       	std	Z+24, r25	; 0x18
    152a:	08 95       	ret

0000152c <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    152c:	e0 91 5d 01 	lds	r30, 0x015D
    1530:	f0 91 5e 01 	lds	r31, 0x015E
    1534:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1536:	9c 01       	movw	r18, r24
    1538:	44 e0       	ldi	r20, 0x04	; 4
    153a:	22 0f       	add	r18, r18
    153c:	33 1f       	adc	r19, r19
    153e:	4a 95       	dec	r20
    1540:	e1 f7       	brne	.-8      	; 0x153a <Timebase_DownCounter_SS_Stop+0xe>
    1542:	28 0f       	add	r18, r24
    1544:	39 1f       	adc	r19, r25
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	90 8d       	ldd	r25, Z+24	; 0x18
    154c:	89 2f       	mov	r24, r25
    154e:	86 95       	lsr	r24
    1550:	8f 70       	andi	r24, 0x0F	; 15
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	19 f0       	breq	.+6      	; 0x155c <Timebase_DownCounter_SS_Stop+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1556:	91 7e       	andi	r25, 0xE1	; 225
    1558:	94 60       	ori	r25, 0x04	; 4
    155a:	90 8f       	std	Z+24, r25	; 0x18
    155c:	08 95       	ret

0000155e <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    155e:	2f 92       	push	r2
    1560:	3f 92       	push	r3
    1562:	4f 92       	push	r4
    1564:	5f 92       	push	r5
    1566:	6f 92       	push	r6
    1568:	7f 92       	push	r7
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	4a 01       	movw	r8, r20
    158c:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    158e:	20 91 5d 01 	lds	r18, 0x015D
    1592:	30 91 5e 01 	lds	r19, 0x015E
    1596:	3c 83       	std	Y+4, r19	; 0x04
    1598:	2b 83       	std	Y+3, r18	; 0x03
    159a:	a8 2f       	mov	r26, r24
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ba 83       	std	Y+2, r27	; 0x02
    15a0:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    15a2:	fd 01       	movw	r30, r26
    15a4:	64 e0       	ldi	r22, 0x04	; 4
    15a6:	ee 0f       	add	r30, r30
    15a8:	ff 1f       	adc	r31, r31
    15aa:	6a 95       	dec	r22
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <Timebase_DownCounter_SS_Set_Securely+0x48>
    15ae:	ea 0f       	add	r30, r26
    15b0:	fb 1f       	adc	r31, r27
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	80 8d       	ldd	r24, Z+24	; 0x18
    15b8:	86 95       	lsr	r24
    15ba:	8f 70       	andi	r24, 0x0F	; 15
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <Timebase_DownCounter_SS_Set_Securely+0x62>
    15be:	6d c0       	rjmp	.+218    	; 0x169a <Timebase_DownCounter_SS_Set_Securely+0x13c>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    15c0:	81 a2       	std	Z+33, r8	; 0x21
    15c2:	92 a2       	std	Z+34, r9	; 0x22
    15c4:	a3 a2       	std	Z+35, r10	; 0x23
    15c6:	b4 a2       	std	Z+36, r11	; 0x24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    15c8:	f9 01       	movw	r30, r18
    15ca:	c0 84       	ldd	r12, Z+8	; 0x08
    15cc:	d1 84       	ldd	r13, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15ce:	22 84       	ldd	r2, Z+10	; 0x0a
    15d0:	33 84       	ldd	r3, Z+11	; 0x0b
    15d2:	44 84       	ldd	r4, Z+12	; 0x0c
    15d4:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    15d6:	21 81       	ldd	r18, Z+1	; 0x01
    15d8:	32 81       	ldd	r19, Z+2	; 0x02
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
    15de:	c5 01       	movw	r24, r10
    15e0:	b4 01       	movw	r22, r8
    15e2:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    15e6:	7b 01       	movw	r14, r22
    15e8:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    15ea:	ab 81       	ldd	r26, Y+3	; 0x03
    15ec:	bc 81       	ldd	r27, Y+4	; 0x04
    15ee:	11 96       	adiw	r26, 0x01	; 1
    15f0:	2d 91       	ld	r18, X+
    15f2:	3c 91       	ld	r19, X
    15f4:	12 97       	sbiw	r26, 0x02	; 2
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	c5 01       	movw	r24, r10
    15fc:	b4 01       	movw	r22, r8
    15fe:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1602:	c9 01       	movw	r24, r18
    1604:	da 01       	movw	r26, r20
    1606:	3c 01       	movw	r6, r24
    1608:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    160a:	56 01       	movw	r10, r12
    160c:	cc 24       	eor	r12, r12
    160e:	dd 24       	eor	r13, r13
    1610:	ae 0c       	add	r10, r14
    1612:	bf 1c       	adc	r11, r15
    1614:	c0 1e       	adc	r12, r16
    1616:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1618:	eb 81       	ldd	r30, Y+3	; 0x03
    161a:	fc 81       	ldd	r31, Y+4	; 0x04
    161c:	81 81       	ldd	r24, Z+1	; 0x01
    161e:	92 81       	ldd	r25, Z+2	; 0x02
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	a8 16       	cp	r10, r24
    1626:	b9 06       	cpc	r11, r25
    1628:	ca 06       	cpc	r12, r26
    162a:	db 06       	cpc	r13, r27
    162c:	94 f0       	brlt	.+36     	; 0x1652 <Timebase_DownCounter_SS_Set_Securely+0xf4>
	  sec_val += 1;
    162e:	08 94       	sec
    1630:	61 1c       	adc	r6, r1
    1632:	71 1c       	adc	r7, r1
    1634:	81 1c       	adc	r8, r1
    1636:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1638:	21 81       	ldd	r18, Z+1	; 0x01
    163a:	32 81       	ldd	r19, Z+2	; 0x02
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	c6 01       	movw	r24, r12
    1642:	b5 01       	movw	r22, r10
    1644:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1648:	ac 01       	movw	r20, r24
    164a:	cb 01       	movw	r24, r22
    164c:	da 01       	movw	r26, r20
    164e:	5c 01       	movw	r10, r24
    1650:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1652:	e9 81       	ldd	r30, Y+1	; 0x01
    1654:	fa 81       	ldd	r31, Y+2	; 0x02
    1656:	54 e0       	ldi	r21, 0x04	; 4
    1658:	ee 0f       	add	r30, r30
    165a:	ff 1f       	adc	r31, r31
    165c:	5a 95       	dec	r21
    165e:	e1 f7       	brne	.-8      	; 0x1658 <Timebase_DownCounter_SS_Set_Securely+0xfa>
    1660:	29 81       	ldd	r18, Y+1	; 0x01
    1662:	3a 81       	ldd	r19, Y+2	; 0x02
    1664:	e2 0f       	add	r30, r18
    1666:	f3 1f       	adc	r31, r19
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	e8 0f       	add	r30, r24
    166e:	f9 1f       	adc	r31, r25
    1670:	26 0c       	add	r2, r6
    1672:	37 1c       	adc	r3, r7
    1674:	48 1c       	adc	r4, r8
    1676:	59 1c       	adc	r5, r9
    1678:	21 8e       	std	Z+25, r2	; 0x19
    167a:	32 8e       	std	Z+26, r3	; 0x1a
    167c:	43 8e       	std	Z+27, r4	; 0x1b
    167e:	54 8e       	std	Z+28, r5	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1680:	a5 8e       	std	Z+29, r10	; 0x1d
    1682:	b6 8e       	std	Z+30, r11	; 0x1e
    1684:	c7 8e       	std	Z+31, r12	; 0x1f
    1686:	d0 a2       	std	Z+32, r13	; 0x20
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1688:	90 8d       	ldd	r25, Z+24	; 0x18
    168a:	89 2f       	mov	r24, r25
    168c:	86 95       	lsr	r24
    168e:	8f 70       	andi	r24, 0x0F	; 15
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	19 f0       	breq	.+6      	; 0x169a <Timebase_DownCounter_SS_Set_Securely+0x13c>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1694:	91 7e       	andi	r25, 0xE1	; 225
    1696:	92 60       	ori	r25, 0x02	; 2
    1698:	90 8f       	std	Z+24, r25	; 0x18
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	5f 90       	pop	r5
    16c0:	4f 90       	pop	r4
    16c2:	3f 90       	pop	r3
    16c4:	2f 90       	pop	r2
    16c6:	08 95       	ret

000016c8 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    16c8:	e0 91 5d 01 	lds	r30, 0x015D
    16cc:	f0 91 5e 01 	lds	r31, 0x015E
    16d0:	a8 2f       	mov	r26, r24
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	9d 01       	movw	r18, r26
    16d6:	94 e0       	ldi	r25, 0x04	; 4
    16d8:	22 0f       	add	r18, r18
    16da:	33 1f       	adc	r19, r19
    16dc:	9a 95       	dec	r25
    16de:	e1 f7       	brne	.-8      	; 0x16d8 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    16e0:	2a 0f       	add	r18, r26
    16e2:	3b 1f       	adc	r19, r27
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	15 8e       	std	Z+29, r1	; 0x1d
    16ea:	16 8e       	std	Z+30, r1	; 0x1e
    16ec:	17 8e       	std	Z+31, r1	; 0x1f
    16ee:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    16f0:	11 8e       	std	Z+25, r1	; 0x19
    16f2:	12 8e       	std	Z+26, r1	; 0x1a
    16f4:	13 8e       	std	Z+27, r1	; 0x1b
    16f6:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    16f8:	11 a2       	std	Z+33, r1	; 0x21
    16fa:	12 a2       	std	Z+34, r1	; 0x22
    16fc:	13 a2       	std	Z+35, r1	; 0x23
    16fe:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1700:	90 8d       	ldd	r25, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1702:	90 7e       	andi	r25, 0xE0	; 224
    1704:	90 8f       	std	Z+24, r25	; 0x18
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1706:	0e 94 af 0a 	call	0x155e	; 0x155e <Timebase_DownCounter_SS_Set_Securely>
} 
    170a:	08 95       	ret

0000170c <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    170c:	2f 92       	push	r2
    170e:	3f 92       	push	r3
    1710:	4f 92       	push	r4
    1712:	5f 92       	push	r5
    1714:	6f 92       	push	r6
    1716:	7f 92       	push	r7
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <Timebase_DownCounter_SS_Update+0x26>
    1732:	00 d0       	rcall	.+0      	; 0x1734 <Timebase_DownCounter_SS_Update+0x28>
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1738:	20 91 5d 01 	lds	r18, 0x015D
    173c:	30 91 5e 01 	lds	r19, 0x015E
    1740:	3c 83       	std	Y+4, r19	; 0x04
    1742:	2b 83       	std	Y+3, r18	; 0x03
    1744:	c8 2e       	mov	r12, r24
    1746:	dd 24       	eor	r13, r13
    1748:	c6 01       	movw	r24, r12
    174a:	44 e0       	ldi	r20, 0x04	; 4
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	4a 95       	dec	r20
    1752:	e1 f7       	brne	.-8      	; 0x174c <Timebase_DownCounter_SS_Update+0x40>
    1754:	8c 0d       	add	r24, r12
    1756:	9d 1d       	adc	r25, r13
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	9a 83       	std	Y+2, r25	; 0x02
    175e:	89 83       	std	Y+1, r24	; 0x01
    1760:	fc 01       	movw	r30, r24
    1762:	80 8d       	ldd	r24, Z+24	; 0x18
    1764:	86 95       	lsr	r24
    1766:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	09 f0       	breq	.+2      	; 0x176e <Timebase_DownCounter_SS_Update+0x62>
    176c:	56 c0       	rjmp	.+172    	; 0x181a <Timebase_DownCounter_SS_Update+0x10e>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    176e:	f9 01       	movw	r30, r18
    1770:	80 85       	ldd	r24, Z+8	; 0x08
    1772:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    1774:	4c 01       	movw	r8, r24
    1776:	aa 24       	eor	r10, r10
    1778:	bb 24       	eor	r11, r11
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    177a:	82 85       	ldd	r24, Z+10	; 0x0a
    177c:	93 85       	ldd	r25, Z+11	; 0x0b
    177e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1780:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    1782:	e9 81       	ldd	r30, Y+1	; 0x01
    1784:	fa 81       	ldd	r31, Y+2	; 0x02
    1786:	e1 8c       	ldd	r14, Z+25	; 0x19
    1788:	f2 8c       	ldd	r15, Z+26	; 0x1a
    178a:	03 8d       	ldd	r16, Z+27	; 0x1b
    178c:	14 8d       	ldd	r17, Z+28	; 0x1c
    178e:	e8 1a       	sub	r14, r24
    1790:	f9 0a       	sbc	r15, r25
    1792:	0a 0b       	sbc	r16, r26
    1794:	1b 0b       	sbc	r17, r27
    1796:	17 ff       	sbrs	r17, 7
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <Timebase_DownCounter_SS_Update+0x94>
    179a:	ee 24       	eor	r14, r14
    179c:	ff 24       	eor	r15, r15
    179e:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    17a0:	eb 81       	ldd	r30, Y+3	; 0x03
    17a2:	fc 81       	ldd	r31, Y+4	; 0x04
    17a4:	21 81       	ldd	r18, Z+1	; 0x01
    17a6:	32 81       	ldd	r19, Z+2	; 0x02
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	50 e0       	ldi	r21, 0x00	; 0
    17ac:	c8 01       	movw	r24, r16
    17ae:	b7 01       	movw	r22, r14
    17b0:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <__mulsi3>
	temp_s += temp_ss;
    17b4:	f6 01       	movw	r30, r12
    17b6:	24 e0       	ldi	r18, 0x04	; 4
    17b8:	ee 0f       	add	r30, r30
    17ba:	ff 1f       	adc	r31, r31
    17bc:	2a 95       	dec	r18
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <Timebase_DownCounter_SS_Update+0xac>
    17c0:	ec 0d       	add	r30, r12
    17c2:	fd 1d       	adc	r31, r13
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	e2 0f       	add	r30, r18
    17ca:	f3 1f       	adc	r31, r19
    17cc:	25 8d       	ldd	r18, Z+29	; 0x1d
    17ce:	36 8d       	ldd	r19, Z+30	; 0x1e
    17d0:	47 8d       	ldd	r20, Z+31	; 0x1f
    17d2:	50 a1       	ldd	r21, Z+32	; 0x20
    17d4:	28 19       	sub	r18, r8
    17d6:	39 09       	sbc	r19, r9
    17d8:	4a 09       	sbc	r20, r10
    17da:	5b 09       	sbc	r21, r11
    17dc:	26 0f       	add	r18, r22
    17de:	37 1f       	adc	r19, r23
    17e0:	48 1f       	adc	r20, r24
    17e2:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    17e4:	21 a3       	std	Z+33, r18	; 0x21
    17e6:	32 a3       	std	Z+34, r19	; 0x22
    17e8:	43 a3       	std	Z+35, r20	; 0x23
    17ea:	54 a3       	std	Z+36, r21	; 0x24
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    17ec:	12 16       	cp	r1, r18
    17ee:	13 06       	cpc	r1, r19
    17f0:	14 06       	cpc	r1, r20
    17f2:	15 06       	cpc	r1, r21
    17f4:	0c f4       	brge	.+2      	; 0x17f8 <Timebase_DownCounter_SS_Update+0xec>
    17f6:	4b c0       	rjmp	.+150    	; 0x188e <Timebase_DownCounter_SS_Update+0x182>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    17f8:	15 8e       	std	Z+29, r1	; 0x1d
    17fa:	16 8e       	std	Z+30, r1	; 0x1e
    17fc:	17 8e       	std	Z+31, r1	; 0x1f
    17fe:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1800:	11 8e       	std	Z+25, r1	; 0x19
    1802:	12 8e       	std	Z+26, r1	; 0x1a
    1804:	13 8e       	std	Z+27, r1	; 0x1b
    1806:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1808:	11 a2       	std	Z+33, r1	; 0x21
    180a:	12 a2       	std	Z+34, r1	; 0x22
    180c:	13 a2       	std	Z+35, r1	; 0x23
    180e:	14 a2       	std	Z+36, r1	; 0x24
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1810:	80 8d       	ldd	r24, Z+24	; 0x18
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1812:	80 7e       	andi	r24, 0xE0	; 224
    1814:	88 60       	ori	r24, 0x08	; 8
    1816:	80 8f       	std	Z+24, r24	; 0x18
    1818:	3a c0       	rjmp	.+116    	; 0x188e <Timebase_DownCounter_SS_Update+0x182>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	c1 f5       	brne	.+112    	; 0x188e <Timebase_DownCounter_SS_Update+0x182>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    181e:	eb 81       	ldd	r30, Y+3	; 0x03
    1820:	fc 81       	ldd	r31, Y+4	; 0x04
    1822:	60 84       	ldd	r6, Z+8	; 0x08
    1824:	71 84       	ldd	r7, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1826:	e2 84       	ldd	r14, Z+10	; 0x0a
    1828:	f3 84       	ldd	r15, Z+11	; 0x0b
    182a:	04 85       	ldd	r16, Z+12	; 0x0c
    182c:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    182e:	e9 81       	ldd	r30, Y+1	; 0x01
    1830:	fa 81       	ldd	r31, Y+2	; 0x02
    1832:	21 a0       	ldd	r2, Z+33	; 0x21
    1834:	32 a0       	ldd	r3, Z+34	; 0x22
    1836:	43 a0       	ldd	r4, Z+35	; 0x23
    1838:	54 a0       	ldd	r5, Z+36	; 0x24
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    183a:	eb 81       	ldd	r30, Y+3	; 0x03
    183c:	fc 81       	ldd	r31, Y+4	; 0x04
    183e:	21 81       	ldd	r18, Z+1	; 0x01
    1840:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    1842:	a1 80       	ldd	r10, Z+1	; 0x01
    1844:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	c2 01       	movw	r24, r4
    184c:	b1 01       	movw	r22, r2
    184e:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1852:	e2 0e       	add	r14, r18
    1854:	f3 1e       	adc	r15, r19
    1856:	04 1f       	adc	r16, r20
    1858:	15 1f       	adc	r17, r21
    185a:	e9 81       	ldd	r30, Y+1	; 0x01
    185c:	fa 81       	ldd	r31, Y+2	; 0x02
    185e:	e1 8e       	std	Z+25, r14	; 0x19
    1860:	f2 8e       	std	Z+26, r15	; 0x1a
    1862:	03 8f       	std	Z+27, r16	; 0x1b
    1864:	14 8f       	std	Z+28, r17	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1866:	cc 24       	eor	r12, r12
    1868:	dd 24       	eor	r13, r13
    186a:	c2 01       	movw	r24, r4
    186c:	b1 01       	movw	r22, r2
    186e:	a6 01       	movw	r20, r12
    1870:	95 01       	movw	r18, r10
    1872:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1876:	88 24       	eor	r8, r8
    1878:	99 24       	eor	r9, r9
    187a:	66 0e       	add	r6, r22
    187c:	77 1e       	adc	r7, r23
    187e:	88 1e       	adc	r8, r24
    1880:	99 1e       	adc	r9, r25
    1882:	e9 81       	ldd	r30, Y+1	; 0x01
    1884:	fa 81       	ldd	r31, Y+2	; 0x02
    1886:	65 8e       	std	Z+29, r6	; 0x1d
    1888:	76 8e       	std	Z+30, r7	; 0x1e
    188a:	87 8e       	std	Z+31, r8	; 0x1f
    188c:	90 a2       	std	Z+32, r9	; 0x20
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	df 90       	pop	r13
    18a4:	cf 90       	pop	r12
    18a6:	bf 90       	pop	r11
    18a8:	af 90       	pop	r10
    18aa:	9f 90       	pop	r9
    18ac:	8f 90       	pop	r8
    18ae:	7f 90       	pop	r7
    18b0:	6f 90       	pop	r6
    18b2:	5f 90       	pop	r5
    18b4:	4f 90       	pop	r4
    18b6:	3f 90       	pop	r3
    18b8:	2f 90       	pop	r2
    18ba:	08 95       	ret

000018bc <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	e0 91 5d 01 	lds	r30, 0x015D
    18c2:	f0 91 5e 01 	lds	r31, 0x015E
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9c 01       	movw	r18, r24
    18ca:	54 e0       	ldi	r21, 0x04	; 4
    18cc:	22 0f       	add	r18, r18
    18ce:	33 1f       	adc	r19, r19
    18d0:	5a 95       	dec	r21
    18d2:	e1 f7       	brne	.-8      	; 0x18cc <Timebase_DownCounter_SS_Expired+0x10>
    18d4:	28 0f       	add	r18, r24
    18d6:	39 1f       	adc	r19, r25
    18d8:	e2 0f       	add	r30, r18
    18da:	f3 1f       	adc	r31, r19
    18dc:	80 8d       	ldd	r24, Z+24	; 0x18
    18de:	86 95       	lsr	r24
    18e0:	8f 70       	andi	r24, 0x0F	; 15
    18e2:	84 30       	cpi	r24, 0x04	; 4
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <Timebase_DownCounter_SS_Expired+0x2c>
    18e6:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    18e8:	84 2f       	mov	r24, r20
    18ea:	08 95       	ret

000018ec <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    18ec:	e0 91 5d 01 	lds	r30, 0x015D
    18f0:	f0 91 5e 01 	lds	r31, 0x015E
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    18f6:	9c 01       	movw	r18, r24
    18f8:	64 e0       	ldi	r22, 0x04	; 4
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	6a 95       	dec	r22
    1900:	e1 f7       	brne	.-8      	; 0x18fa <Timebase_DownCounter_SS_Expired_Event+0xe>
    1902:	28 0f       	add	r18, r24
    1904:	39 1f       	adc	r19, r25
    1906:	e2 0f       	add	r30, r18
    1908:	f3 1f       	adc	r31, r19
    190a:	80 8d       	ldd	r24, Z+24	; 0x18
    190c:	86 95       	lsr	r24
    190e:	8f 70       	andi	r24, 0x0F	; 15
    1910:	84 30       	cpi	r24, 0x04	; 4
    1912:	11 f0       	breq	.+4      	; 0x1918 <Timebase_DownCounter_SS_Expired_Event+0x2c>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1918:	15 8e       	std	Z+29, r1	; 0x1d
    191a:	16 8e       	std	Z+30, r1	; 0x1e
    191c:	17 8e       	std	Z+31, r1	; 0x1f
    191e:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1920:	11 8e       	std	Z+25, r1	; 0x19
    1922:	12 8e       	std	Z+26, r1	; 0x1a
    1924:	13 8e       	std	Z+27, r1	; 0x1b
    1926:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1928:	11 a2       	std	Z+33, r1	; 0x21
    192a:	12 a2       	std	Z+34, r1	; 0x22
    192c:	13 a2       	std	Z+35, r1	; 0x23
    192e:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1930:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1932:	80 7e       	andi	r24, 0xE0	; 224
    1934:	80 8f       	std	Z+24, r24	; 0x18
    1936:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1938:	08 95       	ret

0000193a <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    193e:	c0 91 5d 01 	lds	r28, 0x015D
    1942:	d0 91 5e 01 	lds	r29, 0x015E
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    194a:	f9 01       	movw	r30, r18
    194c:	a4 e0       	ldi	r26, 0x04	; 4
    194e:	ee 0f       	add	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	aa 95       	dec	r26
    1954:	e1 f7       	brne	.-8      	; 0x194e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    1956:	e2 0f       	add	r30, r18
    1958:	f3 1f       	adc	r31, r19
    195a:	ec 0f       	add	r30, r28
    195c:	fd 1f       	adc	r31, r29
    195e:	80 8d       	ldd	r24, Z+24	; 0x18
    1960:	80 fd       	sbrc	r24, 0
    1962:	20 c0       	rjmp	.+64     	; 0x19a4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1964:	81 a1       	ldd	r24, Z+33	; 0x21
    1966:	92 a1       	ldd	r25, Z+34	; 0x22
    1968:	a3 a1       	ldd	r26, Z+35	; 0x23
    196a:	b4 a1       	ldd	r27, Z+36	; 0x24
    196c:	84 1b       	sub	r24, r20
    196e:	95 0b       	sbc	r25, r21
    1970:	a6 0b       	sbc	r26, r22
    1972:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1974:	b7 ff       	sbrs	r27, 7
    1976:	05 c0       	rjmp	.+10     	; 0x1982 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x48>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1978:	15 a2       	std	Z+37, r1	; 0x25
    197a:	16 a2       	std	Z+38, r1	; 0x26
    197c:	17 a2       	std	Z+39, r1	; 0x27
    197e:	10 a6       	std	Z+40, r1	; 0x28
    1980:	04 c0       	rjmp	.+8      	; 0x198a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1982:	85 a3       	std	Z+37, r24	; 0x25
    1984:	96 a3       	std	Z+38, r25	; 0x26
    1986:	a7 a3       	std	Z+39, r26	; 0x27
    1988:	b0 a7       	std	Z+40, r27	; 0x28
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    198a:	f9 01       	movw	r30, r18
    198c:	74 e0       	ldi	r23, 0x04	; 4
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	7a 95       	dec	r23
    1994:	e1 f7       	brne	.-8      	; 0x198e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    1996:	e2 0f       	add	r30, r18
    1998:	f3 1f       	adc	r31, r19
    199a:	ec 0f       	add	r30, r28
    199c:	fd 1f       	adc	r31, r29
    199e:	80 8d       	ldd	r24, Z+24	; 0x18
    19a0:	81 60       	ori	r24, 0x01	; 1
    19a2:	80 8f       	std	Z+24, r24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    19aa:	e0 91 5d 01 	lds	r30, 0x015D
    19ae:	f0 91 5e 01 	lds	r31, 0x015E
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    19b4:	9c 01       	movw	r18, r24
    19b6:	b4 e0       	ldi	r27, 0x04	; 4
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	ba 95       	dec	r27
    19be:	e1 f7       	brne	.-8      	; 0x19b8 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    19c0:	28 0f       	add	r18, r24
    19c2:	39 1f       	adc	r19, r25
    19c4:	e2 0f       	add	r30, r18
    19c6:	f3 1f       	adc	r31, r19
    19c8:	21 a1       	ldd	r18, Z+33	; 0x21
    19ca:	32 a1       	ldd	r19, Z+34	; 0x22
    19cc:	43 a1       	ldd	r20, Z+35	; 0x23
    19ce:	54 a1       	ldd	r21, Z+36	; 0x24
    19d0:	85 a1       	ldd	r24, Z+37	; 0x25
    19d2:	96 a1       	ldd	r25, Z+38	; 0x26
    19d4:	a7 a1       	ldd	r26, Z+39	; 0x27
    19d6:	b0 a5       	ldd	r27, Z+40	; 0x28
    19d8:	28 1b       	sub	r18, r24
    19da:	39 0b       	sbc	r19, r25
    19dc:	4a 0b       	sbc	r20, r26
    19de:	5b 0b       	sbc	r21, r27
    19e0:	57 ff       	sbrs	r21, 7
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x42>
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    19ec:	b9 01       	movw	r22, r18
    19ee:	ca 01       	movw	r24, r20
    19f0:	08 95       	ret

000019f2 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    19f6:	c0 91 5d 01 	lds	r28, 0x015D
    19fa:	d0 91 5e 01 	lds	r29, 0x015E
    19fe:	68 2f       	mov	r22, r24
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1a02:	fb 01       	movw	r30, r22
    1a04:	44 e0       	ldi	r20, 0x04	; 4
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	4a 95       	dec	r20
    1a0c:	e1 f7       	brne	.-8      	; 0x1a06 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    1a0e:	e6 0f       	add	r30, r22
    1a10:	f7 1f       	adc	r31, r23
    1a12:	ec 0f       	add	r30, r28
    1a14:	fd 1f       	adc	r31, r29
    1a16:	21 a1       	ldd	r18, Z+33	; 0x21
    1a18:	32 a1       	ldd	r19, Z+34	; 0x22
    1a1a:	43 a1       	ldd	r20, Z+35	; 0x23
    1a1c:	54 a1       	ldd	r21, Z+36	; 0x24
    1a1e:	85 a1       	ldd	r24, Z+37	; 0x25
    1a20:	96 a1       	ldd	r25, Z+38	; 0x26
    1a22:	a7 a1       	ldd	r26, Z+39	; 0x27
    1a24:	b0 a5       	ldd	r27, Z+40	; 0x28
    1a26:	28 1b       	sub	r18, r24
    1a28:	39 0b       	sbc	r19, r25
    1a2a:	4a 0b       	sbc	r20, r26
    1a2c:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1a2e:	57 fd       	sbrc	r21, 7
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1a32:	21 15       	cp	r18, r1
    1a34:	31 05       	cpc	r19, r1
    1a36:	41 05       	cpc	r20, r1
    1a38:	51 05       	cpc	r21, r1
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	10 c0       	rjmp	.+32     	; 0x1a60 <Timebase_DownCounter_SS_Period_Value_Expired+0x6e>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	cb 01       	movw	r24, r22
    1a44:	34 e0       	ldi	r19, 0x04	; 4
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	3a 95       	dec	r19
    1a4c:	e1 f7       	brne	.-8      	; 0x1a46 <Timebase_DownCounter_SS_Period_Value_Expired+0x54>
    1a4e:	86 0f       	add	r24, r22
    1a50:	97 1f       	adc	r25, r23
    1a52:	c8 0f       	add	r28, r24
    1a54:	d9 1f       	adc	r29, r25
    1a56:	88 8d       	ldd	r24, Y+24	; 0x18
    1a58:	80 ff       	sbrs	r24, 0
    1a5a:	21 e0       	ldi	r18, 0x01	; 1
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1a60:	82 2f       	mov	r24, r18
    1a62:	df 91       	pop	r29
    1a64:	cf 91       	pop	r28
    1a66:	08 95       	ret

00001a68 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1a68:	1f 93       	push	r17
    1a6a:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    1a6c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <Timebase_DownCounter_SS_Period_Value_Expired>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	11 f0       	breq	.+4      	; 0x1a78 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	14 c0       	rjmp	.+40     	; 0x1aa0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x38>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1a78:	e0 91 5d 01 	lds	r30, 0x015D
    1a7c:	f0 91 5e 01 	lds	r31, 0x015E
    1a80:	21 2f       	mov	r18, r17
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	c9 01       	movw	r24, r18
    1a86:	54 e0       	ldi	r21, 0x04	; 4
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	5a 95       	dec	r21
    1a8e:	e1 f7       	brne	.-8      	; 0x1a88 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    1a90:	82 0f       	add	r24, r18
    1a92:	93 1f       	adc	r25, r19
    1a94:	e8 0f       	add	r30, r24
    1a96:	f9 1f       	adc	r31, r25
    1a98:	80 8d       	ldd	r24, Z+24	; 0x18
    1a9a:	8e 7f       	andi	r24, 0xFE	; 254
    1a9c:	80 8f       	std	Z+24, r24	; 0x18
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1aa0:	1f 91       	pop	r17
    1aa2:	08 95       	ret

00001aa4 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    1aa4:	1f 93       	push	r17
    1aa6:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1aa8:	81 2f       	mov	r24, r17
    1aaa:	0e 94 86 0b 	call	0x170c	; 0x170c <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1aae:	1f 5f       	subi	r17, 0xFF	; 255
    1ab0:	15 30       	cpi	r17, 0x05	; 5
    1ab2:	d1 f7       	brne	.-12     	; 0x1aa8 <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    1ab4:	1f 91       	pop	r17
    1ab6:	08 95       	ret

00001ab8 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1ab8:	40 91 5d 01 	lds	r20, 0x015D
    1abc:	50 91 5e 01 	lds	r21, 0x015E
    1ac0:	da 01       	movw	r26, r20
    1ac2:	59 96       	adiw	r26, 0x19	; 25
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	14 96       	adiw	r26, 0x04	; 4
    1aca:	1d 92       	st	X+, r1
    1acc:	1d 92       	st	X+, r1
    1ace:	1d 92       	st	X+, r1
    1ad0:	1c 92       	st	X, r1
    1ad2:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ad4:	1d 92       	st	X+, r1
    1ad6:	1d 92       	st	X+, r1
    1ad8:	1d 92       	st	X+, r1
    1ada:	1c 92       	st	X, r1
    1adc:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ade:	18 96       	adiw	r26, 0x08	; 8
    1ae0:	1d 92       	st	X+, r1
    1ae2:	1d 92       	st	X+, r1
    1ae4:	1d 92       	st	X+, r1
    1ae6:	1c 92       	st	X, r1
    1ae8:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1aea:	f9 01       	movw	r30, r18
    1aec:	64 e0       	ldi	r22, 0x04	; 4
    1aee:	ee 0f       	add	r30, r30
    1af0:	ff 1f       	adc	r31, r31
    1af2:	6a 95       	dec	r22
    1af4:	e1 f7       	brne	.-8      	; 0x1aee <Timebase_DownCounter_SS_Reset_All+0x36>
    1af6:	e2 0f       	add	r30, r18
    1af8:	f3 1f       	adc	r31, r19
    1afa:	e4 0f       	add	r30, r20
    1afc:	f5 1f       	adc	r31, r21
    1afe:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1b00:	80 7e       	andi	r24, 0xE0	; 224
    1b02:	80 8f       	std	Z+24, r24	; 0x18
    1b04:	2f 5f       	subi	r18, 0xFF	; 255
    1b06:	3f 4f       	sbci	r19, 0xFF	; 255
    1b08:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1b0a:	25 30       	cpi	r18, 0x05	; 5
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	e1 f6       	brne	.-72     	; 0x1ac8 <Timebase_DownCounter_SS_Reset_All+0x10>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1b10:	08 95       	ret

00001b12 <Timebase_Reset>:
void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1b12:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1b16:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Timebase_DownCounter_Reset_All>
  #endif
  
}
    1b1a:	08 95       	ret

00001b1c <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1b1c:	0f 93       	push	r16
    1b1e:	1f 93       	push	r17
    1b20:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1b22:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1b26:	c8 01       	movw	r24, r16
    1b28:	0e 94 7e 03 	call	0x6fc	; 0x6fc <Timebase_Timer_Config>
  Timebase_Reset();
    1b2c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <Timebase_Reset>
}
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <Timebase_Main_Loop_Executables>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Update_All();
    1b36:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <Timebase_DownCounter_SS_Update_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1b3a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <Timebase_DownCounter_Update_All>
  #endif
}
    1b3e:	08 95       	ret

00001b40 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1b40:	e0 91 5d 01 	lds	r30, 0x015D
    1b44:	f0 91 5e 01 	lds	r31, 0x015E
    1b48:	80 85       	ldd	r24, Z+8	; 0x08
    1b4a:	91 85       	ldd	r25, Z+9	; 0x09
    1b4c:	01 96       	adiw	r24, 0x01	; 1
    1b4e:	91 87       	std	Z+9, r25	; 0x09
    1b50:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b52:	83 81       	ldd	r24, Z+3	; 0x03
    1b54:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1b56:	80 85       	ldd	r24, Z+8	; 0x08
    1b58:	91 85       	ldd	r25, Z+9	; 0x09
    1b5a:	61 81       	ldd	r22, Z+1	; 0x01
    1b5c:	72 81       	ldd	r23, Z+2	; 0x02
    1b5e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__udivmodhi4>
    1b62:	89 2b       	or	r24, r25
    1b64:	69 f4       	brne	.+26     	; 0x1b80 <Timebase_ISR_Executables+0x40>
    Timebase->Time.Seconds++;
    1b66:	82 85       	ldd	r24, Z+10	; 0x0a
    1b68:	93 85       	ldd	r25, Z+11	; 0x0b
    1b6a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b6c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b6e:	01 96       	adiw	r24, 0x01	; 1
    1b70:	a1 1d       	adc	r26, r1
    1b72:	b1 1d       	adc	r27, r1
    1b74:	82 87       	std	Z+10, r24	; 0x0a
    1b76:	93 87       	std	Z+11, r25	; 0x0b
    1b78:	a4 87       	std	Z+12, r26	; 0x0c
    1b7a:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    1b7c:	11 86       	std	Z+9, r1	; 0x09
    1b7e:	10 86       	std	Z+8, r1	; 0x08
    1b80:	08 95       	ret

00001b82 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    1b82:	1f 92       	push	r1
    1b84:	0f 92       	push	r0
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	0f 92       	push	r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
  PORTD|=(1<<5);
    1ba4:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    1ba6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    1baa:	5d 98       	cbi	0x0b, 5	; 11
}
    1bac:	ff 91       	pop	r31
    1bae:	ef 91       	pop	r30
    1bb0:	bf 91       	pop	r27
    1bb2:	af 91       	pop	r26
    1bb4:	9f 91       	pop	r25
    1bb6:	8f 91       	pop	r24
    1bb8:	7f 91       	pop	r23
    1bba:	6f 91       	pop	r22
    1bbc:	5f 91       	pop	r21
    1bbe:	4f 91       	pop	r20
    1bc0:	3f 91       	pop	r19
    1bc2:	2f 91       	pop	r18
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
    1bce:	2f 92       	push	r2
    1bd0:	3f 92       	push	r3
    1bd2:	4f 92       	push	r4
    1bd4:	5f 92       	push	r5
    1bd6:	6f 92       	push	r6
    1bd8:	7f 92       	push	r7
    1bda:	8f 92       	push	r8
    1bdc:	9f 92       	push	r9
    1bde:	af 92       	push	r10
    1be0:	bf 92       	push	r11
    1be2:	cf 92       	push	r12
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	9c 01       	movw	r18, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1bf0:	e0 91 5d 01 	lds	r30, 0x015D
    1bf4:	f0 91 5e 01 	lds	r31, 0x015E
    1bf8:	80 85       	ldd	r24, Z+8	; 0x08
    1bfa:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
    1bfc:	1c 01       	movw	r2, r24
    1bfe:	44 24       	eor	r4, r4
    1c00:	55 24       	eor	r5, r5
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1c02:	62 84       	ldd	r6, Z+10	; 0x0a
    1c04:	73 84       	ldd	r7, Z+11	; 0x0b
    1c06:	84 84       	ldd	r8, Z+12	; 0x0c
    1c08:	95 84       	ldd	r9, Z+13	; 0x0d
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
  int32_t curr_s  = Timebase_Timer_Get_Seconds();
  int32_t end_val_ss = value % Timebase->Config.UpdateRate;
    1c0a:	61 81       	ldd	r22, Z+1	; 0x01
    1c0c:	72 81       	ldd	r23, Z+2	; 0x02
    1c0e:	c9 01       	movw	r24, r18
    1c10:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__udivmodhi4>
    1c14:	7c 01       	movw	r14, r24
    1c16:	00 e0       	ldi	r16, 0x00	; 0
    1c18:	10 e0       	ldi	r17, 0x00	; 0
  int32_t end_val_s  = value / Timebase->Config.UpdateRate;
    1c1a:	61 81       	ldd	r22, Z+1	; 0x01
    1c1c:	72 81       	ldd	r23, Z+2	; 0x02
    1c1e:	c9 01       	movw	r24, r18
    1c20:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__udivmodhi4>
    1c24:	5b 01       	movw	r10, r22
    1c26:	cc 24       	eor	r12, r12
    1c28:	dd 24       	eor	r13, r13
  end_val_ss += curr_ss;
    1c2a:	e2 0c       	add	r14, r2
    1c2c:	f3 1c       	adc	r15, r3
    1c2e:	04 1d       	adc	r16, r4
    1c30:	15 1d       	adc	r17, r5
  if(end_val_ss >= Timebase->Config.UpdateRate){
    1c32:	81 81       	ldd	r24, Z+1	; 0x01
    1c34:	92 81       	ldd	r25, Z+2	; 0x02
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e8 16       	cp	r14, r24
    1c3c:	f9 06       	cpc	r15, r25
    1c3e:	0a 07       	cpc	r16, r26
    1c40:	1b 07       	cpc	r17, r27
    1c42:	94 f0       	brlt	.+36     	; 0x1c68 <Timebase_Timer_Delay_SubSeconds+0x9a>
	end_val_s += 1;
    1c44:	08 94       	sec
    1c46:	a1 1c       	adc	r10, r1
    1c48:	b1 1c       	adc	r11, r1
    1c4a:	c1 1c       	adc	r12, r1
    1c4c:	d1 1c       	adc	r13, r1
	end_val_ss = end_val_ss % Timebase->Config.UpdateRate;
    1c4e:	21 81       	ldd	r18, Z+1	; 0x01
    1c50:	32 81       	ldd	r19, Z+2	; 0x02
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	c8 01       	movw	r24, r16
    1c58:	b7 01       	movw	r22, r14
    1c5a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1c5e:	ac 01       	movw	r20, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	da 01       	movw	r26, r20
    1c64:	7c 01       	movw	r14, r24
    1c66:	8d 01       	movw	r16, r26
  }
  end_val_s += curr_s;
    1c68:	a6 0c       	add	r10, r6
    1c6a:	b7 1c       	adc	r11, r7
    1c6c:	c8 1c       	adc	r12, r8
    1c6e:	d9 1c       	adc	r13, r9
  
  
  #warning "Uart debug is enabled in Timebase_Timer_Delay_SubSeconds"
  
  UART_Transmit_Text("TS_S ");
    1c70:	85 e0       	ldi	r24, 0x05	; 5
    1c72:	91 e0       	ldi	r25, 0x01	; 1
    1c74:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Number(curr_s);
    1c78:	c4 01       	movw	r24, r8
    1c7a:	b3 01       	movw	r22, r6
    1c7c:	0e 94 33 02 	call	0x466	; 0x466 <UART_Transmit_Number>
  UART_Transmit_Text(",");
    1c80:	8b e0       	ldi	r24, 0x0B	; 11
    1c82:	91 e0       	ldi	r25, 0x01	; 1
    1c84:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Text("TS_SS ");
    1c88:	8d e0       	ldi	r24, 0x0D	; 13
    1c8a:	91 e0       	ldi	r25, 0x01	; 1
    1c8c:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Number(curr_ss);
    1c90:	c2 01       	movw	r24, r4
    1c92:	b1 01       	movw	r22, r2
    1c94:	0e 94 33 02 	call	0x466	; 0x466 <UART_Transmit_Number>
  UART_Transmit_Text(",");
    1c98:	8b e0       	ldi	r24, 0x0B	; 11
    1c9a:	91 e0       	ldi	r25, 0x01	; 1
    1c9c:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Text("TS_ES ");
    1ca0:	84 e1       	ldi	r24, 0x14	; 20
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Number(end_val_s);
    1ca8:	c6 01       	movw	r24, r12
    1caa:	b5 01       	movw	r22, r10
    1cac:	0e 94 33 02 	call	0x466	; 0x466 <UART_Transmit_Number>
  UART_Transmit_Text(",");
    1cb0:	8b e0       	ldi	r24, 0x0B	; 11
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Text("TS_ESS ");
    1cb8:	8b e1       	ldi	r24, 0x1B	; 27
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Transmit_Text>
  UART_Transmit_Number(end_val_ss);
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	0e 94 33 02 	call	0x466	; 0x466 <UART_Transmit_Number>
  UART_Transmit_New_Line();
    1cc8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <UART_Transmit_New_Line>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1ccc:	e0 91 5d 01 	lds	r30, 0x015D
    1cd0:	f0 91 5e 01 	lds	r31, 0x015E
    1cd4:	0e c0       	rjmp	.+28     	; 0x1cf2 <Timebase_Timer_Delay_SubSeconds+0x124>
  UART_Transmit_Text("TS_ESS ");
  UART_Transmit_Number(end_val_ss);
  UART_Transmit_New_Line();
  
  while(curr_s <= end_val_s){
    if(curr_ss >= end_val_ss){
    1cd6:	2e 14       	cp	r2, r14
    1cd8:	3f 04       	cpc	r3, r15
    1cda:	40 06       	cpc	r4, r16
    1cdc:	51 06       	cpc	r5, r17
    1cde:	74 f4       	brge	.+28     	; 0x1cfc <Timebase_Timer_Delay_SubSeconds+0x12e>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1ce0:	80 85       	ldd	r24, Z+8	; 0x08
    1ce2:	91 85       	ldd	r25, Z+9	; 0x09
  
  while(curr_s <= end_val_s){
    if(curr_ss >= end_val_ss){
	  break;
	}
	curr_ss = Timebase_Timer_Get_SubSeconds();
    1ce4:	1c 01       	movw	r2, r24
    1ce6:	44 24       	eor	r4, r4
    1ce8:	55 24       	eor	r5, r5
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1cea:	62 84       	ldd	r6, Z+10	; 0x0a
    1cec:	73 84       	ldd	r7, Z+11	; 0x0b
    1cee:	84 84       	ldd	r8, Z+12	; 0x0c
    1cf0:	95 84       	ldd	r9, Z+13	; 0x0d
  UART_Transmit_Text(",");
  UART_Transmit_Text("TS_ESS ");
  UART_Transmit_Number(end_val_ss);
  UART_Transmit_New_Line();
  
  while(curr_s <= end_val_s){
    1cf2:	a6 14       	cp	r10, r6
    1cf4:	b7 04       	cpc	r11, r7
    1cf6:	c8 04       	cpc	r12, r8
    1cf8:	d9 04       	cpc	r13, r9
    1cfa:	6c f7       	brge	.-38     	; 0x1cd6 <Timebase_Timer_Delay_SubSeconds+0x108>
	  break;
	}
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
  }
}
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	bf 90       	pop	r11
    1d0a:	af 90       	pop	r10
    1d0c:	9f 90       	pop	r9
    1d0e:	8f 90       	pop	r8
    1d10:	7f 90       	pop	r7
    1d12:	6f 90       	pop	r6
    1d14:	5f 90       	pop	r5
    1d16:	4f 90       	pop	r4
    1d18:	3f 90       	pop	r3
    1d1a:	2f 90       	pop	r2
    1d1c:	08 95       	ret

00001d1e <__mulsi3>:
    1d1e:	62 9f       	mul	r22, r18
    1d20:	d0 01       	movw	r26, r0
    1d22:	73 9f       	mul	r23, r19
    1d24:	f0 01       	movw	r30, r0
    1d26:	82 9f       	mul	r24, r18
    1d28:	e0 0d       	add	r30, r0
    1d2a:	f1 1d       	adc	r31, r1
    1d2c:	64 9f       	mul	r22, r20
    1d2e:	e0 0d       	add	r30, r0
    1d30:	f1 1d       	adc	r31, r1
    1d32:	92 9f       	mul	r25, r18
    1d34:	f0 0d       	add	r31, r0
    1d36:	83 9f       	mul	r24, r19
    1d38:	f0 0d       	add	r31, r0
    1d3a:	74 9f       	mul	r23, r20
    1d3c:	f0 0d       	add	r31, r0
    1d3e:	65 9f       	mul	r22, r21
    1d40:	f0 0d       	add	r31, r0
    1d42:	99 27       	eor	r25, r25
    1d44:	72 9f       	mul	r23, r18
    1d46:	b0 0d       	add	r27, r0
    1d48:	e1 1d       	adc	r30, r1
    1d4a:	f9 1f       	adc	r31, r25
    1d4c:	63 9f       	mul	r22, r19
    1d4e:	b0 0d       	add	r27, r0
    1d50:	e1 1d       	adc	r30, r1
    1d52:	f9 1f       	adc	r31, r25
    1d54:	bd 01       	movw	r22, r26
    1d56:	cf 01       	movw	r24, r30
    1d58:	11 24       	eor	r1, r1
    1d5a:	08 95       	ret

00001d5c <__udivmodhi4>:
    1d5c:	aa 1b       	sub	r26, r26
    1d5e:	bb 1b       	sub	r27, r27
    1d60:	51 e1       	ldi	r21, 0x11	; 17
    1d62:	07 c0       	rjmp	.+14     	; 0x1d72 <__udivmodhi4_ep>

00001d64 <__udivmodhi4_loop>:
    1d64:	aa 1f       	adc	r26, r26
    1d66:	bb 1f       	adc	r27, r27
    1d68:	a6 17       	cp	r26, r22
    1d6a:	b7 07       	cpc	r27, r23
    1d6c:	10 f0       	brcs	.+4      	; 0x1d72 <__udivmodhi4_ep>
    1d6e:	a6 1b       	sub	r26, r22
    1d70:	b7 0b       	sbc	r27, r23

00001d72 <__udivmodhi4_ep>:
    1d72:	88 1f       	adc	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	5a 95       	dec	r21
    1d78:	a9 f7       	brne	.-22     	; 0x1d64 <__udivmodhi4_loop>
    1d7a:	80 95       	com	r24
    1d7c:	90 95       	com	r25
    1d7e:	bc 01       	movw	r22, r24
    1d80:	cd 01       	movw	r24, r26
    1d82:	08 95       	ret

00001d84 <__udivmodsi4>:
    1d84:	a1 e2       	ldi	r26, 0x21	; 33
    1d86:	1a 2e       	mov	r1, r26
    1d88:	aa 1b       	sub	r26, r26
    1d8a:	bb 1b       	sub	r27, r27
    1d8c:	fd 01       	movw	r30, r26
    1d8e:	0d c0       	rjmp	.+26     	; 0x1daa <__udivmodsi4_ep>

00001d90 <__udivmodsi4_loop>:
    1d90:	aa 1f       	adc	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	ee 1f       	adc	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	a2 17       	cp	r26, r18
    1d9a:	b3 07       	cpc	r27, r19
    1d9c:	e4 07       	cpc	r30, r20
    1d9e:	f5 07       	cpc	r31, r21
    1da0:	20 f0       	brcs	.+8      	; 0x1daa <__udivmodsi4_ep>
    1da2:	a2 1b       	sub	r26, r18
    1da4:	b3 0b       	sbc	r27, r19
    1da6:	e4 0b       	sbc	r30, r20
    1da8:	f5 0b       	sbc	r31, r21

00001daa <__udivmodsi4_ep>:
    1daa:	66 1f       	adc	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	1a 94       	dec	r1
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <__udivmodsi4_loop>
    1db6:	60 95       	com	r22
    1db8:	70 95       	com	r23
    1dba:	80 95       	com	r24
    1dbc:	90 95       	com	r25
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	bd 01       	movw	r22, r26
    1dc4:	cf 01       	movw	r24, r30
    1dc6:	08 95       	ret

00001dc8 <__divmodsi4>:
    1dc8:	97 fb       	bst	r25, 7
    1dca:	09 2e       	mov	r0, r25
    1dcc:	05 26       	eor	r0, r21
    1dce:	0e d0       	rcall	.+28     	; 0x1dec <__divmodsi4_neg1>
    1dd0:	57 fd       	sbrc	r21, 7
    1dd2:	04 d0       	rcall	.+8      	; 0x1ddc <__divmodsi4_neg2>
    1dd4:	d7 df       	rcall	.-82     	; 0x1d84 <__udivmodsi4>
    1dd6:	0a d0       	rcall	.+20     	; 0x1dec <__divmodsi4_neg1>
    1dd8:	00 1c       	adc	r0, r0
    1dda:	38 f4       	brcc	.+14     	; 0x1dea <__divmodsi4_exit>

00001ddc <__divmodsi4_neg2>:
    1ddc:	50 95       	com	r21
    1dde:	40 95       	com	r20
    1de0:	30 95       	com	r19
    1de2:	21 95       	neg	r18
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	4f 4f       	sbci	r20, 0xFF	; 255
    1de8:	5f 4f       	sbci	r21, 0xFF	; 255

00001dea <__divmodsi4_exit>:
    1dea:	08 95       	ret

00001dec <__divmodsi4_neg1>:
    1dec:	f6 f7       	brtc	.-4      	; 0x1dea <__divmodsi4_exit>
    1dee:	90 95       	com	r25
    1df0:	80 95       	com	r24
    1df2:	70 95       	com	r23
    1df4:	61 95       	neg	r22
    1df6:	7f 4f       	sbci	r23, 0xFF	; 255
    1df8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfc:	08 95       	ret

00001dfe <_exit>:
    1dfe:	f8 94       	cli

00001e00 <__stop_program>:
    1e00:	ff cf       	rjmp	.-2      	; 0x1e00 <__stop_program>
