
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  000024f4  00002588  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000024f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  008001aa  008001aa  00002632  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00002632  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001481  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e28  00000000  00000000  00003b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000958  00000000  00000000  0000799b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000024c0  00000000  00000000  000082f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b80  00000000  00000000  0000a7b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001809  00000000  00000000  0000b334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000160b  00000000  00000000  0000cb3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000e148  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 c3 0d 	jmp	0x1b86	; 0x1b86 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ef       	ldi	r30, 0xF4	; 244
      7c:	f4 e2       	ldi	r31, 0x24	; 36
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 3a       	cpi	r26, 0xAA	; 170
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	aa ea       	ldi	r26, 0xAA	; 170
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 36       	cpi	r26, 0x66	; 102
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 20 09 	call	0x1240	; 0x1240 <Timebase_Init>
  App_Setup();
      ae:	0e 94 6f 00 	call	0xde	; 0xde <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 2d 09 	call	0x125a	; 0x125a <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:
}


void App_Main_Loop(void){
  
  Timebase_Window_Timer_Start();
      bc:	0e 94 8b 03 	call	0x716	; 0x716 <Timebase_Window_Timer_Start>
  ThreadedDbg_Execute_Function();
      c0:	0e 94 00 12 	call	0x2400	; 0x2400 <ThreadedDbg_Execute_Function>
  uint16_t val = Timebase_Window_Timer_Get_Interval_Reset();
      c4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <Timebase_Window_Timer_Get_Interval_Reset>
      c8:	ab 01       	movw	r20, r22
      ca:	bc 01       	movw	r22, r24
  UART_Tx_Parameter_NL("LoopTime", val);
      cc:	60 e0       	ldi	r22, 0x00	; 0
      ce:	70 e0       	ldi	r23, 0x00	; 0
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	91 e0       	ldi	r25, 0x01	; 1
      d4:	0e 94 31 0c 	call	0x1862	; 0x1862 <UART_Tx_Parameter_NL>
  UART_Tx_NL();
      d8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_NL>
  //Timebase_Timer_Delay_SubSeconds(1);
  
  
}
      dc:	08 95       	ret

000000de <App_Setup>:
  UART_Tx_Parameter_Hex_NL("Print3",0x26);
}

void App_Setup(void){

  UART_Init(57600);
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	71 ee       	ldi	r23, 0xE1	; 225
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <UART_Init>
  ThreadedDbg_Init();
      ea:	0e 94 17 12 	call	0x242e	; 0x242e <ThreadedDbg_Init>
  ThreadedDbg_Add_Function(Print0);
      ee:	83 ea       	ldi	r24, 0xA3	; 163
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print1);
      f6:	8a e9       	ldi	r24, 0x9A	; 154
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print2);
      fe:	81 e9       	ldi	r24, 0x91	; 145
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print3);
     106:	88 e8       	ldi	r24, 0x88	; 136
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <ThreadedDbg_Add_Function>
  
}
     10e:	08 95       	ret

00000110 <Print3>:
void Print2(void){
  UART_Tx_Parameter_Hex_NL("Print2",0x96);
}

void Print3(void){
  UART_Tx_Parameter_Hex_NL("Print3",0x26);
     110:	89 e0       	ldi	r24, 0x09	; 9
     112:	91 e0       	ldi	r25, 0x01	; 1
     114:	46 e2       	ldi	r20, 0x26	; 38
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	60 e0       	ldi	r22, 0x00	; 0
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <UART_Tx_Parameter_Hex_NL>
}
     120:	08 95       	ret

00000122 <Print2>:
void Print1(void){
  UART_Tx_Parameter_Hex_NL("Print1",0x0700);
}

void Print2(void){
  UART_Tx_Parameter_Hex_NL("Print2",0x96);
     122:	80 e1       	ldi	r24, 0x10	; 16
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	46 e9       	ldi	r20, 0x96	; 150
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <UART_Tx_Parameter_Hex_NL>
}
     132:	08 95       	ret

00000134 <Print1>:
void Print0(void){
  UART_Tx_Parameter_Hex_NL("Print0",0x25);
}

void Print1(void){
  UART_Tx_Parameter_Hex_NL("Print1",0x0700);
     134:	87 e1       	ldi	r24, 0x17	; 23
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	40 e0       	ldi	r20, 0x00	; 0
     13a:	57 e0       	ldi	r21, 0x07	; 7
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <UART_Tx_Parameter_Hex_NL>
}
     144:	08 95       	ret

00000146 <Print0>:
#include "uart.h"
#include "pid.h"
#include "app.h"

void Print0(void){
  UART_Tx_Parameter_Hex_NL("Print0",0x25);
     146:	8e e1       	ldi	r24, 0x1E	; 30
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	45 e2       	ldi	r20, 0x25	; 37
     14c:	50 e0       	ldi	r21, 0x00	; 0
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <UART_Tx_Parameter_Hex_NL>
}
     156:	08 95       	ret

00000158 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     158:	84 e0       	ldi	r24, 0x04	; 4
     15a:	92 e0       	ldi	r25, 0x02	; 2
     15c:	90 93 03 02 	sts	0x0203, r25
     160:	80 93 02 02 	sts	0x0202, r24
  Timebase->Config.UpdateRate = 1;
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	90 93 05 02 	sts	0x0205, r25
     16c:	80 93 04 02 	sts	0x0204, r24
  Timebase->Time.OVFUpdateValue=0;
     170:	10 92 07 02 	sts	0x0207, r1
     174:	10 92 06 02 	sts	0x0206, r1
  Timebase->Time.SubSecondsShadow = 0;
     178:	10 92 13 02 	sts	0x0213, r1
     17c:	10 92 12 02 	sts	0x0212, r1
  Timebase->Time.SubSecondsUpTime = 0;
     180:	10 92 14 02 	sts	0x0214, r1
     184:	10 92 15 02 	sts	0x0215, r1
     188:	10 92 16 02 	sts	0x0216, r1
     18c:	10 92 17 02 	sts	0x0217, r1
  Timebase->Time.SecondsShadow = 0;
     190:	10 92 18 02 	sts	0x0218, r1
     194:	10 92 19 02 	sts	0x0219, r1
     198:	10 92 1a 02 	sts	0x021A, r1
     19c:	10 92 1b 02 	sts	0x021B, r1
  Timebase->Time.SubSeconds = 0;
     1a0:	10 92 0d 02 	sts	0x020D, r1
     1a4:	10 92 0c 02 	sts	0x020C, r1
  Timebase->Time.Seconds = 0;
     1a8:	10 92 0e 02 	sts	0x020E, r1
     1ac:	10 92 0f 02 	sts	0x020F, r1
     1b0:	10 92 10 02 	sts	0x0210, r1
     1b4:	10 92 11 02 	sts	0x0211, r1
  Timebase->Time.VariablesSync = 0;
     1b8:	10 92 1c 02 	sts	0x021C, r1
  Timebase->Time.LastSample = 0;
     1bc:	10 92 08 02 	sts	0x0208, r1
     1c0:	10 92 09 02 	sts	0x0209, r1
     1c4:	10 92 0a 02 	sts	0x020A, r1
     1c8:	10 92 0b 02 	sts	0x020B, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
  Timebase->Time.StartTimeSeconds = 0;
     1cc:	10 92 1d 02 	sts	0x021D, r1
     1d0:	10 92 1e 02 	sts	0x021E, r1
     1d4:	10 92 1f 02 	sts	0x021F, r1
     1d8:	10 92 20 02 	sts	0x0220, r1
  Timebase->Time.StartTimeSubSeconds = 0;
     1dc:	10 92 21 02 	sts	0x0221, r1
     1e0:	10 92 22 02 	sts	0x0222, r1
     1e4:	10 92 23 02 	sts	0x0223, r1
     1e8:	10 92 24 02 	sts	0x0224, r1
  Timebase->Time.Status = 0;
     1ec:	10 92 25 02 	sts	0x0225, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
     1f0:	10 92 26 02 	sts	0x0226, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     1f4:	10 92 27 02 	sts	0x0227, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     1f8:	10 92 28 02 	sts	0x0228, r1
     1fc:	10 92 29 02 	sts	0x0229, r1
     200:	10 92 2a 02 	sts	0x022A, r1
     204:	10 92 2b 02 	sts	0x022B, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     208:	10 92 2c 02 	sts	0x022C, r1
     20c:	10 92 2d 02 	sts	0x022D, r1
     210:	10 92 2e 02 	sts	0x022E, r1
     214:	10 92 2f 02 	sts	0x022F, r1
    Timebase->DownCounterSS[i].Value = 0;
     218:	10 92 30 02 	sts	0x0230, r1
     21c:	10 92 31 02 	sts	0x0231, r1
     220:	10 92 32 02 	sts	0x0232, r1
     224:	10 92 33 02 	sts	0x0233, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     228:	10 92 34 02 	sts	0x0234, r1
     22c:	10 92 35 02 	sts	0x0235, r1
     230:	10 92 36 02 	sts	0x0236, r1
     234:	10 92 37 02 	sts	0x0237, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     238:	10 92 38 02 	sts	0x0238, r1
     23c:	10 92 39 02 	sts	0x0239, r1
     240:	10 92 3a 02 	sts	0x023A, r1
     244:	10 92 3b 02 	sts	0x023B, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
	Timebase->LPDownCounter[i].ReloadValue = 0;
  }
  #endif
  
}
     248:	08 95       	ret

0000024a <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     24a:	8f 92       	push	r8
     24c:	9f 92       	push	r9
     24e:	bf 92       	push	r11
     250:	cf 92       	push	r12
     252:	df 92       	push	r13
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	df 93       	push	r29
     25e:	cf 93       	push	r28
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
     264:	2a 97       	sbiw	r28, 0x0a	; 10
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     272:	de 01       	movw	r26, r28
     274:	11 96       	adiw	r26, 0x01	; 1
     276:	e5 e2       	ldi	r30, 0x25	; 37
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	8a e0       	ldi	r24, 0x0A	; 10
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	81 50       	subi	r24, 0x01	; 1
     282:	e1 f7       	brne	.-8      	; 0x27c <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     284:	94 01       	movw	r18, r8
     286:	40 e0       	ldi	r20, 0x00	; 0
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	7b e1       	ldi	r23, 0x1B	; 27
     28e:	87 eb       	ldi	r24, 0xB7	; 183
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     296:	b2 2e       	mov	r11, r18
     298:	c3 2e       	mov	r12, r19
     29a:	d4 2e       	mov	r13, r20
     29c:	05 2f       	mov	r16, r21
     29e:	7e 01       	movw	r14, r28
     2a0:	08 94       	sec
     2a2:	e1 1c       	adc	r14, r1
     2a4:	f1 1c       	adc	r15, r1
     2a6:	c9 01       	movw	r24, r18
     2a8:	da 01       	movw	r26, r20
     2aa:	9c 01       	movw	r18, r24
     2ac:	ad 01       	movw	r20, r26
     2ae:	10 e0       	ldi	r17, 0x00	; 0
     2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     2b2:	f7 01       	movw	r30, r14
     2b4:	21 91       	ld	r18, Z+
     2b6:	31 91       	ld	r19, Z+
     2b8:	7f 01       	movw	r14, r30
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	6b 2d       	mov	r22, r11
     2c0:	7c 2d       	mov	r23, r12
     2c2:	8d 2d       	mov	r24, r13
     2c4:	90 2f       	mov	r25, r16
     2c6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     2ca:	c9 01       	movw	r24, r18
     2cc:	da 01       	movw	r26, r20
     2ce:	9c 01       	movw	r18, r24
     2d0:	ad 01       	movw	r20, r26
	clock_div_index++;
     2d2:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     2d4:	15 30       	cpi	r17, 0x05	; 5
     2d6:	31 f0       	breq	.+12     	; 0x2e4 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     2d8:	2f 3f       	cpi	r18, 0xFF	; 255
     2da:	31 05       	cpc	r19, r1
     2dc:	41 05       	cpc	r20, r1
     2de:	51 05       	cpc	r21, r1
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <Timebase_Timer_Enable+0x9a>
     2e2:	3c f7       	brge	.-50     	; 0x2b2 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     2e4:	81 2f       	mov	r24, r17
     2e6:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     2e8:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2ea:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     2ec:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     2f0:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     2f2:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     2f4:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     2f6:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     2f8:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     2fa:	88 23       	and	r24, r24
     2fc:	11 f4       	brne	.+4      	; 0x302 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0f c0       	rjmp	.+30     	; 0x320 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	11 f4       	brne	.+4      	; 0x30a <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	0b c0       	rjmp	.+22     	; 0x320 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     30a:	82 30       	cpi	r24, 0x02	; 2
     30c:	11 f4       	brne	.+4      	; 0x312 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     30e:	83 e0       	ldi	r24, 0x03	; 3
     310:	07 c0       	rjmp	.+14     	; 0x320 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     312:	83 30       	cpi	r24, 0x03	; 3
     314:	11 f4       	brne	.+4      	; 0x31a <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	03 c0       	rjmp	.+6      	; 0x320 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     31a:	84 30       	cpi	r24, 0x04	; 4
     31c:	11 f4       	brne	.+4      	; 0x322 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     31e:	85 e0       	ldi	r24, 0x05	; 5
     320:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     322:	e0 91 02 02 	lds	r30, 0x0202
     326:	f0 91 03 02 	lds	r31, 0x0203
     32a:	8f ef       	ldi	r24, 0xFF	; 255
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	82 1b       	sub	r24, r18
     330:	93 0b       	sbc	r25, r19
     332:	93 83       	std	Z+3, r25	; 0x03
     334:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     336:	82 81       	ldd	r24, Z+2	; 0x02
     338:	93 81       	ldd	r25, Z+3	; 0x03
     33a:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     33c:	81 e0       	ldi	r24, 0x01	; 1
     33e:	80 93 6e 00 	sts	0x006E, r24
  sei();
     342:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     344:	91 82       	std	Z+1, r9	; 0x01
     346:	80 82       	st	Z, r8
}
     348:	2a 96       	adiw	r28, 0x0a	; 10
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	f8 94       	cli
     34e:	de bf       	out	0x3e, r29	; 62
     350:	0f be       	out	0x3f, r0	; 63
     352:	cd bf       	out	0x3d, r28	; 61
     354:	cf 91       	pop	r28
     356:	df 91       	pop	r29
     358:	1f 91       	pop	r17
     35a:	0f 91       	pop	r16
     35c:	ff 90       	pop	r15
     35e:	ef 90       	pop	r14
     360:	df 90       	pop	r13
     362:	cf 90       	pop	r12
     364:	bf 90       	pop	r11
     366:	9f 90       	pop	r9
     368:	8f 90       	pop	r8
     36a:	08 95       	ret

0000036c <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     36c:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     36e:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     370:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     374:	87 e0       	ldi	r24, 0x07	; 7
     376:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     378:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     37a:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     37c:	16 bc       	out	0x26, r1	; 38
}
     37e:	08 95       	ret

00000380 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     380:	f8 94       	cli
}
     382:	08 95       	ret

00000384 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     384:	78 94       	sei
}
     386:	08 95       	ret

00000388 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     388:	e0 91 02 02 	lds	r30, 0x0202
     38c:	f0 91 03 02 	lds	r31, 0x0203
     390:	26 85       	ldd	r18, Z+14	; 0x0e
     392:	37 85       	ldd	r19, Z+15	; 0x0f
}
     394:	c9 01       	movw	r24, r18
     396:	08 95       	ret

00000398 <Timebase_Timer_Get_SubSecondsUpTime>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
     398:	e0 91 02 02 	lds	r30, 0x0202
     39c:	f0 91 03 02 	lds	r31, 0x0203
     3a0:	20 89       	ldd	r18, Z+16	; 0x10
     3a2:	31 89       	ldd	r19, Z+17	; 0x11
     3a4:	42 89       	ldd	r20, Z+18	; 0x12
     3a6:	53 89       	ldd	r21, Z+19	; 0x13
}
     3a8:	b9 01       	movw	r22, r18
     3aa:	ca 01       	movw	r24, r20
     3ac:	08 95       	ret

000003ae <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     3ae:	e0 91 02 02 	lds	r30, 0x0202
     3b2:	f0 91 03 02 	lds	r31, 0x0203
     3b6:	24 89       	ldd	r18, Z+20	; 0x14
     3b8:	35 89       	ldd	r19, Z+21	; 0x15
     3ba:	46 89       	ldd	r20, Z+22	; 0x16
     3bc:	57 89       	ldd	r21, Z+23	; 0x17
}
     3be:	b9 01       	movw	r22, r18
     3c0:	ca 01       	movw	r24, r20
     3c2:	08 95       	ret

000003c4 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     3c4:	e0 91 02 02 	lds	r30, 0x0202
     3c8:	f0 91 03 02 	lds	r31, 0x0203
     3cc:	20 85       	ldd	r18, Z+8	; 0x08
     3ce:	31 85       	ldd	r19, Z+9	; 0x09
}
     3d0:	c9 01       	movw	r24, r18
     3d2:	08 95       	ret

000003d4 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     3d4:	e0 91 02 02 	lds	r30, 0x0202
     3d8:	f0 91 03 02 	lds	r31, 0x0203
     3dc:	22 85       	ldd	r18, Z+10	; 0x0a
     3de:	33 85       	ldd	r19, Z+11	; 0x0b
     3e0:	44 85       	ldd	r20, Z+12	; 0x0c
     3e2:	55 85       	ldd	r21, Z+13	; 0x0d
}
     3e4:	b9 01       	movw	r22, r18
     3e6:	ca 01       	movw	r24, r20
     3e8:	08 95       	ret

000003ea <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     3ea:	e0 91 02 02 	lds	r30, 0x0202
     3ee:	f0 91 03 02 	lds	r31, 0x0203
     3f2:	91 87       	std	Z+9, r25	; 0x09
     3f4:	80 87       	std	Z+8, r24	; 0x08
}
     3f6:	08 95       	ret

000003f8 <Timebase_Timer_Set_SubSecondsShadow>:

void Timebase_Timer_Set_SubSecondsShadow(uint16_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsShadow = value;
     3f8:	e0 91 02 02 	lds	r30, 0x0202
     3fc:	f0 91 03 02 	lds	r31, 0x0203
     400:	97 87       	std	Z+15, r25	; 0x0f
     402:	86 87       	std	Z+14, r24	; 0x0e
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     404:	08 95       	ret

00000406 <Timebase_Timer_Set_SubSecondsUpTime>:

void Timebase_Timer_Set_SubSecondsUpTime(uint32_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsUpTime = value;
     406:	e0 91 02 02 	lds	r30, 0x0202
     40a:	f0 91 03 02 	lds	r31, 0x0203
     40e:	60 8b       	std	Z+16, r22	; 0x10
     410:	71 8b       	std	Z+17, r23	; 0x11
     412:	82 8b       	std	Z+18, r24	; 0x12
     414:	93 8b       	std	Z+19, r25	; 0x13
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     416:	08 95       	ret

00000418 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     418:	e0 91 02 02 	lds	r30, 0x0202
     41c:	f0 91 03 02 	lds	r31, 0x0203
     420:	62 87       	std	Z+10, r22	; 0x0a
     422:	73 87       	std	Z+11, r23	; 0x0b
     424:	84 87       	std	Z+12, r24	; 0x0c
     426:	95 87       	std	Z+13, r25	; 0x0d
}
     428:	08 95       	ret

0000042a <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     42a:	e0 91 02 02 	lds	r30, 0x0202
     42e:	f0 91 03 02 	lds	r31, 0x0203
     432:	26 85       	ldd	r18, Z+14	; 0x0e
     434:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     436:	86 85       	ldd	r24, Z+14	; 0x0e
     438:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     43a:	28 17       	cp	r18, r24
     43c:	39 07       	cpc	r19, r25
     43e:	c9 f7       	brne	.-14     	; 0x432 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     440:	c9 01       	movw	r24, r18
     442:	08 95       	ret

00000444 <Timebase_Timer_Get_SubSecondsUpTime_Securely>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime_Securely(void){
  uint32_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsUpTime;
     444:	e0 91 02 02 	lds	r30, 0x0202
     448:	f0 91 03 02 	lds	r31, 0x0203
     44c:	20 89       	ldd	r18, Z+16	; 0x10
     44e:	31 89       	ldd	r19, Z+17	; 0x11
     450:	42 89       	ldd	r20, Z+18	; 0x12
     452:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SubSecondsUpTime;
     454:	80 89       	ldd	r24, Z+16	; 0x10
     456:	91 89       	ldd	r25, Z+17	; 0x11
     458:	a2 89       	ldd	r26, Z+18	; 0x12
     45a:	b3 89       	ldd	r27, Z+19	; 0x13
	  if(tmp0 == tmp1){
     45c:	28 17       	cp	r18, r24
     45e:	39 07       	cpc	r19, r25
     460:	4a 07       	cpc	r20, r26
     462:	5b 07       	cpc	r21, r27
     464:	99 f7       	brne	.-26     	; 0x44c <Timebase_Timer_Get_SubSecondsUpTime_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     466:	b9 01       	movw	r22, r18
     468:	ca 01       	movw	r24, r20
     46a:	08 95       	ret

0000046c <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     46c:	e0 91 02 02 	lds	r30, 0x0202
     470:	f0 91 03 02 	lds	r31, 0x0203
     474:	24 89       	ldd	r18, Z+20	; 0x14
     476:	35 89       	ldd	r19, Z+21	; 0x15
     478:	46 89       	ldd	r20, Z+22	; 0x16
     47a:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     47c:	84 89       	ldd	r24, Z+20	; 0x14
     47e:	95 89       	ldd	r25, Z+21	; 0x15
     480:	a6 89       	ldd	r26, Z+22	; 0x16
     482:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     484:	28 17       	cp	r18, r24
     486:	39 07       	cpc	r19, r25
     488:	4a 07       	cpc	r20, r26
     48a:	5b 07       	cpc	r21, r27
     48c:	99 f7       	brne	.-26     	; 0x474 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     48e:	b9 01       	movw	r22, r18
     490:	ca 01       	movw	r24, r20
     492:	08 95       	ret

00000494 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     494:	e0 91 02 02 	lds	r30, 0x0202
     498:	f0 91 03 02 	lds	r31, 0x0203
     49c:	80 8d       	ldd	r24, Z+24	; 0x18
     49e:	88 23       	and	r24, r24
     4a0:	e1 f4       	brne	.+56     	; 0x4da <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4a2:	26 85       	ldd	r18, Z+14	; 0x0e
     4a4:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     4a6:	86 85       	ldd	r24, Z+14	; 0x0e
     4a8:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     4aa:	28 17       	cp	r18, r24
     4ac:	39 07       	cpc	r19, r25
     4ae:	c9 f7       	brne	.-14     	; 0x4a2 <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     4b0:	31 87       	std	Z+9, r19	; 0x09
     4b2:	20 87       	std	Z+8, r18	; 0x08
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4b4:	24 89       	ldd	r18, Z+20	; 0x14
     4b6:	35 89       	ldd	r19, Z+21	; 0x15
     4b8:	46 89       	ldd	r20, Z+22	; 0x16
     4ba:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     4bc:	84 89       	ldd	r24, Z+20	; 0x14
     4be:	95 89       	ldd	r25, Z+21	; 0x15
     4c0:	a6 89       	ldd	r26, Z+22	; 0x16
     4c2:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     4c4:	28 17       	cp	r18, r24
     4c6:	39 07       	cpc	r19, r25
     4c8:	4a 07       	cpc	r20, r26
     4ca:	5b 07       	cpc	r21, r27
     4cc:	99 f7       	brne	.-26     	; 0x4b4 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     4ce:	22 87       	std	Z+10, r18	; 0x0a
     4d0:	33 87       	std	Z+11, r19	; 0x0b
     4d2:	44 87       	std	Z+12, r20	; 0x0c
     4d4:	55 87       	std	Z+13, r21	; 0x0d
    #endif
	
	  Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	80 8f       	std	Z+24, r24	; 0x18
     4da:	08 95       	ret

000004dc <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4f6:	c0 91 02 02 	lds	r28, 0x0202
     4fa:	d0 91 03 02 	lds	r29, 0x0203
     4fe:	ce 84       	ldd	r12, Y+14	; 0x0e
     500:	df 84       	ldd	r13, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     502:	8e 85       	ldd	r24, Y+14	; 0x0e
     504:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     506:	c8 16       	cp	r12, r24
     508:	d9 06       	cpc	r13, r25
     50a:	c9 f7       	brne	.-14     	; 0x4fe <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     50c:	ec 88       	ldd	r14, Y+20	; 0x14
     50e:	fd 88       	ldd	r15, Y+21	; 0x15
     510:	0e 89       	ldd	r16, Y+22	; 0x16
     512:	1f 89       	ldd	r17, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     514:	8c 89       	ldd	r24, Y+20	; 0x14
     516:	9d 89       	ldd	r25, Y+21	; 0x15
     518:	ae 89       	ldd	r26, Y+22	; 0x16
     51a:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     51c:	e8 16       	cp	r14, r24
     51e:	f9 06       	cpc	r15, r25
     520:	0a 07       	cpc	r16, r26
     522:	1b 07       	cpc	r17, r27
     524:	99 f7       	brne	.-26     	; 0x50c <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     526:	28 81       	ld	r18, Y
     528:	39 81       	ldd	r19, Y+1	; 0x01
     52a:	40 e0       	ldi	r20, 0x00	; 0
     52c:	50 e0       	ldi	r21, 0x00	; 0
     52e:	c8 01       	movw	r24, r16
     530:	b7 01       	movw	r22, r14
     532:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
  smpl_val += smpl_ss;
     536:	76 01       	movw	r14, r12
     538:	00 e0       	ldi	r16, 0x00	; 0
     53a:	10 e0       	ldi	r17, 0x00	; 0
     53c:	95 01       	movw	r18, r10
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	e2 0e       	add	r14, r18
     544:	f3 1e       	adc	r15, r19
     546:	04 1f       	adc	r16, r20
     548:	15 1f       	adc	r17, r21
  smpl_val += value;
     54a:	e6 0e       	add	r14, r22
     54c:	f7 1e       	adc	r15, r23
     54e:	08 1f       	adc	r16, r24
     550:	19 1f       	adc	r17, r25
     552:	20 e0       	ldi	r18, 0x00	; 0
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	40 e0       	ldi	r20, 0x00	; 0
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	25 c0       	rjmp	.+74     	; 0x5a6 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     55c:	8e 84       	ldd	r8, Y+14	; 0x0e
     55e:	9f 84       	ldd	r9, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     560:	8e 85       	ldd	r24, Y+14	; 0x0e
     562:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     564:	88 16       	cp	r8, r24
     566:	99 06       	cpc	r9, r25
     568:	c9 f7       	brne	.-14     	; 0x55c <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     56a:	ac 88       	ldd	r10, Y+20	; 0x14
     56c:	bd 88       	ldd	r11, Y+21	; 0x15
     56e:	ce 88       	ldd	r12, Y+22	; 0x16
     570:	df 88       	ldd	r13, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     572:	8c 89       	ldd	r24, Y+20	; 0x14
     574:	9d 89       	ldd	r25, Y+21	; 0x15
     576:	ae 89       	ldd	r26, Y+22	; 0x16
     578:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     57a:	a8 16       	cp	r10, r24
     57c:	b9 06       	cpc	r11, r25
     57e:	ca 06       	cpc	r12, r26
     580:	db 06       	cpc	r13, r27
     582:	99 f7       	brne	.-26     	; 0x56a <Timebase_Timer_Delay_SubSeconds+0x8e>
	  curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
     584:	28 81       	ld	r18, Y
     586:	39 81       	ldd	r19, Y+1	; 0x01
     588:	40 e0       	ldi	r20, 0x00	; 0
     58a:	50 e0       	ldi	r21, 0x00	; 0
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
     594:	9b 01       	movw	r18, r22
     596:	ac 01       	movw	r20, r24
	  curr_val += curr_ss;
     598:	c4 01       	movw	r24, r8
     59a:	a0 e0       	ldi	r26, 0x00	; 0
     59c:	b0 e0       	ldi	r27, 0x00	; 0
     59e:	28 0f       	add	r18, r24
     5a0:	39 1f       	adc	r19, r25
     5a2:	4a 1f       	adc	r20, r26
     5a4:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5a6:	2e 15       	cp	r18, r14
     5a8:	3f 05       	cpc	r19, r15
     5aa:	40 07       	cpc	r20, r16
     5ac:	51 07       	cpc	r21, r17
     5ae:	b4 f2       	brlt	.-84     	; 0x55c <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
	  curr_val += curr_ss;
  }
  
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	08 95       	ret

000005ca <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5d0:	e0 91 02 02 	lds	r30, 0x0202
     5d4:	f0 91 03 02 	lds	r31, 0x0203
     5d8:	66 85       	ldd	r22, Z+14	; 0x0e
     5da:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     5dc:	86 85       	ldd	r24, Z+14	; 0x0e
     5de:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     5e0:	68 17       	cp	r22, r24
     5e2:	79 07       	cpc	r23, r25
     5e4:	c9 f7       	brne	.-14     	; 0x5d8 <Timebase_Timer_Await_SubSeconds+0xe>
     5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5e8:	66 85       	ldd	r22, Z+14	; 0x0e
     5ea:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     5ec:	86 85       	ldd	r24, Z+14	; 0x0e
     5ee:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     5f0:	68 17       	cp	r22, r24
     5f2:	79 07       	cpc	r23, r25
     5f4:	c9 f7       	brne	.-14     	; 0x5e8 <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     5f6:	24 81       	ldd	r18, Z+4	; 0x04
     5f8:	35 81       	ldd	r19, Z+5	; 0x05
     5fa:	46 81       	ldd	r20, Z+6	; 0x06
     5fc:	57 81       	ldd	r21, Z+7	; 0x07
     5fe:	cb 01       	movw	r24, r22
     600:	a0 e0       	ldi	r26, 0x00	; 0
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	82 17       	cp	r24, r18
     606:	93 07       	cpc	r25, r19
     608:	a4 07       	cpc	r26, r20
     60a:	b5 07       	cpc	r27, r21
     60c:	69 f7       	brne	.-38     	; 0x5e8 <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     60e:	26 85       	ldd	r18, Z+14	; 0x0e
     610:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     612:	86 85       	ldd	r24, Z+14	; 0x0e
     614:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     616:	28 17       	cp	r18, r24
     618:	39 07       	cpc	r19, r25
     61a:	c9 f7       	brne	.-14     	; 0x60e <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     61c:	c9 01       	movw	r24, r18
     61e:	a0 e0       	ldi	r26, 0x00	; 0
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	84 83       	std	Z+4, r24	; 0x04
     624:	95 83       	std	Z+5, r25	; 0x05
     626:	a6 83       	std	Z+6, r26	; 0x06
     628:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     62a:	24 81       	ldd	r18, Z+4	; 0x04
     62c:	35 81       	ldd	r19, Z+5	; 0x05
     62e:	46 81       	ldd	r20, Z+6	; 0x06
     630:	57 81       	ldd	r21, Z+7	; 0x07
     632:	ce 01       	movw	r24, r28
     634:	a0 e0       	ldi	r26, 0x00	; 0
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	a4 1f       	adc	r26, r20
     63e:	b5 1f       	adc	r27, r21
     640:	84 83       	std	Z+4, r24	; 0x04
     642:	95 83       	std	Z+5, r25	; 0x05
     644:	a6 83       	std	Z+6, r26	; 0x06
     646:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     648:	24 81       	ldd	r18, Z+4	; 0x04
     64a:	35 81       	ldd	r19, Z+5	; 0x05
     64c:	46 81       	ldd	r20, Z+6	; 0x06
     64e:	57 81       	ldd	r21, Z+7	; 0x07
     650:	80 81       	ld	r24, Z
     652:	91 81       	ldd	r25, Z+1	; 0x01
     654:	a0 e0       	ldi	r26, 0x00	; 0
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	28 17       	cp	r18, r24
     65a:	39 07       	cpc	r19, r25
     65c:	4a 07       	cpc	r20, r26
     65e:	5b 07       	cpc	r21, r27
     660:	84 f0       	brlt	.+32     	; 0x682 <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     662:	24 81       	ldd	r18, Z+4	; 0x04
     664:	35 81       	ldd	r19, Z+5	; 0x05
     666:	46 81       	ldd	r20, Z+6	; 0x06
     668:	57 81       	ldd	r21, Z+7	; 0x07
     66a:	80 81       	ld	r24, Z
     66c:	91 81       	ldd	r25, Z+1	; 0x01
     66e:	a0 e0       	ldi	r26, 0x00	; 0
     670:	b0 e0       	ldi	r27, 0x00	; 0
     672:	28 1b       	sub	r18, r24
     674:	39 0b       	sbc	r19, r25
     676:	4a 0b       	sbc	r20, r26
     678:	5b 0b       	sbc	r21, r27
     67a:	24 83       	std	Z+4, r18	; 0x04
     67c:	35 83       	std	Z+5, r19	; 0x05
     67e:	46 83       	std	Z+6, r20	; 0x06
     680:	57 83       	std	Z+7, r21	; 0x07
  }
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     692:	e0 91 02 02 	lds	r30, 0x0202
     696:	f0 91 03 02 	lds	r31, 0x0203
     69a:	24 89       	ldd	r18, Z+20	; 0x14
     69c:	35 89       	ldd	r19, Z+21	; 0x15
     69e:	46 89       	ldd	r20, Z+22	; 0x16
     6a0:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     6a2:	84 89       	ldd	r24, Z+20	; 0x14
     6a4:	95 89       	ldd	r25, Z+21	; 0x15
     6a6:	a6 89       	ldd	r26, Z+22	; 0x16
     6a8:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     6aa:	28 17       	cp	r18, r24
     6ac:	39 07       	cpc	r19, r25
     6ae:	4a 07       	cpc	r20, r26
     6b0:	5b 07       	cpc	r21, r27
     6b2:	99 f7       	brne	.-26     	; 0x69a <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     6b4:	7b 01       	movw	r14, r22
     6b6:	00 e0       	ldi	r16, 0x00	; 0
     6b8:	10 e0       	ldi	r17, 0x00	; 0
     6ba:	e2 0e       	add	r14, r18
     6bc:	f3 1e       	adc	r15, r19
     6be:	04 1f       	adc	r16, r20
     6c0:	15 1f       	adc	r17, r21
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e0       	ldi	r20, 0x00	; 0
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     6cc:	24 89       	ldd	r18, Z+20	; 0x14
     6ce:	35 89       	ldd	r19, Z+21	; 0x15
     6d0:	46 89       	ldd	r20, Z+22	; 0x16
     6d2:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     6d4:	84 89       	ldd	r24, Z+20	; 0x14
     6d6:	95 89       	ldd	r25, Z+21	; 0x15
     6d8:	a6 89       	ldd	r26, Z+22	; 0x16
     6da:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	4a 07       	cpc	r20, r26
     6e2:	5b 07       	cpc	r21, r27
     6e4:	99 f7       	brne	.-26     	; 0x6cc <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     6e6:	2e 15       	cp	r18, r14
     6e8:	3f 05       	cpc	r19, r15
     6ea:	40 07       	cpc	r20, r16
     6ec:	51 07       	cpc	r21, r17
     6ee:	74 f3       	brlt	.-36     	; 0x6cc <Timebase_Timer_Delay_Seconds+0x44>
	  Timebase_Atomic_Operation_End();
	  #else
	  curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	08 95       	ret

000006fa <Timebase_Window_Timer_Reset>:

/****************************Time Window Functions Start*****************************/

#ifdef TIMEBASE_TIME_WINDOW_CALCULATION
void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     6fa:	e0 91 02 02 	lds	r30, 0x0202
     6fe:	f0 91 03 02 	lds	r31, 0x0203
     702:	11 8e       	std	Z+25, r1	; 0x19
     704:	12 8e       	std	Z+26, r1	; 0x1a
     706:	13 8e       	std	Z+27, r1	; 0x1b
     708:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.StartTimeSubSeconds = 0;
     70a:	15 8e       	std	Z+29, r1	; 0x1d
     70c:	16 8e       	std	Z+30, r1	; 0x1e
     70e:	17 8e       	std	Z+31, r1	; 0x1f
     710:	10 a2       	std	Z+32, r1	; 0x20
  Timebase->Time.Status = COUNTER_STATE_RESET;
     712:	11 a2       	std	Z+33, r1	; 0x21
}
     714:	08 95       	ret

00000716 <Timebase_Window_Timer_Start>:


void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     716:	e0 91 02 02 	lds	r30, 0x0202
     71a:	f0 91 03 02 	lds	r31, 0x0203
     71e:	81 a1       	ldd	r24, Z+33	; 0x21
     720:	88 23       	and	r24, r24
     722:	a1 f4       	brne	.+40     	; 0x74c <Timebase_Window_Timer_Start+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     724:	f8 94       	cli
uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     726:	84 89       	ldd	r24, Z+20	; 0x14
     728:	95 89       	ldd	r25, Z+21	; 0x15
     72a:	a6 89       	ldd	r26, Z+22	; 0x16
     72c:	b7 89       	ldd	r27, Z+23	; 0x17


void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
     72e:	81 8f       	std	Z+25, r24	; 0x19
     730:	92 8f       	std	Z+26, r25	; 0x1a
     732:	a3 8f       	std	Z+27, r26	; 0x1b
     734:	b4 8f       	std	Z+28, r27	; 0x1c


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     736:	86 85       	ldd	r24, Z+14	; 0x0e
     738:	97 85       	ldd	r25, Z+15	; 0x0f

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
     73a:	a0 e0       	ldi	r26, 0x00	; 0
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	85 8f       	std	Z+29, r24	; 0x1d
     740:	96 8f       	std	Z+30, r25	; 0x1e
     742:	a7 8f       	std	Z+31, r26	; 0x1f
     744:	b0 a3       	std	Z+32, r27	; 0x20
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     746:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	81 a3       	std	Z+33, r24	; 0x21
     74c:	08 95       	ret

0000074e <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     74e:	ef 92       	push	r14
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     75a:	c0 91 02 02 	lds	r28, 0x0202
     75e:	d0 91 03 02 	lds	r29, 0x0203
     762:	89 a1       	ldd	r24, Y+33	; 0x21
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	21 f0       	breq	.+8      	; 0x770 <Timebase_Window_Timer_Get_Interval+0x22>
     768:	ee 24       	eor	r14, r14
     76a:	ff 24       	eor	r15, r15
     76c:	87 01       	movw	r16, r14
     76e:	25 c0       	rjmp	.+74     	; 0x7ba <Timebase_Window_Timer_Get_Interval+0x6c>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     770:	f8 94       	cli
uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     772:	2c 89       	ldd	r18, Y+20	; 0x14
     774:	3d 89       	ldd	r19, Y+21	; 0x15
     776:	4e 89       	ldd	r20, Y+22	; 0x16
     778:	5f 89       	ldd	r21, Y+23	; 0x17


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     77a:	8e 85       	ldd	r24, Y+14	; 0x0e
     77c:	9f 85       	ldd	r25, Y+15	; 0x0f
int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
     77e:	7c 01       	movw	r14, r24
     780:	00 e0       	ldi	r16, 0x00	; 0
     782:	10 e0       	ldi	r17, 0x00	; 0
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     784:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
	curr_s -= Timebase->Time.StartTimeSeconds;
     786:	89 8d       	ldd	r24, Y+25	; 0x19
     788:	9a 8d       	ldd	r25, Y+26	; 0x1a
     78a:	ab 8d       	ldd	r26, Y+27	; 0x1b
     78c:	bc 8d       	ldd	r27, Y+28	; 0x1c
     78e:	28 1b       	sub	r18, r24
     790:	39 0b       	sbc	r19, r25
     792:	4a 0b       	sbc	r20, r26
     794:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     796:	68 81       	ld	r22, Y
     798:	79 81       	ldd	r23, Y+1	; 0x01
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
	curr_s += curr_ss;
     7a2:	2d 8d       	ldd	r18, Y+29	; 0x1d
     7a4:	3e 8d       	ldd	r19, Y+30	; 0x1e
     7a6:	4f 8d       	ldd	r20, Y+31	; 0x1f
     7a8:	58 a1       	ldd	r21, Y+32	; 0x20
     7aa:	e2 1a       	sub	r14, r18
     7ac:	f3 0a       	sbc	r15, r19
     7ae:	04 0b       	sbc	r16, r20
     7b0:	15 0b       	sbc	r17, r21
     7b2:	e6 0e       	add	r14, r22
     7b4:	f7 1e       	adc	r15, r23
     7b6:	08 1f       	adc	r16, r24
     7b8:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     7ba:	b7 01       	movw	r22, r14
     7bc:	c8 01       	movw	r24, r16
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	0f 91       	pop	r16
     7c6:	ff 90       	pop	r15
     7c8:	ef 90       	pop	r14
     7ca:	08 95       	ret

000007cc <Timebase_Window_Timer_Get_Interval_Reset>:


int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     7cc:	0e 94 a7 03 	call	0x74e	; 0x74e <Timebase_Window_Timer_Get_Interval>
     7d0:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     7d2:	e0 91 02 02 	lds	r30, 0x0202
     7d6:	f0 91 03 02 	lds	r31, 0x0203
     7da:	81 a1       	ldd	r24, Z+33	; 0x21
     7dc:	81 30       	cpi	r24, 0x01	; 1
     7de:	49 f4       	brne	.+18     	; 0x7f2 <Timebase_Window_Timer_Get_Interval_Reset+0x26>

/****************************Time Window Functions Start*****************************/

#ifdef TIMEBASE_TIME_WINDOW_CALCULATION
void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     7e0:	11 8e       	std	Z+25, r1	; 0x19
     7e2:	12 8e       	std	Z+26, r1	; 0x1a
     7e4:	13 8e       	std	Z+27, r1	; 0x1b
     7e6:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.StartTimeSubSeconds = 0;
     7e8:	15 8e       	std	Z+29, r1	; 0x1d
     7ea:	16 8e       	std	Z+30, r1	; 0x1e
     7ec:	17 8e       	std	Z+31, r1	; 0x1f
     7ee:	10 a2       	std	Z+32, r1	; 0x20
  Timebase->Time.Status = COUNTER_STATE_RESET;
     7f0:	11 a2       	std	Z+33, r1	; 0x21
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     7f2:	82 2f       	mov	r24, r18
     7f4:	08 95       	ret

000007f6 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     7f6:	e0 91 02 02 	lds	r30, 0x0202
     7fa:	f0 91 03 02 	lds	r31, 0x0203
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	25 e1       	ldi	r18, 0x15	; 21
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	ac 01       	movw	r20, r24
     806:	42 9f       	mul	r20, r18
     808:	c0 01       	movw	r24, r0
     80a:	43 9f       	mul	r20, r19
     80c:	90 0d       	add	r25, r0
     80e:	52 9f       	mul	r21, r18
     810:	90 0d       	add	r25, r0
     812:	11 24       	eor	r1, r1
     814:	e8 0f       	add	r30, r24
     816:	f9 1f       	adc	r31, r25
     818:	83 a1       	ldd	r24, Z+35	; 0x23
     81a:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     81c:	8f 70       	andi	r24, 0x0F	; 15
     81e:	08 95       	ret

00000820 <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     820:	e0 91 02 02 	lds	r30, 0x0202
     824:	f0 91 03 02 	lds	r31, 0x0203
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	25 e1       	ldi	r18, 0x15	; 21
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	ac 01       	movw	r20, r24
     830:	42 9f       	mul	r20, r18
     832:	c0 01       	movw	r24, r0
     834:	43 9f       	mul	r20, r19
     836:	90 0d       	add	r25, r0
     838:	52 9f       	mul	r21, r18
     83a:	90 0d       	add	r25, r0
     83c:	11 24       	eor	r1, r1
     83e:	e8 0f       	add	r30, r24
     840:	f9 1f       	adc	r31, r25
     842:	6f 70       	andi	r22, 0x0F	; 15
     844:	66 0f       	add	r22, r22
     846:	83 a1       	ldd	r24, Z+35	; 0x23
     848:	81 7e       	andi	r24, 0xE1	; 225
     84a:	86 2b       	or	r24, r22
     84c:	83 a3       	std	Z+35, r24	; 0x23
}
     84e:	08 95       	ret

00000850 <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     850:	e0 91 02 02 	lds	r30, 0x0202
     854:	f0 91 03 02 	lds	r31, 0x0203
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	25 e1       	ldi	r18, 0x15	; 21
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	ac 01       	movw	r20, r24
     860:	42 9f       	mul	r20, r18
     862:	c0 01       	movw	r24, r0
     864:	43 9f       	mul	r20, r19
     866:	90 0d       	add	r25, r0
     868:	52 9f       	mul	r21, r18
     86a:	90 0d       	add	r25, r0
     86c:	11 24       	eor	r1, r1
     86e:	e8 0f       	add	r30, r24
     870:	f9 1f       	adc	r31, r25
     872:	df 01       	movw	r26, r30
     874:	9c 96       	adiw	r26, 0x2c	; 44
     876:	64 a5       	ldd	r22, Z+44	; 0x2c
     878:	11 96       	adiw	r26, 0x01	; 1
     87a:	7c 91       	ld	r23, X
     87c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     87e:	12 96       	adiw	r26, 0x02	; 2
     880:	8c 91       	ld	r24, X
     882:	12 97       	sbiw	r26, 0x02	; 2
     884:	13 96       	adiw	r26, 0x03	; 3
     886:	9c 91       	ld	r25, X
     888:	08 95       	ret

0000088a <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     88a:	e0 91 02 02 	lds	r30, 0x0202
     88e:	f0 91 03 02 	lds	r31, 0x0203
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	25 e1       	ldi	r18, 0x15	; 21
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	dc 01       	movw	r26, r24
     89a:	a2 9f       	mul	r26, r18
     89c:	c0 01       	movw	r24, r0
     89e:	a3 9f       	mul	r26, r19
     8a0:	90 0d       	add	r25, r0
     8a2:	b2 9f       	mul	r27, r18
     8a4:	90 0d       	add	r25, r0
     8a6:	11 24       	eor	r1, r1
     8a8:	e8 0f       	add	r30, r24
     8aa:	f9 1f       	adc	r31, r25
     8ac:	44 a7       	std	Z+44, r20	; 0x2c
     8ae:	55 a7       	std	Z+45, r21	; 0x2d
     8b0:	66 a7       	std	Z+46, r22	; 0x2e
     8b2:	77 a7       	std	Z+47, r23	; 0x2f
}
     8b4:	08 95       	ret

000008b6 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     8b6:	e0 91 02 02 	lds	r30, 0x0202
     8ba:	f0 91 03 02 	lds	r31, 0x0203
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	25 e1       	ldi	r18, 0x15	; 21
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	ac 01       	movw	r20, r24
     8c6:	42 9f       	mul	r20, r18
     8c8:	c0 01       	movw	r24, r0
     8ca:	43 9f       	mul	r20, r19
     8cc:	90 0d       	add	r25, r0
     8ce:	52 9f       	mul	r21, r18
     8d0:	90 0d       	add	r25, r0
     8d2:	11 24       	eor	r1, r1
     8d4:	e8 0f       	add	r30, r24
     8d6:	f9 1f       	adc	r31, r25
     8d8:	df 01       	movw	r26, r30
     8da:	94 96       	adiw	r26, 0x24	; 36
     8dc:	64 a1       	ldd	r22, Z+36	; 0x24
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	7c 91       	ld	r23, X
     8e2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	8c 91       	ld	r24, X
     8e8:	12 97       	sbiw	r26, 0x02	; 2
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	9c 91       	ld	r25, X
     8ee:	08 95       	ret

000008f0 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     8f0:	e0 91 02 02 	lds	r30, 0x0202
     8f4:	f0 91 03 02 	lds	r31, 0x0203
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	25 e1       	ldi	r18, 0x15	; 21
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	ac 01       	movw	r20, r24
     900:	42 9f       	mul	r20, r18
     902:	c0 01       	movw	r24, r0
     904:	43 9f       	mul	r20, r19
     906:	90 0d       	add	r25, r0
     908:	52 9f       	mul	r21, r18
     90a:	90 0d       	add	r25, r0
     90c:	11 24       	eor	r1, r1
     90e:	e8 0f       	add	r30, r24
     910:	f9 1f       	adc	r31, r25
     912:	df 01       	movw	r26, r30
     914:	98 96       	adiw	r26, 0x28	; 40
     916:	60 a5       	ldd	r22, Z+40	; 0x28
     918:	11 96       	adiw	r26, 0x01	; 1
     91a:	7c 91       	ld	r23, X
     91c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     91e:	12 96       	adiw	r26, 0x02	; 2
     920:	8c 91       	ld	r24, X
     922:	12 97       	sbiw	r26, 0x02	; 2
     924:	13 96       	adiw	r26, 0x03	; 3
     926:	9c 91       	ld	r25, X
     928:	08 95       	ret

0000092a <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     92a:	e0 91 02 02 	lds	r30, 0x0202
     92e:	f0 91 03 02 	lds	r31, 0x0203
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	25 e1       	ldi	r18, 0x15	; 21
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	dc 01       	movw	r26, r24
     93a:	a2 9f       	mul	r26, r18
     93c:	c0 01       	movw	r24, r0
     93e:	a3 9f       	mul	r26, r19
     940:	90 0d       	add	r25, r0
     942:	b2 9f       	mul	r27, r18
     944:	90 0d       	add	r25, r0
     946:	11 24       	eor	r1, r1
     948:	e8 0f       	add	r30, r24
     94a:	f9 1f       	adc	r31, r25
     94c:	44 a3       	std	Z+36, r20	; 0x24
     94e:	55 a3       	std	Z+37, r21	; 0x25
     950:	66 a3       	std	Z+38, r22	; 0x26
     952:	77 a3       	std	Z+39, r23	; 0x27
}
     954:	08 95       	ret

00000956 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     956:	e0 91 02 02 	lds	r30, 0x0202
     95a:	f0 91 03 02 	lds	r31, 0x0203
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	25 e1       	ldi	r18, 0x15	; 21
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	dc 01       	movw	r26, r24
     966:	a2 9f       	mul	r26, r18
     968:	c0 01       	movw	r24, r0
     96a:	a3 9f       	mul	r26, r19
     96c:	90 0d       	add	r25, r0
     96e:	b2 9f       	mul	r27, r18
     970:	90 0d       	add	r25, r0
     972:	11 24       	eor	r1, r1
     974:	e8 0f       	add	r30, r24
     976:	f9 1f       	adc	r31, r25
     978:	40 a7       	std	Z+40, r20	; 0x28
     97a:	51 a7       	std	Z+41, r21	; 0x29
     97c:	62 a7       	std	Z+42, r22	; 0x2a
     97e:	73 a7       	std	Z+43, r23	; 0x2b
}
     980:	08 95       	ret

00000982 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     982:	e0 91 02 02 	lds	r30, 0x0202
     986:	f0 91 03 02 	lds	r31, 0x0203
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	25 e1       	ldi	r18, 0x15	; 21
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	ac 01       	movw	r20, r24
     992:	42 9f       	mul	r20, r18
     994:	c0 01       	movw	r24, r0
     996:	43 9f       	mul	r20, r19
     998:	90 0d       	add	r25, r0
     99a:	52 9f       	mul	r21, r18
     99c:	90 0d       	add	r25, r0
     99e:	11 24       	eor	r1, r1
     9a0:	e8 0f       	add	r30, r24
     9a2:	f9 1f       	adc	r31, r25
     9a4:	df 01       	movw	r26, r30
     9a6:	d0 96       	adiw	r26, 0x30	; 48
     9a8:	60 a9       	ldd	r22, Z+48	; 0x30
     9aa:	11 96       	adiw	r26, 0x01	; 1
     9ac:	7c 91       	ld	r23, X
     9ae:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     9b0:	12 96       	adiw	r26, 0x02	; 2
     9b2:	8c 91       	ld	r24, X
     9b4:	12 97       	sbiw	r26, 0x02	; 2
     9b6:	13 96       	adiw	r26, 0x03	; 3
     9b8:	9c 91       	ld	r25, X
     9ba:	08 95       	ret

000009bc <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     9bc:	e0 91 02 02 	lds	r30, 0x0202
     9c0:	f0 91 03 02 	lds	r31, 0x0203
     9c4:	28 2f       	mov	r18, r24
     9c6:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     9c8:	77 ff       	sbrs	r23, 7
     9ca:	11 c0       	rjmp	.+34     	; 0x9ee <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     9cc:	85 e1       	ldi	r24, 0x15	; 21
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	ac 01       	movw	r20, r24
     9d2:	24 9f       	mul	r18, r20
     9d4:	c0 01       	movw	r24, r0
     9d6:	25 9f       	mul	r18, r21
     9d8:	90 0d       	add	r25, r0
     9da:	34 9f       	mul	r19, r20
     9dc:	90 0d       	add	r25, r0
     9de:	11 24       	eor	r1, r1
     9e0:	e8 0f       	add	r30, r24
     9e2:	f9 1f       	adc	r31, r25
     9e4:	10 aa       	std	Z+48, r1	; 0x30
     9e6:	11 aa       	std	Z+49, r1	; 0x31
     9e8:	12 aa       	std	Z+50, r1	; 0x32
     9ea:	13 aa       	std	Z+51, r1	; 0x33
     9ec:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     9ee:	85 e1       	ldi	r24, 0x15	; 21
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	dc 01       	movw	r26, r24
     9f4:	2a 9f       	mul	r18, r26
     9f6:	c0 01       	movw	r24, r0
     9f8:	2b 9f       	mul	r18, r27
     9fa:	90 0d       	add	r25, r0
     9fc:	3a 9f       	mul	r19, r26
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	e8 0f       	add	r30, r24
     a04:	f9 1f       	adc	r31, r25
     a06:	40 ab       	std	Z+48, r20	; 0x30
     a08:	51 ab       	std	Z+49, r21	; 0x31
     a0a:	62 ab       	std	Z+50, r22	; 0x32
     a0c:	73 ab       	std	Z+51, r23	; 0x33
     a0e:	08 95       	ret

00000a10 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     a10:	e0 91 02 02 	lds	r30, 0x0202
     a14:	f0 91 03 02 	lds	r31, 0x0203
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	25 e1       	ldi	r18, 0x15	; 21
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	ac 01       	movw	r20, r24
     a20:	42 9f       	mul	r20, r18
     a22:	c0 01       	movw	r24, r0
     a24:	43 9f       	mul	r20, r19
     a26:	90 0d       	add	r25, r0
     a28:	52 9f       	mul	r21, r18
     a2a:	90 0d       	add	r25, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	e8 0f       	add	r30, r24
     a30:	f9 1f       	adc	r31, r25
     a32:	83 a1       	ldd	r24, Z+35	; 0x23
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     a34:	81 70       	andi	r24, 0x01	; 1
     a36:	08 95       	ret

00000a38 <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a38:	e0 91 02 02 	lds	r30, 0x0202
     a3c:	f0 91 03 02 	lds	r31, 0x0203
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	25 e1       	ldi	r18, 0x15	; 21
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	ac 01       	movw	r20, r24
     a48:	42 9f       	mul	r20, r18
     a4a:	c0 01       	movw	r24, r0
     a4c:	43 9f       	mul	r20, r19
     a4e:	90 0d       	add	r25, r0
     a50:	52 9f       	mul	r21, r18
     a52:	90 0d       	add	r25, r0
     a54:	11 24       	eor	r1, r1
     a56:	e8 0f       	add	r30, r24
     a58:	f9 1f       	adc	r31, r25
     a5a:	83 a1       	ldd	r24, Z+35	; 0x23
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	83 a3       	std	Z+35, r24	; 0x23
}
     a60:	08 95       	ret

00000a62 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a62:	e0 91 02 02 	lds	r30, 0x0202
     a66:	f0 91 03 02 	lds	r31, 0x0203
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	25 e1       	ldi	r18, 0x15	; 21
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	ac 01       	movw	r20, r24
     a72:	42 9f       	mul	r20, r18
     a74:	c0 01       	movw	r24, r0
     a76:	43 9f       	mul	r20, r19
     a78:	90 0d       	add	r25, r0
     a7a:	52 9f       	mul	r21, r18
     a7c:	90 0d       	add	r25, r0
     a7e:	11 24       	eor	r1, r1
     a80:	e8 0f       	add	r30, r24
     a82:	f9 1f       	adc	r31, r25
     a84:	83 a1       	ldd	r24, Z+35	; 0x23
     a86:	8e 7f       	andi	r24, 0xFE	; 254
     a88:	83 a3       	std	Z+35, r24	; 0x23
}
     a8a:	08 95       	ret

00000a8c <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     a8c:	e0 91 02 02 	lds	r30, 0x0202
     a90:	f0 91 03 02 	lds	r31, 0x0203
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	25 e1       	ldi	r18, 0x15	; 21
     a98:	30 e0       	ldi	r19, 0x00	; 0
     a9a:	ac 01       	movw	r20, r24
     a9c:	42 9f       	mul	r20, r18
     a9e:	c0 01       	movw	r24, r0
     aa0:	43 9f       	mul	r20, r19
     aa2:	90 0d       	add	r25, r0
     aa4:	52 9f       	mul	r21, r18
     aa6:	90 0d       	add	r25, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	e8 0f       	add	r30, r24
     aac:	f9 1f       	adc	r31, r25
     aae:	df 01       	movw	r26, r30
     ab0:	d4 96       	adiw	r26, 0x34	; 52
     ab2:	64 a9       	ldd	r22, Z+52	; 0x34
     ab4:	11 96       	adiw	r26, 0x01	; 1
     ab6:	7c 91       	ld	r23, X
     ab8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     aba:	12 96       	adiw	r26, 0x02	; 2
     abc:	8c 91       	ld	r24, X
     abe:	12 97       	sbiw	r26, 0x02	; 2
     ac0:	13 96       	adiw	r26, 0x03	; 3
     ac2:	9c 91       	ld	r25, X
     ac4:	08 95       	ret

00000ac6 <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     ac6:	e0 91 02 02 	lds	r30, 0x0202
     aca:	f0 91 03 02 	lds	r31, 0x0203
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	25 e1       	ldi	r18, 0x15	; 21
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	dc 01       	movw	r26, r24
     ad6:	a2 9f       	mul	r26, r18
     ad8:	c0 01       	movw	r24, r0
     ada:	a3 9f       	mul	r26, r19
     adc:	90 0d       	add	r25, r0
     ade:	b2 9f       	mul	r27, r18
     ae0:	90 0d       	add	r25, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	e8 0f       	add	r30, r24
     ae6:	f9 1f       	adc	r31, r25
     ae8:	44 ab       	std	Z+52, r20	; 0x34
     aea:	55 ab       	std	Z+53, r21	; 0x35
     aec:	66 ab       	std	Z+54, r22	; 0x36
     aee:	77 ab       	std	Z+55, r23	; 0x37
}
     af0:	08 95       	ret

00000af2 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     af2:	e0 91 02 02 	lds	r30, 0x0202
     af6:	f0 91 03 02 	lds	r31, 0x0203
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	25 e1       	ldi	r18, 0x15	; 21
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	ac 01       	movw	r20, r24
     b02:	42 9f       	mul	r20, r18
     b04:	c0 01       	movw	r24, r0
     b06:	43 9f       	mul	r20, r19
     b08:	90 0d       	add	r25, r0
     b0a:	52 9f       	mul	r21, r18
     b0c:	90 0d       	add	r25, r0
     b0e:	11 24       	eor	r1, r1
     b10:	e8 0f       	add	r30, r24
     b12:	f9 1f       	adc	r31, r25
     b14:	10 a6       	std	Z+40, r1	; 0x28
     b16:	11 a6       	std	Z+41, r1	; 0x29
     b18:	12 a6       	std	Z+42, r1	; 0x2a
     b1a:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b1c:	14 a2       	std	Z+36, r1	; 0x24
     b1e:	15 a2       	std	Z+37, r1	; 0x25
     b20:	16 a2       	std	Z+38, r1	; 0x26
     b22:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b24:	14 a6       	std	Z+44, r1	; 0x2c
     b26:	15 a6       	std	Z+45, r1	; 0x2d
     b28:	16 a6       	std	Z+46, r1	; 0x2e
     b2a:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b2c:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b2e:	80 7e       	andi	r24, 0xE0	; 224
     b30:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b32:	14 aa       	std	Z+52, r1	; 0x34
     b34:	15 aa       	std	Z+53, r1	; 0x35
     b36:	16 aa       	std	Z+54, r1	; 0x36
     b38:	17 aa       	std	Z+55, r1	; 0x37
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     b3a:	08 95       	ret

00000b3c <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b3c:	e0 91 02 02 	lds	r30, 0x0202
     b40:	f0 91 03 02 	lds	r31, 0x0203
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	25 e1       	ldi	r18, 0x15	; 21
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	ac 01       	movw	r20, r24
     b4c:	42 9f       	mul	r20, r18
     b4e:	c0 01       	movw	r24, r0
     b50:	43 9f       	mul	r20, r19
     b52:	90 0d       	add	r25, r0
     b54:	52 9f       	mul	r21, r18
     b56:	90 0d       	add	r25, r0
     b58:	11 24       	eor	r1, r1
     b5a:	e8 0f       	add	r30, r24
     b5c:	f9 1f       	adc	r31, r25
     b5e:	10 a6       	std	Z+40, r1	; 0x28
     b60:	11 a6       	std	Z+41, r1	; 0x29
     b62:	12 a6       	std	Z+42, r1	; 0x2a
     b64:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b66:	14 a2       	std	Z+36, r1	; 0x24
     b68:	15 a2       	std	Z+37, r1	; 0x25
     b6a:	16 a2       	std	Z+38, r1	; 0x26
     b6c:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b6e:	14 a6       	std	Z+44, r1	; 0x2c
     b70:	15 a6       	std	Z+45, r1	; 0x2d
     b72:	16 a6       	std	Z+46, r1	; 0x2e
     b74:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b76:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b78:	80 7e       	andi	r24, 0xE0	; 224
     b7a:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b7c:	14 aa       	std	Z+52, r1	; 0x34
     b7e:	15 aa       	std	Z+53, r1	; 0x35
     b80:	16 aa       	std	Z+54, r1	; 0x36
     b82:	17 aa       	std	Z+55, r1	; 0x37
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     b84:	08 95       	ret

00000b86 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     b86:	e0 91 02 02 	lds	r30, 0x0202
     b8a:	f0 91 03 02 	lds	r31, 0x0203
     b8e:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     b90:	25 e1       	ldi	r18, 0x15	; 21
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	ac 01       	movw	r20, r24
     b96:	42 9f       	mul	r20, r18
     b98:	c0 01       	movw	r24, r0
     b9a:	43 9f       	mul	r20, r19
     b9c:	90 0d       	add	r25, r0
     b9e:	52 9f       	mul	r21, r18
     ba0:	90 0d       	add	r25, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	e8 0f       	add	r30, r24
     ba6:	f9 1f       	adc	r31, r25
     ba8:	93 a1       	ldd	r25, Z+35	; 0x23
     baa:	89 2f       	mov	r24, r25
     bac:	86 95       	lsr	r24
     bae:	8f 70       	andi	r24, 0x0F	; 15
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	19 f0       	breq	.+6      	; 0xbba <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bb4:	91 7e       	andi	r25, 0xE1	; 225
     bb6:	92 60       	ori	r25, 0x02	; 2
     bb8:	93 a3       	std	Z+35, r25	; 0x23
     bba:	08 95       	ret

00000bbc <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     bbc:	e0 91 02 02 	lds	r30, 0x0202
     bc0:	f0 91 03 02 	lds	r31, 0x0203
     bc4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     bc6:	25 e1       	ldi	r18, 0x15	; 21
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	ac 01       	movw	r20, r24
     bcc:	42 9f       	mul	r20, r18
     bce:	c0 01       	movw	r24, r0
     bd0:	43 9f       	mul	r20, r19
     bd2:	90 0d       	add	r25, r0
     bd4:	52 9f       	mul	r21, r18
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	93 a1       	ldd	r25, Z+35	; 0x23
     be0:	89 2f       	mov	r24, r25
     be2:	86 95       	lsr	r24
     be4:	8f 70       	andi	r24, 0x0F	; 15
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	19 f0       	breq	.+6      	; 0xbf0 <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bea:	91 7e       	andi	r25, 0xE1	; 225
     bec:	94 60       	ori	r25, 0x04	; 4
     bee:	93 a3       	std	Z+35, r25	; 0x23
     bf0:	08 95       	ret

00000bf2 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     bf2:	2f 92       	push	r2
     bf4:	3f 92       	push	r3
     bf6:	4f 92       	push	r4
     bf8:	5f 92       	push	r5
     bfa:	6f 92       	push	r6
     bfc:	7f 92       	push	r7
     bfe:	8f 92       	push	r8
     c00:	9f 92       	push	r9
     c02:	af 92       	push	r10
     c04:	bf 92       	push	r11
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	28 97       	sbiw	r28, 0x08	; 8
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	1a 01       	movw	r2, r20
     c28:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c2a:	20 91 02 02 	lds	r18, 0x0202
     c2e:	30 91 03 02 	lds	r19, 0x0203
     c32:	38 87       	std	Y+8, r19	; 0x08
     c34:	2f 83       	std	Y+7, r18	; 0x07
     c36:	a8 2f       	mov	r26, r24
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	ba 83       	std	Y+2, r27	; 0x02
     c3c:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     c3e:	85 e1       	ldi	r24, 0x15	; 21
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a8 9f       	mul	r26, r24
     c44:	f0 01       	movw	r30, r0
     c46:	a9 9f       	mul	r26, r25
     c48:	f0 0d       	add	r31, r0
     c4a:	b8 9f       	mul	r27, r24
     c4c:	f0 0d       	add	r31, r0
     c4e:	11 24       	eor	r1, r1
     c50:	e2 0f       	add	r30, r18
     c52:	f3 1f       	adc	r31, r19
     c54:	83 a1       	ldd	r24, Z+35	; 0x23
     c56:	86 95       	lsr	r24
     c58:	8f 70       	andi	r24, 0x0F	; 15
     c5a:	09 f0       	breq	.+2      	; 0xc5e <Timebase_DownCounter_SS_Set_Securely+0x6c>
     c5c:	80 c0       	rjmp	.+256    	; 0xd5e <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     c5e:	44 a7       	std	Z+44, r20	; 0x2c
     c60:	55 a7       	std	Z+45, r21	; 0x2d
     c62:	66 a7       	std	Z+46, r22	; 0x2e
     c64:	77 a7       	std	Z+47, r23	; 0x2f
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c66:	f9 01       	movw	r30, r18
     c68:	c0 84       	ldd	r12, Z+8	; 0x08
     c6a:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c6c:	d9 01       	movw	r26, r18
     c6e:	1a 96       	adiw	r26, 0x0a	; 10
     c70:	8d 91       	ld	r24, X+
     c72:	9d 91       	ld	r25, X+
     c74:	0d 90       	ld	r0, X+
     c76:	bc 91       	ld	r27, X
     c78:	a0 2d       	mov	r26, r0
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	ad 83       	std	Y+5, r26	; 0x05
     c80:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     c82:	20 81       	ld	r18, Z
     c84:	31 81       	ldd	r19, Z+1	; 0x01
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	c2 01       	movw	r24, r4
     c8c:	b1 01       	movw	r22, r2
     c8e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     c92:	7b 01       	movw	r14, r22
     c94:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     c96:	ef 81       	ldd	r30, Y+7	; 0x07
     c98:	f8 85       	ldd	r31, Y+8	; 0x08
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	c2 01       	movw	r24, r4
     ca4:	b1 01       	movw	r22, r2
     ca6:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     caa:	c9 01       	movw	r24, r18
     cac:	da 01       	movw	r26, r20
     cae:	3c 01       	movw	r6, r24
     cb0:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     cb2:	56 01       	movw	r10, r12
     cb4:	cc 24       	eor	r12, r12
     cb6:	dd 24       	eor	r13, r13
     cb8:	ae 0c       	add	r10, r14
     cba:	bf 1c       	adc	r11, r15
     cbc:	c0 1e       	adc	r12, r16
     cbe:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     cc0:	af 81       	ldd	r26, Y+7	; 0x07
     cc2:	b8 85       	ldd	r27, Y+8	; 0x08
     cc4:	8d 91       	ld	r24, X+
     cc6:	9c 91       	ld	r25, X
     cc8:	a0 e0       	ldi	r26, 0x00	; 0
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	a8 16       	cp	r10, r24
     cce:	b9 06       	cpc	r11, r25
     cd0:	ca 06       	cpc	r12, r26
     cd2:	db 06       	cpc	r13, r27
     cd4:	a4 f0       	brlt	.+40     	; 0xcfe <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     cd6:	08 94       	sec
     cd8:	61 1c       	adc	r6, r1
     cda:	71 1c       	adc	r7, r1
     cdc:	81 1c       	adc	r8, r1
     cde:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     ce0:	ef 81       	ldd	r30, Y+7	; 0x07
     ce2:	f8 85       	ldd	r31, Y+8	; 0x08
     ce4:	20 81       	ld	r18, Z
     ce6:	31 81       	ldd	r19, Z+1	; 0x01
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	c6 01       	movw	r24, r12
     cee:	b5 01       	movw	r22, r10
     cf0:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     cf4:	ac 01       	movw	r20, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	da 01       	movw	r26, r20
     cfa:	5c 01       	movw	r10, r24
     cfc:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     cfe:	85 e1       	ldi	r24, 0x15	; 21
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	29 81       	ldd	r18, Y+1	; 0x01
     d04:	3a 81       	ldd	r19, Y+2	; 0x02
     d06:	28 9f       	mul	r18, r24
     d08:	a0 01       	movw	r20, r0
     d0a:	29 9f       	mul	r18, r25
     d0c:	50 0d       	add	r21, r0
     d0e:	38 9f       	mul	r19, r24
     d10:	50 0d       	add	r21, r0
     d12:	11 24       	eor	r1, r1
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	98 85       	ldd	r25, Y+8	; 0x08
     d18:	48 0f       	add	r20, r24
     d1a:	59 1f       	adc	r21, r25
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	ad 81       	ldd	r26, Y+5	; 0x05
     d22:	be 81       	ldd	r27, Y+6	; 0x06
     d24:	86 0d       	add	r24, r6
     d26:	97 1d       	adc	r25, r7
     d28:	a8 1d       	adc	r26, r8
     d2a:	b9 1d       	adc	r27, r9
     d2c:	fa 01       	movw	r30, r20
     d2e:	84 a3       	std	Z+36, r24	; 0x24
     d30:	95 a3       	std	Z+37, r25	; 0x25
     d32:	a6 a3       	std	Z+38, r26	; 0x26
     d34:	b7 a3       	std	Z+39, r27	; 0x27
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d36:	da 01       	movw	r26, r20
     d38:	98 96       	adiw	r26, 0x28	; 40
     d3a:	ad 92       	st	X+, r10
     d3c:	bd 92       	st	X+, r11
     d3e:	cd 92       	st	X+, r12
     d40:	dc 92       	st	X, r13
     d42:	9b 97       	sbiw	r26, 0x2b	; 43
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d44:	24 aa       	std	Z+52, r2	; 0x34
     d46:	35 aa       	std	Z+53, r3	; 0x35
     d48:	46 aa       	std	Z+54, r4	; 0x36
     d4a:	57 aa       	std	Z+55, r5	; 0x37
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     d4c:	93 a1       	ldd	r25, Z+35	; 0x23
     d4e:	89 2f       	mov	r24, r25
     d50:	86 95       	lsr	r24
     d52:	8f 70       	andi	r24, 0x0F	; 15
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	19 f0       	breq	.+6      	; 0xd5e <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d58:	91 7e       	andi	r25, 0xE1	; 225
     d5a:	92 60       	ori	r25, 0x02	; 2
     d5c:	93 a3       	std	Z+35, r25	; 0x23
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     d5e:	28 96       	adiw	r28, 0x08	; 8
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	cf 90       	pop	r12
     d7a:	bf 90       	pop	r11
     d7c:	af 90       	pop	r10
     d7e:	9f 90       	pop	r9
     d80:	8f 90       	pop	r8
     d82:	7f 90       	pop	r7
     d84:	6f 90       	pop	r6
     d86:	5f 90       	pop	r5
     d88:	4f 90       	pop	r4
     d8a:	3f 90       	pop	r3
     d8c:	2f 90       	pop	r2
     d8e:	08 95       	ret

00000d90 <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     d90:	cf 92       	push	r12
     d92:	df 92       	push	r13
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	7a 01       	movw	r14, r20
     d9e:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     da0:	e0 91 02 02 	lds	r30, 0x0202
     da4:	f0 91 03 02 	lds	r31, 0x0203
     da8:	48 2f       	mov	r20, r24
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	25 e1       	ldi	r18, 0x15	; 21
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	42 9f       	mul	r20, r18
     db2:	60 01       	movw	r12, r0
     db4:	43 9f       	mul	r20, r19
     db6:	d0 0c       	add	r13, r0
     db8:	52 9f       	mul	r21, r18
     dba:	d0 0c       	add	r13, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	ec 0d       	add	r30, r12
     dc0:	fd 1d       	adc	r31, r13
     dc2:	10 a6       	std	Z+40, r1	; 0x28
     dc4:	11 a6       	std	Z+41, r1	; 0x29
     dc6:	12 a6       	std	Z+42, r1	; 0x2a
     dc8:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     dca:	14 a2       	std	Z+36, r1	; 0x24
     dcc:	15 a2       	std	Z+37, r1	; 0x25
     dce:	16 a2       	std	Z+38, r1	; 0x26
     dd0:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     dd2:	14 a6       	std	Z+44, r1	; 0x2c
     dd4:	15 a6       	std	Z+45, r1	; 0x2d
     dd6:	16 a6       	std	Z+46, r1	; 0x2e
     dd8:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     dda:	93 a1       	ldd	r25, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ddc:	90 7e       	andi	r25, 0xE0	; 224
     dde:	93 a3       	std	Z+35, r25	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     de0:	14 aa       	std	Z+52, r1	; 0x34
     de2:	15 aa       	std	Z+53, r1	; 0x35
     de4:	16 aa       	std	Z+54, r1	; 0x36
     de6:	17 aa       	std	Z+55, r1	; 0x37
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     de8:	b8 01       	movw	r22, r16
     dea:	a7 01       	movw	r20, r14
     dec:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     df0:	e0 91 02 02 	lds	r30, 0x0202
     df4:	f0 91 03 02 	lds	r31, 0x0203
     df8:	ec 0d       	add	r30, r12
     dfa:	fd 1d       	adc	r31, r13
     dfc:	e4 aa       	std	Z+52, r14	; 0x34
     dfe:	f5 aa       	std	Z+53, r15	; 0x35
     e00:	06 ab       	std	Z+54, r16	; 0x36
     e02:	17 ab       	std	Z+55, r17	; 0x37

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	df 90       	pop	r13
     e0e:	cf 90       	pop	r12
     e10:	08 95       	ret

00000e12 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     e12:	2f 92       	push	r2
     e14:	3f 92       	push	r3
     e16:	4f 92       	push	r4
     e18:	5f 92       	push	r5
     e1a:	6f 92       	push	r6
     e1c:	7f 92       	push	r7
     e1e:	8f 92       	push	r8
     e20:	9f 92       	push	r9
     e22:	af 92       	push	r10
     e24:	bf 92       	push	r11
     e26:	cf 92       	push	r12
     e28:	df 92       	push	r13
     e2a:	ef 92       	push	r14
     e2c:	ff 92       	push	r15
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e36:	e0 91 02 02 	lds	r30, 0x0202
     e3a:	f0 91 03 02 	lds	r31, 0x0203
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	25 e1       	ldi	r18, 0x15	; 21
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	82 9f       	mul	r24, r18
     e46:	e0 01       	movw	r28, r0
     e48:	83 9f       	mul	r24, r19
     e4a:	d0 0d       	add	r29, r0
     e4c:	92 9f       	mul	r25, r18
     e4e:	d0 0d       	add	r29, r0
     e50:	11 24       	eor	r1, r1
     e52:	ce 0f       	add	r28, r30
     e54:	df 1f       	adc	r29, r31
     e56:	8b a1       	ldd	r24, Y+35	; 0x23
     e58:	86 95       	lsr	r24
     e5a:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	09 f0       	breq	.+2      	; 0xe62 <Timebase_DownCounter_SS_Update+0x50>
     e60:	48 c0       	rjmp	.+144    	; 0xef2 <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e62:	e0 84       	ldd	r14, Z+8	; 0x08
     e64:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     e66:	00 e0       	ldi	r16, 0x00	; 0
     e68:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e6a:	82 85       	ldd	r24, Z+10	; 0x0a
     e6c:	93 85       	ldd	r25, Z+11	; 0x0b
     e6e:	a4 85       	ldd	r26, Z+12	; 0x0c
     e70:	b5 85       	ldd	r27, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     e72:	2c a1       	ldd	r18, Y+36	; 0x24
     e74:	3d a1       	ldd	r19, Y+37	; 0x25
     e76:	4e a1       	ldd	r20, Y+38	; 0x26
     e78:	5f a1       	ldd	r21, Y+39	; 0x27
     e7a:	28 1b       	sub	r18, r24
     e7c:	39 0b       	sbc	r19, r25
     e7e:	4a 0b       	sbc	r20, r26
     e80:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     e82:	60 81       	ld	r22, Z
     e84:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     e86:	80 e0       	ldi	r24, 0x00	; 0
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
     e8e:	6e 19       	sub	r22, r14
     e90:	7f 09       	sbc	r23, r15
     e92:	80 0b       	sbc	r24, r16
     e94:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     e96:	28 a5       	ldd	r18, Y+40	; 0x28
     e98:	39 a5       	ldd	r19, Y+41	; 0x29
     e9a:	4a a5       	ldd	r20, Y+42	; 0x2a
     e9c:	5b a5       	ldd	r21, Y+43	; 0x2b
     e9e:	62 0f       	add	r22, r18
     ea0:	73 1f       	adc	r23, r19
     ea2:	84 1f       	adc	r24, r20
     ea4:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ea6:	6c a7       	std	Y+44, r22	; 0x2c
     ea8:	7d a7       	std	Y+45, r23	; 0x2d
     eaa:	8e a7       	std	Y+46, r24	; 0x2e
     eac:	9f a7       	std	Y+47, r25	; 0x2f
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     eae:	16 16       	cp	r1, r22
     eb0:	17 06       	cpc	r1, r23
     eb2:	18 06       	cpc	r1, r24
     eb4:	19 06       	cpc	r1, r25
     eb6:	0c f4       	brge	.+2      	; 0xeba <Timebase_DownCounter_SS_Update+0xa8>
     eb8:	4c c0       	rjmp	.+152    	; 0xf52 <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     eba:	8c a9       	ldd	r24, Y+52	; 0x34
     ebc:	9d a9       	ldd	r25, Y+53	; 0x35
     ebe:	ae a9       	ldd	r26, Y+54	; 0x36
     ec0:	bf a9       	ldd	r27, Y+55	; 0x37
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     ec2:	18 a6       	std	Y+40, r1	; 0x28
     ec4:	19 a6       	std	Y+41, r1	; 0x29
     ec6:	1a a6       	std	Y+42, r1	; 0x2a
     ec8:	1b a6       	std	Y+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     eca:	1c a2       	std	Y+36, r1	; 0x24
     ecc:	1d a2       	std	Y+37, r1	; 0x25
     ece:	1e a2       	std	Y+38, r1	; 0x26
     ed0:	1f a2       	std	Y+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ed2:	1c a6       	std	Y+44, r1	; 0x2c
     ed4:	1d a6       	std	Y+45, r1	; 0x2d
     ed6:	1e a6       	std	Y+46, r1	; 0x2e
     ed8:	1f a6       	std	Y+47, r1	; 0x2f
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     eda:	2b a1       	ldd	r18, Y+35	; 0x23
     edc:	2e 7f       	andi	r18, 0xFE	; 254
     ede:	2b a3       	std	Y+35, r18	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     ee0:	8c ab       	std	Y+52, r24	; 0x34
     ee2:	9d ab       	std	Y+53, r25	; 0x35
     ee4:	ae ab       	std	Y+54, r26	; 0x36
     ee6:	bf ab       	std	Y+55, r27	; 0x37
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ee8:	8b a1       	ldd	r24, Y+35	; 0x23
     eea:	81 7e       	andi	r24, 0xE1	; 225
     eec:	88 60       	ori	r24, 0x08	; 8
     eee:	8b a3       	std	Y+35, r24	; 0x23
     ef0:	30 c0       	rjmp	.+96     	; 0xf52 <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     ef2:	82 30       	cpi	r24, 0x02	; 2
     ef4:	71 f5       	brne	.+92     	; 0xf52 <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ef6:	60 84       	ldd	r6, Z+8	; 0x08
     ef8:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     efa:	e2 84       	ldd	r14, Z+10	; 0x0a
     efc:	f3 84       	ldd	r15, Z+11	; 0x0b
     efe:	04 85       	ldd	r16, Z+12	; 0x0c
     f00:	15 85       	ldd	r17, Z+13	; 0x0d
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f02:	2c a4       	ldd	r2, Y+44	; 0x2c
     f04:	3d a4       	ldd	r3, Y+45	; 0x2d
     f06:	4e a4       	ldd	r4, Y+46	; 0x2e
     f08:	5f a4       	ldd	r5, Y+47	; 0x2f
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     f0a:	20 81       	ld	r18, Z
     f0c:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     f0e:	a0 80       	ld	r10, Z
     f10:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	c2 01       	movw	r24, r4
     f18:	b1 01       	movw	r22, r2
     f1a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     f1e:	e2 0e       	add	r14, r18
     f20:	f3 1e       	adc	r15, r19
     f22:	04 1f       	adc	r16, r20
     f24:	15 1f       	adc	r17, r21
     f26:	ec a2       	std	Y+36, r14	; 0x24
     f28:	fd a2       	std	Y+37, r15	; 0x25
     f2a:	0e a3       	std	Y+38, r16	; 0x26
     f2c:	1f a3       	std	Y+39, r17	; 0x27
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     f2e:	cc 24       	eor	r12, r12
     f30:	dd 24       	eor	r13, r13
     f32:	c2 01       	movw	r24, r4
     f34:	b1 01       	movw	r22, r2
     f36:	a6 01       	movw	r20, r12
     f38:	95 01       	movw	r18, r10
     f3a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
     f3e:	88 24       	eor	r8, r8
     f40:	99 24       	eor	r9, r9
     f42:	66 0e       	add	r6, r22
     f44:	77 1e       	adc	r7, r23
     f46:	88 1e       	adc	r8, r24
     f48:	99 1e       	adc	r9, r25
     f4a:	68 a6       	std	Y+40, r6	; 0x28
     f4c:	79 a6       	std	Y+41, r7	; 0x29
     f4e:	8a a6       	std	Y+42, r8	; 0x2a
     f50:	9b a6       	std	Y+43, r9	; 0x2b
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	bf 90       	pop	r11
     f64:	af 90       	pop	r10
     f66:	9f 90       	pop	r9
     f68:	8f 90       	pop	r8
     f6a:	7f 90       	pop	r7
     f6c:	6f 90       	pop	r6
     f6e:	5f 90       	pop	r5
     f70:	4f 90       	pop	r4
     f72:	3f 90       	pop	r3
     f74:	2f 90       	pop	r2
     f76:	08 95       	ret

00000f78 <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	e0 91 02 02 	lds	r30, 0x0202
     f7e:	f0 91 03 02 	lds	r31, 0x0203
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	25 e1       	ldi	r18, 0x15	; 21
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	bc 01       	movw	r22, r24
     f8a:	62 9f       	mul	r22, r18
     f8c:	c0 01       	movw	r24, r0
     f8e:	63 9f       	mul	r22, r19
     f90:	90 0d       	add	r25, r0
     f92:	72 9f       	mul	r23, r18
     f94:	90 0d       	add	r25, r0
     f96:	11 24       	eor	r1, r1
     f98:	e8 0f       	add	r30, r24
     f9a:	f9 1f       	adc	r31, r25
     f9c:	83 a1       	ldd	r24, Z+35	; 0x23
     f9e:	86 95       	lsr	r24
     fa0:	8f 70       	andi	r24, 0x0F	; 15
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <Timebase_DownCounter_SS_Expired+0x30>
     fa6:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fa8:	84 2f       	mov	r24, r20
     faa:	08 95       	ret

00000fac <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     fac:	e0 91 02 02 	lds	r30, 0x0202
     fb0:	f0 91 03 02 	lds	r31, 0x0203
     fb4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     fb6:	25 e1       	ldi	r18, 0x15	; 21
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	ac 01       	movw	r20, r24
     fbc:	42 9f       	mul	r20, r18
     fbe:	c0 01       	movw	r24, r0
     fc0:	43 9f       	mul	r20, r19
     fc2:	90 0d       	add	r25, r0
     fc4:	52 9f       	mul	r21, r18
     fc6:	90 0d       	add	r25, r0
     fc8:	11 24       	eor	r1, r1
     fca:	e8 0f       	add	r30, r24
     fcc:	f9 1f       	adc	r31, r25
     fce:	83 a1       	ldd	r24, Z+35	; 0x23
     fd0:	86 95       	lsr	r24
     fd2:	8f 70       	andi	r24, 0x0F	; 15
     fd4:	84 30       	cpi	r24, 0x04	; 4
     fd6:	11 f0       	breq	.+4      	; 0xfdc <Timebase_DownCounter_SS_Expired_Event+0x30>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     fdc:	10 a6       	std	Z+40, r1	; 0x28
     fde:	11 a6       	std	Z+41, r1	; 0x29
     fe0:	12 a6       	std	Z+42, r1	; 0x2a
     fe2:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     fe4:	14 a2       	std	Z+36, r1	; 0x24
     fe6:	15 a2       	std	Z+37, r1	; 0x25
     fe8:	16 a2       	std	Z+38, r1	; 0x26
     fea:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     fec:	14 a6       	std	Z+44, r1	; 0x2c
     fee:	15 a6       	std	Z+45, r1	; 0x2d
     ff0:	16 a6       	std	Z+46, r1	; 0x2e
     ff2:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ff4:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ff6:	80 7e       	andi	r24, 0xE0	; 224
     ff8:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     ffa:	14 aa       	std	Z+52, r1	; 0x34
     ffc:	15 aa       	std	Z+53, r1	; 0x35
     ffe:	16 aa       	std	Z+54, r1	; 0x36
    1000:	17 aa       	std	Z+55, r1	; 0x37
    1002:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1004:	08 95       	ret

00001006 <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
    1006:	0e 94 d6 07 	call	0xfac	; 0xfac <Timebase_DownCounter_SS_Expired_Event>
}
    100a:	08 95       	ret

0000100c <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
    100c:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    100e:	e0 91 02 02 	lds	r30, 0x0202
    1012:	f0 91 03 02 	lds	r31, 0x0203
    1016:	28 2f       	mov	r18, r24
    1018:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    101a:	85 e1       	ldi	r24, 0x15	; 21
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	ac 01       	movw	r20, r24
    1020:	24 9f       	mul	r18, r20
    1022:	c0 01       	movw	r24, r0
    1024:	25 9f       	mul	r18, r21
    1026:	90 0d       	add	r25, r0
    1028:	34 9f       	mul	r19, r20
    102a:	90 0d       	add	r25, r0
    102c:	11 24       	eor	r1, r1
    102e:	e8 0f       	add	r30, r24
    1030:	f9 1f       	adc	r31, r25
    1032:	83 a1       	ldd	r24, Z+35	; 0x23
    1034:	86 95       	lsr	r24
    1036:	8f 70       	andi	r24, 0x0F	; 15
    1038:	84 30       	cpi	r24, 0x04	; 4
    103a:	11 f0       	breq	.+4      	; 0x1040 <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    1040:	44 a9       	ldd	r20, Z+52	; 0x34
    1042:	55 a9       	ldd	r21, Z+53	; 0x35
    1044:	66 a9       	ldd	r22, Z+54	; 0x36
    1046:	77 a9       	ldd	r23, Z+55	; 0x37
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1048:	10 a6       	std	Z+40, r1	; 0x28
    104a:	11 a6       	std	Z+41, r1	; 0x29
    104c:	12 a6       	std	Z+42, r1	; 0x2a
    104e:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1050:	14 a2       	std	Z+36, r1	; 0x24
    1052:	15 a2       	std	Z+37, r1	; 0x25
    1054:	16 a2       	std	Z+38, r1	; 0x26
    1056:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1058:	14 a6       	std	Z+44, r1	; 0x2c
    105a:	15 a6       	std	Z+45, r1	; 0x2d
    105c:	16 a6       	std	Z+46, r1	; 0x2e
    105e:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1060:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1062:	80 7e       	andi	r24, 0xE0	; 224
    1064:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1066:	14 aa       	std	Z+52, r1	; 0x34
    1068:	15 aa       	std	Z+53, r1	; 0x35
    106a:	16 aa       	std	Z+54, r1	; 0x36
    106c:	17 aa       	std	Z+55, r1	; 0x37

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    106e:	8a 2f       	mov	r24, r26
    1070:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <Timebase_DownCounter_SS_Set_Securely>
    1074:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1076:	08 95       	ret

00001078 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    107c:	c0 91 02 02 	lds	r28, 0x0202
    1080:	d0 91 03 02 	lds	r29, 0x0203
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1088:	85 e1       	ldi	r24, 0x15	; 21
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	28 9f       	mul	r18, r24
    108e:	f0 01       	movw	r30, r0
    1090:	29 9f       	mul	r18, r25
    1092:	f0 0d       	add	r31, r0
    1094:	38 9f       	mul	r19, r24
    1096:	f0 0d       	add	r31, r0
    1098:	11 24       	eor	r1, r1
    109a:	ec 0f       	add	r30, r28
    109c:	fd 1f       	adc	r31, r29
    109e:	83 a1       	ldd	r24, Z+35	; 0x23
    10a0:	80 fd       	sbrc	r24, 0
    10a2:	21 c0       	rjmp	.+66     	; 0x10e6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    10a4:	84 a5       	ldd	r24, Z+44	; 0x2c
    10a6:	95 a5       	ldd	r25, Z+45	; 0x2d
    10a8:	a6 a5       	ldd	r26, Z+46	; 0x2e
    10aa:	b7 a5       	ldd	r27, Z+47	; 0x2f
    10ac:	84 1b       	sub	r24, r20
    10ae:	95 0b       	sbc	r25, r21
    10b0:	a6 0b       	sbc	r26, r22
    10b2:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    10b4:	b7 ff       	sbrs	r27, 7
    10b6:	05 c0       	rjmp	.+10     	; 0x10c2 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    10b8:	10 aa       	std	Z+48, r1	; 0x30
    10ba:	11 aa       	std	Z+49, r1	; 0x31
    10bc:	12 aa       	std	Z+50, r1	; 0x32
    10be:	13 aa       	std	Z+51, r1	; 0x33
    10c0:	04 c0       	rjmp	.+8      	; 0x10ca <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    10c2:	80 ab       	std	Z+48, r24	; 0x30
    10c4:	91 ab       	std	Z+49, r25	; 0x31
    10c6:	a2 ab       	std	Z+50, r26	; 0x32
    10c8:	b3 ab       	std	Z+51, r27	; 0x33
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    10ca:	85 e1       	ldi	r24, 0x15	; 21
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	28 9f       	mul	r18, r24
    10d0:	f0 01       	movw	r30, r0
    10d2:	29 9f       	mul	r18, r25
    10d4:	f0 0d       	add	r31, r0
    10d6:	38 9f       	mul	r19, r24
    10d8:	f0 0d       	add	r31, r0
    10da:	11 24       	eor	r1, r1
    10dc:	ec 0f       	add	r30, r28
    10de:	fd 1f       	adc	r31, r29
    10e0:	83 a1       	ldd	r24, Z+35	; 0x23
    10e2:	81 60       	ori	r24, 0x01	; 1
    10e4:	83 a3       	std	Z+35, r24	; 0x23
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    10ec:	e0 91 02 02 	lds	r30, 0x0202
    10f0:	f0 91 03 02 	lds	r31, 0x0203
    10f4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    10f6:	25 e1       	ldi	r18, 0x15	; 21
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	ac 01       	movw	r20, r24
    10fc:	42 9f       	mul	r20, r18
    10fe:	c0 01       	movw	r24, r0
    1100:	43 9f       	mul	r20, r19
    1102:	90 0d       	add	r25, r0
    1104:	52 9f       	mul	r21, r18
    1106:	90 0d       	add	r25, r0
    1108:	11 24       	eor	r1, r1
    110a:	e8 0f       	add	r30, r24
    110c:	f9 1f       	adc	r31, r25
    110e:	24 a5       	ldd	r18, Z+44	; 0x2c
    1110:	35 a5       	ldd	r19, Z+45	; 0x2d
    1112:	46 a5       	ldd	r20, Z+46	; 0x2e
    1114:	57 a5       	ldd	r21, Z+47	; 0x2f
    1116:	80 a9       	ldd	r24, Z+48	; 0x30
    1118:	91 a9       	ldd	r25, Z+49	; 0x31
    111a:	a2 a9       	ldd	r26, Z+50	; 0x32
    111c:	b3 a9       	ldd	r27, Z+51	; 0x33
    111e:	28 1b       	sub	r18, r24
    1120:	39 0b       	sbc	r19, r25
    1122:	4a 0b       	sbc	r20, r26
    1124:	5b 0b       	sbc	r21, r27
    1126:	57 ff       	sbrs	r21, 7
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e0       	ldi	r20, 0x00	; 0
    1130:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1132:	b9 01       	movw	r22, r18
    1134:	ca 01       	movw	r24, r20
    1136:	08 95       	ret

00001138 <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    113c:	c0 91 02 02 	lds	r28, 0x0202
    1140:	d0 91 03 02 	lds	r29, 0x0203
    1144:	68 2f       	mov	r22, r24
    1146:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1148:	85 e1       	ldi	r24, 0x15	; 21
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	68 9f       	mul	r22, r24
    114e:	f0 01       	movw	r30, r0
    1150:	69 9f       	mul	r22, r25
    1152:	f0 0d       	add	r31, r0
    1154:	78 9f       	mul	r23, r24
    1156:	f0 0d       	add	r31, r0
    1158:	11 24       	eor	r1, r1
    115a:	ec 0f       	add	r30, r28
    115c:	fd 1f       	adc	r31, r29
    115e:	24 a5       	ldd	r18, Z+44	; 0x2c
    1160:	35 a5       	ldd	r19, Z+45	; 0x2d
    1162:	46 a5       	ldd	r20, Z+46	; 0x2e
    1164:	57 a5       	ldd	r21, Z+47	; 0x2f
    1166:	80 a9       	ldd	r24, Z+48	; 0x30
    1168:	91 a9       	ldd	r25, Z+49	; 0x31
    116a:	a2 a9       	ldd	r26, Z+50	; 0x32
    116c:	b3 a9       	ldd	r27, Z+51	; 0x33
    116e:	28 1b       	sub	r18, r24
    1170:	39 0b       	sbc	r19, r25
    1172:	4a 0b       	sbc	r20, r26
    1174:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1176:	57 fd       	sbrc	r21, 7
    1178:	07 c0       	rjmp	.+14     	; 0x1188 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	41 05       	cpc	r20, r1
    1180:	51 05       	cpc	r21, r1
    1182:	11 f0       	breq	.+4      	; 0x1188 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	12 c0       	rjmp	.+36     	; 0x11ac <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    1188:	20 e0       	ldi	r18, 0x00	; 0
    118a:	85 e1       	ldi	r24, 0x15	; 21
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	ac 01       	movw	r20, r24
    1190:	64 9f       	mul	r22, r20
    1192:	c0 01       	movw	r24, r0
    1194:	65 9f       	mul	r22, r21
    1196:	90 0d       	add	r25, r0
    1198:	74 9f       	mul	r23, r20
    119a:	90 0d       	add	r25, r0
    119c:	11 24       	eor	r1, r1
    119e:	c8 0f       	add	r28, r24
    11a0:	d9 1f       	adc	r29, r25
    11a2:	8b a1       	ldd	r24, Y+35	; 0x23
    11a4:	80 ff       	sbrs	r24, 0
    11a6:	21 e0       	ldi	r18, 0x01	; 1
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11ac:	82 2f       	mov	r24, r18
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    11b4:	1f 93       	push	r17
    11b6:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    11b8:	0e 94 9c 08 	call	0x1138	; 0x1138 <Timebase_DownCounter_SS_Period_Value_Expired>
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	11 f0       	breq	.+4      	; 0x11c4 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	16 c0       	rjmp	.+44     	; 0x11f0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    11c4:	e0 91 02 02 	lds	r30, 0x0202
    11c8:	f0 91 03 02 	lds	r31, 0x0203
    11cc:	21 2f       	mov	r18, r17
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	85 e1       	ldi	r24, 0x15	; 21
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	ac 01       	movw	r20, r24
    11d6:	24 9f       	mul	r18, r20
    11d8:	c0 01       	movw	r24, r0
    11da:	25 9f       	mul	r18, r21
    11dc:	90 0d       	add	r25, r0
    11de:	34 9f       	mul	r19, r20
    11e0:	90 0d       	add	r25, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	e8 0f       	add	r30, r24
    11e6:	f9 1f       	adc	r31, r25
    11e8:	83 a1       	ldd	r24, Z+35	; 0x23
    11ea:	8e 7f       	andi	r24, 0xFE	; 254
    11ec:	83 a3       	std	Z+35, r24	; 0x23
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11f0:	1f 91       	pop	r17
    11f2:	08 95       	ret

000011f4 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	0e 94 09 07 	call	0xe12	; 0xe12 <Timebase_DownCounter_SS_Update>
  }
}
    11fa:	08 95       	ret

000011fc <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    11fc:	e0 91 02 02 	lds	r30, 0x0202
    1200:	f0 91 03 02 	lds	r31, 0x0203
    1204:	10 a6       	std	Z+40, r1	; 0x28
    1206:	11 a6       	std	Z+41, r1	; 0x29
    1208:	12 a6       	std	Z+42, r1	; 0x2a
    120a:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    120c:	14 a2       	std	Z+36, r1	; 0x24
    120e:	15 a2       	std	Z+37, r1	; 0x25
    1210:	16 a2       	std	Z+38, r1	; 0x26
    1212:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1214:	14 a6       	std	Z+44, r1	; 0x2c
    1216:	15 a6       	std	Z+45, r1	; 0x2d
    1218:	16 a6       	std	Z+46, r1	; 0x2e
    121a:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    121c:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    121e:	80 7e       	andi	r24, 0xE0	; 224
    1220:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1222:	14 aa       	std	Z+52, r1	; 0x34
    1224:	15 aa       	std	Z+53, r1	; 0x35
    1226:	16 aa       	std	Z+54, r1	; 0x36
    1228:	17 aa       	std	Z+55, r1	; 0x37

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    122a:	08 95       	ret

0000122c <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    122c:	e0 91 02 02 	lds	r30, 0x0202
    1230:	f0 91 03 02 	lds	r31, 0x0203
    1234:	82 a1       	ldd	r24, Z+34	; 0x22
}
    1236:	08 95       	ret

00001238 <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1238:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    123c:	08 95       	ret

0000123e <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
    123e:	08 95       	ret

00001240 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17
    1244:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1246:	0e 94 ac 00 	call	0x158	; 0x158 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    124a:	c8 01       	movw	r24, r16
    124c:	0e 94 25 01 	call	0x24a	; 0x24a <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1250:	0e 94 fe 08 	call	0x11fc	; 0x11fc <Timebase_DownCounter_SS_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    125a:	e0 91 02 02 	lds	r30, 0x0202
    125e:	f0 91 03 02 	lds	r31, 0x0203
    1262:	82 a1       	ldd	r24, Z+34	; 0x22
    1264:	83 ff       	sbrs	r24, 3
    1266:	0b c0       	rjmp	.+22     	; 0x127e <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1268:	0e 94 4a 02 	call	0x494	; 0x494 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    126c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1270:	e0 91 02 02 	lds	r30, 0x0202
    1274:	f0 91 03 02 	lds	r31, 0x0203
    1278:	82 a1       	ldd	r24, Z+34	; 0x22
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	82 a3       	std	Z+34, r24	; 0x22
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    127e:	e0 91 02 02 	lds	r30, 0x0202
    1282:	f0 91 03 02 	lds	r31, 0x0203
    1286:	10 8e       	std	Z+24, r1	; 0x18
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
    1288:	08 95       	ret

0000128a <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    128a:	e0 91 02 02 	lds	r30, 0x0202
    128e:	f0 91 03 02 	lds	r31, 0x0203
    1292:	86 85       	ldd	r24, Z+14	; 0x0e
    1294:	97 85       	ldd	r25, Z+15	; 0x0f
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	97 87       	std	Z+15, r25	; 0x0f
    129a:	86 87       	std	Z+14, r24	; 0x0e
  Timebase->Time.SubSecondsUpTime++;
    129c:	80 89       	ldd	r24, Z+16	; 0x10
    129e:	91 89       	ldd	r25, Z+17	; 0x11
    12a0:	a2 89       	ldd	r26, Z+18	; 0x12
    12a2:	b3 89       	ldd	r27, Z+19	; 0x13
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	a1 1d       	adc	r26, r1
    12a8:	b1 1d       	adc	r27, r1
    12aa:	80 8b       	std	Z+16, r24	; 0x10
    12ac:	91 8b       	std	Z+17, r25	; 0x11
    12ae:	a2 8b       	std	Z+18, r26	; 0x12
    12b0:	b3 8b       	std	Z+19, r27	; 0x13
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    12b2:	82 a1       	ldd	r24, Z+34	; 0x22
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	82 a3       	std	Z+34, r24	; 0x22
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    12b8:	26 85       	ldd	r18, Z+14	; 0x0e
    12ba:	37 85       	ldd	r19, Z+15	; 0x0f
    12bc:	80 81       	ld	r24, Z
    12be:	91 81       	ldd	r25, Z+1	; 0x01
    12c0:	28 17       	cp	r18, r24
    12c2:	39 07       	cpc	r19, r25
    12c4:	68 f0       	brcs	.+26     	; 0x12e0 <Timebase_ISR_Executables+0x56>
    Timebase->Time.SubSecondsShadow = 0;
    12c6:	17 86       	std	Z+15, r1	; 0x0f
    12c8:	16 86       	std	Z+14, r1	; 0x0e
    Timebase->Time.SecondsShadow++;
    12ca:	84 89       	ldd	r24, Z+20	; 0x14
    12cc:	95 89       	ldd	r25, Z+21	; 0x15
    12ce:	a6 89       	ldd	r26, Z+22	; 0x16
    12d0:	b7 89       	ldd	r27, Z+23	; 0x17
    12d2:	01 96       	adiw	r24, 0x01	; 1
    12d4:	a1 1d       	adc	r26, r1
    12d6:	b1 1d       	adc	r27, r1
    12d8:	84 8b       	std	Z+20, r24	; 0x14
    12da:	95 8b       	std	Z+21, r25	; 0x15
    12dc:	a6 8b       	std	Z+22, r26	; 0x16
    12de:	b7 8b       	std	Z+23, r27	; 0x17
    12e0:	08 95       	ret

000012e2 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	ef 93       	push	r30
    1302:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1304:	e0 91 02 02 	lds	r30, 0x0202
    1308:	f0 91 03 02 	lds	r31, 0x0203
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1312:	0e 94 45 09 	call	0x128a	; 0x128a <Timebase_ISR_Executables>
}
    1316:	ff 91       	pop	r31
    1318:	ef 91       	pop	r30
    131a:	bf 91       	pop	r27
    131c:	af 91       	pop	r26
    131e:	9f 91       	pop	r25
    1320:	8f 91       	pop	r24
    1322:	7f 91       	pop	r23
    1324:	6f 91       	pop	r22
    1326:	5f 91       	pop	r21
    1328:	4f 91       	pop	r20
    132a:	3f 91       	pop	r19
    132c:	2f 91       	pop	r18
    132e:	0f 90       	pop	r0
    1330:	0f be       	out	0x3f, r0	; 63
    1332:	0f 90       	pop	r0
    1334:	1f 90       	pop	r1
    1336:	18 95       	reti

00001338 <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
    1338:	08 95       	ret

0000133a <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    133a:	10 92 aa 01 	sts	0x01AA, r1
    133e:	eb ea       	ldi	r30, 0xAB	; 171
    1340:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    1342:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	e3 3b       	cpi	r30, 0xB3	; 179
    1348:	f8 07       	cpc	r31, r24
    134a:	d9 f7       	brne	.-10     	; 0x1342 <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    134c:	10 82       	st	Z, r1
    
  UART.LastRxByte = UART_NULL;
    134e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    1350:	80 e4       	ldi	r24, 0x40	; 64
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	90 93 f6 01 	sts	0x01F6, r25
    1358:	80 93 f5 01 	sts	0x01F5, r24
  UART.BufIndex = 0;
    135c:	10 92 f8 01 	sts	0x01F8, r1
    1360:	10 92 f7 01 	sts	0x01F7, r1
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    1368:	e6 55       	subi	r30, 0x56	; 86
    136a:	fe 4f       	sbci	r31, 0xFE	; 254
    136c:	13 86       	std	Z+11, r1	; 0x0b
  UART.InputNumDigits = UART_NULL;
    
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    136e:	2f 5f       	subi	r18, 0xFF	; 255
    1370:	80 91 f5 01 	lds	r24, 0x01F5
    1374:	90 91 f6 01 	lds	r25, 0x01F6
    1378:	e2 2f       	mov	r30, r18
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	e8 17       	cp	r30, r24
    137e:	f9 07       	cpc	r31, r25
    1380:	98 f3       	brcs	.-26     	; 0x1368 <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
    1382:	08 95       	ret

00001384 <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1384:	10 92 fc 01 	sts	0x01FC, r1
    1388:	10 92 fb 01 	sts	0x01FB, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    138c:	10 92 fe 01 	sts	0x01FE, r1
    1390:	10 92 fd 01 	sts	0x01FD, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1394:	10 92 ff 01 	sts	0x01FF, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1398:	10 92 00 02 	sts	0x0200, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 01 02 	sts	0x0201, r24
}
    13a2:	08 95       	ret

000013a4 <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    13a4:	08 95       	ret

000013a6 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    13a6:	08 95       	ret

000013a8 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    13a8:	9b 01       	movw	r18, r22
    13aa:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    13ac:	60 e6       	ldi	r22, 0x60	; 96
    13ae:	73 ee       	ldi	r23, 0xE3	; 227
    13b0:	86 e1       	ldi	r24, 0x16	; 22
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 3b 12 	call	0x2476	; 0x2476 <__udivmodsi4>
    13b8:	21 50       	subi	r18, 0x01	; 1
    13ba:	30 40       	sbci	r19, 0x00	; 0
    13bc:	40 40       	sbci	r20, 0x00	; 0
    13be:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    13c0:	e0 ec       	ldi	r30, 0xC0	; 192
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    13ca:	bb 27       	eor	r27, r27
    13cc:	a5 2f       	mov	r26, r21
    13ce:	94 2f       	mov	r25, r20
    13d0:	83 2f       	mov	r24, r19
    13d2:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    13d6:	20 93 c4 00 	sts	0x00C4, r18
}
    13da:	08 95       	ret

000013dc <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    13dc:	e1 ec       	ldi	r30, 0xC1	; 193
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	88 60       	ori	r24, 0x08	; 8
    13e4:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    13e6:	86 e0       	ldi	r24, 0x06	; 6
    13e8:	80 93 c2 00 	sts	0x00C2, r24
}
    13ec:	08 95       	ret

000013ee <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    13ee:	e1 ec       	ldi	r30, 0xC1	; 193
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	80 61       	ori	r24, 0x10	; 16
    13f6:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    13f8:	86 e0       	ldi	r24, 0x06	; 6
    13fa:	80 93 c2 00 	sts	0x00C2, r24
}
    13fe:	08 95       	ret

00001400 <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1400:	e1 ec       	ldi	r30, 0xC1	; 193
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	80 68       	ori	r24, 0x80	; 128
    1408:	80 83       	st	Z, r24
  sei();
    140a:	78 94       	sei
}
    140c:	08 95       	ret

0000140e <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    140e:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1410:	80 91 c0 00 	lds	r24, 0x00C0
    1414:	85 ff       	sbrs	r24, 5
    1416:	fc cf       	rjmp	.-8      	; 0x1410 <UART_Tx_Byte+0x2>
  UDR0 = val;
    1418:	90 93 c6 00 	sts	0x00C6, r25
}
    141c:	08 95       	ret

0000141e <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    1428:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    142a:	80 91 c0 00 	lds	r24, 0x00C0
    142e:	84 ff       	sbrs	r24, 4
    1430:	05 c0       	rjmp	.+10     	; 0x143c <UART_Rx_Byte+0x1e>
    val = UDR0;
    1432:	80 91 c6 00 	lds	r24, 0x00C6
    1436:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	08 c0       	rjmp	.+16     	; 0x144c <UART_Rx_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    143c:	80 91 c0 00 	lds	r24, 0x00C0
    1440:	83 ff       	sbrs	r24, 3
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <UART_Rx_Byte+0x34>
    val = UDR0;
    1444:	80 91 c6 00 	lds	r24, 0x00C6
    1448:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	80 93 aa 01 	sts	0x01AA, r24
    1450:	05 c0       	rjmp	.+10     	; 0x145c <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    1452:	80 91 c6 00 	lds	r24, 0x00C6
    1456:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
    1458:	10 92 aa 01 	sts	0x01AA, r1
  }
  return val;
    145c:	89 81       	ldd	r24, Y+1	; 0x01
}
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1466:	10 92 f9 01 	sts	0x01F9, r1
  UART.Timer.ResetVal = UART_NULL;
    146a:	10 92 fa 01 	sts	0x01FA, r1
}
    146e:	08 95       	ret

00001470 <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
    1470:	84 e0       	ldi	r24, 0x04	; 4
    1472:	80 93 fa 01 	sts	0x01FA, r24
  UART.Timer.ResetVal = 0xFF - temp1;
    1476:	8b ef       	ldi	r24, 0xFB	; 251
    1478:	80 93 fa 01 	sts	0x01FA, r24
  
  ASSR   = 0x00;
    147c:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
    1480:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
    1484:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
    1488:	e0 e7       	ldi	r30, 0x70	; 112
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
  TCNT2  = 0x00;
    148e:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	80 83       	st	Z, r24
  sei();
    149a:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
    149c:	08 95       	ret

0000149e <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	80 93 b1 00 	sts	0x00B1, r24
}
    14a4:	08 95       	ret

000014a6 <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    14a6:	10 92 b1 00 	sts	0x00B1, r1
}
    14aa:	08 95       	ret

000014ac <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    14ac:	80 91 f9 01 	lds	r24, 0x01F9
}
    14b0:	08 95       	ret

000014b2 <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
    14b2:	80 91 b2 00 	lds	r24, 0x00B2
}
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	08 95       	ret

000014ba <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    14ba:	80 91 fa 01 	lds	r24, 0x01FA
    14be:	80 93 b2 00 	sts	0x00B2, r24
}
    14c2:	08 95       	ret

000014c4 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    14c4:	ac 01       	movw	r20, r24
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	0c c0       	rjmp	.+24     	; 0x14e6 <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    14ce:	fa 01       	movw	r30, r20
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	e0 81       	ld	r30, Z
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14d6:	80 91 c0 00 	lds	r24, 0x00C0
    14da:	85 ff       	sbrs	r24, 5
    14dc:	fc cf       	rjmp	.-8      	; 0x14d6 <UART_Tx_Buf+0x12>
  UDR0 = val;
    14de:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	26 17       	cp	r18, r22
    14e8:	37 07       	cpc	r19, r23
    14ea:	88 f3       	brcs	.-30     	; 0x14ce <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    14ec:	08 95       	ret

000014ee <UART_Tx_NL>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14ee:	80 91 c0 00 	lds	r24, 0x00C0
    14f2:	85 ff       	sbrs	r24, 5
    14f4:	fc cf       	rjmp	.-8      	; 0x14ee <UART_Tx_NL>
  UDR0 = val;
    14f6:	8d e0       	ldi	r24, 0x0D	; 13
    14f8:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14fc:	80 91 c0 00 	lds	r24, 0x00C0
    1500:	85 ff       	sbrs	r24, 5
    1502:	fc cf       	rjmp	.-8      	; 0x14fc <UART_Tx_NL+0xe>
  UDR0 = val;
    1504:	8a e0       	ldi	r24, 0x0A	; 10
    1506:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    150a:	08 95       	ret

0000150c <UART_Tx_SP>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    150c:	80 91 c0 00 	lds	r24, 0x00C0
    1510:	85 ff       	sbrs	r24, 5
    1512:	fc cf       	rjmp	.-8      	; 0x150c <UART_Tx_SP>
  UDR0 = val;
    1514:	80 e2       	ldi	r24, 0x20	; 32
    1516:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    151a:	08 95       	ret

0000151c <UART_Tx_CM>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    151c:	80 91 c0 00 	lds	r24, 0x00C0
    1520:	85 ff       	sbrs	r24, 5
    1522:	fc cf       	rjmp	.-8      	; 0x151c <UART_Tx_CM>
  UDR0 = val;
    1524:	8c e2       	ldi	r24, 0x2C	; 44
    1526:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    152a:	08 95       	ret

0000152c <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    152c:	ac 01       	movw	r20, r24
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <UART_Tx_Text+0x14>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1532:	80 91 c0 00 	lds	r24, 0x00C0
    1536:	85 ff       	sbrs	r24, 5
    1538:	fc cf       	rjmp	.-8      	; 0x1532 <UART_Tx_Text+0x6>
  UDR0 = val;
    153a:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    153e:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    1540:	fa 01       	movw	r30, r20
    1542:	e2 0f       	add	r30, r18
    1544:	f1 1d       	adc	r31, r1
    1546:	e0 81       	ld	r30, Z
    1548:	ee 23       	and	r30, r30
    154a:	99 f7       	brne	.-26     	; 0x1532 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    154c:	08 95       	ret

0000154e <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    154e:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UART_Tx_NL();
    1552:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_NL>
}
    1556:	08 95       	ret

00001558 <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    1558:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    155c:	80 91 c0 00 	lds	r24, 0x00C0
    1560:	85 ff       	sbrs	r24, 5
    1562:	fc cf       	rjmp	.-8      	; 0x155c <UART_Tx_Text_SP+0x4>
  UDR0 = val;
    1564:	80 e2       	ldi	r24, 0x20	; 32
    1566:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    156a:	08 95       	ret

0000156c <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    156c:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1570:	80 91 c0 00 	lds	r24, 0x00C0
    1574:	85 ff       	sbrs	r24, 5
    1576:	fc cf       	rjmp	.-8      	; 0x1570 <UART_Tx_Text_CM+0x4>
  UDR0 = val;
    1578:	8c e2       	ldi	r24, 0x2C	; 44
    157a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    157e:	08 95       	ret

00001580 <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    1580:	bf 92       	push	r11
    1582:	cf 92       	push	r12
    1584:	df 92       	push	r13
    1586:	ef 92       	push	r14
    1588:	ff 92       	push	r15
    158a:	0f 93       	push	r16
    158c:	1f 93       	push	r17
    158e:	6b 01       	movw	r12, r22
    1590:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    1592:	61 15       	cp	r22, r1
    1594:	71 05       	cpc	r23, r1
    1596:	81 05       	cpc	r24, r1
    1598:	91 05       	cpc	r25, r1
    159a:	31 f4       	brne	.+12     	; 0x15a8 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    159c:	10 92 ab 01 	sts	0x01AB, r1
    UART.InputNumDigits = 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	80 93 b3 01 	sts	0x01B3, r24
    15a6:	23 c0       	rjmp	.+70     	; 0x15ee <UART_Determine_Digit_Numbers+0x6e>
    15a8:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    15aa:	0b 2d       	mov	r16, r11
    15ac:	10 e0       	ldi	r17, 0x00	; 0
    15ae:	06 55       	subi	r16, 0x56	; 86
    15b0:	1e 4f       	sbci	r17, 0xFE	; 254
    15b2:	c7 01       	movw	r24, r14
    15b4:	b6 01       	movw	r22, r12
    15b6:	2a e0       	ldi	r18, 0x0A	; 10
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	0e 94 3b 12 	call	0x2476	; 0x2476 <__udivmodsi4>
    15c2:	f8 01       	movw	r30, r16
    15c4:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    15c6:	c7 01       	movw	r24, r14
    15c8:	b6 01       	movw	r22, r12
    15ca:	2a e0       	ldi	r18, 0x0A	; 10
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	0e 94 3b 12 	call	0x2476	; 0x2476 <__udivmodsi4>
    15d6:	c9 01       	movw	r24, r18
    15d8:	da 01       	movw	r26, r20
    15da:	6c 01       	movw	r12, r24
    15dc:	7d 01       	movw	r14, r26
      i++;
    15de:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    15e0:	c1 14       	cp	r12, r1
    15e2:	d1 04       	cpc	r13, r1
    15e4:	e1 04       	cpc	r14, r1
    15e6:	f1 04       	cpc	r15, r1
    15e8:	01 f7       	brne	.-64     	; 0x15aa <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    15ea:	b0 92 b3 01 	sts	0x01B3, r11
  }
}
    15ee:	1f 91       	pop	r17
    15f0:	0f 91       	pop	r16
    15f2:	ff 90       	pop	r15
    15f4:	ef 90       	pop	r14
    15f6:	df 90       	pop	r13
    15f8:	cf 90       	pop	r12
    15fa:	bf 90       	pop	r11
    15fc:	08 95       	ret

000015fe <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    15fe:	e0 91 b3 01 	lds	r30, 0x01B3
    1602:	0f c0       	rjmp	.+30     	; 0x1622 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1604:	2e 2f       	mov	r18, r30
    1606:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    1608:	e2 2f       	mov	r30, r18
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	e6 55       	subi	r30, 0x56	; 86
    160e:	fe 4f       	sbci	r31, 0xFE	; 254
    1610:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1612:	80 91 c0 00 	lds	r24, 0x00C0
    1616:	85 ff       	sbrs	r24, 5
    1618:	fc cf       	rjmp	.-8      	; 0x1612 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    161a:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    161c:	90 93 c6 00 	sts	0x00C6, r25
    1620:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1622:	ee 23       	and	r30, r30
    1624:	79 f7       	brne	.-34     	; 0x1604 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    1626:	08 95       	ret

00001628 <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    1628:	9b 01       	movw	r18, r22
    162a:	ac 01       	movw	r20, r24
  if(num < 0){
    162c:	97 ff       	sbrs	r25, 7
    162e:	0e c0       	rjmp	.+28     	; 0x164c <UART_Tx_Number+0x24>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1630:	80 91 c0 00 	lds	r24, 0x00C0
    1634:	85 ff       	sbrs	r24, 5
    1636:	fc cf       	rjmp	.-8      	; 0x1630 <UART_Tx_Number+0x8>
  UDR0 = val;
    1638:	8d e2       	ldi	r24, 0x2D	; 45
    163a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    163e:	50 95       	com	r21
    1640:	40 95       	com	r20
    1642:	30 95       	com	r19
    1644:	21 95       	neg	r18
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	4f 4f       	sbci	r20, 0xFF	; 255
    164a:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    164c:	ca 01       	movw	r24, r20
    164e:	b9 01       	movw	r22, r18
    1650:	0e 94 c0 0a 	call	0x1580	; 0x1580 <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    1654:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <UART_Tx_Number_Digits>
}
    1658:	08 95       	ret

0000165a <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    165a:	1f 93       	push	r17
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	ab 01       	movw	r20, r22
    1662:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    1664:	4f 3f       	cpi	r20, 0xFF	; 255
    1666:	51 05       	cpc	r21, r1
    1668:	61 05       	cpc	r22, r1
    166a:	71 05       	cpc	r23, r1
    166c:	09 f0       	breq	.+2      	; 0x1670 <UART_Tx_Number_Hex+0x16>
    166e:	28 f4       	brcc	.+10     	; 0x167a <UART_Tx_Number_Hex+0x20>
    1670:	e8 e0       	ldi	r30, 0x08	; 8
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	c2 e0       	ldi	r28, 0x02	; 2
    1676:	d0 e0       	ldi	r29, 0x00	; 0
    1678:	11 c0       	rjmp	.+34     	; 0x169c <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    167a:	40 30       	cpi	r20, 0x00	; 0
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	58 07       	cpc	r21, r24
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	68 07       	cpc	r22, r24
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	78 07       	cpc	r23, r24
    1688:	28 f0       	brcs	.+10     	; 0x1694 <UART_Tx_Number_Hex+0x3a>
    168a:	e0 e2       	ldi	r30, 0x20	; 32
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	c8 e0       	ldi	r28, 0x08	; 8
    1690:	d0 e0       	ldi	r29, 0x00	; 0
    1692:	04 c0       	rjmp	.+8      	; 0x169c <UART_Tx_Number_Hex+0x42>
    1694:	e0 e1       	ldi	r30, 0x10	; 16
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	c4 e0       	ldi	r28, 0x04	; 4
    169a:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    169c:	80 91 c0 00 	lds	r24, 0x00C0
    16a0:	85 ff       	sbrs	r24, 5
    16a2:	fc cf       	rjmp	.-8      	; 0x169c <UART_Tx_Number_Hex+0x42>
  UDR0 = val;
    16a4:	80 e3       	ldi	r24, 0x30	; 48
    16a6:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16aa:	80 91 c0 00 	lds	r24, 0x00C0
    16ae:	85 ff       	sbrs	r24, 5
    16b0:	fc cf       	rjmp	.-8      	; 0x16aa <UART_Tx_Number_Hex+0x50>
  UDR0 = val;
    16b2:	88 e7       	ldi	r24, 0x78	; 120
    16b4:	80 93 c6 00 	sts	0x00C6, r24
    16b8:	10 e0       	ldi	r17, 0x00	; 0
    16ba:	1f c0       	rjmp	.+62     	; 0x16fa <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    16bc:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    16be:	db 01       	movw	r26, r22
    16c0:	ca 01       	movw	r24, r20
    16c2:	0e 2e       	mov	r0, r30
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <UART_Tx_Number_Hex+0x74>
    16c6:	b6 95       	lsr	r27
    16c8:	a7 95       	ror	r26
    16ca:	97 95       	ror	r25
    16cc:	87 95       	ror	r24
    16ce:	0a 94       	dec	r0
    16d0:	d2 f7       	brpl	.-12     	; 0x16c6 <UART_Tx_Number_Hex+0x6c>
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	8f 70       	andi	r24, 0x0F	; 15
    16d6:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    16d8:	8a 30       	cpi	r24, 0x0A	; 10
    16da:	91 05       	cpc	r25, r1
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    16de:	9c 01       	movw	r18, r24
    16e0:	29 5c       	subi	r18, 0xC9	; 201
    16e2:	3f 4f       	sbci	r19, 0xFF	; 255
    16e4:	03 c0       	rjmp	.+6      	; 0x16ec <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    16e6:	9c 01       	movw	r18, r24
    16e8:	20 5d       	subi	r18, 0xD0	; 208
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16ec:	80 91 c0 00 	lds	r24, 0x00C0
    16f0:	85 ff       	sbrs	r24, 5
    16f2:	fc cf       	rjmp	.-8      	; 0x16ec <UART_Tx_Number_Hex+0x92>
  UDR0 = val;
    16f4:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    16f8:	1f 5f       	subi	r17, 0xFF	; 255
    16fa:	81 2f       	mov	r24, r17
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	8c 17       	cp	r24, r28
    1700:	9d 07       	cpc	r25, r29
    1702:	e0 f2       	brcs	.-72     	; 0x16bc <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	08 95       	ret

0000170c <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    170c:	cf 92       	push	r12
    170e:	df 92       	push	r13
    1710:	ef 92       	push	r14
    1712:	ff 92       	push	r15
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	ab 01       	movw	r20, r22
    171e:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    1720:	4f 3f       	cpi	r20, 0xFF	; 255
    1722:	51 05       	cpc	r21, r1
    1724:	61 05       	cpc	r22, r1
    1726:	71 05       	cpc	r23, r1
    1728:	09 f0       	breq	.+2      	; 0x172c <UART_Tx_Number_Bin+0x20>
    172a:	10 f4       	brcc	.+4      	; 0x1730 <UART_Tx_Number_Bin+0x24>
    172c:	97 e0       	ldi	r25, 0x07	; 7
    172e:	0b c0       	rjmp	.+22     	; 0x1746 <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    1730:	40 30       	cpi	r20, 0x00	; 0
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	58 07       	cpc	r21, r24
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	68 07       	cpc	r22, r24
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	78 07       	cpc	r23, r24
    173e:	10 f0       	brcs	.+4      	; 0x1744 <UART_Tx_Number_Bin+0x38>
    1740:	9f e1       	ldi	r25, 0x1F	; 31
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <UART_Tx_Number_Bin+0x3a>
    1744:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1746:	80 91 c0 00 	lds	r24, 0x00C0
    174a:	85 ff       	sbrs	r24, 5
    174c:	fc cf       	rjmp	.-8      	; 0x1746 <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;
    174e:	80 e3       	ldi	r24, 0x30	; 48
    1750:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1754:	80 91 c0 00 	lds	r24, 0x00C0
    1758:	85 ff       	sbrs	r24, 5
    175a:	fc cf       	rjmp	.-8      	; 0x1754 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;
    175c:	82 e6       	ldi	r24, 0x62	; 98
    175e:	80 93 c6 00 	sts	0x00C6, r24
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    1766:	e9 2f       	mov	r30, r25
    1768:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    176a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    176c:	11 e3       	ldi	r17, 0x31	; 49
    176e:	ef 01       	movw	r28, r30
    1770:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1772:	cf 01       	movw	r24, r30
    1774:	82 1b       	sub	r24, r18
    1776:	93 0b       	sbc	r25, r19
    1778:	6a 01       	movw	r12, r20
    177a:	7b 01       	movw	r14, r22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <UART_Tx_Number_Bin+0x7a>
    177e:	f6 94       	lsr	r15
    1780:	e7 94       	ror	r14
    1782:	d7 94       	ror	r13
    1784:	c7 94       	ror	r12
    1786:	8a 95       	dec	r24
    1788:	d2 f7       	brpl	.-12     	; 0x177e <UART_Tx_Number_Bin+0x72>
    178a:	d7 01       	movw	r26, r14
    178c:	c6 01       	movw	r24, r12
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	89 2b       	or	r24, r25
    1794:	39 f0       	breq	.+14     	; 0x17a4 <UART_Tx_Number_Bin+0x98>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1796:	80 91 c0 00 	lds	r24, 0x00C0
    179a:	85 ff       	sbrs	r24, 5
    179c:	fc cf       	rjmp	.-8      	; 0x1796 <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;
    179e:	10 93 c6 00 	sts	0x00C6, r17
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <UART_Tx_Number_Bin+0xa4>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17a4:	80 91 c0 00 	lds	r24, 0x00C0
    17a8:	85 ff       	sbrs	r24, 5
    17aa:	fc cf       	rjmp	.-8      	; 0x17a4 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;
    17ac:	00 93 c6 00 	sts	0x00C6, r16
    17b0:	2f 5f       	subi	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    17b4:	2c 17       	cp	r18, r28
    17b6:	3d 07       	cpc	r19, r29
    17b8:	e1 f6       	brne	.-72     	; 0x1772 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	1f 91       	pop	r17
    17c0:	0f 91       	pop	r16
    17c2:	ff 90       	pop	r15
    17c4:	ef 90       	pop	r14
    17c6:	df 90       	pop	r13
    17c8:	cf 90       	pop	r12
    17ca:	08 95       	ret

000017cc <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    17cc:	0e 94 14 0b 	call	0x1628	; 0x1628 <UART_Tx_Number>
  UART_Tx_NL();
    17d0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_NL>
}
    17d4:	08 95       	ret

000017d6 <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    17d6:	0e 94 14 0b 	call	0x1628	; 0x1628 <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17da:	80 91 c0 00 	lds	r24, 0x00C0
    17de:	85 ff       	sbrs	r24, 5
    17e0:	fc cf       	rjmp	.-8      	; 0x17da <UART_Tx_Number_SP+0x4>
  UDR0 = val;
    17e2:	80 e2       	ldi	r24, 0x20	; 32
    17e4:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    17e8:	08 95       	ret

000017ea <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    17ea:	0e 94 14 0b 	call	0x1628	; 0x1628 <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17ee:	80 91 c0 00 	lds	r24, 0x00C0
    17f2:	85 ff       	sbrs	r24, 5
    17f4:	fc cf       	rjmp	.-8      	; 0x17ee <UART_Tx_Number_CM+0x4>
  UDR0 = val;
    17f6:	8c e2       	ldi	r24, 0x2C	; 44
    17f8:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    17fc:	08 95       	ret

000017fe <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    17fe:	0e 94 2d 0b 	call	0x165a	; 0x165a <UART_Tx_Number_Hex>
  UART_Tx_NL();
    1802:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_NL>
}
    1806:	08 95       	ret

00001808 <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    1808:	0e 94 2d 0b 	call	0x165a	; 0x165a <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    180c:	80 91 c0 00 	lds	r24, 0x00C0
    1810:	85 ff       	sbrs	r24, 5
    1812:	fc cf       	rjmp	.-8      	; 0x180c <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;
    1814:	80 e2       	ldi	r24, 0x20	; 32
    1816:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    181a:	08 95       	ret

0000181c <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    181c:	0e 94 2d 0b 	call	0x165a	; 0x165a <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1820:	80 91 c0 00 	lds	r24, 0x00C0
    1824:	85 ff       	sbrs	r24, 5
    1826:	fc cf       	rjmp	.-8      	; 0x1820 <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;
    1828:	8c e2       	ldi	r24, 0x2C	; 44
    182a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    182e:	08 95       	ret

00001830 <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    1830:	0e 94 86 0b 	call	0x170c	; 0x170c <UART_Tx_Number_Bin>
  UART_Tx_NL();
    1834:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_NL>
}
    1838:	08 95       	ret

0000183a <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    183a:	0e 94 86 0b 	call	0x170c	; 0x170c <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    183e:	80 91 c0 00 	lds	r24, 0x00C0
    1842:	85 ff       	sbrs	r24, 5
    1844:	fc cf       	rjmp	.-8      	; 0x183e <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;
    1846:	80 e2       	ldi	r24, 0x20	; 32
    1848:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    184c:	08 95       	ret

0000184e <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    184e:	0e 94 86 0b 	call	0x170c	; 0x170c <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1852:	80 91 c0 00 	lds	r24, 0x00C0
    1856:	85 ff       	sbrs	r24, 5
    1858:	fc cf       	rjmp	.-8      	; 0x1852 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;
    185a:	8c e2       	ldi	r24, 0x2C	; 44
    185c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    1860:	08 95       	ret

00001862 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	7a 01       	movw	r14, r20
    186c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    186e:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1872:	80 91 c0 00 	lds	r24, 0x00C0
    1876:	85 ff       	sbrs	r24, 5
    1878:	fc cf       	rjmp	.-8      	; 0x1872 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;
    187a:	80 e2       	ldi	r24, 0x20	; 32
    187c:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    1880:	c8 01       	movw	r24, r16
    1882:	b7 01       	movw	r22, r14
    1884:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <UART_Tx_Number_NL>
}
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	ff 90       	pop	r15
    188e:	ef 90       	pop	r14
    1890:	08 95       	ret

00001892 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    1892:	ef 92       	push	r14
    1894:	ff 92       	push	r15
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	7a 01       	movw	r14, r20
    189c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    189e:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    18a2:	80 91 c0 00 	lds	r24, 0x00C0
    18a6:	85 ff       	sbrs	r24, 5
    18a8:	fc cf       	rjmp	.-8      	; 0x18a2 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;
    18aa:	80 e2       	ldi	r24, 0x20	; 32
    18ac:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    18b0:	c8 01       	movw	r24, r16
    18b2:	b7 01       	movw	r22, r14
    18b4:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <UART_Tx_Number_SP>
}
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	08 95       	ret

000018c2 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	7a 01       	movw	r14, r20
    18cc:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    18ce:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    18d2:	80 91 c0 00 	lds	r24, 0x00C0
    18d6:	85 ff       	sbrs	r24, 5
    18d8:	fc cf       	rjmp	.-8      	; 0x18d2 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;
    18da:	80 e2       	ldi	r24, 0x20	; 32
    18dc:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    18e0:	c8 01       	movw	r24, r16
    18e2:	b7 01       	movw	r22, r14
    18e4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <UART_Tx_Number_CM>
}
    18e8:	1f 91       	pop	r17
    18ea:	0f 91       	pop	r16
    18ec:	ff 90       	pop	r15
    18ee:	ef 90       	pop	r14
    18f0:	08 95       	ret

000018f2 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    18f2:	ef 92       	push	r14
    18f4:	ff 92       	push	r15
    18f6:	0f 93       	push	r16
    18f8:	1f 93       	push	r17
    18fa:	7a 01       	movw	r14, r20
    18fc:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    18fe:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1902:	80 91 c0 00 	lds	r24, 0x00C0
    1906:	85 ff       	sbrs	r24, 5
    1908:	fc cf       	rjmp	.-8      	; 0x1902 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;
    190a:	80 e2       	ldi	r24, 0x20	; 32
    190c:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    1910:	c8 01       	movw	r24, r16
    1912:	b7 01       	movw	r22, r14
    1914:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <UART_Tx_Number_Hex_NL>
}
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    1922:	ef 92       	push	r14
    1924:	ff 92       	push	r15
    1926:	0f 93       	push	r16
    1928:	1f 93       	push	r17
    192a:	7a 01       	movw	r14, r20
    192c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    192e:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1932:	80 91 c0 00 	lds	r24, 0x00C0
    1936:	85 ff       	sbrs	r24, 5
    1938:	fc cf       	rjmp	.-8      	; 0x1932 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;
    193a:	80 e2       	ldi	r24, 0x20	; 32
    193c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    1940:	c8 01       	movw	r24, r16
    1942:	b7 01       	movw	r22, r14
    1944:	0e 94 04 0c 	call	0x1808	; 0x1808 <UART_Tx_Number_Hex_SP>
}
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	08 95       	ret

00001952 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	7a 01       	movw	r14, r20
    195c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    195e:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1962:	80 91 c0 00 	lds	r24, 0x00C0
    1966:	85 ff       	sbrs	r24, 5
    1968:	fc cf       	rjmp	.-8      	; 0x1962 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;
    196a:	80 e2       	ldi	r24, 0x20	; 32
    196c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    1970:	c8 01       	movw	r24, r16
    1972:	b7 01       	movw	r22, r14
    1974:	0e 94 0e 0c 	call	0x181c	; 0x181c <UART_Tx_Number_Hex_CM>
}
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	ff 90       	pop	r15
    197e:	ef 90       	pop	r14
    1980:	08 95       	ret

00001982 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	7a 01       	movw	r14, r20
    198c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    198e:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1992:	80 91 c0 00 	lds	r24, 0x00C0
    1996:	85 ff       	sbrs	r24, 5
    1998:	fc cf       	rjmp	.-8      	; 0x1992 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;
    199a:	80 e2       	ldi	r24, 0x20	; 32
    199c:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    19a0:	c8 01       	movw	r24, r16
    19a2:	b7 01       	movw	r22, r14
    19a4:	0e 94 18 0c 	call	0x1830	; 0x1830 <UART_Tx_Number_Bin_NL>
}
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	08 95       	ret

000019b2 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    19b2:	ef 92       	push	r14
    19b4:	ff 92       	push	r15
    19b6:	0f 93       	push	r16
    19b8:	1f 93       	push	r17
    19ba:	7a 01       	movw	r14, r20
    19bc:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    19be:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    19c2:	80 91 c0 00 	lds	r24, 0x00C0
    19c6:	85 ff       	sbrs	r24, 5
    19c8:	fc cf       	rjmp	.-8      	; 0x19c2 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;
    19ca:	80 e2       	ldi	r24, 0x20	; 32
    19cc:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    19d0:	c8 01       	movw	r24, r16
    19d2:	b7 01       	movw	r22, r14
    19d4:	0e 94 1d 0c 	call	0x183a	; 0x183a <UART_Tx_Number_Bin_SP>
}
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	ff 90       	pop	r15
    19de:	ef 90       	pop	r14
    19e0:	08 95       	ret

000019e2 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    19e2:	ef 92       	push	r14
    19e4:	ff 92       	push	r15
    19e6:	0f 93       	push	r16
    19e8:	1f 93       	push	r17
    19ea:	7a 01       	movw	r14, r20
    19ec:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    19ee:	0e 94 96 0a 	call	0x152c	; 0x152c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    19f2:	80 91 c0 00 	lds	r24, 0x00C0
    19f6:	85 ff       	sbrs	r24, 5
    19f8:	fc cf       	rjmp	.-8      	; 0x19f2 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;
    19fa:	80 e2       	ldi	r24, 0x20	; 32
    19fc:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    1a00:	c8 01       	movw	r24, r16
    1a02:	b7 01       	movw	r22, r14
    1a04:	0e 94 27 0c 	call	0x184e	; 0x184e <UART_Tx_Number_Bin_CM>
}
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	ff 90       	pop	r15
    1a0e:	ef 90       	pop	r14
    1a10:	08 95       	ret

00001a12 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1a16:	fc 01       	movw	r30, r24
    1a18:	e6 55       	subi	r30, 0x56	; 86
    1a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a1c:	13 86       	std	Z+11, r1	; 0x0b
    1a1e:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1a20:	80 34       	cpi	r24, 0x40	; 64
    1a22:	91 05       	cpc	r25, r1
    1a24:	c1 f7       	brne	.-16     	; 0x1a16 <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1a26:	10 92 f8 01 	sts	0x01F8, r1
    1a2a:	10 92 f7 01 	sts	0x01F7, r1
}
    1a2e:	08 95       	ret

00001a30 <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1a30:	fc 01       	movw	r30, r24
    1a32:	e6 55       	subi	r30, 0x56	; 86
    1a34:	fe 4f       	sbci	r31, 0xFE	; 254
    1a36:	83 85       	ldd	r24, Z+11	; 0x0b
}
    1a38:	08 95       	ret

00001a3a <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a3a:	80 91 f7 01 	lds	r24, 0x01F7
    1a3e:	90 91 f8 01 	lds	r25, 0x01F8
}
    1a42:	08 95       	ret

00001a44 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
    1a44:	80 91 00 02 	lds	r24, 0x0200
}
    1a48:	08 95       	ret

00001a4a <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a4a:	80 91 f7 01 	lds	r24, 0x01F7
    1a4e:	90 91 f8 01 	lds	r25, 0x01F8
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
    1a52:	08 95       	ret

00001a54 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
    1a54:	20 91 fb 01 	lds	r18, 0x01FB
    1a58:	30 91 fc 01 	lds	r19, 0x01FC
}
    1a5c:	c9 01       	movw	r24, r18
    1a5e:	08 95       	ret

00001a60 <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
    1a60:	20 91 fd 01 	lds	r18, 0x01FD
    1a64:	30 91 fe 01 	lds	r19, 0x01FE
}
    1a68:	c9 01       	movw	r24, r18
    1a6a:	08 95       	ret

00001a6c <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
    1a6c:	80 91 ff 01 	lds	r24, 0x01FF
}
    1a70:	08 95       	ret

00001a72 <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
    1a72:	80 91 01 02 	lds	r24, 0x0201
}
    1a76:	08 95       	ret

00001a78 <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    1a78:	10 92 00 02 	sts	0x0200, r1
}
    1a7c:	08 95       	ret

00001a7e <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1a82:	fc 01       	movw	r30, r24
    1a84:	e6 55       	subi	r30, 0x56	; 86
    1a86:	fe 4f       	sbci	r31, 0xFE	; 254
    1a88:	13 86       	std	Z+11, r1	; 0x0b
    1a8a:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1a8c:	80 34       	cpi	r24, 0x40	; 64
    1a8e:	91 05       	cpc	r25, r1
    1a90:	c1 f7       	brne	.-16     	; 0x1a82 <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1a92:	10 92 f8 01 	sts	0x01F8, r1
    1a96:	10 92 f7 01 	sts	0x01F7, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	80 93 01 02 	sts	0x0201, r24
}
    1aa0:	08 95       	ret

00001aa2 <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	0a c0       	rjmp	.+20     	; 0x1abe <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1aaa:	f9 01       	movw	r30, r18
    1aac:	e6 55       	subi	r30, 0x56	; 86
    1aae:	fe 4f       	sbci	r31, 0xFE	; 254
    1ab0:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
    1ab2:	fa 01       	movw	r30, r20
    1ab4:	e2 0f       	add	r30, r18
    1ab6:	f3 1f       	adc	r31, r19
    1ab8:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1aba:	2f 5f       	subi	r18, 0xFF	; 255
    1abc:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1abe:	80 91 f7 01 	lds	r24, 0x01F7
    1ac2:	90 91 f8 01 	lds	r25, 0x01F8
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	28 17       	cp	r18, r24
    1aca:	39 07       	cpc	r19, r25
    1acc:	70 f3       	brcs	.-36     	; 0x1aaa <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
    1ace:	08 95       	ret

00001ad0 <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	0c c0       	rjmp	.+24     	; 0x1aee <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1ad6:	f9 01       	movw	r30, r18
    1ad8:	e6 55       	subi	r30, 0x56	; 86
    1ada:	fe 4f       	sbci	r31, 0xFE	; 254
    1adc:	93 85       	ldd	r25, Z+11	; 0x0b
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ade:	80 91 c0 00 	lds	r24, 0x00C0
    1ae2:	85 ff       	sbrs	r24, 5
    1ae4:	fc cf       	rjmp	.-8      	; 0x1ade <UART_Data_Print_Buf+0xe>
  UDR0 = val;
    1ae6:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1aea:	2f 5f       	subi	r18, 0xFF	; 255
    1aec:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1aee:	80 91 f7 01 	lds	r24, 0x01F7
    1af2:	90 91 f8 01 	lds	r25, 0x01F8
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	28 17       	cp	r18, r24
    1afa:	39 07       	cpc	r19, r25
    1afc:	60 f3       	brcs	.-40     	; 0x1ad6 <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
    1afe:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_NL>
}
    1b02:	08 95       	ret

00001b04 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
    1b04:	80 91 aa 01 	lds	r24, 0x01AA
}
    1b08:	08 95       	ret

00001b0a <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
    1b0a:	10 92 aa 01 	sts	0x01AA, r1
}
    1b0e:	08 95       	ret

00001b10 <UART_ISR_Handler>:


/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    1b10:	0e 94 0f 0a 	call	0x141e	; 0x141e <UART_Rx_Byte>
    1b14:	80 93 b4 01 	sts	0x01B4, r24
  if(UART.Error == 0x00){
    1b18:	80 91 aa 01 	lds	r24, 0x01AA
    1b1c:	88 23       	and	r24, r24
    1b1e:	11 f5       	brne	.+68     	; 0x1b64 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    1b20:	e0 91 f7 01 	lds	r30, 0x01F7
    1b24:	f0 91 f8 01 	lds	r31, 0x01F8
    1b28:	80 91 b4 01 	lds	r24, 0x01B4
    1b2c:	e6 55       	subi	r30, 0x56	; 86
    1b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b30:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    1b32:	80 91 f7 01 	lds	r24, 0x01F7
    1b36:	90 91 f8 01 	lds	r25, 0x01F8
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	90 93 f8 01 	sts	0x01F8, r25
    1b40:	80 93 f7 01 	sts	0x01F7, r24
    if(UART.BufIndex >= UART.BufSize){
    1b44:	20 91 f7 01 	lds	r18, 0x01F7
    1b48:	30 91 f8 01 	lds	r19, 0x01F8
    1b4c:	80 91 f5 01 	lds	r24, 0x01F5
    1b50:	90 91 f6 01 	lds	r25, 0x01F6
    1b54:	28 17       	cp	r18, r24
    1b56:	39 07       	cpc	r19, r25
    1b58:	38 f0       	brcs	.+14     	; 0x1b68 <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    1b5a:	10 92 f8 01 	sts	0x01F8, r1
    1b5e:	10 92 f7 01 	sts	0x01F7, r1
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    1b64:	10 92 b4 01 	sts	0x01B4, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    1b68:	80 91 fa 01 	lds	r24, 0x01FA
    1b6c:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
    1b70:	80 91 f9 01 	lds	r24, 0x01F9
    1b74:	88 23       	and	r24, r24
    1b76:	31 f4       	brne	.+12     	; 0x1b84 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1b78:	87 e0       	ldi	r24, 0x07	; 7
    1b7a:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 93 f9 01 	sts	0x01F9, r24
    1b84:	08 95       	ret

00001b86 <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    1b86:	1f 92       	push	r1
    1b88:	0f 92       	push	r0
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	0f 92       	push	r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	2f 93       	push	r18
    1b92:	3f 93       	push	r19
    1b94:	4f 93       	push	r20
    1b96:	5f 93       	push	r21
    1b98:	6f 93       	push	r22
    1b9a:	7f 93       	push	r23
    1b9c:	8f 93       	push	r24
    1b9e:	9f 93       	push	r25
    1ba0:	af 93       	push	r26
    1ba2:	bf 93       	push	r27
    1ba4:	ef 93       	push	r30
    1ba6:	ff 93       	push	r31
  UART_ISR_Handler();
    1ba8:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <UART_ISR_Handler>
  //Clear flag if necessary
}
    1bac:	ff 91       	pop	r31
    1bae:	ef 91       	pop	r30
    1bb0:	bf 91       	pop	r27
    1bb2:	af 91       	pop	r26
    1bb4:	9f 91       	pop	r25
    1bb6:	8f 91       	pop	r24
    1bb8:	7f 91       	pop	r23
    1bba:	6f 91       	pop	r22
    1bbc:	5f 91       	pop	r21
    1bbe:	4f 91       	pop	r20
    1bc0:	3f 91       	pop	r19
    1bc2:	2f 91       	pop	r18
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    1bce:	36 2f       	mov	r19, r22
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	28 27       	eor	r18, r24
    1bd4:	39 27       	eor	r19, r25
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    1bd8:	61 e2       	ldi	r22, 0x21	; 33
    1bda:	70 e1       	ldi	r23, 0x10	; 16
    1bdc:	c9 01       	movw	r24, r18
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    1be2:	37 ff       	sbrs	r19, 7
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    1be6:	9c 01       	movw	r18, r24
    1be8:	26 27       	eor	r18, r22
    1bea:	37 27       	eor	r19, r23
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    1bee:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    1bf0:	4f 5f       	subi	r20, 0xFF	; 255
    1bf2:	48 30       	cpi	r20, 0x08	; 8
    1bf4:	99 f7       	brne	.-26     	; 0x1bdc <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    1bf6:	c9 01       	movw	r24, r18
    1bf8:	08 95       	ret

00001bfa <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	06 2f       	mov	r16, r22
    1c04:	ec 01       	movw	r28, r24
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
    1c0c:	06 c0       	rjmp	.+12     	; 0x1c1a <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    1c0e:	c9 01       	movw	r24, r18
    1c10:	69 91       	ld	r22, Y+
    1c12:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <UART_CRC_Calculate_Byte>
    1c16:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    1c18:	1f 5f       	subi	r17, 0xFF	; 255
    1c1a:	10 17       	cp	r17, r16
    1c1c:	c0 f3       	brcs	.-16     	; 0x1c0e <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    1c1e:	c9 01       	movw	r24, r18
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	08 95       	ret

00001c2a <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1c2a:	60 91 f7 01 	lds	r22, 0x01F7
    1c2e:	70 91 f8 01 	lds	r23, 0x01F8

/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    1c32:	62 50       	subi	r22, 0x02	; 2
    1c34:	85 eb       	ldi	r24, 0xB5	; 181
    1c36:	91 e0       	ldi	r25, 0x01	; 1
    1c38:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <UART_CRC_Calculate_Block>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1c3c:	e0 91 f7 01 	lds	r30, 0x01F7
    1c40:	f0 91 f8 01 	lds	r31, 0x01F8
/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1c46:	e8 55       	subi	r30, 0x58	; 88
    1c48:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4a:	23 85       	ldd	r18, Z+11	; 0x0b

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
    1c4c:	52 2f       	mov	r21, r18
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1c50:	e0 91 f7 01 	lds	r30, 0x01F7
    1c54:	f0 91 f8 01 	lds	r31, 0x01F8
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1c5a:	e7 55       	subi	r30, 0x57	; 87
    1c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5e:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	42 2b       	or	r20, r18
    1c64:	53 2b       	or	r21, r19
  UART.RxPacket.CalculatedCRC = crc_calc;
    1c66:	90 93 fc 01 	sts	0x01FC, r25
    1c6a:	80 93 fb 01 	sts	0x01FB, r24
  UART.RxPacket.ReceivedCRC = crc_recv;
    1c6e:	50 93 fe 01 	sts	0x01FE, r21
    1c72:	40 93 fd 01 	sts	0x01FD, r20
  if(UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC){
    1c76:	20 91 fb 01 	lds	r18, 0x01FB
    1c7a:	30 91 fc 01 	lds	r19, 0x01FC
    1c7e:	80 91 fd 01 	lds	r24, 0x01FD
    1c82:	90 91 fe 01 	lds	r25, 0x01FE
    1c86:	28 17       	cp	r18, r24
    1c88:	39 07       	cpc	r19, r25
    1c8a:	21 f4       	brne	.+8      	; 0x1c94 <UART_RX_Packet_CRC_Check+0x6a>
    UART.RxPacket.CRCStatus = UART_TRUE;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	80 93 ff 01 	sts	0x01FF, r24
    1c92:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
    1c94:	10 92 ff 01 	sts	0x01FF, r1
    1c98:	08 95       	ret

00001c9a <UART_Timer_ISR_Handler>:
  }
  
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    1c9a:	80 91 f9 01 	lds	r24, 0x01F9
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	21 f4       	brne	.+8      	; 0x1caa <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    1ca2:	10 92 b1 00 	sts	0x00B1, r1
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
    1ca6:	10 92 f9 01 	sts	0x01F9, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1caa:	80 91 f7 01 	lds	r24, 0x01F7
    1cae:	90 91 f8 01 	lds	r25, 0x01F8
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    1cb2:	88 23       	and	r24, r24
    1cb4:	71 f0       	breq	.+28     	; 0x1cd2 <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
    1cb6:	80 91 01 02 	lds	r24, 0x0201
    1cba:	88 23       	and	r24, r24
    1cbc:	19 f4       	brne	.+6      	; 0x1cc4 <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
    1cbe:	80 e1       	ldi	r24, 0x10	; 16
    1cc0:	80 93 aa 01 	sts	0x01AA, r24
	}
    UART_RX_Packet_CRC_Check();
    1cc4:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 93 00 02 	sts	0x0200, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
    1cce:	10 92 01 02 	sts	0x0201, r1
    1cd2:	08 95       	ret

00001cd4 <__vector_9>:
  TCNT2 = UART.Timer.ResetVal;
}



ISR(TIMER2_OVF_vect){
    1cd4:	1f 92       	push	r1
    1cd6:	0f 92       	push	r0
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	0f 92       	push	r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	2f 93       	push	r18
    1ce0:	3f 93       	push	r19
    1ce2:	4f 93       	push	r20
    1ce4:	5f 93       	push	r21
    1ce6:	6f 93       	push	r22
    1ce8:	7f 93       	push	r23
    1cea:	8f 93       	push	r24
    1cec:	9f 93       	push	r25
    1cee:	af 93       	push	r26
    1cf0:	bf 93       	push	r27
    1cf2:	ef 93       	push	r30
    1cf4:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    1cf6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <UART_Timer_ISR_Handler>
  //Clear flag if necessary
}
    1cfa:	ff 91       	pop	r31
    1cfc:	ef 91       	pop	r30
    1cfe:	bf 91       	pop	r27
    1d00:	af 91       	pop	r26
    1d02:	9f 91       	pop	r25
    1d04:	8f 91       	pop	r24
    1d06:	7f 91       	pop	r23
    1d08:	6f 91       	pop	r22
    1d0a:	5f 91       	pop	r21
    1d0c:	4f 91       	pop	r20
    1d0e:	3f 91       	pop	r19
    1d10:	2f 91       	pop	r18
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <UART_RX_Packet_Read_Complete>:
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
  }
}

void UART_RX_Packet_Read_Complete(void){
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1d20:	fc 01       	movw	r30, r24
    1d22:	e6 55       	subi	r30, 0x56	; 86
    1d24:	fe 4f       	sbci	r31, 0xFE	; 254
    1d26:	13 86       	std	Z+11, r1	; 0x0b
    1d28:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1d2a:	80 34       	cpi	r24, 0x40	; 64
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	c1 f7       	brne	.-16     	; 0x1d20 <UART_RX_Packet_Read_Complete+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1d30:	10 92 f8 01 	sts	0x01F8, r1
    1d34:	10 92 f7 01 	sts	0x01F7, r1
uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
}

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    1d38:	10 92 00 02 	sts	0x0200, r1
}

void UART_RX_Packet_Read_Complete(void){
  UART_Buf_Flush();
  UART_Data_Clear_Available_Flag();
  UART_Data_Clear_Read_Complete_Flag();
    1d3c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <UART_Data_Clear_Read_Complete_Flag>
}
    1d40:	08 95       	ret

00001d42 <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
    1d48:	1f 93       	push	r17
    1d4a:	7b 01       	movw	r14, r22
    1d4c:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    1d4e:	0e 94 9d 09 	call	0x133a	; 0x133a <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1d52:	10 92 fc 01 	sts	0x01FC, r1
    1d56:	10 92 fb 01 	sts	0x01FB, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1d5a:	10 92 fe 01 	sts	0x01FE, r1
    1d5e:	10 92 fd 01 	sts	0x01FD, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1d62:	10 92 ff 01 	sts	0x01FF, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1d66:	10 92 00 02 	sts	0x0200, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	80 93 01 02 	sts	0x0201, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1d70:	10 92 f9 01 	sts	0x01F9, r1
  UART.Timer.ResetVal = UART_NULL;
    1d74:	10 92 fa 01 	sts	0x01FA, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    1d78:	c8 01       	movw	r24, r16
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1d80:	80 91 c1 00 	lds	r24, 0x00C1
    1d84:	88 60       	ori	r24, 0x08	; 8
    1d86:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1d8a:	96 e0       	ldi	r25, 0x06	; 6
    1d8c:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1d90:	80 91 c1 00 	lds	r24, 0x00C1
    1d94:	80 61       	ori	r24, 0x10	; 16
    1d96:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1d9a:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1d9e:	80 91 c1 00 	lds	r24, 0x00C1
    1da2:	80 68       	ori	r24, 0x80	; 128
    1da4:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    1da8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    1daa:	0e 94 38 0a 	call	0x1470	; 0x1470 <UART_Timer_Init>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1db2:	fc 01       	movw	r30, r24
    1db4:	e6 55       	subi	r30, 0x56	; 86
    1db6:	fe 4f       	sbci	r31, 0xFE	; 254
    1db8:	13 86       	std	Z+11, r1	; 0x0b
    1dba:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1dbc:	80 34       	cpi	r24, 0x40	; 64
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	c1 f7       	brne	.-16     	; 0x1db2 <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1dc2:	10 92 f8 01 	sts	0x01F8, r1
    1dc6:	10 92 f7 01 	sts	0x01F7, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	ff 90       	pop	r15
    1dd0:	ef 90       	pop	r14
    1dd2:	08 95       	ret

00001dd4 <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    1dd4:	10 92 2f 01 	sts	0x012F, r1
    1dd8:	10 92 30 01 	sts	0x0130, r1
    1ddc:	10 92 31 01 	sts	0x0131, r1
    1de0:	10 92 32 01 	sts	0x0132, r1
  PID.Input.Ki = 0;
    1de4:	10 92 33 01 	sts	0x0133, r1
    1de8:	10 92 34 01 	sts	0x0134, r1
    1dec:	10 92 35 01 	sts	0x0135, r1
    1df0:	10 92 36 01 	sts	0x0136, r1
  PID.Input.Kd = 0;
    1df4:	10 92 37 01 	sts	0x0137, r1
    1df8:	10 92 38 01 	sts	0x0138, r1
    1dfc:	10 92 39 01 	sts	0x0139, r1
    1e00:	10 92 3a 01 	sts	0x013A, r1
  PID.Input.SetPoint = 0;
    1e04:	10 92 3b 01 	sts	0x013B, r1
    1e08:	10 92 3c 01 	sts	0x013C, r1
    1e0c:	10 92 3d 01 	sts	0x013D, r1
    1e10:	10 92 3e 01 	sts	0x013E, r1
  PID.Input.ProcessValue = 0;
    1e14:	10 92 3f 01 	sts	0x013F, r1
    1e18:	10 92 40 01 	sts	0x0140, r1
    1e1c:	10 92 41 01 	sts	0x0141, r1
    1e20:	10 92 42 01 	sts	0x0142, r1
  PID.Error.PError = 0;
    1e24:	10 92 43 01 	sts	0x0143, r1
    1e28:	10 92 44 01 	sts	0x0144, r1
    1e2c:	10 92 45 01 	sts	0x0145, r1
    1e30:	10 92 46 01 	sts	0x0146, r1
  PID.Error.DError = 0;
    1e34:	10 92 47 01 	sts	0x0147, r1
    1e38:	10 92 48 01 	sts	0x0148, r1
    1e3c:	10 92 49 01 	sts	0x0149, r1
    1e40:	10 92 4a 01 	sts	0x014A, r1
  PID.Error.IError = 0;
    1e44:	10 92 4b 01 	sts	0x014B, r1
    1e48:	10 92 4c 01 	sts	0x014C, r1
    1e4c:	10 92 4d 01 	sts	0x014D, r1
    1e50:	10 92 4e 01 	sts	0x014E, r1
  PID.Error.IErrorLimit = 0;
    1e54:	10 92 4f 01 	sts	0x014F, r1
    1e58:	10 92 50 01 	sts	0x0150, r1
    1e5c:	10 92 51 01 	sts	0x0151, r1
    1e60:	10 92 52 01 	sts	0x0152, r1
  PID.Error.LastError = 0;
    1e64:	10 92 53 01 	sts	0x0153, r1
    1e68:	10 92 54 01 	sts	0x0154, r1
    1e6c:	10 92 55 01 	sts	0x0155, r1
    1e70:	10 92 56 01 	sts	0x0156, r1
  PID.Products.PError = 0;
    1e74:	10 92 57 01 	sts	0x0157, r1
    1e78:	10 92 58 01 	sts	0x0158, r1
    1e7c:	10 92 59 01 	sts	0x0159, r1
    1e80:	10 92 5a 01 	sts	0x015A, r1
  PID.Products.IError = 0;
    1e84:	10 92 5b 01 	sts	0x015B, r1
    1e88:	10 92 5c 01 	sts	0x015C, r1
    1e8c:	10 92 5d 01 	sts	0x015D, r1
    1e90:	10 92 5e 01 	sts	0x015E, r1
  PID.Products.DError = 0;
    1e94:	10 92 5f 01 	sts	0x015F, r1
    1e98:	10 92 60 01 	sts	0x0160, r1
    1e9c:	10 92 61 01 	sts	0x0161, r1
    1ea0:	10 92 62 01 	sts	0x0162, r1
  PID.Products.ScaleFact = 0;
    1ea4:	10 92 63 01 	sts	0x0163, r1
    1ea8:	10 92 64 01 	sts	0x0164, r1
    1eac:	10 92 65 01 	sts	0x0165, r1
    1eb0:	10 92 66 01 	sts	0x0166, r1
  PID.Output = 0;
    1eb4:	10 92 67 01 	sts	0x0167, r1
    1eb8:	10 92 68 01 	sts	0x0168, r1
    1ebc:	10 92 69 01 	sts	0x0169, r1
    1ec0:	10 92 6a 01 	sts	0x016A, r1
  PID.OutputNonNegative = 0;
    1ec4:	10 92 6b 01 	sts	0x016B, r1
    1ec8:	10 92 6c 01 	sts	0x016C, r1
    1ecc:	10 92 6d 01 	sts	0x016D, r1
    1ed0:	10 92 6e 01 	sts	0x016E, r1
}
    1ed4:	08 95       	ret

00001ed6 <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1ed6:	60 93 2f 01 	sts	0x012F, r22
    1eda:	70 93 30 01 	sts	0x0130, r23
    1ede:	80 93 31 01 	sts	0x0131, r24
    1ee2:	90 93 32 01 	sts	0x0132, r25
}
    1ee6:	08 95       	ret

00001ee8 <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1ee8:	60 93 33 01 	sts	0x0133, r22
    1eec:	70 93 34 01 	sts	0x0134, r23
    1ef0:	80 93 35 01 	sts	0x0135, r24
    1ef4:	90 93 36 01 	sts	0x0136, r25
}
    1ef8:	08 95       	ret

00001efa <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1efa:	60 93 37 01 	sts	0x0137, r22
    1efe:	70 93 38 01 	sts	0x0138, r23
    1f02:	80 93 39 01 	sts	0x0139, r24
    1f06:	90 93 3a 01 	sts	0x013A, r25
}
    1f0a:	08 95       	ret

00001f0c <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    1f0c:	ef 92       	push	r14
    1f0e:	ff 92       	push	r15
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1f14:	60 93 2f 01 	sts	0x012F, r22
    1f18:	70 93 30 01 	sts	0x0130, r23
    1f1c:	80 93 31 01 	sts	0x0131, r24
    1f20:	90 93 32 01 	sts	0x0132, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1f24:	20 93 33 01 	sts	0x0133, r18
    1f28:	30 93 34 01 	sts	0x0134, r19
    1f2c:	40 93 35 01 	sts	0x0135, r20
    1f30:	50 93 36 01 	sts	0x0136, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1f34:	e0 92 37 01 	sts	0x0137, r14
    1f38:	f0 92 38 01 	sts	0x0138, r15
    1f3c:	00 93 39 01 	sts	0x0139, r16
    1f40:	10 93 3a 01 	sts	0x013A, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	08 95       	ret

00001f4e <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    1f4e:	60 93 3b 01 	sts	0x013B, r22
    1f52:	70 93 3c 01 	sts	0x013C, r23
    1f56:	80 93 3d 01 	sts	0x013D, r24
    1f5a:	90 93 3e 01 	sts	0x013E, r25
}
    1f5e:	08 95       	ret

00001f60 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    1f60:	60 93 3f 01 	sts	0x013F, r22
    1f64:	70 93 40 01 	sts	0x0140, r23
    1f68:	80 93 41 01 	sts	0x0141, r24
    1f6c:	90 93 42 01 	sts	0x0142, r25
}
    1f70:	08 95       	ret

00001f72 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    1f72:	60 93 4f 01 	sts	0x014F, r22
    1f76:	70 93 50 01 	sts	0x0150, r23
    1f7a:	80 93 51 01 	sts	0x0151, r24
    1f7e:	90 93 52 01 	sts	0x0152, r25
}
    1f82:	08 95       	ret

00001f84 <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    1f84:	60 93 63 01 	sts	0x0163, r22
    1f88:	70 93 64 01 	sts	0x0164, r23
    1f8c:	80 93 65 01 	sts	0x0165, r24
    1f90:	90 93 66 01 	sts	0x0166, r25
}
    1f94:	08 95       	ret

00001f96 <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    1f96:	10 92 4b 01 	sts	0x014B, r1
    1f9a:	10 92 4c 01 	sts	0x014C, r1
    1f9e:	10 92 4d 01 	sts	0x014D, r1
    1fa2:	10 92 4e 01 	sts	0x014E, r1
}
    1fa6:	08 95       	ret

00001fa8 <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    1fb0:	20 91 3b 01 	lds	r18, 0x013B
    1fb4:	30 91 3c 01 	lds	r19, 0x013C
    1fb8:	40 91 3d 01 	lds	r20, 0x013D
    1fbc:	50 91 3e 01 	lds	r21, 0x013E
    1fc0:	80 91 3f 01 	lds	r24, 0x013F
    1fc4:	90 91 40 01 	lds	r25, 0x0140
    1fc8:	a0 91 41 01 	lds	r26, 0x0141
    1fcc:	b0 91 42 01 	lds	r27, 0x0142
    1fd0:	28 1b       	sub	r18, r24
    1fd2:	39 0b       	sbc	r19, r25
    1fd4:	4a 0b       	sbc	r20, r26
    1fd6:	5b 0b       	sbc	r21, r27
    1fd8:	20 93 43 01 	sts	0x0143, r18
    1fdc:	30 93 44 01 	sts	0x0144, r19
    1fe0:	40 93 45 01 	sts	0x0145, r20
    1fe4:	50 93 46 01 	sts	0x0146, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    1fe8:	80 91 53 01 	lds	r24, 0x0153
    1fec:	90 91 54 01 	lds	r25, 0x0154
    1ff0:	a0 91 55 01 	lds	r26, 0x0155
    1ff4:	b0 91 56 01 	lds	r27, 0x0156
    1ff8:	79 01       	movw	r14, r18
    1ffa:	8a 01       	movw	r16, r20
    1ffc:	e8 1a       	sub	r14, r24
    1ffe:	f9 0a       	sbc	r15, r25
    2000:	0a 0b       	sbc	r16, r26
    2002:	1b 0b       	sbc	r17, r27
    2004:	e0 92 47 01 	sts	0x0147, r14
    2008:	f0 92 48 01 	sts	0x0148, r15
    200c:	00 93 49 01 	sts	0x0149, r16
    2010:	10 93 4a 01 	sts	0x014A, r17
  PID.Error.LastError = PID.Error.PError;
    2014:	20 93 53 01 	sts	0x0153, r18
    2018:	30 93 54 01 	sts	0x0154, r19
    201c:	40 93 55 01 	sts	0x0155, r20
    2020:	50 93 56 01 	sts	0x0156, r21
  PID.Error.IError += PID.Error.PError;
    2024:	e0 90 4b 01 	lds	r14, 0x014B
    2028:	f0 90 4c 01 	lds	r15, 0x014C
    202c:	00 91 4d 01 	lds	r16, 0x014D
    2030:	10 91 4e 01 	lds	r17, 0x014E
    2034:	e2 0e       	add	r14, r18
    2036:	f3 1e       	adc	r15, r19
    2038:	04 1f       	adc	r16, r20
    203a:	15 1f       	adc	r17, r21
    203c:	e0 92 4b 01 	sts	0x014B, r14
    2040:	f0 92 4c 01 	sts	0x014C, r15
    2044:	00 93 4d 01 	sts	0x014D, r16
    2048:	10 93 4e 01 	sts	0x014E, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    204c:	80 91 4f 01 	lds	r24, 0x014F
    2050:	90 91 50 01 	lds	r25, 0x0150
    2054:	a0 91 51 01 	lds	r26, 0x0151
    2058:	b0 91 52 01 	lds	r27, 0x0152
    205c:	8e 15       	cp	r24, r14
    205e:	9f 05       	cpc	r25, r15
    2060:	a0 07       	cpc	r26, r16
    2062:	b1 07       	cpc	r27, r17
    2064:	4c f4       	brge	.+18     	; 0x2078 <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    2066:	80 93 4b 01 	sts	0x014B, r24
    206a:	90 93 4c 01 	sts	0x014C, r25
    206e:	a0 93 4d 01 	sts	0x014D, r26
    2072:	b0 93 4e 01 	sts	0x014E, r27
    2076:	14 c0       	rjmp	.+40     	; 0x20a0 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    2078:	22 27       	eor	r18, r18
    207a:	33 27       	eor	r19, r19
    207c:	a9 01       	movw	r20, r18
    207e:	28 1b       	sub	r18, r24
    2080:	39 0b       	sbc	r19, r25
    2082:	4a 0b       	sbc	r20, r26
    2084:	5b 0b       	sbc	r21, r27
    2086:	e2 16       	cp	r14, r18
    2088:	f3 06       	cpc	r15, r19
    208a:	04 07       	cpc	r16, r20
    208c:	15 07       	cpc	r17, r21
    208e:	44 f4       	brge	.+16     	; 0x20a0 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    2090:	20 93 4b 01 	sts	0x014B, r18
    2094:	30 93 4c 01 	sts	0x014C, r19
    2098:	40 93 4d 01 	sts	0x014D, r20
    209c:	50 93 4e 01 	sts	0x014E, r21
  }
}
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	08 95       	ret

000020aa <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    20aa:	6f 92       	push	r6
    20ac:	7f 92       	push	r7
    20ae:	8f 92       	push	r8
    20b0:	9f 92       	push	r9
    20b2:	af 92       	push	r10
    20b4:	bf 92       	push	r11
    20b6:	cf 92       	push	r12
    20b8:	df 92       	push	r13
    20ba:	ef 92       	push	r14
    20bc:	ff 92       	push	r15
    20be:	0f 93       	push	r16
    20c0:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    20c2:	60 91 33 01 	lds	r22, 0x0133
    20c6:	70 91 34 01 	lds	r23, 0x0134
    20ca:	80 91 35 01 	lds	r24, 0x0135
    20ce:	90 91 36 01 	lds	r25, 0x0136
    20d2:	20 91 4b 01 	lds	r18, 0x014B
    20d6:	30 91 4c 01 	lds	r19, 0x014C
    20da:	40 91 4d 01 	lds	r20, 0x014D
    20de:	50 91 4e 01 	lds	r21, 0x014E
    20e2:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
    20e6:	3b 01       	movw	r6, r22
    20e8:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    20ea:	60 91 37 01 	lds	r22, 0x0137
    20ee:	70 91 38 01 	lds	r23, 0x0138
    20f2:	80 91 39 01 	lds	r24, 0x0139
    20f6:	90 91 3a 01 	lds	r25, 0x013A
    20fa:	20 91 47 01 	lds	r18, 0x0147
    20fe:	30 91 48 01 	lds	r19, 0x0148
    2102:	40 91 49 01 	lds	r20, 0x0149
    2106:	50 91 4a 01 	lds	r21, 0x014A
    210a:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
    210e:	5b 01       	movw	r10, r22
    2110:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    2112:	e0 90 63 01 	lds	r14, 0x0163
    2116:	f0 90 64 01 	lds	r15, 0x0164
    211a:	00 91 65 01 	lds	r16, 0x0165
    211e:	10 91 66 01 	lds	r17, 0x0166
    2122:	60 91 2f 01 	lds	r22, 0x012F
    2126:	70 91 30 01 	lds	r23, 0x0130
    212a:	80 91 31 01 	lds	r24, 0x0131
    212e:	90 91 32 01 	lds	r25, 0x0132
    2132:	20 91 43 01 	lds	r18, 0x0143
    2136:	30 91 44 01 	lds	r19, 0x0144
    213a:	40 91 45 01 	lds	r20, 0x0145
    213e:	50 91 46 01 	lds	r21, 0x0146
    2142:	0e 94 1c 12 	call	0x2438	; 0x2438 <__mulsi3>
    2146:	a8 01       	movw	r20, r16
    2148:	97 01       	movw	r18, r14
    214a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
    214e:	20 93 57 01 	sts	0x0157, r18
    2152:	30 93 58 01 	sts	0x0158, r19
    2156:	40 93 59 01 	sts	0x0159, r20
    215a:	50 93 5a 01 	sts	0x015A, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    215e:	c4 01       	movw	r24, r8
    2160:	b3 01       	movw	r22, r6
    2162:	a8 01       	movw	r20, r16
    2164:	97 01       	movw	r18, r14
    2166:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
    216a:	20 93 5b 01 	sts	0x015B, r18
    216e:	30 93 5c 01 	sts	0x015C, r19
    2172:	40 93 5d 01 	sts	0x015D, r20
    2176:	50 93 5e 01 	sts	0x015E, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    217a:	c6 01       	movw	r24, r12
    217c:	b5 01       	movw	r22, r10
    217e:	a8 01       	movw	r20, r16
    2180:	97 01       	movw	r18, r14
    2182:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodsi4>
    2186:	20 93 5f 01 	sts	0x015F, r18
    218a:	30 93 60 01 	sts	0x0160, r19
    218e:	40 93 61 01 	sts	0x0161, r20
    2192:	50 93 62 01 	sts	0x0162, r21
}
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	df 90       	pop	r13
    21a0:	cf 90       	pop	r12
    21a2:	bf 90       	pop	r11
    21a4:	af 90       	pop	r10
    21a6:	9f 90       	pop	r9
    21a8:	8f 90       	pop	r8
    21aa:	7f 90       	pop	r7
    21ac:	6f 90       	pop	r6
    21ae:	08 95       	ret

000021b0 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    21b0:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    21b4:	0e 94 55 10 	call	0x20aa	; 0x20aa <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    21b8:	20 91 57 01 	lds	r18, 0x0157
    21bc:	30 91 58 01 	lds	r19, 0x0158
    21c0:	40 91 59 01 	lds	r20, 0x0159
    21c4:	50 91 5a 01 	lds	r21, 0x015A
  control_value += PID.Products.IError;
    21c8:	80 91 5b 01 	lds	r24, 0x015B
    21cc:	90 91 5c 01 	lds	r25, 0x015C
    21d0:	a0 91 5d 01 	lds	r26, 0x015D
    21d4:	b0 91 5e 01 	lds	r27, 0x015E
    21d8:	28 0f       	add	r18, r24
    21da:	39 1f       	adc	r19, r25
    21dc:	4a 1f       	adc	r20, r26
    21de:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    21e0:	80 91 5f 01 	lds	r24, 0x015F
    21e4:	90 91 60 01 	lds	r25, 0x0160
    21e8:	a0 91 61 01 	lds	r26, 0x0161
    21ec:	b0 91 62 01 	lds	r27, 0x0162
    21f0:	28 0f       	add	r18, r24
    21f2:	39 1f       	adc	r19, r25
    21f4:	4a 1f       	adc	r20, r26
    21f6:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    21f8:	20 93 67 01 	sts	0x0167, r18
    21fc:	30 93 68 01 	sts	0x0168, r19
    2200:	40 93 69 01 	sts	0x0169, r20
    2204:	50 93 6a 01 	sts	0x016A, r21
  if(control_value < 0){
    2208:	57 ff       	sbrs	r21, 7
    220a:	09 c0       	rjmp	.+18     	; 0x221e <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    220c:	10 92 6b 01 	sts	0x016B, r1
    2210:	10 92 6c 01 	sts	0x016C, r1
    2214:	10 92 6d 01 	sts	0x016D, r1
    2218:	10 92 6e 01 	sts	0x016E, r1
    221c:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    221e:	20 93 6b 01 	sts	0x016B, r18
    2222:	30 93 6c 01 	sts	0x016C, r19
    2226:	40 93 6d 01 	sts	0x016D, r20
    222a:	50 93 6e 01 	sts	0x016E, r21
    222e:	08 95       	ret

00002230 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    2230:	60 91 2f 01 	lds	r22, 0x012F
    2234:	70 91 30 01 	lds	r23, 0x0130
  return PID.Input.Kp;
}
    2238:	80 91 31 01 	lds	r24, 0x0131
    223c:	90 91 32 01 	lds	r25, 0x0132
    2240:	08 95       	ret

00002242 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2242:	60 91 33 01 	lds	r22, 0x0133
    2246:	70 91 34 01 	lds	r23, 0x0134
  return PID.Input.Ki;
}
    224a:	80 91 35 01 	lds	r24, 0x0135
    224e:	90 91 36 01 	lds	r25, 0x0136
    2252:	08 95       	ret

00002254 <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    2254:	60 91 37 01 	lds	r22, 0x0137
    2258:	70 91 38 01 	lds	r23, 0x0138
  return PID.Input.Kd;
}
    225c:	80 91 39 01 	lds	r24, 0x0139
    2260:	90 91 3a 01 	lds	r25, 0x013A
    2264:	08 95       	ret

00002266 <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    2266:	60 91 3b 01 	lds	r22, 0x013B
    226a:	70 91 3c 01 	lds	r23, 0x013C
  return PID.Input.SetPoint;
}
    226e:	80 91 3d 01 	lds	r24, 0x013D
    2272:	90 91 3e 01 	lds	r25, 0x013E
    2276:	08 95       	ret

00002278 <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    2278:	60 91 3f 01 	lds	r22, 0x013F
    227c:	70 91 40 01 	lds	r23, 0x0140
  return PID.Input.ProcessValue;
}
    2280:	80 91 41 01 	lds	r24, 0x0141
    2284:	90 91 42 01 	lds	r25, 0x0142
    2288:	08 95       	ret

0000228a <PID_Get_PError>:

signed long PID_Get_PError(void){
    228a:	60 91 43 01 	lds	r22, 0x0143
    228e:	70 91 44 01 	lds	r23, 0x0144
  return PID.Error.PError;
}
    2292:	80 91 45 01 	lds	r24, 0x0145
    2296:	90 91 46 01 	lds	r25, 0x0146
    229a:	08 95       	ret

0000229c <PID_Get_IError>:

signed long PID_Get_IError(void){
    229c:	60 91 4b 01 	lds	r22, 0x014B
    22a0:	70 91 4c 01 	lds	r23, 0x014C
  return PID.Error.IError;
}
    22a4:	80 91 4d 01 	lds	r24, 0x014D
    22a8:	90 91 4e 01 	lds	r25, 0x014E
    22ac:	08 95       	ret

000022ae <PID_Get_DError>:

signed long PID_Get_DError(void){
    22ae:	60 91 47 01 	lds	r22, 0x0147
    22b2:	70 91 48 01 	lds	r23, 0x0148
  return PID.Error.DError;
}
    22b6:	80 91 49 01 	lds	r24, 0x0149
    22ba:	90 91 4a 01 	lds	r25, 0x014A
    22be:	08 95       	ret

000022c0 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    22c0:	60 91 4f 01 	lds	r22, 0x014F
    22c4:	70 91 50 01 	lds	r23, 0x0150
  return PID.Error.IErrorLimit;
}
    22c8:	80 91 51 01 	lds	r24, 0x0151
    22cc:	90 91 52 01 	lds	r25, 0x0152
    22d0:	08 95       	ret

000022d2 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    22d2:	60 91 57 01 	lds	r22, 0x0157
    22d6:	70 91 58 01 	lds	r23, 0x0158
  return PID.Products.PError;
}
    22da:	80 91 59 01 	lds	r24, 0x0159
    22de:	90 91 5a 01 	lds	r25, 0x015A
    22e2:	08 95       	ret

000022e4 <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    22e4:	60 91 5b 01 	lds	r22, 0x015B
    22e8:	70 91 5c 01 	lds	r23, 0x015C
  return PID.Products.IError;
}
    22ec:	80 91 5d 01 	lds	r24, 0x015D
    22f0:	90 91 5e 01 	lds	r25, 0x015E
    22f4:	08 95       	ret

000022f6 <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    22f6:	60 91 5f 01 	lds	r22, 0x015F
    22fa:	70 91 60 01 	lds	r23, 0x0160
  return PID.Products.DError;
}
    22fe:	80 91 61 01 	lds	r24, 0x0161
    2302:	90 91 62 01 	lds	r25, 0x0162
    2306:	08 95       	ret

00002308 <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    2308:	60 91 63 01 	lds	r22, 0x0163
    230c:	70 91 64 01 	lds	r23, 0x0164
  return PID.Products.ScaleFact;
}
    2310:	80 91 65 01 	lds	r24, 0x0165
    2314:	90 91 66 01 	lds	r25, 0x0166
    2318:	08 95       	ret

0000231a <PID_Get_Output>:


signed long PID_Get_Output(void){
    231a:	60 91 67 01 	lds	r22, 0x0167
    231e:	70 91 68 01 	lds	r23, 0x0168
  return PID.Output;
}
    2322:	80 91 69 01 	lds	r24, 0x0169
    2326:	90 91 6a 01 	lds	r25, 0x016A
    232a:	08 95       	ret

0000232c <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    232c:	60 91 6b 01 	lds	r22, 0x016B
    2330:	70 91 6c 01 	lds	r23, 0x016C
  return PID.OutputNonNegative;
}
    2334:	80 91 6d 01 	lds	r24, 0x016D
    2338:	90 91 6e 01 	lds	r25, 0x016E
    233c:	08 95       	ret

0000233e <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    233e:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <PID_Struct_Init>
}
    2342:	08 95       	ret

00002344 <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    2344:	af 92       	push	r10
    2346:	bf 92       	push	r11
    2348:	cf 92       	push	r12
    234a:	df 92       	push	r13
    234c:	ef 92       	push	r14
    234e:	ff 92       	push	r15
    2350:	0f 93       	push	r16
    2352:	1f 93       	push	r17
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    235c:	60 93 2f 01 	sts	0x012F, r22
    2360:	70 93 30 01 	sts	0x0130, r23
    2364:	80 93 31 01 	sts	0x0131, r24
    2368:	90 93 32 01 	sts	0x0132, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    236c:	20 93 33 01 	sts	0x0133, r18
    2370:	30 93 34 01 	sts	0x0134, r19
    2374:	40 93 35 01 	sts	0x0135, r20
    2378:	50 93 36 01 	sts	0x0136, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    237c:	e0 92 37 01 	sts	0x0137, r14
    2380:	f0 92 38 01 	sts	0x0138, r15
    2384:	00 93 39 01 	sts	0x0139, r16
    2388:	10 93 3a 01 	sts	0x013A, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    238c:	a0 92 4f 01 	sts	0x014F, r10
    2390:	b0 92 50 01 	sts	0x0150, r11
    2394:	c0 92 51 01 	sts	0x0151, r12
    2398:	d0 92 52 01 	sts	0x0152, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    239c:	8d 85       	ldd	r24, Y+13	; 0x0d
    239e:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a0:	af 85       	ldd	r26, Y+15	; 0x0f
    23a2:	b8 89       	ldd	r27, Y+16	; 0x10
    23a4:	80 93 63 01 	sts	0x0163, r24
    23a8:	90 93 64 01 	sts	0x0164, r25
    23ac:	a0 93 65 01 	sts	0x0165, r26
    23b0:	b0 93 66 01 	sts	0x0166, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    23b4:	10 92 4b 01 	sts	0x014B, r1
    23b8:	10 92 4c 01 	sts	0x014C, r1
    23bc:	10 92 4d 01 	sts	0x014D, r1
    23c0:	10 92 4e 01 	sts	0x014E, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    23c4:	cf 91       	pop	r28
    23c6:	df 91       	pop	r29
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	bf 90       	pop	r11
    23d6:	af 90       	pop	r10
    23d8:	08 95       	ret

000023da <ThreadedDbg_Struct_Init>:


thdbg_t ThreadedDbg;

void ThreadedDbg_Struct_Init(void){
  ThreadedDbg.TotalThreads = 0;
    23da:	10 92 64 02 	sts	0x0264, r1
  ThreadedDbg.ExecutionIndex = 0;
    23de:	10 92 65 02 	sts	0x0265, r1
}
    23e2:	08 95       	ret

000023e4 <ThreadedDbg_Add_Function>:

void ThreadedDbg_Add_Function( void (*fptr) (void) ){
  ThreadedDbg.FnPtr[ThreadedDbg.TotalThreads] = fptr;
    23e4:	20 91 64 02 	lds	r18, 0x0264
    23e8:	e2 2f       	mov	r30, r18
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	ee 0f       	add	r30, r30
    23ee:	ff 1f       	adc	r31, r31
    23f0:	e4 5c       	subi	r30, 0xC4	; 196
    23f2:	fd 4f       	sbci	r31, 0xFD	; 253
    23f4:	91 83       	std	Z+1, r25	; 0x01
    23f6:	80 83       	st	Z, r24
  ThreadedDbg.TotalThreads++;
    23f8:	2f 5f       	subi	r18, 0xFF	; 255
    23fa:	20 93 64 02 	sts	0x0264, r18
}
    23fe:	08 95       	ret

00002400 <ThreadedDbg_Execute_Function>:

void ThreadedDbg_Execute_Function(void){
  (*ThreadedDbg.FnPtr[ThreadedDbg.ExecutionIndex])();
    2400:	e0 91 65 02 	lds	r30, 0x0265
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	e4 5c       	subi	r30, 0xC4	; 196
    240c:	fd 4f       	sbci	r31, 0xFD	; 253
    240e:	01 90       	ld	r0, Z+
    2410:	f0 81       	ld	r31, Z
    2412:	e0 2d       	mov	r30, r0
    2414:	09 95       	icall
  ThreadedDbg.ExecutionIndex++;
    2416:	80 91 65 02 	lds	r24, 0x0265
    241a:	8f 5f       	subi	r24, 0xFF	; 255
    241c:	80 93 65 02 	sts	0x0265, r24
  if(ThreadedDbg.ExecutionIndex > ThreadedDbg.TotalThreads){
    2420:	90 91 64 02 	lds	r25, 0x0264
    2424:	98 17       	cp	r25, r24
    2426:	10 f4       	brcc	.+4      	; 0x242c <ThreadedDbg_Execute_Function+0x2c>
    ThreadedDbg.ExecutionIndex = 0;
    2428:	10 92 65 02 	sts	0x0265, r1
    242c:	08 95       	ret

0000242e <ThreadedDbg_Init>:


thdbg_t ThreadedDbg;

void ThreadedDbg_Struct_Init(void){
  ThreadedDbg.TotalThreads = 0;
    242e:	10 92 64 02 	sts	0x0264, r1
  ThreadedDbg.ExecutionIndex = 0;
    2432:	10 92 65 02 	sts	0x0265, r1



void ThreadedDbg_Init(void){
  ThreadedDbg_Struct_Init();
}
    2436:	08 95       	ret

00002438 <__mulsi3>:
    2438:	62 9f       	mul	r22, r18
    243a:	d0 01       	movw	r26, r0
    243c:	73 9f       	mul	r23, r19
    243e:	f0 01       	movw	r30, r0
    2440:	82 9f       	mul	r24, r18
    2442:	e0 0d       	add	r30, r0
    2444:	f1 1d       	adc	r31, r1
    2446:	64 9f       	mul	r22, r20
    2448:	e0 0d       	add	r30, r0
    244a:	f1 1d       	adc	r31, r1
    244c:	92 9f       	mul	r25, r18
    244e:	f0 0d       	add	r31, r0
    2450:	83 9f       	mul	r24, r19
    2452:	f0 0d       	add	r31, r0
    2454:	74 9f       	mul	r23, r20
    2456:	f0 0d       	add	r31, r0
    2458:	65 9f       	mul	r22, r21
    245a:	f0 0d       	add	r31, r0
    245c:	99 27       	eor	r25, r25
    245e:	72 9f       	mul	r23, r18
    2460:	b0 0d       	add	r27, r0
    2462:	e1 1d       	adc	r30, r1
    2464:	f9 1f       	adc	r31, r25
    2466:	63 9f       	mul	r22, r19
    2468:	b0 0d       	add	r27, r0
    246a:	e1 1d       	adc	r30, r1
    246c:	f9 1f       	adc	r31, r25
    246e:	bd 01       	movw	r22, r26
    2470:	cf 01       	movw	r24, r30
    2472:	11 24       	eor	r1, r1
    2474:	08 95       	ret

00002476 <__udivmodsi4>:
    2476:	a1 e2       	ldi	r26, 0x21	; 33
    2478:	1a 2e       	mov	r1, r26
    247a:	aa 1b       	sub	r26, r26
    247c:	bb 1b       	sub	r27, r27
    247e:	fd 01       	movw	r30, r26
    2480:	0d c0       	rjmp	.+26     	; 0x249c <__udivmodsi4_ep>

00002482 <__udivmodsi4_loop>:
    2482:	aa 1f       	adc	r26, r26
    2484:	bb 1f       	adc	r27, r27
    2486:	ee 1f       	adc	r30, r30
    2488:	ff 1f       	adc	r31, r31
    248a:	a2 17       	cp	r26, r18
    248c:	b3 07       	cpc	r27, r19
    248e:	e4 07       	cpc	r30, r20
    2490:	f5 07       	cpc	r31, r21
    2492:	20 f0       	brcs	.+8      	; 0x249c <__udivmodsi4_ep>
    2494:	a2 1b       	sub	r26, r18
    2496:	b3 0b       	sbc	r27, r19
    2498:	e4 0b       	sbc	r30, r20
    249a:	f5 0b       	sbc	r31, r21

0000249c <__udivmodsi4_ep>:
    249c:	66 1f       	adc	r22, r22
    249e:	77 1f       	adc	r23, r23
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	1a 94       	dec	r1
    24a6:	69 f7       	brne	.-38     	; 0x2482 <__udivmodsi4_loop>
    24a8:	60 95       	com	r22
    24aa:	70 95       	com	r23
    24ac:	80 95       	com	r24
    24ae:	90 95       	com	r25
    24b0:	9b 01       	movw	r18, r22
    24b2:	ac 01       	movw	r20, r24
    24b4:	bd 01       	movw	r22, r26
    24b6:	cf 01       	movw	r24, r30
    24b8:	08 95       	ret

000024ba <__divmodsi4>:
    24ba:	97 fb       	bst	r25, 7
    24bc:	09 2e       	mov	r0, r25
    24be:	05 26       	eor	r0, r21
    24c0:	0e d0       	rcall	.+28     	; 0x24de <__divmodsi4_neg1>
    24c2:	57 fd       	sbrc	r21, 7
    24c4:	04 d0       	rcall	.+8      	; 0x24ce <__divmodsi4_neg2>
    24c6:	d7 df       	rcall	.-82     	; 0x2476 <__udivmodsi4>
    24c8:	0a d0       	rcall	.+20     	; 0x24de <__divmodsi4_neg1>
    24ca:	00 1c       	adc	r0, r0
    24cc:	38 f4       	brcc	.+14     	; 0x24dc <__divmodsi4_exit>

000024ce <__divmodsi4_neg2>:
    24ce:	50 95       	com	r21
    24d0:	40 95       	com	r20
    24d2:	30 95       	com	r19
    24d4:	21 95       	neg	r18
    24d6:	3f 4f       	sbci	r19, 0xFF	; 255
    24d8:	4f 4f       	sbci	r20, 0xFF	; 255
    24da:	5f 4f       	sbci	r21, 0xFF	; 255

000024dc <__divmodsi4_exit>:
    24dc:	08 95       	ret

000024de <__divmodsi4_neg1>:
    24de:	f6 f7       	brtc	.-4      	; 0x24dc <__divmodsi4_exit>
    24e0:	90 95       	com	r25
    24e2:	80 95       	com	r24
    24e4:	70 95       	com	r23
    24e6:	61 95       	neg	r22
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ea:	8f 4f       	sbci	r24, 0xFF	; 255
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	08 95       	ret

000024f0 <_exit>:
    24f0:	f8 94       	cli

000024f2 <__stop_program>:
    24f2:	ff cf       	rjmp	.-2      	; 0x24f2 <__stop_program>
