
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  0000232a  000023be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000232a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800196  00800196  00002454  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002454  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001330  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003aec  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081f  00000000  00000000  00007310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021b1  00000000  00000000  00007b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  00009ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016a2  00000000  00000000  0000a790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001595  00000000  00000000  0000be32  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000d3c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e2       	ldi	r30, 0x2A	; 42
      7c:	f3 e2       	ldi	r31, 0x23	; 35
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 39       	cpi	r26, 0x96	; 150
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 e9       	ldi	r26, 0x96	; 150
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 31       	cpi	r26, 0x1F	; 31
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 93 11 	jmp	0x2326	; 0x2326 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <Timebase_Init>
  App_Setup();
      ae:	0e 94 78 00 	call	0xf0	; 0xf0 <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 77 08 	call	0x10ee	; 0x10ee <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:


void App_Main_Loop(void){
  
  
  if(UART_Data_Available()){
      bc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <UART_Data_Available>
      c0:	88 23       	and	r24, r24
      c2:	a9 f0       	breq	.+42     	; 0xee <App_Main_Loop+0x32>
    UART_Tx_Parameter_Hex_SP("CalcCRC", UART_Data_Calculated_CRC_Get() );
      c4:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <UART_Data_Calculated_CRC_Get>
      c8:	ac 01       	movw	r20, r24
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <UART_Tx_Parameter_Hex_SP>
    UART_Tx_Parameter_Hex_SP("ErrorCode", UART_Error_Code_Get() );
      d6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <UART_Error_Code_Get>
      da:	48 2f       	mov	r20, r24
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	88 e0       	ldi	r24, 0x08	; 8
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <UART_Tx_Parameter_Hex_SP>
    UART_RX_Packet_Read_Complete();
      ea:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <UART_RX_Packet_Read_Complete>
      ee:	08 95       	ret

000000f0 <App_Setup>:



void App_Setup(void){

  UART_Init(57600);
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	71 ee       	ldi	r23, 0xE1	; 225
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <UART_Init>
  
  
  Timebase_DownCounter_SS_Set_Securely(0, 50);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	42 e3       	ldi	r20, 0x32	; 50
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	0e 94 43 05 	call	0xa86	; 0xa86 <Timebase_DownCounter_SS_Set_Securely>
  
}
     10a:	08 95       	ret

0000010c <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     10c:	80 ef       	ldi	r24, 0xF0	; 240
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	90 93 ef 01 	sts	0x01EF, r25
     114:	80 93 ee 01 	sts	0x01EE, r24
  Timebase->Config.UpdateRate = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 f1 01 	sts	0x01F1, r25
     120:	80 93 f0 01 	sts	0x01F0, r24
  Timebase->Time.OVFUpdateValue=0;
     124:	10 92 f3 01 	sts	0x01F3, r1
     128:	10 92 f2 01 	sts	0x01F2, r1
  Timebase->Time.SubSecondsShadow = 0;
     12c:	10 92 ff 01 	sts	0x01FF, r1
     130:	10 92 fe 01 	sts	0x01FE, r1
  Timebase->Time.SubSecondsUpTime = 0;
     134:	10 92 00 02 	sts	0x0200, r1
     138:	10 92 01 02 	sts	0x0201, r1
     13c:	10 92 02 02 	sts	0x0202, r1
     140:	10 92 03 02 	sts	0x0203, r1
  Timebase->Time.SecondsShadow = 0;
     144:	10 92 04 02 	sts	0x0204, r1
     148:	10 92 05 02 	sts	0x0205, r1
     14c:	10 92 06 02 	sts	0x0206, r1
     150:	10 92 07 02 	sts	0x0207, r1
  Timebase->Time.SubSeconds = 0;
     154:	10 92 f9 01 	sts	0x01F9, r1
     158:	10 92 f8 01 	sts	0x01F8, r1
  Timebase->Time.Seconds = 0;
     15c:	10 92 fa 01 	sts	0x01FA, r1
     160:	10 92 fb 01 	sts	0x01FB, r1
     164:	10 92 fc 01 	sts	0x01FC, r1
     168:	10 92 fd 01 	sts	0x01FD, r1
  Timebase->Time.VariablesSync = 0;
     16c:	10 92 08 02 	sts	0x0208, r1
  Timebase->Time.LastSample = 0;
     170:	10 92 f4 01 	sts	0x01F4, r1
     174:	10 92 f5 01 	sts	0x01F5, r1
     178:	10 92 f6 01 	sts	0x01F6, r1
     17c:	10 92 f7 01 	sts	0x01F7, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
     180:	10 92 09 02 	sts	0x0209, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     184:	10 92 0a 02 	sts	0x020A, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     188:	10 92 0b 02 	sts	0x020B, r1
     18c:	10 92 0c 02 	sts	0x020C, r1
     190:	10 92 0d 02 	sts	0x020D, r1
     194:	10 92 0e 02 	sts	0x020E, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     198:	10 92 0f 02 	sts	0x020F, r1
     19c:	10 92 10 02 	sts	0x0210, r1
     1a0:	10 92 11 02 	sts	0x0211, r1
     1a4:	10 92 12 02 	sts	0x0212, r1
    Timebase->DownCounterSS[i].Value = 0;
     1a8:	10 92 13 02 	sts	0x0213, r1
     1ac:	10 92 14 02 	sts	0x0214, r1
     1b0:	10 92 15 02 	sts	0x0215, r1
     1b4:	10 92 16 02 	sts	0x0216, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     1b8:	10 92 17 02 	sts	0x0217, r1
     1bc:	10 92 18 02 	sts	0x0218, r1
     1c0:	10 92 19 02 	sts	0x0219, r1
     1c4:	10 92 1a 02 	sts	0x021A, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     1c8:	10 92 1b 02 	sts	0x021B, r1
     1cc:	10 92 1c 02 	sts	0x021C, r1
     1d0:	10 92 1d 02 	sts	0x021D, r1
     1d4:	10 92 1e 02 	sts	0x021E, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
	Timebase->LPDownCounter[i].ReloadValue = 0;
  }
  #endif
  
}
     1d8:	08 95       	ret

000001da <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     1da:	8f 92       	push	r8
     1dc:	9f 92       	push	r9
     1de:	bf 92       	push	r11
     1e0:	cf 92       	push	r12
     1e2:	df 92       	push	r13
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	df 93       	push	r29
     1ee:	cf 93       	push	r28
     1f0:	cd b7       	in	r28, 0x3d	; 61
     1f2:	de b7       	in	r29, 0x3e	; 62
     1f4:	2a 97       	sbiw	r28, 0x0a	; 10
     1f6:	0f b6       	in	r0, 0x3f	; 63
     1f8:	f8 94       	cli
     1fa:	de bf       	out	0x3e, r29	; 62
     1fc:	0f be       	out	0x3f, r0	; 63
     1fe:	cd bf       	out	0x3d, r28	; 61
     200:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     202:	de 01       	movw	r26, r28
     204:	11 96       	adiw	r26, 0x01	; 1
     206:	e2 e1       	ldi	r30, 0x12	; 18
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	8a e0       	ldi	r24, 0x0A	; 10
     20c:	01 90       	ld	r0, Z+
     20e:	0d 92       	st	X+, r0
     210:	81 50       	subi	r24, 0x01	; 1
     212:	e1 f7       	brne	.-8      	; 0x20c <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     214:	94 01       	movw	r18, r8
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	7b e1       	ldi	r23, 0x1B	; 27
     21e:	87 eb       	ldi	r24, 0xB7	; 183
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     226:	b2 2e       	mov	r11, r18
     228:	c3 2e       	mov	r12, r19
     22a:	d4 2e       	mov	r13, r20
     22c:	05 2f       	mov	r16, r21
     22e:	7e 01       	movw	r14, r28
     230:	08 94       	sec
     232:	e1 1c       	adc	r14, r1
     234:	f1 1c       	adc	r15, r1
     236:	c9 01       	movw	r24, r18
     238:	da 01       	movw	r26, r20
     23a:	9c 01       	movw	r18, r24
     23c:	ad 01       	movw	r20, r26
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	13 c0       	rjmp	.+38     	; 0x268 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     242:	f7 01       	movw	r30, r14
     244:	21 91       	ld	r18, Z+
     246:	31 91       	ld	r19, Z+
     248:	7f 01       	movw	r14, r30
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	6b 2d       	mov	r22, r11
     250:	7c 2d       	mov	r23, r12
     252:	8d 2d       	mov	r24, r13
     254:	90 2f       	mov	r25, r16
     256:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     25a:	c9 01       	movw	r24, r18
     25c:	da 01       	movw	r26, r20
     25e:	9c 01       	movw	r18, r24
     260:	ad 01       	movw	r20, r26
	clock_div_index++;
     262:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     264:	15 30       	cpi	r17, 0x05	; 5
     266:	31 f0       	breq	.+12     	; 0x274 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     268:	2f 3f       	cpi	r18, 0xFF	; 255
     26a:	31 05       	cpc	r19, r1
     26c:	41 05       	cpc	r20, r1
     26e:	51 05       	cpc	r21, r1
     270:	09 f0       	breq	.+2      	; 0x274 <Timebase_Timer_Enable+0x9a>
     272:	3c f7       	brge	.-50     	; 0x242 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     274:	81 2f       	mov	r24, r17
     276:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     278:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     27a:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     27c:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     280:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     282:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     284:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     286:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     288:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     28a:	88 23       	and	r24, r24
     28c:	11 f4       	brne	.+4      	; 0x292 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	0f c0       	rjmp	.+30     	; 0x2b0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	11 f4       	brne	.+4      	; 0x29a <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0b c0       	rjmp	.+22     	; 0x2b0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     29a:	82 30       	cpi	r24, 0x02	; 2
     29c:	11 f4       	brne	.+4      	; 0x2a2 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     29e:	83 e0       	ldi	r24, 0x03	; 3
     2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     2a2:	83 30       	cpi	r24, 0x03	; 3
     2a4:	11 f4       	brne	.+4      	; 0x2aa <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     2a6:	84 e0       	ldi	r24, 0x04	; 4
     2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	11 f4       	brne	.+4      	; 0x2b2 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     2ae:	85 e0       	ldi	r24, 0x05	; 5
     2b0:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     2b2:	e0 91 ee 01 	lds	r30, 0x01EE
     2b6:	f0 91 ef 01 	lds	r31, 0x01EF
     2ba:	8f ef       	ldi	r24, 0xFF	; 255
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	82 1b       	sub	r24, r18
     2c0:	93 0b       	sbc	r25, r19
     2c2:	93 83       	std	Z+3, r25	; 0x03
     2c4:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     2c6:	82 81       	ldd	r24, Z+2	; 0x02
     2c8:	93 81       	ldd	r25, Z+3	; 0x03
     2ca:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 6e 00 	sts	0x006E, r24
  sei();
     2d2:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     2d4:	91 82       	std	Z+1, r9	; 0x01
     2d6:	80 82       	st	Z, r8
}
     2d8:	2a 96       	adiw	r28, 0x0a	; 10
     2da:	0f b6       	in	r0, 0x3f	; 63
     2dc:	f8 94       	cli
     2de:	de bf       	out	0x3e, r29	; 62
     2e0:	0f be       	out	0x3f, r0	; 63
     2e2:	cd bf       	out	0x3d, r28	; 61
     2e4:	cf 91       	pop	r28
     2e6:	df 91       	pop	r29
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	9f 90       	pop	r9
     2f8:	8f 90       	pop	r8
     2fa:	08 95       	ret

000002fc <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     2fc:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2fe:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     300:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     304:	87 e0       	ldi	r24, 0x07	; 7
     306:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     308:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     30a:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     30c:	16 bc       	out	0x26, r1	; 38
}
     30e:	08 95       	ret

00000310 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     310:	f8 94       	cli
}
     312:	08 95       	ret

00000314 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     314:	78 94       	sei
}
     316:	08 95       	ret

00000318 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     318:	e0 91 ee 01 	lds	r30, 0x01EE
     31c:	f0 91 ef 01 	lds	r31, 0x01EF
     320:	26 85       	ldd	r18, Z+14	; 0x0e
     322:	37 85       	ldd	r19, Z+15	; 0x0f
}
     324:	c9 01       	movw	r24, r18
     326:	08 95       	ret

00000328 <Timebase_Timer_Get_SubSecondsUpTime>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
     328:	e0 91 ee 01 	lds	r30, 0x01EE
     32c:	f0 91 ef 01 	lds	r31, 0x01EF
     330:	20 89       	ldd	r18, Z+16	; 0x10
     332:	31 89       	ldd	r19, Z+17	; 0x11
     334:	42 89       	ldd	r20, Z+18	; 0x12
     336:	53 89       	ldd	r21, Z+19	; 0x13
}
     338:	b9 01       	movw	r22, r18
     33a:	ca 01       	movw	r24, r20
     33c:	08 95       	ret

0000033e <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     33e:	e0 91 ee 01 	lds	r30, 0x01EE
     342:	f0 91 ef 01 	lds	r31, 0x01EF
     346:	24 89       	ldd	r18, Z+20	; 0x14
     348:	35 89       	ldd	r19, Z+21	; 0x15
     34a:	46 89       	ldd	r20, Z+22	; 0x16
     34c:	57 89       	ldd	r21, Z+23	; 0x17
}
     34e:	b9 01       	movw	r22, r18
     350:	ca 01       	movw	r24, r20
     352:	08 95       	ret

00000354 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     354:	e0 91 ee 01 	lds	r30, 0x01EE
     358:	f0 91 ef 01 	lds	r31, 0x01EF
     35c:	20 85       	ldd	r18, Z+8	; 0x08
     35e:	31 85       	ldd	r19, Z+9	; 0x09
}
     360:	c9 01       	movw	r24, r18
     362:	08 95       	ret

00000364 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     364:	e0 91 ee 01 	lds	r30, 0x01EE
     368:	f0 91 ef 01 	lds	r31, 0x01EF
     36c:	22 85       	ldd	r18, Z+10	; 0x0a
     36e:	33 85       	ldd	r19, Z+11	; 0x0b
     370:	44 85       	ldd	r20, Z+12	; 0x0c
     372:	55 85       	ldd	r21, Z+13	; 0x0d
}
     374:	b9 01       	movw	r22, r18
     376:	ca 01       	movw	r24, r20
     378:	08 95       	ret

0000037a <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     37a:	e0 91 ee 01 	lds	r30, 0x01EE
     37e:	f0 91 ef 01 	lds	r31, 0x01EF
     382:	91 87       	std	Z+9, r25	; 0x09
     384:	80 87       	std	Z+8, r24	; 0x08
}
     386:	08 95       	ret

00000388 <Timebase_Timer_Set_SubSecondsShadow>:

void Timebase_Timer_Set_SubSecondsShadow(uint16_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsShadow = value;
     388:	e0 91 ee 01 	lds	r30, 0x01EE
     38c:	f0 91 ef 01 	lds	r31, 0x01EF
     390:	97 87       	std	Z+15, r25	; 0x0f
     392:	86 87       	std	Z+14, r24	; 0x0e
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     394:	08 95       	ret

00000396 <Timebase_Timer_Set_SubSecondsUpTime>:

void Timebase_Timer_Set_SubSecondsUpTime(uint32_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsUpTime = value;
     396:	e0 91 ee 01 	lds	r30, 0x01EE
     39a:	f0 91 ef 01 	lds	r31, 0x01EF
     39e:	60 8b       	std	Z+16, r22	; 0x10
     3a0:	71 8b       	std	Z+17, r23	; 0x11
     3a2:	82 8b       	std	Z+18, r24	; 0x12
     3a4:	93 8b       	std	Z+19, r25	; 0x13
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     3a6:	08 95       	ret

000003a8 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     3a8:	e0 91 ee 01 	lds	r30, 0x01EE
     3ac:	f0 91 ef 01 	lds	r31, 0x01EF
     3b0:	62 87       	std	Z+10, r22	; 0x0a
     3b2:	73 87       	std	Z+11, r23	; 0x0b
     3b4:	84 87       	std	Z+12, r24	; 0x0c
     3b6:	95 87       	std	Z+13, r25	; 0x0d
}
     3b8:	08 95       	ret

000003ba <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     3ba:	e0 91 ee 01 	lds	r30, 0x01EE
     3be:	f0 91 ef 01 	lds	r31, 0x01EF
     3c2:	26 85       	ldd	r18, Z+14	; 0x0e
     3c4:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     3c6:	86 85       	ldd	r24, Z+14	; 0x0e
     3c8:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     3ca:	28 17       	cp	r18, r24
     3cc:	39 07       	cpc	r19, r25
     3ce:	c9 f7       	brne	.-14     	; 0x3c2 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     3d0:	c9 01       	movw	r24, r18
     3d2:	08 95       	ret

000003d4 <Timebase_Timer_Get_SubSecondsUpTime_Securely>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime_Securely(void){
  uint32_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsUpTime;
     3d4:	e0 91 ee 01 	lds	r30, 0x01EE
     3d8:	f0 91 ef 01 	lds	r31, 0x01EF
     3dc:	20 89       	ldd	r18, Z+16	; 0x10
     3de:	31 89       	ldd	r19, Z+17	; 0x11
     3e0:	42 89       	ldd	r20, Z+18	; 0x12
     3e2:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SubSecondsUpTime;
     3e4:	80 89       	ldd	r24, Z+16	; 0x10
     3e6:	91 89       	ldd	r25, Z+17	; 0x11
     3e8:	a2 89       	ldd	r26, Z+18	; 0x12
     3ea:	b3 89       	ldd	r27, Z+19	; 0x13
	  if(tmp0 == tmp1){
     3ec:	28 17       	cp	r18, r24
     3ee:	39 07       	cpc	r19, r25
     3f0:	4a 07       	cpc	r20, r26
     3f2:	5b 07       	cpc	r21, r27
     3f4:	99 f7       	brne	.-26     	; 0x3dc <Timebase_Timer_Get_SubSecondsUpTime_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     3f6:	b9 01       	movw	r22, r18
     3f8:	ca 01       	movw	r24, r20
     3fa:	08 95       	ret

000003fc <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     3fc:	e0 91 ee 01 	lds	r30, 0x01EE
     400:	f0 91 ef 01 	lds	r31, 0x01EF
     404:	24 89       	ldd	r18, Z+20	; 0x14
     406:	35 89       	ldd	r19, Z+21	; 0x15
     408:	46 89       	ldd	r20, Z+22	; 0x16
     40a:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     40c:	84 89       	ldd	r24, Z+20	; 0x14
     40e:	95 89       	ldd	r25, Z+21	; 0x15
     410:	a6 89       	ldd	r26, Z+22	; 0x16
     412:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     414:	28 17       	cp	r18, r24
     416:	39 07       	cpc	r19, r25
     418:	4a 07       	cpc	r20, r26
     41a:	5b 07       	cpc	r21, r27
     41c:	99 f7       	brne	.-26     	; 0x404 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     41e:	b9 01       	movw	r22, r18
     420:	ca 01       	movw	r24, r20
     422:	08 95       	ret

00000424 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     424:	e0 91 ee 01 	lds	r30, 0x01EE
     428:	f0 91 ef 01 	lds	r31, 0x01EF
     42c:	80 8d       	ldd	r24, Z+24	; 0x18
     42e:	88 23       	and	r24, r24
     430:	e1 f4       	brne	.+56     	; 0x46a <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     432:	26 85       	ldd	r18, Z+14	; 0x0e
     434:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     436:	86 85       	ldd	r24, Z+14	; 0x0e
     438:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     43a:	28 17       	cp	r18, r24
     43c:	39 07       	cpc	r19, r25
     43e:	c9 f7       	brne	.-14     	; 0x432 <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     440:	31 87       	std	Z+9, r19	; 0x09
     442:	20 87       	std	Z+8, r18	; 0x08
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     444:	24 89       	ldd	r18, Z+20	; 0x14
     446:	35 89       	ldd	r19, Z+21	; 0x15
     448:	46 89       	ldd	r20, Z+22	; 0x16
     44a:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     44c:	84 89       	ldd	r24, Z+20	; 0x14
     44e:	95 89       	ldd	r25, Z+21	; 0x15
     450:	a6 89       	ldd	r26, Z+22	; 0x16
     452:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     454:	28 17       	cp	r18, r24
     456:	39 07       	cpc	r19, r25
     458:	4a 07       	cpc	r20, r26
     45a:	5b 07       	cpc	r21, r27
     45c:	99 f7       	brne	.-26     	; 0x444 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     45e:	22 87       	std	Z+10, r18	; 0x0a
     460:	33 87       	std	Z+11, r19	; 0x0b
     462:	44 87       	std	Z+12, r20	; 0x0c
     464:	55 87       	std	Z+13, r21	; 0x0d
    #endif
	
	  Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	80 8f       	std	Z+24, r24	; 0x18
     46a:	08 95       	ret

0000046c <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     46c:	8f 92       	push	r8
     46e:	9f 92       	push	r9
     470:	af 92       	push	r10
     472:	bf 92       	push	r11
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     486:	c0 91 ee 01 	lds	r28, 0x01EE
     48a:	d0 91 ef 01 	lds	r29, 0x01EF
     48e:	ce 84       	ldd	r12, Y+14	; 0x0e
     490:	df 84       	ldd	r13, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     492:	8e 85       	ldd	r24, Y+14	; 0x0e
     494:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     496:	c8 16       	cp	r12, r24
     498:	d9 06       	cpc	r13, r25
     49a:	c9 f7       	brne	.-14     	; 0x48e <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     49c:	ec 88       	ldd	r14, Y+20	; 0x14
     49e:	fd 88       	ldd	r15, Y+21	; 0x15
     4a0:	0e 89       	ldd	r16, Y+22	; 0x16
     4a2:	1f 89       	ldd	r17, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     4a4:	8c 89       	ldd	r24, Y+20	; 0x14
     4a6:	9d 89       	ldd	r25, Y+21	; 0x15
     4a8:	ae 89       	ldd	r26, Y+22	; 0x16
     4aa:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     4ac:	e8 16       	cp	r14, r24
     4ae:	f9 06       	cpc	r15, r25
     4b0:	0a 07       	cpc	r16, r26
     4b2:	1b 07       	cpc	r17, r27
     4b4:	99 f7       	brne	.-26     	; 0x49c <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     4b6:	28 81       	ld	r18, Y
     4b8:	39 81       	ldd	r19, Y+1	; 0x01
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	c8 01       	movw	r24, r16
     4c0:	b7 01       	movw	r22, r14
     4c2:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
  smpl_val += smpl_ss;
     4c6:	76 01       	movw	r14, r12
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	95 01       	movw	r18, r10
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	e2 0e       	add	r14, r18
     4d4:	f3 1e       	adc	r15, r19
     4d6:	04 1f       	adc	r16, r20
     4d8:	15 1f       	adc	r17, r21
  smpl_val += value;
     4da:	e6 0e       	add	r14, r22
     4dc:	f7 1e       	adc	r15, r23
     4de:	08 1f       	adc	r16, r24
     4e0:	19 1f       	adc	r17, r25
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	25 c0       	rjmp	.+74     	; 0x536 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4ec:	8e 84       	ldd	r8, Y+14	; 0x0e
     4ee:	9f 84       	ldd	r9, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     4f0:	8e 85       	ldd	r24, Y+14	; 0x0e
     4f2:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     4f4:	88 16       	cp	r8, r24
     4f6:	99 06       	cpc	r9, r25
     4f8:	c9 f7       	brne	.-14     	; 0x4ec <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4fa:	ac 88       	ldd	r10, Y+20	; 0x14
     4fc:	bd 88       	ldd	r11, Y+21	; 0x15
     4fe:	ce 88       	ldd	r12, Y+22	; 0x16
     500:	df 88       	ldd	r13, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     502:	8c 89       	ldd	r24, Y+20	; 0x14
     504:	9d 89       	ldd	r25, Y+21	; 0x15
     506:	ae 89       	ldd	r26, Y+22	; 0x16
     508:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     50a:	a8 16       	cp	r10, r24
     50c:	b9 06       	cpc	r11, r25
     50e:	ca 06       	cpc	r12, r26
     510:	db 06       	cpc	r13, r27
     512:	99 f7       	brne	.-26     	; 0x4fa <Timebase_Timer_Delay_SubSeconds+0x8e>
	  curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
     514:	28 81       	ld	r18, Y
     516:	39 81       	ldd	r19, Y+1	; 0x01
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	c6 01       	movw	r24, r12
     51e:	b5 01       	movw	r22, r10
     520:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
	  curr_val += curr_ss;
     528:	c4 01       	movw	r24, r8
     52a:	a0 e0       	ldi	r26, 0x00	; 0
     52c:	b0 e0       	ldi	r27, 0x00	; 0
     52e:	28 0f       	add	r18, r24
     530:	39 1f       	adc	r19, r25
     532:	4a 1f       	adc	r20, r26
     534:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     536:	2e 15       	cp	r18, r14
     538:	3f 05       	cpc	r19, r15
     53a:	40 07       	cpc	r20, r16
     53c:	51 07       	cpc	r21, r17
     53e:	b4 f2       	brlt	.-84     	; 0x4ec <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
	  curr_val += curr_ss;
  }
  
}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	ff 90       	pop	r15
     54a:	ef 90       	pop	r14
     54c:	df 90       	pop	r13
     54e:	cf 90       	pop	r12
     550:	bf 90       	pop	r11
     552:	af 90       	pop	r10
     554:	9f 90       	pop	r9
     556:	8f 90       	pop	r8
     558:	08 95       	ret

0000055a <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     560:	e0 91 ee 01 	lds	r30, 0x01EE
     564:	f0 91 ef 01 	lds	r31, 0x01EF
     568:	66 85       	ldd	r22, Z+14	; 0x0e
     56a:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     56c:	86 85       	ldd	r24, Z+14	; 0x0e
     56e:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     570:	68 17       	cp	r22, r24
     572:	79 07       	cpc	r23, r25
     574:	c9 f7       	brne	.-14     	; 0x568 <Timebase_Timer_Await_SubSeconds+0xe>
     576:	07 c0       	rjmp	.+14     	; 0x586 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     578:	66 85       	ldd	r22, Z+14	; 0x0e
     57a:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     57c:	86 85       	ldd	r24, Z+14	; 0x0e
     57e:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     580:	68 17       	cp	r22, r24
     582:	79 07       	cpc	r23, r25
     584:	c9 f7       	brne	.-14     	; 0x578 <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     586:	24 81       	ldd	r18, Z+4	; 0x04
     588:	35 81       	ldd	r19, Z+5	; 0x05
     58a:	46 81       	ldd	r20, Z+6	; 0x06
     58c:	57 81       	ldd	r21, Z+7	; 0x07
     58e:	cb 01       	movw	r24, r22
     590:	a0 e0       	ldi	r26, 0x00	; 0
     592:	b0 e0       	ldi	r27, 0x00	; 0
     594:	82 17       	cp	r24, r18
     596:	93 07       	cpc	r25, r19
     598:	a4 07       	cpc	r26, r20
     59a:	b5 07       	cpc	r27, r21
     59c:	69 f7       	brne	.-38     	; 0x578 <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     59e:	26 85       	ldd	r18, Z+14	; 0x0e
     5a0:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     5a2:	86 85       	ldd	r24, Z+14	; 0x0e
     5a4:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     5a6:	28 17       	cp	r18, r24
     5a8:	39 07       	cpc	r19, r25
     5aa:	c9 f7       	brne	.-14     	; 0x59e <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     5ac:	c9 01       	movw	r24, r18
     5ae:	a0 e0       	ldi	r26, 0x00	; 0
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	84 83       	std	Z+4, r24	; 0x04
     5b4:	95 83       	std	Z+5, r25	; 0x05
     5b6:	a6 83       	std	Z+6, r26	; 0x06
     5b8:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     5ba:	24 81       	ldd	r18, Z+4	; 0x04
     5bc:	35 81       	ldd	r19, Z+5	; 0x05
     5be:	46 81       	ldd	r20, Z+6	; 0x06
     5c0:	57 81       	ldd	r21, Z+7	; 0x07
     5c2:	ce 01       	movw	r24, r28
     5c4:	a0 e0       	ldi	r26, 0x00	; 0
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	82 0f       	add	r24, r18
     5ca:	93 1f       	adc	r25, r19
     5cc:	a4 1f       	adc	r26, r20
     5ce:	b5 1f       	adc	r27, r21
     5d0:	84 83       	std	Z+4, r24	; 0x04
     5d2:	95 83       	std	Z+5, r25	; 0x05
     5d4:	a6 83       	std	Z+6, r26	; 0x06
     5d6:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     5d8:	24 81       	ldd	r18, Z+4	; 0x04
     5da:	35 81       	ldd	r19, Z+5	; 0x05
     5dc:	46 81       	ldd	r20, Z+6	; 0x06
     5de:	57 81       	ldd	r21, Z+7	; 0x07
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	a0 e0       	ldi	r26, 0x00	; 0
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	28 17       	cp	r18, r24
     5ea:	39 07       	cpc	r19, r25
     5ec:	4a 07       	cpc	r20, r26
     5ee:	5b 07       	cpc	r21, r27
     5f0:	84 f0       	brlt	.+32     	; 0x612 <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     5f2:	24 81       	ldd	r18, Z+4	; 0x04
     5f4:	35 81       	ldd	r19, Z+5	; 0x05
     5f6:	46 81       	ldd	r20, Z+6	; 0x06
     5f8:	57 81       	ldd	r21, Z+7	; 0x07
     5fa:	80 81       	ld	r24, Z
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	a0 e0       	ldi	r26, 0x00	; 0
     600:	b0 e0       	ldi	r27, 0x00	; 0
     602:	28 1b       	sub	r18, r24
     604:	39 0b       	sbc	r19, r25
     606:	4a 0b       	sbc	r20, r26
     608:	5b 0b       	sbc	r21, r27
     60a:	24 83       	std	Z+4, r18	; 0x04
     60c:	35 83       	std	Z+5, r19	; 0x05
     60e:	46 83       	std	Z+6, r20	; 0x06
     610:	57 83       	std	Z+7, r21	; 0x07
  }
}
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	08 95       	ret

00000618 <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     618:	ef 92       	push	r14
     61a:	ff 92       	push	r15
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     622:	e0 91 ee 01 	lds	r30, 0x01EE
     626:	f0 91 ef 01 	lds	r31, 0x01EF
     62a:	24 89       	ldd	r18, Z+20	; 0x14
     62c:	35 89       	ldd	r19, Z+21	; 0x15
     62e:	46 89       	ldd	r20, Z+22	; 0x16
     630:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     632:	84 89       	ldd	r24, Z+20	; 0x14
     634:	95 89       	ldd	r25, Z+21	; 0x15
     636:	a6 89       	ldd	r26, Z+22	; 0x16
     638:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     63a:	28 17       	cp	r18, r24
     63c:	39 07       	cpc	r19, r25
     63e:	4a 07       	cpc	r20, r26
     640:	5b 07       	cpc	r21, r27
     642:	99 f7       	brne	.-26     	; 0x62a <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     644:	7b 01       	movw	r14, r22
     646:	00 e0       	ldi	r16, 0x00	; 0
     648:	10 e0       	ldi	r17, 0x00	; 0
     64a:	e2 0e       	add	r14, r18
     64c:	f3 1e       	adc	r15, r19
     64e:	04 1f       	adc	r16, r20
     650:	15 1f       	adc	r17, r21
     652:	20 e0       	ldi	r18, 0x00	; 0
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	0d c0       	rjmp	.+26     	; 0x676 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     65c:	24 89       	ldd	r18, Z+20	; 0x14
     65e:	35 89       	ldd	r19, Z+21	; 0x15
     660:	46 89       	ldd	r20, Z+22	; 0x16
     662:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     664:	84 89       	ldd	r24, Z+20	; 0x14
     666:	95 89       	ldd	r25, Z+21	; 0x15
     668:	a6 89       	ldd	r26, Z+22	; 0x16
     66a:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     66c:	28 17       	cp	r18, r24
     66e:	39 07       	cpc	r19, r25
     670:	4a 07       	cpc	r20, r26
     672:	5b 07       	cpc	r21, r27
     674:	99 f7       	brne	.-26     	; 0x65c <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     676:	2e 15       	cp	r18, r14
     678:	3f 05       	cpc	r19, r15
     67a:	40 07       	cpc	r20, r16
     67c:	51 07       	cpc	r21, r17
     67e:	74 f3       	brlt	.-36     	; 0x65c <Timebase_Timer_Delay_Seconds+0x44>
	  Timebase_Atomic_Operation_End();
	  #else
	  curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     68a:	e0 91 ee 01 	lds	r30, 0x01EE
     68e:	f0 91 ef 01 	lds	r31, 0x01EF
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	25 e1       	ldi	r18, 0x15	; 21
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	ac 01       	movw	r20, r24
     69a:	42 9f       	mul	r20, r18
     69c:	c0 01       	movw	r24, r0
     69e:	43 9f       	mul	r20, r19
     6a0:	90 0d       	add	r25, r0
     6a2:	52 9f       	mul	r21, r18
     6a4:	90 0d       	add	r25, r0
     6a6:	11 24       	eor	r1, r1
     6a8:	e8 0f       	add	r30, r24
     6aa:	f9 1f       	adc	r31, r25
     6ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     6ae:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     6b0:	8f 70       	andi	r24, 0x0F	; 15
     6b2:	08 95       	ret

000006b4 <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     6b4:	e0 91 ee 01 	lds	r30, 0x01EE
     6b8:	f0 91 ef 01 	lds	r31, 0x01EF
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	25 e1       	ldi	r18, 0x15	; 21
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	ac 01       	movw	r20, r24
     6c4:	42 9f       	mul	r20, r18
     6c6:	c0 01       	movw	r24, r0
     6c8:	43 9f       	mul	r20, r19
     6ca:	90 0d       	add	r25, r0
     6cc:	52 9f       	mul	r21, r18
     6ce:	90 0d       	add	r25, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	e8 0f       	add	r30, r24
     6d4:	f9 1f       	adc	r31, r25
     6d6:	6f 70       	andi	r22, 0x0F	; 15
     6d8:	66 0f       	add	r22, r22
     6da:	82 8d       	ldd	r24, Z+26	; 0x1a
     6dc:	81 7e       	andi	r24, 0xE1	; 225
     6de:	86 2b       	or	r24, r22
     6e0:	82 8f       	std	Z+26, r24	; 0x1a
}
     6e2:	08 95       	ret

000006e4 <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     6e4:	e0 91 ee 01 	lds	r30, 0x01EE
     6e8:	f0 91 ef 01 	lds	r31, 0x01EF
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	25 e1       	ldi	r18, 0x15	; 21
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	ac 01       	movw	r20, r24
     6f4:	42 9f       	mul	r20, r18
     6f6:	c0 01       	movw	r24, r0
     6f8:	43 9f       	mul	r20, r19
     6fa:	90 0d       	add	r25, r0
     6fc:	52 9f       	mul	r21, r18
     6fe:	90 0d       	add	r25, r0
     700:	11 24       	eor	r1, r1
     702:	e8 0f       	add	r30, r24
     704:	f9 1f       	adc	r31, r25
     706:	df 01       	movw	r26, r30
     708:	93 96       	adiw	r26, 0x23	; 35
     70a:	63 a1       	ldd	r22, Z+35	; 0x23
     70c:	11 96       	adiw	r26, 0x01	; 1
     70e:	7c 91       	ld	r23, X
     710:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     712:	12 96       	adiw	r26, 0x02	; 2
     714:	8c 91       	ld	r24, X
     716:	12 97       	sbiw	r26, 0x02	; 2
     718:	13 96       	adiw	r26, 0x03	; 3
     71a:	9c 91       	ld	r25, X
     71c:	08 95       	ret

0000071e <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     71e:	e0 91 ee 01 	lds	r30, 0x01EE
     722:	f0 91 ef 01 	lds	r31, 0x01EF
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	25 e1       	ldi	r18, 0x15	; 21
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	dc 01       	movw	r26, r24
     72e:	a2 9f       	mul	r26, r18
     730:	c0 01       	movw	r24, r0
     732:	a3 9f       	mul	r26, r19
     734:	90 0d       	add	r25, r0
     736:	b2 9f       	mul	r27, r18
     738:	90 0d       	add	r25, r0
     73a:	11 24       	eor	r1, r1
     73c:	e8 0f       	add	r30, r24
     73e:	f9 1f       	adc	r31, r25
     740:	43 a3       	std	Z+35, r20	; 0x23
     742:	54 a3       	std	Z+36, r21	; 0x24
     744:	65 a3       	std	Z+37, r22	; 0x25
     746:	76 a3       	std	Z+38, r23	; 0x26
}
     748:	08 95       	ret

0000074a <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     74a:	e0 91 ee 01 	lds	r30, 0x01EE
     74e:	f0 91 ef 01 	lds	r31, 0x01EF
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	25 e1       	ldi	r18, 0x15	; 21
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	ac 01       	movw	r20, r24
     75a:	42 9f       	mul	r20, r18
     75c:	c0 01       	movw	r24, r0
     75e:	43 9f       	mul	r20, r19
     760:	90 0d       	add	r25, r0
     762:	52 9f       	mul	r21, r18
     764:	90 0d       	add	r25, r0
     766:	11 24       	eor	r1, r1
     768:	e8 0f       	add	r30, r24
     76a:	f9 1f       	adc	r31, r25
     76c:	df 01       	movw	r26, r30
     76e:	5b 96       	adiw	r26, 0x1b	; 27
     770:	63 8d       	ldd	r22, Z+27	; 0x1b
     772:	11 96       	adiw	r26, 0x01	; 1
     774:	7c 91       	ld	r23, X
     776:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     778:	12 96       	adiw	r26, 0x02	; 2
     77a:	8c 91       	ld	r24, X
     77c:	12 97       	sbiw	r26, 0x02	; 2
     77e:	13 96       	adiw	r26, 0x03	; 3
     780:	9c 91       	ld	r25, X
     782:	08 95       	ret

00000784 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     784:	e0 91 ee 01 	lds	r30, 0x01EE
     788:	f0 91 ef 01 	lds	r31, 0x01EF
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	25 e1       	ldi	r18, 0x15	; 21
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	ac 01       	movw	r20, r24
     794:	42 9f       	mul	r20, r18
     796:	c0 01       	movw	r24, r0
     798:	43 9f       	mul	r20, r19
     79a:	90 0d       	add	r25, r0
     79c:	52 9f       	mul	r21, r18
     79e:	90 0d       	add	r25, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	e8 0f       	add	r30, r24
     7a4:	f9 1f       	adc	r31, r25
     7a6:	df 01       	movw	r26, r30
     7a8:	5f 96       	adiw	r26, 0x1f	; 31
     7aa:	67 8d       	ldd	r22, Z+31	; 0x1f
     7ac:	11 96       	adiw	r26, 0x01	; 1
     7ae:	7c 91       	ld	r23, X
     7b0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     7b2:	12 96       	adiw	r26, 0x02	; 2
     7b4:	8c 91       	ld	r24, X
     7b6:	12 97       	sbiw	r26, 0x02	; 2
     7b8:	13 96       	adiw	r26, 0x03	; 3
     7ba:	9c 91       	ld	r25, X
     7bc:	08 95       	ret

000007be <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     7be:	e0 91 ee 01 	lds	r30, 0x01EE
     7c2:	f0 91 ef 01 	lds	r31, 0x01EF
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	25 e1       	ldi	r18, 0x15	; 21
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	dc 01       	movw	r26, r24
     7ce:	a2 9f       	mul	r26, r18
     7d0:	c0 01       	movw	r24, r0
     7d2:	a3 9f       	mul	r26, r19
     7d4:	90 0d       	add	r25, r0
     7d6:	b2 9f       	mul	r27, r18
     7d8:	90 0d       	add	r25, r0
     7da:	11 24       	eor	r1, r1
     7dc:	e8 0f       	add	r30, r24
     7de:	f9 1f       	adc	r31, r25
     7e0:	43 8f       	std	Z+27, r20	; 0x1b
     7e2:	54 8f       	std	Z+28, r21	; 0x1c
     7e4:	65 8f       	std	Z+29, r22	; 0x1d
     7e6:	76 8f       	std	Z+30, r23	; 0x1e
}
     7e8:	08 95       	ret

000007ea <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     7ea:	e0 91 ee 01 	lds	r30, 0x01EE
     7ee:	f0 91 ef 01 	lds	r31, 0x01EF
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	25 e1       	ldi	r18, 0x15	; 21
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	dc 01       	movw	r26, r24
     7fa:	a2 9f       	mul	r26, r18
     7fc:	c0 01       	movw	r24, r0
     7fe:	a3 9f       	mul	r26, r19
     800:	90 0d       	add	r25, r0
     802:	b2 9f       	mul	r27, r18
     804:	90 0d       	add	r25, r0
     806:	11 24       	eor	r1, r1
     808:	e8 0f       	add	r30, r24
     80a:	f9 1f       	adc	r31, r25
     80c:	47 8f       	std	Z+31, r20	; 0x1f
     80e:	50 a3       	std	Z+32, r21	; 0x20
     810:	61 a3       	std	Z+33, r22	; 0x21
     812:	72 a3       	std	Z+34, r23	; 0x22
}
     814:	08 95       	ret

00000816 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     816:	e0 91 ee 01 	lds	r30, 0x01EE
     81a:	f0 91 ef 01 	lds	r31, 0x01EF
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	25 e1       	ldi	r18, 0x15	; 21
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	ac 01       	movw	r20, r24
     826:	42 9f       	mul	r20, r18
     828:	c0 01       	movw	r24, r0
     82a:	43 9f       	mul	r20, r19
     82c:	90 0d       	add	r25, r0
     82e:	52 9f       	mul	r21, r18
     830:	90 0d       	add	r25, r0
     832:	11 24       	eor	r1, r1
     834:	e8 0f       	add	r30, r24
     836:	f9 1f       	adc	r31, r25
     838:	df 01       	movw	r26, r30
     83a:	97 96       	adiw	r26, 0x27	; 39
     83c:	67 a1       	ldd	r22, Z+39	; 0x27
     83e:	11 96       	adiw	r26, 0x01	; 1
     840:	7c 91       	ld	r23, X
     842:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     844:	12 96       	adiw	r26, 0x02	; 2
     846:	8c 91       	ld	r24, X
     848:	12 97       	sbiw	r26, 0x02	; 2
     84a:	13 96       	adiw	r26, 0x03	; 3
     84c:	9c 91       	ld	r25, X
     84e:	08 95       	ret

00000850 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     850:	e0 91 ee 01 	lds	r30, 0x01EE
     854:	f0 91 ef 01 	lds	r31, 0x01EF
     858:	28 2f       	mov	r18, r24
     85a:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     85c:	77 ff       	sbrs	r23, 7
     85e:	11 c0       	rjmp	.+34     	; 0x882 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     860:	85 e1       	ldi	r24, 0x15	; 21
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	ac 01       	movw	r20, r24
     866:	24 9f       	mul	r18, r20
     868:	c0 01       	movw	r24, r0
     86a:	25 9f       	mul	r18, r21
     86c:	90 0d       	add	r25, r0
     86e:	34 9f       	mul	r19, r20
     870:	90 0d       	add	r25, r0
     872:	11 24       	eor	r1, r1
     874:	e8 0f       	add	r30, r24
     876:	f9 1f       	adc	r31, r25
     878:	17 a2       	std	Z+39, r1	; 0x27
     87a:	10 a6       	std	Z+40, r1	; 0x28
     87c:	11 a6       	std	Z+41, r1	; 0x29
     87e:	12 a6       	std	Z+42, r1	; 0x2a
     880:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     882:	85 e1       	ldi	r24, 0x15	; 21
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	dc 01       	movw	r26, r24
     888:	2a 9f       	mul	r18, r26
     88a:	c0 01       	movw	r24, r0
     88c:	2b 9f       	mul	r18, r27
     88e:	90 0d       	add	r25, r0
     890:	3a 9f       	mul	r19, r26
     892:	90 0d       	add	r25, r0
     894:	11 24       	eor	r1, r1
     896:	e8 0f       	add	r30, r24
     898:	f9 1f       	adc	r31, r25
     89a:	47 a3       	std	Z+39, r20	; 0x27
     89c:	50 a7       	std	Z+40, r21	; 0x28
     89e:	61 a7       	std	Z+41, r22	; 0x29
     8a0:	72 a7       	std	Z+42, r23	; 0x2a
     8a2:	08 95       	ret

000008a4 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     8a4:	e0 91 ee 01 	lds	r30, 0x01EE
     8a8:	f0 91 ef 01 	lds	r31, 0x01EF
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	25 e1       	ldi	r18, 0x15	; 21
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	ac 01       	movw	r20, r24
     8b4:	42 9f       	mul	r20, r18
     8b6:	c0 01       	movw	r24, r0
     8b8:	43 9f       	mul	r20, r19
     8ba:	90 0d       	add	r25, r0
     8bc:	52 9f       	mul	r21, r18
     8be:	90 0d       	add	r25, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	82 8d       	ldd	r24, Z+26	; 0x1a
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     8c8:	81 70       	andi	r24, 0x01	; 1
     8ca:	08 95       	ret

000008cc <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     8cc:	e0 91 ee 01 	lds	r30, 0x01EE
     8d0:	f0 91 ef 01 	lds	r31, 0x01EF
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	25 e1       	ldi	r18, 0x15	; 21
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	ac 01       	movw	r20, r24
     8dc:	42 9f       	mul	r20, r18
     8de:	c0 01       	movw	r24, r0
     8e0:	43 9f       	mul	r20, r19
     8e2:	90 0d       	add	r25, r0
     8e4:	52 9f       	mul	r21, r18
     8e6:	90 0d       	add	r25, r0
     8e8:	11 24       	eor	r1, r1
     8ea:	e8 0f       	add	r30, r24
     8ec:	f9 1f       	adc	r31, r25
     8ee:	82 8d       	ldd	r24, Z+26	; 0x1a
     8f0:	81 60       	ori	r24, 0x01	; 1
     8f2:	82 8f       	std	Z+26, r24	; 0x1a
}
     8f4:	08 95       	ret

000008f6 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     8f6:	e0 91 ee 01 	lds	r30, 0x01EE
     8fa:	f0 91 ef 01 	lds	r31, 0x01EF
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	25 e1       	ldi	r18, 0x15	; 21
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	ac 01       	movw	r20, r24
     906:	42 9f       	mul	r20, r18
     908:	c0 01       	movw	r24, r0
     90a:	43 9f       	mul	r20, r19
     90c:	90 0d       	add	r25, r0
     90e:	52 9f       	mul	r21, r18
     910:	90 0d       	add	r25, r0
     912:	11 24       	eor	r1, r1
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	82 8d       	ldd	r24, Z+26	; 0x1a
     91a:	8e 7f       	andi	r24, 0xFE	; 254
     91c:	82 8f       	std	Z+26, r24	; 0x1a
}
     91e:	08 95       	ret

00000920 <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     920:	e0 91 ee 01 	lds	r30, 0x01EE
     924:	f0 91 ef 01 	lds	r31, 0x01EF
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	25 e1       	ldi	r18, 0x15	; 21
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	ac 01       	movw	r20, r24
     930:	42 9f       	mul	r20, r18
     932:	c0 01       	movw	r24, r0
     934:	43 9f       	mul	r20, r19
     936:	90 0d       	add	r25, r0
     938:	52 9f       	mul	r21, r18
     93a:	90 0d       	add	r25, r0
     93c:	11 24       	eor	r1, r1
     93e:	e8 0f       	add	r30, r24
     940:	f9 1f       	adc	r31, r25
     942:	df 01       	movw	r26, r30
     944:	9b 96       	adiw	r26, 0x2b	; 43
     946:	63 a5       	ldd	r22, Z+43	; 0x2b
     948:	11 96       	adiw	r26, 0x01	; 1
     94a:	7c 91       	ld	r23, X
     94c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     94e:	12 96       	adiw	r26, 0x02	; 2
     950:	8c 91       	ld	r24, X
     952:	12 97       	sbiw	r26, 0x02	; 2
     954:	13 96       	adiw	r26, 0x03	; 3
     956:	9c 91       	ld	r25, X
     958:	08 95       	ret

0000095a <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     95a:	e0 91 ee 01 	lds	r30, 0x01EE
     95e:	f0 91 ef 01 	lds	r31, 0x01EF
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	25 e1       	ldi	r18, 0x15	; 21
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	dc 01       	movw	r26, r24
     96a:	a2 9f       	mul	r26, r18
     96c:	c0 01       	movw	r24, r0
     96e:	a3 9f       	mul	r26, r19
     970:	90 0d       	add	r25, r0
     972:	b2 9f       	mul	r27, r18
     974:	90 0d       	add	r25, r0
     976:	11 24       	eor	r1, r1
     978:	e8 0f       	add	r30, r24
     97a:	f9 1f       	adc	r31, r25
     97c:	43 a7       	std	Z+43, r20	; 0x2b
     97e:	54 a7       	std	Z+44, r21	; 0x2c
     980:	65 a7       	std	Z+45, r22	; 0x2d
     982:	76 a7       	std	Z+46, r23	; 0x2e
}
     984:	08 95       	ret

00000986 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     986:	e0 91 ee 01 	lds	r30, 0x01EE
     98a:	f0 91 ef 01 	lds	r31, 0x01EF
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	25 e1       	ldi	r18, 0x15	; 21
     992:	30 e0       	ldi	r19, 0x00	; 0
     994:	ac 01       	movw	r20, r24
     996:	42 9f       	mul	r20, r18
     998:	c0 01       	movw	r24, r0
     99a:	43 9f       	mul	r20, r19
     99c:	90 0d       	add	r25, r0
     99e:	52 9f       	mul	r21, r18
     9a0:	90 0d       	add	r25, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	e8 0f       	add	r30, r24
     9a6:	f9 1f       	adc	r31, r25
     9a8:	17 8e       	std	Z+31, r1	; 0x1f
     9aa:	10 a2       	std	Z+32, r1	; 0x20
     9ac:	11 a2       	std	Z+33, r1	; 0x21
     9ae:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     9b0:	13 8e       	std	Z+27, r1	; 0x1b
     9b2:	14 8e       	std	Z+28, r1	; 0x1c
     9b4:	15 8e       	std	Z+29, r1	; 0x1d
     9b6:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     9b8:	13 a2       	std	Z+35, r1	; 0x23
     9ba:	14 a2       	std	Z+36, r1	; 0x24
     9bc:	15 a2       	std	Z+37, r1	; 0x25
     9be:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     9c0:	82 8d       	ldd	r24, Z+26	; 0x1a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     9c2:	80 7e       	andi	r24, 0xE0	; 224
     9c4:	82 8f       	std	Z+26, r24	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     9c6:	13 a6       	std	Z+43, r1	; 0x2b
     9c8:	14 a6       	std	Z+44, r1	; 0x2c
     9ca:	15 a6       	std	Z+45, r1	; 0x2d
     9cc:	16 a6       	std	Z+46, r1	; 0x2e
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     9ce:	08 95       	ret

000009d0 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     9d0:	e0 91 ee 01 	lds	r30, 0x01EE
     9d4:	f0 91 ef 01 	lds	r31, 0x01EF
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	25 e1       	ldi	r18, 0x15	; 21
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	ac 01       	movw	r20, r24
     9e0:	42 9f       	mul	r20, r18
     9e2:	c0 01       	movw	r24, r0
     9e4:	43 9f       	mul	r20, r19
     9e6:	90 0d       	add	r25, r0
     9e8:	52 9f       	mul	r21, r18
     9ea:	90 0d       	add	r25, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	e8 0f       	add	r30, r24
     9f0:	f9 1f       	adc	r31, r25
     9f2:	17 8e       	std	Z+31, r1	; 0x1f
     9f4:	10 a2       	std	Z+32, r1	; 0x20
     9f6:	11 a2       	std	Z+33, r1	; 0x21
     9f8:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     9fa:	13 8e       	std	Z+27, r1	; 0x1b
     9fc:	14 8e       	std	Z+28, r1	; 0x1c
     9fe:	15 8e       	std	Z+29, r1	; 0x1d
     a00:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     a02:	13 a2       	std	Z+35, r1	; 0x23
     a04:	14 a2       	std	Z+36, r1	; 0x24
     a06:	15 a2       	std	Z+37, r1	; 0x25
     a08:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     a0a:	82 8d       	ldd	r24, Z+26	; 0x1a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a0c:	80 7e       	andi	r24, 0xE0	; 224
     a0e:	82 8f       	std	Z+26, r24	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     a10:	13 a6       	std	Z+43, r1	; 0x2b
     a12:	14 a6       	std	Z+44, r1	; 0x2c
     a14:	15 a6       	std	Z+45, r1	; 0x2d
     a16:	16 a6       	std	Z+46, r1	; 0x2e
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     a18:	08 95       	ret

00000a1a <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     a1a:	e0 91 ee 01 	lds	r30, 0x01EE
     a1e:	f0 91 ef 01 	lds	r31, 0x01EF
     a22:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     a24:	25 e1       	ldi	r18, 0x15	; 21
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	ac 01       	movw	r20, r24
     a2a:	42 9f       	mul	r20, r18
     a2c:	c0 01       	movw	r24, r0
     a2e:	43 9f       	mul	r20, r19
     a30:	90 0d       	add	r25, r0
     a32:	52 9f       	mul	r21, r18
     a34:	90 0d       	add	r25, r0
     a36:	11 24       	eor	r1, r1
     a38:	e8 0f       	add	r30, r24
     a3a:	f9 1f       	adc	r31, r25
     a3c:	92 8d       	ldd	r25, Z+26	; 0x1a
     a3e:	89 2f       	mov	r24, r25
     a40:	86 95       	lsr	r24
     a42:	8f 70       	andi	r24, 0x0F	; 15
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	19 f0       	breq	.+6      	; 0xa4e <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     a48:	91 7e       	andi	r25, 0xE1	; 225
     a4a:	92 60       	ori	r25, 0x02	; 2
     a4c:	92 8f       	std	Z+26, r25	; 0x1a
     a4e:	08 95       	ret

00000a50 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     a50:	e0 91 ee 01 	lds	r30, 0x01EE
     a54:	f0 91 ef 01 	lds	r31, 0x01EF
     a58:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     a5a:	25 e1       	ldi	r18, 0x15	; 21
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	ac 01       	movw	r20, r24
     a60:	42 9f       	mul	r20, r18
     a62:	c0 01       	movw	r24, r0
     a64:	43 9f       	mul	r20, r19
     a66:	90 0d       	add	r25, r0
     a68:	52 9f       	mul	r21, r18
     a6a:	90 0d       	add	r25, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	e8 0f       	add	r30, r24
     a70:	f9 1f       	adc	r31, r25
     a72:	92 8d       	ldd	r25, Z+26	; 0x1a
     a74:	89 2f       	mov	r24, r25
     a76:	86 95       	lsr	r24
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	19 f0       	breq	.+6      	; 0xa84 <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     a7e:	91 7e       	andi	r25, 0xE1	; 225
     a80:	94 60       	ori	r25, 0x04	; 4
     a82:	92 8f       	std	Z+26, r25	; 0x1a
     a84:	08 95       	ret

00000a86 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     a86:	2f 92       	push	r2
     a88:	3f 92       	push	r3
     a8a:	4f 92       	push	r4
     a8c:	5f 92       	push	r5
     a8e:	6f 92       	push	r6
     a90:	7f 92       	push	r7
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
     aa6:	df 93       	push	r29
     aa8:	cf 93       	push	r28
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
     aae:	28 97       	sbiw	r28, 0x08	; 8
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	de bf       	out	0x3e, r29	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	cd bf       	out	0x3d, r28	; 61
     aba:	1a 01       	movw	r2, r20
     abc:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     abe:	20 91 ee 01 	lds	r18, 0x01EE
     ac2:	30 91 ef 01 	lds	r19, 0x01EF
     ac6:	38 87       	std	Y+8, r19	; 0x08
     ac8:	2f 83       	std	Y+7, r18	; 0x07
     aca:	a8 2f       	mov	r26, r24
     acc:	b0 e0       	ldi	r27, 0x00	; 0
     ace:	ba 83       	std	Y+2, r27	; 0x02
     ad0:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     ad2:	85 e1       	ldi	r24, 0x15	; 21
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a8 9f       	mul	r26, r24
     ad8:	f0 01       	movw	r30, r0
     ada:	a9 9f       	mul	r26, r25
     adc:	f0 0d       	add	r31, r0
     ade:	b8 9f       	mul	r27, r24
     ae0:	f0 0d       	add	r31, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	e2 0f       	add	r30, r18
     ae6:	f3 1f       	adc	r31, r19
     ae8:	82 8d       	ldd	r24, Z+26	; 0x1a
     aea:	86 95       	lsr	r24
     aec:	8f 70       	andi	r24, 0x0F	; 15
     aee:	09 f0       	breq	.+2      	; 0xaf2 <Timebase_DownCounter_SS_Set_Securely+0x6c>
     af0:	80 c0       	rjmp	.+256    	; 0xbf2 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     af2:	43 a3       	std	Z+35, r20	; 0x23
     af4:	54 a3       	std	Z+36, r21	; 0x24
     af6:	65 a3       	std	Z+37, r22	; 0x25
     af8:	76 a3       	std	Z+38, r23	; 0x26
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     afa:	f9 01       	movw	r30, r18
     afc:	c0 84       	ldd	r12, Z+8	; 0x08
     afe:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b00:	d9 01       	movw	r26, r18
     b02:	1a 96       	adiw	r26, 0x0a	; 10
     b04:	8d 91       	ld	r24, X+
     b06:	9d 91       	ld	r25, X+
     b08:	0d 90       	ld	r0, X+
     b0a:	bc 91       	ld	r27, X
     b0c:	a0 2d       	mov	r26, r0
     b0e:	8b 83       	std	Y+3, r24	; 0x03
     b10:	9c 83       	std	Y+4, r25	; 0x04
     b12:	ad 83       	std	Y+5, r26	; 0x05
     b14:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     b16:	20 81       	ld	r18, Z
     b18:	31 81       	ldd	r19, Z+1	; 0x01
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	c2 01       	movw	r24, r4
     b20:	b1 01       	movw	r22, r2
     b22:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     b26:	7b 01       	movw	r14, r22
     b28:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     b2a:	ef 81       	ldd	r30, Y+7	; 0x07
     b2c:	f8 85       	ldd	r31, Y+8	; 0x08
     b2e:	20 81       	ld	r18, Z
     b30:	31 81       	ldd	r19, Z+1	; 0x01
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	c2 01       	movw	r24, r4
     b38:	b1 01       	movw	r22, r2
     b3a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     b3e:	c9 01       	movw	r24, r18
     b40:	da 01       	movw	r26, r20
     b42:	3c 01       	movw	r6, r24
     b44:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     b46:	56 01       	movw	r10, r12
     b48:	cc 24       	eor	r12, r12
     b4a:	dd 24       	eor	r13, r13
     b4c:	ae 0c       	add	r10, r14
     b4e:	bf 1c       	adc	r11, r15
     b50:	c0 1e       	adc	r12, r16
     b52:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     b54:	af 81       	ldd	r26, Y+7	; 0x07
     b56:	b8 85       	ldd	r27, Y+8	; 0x08
     b58:	8d 91       	ld	r24, X+
     b5a:	9c 91       	ld	r25, X
     b5c:	a0 e0       	ldi	r26, 0x00	; 0
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	a8 16       	cp	r10, r24
     b62:	b9 06       	cpc	r11, r25
     b64:	ca 06       	cpc	r12, r26
     b66:	db 06       	cpc	r13, r27
     b68:	a4 f0       	brlt	.+40     	; 0xb92 <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     b6a:	08 94       	sec
     b6c:	61 1c       	adc	r6, r1
     b6e:	71 1c       	adc	r7, r1
     b70:	81 1c       	adc	r8, r1
     b72:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     b74:	ef 81       	ldd	r30, Y+7	; 0x07
     b76:	f8 85       	ldd	r31, Y+8	; 0x08
     b78:	20 81       	ld	r18, Z
     b7a:	31 81       	ldd	r19, Z+1	; 0x01
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     b88:	ac 01       	movw	r20, r24
     b8a:	cb 01       	movw	r24, r22
     b8c:	da 01       	movw	r26, r20
     b8e:	5c 01       	movw	r10, r24
     b90:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b92:	85 e1       	ldi	r24, 0x15	; 21
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	29 81       	ldd	r18, Y+1	; 0x01
     b98:	3a 81       	ldd	r19, Y+2	; 0x02
     b9a:	28 9f       	mul	r18, r24
     b9c:	a0 01       	movw	r20, r0
     b9e:	29 9f       	mul	r18, r25
     ba0:	50 0d       	add	r21, r0
     ba2:	38 9f       	mul	r19, r24
     ba4:	50 0d       	add	r21, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	8f 81       	ldd	r24, Y+7	; 0x07
     baa:	98 85       	ldd	r25, Y+8	; 0x08
     bac:	48 0f       	add	r20, r24
     bae:	59 1f       	adc	r21, r25
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	ad 81       	ldd	r26, Y+5	; 0x05
     bb6:	be 81       	ldd	r27, Y+6	; 0x06
     bb8:	86 0d       	add	r24, r6
     bba:	97 1d       	adc	r25, r7
     bbc:	a8 1d       	adc	r26, r8
     bbe:	b9 1d       	adc	r27, r9
     bc0:	fa 01       	movw	r30, r20
     bc2:	83 8f       	std	Z+27, r24	; 0x1b
     bc4:	94 8f       	std	Z+28, r25	; 0x1c
     bc6:	a5 8f       	std	Z+29, r26	; 0x1d
     bc8:	b6 8f       	std	Z+30, r27	; 0x1e
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     bca:	da 01       	movw	r26, r20
     bcc:	5f 96       	adiw	r26, 0x1f	; 31
     bce:	ad 92       	st	X+, r10
     bd0:	bd 92       	st	X+, r11
     bd2:	cd 92       	st	X+, r12
     bd4:	dc 92       	st	X, r13
     bd6:	92 97       	sbiw	r26, 0x22	; 34
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     bd8:	23 a6       	std	Z+43, r2	; 0x2b
     bda:	34 a6       	std	Z+44, r3	; 0x2c
     bdc:	45 a6       	std	Z+45, r4	; 0x2d
     bde:	56 a6       	std	Z+46, r5	; 0x2e
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     be0:	92 8d       	ldd	r25, Z+26	; 0x1a
     be2:	89 2f       	mov	r24, r25
     be4:	86 95       	lsr	r24
     be6:	8f 70       	andi	r24, 0x0F	; 15
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	19 f0       	breq	.+6      	; 0xbf2 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bec:	91 7e       	andi	r25, 0xE1	; 225
     bee:	92 60       	ori	r25, 0x02	; 2
     bf0:	92 8f       	std	Z+26, r25	; 0x1a
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	f8 94       	cli
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	cd bf       	out	0x3d, r28	; 61
     bfe:	cf 91       	pop	r28
     c00:	df 91       	pop	r29
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	ff 90       	pop	r15
     c08:	ef 90       	pop	r14
     c0a:	df 90       	pop	r13
     c0c:	cf 90       	pop	r12
     c0e:	bf 90       	pop	r11
     c10:	af 90       	pop	r10
     c12:	9f 90       	pop	r9
     c14:	8f 90       	pop	r8
     c16:	7f 90       	pop	r7
     c18:	6f 90       	pop	r6
     c1a:	5f 90       	pop	r5
     c1c:	4f 90       	pop	r4
     c1e:	3f 90       	pop	r3
     c20:	2f 90       	pop	r2
     c22:	08 95       	ret

00000c24 <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     c24:	cf 92       	push	r12
     c26:	df 92       	push	r13
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	7a 01       	movw	r14, r20
     c32:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     c34:	e0 91 ee 01 	lds	r30, 0x01EE
     c38:	f0 91 ef 01 	lds	r31, 0x01EF
     c3c:	48 2f       	mov	r20, r24
     c3e:	50 e0       	ldi	r21, 0x00	; 0
     c40:	25 e1       	ldi	r18, 0x15	; 21
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	42 9f       	mul	r20, r18
     c46:	60 01       	movw	r12, r0
     c48:	43 9f       	mul	r20, r19
     c4a:	d0 0c       	add	r13, r0
     c4c:	52 9f       	mul	r21, r18
     c4e:	d0 0c       	add	r13, r0
     c50:	11 24       	eor	r1, r1
     c52:	ec 0d       	add	r30, r12
     c54:	fd 1d       	adc	r31, r13
     c56:	17 8e       	std	Z+31, r1	; 0x1f
     c58:	10 a2       	std	Z+32, r1	; 0x20
     c5a:	11 a2       	std	Z+33, r1	; 0x21
     c5c:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     c5e:	13 8e       	std	Z+27, r1	; 0x1b
     c60:	14 8e       	std	Z+28, r1	; 0x1c
     c62:	15 8e       	std	Z+29, r1	; 0x1d
     c64:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     c66:	13 a2       	std	Z+35, r1	; 0x23
     c68:	14 a2       	std	Z+36, r1	; 0x24
     c6a:	15 a2       	std	Z+37, r1	; 0x25
     c6c:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c6e:	92 8d       	ldd	r25, Z+26	; 0x1a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     c70:	90 7e       	andi	r25, 0xE0	; 224
     c72:	92 8f       	std	Z+26, r25	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c74:	13 a6       	std	Z+43, r1	; 0x2b
     c76:	14 a6       	std	Z+44, r1	; 0x2c
     c78:	15 a6       	std	Z+45, r1	; 0x2d
     c7a:	16 a6       	std	Z+46, r1	; 0x2e
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	0e 94 43 05 	call	0xa86	; 0xa86 <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c84:	e0 91 ee 01 	lds	r30, 0x01EE
     c88:	f0 91 ef 01 	lds	r31, 0x01EF
     c8c:	ec 0d       	add	r30, r12
     c8e:	fd 1d       	adc	r31, r13
     c90:	e3 a6       	std	Z+43, r14	; 0x2b
     c92:	f4 a6       	std	Z+44, r15	; 0x2c
     c94:	05 a7       	std	Z+45, r16	; 0x2d
     c96:	16 a7       	std	Z+46, r17	; 0x2e

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     c98:	1f 91       	pop	r17
     c9a:	0f 91       	pop	r16
     c9c:	ff 90       	pop	r15
     c9e:	ef 90       	pop	r14
     ca0:	df 90       	pop	r13
     ca2:	cf 90       	pop	r12
     ca4:	08 95       	ret

00000ca6 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     ca6:	2f 92       	push	r2
     ca8:	3f 92       	push	r3
     caa:	4f 92       	push	r4
     cac:	5f 92       	push	r5
     cae:	6f 92       	push	r6
     cb0:	7f 92       	push	r7
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     cca:	e0 91 ee 01 	lds	r30, 0x01EE
     cce:	f0 91 ef 01 	lds	r31, 0x01EF
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	25 e1       	ldi	r18, 0x15	; 21
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	82 9f       	mul	r24, r18
     cda:	e0 01       	movw	r28, r0
     cdc:	83 9f       	mul	r24, r19
     cde:	d0 0d       	add	r29, r0
     ce0:	92 9f       	mul	r25, r18
     ce2:	d0 0d       	add	r29, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	ce 0f       	add	r28, r30
     ce8:	df 1f       	adc	r29, r31
     cea:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cec:	86 95       	lsr	r24
     cee:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <Timebase_DownCounter_SS_Update+0x50>
     cf4:	48 c0       	rjmp	.+144    	; 0xd86 <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     cf6:	e0 84       	ldd	r14, Z+8	; 0x08
     cf8:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     cfa:	00 e0       	ldi	r16, 0x00	; 0
     cfc:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     cfe:	82 85       	ldd	r24, Z+10	; 0x0a
     d00:	93 85       	ldd	r25, Z+11	; 0x0b
     d02:	a4 85       	ldd	r26, Z+12	; 0x0c
     d04:	b5 85       	ldd	r27, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     d06:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d08:	3c 8d       	ldd	r19, Y+28	; 0x1c
     d0a:	4d 8d       	ldd	r20, Y+29	; 0x1d
     d0c:	5e 8d       	ldd	r21, Y+30	; 0x1e
     d0e:	28 1b       	sub	r18, r24
     d10:	39 0b       	sbc	r19, r25
     d12:	4a 0b       	sbc	r20, r26
     d14:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     d16:	60 81       	ld	r22, Z
     d18:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
     d22:	6e 19       	sub	r22, r14
     d24:	7f 09       	sbc	r23, r15
     d26:	80 0b       	sbc	r24, r16
     d28:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     d2a:	2f 8d       	ldd	r18, Y+31	; 0x1f
     d2c:	38 a1       	ldd	r19, Y+32	; 0x20
     d2e:	49 a1       	ldd	r20, Y+33	; 0x21
     d30:	5a a1       	ldd	r21, Y+34	; 0x22
     d32:	62 0f       	add	r22, r18
     d34:	73 1f       	adc	r23, r19
     d36:	84 1f       	adc	r24, r20
     d38:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     d3a:	6b a3       	std	Y+35, r22	; 0x23
     d3c:	7c a3       	std	Y+36, r23	; 0x24
     d3e:	8d a3       	std	Y+37, r24	; 0x25
     d40:	9e a3       	std	Y+38, r25	; 0x26
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     d42:	16 16       	cp	r1, r22
     d44:	17 06       	cpc	r1, r23
     d46:	18 06       	cpc	r1, r24
     d48:	19 06       	cpc	r1, r25
     d4a:	0c f4       	brge	.+2      	; 0xd4e <Timebase_DownCounter_SS_Update+0xa8>
     d4c:	4c c0       	rjmp	.+152    	; 0xde6 <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d50:	9c a5       	ldd	r25, Y+44	; 0x2c
     d52:	ad a5       	ldd	r26, Y+45	; 0x2d
     d54:	be a5       	ldd	r27, Y+46	; 0x2e
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d56:	1f 8e       	std	Y+31, r1	; 0x1f
     d58:	18 a2       	std	Y+32, r1	; 0x20
     d5a:	19 a2       	std	Y+33, r1	; 0x21
     d5c:	1a a2       	std	Y+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     d5e:	1b 8e       	std	Y+27, r1	; 0x1b
     d60:	1c 8e       	std	Y+28, r1	; 0x1c
     d62:	1d 8e       	std	Y+29, r1	; 0x1d
     d64:	1e 8e       	std	Y+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     d66:	1b a2       	std	Y+35, r1	; 0x23
     d68:	1c a2       	std	Y+36, r1	; 0x24
     d6a:	1d a2       	std	Y+37, r1	; 0x25
     d6c:	1e a2       	std	Y+38, r1	; 0x26
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     d6e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d70:	2e 7f       	andi	r18, 0xFE	; 254
     d72:	2a 8f       	std	Y+26, r18	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d74:	8b a7       	std	Y+43, r24	; 0x2b
     d76:	9c a7       	std	Y+44, r25	; 0x2c
     d78:	ad a7       	std	Y+45, r26	; 0x2d
     d7a:	be a7       	std	Y+46, r27	; 0x2e
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d7e:	81 7e       	andi	r24, 0xE1	; 225
     d80:	88 60       	ori	r24, 0x08	; 8
     d82:	8a 8f       	std	Y+26, r24	; 0x1a
     d84:	30 c0       	rjmp	.+96     	; 0xde6 <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	71 f5       	brne	.+92     	; 0xde6 <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d8a:	60 84       	ldd	r6, Z+8	; 0x08
     d8c:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d8e:	e2 84       	ldd	r14, Z+10	; 0x0a
     d90:	f3 84       	ldd	r15, Z+11	; 0x0b
     d92:	04 85       	ldd	r16, Z+12	; 0x0c
     d94:	15 85       	ldd	r17, Z+13	; 0x0d
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     d96:	2b a0       	ldd	r2, Y+35	; 0x23
     d98:	3c a0       	ldd	r3, Y+36	; 0x24
     d9a:	4d a0       	ldd	r4, Y+37	; 0x25
     d9c:	5e a0       	ldd	r5, Y+38	; 0x26
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     d9e:	20 81       	ld	r18, Z
     da0:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     da2:	a0 80       	ld	r10, Z
     da4:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	c2 01       	movw	r24, r4
     dac:	b1 01       	movw	r22, r2
     dae:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     db2:	e2 0e       	add	r14, r18
     db4:	f3 1e       	adc	r15, r19
     db6:	04 1f       	adc	r16, r20
     db8:	15 1f       	adc	r17, r21
     dba:	eb 8e       	std	Y+27, r14	; 0x1b
     dbc:	fc 8e       	std	Y+28, r15	; 0x1c
     dbe:	0d 8f       	std	Y+29, r16	; 0x1d
     dc0:	1e 8f       	std	Y+30, r17	; 0x1e
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     dc2:	cc 24       	eor	r12, r12
     dc4:	dd 24       	eor	r13, r13
     dc6:	c2 01       	movw	r24, r4
     dc8:	b1 01       	movw	r22, r2
     dca:	a6 01       	movw	r20, r12
     dcc:	95 01       	movw	r18, r10
     dce:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
     dd2:	88 24       	eor	r8, r8
     dd4:	99 24       	eor	r9, r9
     dd6:	66 0e       	add	r6, r22
     dd8:	77 1e       	adc	r7, r23
     dda:	88 1e       	adc	r8, r24
     ddc:	99 1e       	adc	r9, r25
     dde:	6f 8e       	std	Y+31, r6	; 0x1f
     de0:	78 a2       	std	Y+32, r7	; 0x20
     de2:	89 a2       	std	Y+33, r8	; 0x21
     de4:	9a a2       	std	Y+34, r9	; 0x22
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	bf 90       	pop	r11
     df8:	af 90       	pop	r10
     dfa:	9f 90       	pop	r9
     dfc:	8f 90       	pop	r8
     dfe:	7f 90       	pop	r7
     e00:	6f 90       	pop	r6
     e02:	5f 90       	pop	r5
     e04:	4f 90       	pop	r4
     e06:	3f 90       	pop	r3
     e08:	2f 90       	pop	r2
     e0a:	08 95       	ret

00000e0c <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	e0 91 ee 01 	lds	r30, 0x01EE
     e12:	f0 91 ef 01 	lds	r31, 0x01EF
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	25 e1       	ldi	r18, 0x15	; 21
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	bc 01       	movw	r22, r24
     e1e:	62 9f       	mul	r22, r18
     e20:	c0 01       	movw	r24, r0
     e22:	63 9f       	mul	r22, r19
     e24:	90 0d       	add	r25, r0
     e26:	72 9f       	mul	r23, r18
     e28:	90 0d       	add	r25, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	e8 0f       	add	r30, r24
     e2e:	f9 1f       	adc	r31, r25
     e30:	82 8d       	ldd	r24, Z+26	; 0x1a
     e32:	86 95       	lsr	r24
     e34:	8f 70       	andi	r24, 0x0F	; 15
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	09 f4       	brne	.+2      	; 0xe3c <Timebase_DownCounter_SS_Expired+0x30>
     e3a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e3c:	84 2f       	mov	r24, r20
     e3e:	08 95       	ret

00000e40 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e40:	e0 91 ee 01 	lds	r30, 0x01EE
     e44:	f0 91 ef 01 	lds	r31, 0x01EF
     e48:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     e4a:	25 e1       	ldi	r18, 0x15	; 21
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	ac 01       	movw	r20, r24
     e50:	42 9f       	mul	r20, r18
     e52:	c0 01       	movw	r24, r0
     e54:	43 9f       	mul	r20, r19
     e56:	90 0d       	add	r25, r0
     e58:	52 9f       	mul	r21, r18
     e5a:	90 0d       	add	r25, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	e8 0f       	add	r30, r24
     e60:	f9 1f       	adc	r31, r25
     e62:	82 8d       	ldd	r24, Z+26	; 0x1a
     e64:	86 95       	lsr	r24
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	84 30       	cpi	r24, 0x04	; 4
     e6a:	11 f0       	breq	.+4      	; 0xe70 <Timebase_DownCounter_SS_Expired_Event+0x30>
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e70:	17 8e       	std	Z+31, r1	; 0x1f
     e72:	10 a2       	std	Z+32, r1	; 0x20
     e74:	11 a2       	std	Z+33, r1	; 0x21
     e76:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e78:	13 8e       	std	Z+27, r1	; 0x1b
     e7a:	14 8e       	std	Z+28, r1	; 0x1c
     e7c:	15 8e       	std	Z+29, r1	; 0x1d
     e7e:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e80:	13 a2       	std	Z+35, r1	; 0x23
     e82:	14 a2       	std	Z+36, r1	; 0x24
     e84:	15 a2       	std	Z+37, r1	; 0x25
     e86:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e88:	82 8d       	ldd	r24, Z+26	; 0x1a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e8a:	80 7e       	andi	r24, 0xE0	; 224
     e8c:	82 8f       	std	Z+26, r24	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e8e:	13 a6       	std	Z+43, r1	; 0x2b
     e90:	14 a6       	std	Z+44, r1	; 0x2c
     e92:	15 a6       	std	Z+45, r1	; 0x2d
     e94:	16 a6       	std	Z+46, r1	; 0x2e
     e96:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e98:	08 95       	ret

00000e9a <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
     e9a:	0e 94 20 07 	call	0xe40	; 0xe40 <Timebase_DownCounter_SS_Expired_Event>
}
     e9e:	08 95       	ret

00000ea0 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
     ea0:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     ea2:	e0 91 ee 01 	lds	r30, 0x01EE
     ea6:	f0 91 ef 01 	lds	r31, 0x01EF
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     eae:	85 e1       	ldi	r24, 0x15	; 21
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	ac 01       	movw	r20, r24
     eb4:	24 9f       	mul	r18, r20
     eb6:	c0 01       	movw	r24, r0
     eb8:	25 9f       	mul	r18, r21
     eba:	90 0d       	add	r25, r0
     ebc:	34 9f       	mul	r19, r20
     ebe:	90 0d       	add	r25, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	e8 0f       	add	r30, r24
     ec4:	f9 1f       	adc	r31, r25
     ec6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ec8:	86 95       	lsr	r24
     eca:	8f 70       	andi	r24, 0x0F	; 15
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	11 f0       	breq	.+4      	; 0xed4 <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     ed4:	43 a5       	ldd	r20, Z+43	; 0x2b
     ed6:	54 a5       	ldd	r21, Z+44	; 0x2c
     ed8:	65 a5       	ldd	r22, Z+45	; 0x2d
     eda:	76 a5       	ldd	r23, Z+46	; 0x2e
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     edc:	17 8e       	std	Z+31, r1	; 0x1f
     ede:	10 a2       	std	Z+32, r1	; 0x20
     ee0:	11 a2       	std	Z+33, r1	; 0x21
     ee2:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     ee4:	13 8e       	std	Z+27, r1	; 0x1b
     ee6:	14 8e       	std	Z+28, r1	; 0x1c
     ee8:	15 8e       	std	Z+29, r1	; 0x1d
     eea:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     eec:	13 a2       	std	Z+35, r1	; 0x23
     eee:	14 a2       	std	Z+36, r1	; 0x24
     ef0:	15 a2       	std	Z+37, r1	; 0x25
     ef2:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ef4:	82 8d       	ldd	r24, Z+26	; 0x1a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ef6:	80 7e       	andi	r24, 0xE0	; 224
     ef8:	82 8f       	std	Z+26, r24	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     efa:	13 a6       	std	Z+43, r1	; 0x2b
     efc:	14 a6       	std	Z+44, r1	; 0x2c
     efe:	15 a6       	std	Z+45, r1	; 0x2d
     f00:	16 a6       	std	Z+46, r1	; 0x2e

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
     f02:	8a 2f       	mov	r24, r26
     f04:	0e 94 43 05 	call	0xa86	; 0xa86 <Timebase_DownCounter_SS_Set_Securely>
     f08:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     f0a:	08 95       	ret

00000f0c <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
     f10:	c0 91 ee 01 	lds	r28, 0x01EE
     f14:	d0 91 ef 01 	lds	r29, 0x01EF
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
     f1c:	85 e1       	ldi	r24, 0x15	; 21
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	28 9f       	mul	r18, r24
     f22:	f0 01       	movw	r30, r0
     f24:	29 9f       	mul	r18, r25
     f26:	f0 0d       	add	r31, r0
     f28:	38 9f       	mul	r19, r24
     f2a:	f0 0d       	add	r31, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	ec 0f       	add	r30, r28
     f30:	fd 1f       	adc	r31, r29
     f32:	82 8d       	ldd	r24, Z+26	; 0x1a
     f34:	80 fd       	sbrc	r24, 0
     f36:	21 c0       	rjmp	.+66     	; 0xf7a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
     f38:	83 a1       	ldd	r24, Z+35	; 0x23
     f3a:	94 a1       	ldd	r25, Z+36	; 0x24
     f3c:	a5 a1       	ldd	r26, Z+37	; 0x25
     f3e:	b6 a1       	ldd	r27, Z+38	; 0x26
     f40:	84 1b       	sub	r24, r20
     f42:	95 0b       	sbc	r25, r21
     f44:	a6 0b       	sbc	r26, r22
     f46:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
     f48:	b7 ff       	sbrs	r27, 7
     f4a:	05 c0       	rjmp	.+10     	; 0xf56 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     f4c:	17 a2       	std	Z+39, r1	; 0x27
     f4e:	10 a6       	std	Z+40, r1	; 0x28
     f50:	11 a6       	std	Z+41, r1	; 0x29
     f52:	12 a6       	std	Z+42, r1	; 0x2a
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     f56:	87 a3       	std	Z+39, r24	; 0x27
     f58:	90 a7       	std	Z+40, r25	; 0x28
     f5a:	a1 a7       	std	Z+41, r26	; 0x29
     f5c:	b2 a7       	std	Z+42, r27	; 0x2a
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     f5e:	85 e1       	ldi	r24, 0x15	; 21
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	28 9f       	mul	r18, r24
     f64:	f0 01       	movw	r30, r0
     f66:	29 9f       	mul	r18, r25
     f68:	f0 0d       	add	r31, r0
     f6a:	38 9f       	mul	r19, r24
     f6c:	f0 0d       	add	r31, r0
     f6e:	11 24       	eor	r1, r1
     f70:	ec 0f       	add	r30, r28
     f72:	fd 1f       	adc	r31, r29
     f74:	82 8d       	ldd	r24, Z+26	; 0x1a
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	82 8f       	std	Z+26, r24	; 0x1a
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f80:	e0 91 ee 01 	lds	r30, 0x01EE
     f84:	f0 91 ef 01 	lds	r31, 0x01EF
     f88:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
     f8a:	25 e1       	ldi	r18, 0x15	; 21
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	ac 01       	movw	r20, r24
     f90:	42 9f       	mul	r20, r18
     f92:	c0 01       	movw	r24, r0
     f94:	43 9f       	mul	r20, r19
     f96:	90 0d       	add	r25, r0
     f98:	52 9f       	mul	r21, r18
     f9a:	90 0d       	add	r25, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	e8 0f       	add	r30, r24
     fa0:	f9 1f       	adc	r31, r25
     fa2:	23 a1       	ldd	r18, Z+35	; 0x23
     fa4:	34 a1       	ldd	r19, Z+36	; 0x24
     fa6:	45 a1       	ldd	r20, Z+37	; 0x25
     fa8:	56 a1       	ldd	r21, Z+38	; 0x26
     faa:	87 a1       	ldd	r24, Z+39	; 0x27
     fac:	90 a5       	ldd	r25, Z+40	; 0x28
     fae:	a1 a5       	ldd	r26, Z+41	; 0x29
     fb0:	b2 a5       	ldd	r27, Z+42	; 0x2a
     fb2:	28 1b       	sub	r18, r24
     fb4:	39 0b       	sbc	r19, r25
     fb6:	4a 0b       	sbc	r20, r26
     fb8:	5b 0b       	sbc	r21, r27
     fba:	57 ff       	sbrs	r21, 7
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
     fc6:	b9 01       	movw	r22, r18
     fc8:	ca 01       	movw	r24, r20
     fca:	08 95       	ret

00000fcc <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     fd0:	c0 91 ee 01 	lds	r28, 0x01EE
     fd4:	d0 91 ef 01 	lds	r29, 0x01EF
     fd8:	68 2f       	mov	r22, r24
     fda:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
     fdc:	85 e1       	ldi	r24, 0x15	; 21
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	68 9f       	mul	r22, r24
     fe2:	f0 01       	movw	r30, r0
     fe4:	69 9f       	mul	r22, r25
     fe6:	f0 0d       	add	r31, r0
     fe8:	78 9f       	mul	r23, r24
     fea:	f0 0d       	add	r31, r0
     fec:	11 24       	eor	r1, r1
     fee:	ec 0f       	add	r30, r28
     ff0:	fd 1f       	adc	r31, r29
     ff2:	23 a1       	ldd	r18, Z+35	; 0x23
     ff4:	34 a1       	ldd	r19, Z+36	; 0x24
     ff6:	45 a1       	ldd	r20, Z+37	; 0x25
     ff8:	56 a1       	ldd	r21, Z+38	; 0x26
     ffa:	87 a1       	ldd	r24, Z+39	; 0x27
     ffc:	90 a5       	ldd	r25, Z+40	; 0x28
     ffe:	a1 a5       	ldd	r26, Z+41	; 0x29
    1000:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1002:	28 1b       	sub	r18, r24
    1004:	39 0b       	sbc	r19, r25
    1006:	4a 0b       	sbc	r20, r26
    1008:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    100a:	57 fd       	sbrc	r21, 7
    100c:	07 c0       	rjmp	.+14     	; 0x101c <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    100e:	21 15       	cp	r18, r1
    1010:	31 05       	cpc	r19, r1
    1012:	41 05       	cpc	r20, r1
    1014:	51 05       	cpc	r21, r1
    1016:	11 f0       	breq	.+4      	; 0x101c <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	12 c0       	rjmp	.+36     	; 0x1040 <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	85 e1       	ldi	r24, 0x15	; 21
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	ac 01       	movw	r20, r24
    1024:	64 9f       	mul	r22, r20
    1026:	c0 01       	movw	r24, r0
    1028:	65 9f       	mul	r22, r21
    102a:	90 0d       	add	r25, r0
    102c:	74 9f       	mul	r23, r20
    102e:	90 0d       	add	r25, r0
    1030:	11 24       	eor	r1, r1
    1032:	c8 0f       	add	r28, r24
    1034:	d9 1f       	adc	r29, r25
    1036:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1038:	80 ff       	sbrs	r24, 0
    103a:	21 e0       	ldi	r18, 0x01	; 1
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1040:	82 2f       	mov	r24, r18
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1048:	1f 93       	push	r17
    104a:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    104c:	0e 94 e6 07 	call	0xfcc	; 0xfcc <Timebase_DownCounter_SS_Period_Value_Expired>
    1050:	81 30       	cpi	r24, 0x01	; 1
    1052:	11 f0       	breq	.+4      	; 0x1058 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	16 c0       	rjmp	.+44     	; 0x1084 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1058:	e0 91 ee 01 	lds	r30, 0x01EE
    105c:	f0 91 ef 01 	lds	r31, 0x01EF
    1060:	21 2f       	mov	r18, r17
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	85 e1       	ldi	r24, 0x15	; 21
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	ac 01       	movw	r20, r24
    106a:	24 9f       	mul	r18, r20
    106c:	c0 01       	movw	r24, r0
    106e:	25 9f       	mul	r18, r21
    1070:	90 0d       	add	r25, r0
    1072:	34 9f       	mul	r19, r20
    1074:	90 0d       	add	r25, r0
    1076:	11 24       	eor	r1, r1
    1078:	e8 0f       	add	r30, r24
    107a:	f9 1f       	adc	r31, r25
    107c:	82 8d       	ldd	r24, Z+26	; 0x1a
    107e:	8e 7f       	andi	r24, 0xFE	; 254
    1080:	82 8f       	std	Z+26, r24	; 0x1a
    1082:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1084:	1f 91       	pop	r17
    1086:	08 95       	ret

00001088 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	0e 94 53 06 	call	0xca6	; 0xca6 <Timebase_DownCounter_SS_Update>
  }
}
    108e:	08 95       	ret

00001090 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1090:	e0 91 ee 01 	lds	r30, 0x01EE
    1094:	f0 91 ef 01 	lds	r31, 0x01EF
    1098:	17 8e       	std	Z+31, r1	; 0x1f
    109a:	10 a2       	std	Z+32, r1	; 0x20
    109c:	11 a2       	std	Z+33, r1	; 0x21
    109e:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    10a0:	13 8e       	std	Z+27, r1	; 0x1b
    10a2:	14 8e       	std	Z+28, r1	; 0x1c
    10a4:	15 8e       	std	Z+29, r1	; 0x1d
    10a6:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    10a8:	13 a2       	std	Z+35, r1	; 0x23
    10aa:	14 a2       	std	Z+36, r1	; 0x24
    10ac:	15 a2       	std	Z+37, r1	; 0x25
    10ae:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    10b0:	82 8d       	ldd	r24, Z+26	; 0x1a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    10b2:	80 7e       	andi	r24, 0xE0	; 224
    10b4:	82 8f       	std	Z+26, r24	; 0x1a
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    10b6:	13 a6       	std	Z+43, r1	; 0x2b
    10b8:	14 a6       	std	Z+44, r1	; 0x2c
    10ba:	15 a6       	std	Z+45, r1	; 0x2d
    10bc:	16 a6       	std	Z+46, r1	; 0x2e

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    10be:	08 95       	ret

000010c0 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    10c0:	e0 91 ee 01 	lds	r30, 0x01EE
    10c4:	f0 91 ef 01 	lds	r31, 0x01EF
    10c8:	81 8d       	ldd	r24, Z+25	; 0x19
}
    10ca:	08 95       	ret

000010cc <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    10cc:	0e 94 48 08 	call	0x1090	; 0x1090 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    10d0:	08 95       	ret

000010d2 <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
    10d2:	08 95       	ret

000010d4 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    10da:	0e 94 86 00 	call	0x10c	; 0x10c <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 ed 00 	call	0x1da	; 0x1da <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    10e4:	0e 94 48 08 	call	0x1090	; 0x1090 <Timebase_DownCounter_SS_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    10ee:	e0 91 ee 01 	lds	r30, 0x01EE
    10f2:	f0 91 ef 01 	lds	r31, 0x01EF
    10f6:	81 8d       	ldd	r24, Z+25	; 0x19
    10f8:	83 ff       	sbrs	r24, 3
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    10fc:	0e 94 12 02 	call	0x424	; 0x424 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1100:	0e 94 44 08 	call	0x1088	; 0x1088 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1104:	e0 91 ee 01 	lds	r30, 0x01EE
    1108:	f0 91 ef 01 	lds	r31, 0x01EF
    110c:	81 8d       	ldd	r24, Z+25	; 0x19
    110e:	87 7f       	andi	r24, 0xF7	; 247
    1110:	81 8f       	std	Z+25, r24	; 0x19
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    1112:	e0 91 ee 01 	lds	r30, 0x01EE
    1116:	f0 91 ef 01 	lds	r31, 0x01EF
    111a:	10 8e       	std	Z+24, r1	; 0x18
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
    111c:	08 95       	ret

0000111e <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    111e:	e0 91 ee 01 	lds	r30, 0x01EE
    1122:	f0 91 ef 01 	lds	r31, 0x01EF
    1126:	86 85       	ldd	r24, Z+14	; 0x0e
    1128:	97 85       	ldd	r25, Z+15	; 0x0f
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	97 87       	std	Z+15, r25	; 0x0f
    112e:	86 87       	std	Z+14, r24	; 0x0e
  Timebase->Time.SubSecondsUpTime++;
    1130:	80 89       	ldd	r24, Z+16	; 0x10
    1132:	91 89       	ldd	r25, Z+17	; 0x11
    1134:	a2 89       	ldd	r26, Z+18	; 0x12
    1136:	b3 89       	ldd	r27, Z+19	; 0x13
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	a1 1d       	adc	r26, r1
    113c:	b1 1d       	adc	r27, r1
    113e:	80 8b       	std	Z+16, r24	; 0x10
    1140:	91 8b       	std	Z+17, r25	; 0x11
    1142:	a2 8b       	std	Z+18, r26	; 0x12
    1144:	b3 8b       	std	Z+19, r27	; 0x13
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1146:	81 8d       	ldd	r24, Z+25	; 0x19
    1148:	88 60       	ori	r24, 0x08	; 8
    114a:	81 8f       	std	Z+25, r24	; 0x19
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    114c:	26 85       	ldd	r18, Z+14	; 0x0e
    114e:	37 85       	ldd	r19, Z+15	; 0x0f
    1150:	80 81       	ld	r24, Z
    1152:	91 81       	ldd	r25, Z+1	; 0x01
    1154:	28 17       	cp	r18, r24
    1156:	39 07       	cpc	r19, r25
    1158:	68 f0       	brcs	.+26     	; 0x1174 <Timebase_ISR_Executables+0x56>
    Timebase->Time.SubSecondsShadow = 0;
    115a:	17 86       	std	Z+15, r1	; 0x0f
    115c:	16 86       	std	Z+14, r1	; 0x0e
    Timebase->Time.SecondsShadow++;
    115e:	84 89       	ldd	r24, Z+20	; 0x14
    1160:	95 89       	ldd	r25, Z+21	; 0x15
    1162:	a6 89       	ldd	r26, Z+22	; 0x16
    1164:	b7 89       	ldd	r27, Z+23	; 0x17
    1166:	01 96       	adiw	r24, 0x01	; 1
    1168:	a1 1d       	adc	r26, r1
    116a:	b1 1d       	adc	r27, r1
    116c:	84 8b       	std	Z+20, r24	; 0x14
    116e:	95 8b       	std	Z+21, r25	; 0x15
    1170:	a6 8b       	std	Z+22, r26	; 0x16
    1172:	b7 8b       	std	Z+23, r27	; 0x17
    1174:	08 95       	ret

00001176 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1198:	e0 91 ee 01 	lds	r30, 0x01EE
    119c:	f0 91 ef 01 	lds	r31, 0x01EF
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    11a6:	0e 94 8f 08 	call	0x111e	; 0x111e <Timebase_ISR_Executables>
}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
    11cc:	08 95       	ret

000011ce <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    11ce:	10 92 96 01 	sts	0x0196, r1
    11d2:	e7 e9       	ldi	r30, 0x97	; 151
    11d4:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    11d6:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	ef 39       	cpi	r30, 0x9F	; 159
    11dc:	f8 07       	cpc	r31, r24
    11de:	d9 f7       	brne	.-10     	; 0x11d6 <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    11e0:	10 82       	st	Z, r1
    
  UART.LastRxByte = UART_NULL;
    11e2:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    11e4:	80 e4       	ldi	r24, 0x40	; 64
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	90 93 e2 01 	sts	0x01E2, r25
    11ec:	80 93 e1 01 	sts	0x01E1, r24
  UART.BufIndex = 0;
    11f0:	10 92 e4 01 	sts	0x01E4, r1
    11f4:	10 92 e3 01 	sts	0x01E3, r1
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	04 c0       	rjmp	.+8      	; 0x1204 <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    11fc:	ea 56       	subi	r30, 0x6A	; 106
    11fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1200:	13 86       	std	Z+11, r1	; 0x0b
  UART.InputNumDigits = UART_NULL;
    
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    1202:	2f 5f       	subi	r18, 0xFF	; 255
    1204:	80 91 e1 01 	lds	r24, 0x01E1
    1208:	90 91 e2 01 	lds	r25, 0x01E2
    120c:	e2 2f       	mov	r30, r18
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	e8 17       	cp	r30, r24
    1212:	f9 07       	cpc	r31, r25
    1214:	98 f3       	brcs	.-26     	; 0x11fc <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
    1216:	08 95       	ret

00001218 <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1218:	10 92 e8 01 	sts	0x01E8, r1
    121c:	10 92 e7 01 	sts	0x01E7, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1220:	10 92 ea 01 	sts	0x01EA, r1
    1224:	10 92 e9 01 	sts	0x01E9, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1228:	10 92 eb 01 	sts	0x01EB, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    122c:	10 92 ec 01 	sts	0x01EC, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	80 93 ed 01 	sts	0x01ED, r24
}
    1236:	08 95       	ret

00001238 <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    1238:	08 95       	ret

0000123a <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    123a:	08 95       	ret

0000123c <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1240:	60 e6       	ldi	r22, 0x60	; 96
    1242:	73 ee       	ldi	r23, 0xE3	; 227
    1244:	86 e1       	ldi	r24, 0x16	; 22
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
    124c:	21 50       	subi	r18, 0x01	; 1
    124e:	30 40       	sbci	r19, 0x00	; 0
    1250:	40 40       	sbci	r20, 0x00	; 0
    1252:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    1254:	e0 ec       	ldi	r30, 0xC0	; 192
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	82 60       	ori	r24, 0x02	; 2
    125c:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    125e:	bb 27       	eor	r27, r27
    1260:	a5 2f       	mov	r26, r21
    1262:	94 2f       	mov	r25, r20
    1264:	83 2f       	mov	r24, r19
    1266:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    126a:	20 93 c4 00 	sts	0x00C4, r18
}
    126e:	08 95       	ret

00001270 <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1270:	e1 ec       	ldi	r30, 0xC1	; 193
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	88 60       	ori	r24, 0x08	; 8
    1278:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    127a:	86 e0       	ldi	r24, 0x06	; 6
    127c:	80 93 c2 00 	sts	0x00C2, r24
}
    1280:	08 95       	ret

00001282 <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1282:	e1 ec       	ldi	r30, 0xC1	; 193
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	80 61       	ori	r24, 0x10	; 16
    128a:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    128c:	86 e0       	ldi	r24, 0x06	; 6
    128e:	80 93 c2 00 	sts	0x00C2, r24
}
    1292:	08 95       	ret

00001294 <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1294:	e1 ec       	ldi	r30, 0xC1	; 193
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	80 68       	ori	r24, 0x80	; 128
    129c:	80 83       	st	Z, r24
  sei();
    129e:	78 94       	sei
}
    12a0:	08 95       	ret

000012a2 <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    12a2:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    12a4:	80 91 c0 00 	lds	r24, 0x00C0
    12a8:	85 ff       	sbrs	r24, 5
    12aa:	fc cf       	rjmp	.-8      	; 0x12a4 <UART_Tx_Byte+0x2>
  UDR0 = val;
    12ac:	90 93 c6 00 	sts	0x00C6, r25
}
    12b0:	08 95       	ret

000012b2 <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	0f 92       	push	r0
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    12bc:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    12be:	80 91 c0 00 	lds	r24, 0x00C0
    12c2:	84 ff       	sbrs	r24, 4
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <UART_Rx_Byte+0x1e>
    val = UDR0;
    12c6:	80 91 c6 00 	lds	r24, 0x00C6
    12ca:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	08 c0       	rjmp	.+16     	; 0x12e0 <UART_Rx_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    12d0:	80 91 c0 00 	lds	r24, 0x00C0
    12d4:	83 ff       	sbrs	r24, 3
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <UART_Rx_Byte+0x34>
    val = UDR0;
    12d8:	80 91 c6 00 	lds	r24, 0x00C6
    12dc:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
    12de:	82 e0       	ldi	r24, 0x02	; 2
    12e0:	80 93 96 01 	sts	0x0196, r24
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    12e6:	80 91 c6 00 	lds	r24, 0x00C6
    12ea:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
    12ec:	10 92 96 01 	sts	0x0196, r1
  }
  return val;
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    12fa:	10 92 e5 01 	sts	0x01E5, r1
  UART.Timer.ResetVal = UART_NULL;
    12fe:	10 92 e6 01 	sts	0x01E6, r1
}
    1302:	08 95       	ret

00001304 <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	80 93 e6 01 	sts	0x01E6, r24
  UART.Timer.ResetVal = 0xFF - temp1;
    130a:	8b ef       	ldi	r24, 0xFB	; 251
    130c:	80 93 e6 01 	sts	0x01E6, r24
  
  ASSR   = 0x00;
    1310:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
    1314:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
    1318:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
    131c:	e0 e7       	ldi	r30, 0x70	; 112
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	10 82       	st	Z, r1
  TCNT2  = 0x00;
    1322:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 83       	st	Z, r24
  sei();
    132e:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
    1330:	08 95       	ret

00001332 <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1332:	87 e0       	ldi	r24, 0x07	; 7
    1334:	80 93 b1 00 	sts	0x00B1, r24
}
    1338:	08 95       	ret

0000133a <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    133a:	10 92 b1 00 	sts	0x00B1, r1
}
    133e:	08 95       	ret

00001340 <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    1340:	80 91 e5 01 	lds	r24, 0x01E5
}
    1344:	08 95       	ret

00001346 <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
    1346:	80 91 b2 00 	lds	r24, 0x00B2
}
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	08 95       	ret

0000134e <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    134e:	80 91 e6 01 	lds	r24, 0x01E6
    1352:	80 93 b2 00 	sts	0x00B2, r24
}
    1356:	08 95       	ret

00001358 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    1358:	ac 01       	movw	r20, r24
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	0c c0       	rjmp	.+24     	; 0x137a <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    1362:	fa 01       	movw	r30, r20
    1364:	e2 0f       	add	r30, r18
    1366:	f3 1f       	adc	r31, r19
    1368:	e0 81       	ld	r30, Z
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    136a:	80 91 c0 00 	lds	r24, 0x00C0
    136e:	85 ff       	sbrs	r24, 5
    1370:	fc cf       	rjmp	.-8      	; 0x136a <UART_Tx_Buf+0x12>
  UDR0 = val;
    1372:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    1376:	2f 5f       	subi	r18, 0xFF	; 255
    1378:	3f 4f       	sbci	r19, 0xFF	; 255
    137a:	26 17       	cp	r18, r22
    137c:	37 07       	cpc	r19, r23
    137e:	88 f3       	brcs	.-30     	; 0x1362 <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    1380:	08 95       	ret

00001382 <UART_Tx_NL>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1382:	80 91 c0 00 	lds	r24, 0x00C0
    1386:	85 ff       	sbrs	r24, 5
    1388:	fc cf       	rjmp	.-8      	; 0x1382 <UART_Tx_NL>
  UDR0 = val;
    138a:	8d e0       	ldi	r24, 0x0D	; 13
    138c:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1390:	80 91 c0 00 	lds	r24, 0x00C0
    1394:	85 ff       	sbrs	r24, 5
    1396:	fc cf       	rjmp	.-8      	; 0x1390 <UART_Tx_NL+0xe>
  UDR0 = val;
    1398:	8a e0       	ldi	r24, 0x0A	; 10
    139a:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    139e:	08 95       	ret

000013a0 <UART_Tx_SP>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    13a0:	80 91 c0 00 	lds	r24, 0x00C0
    13a4:	85 ff       	sbrs	r24, 5
    13a6:	fc cf       	rjmp	.-8      	; 0x13a0 <UART_Tx_SP>
  UDR0 = val;
    13a8:	80 e2       	ldi	r24, 0x20	; 32
    13aa:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    13ae:	08 95       	ret

000013b0 <UART_Tx_CM>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    13b0:	80 91 c0 00 	lds	r24, 0x00C0
    13b4:	85 ff       	sbrs	r24, 5
    13b6:	fc cf       	rjmp	.-8      	; 0x13b0 <UART_Tx_CM>
  UDR0 = val;
    13b8:	8c e2       	ldi	r24, 0x2C	; 44
    13ba:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    13be:	08 95       	ret

000013c0 <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    13c0:	ac 01       	movw	r20, r24
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	07 c0       	rjmp	.+14     	; 0x13d4 <UART_Tx_Text+0x14>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    13c6:	80 91 c0 00 	lds	r24, 0x00C0
    13ca:	85 ff       	sbrs	r24, 5
    13cc:	fc cf       	rjmp	.-8      	; 0x13c6 <UART_Tx_Text+0x6>
  UDR0 = val;
    13ce:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    13d2:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    13d4:	fa 01       	movw	r30, r20
    13d6:	e2 0f       	add	r30, r18
    13d8:	f1 1d       	adc	r31, r1
    13da:	e0 81       	ld	r30, Z
    13dc:	ee 23       	and	r30, r30
    13de:	99 f7       	brne	.-26     	; 0x13c6 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    13e0:	08 95       	ret

000013e2 <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    13e2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UART_Tx_NL();
    13e6:	0e 94 c1 09 	call	0x1382	; 0x1382 <UART_Tx_NL>
}
    13ea:	08 95       	ret

000013ec <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    13ec:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    13f0:	80 91 c0 00 	lds	r24, 0x00C0
    13f4:	85 ff       	sbrs	r24, 5
    13f6:	fc cf       	rjmp	.-8      	; 0x13f0 <UART_Tx_Text_SP+0x4>
  UDR0 = val;
    13f8:	80 e2       	ldi	r24, 0x20	; 32
    13fa:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    13fe:	08 95       	ret

00001400 <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    1400:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1404:	80 91 c0 00 	lds	r24, 0x00C0
    1408:	85 ff       	sbrs	r24, 5
    140a:	fc cf       	rjmp	.-8      	; 0x1404 <UART_Tx_Text_CM+0x4>
  UDR0 = val;
    140c:	8c e2       	ldi	r24, 0x2C	; 44
    140e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    1412:	08 95       	ret

00001414 <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    1414:	bf 92       	push	r11
    1416:	cf 92       	push	r12
    1418:	df 92       	push	r13
    141a:	ef 92       	push	r14
    141c:	ff 92       	push	r15
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	6b 01       	movw	r12, r22
    1424:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    1426:	61 15       	cp	r22, r1
    1428:	71 05       	cpc	r23, r1
    142a:	81 05       	cpc	r24, r1
    142c:	91 05       	cpc	r25, r1
    142e:	31 f4       	brne	.+12     	; 0x143c <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    1430:	10 92 97 01 	sts	0x0197, r1
    UART.InputNumDigits = 1;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 9f 01 	sts	0x019F, r24
    143a:	23 c0       	rjmp	.+70     	; 0x1482 <UART_Determine_Digit_Numbers+0x6e>
    143c:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    143e:	0b 2d       	mov	r16, r11
    1440:	10 e0       	ldi	r17, 0x00	; 0
    1442:	0a 56       	subi	r16, 0x6A	; 106
    1444:	1e 4f       	sbci	r17, 0xFE	; 254
    1446:	c7 01       	movw	r24, r14
    1448:	b6 01       	movw	r22, r12
    144a:	2a e0       	ldi	r18, 0x0A	; 10
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
    1456:	f8 01       	movw	r30, r16
    1458:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    145a:	c7 01       	movw	r24, r14
    145c:	b6 01       	movw	r22, r12
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e0       	ldi	r20, 0x00	; 0
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
    146a:	c9 01       	movw	r24, r18
    146c:	da 01       	movw	r26, r20
    146e:	6c 01       	movw	r12, r24
    1470:	7d 01       	movw	r14, r26
      i++;
    1472:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    1474:	c1 14       	cp	r12, r1
    1476:	d1 04       	cpc	r13, r1
    1478:	e1 04       	cpc	r14, r1
    147a:	f1 04       	cpc	r15, r1
    147c:	01 f7       	brne	.-64     	; 0x143e <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    147e:	b0 92 9f 01 	sts	0x019F, r11
  }
}
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	08 95       	ret

00001492 <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1492:	e0 91 9f 01 	lds	r30, 0x019F
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1498:	2e 2f       	mov	r18, r30
    149a:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    149c:	e2 2f       	mov	r30, r18
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	ea 56       	subi	r30, 0x6A	; 106
    14a2:	fe 4f       	sbci	r31, 0xFE	; 254
    14a4:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14a6:	80 91 c0 00 	lds	r24, 0x00C0
    14aa:	85 ff       	sbrs	r24, 5
    14ac:	fc cf       	rjmp	.-8      	; 0x14a6 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    14ae:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    14b0:	90 93 c6 00 	sts	0x00C6, r25
    14b4:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    14b6:	ee 23       	and	r30, r30
    14b8:	79 f7       	brne	.-34     	; 0x1498 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    14ba:	08 95       	ret

000014bc <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    14bc:	9b 01       	movw	r18, r22
    14be:	ac 01       	movw	r20, r24
  if(num < 0){
    14c0:	97 ff       	sbrs	r25, 7
    14c2:	0e c0       	rjmp	.+28     	; 0x14e0 <UART_Tx_Number+0x24>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14c4:	80 91 c0 00 	lds	r24, 0x00C0
    14c8:	85 ff       	sbrs	r24, 5
    14ca:	fc cf       	rjmp	.-8      	; 0x14c4 <UART_Tx_Number+0x8>
  UDR0 = val;
    14cc:	8d e2       	ldi	r24, 0x2D	; 45
    14ce:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    14d2:	50 95       	com	r21
    14d4:	40 95       	com	r20
    14d6:	30 95       	com	r19
    14d8:	21 95       	neg	r18
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	4f 4f       	sbci	r20, 0xFF	; 255
    14de:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    14e0:	ca 01       	movw	r24, r20
    14e2:	b9 01       	movw	r22, r18
    14e4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    14e8:	0e 94 49 0a 	call	0x1492	; 0x1492 <UART_Tx_Number_Digits>
}
    14ec:	08 95       	ret

000014ee <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	ab 01       	movw	r20, r22
    14f6:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    14f8:	4f 3f       	cpi	r20, 0xFF	; 255
    14fa:	51 05       	cpc	r21, r1
    14fc:	61 05       	cpc	r22, r1
    14fe:	71 05       	cpc	r23, r1
    1500:	09 f0       	breq	.+2      	; 0x1504 <UART_Tx_Number_Hex+0x16>
    1502:	28 f4       	brcc	.+10     	; 0x150e <UART_Tx_Number_Hex+0x20>
    1504:	e8 e0       	ldi	r30, 0x08	; 8
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	c2 e0       	ldi	r28, 0x02	; 2
    150a:	d0 e0       	ldi	r29, 0x00	; 0
    150c:	11 c0       	rjmp	.+34     	; 0x1530 <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    150e:	40 30       	cpi	r20, 0x00	; 0
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	58 07       	cpc	r21, r24
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	68 07       	cpc	r22, r24
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	78 07       	cpc	r23, r24
    151c:	28 f0       	brcs	.+10     	; 0x1528 <UART_Tx_Number_Hex+0x3a>
    151e:	e0 e2       	ldi	r30, 0x20	; 32
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	c8 e0       	ldi	r28, 0x08	; 8
    1524:	d0 e0       	ldi	r29, 0x00	; 0
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <UART_Tx_Number_Hex+0x42>
    1528:	e0 e1       	ldi	r30, 0x10	; 16
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	c4 e0       	ldi	r28, 0x04	; 4
    152e:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1530:	80 91 c0 00 	lds	r24, 0x00C0
    1534:	85 ff       	sbrs	r24, 5
    1536:	fc cf       	rjmp	.-8      	; 0x1530 <UART_Tx_Number_Hex+0x42>
  UDR0 = val;
    1538:	80 e3       	ldi	r24, 0x30	; 48
    153a:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    153e:	80 91 c0 00 	lds	r24, 0x00C0
    1542:	85 ff       	sbrs	r24, 5
    1544:	fc cf       	rjmp	.-8      	; 0x153e <UART_Tx_Number_Hex+0x50>
  UDR0 = val;
    1546:	88 e7       	ldi	r24, 0x78	; 120
    1548:	80 93 c6 00 	sts	0x00C6, r24
    154c:	10 e0       	ldi	r17, 0x00	; 0
    154e:	1f c0       	rjmp	.+62     	; 0x158e <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    1550:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    1552:	db 01       	movw	r26, r22
    1554:	ca 01       	movw	r24, r20
    1556:	0e 2e       	mov	r0, r30
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <UART_Tx_Number_Hex+0x74>
    155a:	b6 95       	lsr	r27
    155c:	a7 95       	ror	r26
    155e:	97 95       	ror	r25
    1560:	87 95       	ror	r24
    1562:	0a 94       	dec	r0
    1564:	d2 f7       	brpl	.-12     	; 0x155a <UART_Tx_Number_Hex+0x6c>
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	8f 70       	andi	r24, 0x0F	; 15
    156a:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    156c:	8a 30       	cpi	r24, 0x0A	; 10
    156e:	91 05       	cpc	r25, r1
    1570:	20 f0       	brcs	.+8      	; 0x157a <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    1572:	9c 01       	movw	r18, r24
    1574:	29 5c       	subi	r18, 0xC9	; 201
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    157a:	9c 01       	movw	r18, r24
    157c:	20 5d       	subi	r18, 0xD0	; 208
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1580:	80 91 c0 00 	lds	r24, 0x00C0
    1584:	85 ff       	sbrs	r24, 5
    1586:	fc cf       	rjmp	.-8      	; 0x1580 <UART_Tx_Number_Hex+0x92>
  UDR0 = val;
    1588:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    158c:	1f 5f       	subi	r17, 0xFF	; 255
    158e:	81 2f       	mov	r24, r17
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	8c 17       	cp	r24, r28
    1594:	9d 07       	cpc	r25, r29
    1596:	e0 f2       	brcs	.-72     	; 0x1550 <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	08 95       	ret

000015a0 <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	ab 01       	movw	r20, r22
    15b2:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    15b4:	4f 3f       	cpi	r20, 0xFF	; 255
    15b6:	51 05       	cpc	r21, r1
    15b8:	61 05       	cpc	r22, r1
    15ba:	71 05       	cpc	r23, r1
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <UART_Tx_Number_Bin+0x20>
    15be:	10 f4       	brcc	.+4      	; 0x15c4 <UART_Tx_Number_Bin+0x24>
    15c0:	97 e0       	ldi	r25, 0x07	; 7
    15c2:	0b c0       	rjmp	.+22     	; 0x15da <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    15c4:	40 30       	cpi	r20, 0x00	; 0
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	58 07       	cpc	r21, r24
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	68 07       	cpc	r22, r24
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	78 07       	cpc	r23, r24
    15d2:	10 f0       	brcs	.+4      	; 0x15d8 <UART_Tx_Number_Bin+0x38>
    15d4:	9f e1       	ldi	r25, 0x1F	; 31
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <UART_Tx_Number_Bin+0x3a>
    15d8:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15da:	80 91 c0 00 	lds	r24, 0x00C0
    15de:	85 ff       	sbrs	r24, 5
    15e0:	fc cf       	rjmp	.-8      	; 0x15da <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;
    15e2:	80 e3       	ldi	r24, 0x30	; 48
    15e4:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15e8:	80 91 c0 00 	lds	r24, 0x00C0
    15ec:	85 ff       	sbrs	r24, 5
    15ee:	fc cf       	rjmp	.-8      	; 0x15e8 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;
    15f0:	82 e6       	ldi	r24, 0x62	; 98
    15f2:	80 93 c6 00 	sts	0x00C6, r24
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    15fa:	e9 2f       	mov	r30, r25
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    15fe:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1600:	11 e3       	ldi	r17, 0x31	; 49
    1602:	ef 01       	movw	r28, r30
    1604:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1606:	cf 01       	movw	r24, r30
    1608:	82 1b       	sub	r24, r18
    160a:	93 0b       	sbc	r25, r19
    160c:	6a 01       	movw	r12, r20
    160e:	7b 01       	movw	r14, r22
    1610:	04 c0       	rjmp	.+8      	; 0x161a <UART_Tx_Number_Bin+0x7a>
    1612:	f6 94       	lsr	r15
    1614:	e7 94       	ror	r14
    1616:	d7 94       	ror	r13
    1618:	c7 94       	ror	r12
    161a:	8a 95       	dec	r24
    161c:	d2 f7       	brpl	.-12     	; 0x1612 <UART_Tx_Number_Bin+0x72>
    161e:	d7 01       	movw	r26, r14
    1620:	c6 01       	movw	r24, r12
    1622:	81 70       	andi	r24, 0x01	; 1
    1624:	90 70       	andi	r25, 0x00	; 0
    1626:	89 2b       	or	r24, r25
    1628:	39 f0       	breq	.+14     	; 0x1638 <UART_Tx_Number_Bin+0x98>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    162a:	80 91 c0 00 	lds	r24, 0x00C0
    162e:	85 ff       	sbrs	r24, 5
    1630:	fc cf       	rjmp	.-8      	; 0x162a <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;
    1632:	10 93 c6 00 	sts	0x00C6, r17
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <UART_Tx_Number_Bin+0xa4>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1638:	80 91 c0 00 	lds	r24, 0x00C0
    163c:	85 ff       	sbrs	r24, 5
    163e:	fc cf       	rjmp	.-8      	; 0x1638 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;
    1640:	00 93 c6 00 	sts	0x00C6, r16
    1644:	2f 5f       	subi	r18, 0xFF	; 255
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1648:	2c 17       	cp	r18, r28
    164a:	3d 07       	cpc	r19, r29
    164c:	e1 f6       	brne	.-72     	; 0x1606 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	08 95       	ret

00001660 <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    1660:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <UART_Tx_Number>
  UART_Tx_NL();
    1664:	0e 94 c1 09 	call	0x1382	; 0x1382 <UART_Tx_NL>
}
    1668:	08 95       	ret

0000166a <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    166a:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    166e:	80 91 c0 00 	lds	r24, 0x00C0
    1672:	85 ff       	sbrs	r24, 5
    1674:	fc cf       	rjmp	.-8      	; 0x166e <UART_Tx_Number_SP+0x4>
  UDR0 = val;
    1676:	80 e2       	ldi	r24, 0x20	; 32
    1678:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    167c:	08 95       	ret

0000167e <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    167e:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1682:	80 91 c0 00 	lds	r24, 0x00C0
    1686:	85 ff       	sbrs	r24, 5
    1688:	fc cf       	rjmp	.-8      	; 0x1682 <UART_Tx_Number_CM+0x4>
  UDR0 = val;
    168a:	8c e2       	ldi	r24, 0x2C	; 44
    168c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    1690:	08 95       	ret

00001692 <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    1692:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_Number_Hex>
  UART_Tx_NL();
    1696:	0e 94 c1 09 	call	0x1382	; 0x1382 <UART_Tx_NL>
}
    169a:	08 95       	ret

0000169c <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    169c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16a0:	80 91 c0 00 	lds	r24, 0x00C0
    16a4:	85 ff       	sbrs	r24, 5
    16a6:	fc cf       	rjmp	.-8      	; 0x16a0 <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;
    16a8:	80 e2       	ldi	r24, 0x20	; 32
    16aa:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    16ae:	08 95       	ret

000016b0 <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    16b0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16b4:	80 91 c0 00 	lds	r24, 0x00C0
    16b8:	85 ff       	sbrs	r24, 5
    16ba:	fc cf       	rjmp	.-8      	; 0x16b4 <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;
    16bc:	8c e2       	ldi	r24, 0x2C	; 44
    16be:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    16c2:	08 95       	ret

000016c4 <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    16c4:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_Tx_Number_Bin>
  UART_Tx_NL();
    16c8:	0e 94 c1 09 	call	0x1382	; 0x1382 <UART_Tx_NL>
}
    16cc:	08 95       	ret

000016ce <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    16ce:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16d2:	80 91 c0 00 	lds	r24, 0x00C0
    16d6:	85 ff       	sbrs	r24, 5
    16d8:	fc cf       	rjmp	.-8      	; 0x16d2 <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;
    16da:	80 e2       	ldi	r24, 0x20	; 32
    16dc:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    16e0:	08 95       	ret

000016e2 <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    16e2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16e6:	80 91 c0 00 	lds	r24, 0x00C0
    16ea:	85 ff       	sbrs	r24, 5
    16ec:	fc cf       	rjmp	.-8      	; 0x16e6 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;
    16ee:	8c e2       	ldi	r24, 0x2C	; 44
    16f0:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    16f4:	08 95       	ret

000016f6 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	7a 01       	movw	r14, r20
    1700:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1702:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1706:	80 91 c0 00 	lds	r24, 0x00C0
    170a:	85 ff       	sbrs	r24, 5
    170c:	fc cf       	rjmp	.-8      	; 0x1706 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;
    170e:	80 e2       	ldi	r24, 0x20	; 32
    1710:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    1714:	c8 01       	movw	r24, r16
    1716:	b7 01       	movw	r22, r14
    1718:	0e 94 30 0b 	call	0x1660	; 0x1660 <UART_Tx_Number_NL>
}
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	08 95       	ret

00001726 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	7a 01       	movw	r14, r20
    1730:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1732:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1736:	80 91 c0 00 	lds	r24, 0x00C0
    173a:	85 ff       	sbrs	r24, 5
    173c:	fc cf       	rjmp	.-8      	; 0x1736 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;
    173e:	80 e2       	ldi	r24, 0x20	; 32
    1740:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    1744:	c8 01       	movw	r24, r16
    1746:	b7 01       	movw	r22, r14
    1748:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_Tx_Number_SP>
}
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	08 95       	ret

00001756 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    1756:	ef 92       	push	r14
    1758:	ff 92       	push	r15
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
    175e:	7a 01       	movw	r14, r20
    1760:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1762:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1766:	80 91 c0 00 	lds	r24, 0x00C0
    176a:	85 ff       	sbrs	r24, 5
    176c:	fc cf       	rjmp	.-8      	; 0x1766 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    1774:	c8 01       	movw	r24, r16
    1776:	b7 01       	movw	r22, r14
    1778:	0e 94 3f 0b 	call	0x167e	; 0x167e <UART_Tx_Number_CM>
}
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	08 95       	ret

00001786 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    1786:	ef 92       	push	r14
    1788:	ff 92       	push	r15
    178a:	0f 93       	push	r16
    178c:	1f 93       	push	r17
    178e:	7a 01       	movw	r14, r20
    1790:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1792:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1796:	80 91 c0 00 	lds	r24, 0x00C0
    179a:	85 ff       	sbrs	r24, 5
    179c:	fc cf       	rjmp	.-8      	; 0x1796 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;
    179e:	80 e2       	ldi	r24, 0x20	; 32
    17a0:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    17a4:	c8 01       	movw	r24, r16
    17a6:	b7 01       	movw	r22, r14
    17a8:	0e 94 49 0b 	call	0x1692	; 0x1692 <UART_Tx_Number_Hex_NL>
}
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	08 95       	ret

000017b6 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    17b6:	ef 92       	push	r14
    17b8:	ff 92       	push	r15
    17ba:	0f 93       	push	r16
    17bc:	1f 93       	push	r17
    17be:	7a 01       	movw	r14, r20
    17c0:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    17c2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17c6:	80 91 c0 00 	lds	r24, 0x00C0
    17ca:	85 ff       	sbrs	r24, 5
    17cc:	fc cf       	rjmp	.-8      	; 0x17c6 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;
    17ce:	80 e2       	ldi	r24, 0x20	; 32
    17d0:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    17d4:	c8 01       	movw	r24, r16
    17d6:	b7 01       	movw	r22, r14
    17d8:	0e 94 4e 0b 	call	0x169c	; 0x169c <UART_Tx_Number_Hex_SP>
}
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	08 95       	ret

000017e6 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	7a 01       	movw	r14, r20
    17f0:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    17f2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17f6:	80 91 c0 00 	lds	r24, 0x00C0
    17fa:	85 ff       	sbrs	r24, 5
    17fc:	fc cf       	rjmp	.-8      	; 0x17f6 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;
    17fe:	80 e2       	ldi	r24, 0x20	; 32
    1800:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    1804:	c8 01       	movw	r24, r16
    1806:	b7 01       	movw	r22, r14
    1808:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <UART_Tx_Number_Hex_CM>
}
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	08 95       	ret

00001816 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	7a 01       	movw	r14, r20
    1820:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1822:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1826:	80 91 c0 00 	lds	r24, 0x00C0
    182a:	85 ff       	sbrs	r24, 5
    182c:	fc cf       	rjmp	.-8      	; 0x1826 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;
    182e:	80 e2       	ldi	r24, 0x20	; 32
    1830:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    1834:	c8 01       	movw	r24, r16
    1836:	b7 01       	movw	r22, r14
    1838:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <UART_Tx_Number_Bin_NL>
}
    183c:	1f 91       	pop	r17
    183e:	0f 91       	pop	r16
    1840:	ff 90       	pop	r15
    1842:	ef 90       	pop	r14
    1844:	08 95       	ret

00001846 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	7a 01       	movw	r14, r20
    1850:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1852:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1856:	80 91 c0 00 	lds	r24, 0x00C0
    185a:	85 ff       	sbrs	r24, 5
    185c:	fc cf       	rjmp	.-8      	; 0x1856 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;
    185e:	80 e2       	ldi	r24, 0x20	; 32
    1860:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    1864:	c8 01       	movw	r24, r16
    1866:	b7 01       	movw	r22, r14
    1868:	0e 94 67 0b 	call	0x16ce	; 0x16ce <UART_Tx_Number_Bin_SP>
}
    186c:	1f 91       	pop	r17
    186e:	0f 91       	pop	r16
    1870:	ff 90       	pop	r15
    1872:	ef 90       	pop	r14
    1874:	08 95       	ret

00001876 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    1876:	ef 92       	push	r14
    1878:	ff 92       	push	r15
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	7a 01       	movw	r14, r20
    1880:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    1882:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1886:	80 91 c0 00 	lds	r24, 0x00C0
    188a:	85 ff       	sbrs	r24, 5
    188c:	fc cf       	rjmp	.-8      	; 0x1886 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;
    188e:	80 e2       	ldi	r24, 0x20	; 32
    1890:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    1894:	c8 01       	movw	r24, r16
    1896:	b7 01       	movw	r22, r14
    1898:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <UART_Tx_Number_Bin_CM>
}
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	08 95       	ret

000018a6 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    18aa:	fc 01       	movw	r30, r24
    18ac:	ea 56       	subi	r30, 0x6A	; 106
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	13 86       	std	Z+11, r1	; 0x0b
    18b2:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    18b4:	80 34       	cpi	r24, 0x40	; 64
    18b6:	91 05       	cpc	r25, r1
    18b8:	c1 f7       	brne	.-16     	; 0x18aa <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    18ba:	10 92 e4 01 	sts	0x01E4, r1
    18be:	10 92 e3 01 	sts	0x01E3, r1
}
    18c2:	08 95       	ret

000018c4 <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    18c4:	fc 01       	movw	r30, r24
    18c6:	ea 56       	subi	r30, 0x6A	; 106
    18c8:	fe 4f       	sbci	r31, 0xFE	; 254
    18ca:	83 85       	ldd	r24, Z+11	; 0x0b
}
    18cc:	08 95       	ret

000018ce <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    18ce:	80 91 e3 01 	lds	r24, 0x01E3
    18d2:	90 91 e4 01 	lds	r25, 0x01E4
}
    18d6:	08 95       	ret

000018d8 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
    18d8:	80 91 ec 01 	lds	r24, 0x01EC
}
    18dc:	08 95       	ret

000018de <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    18de:	80 91 e3 01 	lds	r24, 0x01E3
    18e2:	90 91 e4 01 	lds	r25, 0x01E4
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
    18e6:	08 95       	ret

000018e8 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
    18e8:	20 91 e7 01 	lds	r18, 0x01E7
    18ec:	30 91 e8 01 	lds	r19, 0x01E8
}
    18f0:	c9 01       	movw	r24, r18
    18f2:	08 95       	ret

000018f4 <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
    18f4:	20 91 e9 01 	lds	r18, 0x01E9
    18f8:	30 91 ea 01 	lds	r19, 0x01EA
}
    18fc:	c9 01       	movw	r24, r18
    18fe:	08 95       	ret

00001900 <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
    1900:	80 91 eb 01 	lds	r24, 0x01EB
}
    1904:	08 95       	ret

00001906 <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
    1906:	80 91 ed 01 	lds	r24, 0x01ED
}
    190a:	08 95       	ret

0000190c <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    190c:	10 92 ec 01 	sts	0x01EC, r1
}
    1910:	08 95       	ret

00001912 <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1916:	fc 01       	movw	r30, r24
    1918:	ea 56       	subi	r30, 0x6A	; 106
    191a:	fe 4f       	sbci	r31, 0xFE	; 254
    191c:	13 86       	std	Z+11, r1	; 0x0b
    191e:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1920:	80 34       	cpi	r24, 0x40	; 64
    1922:	91 05       	cpc	r25, r1
    1924:	c1 f7       	brne	.-16     	; 0x1916 <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1926:	10 92 e4 01 	sts	0x01E4, r1
    192a:	10 92 e3 01 	sts	0x01E3, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	80 93 ed 01 	sts	0x01ED, r24
}
    1934:	08 95       	ret

00001936 <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
    1936:	ac 01       	movw	r20, r24
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	0a c0       	rjmp	.+20     	; 0x1952 <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    193e:	f9 01       	movw	r30, r18
    1940:	ea 56       	subi	r30, 0x6A	; 106
    1942:	fe 4f       	sbci	r31, 0xFE	; 254
    1944:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
    1946:	fa 01       	movw	r30, r20
    1948:	e2 0f       	add	r30, r18
    194a:	f3 1f       	adc	r31, r19
    194c:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    194e:	2f 5f       	subi	r18, 0xFF	; 255
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1952:	80 91 e3 01 	lds	r24, 0x01E3
    1956:	90 91 e4 01 	lds	r25, 0x01E4
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	28 17       	cp	r18, r24
    195e:	39 07       	cpc	r19, r25
    1960:	70 f3       	brcs	.-36     	; 0x193e <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
    1962:	08 95       	ret

00001964 <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	0c c0       	rjmp	.+24     	; 0x1982 <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    196a:	f9 01       	movw	r30, r18
    196c:	ea 56       	subi	r30, 0x6A	; 106
    196e:	fe 4f       	sbci	r31, 0xFE	; 254
    1970:	93 85       	ldd	r25, Z+11	; 0x0b
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1972:	80 91 c0 00 	lds	r24, 0x00C0
    1976:	85 ff       	sbrs	r24, 5
    1978:	fc cf       	rjmp	.-8      	; 0x1972 <UART_Data_Print_Buf+0xe>
  UDR0 = val;
    197a:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    197e:	2f 5f       	subi	r18, 0xFF	; 255
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1982:	80 91 e3 01 	lds	r24, 0x01E3
    1986:	90 91 e4 01 	lds	r25, 0x01E4
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	28 17       	cp	r18, r24
    198e:	39 07       	cpc	r19, r25
    1990:	60 f3       	brcs	.-40     	; 0x196a <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
    1992:	0e 94 c1 09 	call	0x1382	; 0x1382 <UART_Tx_NL>
}
    1996:	08 95       	ret

00001998 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
    1998:	80 91 96 01 	lds	r24, 0x0196
}
    199c:	08 95       	ret

0000199e <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
    199e:	10 92 96 01 	sts	0x0196, r1
}
    19a2:	08 95       	ret

000019a4 <UART_ISR_Handler>:


/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    19a4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <UART_Rx_Byte>
    19a8:	80 93 a0 01 	sts	0x01A0, r24
  if(UART.Error == 0x00){
    19ac:	80 91 96 01 	lds	r24, 0x0196
    19b0:	88 23       	and	r24, r24
    19b2:	11 f5       	brne	.+68     	; 0x19f8 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    19b4:	e0 91 e3 01 	lds	r30, 0x01E3
    19b8:	f0 91 e4 01 	lds	r31, 0x01E4
    19bc:	80 91 a0 01 	lds	r24, 0x01A0
    19c0:	ea 56       	subi	r30, 0x6A	; 106
    19c2:	fe 4f       	sbci	r31, 0xFE	; 254
    19c4:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    19c6:	80 91 e3 01 	lds	r24, 0x01E3
    19ca:	90 91 e4 01 	lds	r25, 0x01E4
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	90 93 e4 01 	sts	0x01E4, r25
    19d4:	80 93 e3 01 	sts	0x01E3, r24
    if(UART.BufIndex >= UART.BufSize){
    19d8:	20 91 e3 01 	lds	r18, 0x01E3
    19dc:	30 91 e4 01 	lds	r19, 0x01E4
    19e0:	80 91 e1 01 	lds	r24, 0x01E1
    19e4:	90 91 e2 01 	lds	r25, 0x01E2
    19e8:	28 17       	cp	r18, r24
    19ea:	39 07       	cpc	r19, r25
    19ec:	38 f0       	brcs	.+14     	; 0x19fc <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    19ee:	10 92 e4 01 	sts	0x01E4, r1
    19f2:	10 92 e3 01 	sts	0x01E3, r1
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    19f8:	10 92 a0 01 	sts	0x01A0, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    19fc:	80 91 e6 01 	lds	r24, 0x01E6
    1a00:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
    1a04:	80 91 e5 01 	lds	r24, 0x01E5
    1a08:	88 23       	and	r24, r24
    1a0a:	31 f4       	brne	.+12     	; 0x1a18 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1a0c:	87 e0       	ldi	r24, 0x07	; 7
    1a0e:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 93 e5 01 	sts	0x01E5, r24
    1a18:	08 95       	ret

00001a1a <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	0f 92       	push	r0
    1a22:	11 24       	eor	r1, r1
    1a24:	2f 93       	push	r18
    1a26:	3f 93       	push	r19
    1a28:	4f 93       	push	r20
    1a2a:	5f 93       	push	r21
    1a2c:	6f 93       	push	r22
    1a2e:	7f 93       	push	r23
    1a30:	8f 93       	push	r24
    1a32:	9f 93       	push	r25
    1a34:	af 93       	push	r26
    1a36:	bf 93       	push	r27
    1a38:	ef 93       	push	r30
    1a3a:	ff 93       	push	r31
  UART_ISR_Handler();
    1a3c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <UART_ISR_Handler>
  //Clear flag if necessary
}
    1a40:	ff 91       	pop	r31
    1a42:	ef 91       	pop	r30
    1a44:	bf 91       	pop	r27
    1a46:	af 91       	pop	r26
    1a48:	9f 91       	pop	r25
    1a4a:	8f 91       	pop	r24
    1a4c:	7f 91       	pop	r23
    1a4e:	6f 91       	pop	r22
    1a50:	5f 91       	pop	r21
    1a52:	4f 91       	pop	r20
    1a54:	3f 91       	pop	r19
    1a56:	2f 91       	pop	r18
    1a58:	0f 90       	pop	r0
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	0f 90       	pop	r0
    1a5e:	1f 90       	pop	r1
    1a60:	18 95       	reti

00001a62 <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    1a62:	36 2f       	mov	r19, r22
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	28 27       	eor	r18, r24
    1a68:	39 27       	eor	r19, r25
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    1a6c:	61 e2       	ldi	r22, 0x21	; 33
    1a6e:	70 e1       	ldi	r23, 0x10	; 16
    1a70:	c9 01       	movw	r24, r18
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    1a76:	37 ff       	sbrs	r19, 7
    1a78:	04 c0       	rjmp	.+8      	; 0x1a82 <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    1a7a:	9c 01       	movw	r18, r24
    1a7c:	26 27       	eor	r18, r22
    1a7e:	37 27       	eor	r19, r23
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    1a82:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    1a84:	4f 5f       	subi	r20, 0xFF	; 255
    1a86:	48 30       	cpi	r20, 0x08	; 8
    1a88:	99 f7       	brne	.-26     	; 0x1a70 <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    1a8a:	c9 01       	movw	r24, r18
    1a8c:	08 95       	ret

00001a8e <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	06 2f       	mov	r16, r22
    1a98:	ec 01       	movw	r28, r24
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	10 e0       	ldi	r17, 0x00	; 0
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	69 91       	ld	r22, Y+
    1aa6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <UART_CRC_Calculate_Byte>
    1aaa:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    1aac:	1f 5f       	subi	r17, 0xFF	; 255
    1aae:	10 17       	cp	r17, r16
    1ab0:	c0 f3       	brcs	.-16     	; 0x1aa2 <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    1ab2:	c9 01       	movw	r24, r18
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1abe:	60 91 e3 01 	lds	r22, 0x01E3
    1ac2:	70 91 e4 01 	lds	r23, 0x01E4

/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    1ac6:	62 50       	subi	r22, 0x02	; 2
    1ac8:	81 ea       	ldi	r24, 0xA1	; 161
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <UART_CRC_Calculate_Block>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1ad0:	e0 91 e3 01 	lds	r30, 0x01E3
    1ad4:	f0 91 e4 01 	lds	r31, 0x01E4
/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1ada:	ec 56       	subi	r30, 0x6C	; 108
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	23 85       	ldd	r18, Z+11	; 0x0b

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
    1ae0:	52 2f       	mov	r21, r18
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1ae4:	e0 91 e3 01 	lds	r30, 0x01E3
    1ae8:	f0 91 e4 01 	lds	r31, 0x01E4
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1aee:	eb 56       	subi	r30, 0x6B	; 107
    1af0:	fe 4f       	sbci	r31, 0xFE	; 254
    1af2:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	42 2b       	or	r20, r18
    1af8:	53 2b       	or	r21, r19
  UART.RxPacket.CalculatedCRC = crc_calc;
    1afa:	90 93 e8 01 	sts	0x01E8, r25
    1afe:	80 93 e7 01 	sts	0x01E7, r24
  UART.RxPacket.ReceivedCRC = crc_recv;
    1b02:	50 93 ea 01 	sts	0x01EA, r21
    1b06:	40 93 e9 01 	sts	0x01E9, r20
  if(UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC){
    1b0a:	20 91 e7 01 	lds	r18, 0x01E7
    1b0e:	30 91 e8 01 	lds	r19, 0x01E8
    1b12:	80 91 e9 01 	lds	r24, 0x01E9
    1b16:	90 91 ea 01 	lds	r25, 0x01EA
    1b1a:	28 17       	cp	r18, r24
    1b1c:	39 07       	cpc	r19, r25
    1b1e:	21 f4       	brne	.+8      	; 0x1b28 <UART_RX_Packet_CRC_Check+0x6a>
    UART.RxPacket.CRCStatus = UART_TRUE;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 eb 01 	sts	0x01EB, r24
    1b26:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
    1b28:	10 92 eb 01 	sts	0x01EB, r1
    1b2c:	08 95       	ret

00001b2e <UART_Timer_ISR_Handler>:
  }
  
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    1b2e:	80 91 e5 01 	lds	r24, 0x01E5
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	21 f4       	brne	.+8      	; 0x1b3e <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    1b36:	10 92 b1 00 	sts	0x00B1, r1
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
    1b3a:	10 92 e5 01 	sts	0x01E5, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1b3e:	80 91 e3 01 	lds	r24, 0x01E3
    1b42:	90 91 e4 01 	lds	r25, 0x01E4
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    1b46:	88 23       	and	r24, r24
    1b48:	71 f0       	breq	.+28     	; 0x1b66 <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
    1b4a:	80 91 ed 01 	lds	r24, 0x01ED
    1b4e:	88 23       	and	r24, r24
    1b50:	19 f4       	brne	.+6      	; 0x1b58 <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
    1b52:	80 e1       	ldi	r24, 0x10	; 16
    1b54:	80 93 96 01 	sts	0x0196, r24
	}
    UART_RX_Packet_CRC_Check();
    1b58:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	80 93 ec 01 	sts	0x01EC, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
    1b62:	10 92 ed 01 	sts	0x01ED, r1
    1b66:	08 95       	ret

00001b68 <__vector_9>:
  TCNT2 = UART.Timer.ResetVal;
}



ISR(TIMER2_OVF_vect){
    1b68:	1f 92       	push	r1
    1b6a:	0f 92       	push	r0
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	0f 92       	push	r0
    1b70:	11 24       	eor	r1, r1
    1b72:	2f 93       	push	r18
    1b74:	3f 93       	push	r19
    1b76:	4f 93       	push	r20
    1b78:	5f 93       	push	r21
    1b7a:	6f 93       	push	r22
    1b7c:	7f 93       	push	r23
    1b7e:	8f 93       	push	r24
    1b80:	9f 93       	push	r25
    1b82:	af 93       	push	r26
    1b84:	bf 93       	push	r27
    1b86:	ef 93       	push	r30
    1b88:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    1b8a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <UART_Timer_ISR_Handler>
  //Clear flag if necessary
}
    1b8e:	ff 91       	pop	r31
    1b90:	ef 91       	pop	r30
    1b92:	bf 91       	pop	r27
    1b94:	af 91       	pop	r26
    1b96:	9f 91       	pop	r25
    1b98:	8f 91       	pop	r24
    1b9a:	7f 91       	pop	r23
    1b9c:	6f 91       	pop	r22
    1b9e:	5f 91       	pop	r21
    1ba0:	4f 91       	pop	r20
    1ba2:	3f 91       	pop	r19
    1ba4:	2f 91       	pop	r18
    1ba6:	0f 90       	pop	r0
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	0f 90       	pop	r0
    1bac:	1f 90       	pop	r1
    1bae:	18 95       	reti

00001bb0 <UART_RX_Packet_Read_Complete>:
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
  }
}

void UART_RX_Packet_Read_Complete(void){
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1bb4:	fc 01       	movw	r30, r24
    1bb6:	ea 56       	subi	r30, 0x6A	; 106
    1bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bba:	13 86       	std	Z+11, r1	; 0x0b
    1bbc:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1bbe:	80 34       	cpi	r24, 0x40	; 64
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	c1 f7       	brne	.-16     	; 0x1bb4 <UART_RX_Packet_Read_Complete+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1bc4:	10 92 e4 01 	sts	0x01E4, r1
    1bc8:	10 92 e3 01 	sts	0x01E3, r1
uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
}

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    1bcc:	10 92 ec 01 	sts	0x01EC, r1
}

void UART_RX_Packet_Read_Complete(void){
  UART_Buf_Flush();
  UART_Data_Clear_Available_Flag();
  UART_Data_Clear_Read_Complete_Flag();
    1bd0:	0e 94 89 0c 	call	0x1912	; 0x1912 <UART_Data_Clear_Read_Complete_Flag>
}
    1bd4:	08 95       	ret

00001bd6 <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    1bd6:	ef 92       	push	r14
    1bd8:	ff 92       	push	r15
    1bda:	0f 93       	push	r16
    1bdc:	1f 93       	push	r17
    1bde:	7b 01       	movw	r14, r22
    1be0:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    1be2:	0e 94 e7 08 	call	0x11ce	; 0x11ce <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1be6:	10 92 e8 01 	sts	0x01E8, r1
    1bea:	10 92 e7 01 	sts	0x01E7, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1bee:	10 92 ea 01 	sts	0x01EA, r1
    1bf2:	10 92 e9 01 	sts	0x01E9, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1bf6:	10 92 eb 01 	sts	0x01EB, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1bfa:	10 92 ec 01 	sts	0x01EC, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	80 93 ed 01 	sts	0x01ED, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1c04:	10 92 e5 01 	sts	0x01E5, r1
  UART.Timer.ResetVal = UART_NULL;
    1c08:	10 92 e6 01 	sts	0x01E6, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    1c0c:	c8 01       	movw	r24, r16
    1c0e:	b7 01       	movw	r22, r14
    1c10:	0e 94 1e 09 	call	0x123c	; 0x123c <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1c14:	80 91 c1 00 	lds	r24, 0x00C1
    1c18:	88 60       	ori	r24, 0x08	; 8
    1c1a:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c1e:	96 e0       	ldi	r25, 0x06	; 6
    1c20:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1c24:	80 91 c1 00 	lds	r24, 0x00C1
    1c28:	80 61       	ori	r24, 0x10	; 16
    1c2a:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c2e:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1c32:	80 91 c1 00 	lds	r24, 0x00C1
    1c36:	80 68       	ori	r24, 0x80	; 128
    1c38:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    1c3c:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    1c3e:	0e 94 82 09 	call	0x1304	; 0x1304 <UART_Timer_Init>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1c46:	fc 01       	movw	r30, r24
    1c48:	ea 56       	subi	r30, 0x6A	; 106
    1c4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c4c:	13 86       	std	Z+11, r1	; 0x0b
    1c4e:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1c50:	80 34       	cpi	r24, 0x40	; 64
    1c52:	91 05       	cpc	r25, r1
    1c54:	c1 f7       	brne	.-16     	; 0x1c46 <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1c56:	10 92 e4 01 	sts	0x01E4, r1
    1c5a:	10 92 e3 01 	sts	0x01E3, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	08 95       	ret

00001c68 <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    1c68:	10 92 1c 01 	sts	0x011C, r1
    1c6c:	10 92 1d 01 	sts	0x011D, r1
    1c70:	10 92 1e 01 	sts	0x011E, r1
    1c74:	10 92 1f 01 	sts	0x011F, r1
  PID.Input.Ki = 0;
    1c78:	10 92 20 01 	sts	0x0120, r1
    1c7c:	10 92 21 01 	sts	0x0121, r1
    1c80:	10 92 22 01 	sts	0x0122, r1
    1c84:	10 92 23 01 	sts	0x0123, r1
  PID.Input.Kd = 0;
    1c88:	10 92 24 01 	sts	0x0124, r1
    1c8c:	10 92 25 01 	sts	0x0125, r1
    1c90:	10 92 26 01 	sts	0x0126, r1
    1c94:	10 92 27 01 	sts	0x0127, r1
  PID.Input.SetPoint = 0;
    1c98:	10 92 28 01 	sts	0x0128, r1
    1c9c:	10 92 29 01 	sts	0x0129, r1
    1ca0:	10 92 2a 01 	sts	0x012A, r1
    1ca4:	10 92 2b 01 	sts	0x012B, r1
  PID.Input.ProcessValue = 0;
    1ca8:	10 92 2c 01 	sts	0x012C, r1
    1cac:	10 92 2d 01 	sts	0x012D, r1
    1cb0:	10 92 2e 01 	sts	0x012E, r1
    1cb4:	10 92 2f 01 	sts	0x012F, r1
  PID.Error.PError = 0;
    1cb8:	10 92 30 01 	sts	0x0130, r1
    1cbc:	10 92 31 01 	sts	0x0131, r1
    1cc0:	10 92 32 01 	sts	0x0132, r1
    1cc4:	10 92 33 01 	sts	0x0133, r1
  PID.Error.DError = 0;
    1cc8:	10 92 34 01 	sts	0x0134, r1
    1ccc:	10 92 35 01 	sts	0x0135, r1
    1cd0:	10 92 36 01 	sts	0x0136, r1
    1cd4:	10 92 37 01 	sts	0x0137, r1
  PID.Error.IError = 0;
    1cd8:	10 92 38 01 	sts	0x0138, r1
    1cdc:	10 92 39 01 	sts	0x0139, r1
    1ce0:	10 92 3a 01 	sts	0x013A, r1
    1ce4:	10 92 3b 01 	sts	0x013B, r1
  PID.Error.IErrorLimit = 0;
    1ce8:	10 92 3c 01 	sts	0x013C, r1
    1cec:	10 92 3d 01 	sts	0x013D, r1
    1cf0:	10 92 3e 01 	sts	0x013E, r1
    1cf4:	10 92 3f 01 	sts	0x013F, r1
  PID.Error.LastError = 0;
    1cf8:	10 92 40 01 	sts	0x0140, r1
    1cfc:	10 92 41 01 	sts	0x0141, r1
    1d00:	10 92 42 01 	sts	0x0142, r1
    1d04:	10 92 43 01 	sts	0x0143, r1
  PID.Products.PError = 0;
    1d08:	10 92 44 01 	sts	0x0144, r1
    1d0c:	10 92 45 01 	sts	0x0145, r1
    1d10:	10 92 46 01 	sts	0x0146, r1
    1d14:	10 92 47 01 	sts	0x0147, r1
  PID.Products.IError = 0;
    1d18:	10 92 48 01 	sts	0x0148, r1
    1d1c:	10 92 49 01 	sts	0x0149, r1
    1d20:	10 92 4a 01 	sts	0x014A, r1
    1d24:	10 92 4b 01 	sts	0x014B, r1
  PID.Products.DError = 0;
    1d28:	10 92 4c 01 	sts	0x014C, r1
    1d2c:	10 92 4d 01 	sts	0x014D, r1
    1d30:	10 92 4e 01 	sts	0x014E, r1
    1d34:	10 92 4f 01 	sts	0x014F, r1
  PID.Products.ScaleFact = 0;
    1d38:	10 92 50 01 	sts	0x0150, r1
    1d3c:	10 92 51 01 	sts	0x0151, r1
    1d40:	10 92 52 01 	sts	0x0152, r1
    1d44:	10 92 53 01 	sts	0x0153, r1
  PID.Output = 0;
    1d48:	10 92 54 01 	sts	0x0154, r1
    1d4c:	10 92 55 01 	sts	0x0155, r1
    1d50:	10 92 56 01 	sts	0x0156, r1
    1d54:	10 92 57 01 	sts	0x0157, r1
  PID.OutputNonNegative = 0;
    1d58:	10 92 58 01 	sts	0x0158, r1
    1d5c:	10 92 59 01 	sts	0x0159, r1
    1d60:	10 92 5a 01 	sts	0x015A, r1
    1d64:	10 92 5b 01 	sts	0x015B, r1
}
    1d68:	08 95       	ret

00001d6a <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1d6a:	60 93 1c 01 	sts	0x011C, r22
    1d6e:	70 93 1d 01 	sts	0x011D, r23
    1d72:	80 93 1e 01 	sts	0x011E, r24
    1d76:	90 93 1f 01 	sts	0x011F, r25
}
    1d7a:	08 95       	ret

00001d7c <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1d7c:	60 93 20 01 	sts	0x0120, r22
    1d80:	70 93 21 01 	sts	0x0121, r23
    1d84:	80 93 22 01 	sts	0x0122, r24
    1d88:	90 93 23 01 	sts	0x0123, r25
}
    1d8c:	08 95       	ret

00001d8e <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1d8e:	60 93 24 01 	sts	0x0124, r22
    1d92:	70 93 25 01 	sts	0x0125, r23
    1d96:	80 93 26 01 	sts	0x0126, r24
    1d9a:	90 93 27 01 	sts	0x0127, r25
}
    1d9e:	08 95       	ret

00001da0 <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    1da0:	ef 92       	push	r14
    1da2:	ff 92       	push	r15
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1da8:	60 93 1c 01 	sts	0x011C, r22
    1dac:	70 93 1d 01 	sts	0x011D, r23
    1db0:	80 93 1e 01 	sts	0x011E, r24
    1db4:	90 93 1f 01 	sts	0x011F, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1db8:	20 93 20 01 	sts	0x0120, r18
    1dbc:	30 93 21 01 	sts	0x0121, r19
    1dc0:	40 93 22 01 	sts	0x0122, r20
    1dc4:	50 93 23 01 	sts	0x0123, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1dc8:	e0 92 24 01 	sts	0x0124, r14
    1dcc:	f0 92 25 01 	sts	0x0125, r15
    1dd0:	00 93 26 01 	sts	0x0126, r16
    1dd4:	10 93 27 01 	sts	0x0127, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	ff 90       	pop	r15
    1dde:	ef 90       	pop	r14
    1de0:	08 95       	ret

00001de2 <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    1de2:	60 93 28 01 	sts	0x0128, r22
    1de6:	70 93 29 01 	sts	0x0129, r23
    1dea:	80 93 2a 01 	sts	0x012A, r24
    1dee:	90 93 2b 01 	sts	0x012B, r25
}
    1df2:	08 95       	ret

00001df4 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    1df4:	60 93 2c 01 	sts	0x012C, r22
    1df8:	70 93 2d 01 	sts	0x012D, r23
    1dfc:	80 93 2e 01 	sts	0x012E, r24
    1e00:	90 93 2f 01 	sts	0x012F, r25
}
    1e04:	08 95       	ret

00001e06 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    1e06:	60 93 3c 01 	sts	0x013C, r22
    1e0a:	70 93 3d 01 	sts	0x013D, r23
    1e0e:	80 93 3e 01 	sts	0x013E, r24
    1e12:	90 93 3f 01 	sts	0x013F, r25
}
    1e16:	08 95       	ret

00001e18 <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    1e18:	60 93 50 01 	sts	0x0150, r22
    1e1c:	70 93 51 01 	sts	0x0151, r23
    1e20:	80 93 52 01 	sts	0x0152, r24
    1e24:	90 93 53 01 	sts	0x0153, r25
}
    1e28:	08 95       	ret

00001e2a <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    1e2a:	10 92 38 01 	sts	0x0138, r1
    1e2e:	10 92 39 01 	sts	0x0139, r1
    1e32:	10 92 3a 01 	sts	0x013A, r1
    1e36:	10 92 3b 01 	sts	0x013B, r1
}
    1e3a:	08 95       	ret

00001e3c <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    1e3c:	ef 92       	push	r14
    1e3e:	ff 92       	push	r15
    1e40:	0f 93       	push	r16
    1e42:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    1e44:	20 91 28 01 	lds	r18, 0x0128
    1e48:	30 91 29 01 	lds	r19, 0x0129
    1e4c:	40 91 2a 01 	lds	r20, 0x012A
    1e50:	50 91 2b 01 	lds	r21, 0x012B
    1e54:	80 91 2c 01 	lds	r24, 0x012C
    1e58:	90 91 2d 01 	lds	r25, 0x012D
    1e5c:	a0 91 2e 01 	lds	r26, 0x012E
    1e60:	b0 91 2f 01 	lds	r27, 0x012F
    1e64:	28 1b       	sub	r18, r24
    1e66:	39 0b       	sbc	r19, r25
    1e68:	4a 0b       	sbc	r20, r26
    1e6a:	5b 0b       	sbc	r21, r27
    1e6c:	20 93 30 01 	sts	0x0130, r18
    1e70:	30 93 31 01 	sts	0x0131, r19
    1e74:	40 93 32 01 	sts	0x0132, r20
    1e78:	50 93 33 01 	sts	0x0133, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    1e7c:	80 91 40 01 	lds	r24, 0x0140
    1e80:	90 91 41 01 	lds	r25, 0x0141
    1e84:	a0 91 42 01 	lds	r26, 0x0142
    1e88:	b0 91 43 01 	lds	r27, 0x0143
    1e8c:	79 01       	movw	r14, r18
    1e8e:	8a 01       	movw	r16, r20
    1e90:	e8 1a       	sub	r14, r24
    1e92:	f9 0a       	sbc	r15, r25
    1e94:	0a 0b       	sbc	r16, r26
    1e96:	1b 0b       	sbc	r17, r27
    1e98:	e0 92 34 01 	sts	0x0134, r14
    1e9c:	f0 92 35 01 	sts	0x0135, r15
    1ea0:	00 93 36 01 	sts	0x0136, r16
    1ea4:	10 93 37 01 	sts	0x0137, r17
  PID.Error.LastError = PID.Error.PError;
    1ea8:	20 93 40 01 	sts	0x0140, r18
    1eac:	30 93 41 01 	sts	0x0141, r19
    1eb0:	40 93 42 01 	sts	0x0142, r20
    1eb4:	50 93 43 01 	sts	0x0143, r21
  PID.Error.IError += PID.Error.PError;
    1eb8:	e0 90 38 01 	lds	r14, 0x0138
    1ebc:	f0 90 39 01 	lds	r15, 0x0139
    1ec0:	00 91 3a 01 	lds	r16, 0x013A
    1ec4:	10 91 3b 01 	lds	r17, 0x013B
    1ec8:	e2 0e       	add	r14, r18
    1eca:	f3 1e       	adc	r15, r19
    1ecc:	04 1f       	adc	r16, r20
    1ece:	15 1f       	adc	r17, r21
    1ed0:	e0 92 38 01 	sts	0x0138, r14
    1ed4:	f0 92 39 01 	sts	0x0139, r15
    1ed8:	00 93 3a 01 	sts	0x013A, r16
    1edc:	10 93 3b 01 	sts	0x013B, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    1ee0:	80 91 3c 01 	lds	r24, 0x013C
    1ee4:	90 91 3d 01 	lds	r25, 0x013D
    1ee8:	a0 91 3e 01 	lds	r26, 0x013E
    1eec:	b0 91 3f 01 	lds	r27, 0x013F
    1ef0:	8e 15       	cp	r24, r14
    1ef2:	9f 05       	cpc	r25, r15
    1ef4:	a0 07       	cpc	r26, r16
    1ef6:	b1 07       	cpc	r27, r17
    1ef8:	4c f4       	brge	.+18     	; 0x1f0c <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    1efa:	80 93 38 01 	sts	0x0138, r24
    1efe:	90 93 39 01 	sts	0x0139, r25
    1f02:	a0 93 3a 01 	sts	0x013A, r26
    1f06:	b0 93 3b 01 	sts	0x013B, r27
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    1f0c:	22 27       	eor	r18, r18
    1f0e:	33 27       	eor	r19, r19
    1f10:	a9 01       	movw	r20, r18
    1f12:	28 1b       	sub	r18, r24
    1f14:	39 0b       	sbc	r19, r25
    1f16:	4a 0b       	sbc	r20, r26
    1f18:	5b 0b       	sbc	r21, r27
    1f1a:	e2 16       	cp	r14, r18
    1f1c:	f3 06       	cpc	r15, r19
    1f1e:	04 07       	cpc	r16, r20
    1f20:	15 07       	cpc	r17, r21
    1f22:	44 f4       	brge	.+16     	; 0x1f34 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    1f24:	20 93 38 01 	sts	0x0138, r18
    1f28:	30 93 39 01 	sts	0x0139, r19
    1f2c:	40 93 3a 01 	sts	0x013A, r20
    1f30:	50 93 3b 01 	sts	0x013B, r21
  }
}
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	08 95       	ret

00001f3e <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    1f3e:	6f 92       	push	r6
    1f40:	7f 92       	push	r7
    1f42:	8f 92       	push	r8
    1f44:	9f 92       	push	r9
    1f46:	af 92       	push	r10
    1f48:	bf 92       	push	r11
    1f4a:	cf 92       	push	r12
    1f4c:	df 92       	push	r13
    1f4e:	ef 92       	push	r14
    1f50:	ff 92       	push	r15
    1f52:	0f 93       	push	r16
    1f54:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    1f56:	60 91 20 01 	lds	r22, 0x0120
    1f5a:	70 91 21 01 	lds	r23, 0x0121
    1f5e:	80 91 22 01 	lds	r24, 0x0122
    1f62:	90 91 23 01 	lds	r25, 0x0123
    1f66:	20 91 38 01 	lds	r18, 0x0138
    1f6a:	30 91 39 01 	lds	r19, 0x0139
    1f6e:	40 91 3a 01 	lds	r20, 0x013A
    1f72:	50 91 3b 01 	lds	r21, 0x013B
    1f76:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
    1f7a:	3b 01       	movw	r6, r22
    1f7c:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    1f7e:	60 91 24 01 	lds	r22, 0x0124
    1f82:	70 91 25 01 	lds	r23, 0x0125
    1f86:	80 91 26 01 	lds	r24, 0x0126
    1f8a:	90 91 27 01 	lds	r25, 0x0127
    1f8e:	20 91 34 01 	lds	r18, 0x0134
    1f92:	30 91 35 01 	lds	r19, 0x0135
    1f96:	40 91 36 01 	lds	r20, 0x0136
    1f9a:	50 91 37 01 	lds	r21, 0x0137
    1f9e:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
    1fa2:	5b 01       	movw	r10, r22
    1fa4:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    1fa6:	e0 90 50 01 	lds	r14, 0x0150
    1faa:	f0 90 51 01 	lds	r15, 0x0151
    1fae:	00 91 52 01 	lds	r16, 0x0152
    1fb2:	10 91 53 01 	lds	r17, 0x0153
    1fb6:	60 91 1c 01 	lds	r22, 0x011C
    1fba:	70 91 1d 01 	lds	r23, 0x011D
    1fbe:	80 91 1e 01 	lds	r24, 0x011E
    1fc2:	90 91 1f 01 	lds	r25, 0x011F
    1fc6:	20 91 30 01 	lds	r18, 0x0130
    1fca:	30 91 31 01 	lds	r19, 0x0131
    1fce:	40 91 32 01 	lds	r20, 0x0132
    1fd2:	50 91 33 01 	lds	r21, 0x0133
    1fd6:	0e 94 37 11 	call	0x226e	; 0x226e <__mulsi3>
    1fda:	a8 01       	movw	r20, r16
    1fdc:	97 01       	movw	r18, r14
    1fde:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
    1fe2:	20 93 44 01 	sts	0x0144, r18
    1fe6:	30 93 45 01 	sts	0x0145, r19
    1fea:	40 93 46 01 	sts	0x0146, r20
    1fee:	50 93 47 01 	sts	0x0147, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    1ff2:	c4 01       	movw	r24, r8
    1ff4:	b3 01       	movw	r22, r6
    1ff6:	a8 01       	movw	r20, r16
    1ff8:	97 01       	movw	r18, r14
    1ffa:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
    1ffe:	20 93 48 01 	sts	0x0148, r18
    2002:	30 93 49 01 	sts	0x0149, r19
    2006:	40 93 4a 01 	sts	0x014A, r20
    200a:	50 93 4b 01 	sts	0x014B, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    200e:	c6 01       	movw	r24, r12
    2010:	b5 01       	movw	r22, r10
    2012:	a8 01       	movw	r20, r16
    2014:	97 01       	movw	r18, r14
    2016:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__divmodsi4>
    201a:	20 93 4c 01 	sts	0x014C, r18
    201e:	30 93 4d 01 	sts	0x014D, r19
    2022:	40 93 4e 01 	sts	0x014E, r20
    2026:	50 93 4f 01 	sts	0x014F, r21
}
    202a:	1f 91       	pop	r17
    202c:	0f 91       	pop	r16
    202e:	ff 90       	pop	r15
    2030:	ef 90       	pop	r14
    2032:	df 90       	pop	r13
    2034:	cf 90       	pop	r12
    2036:	bf 90       	pop	r11
    2038:	af 90       	pop	r10
    203a:	9f 90       	pop	r9
    203c:	8f 90       	pop	r8
    203e:	7f 90       	pop	r7
    2040:	6f 90       	pop	r6
    2042:	08 95       	ret

00002044 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    2044:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    2048:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    204c:	20 91 44 01 	lds	r18, 0x0144
    2050:	30 91 45 01 	lds	r19, 0x0145
    2054:	40 91 46 01 	lds	r20, 0x0146
    2058:	50 91 47 01 	lds	r21, 0x0147
  control_value += PID.Products.IError;
    205c:	80 91 48 01 	lds	r24, 0x0148
    2060:	90 91 49 01 	lds	r25, 0x0149
    2064:	a0 91 4a 01 	lds	r26, 0x014A
    2068:	b0 91 4b 01 	lds	r27, 0x014B
    206c:	28 0f       	add	r18, r24
    206e:	39 1f       	adc	r19, r25
    2070:	4a 1f       	adc	r20, r26
    2072:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    2074:	80 91 4c 01 	lds	r24, 0x014C
    2078:	90 91 4d 01 	lds	r25, 0x014D
    207c:	a0 91 4e 01 	lds	r26, 0x014E
    2080:	b0 91 4f 01 	lds	r27, 0x014F
    2084:	28 0f       	add	r18, r24
    2086:	39 1f       	adc	r19, r25
    2088:	4a 1f       	adc	r20, r26
    208a:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    208c:	20 93 54 01 	sts	0x0154, r18
    2090:	30 93 55 01 	sts	0x0155, r19
    2094:	40 93 56 01 	sts	0x0156, r20
    2098:	50 93 57 01 	sts	0x0157, r21
  if(control_value < 0){
    209c:	57 ff       	sbrs	r21, 7
    209e:	09 c0       	rjmp	.+18     	; 0x20b2 <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    20a0:	10 92 58 01 	sts	0x0158, r1
    20a4:	10 92 59 01 	sts	0x0159, r1
    20a8:	10 92 5a 01 	sts	0x015A, r1
    20ac:	10 92 5b 01 	sts	0x015B, r1
    20b0:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    20b2:	20 93 58 01 	sts	0x0158, r18
    20b6:	30 93 59 01 	sts	0x0159, r19
    20ba:	40 93 5a 01 	sts	0x015A, r20
    20be:	50 93 5b 01 	sts	0x015B, r21
    20c2:	08 95       	ret

000020c4 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    20c4:	60 91 1c 01 	lds	r22, 0x011C
    20c8:	70 91 1d 01 	lds	r23, 0x011D
  return PID.Input.Kp;
}
    20cc:	80 91 1e 01 	lds	r24, 0x011E
    20d0:	90 91 1f 01 	lds	r25, 0x011F
    20d4:	08 95       	ret

000020d6 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    20d6:	60 91 20 01 	lds	r22, 0x0120
    20da:	70 91 21 01 	lds	r23, 0x0121
  return PID.Input.Ki;
}
    20de:	80 91 22 01 	lds	r24, 0x0122
    20e2:	90 91 23 01 	lds	r25, 0x0123
    20e6:	08 95       	ret

000020e8 <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    20e8:	60 91 24 01 	lds	r22, 0x0124
    20ec:	70 91 25 01 	lds	r23, 0x0125
  return PID.Input.Kd;
}
    20f0:	80 91 26 01 	lds	r24, 0x0126
    20f4:	90 91 27 01 	lds	r25, 0x0127
    20f8:	08 95       	ret

000020fa <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    20fa:	60 91 28 01 	lds	r22, 0x0128
    20fe:	70 91 29 01 	lds	r23, 0x0129
  return PID.Input.SetPoint;
}
    2102:	80 91 2a 01 	lds	r24, 0x012A
    2106:	90 91 2b 01 	lds	r25, 0x012B
    210a:	08 95       	ret

0000210c <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    210c:	60 91 2c 01 	lds	r22, 0x012C
    2110:	70 91 2d 01 	lds	r23, 0x012D
  return PID.Input.ProcessValue;
}
    2114:	80 91 2e 01 	lds	r24, 0x012E
    2118:	90 91 2f 01 	lds	r25, 0x012F
    211c:	08 95       	ret

0000211e <PID_Get_PError>:

signed long PID_Get_PError(void){
    211e:	60 91 30 01 	lds	r22, 0x0130
    2122:	70 91 31 01 	lds	r23, 0x0131
  return PID.Error.PError;
}
    2126:	80 91 32 01 	lds	r24, 0x0132
    212a:	90 91 33 01 	lds	r25, 0x0133
    212e:	08 95       	ret

00002130 <PID_Get_IError>:

signed long PID_Get_IError(void){
    2130:	60 91 38 01 	lds	r22, 0x0138
    2134:	70 91 39 01 	lds	r23, 0x0139
  return PID.Error.IError;
}
    2138:	80 91 3a 01 	lds	r24, 0x013A
    213c:	90 91 3b 01 	lds	r25, 0x013B
    2140:	08 95       	ret

00002142 <PID_Get_DError>:

signed long PID_Get_DError(void){
    2142:	60 91 34 01 	lds	r22, 0x0134
    2146:	70 91 35 01 	lds	r23, 0x0135
  return PID.Error.DError;
}
    214a:	80 91 36 01 	lds	r24, 0x0136
    214e:	90 91 37 01 	lds	r25, 0x0137
    2152:	08 95       	ret

00002154 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    2154:	60 91 3c 01 	lds	r22, 0x013C
    2158:	70 91 3d 01 	lds	r23, 0x013D
  return PID.Error.IErrorLimit;
}
    215c:	80 91 3e 01 	lds	r24, 0x013E
    2160:	90 91 3f 01 	lds	r25, 0x013F
    2164:	08 95       	ret

00002166 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    2166:	60 91 44 01 	lds	r22, 0x0144
    216a:	70 91 45 01 	lds	r23, 0x0145
  return PID.Products.PError;
}
    216e:	80 91 46 01 	lds	r24, 0x0146
    2172:	90 91 47 01 	lds	r25, 0x0147
    2176:	08 95       	ret

00002178 <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    2178:	60 91 48 01 	lds	r22, 0x0148
    217c:	70 91 49 01 	lds	r23, 0x0149
  return PID.Products.IError;
}
    2180:	80 91 4a 01 	lds	r24, 0x014A
    2184:	90 91 4b 01 	lds	r25, 0x014B
    2188:	08 95       	ret

0000218a <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    218a:	60 91 4c 01 	lds	r22, 0x014C
    218e:	70 91 4d 01 	lds	r23, 0x014D
  return PID.Products.DError;
}
    2192:	80 91 4e 01 	lds	r24, 0x014E
    2196:	90 91 4f 01 	lds	r25, 0x014F
    219a:	08 95       	ret

0000219c <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    219c:	60 91 50 01 	lds	r22, 0x0150
    21a0:	70 91 51 01 	lds	r23, 0x0151
  return PID.Products.ScaleFact;
}
    21a4:	80 91 52 01 	lds	r24, 0x0152
    21a8:	90 91 53 01 	lds	r25, 0x0153
    21ac:	08 95       	ret

000021ae <PID_Get_Output>:


signed long PID_Get_Output(void){
    21ae:	60 91 54 01 	lds	r22, 0x0154
    21b2:	70 91 55 01 	lds	r23, 0x0155
  return PID.Output;
}
    21b6:	80 91 56 01 	lds	r24, 0x0156
    21ba:	90 91 57 01 	lds	r25, 0x0157
    21be:	08 95       	ret

000021c0 <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    21c0:	60 91 58 01 	lds	r22, 0x0158
    21c4:	70 91 59 01 	lds	r23, 0x0159
  return PID.OutputNonNegative;
}
    21c8:	80 91 5a 01 	lds	r24, 0x015A
    21cc:	90 91 5b 01 	lds	r25, 0x015B
    21d0:	08 95       	ret

000021d2 <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    21d2:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <PID_Struct_Init>
}
    21d6:	08 95       	ret

000021d8 <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    21d8:	af 92       	push	r10
    21da:	bf 92       	push	r11
    21dc:	cf 92       	push	r12
    21de:	df 92       	push	r13
    21e0:	ef 92       	push	r14
    21e2:	ff 92       	push	r15
    21e4:	0f 93       	push	r16
    21e6:	1f 93       	push	r17
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    21f0:	60 93 1c 01 	sts	0x011C, r22
    21f4:	70 93 1d 01 	sts	0x011D, r23
    21f8:	80 93 1e 01 	sts	0x011E, r24
    21fc:	90 93 1f 01 	sts	0x011F, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2200:	20 93 20 01 	sts	0x0120, r18
    2204:	30 93 21 01 	sts	0x0121, r19
    2208:	40 93 22 01 	sts	0x0122, r20
    220c:	50 93 23 01 	sts	0x0123, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2210:	e0 92 24 01 	sts	0x0124, r14
    2214:	f0 92 25 01 	sts	0x0125, r15
    2218:	00 93 26 01 	sts	0x0126, r16
    221c:	10 93 27 01 	sts	0x0127, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    2220:	a0 92 3c 01 	sts	0x013C, r10
    2224:	b0 92 3d 01 	sts	0x013D, r11
    2228:	c0 92 3e 01 	sts	0x013E, r12
    222c:	d0 92 3f 01 	sts	0x013F, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	af 85       	ldd	r26, Y+15	; 0x0f
    2236:	b8 89       	ldd	r27, Y+16	; 0x10
    2238:	80 93 50 01 	sts	0x0150, r24
    223c:	90 93 51 01 	sts	0x0151, r25
    2240:	a0 93 52 01 	sts	0x0152, r26
    2244:	b0 93 53 01 	sts	0x0153, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    2248:	10 92 38 01 	sts	0x0138, r1
    224c:	10 92 39 01 	sts	0x0139, r1
    2250:	10 92 3a 01 	sts	0x013A, r1
    2254:	10 92 3b 01 	sts	0x013B, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    2258:	cf 91       	pop	r28
    225a:	df 91       	pop	r29
    225c:	1f 91       	pop	r17
    225e:	0f 91       	pop	r16
    2260:	ff 90       	pop	r15
    2262:	ef 90       	pop	r14
    2264:	df 90       	pop	r13
    2266:	cf 90       	pop	r12
    2268:	bf 90       	pop	r11
    226a:	af 90       	pop	r10
    226c:	08 95       	ret

0000226e <__mulsi3>:
    226e:	62 9f       	mul	r22, r18
    2270:	d0 01       	movw	r26, r0
    2272:	73 9f       	mul	r23, r19
    2274:	f0 01       	movw	r30, r0
    2276:	82 9f       	mul	r24, r18
    2278:	e0 0d       	add	r30, r0
    227a:	f1 1d       	adc	r31, r1
    227c:	64 9f       	mul	r22, r20
    227e:	e0 0d       	add	r30, r0
    2280:	f1 1d       	adc	r31, r1
    2282:	92 9f       	mul	r25, r18
    2284:	f0 0d       	add	r31, r0
    2286:	83 9f       	mul	r24, r19
    2288:	f0 0d       	add	r31, r0
    228a:	74 9f       	mul	r23, r20
    228c:	f0 0d       	add	r31, r0
    228e:	65 9f       	mul	r22, r21
    2290:	f0 0d       	add	r31, r0
    2292:	99 27       	eor	r25, r25
    2294:	72 9f       	mul	r23, r18
    2296:	b0 0d       	add	r27, r0
    2298:	e1 1d       	adc	r30, r1
    229a:	f9 1f       	adc	r31, r25
    229c:	63 9f       	mul	r22, r19
    229e:	b0 0d       	add	r27, r0
    22a0:	e1 1d       	adc	r30, r1
    22a2:	f9 1f       	adc	r31, r25
    22a4:	bd 01       	movw	r22, r26
    22a6:	cf 01       	movw	r24, r30
    22a8:	11 24       	eor	r1, r1
    22aa:	08 95       	ret

000022ac <__udivmodsi4>:
    22ac:	a1 e2       	ldi	r26, 0x21	; 33
    22ae:	1a 2e       	mov	r1, r26
    22b0:	aa 1b       	sub	r26, r26
    22b2:	bb 1b       	sub	r27, r27
    22b4:	fd 01       	movw	r30, r26
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <__udivmodsi4_ep>

000022b8 <__udivmodsi4_loop>:
    22b8:	aa 1f       	adc	r26, r26
    22ba:	bb 1f       	adc	r27, r27
    22bc:	ee 1f       	adc	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	a2 17       	cp	r26, r18
    22c2:	b3 07       	cpc	r27, r19
    22c4:	e4 07       	cpc	r30, r20
    22c6:	f5 07       	cpc	r31, r21
    22c8:	20 f0       	brcs	.+8      	; 0x22d2 <__udivmodsi4_ep>
    22ca:	a2 1b       	sub	r26, r18
    22cc:	b3 0b       	sbc	r27, r19
    22ce:	e4 0b       	sbc	r30, r20
    22d0:	f5 0b       	sbc	r31, r21

000022d2 <__udivmodsi4_ep>:
    22d2:	66 1f       	adc	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	88 1f       	adc	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	1a 94       	dec	r1
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <__udivmodsi4_loop>
    22de:	60 95       	com	r22
    22e0:	70 95       	com	r23
    22e2:	80 95       	com	r24
    22e4:	90 95       	com	r25
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	bd 01       	movw	r22, r26
    22ec:	cf 01       	movw	r24, r30
    22ee:	08 95       	ret

000022f0 <__divmodsi4>:
    22f0:	97 fb       	bst	r25, 7
    22f2:	09 2e       	mov	r0, r25
    22f4:	05 26       	eor	r0, r21
    22f6:	0e d0       	rcall	.+28     	; 0x2314 <__divmodsi4_neg1>
    22f8:	57 fd       	sbrc	r21, 7
    22fa:	04 d0       	rcall	.+8      	; 0x2304 <__divmodsi4_neg2>
    22fc:	d7 df       	rcall	.-82     	; 0x22ac <__udivmodsi4>
    22fe:	0a d0       	rcall	.+20     	; 0x2314 <__divmodsi4_neg1>
    2300:	00 1c       	adc	r0, r0
    2302:	38 f4       	brcc	.+14     	; 0x2312 <__divmodsi4_exit>

00002304 <__divmodsi4_neg2>:
    2304:	50 95       	com	r21
    2306:	40 95       	com	r20
    2308:	30 95       	com	r19
    230a:	21 95       	neg	r18
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	4f 4f       	sbci	r20, 0xFF	; 255
    2310:	5f 4f       	sbci	r21, 0xFF	; 255

00002312 <__divmodsi4_exit>:
    2312:	08 95       	ret

00002314 <__divmodsi4_neg1>:
    2314:	f6 f7       	brtc	.-4      	; 0x2312 <__divmodsi4_exit>
    2316:	90 95       	com	r25
    2318:	80 95       	com	r24
    231a:	70 95       	com	r23
    231c:	61 95       	neg	r22
    231e:	7f 4f       	sbci	r23, 0xFF	; 255
    2320:	8f 4f       	sbci	r24, 0xFF	; 255
    2322:	9f 4f       	sbci	r25, 0xFF	; 255
    2324:	08 95       	ret

00002326 <_exit>:
    2326:	f8 94       	cli

00002328 <__stop_program>:
    2328:	ff cf       	rjmp	.-2      	; 0x2328 <__stop_program>
