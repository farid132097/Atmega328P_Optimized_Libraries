
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000031ac  00003240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a1  00800114  00800114  00003254  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003254  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017aa  00000000  00000000  000032b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004675  00000000  00000000  00004a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d9  00000000  00000000  000090d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002216  00000000  00000000  000096ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  0000b8c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000199b  00000000  00000000  0000c324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bb2  00000000  00000000  0000dcbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000f871  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ea       	ldi	r30, 0xAC	; 172
      7c:	f1 e3       	ldi	r31, 0x31	; 49
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3b       	cpi	r26, 0xB5	; 181
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e2       	ldi	r20, 0x20	; 32
      dc:	5e e4       	ldi	r21, 0x4E	; 78
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 0c 08 	call	0x1018	; 0x1018 <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	42 e1       	ldi	r20, 0x12	; 18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	51 e7       	ldi	r21, 0x71	; 113
      fa:	62 e0       	ldi	r22, 0x02	; 2
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 15 11 	call	0x222a	; 0x222a <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	4e e0       	ldi	r20, 0x0E	; 14
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <Timebase_DownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(50);
     110:	82 e3       	ldi	r24, 0x32	; 50
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 83 05 	call	0xb06	; 0xb06 <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <Timebase_UpCounter_SS_Get_Value>
     11e:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
	UART_Transmit_Text(",");
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 85 0b 	call	0x170a	; 0x170a <Timebase_UpCounter_Get_Value>
     130:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
	UART_Transmit_Text(",");
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <Timebase_DownCounter_SS_Get_Value>
     142:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
	UART_Transmit_Text(",");
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 48 14 	call	0x2890	; 0x2890 <Timebase_DownCounter_Get_Value>
     154:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     160:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     162:	0e 94 d6 17 	call	0x2fac	; 0x2fac <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     166:	5e 98       	cbi	0x0b, 6	; 11
     168:	d3 cf       	rjmp	.-90     	; 0x110 <main+0x6a>

0000016a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     16a:	10 92 14 01 	sts	0x0114, r1
     16e:	e5 e1       	ldi	r30, 0x15	; 21
     170:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     172:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	ed 31       	cpi	r30, 0x1D	; 29
     178:	f8 07       	cpc	r31, r24
     17a:	d9 f7       	brne	.-10     	; 0x172 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     17c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     17e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     180:	80 e2       	ldi	r24, 0x20	; 32
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	93 a3       	std	Z+35, r25	; 0x23
     186:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     188:	15 a2       	std	Z+37, r1	; 0x25
     18a:	14 a2       	std	Z+36, r1	; 0x24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	04 c0       	rjmp	.+8      	; 0x198 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     190:	ec 5e       	subi	r30, 0xEC	; 236
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     196:	2f 5f       	subi	r18, 0xFF	; 255
     198:	80 91 3f 01 	lds	r24, 0x013F
     19c:	90 91 40 01 	lds	r25, 0x0140
     1a0:	e2 2f       	mov	r30, r18
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	e8 17       	cp	r30, r24
     1a6:	f9 07       	cpc	r31, r25
     1a8:	98 f3       	brcs	.-26     	; 0x190 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     1aa:	08 95       	ret

000001ac <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     1ac:	08 95       	ret

000001ae <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     1ae:	08 95       	ret

000001b0 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     1b4:	60 e6       	ldi	r22, 0x60	; 96
     1b6:	73 ee       	ldi	r23, 0xE3	; 227
     1b8:	86 e1       	ldi	r24, 0x16	; 22
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodsi4>
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     1c8:	e0 ec       	ldi	r30, 0xC0	; 192
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     1d2:	bb 27       	eor	r27, r27
     1d4:	a5 2f       	mov	r26, r21
     1d6:	94 2f       	mov	r25, r20
     1d8:	83 2f       	mov	r24, r19
     1da:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     1de:	20 93 c4 00 	sts	0x00C4, r18
}
     1e2:	08 95       	ret

000001e4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1e4:	e1 ec       	ldi	r30, 0xC1	; 193
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 60       	ori	r24, 0x08	; 8
     1ec:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	80 93 c2 00 	sts	0x00C2, r24
}
     1f4:	08 95       	ret

000001f6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1f6:	e1 ec       	ldi	r30, 0xC1	; 193
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	80 93 c2 00 	sts	0x00C2, r24
}
     206:	08 95       	ret

00000208 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     208:	e1 ec       	ldi	r30, 0xC1	; 193
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 68       	ori	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
  sei();
     212:	78 94       	sei
}
     214:	08 95       	ret

00000216 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     216:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     218:	80 91 c0 00 	lds	r24, 0x00C0
     21c:	85 ff       	sbrs	r24, 5
     21e:	fc cf       	rjmp	.-8      	; 0x218 <UART_Transmit_Byte+0x2>
  UDR0=val;
     220:	90 93 c6 00 	sts	0x00C6, r25
}
     224:	08 95       	ret

00000226 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	0f 92       	push	r0
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     230:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     232:	80 91 c0 00 	lds	r24, 0x00C0
     236:	84 ff       	sbrs	r24, 4
     238:	05 c0       	rjmp	.+10     	; 0x244 <UART_Receive_Byte+0x1e>
    val=UDR0;
     23a:	80 91 c6 00 	lds	r24, 0x00C6
     23e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	08 c0       	rjmp	.+16     	; 0x254 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     244:	80 91 c0 00 	lds	r24, 0x00C0
     248:	83 ff       	sbrs	r24, 3
     24a:	07 c0       	rjmp	.+14     	; 0x25a <UART_Receive_Byte+0x34>
    val=UDR0;
     24c:	80 91 c6 00 	lds	r24, 0x00C6
     250:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	80 93 14 01 	sts	0x0114, r24
     258:	05 c0       	rjmp	.+10     	; 0x264 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     25a:	80 91 c6 00 	lds	r24, 0x00C6
     25e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     260:	10 92 14 01 	sts	0x0114, r1
  }
  return val;
     264:	89 81       	ldd	r24, Y+1	; 0x01
}
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     26e:	80 91 1e 01 	lds	r24, 0x011E
}
     272:	08 95       	ret

00000274 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     274:	10 92 1e 01 	sts	0x011E, r1
}
     278:	08 95       	ret

0000027a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ab 01       	movw	r20, r22
     282:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     284:	4f 3f       	cpi	r20, 0xFF	; 255
     286:	51 05       	cpc	r21, r1
     288:	61 05       	cpc	r22, r1
     28a:	71 05       	cpc	r23, r1
     28c:	09 f0       	breq	.+2      	; 0x290 <UART_Transmit_Byte_Hex+0x16>
     28e:	28 f4       	brcc	.+10     	; 0x29a <UART_Transmit_Byte_Hex+0x20>
     290:	e8 e0       	ldi	r30, 0x08	; 8
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	c2 e0       	ldi	r28, 0x02	; 2
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	11 c0       	rjmp	.+34     	; 0x2bc <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     29a:	40 30       	cpi	r20, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	58 07       	cpc	r21, r24
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	68 07       	cpc	r22, r24
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	78 07       	cpc	r23, r24
     2a8:	28 f0       	brcs	.+10     	; 0x2b4 <UART_Transmit_Byte_Hex+0x3a>
     2aa:	e0 e2       	ldi	r30, 0x20	; 32
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	c8 e0       	ldi	r28, 0x08	; 8
     2b0:	d0 e0       	ldi	r29, 0x00	; 0
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <UART_Transmit_Byte_Hex+0x42>
     2b4:	e0 e1       	ldi	r30, 0x10	; 16
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	c4 e0       	ldi	r28, 0x04	; 4
     2ba:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2bc:	80 91 c0 00 	lds	r24, 0x00C0
     2c0:	85 ff       	sbrs	r24, 5
     2c2:	fc cf       	rjmp	.-8      	; 0x2bc <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     2c4:	80 e3       	ldi	r24, 0x30	; 48
     2c6:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2ca:	80 91 c0 00 	lds	r24, 0x00C0
     2ce:	85 ff       	sbrs	r24, 5
     2d0:	fc cf       	rjmp	.-8      	; 0x2ca <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     2d2:	88 e7       	ldi	r24, 0x78	; 120
     2d4:	80 93 c6 00 	sts	0x00C6, r24
     2d8:	10 e0       	ldi	r17, 0x00	; 0
     2da:	1f c0       	rjmp	.+62     	; 0x31a <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     2dc:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     2de:	db 01       	movw	r26, r22
     2e0:	ca 01       	movw	r24, r20
     2e2:	0e 2e       	mov	r0, r30
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <UART_Transmit_Byte_Hex+0x74>
     2e6:	b6 95       	lsr	r27
     2e8:	a7 95       	ror	r26
     2ea:	97 95       	ror	r25
     2ec:	87 95       	ror	r24
     2ee:	0a 94       	dec	r0
     2f0:	d2 f7       	brpl	.-12     	; 0x2e6 <UART_Transmit_Byte_Hex+0x6c>
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	8f 70       	andi	r24, 0x0F	; 15
     2f6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	91 05       	cpc	r25, r1
     2fc:	20 f0       	brcs	.+8      	; 0x306 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2fe:	9c 01       	movw	r18, r24
     300:	29 5c       	subi	r18, 0xC9	; 201
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	03 c0       	rjmp	.+6      	; 0x30c <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     306:	9c 01       	movw	r18, r24
     308:	20 5d       	subi	r18, 0xD0	; 208
     30a:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     30c:	80 91 c0 00 	lds	r24, 0x00C0
     310:	85 ff       	sbrs	r24, 5
     312:	fc cf       	rjmp	.-8      	; 0x30c <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     314:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     318:	1f 5f       	subi	r17, 0xFF	; 255
     31a:	81 2f       	mov	r24, r17
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	8c 17       	cp	r24, r28
     320:	9d 07       	cpc	r25, r29
     322:	e0 f2       	brcs	.-72     	; 0x2dc <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	08 95       	ret

0000032c <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	ab 01       	movw	r20, r22
     33e:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     340:	4f 3f       	cpi	r20, 0xFF	; 255
     342:	51 05       	cpc	r21, r1
     344:	61 05       	cpc	r22, r1
     346:	71 05       	cpc	r23, r1
     348:	09 f0       	breq	.+2      	; 0x34c <UART_Transmit_Byte_Bin+0x20>
     34a:	10 f4       	brcc	.+4      	; 0x350 <UART_Transmit_Byte_Bin+0x24>
     34c:	97 e0       	ldi	r25, 0x07	; 7
     34e:	0b c0       	rjmp	.+22     	; 0x366 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     350:	40 30       	cpi	r20, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	58 07       	cpc	r21, r24
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	68 07       	cpc	r22, r24
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	78 07       	cpc	r23, r24
     35e:	10 f0       	brcs	.+4      	; 0x364 <UART_Transmit_Byte_Bin+0x38>
     360:	9f e1       	ldi	r25, 0x1F	; 31
     362:	01 c0       	rjmp	.+2      	; 0x366 <UART_Transmit_Byte_Bin+0x3a>
     364:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     366:	80 91 c0 00 	lds	r24, 0x00C0
     36a:	85 ff       	sbrs	r24, 5
     36c:	fc cf       	rjmp	.-8      	; 0x366 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     36e:	80 e3       	ldi	r24, 0x30	; 48
     370:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     374:	80 91 c0 00 	lds	r24, 0x00C0
     378:	85 ff       	sbrs	r24, 5
     37a:	fc cf       	rjmp	.-8      	; 0x374 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     37c:	82 e6       	ldi	r24, 0x62	; 98
     37e:	80 93 c6 00 	sts	0x00C6, r24
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     386:	e9 2f       	mov	r30, r25
     388:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     38a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     38c:	11 e3       	ldi	r17, 0x31	; 49
     38e:	ef 01       	movw	r28, r30
     390:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     392:	cf 01       	movw	r24, r30
     394:	82 1b       	sub	r24, r18
     396:	93 0b       	sbc	r25, r19
     398:	6a 01       	movw	r12, r20
     39a:	7b 01       	movw	r14, r22
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <UART_Transmit_Byte_Bin+0x7a>
     39e:	f6 94       	lsr	r15
     3a0:	e7 94       	ror	r14
     3a2:	d7 94       	ror	r13
     3a4:	c7 94       	ror	r12
     3a6:	8a 95       	dec	r24
     3a8:	d2 f7       	brpl	.-12     	; 0x39e <UART_Transmit_Byte_Bin+0x72>
     3aa:	d7 01       	movw	r26, r14
     3ac:	c6 01       	movw	r24, r12
     3ae:	81 70       	andi	r24, 0x01	; 1
     3b0:	90 70       	andi	r25, 0x00	; 0
     3b2:	89 2b       	or	r24, r25
     3b4:	39 f0       	breq	.+14     	; 0x3c4 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b6:	80 91 c0 00 	lds	r24, 0x00C0
     3ba:	85 ff       	sbrs	r24, 5
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     3be:	10 93 c6 00 	sts	0x00C6, r17
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3c4:	80 91 c0 00 	lds	r24, 0x00C0
     3c8:	85 ff       	sbrs	r24, 5
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     3cc:	00 93 c6 00 	sts	0x00C6, r16
     3d0:	2f 5f       	subi	r18, 0xFF	; 255
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     3d4:	2c 17       	cp	r18, r28
     3d6:	3d 07       	cpc	r19, r29
     3d8:	e1 f6       	brne	.-72     	; 0x392 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ec:	ac 01       	movw	r20, r24
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3f2:	80 91 c0 00 	lds	r24, 0x00C0
     3f6:	85 ff       	sbrs	r24, 5
     3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3fa:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     400:	fa 01       	movw	r30, r20
     402:	e2 0f       	add	r30, r18
     404:	f1 1d       	adc	r31, r1
     406:	e0 81       	ld	r30, Z
     408:	ee 23       	and	r30, r30
     40a:	99 f7       	brne	.-26     	; 0x3f2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     40c:	08 95       	ret

0000040e <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     40e:	85 e0       	ldi	r24, 0x05	; 5
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
}
     416:	08 95       	ret

00000418 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
}
     420:	08 95       	ret

00000422 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     422:	bf 92       	push	r11
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	6b 01       	movw	r12, r22
     432:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     434:	61 15       	cp	r22, r1
     436:	71 05       	cpc	r23, r1
     438:	81 05       	cpc	r24, r1
     43a:	91 05       	cpc	r25, r1
     43c:	31 f4       	brne	.+12     	; 0x44a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     43e:	10 92 15 01 	sts	0x0115, r1
    UART.InputNumberDigits=1;
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 1d 01 	sts	0x011D, r24
     448:	23 c0       	rjmp	.+70     	; 0x490 <UART_Determine_Digit_Numbers+0x6e>
     44a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     44c:	0b 2d       	mov	r16, r11
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	0c 5e       	subi	r16, 0xEC	; 236
     452:	1e 4f       	sbci	r17, 0xFE	; 254
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	2a e0       	ldi	r18, 0x0A	; 10
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodsi4>
     464:	f8 01       	movw	r30, r16
     466:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	2a e0       	ldi	r18, 0x0A	; 10
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodsi4>
     478:	c9 01       	movw	r24, r18
     47a:	da 01       	movw	r26, r20
     47c:	6c 01       	movw	r12, r24
     47e:	7d 01       	movw	r14, r26
      i++;
     480:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     482:	c1 14       	cp	r12, r1
     484:	d1 04       	cpc	r13, r1
     486:	e1 04       	cpc	r14, r1
     488:	f1 04       	cpc	r15, r1
     48a:	01 f7       	brne	.-64     	; 0x44c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     48c:	b0 92 1d 01 	sts	0x011D, r11
  }
}
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	bf 90       	pop	r11
     49e:	08 95       	ret

000004a0 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     4a0:	e0 91 1d 01 	lds	r30, 0x011D
     4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     4a6:	2e 2f       	mov	r18, r30
     4a8:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     4aa:	e2 2f       	mov	r30, r18
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ec 5e       	subi	r30, 0xEC	; 236
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     4b4:	80 91 c0 00 	lds	r24, 0x00C0
     4b8:	85 ff       	sbrs	r24, 5
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     4bc:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     4be:	90 93 c6 00 	sts	0x00C6, r25
     4c2:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     4c4:	ee 23       	and	r30, r30
     4c6:	79 f7       	brne	.-34     	; 0x4a6 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     4c8:	08 95       	ret

000004ca <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     4ca:	9b 01       	movw	r18, r22
     4cc:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4ce:	97 ff       	sbrs	r25, 7
     4d0:	0e c0       	rjmp	.+28     	; 0x4ee <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     4d2:	80 91 c0 00 	lds	r24, 0x00C0
     4d6:	85 ff       	sbrs	r24, 5
     4d8:	fc cf       	rjmp	.-8      	; 0x4d2 <UART_Transmit_Number+0x8>
  UDR0=val;
     4da:	8d e2       	ldi	r24, 0x2D	; 45
     4dc:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4e0:	50 95       	com	r21
     4e2:	40 95       	com	r20
     4e4:	30 95       	com	r19
     4e6:	21 95       	neg	r18
     4e8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ea:	4f 4f       	sbci	r20, 0xFF	; 255
     4ec:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ee:	ca 01       	movw	r24, r20
     4f0:	b9 01       	movw	r22, r18
     4f2:	0e 94 11 02 	call	0x422	; 0x422 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4f6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <UART_Transmit_Number_Digits>
}
     4fa:	08 95       	ret

000004fc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4fc:	fc 01       	movw	r30, r24
     4fe:	ec 5e       	subi	r30, 0xEC	; 236
     500:	fe 4f       	sbci	r31, 0xFE	; 254
     502:	83 85       	ldd	r24, Z+11	; 0x0b
}
     504:	08 95       	ret

00000506 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     506:	20 91 41 01 	lds	r18, 0x0141
     50a:	30 91 42 01 	lds	r19, 0x0142
}
     50e:	c9 01       	movw	r24, r18
     510:	08 95       	ret

00000512 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     512:	10 92 14 01 	sts	0x0114, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	06 c0       	rjmp	.+12     	; 0x528 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     51c:	f9 01       	movw	r30, r18
     51e:	ec 5e       	subi	r30, 0xEC	; 236
     520:	fe 4f       	sbci	r31, 0xFE	; 254
     522:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	80 91 3f 01 	lds	r24, 0x013F
     52c:	90 91 40 01 	lds	r25, 0x0140
     530:	28 17       	cp	r18, r24
     532:	39 07       	cpc	r19, r25
     534:	98 f3       	brcs	.-26     	; 0x51c <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     536:	10 92 42 01 	sts	0x0142, r1
     53a:	10 92 41 01 	sts	0x0141, r1
  #endif
}
     53e:	08 95       	ret

00000540 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	0f 92       	push	r0
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     54a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     54c:	0e 94 13 01 	call	0x226	; 0x226 <UART_Receive_Byte>
     550:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     552:	80 91 14 01 	lds	r24, 0x0114
     556:	88 23       	and	r24, r24
     558:	19 f5       	brne	.+70     	; 0x5a0 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	80 93 1e 01 	sts	0x011E, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     560:	e0 91 41 01 	lds	r30, 0x0141
     564:	f0 91 42 01 	lds	r31, 0x0142
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	ec 5e       	subi	r30, 0xEC	; 236
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     570:	80 91 41 01 	lds	r24, 0x0141
     574:	90 91 42 01 	lds	r25, 0x0142
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	90 93 42 01 	sts	0x0142, r25
     57e:	80 93 41 01 	sts	0x0141, r24

    if(UART.BufferIndex>=UART.BufferSize){
     582:	20 91 41 01 	lds	r18, 0x0141
     586:	30 91 42 01 	lds	r19, 0x0142
     58a:	80 91 3f 01 	lds	r24, 0x013F
     58e:	90 91 40 01 	lds	r25, 0x0140
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	20 f0       	brcs	.+8      	; 0x5a0 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     598:	10 92 42 01 	sts	0x0142, r1
     59c:	10 92 41 01 	sts	0x0141, r1
    }
  }
}
     5a0:	0f 90       	pop	r0
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	08 95       	ret

000005a8 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     5ca:	0e 94 a0 02 	call	0x540	; 0x540 <UART_Interrupt_Service_Routine>
}
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	7f 91       	pop	r23
     5dc:	6f 91       	pop	r22
     5de:	5f 91       	pop	r21
     5e0:	4f 91       	pop	r20
     5e2:	3f 91       	pop	r19
     5e4:	2f 91       	pop	r18
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	7b 01       	movw	r14, r22
     5fa:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5fc:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     600:	c8 01       	movw	r24, r16
     602:	b7 01       	movw	r22, r14
     604:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     608:	e1 ec       	ldi	r30, 0xC1	; 193
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 60       	ori	r24, 0x08	; 8
     610:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     612:	a2 ec       	ldi	r26, 0xC2	; 194
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	96 e0       	ldi	r25, 0x06	; 6
     618:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     61a:	80 81       	ld	r24, Z
     61c:	80 61       	ori	r24, 0x10	; 16
     61e:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     620:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     622:	80 81       	ld	r24, Z
     624:	80 68       	ori	r24, 0x80	; 128
     626:	80 83       	st	Z, r24
  sei();
     628:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     62a:	0e 94 89 02 	call	0x512	; 0x512 <UART_Flush_Buffer>
}
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	08 95       	ret

00000638 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     638:	85 e4       	ldi	r24, 0x45	; 69
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 44 01 	sts	0x0144, r25
     640:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.TimerType.Value = 0;
     644:	10 92 45 01 	sts	0x0145, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     648:	80 91 45 01 	lds	r24, 0x0145
     64c:	84 60       	ori	r24, 0x04	; 4
     64e:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     652:	80 91 45 01 	lds	r24, 0x0145
     656:	87 70       	andi	r24, 0x07	; 7
     658:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.UpdateRate = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 47 01 	sts	0x0147, r25
     664:	80 93 46 01 	sts	0x0146, r24
  Timebase->Time.OVFUpdateValue=0;
     668:	10 92 48 01 	sts	0x0148, r1
  Timebase->Time.SubSecondsShadow = 0;
     66c:	10 92 54 01 	sts	0x0154, r1
     670:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.SecondsShadow = 0;
     674:	10 92 55 01 	sts	0x0155, r1
     678:	10 92 56 01 	sts	0x0156, r1
     67c:	10 92 57 01 	sts	0x0157, r1
     680:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.SubSeconds = 0;
     684:	10 92 4e 01 	sts	0x014E, r1
     688:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Time.Seconds = 0;
     68c:	10 92 4f 01 	sts	0x014F, r1
     690:	10 92 50 01 	sts	0x0150, r1
     694:	10 92 51 01 	sts	0x0151, r1
     698:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.VariablesSync = 0;
     69c:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.LastSample = 0;
     6a0:	10 92 49 01 	sts	0x0149, r1
     6a4:	10 92 4a 01 	sts	0x014A, r1
     6a8:	10 92 4b 01 	sts	0x014B, r1
     6ac:	10 92 4c 01 	sts	0x014C, r1
    Timebase->Time.StartTimeSeconds = 0;
	Timebase->Time.StartTimeSubSeconds = 0;
	Timebase->Time.Status = 0;
  #endif
  
  Timebase->UpdateRequest = 0;
     6b0:	10 92 5a 01 	sts	0x015A, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     6b4:	10 92 74 01 	sts	0x0174, r1
    Timebase->UpCounter[i].EndValue = 0;
     6b8:	10 92 75 01 	sts	0x0175, r1
     6bc:	10 92 76 01 	sts	0x0176, r1
     6c0:	10 92 77 01 	sts	0x0177, r1
     6c4:	10 92 78 01 	sts	0x0178, r1
    Timebase->UpCounter[i].Target = 0;
     6c8:	10 92 79 01 	sts	0x0179, r1
     6cc:	10 92 7a 01 	sts	0x017A, r1
     6d0:	10 92 7b 01 	sts	0x017B, r1
     6d4:	10 92 7c 01 	sts	0x017C, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6d8:	10 92 7d 01 	sts	0x017D, r1
     6dc:	10 92 7e 01 	sts	0x017E, r1
     6e0:	10 92 7f 01 	sts	0x017F, r1
     6e4:	10 92 80 01 	sts	0x0180, r1
    Timebase->UpCounter[i].Value = 0;
     6e8:	10 92 81 01 	sts	0x0181, r1
     6ec:	10 92 82 01 	sts	0x0182, r1
     6f0:	10 92 83 01 	sts	0x0183, r1
     6f4:	10 92 84 01 	sts	0x0184, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6f8:	10 92 85 01 	sts	0x0185, r1
     6fc:	10 92 86 01 	sts	0x0186, r1
     700:	10 92 87 01 	sts	0x0187, r1
     704:	10 92 88 01 	sts	0x0188, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     708:	10 92 5b 01 	sts	0x015B, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     70c:	10 92 5c 01 	sts	0x015C, r1
     710:	10 92 5d 01 	sts	0x015D, r1
     714:	10 92 5e 01 	sts	0x015E, r1
     718:	10 92 5f 01 	sts	0x015F, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     71c:	10 92 60 01 	sts	0x0160, r1
     720:	10 92 61 01 	sts	0x0161, r1
     724:	10 92 62 01 	sts	0x0162, r1
     728:	10 92 63 01 	sts	0x0163, r1
    Timebase->UpCounterSS[i].Target = 0;
     72c:	10 92 64 01 	sts	0x0164, r1
     730:	10 92 65 01 	sts	0x0165, r1
     734:	10 92 66 01 	sts	0x0166, r1
     738:	10 92 67 01 	sts	0x0167, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     73c:	10 92 68 01 	sts	0x0168, r1
     740:	10 92 69 01 	sts	0x0169, r1
     744:	10 92 6a 01 	sts	0x016A, r1
     748:	10 92 6b 01 	sts	0x016B, r1
    Timebase->UpCounterSS[i].Value = 0;
     74c:	10 92 6c 01 	sts	0x016C, r1
     750:	10 92 6d 01 	sts	0x016D, r1
     754:	10 92 6e 01 	sts	0x016E, r1
     758:	10 92 6f 01 	sts	0x016F, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     75c:	10 92 70 01 	sts	0x0170, r1
     760:	10 92 71 01 	sts	0x0171, r1
     764:	10 92 72 01 	sts	0x0172, r1
     768:	10 92 73 01 	sts	0x0173, r1
     76c:	a4 e3       	ldi	r26, 0x34	; 52
     76e:	b2 e0       	ldi	r27, 0x02	; 2
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     774:	2d e0       	ldi	r18, 0x0D	; 13
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	82 9f       	mul	r24, r18
     77a:	f0 01       	movw	r30, r0
     77c:	83 9f       	mul	r24, r19
     77e:	f0 0d       	add	r31, r0
     780:	92 9f       	mul	r25, r18
     782:	f0 0d       	add	r31, r0
     784:	11 24       	eor	r1, r1
     786:	ed 5c       	subi	r30, 0xCD	; 205
     788:	fd 4f       	sbci	r31, 0xFD	; 253
     78a:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     78c:	1d 92       	st	X+, r1
     78e:	1d 92       	st	X+, r1
     790:	1d 92       	st	X+, r1
     792:	1c 92       	st	X, r1
     794:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     796:	14 96       	adiw	r26, 0x04	; 4
     798:	1d 92       	st	X+, r1
     79a:	1d 92       	st	X+, r1
     79c:	1d 92       	st	X+, r1
     79e:	1c 92       	st	X, r1
     7a0:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     7a2:	18 96       	adiw	r26, 0x08	; 8
     7a4:	1d 92       	st	X+, r1
     7a6:	1d 92       	st	X+, r1
     7a8:	1d 92       	st	X+, r1
     7aa:	1c 92       	st	X, r1
     7ac:	1b 97       	sbiw	r26, 0x0b	; 11
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     7b2:	8a 30       	cpi	r24, 0x0A	; 10
     7b4:	91 05       	cpc	r25, r1
     7b6:	01 f7       	brne	.-64     	; 0x778 <Timebase_Struct_Init+0x140>
     7b8:	aa e8       	ldi	r26, 0x8A	; 138
     7ba:	b1 e0       	ldi	r27, 0x01	; 1
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     7c0:	fc 01       	movw	r30, r24
     7c2:	24 e0       	ldi	r18, 0x04	; 4
     7c4:	ee 0f       	add	r30, r30
     7c6:	ff 1f       	adc	r31, r31
     7c8:	2a 95       	dec	r18
     7ca:	e1 f7       	brne	.-8      	; 0x7c4 <Timebase_Struct_Init+0x18c>
     7cc:	e8 0f       	add	r30, r24
     7ce:	f9 1f       	adc	r31, r25
     7d0:	e7 57       	subi	r30, 0x77	; 119
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	10 82       	st	Z, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     7d6:	1d 92       	st	X+, r1
     7d8:	1d 92       	st	X+, r1
     7da:	1d 92       	st	X+, r1
     7dc:	1c 92       	st	X, r1
     7de:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     7e0:	14 96       	adiw	r26, 0x04	; 4
     7e2:	1d 92       	st	X+, r1
     7e4:	1d 92       	st	X+, r1
     7e6:	1d 92       	st	X+, r1
     7e8:	1c 92       	st	X, r1
     7ea:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     7ec:	18 96       	adiw	r26, 0x08	; 8
     7ee:	1d 92       	st	X+, r1
     7f0:	1d 92       	st	X+, r1
     7f2:	1d 92       	st	X+, r1
     7f4:	1c 92       	st	X, r1
     7f6:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7f8:	1c 96       	adiw	r26, 0x0c	; 12
     7fa:	1d 92       	st	X+, r1
     7fc:	1d 92       	st	X+, r1
     7fe:	1d 92       	st	X+, r1
     800:	1c 92       	st	X, r1
     802:	1f 97       	sbiw	r26, 0x0f	; 15
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     808:	8a 30       	cpi	r24, 0x0A	; 10
     80a:	91 05       	cpc	r25, r1
     80c:	c9 f6       	brne	.-78     	; 0x7c0 <Timebase_Struct_Init+0x188>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     80e:	08 95       	ret

00000810 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     810:	7f 92       	push	r7
     812:	8f 92       	push	r8
     814:	9f 92       	push	r9
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	df 93       	push	r29
     828:	cf 93       	push	r28
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	2a 97       	sbiw	r28, 0x0a	; 10
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     83c:	c0 90 43 01 	lds	r12, 0x0143
     840:	d0 90 44 01 	lds	r13, 0x0144
     844:	f6 01       	movw	r30, r12
     846:	80 81       	ld	r24, Z
     848:	80 ff       	sbrs	r24, 0
     84a:	31 c0       	rjmp	.+98     	; 0x8ae <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     84c:	01 30       	cpi	r16, 0x01	; 1
     84e:	11 05       	cpc	r17, r1
     850:	11 f4       	brne	.+4      	; 0x856 <Timebase_Timer_Config+0x46>
     852:	96 e0       	ldi	r25, 0x06	; 6
     854:	19 c0       	rjmp	.+50     	; 0x888 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     856:	02 30       	cpi	r16, 0x02	; 2
     858:	11 05       	cpc	r17, r1
     85a:	11 f4       	brne	.+4      	; 0x860 <Timebase_Timer_Config+0x50>
     85c:	95 e0       	ldi	r25, 0x05	; 5
     85e:	14 c0       	rjmp	.+40     	; 0x888 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     860:	04 30       	cpi	r16, 0x04	; 4
     862:	11 05       	cpc	r17, r1
     864:	11 f4       	brne	.+4      	; 0x86a <Timebase_Timer_Config+0x5a>
     866:	94 e0       	ldi	r25, 0x04	; 4
     868:	0f c0       	rjmp	.+30     	; 0x888 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     86a:	08 30       	cpi	r16, 0x08	; 8
     86c:	11 05       	cpc	r17, r1
     86e:	11 f4       	brne	.+4      	; 0x874 <Timebase_Timer_Config+0x64>
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	0a c0       	rjmp	.+20     	; 0x888 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     874:	00 31       	cpi	r16, 0x10	; 16
     876:	11 05       	cpc	r17, r1
     878:	11 f4       	brne	.+4      	; 0x87e <Timebase_Timer_Config+0x6e>
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	05 c0       	rjmp	.+10     	; 0x888 <Timebase_Timer_Config+0x78>
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	00 32       	cpi	r16, 0x20	; 32
     882:	11 05       	cpc	r17, r1
     884:	09 f4       	brne	.+2      	; 0x888 <Timebase_Timer_Config+0x78>
     886:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     888:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     88a:	84 b7       	in	r24, 0x34	; 52
     88c:	87 7f       	andi	r24, 0xF7	; 247
     88e:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     890:	80 91 60 00 	lds	r24, 0x0060
     894:	80 68       	ori	r24, 0x80	; 128
     896:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     89a:	80 91 60 00 	lds	r24, 0x0060
     89e:	88 61       	ori	r24, 0x18	; 24
     8a0:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     8a4:	90 64       	ori	r25, 0x40	; 64
     8a6:	90 93 60 00 	sts	0x0060, r25
    sei();
     8aa:	78 94       	sei
     8ac:	67 c0       	rjmp	.+206    	; 0x97c <__stack+0x7d>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     8ae:	81 fd       	sbrc	r24, 1
     8b0:	65 c0       	rjmp	.+202    	; 0x97c <__stack+0x7d>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     8b2:	82 ff       	sbrs	r24, 2
     8b4:	63 c0       	rjmp	.+198    	; 0x97c <__stack+0x7d>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     8b6:	de 01       	movw	r26, r28
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	ea e0       	ldi	r30, 0x0A	; 10
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	8a e0       	ldi	r24, 0x0A	; 10
     8c0:	01 90       	ld	r0, Z+
     8c2:	0d 92       	st	X+, r0
     8c4:	81 50       	subi	r24, 0x01	; 1
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     8c8:	98 01       	movw	r18, r16
     8ca:	40 e0       	ldi	r20, 0x00	; 0
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	7b e1       	ldi	r23, 0x1B	; 27
     8d2:	87 eb       	ldi	r24, 0xB7	; 183
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
     8da:	72 2e       	mov	r7, r18
     8dc:	83 2e       	mov	r8, r19
     8de:	94 2e       	mov	r9, r20
     8e0:	e5 2e       	mov	r14, r21
     8e2:	5e 01       	movw	r10, r28
     8e4:	08 94       	sec
     8e6:	a1 1c       	adc	r10, r1
     8e8:	b1 1c       	adc	r11, r1
     8ea:	c9 01       	movw	r24, r18
     8ec:	da 01       	movw	r26, r20
     8ee:	9c 01       	movw	r18, r24
     8f0:	ad 01       	movw	r20, r26
     8f2:	ff 24       	eor	r15, r15
     8f4:	14 c0       	rjmp	.+40     	; 0x91e <__stack+0x1f>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     8f6:	f5 01       	movw	r30, r10
     8f8:	21 91       	ld	r18, Z+
     8fa:	31 91       	ld	r19, Z+
     8fc:	5f 01       	movw	r10, r30
     8fe:	40 e0       	ldi	r20, 0x00	; 0
     900:	50 e0       	ldi	r21, 0x00	; 0
     902:	67 2d       	mov	r22, r7
     904:	78 2d       	mov	r23, r8
     906:	89 2d       	mov	r24, r9
     908:	9e 2d       	mov	r25, r14
     90a:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
     90e:	c9 01       	movw	r24, r18
     910:	da 01       	movw	r26, r20
     912:	9c 01       	movw	r18, r24
     914:	ad 01       	movw	r20, r26
	  clock_div_index++;
     916:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     918:	f5 e0       	ldi	r31, 0x05	; 5
     91a:	ff 16       	cp	r15, r31
     91c:	31 f0       	breq	.+12     	; 0x92a <__stack+0x2b>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     91e:	2f 3f       	cpi	r18, 0xFF	; 255
     920:	31 05       	cpc	r19, r1
     922:	41 05       	cpc	r20, r1
     924:	51 05       	cpc	r21, r1
     926:	09 f0       	breq	.+2      	; 0x92a <__stack+0x2b>
     928:	34 f7       	brge	.-52     	; 0x8f6 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     92a:	8f 2d       	mov	r24, r15
     92c:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     92e:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     930:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     932:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     936:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     938:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     93a:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     93c:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     93e:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     940:	88 23       	and	r24, r24
     942:	11 f4       	brne	.+4      	; 0x948 <__stack+0x49>
	  TCCR0B = (1<<CS00);
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	0f c0       	rjmp	.+30     	; 0x966 <__stack+0x67>
	}else if(clock_div_index == 1){
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	11 f4       	brne	.+4      	; 0x950 <__stack+0x51>
	  TCCR0B = (1<<CS01);
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	0b c0       	rjmp	.+22     	; 0x966 <__stack+0x67>
	}else if(clock_div_index == 2){
     950:	82 30       	cpi	r24, 0x02	; 2
     952:	11 f4       	brne	.+4      	; 0x958 <__stack+0x59>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	07 c0       	rjmp	.+14     	; 0x966 <__stack+0x67>
	}else if(clock_div_index == 3){
     958:	83 30       	cpi	r24, 0x03	; 3
     95a:	11 f4       	brne	.+4      	; 0x960 <__stack+0x61>
	  TCCR0B = (1<<CS02);
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	03 c0       	rjmp	.+6      	; 0x966 <__stack+0x67>
	}else if(clock_div_index == 4){
     960:	84 30       	cpi	r24, 0x04	; 4
     962:	11 f4       	brne	.+4      	; 0x968 <__stack+0x69>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     964:	85 e0       	ldi	r24, 0x05	; 5
     966:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     968:	82 2f       	mov	r24, r18
     96a:	80 95       	com	r24
     96c:	f6 01       	movw	r30, r12
     96e:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 6e 00 	sts	0x006E, r24
    sei();
     97a:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     97c:	f6 01       	movw	r30, r12
     97e:	12 83       	std	Z+2, r17	; 0x02
     980:	01 83       	std	Z+1, r16	; 0x01
}
     982:	2a 96       	adiw	r28, 0x0a	; 10
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	cf 91       	pop	r28
     990:	df 91       	pop	r29
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	7f 90       	pop	r7
     9a8:	08 95       	ret

000009aa <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9aa:	f8 94       	cli
}
     9ac:	08 95       	ret

000009ae <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     9ae:	78 94       	sei
}
     9b0:	08 95       	ret

000009b2 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     9b2:	e0 91 43 01 	lds	r30, 0x0143
     9b6:	f0 91 44 01 	lds	r31, 0x0144
     9ba:	26 85       	ldd	r18, Z+14	; 0x0e
     9bc:	37 85       	ldd	r19, Z+15	; 0x0f
}
     9be:	c9 01       	movw	r24, r18
     9c0:	08 95       	ret

000009c2 <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     9c2:	e0 91 43 01 	lds	r30, 0x0143
     9c6:	f0 91 44 01 	lds	r31, 0x0144
     9ca:	20 89       	ldd	r18, Z+16	; 0x10
     9cc:	31 89       	ldd	r19, Z+17	; 0x11
     9ce:	42 89       	ldd	r20, Z+18	; 0x12
     9d0:	53 89       	ldd	r21, Z+19	; 0x13
}
     9d2:	b9 01       	movw	r22, r18
     9d4:	ca 01       	movw	r24, r20
     9d6:	08 95       	ret

000009d8 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9d8:	e0 91 43 01 	lds	r30, 0x0143
     9dc:	f0 91 44 01 	lds	r31, 0x0144
     9e0:	20 85       	ldd	r18, Z+8	; 0x08
     9e2:	31 85       	ldd	r19, Z+9	; 0x09
}
     9e4:	c9 01       	movw	r24, r18
     9e6:	08 95       	ret

000009e8 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9e8:	e0 91 43 01 	lds	r30, 0x0143
     9ec:	f0 91 44 01 	lds	r31, 0x0144
     9f0:	22 85       	ldd	r18, Z+10	; 0x0a
     9f2:	33 85       	ldd	r19, Z+11	; 0x0b
     9f4:	44 85       	ldd	r20, Z+12	; 0x0c
     9f6:	55 85       	ldd	r21, Z+13	; 0x0d
}
     9f8:	b9 01       	movw	r22, r18
     9fa:	ca 01       	movw	r24, r20
     9fc:	08 95       	ret

000009fe <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     9fe:	e0 91 43 01 	lds	r30, 0x0143
     a02:	f0 91 44 01 	lds	r31, 0x0144
     a06:	91 87       	std	Z+9, r25	; 0x09
     a08:	80 87       	std	Z+8, r24	; 0x08
}
     a0a:	08 95       	ret

00000a0c <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     a0c:	e0 91 43 01 	lds	r30, 0x0143
     a10:	f0 91 44 01 	lds	r31, 0x0144
     a14:	62 87       	std	Z+10, r22	; 0x0a
     a16:	73 87       	std	Z+11, r23	; 0x0b
     a18:	84 87       	std	Z+12, r24	; 0x0c
     a1a:	95 87       	std	Z+13, r25	; 0x0d
}
     a1c:	08 95       	ret

00000a1e <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     a1e:	e0 91 43 01 	lds	r30, 0x0143
     a22:	f0 91 44 01 	lds	r31, 0x0144
     a26:	84 89       	ldd	r24, Z+20	; 0x14
     a28:	88 23       	and	r24, r24
     a2a:	81 f4       	brne	.+32     	; 0xa4c <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a2c:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
  
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     a2e:	86 85       	ldd	r24, Z+14	; 0x0e
     a30:	97 85       	ldd	r25, Z+15	; 0x0f
     a32:	91 87       	std	Z+9, r25	; 0x09
     a34:	80 87       	std	Z+8, r24	; 0x08
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     a36:	80 89       	ldd	r24, Z+16	; 0x10
     a38:	91 89       	ldd	r25, Z+17	; 0x11
     a3a:	a2 89       	ldd	r26, Z+18	; 0x12
     a3c:	b3 89       	ldd	r27, Z+19	; 0x13
     a3e:	82 87       	std	Z+10, r24	; 0x0a
     a40:	93 87       	std	Z+11, r25	; 0x0b
     a42:	a4 87       	std	Z+12, r26	; 0x0c
     a44:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a46:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	84 8b       	std	Z+20, r24	; 0x14
     a4c:	08 95       	ret

00000a4e <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     a4e:	6f 92       	push	r6
     a50:	7f 92       	push	r7
     a52:	8f 92       	push	r8
     a54:	9f 92       	push	r9
     a56:	af 92       	push	r10
     a58:	bf 92       	push	r11
     a5a:	cf 92       	push	r12
     a5c:	df 92       	push	r13
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a6c:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     a6e:	c0 91 43 01 	lds	r28, 0x0143
     a72:	d0 91 44 01 	lds	r29, 0x0144
     a76:	ee 84       	ldd	r14, Y+14	; 0x0e
     a78:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     a7a:	28 89       	ldd	r18, Y+16	; 0x10
     a7c:	39 89       	ldd	r19, Y+17	; 0x11
     a7e:	4a 89       	ldd	r20, Y+18	; 0x12
     a80:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a82:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a84:	69 81       	ldd	r22, Y+1	; 0x01
     a86:	7a 81       	ldd	r23, Y+2	; 0x02
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulsi3>
     a90:	3b 01       	movw	r6, r22
     a92:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	10 e0       	ldi	r17, 0x00	; 0
     a98:	6e 0c       	add	r6, r14
     a9a:	7f 1c       	adc	r7, r15
     a9c:	80 1e       	adc	r8, r16
     a9e:	91 1e       	adc	r9, r17
  smpl_val += value;
     aa0:	cc 24       	eor	r12, r12
     aa2:	dd 24       	eor	r13, r13
     aa4:	6a 0c       	add	r6, r10
     aa6:	7b 1c       	adc	r7, r11
     aa8:	8c 1c       	adc	r8, r12
     aaa:	9d 1c       	adc	r9, r13
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	14 c0       	rjmp	.+40     	; 0xade <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ab6:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     ab8:	ee 84       	ldd	r14, Y+14	; 0x0e
     aba:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     abc:	28 89       	ldd	r18, Y+16	; 0x10
     abe:	39 89       	ldd	r19, Y+17	; 0x11
     ac0:	4a 89       	ldd	r20, Y+18	; 0x12
     ac2:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ac4:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     ac6:	69 81       	ldd	r22, Y+1	; 0x01
     ac8:	7a 81       	ldd	r23, Y+2	; 0x02
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulsi3>
	curr_val += curr_ss;
     ad2:	00 e0       	ldi	r16, 0x00	; 0
     ad4:	10 e0       	ldi	r17, 0x00	; 0
     ad6:	6e 0d       	add	r22, r14
     ad8:	7f 1d       	adc	r23, r15
     ada:	80 1f       	adc	r24, r16
     adc:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     ade:	66 15       	cp	r22, r6
     ae0:	77 05       	cpc	r23, r7
     ae2:	88 05       	cpc	r24, r8
     ae4:	99 05       	cpc	r25, r9
     ae6:	3c f3       	brlt	.-50     	; 0xab6 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	bf 90       	pop	r11
     afa:	af 90       	pop	r10
     afc:	9f 90       	pop	r9
     afe:	8f 90       	pop	r8
     b00:	7f 90       	pop	r7
     b02:	6f 90       	pop	r6
     b04:	08 95       	ret

00000b06 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     b06:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b08:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b0a:	e0 91 43 01 	lds	r30, 0x0143
     b0e:	f0 91 44 01 	lds	r31, 0x0144
     b12:	01 c0       	rjmp	.+2      	; 0xb16 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b14:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b16:	86 85       	ldd	r24, Z+14	; 0x0e
     b18:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b1a:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     b1c:	24 81       	ldd	r18, Z+4	; 0x04
     b1e:	35 81       	ldd	r19, Z+5	; 0x05
     b20:	46 81       	ldd	r20, Z+6	; 0x06
     b22:	57 81       	ldd	r21, Z+7	; 0x07
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	82 17       	cp	r24, r18
     b2a:	93 07       	cpc	r25, r19
     b2c:	a4 07       	cpc	r26, r20
     b2e:	b5 07       	cpc	r27, r21
     b30:	89 f7       	brne	.-30     	; 0xb14 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b32:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b34:	86 85       	ldd	r24, Z+14	; 0x0e
     b36:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b38:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	84 83       	std	Z+4, r24	; 0x04
     b40:	95 83       	std	Z+5, r25	; 0x05
     b42:	a6 83       	std	Z+6, r26	; 0x06
     b44:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     b46:	24 81       	ldd	r18, Z+4	; 0x04
     b48:	35 81       	ldd	r19, Z+5	; 0x05
     b4a:	46 81       	ldd	r20, Z+6	; 0x06
     b4c:	57 81       	ldd	r21, Z+7	; 0x07
     b4e:	cb 01       	movw	r24, r22
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	a4 1f       	adc	r26, r20
     b5a:	b5 1f       	adc	r27, r21
     b5c:	84 83       	std	Z+4, r24	; 0x04
     b5e:	95 83       	std	Z+5, r25	; 0x05
     b60:	a6 83       	std	Z+6, r26	; 0x06
     b62:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     b64:	24 81       	ldd	r18, Z+4	; 0x04
     b66:	35 81       	ldd	r19, Z+5	; 0x05
     b68:	46 81       	ldd	r20, Z+6	; 0x06
     b6a:	57 81       	ldd	r21, Z+7	; 0x07
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	92 81       	ldd	r25, Z+2	; 0x02
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	28 17       	cp	r18, r24
     b76:	39 07       	cpc	r19, r25
     b78:	4a 07       	cpc	r20, r26
     b7a:	5b 07       	cpc	r21, r27
     b7c:	84 f0       	brlt	.+32     	; 0xb9e <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b7e:	24 81       	ldd	r18, Z+4	; 0x04
     b80:	35 81       	ldd	r19, Z+5	; 0x05
     b82:	46 81       	ldd	r20, Z+6	; 0x06
     b84:	57 81       	ldd	r21, Z+7	; 0x07
     b86:	81 81       	ldd	r24, Z+1	; 0x01
     b88:	92 81       	ldd	r25, Z+2	; 0x02
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	28 1b       	sub	r18, r24
     b90:	39 0b       	sbc	r19, r25
     b92:	4a 0b       	sbc	r20, r26
     b94:	5b 0b       	sbc	r21, r27
     b96:	24 83       	std	Z+4, r18	; 0x04
     b98:	35 83       	std	Z+5, r19	; 0x05
     b9a:	46 83       	std	Z+6, r20	; 0x06
     b9c:	57 83       	std	Z+7, r21	; 0x07
     b9e:	08 95       	ret

00000ba0 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ba0:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     ba2:	e0 91 43 01 	lds	r30, 0x0143
     ba6:	f0 91 44 01 	lds	r31, 0x0144
     baa:	20 89       	ldd	r18, Z+16	; 0x10
     bac:	31 89       	ldd	r19, Z+17	; 0x11
     bae:	42 89       	ldd	r20, Z+18	; 0x12
     bb0:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bb2:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     bb4:	a0 e0       	ldi	r26, 0x00	; 0
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	82 0f       	add	r24, r18
     bba:	93 1f       	adc	r25, r19
     bbc:	a4 1f       	adc	r26, r20
     bbe:	b5 1f       	adc	r27, r21
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e0       	ldi	r20, 0x00	; 0
     bc6:	50 e0       	ldi	r21, 0x00	; 0
     bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bca:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     bcc:	20 89       	ldd	r18, Z+16	; 0x10
     bce:	31 89       	ldd	r19, Z+17	; 0x11
     bd0:	42 89       	ldd	r20, Z+18	; 0x12
     bd2:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bd4:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     bd6:	28 17       	cp	r18, r24
     bd8:	39 07       	cpc	r19, r25
     bda:	4a 07       	cpc	r20, r26
     bdc:	5b 07       	cpc	r21, r27
     bde:	ac f3       	brlt	.-22     	; 0xbca <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     be0:	08 95       	ret

00000be2 <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     be2:	e0 91 43 01 	lds	r30, 0x0143
     be6:	f0 91 44 01 	lds	r31, 0x0144
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	29 e1       	ldi	r18, 0x19	; 25
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	ac 01       	movw	r20, r24
     bf2:	42 9f       	mul	r20, r18
     bf4:	c0 01       	movw	r24, r0
     bf6:	43 9f       	mul	r20, r19
     bf8:	90 0d       	add	r25, r0
     bfa:	52 9f       	mul	r21, r18
     bfc:	90 0d       	add	r25, r0
     bfe:	11 24       	eor	r1, r1
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	86 89       	ldd	r24, Z+22	; 0x16
     c06:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     c08:	8f 70       	andi	r24, 0x0F	; 15
     c0a:	08 95       	ret

00000c0c <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c0c:	e0 91 43 01 	lds	r30, 0x0143
     c10:	f0 91 44 01 	lds	r31, 0x0144
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	29 e1       	ldi	r18, 0x19	; 25
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	ac 01       	movw	r20, r24
     c1c:	42 9f       	mul	r20, r18
     c1e:	c0 01       	movw	r24, r0
     c20:	43 9f       	mul	r20, r19
     c22:	90 0d       	add	r25, r0
     c24:	52 9f       	mul	r21, r18
     c26:	90 0d       	add	r25, r0
     c28:	11 24       	eor	r1, r1
     c2a:	e8 0f       	add	r30, r24
     c2c:	f9 1f       	adc	r31, r25
     c2e:	6f 70       	andi	r22, 0x0F	; 15
     c30:	66 0f       	add	r22, r22
     c32:	86 89       	ldd	r24, Z+22	; 0x16
     c34:	81 7e       	andi	r24, 0xE1	; 225
     c36:	86 2b       	or	r24, r22
     c38:	86 8b       	std	Z+22, r24	; 0x16
}
     c3a:	08 95       	ret

00000c3c <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     c3c:	e0 91 43 01 	lds	r30, 0x0143
     c40:	f0 91 44 01 	lds	r31, 0x0144
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	29 e1       	ldi	r18, 0x19	; 25
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	ac 01       	movw	r20, r24
     c4c:	42 9f       	mul	r20, r18
     c4e:	c0 01       	movw	r24, r0
     c50:	43 9f       	mul	r20, r19
     c52:	90 0d       	add	r25, r0
     c54:	52 9f       	mul	r21, r18
     c56:	90 0d       	add	r25, r0
     c58:	11 24       	eor	r1, r1
     c5a:	e8 0f       	add	r30, r24
     c5c:	f9 1f       	adc	r31, r25
     c5e:	df 01       	movw	r26, r30
     c60:	97 96       	adiw	r26, 0x27	; 39
     c62:	67 a1       	ldd	r22, Z+39	; 0x27
     c64:	11 96       	adiw	r26, 0x01	; 1
     c66:	7c 91       	ld	r23, X
     c68:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     c6a:	12 96       	adiw	r26, 0x02	; 2
     c6c:	8c 91       	ld	r24, X
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	13 96       	adiw	r26, 0x03	; 3
     c72:	9c 91       	ld	r25, X
     c74:	08 95       	ret

00000c76 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     c7a:	c0 91 43 01 	lds	r28, 0x0143
     c7e:	d0 91 44 01 	lds	r29, 0x0144
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	29 e1       	ldi	r18, 0x19	; 25
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	fc 01       	movw	r30, r24
     c8a:	e2 9f       	mul	r30, r18
     c8c:	c0 01       	movw	r24, r0
     c8e:	e3 9f       	mul	r30, r19
     c90:	90 0d       	add	r25, r0
     c92:	f2 9f       	mul	r31, r18
     c94:	90 0d       	add	r25, r0
     c96:	11 24       	eor	r1, r1
     c98:	c8 0f       	add	r28, r24
     c9a:	d9 1f       	adc	r29, r25
     c9c:	ca 01       	movw	r24, r20
     c9e:	db 01       	movw	r26, r22
     ca0:	b7 ff       	sbrs	r27, 7
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <Timebase_UpCounter_SS_Set_Value+0x36>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 e0       	ldi	r26, 0x00	; 0
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	8f a3       	std	Y+39, r24	; 0x27
     cae:	98 a7       	std	Y+40, r25	; 0x28
     cb0:	a9 a7       	std	Y+41, r26	; 0x29
     cb2:	ba a7       	std	Y+42, r27	; 0x2a
}
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     cba:	e0 91 43 01 	lds	r30, 0x0143
     cbe:	f0 91 44 01 	lds	r31, 0x0144
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	29 e1       	ldi	r18, 0x19	; 25
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	ac 01       	movw	r20, r24
     cca:	42 9f       	mul	r20, r18
     ccc:	c0 01       	movw	r24, r0
     cce:	43 9f       	mul	r20, r19
     cd0:	90 0d       	add	r25, r0
     cd2:	52 9f       	mul	r21, r18
     cd4:	90 0d       	add	r25, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	df 01       	movw	r26, r30
     cde:	57 96       	adiw	r26, 0x17	; 23
     ce0:	67 89       	ldd	r22, Z+23	; 0x17
     ce2:	11 96       	adiw	r26, 0x01	; 1
     ce4:	7c 91       	ld	r23, X
     ce6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     ce8:	12 96       	adiw	r26, 0x02	; 2
     cea:	8c 91       	ld	r24, X
     cec:	12 97       	sbiw	r26, 0x02	; 2
     cee:	13 96       	adiw	r26, 0x03	; 3
     cf0:	9c 91       	ld	r25, X
     cf2:	08 95       	ret

00000cf4 <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     cf4:	e0 91 43 01 	lds	r30, 0x0143
     cf8:	f0 91 44 01 	lds	r31, 0x0144
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	29 e1       	ldi	r18, 0x19	; 25
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	ac 01       	movw	r20, r24
     d04:	42 9f       	mul	r20, r18
     d06:	c0 01       	movw	r24, r0
     d08:	43 9f       	mul	r20, r19
     d0a:	90 0d       	add	r25, r0
     d0c:	52 9f       	mul	r21, r18
     d0e:	90 0d       	add	r25, r0
     d10:	11 24       	eor	r1, r1
     d12:	e8 0f       	add	r30, r24
     d14:	f9 1f       	adc	r31, r25
     d16:	df 01       	movw	r26, r30
     d18:	5b 96       	adiw	r26, 0x1b	; 27
     d1a:	63 8d       	ldd	r22, Z+27	; 0x1b
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	7c 91       	ld	r23, X
     d20:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     d22:	12 96       	adiw	r26, 0x02	; 2
     d24:	8c 91       	ld	r24, X
     d26:	12 97       	sbiw	r26, 0x02	; 2
     d28:	13 96       	adiw	r26, 0x03	; 3
     d2a:	9c 91       	ld	r25, X
     d2c:	08 95       	ret

00000d2e <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     d2e:	e0 91 43 01 	lds	r30, 0x0143
     d32:	f0 91 44 01 	lds	r31, 0x0144
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	29 e1       	ldi	r18, 0x19	; 25
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	dc 01       	movw	r26, r24
     d3e:	a2 9f       	mul	r26, r18
     d40:	c0 01       	movw	r24, r0
     d42:	a3 9f       	mul	r26, r19
     d44:	90 0d       	add	r25, r0
     d46:	b2 9f       	mul	r27, r18
     d48:	90 0d       	add	r25, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	e8 0f       	add	r30, r24
     d4e:	f9 1f       	adc	r31, r25
     d50:	47 8b       	std	Z+23, r20	; 0x17
     d52:	50 8f       	std	Z+24, r21	; 0x18
     d54:	61 8f       	std	Z+25, r22	; 0x19
     d56:	72 8f       	std	Z+26, r23	; 0x1a
}
     d58:	08 95       	ret

00000d5a <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     d5a:	e0 91 43 01 	lds	r30, 0x0143
     d5e:	f0 91 44 01 	lds	r31, 0x0144
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	29 e1       	ldi	r18, 0x19	; 25
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	dc 01       	movw	r26, r24
     d6a:	a2 9f       	mul	r26, r18
     d6c:	c0 01       	movw	r24, r0
     d6e:	a3 9f       	mul	r26, r19
     d70:	90 0d       	add	r25, r0
     d72:	b2 9f       	mul	r27, r18
     d74:	90 0d       	add	r25, r0
     d76:	11 24       	eor	r1, r1
     d78:	e8 0f       	add	r30, r24
     d7a:	f9 1f       	adc	r31, r25
     d7c:	43 8f       	std	Z+27, r20	; 0x1b
     d7e:	54 8f       	std	Z+28, r21	; 0x1c
     d80:	65 8f       	std	Z+29, r22	; 0x1d
     d82:	76 8f       	std	Z+30, r23	; 0x1e
}
     d84:	08 95       	ret

00000d86 <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     d86:	e0 91 43 01 	lds	r30, 0x0143
     d8a:	f0 91 44 01 	lds	r31, 0x0144
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	29 e1       	ldi	r18, 0x19	; 25
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	ac 01       	movw	r20, r24
     d96:	42 9f       	mul	r20, r18
     d98:	c0 01       	movw	r24, r0
     d9a:	43 9f       	mul	r20, r19
     d9c:	90 0d       	add	r25, r0
     d9e:	52 9f       	mul	r21, r18
     da0:	90 0d       	add	r25, r0
     da2:	11 24       	eor	r1, r1
     da4:	e8 0f       	add	r30, r24
     da6:	f9 1f       	adc	r31, r25
     da8:	df 01       	movw	r26, r30
     daa:	5f 96       	adiw	r26, 0x1f	; 31
     dac:	67 8d       	ldd	r22, Z+31	; 0x1f
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	7c 91       	ld	r23, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     db4:	12 96       	adiw	r26, 0x02	; 2
     db6:	8c 91       	ld	r24, X
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	13 96       	adiw	r26, 0x03	; 3
     dbc:	9c 91       	ld	r25, X
     dbe:	08 95       	ret

00000dc0 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     dc0:	e0 91 43 01 	lds	r30, 0x0143
     dc4:	f0 91 44 01 	lds	r31, 0x0144
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	29 e1       	ldi	r18, 0x19	; 25
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	dc 01       	movw	r26, r24
     dd0:	a2 9f       	mul	r26, r18
     dd2:	c0 01       	movw	r24, r0
     dd4:	a3 9f       	mul	r26, r19
     dd6:	90 0d       	add	r25, r0
     dd8:	b2 9f       	mul	r27, r18
     dda:	90 0d       	add	r25, r0
     ddc:	11 24       	eor	r1, r1
     dde:	e8 0f       	add	r30, r24
     de0:	f9 1f       	adc	r31, r25
     de2:	47 8f       	std	Z+31, r20	; 0x1f
     de4:	50 a3       	std	Z+32, r21	; 0x20
     de6:	61 a3       	std	Z+33, r22	; 0x21
     de8:	72 a3       	std	Z+34, r23	; 0x22
}
     dea:	08 95       	ret

00000dec <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     dec:	e0 91 43 01 	lds	r30, 0x0143
     df0:	f0 91 44 01 	lds	r31, 0x0144
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	29 e1       	ldi	r18, 0x19	; 25
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	ac 01       	movw	r20, r24
     dfc:	42 9f       	mul	r20, r18
     dfe:	c0 01       	movw	r24, r0
     e00:	43 9f       	mul	r20, r19
     e02:	90 0d       	add	r25, r0
     e04:	52 9f       	mul	r21, r18
     e06:	90 0d       	add	r25, r0
     e08:	11 24       	eor	r1, r1
     e0a:	e8 0f       	add	r30, r24
     e0c:	f9 1f       	adc	r31, r25
     e0e:	df 01       	movw	r26, r30
     e10:	93 96       	adiw	r26, 0x23	; 35
     e12:	63 a1       	ldd	r22, Z+35	; 0x23
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	7c 91       	ld	r23, X
     e18:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     e1a:	12 96       	adiw	r26, 0x02	; 2
     e1c:	8c 91       	ld	r24, X
     e1e:	12 97       	sbiw	r26, 0x02	; 2
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 91       	ld	r25, X
     e24:	08 95       	ret

00000e26 <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     e2a:	c0 91 43 01 	lds	r28, 0x0143
     e2e:	d0 91 44 01 	lds	r29, 0x0144
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	29 e1       	ldi	r18, 0x19	; 25
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	fc 01       	movw	r30, r24
     e3a:	e2 9f       	mul	r30, r18
     e3c:	c0 01       	movw	r24, r0
     e3e:	e3 9f       	mul	r30, r19
     e40:	90 0d       	add	r25, r0
     e42:	f2 9f       	mul	r31, r18
     e44:	90 0d       	add	r25, r0
     e46:	11 24       	eor	r1, r1
     e48:	c8 0f       	add	r28, r24
     e4a:	d9 1f       	adc	r29, r25
     e4c:	ca 01       	movw	r24, r20
     e4e:	db 01       	movw	r26, r22
     e50:	b7 ff       	sbrs	r27, 7
     e52:	04 c0       	rjmp	.+8      	; 0xe5c <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	8b a3       	std	Y+35, r24	; 0x23
     e5e:	9c a3       	std	Y+36, r25	; 0x24
     e60:	ad a3       	std	Y+37, r26	; 0x25
     e62:	be a3       	std	Y+38, r27	; 0x26
}
     e64:	df 91       	pop	r29
     e66:	cf 91       	pop	r28
     e68:	08 95       	ret

00000e6a <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     e6a:	e0 91 43 01 	lds	r30, 0x0143
     e6e:	f0 91 44 01 	lds	r31, 0x0144
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	29 e1       	ldi	r18, 0x19	; 25
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	ac 01       	movw	r20, r24
     e7a:	42 9f       	mul	r20, r18
     e7c:	c0 01       	movw	r24, r0
     e7e:	43 9f       	mul	r20, r19
     e80:	90 0d       	add	r25, r0
     e82:	52 9f       	mul	r21, r18
     e84:	90 0d       	add	r25, r0
     e86:	11 24       	eor	r1, r1
     e88:	e8 0f       	add	r30, r24
     e8a:	f9 1f       	adc	r31, r25
     e8c:	df 01       	movw	r26, r30
     e8e:	9b 96       	adiw	r26, 0x2b	; 43
     e90:	63 a5       	ldd	r22, Z+43	; 0x2b
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	7c 91       	ld	r23, X
     e96:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     e98:	12 96       	adiw	r26, 0x02	; 2
     e9a:	8c 91       	ld	r24, X
     e9c:	12 97       	sbiw	r26, 0x02	; 2
     e9e:	13 96       	adiw	r26, 0x03	; 3
     ea0:	9c 91       	ld	r25, X
     ea2:	08 95       	ret

00000ea4 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     ea4:	e0 91 43 01 	lds	r30, 0x0143
     ea8:	f0 91 44 01 	lds	r31, 0x0144
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	29 e1       	ldi	r18, 0x19	; 25
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	dc 01       	movw	r26, r24
     eb4:	a2 9f       	mul	r26, r18
     eb6:	c0 01       	movw	r24, r0
     eb8:	a3 9f       	mul	r26, r19
     eba:	90 0d       	add	r25, r0
     ebc:	b2 9f       	mul	r27, r18
     ebe:	90 0d       	add	r25, r0
     ec0:	11 24       	eor	r1, r1
     ec2:	e8 0f       	add	r30, r24
     ec4:	f9 1f       	adc	r31, r25
     ec6:	43 a7       	std	Z+43, r20	; 0x2b
     ec8:	54 a7       	std	Z+44, r21	; 0x2c
     eca:	65 a7       	std	Z+45, r22	; 0x2d
     ecc:	76 a7       	std	Z+46, r23	; 0x2e
}
     ece:	08 95       	ret

00000ed0 <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     ed0:	e0 91 43 01 	lds	r30, 0x0143
     ed4:	f0 91 44 01 	lds	r31, 0x0144
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	29 e1       	ldi	r18, 0x19	; 25
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	ac 01       	movw	r20, r24
     ee0:	42 9f       	mul	r20, r18
     ee2:	c0 01       	movw	r24, r0
     ee4:	43 9f       	mul	r20, r19
     ee6:	90 0d       	add	r25, r0
     ee8:	52 9f       	mul	r21, r18
     eea:	90 0d       	add	r25, r0
     eec:	11 24       	eor	r1, r1
     eee:	e8 0f       	add	r30, r24
     ef0:	f9 1f       	adc	r31, r25
     ef2:	86 89       	ldd	r24, Z+22	; 0x16
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     ef4:	81 70       	andi	r24, 0x01	; 1
     ef6:	08 95       	ret

00000ef8 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     ef8:	e0 91 43 01 	lds	r30, 0x0143
     efc:	f0 91 44 01 	lds	r31, 0x0144
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	29 e1       	ldi	r18, 0x19	; 25
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	ac 01       	movw	r20, r24
     f08:	42 9f       	mul	r20, r18
     f0a:	c0 01       	movw	r24, r0
     f0c:	43 9f       	mul	r20, r19
     f0e:	90 0d       	add	r25, r0
     f10:	52 9f       	mul	r21, r18
     f12:	90 0d       	add	r25, r0
     f14:	11 24       	eor	r1, r1
     f16:	e8 0f       	add	r30, r24
     f18:	f9 1f       	adc	r31, r25
     f1a:	86 89       	ldd	r24, Z+22	; 0x16
     f1c:	81 60       	ori	r24, 0x01	; 1
     f1e:	86 8b       	std	Z+22, r24	; 0x16
}
     f20:	08 95       	ret

00000f22 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f22:	e0 91 43 01 	lds	r30, 0x0143
     f26:	f0 91 44 01 	lds	r31, 0x0144
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	29 e1       	ldi	r18, 0x19	; 25
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	ac 01       	movw	r20, r24
     f32:	42 9f       	mul	r20, r18
     f34:	c0 01       	movw	r24, r0
     f36:	43 9f       	mul	r20, r19
     f38:	90 0d       	add	r25, r0
     f3a:	52 9f       	mul	r21, r18
     f3c:	90 0d       	add	r25, r0
     f3e:	11 24       	eor	r1, r1
     f40:	e8 0f       	add	r30, r24
     f42:	f9 1f       	adc	r31, r25
     f44:	86 89       	ldd	r24, Z+22	; 0x16
     f46:	8e 7f       	andi	r24, 0xFE	; 254
     f48:	86 8b       	std	Z+22, r24	; 0x16
}
     f4a:	08 95       	ret

00000f4c <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     f4c:	e0 91 43 01 	lds	r30, 0x0143
     f50:	f0 91 44 01 	lds	r31, 0x0144
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	29 e1       	ldi	r18, 0x19	; 25
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	ac 01       	movw	r20, r24
     f5c:	42 9f       	mul	r20, r18
     f5e:	c0 01       	movw	r24, r0
     f60:	43 9f       	mul	r20, r19
     f62:	90 0d       	add	r25, r0
     f64:	52 9f       	mul	r21, r18
     f66:	90 0d       	add	r25, r0
     f68:	11 24       	eor	r1, r1
     f6a:	e8 0f       	add	r30, r24
     f6c:	f9 1f       	adc	r31, r25
     f6e:	86 89       	ldd	r24, Z+22	; 0x16

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     f70:	17 a2       	std	Z+39, r1	; 0x27
     f72:	10 a6       	std	Z+40, r1	; 0x28
     f74:	11 a6       	std	Z+41, r1	; 0x29
     f76:	12 a6       	std	Z+42, r1	; 0x2a
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     f78:	17 8a       	std	Z+23, r1	; 0x17
     f7a:	10 8e       	std	Z+24, r1	; 0x18
     f7c:	11 8e       	std	Z+25, r1	; 0x19
     f7e:	12 8e       	std	Z+26, r1	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     f80:	13 8e       	std	Z+27, r1	; 0x1b
     f82:	14 8e       	std	Z+28, r1	; 0x1c
     f84:	15 8e       	std	Z+29, r1	; 0x1d
     f86:	16 8e       	std	Z+30, r1	; 0x1e
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     f88:	17 8e       	std	Z+31, r1	; 0x1f
     f8a:	10 a2       	std	Z+32, r1	; 0x20
     f8c:	11 a2       	std	Z+33, r1	; 0x21
     f8e:	12 a2       	std	Z+34, r1	; 0x22

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     f90:	13 a2       	std	Z+35, r1	; 0x23
     f92:	14 a2       	std	Z+36, r1	; 0x24
     f94:	15 a2       	std	Z+37, r1	; 0x25
     f96:	16 a2       	std	Z+38, r1	; 0x26
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     f98:	13 a6       	std	Z+43, r1	; 0x2b
     f9a:	14 a6       	std	Z+44, r1	; 0x2c
     f9c:	15 a6       	std	Z+45, r1	; 0x2d
     f9e:	16 a6       	std	Z+46, r1	; 0x2e
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     fa0:	80 7e       	andi	r24, 0xE0	; 224
     fa2:	86 8b       	std	Z+22, r24	; 0x16
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
     fa4:	08 95       	ret

00000fa6 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     fa6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Timebase_UpCounter_SS_Reset>
}
     faa:	08 95       	ret

00000fac <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     fac:	e0 91 43 01 	lds	r30, 0x0143
     fb0:	f0 91 44 01 	lds	r31, 0x0144
     fb4:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     fb6:	29 e1       	ldi	r18, 0x19	; 25
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	ac 01       	movw	r20, r24
     fbc:	42 9f       	mul	r20, r18
     fbe:	c0 01       	movw	r24, r0
     fc0:	43 9f       	mul	r20, r19
     fc2:	90 0d       	add	r25, r0
     fc4:	52 9f       	mul	r21, r18
     fc6:	90 0d       	add	r25, r0
     fc8:	11 24       	eor	r1, r1
     fca:	e8 0f       	add	r30, r24
     fcc:	f9 1f       	adc	r31, r25
     fce:	96 89       	ldd	r25, Z+22	; 0x16
     fd0:	89 2f       	mov	r24, r25
     fd2:	86 95       	lsr	r24
     fd4:	8f 70       	andi	r24, 0x0F	; 15
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     fda:	91 7e       	andi	r25, 0xE1	; 225
     fdc:	92 60       	ori	r25, 0x02	; 2
     fde:	96 8b       	std	Z+22, r25	; 0x16
     fe0:	08 95       	ret

00000fe2 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     fe2:	e0 91 43 01 	lds	r30, 0x0143
     fe6:	f0 91 44 01 	lds	r31, 0x0144
     fea:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     fec:	29 e1       	ldi	r18, 0x19	; 25
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	ac 01       	movw	r20, r24
     ff2:	42 9f       	mul	r20, r18
     ff4:	c0 01       	movw	r24, r0
     ff6:	43 9f       	mul	r20, r19
     ff8:	90 0d       	add	r25, r0
     ffa:	52 9f       	mul	r21, r18
     ffc:	90 0d       	add	r25, r0
     ffe:	11 24       	eor	r1, r1
    1000:	e8 0f       	add	r30, r24
    1002:	f9 1f       	adc	r31, r25
    1004:	96 89       	ldd	r25, Z+22	; 0x16
    1006:	89 2f       	mov	r24, r25
    1008:	86 95       	lsr	r24
    100a:	8f 70       	andi	r24, 0x0F	; 15
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	19 f0       	breq	.+6      	; 0x1016 <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1010:	91 7e       	andi	r25, 0xE1	; 225
    1012:	94 60       	ori	r25, 0x04	; 4
    1014:	96 8b       	std	Z+22, r25	; 0x16
    1016:	08 95       	ret

00001018 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1018:	2f 92       	push	r2
    101a:	3f 92       	push	r3
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <Timebase_UpCounter_SS_Set_Securely+0x26>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <Timebase_UpCounter_SS_Set_Securely+0x28>
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	4a 01       	movw	r8, r20
    1046:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1048:	20 91 43 01 	lds	r18, 0x0143
    104c:	30 91 44 01 	lds	r19, 0x0144
    1050:	3c 83       	std	Y+4, r19	; 0x04
    1052:	2b 83       	std	Y+3, r18	; 0x03
    1054:	a8 2f       	mov	r26, r24
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ba 83       	std	Y+2, r27	; 0x02
    105a:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    105c:	89 e1       	ldi	r24, 0x19	; 25
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a8 9f       	mul	r26, r24
    1062:	f0 01       	movw	r30, r0
    1064:	a9 9f       	mul	r26, r25
    1066:	f0 0d       	add	r31, r0
    1068:	b8 9f       	mul	r27, r24
    106a:	f0 0d       	add	r31, r0
    106c:	11 24       	eor	r1, r1
    106e:	e2 0f       	add	r30, r18
    1070:	f3 1f       	adc	r31, r19
    1072:	86 89       	ldd	r24, Z+22	; 0x16
    1074:	86 95       	lsr	r24
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	09 f0       	breq	.+2      	; 0x107c <Timebase_UpCounter_SS_Set_Securely+0x64>
    107a:	75 c0       	rjmp	.+234    	; 0x1166 <Timebase_UpCounter_SS_Set_Securely+0x14e>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    107c:	17 a2       	std	Z+39, r1	; 0x27
    107e:	10 a6       	std	Z+40, r1	; 0x28
    1080:	11 a6       	std	Z+41, r1	; 0x29
    1082:	12 a6       	std	Z+42, r1	; 0x2a

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    1084:	13 a2       	std	Z+35, r1	; 0x23
    1086:	14 a2       	std	Z+36, r1	; 0x24
    1088:	15 a2       	std	Z+37, r1	; 0x25
    108a:	16 a2       	std	Z+38, r1	; 0x26
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    108c:	47 8f       	std	Z+31, r20	; 0x1f
    108e:	50 a3       	std	Z+32, r21	; 0x20
    1090:	61 a3       	std	Z+33, r22	; 0x21
    1092:	72 a3       	std	Z+34, r23	; 0x22
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1094:	f9 01       	movw	r30, r18
    1096:	c0 84       	ldd	r12, Z+8	; 0x08
    1098:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    109a:	22 84       	ldd	r2, Z+10	; 0x0a
    109c:	33 84       	ldd	r3, Z+11	; 0x0b
    109e:	44 84       	ldd	r4, Z+12	; 0x0c
    10a0:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    10a2:	21 81       	ldd	r18, Z+1	; 0x01
    10a4:	32 81       	ldd	r19, Z+2	; 0x02
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	c5 01       	movw	r24, r10
    10ac:	b4 01       	movw	r22, r8
    10ae:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    10b2:	7b 01       	movw	r14, r22
    10b4:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    10b6:	ab 81       	ldd	r26, Y+3	; 0x03
    10b8:	bc 81       	ldd	r27, Y+4	; 0x04
    10ba:	11 96       	adiw	r26, 0x01	; 1
    10bc:	2d 91       	ld	r18, X+
    10be:	3c 91       	ld	r19, X
    10c0:	12 97       	sbiw	r26, 0x02	; 2
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	c5 01       	movw	r24, r10
    10c8:	b4 01       	movw	r22, r8
    10ca:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    10ce:	c9 01       	movw	r24, r18
    10d0:	da 01       	movw	r26, r20
    10d2:	3c 01       	movw	r6, r24
    10d4:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
    10d6:	56 01       	movw	r10, r12
    10d8:	cc 24       	eor	r12, r12
    10da:	dd 24       	eor	r13, r13
    10dc:	ae 0c       	add	r10, r14
    10de:	bf 1c       	adc	r11, r15
    10e0:	c0 1e       	adc	r12, r16
    10e2:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    10e4:	eb 81       	ldd	r30, Y+3	; 0x03
    10e6:	fc 81       	ldd	r31, Y+4	; 0x04
    10e8:	81 81       	ldd	r24, Z+1	; 0x01
    10ea:	92 81       	ldd	r25, Z+2	; 0x02
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	a8 16       	cp	r10, r24
    10f2:	b9 06       	cpc	r11, r25
    10f4:	ca 06       	cpc	r12, r26
    10f6:	db 06       	cpc	r13, r27
    10f8:	94 f0       	brlt	.+36     	; 0x111e <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
    10fa:	08 94       	sec
    10fc:	61 1c       	adc	r6, r1
    10fe:	71 1c       	adc	r7, r1
    1100:	81 1c       	adc	r8, r1
    1102:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    1104:	21 81       	ldd	r18, Z+1	; 0x01
    1106:	32 81       	ldd	r19, Z+2	; 0x02
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	c6 01       	movw	r24, r12
    110e:	b5 01       	movw	r22, r10
    1110:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    1114:	ac 01       	movw	r20, r24
    1116:	cb 01       	movw	r24, r22
    1118:	da 01       	movw	r26, r20
    111a:	5c 01       	movw	r10, r24
    111c:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    111e:	89 e1       	ldi	r24, 0x19	; 25
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	29 81       	ldd	r18, Y+1	; 0x01
    1124:	3a 81       	ldd	r19, Y+2	; 0x02
    1126:	28 9f       	mul	r18, r24
    1128:	f0 01       	movw	r30, r0
    112a:	29 9f       	mul	r18, r25
    112c:	f0 0d       	add	r31, r0
    112e:	38 9f       	mul	r19, r24
    1130:	f0 0d       	add	r31, r0
    1132:	11 24       	eor	r1, r1
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	e8 0f       	add	r30, r24
    113a:	f9 1f       	adc	r31, r25
    113c:	26 0c       	add	r2, r6
    113e:	37 1c       	adc	r3, r7
    1140:	48 1c       	adc	r4, r8
    1142:	59 1c       	adc	r5, r9
    1144:	27 8a       	std	Z+23, r2	; 0x17
    1146:	30 8e       	std	Z+24, r3	; 0x18
    1148:	41 8e       	std	Z+25, r4	; 0x19
    114a:	52 8e       	std	Z+26, r5	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    114c:	a3 8e       	std	Z+27, r10	; 0x1b
    114e:	b4 8e       	std	Z+28, r11	; 0x1c
    1150:	c5 8e       	std	Z+29, r12	; 0x1d
    1152:	d6 8e       	std	Z+30, r13	; 0x1e
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1154:	96 89       	ldd	r25, Z+22	; 0x16
    1156:	89 2f       	mov	r24, r25
    1158:	86 95       	lsr	r24
    115a:	8f 70       	andi	r24, 0x0F	; 15
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	19 f0       	breq	.+6      	; 0x1166 <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1160:	91 7e       	andi	r25, 0xE1	; 225
    1162:	92 60       	ori	r25, 0x02	; 2
    1164:	96 8b       	std	Z+22, r25	; 0x16
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
    117e:	bf 90       	pop	r11
    1180:	af 90       	pop	r10
    1182:	9f 90       	pop	r9
    1184:	8f 90       	pop	r8
    1186:	7f 90       	pop	r7
    1188:	6f 90       	pop	r6
    118a:	5f 90       	pop	r5
    118c:	4f 90       	pop	r4
    118e:	3f 90       	pop	r3
    1190:	2f 90       	pop	r2
    1192:	08 95       	ret

00001194 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    1194:	df 92       	push	r13
    1196:	ef 92       	push	r14
    1198:	ff 92       	push	r15
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	d8 2e       	mov	r13, r24
    11a0:	7a 01       	movw	r14, r20
    11a2:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    11a4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    11a8:	8d 2d       	mov	r24, r13
    11aa:	b8 01       	movw	r22, r16
    11ac:	a7 01       	movw	r20, r14
    11ae:	0e 94 0c 08 	call	0x1018	; 0x1018 <Timebase_UpCounter_SS_Set_Securely>
} 
    11b2:	1f 91       	pop	r17
    11b4:	0f 91       	pop	r16
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	08 95       	ret

000011be <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    11be:	2f 92       	push	r2
    11c0:	3f 92       	push	r3
    11c2:	4f 92       	push	r4
    11c4:	5f 92       	push	r5
    11c6:	6f 92       	push	r6
    11c8:	7f 92       	push	r7
    11ca:	8f 92       	push	r8
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	00 d0       	rcall	.+0      	; 0x11e4 <Timebase_UpCounter_SS_Update+0x26>
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <Timebase_UpCounter_SS_Update+0x28>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <Timebase_UpCounter_SS_Update+0x2a>
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    11ec:	20 90 43 01 	lds	r2, 0x0143
    11f0:	30 90 44 01 	lds	r3, 0x0144
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	3e 83       	std	Y+6, r19	; 0x06
    11fa:	2d 83       	std	Y+5, r18	; 0x05
    11fc:	89 e1       	ldi	r24, 0x19	; 25
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	28 9f       	mul	r18, r24
    1202:	b0 01       	movw	r22, r0
    1204:	29 9f       	mul	r18, r25
    1206:	70 0d       	add	r23, r0
    1208:	38 9f       	mul	r19, r24
    120a:	70 0d       	add	r23, r0
    120c:	11 24       	eor	r1, r1
    120e:	62 0d       	add	r22, r2
    1210:	73 1d       	adc	r23, r3
    1212:	db 01       	movw	r26, r22
    1214:	56 96       	adiw	r26, 0x16	; 22
    1216:	8c 91       	ld	r24, X
    1218:	56 97       	sbiw	r26, 0x16	; 22
    121a:	86 95       	lsr	r24
    121c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	09 f0       	breq	.+2      	; 0x1224 <Timebase_UpCounter_SS_Update+0x66>
    1222:	b3 c0       	rjmp	.+358    	; 0x138a <Timebase_UpCounter_SS_Update+0x1cc>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1224:	f1 01       	movw	r30, r2
    1226:	22 85       	ldd	r18, Z+10	; 0x0a
    1228:	33 85       	ldd	r19, Z+11	; 0x0b
    122a:	44 85       	ldd	r20, Z+12	; 0x0c
    122c:	55 85       	ldd	r21, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    122e:	80 85       	ldd	r24, Z+8	; 0x08
    1230:	91 85       	ldd	r25, Z+9	; 0x09

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
    1232:	2c 01       	movw	r4, r24
    1234:	66 24       	eor	r6, r6
    1236:	77 24       	eor	r7, r7
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
    1238:	57 96       	adiw	r26, 0x17	; 23
    123a:	ad 90       	ld	r10, X+
    123c:	bd 90       	ld	r11, X+
    123e:	cd 90       	ld	r12, X+
    1240:	dc 90       	ld	r13, X
    1242:	5a 97       	sbiw	r26, 0x1a	; 26
    1244:	a2 1a       	sub	r10, r18
    1246:	b3 0a       	sbc	r11, r19
    1248:	c4 0a       	sbc	r12, r20
    124a:	d5 0a       	sbc	r13, r21
    124c:	d7 fe       	sbrs	r13, 7
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <Timebase_UpCounter_SS_Update+0x98>
    1250:	aa 24       	eor	r10, r10
    1252:	bb 24       	eor	r11, r11
    1254:	65 01       	movw	r12, r10
	if(curr_s < 0){
	  curr_s = 0;
	}
	curr_s *= Timebase->Config.UpdateRate;
    1256:	d1 01       	movw	r26, r2
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	2d 91       	ld	r18, X+
    125c:	3c 91       	ld	r19, X
    125e:	12 97       	sbiw	r26, 0x02	; 2
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
    1260:	89 e1       	ldi	r24, 0x19	; 25
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	4d 81       	ldd	r20, Y+5	; 0x05
    1266:	5e 81       	ldd	r21, Y+6	; 0x06
    1268:	48 9f       	mul	r20, r24
    126a:	f0 01       	movw	r30, r0
    126c:	49 9f       	mul	r20, r25
    126e:	f0 0d       	add	r31, r0
    1270:	58 9f       	mul	r21, r24
    1272:	f0 0d       	add	r31, r0
    1274:	11 24       	eor	r1, r1
    1276:	e2 0d       	add	r30, r2
    1278:	f3 1d       	adc	r31, r3
    127a:	e3 8c       	ldd	r14, Z+27	; 0x1b
    127c:	f4 8c       	ldd	r15, Z+28	; 0x1c
    127e:	05 8d       	ldd	r16, Z+29	; 0x1d
    1280:	16 8d       	ldd	r17, Z+30	; 0x1e
    1282:	e4 18       	sub	r14, r4
    1284:	f5 08       	sbc	r15, r5
    1286:	06 09       	sbc	r16, r6
    1288:	17 09       	sbc	r17, r7
	curr_ss += curr_s;
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	c6 01       	movw	r24, r12
    1290:	b5 01       	movw	r22, r10
    1292:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulsi3>
    1296:	e6 0e       	add	r14, r22
    1298:	f7 1e       	adc	r15, r23
    129a:	08 1f       	adc	r16, r24
    129c:	19 1f       	adc	r17, r25
    129e:	17 ff       	sbrs	r17, 7
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <Timebase_UpCounter_SS_Update+0xea>
    12a2:	ee 24       	eor	r14, r14
    12a4:	ff 24       	eor	r15, r15
    12a6:	87 01       	movw	r16, r14

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    12a8:	89 e1       	ldi	r24, 0x19	; 25
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	ad 81       	ldd	r26, Y+5	; 0x05
    12ae:	be 81       	ldd	r27, Y+6	; 0x06
    12b0:	a8 9f       	mul	r26, r24
    12b2:	f0 01       	movw	r30, r0
    12b4:	a9 9f       	mul	r26, r25
    12b6:	f0 0d       	add	r31, r0
    12b8:	b8 9f       	mul	r27, r24
    12ba:	f0 0d       	add	r31, r0
    12bc:	11 24       	eor	r1, r1
    12be:	e2 0d       	add	r30, r2
    12c0:	f3 1d       	adc	r31, r3
    12c2:	e3 a2       	std	Z+35, r14	; 0x23
    12c4:	f4 a2       	std	Z+36, r15	; 0x24
    12c6:	05 a3       	std	Z+37, r16	; 0x25
    12c8:	16 a3       	std	Z+38, r17	; 0x26
	}
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    12ca:	87 8d       	ldd	r24, Z+31	; 0x1f
    12cc:	90 a1       	ldd	r25, Z+32	; 0x20
    12ce:	a1 a1       	ldd	r26, Z+33	; 0x21
    12d0:	b2 a1       	ldd	r27, Z+34	; 0x22

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    12d2:	8e 19       	sub	r24, r14
    12d4:	9f 09       	sbc	r25, r15
    12d6:	a0 0b       	sbc	r26, r16
    12d8:	b1 0b       	sbc	r27, r17
    12da:	b7 ff       	sbrs	r27, 7
    12dc:	04 c0       	rjmp	.+8      	; 0x12e6 <Timebase_UpCounter_SS_Update+0x128>
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e0       	ldi	r26, 0x00	; 0
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	87 a3       	std	Z+39, r24	; 0x27
    12e8:	90 a7       	std	Z+40, r25	; 0x28
    12ea:	a1 a7       	std	Z+41, r26	; 0x29
    12ec:	b2 a7       	std	Z+42, r27	; 0x2a
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    12ee:	89 e1       	ldi	r24, 0x19	; 25
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	ed 81       	ldd	r30, Y+5	; 0x05
    12f4:	fe 81       	ldd	r31, Y+6	; 0x06
    12f6:	e8 9f       	mul	r30, r24
    12f8:	b0 01       	movw	r22, r0
    12fa:	e9 9f       	mul	r30, r25
    12fc:	70 0d       	add	r23, r0
    12fe:	f8 9f       	mul	r31, r24
    1300:	70 0d       	add	r23, r0
    1302:	11 24       	eor	r1, r1
    1304:	62 0d       	add	r22, r2
    1306:	73 1d       	adc	r23, r3
    1308:	fb 01       	movw	r30, r22
    130a:	83 a1       	ldd	r24, Z+35	; 0x23
    130c:	94 a1       	ldd	r25, Z+36	; 0x24
    130e:	a5 a1       	ldd	r26, Z+37	; 0x25
    1310:	b6 a1       	ldd	r27, Z+38	; 0x26
    1312:	18 16       	cp	r1, r24
    1314:	19 06       	cpc	r1, r25
    1316:	1a 06       	cpc	r1, r26
    1318:	1b 06       	cpc	r1, r27
    131a:	0c f4       	brge	.+2      	; 0x131e <Timebase_UpCounter_SS_Update+0x160>
    131c:	c7 c0       	rjmp	.+398    	; 0x14ac <Timebase_UpCounter_SS_Update+0x2ee>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    131e:	db 01       	movw	r26, r22
    1320:	57 96       	adiw	r26, 0x17	; 23
    1322:	1d 92       	st	X+, r1
    1324:	1d 92       	st	X+, r1
    1326:	1d 92       	st	X+, r1
    1328:	1c 92       	st	X, r1
    132a:	5a 97       	sbiw	r26, 0x1a	; 26
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    132c:	13 8e       	std	Z+27, r1	; 0x1b
    132e:	14 8e       	std	Z+28, r1	; 0x1c
    1330:	15 8e       	std	Z+29, r1	; 0x1d
    1332:	16 8e       	std	Z+30, r1	; 0x1e

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    1334:	93 96       	adiw	r26, 0x23	; 35
    1336:	1d 92       	st	X+, r1
    1338:	1d 92       	st	X+, r1
    133a:	1d 92       	st	X+, r1
    133c:	1c 92       	st	X, r1
    133e:	96 97       	sbiw	r26, 0x26	; 38
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
    1340:	7f 96       	adiw	r30, 0x1f	; 31

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    1342:	5f 96       	adiw	r26, 0x1f	; 31
    1344:	2c 91       	ld	r18, X
    1346:	31 81       	ldd	r19, Z+1	; 0x01
    1348:	42 81       	ldd	r20, Z+2	; 0x02
    134a:	53 81       	ldd	r21, Z+3	; 0x03
    134c:	c9 01       	movw	r24, r18
    134e:	da 01       	movw	r26, r20
    1350:	b7 ff       	sbrs	r27, 7
    1352:	04 c0       	rjmp	.+8      	; 0x135c <Timebase_UpCounter_SS_Update+0x19e>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	a0 e0       	ldi	r26, 0x00	; 0
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	fb 01       	movw	r30, r22
    135e:	87 a3       	std	Z+39, r24	; 0x27
    1360:	90 a7       	std	Z+40, r25	; 0x28
    1362:	a1 a7       	std	Z+41, r26	; 0x29
    1364:	b2 a7       	std	Z+42, r27	; 0x2a
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1366:	89 e1       	ldi	r24, 0x19	; 25
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2d 81       	ldd	r18, Y+5	; 0x05
    136c:	3e 81       	ldd	r19, Y+6	; 0x06
    136e:	28 9f       	mul	r18, r24
    1370:	f0 01       	movw	r30, r0
    1372:	29 9f       	mul	r18, r25
    1374:	f0 0d       	add	r31, r0
    1376:	38 9f       	mul	r19, r24
    1378:	f0 0d       	add	r31, r0
    137a:	11 24       	eor	r1, r1
    137c:	e2 0d       	add	r30, r2
    137e:	f3 1d       	adc	r31, r3
    1380:	86 89       	ldd	r24, Z+22	; 0x16
    1382:	81 7e       	andi	r24, 0xE1	; 225
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	86 8b       	std	Z+22, r24	; 0x16
    1388:	91 c0       	rjmp	.+290    	; 0x14ac <Timebase_UpCounter_SS_Update+0x2ee>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	09 f0       	breq	.+2      	; 0x1390 <Timebase_UpCounter_SS_Update+0x1d2>
    138e:	8e c0       	rjmp	.+284    	; 0x14ac <Timebase_UpCounter_SS_Update+0x2ee>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1390:	d1 01       	movw	r26, r2
    1392:	1a 96       	adiw	r26, 0x0a	; 10
    1394:	8d 91       	ld	r24, X+
    1396:	9d 91       	ld	r25, X+
    1398:	0d 90       	ld	r0, X+
    139a:	bc 91       	ld	r27, X
    139c:	a0 2d       	mov	r26, r0
    139e:	89 83       	std	Y+1, r24	; 0x01
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	ab 83       	std	Y+3, r26	; 0x03
    13a4:	bc 83       	std	Y+4, r27	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    13a6:	f1 01       	movw	r30, r2
    13a8:	80 84       	ldd	r8, Z+8	; 0x08
    13aa:	91 84       	ldd	r9, Z+9	; 0x09
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
    13ac:	db 01       	movw	r26, r22
    13ae:	93 96       	adiw	r26, 0x23	; 35
    13b0:	ad 90       	ld	r10, X+
    13b2:	bd 90       	ld	r11, X+
    13b4:	cd 90       	ld	r12, X+
    13b6:	dc 90       	ld	r13, X
    13b8:	96 97       	sbiw	r26, 0x26	; 38
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	int32_t value = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    13ba:	21 81       	ldd	r18, Z+1	; 0x01
    13bc:	32 81       	ldd	r19, Z+2	; 0x02
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	50 e0       	ldi	r21, 0x00	; 0
    13c2:	c6 01       	movw	r24, r12
    13c4:	b5 01       	movw	r22, r10
    13c6:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    13ca:	7b 01       	movw	r14, r22
    13cc:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    13ce:	f1 01       	movw	r30, r2
    13d0:	21 81       	ldd	r18, Z+1	; 0x01
    13d2:	32 81       	ldd	r19, Z+2	; 0x02
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	50 e0       	ldi	r21, 0x00	; 0
    13d8:	c6 01       	movw	r24, r12
    13da:	b5 01       	movw	r22, r10
    13dc:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    13e0:	c9 01       	movw	r24, r18
    13e2:	da 01       	movw	r26, r20
    13e4:	2c 01       	movw	r4, r24
    13e6:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
    13e8:	54 01       	movw	r10, r8
    13ea:	cc 24       	eor	r12, r12
    13ec:	dd 24       	eor	r13, r13
    13ee:	ae 0c       	add	r10, r14
    13f0:	bf 1c       	adc	r11, r15
    13f2:	c0 1e       	adc	r12, r16
    13f4:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    13f6:	d1 01       	movw	r26, r2
    13f8:	11 96       	adiw	r26, 0x01	; 1
    13fa:	8d 91       	ld	r24, X+
    13fc:	9c 91       	ld	r25, X
    13fe:	12 97       	sbiw	r26, 0x02	; 2
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	a8 16       	cp	r10, r24
    1406:	b9 06       	cpc	r11, r25
    1408:	ca 06       	cpc	r12, r26
    140a:	db 06       	cpc	r13, r27
    140c:	9c f0       	brlt	.+38     	; 0x1434 <Timebase_UpCounter_SS_Update+0x276>
	  sec_val += 1;
    140e:	08 94       	sec
    1410:	41 1c       	adc	r4, r1
    1412:	51 1c       	adc	r5, r1
    1414:	61 1c       	adc	r6, r1
    1416:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    1418:	f1 01       	movw	r30, r2
    141a:	21 81       	ldd	r18, Z+1	; 0x01
    141c:	32 81       	ldd	r19, Z+2	; 0x02
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	c6 01       	movw	r24, r12
    1424:	b5 01       	movw	r22, r10
    1426:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    142a:	ac 01       	movw	r20, r24
    142c:	cb 01       	movw	r24, r22
    142e:	da 01       	movw	r26, r20
    1430:	5c 01       	movw	r10, r24
    1432:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1434:	89 e1       	ldi	r24, 0x19	; 25
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	2d 81       	ldd	r18, Y+5	; 0x05
    143a:	3e 81       	ldd	r19, Y+6	; 0x06
    143c:	28 9f       	mul	r18, r24
    143e:	80 01       	movw	r16, r0
    1440:	29 9f       	mul	r18, r25
    1442:	10 0d       	add	r17, r0
    1444:	38 9f       	mul	r19, r24
    1446:	10 0d       	add	r17, r0
    1448:	11 24       	eor	r1, r1
    144a:	02 0d       	add	r16, r2
    144c:	13 1d       	adc	r17, r3
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	ab 81       	ldd	r26, Y+3	; 0x03
    1454:	bc 81       	ldd	r27, Y+4	; 0x04
    1456:	84 0d       	add	r24, r4
    1458:	95 1d       	adc	r25, r5
    145a:	a6 1d       	adc	r26, r6
    145c:	b7 1d       	adc	r27, r7
    145e:	f8 01       	movw	r30, r16
    1460:	87 8b       	std	Z+23, r24	; 0x17
    1462:	90 8f       	std	Z+24, r25	; 0x18
    1464:	a1 8f       	std	Z+25, r26	; 0x19
    1466:	b2 8f       	std	Z+26, r27	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    1468:	d8 01       	movw	r26, r16
    146a:	5b 96       	adiw	r26, 0x1b	; 27
    146c:	ad 92       	st	X+, r10
    146e:	bd 92       	st	X+, r11
    1470:	cd 92       	st	X+, r12
    1472:	dc 92       	st	X, r13
    1474:	5e 97       	sbiw	r26, 0x1e	; 30
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
    1476:	5f 96       	adiw	r26, 0x1f	; 31
    1478:	2d 91       	ld	r18, X+
    147a:	3d 91       	ld	r19, X+
    147c:	4d 91       	ld	r20, X+
    147e:	5c 91       	ld	r21, X
    1480:	92 97       	sbiw	r26, 0x22	; 34
    1482:	93 96       	adiw	r26, 0x23	; 35
    1484:	8d 91       	ld	r24, X+
    1486:	9d 91       	ld	r25, X+
    1488:	0d 90       	ld	r0, X+
    148a:	bc 91       	ld	r27, X
    148c:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    148e:	28 1b       	sub	r18, r24
    1490:	39 0b       	sbc	r19, r25
    1492:	4a 0b       	sbc	r20, r26
    1494:	5b 0b       	sbc	r21, r27
    1496:	57 ff       	sbrs	r21, 7
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <Timebase_UpCounter_SS_Update+0x2e4>
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	f8 01       	movw	r30, r16
    14a4:	27 a3       	std	Z+39, r18	; 0x27
    14a6:	30 a7       	std	Z+40, r19	; 0x28
    14a8:	41 a7       	std	Z+41, r20	; 0x29
    14aa:	52 a7       	std	Z+42, r21	; 0x2a
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    14ac:	26 96       	adiw	r28, 0x06	; 6
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	9f 90       	pop	r9
    14ce:	8f 90       	pop	r8
    14d0:	7f 90       	pop	r7
    14d2:	6f 90       	pop	r6
    14d4:	5f 90       	pop	r5
    14d6:	4f 90       	pop	r4
    14d8:	3f 90       	pop	r3
    14da:	2f 90       	pop	r2
    14dc:	08 95       	ret

000014de <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    14de:	40 e0       	ldi	r20, 0x00	; 0
    14e0:	e0 91 43 01 	lds	r30, 0x0143
    14e4:	f0 91 44 01 	lds	r31, 0x0144
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	29 e1       	ldi	r18, 0x19	; 25
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	bc 01       	movw	r22, r24
    14f0:	62 9f       	mul	r22, r18
    14f2:	c0 01       	movw	r24, r0
    14f4:	63 9f       	mul	r22, r19
    14f6:	90 0d       	add	r25, r0
    14f8:	72 9f       	mul	r23, r18
    14fa:	90 0d       	add	r25, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	e8 0f       	add	r30, r24
    1500:	f9 1f       	adc	r31, r25
    1502:	86 89       	ldd	r24, Z+22	; 0x16
    1504:	86 95       	lsr	r24
    1506:	8f 70       	andi	r24, 0x0F	; 15
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	09 f4       	brne	.+2      	; 0x150e <Timebase_UpCounter_SS_Expired+0x30>
    150c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    150e:	84 2f       	mov	r24, r20
    1510:	08 95       	ret

00001512 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1512:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1514:	e0 91 43 01 	lds	r30, 0x0143
    1518:	f0 91 44 01 	lds	r31, 0x0144
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	89 e1       	ldi	r24, 0x19	; 25
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	bc 01       	movw	r22, r24
    1526:	26 9f       	mul	r18, r22
    1528:	c0 01       	movw	r24, r0
    152a:	27 9f       	mul	r18, r23
    152c:	90 0d       	add	r25, r0
    152e:	36 9f       	mul	r19, r22
    1530:	90 0d       	add	r25, r0
    1532:	11 24       	eor	r1, r1
    1534:	e8 0f       	add	r30, r24
    1536:	f9 1f       	adc	r31, r25
    1538:	86 89       	ldd	r24, Z+22	; 0x16
    153a:	86 95       	lsr	r24
    153c:	8f 70       	andi	r24, 0x0F	; 15
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	11 f0       	breq	.+4      	; 0x1546 <Timebase_UpCounter_SS_Expired_Event+0x34>
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1546:	84 2f       	mov	r24, r20
    1548:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Timebase_UpCounter_SS_Reset>
    154c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    154e:	08 95       	ret

00001550 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    1550:	e0 91 43 01 	lds	r30, 0x0143
    1554:	f0 91 44 01 	lds	r31, 0x0144
    1558:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    155a:	29 e1       	ldi	r18, 0x19	; 25
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	dc 01       	movw	r26, r24
    1560:	a2 9f       	mul	r26, r18
    1562:	c0 01       	movw	r24, r0
    1564:	a3 9f       	mul	r26, r19
    1566:	90 0d       	add	r25, r0
    1568:	b2 9f       	mul	r27, r18
    156a:	90 0d       	add	r25, r0
    156c:	11 24       	eor	r1, r1
    156e:	e8 0f       	add	r30, r24
    1570:	f9 1f       	adc	r31, r25
    1572:	86 89       	ldd	r24, Z+22	; 0x16
    1574:	80 fd       	sbrc	r24, 0
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1578:	87 a1       	ldd	r24, Z+39	; 0x27
    157a:	90 a5       	ldd	r25, Z+40	; 0x28
    157c:	a1 a5       	ldd	r26, Z+41	; 0x29
    157e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1580:	84 0f       	add	r24, r20
    1582:	95 1f       	adc	r25, r21
    1584:	a6 1f       	adc	r26, r22
    1586:	b7 1f       	adc	r27, r23
    1588:	83 a7       	std	Z+43, r24	; 0x2b
    158a:	94 a7       	std	Z+44, r25	; 0x2c
    158c:	a5 a7       	std	Z+45, r26	; 0x2d
    158e:	b6 a7       	std	Z+46, r27	; 0x2e
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1590:	86 89       	ldd	r24, Z+22	; 0x16
    1592:	81 60       	ori	r24, 0x01	; 1
    1594:	86 8b       	std	Z+22, r24	; 0x16
    1596:	08 95       	ret

00001598 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1598:	e0 91 43 01 	lds	r30, 0x0143
    159c:	f0 91 44 01 	lds	r31, 0x0144
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	29 e1       	ldi	r18, 0x19	; 25
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	ac 01       	movw	r20, r24
    15a8:	42 9f       	mul	r20, r18
    15aa:	c0 01       	movw	r24, r0
    15ac:	43 9f       	mul	r20, r19
    15ae:	90 0d       	add	r25, r0
    15b0:	52 9f       	mul	r21, r18
    15b2:	90 0d       	add	r25, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	e8 0f       	add	r30, r24
    15b8:	f9 1f       	adc	r31, r25
    15ba:	23 a5       	ldd	r18, Z+43	; 0x2b
    15bc:	34 a5       	ldd	r19, Z+44	; 0x2c
    15be:	45 a5       	ldd	r20, Z+45	; 0x2d
    15c0:	56 a5       	ldd	r21, Z+46	; 0x2e
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    15c2:	87 a1       	ldd	r24, Z+39	; 0x27
    15c4:	90 a5       	ldd	r25, Z+40	; 0x28
    15c6:	a1 a5       	ldd	r26, Z+41	; 0x29
    15c8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    15ca:	28 1b       	sub	r18, r24
    15cc:	39 0b       	sbc	r19, r25
    15ce:	4a 0b       	sbc	r20, r26
    15d0:	5b 0b       	sbc	r21, r27
    15d2:	57 ff       	sbrs	r21, 7
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    15de:	b9 01       	movw	r22, r18
    15e0:	ca 01       	movw	r24, r20
    15e2:	08 95       	ret

000015e4 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    15e8:	c0 91 43 01 	lds	r28, 0x0143
    15ec:	d0 91 44 01 	lds	r29, 0x0144
    15f0:	68 2f       	mov	r22, r24
    15f2:	70 e0       	ldi	r23, 0x00	; 0
    15f4:	89 e1       	ldi	r24, 0x19	; 25
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	68 9f       	mul	r22, r24
    15fa:	f0 01       	movw	r30, r0
    15fc:	69 9f       	mul	r22, r25
    15fe:	f0 0d       	add	r31, r0
    1600:	78 9f       	mul	r23, r24
    1602:	f0 0d       	add	r31, r0
    1604:	11 24       	eor	r1, r1
    1606:	ec 0f       	add	r30, r28
    1608:	fd 1f       	adc	r31, r29
    160a:	23 a5       	ldd	r18, Z+43	; 0x2b
    160c:	34 a5       	ldd	r19, Z+44	; 0x2c
    160e:	45 a5       	ldd	r20, Z+45	; 0x2d
    1610:	56 a5       	ldd	r21, Z+46	; 0x2e
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1612:	87 a1       	ldd	r24, Z+39	; 0x27
    1614:	90 a5       	ldd	r25, Z+40	; 0x28
    1616:	a1 a5       	ldd	r26, Z+41	; 0x29
    1618:	b2 a5       	ldd	r27, Z+42	; 0x2a
    161a:	28 1b       	sub	r18, r24
    161c:	39 0b       	sbc	r19, r25
    161e:	4a 0b       	sbc	r20, r26
    1620:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1622:	57 fd       	sbrc	r21, 7
    1624:	07 c0       	rjmp	.+14     	; 0x1634 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1626:	21 15       	cp	r18, r1
    1628:	31 05       	cpc	r19, r1
    162a:	41 05       	cpc	r20, r1
    162c:	51 05       	cpc	r21, r1
    162e:	11 f0       	breq	.+4      	; 0x1634 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	12 c0       	rjmp	.+36     	; 0x1658 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	89 e1       	ldi	r24, 0x19	; 25
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	ac 01       	movw	r20, r24
    163c:	64 9f       	mul	r22, r20
    163e:	c0 01       	movw	r24, r0
    1640:	65 9f       	mul	r22, r21
    1642:	90 0d       	add	r25, r0
    1644:	74 9f       	mul	r23, r20
    1646:	90 0d       	add	r25, r0
    1648:	11 24       	eor	r1, r1
    164a:	c8 0f       	add	r28, r24
    164c:	d9 1f       	adc	r29, r25
    164e:	8e 89       	ldd	r24, Y+22	; 0x16
    1650:	80 ff       	sbrs	r24, 0
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1658:	82 2f       	mov	r24, r18
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1660:	1f 93       	push	r17
    1662:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1664:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <Timebase_UpCounter_SS_Period_Value_Expired>
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	11 f0       	breq	.+4      	; 0x1670 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	16 c0       	rjmp	.+44     	; 0x169c <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1670:	e0 91 43 01 	lds	r30, 0x0143
    1674:	f0 91 44 01 	lds	r31, 0x0144
    1678:	21 2f       	mov	r18, r17
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	89 e1       	ldi	r24, 0x19	; 25
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	ac 01       	movw	r20, r24
    1682:	24 9f       	mul	r18, r20
    1684:	c0 01       	movw	r24, r0
    1686:	25 9f       	mul	r18, r21
    1688:	90 0d       	add	r25, r0
    168a:	34 9f       	mul	r19, r20
    168c:	90 0d       	add	r25, r0
    168e:	11 24       	eor	r1, r1
    1690:	e8 0f       	add	r30, r24
    1692:	f9 1f       	adc	r31, r25
    1694:	86 89       	ldd	r24, Z+22	; 0x16
    1696:	8e 7f       	andi	r24, 0xFE	; 254
    1698:	86 8b       	std	Z+22, r24	; 0x16
    169a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    169c:	1f 91       	pop	r17
    169e:	08 95       	ret

000016a0 <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	0e 94 df 08 	call	0x11be	; 0x11be <Timebase_UpCounter_SS_Update>
  }
}
    16a6:	08 95       	ret

000016a8 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	0e 94 a6 07 	call	0xf4c	; 0xf4c <Timebase_UpCounter_SS_Reset>
  }
}
    16ae:	08 95       	ret

000016b0 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    16b0:	e0 91 43 01 	lds	r30, 0x0143
    16b4:	f0 91 44 01 	lds	r31, 0x0144
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	25 e1       	ldi	r18, 0x15	; 21
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	ac 01       	movw	r20, r24
    16c0:	42 9f       	mul	r20, r18
    16c2:	c0 01       	movw	r24, r0
    16c4:	43 9f       	mul	r20, r19
    16c6:	90 0d       	add	r25, r0
    16c8:	52 9f       	mul	r21, r18
    16ca:	90 0d       	add	r25, r0
    16cc:	11 24       	eor	r1, r1
    16ce:	e8 0f       	add	r30, r24
    16d0:	f9 1f       	adc	r31, r25
    16d2:	87 a5       	ldd	r24, Z+47	; 0x2f
    16d4:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    16d6:	8f 70       	andi	r24, 0x0F	; 15
    16d8:	08 95       	ret

000016da <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    16da:	e0 91 43 01 	lds	r30, 0x0143
    16de:	f0 91 44 01 	lds	r31, 0x0144
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	25 e1       	ldi	r18, 0x15	; 21
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	ac 01       	movw	r20, r24
    16ea:	42 9f       	mul	r20, r18
    16ec:	c0 01       	movw	r24, r0
    16ee:	43 9f       	mul	r20, r19
    16f0:	90 0d       	add	r25, r0
    16f2:	52 9f       	mul	r21, r18
    16f4:	90 0d       	add	r25, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	6f 70       	andi	r22, 0x0F	; 15
    16fe:	66 0f       	add	r22, r22
    1700:	87 a5       	ldd	r24, Z+47	; 0x2f
    1702:	81 7e       	andi	r24, 0xE1	; 225
    1704:	86 2b       	or	r24, r22
    1706:	87 a7       	std	Z+47, r24	; 0x2f
}
    1708:	08 95       	ret

0000170a <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    170a:	e0 91 43 01 	lds	r30, 0x0143
    170e:	f0 91 44 01 	lds	r31, 0x0144
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	25 e1       	ldi	r18, 0x15	; 21
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	ac 01       	movw	r20, r24
    171a:	42 9f       	mul	r20, r18
    171c:	c0 01       	movw	r24, r0
    171e:	43 9f       	mul	r20, r19
    1720:	90 0d       	add	r25, r0
    1722:	52 9f       	mul	r21, r18
    1724:	90 0d       	add	r25, r0
    1726:	11 24       	eor	r1, r1
    1728:	e8 0f       	add	r30, r24
    172a:	f9 1f       	adc	r31, r25
    172c:	df 01       	movw	r26, r30
    172e:	dc 96       	adiw	r26, 0x3c	; 60
    1730:	64 ad       	ldd	r22, Z+60	; 0x3c
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	7c 91       	ld	r23, X
    1736:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Value;
}
    1738:	12 96       	adiw	r26, 0x02	; 2
    173a:	8c 91       	ld	r24, X
    173c:	12 97       	sbiw	r26, 0x02	; 2
    173e:	13 96       	adiw	r26, 0x03	; 3
    1740:	9c 91       	ld	r25, X
    1742:	08 95       	ret

00001744 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    1744:	cf 93       	push	r28
    1746:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1748:	c0 91 43 01 	lds	r28, 0x0143
    174c:	d0 91 44 01 	lds	r29, 0x0144
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	25 e1       	ldi	r18, 0x15	; 21
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	fc 01       	movw	r30, r24
    1758:	e2 9f       	mul	r30, r18
    175a:	c0 01       	movw	r24, r0
    175c:	e3 9f       	mul	r30, r19
    175e:	90 0d       	add	r25, r0
    1760:	f2 9f       	mul	r31, r18
    1762:	90 0d       	add	r25, r0
    1764:	11 24       	eor	r1, r1
    1766:	c8 0f       	add	r28, r24
    1768:	d9 1f       	adc	r29, r25
    176a:	ca 01       	movw	r24, r20
    176c:	db 01       	movw	r26, r22
    176e:	b7 ff       	sbrs	r27, 7
    1770:	04 c0       	rjmp	.+8      	; 0x177a <Timebase_UpCounter_Set_Value+0x36>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	8c af       	std	Y+60, r24	; 0x3c
    177c:	9d af       	std	Y+61, r25	; 0x3d
    177e:	ae af       	std	Y+62, r26	; 0x3e
    1780:	bf af       	std	Y+63, r27	; 0x3f
}
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	08 95       	ret

00001788 <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    1788:	e0 91 43 01 	lds	r30, 0x0143
    178c:	f0 91 44 01 	lds	r31, 0x0144
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	25 e1       	ldi	r18, 0x15	; 21
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	ac 01       	movw	r20, r24
    1798:	42 9f       	mul	r20, r18
    179a:	c0 01       	movw	r24, r0
    179c:	43 9f       	mul	r20, r19
    179e:	90 0d       	add	r25, r0
    17a0:	52 9f       	mul	r21, r18
    17a2:	90 0d       	add	r25, r0
    17a4:	11 24       	eor	r1, r1
    17a6:	e8 0f       	add	r30, r24
    17a8:	f9 1f       	adc	r31, r25
    17aa:	df 01       	movw	r26, r30
    17ac:	d0 96       	adiw	r26, 0x30	; 48
    17ae:	60 a9       	ldd	r22, Z+48	; 0x30
    17b0:	11 96       	adiw	r26, 0x01	; 1
    17b2:	7c 91       	ld	r23, X
    17b4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    17b6:	12 96       	adiw	r26, 0x02	; 2
    17b8:	8c 91       	ld	r24, X
    17ba:	12 97       	sbiw	r26, 0x02	; 2
    17bc:	13 96       	adiw	r26, 0x03	; 3
    17be:	9c 91       	ld	r25, X
    17c0:	08 95       	ret

000017c2 <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    17c2:	e0 91 43 01 	lds	r30, 0x0143
    17c6:	f0 91 44 01 	lds	r31, 0x0144
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	25 e1       	ldi	r18, 0x15	; 21
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	ac 01       	movw	r20, r24
    17d2:	42 9f       	mul	r20, r18
    17d4:	c0 01       	movw	r24, r0
    17d6:	43 9f       	mul	r20, r19
    17d8:	90 0d       	add	r25, r0
    17da:	52 9f       	mul	r21, r18
    17dc:	90 0d       	add	r25, r0
    17de:	11 24       	eor	r1, r1
    17e0:	e8 0f       	add	r30, r24
    17e2:	f9 1f       	adc	r31, r25
    17e4:	df 01       	movw	r26, r30
    17e6:	d0 96       	adiw	r26, 0x30	; 48
    17e8:	60 a9       	ldd	r22, Z+48	; 0x30
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	7c 91       	ld	r23, X
    17ee:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    17f0:	12 96       	adiw	r26, 0x02	; 2
    17f2:	8c 91       	ld	r24, X
    17f4:	12 97       	sbiw	r26, 0x02	; 2
    17f6:	13 96       	adiw	r26, 0x03	; 3
    17f8:	9c 91       	ld	r25, X
    17fa:	08 95       	ret

000017fc <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    17fc:	e0 91 43 01 	lds	r30, 0x0143
    1800:	f0 91 44 01 	lds	r31, 0x0144
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	25 e1       	ldi	r18, 0x15	; 21
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	dc 01       	movw	r26, r24
    180c:	a2 9f       	mul	r26, r18
    180e:	c0 01       	movw	r24, r0
    1810:	a3 9f       	mul	r26, r19
    1812:	90 0d       	add	r25, r0
    1814:	b2 9f       	mul	r27, r18
    1816:	90 0d       	add	r25, r0
    1818:	11 24       	eor	r1, r1
    181a:	e8 0f       	add	r30, r24
    181c:	f9 1f       	adc	r31, r25
    181e:	40 ab       	std	Z+48, r20	; 0x30
    1820:	51 ab       	std	Z+49, r21	; 0x31
    1822:	62 ab       	std	Z+50, r22	; 0x32
    1824:	73 ab       	std	Z+51, r23	; 0x33
}
    1826:	08 95       	ret

00001828 <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1828:	e0 91 43 01 	lds	r30, 0x0143
    182c:	f0 91 44 01 	lds	r31, 0x0144
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	25 e1       	ldi	r18, 0x15	; 21
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	dc 01       	movw	r26, r24
    1838:	a2 9f       	mul	r26, r18
    183a:	c0 01       	movw	r24, r0
    183c:	a3 9f       	mul	r26, r19
    183e:	90 0d       	add	r25, r0
    1840:	b2 9f       	mul	r27, r18
    1842:	90 0d       	add	r25, r0
    1844:	11 24       	eor	r1, r1
    1846:	e8 0f       	add	r30, r24
    1848:	f9 1f       	adc	r31, r25
    184a:	40 ab       	std	Z+48, r20	; 0x30
    184c:	51 ab       	std	Z+49, r21	; 0x31
    184e:	62 ab       	std	Z+50, r22	; 0x32
    1850:	73 ab       	std	Z+51, r23	; 0x33
}
    1852:	08 95       	ret

00001854 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    1854:	e0 91 43 01 	lds	r30, 0x0143
    1858:	f0 91 44 01 	lds	r31, 0x0144
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	25 e1       	ldi	r18, 0x15	; 21
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	ac 01       	movw	r20, r24
    1864:	42 9f       	mul	r20, r18
    1866:	c0 01       	movw	r24, r0
    1868:	43 9f       	mul	r20, r19
    186a:	90 0d       	add	r25, r0
    186c:	52 9f       	mul	r21, r18
    186e:	90 0d       	add	r25, r0
    1870:	11 24       	eor	r1, r1
    1872:	e8 0f       	add	r30, r24
    1874:	f9 1f       	adc	r31, r25
    1876:	df 01       	movw	r26, r30
    1878:	d4 96       	adiw	r26, 0x34	; 52
    187a:	64 a9       	ldd	r22, Z+52	; 0x34
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	7c 91       	ld	r23, X
    1880:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    1882:	12 96       	adiw	r26, 0x02	; 2
    1884:	8c 91       	ld	r24, X
    1886:	12 97       	sbiw	r26, 0x02	; 2
    1888:	13 96       	adiw	r26, 0x03	; 3
    188a:	9c 91       	ld	r25, X
    188c:	08 95       	ret

0000188e <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    188e:	e0 91 43 01 	lds	r30, 0x0143
    1892:	f0 91 44 01 	lds	r31, 0x0144
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	25 e1       	ldi	r18, 0x15	; 21
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	dc 01       	movw	r26, r24
    189e:	a2 9f       	mul	r26, r18
    18a0:	c0 01       	movw	r24, r0
    18a2:	a3 9f       	mul	r26, r19
    18a4:	90 0d       	add	r25, r0
    18a6:	b2 9f       	mul	r27, r18
    18a8:	90 0d       	add	r25, r0
    18aa:	11 24       	eor	r1, r1
    18ac:	e8 0f       	add	r30, r24
    18ae:	f9 1f       	adc	r31, r25
    18b0:	44 ab       	std	Z+52, r20	; 0x34
    18b2:	55 ab       	std	Z+53, r21	; 0x35
    18b4:	66 ab       	std	Z+54, r22	; 0x36
    18b6:	77 ab       	std	Z+55, r23	; 0x37
}
    18b8:	08 95       	ret

000018ba <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    18ba:	e0 91 43 01 	lds	r30, 0x0143
    18be:	f0 91 44 01 	lds	r31, 0x0144
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	25 e1       	ldi	r18, 0x15	; 21
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	ac 01       	movw	r20, r24
    18ca:	42 9f       	mul	r20, r18
    18cc:	c0 01       	movw	r24, r0
    18ce:	43 9f       	mul	r20, r19
    18d0:	90 0d       	add	r25, r0
    18d2:	52 9f       	mul	r21, r18
    18d4:	90 0d       	add	r25, r0
    18d6:	11 24       	eor	r1, r1
    18d8:	e8 0f       	add	r30, r24
    18da:	f9 1f       	adc	r31, r25
    18dc:	df 01       	movw	r26, r30
    18de:	d8 96       	adiw	r26, 0x38	; 56
    18e0:	60 ad       	ldd	r22, Z+56	; 0x38
    18e2:	11 96       	adiw	r26, 0x01	; 1
    18e4:	7c 91       	ld	r23, X
    18e6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
    18e8:	12 96       	adiw	r26, 0x02	; 2
    18ea:	8c 91       	ld	r24, X
    18ec:	12 97       	sbiw	r26, 0x02	; 2
    18ee:	13 96       	adiw	r26, 0x03	; 3
    18f0:	9c 91       	ld	r25, X
    18f2:	08 95       	ret

000018f4 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    18f4:	cf 93       	push	r28
    18f6:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    18f8:	c0 91 43 01 	lds	r28, 0x0143
    18fc:	d0 91 44 01 	lds	r29, 0x0144
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	25 e1       	ldi	r18, 0x15	; 21
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	fc 01       	movw	r30, r24
    1908:	e2 9f       	mul	r30, r18
    190a:	c0 01       	movw	r24, r0
    190c:	e3 9f       	mul	r30, r19
    190e:	90 0d       	add	r25, r0
    1910:	f2 9f       	mul	r31, r18
    1912:	90 0d       	add	r25, r0
    1914:	11 24       	eor	r1, r1
    1916:	c8 0f       	add	r28, r24
    1918:	d9 1f       	adc	r29, r25
    191a:	ca 01       	movw	r24, r20
    191c:	db 01       	movw	r26, r22
    191e:	b7 ff       	sbrs	r27, 7
    1920:	04 c0       	rjmp	.+8      	; 0x192a <Timebase_UpCounter_Set_TemporaryValue+0x36>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	88 af       	std	Y+56, r24	; 0x38
    192c:	99 af       	std	Y+57, r25	; 0x39
    192e:	aa af       	std	Y+58, r26	; 0x3a
    1930:	bb af       	std	Y+59, r27	; 0x3b
}
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	08 95       	ret

00001938 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1938:	e0 91 43 01 	lds	r30, 0x0143
    193c:	f0 91 44 01 	lds	r31, 0x0144
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	25 e1       	ldi	r18, 0x15	; 21
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	ac 01       	movw	r20, r24
    1948:	42 9f       	mul	r20, r18
    194a:	c0 01       	movw	r24, r0
    194c:	43 9f       	mul	r20, r19
    194e:	90 0d       	add	r25, r0
    1950:	52 9f       	mul	r21, r18
    1952:	90 0d       	add	r25, r0
    1954:	11 24       	eor	r1, r1
    1956:	e8 0f       	add	r30, r24
    1958:	f9 1f       	adc	r31, r25
    195a:	e0 5c       	subi	r30, 0xC0	; 192
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	08 95       	ret

00001968 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1968:	e0 91 43 01 	lds	r30, 0x0143
    196c:	f0 91 44 01 	lds	r31, 0x0144
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	25 e1       	ldi	r18, 0x15	; 21
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	dc 01       	movw	r26, r24
    1978:	a2 9f       	mul	r26, r18
    197a:	c0 01       	movw	r24, r0
    197c:	a3 9f       	mul	r26, r19
    197e:	90 0d       	add	r25, r0
    1980:	b2 9f       	mul	r27, r18
    1982:	90 0d       	add	r25, r0
    1984:	11 24       	eor	r1, r1
    1986:	e8 0f       	add	r30, r24
    1988:	f9 1f       	adc	r31, r25
    198a:	e0 5c       	subi	r30, 0xC0	; 192
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	40 83       	st	Z, r20
    1990:	51 83       	std	Z+1, r21	; 0x01
    1992:	62 83       	std	Z+2, r22	; 0x02
    1994:	73 83       	std	Z+3, r23	; 0x03
}
    1996:	08 95       	ret

00001998 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    1998:	e0 91 43 01 	lds	r30, 0x0143
    199c:	f0 91 44 01 	lds	r31, 0x0144
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	25 e1       	ldi	r18, 0x15	; 21
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	ac 01       	movw	r20, r24
    19a8:	42 9f       	mul	r20, r18
    19aa:	c0 01       	movw	r24, r0
    19ac:	43 9f       	mul	r20, r19
    19ae:	90 0d       	add	r25, r0
    19b0:	52 9f       	mul	r21, r18
    19b2:	90 0d       	add	r25, r0
    19b4:	11 24       	eor	r1, r1
    19b6:	e8 0f       	add	r30, r24
    19b8:	f9 1f       	adc	r31, r25
    19ba:	87 a5       	ldd	r24, Z+47	; 0x2f
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    19bc:	81 70       	andi	r24, 0x01	; 1
    19be:	08 95       	ret

000019c0 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    19c0:	e0 91 43 01 	lds	r30, 0x0143
    19c4:	f0 91 44 01 	lds	r31, 0x0144
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	25 e1       	ldi	r18, 0x15	; 21
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	ac 01       	movw	r20, r24
    19d0:	42 9f       	mul	r20, r18
    19d2:	c0 01       	movw	r24, r0
    19d4:	43 9f       	mul	r20, r19
    19d6:	90 0d       	add	r25, r0
    19d8:	52 9f       	mul	r21, r18
    19da:	90 0d       	add	r25, r0
    19dc:	11 24       	eor	r1, r1
    19de:	e8 0f       	add	r30, r24
    19e0:	f9 1f       	adc	r31, r25
    19e2:	87 a5       	ldd	r24, Z+47	; 0x2f
    19e4:	81 60       	ori	r24, 0x01	; 1
    19e6:	87 a7       	std	Z+47, r24	; 0x2f
}
    19e8:	08 95       	ret

000019ea <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    19ea:	e0 91 43 01 	lds	r30, 0x0143
    19ee:	f0 91 44 01 	lds	r31, 0x0144
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	25 e1       	ldi	r18, 0x15	; 21
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	ac 01       	movw	r20, r24
    19fa:	42 9f       	mul	r20, r18
    19fc:	c0 01       	movw	r24, r0
    19fe:	43 9f       	mul	r20, r19
    1a00:	90 0d       	add	r25, r0
    1a02:	52 9f       	mul	r21, r18
    1a04:	90 0d       	add	r25, r0
    1a06:	11 24       	eor	r1, r1
    1a08:	e8 0f       	add	r30, r24
    1a0a:	f9 1f       	adc	r31, r25
    1a0c:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a0e:	8e 7f       	andi	r24, 0xFE	; 254
    1a10:	87 a7       	std	Z+47, r24	; 0x2f
}
    1a12:	08 95       	ret

00001a14 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1a14:	e0 91 43 01 	lds	r30, 0x0143
    1a18:	f0 91 44 01 	lds	r31, 0x0144
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	25 e1       	ldi	r18, 0x15	; 21
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	ac 01       	movw	r20, r24
    1a24:	42 9f       	mul	r20, r18
    1a26:	c0 01       	movw	r24, r0
    1a28:	43 9f       	mul	r20, r19
    1a2a:	90 0d       	add	r25, r0
    1a2c:	52 9f       	mul	r21, r18
    1a2e:	90 0d       	add	r25, r0
    1a30:	11 24       	eor	r1, r1
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	87 a5       	ldd	r24, Z+47	; 0x2f

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1a38:	14 ae       	std	Z+60, r1	; 0x3c
    1a3a:	15 ae       	std	Z+61, r1	; 0x3d
    1a3c:	16 ae       	std	Z+62, r1	; 0x3e
    1a3e:	17 ae       	std	Z+63, r1	; 0x3f
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1a40:	10 aa       	std	Z+48, r1	; 0x30
    1a42:	11 aa       	std	Z+49, r1	; 0x31
    1a44:	12 aa       	std	Z+50, r1	; 0x32
    1a46:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1a48:	14 aa       	std	Z+52, r1	; 0x34
    1a4a:	15 aa       	std	Z+53, r1	; 0x35
    1a4c:	16 aa       	std	Z+54, r1	; 0x36
    1a4e:	17 aa       	std	Z+55, r1	; 0x37

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1a50:	10 ae       	std	Z+56, r1	; 0x38
    1a52:	11 ae       	std	Z+57, r1	; 0x39
    1a54:	12 ae       	std	Z+58, r1	; 0x3a
    1a56:	13 ae       	std	Z+59, r1	; 0x3b
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1a58:	e0 5c       	subi	r30, 0xC0	; 192
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	10 82       	st	Z, r1
    1a5e:	11 82       	std	Z+1, r1	; 0x01
    1a60:	12 82       	std	Z+2, r1	; 0x02
    1a62:	13 82       	std	Z+3, r1	; 0x03
    1a64:	e0 54       	subi	r30, 0x40	; 64
    1a66:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a68:	80 7e       	andi	r24, 0xE0	; 224
    1a6a:	87 a7       	std	Z+47, r24	; 0x2f
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    1a6c:	08 95       	ret

00001a6e <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1a6e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <Timebase_UpCounter_Reset>
}
    1a72:	08 95       	ret

00001a74 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1a74:	e0 91 43 01 	lds	r30, 0x0143
    1a78:	f0 91 44 01 	lds	r31, 0x0144
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1a7e:	25 e1       	ldi	r18, 0x15	; 21
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	ac 01       	movw	r20, r24
    1a84:	42 9f       	mul	r20, r18
    1a86:	c0 01       	movw	r24, r0
    1a88:	43 9f       	mul	r20, r19
    1a8a:	90 0d       	add	r25, r0
    1a8c:	52 9f       	mul	r21, r18
    1a8e:	90 0d       	add	r25, r0
    1a90:	11 24       	eor	r1, r1
    1a92:	e8 0f       	add	r30, r24
    1a94:	f9 1f       	adc	r31, r25
    1a96:	97 a5       	ldd	r25, Z+47	; 0x2f
    1a98:	89 2f       	mov	r24, r25
    1a9a:	86 95       	lsr	r24
    1a9c:	8f 70       	andi	r24, 0x0F	; 15
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	19 f0       	breq	.+6      	; 0x1aa8 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1aa2:	91 7e       	andi	r25, 0xE1	; 225
    1aa4:	92 60       	ori	r25, 0x02	; 2
    1aa6:	97 a7       	std	Z+47, r25	; 0x2f
    1aa8:	08 95       	ret

00001aaa <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1aaa:	e0 91 43 01 	lds	r30, 0x0143
    1aae:	f0 91 44 01 	lds	r31, 0x0144
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1ab4:	25 e1       	ldi	r18, 0x15	; 21
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	ac 01       	movw	r20, r24
    1aba:	42 9f       	mul	r20, r18
    1abc:	c0 01       	movw	r24, r0
    1abe:	43 9f       	mul	r20, r19
    1ac0:	90 0d       	add	r25, r0
    1ac2:	52 9f       	mul	r21, r18
    1ac4:	90 0d       	add	r25, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	e8 0f       	add	r30, r24
    1aca:	f9 1f       	adc	r31, r25
    1acc:	97 a5       	ldd	r25, Z+47	; 0x2f
    1ace:	89 2f       	mov	r24, r25
    1ad0:	86 95       	lsr	r24
    1ad2:	8f 70       	andi	r24, 0x0F	; 15
    1ad4:	82 30       	cpi	r24, 0x02	; 2
    1ad6:	19 f0       	breq	.+6      	; 0x1ade <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1ad8:	91 7e       	andi	r25, 0xE1	; 225
    1ada:	94 60       	ori	r25, 0x04	; 4
    1adc:	97 a7       	std	Z+47, r25	; 0x2f
    1ade:	08 95       	ret

00001ae0 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1ae0:	a0 91 43 01 	lds	r26, 0x0143
    1ae4:	b0 91 44 01 	lds	r27, 0x0144
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1aea:	25 e1       	ldi	r18, 0x15	; 21
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	82 9f       	mul	r24, r18
    1af0:	f0 01       	movw	r30, r0
    1af2:	83 9f       	mul	r24, r19
    1af4:	f0 0d       	add	r31, r0
    1af6:	92 9f       	mul	r25, r18
    1af8:	f0 0d       	add	r31, r0
    1afa:	11 24       	eor	r1, r1
    1afc:	ea 0f       	add	r30, r26
    1afe:	fb 1f       	adc	r31, r27
    1b00:	87 a5       	ldd	r24, Z+47	; 0x2f
    1b02:	86 95       	lsr	r24
    1b04:	8f 70       	andi	r24, 0x0F	; 15
    1b06:	19 f5       	brne	.+70     	; 0x1b4e <Timebase_UpCounter_Set_Securely+0x6e>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1b08:	14 ae       	std	Z+60, r1	; 0x3c
    1b0a:	15 ae       	std	Z+61, r1	; 0x3d
    1b0c:	16 ae       	std	Z+62, r1	; 0x3e
    1b0e:	17 ae       	std	Z+63, r1	; 0x3f

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1b10:	10 ae       	std	Z+56, r1	; 0x38
    1b12:	11 ae       	std	Z+57, r1	; 0x39
    1b14:	12 ae       	std	Z+58, r1	; 0x3a
    1b16:	13 ae       	std	Z+59, r1	; 0x3b
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1b18:	44 ab       	std	Z+52, r20	; 0x34
    1b1a:	55 ab       	std	Z+53, r21	; 0x35
    1b1c:	66 ab       	std	Z+54, r22	; 0x36
    1b1e:	77 ab       	std	Z+55, r23	; 0x37
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1b20:	1a 96       	adiw	r26, 0x0a	; 10
    1b22:	8d 91       	ld	r24, X+
    1b24:	9d 91       	ld	r25, X+
    1b26:	0d 90       	ld	r0, X+
    1b28:	bc 91       	ld	r27, X
    1b2a:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1b2c:	84 0f       	add	r24, r20
    1b2e:	95 1f       	adc	r25, r21
    1b30:	a6 1f       	adc	r26, r22
    1b32:	b7 1f       	adc	r27, r23
    1b34:	80 ab       	std	Z+48, r24	; 0x30
    1b36:	91 ab       	std	Z+49, r25	; 0x31
    1b38:	a2 ab       	std	Z+50, r26	; 0x32
    1b3a:	b3 ab       	std	Z+51, r27	; 0x33
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1b3c:	97 a5       	ldd	r25, Z+47	; 0x2f
    1b3e:	89 2f       	mov	r24, r25
    1b40:	86 95       	lsr	r24
    1b42:	8f 70       	andi	r24, 0x0F	; 15
    1b44:	81 30       	cpi	r24, 0x01	; 1
    1b46:	19 f0       	breq	.+6      	; 0x1b4e <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1b48:	91 7e       	andi	r25, 0xE1	; 225
    1b4a:	92 60       	ori	r25, 0x02	; 2
    1b4c:	97 a7       	std	Z+47, r25	; 0x2f
    1b4e:	08 95       	ret

00001b50 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	d8 2e       	mov	r13, r24
    1b5c:	7a 01       	movw	r14, r20
    1b5e:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    1b60:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    1b64:	8d 2d       	mov	r24, r13
    1b66:	b8 01       	movw	r22, r16
    1b68:	a7 01       	movw	r20, r14
    1b6a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <Timebase_UpCounter_Set_Securely>
} 
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	ff 90       	pop	r15
    1b74:	ef 90       	pop	r14
    1b76:	df 90       	pop	r13
    1b78:	08 95       	ret

00001b7a <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1b82:	60 91 43 01 	lds	r22, 0x0143
    1b86:	70 91 44 01 	lds	r23, 0x0144
    1b8a:	08 2f       	mov	r16, r24
    1b8c:	10 e0       	ldi	r17, 0x00	; 0
    1b8e:	85 e1       	ldi	r24, 0x15	; 21
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	08 9f       	mul	r16, r24
    1b94:	f0 01       	movw	r30, r0
    1b96:	09 9f       	mul	r16, r25
    1b98:	f0 0d       	add	r31, r0
    1b9a:	18 9f       	mul	r17, r24
    1b9c:	f0 0d       	add	r31, r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	e6 0f       	add	r30, r22
    1ba2:	f7 1f       	adc	r31, r23
    1ba4:	87 a5       	ldd	r24, Z+47	; 0x2f
    1ba6:	86 95       	lsr	r24
    1ba8:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <Timebase_UpCounter_Update+0x36>
    1bae:	73 c0       	rjmp	.+230    	; 0x1c96 <Timebase_UpCounter_Update+0x11c>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1bb0:	eb 01       	movw	r28, r22
    1bb2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bb4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bb6:	ac 85       	ldd	r26, Y+12	; 0x0c
    1bb8:	bd 85       	ldd	r27, Y+13	; 0x0d

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    1bba:	20 a9       	ldd	r18, Z+48	; 0x30
    1bbc:	31 a9       	ldd	r19, Z+49	; 0x31
    1bbe:	42 a9       	ldd	r20, Z+50	; 0x32
    1bc0:	53 a9       	ldd	r21, Z+51	; 0x33
    1bc2:	28 1b       	sub	r18, r24
    1bc4:	39 0b       	sbc	r19, r25
    1bc6:	4a 0b       	sbc	r20, r26
    1bc8:	5b 0b       	sbc	r21, r27
    1bca:	57 ff       	sbrs	r21, 7
    1bcc:	04 c0       	rjmp	.+8      	; 0x1bd6 <Timebase_UpCounter_Update+0x5c>
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1bd6:	85 e1       	ldi	r24, 0x15	; 21
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	08 9f       	mul	r16, r24
    1bdc:	f0 01       	movw	r30, r0
    1bde:	09 9f       	mul	r16, r25
    1be0:	f0 0d       	add	r31, r0
    1be2:	18 9f       	mul	r17, r24
    1be4:	f0 0d       	add	r31, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	e6 0f       	add	r30, r22
    1bea:	f7 1f       	adc	r31, r23
    1bec:	20 af       	std	Z+56, r18	; 0x38
    1bee:	31 af       	std	Z+57, r19	; 0x39
    1bf0:	42 af       	std	Z+58, r20	; 0x3a
    1bf2:	53 af       	std	Z+59, r21	; 0x3b
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    1bf4:	84 a9       	ldd	r24, Z+52	; 0x34
    1bf6:	95 a9       	ldd	r25, Z+53	; 0x35
    1bf8:	a6 a9       	ldd	r26, Z+54	; 0x36
    1bfa:	b7 a9       	ldd	r27, Z+55	; 0x37

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1bfc:	82 1b       	sub	r24, r18
    1bfe:	93 0b       	sbc	r25, r19
    1c00:	a4 0b       	sbc	r26, r20
    1c02:	b5 0b       	sbc	r27, r21
    1c04:	b7 ff       	sbrs	r27, 7
    1c06:	04 c0       	rjmp	.+8      	; 0x1c10 <Timebase_UpCounter_Update+0x96>
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	a0 e0       	ldi	r26, 0x00	; 0
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	84 af       	std	Z+60, r24	; 0x3c
    1c12:	95 af       	std	Z+61, r25	; 0x3d
    1c14:	a6 af       	std	Z+62, r26	; 0x3e
    1c16:	b7 af       	std	Z+63, r27	; 0x3f
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1c18:	85 e1       	ldi	r24, 0x15	; 21
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	08 9f       	mul	r16, r24
    1c1e:	e0 01       	movw	r28, r0
    1c20:	09 9f       	mul	r16, r25
    1c22:	d0 0d       	add	r29, r0
    1c24:	18 9f       	mul	r17, r24
    1c26:	d0 0d       	add	r29, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	c6 0f       	add	r28, r22
    1c2c:	d7 1f       	adc	r29, r23
    1c2e:	88 ad       	ldd	r24, Y+56	; 0x38
    1c30:	99 ad       	ldd	r25, Y+57	; 0x39
    1c32:	aa ad       	ldd	r26, Y+58	; 0x3a
    1c34:	bb ad       	ldd	r27, Y+59	; 0x3b
    1c36:	18 16       	cp	r1, r24
    1c38:	19 06       	cpc	r1, r25
    1c3a:	1a 06       	cpc	r1, r26
    1c3c:	1b 06       	cpc	r1, r27
    1c3e:	0c f4       	brge	.+2      	; 0x1c42 <Timebase_UpCounter_Update+0xc8>
    1c40:	4f c0       	rjmp	.+158    	; 0x1ce0 <Timebase_UpCounter_Update+0x166>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1c42:	18 aa       	std	Y+48, r1	; 0x30
    1c44:	19 aa       	std	Y+49, r1	; 0x31
    1c46:	1a aa       	std	Y+50, r1	; 0x32
    1c48:	1b aa       	std	Y+51, r1	; 0x33

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1c4a:	18 ae       	std	Y+56, r1	; 0x38
    1c4c:	19 ae       	std	Y+57, r1	; 0x39
    1c4e:	1a ae       	std	Y+58, r1	; 0x3a
    1c50:	1b ae       	std	Y+59, r1	; 0x3b
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    1c52:	fe 01       	movw	r30, r28
    1c54:	f4 96       	adiw	r30, 0x34	; 52

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1c56:	2c a9       	ldd	r18, Y+52	; 0x34
    1c58:	31 81       	ldd	r19, Z+1	; 0x01
    1c5a:	42 81       	ldd	r20, Z+2	; 0x02
    1c5c:	53 81       	ldd	r21, Z+3	; 0x03
    1c5e:	c9 01       	movw	r24, r18
    1c60:	da 01       	movw	r26, r20
    1c62:	b7 ff       	sbrs	r27, 7
    1c64:	04 c0       	rjmp	.+8      	; 0x1c6e <Timebase_UpCounter_Update+0xf4>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e0       	ldi	r26, 0x00	; 0
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	8c af       	std	Y+60, r24	; 0x3c
    1c70:	9d af       	std	Y+61, r25	; 0x3d
    1c72:	ae af       	std	Y+62, r26	; 0x3e
    1c74:	bf af       	std	Y+63, r27	; 0x3f
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1c76:	85 e1       	ldi	r24, 0x15	; 21
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	08 9f       	mul	r16, r24
    1c7c:	f0 01       	movw	r30, r0
    1c7e:	09 9f       	mul	r16, r25
    1c80:	f0 0d       	add	r31, r0
    1c82:	18 9f       	mul	r17, r24
    1c84:	f0 0d       	add	r31, r0
    1c86:	11 24       	eor	r1, r1
    1c88:	e6 0f       	add	r30, r22
    1c8a:	f7 1f       	adc	r31, r23
    1c8c:	87 a5       	ldd	r24, Z+47	; 0x2f
    1c8e:	81 7e       	andi	r24, 0xE1	; 225
    1c90:	88 60       	ori	r24, 0x08	; 8
    1c92:	87 a7       	std	Z+47, r24	; 0x2f
    1c94:	25 c0       	rjmp	.+74     	; 0x1ce0 <Timebase_UpCounter_Update+0x166>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1c96:	82 30       	cpi	r24, 0x02	; 2
    1c98:	19 f5       	brne	.+70     	; 0x1ce0 <Timebase_UpCounter_Update+0x166>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1c9a:	eb 01       	movw	r28, r22
    1c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ca0:	ac 85       	ldd	r26, Y+12	; 0x0c
    1ca2:	bd 85       	ldd	r27, Y+13	; 0x0d
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1ca4:	20 ad       	ldd	r18, Z+56	; 0x38
    1ca6:	31 ad       	ldd	r19, Z+57	; 0x39
    1ca8:	42 ad       	ldd	r20, Z+58	; 0x3a
    1caa:	53 ad       	ldd	r21, Z+59	; 0x3b
    1cac:	82 0f       	add	r24, r18
    1cae:	93 1f       	adc	r25, r19
    1cb0:	a4 1f       	adc	r26, r20
    1cb2:	b5 1f       	adc	r27, r21
    1cb4:	80 ab       	std	Z+48, r24	; 0x30
    1cb6:	91 ab       	std	Z+49, r25	; 0x31
    1cb8:	a2 ab       	std	Z+50, r26	; 0x32
    1cba:	b3 ab       	std	Z+51, r27	; 0x33
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    1cbc:	84 a9       	ldd	r24, Z+52	; 0x34
    1cbe:	95 a9       	ldd	r25, Z+53	; 0x35
    1cc0:	a6 a9       	ldd	r26, Z+54	; 0x36
    1cc2:	b7 a9       	ldd	r27, Z+55	; 0x37

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1cc4:	82 1b       	sub	r24, r18
    1cc6:	93 0b       	sbc	r25, r19
    1cc8:	a4 0b       	sbc	r26, r20
    1cca:	b5 0b       	sbc	r27, r21
    1ccc:	b7 ff       	sbrs	r27, 7
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <Timebase_UpCounter_Update+0x15e>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a0 e0       	ldi	r26, 0x00	; 0
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	84 af       	std	Z+60, r24	; 0x3c
    1cda:	95 af       	std	Z+61, r25	; 0x3d
    1cdc:	a6 af       	std	Z+62, r26	; 0x3e
    1cde:	b7 af       	std	Z+63, r27	; 0x3f
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	08 95       	ret

00001cea <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	e0 91 43 01 	lds	r30, 0x0143
    1cf0:	f0 91 44 01 	lds	r31, 0x0144
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	25 e1       	ldi	r18, 0x15	; 21
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	62 9f       	mul	r22, r18
    1cfe:	c0 01       	movw	r24, r0
    1d00:	63 9f       	mul	r22, r19
    1d02:	90 0d       	add	r25, r0
    1d04:	72 9f       	mul	r23, r18
    1d06:	90 0d       	add	r25, r0
    1d08:	11 24       	eor	r1, r1
    1d0a:	e8 0f       	add	r30, r24
    1d0c:	f9 1f       	adc	r31, r25
    1d0e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d10:	86 95       	lsr	r24
    1d12:	8f 70       	andi	r24, 0x0F	; 15
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <Timebase_UpCounter_Expired+0x30>
    1d18:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1d1a:	84 2f       	mov	r24, r20
    1d1c:	08 95       	ret

00001d1e <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1d1e:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1d20:	e0 91 43 01 	lds	r30, 0x0143
    1d24:	f0 91 44 01 	lds	r31, 0x0144
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	85 e1       	ldi	r24, 0x15	; 21
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	bc 01       	movw	r22, r24
    1d32:	26 9f       	mul	r18, r22
    1d34:	c0 01       	movw	r24, r0
    1d36:	27 9f       	mul	r18, r23
    1d38:	90 0d       	add	r25, r0
    1d3a:	36 9f       	mul	r19, r22
    1d3c:	90 0d       	add	r25, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	e8 0f       	add	r30, r24
    1d42:	f9 1f       	adc	r31, r25
    1d44:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d46:	86 95       	lsr	r24
    1d48:	8f 70       	andi	r24, 0x0F	; 15
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <Timebase_UpCounter_Expired_Event+0x34>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1d52:	84 2f       	mov	r24, r20
    1d54:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <Timebase_UpCounter_Reset>
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1d5a:	08 95       	ret

00001d5c <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1d5c:	e0 91 43 01 	lds	r30, 0x0143
    1d60:	f0 91 44 01 	lds	r31, 0x0144
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1d66:	25 e1       	ldi	r18, 0x15	; 21
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	a2 9f       	mul	r26, r18
    1d6e:	c0 01       	movw	r24, r0
    1d70:	a3 9f       	mul	r26, r19
    1d72:	90 0d       	add	r25, r0
    1d74:	b2 9f       	mul	r27, r18
    1d76:	90 0d       	add	r25, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	e8 0f       	add	r30, r24
    1d7c:	f9 1f       	adc	r31, r25
    1d7e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d80:	80 fd       	sbrc	r24, 0
    1d82:	13 c0       	rjmp	.+38     	; 0x1daa <Timebase_UpCounter_Set_Period_Value_Securely+0x4e>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1d84:	84 ad       	ldd	r24, Z+60	; 0x3c
    1d86:	95 ad       	ldd	r25, Z+61	; 0x3d
    1d88:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1d8a:	b7 ad       	ldd	r27, Z+63	; 0x3f
    1d8c:	84 0f       	add	r24, r20
    1d8e:	95 1f       	adc	r25, r21
    1d90:	a6 1f       	adc	r26, r22
    1d92:	b7 1f       	adc	r27, r23
    1d94:	e0 5c       	subi	r30, 0xC0	; 192
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	80 83       	st	Z, r24
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	a2 83       	std	Z+2, r26	; 0x02
    1d9e:	b3 83       	std	Z+3, r27	; 0x03
    1da0:	e0 54       	subi	r30, 0x40	; 64
    1da2:	f0 40       	sbci	r31, 0x00	; 0
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1da4:	87 a5       	ldd	r24, Z+47	; 0x2f
    1da6:	81 60       	ori	r24, 0x01	; 1
    1da8:	87 a7       	std	Z+47, r24	; 0x2f
    1daa:	08 95       	ret

00001dac <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1dac:	e0 91 43 01 	lds	r30, 0x0143
    1db0:	f0 91 44 01 	lds	r31, 0x0144
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1db6:	25 e1       	ldi	r18, 0x15	; 21
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	ac 01       	movw	r20, r24
    1dbc:	42 9f       	mul	r20, r18
    1dbe:	c0 01       	movw	r24, r0
    1dc0:	43 9f       	mul	r20, r19
    1dc2:	90 0d       	add	r25, r0
    1dc4:	52 9f       	mul	r21, r18
    1dc6:	90 0d       	add	r25, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	e8 0f       	add	r30, r24
    1dcc:	f9 1f       	adc	r31, r25
    1dce:	e0 5c       	subi	r30, 0xC0	; 192
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	20 81       	ld	r18, Z
    1dd4:	31 81       	ldd	r19, Z+1	; 0x01
    1dd6:	42 81       	ldd	r20, Z+2	; 0x02
    1dd8:	53 81       	ldd	r21, Z+3	; 0x03
    1dda:	e0 54       	subi	r30, 0x40	; 64
    1ddc:	f0 40       	sbci	r31, 0x00	; 0
    1dde:	84 ad       	ldd	r24, Z+60	; 0x3c
    1de0:	95 ad       	ldd	r25, Z+61	; 0x3d
    1de2:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1de4:	b7 ad       	ldd	r27, Z+63	; 0x3f
    1de6:	28 1b       	sub	r18, r24
    1de8:	39 0b       	sbc	r19, r25
    1dea:	4a 0b       	sbc	r20, r26
    1dec:	5b 0b       	sbc	r21, r27
    1dee:	57 ff       	sbrs	r21, 7
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <Timebase_UpCounter_Get_Remaining_Period_Value+0x4e>
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e0       	ldi	r20, 0x00	; 0
    1df8:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1dfa:	b9 01       	movw	r22, r18
    1dfc:	ca 01       	movw	r24, r20
    1dfe:	08 95       	ret

00001e00 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1e04:	c0 91 43 01 	lds	r28, 0x0143
    1e08:	d0 91 44 01 	lds	r29, 0x0144
    1e0c:	68 2f       	mov	r22, r24
    1e0e:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1e10:	85 e1       	ldi	r24, 0x15	; 21
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	68 9f       	mul	r22, r24
    1e16:	f0 01       	movw	r30, r0
    1e18:	69 9f       	mul	r22, r25
    1e1a:	f0 0d       	add	r31, r0
    1e1c:	78 9f       	mul	r23, r24
    1e1e:	f0 0d       	add	r31, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	ec 0f       	add	r30, r28
    1e24:	fd 1f       	adc	r31, r29
    1e26:	e0 5c       	subi	r30, 0xC0	; 192
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	20 81       	ld	r18, Z
    1e2c:	31 81       	ldd	r19, Z+1	; 0x01
    1e2e:	42 81       	ldd	r20, Z+2	; 0x02
    1e30:	53 81       	ldd	r21, Z+3	; 0x03
    1e32:	e0 54       	subi	r30, 0x40	; 64
    1e34:	f0 40       	sbci	r31, 0x00	; 0
    1e36:	84 ad       	ldd	r24, Z+60	; 0x3c
    1e38:	95 ad       	ldd	r25, Z+61	; 0x3d
    1e3a:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1e3c:	b7 ad       	ldd	r27, Z+63	; 0x3f
    1e3e:	28 1b       	sub	r18, r24
    1e40:	39 0b       	sbc	r19, r25
    1e42:	4a 0b       	sbc	r20, r26
    1e44:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1e46:	57 fd       	sbrc	r21, 7
    1e48:	07 c0       	rjmp	.+14     	; 0x1e58 <Timebase_UpCounter_Period_Value_Expired+0x58>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1e4a:	21 15       	cp	r18, r1
    1e4c:	31 05       	cpc	r19, r1
    1e4e:	41 05       	cpc	r20, r1
    1e50:	51 05       	cpc	r21, r1
    1e52:	11 f0       	breq	.+4      	; 0x1e58 <Timebase_UpCounter_Period_Value_Expired+0x58>
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	12 c0       	rjmp	.+36     	; 0x1e7c <Timebase_UpCounter_Period_Value_Expired+0x7c>
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	85 e1       	ldi	r24, 0x15	; 21
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	ac 01       	movw	r20, r24
    1e60:	64 9f       	mul	r22, r20
    1e62:	c0 01       	movw	r24, r0
    1e64:	65 9f       	mul	r22, r21
    1e66:	90 0d       	add	r25, r0
    1e68:	74 9f       	mul	r23, r20
    1e6a:	90 0d       	add	r25, r0
    1e6c:	11 24       	eor	r1, r1
    1e6e:	c8 0f       	add	r28, r24
    1e70:	d9 1f       	adc	r29, r25
    1e72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e74:	80 ff       	sbrs	r24, 0
    1e76:	21 e0       	ldi	r18, 0x01	; 1
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1e84:	1f 93       	push	r17
    1e86:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1e88:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <Timebase_UpCounter_Period_Value_Expired>
    1e8c:	81 30       	cpi	r24, 0x01	; 1
    1e8e:	11 f0       	breq	.+4      	; 0x1e94 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	16 c0       	rjmp	.+44     	; 0x1ec0 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e94:	e0 91 43 01 	lds	r30, 0x0143
    1e98:	f0 91 44 01 	lds	r31, 0x0144
    1e9c:	21 2f       	mov	r18, r17
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	85 e1       	ldi	r24, 0x15	; 21
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	24 9f       	mul	r18, r20
    1ea8:	c0 01       	movw	r24, r0
    1eaa:	25 9f       	mul	r18, r21
    1eac:	90 0d       	add	r25, r0
    1eae:	34 9f       	mul	r19, r20
    1eb0:	90 0d       	add	r25, r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	e8 0f       	add	r30, r24
    1eb6:	f9 1f       	adc	r31, r25
    1eb8:	87 a5       	ldd	r24, Z+47	; 0x2f
    1eba:	8e 7f       	andi	r24, 0xFE	; 254
    1ebc:	87 a7       	std	Z+47, r24	; 0x2f
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1ec0:	1f 91       	pop	r17
    1ec2:	08 95       	ret

00001ec4 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Timebase_UpCounter_Update>
  }
}
    1eca:	08 95       	ret

00001ecc <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <Timebase_UpCounter_Reset>
  }
}
    1ed2:	08 95       	ret

00001ed4 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1ed4:	e0 91 43 01 	lds	r30, 0x0143
    1ed8:	f0 91 44 01 	lds	r31, 0x0144
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	9c 01       	movw	r18, r24
    1ee0:	44 e0       	ldi	r20, 0x04	; 4
    1ee2:	22 0f       	add	r18, r18
    1ee4:	33 1f       	adc	r19, r19
    1ee6:	4a 95       	dec	r20
    1ee8:	e1 f7       	brne	.-8      	; 0x1ee2 <Timebase_DownCounter_SS_Get_Status+0xe>
    1eea:	28 0f       	add	r18, r24
    1eec:	39 1f       	adc	r19, r25
    1eee:	e2 0f       	add	r30, r18
    1ef0:	f3 1f       	adc	r31, r19
    1ef2:	ec 5b       	subi	r30, 0xBC	; 188
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1efa:	8f 70       	andi	r24, 0x0F	; 15
    1efc:	08 95       	ret

00001efe <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1efe:	e0 91 43 01 	lds	r30, 0x0143
    1f02:	f0 91 44 01 	lds	r31, 0x0144
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	9c 01       	movw	r18, r24
    1f0a:	54 e0       	ldi	r21, 0x04	; 4
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	5a 95       	dec	r21
    1f12:	e1 f7       	brne	.-8      	; 0x1f0c <Timebase_DownCounter_SS_Set_Status+0xe>
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	ec 5b       	subi	r30, 0xBC	; 188
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	6f 70       	andi	r22, 0x0F	; 15
    1f22:	66 0f       	add	r22, r22
    1f24:	80 81       	ld	r24, Z
    1f26:	81 7e       	andi	r24, 0xE1	; 225
    1f28:	86 2b       	or	r24, r22
    1f2a:	80 83       	st	Z, r24
}
    1f2c:	08 95       	ret

00001f2e <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1f2e:	e0 91 43 01 	lds	r30, 0x0143
    1f32:	f0 91 44 01 	lds	r31, 0x0144
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9c 01       	movw	r18, r24
    1f3a:	64 e0       	ldi	r22, 0x04	; 4
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	6a 95       	dec	r22
    1f42:	e1 f7       	brne	.-8      	; 0x1f3c <Timebase_DownCounter_SS_Get_Value+0xe>
    1f44:	28 0f       	add	r18, r24
    1f46:	39 1f       	adc	r19, r25
    1f48:	e2 0f       	add	r30, r18
    1f4a:	f3 1f       	adc	r31, r19
    1f4c:	e3 5b       	subi	r30, 0xB3	; 179
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	08 95       	ret

00001f5a <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f5a:	e0 91 43 01 	lds	r30, 0x0143
    1f5e:	f0 91 44 01 	lds	r31, 0x0144
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 01       	movw	r18, r24
    1f66:	a4 e0       	ldi	r26, 0x04	; 4
    1f68:	22 0f       	add	r18, r18
    1f6a:	33 1f       	adc	r19, r19
    1f6c:	aa 95       	dec	r26
    1f6e:	e1 f7       	brne	.-8      	; 0x1f68 <Timebase_DownCounter_SS_Set_Value+0xe>
    1f70:	28 0f       	add	r18, r24
    1f72:	39 1f       	adc	r19, r25
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	e3 5b       	subi	r30, 0xB3	; 179
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	40 83       	st	Z, r20
    1f7e:	51 83       	std	Z+1, r21	; 0x01
    1f80:	62 83       	std	Z+2, r22	; 0x02
    1f82:	73 83       	std	Z+3, r23	; 0x03
}
    1f84:	08 95       	ret

00001f86 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1f86:	e0 91 43 01 	lds	r30, 0x0143
    1f8a:	f0 91 44 01 	lds	r31, 0x0144
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9c 01       	movw	r18, r24
    1f92:	b4 e0       	ldi	r27, 0x04	; 4
    1f94:	22 0f       	add	r18, r18
    1f96:	33 1f       	adc	r19, r19
    1f98:	ba 95       	dec	r27
    1f9a:	e1 f7       	brne	.-8      	; 0x1f94 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1f9c:	28 0f       	add	r18, r24
    1f9e:	39 1f       	adc	r19, r25
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	eb 5b       	subi	r30, 0xBB	; 187
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	08 95       	ret

00001fb2 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1fb2:	e0 91 43 01 	lds	r30, 0x0143
    1fb6:	f0 91 44 01 	lds	r31, 0x0144
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	44 e0       	ldi	r20, 0x04	; 4
    1fc0:	22 0f       	add	r18, r18
    1fc2:	33 1f       	adc	r19, r19
    1fc4:	4a 95       	dec	r20
    1fc6:	e1 f7       	brne	.-8      	; 0x1fc0 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1fc8:	28 0f       	add	r18, r24
    1fca:	39 1f       	adc	r19, r25
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	e7 5b       	subi	r30, 0xB7	; 183
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	08 95       	ret

00001fde <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fde:	e0 91 43 01 	lds	r30, 0x0143
    1fe2:	f0 91 44 01 	lds	r31, 0x0144
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	9c 01       	movw	r18, r24
    1fea:	a4 e0       	ldi	r26, 0x04	; 4
    1fec:	22 0f       	add	r18, r18
    1fee:	33 1f       	adc	r19, r19
    1ff0:	aa 95       	dec	r26
    1ff2:	e1 f7       	brne	.-8      	; 0x1fec <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1ff4:	28 0f       	add	r18, r24
    1ff6:	39 1f       	adc	r19, r25
    1ff8:	e2 0f       	add	r30, r18
    1ffa:	f3 1f       	adc	r31, r19
    1ffc:	eb 5b       	subi	r30, 0xBB	; 187
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	40 83       	st	Z, r20
    2002:	51 83       	std	Z+1, r21	; 0x01
    2004:	62 83       	std	Z+2, r22	; 0x02
    2006:	73 83       	std	Z+3, r23	; 0x03
}
    2008:	08 95       	ret

0000200a <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    200a:	e0 91 43 01 	lds	r30, 0x0143
    200e:	f0 91 44 01 	lds	r31, 0x0144
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	9c 01       	movw	r18, r24
    2016:	b4 e0       	ldi	r27, 0x04	; 4
    2018:	22 0f       	add	r18, r18
    201a:	33 1f       	adc	r19, r19
    201c:	ba 95       	dec	r27
    201e:	e1 f7       	brne	.-8      	; 0x2018 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    2020:	28 0f       	add	r18, r24
    2022:	39 1f       	adc	r19, r25
    2024:	e2 0f       	add	r30, r18
    2026:	f3 1f       	adc	r31, r19
    2028:	e7 5b       	subi	r30, 0xB7	; 183
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	40 83       	st	Z, r20
    202e:	51 83       	std	Z+1, r21	; 0x01
    2030:	62 83       	std	Z+2, r22	; 0x02
    2032:	73 83       	std	Z+3, r23	; 0x03
}
    2034:	08 95       	ret

00002036 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    2036:	e0 91 43 01 	lds	r30, 0x0143
    203a:	f0 91 44 01 	lds	r31, 0x0144
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	9c 01       	movw	r18, r24
    2042:	44 e0       	ldi	r20, 0x04	; 4
    2044:	22 0f       	add	r18, r18
    2046:	33 1f       	adc	r19, r19
    2048:	4a 95       	dec	r20
    204a:	e1 f7       	brne	.-8      	; 0x2044 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    204c:	28 0f       	add	r18, r24
    204e:	39 1f       	adc	r19, r25
    2050:	e2 0f       	add	r30, r18
    2052:	f3 1f       	adc	r31, r19
    2054:	ef 5a       	subi	r30, 0xAF	; 175
    2056:	ff 4f       	sbci	r31, 0xFF	; 255
    2058:	60 81       	ld	r22, Z
    205a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    205c:	82 81       	ldd	r24, Z+2	; 0x02
    205e:	93 81       	ldd	r25, Z+3	; 0x03
    2060:	08 95       	ret

00002062 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    2062:	e0 91 43 01 	lds	r30, 0x0143
    2066:	f0 91 44 01 	lds	r31, 0x0144
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    206e:	77 ff       	sbrs	r23, 7
    2070:	11 c0       	rjmp	.+34     	; 0x2094 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2072:	c9 01       	movw	r24, r18
    2074:	b4 e0       	ldi	r27, 0x04	; 4
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	ba 95       	dec	r27
    207c:	e1 f7       	brne	.-8      	; 0x2076 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    207e:	82 0f       	add	r24, r18
    2080:	93 1f       	adc	r25, r19
    2082:	e8 0f       	add	r30, r24
    2084:	f9 1f       	adc	r31, r25
    2086:	ef 5a       	subi	r30, 0xAF	; 175
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	10 82       	st	Z, r1
    208c:	11 82       	std	Z+1, r1	; 0x01
    208e:	12 82       	std	Z+2, r1	; 0x02
    2090:	13 82       	std	Z+3, r1	; 0x03
    2092:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    2094:	c9 01       	movw	r24, r18
    2096:	a4 e0       	ldi	r26, 0x04	; 4
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	aa 95       	dec	r26
    209e:	e1 f7       	brne	.-8      	; 0x2098 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    20a0:	82 0f       	add	r24, r18
    20a2:	93 1f       	adc	r25, r19
    20a4:	e8 0f       	add	r30, r24
    20a6:	f9 1f       	adc	r31, r25
    20a8:	ef 5a       	subi	r30, 0xAF	; 175
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	40 83       	st	Z, r20
    20ae:	51 83       	std	Z+1, r21	; 0x01
    20b0:	62 83       	std	Z+2, r22	; 0x02
    20b2:	73 83       	std	Z+3, r23	; 0x03
    20b4:	08 95       	ret

000020b6 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    20b6:	e0 91 43 01 	lds	r30, 0x0143
    20ba:	f0 91 44 01 	lds	r31, 0x0144
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9c 01       	movw	r18, r24
    20c2:	44 e0       	ldi	r20, 0x04	; 4
    20c4:	22 0f       	add	r18, r18
    20c6:	33 1f       	adc	r19, r19
    20c8:	4a 95       	dec	r20
    20ca:	e1 f7       	brne	.-8      	; 0x20c4 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    20cc:	28 0f       	add	r18, r24
    20ce:	39 1f       	adc	r19, r25
    20d0:	e2 0f       	add	r30, r18
    20d2:	f3 1f       	adc	r31, r19
    20d4:	ec 5b       	subi	r30, 0xBC	; 188
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    20da:	81 70       	andi	r24, 0x01	; 1
    20dc:	08 95       	ret

000020de <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    20de:	e0 91 43 01 	lds	r30, 0x0143
    20e2:	f0 91 44 01 	lds	r31, 0x0144
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9c 01       	movw	r18, r24
    20ea:	54 e0       	ldi	r21, 0x04	; 4
    20ec:	22 0f       	add	r18, r18
    20ee:	33 1f       	adc	r19, r19
    20f0:	5a 95       	dec	r21
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    20f4:	28 0f       	add	r18, r24
    20f6:	39 1f       	adc	r19, r25
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	ec 5b       	subi	r30, 0xBC	; 188
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	81 60       	ori	r24, 0x01	; 1
    2104:	80 83       	st	Z, r24
}
    2106:	08 95       	ret

00002108 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2108:	e0 91 43 01 	lds	r30, 0x0143
    210c:	f0 91 44 01 	lds	r31, 0x0144
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9c 01       	movw	r18, r24
    2114:	64 e0       	ldi	r22, 0x04	; 4
    2116:	22 0f       	add	r18, r18
    2118:	33 1f       	adc	r19, r19
    211a:	6a 95       	dec	r22
    211c:	e1 f7       	brne	.-8      	; 0x2116 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    211e:	28 0f       	add	r18, r24
    2120:	39 1f       	adc	r19, r25
    2122:	e2 0f       	add	r30, r18
    2124:	f3 1f       	adc	r31, r19
    2126:	ec 5b       	subi	r30, 0xBC	; 188
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	8e 7f       	andi	r24, 0xFE	; 254
    212e:	80 83       	st	Z, r24
}
    2130:	08 95       	ret

00002132 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2132:	e0 91 43 01 	lds	r30, 0x0143
    2136:	f0 91 44 01 	lds	r31, 0x0144
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	9c 01       	movw	r18, r24
    213e:	74 e0       	ldi	r23, 0x04	; 4
    2140:	22 0f       	add	r18, r18
    2142:	33 1f       	adc	r19, r19
    2144:	7a 95       	dec	r23
    2146:	e1 f7       	brne	.-8      	; 0x2140 <Timebase_DownCounter_SS_Reset+0xe>
    2148:	28 0f       	add	r18, r24
    214a:	39 1f       	adc	r19, r25
    214c:	e2 0f       	add	r30, r18
    214e:	f3 1f       	adc	r31, r19
    2150:	e7 5b       	subi	r30, 0xB7	; 183
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	10 82       	st	Z, r1
    2156:	11 82       	std	Z+1, r1	; 0x01
    2158:	12 82       	std	Z+2, r1	; 0x02
    215a:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    215c:	12 92       	st	-Z, r1
    215e:	12 92       	st	-Z, r1
    2160:	12 92       	st	-Z, r1
    2162:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2164:	38 96       	adiw	r30, 0x08	; 8
    2166:	10 82       	st	Z, r1
    2168:	11 82       	std	Z+1, r1	; 0x01
    216a:	12 82       	std	Z+2, r1	; 0x02
    216c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    216e:	39 97       	sbiw	r30, 0x09	; 9
    2170:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2172:	80 7e       	andi	r24, 0xE0	; 224
    2174:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    2176:	08 95       	ret

00002178 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2178:	e0 91 43 01 	lds	r30, 0x0143
    217c:	f0 91 44 01 	lds	r31, 0x0144
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9c 01       	movw	r18, r24
    2184:	a4 e0       	ldi	r26, 0x04	; 4
    2186:	22 0f       	add	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	aa 95       	dec	r26
    218c:	e1 f7       	brne	.-8      	; 0x2186 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    218e:	28 0f       	add	r18, r24
    2190:	39 1f       	adc	r19, r25
    2192:	e2 0f       	add	r30, r18
    2194:	f3 1f       	adc	r31, r19
    2196:	e7 5b       	subi	r30, 0xB7	; 183
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	10 82       	st	Z, r1
    219c:	11 82       	std	Z+1, r1	; 0x01
    219e:	12 82       	std	Z+2, r1	; 0x02
    21a0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    21a2:	12 92       	st	-Z, r1
    21a4:	12 92       	st	-Z, r1
    21a6:	12 92       	st	-Z, r1
    21a8:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21aa:	38 96       	adiw	r30, 0x08	; 8
    21ac:	10 82       	st	Z, r1
    21ae:	11 82       	std	Z+1, r1	; 0x01
    21b0:	12 82       	std	Z+2, r1	; 0x02
    21b2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    21b4:	39 97       	sbiw	r30, 0x09	; 9
    21b6:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    21b8:	80 7e       	andi	r24, 0xE0	; 224
    21ba:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    21bc:	08 95       	ret

000021be <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    21be:	e0 91 43 01 	lds	r30, 0x0143
    21c2:	f0 91 44 01 	lds	r31, 0x0144
    21c6:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    21c8:	9c 01       	movw	r18, r24
    21ca:	b4 e0       	ldi	r27, 0x04	; 4
    21cc:	22 0f       	add	r18, r18
    21ce:	33 1f       	adc	r19, r19
    21d0:	ba 95       	dec	r27
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <Timebase_DownCounter_SS_Start+0xe>
    21d4:	28 0f       	add	r18, r24
    21d6:	39 1f       	adc	r19, r25
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	ec 5b       	subi	r30, 0xBC	; 188
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	90 81       	ld	r25, Z
    21e2:	89 2f       	mov	r24, r25
    21e4:	86 95       	lsr	r24
    21e6:	8f 70       	andi	r24, 0x0F	; 15
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	19 f0       	breq	.+6      	; 0x21f2 <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    21ec:	91 7e       	andi	r25, 0xE1	; 225
    21ee:	92 60       	ori	r25, 0x02	; 2
    21f0:	90 83       	st	Z, r25
    21f2:	08 95       	ret

000021f4 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    21f4:	e0 91 43 01 	lds	r30, 0x0143
    21f8:	f0 91 44 01 	lds	r31, 0x0144
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    21fe:	9c 01       	movw	r18, r24
    2200:	44 e0       	ldi	r20, 0x04	; 4
    2202:	22 0f       	add	r18, r18
    2204:	33 1f       	adc	r19, r19
    2206:	4a 95       	dec	r20
    2208:	e1 f7       	brne	.-8      	; 0x2202 <Timebase_DownCounter_SS_Stop+0xe>
    220a:	28 0f       	add	r18, r24
    220c:	39 1f       	adc	r19, r25
    220e:	e2 0f       	add	r30, r18
    2210:	f3 1f       	adc	r31, r19
    2212:	ec 5b       	subi	r30, 0xBC	; 188
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	90 81       	ld	r25, Z
    2218:	89 2f       	mov	r24, r25
    221a:	86 95       	lsr	r24
    221c:	8f 70       	andi	r24, 0x0F	; 15
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	19 f0       	breq	.+6      	; 0x2228 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2222:	91 7e       	andi	r25, 0xE1	; 225
    2224:	94 60       	ori	r25, 0x04	; 4
    2226:	90 83       	st	Z, r25
    2228:	08 95       	ret

0000222a <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    222a:	2f 92       	push	r2
    222c:	3f 92       	push	r3
    222e:	4f 92       	push	r4
    2230:	5f 92       	push	r5
    2232:	6f 92       	push	r6
    2234:	7f 92       	push	r7
    2236:	8f 92       	push	r8
    2238:	9f 92       	push	r9
    223a:	af 92       	push	r10
    223c:	bf 92       	push	r11
    223e:	cf 92       	push	r12
    2240:	df 92       	push	r13
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <Timebase_DownCounter_SS_Set_Securely+0x26>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <Timebase_DownCounter_SS_Set_Securely+0x28>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	4a 01       	movw	r8, r20
    2258:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    225a:	20 91 43 01 	lds	r18, 0x0143
    225e:	30 91 44 01 	lds	r19, 0x0144
    2262:	3c 83       	std	Y+4, r19	; 0x04
    2264:	2b 83       	std	Y+3, r18	; 0x03
    2266:	a8 2f       	mov	r26, r24
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	ba 83       	std	Y+2, r27	; 0x02
    226c:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    226e:	fd 01       	movw	r30, r26
    2270:	64 e0       	ldi	r22, 0x04	; 4
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	6a 95       	dec	r22
    2278:	e1 f7       	brne	.-8      	; 0x2272 <Timebase_DownCounter_SS_Set_Securely+0x48>
    227a:	ea 0f       	add	r30, r26
    227c:	fb 1f       	adc	r31, r27
    227e:	e2 0f       	add	r30, r18
    2280:	f3 1f       	adc	r31, r19
    2282:	ec 5b       	subi	r30, 0xBC	; 188
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	80 81       	ld	r24, Z
    2288:	e4 54       	subi	r30, 0x44	; 68
    228a:	f0 40       	sbci	r31, 0x00	; 0
    228c:	86 95       	lsr	r24
    228e:	8f 70       	andi	r24, 0x0F	; 15
    2290:	09 f0       	breq	.+2      	; 0x2294 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    2292:	72 c0       	rjmp	.+228    	; 0x2378 <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2294:	e3 5b       	subi	r30, 0xB3	; 179
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 82       	st	Z, r8
    229a:	91 82       	std	Z+1, r9	; 0x01
    229c:	a2 82       	std	Z+2, r10	; 0x02
    229e:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    22a0:	f9 01       	movw	r30, r18
    22a2:	c0 84       	ldd	r12, Z+8	; 0x08
    22a4:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    22a6:	22 84       	ldd	r2, Z+10	; 0x0a
    22a8:	33 84       	ldd	r3, Z+11	; 0x0b
    22aa:	44 84       	ldd	r4, Z+12	; 0x0c
    22ac:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    22ae:	21 81       	ldd	r18, Z+1	; 0x01
    22b0:	32 81       	ldd	r19, Z+2	; 0x02
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e0       	ldi	r21, 0x00	; 0
    22b6:	c5 01       	movw	r24, r10
    22b8:	b4 01       	movw	r22, r8
    22ba:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    22be:	7b 01       	movw	r14, r22
    22c0:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    22c2:	ab 81       	ldd	r26, Y+3	; 0x03
    22c4:	bc 81       	ldd	r27, Y+4	; 0x04
    22c6:	11 96       	adiw	r26, 0x01	; 1
    22c8:	2d 91       	ld	r18, X+
    22ca:	3c 91       	ld	r19, X
    22cc:	12 97       	sbiw	r26, 0x02	; 2
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	c5 01       	movw	r24, r10
    22d4:	b4 01       	movw	r22, r8
    22d6:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    22da:	c9 01       	movw	r24, r18
    22dc:	da 01       	movw	r26, r20
    22de:	3c 01       	movw	r6, r24
    22e0:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    22e2:	56 01       	movw	r10, r12
    22e4:	cc 24       	eor	r12, r12
    22e6:	dd 24       	eor	r13, r13
    22e8:	ae 0c       	add	r10, r14
    22ea:	bf 1c       	adc	r11, r15
    22ec:	c0 1e       	adc	r12, r16
    22ee:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    22f0:	eb 81       	ldd	r30, Y+3	; 0x03
    22f2:	fc 81       	ldd	r31, Y+4	; 0x04
    22f4:	81 81       	ldd	r24, Z+1	; 0x01
    22f6:	92 81       	ldd	r25, Z+2	; 0x02
    22f8:	a0 e0       	ldi	r26, 0x00	; 0
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	a8 16       	cp	r10, r24
    22fe:	b9 06       	cpc	r11, r25
    2300:	ca 06       	cpc	r12, r26
    2302:	db 06       	cpc	r13, r27
    2304:	94 f0       	brlt	.+36     	; 0x232a <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    2306:	08 94       	sec
    2308:	61 1c       	adc	r6, r1
    230a:	71 1c       	adc	r7, r1
    230c:	81 1c       	adc	r8, r1
    230e:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    2310:	21 81       	ldd	r18, Z+1	; 0x01
    2312:	32 81       	ldd	r19, Z+2	; 0x02
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	c6 01       	movw	r24, r12
    231a:	b5 01       	movw	r22, r10
    231c:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    2320:	ac 01       	movw	r20, r24
    2322:	cb 01       	movw	r24, r22
    2324:	da 01       	movw	r26, r20
    2326:	5c 01       	movw	r10, r24
    2328:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    232a:	e9 81       	ldd	r30, Y+1	; 0x01
    232c:	fa 81       	ldd	r31, Y+2	; 0x02
    232e:	54 e0       	ldi	r21, 0x04	; 4
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	5a 95       	dec	r21
    2336:	e1 f7       	brne	.-8      	; 0x2330 <Timebase_DownCounter_SS_Set_Securely+0x106>
    2338:	29 81       	ldd	r18, Y+1	; 0x01
    233a:	3a 81       	ldd	r19, Y+2	; 0x02
    233c:	e2 0f       	add	r30, r18
    233e:	f3 1f       	adc	r31, r19
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	e8 0f       	add	r30, r24
    2346:	f9 1f       	adc	r31, r25
    2348:	eb 5b       	subi	r30, 0xBB	; 187
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	26 0c       	add	r2, r6
    234e:	37 1c       	adc	r3, r7
    2350:	48 1c       	adc	r4, r8
    2352:	59 1c       	adc	r5, r9
    2354:	21 92       	st	Z+, r2
    2356:	31 92       	st	Z+, r3
    2358:	41 92       	st	Z+, r4
    235a:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    235c:	a0 82       	st	Z, r10
    235e:	b1 82       	std	Z+1, r11	; 0x01
    2360:	c2 82       	std	Z+2, r12	; 0x02
    2362:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    2364:	35 97       	sbiw	r30, 0x05	; 5
    2366:	90 81       	ld	r25, Z
    2368:	89 2f       	mov	r24, r25
    236a:	86 95       	lsr	r24
    236c:	8f 70       	andi	r24, 0x0F	; 15
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	19 f0       	breq	.+6      	; 0x2378 <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2372:	91 7e       	andi	r25, 0xE1	; 225
    2374:	92 60       	ori	r25, 0x02	; 2
    2376:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	df 90       	pop	r13
    238e:	cf 90       	pop	r12
    2390:	bf 90       	pop	r11
    2392:	af 90       	pop	r10
    2394:	9f 90       	pop	r9
    2396:	8f 90       	pop	r8
    2398:	7f 90       	pop	r7
    239a:	6f 90       	pop	r6
    239c:	5f 90       	pop	r5
    239e:	4f 90       	pop	r4
    23a0:	3f 90       	pop	r3
    23a2:	2f 90       	pop	r2
    23a4:	08 95       	ret

000023a6 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    23a6:	e0 91 43 01 	lds	r30, 0x0143
    23aa:	f0 91 44 01 	lds	r31, 0x0144
    23ae:	a8 2f       	mov	r26, r24
    23b0:	b0 e0       	ldi	r27, 0x00	; 0
    23b2:	9d 01       	movw	r18, r26
    23b4:	94 e0       	ldi	r25, 0x04	; 4
    23b6:	22 0f       	add	r18, r18
    23b8:	33 1f       	adc	r19, r19
    23ba:	9a 95       	dec	r25
    23bc:	e1 f7       	brne	.-8      	; 0x23b6 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    23be:	2a 0f       	add	r18, r26
    23c0:	3b 1f       	adc	r19, r27
    23c2:	e2 0f       	add	r30, r18
    23c4:	f3 1f       	adc	r31, r19
    23c6:	e7 5b       	subi	r30, 0xB7	; 183
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	10 82       	st	Z, r1
    23cc:	11 82       	std	Z+1, r1	; 0x01
    23ce:	12 82       	std	Z+2, r1	; 0x02
    23d0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    23d2:	12 92       	st	-Z, r1
    23d4:	12 92       	st	-Z, r1
    23d6:	12 92       	st	-Z, r1
    23d8:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    23da:	38 96       	adiw	r30, 0x08	; 8
    23dc:	10 82       	st	Z, r1
    23de:	11 82       	std	Z+1, r1	; 0x01
    23e0:	12 82       	std	Z+2, r1	; 0x02
    23e2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    23e4:	39 97       	sbiw	r30, 0x09	; 9
    23e6:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    23e8:	90 7e       	andi	r25, 0xE0	; 224
    23ea:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    23ec:	0e 94 15 11 	call	0x222a	; 0x222a <Timebase_DownCounter_SS_Set_Securely>
} 
    23f0:	08 95       	ret

000023f2 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    23f2:	2f 92       	push	r2
    23f4:	3f 92       	push	r3
    23f6:	4f 92       	push	r4
    23f8:	5f 92       	push	r5
    23fa:	6f 92       	push	r6
    23fc:	7f 92       	push	r7
    23fe:	8f 92       	push	r8
    2400:	9f 92       	push	r9
    2402:	af 92       	push	r10
    2404:	bf 92       	push	r11
    2406:	cf 92       	push	r12
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2416:	c0 90 43 01 	lds	r12, 0x0143
    241a:	d0 90 44 01 	lds	r13, 0x0144
    241e:	08 2f       	mov	r16, r24
    2420:	10 e0       	ldi	r17, 0x00	; 0
    2422:	e8 01       	movw	r28, r16
    2424:	34 e0       	ldi	r19, 0x04	; 4
    2426:	cc 0f       	add	r28, r28
    2428:	dd 1f       	adc	r29, r29
    242a:	3a 95       	dec	r19
    242c:	e1 f7       	brne	.-8      	; 0x2426 <Timebase_DownCounter_SS_Update+0x34>
    242e:	c0 0f       	add	r28, r16
    2430:	d1 1f       	adc	r29, r17
    2432:	cc 0d       	add	r28, r12
    2434:	dd 1d       	adc	r29, r13
    2436:	cc 5b       	subi	r28, 0xBC	; 188
    2438:	df 4f       	sbci	r29, 0xFF	; 255
    243a:	88 81       	ld	r24, Y
    243c:	c4 54       	subi	r28, 0x44	; 68
    243e:	d0 40       	sbci	r29, 0x00	; 0
    2440:	86 95       	lsr	r24
    2442:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	09 f0       	breq	.+2      	; 0x244a <Timebase_DownCounter_SS_Update+0x58>
    2448:	5d c0       	rjmp	.+186    	; 0x2504 <Timebase_DownCounter_SS_Update+0x112>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    244a:	f6 01       	movw	r30, r12
    244c:	80 85       	ldd	r24, Z+8	; 0x08
    244e:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    2450:	4c 01       	movw	r8, r24
    2452:	aa 24       	eor	r10, r10
    2454:	bb 24       	eor	r11, r11
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2456:	82 85       	ldd	r24, Z+10	; 0x0a
    2458:	93 85       	ldd	r25, Z+11	; 0x0b
    245a:	a4 85       	ldd	r26, Z+12	; 0x0c
    245c:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    245e:	cb 5b       	subi	r28, 0xBB	; 187
    2460:	df 4f       	sbci	r29, 0xFF	; 255
    2462:	28 80       	ld	r2, Y
    2464:	39 80       	ldd	r3, Y+1	; 0x01
    2466:	4a 80       	ldd	r4, Y+2	; 0x02
    2468:	5b 80       	ldd	r5, Y+3	; 0x03
    246a:	28 1a       	sub	r2, r24
    246c:	39 0a       	sbc	r3, r25
    246e:	4a 0a       	sbc	r4, r26
    2470:	5b 0a       	sbc	r5, r27
    2472:	57 fe       	sbrs	r5, 7
    2474:	03 c0       	rjmp	.+6      	; 0x247c <Timebase_DownCounter_SS_Update+0x8a>
    2476:	22 24       	eor	r2, r2
    2478:	33 24       	eor	r3, r3
    247a:	21 01       	movw	r4, r2
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    247c:	f6 01       	movw	r30, r12
    247e:	21 81       	ldd	r18, Z+1	; 0x01
    2480:	32 81       	ldd	r19, Z+2	; 0x02
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	50 e0       	ldi	r21, 0x00	; 0
    2486:	c2 01       	movw	r24, r4
    2488:	b1 01       	movw	r22, r2
    248a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulsi3>
	temp_s += temp_ss;
    248e:	f8 01       	movw	r30, r16
    2490:	24 e0       	ldi	r18, 0x04	; 4
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	2a 95       	dec	r18
    2498:	e1 f7       	brne	.-8      	; 0x2492 <Timebase_DownCounter_SS_Update+0xa0>
    249a:	e0 0f       	add	r30, r16
    249c:	f1 1f       	adc	r31, r17
    249e:	ec 0d       	add	r30, r12
    24a0:	fd 1d       	adc	r31, r13
    24a2:	ef 01       	movw	r28, r30
    24a4:	c7 5b       	subi	r28, 0xB7	; 183
    24a6:	df 4f       	sbci	r29, 0xFF	; 255
    24a8:	28 81       	ld	r18, Y
    24aa:	39 81       	ldd	r19, Y+1	; 0x01
    24ac:	4a 81       	ldd	r20, Y+2	; 0x02
    24ae:	5b 81       	ldd	r21, Y+3	; 0x03
    24b0:	28 19       	sub	r18, r8
    24b2:	39 09       	sbc	r19, r9
    24b4:	4a 09       	sbc	r20, r10
    24b6:	5b 09       	sbc	r21, r11
    24b8:	26 0f       	add	r18, r22
    24ba:	37 1f       	adc	r19, r23
    24bc:	48 1f       	adc	r20, r24
    24be:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    24c0:	df 01       	movw	r26, r30
    24c2:	a3 5b       	subi	r26, 0xB3	; 179
    24c4:	bf 4f       	sbci	r27, 0xFF	; 255
    24c6:	2d 93       	st	X+, r18
    24c8:	3d 93       	st	X+, r19
    24ca:	4d 93       	st	X+, r20
    24cc:	5c 93       	st	X, r21
    24ce:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    24d0:	12 16       	cp	r1, r18
    24d2:	13 06       	cpc	r1, r19
    24d4:	14 06       	cpc	r1, r20
    24d6:	15 06       	cpc	r1, r21
    24d8:	0c f4       	brge	.+2      	; 0x24dc <Timebase_DownCounter_SS_Update+0xea>
    24da:	48 c0       	rjmp	.+144    	; 0x256c <Timebase_DownCounter_SS_Update+0x17a>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    24dc:	18 82       	st	Y, r1
    24de:	19 82       	std	Y+1, r1	; 0x01
    24e0:	1a 82       	std	Y+2, r1	; 0x02
    24e2:	1b 82       	std	Y+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    24e4:	eb 5b       	subi	r30, 0xBB	; 187
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	10 82       	st	Z, r1
    24ea:	11 82       	std	Z+1, r1	; 0x01
    24ec:	12 82       	std	Z+2, r1	; 0x02
    24ee:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    24f0:	1d 92       	st	X+, r1
    24f2:	1d 92       	st	X+, r1
    24f4:	1d 92       	st	X+, r1
    24f6:	1c 92       	st	X, r1
    24f8:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24fa:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    24fc:	80 7e       	andi	r24, 0xE0	; 224
    24fe:	88 60       	ori	r24, 0x08	; 8
    2500:	80 83       	st	Z, r24
    2502:	34 c0       	rjmp	.+104    	; 0x256c <Timebase_DownCounter_SS_Update+0x17a>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2504:	82 30       	cpi	r24, 0x02	; 2
    2506:	91 f5       	brne	.+100    	; 0x256c <Timebase_DownCounter_SS_Update+0x17a>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2508:	f6 01       	movw	r30, r12
    250a:	60 84       	ldd	r6, Z+8	; 0x08
    250c:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    250e:	e2 84       	ldd	r14, Z+10	; 0x0a
    2510:	f3 84       	ldd	r15, Z+11	; 0x0b
    2512:	04 85       	ldd	r16, Z+12	; 0x0c
    2514:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2516:	c3 5b       	subi	r28, 0xB3	; 179
    2518:	df 4f       	sbci	r29, 0xFF	; 255
    251a:	28 80       	ld	r2, Y
    251c:	39 80       	ldd	r3, Y+1	; 0x01
    251e:	4a 80       	ldd	r4, Y+2	; 0x02
    2520:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    2522:	21 81       	ldd	r18, Z+1	; 0x01
    2524:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    2526:	a1 80       	ldd	r10, Z+1	; 0x01
    2528:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    252a:	28 97       	sbiw	r28, 0x08	; 8
    252c:	40 e0       	ldi	r20, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	c2 01       	movw	r24, r4
    2532:	b1 01       	movw	r22, r2
    2534:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    2538:	e2 0e       	add	r14, r18
    253a:	f3 1e       	adc	r15, r19
    253c:	04 1f       	adc	r16, r20
    253e:	15 1f       	adc	r17, r21
    2540:	e9 92       	st	Y+, r14
    2542:	f9 92       	st	Y+, r15
    2544:	09 93       	st	Y+, r16
    2546:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2548:	cc 24       	eor	r12, r12
    254a:	dd 24       	eor	r13, r13
    254c:	c2 01       	movw	r24, r4
    254e:	b1 01       	movw	r22, r2
    2550:	a6 01       	movw	r20, r12
    2552:	95 01       	movw	r18, r10
    2554:	0e 94 b9 18 	call	0x3172	; 0x3172 <__divmodsi4>
    2558:	88 24       	eor	r8, r8
    255a:	99 24       	eor	r9, r9
    255c:	66 0e       	add	r6, r22
    255e:	77 1e       	adc	r7, r23
    2560:	88 1e       	adc	r8, r24
    2562:	99 1e       	adc	r9, r25
    2564:	68 82       	st	Y, r6
    2566:	79 82       	std	Y+1, r7	; 0x01
    2568:	8a 82       	std	Y+2, r8	; 0x02
    256a:	9b 82       	std	Y+3, r9	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	1f 91       	pop	r17
    2572:	0f 91       	pop	r16
    2574:	ff 90       	pop	r15
    2576:	ef 90       	pop	r14
    2578:	df 90       	pop	r13
    257a:	cf 90       	pop	r12
    257c:	bf 90       	pop	r11
    257e:	af 90       	pop	r10
    2580:	9f 90       	pop	r9
    2582:	8f 90       	pop	r8
    2584:	7f 90       	pop	r7
    2586:	6f 90       	pop	r6
    2588:	5f 90       	pop	r5
    258a:	4f 90       	pop	r4
    258c:	3f 90       	pop	r3
    258e:	2f 90       	pop	r2
    2590:	08 95       	ret

00002592 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    2592:	40 e0       	ldi	r20, 0x00	; 0
    2594:	e0 91 43 01 	lds	r30, 0x0143
    2598:	f0 91 44 01 	lds	r31, 0x0144
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9c 01       	movw	r18, r24
    25a0:	54 e0       	ldi	r21, 0x04	; 4
    25a2:	22 0f       	add	r18, r18
    25a4:	33 1f       	adc	r19, r19
    25a6:	5a 95       	dec	r21
    25a8:	e1 f7       	brne	.-8      	; 0x25a2 <Timebase_DownCounter_SS_Expired+0x10>
    25aa:	28 0f       	add	r18, r24
    25ac:	39 1f       	adc	r19, r25
    25ae:	e2 0f       	add	r30, r18
    25b0:	f3 1f       	adc	r31, r19
    25b2:	ec 5b       	subi	r30, 0xBC	; 188
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 81       	ld	r24, Z
    25b8:	86 95       	lsr	r24
    25ba:	8f 70       	andi	r24, 0x0F	; 15
    25bc:	84 30       	cpi	r24, 0x04	; 4
    25be:	09 f4       	brne	.+2      	; 0x25c2 <Timebase_DownCounter_SS_Expired+0x30>
    25c0:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    25c2:	84 2f       	mov	r24, r20
    25c4:	08 95       	ret

000025c6 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    25c6:	e0 91 43 01 	lds	r30, 0x0143
    25ca:	f0 91 44 01 	lds	r31, 0x0144
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    25d0:	9c 01       	movw	r18, r24
    25d2:	64 e0       	ldi	r22, 0x04	; 4
    25d4:	22 0f       	add	r18, r18
    25d6:	33 1f       	adc	r19, r19
    25d8:	6a 95       	dec	r22
    25da:	e1 f7       	brne	.-8      	; 0x25d4 <Timebase_DownCounter_SS_Expired_Event+0xe>
    25dc:	28 0f       	add	r18, r24
    25de:	39 1f       	adc	r19, r25
    25e0:	e2 0f       	add	r30, r18
    25e2:	f3 1f       	adc	r31, r19
    25e4:	df 01       	movw	r26, r30
    25e6:	ac 5b       	subi	r26, 0xBC	; 188
    25e8:	bf 4f       	sbci	r27, 0xFF	; 255
    25ea:	8c 91       	ld	r24, X
    25ec:	86 95       	lsr	r24
    25ee:	8f 70       	andi	r24, 0x0F	; 15
    25f0:	84 30       	cpi	r24, 0x04	; 4
    25f2:	11 f0       	breq	.+4      	; 0x25f8 <Timebase_DownCounter_SS_Expired_Event+0x32>
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    25f8:	e7 5b       	subi	r30, 0xB7	; 183
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	10 82       	st	Z, r1
    25fe:	11 82       	std	Z+1, r1	; 0x01
    2600:	12 82       	std	Z+2, r1	; 0x02
    2602:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2604:	12 92       	st	-Z, r1
    2606:	12 92       	st	-Z, r1
    2608:	12 92       	st	-Z, r1
    260a:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    260c:	38 96       	adiw	r30, 0x08	; 8
    260e:	10 82       	st	Z, r1
    2610:	11 82       	std	Z+1, r1	; 0x01
    2612:	12 82       	std	Z+2, r1	; 0x02
    2614:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2616:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2618:	80 7e       	andi	r24, 0xE0	; 224
    261a:	8c 93       	st	X, r24
    261c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    261e:	08 95       	ret

00002620 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    2624:	c0 91 43 01 	lds	r28, 0x0143
    2628:	d0 91 44 01 	lds	r29, 0x0144
    262c:	28 2f       	mov	r18, r24
    262e:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2630:	f9 01       	movw	r30, r18
    2632:	a4 e0       	ldi	r26, 0x04	; 4
    2634:	ee 0f       	add	r30, r30
    2636:	ff 1f       	adc	r31, r31
    2638:	aa 95       	dec	r26
    263a:	e1 f7       	brne	.-8      	; 0x2634 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	ec 0f       	add	r30, r28
    2642:	fd 1f       	adc	r31, r29
    2644:	ec 5b       	subi	r30, 0xBC	; 188
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	80 81       	ld	r24, Z
    264a:	e4 54       	subi	r30, 0x44	; 68
    264c:	f0 40       	sbci	r31, 0x00	; 0
    264e:	80 fd       	sbrc	r24, 0
    2650:	24 c0       	rjmp	.+72     	; 0x269a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    2652:	e3 5b       	subi	r30, 0xB3	; 179
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	81 91       	ld	r24, Z+
    2658:	91 91       	ld	r25, Z+
    265a:	a1 91       	ld	r26, Z+
    265c:	b1 91       	ld	r27, Z+
    265e:	84 1b       	sub	r24, r20
    2660:	95 0b       	sbc	r25, r21
    2662:	a6 0b       	sbc	r26, r22
    2664:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2666:	b7 ff       	sbrs	r27, 7
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    266a:	10 82       	st	Z, r1
    266c:	11 82       	std	Z+1, r1	; 0x01
    266e:	12 82       	std	Z+2, r1	; 0x02
    2670:	13 82       	std	Z+3, r1	; 0x03
    2672:	04 c0       	rjmp	.+8      	; 0x267c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    2674:	80 83       	st	Z, r24
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	a2 83       	std	Z+2, r26	; 0x02
    267a:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    267c:	f9 01       	movw	r30, r18
    267e:	74 e0       	ldi	r23, 0x04	; 4
    2680:	ee 0f       	add	r30, r30
    2682:	ff 1f       	adc	r31, r31
    2684:	7a 95       	dec	r23
    2686:	e1 f7       	brne	.-8      	; 0x2680 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    2688:	e2 0f       	add	r30, r18
    268a:	f3 1f       	adc	r31, r19
    268c:	ec 0f       	add	r30, r28
    268e:	fd 1f       	adc	r31, r29
    2690:	ec 5b       	subi	r30, 0xBC	; 188
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	81 60       	ori	r24, 0x01	; 1
    2698:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	08 95       	ret

000026a0 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    26a0:	e0 91 43 01 	lds	r30, 0x0143
    26a4:	f0 91 44 01 	lds	r31, 0x0144
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    26aa:	9c 01       	movw	r18, r24
    26ac:	b4 e0       	ldi	r27, 0x04	; 4
    26ae:	22 0f       	add	r18, r18
    26b0:	33 1f       	adc	r19, r19
    26b2:	ba 95       	dec	r27
    26b4:	e1 f7       	brne	.-8      	; 0x26ae <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    26b6:	28 0f       	add	r18, r24
    26b8:	39 1f       	adc	r19, r25
    26ba:	e2 0f       	add	r30, r18
    26bc:	f3 1f       	adc	r31, r19
    26be:	df 01       	movw	r26, r30
    26c0:	af 5a       	subi	r26, 0xAF	; 175
    26c2:	bf 4f       	sbci	r27, 0xFF	; 255
    26c4:	e3 5b       	subi	r30, 0xB3	; 179
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	20 81       	ld	r18, Z
    26ca:	31 81       	ldd	r19, Z+1	; 0x01
    26cc:	42 81       	ldd	r20, Z+2	; 0x02
    26ce:	53 81       	ldd	r21, Z+3	; 0x03
    26d0:	8d 91       	ld	r24, X+
    26d2:	9d 91       	ld	r25, X+
    26d4:	0d 90       	ld	r0, X+
    26d6:	bc 91       	ld	r27, X
    26d8:	a0 2d       	mov	r26, r0
    26da:	28 1b       	sub	r18, r24
    26dc:	39 0b       	sbc	r19, r25
    26de:	4a 0b       	sbc	r20, r26
    26e0:	5b 0b       	sbc	r21, r27
    26e2:	57 ff       	sbrs	r21, 7
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	40 e0       	ldi	r20, 0x00	; 0
    26ec:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    26ee:	b9 01       	movw	r22, r18
    26f0:	ca 01       	movw	r24, r20
    26f2:	08 95       	ret

000026f4 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    26f8:	c0 91 43 01 	lds	r28, 0x0143
    26fc:	d0 91 44 01 	lds	r29, 0x0144
    2700:	68 2f       	mov	r22, r24
    2702:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2704:	fb 01       	movw	r30, r22
    2706:	44 e0       	ldi	r20, 0x04	; 4
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	4a 95       	dec	r20
    270e:	e1 f7       	brne	.-8      	; 0x2708 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    2710:	e6 0f       	add	r30, r22
    2712:	f7 1f       	adc	r31, r23
    2714:	ec 0f       	add	r30, r28
    2716:	fd 1f       	adc	r31, r29
    2718:	df 01       	movw	r26, r30
    271a:	af 5a       	subi	r26, 0xAF	; 175
    271c:	bf 4f       	sbci	r27, 0xFF	; 255
    271e:	e3 5b       	subi	r30, 0xB3	; 179
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	20 81       	ld	r18, Z
    2724:	31 81       	ldd	r19, Z+1	; 0x01
    2726:	42 81       	ldd	r20, Z+2	; 0x02
    2728:	53 81       	ldd	r21, Z+3	; 0x03
    272a:	8d 91       	ld	r24, X+
    272c:	9d 91       	ld	r25, X+
    272e:	0d 90       	ld	r0, X+
    2730:	bc 91       	ld	r27, X
    2732:	a0 2d       	mov	r26, r0
    2734:	28 1b       	sub	r18, r24
    2736:	39 0b       	sbc	r19, r25
    2738:	4a 0b       	sbc	r20, r26
    273a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    273c:	57 fd       	sbrc	r21, 7
    273e:	07 c0       	rjmp	.+14     	; 0x274e <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2740:	21 15       	cp	r18, r1
    2742:	31 05       	cpc	r19, r1
    2744:	41 05       	cpc	r20, r1
    2746:	51 05       	cpc	r21, r1
    2748:	11 f0       	breq	.+4      	; 0x274e <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	12 c0       	rjmp	.+36     	; 0x2772 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	cb 01       	movw	r24, r22
    2752:	34 e0       	ldi	r19, 0x04	; 4
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	3a 95       	dec	r19
    275a:	e1 f7       	brne	.-8      	; 0x2754 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    275c:	86 0f       	add	r24, r22
    275e:	97 1f       	adc	r25, r23
    2760:	c8 0f       	add	r28, r24
    2762:	d9 1f       	adc	r29, r25
    2764:	cc 5b       	subi	r28, 0xBC	; 188
    2766:	df 4f       	sbci	r29, 0xFF	; 255
    2768:	88 81       	ld	r24, Y
    276a:	80 ff       	sbrs	r24, 0
    276c:	21 e0       	ldi	r18, 0x01	; 1
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2772:	82 2f       	mov	r24, r18
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	08 95       	ret

0000277a <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    277a:	1f 93       	push	r17
    277c:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    277e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <Timebase_DownCounter_SS_Period_Value_Expired>
    2782:	81 30       	cpi	r24, 0x01	; 1
    2784:	11 f0       	breq	.+4      	; 0x278a <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	16 c0       	rjmp	.+44     	; 0x27b6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    278a:	e0 91 43 01 	lds	r30, 0x0143
    278e:	f0 91 44 01 	lds	r31, 0x0144
    2792:	21 2f       	mov	r18, r17
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	c9 01       	movw	r24, r18
    2798:	54 e0       	ldi	r21, 0x04	; 4
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	5a 95       	dec	r21
    27a0:	e1 f7       	brne	.-8      	; 0x279a <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    27a2:	82 0f       	add	r24, r18
    27a4:	93 1f       	adc	r25, r19
    27a6:	e8 0f       	add	r30, r24
    27a8:	f9 1f       	adc	r31, r25
    27aa:	ec 5b       	subi	r30, 0xBC	; 188
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	8e 7f       	andi	r24, 0xFE	; 254
    27b2:	80 83       	st	Z, r24
    27b4:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    27b6:	1f 91       	pop	r17
    27b8:	08 95       	ret

000027ba <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    27ba:	1f 93       	push	r17
    27bc:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    27be:	81 2f       	mov	r24, r17
    27c0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    27c4:	1f 5f       	subi	r17, 0xFF	; 255
    27c6:	1a 30       	cpi	r17, 0x0A	; 10
    27c8:	d1 f7       	brne	.-12     	; 0x27be <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    27ca:	1f 91       	pop	r17
    27cc:	08 95       	ret

000027ce <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    27ce:	40 91 43 01 	lds	r20, 0x0143
    27d2:	50 91 44 01 	lds	r21, 0x0144
    27d6:	da 01       	movw	r26, r20
    27d8:	ab 5b       	subi	r26, 0xBB	; 187
    27da:	bf 4f       	sbci	r27, 0xFF	; 255
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	14 96       	adiw	r26, 0x04	; 4
    27e2:	1d 92       	st	X+, r1
    27e4:	1d 92       	st	X+, r1
    27e6:	1d 92       	st	X+, r1
    27e8:	1c 92       	st	X, r1
    27ea:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    27ec:	1d 92       	st	X+, r1
    27ee:	1d 92       	st	X+, r1
    27f0:	1d 92       	st	X+, r1
    27f2:	1c 92       	st	X, r1
    27f4:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    27f6:	18 96       	adiw	r26, 0x08	; 8
    27f8:	1d 92       	st	X+, r1
    27fa:	1d 92       	st	X+, r1
    27fc:	1d 92       	st	X+, r1
    27fe:	1c 92       	st	X, r1
    2800:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2802:	f9 01       	movw	r30, r18
    2804:	64 e0       	ldi	r22, 0x04	; 4
    2806:	ee 0f       	add	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	6a 95       	dec	r22
    280c:	e1 f7       	brne	.-8      	; 0x2806 <Timebase_DownCounter_SS_Reset_All+0x38>
    280e:	e2 0f       	add	r30, r18
    2810:	f3 1f       	adc	r31, r19
    2812:	e4 0f       	add	r30, r20
    2814:	f5 1f       	adc	r31, r21
    2816:	ec 5b       	subi	r30, 0xBC	; 188
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    281c:	80 7e       	andi	r24, 0xE0	; 224
    281e:	80 83       	st	Z, r24
    2820:	2f 5f       	subi	r18, 0xFF	; 255
    2822:	3f 4f       	sbci	r19, 0xFF	; 255
    2824:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    2826:	2a 30       	cpi	r18, 0x0A	; 10
    2828:	31 05       	cpc	r19, r1
    282a:	d1 f6       	brne	.-76     	; 0x27e0 <Timebase_DownCounter_SS_Reset_All+0x12>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    282c:	08 95       	ret

0000282e <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    282e:	e0 91 43 01 	lds	r30, 0x0143
    2832:	f0 91 44 01 	lds	r31, 0x0144
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	2d e0       	ldi	r18, 0x0D	; 13
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	ac 01       	movw	r20, r24
    283e:	42 9f       	mul	r20, r18
    2840:	c0 01       	movw	r24, r0
    2842:	43 9f       	mul	r20, r19
    2844:	90 0d       	add	r25, r0
    2846:	52 9f       	mul	r21, r18
    2848:	90 0d       	add	r25, r0
    284a:	11 24       	eor	r1, r1
    284c:	e8 0f       	add	r30, r24
    284e:	f9 1f       	adc	r31, r25
    2850:	e2 51       	subi	r30, 0x12	; 18
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	80 81       	ld	r24, Z
    2856:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2858:	8f 70       	andi	r24, 0x0F	; 15
    285a:	08 95       	ret

0000285c <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    285c:	e0 91 43 01 	lds	r30, 0x0143
    2860:	f0 91 44 01 	lds	r31, 0x0144
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	2d e0       	ldi	r18, 0x0D	; 13
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	ac 01       	movw	r20, r24
    286c:	42 9f       	mul	r20, r18
    286e:	c0 01       	movw	r24, r0
    2870:	43 9f       	mul	r20, r19
    2872:	90 0d       	add	r25, r0
    2874:	52 9f       	mul	r21, r18
    2876:	90 0d       	add	r25, r0
    2878:	11 24       	eor	r1, r1
    287a:	e8 0f       	add	r30, r24
    287c:	f9 1f       	adc	r31, r25
    287e:	e2 51       	subi	r30, 0x12	; 18
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	6f 70       	andi	r22, 0x0F	; 15
    2884:	66 0f       	add	r22, r22
    2886:	80 81       	ld	r24, Z
    2888:	81 7e       	andi	r24, 0xE1	; 225
    288a:	86 2b       	or	r24, r22
    288c:	80 83       	st	Z, r24
}
    288e:	08 95       	ret

00002890 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    2890:	e0 91 43 01 	lds	r30, 0x0143
    2894:	f0 91 44 01 	lds	r31, 0x0144
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	2d e0       	ldi	r18, 0x0D	; 13
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	ac 01       	movw	r20, r24
    28a0:	42 9f       	mul	r20, r18
    28a2:	c0 01       	movw	r24, r0
    28a4:	43 9f       	mul	r20, r19
    28a6:	90 0d       	add	r25, r0
    28a8:	52 9f       	mul	r21, r18
    28aa:	90 0d       	add	r25, r0
    28ac:	11 24       	eor	r1, r1
    28ae:	e8 0f       	add	r30, r24
    28b0:	f9 1f       	adc	r31, r25
    28b2:	ed 50       	subi	r30, 0x0D	; 13
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	08 95       	ret

000028c0 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28c0:	e0 91 43 01 	lds	r30, 0x0143
    28c4:	f0 91 44 01 	lds	r31, 0x0144
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	2d e0       	ldi	r18, 0x0D	; 13
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	dc 01       	movw	r26, r24
    28d0:	a2 9f       	mul	r26, r18
    28d2:	c0 01       	movw	r24, r0
    28d4:	a3 9f       	mul	r26, r19
    28d6:	90 0d       	add	r25, r0
    28d8:	b2 9f       	mul	r27, r18
    28da:	90 0d       	add	r25, r0
    28dc:	11 24       	eor	r1, r1
    28de:	e8 0f       	add	r30, r24
    28e0:	f9 1f       	adc	r31, r25
    28e2:	ed 50       	subi	r30, 0x0D	; 13
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	40 83       	st	Z, r20
    28e8:	51 83       	std	Z+1, r21	; 0x01
    28ea:	62 83       	std	Z+2, r22	; 0x02
    28ec:	73 83       	std	Z+3, r23	; 0x03
}
    28ee:	08 95       	ret

000028f0 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    28f0:	e0 91 43 01 	lds	r30, 0x0143
    28f4:	f0 91 44 01 	lds	r31, 0x0144
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	2d e0       	ldi	r18, 0x0D	; 13
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	ac 01       	movw	r20, r24
    2900:	42 9f       	mul	r20, r18
    2902:	c0 01       	movw	r24, r0
    2904:	43 9f       	mul	r20, r19
    2906:	90 0d       	add	r25, r0
    2908:	52 9f       	mul	r21, r18
    290a:	90 0d       	add	r25, r0
    290c:	11 24       	eor	r1, r1
    290e:	e8 0f       	add	r30, r24
    2910:	f9 1f       	adc	r31, r25
    2912:	e1 51       	subi	r30, 0x11	; 17
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	08 95       	ret

00002920 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2920:	e0 91 43 01 	lds	r30, 0x0143
    2924:	f0 91 44 01 	lds	r31, 0x0144
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	2d e0       	ldi	r18, 0x0D	; 13
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	dc 01       	movw	r26, r24
    2930:	a2 9f       	mul	r26, r18
    2932:	c0 01       	movw	r24, r0
    2934:	a3 9f       	mul	r26, r19
    2936:	90 0d       	add	r25, r0
    2938:	b2 9f       	mul	r27, r18
    293a:	90 0d       	add	r25, r0
    293c:	11 24       	eor	r1, r1
    293e:	e8 0f       	add	r30, r24
    2940:	f9 1f       	adc	r31, r25
    2942:	e1 51       	subi	r30, 0x11	; 17
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	40 83       	st	Z, r20
    2948:	51 83       	std	Z+1, r21	; 0x01
    294a:	62 83       	std	Z+2, r22	; 0x02
    294c:	73 83       	std	Z+3, r23	; 0x03
}
    294e:	08 95       	ret

00002950 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    2950:	e0 91 43 01 	lds	r30, 0x0143
    2954:	f0 91 44 01 	lds	r31, 0x0144
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	2d e0       	ldi	r18, 0x0D	; 13
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	ac 01       	movw	r20, r24
    2960:	42 9f       	mul	r20, r18
    2962:	c0 01       	movw	r24, r0
    2964:	43 9f       	mul	r20, r19
    2966:	90 0d       	add	r25, r0
    2968:	52 9f       	mul	r21, r18
    296a:	90 0d       	add	r25, r0
    296c:	11 24       	eor	r1, r1
    296e:	e8 0f       	add	r30, r24
    2970:	f9 1f       	adc	r31, r25
    2972:	e9 50       	subi	r30, 0x09	; 9
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	60 81       	ld	r22, Z
    2978:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    297a:	82 81       	ldd	r24, Z+2	; 0x02
    297c:	93 81       	ldd	r25, Z+3	; 0x03
    297e:	08 95       	ret

00002980 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2980:	e0 91 43 01 	lds	r30, 0x0143
    2984:	f0 91 44 01 	lds	r31, 0x0144
    2988:	28 2f       	mov	r18, r24
    298a:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    298c:	77 ff       	sbrs	r23, 7
    298e:	13 c0       	rjmp	.+38     	; 0x29b6 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    2990:	8d e0       	ldi	r24, 0x0D	; 13
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	ac 01       	movw	r20, r24
    2996:	24 9f       	mul	r18, r20
    2998:	c0 01       	movw	r24, r0
    299a:	25 9f       	mul	r18, r21
    299c:	90 0d       	add	r25, r0
    299e:	34 9f       	mul	r19, r20
    29a0:	90 0d       	add	r25, r0
    29a2:	11 24       	eor	r1, r1
    29a4:	e8 0f       	add	r30, r24
    29a6:	f9 1f       	adc	r31, r25
    29a8:	e9 50       	subi	r30, 0x09	; 9
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	10 82       	st	Z, r1
    29ae:	11 82       	std	Z+1, r1	; 0x01
    29b0:	12 82       	std	Z+2, r1	; 0x02
    29b2:	13 82       	std	Z+3, r1	; 0x03
    29b4:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    29b6:	8d e0       	ldi	r24, 0x0D	; 13
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	dc 01       	movw	r26, r24
    29bc:	2a 9f       	mul	r18, r26
    29be:	c0 01       	movw	r24, r0
    29c0:	2b 9f       	mul	r18, r27
    29c2:	90 0d       	add	r25, r0
    29c4:	3a 9f       	mul	r19, r26
    29c6:	90 0d       	add	r25, r0
    29c8:	11 24       	eor	r1, r1
    29ca:	e8 0f       	add	r30, r24
    29cc:	f9 1f       	adc	r31, r25
    29ce:	e9 50       	subi	r30, 0x09	; 9
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	40 83       	st	Z, r20
    29d4:	51 83       	std	Z+1, r21	; 0x01
    29d6:	62 83       	std	Z+2, r22	; 0x02
    29d8:	73 83       	std	Z+3, r23	; 0x03
    29da:	08 95       	ret

000029dc <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    29dc:	e0 91 43 01 	lds	r30, 0x0143
    29e0:	f0 91 44 01 	lds	r31, 0x0144
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	2d e0       	ldi	r18, 0x0D	; 13
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	ac 01       	movw	r20, r24
    29ec:	42 9f       	mul	r20, r18
    29ee:	c0 01       	movw	r24, r0
    29f0:	43 9f       	mul	r20, r19
    29f2:	90 0d       	add	r25, r0
    29f4:	52 9f       	mul	r21, r18
    29f6:	90 0d       	add	r25, r0
    29f8:	11 24       	eor	r1, r1
    29fa:	e8 0f       	add	r30, r24
    29fc:	f9 1f       	adc	r31, r25
    29fe:	e2 51       	subi	r30, 0x12	; 18
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2a04:	81 70       	andi	r24, 0x01	; 1
    2a06:	08 95       	ret

00002a08 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2a08:	e0 91 43 01 	lds	r30, 0x0143
    2a0c:	f0 91 44 01 	lds	r31, 0x0144
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	2d e0       	ldi	r18, 0x0D	; 13
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	ac 01       	movw	r20, r24
    2a18:	42 9f       	mul	r20, r18
    2a1a:	c0 01       	movw	r24, r0
    2a1c:	43 9f       	mul	r20, r19
    2a1e:	90 0d       	add	r25, r0
    2a20:	52 9f       	mul	r21, r18
    2a22:	90 0d       	add	r25, r0
    2a24:	11 24       	eor	r1, r1
    2a26:	e8 0f       	add	r30, r24
    2a28:	f9 1f       	adc	r31, r25
    2a2a:	e2 51       	subi	r30, 0x12	; 18
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	81 60       	ori	r24, 0x01	; 1
    2a32:	80 83       	st	Z, r24
}
    2a34:	08 95       	ret

00002a36 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a36:	e0 91 43 01 	lds	r30, 0x0143
    2a3a:	f0 91 44 01 	lds	r31, 0x0144
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	2d e0       	ldi	r18, 0x0D	; 13
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	ac 01       	movw	r20, r24
    2a46:	42 9f       	mul	r20, r18
    2a48:	c0 01       	movw	r24, r0
    2a4a:	43 9f       	mul	r20, r19
    2a4c:	90 0d       	add	r25, r0
    2a4e:	52 9f       	mul	r21, r18
    2a50:	90 0d       	add	r25, r0
    2a52:	11 24       	eor	r1, r1
    2a54:	e8 0f       	add	r30, r24
    2a56:	f9 1f       	adc	r31, r25
    2a58:	e2 51       	subi	r30, 0x12	; 18
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	80 81       	ld	r24, Z
    2a5e:	8e 7f       	andi	r24, 0xFE	; 254
    2a60:	80 83       	st	Z, r24
}
    2a62:	08 95       	ret

00002a64 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a64:	e0 91 43 01 	lds	r30, 0x0143
    2a68:	f0 91 44 01 	lds	r31, 0x0144
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	2d e0       	ldi	r18, 0x0D	; 13
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	ac 01       	movw	r20, r24
    2a74:	42 9f       	mul	r20, r18
    2a76:	c0 01       	movw	r24, r0
    2a78:	43 9f       	mul	r20, r19
    2a7a:	90 0d       	add	r25, r0
    2a7c:	52 9f       	mul	r21, r18
    2a7e:	90 0d       	add	r25, r0
    2a80:	11 24       	eor	r1, r1
    2a82:	e8 0f       	add	r30, r24
    2a84:	f9 1f       	adc	r31, r25
    2a86:	e1 51       	subi	r30, 0x11	; 17
    2a88:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8a:	11 92       	st	Z+, r1
    2a8c:	11 92       	st	Z+, r1
    2a8e:	11 92       	st	Z+, r1
    2a90:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a92:	10 82       	st	Z, r1
    2a94:	11 82       	std	Z+1, r1	; 0x01
    2a96:	12 82       	std	Z+2, r1	; 0x02
    2a98:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2a9a:	35 97       	sbiw	r30, 0x05	; 5
    2a9c:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a9e:	80 7e       	andi	r24, 0xE0	; 224
    2aa0:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2aa2:	08 95       	ret

00002aa4 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2aa4:	e0 91 43 01 	lds	r30, 0x0143
    2aa8:	f0 91 44 01 	lds	r31, 0x0144
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	2d e0       	ldi	r18, 0x0D	; 13
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	42 9f       	mul	r20, r18
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	43 9f       	mul	r20, r19
    2aba:	90 0d       	add	r25, r0
    2abc:	52 9f       	mul	r21, r18
    2abe:	90 0d       	add	r25, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	e8 0f       	add	r30, r24
    2ac4:	f9 1f       	adc	r31, r25
    2ac6:	e1 51       	subi	r30, 0x11	; 17
    2ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aca:	11 92       	st	Z+, r1
    2acc:	11 92       	st	Z+, r1
    2ace:	11 92       	st	Z+, r1
    2ad0:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2ad2:	10 82       	st	Z, r1
    2ad4:	11 82       	std	Z+1, r1	; 0x01
    2ad6:	12 82       	std	Z+2, r1	; 0x02
    2ad8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2ada:	35 97       	sbiw	r30, 0x05	; 5
    2adc:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2ade:	80 7e       	andi	r24, 0xE0	; 224
    2ae0:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2ae2:	08 95       	ret

00002ae4 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2ae4:	e0 91 43 01 	lds	r30, 0x0143
    2ae8:	f0 91 44 01 	lds	r31, 0x0144
    2aec:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2aee:	2d e0       	ldi	r18, 0x0D	; 13
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	ac 01       	movw	r20, r24
    2af4:	42 9f       	mul	r20, r18
    2af6:	c0 01       	movw	r24, r0
    2af8:	43 9f       	mul	r20, r19
    2afa:	90 0d       	add	r25, r0
    2afc:	52 9f       	mul	r21, r18
    2afe:	90 0d       	add	r25, r0
    2b00:	11 24       	eor	r1, r1
    2b02:	e8 0f       	add	r30, r24
    2b04:	f9 1f       	adc	r31, r25
    2b06:	e2 51       	subi	r30, 0x12	; 18
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	90 81       	ld	r25, Z
    2b0c:	89 2f       	mov	r24, r25
    2b0e:	86 95       	lsr	r24
    2b10:	8f 70       	andi	r24, 0x0F	; 15
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	19 f0       	breq	.+6      	; 0x2b1c <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2b16:	91 7e       	andi	r25, 0xE1	; 225
    2b18:	92 60       	ori	r25, 0x02	; 2
    2b1a:	90 83       	st	Z, r25
    2b1c:	08 95       	ret

00002b1e <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2b1e:	e0 91 43 01 	lds	r30, 0x0143
    2b22:	f0 91 44 01 	lds	r31, 0x0144
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2b28:	2d e0       	ldi	r18, 0x0D	; 13
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	42 9f       	mul	r20, r18
    2b30:	c0 01       	movw	r24, r0
    2b32:	43 9f       	mul	r20, r19
    2b34:	90 0d       	add	r25, r0
    2b36:	52 9f       	mul	r21, r18
    2b38:	90 0d       	add	r25, r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	e8 0f       	add	r30, r24
    2b3e:	f9 1f       	adc	r31, r25
    2b40:	e2 51       	subi	r30, 0x12	; 18
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	90 81       	ld	r25, Z
    2b46:	89 2f       	mov	r24, r25
    2b48:	86 95       	lsr	r24
    2b4a:	8f 70       	andi	r24, 0x0F	; 15
    2b4c:	82 30       	cpi	r24, 0x02	; 2
    2b4e:	19 f0       	breq	.+6      	; 0x2b56 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2b50:	91 7e       	andi	r25, 0xE1	; 225
    2b52:	94 60       	ori	r25, 0x04	; 4
    2b54:	90 83       	st	Z, r25
    2b56:	08 95       	ret

00002b58 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2b5c:	a0 91 43 01 	lds	r26, 0x0143
    2b60:	b0 91 44 01 	lds	r27, 0x0144
    2b64:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2b66:	2d e0       	ldi	r18, 0x0D	; 13
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	82 9f       	mul	r24, r18
    2b6c:	f0 01       	movw	r30, r0
    2b6e:	83 9f       	mul	r24, r19
    2b70:	f0 0d       	add	r31, r0
    2b72:	92 9f       	mul	r25, r18
    2b74:	f0 0d       	add	r31, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	ea 0f       	add	r30, r26
    2b7a:	fb 1f       	adc	r31, r27
    2b7c:	ef 01       	movw	r28, r30
    2b7e:	c2 51       	subi	r28, 0x12	; 18
    2b80:	df 4f       	sbci	r29, 0xFF	; 255
    2b82:	88 81       	ld	r24, Y
    2b84:	86 95       	lsr	r24
    2b86:	8f 70       	andi	r24, 0x0F	; 15
    2b88:	e9 f4       	brne	.+58     	; 0x2bc4 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2b8a:	ed 50       	subi	r30, 0x0D	; 13
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	40 83       	st	Z, r20
    2b90:	51 83       	std	Z+1, r21	; 0x01
    2b92:	62 83       	std	Z+2, r22	; 0x02
    2b94:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2b96:	1a 96       	adiw	r26, 0x0a	; 10
    2b98:	8d 91       	ld	r24, X+
    2b9a:	9d 91       	ld	r25, X+
    2b9c:	0d 90       	ld	r0, X+
    2b9e:	bc 91       	ld	r27, X
    2ba0:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2ba2:	84 0f       	add	r24, r20
    2ba4:	95 1f       	adc	r25, r21
    2ba6:	a6 1f       	adc	r26, r22
    2ba8:	b7 1f       	adc	r27, r23
    2baa:	b2 93       	st	-Z, r27
    2bac:	a2 93       	st	-Z, r26
    2bae:	92 93       	st	-Z, r25
    2bb0:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2bb2:	98 81       	ld	r25, Y
    2bb4:	89 2f       	mov	r24, r25
    2bb6:	86 95       	lsr	r24
    2bb8:	8f 70       	andi	r24, 0x0F	; 15
    2bba:	81 30       	cpi	r24, 0x01	; 1
    2bbc:	19 f0       	breq	.+6      	; 0x2bc4 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2bbe:	91 7e       	andi	r25, 0xE1	; 225
    2bc0:	92 60       	ori	r25, 0x02	; 2
    2bc2:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	08 95       	ret

00002bca <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2bce:	e0 91 43 01 	lds	r30, 0x0143
    2bd2:	f0 91 44 01 	lds	r31, 0x0144
    2bd6:	a8 2f       	mov	r26, r24
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	2d e0       	ldi	r18, 0x0D	; 13
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	e9 01       	movw	r28, r18
    2be0:	ac 9f       	mul	r26, r28
    2be2:	90 01       	movw	r18, r0
    2be4:	ad 9f       	mul	r26, r29
    2be6:	30 0d       	add	r19, r0
    2be8:	bc 9f       	mul	r27, r28
    2bea:	30 0d       	add	r19, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	e2 0f       	add	r30, r18
    2bf0:	f3 1f       	adc	r31, r19
    2bf2:	e1 51       	subi	r30, 0x11	; 17
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	11 92       	st	Z+, r1
    2bf8:	11 92       	st	Z+, r1
    2bfa:	11 92       	st	Z+, r1
    2bfc:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2bfe:	10 82       	st	Z, r1
    2c00:	11 82       	std	Z+1, r1	; 0x01
    2c02:	12 82       	std	Z+2, r1	; 0x02
    2c04:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c06:	35 97       	sbiw	r30, 0x05	; 5
    2c08:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2c0a:	90 7e       	andi	r25, 0xE0	; 224
    2c0c:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2c0e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <Timebase_DownCounter_Set_Securely>
} 
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	08 95       	ret

00002c18 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2c20:	a0 91 43 01 	lds	r26, 0x0143
    2c24:	b0 91 44 01 	lds	r27, 0x0144
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	2d e0       	ldi	r18, 0x0D	; 13
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	82 9f       	mul	r24, r18
    2c30:	f0 01       	movw	r30, r0
    2c32:	83 9f       	mul	r24, r19
    2c34:	f0 0d       	add	r31, r0
    2c36:	92 9f       	mul	r25, r18
    2c38:	f0 0d       	add	r31, r0
    2c3a:	11 24       	eor	r1, r1
    2c3c:	ea 0f       	add	r30, r26
    2c3e:	fb 1f       	adc	r31, r27
    2c40:	8f 01       	movw	r16, r30
    2c42:	02 51       	subi	r16, 0x12	; 18
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	e8 01       	movw	r28, r16
    2c48:	88 81       	ld	r24, Y
    2c4a:	86 95       	lsr	r24
    2c4c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	69 f5       	brne	.+90     	; 0x2cac <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2c52:	1a 96       	adiw	r26, 0x0a	; 10
    2c54:	2d 91       	ld	r18, X+
    2c56:	3d 91       	ld	r19, X+
    2c58:	4d 91       	ld	r20, X+
    2c5a:	5c 91       	ld	r21, X
    2c5c:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    2c5e:	bf 01       	movw	r22, r30
    2c60:	61 51       	subi	r22, 0x11	; 17
    2c62:	7f 4f       	sbci	r23, 0xFF	; 255
    2c64:	eb 01       	movw	r28, r22
    2c66:	88 81       	ld	r24, Y
    2c68:	99 81       	ldd	r25, Y+1	; 0x01
    2c6a:	aa 81       	ldd	r26, Y+2	; 0x02
    2c6c:	bb 81       	ldd	r27, Y+3	; 0x03
    2c6e:	82 1b       	sub	r24, r18
    2c70:	93 0b       	sbc	r25, r19
    2c72:	a4 0b       	sbc	r26, r20
    2c74:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c76:	ed 50       	subi	r30, 0x0D	; 13
    2c78:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7a:	80 83       	st	Z, r24
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	a2 83       	std	Z+2, r26	; 0x02
    2c80:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2c82:	18 16       	cp	r1, r24
    2c84:	19 06       	cpc	r1, r25
    2c86:	1a 06       	cpc	r1, r26
    2c88:	1b 06       	cpc	r1, r27
    2c8a:	34 f1       	brlt	.+76     	; 0x2cd8 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2c8c:	db 01       	movw	r26, r22
    2c8e:	1d 92       	st	X+, r1
    2c90:	1d 92       	st	X+, r1
    2c92:	1d 92       	st	X+, r1
    2c94:	1c 92       	st	X, r1
    2c96:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c98:	10 82       	st	Z, r1
    2c9a:	11 82       	std	Z+1, r1	; 0x01
    2c9c:	12 82       	std	Z+2, r1	; 0x02
    2c9e:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2ca0:	e8 01       	movw	r28, r16
    2ca2:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2ca4:	80 7e       	andi	r24, 0xE0	; 224
    2ca6:	88 60       	ori	r24, 0x08	; 8
    2ca8:	88 83       	st	Y, r24
    2caa:	16 c0       	rjmp	.+44     	; 0x2cd8 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2cac:	82 30       	cpi	r24, 0x02	; 2
    2cae:	a1 f4       	brne	.+40     	; 0x2cd8 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2cb0:	1a 96       	adiw	r26, 0x0a	; 10
    2cb2:	8d 91       	ld	r24, X+
    2cb4:	9d 91       	ld	r25, X+
    2cb6:	0d 90       	ld	r0, X+
    2cb8:	bc 91       	ld	r27, X
    2cba:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2cbc:	ed 50       	subi	r30, 0x0D	; 13
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	20 81       	ld	r18, Z
    2cc2:	31 81       	ldd	r19, Z+1	; 0x01
    2cc4:	42 81       	ldd	r20, Z+2	; 0x02
    2cc6:	53 81       	ldd	r21, Z+3	; 0x03
    2cc8:	82 0f       	add	r24, r18
    2cca:	93 1f       	adc	r25, r19
    2ccc:	a4 1f       	adc	r26, r20
    2cce:	b5 1f       	adc	r27, r21
    2cd0:	b2 93       	st	-Z, r27
    2cd2:	a2 93       	st	-Z, r26
    2cd4:	92 93       	st	-Z, r25
    2cd6:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	08 95       	ret

00002ce2 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	e0 91 43 01 	lds	r30, 0x0143
    2ce8:	f0 91 44 01 	lds	r31, 0x0144
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	2d e0       	ldi	r18, 0x0D	; 13
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	62 9f       	mul	r22, r18
    2cf6:	c0 01       	movw	r24, r0
    2cf8:	63 9f       	mul	r22, r19
    2cfa:	90 0d       	add	r25, r0
    2cfc:	72 9f       	mul	r23, r18
    2cfe:	90 0d       	add	r25, r0
    2d00:	11 24       	eor	r1, r1
    2d02:	e8 0f       	add	r30, r24
    2d04:	f9 1f       	adc	r31, r25
    2d06:	e2 51       	subi	r30, 0x12	; 18
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	86 95       	lsr	r24
    2d0e:	8f 70       	andi	r24, 0x0F	; 15
    2d10:	84 30       	cpi	r24, 0x04	; 4
    2d12:	09 f4       	brne	.+2      	; 0x2d16 <Timebase_DownCounter_Expired+0x34>
    2d14:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2d16:	84 2f       	mov	r24, r20
    2d18:	08 95       	ret

00002d1a <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2d1a:	e0 91 43 01 	lds	r30, 0x0143
    2d1e:	f0 91 44 01 	lds	r31, 0x0144
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2d24:	2d e0       	ldi	r18, 0x0D	; 13
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	ac 01       	movw	r20, r24
    2d2a:	42 9f       	mul	r20, r18
    2d2c:	c0 01       	movw	r24, r0
    2d2e:	43 9f       	mul	r20, r19
    2d30:	90 0d       	add	r25, r0
    2d32:	52 9f       	mul	r21, r18
    2d34:	90 0d       	add	r25, r0
    2d36:	11 24       	eor	r1, r1
    2d38:	e8 0f       	add	r30, r24
    2d3a:	f9 1f       	adc	r31, r25
    2d3c:	df 01       	movw	r26, r30
    2d3e:	a2 51       	subi	r26, 0x12	; 18
    2d40:	bf 4f       	sbci	r27, 0xFF	; 255
    2d42:	8c 91       	ld	r24, X
    2d44:	86 95       	lsr	r24
    2d46:	8f 70       	andi	r24, 0x0F	; 15
    2d48:	84 30       	cpi	r24, 0x04	; 4
    2d4a:	11 f0       	breq	.+4      	; 0x2d50 <Timebase_DownCounter_Expired_Event+0x36>
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2d50:	e1 51       	subi	r30, 0x11	; 17
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	11 92       	st	Z+, r1
    2d56:	11 92       	st	Z+, r1
    2d58:	11 92       	st	Z+, r1
    2d5a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2d5c:	10 82       	st	Z, r1
    2d5e:	11 82       	std	Z+1, r1	; 0x01
    2d60:	12 82       	std	Z+2, r1	; 0x02
    2d62:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2d64:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d66:	80 7e       	andi	r24, 0xE0	; 224
    2d68:	8c 93       	st	X, r24
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2d6c:	08 95       	ret

00002d6e <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2d72:	c0 91 43 01 	lds	r28, 0x0143
    2d76:	d0 91 44 01 	lds	r29, 0x0144
    2d7a:	28 2f       	mov	r18, r24
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2d7e:	8d e0       	ldi	r24, 0x0D	; 13
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	28 9f       	mul	r18, r24
    2d84:	f0 01       	movw	r30, r0
    2d86:	29 9f       	mul	r18, r25
    2d88:	f0 0d       	add	r31, r0
    2d8a:	38 9f       	mul	r19, r24
    2d8c:	f0 0d       	add	r31, r0
    2d8e:	11 24       	eor	r1, r1
    2d90:	ec 0f       	add	r30, r28
    2d92:	fd 1f       	adc	r31, r29
    2d94:	e2 51       	subi	r30, 0x12	; 18
    2d96:	ff 4f       	sbci	r31, 0xFF	; 255
    2d98:	80 81       	ld	r24, Z
    2d9a:	ee 5e       	subi	r30, 0xEE	; 238
    2d9c:	f0 40       	sbci	r31, 0x00	; 0
    2d9e:	80 fd       	sbrc	r24, 0
    2da0:	25 c0       	rjmp	.+74     	; 0x2dec <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2da2:	ed 50       	subi	r30, 0x0D	; 13
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	81 91       	ld	r24, Z+
    2da8:	91 91       	ld	r25, Z+
    2daa:	a1 91       	ld	r26, Z+
    2dac:	b1 91       	ld	r27, Z+
    2dae:	84 1b       	sub	r24, r20
    2db0:	95 0b       	sbc	r25, r21
    2db2:	a6 0b       	sbc	r26, r22
    2db4:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2db6:	b7 ff       	sbrs	r27, 7
    2db8:	05 c0       	rjmp	.+10     	; 0x2dc4 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2dba:	10 82       	st	Z, r1
    2dbc:	11 82       	std	Z+1, r1	; 0x01
    2dbe:	12 82       	std	Z+2, r1	; 0x02
    2dc0:	13 82       	std	Z+3, r1	; 0x03
    2dc2:	04 c0       	rjmp	.+8      	; 0x2dcc <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2dc4:	80 83       	st	Z, r24
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	a2 83       	std	Z+2, r26	; 0x02
    2dca:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2dcc:	8d e0       	ldi	r24, 0x0D	; 13
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	28 9f       	mul	r18, r24
    2dd2:	f0 01       	movw	r30, r0
    2dd4:	29 9f       	mul	r18, r25
    2dd6:	f0 0d       	add	r31, r0
    2dd8:	38 9f       	mul	r19, r24
    2dda:	f0 0d       	add	r31, r0
    2ddc:	11 24       	eor	r1, r1
    2dde:	ec 0f       	add	r30, r28
    2de0:	fd 1f       	adc	r31, r29
    2de2:	e2 51       	subi	r30, 0x12	; 18
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	81 60       	ori	r24, 0x01	; 1
    2dea:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2dec:	df 91       	pop	r29
    2dee:	cf 91       	pop	r28
    2df0:	08 95       	ret

00002df2 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2df2:	e0 91 43 01 	lds	r30, 0x0143
    2df6:	f0 91 44 01 	lds	r31, 0x0144
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2dfc:	2d e0       	ldi	r18, 0x0D	; 13
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	ac 01       	movw	r20, r24
    2e02:	42 9f       	mul	r20, r18
    2e04:	c0 01       	movw	r24, r0
    2e06:	43 9f       	mul	r20, r19
    2e08:	90 0d       	add	r25, r0
    2e0a:	52 9f       	mul	r21, r18
    2e0c:	90 0d       	add	r25, r0
    2e0e:	11 24       	eor	r1, r1
    2e10:	e8 0f       	add	r30, r24
    2e12:	f9 1f       	adc	r31, r25
    2e14:	df 01       	movw	r26, r30
    2e16:	a9 50       	subi	r26, 0x09	; 9
    2e18:	bf 4f       	sbci	r27, 0xFF	; 255
    2e1a:	ed 50       	subi	r30, 0x0D	; 13
    2e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1e:	20 81       	ld	r18, Z
    2e20:	31 81       	ldd	r19, Z+1	; 0x01
    2e22:	42 81       	ldd	r20, Z+2	; 0x02
    2e24:	53 81       	ldd	r21, Z+3	; 0x03
    2e26:	8d 91       	ld	r24, X+
    2e28:	9d 91       	ld	r25, X+
    2e2a:	0d 90       	ld	r0, X+
    2e2c:	bc 91       	ld	r27, X
    2e2e:	a0 2d       	mov	r26, r0
    2e30:	28 1b       	sub	r18, r24
    2e32:	39 0b       	sbc	r19, r25
    2e34:	4a 0b       	sbc	r20, r26
    2e36:	5b 0b       	sbc	r21, r27
    2e38:	57 ff       	sbrs	r21, 7
    2e3a:	04 c0       	rjmp	.+8      	; 0x2e44 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2e44:	b9 01       	movw	r22, r18
    2e46:	ca 01       	movw	r24, r20
    2e48:	08 95       	ret

00002e4a <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2e4e:	c0 91 43 01 	lds	r28, 0x0143
    2e52:	d0 91 44 01 	lds	r29, 0x0144
    2e56:	68 2f       	mov	r22, r24
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2e5a:	8d e0       	ldi	r24, 0x0D	; 13
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	68 9f       	mul	r22, r24
    2e60:	f0 01       	movw	r30, r0
    2e62:	69 9f       	mul	r22, r25
    2e64:	f0 0d       	add	r31, r0
    2e66:	78 9f       	mul	r23, r24
    2e68:	f0 0d       	add	r31, r0
    2e6a:	11 24       	eor	r1, r1
    2e6c:	ec 0f       	add	r30, r28
    2e6e:	fd 1f       	adc	r31, r29
    2e70:	df 01       	movw	r26, r30
    2e72:	a9 50       	subi	r26, 0x09	; 9
    2e74:	bf 4f       	sbci	r27, 0xFF	; 255
    2e76:	ed 50       	subi	r30, 0x0D	; 13
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	20 81       	ld	r18, Z
    2e7c:	31 81       	ldd	r19, Z+1	; 0x01
    2e7e:	42 81       	ldd	r20, Z+2	; 0x02
    2e80:	53 81       	ldd	r21, Z+3	; 0x03
    2e82:	8d 91       	ld	r24, X+
    2e84:	9d 91       	ld	r25, X+
    2e86:	0d 90       	ld	r0, X+
    2e88:	bc 91       	ld	r27, X
    2e8a:	a0 2d       	mov	r26, r0
    2e8c:	28 1b       	sub	r18, r24
    2e8e:	39 0b       	sbc	r19, r25
    2e90:	4a 0b       	sbc	r20, r26
    2e92:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2e94:	57 fd       	sbrc	r21, 7
    2e96:	07 c0       	rjmp	.+14     	; 0x2ea6 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2e98:	21 15       	cp	r18, r1
    2e9a:	31 05       	cpc	r19, r1
    2e9c:	41 05       	cpc	r20, r1
    2e9e:	51 05       	cpc	r21, r1
    2ea0:	11 f0       	breq	.+4      	; 0x2ea6 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	14 c0       	rjmp	.+40     	; 0x2ece <Timebase_DownCounter_Period_Value_Expired+0x84>
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	8d e0       	ldi	r24, 0x0D	; 13
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	ac 01       	movw	r20, r24
    2eae:	64 9f       	mul	r22, r20
    2eb0:	c0 01       	movw	r24, r0
    2eb2:	65 9f       	mul	r22, r21
    2eb4:	90 0d       	add	r25, r0
    2eb6:	74 9f       	mul	r23, r20
    2eb8:	90 0d       	add	r25, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	c8 0f       	add	r28, r24
    2ebe:	d9 1f       	adc	r29, r25
    2ec0:	c2 51       	subi	r28, 0x12	; 18
    2ec2:	df 4f       	sbci	r29, 0xFF	; 255
    2ec4:	88 81       	ld	r24, Y
    2ec6:	80 ff       	sbrs	r24, 0
    2ec8:	21 e0       	ldi	r18, 0x01	; 1
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2ece:	82 2f       	mov	r24, r18
    2ed0:	df 91       	pop	r29
    2ed2:	cf 91       	pop	r28
    2ed4:	08 95       	ret

00002ed6 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2ed6:	1f 93       	push	r17
    2ed8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2eda:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <Timebase_DownCounter_Period_Value_Expired>
    2ede:	81 30       	cpi	r24, 0x01	; 1
    2ee0:	11 f0       	breq	.+4      	; 0x2ee6 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	18 c0       	rjmp	.+48     	; 0x2f16 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2ee6:	e0 91 43 01 	lds	r30, 0x0143
    2eea:	f0 91 44 01 	lds	r31, 0x0144
    2eee:	21 2f       	mov	r18, r17
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	8d e0       	ldi	r24, 0x0D	; 13
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	ac 01       	movw	r20, r24
    2ef8:	24 9f       	mul	r18, r20
    2efa:	c0 01       	movw	r24, r0
    2efc:	25 9f       	mul	r18, r21
    2efe:	90 0d       	add	r25, r0
    2f00:	34 9f       	mul	r19, r20
    2f02:	90 0d       	add	r25, r0
    2f04:	11 24       	eor	r1, r1
    2f06:	e8 0f       	add	r30, r24
    2f08:	f9 1f       	adc	r31, r25
    2f0a:	e2 51       	subi	r30, 0x12	; 18
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	8e 7f       	andi	r24, 0xFE	; 254
    2f12:	80 83       	st	Z, r24
    2f14:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2f16:	1f 91       	pop	r17
    2f18:	08 95       	ret

00002f1a <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    2f1a:	1f 93       	push	r17
    2f1c:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2f1e:	81 2f       	mov	r24, r17
    2f20:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    2f24:	1f 5f       	subi	r17, 0xFF	; 255
    2f26:	1a 30       	cpi	r17, 0x0A	; 10
    2f28:	d1 f7       	brne	.-12     	; 0x2f1e <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    2f2a:	1f 91       	pop	r17
    2f2c:	08 95       	ret

00002f2e <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2f2e:	40 91 43 01 	lds	r20, 0x0143
    2f32:	50 91 44 01 	lds	r21, 0x0144
    2f36:	da 01       	movw	r26, r20
    2f38:	a1 51       	subi	r26, 0x11	; 17
    2f3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2f40:	6d e0       	ldi	r22, 0x0D	; 13
    2f42:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2f44:	1d 92       	st	X+, r1
    2f46:	1d 92       	st	X+, r1
    2f48:	1d 92       	st	X+, r1
    2f4a:	1c 92       	st	X, r1
    2f4c:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2f4e:	14 96       	adiw	r26, 0x04	; 4
    2f50:	1d 92       	st	X+, r1
    2f52:	1d 92       	st	X+, r1
    2f54:	1d 92       	st	X+, r1
    2f56:	1c 92       	st	X, r1
    2f58:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2f5a:	26 9f       	mul	r18, r22
    2f5c:	f0 01       	movw	r30, r0
    2f5e:	27 9f       	mul	r18, r23
    2f60:	f0 0d       	add	r31, r0
    2f62:	36 9f       	mul	r19, r22
    2f64:	f0 0d       	add	r31, r0
    2f66:	11 24       	eor	r1, r1
    2f68:	e4 0f       	add	r30, r20
    2f6a:	f5 1f       	adc	r31, r21
    2f6c:	e2 51       	subi	r30, 0x12	; 18
    2f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f70:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2f72:	80 7e       	andi	r24, 0xE0	; 224
    2f74:	80 83       	st	Z, r24
    2f76:	2f 5f       	subi	r18, 0xFF	; 255
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    2f7c:	2a 30       	cpi	r18, 0x0A	; 10
    2f7e:	31 05       	cpc	r19, r1
    2f80:	09 f7       	brne	.-62     	; 0x2f44 <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    2f82:	08 95       	ret

00002f84 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2f84:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    2f88:	0e 94 e7 13 	call	0x27ce	; 0x27ce <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2f8c:	0e 94 97 17 	call	0x2f2e	; 0x2f2e <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2f90:	08 95       	ret

00002f92 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2f98:	0e 94 1c 03 	call	0x638	; 0x638 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2f9c:	c8 01       	movw	r24, r16
    2f9e:	0e 94 08 04 	call	0x810	; 0x810 <Timebase_Timer_Config>
  Timebase_Reset();
    2fa2:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Timebase_Reset>
}
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	08 95       	ret

00002fac <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2fac:	e0 91 43 01 	lds	r30, 0x0143
    2fb0:	f0 91 44 01 	lds	r31, 0x0144
    2fb4:	85 89       	ldd	r24, Z+21	; 0x15
    2fb6:	82 ff       	sbrs	r24, 2
    2fb8:	0b c0       	rjmp	.+22     	; 0x2fd0 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2fba:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    2fbe:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2fc2:	e0 91 43 01 	lds	r30, 0x0143
    2fc6:	f0 91 44 01 	lds	r31, 0x0144
    2fca:	85 89       	ldd	r24, Z+21	; 0x15
    2fcc:	8b 7f       	andi	r24, 0xFB	; 251
    2fce:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2fd0:	e0 91 43 01 	lds	r30, 0x0143
    2fd4:	f0 91 44 01 	lds	r31, 0x0144
    2fd8:	85 89       	ldd	r24, Z+21	; 0x15
    2fda:	80 ff       	sbrs	r24, 0
    2fdc:	0b c0       	rjmp	.+22     	; 0x2ff4 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2fde:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    2fe2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2fe6:	e0 91 43 01 	lds	r30, 0x0143
    2fea:	f0 91 44 01 	lds	r31, 0x0144
    2fee:	85 89       	ldd	r24, Z+21	; 0x15
    2ff0:	8e 7f       	andi	r24, 0xFE	; 254
    2ff2:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2ff4:	e0 91 43 01 	lds	r30, 0x0143
    2ff8:	f0 91 44 01 	lds	r31, 0x0144
    2ffc:	85 89       	ldd	r24, Z+21	; 0x15
    2ffe:	83 ff       	sbrs	r24, 3
    3000:	0b c0       	rjmp	.+22     	; 0x3018 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3002:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    3006:	0e 94 dd 13 	call	0x27ba	; 0x27ba <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    300a:	e0 91 43 01 	lds	r30, 0x0143
    300e:	f0 91 44 01 	lds	r31, 0x0144
    3012:	85 89       	ldd	r24, Z+21	; 0x15
    3014:	87 7f       	andi	r24, 0xF7	; 247
    3016:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    3018:	e0 91 43 01 	lds	r30, 0x0143
    301c:	f0 91 44 01 	lds	r31, 0x0144
    3020:	85 89       	ldd	r24, Z+21	; 0x15
    3022:	81 ff       	sbrs	r24, 1
    3024:	0b c0       	rjmp	.+22     	; 0x303c <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3026:	0e 94 0f 05 	call	0xa1e	; 0xa1e <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    302a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    302e:	e0 91 43 01 	lds	r30, 0x0143
    3032:	f0 91 44 01 	lds	r31, 0x0144
    3036:	85 89       	ldd	r24, Z+21	; 0x15
    3038:	8d 7f       	andi	r24, 0xFD	; 253
    303a:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    303c:	e0 91 43 01 	lds	r30, 0x0143
    3040:	f0 91 44 01 	lds	r31, 0x0144
    3044:	14 8a       	std	Z+20, r1	; 0x14
}
    3046:	08 95       	ret

00003048 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    3048:	e0 91 43 01 	lds	r30, 0x0143
    304c:	f0 91 44 01 	lds	r31, 0x0144
    3050:	86 85       	ldd	r24, Z+14	; 0x0e
    3052:	97 85       	ldd	r25, Z+15	; 0x0f
    3054:	01 96       	adiw	r24, 0x01	; 1
    3056:	97 87       	std	Z+15, r25	; 0x0f
    3058:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    305a:	85 89       	ldd	r24, Z+21	; 0x15
    305c:	84 60       	ori	r24, 0x04	; 4
    305e:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    3060:	85 89       	ldd	r24, Z+21	; 0x15
    3062:	88 60       	ori	r24, 0x08	; 8
    3064:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    3066:	26 85       	ldd	r18, Z+14	; 0x0e
    3068:	37 85       	ldd	r19, Z+15	; 0x0f
    306a:	81 81       	ldd	r24, Z+1	; 0x01
    306c:	92 81       	ldd	r25, Z+2	; 0x02
    306e:	28 17       	cp	r18, r24
    3070:	39 07       	cpc	r19, r25
    3072:	98 f0       	brcs	.+38     	; 0x309a <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    3074:	80 89       	ldd	r24, Z+16	; 0x10
    3076:	91 89       	ldd	r25, Z+17	; 0x11
    3078:	a2 89       	ldd	r26, Z+18	; 0x12
    307a:	b3 89       	ldd	r27, Z+19	; 0x13
    307c:	01 96       	adiw	r24, 0x01	; 1
    307e:	a1 1d       	adc	r26, r1
    3080:	b1 1d       	adc	r27, r1
    3082:	80 8b       	std	Z+16, r24	; 0x10
    3084:	91 8b       	std	Z+17, r25	; 0x11
    3086:	a2 8b       	std	Z+18, r26	; 0x12
    3088:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    308a:	17 86       	std	Z+15, r1	; 0x0f
    308c:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    308e:	85 89       	ldd	r24, Z+21	; 0x15
    3090:	81 60       	ori	r24, 0x01	; 1
    3092:	85 8b       	std	Z+21, r24	; 0x15
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    3094:	85 89       	ldd	r24, Z+21	; 0x15
    3096:	82 60       	ori	r24, 0x02	; 2
    3098:	85 8b       	std	Z+21, r24	; 0x15
    309a:	08 95       	ret

0000309c <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    309c:	1f 92       	push	r1
    309e:	0f 92       	push	r0
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	0f 92       	push	r0
    30a4:	11 24       	eor	r1, r1
    30a6:	2f 93       	push	r18
    30a8:	3f 93       	push	r19
    30aa:	4f 93       	push	r20
    30ac:	5f 93       	push	r21
    30ae:	6f 93       	push	r22
    30b0:	7f 93       	push	r23
    30b2:	8f 93       	push	r24
    30b4:	9f 93       	push	r25
    30b6:	af 93       	push	r26
    30b8:	bf 93       	push	r27
    30ba:	ef 93       	push	r30
    30bc:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    30be:	e0 91 43 01 	lds	r30, 0x0143
    30c2:	f0 91 44 01 	lds	r31, 0x0144
    30c6:	83 81       	ldd	r24, Z+3	; 0x03
    30c8:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    30ca:	0e 94 24 18 	call	0x3048	; 0x3048 <Timebase_ISR_Executables>
}
    30ce:	ff 91       	pop	r31
    30d0:	ef 91       	pop	r30
    30d2:	bf 91       	pop	r27
    30d4:	af 91       	pop	r26
    30d6:	9f 91       	pop	r25
    30d8:	8f 91       	pop	r24
    30da:	7f 91       	pop	r23
    30dc:	6f 91       	pop	r22
    30de:	5f 91       	pop	r21
    30e0:	4f 91       	pop	r20
    30e2:	3f 91       	pop	r19
    30e4:	2f 91       	pop	r18
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63
    30ea:	0f 90       	pop	r0
    30ec:	1f 90       	pop	r1
    30ee:	18 95       	reti

000030f0 <__mulsi3>:
    30f0:	62 9f       	mul	r22, r18
    30f2:	d0 01       	movw	r26, r0
    30f4:	73 9f       	mul	r23, r19
    30f6:	f0 01       	movw	r30, r0
    30f8:	82 9f       	mul	r24, r18
    30fa:	e0 0d       	add	r30, r0
    30fc:	f1 1d       	adc	r31, r1
    30fe:	64 9f       	mul	r22, r20
    3100:	e0 0d       	add	r30, r0
    3102:	f1 1d       	adc	r31, r1
    3104:	92 9f       	mul	r25, r18
    3106:	f0 0d       	add	r31, r0
    3108:	83 9f       	mul	r24, r19
    310a:	f0 0d       	add	r31, r0
    310c:	74 9f       	mul	r23, r20
    310e:	f0 0d       	add	r31, r0
    3110:	65 9f       	mul	r22, r21
    3112:	f0 0d       	add	r31, r0
    3114:	99 27       	eor	r25, r25
    3116:	72 9f       	mul	r23, r18
    3118:	b0 0d       	add	r27, r0
    311a:	e1 1d       	adc	r30, r1
    311c:	f9 1f       	adc	r31, r25
    311e:	63 9f       	mul	r22, r19
    3120:	b0 0d       	add	r27, r0
    3122:	e1 1d       	adc	r30, r1
    3124:	f9 1f       	adc	r31, r25
    3126:	bd 01       	movw	r22, r26
    3128:	cf 01       	movw	r24, r30
    312a:	11 24       	eor	r1, r1
    312c:	08 95       	ret

0000312e <__udivmodsi4>:
    312e:	a1 e2       	ldi	r26, 0x21	; 33
    3130:	1a 2e       	mov	r1, r26
    3132:	aa 1b       	sub	r26, r26
    3134:	bb 1b       	sub	r27, r27
    3136:	fd 01       	movw	r30, r26
    3138:	0d c0       	rjmp	.+26     	; 0x3154 <__udivmodsi4_ep>

0000313a <__udivmodsi4_loop>:
    313a:	aa 1f       	adc	r26, r26
    313c:	bb 1f       	adc	r27, r27
    313e:	ee 1f       	adc	r30, r30
    3140:	ff 1f       	adc	r31, r31
    3142:	a2 17       	cp	r26, r18
    3144:	b3 07       	cpc	r27, r19
    3146:	e4 07       	cpc	r30, r20
    3148:	f5 07       	cpc	r31, r21
    314a:	20 f0       	brcs	.+8      	; 0x3154 <__udivmodsi4_ep>
    314c:	a2 1b       	sub	r26, r18
    314e:	b3 0b       	sbc	r27, r19
    3150:	e4 0b       	sbc	r30, r20
    3152:	f5 0b       	sbc	r31, r21

00003154 <__udivmodsi4_ep>:
    3154:	66 1f       	adc	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	88 1f       	adc	r24, r24
    315a:	99 1f       	adc	r25, r25
    315c:	1a 94       	dec	r1
    315e:	69 f7       	brne	.-38     	; 0x313a <__udivmodsi4_loop>
    3160:	60 95       	com	r22
    3162:	70 95       	com	r23
    3164:	80 95       	com	r24
    3166:	90 95       	com	r25
    3168:	9b 01       	movw	r18, r22
    316a:	ac 01       	movw	r20, r24
    316c:	bd 01       	movw	r22, r26
    316e:	cf 01       	movw	r24, r30
    3170:	08 95       	ret

00003172 <__divmodsi4>:
    3172:	97 fb       	bst	r25, 7
    3174:	09 2e       	mov	r0, r25
    3176:	05 26       	eor	r0, r21
    3178:	0e d0       	rcall	.+28     	; 0x3196 <__divmodsi4_neg1>
    317a:	57 fd       	sbrc	r21, 7
    317c:	04 d0       	rcall	.+8      	; 0x3186 <__divmodsi4_neg2>
    317e:	d7 df       	rcall	.-82     	; 0x312e <__udivmodsi4>
    3180:	0a d0       	rcall	.+20     	; 0x3196 <__divmodsi4_neg1>
    3182:	00 1c       	adc	r0, r0
    3184:	38 f4       	brcc	.+14     	; 0x3194 <__divmodsi4_exit>

00003186 <__divmodsi4_neg2>:
    3186:	50 95       	com	r21
    3188:	40 95       	com	r20
    318a:	30 95       	com	r19
    318c:	21 95       	neg	r18
    318e:	3f 4f       	sbci	r19, 0xFF	; 255
    3190:	4f 4f       	sbci	r20, 0xFF	; 255
    3192:	5f 4f       	sbci	r21, 0xFF	; 255

00003194 <__divmodsi4_exit>:
    3194:	08 95       	ret

00003196 <__divmodsi4_neg1>:
    3196:	f6 f7       	brtc	.-4      	; 0x3194 <__divmodsi4_exit>
    3198:	90 95       	com	r25
    319a:	80 95       	com	r24
    319c:	70 95       	com	r23
    319e:	61 95       	neg	r22
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	8f 4f       	sbci	r24, 0xFF	; 255
    31a4:	9f 4f       	sbci	r25, 0xFF	; 255
    31a6:	08 95       	ret

000031a8 <_exit>:
    31a8:	f8 94       	cli

000031aa <__stop_program>:
    31aa:	ff cf       	rjmp	.-2      	; 0x31aa <__stop_program>
