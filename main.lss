
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001d70  00001e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  0080011a  0080011a  00001e1e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e57  00000000  00000000  00001e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030a9  00000000  00000000  00002cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d0  00000000  00000000  00005d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018f9  00000000  00000000  0000634e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  00007c48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000010c3  00000000  00000000  000082f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011c6  00000000  00000000  000093bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000a581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 1c 0e 	jmp	0x1c38	; 0x1c38 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 38       	cpi	r26, 0x82	; 130
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 b6 0e 	jmp	0x1d6c	; 0x1d6c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <Timebase_DownCounter_SS_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <Timebase_Timer_Await_SubSeconds>
	UART_Transmit_Text("Timebase\r\n");
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     120:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     122:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     132:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     13c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     13e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     19e:	20 93 c4 00 	sts	0x00C4, r18
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
}
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
}
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
  sei();
     1d2:	78 94       	sei
}
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1d6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1e0:	90 93 c6 00 	sts	0x00C6, r25
}
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1f0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
    val=UDR0;
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     220:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     22e:	80 91 24 01 	lds	r24, 0x0124
}
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     234:	10 92 24 01 	sts	0x0124, r1
}
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     29c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2d4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     34a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3ba:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3be:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3fe:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
      i++;
     440:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     44c:	b0 92 23 01 	sts	0x0123, r11
  }
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     47c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
  UDR0=val;
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
}
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
}
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     50a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5e0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
  sei();
     5e8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSeconds = 0;
     62c:	10 92 54 01 	sts	0x0154, r1
     630:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     634:	10 92 55 01 	sts	0x0155, r1
     638:	10 92 56 01 	sts	0x0156, r1
     63c:	10 92 57 01 	sts	0x0157, r1
     640:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     644:	10 92 4f 01 	sts	0x014F, r1
     648:	10 92 50 01 	sts	0x0150, r1
     64c:	10 92 51 01 	sts	0x0151, r1
     650:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     654:	10 92 59 01 	sts	0x0159, r1
     658:	10 92 5a 01 	sts	0x015A, r1
     65c:	10 92 5b 01 	sts	0x015B, r1
     660:	10 92 5c 01 	sts	0x015C, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     664:	10 92 5d 01 	sts	0x015D, r1
     668:	10 92 5e 01 	sts	0x015E, r1
     66c:	10 92 5f 01 	sts	0x015F, r1
     670:	10 92 60 01 	sts	0x0160, r1
	Timebase->Time.Status = 0;
     674:	10 92 61 01 	sts	0x0161, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     678:	10 92 62 01 	sts	0x0162, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     67c:	10 92 63 01 	sts	0x0163, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     680:	10 92 75 01 	sts	0x0175, r1
    Timebase->DownCounter[i].EndValue = 0;
     684:	10 92 76 01 	sts	0x0176, r1
     688:	10 92 77 01 	sts	0x0177, r1
     68c:	10 92 78 01 	sts	0x0178, r1
     690:	10 92 79 01 	sts	0x0179, r1
    Timebase->DownCounter[i].Value = 0;
     694:	10 92 7a 01 	sts	0x017A, r1
     698:	10 92 7b 01 	sts	0x017B, r1
     69c:	10 92 7c 01 	sts	0x017C, r1
     6a0:	10 92 7d 01 	sts	0x017D, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     6a4:	10 92 7e 01 	sts	0x017E, r1
     6a8:	10 92 7f 01 	sts	0x017F, r1
     6ac:	10 92 80 01 	sts	0x0180, r1
     6b0:	10 92 81 01 	sts	0x0181, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     6b4:	10 92 64 01 	sts	0x0164, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     6b8:	10 92 65 01 	sts	0x0165, r1
     6bc:	10 92 66 01 	sts	0x0166, r1
     6c0:	10 92 67 01 	sts	0x0167, r1
     6c4:	10 92 68 01 	sts	0x0168, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     6c8:	10 92 69 01 	sts	0x0169, r1
     6cc:	10 92 6a 01 	sts	0x016A, r1
     6d0:	10 92 6b 01 	sts	0x016B, r1
     6d4:	10 92 6c 01 	sts	0x016C, r1
    Timebase->DownCounterSS[i].Value = 0;
     6d8:	10 92 6d 01 	sts	0x016D, r1
     6dc:	10 92 6e 01 	sts	0x016E, r1
     6e0:	10 92 6f 01 	sts	0x016F, r1
     6e4:	10 92 70 01 	sts	0x0170, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     6e8:	10 92 71 01 	sts	0x0171, r1
     6ec:	10 92 72 01 	sts	0x0172, r1
     6f0:	10 92 73 01 	sts	0x0173, r1
     6f4:	10 92 74 01 	sts	0x0174, r1
  }
  #endif
  
}
     6f8:	08 95       	ret

000006fa <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
     70c:	0f 93       	push	r16
     70e:	1f 93       	push	r17
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	2a 97       	sbiw	r28, 0x0a	; 10
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     726:	c0 90 49 01 	lds	r12, 0x0149
     72a:	d0 90 4a 01 	lds	r13, 0x014A
     72e:	f6 01       	movw	r30, r12
     730:	80 81       	ld	r24, Z
     732:	80 ff       	sbrs	r24, 0
     734:	31 c0       	rjmp	.+98     	; 0x798 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     736:	01 30       	cpi	r16, 0x01	; 1
     738:	11 05       	cpc	r17, r1
     73a:	11 f4       	brne	.+4      	; 0x740 <Timebase_Timer_Config+0x46>
     73c:	96 e0       	ldi	r25, 0x06	; 6
     73e:	19 c0       	rjmp	.+50     	; 0x772 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     740:	02 30       	cpi	r16, 0x02	; 2
     742:	11 05       	cpc	r17, r1
     744:	11 f4       	brne	.+4      	; 0x74a <Timebase_Timer_Config+0x50>
     746:	95 e0       	ldi	r25, 0x05	; 5
     748:	14 c0       	rjmp	.+40     	; 0x772 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     74a:	04 30       	cpi	r16, 0x04	; 4
     74c:	11 05       	cpc	r17, r1
     74e:	11 f4       	brne	.+4      	; 0x754 <Timebase_Timer_Config+0x5a>
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	0f c0       	rjmp	.+30     	; 0x772 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     754:	08 30       	cpi	r16, 0x08	; 8
     756:	11 05       	cpc	r17, r1
     758:	11 f4       	brne	.+4      	; 0x75e <Timebase_Timer_Config+0x64>
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	0a c0       	rjmp	.+20     	; 0x772 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     75e:	00 31       	cpi	r16, 0x10	; 16
     760:	11 05       	cpc	r17, r1
     762:	11 f4       	brne	.+4      	; 0x768 <Timebase_Timer_Config+0x6e>
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	05 c0       	rjmp	.+10     	; 0x772 <Timebase_Timer_Config+0x78>
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	00 32       	cpi	r16, 0x20	; 32
     76c:	11 05       	cpc	r17, r1
     76e:	09 f4       	brne	.+2      	; 0x772 <Timebase_Timer_Config+0x78>
     770:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     772:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     774:	84 b7       	in	r24, 0x34	; 52
     776:	87 7f       	andi	r24, 0xF7	; 247
     778:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     77a:	80 91 60 00 	lds	r24, 0x0060
     77e:	80 68       	ori	r24, 0x80	; 128
     780:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     784:	80 91 60 00 	lds	r24, 0x0060
     788:	88 61       	ori	r24, 0x18	; 24
     78a:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     78e:	90 64       	ori	r25, 0x40	; 64
     790:	90 93 60 00 	sts	0x0060, r25
    sei();
     794:	78 94       	sei
     796:	67 c0       	rjmp	.+206    	; 0x866 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     798:	81 fd       	sbrc	r24, 1
     79a:	65 c0       	rjmp	.+202    	; 0x866 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     79c:	82 ff       	sbrs	r24, 2
     79e:	63 c0       	rjmp	.+198    	; 0x866 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     7a0:	de 01       	movw	r26, r28
     7a2:	11 96       	adiw	r26, 0x01	; 1
     7a4:	e0 e1       	ldi	r30, 0x10	; 16
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	8a e0       	ldi	r24, 0x0A	; 10
     7aa:	01 90       	ld	r0, Z+
     7ac:	0d 92       	st	X+, r0
     7ae:	81 50       	subi	r24, 0x01	; 1
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     7b2:	98 01       	movw	r18, r16
     7b4:	40 e0       	ldi	r20, 0x00	; 0
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	60 e0       	ldi	r22, 0x00	; 0
     7ba:	7b e1       	ldi	r23, 0x1B	; 27
     7bc:	87 eb       	ldi	r24, 0xB7	; 183
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
     7c4:	72 2e       	mov	r7, r18
     7c6:	83 2e       	mov	r8, r19
     7c8:	94 2e       	mov	r9, r20
     7ca:	e5 2e       	mov	r14, r21
     7cc:	5e 01       	movw	r10, r28
     7ce:	08 94       	sec
     7d0:	a1 1c       	adc	r10, r1
     7d2:	b1 1c       	adc	r11, r1
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	9c 01       	movw	r18, r24
     7da:	ad 01       	movw	r20, r26
     7dc:	ff 24       	eor	r15, r15
     7de:	14 c0       	rjmp	.+40     	; 0x808 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     7e0:	f5 01       	movw	r30, r10
     7e2:	21 91       	ld	r18, Z+
     7e4:	31 91       	ld	r19, Z+
     7e6:	5f 01       	movw	r10, r30
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	50 e0       	ldi	r21, 0x00	; 0
     7ec:	67 2d       	mov	r22, r7
     7ee:	78 2d       	mov	r23, r8
     7f0:	89 2d       	mov	r24, r9
     7f2:	9e 2d       	mov	r25, r14
     7f4:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
     7f8:	c9 01       	movw	r24, r18
     7fa:	da 01       	movw	r26, r20
     7fc:	9c 01       	movw	r18, r24
     7fe:	ad 01       	movw	r20, r26
	  clock_div_index++;
     800:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     802:	f5 e0       	ldi	r31, 0x05	; 5
     804:	ff 16       	cp	r15, r31
     806:	31 f0       	breq	.+12     	; 0x814 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     808:	2f 3f       	cpi	r18, 0xFF	; 255
     80a:	31 05       	cpc	r19, r1
     80c:	41 05       	cpc	r20, r1
     80e:	51 05       	cpc	r21, r1
     810:	09 f0       	breq	.+2      	; 0x814 <Timebase_Timer_Config+0x11a>
     812:	34 f7       	brge	.-52     	; 0x7e0 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     814:	8f 2d       	mov	r24, r15
     816:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     818:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     81a:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     81c:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     820:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     822:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     824:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     826:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     828:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     82a:	88 23       	and	r24, r24
     82c:	11 f4       	brne	.+4      	; 0x832 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	0f c0       	rjmp	.+30     	; 0x850 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     832:	81 30       	cpi	r24, 0x01	; 1
     834:	11 f4       	brne	.+4      	; 0x83a <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	0b c0       	rjmp	.+22     	; 0x850 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	11 f4       	brne	.+4      	; 0x842 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	07 c0       	rjmp	.+14     	; 0x850 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     842:	83 30       	cpi	r24, 0x03	; 3
     844:	11 f4       	brne	.+4      	; 0x84a <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     846:	84 e0       	ldi	r24, 0x04	; 4
     848:	03 c0       	rjmp	.+6      	; 0x850 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     84a:	84 30       	cpi	r24, 0x04	; 4
     84c:	11 f4       	brne	.+4      	; 0x852 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     84e:	85 e0       	ldi	r24, 0x05	; 5
     850:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     852:	82 2f       	mov	r24, r18
     854:	80 95       	com	r24
     856:	f6 01       	movw	r30, r12
     858:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     85a:	83 81       	ldd	r24, Z+3	; 0x03
     85c:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 6e 00 	sts	0x006E, r24
    sei();
     864:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     866:	f6 01       	movw	r30, r12
     868:	12 83       	std	Z+2, r17	; 0x02
     86a:	01 83       	std	Z+1, r16	; 0x01
}
     86c:	2a 96       	adiw	r28, 0x0a	; 10
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	cf 91       	pop	r28
     87a:	df 91       	pop	r29
     87c:	1f 91       	pop	r17
     87e:	0f 91       	pop	r16
     880:	ff 90       	pop	r15
     882:	ef 90       	pop	r14
     884:	df 90       	pop	r13
     886:	cf 90       	pop	r12
     888:	bf 90       	pop	r11
     88a:	af 90       	pop	r10
     88c:	9f 90       	pop	r9
     88e:	8f 90       	pop	r8
     890:	7f 90       	pop	r7
     892:	08 95       	ret

00000894 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     894:	f8 94       	cli
}
     896:	08 95       	ret

00000898 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     898:	78 94       	sei
}
     89a:	08 95       	ret

0000089c <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     89c:	e0 91 49 01 	lds	r30, 0x0149
     8a0:	f0 91 4a 01 	lds	r31, 0x014A
     8a4:	80 8d       	ldd	r24, Z+24	; 0x18
}
     8a6:	08 95       	ret

000008a8 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8a8:	e0 91 49 01 	lds	r30, 0x0149
     8ac:	f0 91 4a 01 	lds	r31, 0x014A
     8b0:	80 8d       	ldd	r24, Z+24	; 0x18
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     8b2:	8f 33       	cpi	r24, 0x3F	; 63
     8b4:	18 f4       	brcc	.+6      	; 0x8bc <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     8b6:	80 8d       	ldd	r24, Z+24	; 0x18
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 8f       	std	Z+24, r24	; 0x18
     8bc:	08 95       	ret

000008be <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8be:	e0 91 49 01 	lds	r30, 0x0149
     8c2:	f0 91 4a 01 	lds	r31, 0x014A
     8c6:	80 8d       	ldd	r24, Z+24	; 0x18
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8c8:	88 23       	and	r24, r24
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8cc:	80 8d       	ldd	r24, Z+24	; 0x18
     8ce:	81 50       	subi	r24, 0x01	; 1
     8d0:	80 8f       	std	Z+24, r24	; 0x18
     8d2:	08 95       	ret

000008d4 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8d4:	e0 91 49 01 	lds	r30, 0x0149
     8d8:	f0 91 4a 01 	lds	r31, 0x014A
     8dc:	10 8e       	std	Z+24, r1	; 0x18
}
     8de:	08 95       	ret

000008e0 <Timebase_Timer_Get_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     8e0:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     8e2:	e0 91 49 01 	lds	r30, 0x0149
     8e6:	f0 91 4a 01 	lds	r31, 0x014A
     8ea:	20 85       	ldd	r18, Z+8	; 0x08
     8ec:	31 85       	ldd	r19, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     8ee:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_ss;
  #else
  return Timebase->Time.SubSeconds;
  #endif
}
     8f0:	c9 01       	movw	r24, r18
     8f2:	08 95       	ret

000008f4 <Timebase_Timer_Get_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     8f4:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     8f6:	e0 91 49 01 	lds	r30, 0x0149
     8fa:	f0 91 4a 01 	lds	r31, 0x014A
     8fe:	22 85       	ldd	r18, Z+10	; 0x0a
     900:	33 85       	ldd	r19, Z+11	; 0x0b
     902:	44 85       	ldd	r20, Z+12	; 0x0c
     904:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     906:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_s;
  #else
  Timebase->Time.Seconds;
  #endif
}
     908:	b9 01       	movw	r22, r18
     90a:	ca 01       	movw	r24, r20
     90c:	08 95       	ret

0000090e <Timebase_Timer_Set_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     90e:	f8 94       	cli
}

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.SubSeconds = value;
     910:	e0 91 49 01 	lds	r30, 0x0149
     914:	f0 91 4a 01 	lds	r31, 0x014A
     918:	91 87       	std	Z+9, r25	; 0x09
     91a:	80 87       	std	Z+8, r24	; 0x08
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     91c:	78 94       	sei
  Timebase->Time.SubSeconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.SubSeconds = value;
  #endif
}
     91e:	08 95       	ret

00000920 <Timebase_Timer_Set_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     920:	f8 94       	cli
}

void Timebase_Timer_Set_Seconds(int32_t value){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.Seconds = value;
     922:	e0 91 49 01 	lds	r30, 0x0149
     926:	f0 91 4a 01 	lds	r31, 0x014A
     92a:	62 87       	std	Z+10, r22	; 0x0a
     92c:	73 87       	std	Z+11, r23	; 0x0b
     92e:	84 87       	std	Z+12, r24	; 0x0c
     930:	95 87       	std	Z+13, r25	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     932:	78 94       	sei
  Timebase->Time.Seconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.Seconds = value;
  #endif
}
     934:	08 95       	ret

00000936 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     936:	6f 92       	push	r6
     938:	7f 92       	push	r7
     93a:	8f 92       	push	r8
     93c:	9f 92       	push	r9
     93e:	af 92       	push	r10
     940:	bf 92       	push	r11
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     954:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     956:	c0 91 49 01 	lds	r28, 0x0149
     95a:	d0 91 4a 01 	lds	r29, 0x014A
     95e:	e8 84       	ldd	r14, Y+8	; 0x08
     960:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     962:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     964:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     966:	2a 85       	ldd	r18, Y+10	; 0x0a
     968:	3b 85       	ldd	r19, Y+11	; 0x0b
     96a:	4c 85       	ldd	r20, Y+12	; 0x0c
     96c:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     96e:	78 94       	sei
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     970:	69 81       	ldd	r22, Y+1	; 0x01
     972:	7a 81       	ldd	r23, Y+2	; 0x02
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsi3>
     97c:	3b 01       	movw	r6, r22
     97e:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	6e 0c       	add	r6, r14
     986:	7f 1c       	adc	r7, r15
     988:	80 1e       	adc	r8, r16
     98a:	91 1e       	adc	r9, r17
  smpl_val += value;
     98c:	cc 24       	eor	r12, r12
     98e:	dd 24       	eor	r13, r13
     990:	6a 0c       	add	r6, r10
     992:	7b 1c       	adc	r7, r11
     994:	8c 1c       	adc	r8, r12
     996:	9d 1c       	adc	r9, r13
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	16 c0       	rjmp	.+44     	; 0x9ce <Timebase_Timer_Delay_SubSeconds+0x98>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9a2:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     9a4:	e8 84       	ldd	r14, Y+8	; 0x08
     9a6:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9a8:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9aa:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9ac:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ae:	3b 85       	ldd	r19, Y+11	; 0x0b
     9b0:	4c 85       	ldd	r20, Y+12	; 0x0c
     9b2:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9b4:	78 94       	sei
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     9b6:	69 81       	ldd	r22, Y+1	; 0x01
     9b8:	7a 81       	ldd	r23, Y+2	; 0x02
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsi3>
	curr_val += curr_ss;
     9c2:	00 e0       	ldi	r16, 0x00	; 0
     9c4:	10 e0       	ldi	r17, 0x00	; 0
     9c6:	6e 0d       	add	r22, r14
     9c8:	7f 1d       	adc	r23, r15
     9ca:	80 1f       	adc	r24, r16
     9cc:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     9ce:	66 15       	cp	r22, r6
     9d0:	77 05       	cpc	r23, r7
     9d2:	88 05       	cpc	r24, r8
     9d4:	99 05       	cpc	r25, r9
     9d6:	2c f3       	brlt	.-54     	; 0x9a2 <Timebase_Timer_Delay_SubSeconds+0x6c>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	7f 90       	pop	r7
     9f2:	6f 90       	pop	r6
     9f4:	08 95       	ret

000009f6 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     9f6:	bc 01       	movw	r22, r24

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     9f8:	e0 91 49 01 	lds	r30, 0x0149
     9fc:	f0 91 4a 01 	lds	r31, 0x014A

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a00:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a02:	80 85       	ldd	r24, Z+8	; 0x08
     a04:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a06:	78 94       	sei
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     a08:	24 81       	ldd	r18, Z+4	; 0x04
     a0a:	35 81       	ldd	r19, Z+5	; 0x05
     a0c:	46 81       	ldd	r20, Z+6	; 0x06
     a0e:	57 81       	ldd	r21, Z+7	; 0x07
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	82 17       	cp	r24, r18
     a16:	93 07       	cpc	r25, r19
     a18:	a4 07       	cpc	r26, r20
     a1a:	b5 07       	cpc	r27, r21
     a1c:	89 f7       	brne	.-30     	; 0xa00 <Timebase_Timer_Await_SubSeconds+0xa>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a1e:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a20:	80 85       	ldd	r24, Z+8	; 0x08
     a22:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a24:	78 94       	sei


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     a26:	86 0f       	add	r24, r22
     a28:	97 1f       	adc	r25, r23
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	84 83       	std	Z+4, r24	; 0x04
     a30:	95 83       	std	Z+5, r25	; 0x05
     a32:	a6 83       	std	Z+6, r26	; 0x06
     a34:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     a36:	24 81       	ldd	r18, Z+4	; 0x04
     a38:	35 81       	ldd	r19, Z+5	; 0x05
     a3a:	46 81       	ldd	r20, Z+6	; 0x06
     a3c:	57 81       	ldd	r21, Z+7	; 0x07
     a3e:	81 81       	ldd	r24, Z+1	; 0x01
     a40:	92 81       	ldd	r25, Z+2	; 0x02
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	4a 07       	cpc	r20, r26
     a4c:	5b 07       	cpc	r21, r27
     a4e:	84 f0       	brlt	.+32     	; 0xa70 <Timebase_Timer_Await_SubSeconds+0x7a>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     a50:	24 81       	ldd	r18, Z+4	; 0x04
     a52:	35 81       	ldd	r19, Z+5	; 0x05
     a54:	46 81       	ldd	r20, Z+6	; 0x06
     a56:	57 81       	ldd	r21, Z+7	; 0x07
     a58:	81 81       	ldd	r24, Z+1	; 0x01
     a5a:	92 81       	ldd	r25, Z+2	; 0x02
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	28 1b       	sub	r18, r24
     a62:	39 0b       	sbc	r19, r25
     a64:	4a 0b       	sbc	r20, r26
     a66:	5b 0b       	sbc	r21, r27
     a68:	24 83       	std	Z+4, r18	; 0x04
     a6a:	35 83       	std	Z+5, r19	; 0x05
     a6c:	46 83       	std	Z+6, r20	; 0x06
     a6e:	57 83       	std	Z+7, r21	; 0x07
     a70:	08 95       	ret

00000a72 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a72:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a74:	e0 91 49 01 	lds	r30, 0x0149
     a78:	f0 91 4a 01 	lds	r31, 0x014A
     a7c:	22 85       	ldd	r18, Z+10	; 0x0a
     a7e:	33 85       	ldd	r19, Z+11	; 0x0b
     a80:	44 85       	ldd	r20, Z+12	; 0x0c
     a82:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a84:	78 94       	sei


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	b0 e0       	ldi	r27, 0x00	; 0
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	a4 1f       	adc	r26, r20
     a90:	b5 1f       	adc	r27, r21
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	06 c0       	rjmp	.+12     	; 0xaa8 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a9c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a9e:	22 85       	ldd	r18, Z+10	; 0x0a
     aa0:	33 85       	ldd	r19, Z+11	; 0x0b
     aa2:	44 85       	ldd	r20, Z+12	; 0x0c
     aa4:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     aa6:	78 94       	sei

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     aa8:	28 17       	cp	r18, r24
     aaa:	39 07       	cpc	r19, r25
     aac:	4a 07       	cpc	r20, r26
     aae:	5b 07       	cpc	r21, r27
     ab0:	ac f3       	brlt	.-22     	; 0xa9c <Timebase_Timer_Delay_Seconds+0x2a>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     ab2:	08 95       	ret

00000ab4 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     ab4:	e0 91 49 01 	lds	r30, 0x0149
     ab8:	f0 91 4a 01 	lds	r31, 0x014A
     abc:	16 86       	std	Z+14, r1	; 0x0e
     abe:	17 86       	std	Z+15, r1	; 0x0f
     ac0:	10 8a       	std	Z+16, r1	; 0x10
     ac2:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     ac4:	12 8a       	std	Z+18, r1	; 0x12
     ac6:	13 8a       	std	Z+19, r1	; 0x13
     ac8:	14 8a       	std	Z+20, r1	; 0x14
     aca:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     acc:	16 8a       	std	Z+22, r1	; 0x16
}
     ace:	08 95       	ret

00000ad0 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     ad0:	e0 91 49 01 	lds	r30, 0x0149
     ad4:	f0 91 4a 01 	lds	r31, 0x014A
     ad8:	86 89       	ldd	r24, Z+22	; 0x16
     ada:	88 23       	and	r24, r24
     adc:	b1 f4       	brne	.+44     	; 0xb0a <Timebase_Window_Timer_Start+0x3a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ade:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     ae0:	82 85       	ldd	r24, Z+10	; 0x0a
     ae2:	93 85       	ldd	r25, Z+11	; 0x0b
     ae4:	a4 85       	ldd	r26, Z+12	; 0x0c
     ae6:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ae8:	78 94       	sei
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     aea:	86 87       	std	Z+14, r24	; 0x0e
     aec:	97 87       	std	Z+15, r25	; 0x0f
     aee:	a0 8b       	std	Z+16, r26	; 0x10
     af0:	b1 8b       	std	Z+17, r27	; 0x11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     af2:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     af4:	80 85       	ldd	r24, Z+8	; 0x08
     af6:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     af8:	78 94       	sei
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	82 8b       	std	Z+18, r24	; 0x12
     b00:	93 8b       	std	Z+19, r25	; 0x13
     b02:	a4 8b       	std	Z+20, r26	; 0x14
     b04:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	86 8b       	std	Z+22, r24	; 0x16
     b0a:	08 95       	ret

00000b0c <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     b0c:	ef 92       	push	r14
     b0e:	ff 92       	push	r15
     b10:	0f 93       	push	r16
     b12:	1f 93       	push	r17
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     b18:	c0 91 49 01 	lds	r28, 0x0149
     b1c:	d0 91 4a 01 	lds	r29, 0x014A
     b20:	8e 89       	ldd	r24, Y+22	; 0x16
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	21 f0       	breq	.+8      	; 0xb2e <Timebase_Window_Timer_Get_Interval+0x22>
     b26:	ee 24       	eor	r14, r14
     b28:	ff 24       	eor	r15, r15
     b2a:	87 01       	movw	r16, r14
     b2c:	27 c0       	rjmp	.+78     	; 0xb7c <Timebase_Window_Timer_Get_Interval+0x70>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b2e:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b30:	2a 85       	ldd	r18, Y+10	; 0x0a
     b32:	3b 85       	ldd	r19, Y+11	; 0x0b
     b34:	4c 85       	ldd	r20, Y+12	; 0x0c
     b36:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b38:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b3a:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     b3c:	88 85       	ldd	r24, Y+8	; 0x08
     b3e:	99 85       	ldd	r25, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b40:	78 94       	sei

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     b42:	7c 01       	movw	r14, r24
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     b48:	8e 85       	ldd	r24, Y+14	; 0x0e
     b4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b4c:	a8 89       	ldd	r26, Y+16	; 0x10
     b4e:	b9 89       	ldd	r27, Y+17	; 0x11
     b50:	28 1b       	sub	r18, r24
     b52:	39 0b       	sbc	r19, r25
     b54:	4a 0b       	sbc	r20, r26
     b56:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     b58:	69 81       	ldd	r22, Y+1	; 0x01
     b5a:	7a 81       	ldd	r23, Y+2	; 0x02
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsi3>
	curr_s += curr_ss;
     b64:	2a 89       	ldd	r18, Y+18	; 0x12
     b66:	3b 89       	ldd	r19, Y+19	; 0x13
     b68:	4c 89       	ldd	r20, Y+20	; 0x14
     b6a:	5d 89       	ldd	r21, Y+21	; 0x15
     b6c:	e2 1a       	sub	r14, r18
     b6e:	f3 0a       	sbc	r15, r19
     b70:	04 0b       	sbc	r16, r20
     b72:	15 0b       	sbc	r17, r21
     b74:	e6 0e       	add	r14, r22
     b76:	f7 1e       	adc	r15, r23
     b78:	08 1f       	adc	r16, r24
     b7a:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     b7c:	b7 01       	movw	r22, r14
     b7e:	c8 01       	movw	r24, r16
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     b8e:	0e 94 86 05 	call	0xb0c	; 0xb0c <Timebase_Window_Timer_Get_Interval>
     b92:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     b94:	e0 91 49 01 	lds	r30, 0x0149
     b98:	f0 91 4a 01 	lds	r31, 0x014A
     b9c:	86 89       	ldd	r24, Z+22	; 0x16
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	49 f4       	brne	.+18     	; 0xbb4 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     ba2:	16 86       	std	Z+14, r1	; 0x0e
     ba4:	17 86       	std	Z+15, r1	; 0x0f
     ba6:	10 8a       	std	Z+16, r1	; 0x10
     ba8:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     baa:	12 8a       	std	Z+18, r1	; 0x12
     bac:	13 8a       	std	Z+19, r1	; 0x13
     bae:	14 8a       	std	Z+20, r1	; 0x14
     bb0:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     bb2:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     bb4:	82 2f       	mov	r24, r18
     bb6:	08 95       	ret

00000bb8 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
     bb8:	e0 91 49 01 	lds	r30, 0x0149
     bbc:	f0 91 4a 01 	lds	r31, 0x014A
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	2d e0       	ldi	r18, 0x0D	; 13
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	ac 01       	movw	r20, r24
     bc8:	42 9f       	mul	r20, r18
     bca:	c0 01       	movw	r24, r0
     bcc:	43 9f       	mul	r20, r19
     bce:	90 0d       	add	r25, r0
     bd0:	52 9f       	mul	r21, r18
     bd2:	90 0d       	add	r25, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	e8 0f       	add	r30, r24
     bd8:	f9 1f       	adc	r31, r25
     bda:	82 a5       	ldd	r24, Z+42	; 0x2a
     bdc:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
     bde:	8f 70       	andi	r24, 0x0F	; 15
     be0:	08 95       	ret

00000be2 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     be2:	e0 91 49 01 	lds	r30, 0x0149
     be6:	f0 91 4a 01 	lds	r31, 0x014A
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	2d e0       	ldi	r18, 0x0D	; 13
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	ac 01       	movw	r20, r24
     bf2:	42 9f       	mul	r20, r18
     bf4:	c0 01       	movw	r24, r0
     bf6:	43 9f       	mul	r20, r19
     bf8:	90 0d       	add	r25, r0
     bfa:	52 9f       	mul	r21, r18
     bfc:	90 0d       	add	r25, r0
     bfe:	11 24       	eor	r1, r1
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	6f 70       	andi	r22, 0x0F	; 15
     c06:	66 0f       	add	r22, r22
     c08:	82 a5       	ldd	r24, Z+42	; 0x2a
     c0a:	81 7e       	andi	r24, 0xE1	; 225
     c0c:	86 2b       	or	r24, r22
     c0e:	82 a7       	std	Z+42, r24	; 0x2a
}
     c10:	08 95       	ret

00000c12 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
     c12:	e0 91 49 01 	lds	r30, 0x0149
     c16:	f0 91 4a 01 	lds	r31, 0x014A
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	2d e0       	ldi	r18, 0x0D	; 13
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	ac 01       	movw	r20, r24
     c22:	42 9f       	mul	r20, r18
     c24:	c0 01       	movw	r24, r0
     c26:	43 9f       	mul	r20, r19
     c28:	90 0d       	add	r25, r0
     c2a:	52 9f       	mul	r21, r18
     c2c:	90 0d       	add	r25, r0
     c2e:	11 24       	eor	r1, r1
     c30:	e8 0f       	add	r30, r24
     c32:	f9 1f       	adc	r31, r25
     c34:	df 01       	movw	r26, r30
     c36:	9f 96       	adiw	r26, 0x2f	; 47
     c38:	67 a5       	ldd	r22, Z+47	; 0x2f
     c3a:	11 96       	adiw	r26, 0x01	; 1
     c3c:	7c 91       	ld	r23, X
     c3e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].Value;
}
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	8c 91       	ld	r24, X
     c44:	12 97       	sbiw	r26, 0x02	; 2
     c46:	13 96       	adiw	r26, 0x03	; 3
     c48:	9c 91       	ld	r25, X
     c4a:	08 95       	ret

00000c4c <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     c4c:	e0 91 49 01 	lds	r30, 0x0149
     c50:	f0 91 4a 01 	lds	r31, 0x014A
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	2d e0       	ldi	r18, 0x0D	; 13
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	dc 01       	movw	r26, r24
     c5c:	a2 9f       	mul	r26, r18
     c5e:	c0 01       	movw	r24, r0
     c60:	a3 9f       	mul	r26, r19
     c62:	90 0d       	add	r25, r0
     c64:	b2 9f       	mul	r27, r18
     c66:	90 0d       	add	r25, r0
     c68:	11 24       	eor	r1, r1
     c6a:	e8 0f       	add	r30, r24
     c6c:	f9 1f       	adc	r31, r25
     c6e:	47 a7       	std	Z+47, r20	; 0x2f
     c70:	50 ab       	std	Z+48, r21	; 0x30
     c72:	61 ab       	std	Z+49, r22	; 0x31
     c74:	72 ab       	std	Z+50, r23	; 0x32
}
     c76:	08 95       	ret

00000c78 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
     c78:	e0 91 49 01 	lds	r30, 0x0149
     c7c:	f0 91 4a 01 	lds	r31, 0x014A
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	2d e0       	ldi	r18, 0x0D	; 13
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	ac 01       	movw	r20, r24
     c88:	42 9f       	mul	r20, r18
     c8a:	c0 01       	movw	r24, r0
     c8c:	43 9f       	mul	r20, r19
     c8e:	90 0d       	add	r25, r0
     c90:	52 9f       	mul	r21, r18
     c92:	90 0d       	add	r25, r0
     c94:	11 24       	eor	r1, r1
     c96:	e8 0f       	add	r30, r24
     c98:	f9 1f       	adc	r31, r25
     c9a:	df 01       	movw	r26, r30
     c9c:	9b 96       	adiw	r26, 0x2b	; 43
     c9e:	63 a5       	ldd	r22, Z+43	; 0x2b
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	7c 91       	ld	r23, X
     ca4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].EndValue;
}
     ca6:	12 96       	adiw	r26, 0x02	; 2
     ca8:	8c 91       	ld	r24, X
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	13 96       	adiw	r26, 0x03	; 3
     cae:	9c 91       	ld	r25, X
     cb0:	08 95       	ret

00000cb2 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     cb2:	e0 91 49 01 	lds	r30, 0x0149
     cb6:	f0 91 4a 01 	lds	r31, 0x014A
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	2d e0       	ldi	r18, 0x0D	; 13
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	dc 01       	movw	r26, r24
     cc2:	a2 9f       	mul	r26, r18
     cc4:	c0 01       	movw	r24, r0
     cc6:	a3 9f       	mul	r26, r19
     cc8:	90 0d       	add	r25, r0
     cca:	b2 9f       	mul	r27, r18
     ccc:	90 0d       	add	r25, r0
     cce:	11 24       	eor	r1, r1
     cd0:	e8 0f       	add	r30, r24
     cd2:	f9 1f       	adc	r31, r25
     cd4:	43 a7       	std	Z+43, r20	; 0x2b
     cd6:	54 a7       	std	Z+44, r21	; 0x2c
     cd8:	65 a7       	std	Z+45, r22	; 0x2d
     cda:	76 a7       	std	Z+46, r23	; 0x2e
}
     cdc:	08 95       	ret

00000cde <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
     cde:	e0 91 49 01 	lds	r30, 0x0149
     ce2:	f0 91 4a 01 	lds	r31, 0x014A
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	2d e0       	ldi	r18, 0x0D	; 13
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	ac 01       	movw	r20, r24
     cee:	42 9f       	mul	r20, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	43 9f       	mul	r20, r19
     cf4:	90 0d       	add	r25, r0
     cf6:	52 9f       	mul	r21, r18
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	e8 0f       	add	r30, r24
     cfe:	f9 1f       	adc	r31, r25
     d00:	df 01       	movw	r26, r30
     d02:	d3 96       	adiw	r26, 0x33	; 51
     d04:	63 a9       	ldd	r22, Z+51	; 0x33
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	7c 91       	ld	r23, X
     d0a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].PeriodValue;
}
     d0c:	12 96       	adiw	r26, 0x02	; 2
     d0e:	8c 91       	ld	r24, X
     d10:	12 97       	sbiw	r26, 0x02	; 2
     d12:	13 96       	adiw	r26, 0x03	; 3
     d14:	9c 91       	ld	r25, X
     d16:	08 95       	ret

00000d18 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     d18:	e0 91 49 01 	lds	r30, 0x0149
     d1c:	f0 91 4a 01 	lds	r31, 0x014A
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     d24:	77 ff       	sbrs	r23, 7
     d26:	11 c0       	rjmp	.+34     	; 0xd4a <Timebase_DownCounter_Set_PeriodValue+0x32>
    Timebase->DownCounter[window].PeriodValue = 0;
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	ac 01       	movw	r20, r24
     d2e:	24 9f       	mul	r18, r20
     d30:	c0 01       	movw	r24, r0
     d32:	25 9f       	mul	r18, r21
     d34:	90 0d       	add	r25, r0
     d36:	34 9f       	mul	r19, r20
     d38:	90 0d       	add	r25, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	e8 0f       	add	r30, r24
     d3e:	f9 1f       	adc	r31, r25
     d40:	13 aa       	std	Z+51, r1	; 0x33
     d42:	14 aa       	std	Z+52, r1	; 0x34
     d44:	15 aa       	std	Z+53, r1	; 0x35
     d46:	16 aa       	std	Z+54, r1	; 0x36
     d48:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
     d4a:	8d e0       	ldi	r24, 0x0D	; 13
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	dc 01       	movw	r26, r24
     d50:	2a 9f       	mul	r18, r26
     d52:	c0 01       	movw	r24, r0
     d54:	2b 9f       	mul	r18, r27
     d56:	90 0d       	add	r25, r0
     d58:	3a 9f       	mul	r19, r26
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	43 ab       	std	Z+51, r20	; 0x33
     d64:	54 ab       	std	Z+52, r21	; 0x34
     d66:	65 ab       	std	Z+53, r22	; 0x35
     d68:	76 ab       	std	Z+54, r23	; 0x36
     d6a:	08 95       	ret

00000d6c <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
     d6c:	e0 91 49 01 	lds	r30, 0x0149
     d70:	f0 91 4a 01 	lds	r31, 0x014A
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	2d e0       	ldi	r18, 0x0D	; 13
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	ac 01       	movw	r20, r24
     d7c:	42 9f       	mul	r20, r18
     d7e:	c0 01       	movw	r24, r0
     d80:	43 9f       	mul	r20, r19
     d82:	90 0d       	add	r25, r0
     d84:	52 9f       	mul	r21, r18
     d86:	90 0d       	add	r25, r0
     d88:	11 24       	eor	r1, r1
     d8a:	e8 0f       	add	r30, r24
     d8c:	f9 1f       	adc	r31, r25
     d8e:	82 a5       	ldd	r24, Z+42	; 0x2a
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
     d90:	81 70       	andi	r24, 0x01	; 1
     d92:	08 95       	ret

00000d94 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
     d94:	e0 91 49 01 	lds	r30, 0x0149
     d98:	f0 91 4a 01 	lds	r31, 0x014A
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	2d e0       	ldi	r18, 0x0D	; 13
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	ac 01       	movw	r20, r24
     da4:	42 9f       	mul	r20, r18
     da6:	c0 01       	movw	r24, r0
     da8:	43 9f       	mul	r20, r19
     daa:	90 0d       	add	r25, r0
     dac:	52 9f       	mul	r21, r18
     dae:	90 0d       	add	r25, r0
     db0:	11 24       	eor	r1, r1
     db2:	e8 0f       	add	r30, r24
     db4:	f9 1f       	adc	r31, r25
     db6:	82 a5       	ldd	r24, Z+42	; 0x2a
     db8:	81 60       	ori	r24, 0x01	; 1
     dba:	82 a7       	std	Z+42, r24	; 0x2a
}
     dbc:	08 95       	ret

00000dbe <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     dbe:	e0 91 49 01 	lds	r30, 0x0149
     dc2:	f0 91 4a 01 	lds	r31, 0x014A
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	2d e0       	ldi	r18, 0x0D	; 13
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	ac 01       	movw	r20, r24
     dce:	42 9f       	mul	r20, r18
     dd0:	c0 01       	movw	r24, r0
     dd2:	43 9f       	mul	r20, r19
     dd4:	90 0d       	add	r25, r0
     dd6:	52 9f       	mul	r21, r18
     dd8:	90 0d       	add	r25, r0
     dda:	11 24       	eor	r1, r1
     ddc:	e8 0f       	add	r30, r24
     dde:	f9 1f       	adc	r31, r25
     de0:	82 a5       	ldd	r24, Z+42	; 0x2a
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	82 a7       	std	Z+42, r24	; 0x2a
}
     de6:	08 95       	ret

00000de8 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     de8:	e0 91 49 01 	lds	r30, 0x0149
     dec:	f0 91 4a 01 	lds	r31, 0x014A
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	2d e0       	ldi	r18, 0x0D	; 13
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	ac 01       	movw	r20, r24
     df8:	42 9f       	mul	r20, r18
     dfa:	c0 01       	movw	r24, r0
     dfc:	43 9f       	mul	r20, r19
     dfe:	90 0d       	add	r25, r0
     e00:	52 9f       	mul	r21, r18
     e02:	90 0d       	add	r25, r0
     e04:	11 24       	eor	r1, r1
     e06:	e8 0f       	add	r30, r24
     e08:	f9 1f       	adc	r31, r25
     e0a:	13 a6       	std	Z+43, r1	; 0x2b
     e0c:	14 a6       	std	Z+44, r1	; 0x2c
     e0e:	15 a6       	std	Z+45, r1	; 0x2d
     e10:	16 a6       	std	Z+46, r1	; 0x2e
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e12:	17 a6       	std	Z+47, r1	; 0x2f
     e14:	10 aa       	std	Z+48, r1	; 0x30
     e16:	11 aa       	std	Z+49, r1	; 0x31
     e18:	12 aa       	std	Z+50, r1	; 0x32
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e1a:	82 a5       	ldd	r24, Z+42	; 0x2a
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e1c:	80 7e       	andi	r24, 0xE0	; 224
     e1e:	82 a7       	std	Z+42, r24	; 0x2a
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
     e20:	08 95       	ret

00000e22 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e22:	e0 91 49 01 	lds	r30, 0x0149
     e26:	f0 91 4a 01 	lds	r31, 0x014A
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	2d e0       	ldi	r18, 0x0D	; 13
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	ac 01       	movw	r20, r24
     e32:	42 9f       	mul	r20, r18
     e34:	c0 01       	movw	r24, r0
     e36:	43 9f       	mul	r20, r19
     e38:	90 0d       	add	r25, r0
     e3a:	52 9f       	mul	r21, r18
     e3c:	90 0d       	add	r25, r0
     e3e:	11 24       	eor	r1, r1
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	13 a6       	std	Z+43, r1	; 0x2b
     e46:	14 a6       	std	Z+44, r1	; 0x2c
     e48:	15 a6       	std	Z+45, r1	; 0x2d
     e4a:	16 a6       	std	Z+46, r1	; 0x2e
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e4c:	17 a6       	std	Z+47, r1	; 0x2f
     e4e:	10 aa       	std	Z+48, r1	; 0x30
     e50:	11 aa       	std	Z+49, r1	; 0x31
     e52:	12 aa       	std	Z+50, r1	; 0x32
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e54:	82 a5       	ldd	r24, Z+42	; 0x2a
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e56:	80 7e       	andi	r24, 0xE0	; 224
     e58:	82 a7       	std	Z+42, r24	; 0x2a
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
     e5a:	08 95       	ret

00000e5c <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     e5c:	e0 91 49 01 	lds	r30, 0x0149
     e60:	f0 91 4a 01 	lds	r31, 0x014A
     e64:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     e66:	2d e0       	ldi	r18, 0x0D	; 13
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	ac 01       	movw	r20, r24
     e6c:	42 9f       	mul	r20, r18
     e6e:	c0 01       	movw	r24, r0
     e70:	43 9f       	mul	r20, r19
     e72:	90 0d       	add	r25, r0
     e74:	52 9f       	mul	r21, r18
     e76:	90 0d       	add	r25, r0
     e78:	11 24       	eor	r1, r1
     e7a:	e8 0f       	add	r30, r24
     e7c:	f9 1f       	adc	r31, r25
     e7e:	92 a5       	ldd	r25, Z+42	; 0x2a
     e80:	89 2f       	mov	r24, r25
     e82:	86 95       	lsr	r24
     e84:	8f 70       	andi	r24, 0x0F	; 15
     e86:	81 30       	cpi	r24, 0x01	; 1
     e88:	19 f0       	breq	.+6      	; 0xe90 <Timebase_DownCounter_Start+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e8a:	91 7e       	andi	r25, 0xE1	; 225
     e8c:	92 60       	ori	r25, 0x02	; 2
     e8e:	92 a7       	std	Z+42, r25	; 0x2a
     e90:	08 95       	ret

00000e92 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     e92:	e0 91 49 01 	lds	r30, 0x0149
     e96:	f0 91 4a 01 	lds	r31, 0x014A
     e9a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     e9c:	2d e0       	ldi	r18, 0x0D	; 13
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	ac 01       	movw	r20, r24
     ea2:	42 9f       	mul	r20, r18
     ea4:	c0 01       	movw	r24, r0
     ea6:	43 9f       	mul	r20, r19
     ea8:	90 0d       	add	r25, r0
     eaa:	52 9f       	mul	r21, r18
     eac:	90 0d       	add	r25, r0
     eae:	11 24       	eor	r1, r1
     eb0:	e8 0f       	add	r30, r24
     eb2:	f9 1f       	adc	r31, r25
     eb4:	92 a5       	ldd	r25, Z+42	; 0x2a
     eb6:	89 2f       	mov	r24, r25
     eb8:	86 95       	lsr	r24
     eba:	8f 70       	andi	r24, 0x0F	; 15
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	19 f0       	breq	.+6      	; 0xec6 <Timebase_DownCounter_Stop+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ec0:	91 7e       	andi	r25, 0xE1	; 225
     ec2:	94 60       	ori	r25, 0x04	; 4
     ec4:	92 a7       	std	Z+42, r25	; 0x2a
     ec6:	08 95       	ret

00000ec8 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     ed0:	c0 91 49 01 	lds	r28, 0x0149
     ed4:	d0 91 4a 01 	lds	r29, 0x014A
     ed8:	08 2f       	mov	r16, r24
     eda:	10 e0       	ldi	r17, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     edc:	8d e0       	ldi	r24, 0x0D	; 13
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	08 9f       	mul	r16, r24
     ee2:	f0 01       	movw	r30, r0
     ee4:	09 9f       	mul	r16, r25
     ee6:	f0 0d       	add	r31, r0
     ee8:	18 9f       	mul	r17, r24
     eea:	f0 0d       	add	r31, r0
     eec:	11 24       	eor	r1, r1
     eee:	ec 0f       	add	r30, r28
     ef0:	fd 1f       	adc	r31, r29
     ef2:	82 a5       	ldd	r24, Z+42	; 0x2a
     ef4:	86 95       	lsr	r24
     ef6:	8f 70       	andi	r24, 0x0F	; 15
     ef8:	31 f5       	brne	.+76     	; 0xf46 <Timebase_DownCounter_Set_Securely+0x7e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     efa:	47 a7       	std	Z+47, r20	; 0x2f
     efc:	50 ab       	std	Z+48, r21	; 0x30
     efe:	61 ab       	std	Z+49, r22	; 0x31
     f00:	72 ab       	std	Z+50, r23	; 0x32

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     f02:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	ac 85       	ldd	r26, Y+12	; 0x0c
     f0a:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     f0c:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f0e:	2d e0       	ldi	r18, 0x0D	; 13
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	02 9f       	mul	r16, r18
     f14:	f0 01       	movw	r30, r0
     f16:	03 9f       	mul	r16, r19
     f18:	f0 0d       	add	r31, r0
     f1a:	12 9f       	mul	r17, r18
     f1c:	f0 0d       	add	r31, r0
     f1e:	11 24       	eor	r1, r1
     f20:	ec 0f       	add	r30, r28
     f22:	fd 1f       	adc	r31, r29
     f24:	84 0f       	add	r24, r20
     f26:	95 1f       	adc	r25, r21
     f28:	a6 1f       	adc	r26, r22
     f2a:	b7 1f       	adc	r27, r23
     f2c:	83 a7       	std	Z+43, r24	; 0x2b
     f2e:	94 a7       	std	Z+44, r25	; 0x2c
     f30:	a5 a7       	std	Z+45, r26	; 0x2d
     f32:	b6 a7       	std	Z+46, r27	; 0x2e
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     f34:	92 a5       	ldd	r25, Z+42	; 0x2a
     f36:	89 2f       	mov	r24, r25
     f38:	86 95       	lsr	r24
     f3a:	8f 70       	andi	r24, 0x0F	; 15
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	19 f0       	breq	.+6      	; 0xf46 <Timebase_DownCounter_Set_Securely+0x7e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f40:	91 7e       	andi	r25, 0xE1	; 225
     f42:	92 60       	ori	r25, 0x02	; 2
     f44:	92 a7       	std	Z+42, r25	; 0x2a
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
     f46:	df 91       	pop	r29
     f48:	cf 91       	pop	r28
     f4a:	1f 91       	pop	r17
     f4c:	0f 91       	pop	r16
     f4e:	08 95       	ret

00000f50 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
     f50:	cf 93       	push	r28
     f52:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f54:	e0 91 49 01 	lds	r30, 0x0149
     f58:	f0 91 4a 01 	lds	r31, 0x014A
     f5c:	a8 2f       	mov	r26, r24
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	2d e0       	ldi	r18, 0x0D	; 13
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	e9 01       	movw	r28, r18
     f66:	ac 9f       	mul	r26, r28
     f68:	90 01       	movw	r18, r0
     f6a:	ad 9f       	mul	r26, r29
     f6c:	30 0d       	add	r19, r0
     f6e:	bc 9f       	mul	r27, r28
     f70:	30 0d       	add	r19, r0
     f72:	11 24       	eor	r1, r1
     f74:	e2 0f       	add	r30, r18
     f76:	f3 1f       	adc	r31, r19
     f78:	13 a6       	std	Z+43, r1	; 0x2b
     f7a:	14 a6       	std	Z+44, r1	; 0x2c
     f7c:	15 a6       	std	Z+45, r1	; 0x2d
     f7e:	16 a6       	std	Z+46, r1	; 0x2e
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f80:	17 a6       	std	Z+47, r1	; 0x2f
     f82:	10 aa       	std	Z+48, r1	; 0x30
     f84:	11 aa       	std	Z+49, r1	; 0x31
     f86:	12 aa       	std	Z+50, r1	; 0x32
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f88:	92 a5       	ldd	r25, Z+42	; 0x2a
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     f8a:	90 7e       	andi	r25, 0xE0	; 224
     f8c:	92 a7       	std	Z+42, r25	; 0x2a
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
     f8e:	0e 94 64 07 	call	0xec8	; 0xec8 <Timebase_DownCounter_Set_Securely>
} 
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	08 95       	ret

00000f98 <Timebase_DownCounter_Update>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     f98:	a0 91 49 01 	lds	r26, 0x0149
     f9c:	b0 91 4a 01 	lds	r27, 0x014A
     fa0:	68 2f       	mov	r22, r24
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	8d e0       	ldi	r24, 0x0D	; 13
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	68 9f       	mul	r22, r24
     faa:	f0 01       	movw	r30, r0
     fac:	69 9f       	mul	r22, r25
     fae:	f0 0d       	add	r31, r0
     fb0:	78 9f       	mul	r23, r24
     fb2:	f0 0d       	add	r31, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	ea 0f       	add	r30, r26
     fb8:	fb 1f       	adc	r31, r27
     fba:	82 a5       	ldd	r24, Z+42	; 0x2a
     fbc:	86 95       	lsr	r24
     fbe:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	89 f5       	brne	.+98     	; 0x1026 <Timebase_DownCounter_Update+0x8e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     fc4:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     fc6:	1a 96       	adiw	r26, 0x0a	; 10
     fc8:	2d 91       	ld	r18, X+
     fca:	3d 91       	ld	r19, X+
     fcc:	4d 91       	ld	r20, X+
     fce:	5c 91       	ld	r21, X
     fd0:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     fd2:	78 94       	sei
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
     fd4:	8d e0       	ldi	r24, 0x0D	; 13
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	68 9f       	mul	r22, r24
     fda:	f0 01       	movw	r30, r0
     fdc:	69 9f       	mul	r22, r25
     fde:	f0 0d       	add	r31, r0
     fe0:	78 9f       	mul	r23, r24
     fe2:	f0 0d       	add	r31, r0
     fe4:	11 24       	eor	r1, r1
     fe6:	ea 0f       	add	r30, r26
     fe8:	fb 1f       	adc	r31, r27
     fea:	83 a5       	ldd	r24, Z+43	; 0x2b
     fec:	94 a5       	ldd	r25, Z+44	; 0x2c
     fee:	a5 a5       	ldd	r26, Z+45	; 0x2d
     ff0:	b6 a5       	ldd	r27, Z+46	; 0x2e
     ff2:	82 1b       	sub	r24, r18
     ff4:	93 0b       	sbc	r25, r19
     ff6:	a4 0b       	sbc	r26, r20
     ff8:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     ffa:	87 a7       	std	Z+47, r24	; 0x2f
     ffc:	90 ab       	std	Z+48, r25	; 0x30
     ffe:	a1 ab       	std	Z+49, r26	; 0x31
    1000:	b2 ab       	std	Z+50, r27	; 0x32
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    1002:	18 16       	cp	r1, r24
    1004:	19 06       	cpc	r1, r25
    1006:	1a 06       	cpc	r1, r26
    1008:	1b 06       	cpc	r1, r27
    100a:	74 f1       	brlt	.+92     	; 0x1068 <Timebase_DownCounter_Update+0xd0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    100c:	13 a6       	std	Z+43, r1	; 0x2b
    100e:	14 a6       	std	Z+44, r1	; 0x2c
    1010:	15 a6       	std	Z+45, r1	; 0x2d
    1012:	16 a6       	std	Z+46, r1	; 0x2e
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1014:	17 a6       	std	Z+47, r1	; 0x2f
    1016:	10 aa       	std	Z+48, r1	; 0x30
    1018:	11 aa       	std	Z+49, r1	; 0x31
    101a:	12 aa       	std	Z+50, r1	; 0x32
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    101c:	82 a5       	ldd	r24, Z+42	; 0x2a
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    101e:	80 7e       	andi	r24, 0xE0	; 224
    1020:	88 60       	ori	r24, 0x08	; 8
    1022:	82 a7       	std	Z+42, r24	; 0x2a
    1024:	08 95       	ret
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	f9 f4       	brne	.+62     	; 0x1068 <Timebase_DownCounter_Update+0xd0>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    102a:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    102c:	1a 96       	adiw	r26, 0x0a	; 10
    102e:	2d 91       	ld	r18, X+
    1030:	3d 91       	ld	r19, X+
    1032:	4d 91       	ld	r20, X+
    1034:	5c 91       	ld	r21, X
    1036:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1038:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    103a:	8d e0       	ldi	r24, 0x0D	; 13
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	68 9f       	mul	r22, r24
    1040:	f0 01       	movw	r30, r0
    1042:	69 9f       	mul	r22, r25
    1044:	f0 0d       	add	r31, r0
    1046:	78 9f       	mul	r23, r24
    1048:	f0 0d       	add	r31, r0
    104a:	11 24       	eor	r1, r1
    104c:	ea 0f       	add	r30, r26
    104e:	fb 1f       	adc	r31, r27
    1050:	87 a5       	ldd	r24, Z+47	; 0x2f
    1052:	90 a9       	ldd	r25, Z+48	; 0x30
    1054:	a1 a9       	ldd	r26, Z+49	; 0x31
    1056:	b2 a9       	ldd	r27, Z+50	; 0x32
    1058:	28 0f       	add	r18, r24
    105a:	39 1f       	adc	r19, r25
    105c:	4a 1f       	adc	r20, r26
    105e:	5b 1f       	adc	r21, r27
    1060:	23 a7       	std	Z+43, r18	; 0x2b
    1062:	34 a7       	std	Z+44, r19	; 0x2c
    1064:	45 a7       	std	Z+45, r20	; 0x2d
    1066:	56 a7       	std	Z+46, r21	; 0x2e
    1068:	08 95       	ret

0000106a <Timebase_DownCounter_Expired>:
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	e0 91 49 01 	lds	r30, 0x0149
    1070:	f0 91 4a 01 	lds	r31, 0x014A
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	2d e0       	ldi	r18, 0x0D	; 13
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	bc 01       	movw	r22, r24
    107c:	62 9f       	mul	r22, r18
    107e:	c0 01       	movw	r24, r0
    1080:	63 9f       	mul	r22, r19
    1082:	90 0d       	add	r25, r0
    1084:	72 9f       	mul	r23, r18
    1086:	90 0d       	add	r25, r0
    1088:	11 24       	eor	r1, r1
    108a:	e8 0f       	add	r30, r24
    108c:	f9 1f       	adc	r31, r25
    108e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1090:	86 95       	lsr	r24
    1092:	8f 70       	andi	r24, 0x0F	; 15
    1094:	84 30       	cpi	r24, 0x04	; 4
    1096:	09 f4       	brne	.+2      	; 0x109a <Timebase_DownCounter_Expired+0x30>
    1098:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    109a:	84 2f       	mov	r24, r20
    109c:	08 95       	ret

0000109e <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    109e:	e0 91 49 01 	lds	r30, 0x0149
    10a2:	f0 91 4a 01 	lds	r31, 0x014A
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    10a8:	2d e0       	ldi	r18, 0x0D	; 13
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	ac 01       	movw	r20, r24
    10ae:	42 9f       	mul	r20, r18
    10b0:	c0 01       	movw	r24, r0
    10b2:	43 9f       	mul	r20, r19
    10b4:	90 0d       	add	r25, r0
    10b6:	52 9f       	mul	r21, r18
    10b8:	90 0d       	add	r25, r0
    10ba:	11 24       	eor	r1, r1
    10bc:	e8 0f       	add	r30, r24
    10be:	f9 1f       	adc	r31, r25
    10c0:	82 a5       	ldd	r24, Z+42	; 0x2a
    10c2:	86 95       	lsr	r24
    10c4:	8f 70       	andi	r24, 0x0F	; 15
    10c6:	84 30       	cpi	r24, 0x04	; 4
    10c8:	11 f0       	breq	.+4      	; 0x10ce <Timebase_DownCounter_Expired_Event+0x30>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    10ce:	13 a6       	std	Z+43, r1	; 0x2b
    10d0:	14 a6       	std	Z+44, r1	; 0x2c
    10d2:	15 a6       	std	Z+45, r1	; 0x2d
    10d4:	16 a6       	std	Z+46, r1	; 0x2e
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    10d6:	17 a6       	std	Z+47, r1	; 0x2f
    10d8:	10 aa       	std	Z+48, r1	; 0x30
    10da:	11 aa       	std	Z+49, r1	; 0x31
    10dc:	12 aa       	std	Z+50, r1	; 0x32
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    10de:	82 a5       	ldd	r24, Z+42	; 0x2a
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    10e0:	80 7e       	andi	r24, 0xE0	; 224
    10e2:	82 a7       	std	Z+42, r24	; 0x2a
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    10e6:	08 95       	ret

000010e8 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    10ec:	c0 91 49 01 	lds	r28, 0x0149
    10f0:	d0 91 4a 01 	lds	r29, 0x014A
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    10f8:	8d e0       	ldi	r24, 0x0D	; 13
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	28 9f       	mul	r18, r24
    10fe:	f0 01       	movw	r30, r0
    1100:	29 9f       	mul	r18, r25
    1102:	f0 0d       	add	r31, r0
    1104:	38 9f       	mul	r19, r24
    1106:	f0 0d       	add	r31, r0
    1108:	11 24       	eor	r1, r1
    110a:	ec 0f       	add	r30, r28
    110c:	fd 1f       	adc	r31, r29
    110e:	82 a5       	ldd	r24, Z+42	; 0x2a
    1110:	80 fd       	sbrc	r24, 0
    1112:	21 c0       	rjmp	.+66     	; 0x1156 <Timebase_DownCounter_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    1114:	87 a5       	ldd	r24, Z+47	; 0x2f
    1116:	90 a9       	ldd	r25, Z+48	; 0x30
    1118:	a1 a9       	ldd	r26, Z+49	; 0x31
    111a:	b2 a9       	ldd	r27, Z+50	; 0x32
    111c:	84 1b       	sub	r24, r20
    111e:	95 0b       	sbc	r25, r21
    1120:	a6 0b       	sbc	r26, r22
    1122:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1124:	b7 ff       	sbrs	r27, 7
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <Timebase_DownCounter_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounter[window].PeriodValue = 0;
    1128:	13 aa       	std	Z+51, r1	; 0x33
    112a:	14 aa       	std	Z+52, r1	; 0x34
    112c:	15 aa       	std	Z+53, r1	; 0x35
    112e:	16 aa       	std	Z+54, r1	; 0x36
    1130:	04 c0       	rjmp	.+8      	; 0x113a <Timebase_DownCounter_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1132:	83 ab       	std	Z+51, r24	; 0x33
    1134:	94 ab       	std	Z+52, r25	; 0x34
    1136:	a5 ab       	std	Z+53, r26	; 0x35
    1138:	b6 ab       	std	Z+54, r27	; 0x36
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    113a:	8d e0       	ldi	r24, 0x0D	; 13
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	28 9f       	mul	r18, r24
    1140:	f0 01       	movw	r30, r0
    1142:	29 9f       	mul	r18, r25
    1144:	f0 0d       	add	r31, r0
    1146:	38 9f       	mul	r19, r24
    1148:	f0 0d       	add	r31, r0
    114a:	11 24       	eor	r1, r1
    114c:	ec 0f       	add	r30, r28
    114e:	fd 1f       	adc	r31, r29
    1150:	82 a5       	ldd	r24, Z+42	; 0x2a
    1152:	81 60       	ori	r24, 0x01	; 1
    1154:	82 a7       	std	Z+42, r24	; 0x2a
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    115c:	e0 91 49 01 	lds	r30, 0x0149
    1160:	f0 91 4a 01 	lds	r31, 0x014A
    1164:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1166:	2d e0       	ldi	r18, 0x0D	; 13
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	ac 01       	movw	r20, r24
    116c:	42 9f       	mul	r20, r18
    116e:	c0 01       	movw	r24, r0
    1170:	43 9f       	mul	r20, r19
    1172:	90 0d       	add	r25, r0
    1174:	52 9f       	mul	r21, r18
    1176:	90 0d       	add	r25, r0
    1178:	11 24       	eor	r1, r1
    117a:	e8 0f       	add	r30, r24
    117c:	f9 1f       	adc	r31, r25
    117e:	27 a5       	ldd	r18, Z+47	; 0x2f
    1180:	30 a9       	ldd	r19, Z+48	; 0x30
    1182:	41 a9       	ldd	r20, Z+49	; 0x31
    1184:	52 a9       	ldd	r21, Z+50	; 0x32
    1186:	83 a9       	ldd	r24, Z+51	; 0x33
    1188:	94 a9       	ldd	r25, Z+52	; 0x34
    118a:	a5 a9       	ldd	r26, Z+53	; 0x35
    118c:	b6 a9       	ldd	r27, Z+54	; 0x36
    118e:	28 1b       	sub	r18, r24
    1190:	39 0b       	sbc	r19, r25
    1192:	4a 0b       	sbc	r20, r26
    1194:	5b 0b       	sbc	r21, r27
    1196:	57 ff       	sbrs	r21, 7
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <Timebase_DownCounter_Get_Remaining_Period_Value+0x46>
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    11a2:	b9 01       	movw	r22, r18
    11a4:	ca 01       	movw	r24, r20
    11a6:	08 95       	ret

000011a8 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    11ac:	c0 91 49 01 	lds	r28, 0x0149
    11b0:	d0 91 4a 01 	lds	r29, 0x014A
    11b4:	68 2f       	mov	r22, r24
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    11b8:	8d e0       	ldi	r24, 0x0D	; 13
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	68 9f       	mul	r22, r24
    11be:	f0 01       	movw	r30, r0
    11c0:	69 9f       	mul	r22, r25
    11c2:	f0 0d       	add	r31, r0
    11c4:	78 9f       	mul	r23, r24
    11c6:	f0 0d       	add	r31, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	ec 0f       	add	r30, r28
    11cc:	fd 1f       	adc	r31, r29
    11ce:	27 a5       	ldd	r18, Z+47	; 0x2f
    11d0:	30 a9       	ldd	r19, Z+48	; 0x30
    11d2:	41 a9       	ldd	r20, Z+49	; 0x31
    11d4:	52 a9       	ldd	r21, Z+50	; 0x32
    11d6:	83 a9       	ldd	r24, Z+51	; 0x33
    11d8:	94 a9       	ldd	r25, Z+52	; 0x34
    11da:	a5 a9       	ldd	r26, Z+53	; 0x35
    11dc:	b6 a9       	ldd	r27, Z+54	; 0x36
    11de:	28 1b       	sub	r18, r24
    11e0:	39 0b       	sbc	r19, r25
    11e2:	4a 0b       	sbc	r20, r26
    11e4:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    11e6:	57 fd       	sbrc	r21, 7
    11e8:	07 c0       	rjmp	.+14     	; 0x11f8 <Timebase_DownCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	41 05       	cpc	r20, r1
    11f0:	51 05       	cpc	r21, r1
    11f2:	11 f0       	breq	.+4      	; 0x11f8 <Timebase_DownCounter_Period_Value_Expired+0x50>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	12 c0       	rjmp	.+36     	; 0x121c <Timebase_DownCounter_Period_Value_Expired+0x74>
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	8d e0       	ldi	r24, 0x0D	; 13
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	ac 01       	movw	r20, r24
    1200:	64 9f       	mul	r22, r20
    1202:	c0 01       	movw	r24, r0
    1204:	65 9f       	mul	r22, r21
    1206:	90 0d       	add	r25, r0
    1208:	74 9f       	mul	r23, r20
    120a:	90 0d       	add	r25, r0
    120c:	11 24       	eor	r1, r1
    120e:	c8 0f       	add	r28, r24
    1210:	d9 1f       	adc	r29, r25
    1212:	8a a5       	ldd	r24, Y+42	; 0x2a
    1214:	80 ff       	sbrs	r24, 0
    1216:	21 e0       	ldi	r18, 0x01	; 1
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    121c:	82 2f       	mov	r24, r18
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1224:	1f 93       	push	r17
    1226:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    1228:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Timebase_DownCounter_Period_Value_Expired>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	11 f0       	breq	.+4      	; 0x1234 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	16 c0       	rjmp	.+44     	; 0x1260 <Timebase_DownCounter_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1234:	e0 91 49 01 	lds	r30, 0x0149
    1238:	f0 91 4a 01 	lds	r31, 0x014A
    123c:	21 2f       	mov	r18, r17
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8d e0       	ldi	r24, 0x0D	; 13
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	ac 01       	movw	r20, r24
    1246:	24 9f       	mul	r18, r20
    1248:	c0 01       	movw	r24, r0
    124a:	25 9f       	mul	r18, r21
    124c:	90 0d       	add	r25, r0
    124e:	34 9f       	mul	r19, r20
    1250:	90 0d       	add	r25, r0
    1252:	11 24       	eor	r1, r1
    1254:	e8 0f       	add	r30, r24
    1256:	f9 1f       	adc	r31, r25
    1258:	82 a5       	ldd	r24, Z+42	; 0x2a
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	82 a7       	std	Z+42, r24	; 0x2a
    125e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1260:	1f 91       	pop	r17
    1262:	08 95       	ret

00001264 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	0e 94 cc 07 	call	0xf98	; 0xf98 <Timebase_DownCounter_Update>
  }
}
    126a:	08 95       	ret

0000126c <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    126c:	e0 91 49 01 	lds	r30, 0x0149
    1270:	f0 91 4a 01 	lds	r31, 0x014A
    1274:	13 a6       	std	Z+43, r1	; 0x2b
    1276:	14 a6       	std	Z+44, r1	; 0x2c
    1278:	15 a6       	std	Z+45, r1	; 0x2d
    127a:	16 a6       	std	Z+46, r1	; 0x2e
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    127c:	17 a6       	std	Z+47, r1	; 0x2f
    127e:	10 aa       	std	Z+48, r1	; 0x30
    1280:	11 aa       	std	Z+49, r1	; 0x31
    1282:	12 aa       	std	Z+50, r1	; 0x32
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1284:	82 a5       	ldd	r24, Z+42	; 0x2a
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1286:	80 7e       	andi	r24, 0xE0	; 224
    1288:	82 a7       	std	Z+42, r24	; 0x2a

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    128a:	08 95       	ret

0000128c <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    128c:	e0 91 49 01 	lds	r30, 0x0149
    1290:	f0 91 4a 01 	lds	r31, 0x014A
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 01       	movw	r18, r24
    1298:	44 e0       	ldi	r20, 0x04	; 4
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	4a 95       	dec	r20
    12a0:	e1 f7       	brne	.-8      	; 0x129a <Timebase_DownCounter_SS_Get_Status+0xe>
    12a2:	28 0f       	add	r18, r24
    12a4:	39 1f       	adc	r19, r25
    12a6:	e2 0f       	add	r30, r18
    12a8:	f3 1f       	adc	r31, r19
    12aa:	81 8d       	ldd	r24, Z+25	; 0x19
    12ac:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    12ae:	8f 70       	andi	r24, 0x0F	; 15
    12b0:	08 95       	ret

000012b2 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    12b2:	e0 91 49 01 	lds	r30, 0x0149
    12b6:	f0 91 4a 01 	lds	r31, 0x014A
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	9c 01       	movw	r18, r24
    12be:	54 e0       	ldi	r21, 0x04	; 4
    12c0:	22 0f       	add	r18, r18
    12c2:	33 1f       	adc	r19, r19
    12c4:	5a 95       	dec	r21
    12c6:	e1 f7       	brne	.-8      	; 0x12c0 <Timebase_DownCounter_SS_Set_Status+0xe>
    12c8:	28 0f       	add	r18, r24
    12ca:	39 1f       	adc	r19, r25
    12cc:	e2 0f       	add	r30, r18
    12ce:	f3 1f       	adc	r31, r19
    12d0:	6f 70       	andi	r22, 0x0F	; 15
    12d2:	66 0f       	add	r22, r22
    12d4:	81 8d       	ldd	r24, Z+25	; 0x19
    12d6:	81 7e       	andi	r24, 0xE1	; 225
    12d8:	86 2b       	or	r24, r22
    12da:	81 8f       	std	Z+25, r24	; 0x19
}
    12dc:	08 95       	ret

000012de <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    12de:	e0 91 49 01 	lds	r30, 0x0149
    12e2:	f0 91 4a 01 	lds	r31, 0x014A
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 01       	movw	r18, r24
    12ea:	64 e0       	ldi	r22, 0x04	; 4
    12ec:	22 0f       	add	r18, r18
    12ee:	33 1f       	adc	r19, r19
    12f0:	6a 95       	dec	r22
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <Timebase_DownCounter_SS_Get_Value+0xe>
    12f4:	28 0f       	add	r18, r24
    12f6:	39 1f       	adc	r19, r25
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	df 01       	movw	r26, r30
    12fe:	92 96       	adiw	r26, 0x22	; 34
    1300:	62 a1       	ldd	r22, Z+34	; 0x22
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	7c 91       	ld	r23, X
    1306:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
    1308:	12 96       	adiw	r26, 0x02	; 2
    130a:	8c 91       	ld	r24, X
    130c:	12 97       	sbiw	r26, 0x02	; 2
    130e:	13 96       	adiw	r26, 0x03	; 3
    1310:	9c 91       	ld	r25, X
    1312:	08 95       	ret

00001314 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1314:	e0 91 49 01 	lds	r30, 0x0149
    1318:	f0 91 4a 01 	lds	r31, 0x014A
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 01       	movw	r18, r24
    1320:	a4 e0       	ldi	r26, 0x04	; 4
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	aa 95       	dec	r26
    1328:	e1 f7       	brne	.-8      	; 0x1322 <Timebase_DownCounter_SS_Set_Value+0xe>
    132a:	28 0f       	add	r18, r24
    132c:	39 1f       	adc	r19, r25
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	42 a3       	std	Z+34, r20	; 0x22
    1334:	53 a3       	std	Z+35, r21	; 0x23
    1336:	64 a3       	std	Z+36, r22	; 0x24
    1338:	75 a3       	std	Z+37, r23	; 0x25
}
    133a:	08 95       	ret

0000133c <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    133c:	e0 91 49 01 	lds	r30, 0x0149
    1340:	f0 91 4a 01 	lds	r31, 0x014A
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	9c 01       	movw	r18, r24
    1348:	b4 e0       	ldi	r27, 0x04	; 4
    134a:	22 0f       	add	r18, r18
    134c:	33 1f       	adc	r19, r19
    134e:	ba 95       	dec	r27
    1350:	e1 f7       	brne	.-8      	; 0x134a <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1352:	28 0f       	add	r18, r24
    1354:	39 1f       	adc	r19, r25
    1356:	e2 0f       	add	r30, r18
    1358:	f3 1f       	adc	r31, r19
    135a:	df 01       	movw	r26, r30
    135c:	5a 96       	adiw	r26, 0x1a	; 26
    135e:	62 8d       	ldd	r22, Z+26	; 0x1a
    1360:	11 96       	adiw	r26, 0x01	; 1
    1362:	7c 91       	ld	r23, X
    1364:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1366:	12 96       	adiw	r26, 0x02	; 2
    1368:	8c 91       	ld	r24, X
    136a:	12 97       	sbiw	r26, 0x02	; 2
    136c:	13 96       	adiw	r26, 0x03	; 3
    136e:	9c 91       	ld	r25, X
    1370:	08 95       	ret

00001372 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1372:	e0 91 49 01 	lds	r30, 0x0149
    1376:	f0 91 4a 01 	lds	r31, 0x014A
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	9c 01       	movw	r18, r24
    137e:	44 e0       	ldi	r20, 0x04	; 4
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	4a 95       	dec	r20
    1386:	e1 f7       	brne	.-8      	; 0x1380 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1388:	28 0f       	add	r18, r24
    138a:	39 1f       	adc	r19, r25
    138c:	e2 0f       	add	r30, r18
    138e:	f3 1f       	adc	r31, r19
    1390:	df 01       	movw	r26, r30
    1392:	5e 96       	adiw	r26, 0x1e	; 30
    1394:	66 8d       	ldd	r22, Z+30	; 0x1e
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	7c 91       	ld	r23, X
    139a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    139c:	12 96       	adiw	r26, 0x02	; 2
    139e:	8c 91       	ld	r24, X
    13a0:	12 97       	sbiw	r26, 0x02	; 2
    13a2:	13 96       	adiw	r26, 0x03	; 3
    13a4:	9c 91       	ld	r25, X
    13a6:	08 95       	ret

000013a8 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    13a8:	e0 91 49 01 	lds	r30, 0x0149
    13ac:	f0 91 4a 01 	lds	r31, 0x014A
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9c 01       	movw	r18, r24
    13b4:	a4 e0       	ldi	r26, 0x04	; 4
    13b6:	22 0f       	add	r18, r18
    13b8:	33 1f       	adc	r19, r19
    13ba:	aa 95       	dec	r26
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    13be:	28 0f       	add	r18, r24
    13c0:	39 1f       	adc	r19, r25
    13c2:	e2 0f       	add	r30, r18
    13c4:	f3 1f       	adc	r31, r19
    13c6:	42 8f       	std	Z+26, r20	; 0x1a
    13c8:	53 8f       	std	Z+27, r21	; 0x1b
    13ca:	64 8f       	std	Z+28, r22	; 0x1c
    13cc:	75 8f       	std	Z+29, r23	; 0x1d
}
    13ce:	08 95       	ret

000013d0 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    13d0:	e0 91 49 01 	lds	r30, 0x0149
    13d4:	f0 91 4a 01 	lds	r31, 0x014A
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9c 01       	movw	r18, r24
    13dc:	b4 e0       	ldi	r27, 0x04	; 4
    13de:	22 0f       	add	r18, r18
    13e0:	33 1f       	adc	r19, r19
    13e2:	ba 95       	dec	r27
    13e4:	e1 f7       	brne	.-8      	; 0x13de <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    13e6:	28 0f       	add	r18, r24
    13e8:	39 1f       	adc	r19, r25
    13ea:	e2 0f       	add	r30, r18
    13ec:	f3 1f       	adc	r31, r19
    13ee:	46 8f       	std	Z+30, r20	; 0x1e
    13f0:	57 8f       	std	Z+31, r21	; 0x1f
    13f2:	60 a3       	std	Z+32, r22	; 0x20
    13f4:	71 a3       	std	Z+33, r23	; 0x21
}
    13f6:	08 95       	ret

000013f8 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    13f8:	e0 91 49 01 	lds	r30, 0x0149
    13fc:	f0 91 4a 01 	lds	r31, 0x014A
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9c 01       	movw	r18, r24
    1404:	44 e0       	ldi	r20, 0x04	; 4
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	4a 95       	dec	r20
    140c:	e1 f7       	brne	.-8      	; 0x1406 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    140e:	28 0f       	add	r18, r24
    1410:	39 1f       	adc	r19, r25
    1412:	e2 0f       	add	r30, r18
    1414:	f3 1f       	adc	r31, r19
    1416:	df 01       	movw	r26, r30
    1418:	96 96       	adiw	r26, 0x26	; 38
    141a:	66 a1       	ldd	r22, Z+38	; 0x26
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	7c 91       	ld	r23, X
    1420:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1422:	12 96       	adiw	r26, 0x02	; 2
    1424:	8c 91       	ld	r24, X
    1426:	12 97       	sbiw	r26, 0x02	; 2
    1428:	13 96       	adiw	r26, 0x03	; 3
    142a:	9c 91       	ld	r25, X
    142c:	08 95       	ret

0000142e <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    142e:	e0 91 49 01 	lds	r30, 0x0149
    1432:	f0 91 4a 01 	lds	r31, 0x014A
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    143a:	77 ff       	sbrs	r23, 7
    143c:	0f c0       	rjmp	.+30     	; 0x145c <Timebase_DownCounter_SS_Set_PeriodValue+0x2e>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    143e:	c9 01       	movw	r24, r18
    1440:	b4 e0       	ldi	r27, 0x04	; 4
    1442:	88 0f       	add	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	ba 95       	dec	r27
    1448:	e1 f7       	brne	.-8      	; 0x1442 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	e8 0f       	add	r30, r24
    1450:	f9 1f       	adc	r31, r25
    1452:	16 a2       	std	Z+38, r1	; 0x26
    1454:	17 a2       	std	Z+39, r1	; 0x27
    1456:	10 a6       	std	Z+40, r1	; 0x28
    1458:	11 a6       	std	Z+41, r1	; 0x29
    145a:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    145c:	c9 01       	movw	r24, r18
    145e:	a4 e0       	ldi	r26, 0x04	; 4
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	aa 95       	dec	r26
    1466:	e1 f7       	brne	.-8      	; 0x1460 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	e8 0f       	add	r30, r24
    146e:	f9 1f       	adc	r31, r25
    1470:	46 a3       	std	Z+38, r20	; 0x26
    1472:	57 a3       	std	Z+39, r21	; 0x27
    1474:	60 a7       	std	Z+40, r22	; 0x28
    1476:	71 a7       	std	Z+41, r23	; 0x29
    1478:	08 95       	ret

0000147a <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    147a:	e0 91 49 01 	lds	r30, 0x0149
    147e:	f0 91 4a 01 	lds	r31, 0x014A
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	9c 01       	movw	r18, r24
    1486:	44 e0       	ldi	r20, 0x04	; 4
    1488:	22 0f       	add	r18, r18
    148a:	33 1f       	adc	r19, r19
    148c:	4a 95       	dec	r20
    148e:	e1 f7       	brne	.-8      	; 0x1488 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1490:	28 0f       	add	r18, r24
    1492:	39 1f       	adc	r19, r25
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	81 8d       	ldd	r24, Z+25	; 0x19
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    149a:	81 70       	andi	r24, 0x01	; 1
    149c:	08 95       	ret

0000149e <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    149e:	e0 91 49 01 	lds	r30, 0x0149
    14a2:	f0 91 4a 01 	lds	r31, 0x014A
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9c 01       	movw	r18, r24
    14aa:	54 e0       	ldi	r21, 0x04	; 4
    14ac:	22 0f       	add	r18, r18
    14ae:	33 1f       	adc	r19, r19
    14b0:	5a 95       	dec	r21
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    14b4:	28 0f       	add	r18, r24
    14b6:	39 1f       	adc	r19, r25
    14b8:	e2 0f       	add	r30, r18
    14ba:	f3 1f       	adc	r31, r19
    14bc:	81 8d       	ldd	r24, Z+25	; 0x19
    14be:	81 60       	ori	r24, 0x01	; 1
    14c0:	81 8f       	std	Z+25, r24	; 0x19
}
    14c2:	08 95       	ret

000014c4 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    14c4:	e0 91 49 01 	lds	r30, 0x0149
    14c8:	f0 91 4a 01 	lds	r31, 0x014A
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9c 01       	movw	r18, r24
    14d0:	64 e0       	ldi	r22, 0x04	; 4
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	6a 95       	dec	r22
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    14da:	28 0f       	add	r18, r24
    14dc:	39 1f       	adc	r19, r25
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	81 8d       	ldd	r24, Z+25	; 0x19
    14e4:	8e 7f       	andi	r24, 0xFE	; 254
    14e6:	81 8f       	std	Z+25, r24	; 0x19
}
    14e8:	08 95       	ret

000014ea <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    14ea:	e0 91 49 01 	lds	r30, 0x0149
    14ee:	f0 91 4a 01 	lds	r31, 0x014A
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9c 01       	movw	r18, r24
    14f6:	74 e0       	ldi	r23, 0x04	; 4
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	7a 95       	dec	r23
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <Timebase_DownCounter_SS_Reset+0xe>
    1500:	28 0f       	add	r18, r24
    1502:	39 1f       	adc	r19, r25
    1504:	e2 0f       	add	r30, r18
    1506:	f3 1f       	adc	r31, r19
    1508:	16 8e       	std	Z+30, r1	; 0x1e
    150a:	17 8e       	std	Z+31, r1	; 0x1f
    150c:	10 a2       	std	Z+32, r1	; 0x20
    150e:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1510:	12 8e       	std	Z+26, r1	; 0x1a
    1512:	13 8e       	std	Z+27, r1	; 0x1b
    1514:	14 8e       	std	Z+28, r1	; 0x1c
    1516:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1518:	12 a2       	std	Z+34, r1	; 0x22
    151a:	13 a2       	std	Z+35, r1	; 0x23
    151c:	14 a2       	std	Z+36, r1	; 0x24
    151e:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1520:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1522:	80 7e       	andi	r24, 0xE0	; 224
    1524:	81 8f       	std	Z+25, r24	; 0x19
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1526:	08 95       	ret

00001528 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1528:	e0 91 49 01 	lds	r30, 0x0149
    152c:	f0 91 4a 01 	lds	r31, 0x014A
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9c 01       	movw	r18, r24
    1534:	a4 e0       	ldi	r26, 0x04	; 4
    1536:	22 0f       	add	r18, r18
    1538:	33 1f       	adc	r19, r19
    153a:	aa 95       	dec	r26
    153c:	e1 f7       	brne	.-8      	; 0x1536 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    153e:	28 0f       	add	r18, r24
    1540:	39 1f       	adc	r19, r25
    1542:	e2 0f       	add	r30, r18
    1544:	f3 1f       	adc	r31, r19
    1546:	16 8e       	std	Z+30, r1	; 0x1e
    1548:	17 8e       	std	Z+31, r1	; 0x1f
    154a:	10 a2       	std	Z+32, r1	; 0x20
    154c:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    154e:	12 8e       	std	Z+26, r1	; 0x1a
    1550:	13 8e       	std	Z+27, r1	; 0x1b
    1552:	14 8e       	std	Z+28, r1	; 0x1c
    1554:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1556:	12 a2       	std	Z+34, r1	; 0x22
    1558:	13 a2       	std	Z+35, r1	; 0x23
    155a:	14 a2       	std	Z+36, r1	; 0x24
    155c:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    155e:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1560:	80 7e       	andi	r24, 0xE0	; 224
    1562:	81 8f       	std	Z+25, r24	; 0x19
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1564:	08 95       	ret

00001566 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1566:	e0 91 49 01 	lds	r30, 0x0149
    156a:	f0 91 4a 01 	lds	r31, 0x014A
    156e:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1570:	9c 01       	movw	r18, r24
    1572:	b4 e0       	ldi	r27, 0x04	; 4
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	ba 95       	dec	r27
    157a:	e1 f7       	brne	.-8      	; 0x1574 <Timebase_DownCounter_SS_Start+0xe>
    157c:	28 0f       	add	r18, r24
    157e:	39 1f       	adc	r19, r25
    1580:	e2 0f       	add	r30, r18
    1582:	f3 1f       	adc	r31, r19
    1584:	91 8d       	ldd	r25, Z+25	; 0x19
    1586:	89 2f       	mov	r24, r25
    1588:	86 95       	lsr	r24
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	19 f0       	breq	.+6      	; 0x1596 <Timebase_DownCounter_SS_Start+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1590:	91 7e       	andi	r25, 0xE1	; 225
    1592:	92 60       	ori	r25, 0x02	; 2
    1594:	91 8f       	std	Z+25, r25	; 0x19
    1596:	08 95       	ret

00001598 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1598:	e0 91 49 01 	lds	r30, 0x0149
    159c:	f0 91 4a 01 	lds	r31, 0x014A
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    15a2:	9c 01       	movw	r18, r24
    15a4:	44 e0       	ldi	r20, 0x04	; 4
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	4a 95       	dec	r20
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <Timebase_DownCounter_SS_Stop+0xe>
    15ae:	28 0f       	add	r18, r24
    15b0:	39 1f       	adc	r19, r25
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	91 8d       	ldd	r25, Z+25	; 0x19
    15b8:	89 2f       	mov	r24, r25
    15ba:	86 95       	lsr	r24
    15bc:	8f 70       	andi	r24, 0x0F	; 15
    15be:	82 30       	cpi	r24, 0x02	; 2
    15c0:	19 f0       	breq	.+6      	; 0x15c8 <Timebase_DownCounter_SS_Stop+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    15c2:	91 7e       	andi	r25, 0xE1	; 225
    15c4:	94 60       	ori	r25, 0x04	; 4
    15c6:	91 8f       	std	Z+25, r25	; 0x19
    15c8:	08 95       	ret

000015ca <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    15ca:	2f 92       	push	r2
    15cc:	3f 92       	push	r3
    15ce:	4f 92       	push	r4
    15d0:	5f 92       	push	r5
    15d2:	6f 92       	push	r6
    15d4:	7f 92       	push	r7
    15d6:	8f 92       	push	r8
    15d8:	9f 92       	push	r9
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <Timebase_DownCounter_SS_Set_Securely+0x26>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <Timebase_DownCounter_SS_Set_Securely+0x28>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	4a 01       	movw	r8, r20
    15f8:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    15fa:	20 91 49 01 	lds	r18, 0x0149
    15fe:	30 91 4a 01 	lds	r19, 0x014A
    1602:	3c 83       	std	Y+4, r19	; 0x04
    1604:	2b 83       	std	Y+3, r18	; 0x03
    1606:	a8 2f       	mov	r26, r24
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	ba 83       	std	Y+2, r27	; 0x02
    160c:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    160e:	fd 01       	movw	r30, r26
    1610:	64 e0       	ldi	r22, 0x04	; 4
    1612:	ee 0f       	add	r30, r30
    1614:	ff 1f       	adc	r31, r31
    1616:	6a 95       	dec	r22
    1618:	e1 f7       	brne	.-8      	; 0x1612 <Timebase_DownCounter_SS_Set_Securely+0x48>
    161a:	ea 0f       	add	r30, r26
    161c:	fb 1f       	adc	r31, r27
    161e:	e2 0f       	add	r30, r18
    1620:	f3 1f       	adc	r31, r19
    1622:	81 8d       	ldd	r24, Z+25	; 0x19
    1624:	86 95       	lsr	r24
    1626:	8f 70       	andi	r24, 0x0F	; 15
    1628:	09 f0       	breq	.+2      	; 0x162c <Timebase_DownCounter_SS_Set_Securely+0x62>
    162a:	71 c0       	rjmp	.+226    	; 0x170e <Timebase_DownCounter_SS_Set_Securely+0x144>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    162c:	82 a2       	std	Z+34, r8	; 0x22
    162e:	93 a2       	std	Z+35, r9	; 0x23
    1630:	a4 a2       	std	Z+36, r10	; 0x24
    1632:	b5 a2       	std	Z+37, r11	; 0x25

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1634:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    1636:	f9 01       	movw	r30, r18
    1638:	c0 84       	ldd	r12, Z+8	; 0x08
    163a:	d1 84       	ldd	r13, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    163c:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    163e:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1640:	22 84       	ldd	r2, Z+10	; 0x0a
    1642:	33 84       	ldd	r3, Z+11	; 0x0b
    1644:	44 84       	ldd	r4, Z+12	; 0x0c
    1646:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1648:	78 94       	sei
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    164a:	21 81       	ldd	r18, Z+1	; 0x01
    164c:	32 81       	ldd	r19, Z+2	; 0x02
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	c5 01       	movw	r24, r10
    1654:	b4 01       	movw	r22, r8
    1656:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    165a:	7b 01       	movw	r14, r22
    165c:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    165e:	ab 81       	ldd	r26, Y+3	; 0x03
    1660:	bc 81       	ldd	r27, Y+4	; 0x04
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	2d 91       	ld	r18, X+
    1666:	3c 91       	ld	r19, X
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	c5 01       	movw	r24, r10
    1670:	b4 01       	movw	r22, r8
    1672:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    1676:	c9 01       	movw	r24, r18
    1678:	da 01       	movw	r26, r20
    167a:	3c 01       	movw	r6, r24
    167c:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    167e:	56 01       	movw	r10, r12
    1680:	cc 24       	eor	r12, r12
    1682:	dd 24       	eor	r13, r13
    1684:	ae 0c       	add	r10, r14
    1686:	bf 1c       	adc	r11, r15
    1688:	c0 1e       	adc	r12, r16
    168a:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    168c:	eb 81       	ldd	r30, Y+3	; 0x03
    168e:	fc 81       	ldd	r31, Y+4	; 0x04
    1690:	81 81       	ldd	r24, Z+1	; 0x01
    1692:	92 81       	ldd	r25, Z+2	; 0x02
    1694:	a0 e0       	ldi	r26, 0x00	; 0
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	a8 16       	cp	r10, r24
    169a:	b9 06       	cpc	r11, r25
    169c:	ca 06       	cpc	r12, r26
    169e:	db 06       	cpc	r13, r27
    16a0:	94 f0       	brlt	.+36     	; 0x16c6 <Timebase_DownCounter_SS_Set_Securely+0xfc>
	  sec_val += 1;
    16a2:	08 94       	sec
    16a4:	61 1c       	adc	r6, r1
    16a6:	71 1c       	adc	r7, r1
    16a8:	81 1c       	adc	r8, r1
    16aa:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    16ac:	21 81       	ldd	r18, Z+1	; 0x01
    16ae:	32 81       	ldd	r19, Z+2	; 0x02
    16b0:	40 e0       	ldi	r20, 0x00	; 0
    16b2:	50 e0       	ldi	r21, 0x00	; 0
    16b4:	c6 01       	movw	r24, r12
    16b6:	b5 01       	movw	r22, r10
    16b8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    16bc:	ac 01       	movw	r20, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	da 01       	movw	r26, r20
    16c2:	5c 01       	movw	r10, r24
    16c4:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    16c6:	e9 81       	ldd	r30, Y+1	; 0x01
    16c8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ca:	54 e0       	ldi	r21, 0x04	; 4
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	5a 95       	dec	r21
    16d2:	e1 f7       	brne	.-8      	; 0x16cc <Timebase_DownCounter_SS_Set_Securely+0x102>
    16d4:	29 81       	ldd	r18, Y+1	; 0x01
    16d6:	3a 81       	ldd	r19, Y+2	; 0x02
    16d8:	e2 0f       	add	r30, r18
    16da:	f3 1f       	adc	r31, r19
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	e8 0f       	add	r30, r24
    16e2:	f9 1f       	adc	r31, r25
    16e4:	26 0c       	add	r2, r6
    16e6:	37 1c       	adc	r3, r7
    16e8:	48 1c       	adc	r4, r8
    16ea:	59 1c       	adc	r5, r9
    16ec:	22 8e       	std	Z+26, r2	; 0x1a
    16ee:	33 8e       	std	Z+27, r3	; 0x1b
    16f0:	44 8e       	std	Z+28, r4	; 0x1c
    16f2:	55 8e       	std	Z+29, r5	; 0x1d
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    16f4:	a6 8e       	std	Z+30, r10	; 0x1e
    16f6:	b7 8e       	std	Z+31, r11	; 0x1f
    16f8:	c0 a2       	std	Z+32, r12	; 0x20
    16fa:	d1 a2       	std	Z+33, r13	; 0x21
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    16fc:	91 8d       	ldd	r25, Z+25	; 0x19
    16fe:	89 2f       	mov	r24, r25
    1700:	86 95       	lsr	r24
    1702:	8f 70       	andi	r24, 0x0F	; 15
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	19 f0       	breq	.+6      	; 0x170e <Timebase_DownCounter_SS_Set_Securely+0x144>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1708:	91 7e       	andi	r25, 0xE1	; 225
    170a:	92 60       	ori	r25, 0x02	; 2
    170c:	91 8f       	std	Z+25, r25	; 0x19
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	08 95       	ret

0000173c <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    173c:	e0 91 49 01 	lds	r30, 0x0149
    1740:	f0 91 4a 01 	lds	r31, 0x014A
    1744:	a8 2f       	mov	r26, r24
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	9d 01       	movw	r18, r26
    174a:	94 e0       	ldi	r25, 0x04	; 4
    174c:	22 0f       	add	r18, r18
    174e:	33 1f       	adc	r19, r19
    1750:	9a 95       	dec	r25
    1752:	e1 f7       	brne	.-8      	; 0x174c <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    1754:	2a 0f       	add	r18, r26
    1756:	3b 1f       	adc	r19, r27
    1758:	e2 0f       	add	r30, r18
    175a:	f3 1f       	adc	r31, r19
    175c:	16 8e       	std	Z+30, r1	; 0x1e
    175e:	17 8e       	std	Z+31, r1	; 0x1f
    1760:	10 a2       	std	Z+32, r1	; 0x20
    1762:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1764:	12 8e       	std	Z+26, r1	; 0x1a
    1766:	13 8e       	std	Z+27, r1	; 0x1b
    1768:	14 8e       	std	Z+28, r1	; 0x1c
    176a:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    176c:	12 a2       	std	Z+34, r1	; 0x22
    176e:	13 a2       	std	Z+35, r1	; 0x23
    1770:	14 a2       	std	Z+36, r1	; 0x24
    1772:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1774:	91 8d       	ldd	r25, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1776:	90 7e       	andi	r25, 0xE0	; 224
    1778:	91 8f       	std	Z+25, r25	; 0x19
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    177a:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <Timebase_DownCounter_SS_Set_Securely>
} 
    177e:	08 95       	ret

00001780 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1780:	2f 92       	push	r2
    1782:	3f 92       	push	r3
    1784:	4f 92       	push	r4
    1786:	5f 92       	push	r5
    1788:	6f 92       	push	r6
    178a:	7f 92       	push	r7
    178c:	8f 92       	push	r8
    178e:	9f 92       	push	r9
    1790:	af 92       	push	r10
    1792:	bf 92       	push	r11
    1794:	cf 92       	push	r12
    1796:	df 92       	push	r13
    1798:	ef 92       	push	r14
    179a:	ff 92       	push	r15
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <Timebase_DownCounter_SS_Update+0x26>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <Timebase_DownCounter_SS_Update+0x28>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    17ac:	20 90 49 01 	lds	r2, 0x0149
    17b0:	30 90 4a 01 	lds	r3, 0x014A
    17b4:	68 2e       	mov	r6, r24
    17b6:	77 24       	eor	r7, r7
    17b8:	f3 01       	movw	r30, r6
    17ba:	54 e0       	ldi	r21, 0x04	; 4
    17bc:	ee 0f       	add	r30, r30
    17be:	ff 1f       	adc	r31, r31
    17c0:	5a 95       	dec	r21
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <Timebase_DownCounter_SS_Update+0x3c>
    17c4:	e6 0d       	add	r30, r6
    17c6:	f7 1d       	adc	r31, r7
    17c8:	e2 0d       	add	r30, r2
    17ca:	f3 1d       	adc	r31, r3
    17cc:	81 8d       	ldd	r24, Z+25	; 0x19
    17ce:	86 95       	lsr	r24
    17d0:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    17d2:	81 30       	cpi	r24, 0x01	; 1
    17d4:	09 f0       	breq	.+2      	; 0x17d8 <Timebase_DownCounter_SS_Update+0x58>
    17d6:	64 c0       	rjmp	.+200    	; 0x18a0 <Timebase_DownCounter_SS_Update+0x120>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    17d8:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    17da:	d1 01       	movw	r26, r2
    17dc:	18 96       	adiw	r26, 0x08	; 8
    17de:	8d 91       	ld	r24, X+
    17e0:	9c 91       	ld	r25, X
    17e2:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    17e4:	78 94       	sei
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    17e6:	5c 01       	movw	r10, r24
    17e8:	cc 24       	eor	r12, r12
    17ea:	dd 24       	eor	r13, r13

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    17ec:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    17ee:	f1 01       	movw	r30, r2
    17f0:	82 85       	ldd	r24, Z+10	; 0x0a
    17f2:	93 85       	ldd	r25, Z+11	; 0x0b
    17f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    17f6:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    17f8:	78 94       	sei
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    17fa:	f3 01       	movw	r30, r6
    17fc:	44 e0       	ldi	r20, 0x04	; 4
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	4a 95       	dec	r20
    1804:	e1 f7       	brne	.-8      	; 0x17fe <Timebase_DownCounter_SS_Update+0x7e>
    1806:	e6 0d       	add	r30, r6
    1808:	f7 1d       	adc	r31, r7
    180a:	e2 0d       	add	r30, r2
    180c:	f3 1d       	adc	r31, r3
    180e:	e2 8c       	ldd	r14, Z+26	; 0x1a
    1810:	f3 8c       	ldd	r15, Z+27	; 0x1b
    1812:	04 8d       	ldd	r16, Z+28	; 0x1c
    1814:	15 8d       	ldd	r17, Z+29	; 0x1d
    1816:	e8 1a       	sub	r14, r24
    1818:	f9 0a       	sbc	r15, r25
    181a:	0a 0b       	sbc	r16, r26
    181c:	1b 0b       	sbc	r17, r27
    181e:	17 ff       	sbrs	r17, 7
    1820:	03 c0       	rjmp	.+6      	; 0x1828 <Timebase_DownCounter_SS_Update+0xa8>
    1822:	ee 24       	eor	r14, r14
    1824:	ff 24       	eor	r15, r15
    1826:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    1828:	d1 01       	movw	r26, r2
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	2d 91       	ld	r18, X+
    182e:	3c 91       	ld	r19, X
    1830:	12 97       	sbiw	r26, 0x02	; 2
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	c8 01       	movw	r24, r16
    1838:	b7 01       	movw	r22, r14
    183a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__mulsi3>
	temp_s += temp_ss;
    183e:	f3 01       	movw	r30, r6
    1840:	34 e0       	ldi	r19, 0x04	; 4
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	3a 95       	dec	r19
    1848:	e1 f7       	brne	.-8      	; 0x1842 <Timebase_DownCounter_SS_Update+0xc2>
    184a:	e6 0d       	add	r30, r6
    184c:	f7 1d       	adc	r31, r7
    184e:	e2 0d       	add	r30, r2
    1850:	f3 1d       	adc	r31, r3
    1852:	26 8d       	ldd	r18, Z+30	; 0x1e
    1854:	37 8d       	ldd	r19, Z+31	; 0x1f
    1856:	40 a1       	ldd	r20, Z+32	; 0x20
    1858:	51 a1       	ldd	r21, Z+33	; 0x21
    185a:	2a 19       	sub	r18, r10
    185c:	3b 09       	sbc	r19, r11
    185e:	4c 09       	sbc	r20, r12
    1860:	5d 09       	sbc	r21, r13
    1862:	26 0f       	add	r18, r22
    1864:	37 1f       	adc	r19, r23
    1866:	48 1f       	adc	r20, r24
    1868:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    186a:	22 a3       	std	Z+34, r18	; 0x22
    186c:	33 a3       	std	Z+35, r19	; 0x23
    186e:	44 a3       	std	Z+36, r20	; 0x24
    1870:	55 a3       	std	Z+37, r21	; 0x25
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    1872:	12 16       	cp	r1, r18
    1874:	13 06       	cpc	r1, r19
    1876:	14 06       	cpc	r1, r20
    1878:	15 06       	cpc	r1, r21
    187a:	0c f4       	brge	.+2      	; 0x187e <Timebase_DownCounter_SS_Update+0xfe>
    187c:	62 c0       	rjmp	.+196    	; 0x1942 <Timebase_DownCounter_SS_Update+0x1c2>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    187e:	16 8e       	std	Z+30, r1	; 0x1e
    1880:	17 8e       	std	Z+31, r1	; 0x1f
    1882:	10 a2       	std	Z+32, r1	; 0x20
    1884:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1886:	12 8e       	std	Z+26, r1	; 0x1a
    1888:	13 8e       	std	Z+27, r1	; 0x1b
    188a:	14 8e       	std	Z+28, r1	; 0x1c
    188c:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    188e:	12 a2       	std	Z+34, r1	; 0x22
    1890:	13 a2       	std	Z+35, r1	; 0x23
    1892:	14 a2       	std	Z+36, r1	; 0x24
    1894:	15 a2       	std	Z+37, r1	; 0x25
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1896:	81 8d       	ldd	r24, Z+25	; 0x19
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1898:	80 7e       	andi	r24, 0xE0	; 224
    189a:	88 60       	ori	r24, 0x08	; 8
    189c:	81 8f       	std	Z+25, r24	; 0x19
    189e:	51 c0       	rjmp	.+162    	; 0x1942 <Timebase_DownCounter_SS_Update+0x1c2>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <Timebase_DownCounter_SS_Update+0x126>
    18a4:	4e c0       	rjmp	.+156    	; 0x1942 <Timebase_DownCounter_SS_Update+0x1c2>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    18a6:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    18a8:	f1 01       	movw	r30, r2
    18aa:	40 84       	ldd	r4, Z+8	; 0x08
    18ac:	51 84       	ldd	r5, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    18ae:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    18b0:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    18b2:	d1 01       	movw	r26, r2
    18b4:	1a 96       	adiw	r26, 0x0a	; 10
    18b6:	8d 90       	ld	r8, X+
    18b8:	9d 90       	ld	r9, X+
    18ba:	ad 90       	ld	r10, X+
    18bc:	bc 90       	ld	r11, X
    18be:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    18c0:	78 94       	sei
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    18c2:	63 01       	movw	r12, r6
    18c4:	24 e0       	ldi	r18, 0x04	; 4
    18c6:	cc 0c       	add	r12, r12
    18c8:	dd 1c       	adc	r13, r13
    18ca:	2a 95       	dec	r18
    18cc:	e1 f7       	brne	.-8      	; 0x18c6 <Timebase_DownCounter_SS_Update+0x146>
    18ce:	c6 0c       	add	r12, r6
    18d0:	d7 1c       	adc	r13, r7
    18d2:	c2 0c       	add	r12, r2
    18d4:	d3 1c       	adc	r13, r3
    18d6:	d6 01       	movw	r26, r12
    18d8:	92 96       	adiw	r26, 0x22	; 34
    18da:	8d 91       	ld	r24, X+
    18dc:	9d 91       	ld	r25, X+
    18de:	0d 90       	ld	r0, X+
    18e0:	bc 91       	ld	r27, X
    18e2:	a0 2d       	mov	r26, r0
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	ab 83       	std	Y+3, r26	; 0x03
    18ea:	bc 83       	std	Y+4, r27	; 0x04
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    18ec:	f1 01       	movw	r30, r2
    18ee:	21 81       	ldd	r18, Z+1	; 0x01
    18f0:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    18f2:	e1 80       	ldd	r14, Z+1	; 0x01
    18f4:	f2 80       	ldd	r15, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    1902:	82 0e       	add	r8, r18
    1904:	93 1e       	adc	r9, r19
    1906:	a4 1e       	adc	r10, r20
    1908:	b5 1e       	adc	r11, r21
    190a:	d6 01       	movw	r26, r12
    190c:	5a 96       	adiw	r26, 0x1a	; 26
    190e:	8d 92       	st	X+, r8
    1910:	9d 92       	st	X+, r9
    1912:	ad 92       	st	X+, r10
    1914:	bc 92       	st	X, r11
    1916:	5d 97       	sbiw	r26, 0x1d	; 29
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1918:	00 e0       	ldi	r16, 0x00	; 0
    191a:	10 e0       	ldi	r17, 0x00	; 0
    191c:	69 81       	ldd	r22, Y+1	; 0x01
    191e:	7a 81       	ldd	r23, Y+2	; 0x02
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	a8 01       	movw	r20, r16
    1926:	97 01       	movw	r18, r14
    1928:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodsi4>
    192c:	66 24       	eor	r6, r6
    192e:	77 24       	eor	r7, r7
    1930:	46 0e       	add	r4, r22
    1932:	57 1e       	adc	r5, r23
    1934:	68 1e       	adc	r6, r24
    1936:	79 1e       	adc	r7, r25
    1938:	f6 01       	movw	r30, r12
    193a:	46 8e       	std	Z+30, r4	; 0x1e
    193c:	57 8e       	std	Z+31, r5	; 0x1f
    193e:	60 a2       	std	Z+32, r6	; 0x20
    1940:	71 a2       	std	Z+33, r7	; 0x21
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	0f 90       	pop	r0
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	1f 91       	pop	r17
    1950:	0f 91       	pop	r16
    1952:	ff 90       	pop	r15
    1954:	ef 90       	pop	r14
    1956:	df 90       	pop	r13
    1958:	cf 90       	pop	r12
    195a:	bf 90       	pop	r11
    195c:	af 90       	pop	r10
    195e:	9f 90       	pop	r9
    1960:	8f 90       	pop	r8
    1962:	7f 90       	pop	r7
    1964:	6f 90       	pop	r6
    1966:	5f 90       	pop	r5
    1968:	4f 90       	pop	r4
    196a:	3f 90       	pop	r3
    196c:	2f 90       	pop	r2
    196e:	08 95       	ret

00001970 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	e0 91 49 01 	lds	r30, 0x0149
    1976:	f0 91 4a 01 	lds	r31, 0x014A
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	9c 01       	movw	r18, r24
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	22 0f       	add	r18, r18
    1982:	33 1f       	adc	r19, r19
    1984:	6a 95       	dec	r22
    1986:	e1 f7       	brne	.-8      	; 0x1980 <Timebase_DownCounter_SS_Expired+0x10>
    1988:	28 0f       	add	r18, r24
    198a:	39 1f       	adc	r19, r25
    198c:	e2 0f       	add	r30, r18
    198e:	f3 1f       	adc	r31, r19
    1990:	81 8d       	ldd	r24, Z+25	; 0x19
    1992:	86 95       	lsr	r24
    1994:	8f 70       	andi	r24, 0x0F	; 15
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	09 f4       	brne	.+2      	; 0x199c <Timebase_DownCounter_SS_Expired+0x2c>
    199a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    199c:	84 2f       	mov	r24, r20
    199e:	08 95       	ret

000019a0 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    19a0:	e0 91 49 01 	lds	r30, 0x0149
    19a4:	f0 91 4a 01 	lds	r31, 0x014A
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    19aa:	9c 01       	movw	r18, r24
    19ac:	74 e0       	ldi	r23, 0x04	; 4
    19ae:	22 0f       	add	r18, r18
    19b0:	33 1f       	adc	r19, r19
    19b2:	7a 95       	dec	r23
    19b4:	e1 f7       	brne	.-8      	; 0x19ae <Timebase_DownCounter_SS_Expired_Event+0xe>
    19b6:	28 0f       	add	r18, r24
    19b8:	39 1f       	adc	r19, r25
    19ba:	e2 0f       	add	r30, r18
    19bc:	f3 1f       	adc	r31, r19
    19be:	81 8d       	ldd	r24, Z+25	; 0x19
    19c0:	86 95       	lsr	r24
    19c2:	8f 70       	andi	r24, 0x0F	; 15
    19c4:	84 30       	cpi	r24, 0x04	; 4
    19c6:	11 f0       	breq	.+4      	; 0x19cc <Timebase_DownCounter_SS_Expired_Event+0x2c>
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    19cc:	16 8e       	std	Z+30, r1	; 0x1e
    19ce:	17 8e       	std	Z+31, r1	; 0x1f
    19d0:	10 a2       	std	Z+32, r1	; 0x20
    19d2:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    19d4:	12 8e       	std	Z+26, r1	; 0x1a
    19d6:	13 8e       	std	Z+27, r1	; 0x1b
    19d8:	14 8e       	std	Z+28, r1	; 0x1c
    19da:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    19dc:	12 a2       	std	Z+34, r1	; 0x22
    19de:	13 a2       	std	Z+35, r1	; 0x23
    19e0:	14 a2       	std	Z+36, r1	; 0x24
    19e2:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    19e4:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    19e6:	80 7e       	andi	r24, 0xE0	; 224
    19e8:	81 8f       	std	Z+25, r24	; 0x19
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    19ec:	08 95       	ret

000019ee <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    19f2:	c0 91 49 01 	lds	r28, 0x0149
    19f6:	d0 91 4a 01 	lds	r29, 0x014A
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    19fe:	f9 01       	movw	r30, r18
    1a00:	b4 e0       	ldi	r27, 0x04	; 4
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	ba 95       	dec	r27
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    1a0a:	e2 0f       	add	r30, r18
    1a0c:	f3 1f       	adc	r31, r19
    1a0e:	ec 0f       	add	r30, r28
    1a10:	fd 1f       	adc	r31, r29
    1a12:	81 8d       	ldd	r24, Z+25	; 0x19
    1a14:	80 fd       	sbrc	r24, 0
    1a16:	20 c0       	rjmp	.+64     	; 0x1a58 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1a18:	82 a1       	ldd	r24, Z+34	; 0x22
    1a1a:	93 a1       	ldd	r25, Z+35	; 0x23
    1a1c:	a4 a1       	ldd	r26, Z+36	; 0x24
    1a1e:	b5 a1       	ldd	r27, Z+37	; 0x25
    1a20:	84 1b       	sub	r24, r20
    1a22:	95 0b       	sbc	r25, r21
    1a24:	a6 0b       	sbc	r26, r22
    1a26:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1a28:	b7 ff       	sbrs	r27, 7
    1a2a:	05 c0       	rjmp	.+10     	; 0x1a36 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x48>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1a2c:	16 a2       	std	Z+38, r1	; 0x26
    1a2e:	17 a2       	std	Z+39, r1	; 0x27
    1a30:	10 a6       	std	Z+40, r1	; 0x28
    1a32:	11 a6       	std	Z+41, r1	; 0x29
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1a36:	86 a3       	std	Z+38, r24	; 0x26
    1a38:	97 a3       	std	Z+39, r25	; 0x27
    1a3a:	a0 a7       	std	Z+40, r26	; 0x28
    1a3c:	b1 a7       	std	Z+41, r27	; 0x29
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1a3e:	f9 01       	movw	r30, r18
    1a40:	a4 e0       	ldi	r26, 0x04	; 4
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	aa 95       	dec	r26
    1a48:	e1 f7       	brne	.-8      	; 0x1a42 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    1a4a:	e2 0f       	add	r30, r18
    1a4c:	f3 1f       	adc	r31, r19
    1a4e:	ec 0f       	add	r30, r28
    1a50:	fd 1f       	adc	r31, r29
    1a52:	81 8d       	ldd	r24, Z+25	; 0x19
    1a54:	81 60       	ori	r24, 0x01	; 1
    1a56:	81 8f       	std	Z+25, r24	; 0x19
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1a5e:	e0 91 49 01 	lds	r30, 0x0149
    1a62:	f0 91 4a 01 	lds	r31, 0x014A
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1a68:	9c 01       	movw	r18, r24
    1a6a:	44 e0       	ldi	r20, 0x04	; 4
    1a6c:	22 0f       	add	r18, r18
    1a6e:	33 1f       	adc	r19, r19
    1a70:	4a 95       	dec	r20
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    1a74:	28 0f       	add	r18, r24
    1a76:	39 1f       	adc	r19, r25
    1a78:	e2 0f       	add	r30, r18
    1a7a:	f3 1f       	adc	r31, r19
    1a7c:	22 a1       	ldd	r18, Z+34	; 0x22
    1a7e:	33 a1       	ldd	r19, Z+35	; 0x23
    1a80:	44 a1       	ldd	r20, Z+36	; 0x24
    1a82:	55 a1       	ldd	r21, Z+37	; 0x25
    1a84:	86 a1       	ldd	r24, Z+38	; 0x26
    1a86:	97 a1       	ldd	r25, Z+39	; 0x27
    1a88:	a0 a5       	ldd	r26, Z+40	; 0x28
    1a8a:	b1 a5       	ldd	r27, Z+41	; 0x29
    1a8c:	28 1b       	sub	r18, r24
    1a8e:	39 0b       	sbc	r19, r25
    1a90:	4a 0b       	sbc	r20, r26
    1a92:	5b 0b       	sbc	r21, r27
    1a94:	57 ff       	sbrs	r21, 7
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x42>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1aa0:	b9 01       	movw	r22, r18
    1aa2:	ca 01       	movw	r24, r20
    1aa4:	08 95       	ret

00001aa6 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1aaa:	c0 91 49 01 	lds	r28, 0x0149
    1aae:	d0 91 4a 01 	lds	r29, 0x014A
    1ab2:	68 2f       	mov	r22, r24
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1ab6:	fb 01       	movw	r30, r22
    1ab8:	a4 e0       	ldi	r26, 0x04	; 4
    1aba:	ee 0f       	add	r30, r30
    1abc:	ff 1f       	adc	r31, r31
    1abe:	aa 95       	dec	r26
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    1ac2:	e6 0f       	add	r30, r22
    1ac4:	f7 1f       	adc	r31, r23
    1ac6:	ec 0f       	add	r30, r28
    1ac8:	fd 1f       	adc	r31, r29
    1aca:	22 a1       	ldd	r18, Z+34	; 0x22
    1acc:	33 a1       	ldd	r19, Z+35	; 0x23
    1ace:	44 a1       	ldd	r20, Z+36	; 0x24
    1ad0:	55 a1       	ldd	r21, Z+37	; 0x25
    1ad2:	86 a1       	ldd	r24, Z+38	; 0x26
    1ad4:	97 a1       	ldd	r25, Z+39	; 0x27
    1ad6:	a0 a5       	ldd	r26, Z+40	; 0x28
    1ad8:	b1 a5       	ldd	r27, Z+41	; 0x29
    1ada:	28 1b       	sub	r18, r24
    1adc:	39 0b       	sbc	r19, r25
    1ade:	4a 0b       	sbc	r20, r26
    1ae0:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1ae2:	57 fd       	sbrc	r21, 7
    1ae4:	07 c0       	rjmp	.+14     	; 0x1af4 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1ae6:	21 15       	cp	r18, r1
    1ae8:	31 05       	cpc	r19, r1
    1aea:	41 05       	cpc	r20, r1
    1aec:	51 05       	cpc	r21, r1
    1aee:	11 f0       	breq	.+4      	; 0x1af4 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	10 c0       	rjmp	.+32     	; 0x1b14 <Timebase_DownCounter_SS_Period_Value_Expired+0x6e>
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	cb 01       	movw	r24, r22
    1af8:	54 e0       	ldi	r21, 0x04	; 4
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	5a 95       	dec	r21
    1b00:	e1 f7       	brne	.-8      	; 0x1afa <Timebase_DownCounter_SS_Period_Value_Expired+0x54>
    1b02:	86 0f       	add	r24, r22
    1b04:	97 1f       	adc	r25, r23
    1b06:	c8 0f       	add	r28, r24
    1b08:	d9 1f       	adc	r29, r25
    1b0a:	89 8d       	ldd	r24, Y+25	; 0x19
    1b0c:	80 ff       	sbrs	r24, 0
    1b0e:	21 e0       	ldi	r18, 0x01	; 1
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1b14:	82 2f       	mov	r24, r18
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1b1c:	1f 93       	push	r17
    1b1e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    1b20:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <Timebase_DownCounter_SS_Period_Value_Expired>
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x38>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1b2c:	e0 91 49 01 	lds	r30, 0x0149
    1b30:	f0 91 4a 01 	lds	r31, 0x014A
    1b34:	21 2f       	mov	r18, r17
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	c9 01       	movw	r24, r18
    1b3a:	b4 e0       	ldi	r27, 0x04	; 4
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	ba 95       	dec	r27
    1b42:	e1 f7       	brne	.-8      	; 0x1b3c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    1b44:	82 0f       	add	r24, r18
    1b46:	93 1f       	adc	r25, r19
    1b48:	e8 0f       	add	r30, r24
    1b4a:	f9 1f       	adc	r31, r25
    1b4c:	81 8d       	ldd	r24, Z+25	; 0x19
    1b4e:	8e 7f       	andi	r24, 0xFE	; 254
    1b50:	81 8f       	std	Z+25, r24	; 0x19
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1b54:	1f 91       	pop	r17
    1b56:	08 95       	ret

00001b58 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	0e 94 c0 0b 	call	0x1780	; 0x1780 <Timebase_DownCounter_SS_Update>
  }
}
    1b5e:	08 95       	ret

00001b60 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1b60:	e0 91 49 01 	lds	r30, 0x0149
    1b64:	f0 91 4a 01 	lds	r31, 0x014A
    1b68:	16 8e       	std	Z+30, r1	; 0x1e
    1b6a:	17 8e       	std	Z+31, r1	; 0x1f
    1b6c:	10 a2       	std	Z+32, r1	; 0x20
    1b6e:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1b70:	12 8e       	std	Z+26, r1	; 0x1a
    1b72:	13 8e       	std	Z+27, r1	; 0x1b
    1b74:	14 8e       	std	Z+28, r1	; 0x1c
    1b76:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1b78:	12 a2       	std	Z+34, r1	; 0x22
    1b7a:	13 a2       	std	Z+35, r1	; 0x23
    1b7c:	14 a2       	std	Z+36, r1	; 0x24
    1b7e:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1b80:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1b82:	80 7e       	andi	r24, 0xE0	; 224
    1b84:	81 8f       	std	Z+25, r24	; 0x19

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1b86:	08 95       	ret

00001b88 <Timebase_Reset>:
void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1b88:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1b8c:	0e 94 36 09 	call	0x126c	; 0x126c <Timebase_DownCounter_Reset_All>
  #endif
  
}
    1b90:	08 95       	ret

00001b92 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1b92:	0f 93       	push	r16
    1b94:	1f 93       	push	r17
    1b96:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1b98:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1b9c:	c8 01       	movw	r24, r16
    1b9e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <Timebase_Timer_Config>
  Timebase_Reset();
    1ba2:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <Timebase_Reset>
}
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	08 95       	ret

00001bac <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1bac:	e0 91 49 01 	lds	r30, 0x0149
    1bb0:	f0 91 4a 01 	lds	r31, 0x014A
    1bb4:	87 89       	ldd	r24, Z+23	; 0x17
    1bb6:	83 ff       	sbrs	r24, 3
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <Timebase_Main_Loop_Executables+0x20>
    Timebase_DownCounter_SS_Update_All();
    1bba:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1bbe:	e0 91 49 01 	lds	r30, 0x0149
    1bc2:	f0 91 4a 01 	lds	r31, 0x014A
    1bc6:	87 89       	ldd	r24, Z+23	; 0x17
    1bc8:	87 7f       	andi	r24, 0xF7	; 247
    1bca:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    1bcc:	e0 91 49 01 	lds	r30, 0x0149
    1bd0:	f0 91 4a 01 	lds	r31, 0x014A
    1bd4:	87 89       	ldd	r24, Z+23	; 0x17
    1bd6:	81 ff       	sbrs	r24, 1
    1bd8:	09 c0       	rjmp	.+18     	; 0x1bec <Timebase_Main_Loop_Executables+0x40>
    Timebase_DownCounter_Update_All();
    1bda:	0e 94 32 09 	call	0x1264	; 0x1264 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    1bde:	e0 91 49 01 	lds	r30, 0x0149
    1be2:	f0 91 4a 01 	lds	r31, 0x014A
    1be6:	87 89       	ldd	r24, Z+23	; 0x17
    1be8:	8d 7f       	andi	r24, 0xFD	; 253
    1bea:	87 8b       	std	Z+23, r24	; 0x17
    1bec:	08 95       	ret

00001bee <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1bee:	e0 91 49 01 	lds	r30, 0x0149
    1bf2:	f0 91 4a 01 	lds	r31, 0x014A
    1bf6:	80 85       	ldd	r24, Z+8	; 0x08
    1bf8:	91 85       	ldd	r25, Z+9	; 0x09
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	91 87       	std	Z+9, r25	; 0x09
    1bfe:	80 87       	std	Z+8, r24	; 0x08
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1c00:	87 89       	ldd	r24, Z+23	; 0x17
    1c02:	88 60       	ori	r24, 0x08	; 8
    1c04:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1c06:	80 85       	ldd	r24, Z+8	; 0x08
    1c08:	91 85       	ldd	r25, Z+9	; 0x09
    1c0a:	61 81       	ldd	r22, Z+1	; 0x01
    1c0c:	72 81       	ldd	r23, Z+2	; 0x02
    1c0e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__udivmodhi4>
    1c12:	89 2b       	or	r24, r25
    1c14:	81 f4       	brne	.+32     	; 0x1c36 <Timebase_ISR_Executables+0x48>
    Timebase->Time.Seconds++;
    1c16:	82 85       	ldd	r24, Z+10	; 0x0a
    1c18:	93 85       	ldd	r25, Z+11	; 0x0b
    1c1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c1e:	01 96       	adiw	r24, 0x01	; 1
    1c20:	a1 1d       	adc	r26, r1
    1c22:	b1 1d       	adc	r27, r1
    1c24:	82 87       	std	Z+10, r24	; 0x0a
    1c26:	93 87       	std	Z+11, r25	; 0x0b
    1c28:	a4 87       	std	Z+12, r26	; 0x0c
    1c2a:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    1c2c:	11 86       	std	Z+9, r1	; 0x09
    1c2e:	10 86       	std	Z+8, r1	; 0x08
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    1c30:	87 89       	ldd	r24, Z+23	; 0x17
    1c32:	82 60       	ori	r24, 0x02	; 2
    1c34:	87 8b       	std	Z+23, r24	; 0x17
    1c36:	08 95       	ret

00001c38 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    1c38:	1f 92       	push	r1
    1c3a:	0f 92       	push	r0
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	0f 92       	push	r0
    1c40:	11 24       	eor	r1, r1
    1c42:	2f 93       	push	r18
    1c44:	3f 93       	push	r19
    1c46:	4f 93       	push	r20
    1c48:	5f 93       	push	r21
    1c4a:	6f 93       	push	r22
    1c4c:	7f 93       	push	r23
    1c4e:	8f 93       	push	r24
    1c50:	9f 93       	push	r25
    1c52:	af 93       	push	r26
    1c54:	bf 93       	push	r27
    1c56:	ef 93       	push	r30
    1c58:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1c5a:	e0 91 49 01 	lds	r30, 0x0149
    1c5e:	f0 91 4a 01 	lds	r31, 0x014A
    1c62:	83 81       	ldd	r24, Z+3	; 0x03
    1c64:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1c66:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <Timebase_ISR_Executables>
}
    1c6a:	ff 91       	pop	r31
    1c6c:	ef 91       	pop	r30
    1c6e:	bf 91       	pop	r27
    1c70:	af 91       	pop	r26
    1c72:	9f 91       	pop	r25
    1c74:	8f 91       	pop	r24
    1c76:	7f 91       	pop	r23
    1c78:	6f 91       	pop	r22
    1c7a:	5f 91       	pop	r21
    1c7c:	4f 91       	pop	r20
    1c7e:	3f 91       	pop	r19
    1c80:	2f 91       	pop	r18
    1c82:	0f 90       	pop	r0
    1c84:	0f be       	out	0x3f, r0	; 63
    1c86:	0f 90       	pop	r0
    1c88:	1f 90       	pop	r1
    1c8a:	18 95       	reti

00001c8c <__mulsi3>:
    1c8c:	62 9f       	mul	r22, r18
    1c8e:	d0 01       	movw	r26, r0
    1c90:	73 9f       	mul	r23, r19
    1c92:	f0 01       	movw	r30, r0
    1c94:	82 9f       	mul	r24, r18
    1c96:	e0 0d       	add	r30, r0
    1c98:	f1 1d       	adc	r31, r1
    1c9a:	64 9f       	mul	r22, r20
    1c9c:	e0 0d       	add	r30, r0
    1c9e:	f1 1d       	adc	r31, r1
    1ca0:	92 9f       	mul	r25, r18
    1ca2:	f0 0d       	add	r31, r0
    1ca4:	83 9f       	mul	r24, r19
    1ca6:	f0 0d       	add	r31, r0
    1ca8:	74 9f       	mul	r23, r20
    1caa:	f0 0d       	add	r31, r0
    1cac:	65 9f       	mul	r22, r21
    1cae:	f0 0d       	add	r31, r0
    1cb0:	99 27       	eor	r25, r25
    1cb2:	72 9f       	mul	r23, r18
    1cb4:	b0 0d       	add	r27, r0
    1cb6:	e1 1d       	adc	r30, r1
    1cb8:	f9 1f       	adc	r31, r25
    1cba:	63 9f       	mul	r22, r19
    1cbc:	b0 0d       	add	r27, r0
    1cbe:	e1 1d       	adc	r30, r1
    1cc0:	f9 1f       	adc	r31, r25
    1cc2:	bd 01       	movw	r22, r26
    1cc4:	cf 01       	movw	r24, r30
    1cc6:	11 24       	eor	r1, r1
    1cc8:	08 95       	ret

00001cca <__udivmodhi4>:
    1cca:	aa 1b       	sub	r26, r26
    1ccc:	bb 1b       	sub	r27, r27
    1cce:	51 e1       	ldi	r21, 0x11	; 17
    1cd0:	07 c0       	rjmp	.+14     	; 0x1ce0 <__udivmodhi4_ep>

00001cd2 <__udivmodhi4_loop>:
    1cd2:	aa 1f       	adc	r26, r26
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	a6 17       	cp	r26, r22
    1cd8:	b7 07       	cpc	r27, r23
    1cda:	10 f0       	brcs	.+4      	; 0x1ce0 <__udivmodhi4_ep>
    1cdc:	a6 1b       	sub	r26, r22
    1cde:	b7 0b       	sbc	r27, r23

00001ce0 <__udivmodhi4_ep>:
    1ce0:	88 1f       	adc	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	5a 95       	dec	r21
    1ce6:	a9 f7       	brne	.-22     	; 0x1cd2 <__udivmodhi4_loop>
    1ce8:	80 95       	com	r24
    1cea:	90 95       	com	r25
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	08 95       	ret

00001cf2 <__udivmodsi4>:
    1cf2:	a1 e2       	ldi	r26, 0x21	; 33
    1cf4:	1a 2e       	mov	r1, r26
    1cf6:	aa 1b       	sub	r26, r26
    1cf8:	bb 1b       	sub	r27, r27
    1cfa:	fd 01       	movw	r30, r26
    1cfc:	0d c0       	rjmp	.+26     	; 0x1d18 <__udivmodsi4_ep>

00001cfe <__udivmodsi4_loop>:
    1cfe:	aa 1f       	adc	r26, r26
    1d00:	bb 1f       	adc	r27, r27
    1d02:	ee 1f       	adc	r30, r30
    1d04:	ff 1f       	adc	r31, r31
    1d06:	a2 17       	cp	r26, r18
    1d08:	b3 07       	cpc	r27, r19
    1d0a:	e4 07       	cpc	r30, r20
    1d0c:	f5 07       	cpc	r31, r21
    1d0e:	20 f0       	brcs	.+8      	; 0x1d18 <__udivmodsi4_ep>
    1d10:	a2 1b       	sub	r26, r18
    1d12:	b3 0b       	sbc	r27, r19
    1d14:	e4 0b       	sbc	r30, r20
    1d16:	f5 0b       	sbc	r31, r21

00001d18 <__udivmodsi4_ep>:
    1d18:	66 1f       	adc	r22, r22
    1d1a:	77 1f       	adc	r23, r23
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	1a 94       	dec	r1
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <__udivmodsi4_loop>
    1d24:	60 95       	com	r22
    1d26:	70 95       	com	r23
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	9b 01       	movw	r18, r22
    1d2e:	ac 01       	movw	r20, r24
    1d30:	bd 01       	movw	r22, r26
    1d32:	cf 01       	movw	r24, r30
    1d34:	08 95       	ret

00001d36 <__divmodsi4>:
    1d36:	97 fb       	bst	r25, 7
    1d38:	09 2e       	mov	r0, r25
    1d3a:	05 26       	eor	r0, r21
    1d3c:	0e d0       	rcall	.+28     	; 0x1d5a <__divmodsi4_neg1>
    1d3e:	57 fd       	sbrc	r21, 7
    1d40:	04 d0       	rcall	.+8      	; 0x1d4a <__divmodsi4_neg2>
    1d42:	d7 df       	rcall	.-82     	; 0x1cf2 <__udivmodsi4>
    1d44:	0a d0       	rcall	.+20     	; 0x1d5a <__divmodsi4_neg1>
    1d46:	00 1c       	adc	r0, r0
    1d48:	38 f4       	brcc	.+14     	; 0x1d58 <__divmodsi4_exit>

00001d4a <__divmodsi4_neg2>:
    1d4a:	50 95       	com	r21
    1d4c:	40 95       	com	r20
    1d4e:	30 95       	com	r19
    1d50:	21 95       	neg	r18
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	4f 4f       	sbci	r20, 0xFF	; 255
    1d56:	5f 4f       	sbci	r21, 0xFF	; 255

00001d58 <__divmodsi4_exit>:
    1d58:	08 95       	ret

00001d5a <__divmodsi4_neg1>:
    1d5a:	f6 f7       	brtc	.-4      	; 0x1d58 <__divmodsi4_exit>
    1d5c:	90 95       	com	r25
    1d5e:	80 95       	com	r24
    1d60:	70 95       	com	r23
    1d62:	61 95       	neg	r22
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
    1d66:	8f 4f       	sbci	r24, 0xFF	; 255
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	08 95       	ret

00001d6c <_exit>:
    1d6c:	f8 94       	cli

00001d6e <__stop_program>:
    1d6e:	ff cf       	rjmp	.-2      	; 0x1d6e <__stop_program>
