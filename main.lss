
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000030c4  00003158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000093  00800114  00800114  0000316c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017aa  00000000  00000000  000031cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004638  00000000  00000000  00004976  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  00008fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000021d6  00000000  00000000  00009569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  0000b740  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000199b  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b20  00000000  00000000  0000db3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f65b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	f0 e3       	ldi	r31, 0x30	; 48
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3a       	cpi	r26, 0xA7	; 167
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 60 18 	jmp	0x30c0	; 0x30c0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e2       	ldi	r20, 0x20	; 32
      dc:	5e e4       	ldi	r21, 0x4E	; 78
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 90 05 	call	0xb20	; 0xb20 <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	42 e1       	ldi	r20, 0x12	; 18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	51 e7       	ldi	r21, 0x71	; 113
      fa:	62 e0       	ldi	r22, 0x02	; 2
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	4e e0       	ldi	r20, 0x0E	; 14
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 ef 12 	call	0x25de	; 0x25de <Timebase_DownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(50);
     110:	82 e3       	ldi	r24, 0x32	; 50
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 07 03 	call	0x60e	; 0x60e <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 a2 03 	call	0x744	; 0x744 <Timebase_UpCounter_SS_Get_Value>
     11e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <UART_Transmit_Number>
	UART_Transmit_Text(",");
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <Timebase_UpCounter_Get_Value>
     130:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <UART_Transmit_Number>
	UART_Transmit_Text(",");
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <Timebase_DownCounter_SS_Get_Value>
     142:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <UART_Transmit_Number>
	UART_Transmit_Text(",");
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 8b 11 	call	0x2316	; 0x2316 <Timebase_DownCounter_Get_Value>
     154:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     160:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     162:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     166:	5e 98       	cbi	0x0b, 6	; 11
     168:	d3 cf       	rjmp	.-90     	; 0x110 <main+0x6a>

0000016a <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     16a:	85 e4       	ldi	r24, 0x45	; 69
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	90 93 44 01 	sts	0x0144, r25
     172:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.TimerType.Value = 0;
     176:	10 92 45 01 	sts	0x0145, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     17a:	80 91 45 01 	lds	r24, 0x0145
     17e:	84 60       	ori	r24, 0x04	; 4
     180:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     184:	80 91 45 01 	lds	r24, 0x0145
     188:	87 70       	andi	r24, 0x07	; 7
     18a:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.UpdateRate = 1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	90 93 47 01 	sts	0x0147, r25
     196:	80 93 46 01 	sts	0x0146, r24
  Timebase->Time.OVFUpdateValue=0;
     19a:	10 92 48 01 	sts	0x0148, r1
  Timebase->Time.SubSecondsShadow = 0;
     19e:	10 92 54 01 	sts	0x0154, r1
     1a2:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.SecondsShadow = 0;
     1a6:	10 92 55 01 	sts	0x0155, r1
     1aa:	10 92 56 01 	sts	0x0156, r1
     1ae:	10 92 57 01 	sts	0x0157, r1
     1b2:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.SubSeconds = 0;
     1b6:	10 92 4e 01 	sts	0x014E, r1
     1ba:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Time.Seconds = 0;
     1be:	10 92 4f 01 	sts	0x014F, r1
     1c2:	10 92 50 01 	sts	0x0150, r1
     1c6:	10 92 51 01 	sts	0x0151, r1
     1ca:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.VariablesSync = 0;
     1ce:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.LastSample = 0;
     1d2:	10 92 49 01 	sts	0x0149, r1
     1d6:	10 92 4a 01 	sts	0x014A, r1
     1da:	10 92 4b 01 	sts	0x014B, r1
     1de:	10 92 4c 01 	sts	0x014C, r1
    Timebase->Time.StartTimeSeconds = 0;
	Timebase->Time.StartTimeSubSeconds = 0;
	Timebase->Time.Status = 0;
  #endif
  
  Timebase->UpdateRequest = 0;
     1e2:	10 92 5a 01 	sts	0x015A, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     1e6:	10 92 74 01 	sts	0x0174, r1
    Timebase->UpCounter[i].EndValue = 0;
     1ea:	10 92 75 01 	sts	0x0175, r1
     1ee:	10 92 76 01 	sts	0x0176, r1
     1f2:	10 92 77 01 	sts	0x0177, r1
     1f6:	10 92 78 01 	sts	0x0178, r1
    Timebase->UpCounter[i].Target = 0;
     1fa:	10 92 79 01 	sts	0x0179, r1
     1fe:	10 92 7a 01 	sts	0x017A, r1
     202:	10 92 7b 01 	sts	0x017B, r1
     206:	10 92 7c 01 	sts	0x017C, r1
    Timebase->UpCounter[i].Temporary = 0;    
     20a:	10 92 7d 01 	sts	0x017D, r1
     20e:	10 92 7e 01 	sts	0x017E, r1
     212:	10 92 7f 01 	sts	0x017F, r1
     216:	10 92 80 01 	sts	0x0180, r1
    Timebase->UpCounter[i].Value = 0;
     21a:	10 92 81 01 	sts	0x0181, r1
     21e:	10 92 82 01 	sts	0x0182, r1
     222:	10 92 83 01 	sts	0x0183, r1
     226:	10 92 84 01 	sts	0x0184, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     22a:	10 92 85 01 	sts	0x0185, r1
     22e:	10 92 86 01 	sts	0x0186, r1
     232:	10 92 87 01 	sts	0x0187, r1
     236:	10 92 88 01 	sts	0x0188, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     23a:	10 92 5b 01 	sts	0x015B, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     23e:	10 92 5c 01 	sts	0x015C, r1
     242:	10 92 5d 01 	sts	0x015D, r1
     246:	10 92 5e 01 	sts	0x015E, r1
     24a:	10 92 5f 01 	sts	0x015F, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     24e:	10 92 60 01 	sts	0x0160, r1
     252:	10 92 61 01 	sts	0x0161, r1
     256:	10 92 62 01 	sts	0x0162, r1
     25a:	10 92 63 01 	sts	0x0163, r1
    Timebase->UpCounterSS[i].Target = 0;
     25e:	10 92 64 01 	sts	0x0164, r1
     262:	10 92 65 01 	sts	0x0165, r1
     266:	10 92 66 01 	sts	0x0166, r1
     26a:	10 92 67 01 	sts	0x0167, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     26e:	10 92 68 01 	sts	0x0168, r1
     272:	10 92 69 01 	sts	0x0169, r1
     276:	10 92 6a 01 	sts	0x016A, r1
     27a:	10 92 6b 01 	sts	0x016B, r1
    Timebase->UpCounterSS[i].Value = 0;
     27e:	10 92 6c 01 	sts	0x016C, r1
     282:	10 92 6d 01 	sts	0x016D, r1
     286:	10 92 6e 01 	sts	0x016E, r1
     28a:	10 92 6f 01 	sts	0x016F, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     28e:	10 92 70 01 	sts	0x0170, r1
     292:	10 92 71 01 	sts	0x0171, r1
     296:	10 92 72 01 	sts	0x0172, r1
     29a:	10 92 73 01 	sts	0x0173, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     29e:	10 92 9a 01 	sts	0x019A, r1
    Timebase->DownCounter[i].EndValue = 0;
     2a2:	10 92 9b 01 	sts	0x019B, r1
     2a6:	10 92 9c 01 	sts	0x019C, r1
     2aa:	10 92 9d 01 	sts	0x019D, r1
     2ae:	10 92 9e 01 	sts	0x019E, r1
    Timebase->DownCounter[i].Value = 0;
     2b2:	10 92 9f 01 	sts	0x019F, r1
     2b6:	10 92 a0 01 	sts	0x01A0, r1
     2ba:	10 92 a1 01 	sts	0x01A1, r1
     2be:	10 92 a2 01 	sts	0x01A2, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     2c2:	10 92 a3 01 	sts	0x01A3, r1
     2c6:	10 92 a4 01 	sts	0x01A4, r1
     2ca:	10 92 a5 01 	sts	0x01A5, r1
     2ce:	10 92 a6 01 	sts	0x01A6, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     2d2:	10 92 89 01 	sts	0x0189, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     2d6:	10 92 8a 01 	sts	0x018A, r1
     2da:	10 92 8b 01 	sts	0x018B, r1
     2de:	10 92 8c 01 	sts	0x018C, r1
     2e2:	10 92 8d 01 	sts	0x018D, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     2e6:	10 92 8e 01 	sts	0x018E, r1
     2ea:	10 92 8f 01 	sts	0x018F, r1
     2ee:	10 92 90 01 	sts	0x0190, r1
     2f2:	10 92 91 01 	sts	0x0191, r1
    Timebase->DownCounterSS[i].Value = 0;
     2f6:	10 92 92 01 	sts	0x0192, r1
     2fa:	10 92 93 01 	sts	0x0193, r1
     2fe:	10 92 94 01 	sts	0x0194, r1
     302:	10 92 95 01 	sts	0x0195, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     306:	10 92 96 01 	sts	0x0196, r1
     30a:	10 92 97 01 	sts	0x0197, r1
     30e:	10 92 98 01 	sts	0x0198, r1
     312:	10 92 99 01 	sts	0x0199, r1
  }
  #endif
  
}
     316:	08 95       	ret

00000318 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     318:	7f 92       	push	r7
     31a:	8f 92       	push	r8
     31c:	9f 92       	push	r9
     31e:	af 92       	push	r10
     320:	bf 92       	push	r11
     322:	cf 92       	push	r12
     324:	df 92       	push	r13
     326:	ef 92       	push	r14
     328:	ff 92       	push	r15
     32a:	0f 93       	push	r16
     32c:	1f 93       	push	r17
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
     336:	2a 97       	sbiw	r28, 0x0a	; 10
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	f8 94       	cli
     33c:	de bf       	out	0x3e, r29	; 62
     33e:	0f be       	out	0x3f, r0	; 63
     340:	cd bf       	out	0x3d, r28	; 61
     342:	8c 01       	movw	r16, r24
  uint8_t  Prescaler_val = 0, clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     344:	de 01       	movw	r26, r28
     346:	11 96       	adiw	r26, 0x01	; 1
     348:	e5 e0       	ldi	r30, 0x05	; 5
     34a:	f1 e0       	ldi	r31, 0x01	; 1
     34c:	8a e0       	ldi	r24, 0x0A	; 10
     34e:	01 90       	ld	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	81 50       	subi	r24, 0x01	; 1
     354:	e1 f7       	brne	.-8      	; 0x34e <Timebase_Timer_Config+0x36>
  int32_t  temp, curr_freq;
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     356:	c0 90 43 01 	lds	r12, 0x0143
     35a:	d0 90 44 01 	lds	r13, 0x0144
     35e:	f6 01       	movw	r30, r12
     360:	80 81       	ld	r24, Z
     362:	80 ff       	sbrs	r24, 0
     364:	31 c0       	rjmp	.+98     	; 0x3c8 <Timebase_Timer_Config+0xb0>
    
    if(UpdateRateHz == 1){
     366:	01 30       	cpi	r16, 0x01	; 1
     368:	11 05       	cpc	r17, r1
     36a:	11 f4       	brne	.+4      	; 0x370 <Timebase_Timer_Config+0x58>
     36c:	96 e0       	ldi	r25, 0x06	; 6
     36e:	19 c0       	rjmp	.+50     	; 0x3a2 <Timebase_Timer_Config+0x8a>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     370:	02 30       	cpi	r16, 0x02	; 2
     372:	11 05       	cpc	r17, r1
     374:	11 f4       	brne	.+4      	; 0x37a <Timebase_Timer_Config+0x62>
     376:	95 e0       	ldi	r25, 0x05	; 5
     378:	14 c0       	rjmp	.+40     	; 0x3a2 <Timebase_Timer_Config+0x8a>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     37a:	04 30       	cpi	r16, 0x04	; 4
     37c:	11 05       	cpc	r17, r1
     37e:	11 f4       	brne	.+4      	; 0x384 <Timebase_Timer_Config+0x6c>
     380:	94 e0       	ldi	r25, 0x04	; 4
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <Timebase_Timer_Config+0x8a>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     384:	08 30       	cpi	r16, 0x08	; 8
     386:	11 05       	cpc	r17, r1
     388:	11 f4       	brne	.+4      	; 0x38e <Timebase_Timer_Config+0x76>
     38a:	93 e0       	ldi	r25, 0x03	; 3
     38c:	0a c0       	rjmp	.+20     	; 0x3a2 <Timebase_Timer_Config+0x8a>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     38e:	00 31       	cpi	r16, 0x10	; 16
     390:	11 05       	cpc	r17, r1
     392:	11 f4       	brne	.+4      	; 0x398 <Timebase_Timer_Config+0x80>
     394:	92 e0       	ldi	r25, 0x02	; 2
     396:	05 c0       	rjmp	.+10     	; 0x3a2 <Timebase_Timer_Config+0x8a>
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	00 32       	cpi	r16, 0x20	; 32
     39c:	11 05       	cpc	r17, r1
     39e:	09 f4       	brne	.+2      	; 0x3a2 <Timebase_Timer_Config+0x8a>
     3a0:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     3a2:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     3a4:	84 b7       	in	r24, 0x34	; 52
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     3aa:	80 91 60 00 	lds	r24, 0x0060
     3ae:	80 68       	ori	r24, 0x80	; 128
     3b0:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     3b4:	80 91 60 00 	lds	r24, 0x0060
     3b8:	88 61       	ori	r24, 0x18	; 24
     3ba:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     3be:	90 64       	ori	r25, 0x40	; 64
     3c0:	90 93 60 00 	sts	0x0060, r25
    sei();
     3c4:	78 94       	sei
     3c6:	5e c0       	rjmp	.+188    	; 0x484 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     3c8:	81 fd       	sbrc	r24, 1
     3ca:	5c c0       	rjmp	.+184    	; 0x484 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     3cc:	82 ff       	sbrs	r24, 2
     3ce:	5a c0       	rjmp	.+180    	; 0x484 <Timebase_Timer_Config+0x16c>
    
	temp = F_CPU;
	
	
	temp /= UpdateRateHz;
     3d0:	98 01       	movw	r18, r16
     3d2:	40 e0       	ldi	r20, 0x00	; 0
     3d4:	50 e0       	ldi	r21, 0x00	; 0
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	7b e1       	ldi	r23, 0x1B	; 27
     3da:	87 eb       	ldi	r24, 0xB7	; 183
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     3e2:	72 2e       	mov	r7, r18
     3e4:	83 2e       	mov	r8, r19
     3e6:	94 2e       	mov	r9, r20
     3e8:	e5 2e       	mov	r14, r21
     3ea:	5e 01       	movw	r10, r28
     3ec:	08 94       	sec
     3ee:	a1 1c       	adc	r10, r1
     3f0:	b1 1c       	adc	r11, r1
     3f2:	c9 01       	movw	r24, r18
     3f4:	da 01       	movw	r26, r20
     3f6:	9c 01       	movw	r18, r24
     3f8:	ad 01       	movw	r20, r26
     3fa:	ff 24       	eor	r15, r15
     3fc:	14 c0       	rjmp	.+40     	; 0x426 <Timebase_Timer_Config+0x10e>
	clock_div_index = 0;
	curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     3fe:	f5 01       	movw	r30, r10
     400:	21 91       	ld	r18, Z+
     402:	31 91       	ld	r19, Z+
     404:	5f 01       	movw	r10, r30
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	67 2d       	mov	r22, r7
     40c:	78 2d       	mov	r23, r8
     40e:	89 2d       	mov	r24, r9
     410:	9e 2d       	mov	r25, r14
     412:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     416:	c9 01       	movw	r24, r18
     418:	da 01       	movw	r26, r20
     41a:	9c 01       	movw	r18, r24
     41c:	ad 01       	movw	r20, r26
	  clock_div_index++;
     41e:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     420:	f5 e0       	ldi	r31, 0x05	; 5
     422:	ff 16       	cp	r15, r31
     424:	31 f0       	breq	.+12     	; 0x432 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	clock_div_index = 0;
	curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     426:	2f 3f       	cpi	r18, 0xFF	; 255
     428:	31 05       	cpc	r19, r1
     42a:	41 05       	cpc	r20, r1
     42c:	51 05       	cpc	r21, r1
     42e:	09 f0       	breq	.+2      	; 0x432 <Timebase_Timer_Config+0x11a>
     430:	34 f7       	brge	.-52     	; 0x3fe <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     432:	8f 2d       	mov	r24, r15
     434:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     436:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     438:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     43a:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     43e:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     440:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     442:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     444:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     446:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     448:	88 23       	and	r24, r24
     44a:	11 f4       	brne	.+4      	; 0x450 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	0f c0       	rjmp	.+30     	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	11 f4       	brne	.+4      	; 0x458 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     454:	82 e0       	ldi	r24, 0x02	; 2
     456:	0b c0       	rjmp	.+22     	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     458:	82 30       	cpi	r24, 0x02	; 2
     45a:	11 f4       	brne	.+4      	; 0x460 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     45c:	83 e0       	ldi	r24, 0x03	; 3
     45e:	07 c0       	rjmp	.+14     	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     460:	83 30       	cpi	r24, 0x03	; 3
     462:	11 f4       	brne	.+4      	; 0x468 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	03 c0       	rjmp	.+6      	; 0x46e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	11 f4       	brne	.+4      	; 0x470 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     46c:	85 e0       	ldi	r24, 0x05	; 5
     46e:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     470:	82 2f       	mov	r24, r18
     472:	80 95       	com	r24
     474:	f6 01       	movw	r30, r12
     476:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     478:	83 81       	ldd	r24, Z+3	; 0x03
     47a:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 6e 00 	sts	0x006E, r24
    sei();
     482:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     484:	f6 01       	movw	r30, r12
     486:	12 83       	std	Z+2, r17	; 0x02
     488:	01 83       	std	Z+1, r16	; 0x01
}
     48a:	2a 96       	adiw	r28, 0x0a	; 10
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	de bf       	out	0x3e, r29	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	cd bf       	out	0x3d, r28	; 61
     496:	cf 91       	pop	r28
     498:	df 91       	pop	r29
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	08 95       	ret

000004b2 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     4b2:	f8 94       	cli
}
     4b4:	08 95       	ret

000004b6 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     4b6:	78 94       	sei
}
     4b8:	08 95       	ret

000004ba <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     4ba:	e0 91 43 01 	lds	r30, 0x0143
     4be:	f0 91 44 01 	lds	r31, 0x0144
     4c2:	26 85       	ldd	r18, Z+14	; 0x0e
     4c4:	37 85       	ldd	r19, Z+15	; 0x0f
}
     4c6:	c9 01       	movw	r24, r18
     4c8:	08 95       	ret

000004ca <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     4ca:	e0 91 43 01 	lds	r30, 0x0143
     4ce:	f0 91 44 01 	lds	r31, 0x0144
     4d2:	20 89       	ldd	r18, Z+16	; 0x10
     4d4:	31 89       	ldd	r19, Z+17	; 0x11
     4d6:	42 89       	ldd	r20, Z+18	; 0x12
     4d8:	53 89       	ldd	r21, Z+19	; 0x13
}
     4da:	b9 01       	movw	r22, r18
     4dc:	ca 01       	movw	r24, r20
     4de:	08 95       	ret

000004e0 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     4e0:	e0 91 43 01 	lds	r30, 0x0143
     4e4:	f0 91 44 01 	lds	r31, 0x0144
     4e8:	20 85       	ldd	r18, Z+8	; 0x08
     4ea:	31 85       	ldd	r19, Z+9	; 0x09
}
     4ec:	c9 01       	movw	r24, r18
     4ee:	08 95       	ret

000004f0 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     4f0:	e0 91 43 01 	lds	r30, 0x0143
     4f4:	f0 91 44 01 	lds	r31, 0x0144
     4f8:	22 85       	ldd	r18, Z+10	; 0x0a
     4fa:	33 85       	ldd	r19, Z+11	; 0x0b
     4fc:	44 85       	ldd	r20, Z+12	; 0x0c
     4fe:	55 85       	ldd	r21, Z+13	; 0x0d
}
     500:	b9 01       	movw	r22, r18
     502:	ca 01       	movw	r24, r20
     504:	08 95       	ret

00000506 <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     506:	e0 91 43 01 	lds	r30, 0x0143
     50a:	f0 91 44 01 	lds	r31, 0x0144
     50e:	91 87       	std	Z+9, r25	; 0x09
     510:	80 87       	std	Z+8, r24	; 0x08
}
     512:	08 95       	ret

00000514 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     514:	e0 91 43 01 	lds	r30, 0x0143
     518:	f0 91 44 01 	lds	r31, 0x0144
     51c:	62 87       	std	Z+10, r22	; 0x0a
     51e:	73 87       	std	Z+11, r23	; 0x0b
     520:	84 87       	std	Z+12, r24	; 0x0c
     522:	95 87       	std	Z+13, r25	; 0x0d
}
     524:	08 95       	ret

00000526 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     526:	e0 91 43 01 	lds	r30, 0x0143
     52a:	f0 91 44 01 	lds	r31, 0x0144
     52e:	84 89       	ldd	r24, Z+20	; 0x14
     530:	88 23       	and	r24, r24
     532:	81 f4       	brne	.+32     	; 0x554 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     534:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
  
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     536:	86 85       	ldd	r24, Z+14	; 0x0e
     538:	97 85       	ldd	r25, Z+15	; 0x0f
     53a:	91 87       	std	Z+9, r25	; 0x09
     53c:	80 87       	std	Z+8, r24	; 0x08
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     53e:	80 89       	ldd	r24, Z+16	; 0x10
     540:	91 89       	ldd	r25, Z+17	; 0x11
     542:	a2 89       	ldd	r26, Z+18	; 0x12
     544:	b3 89       	ldd	r27, Z+19	; 0x13
     546:	82 87       	std	Z+10, r24	; 0x0a
     548:	93 87       	std	Z+11, r25	; 0x0b
     54a:	a4 87       	std	Z+12, r26	; 0x0c
     54c:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     54e:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	84 8b       	std	Z+20, r24	; 0x14
     554:	08 95       	ret

00000556 <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     556:	6f 92       	push	r6
     558:	7f 92       	push	r7
     55a:	8f 92       	push	r8
     55c:	9f 92       	push	r9
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     574:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     576:	c0 91 43 01 	lds	r28, 0x0143
     57a:	d0 91 44 01 	lds	r29, 0x0144
     57e:	ee 84       	ldd	r14, Y+14	; 0x0e
     580:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     582:	28 89       	ldd	r18, Y+16	; 0x10
     584:	39 89       	ldd	r19, Y+17	; 0x11
     586:	4a 89       	ldd	r20, Y+18	; 0x12
     588:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     58a:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     58c:	69 81       	ldd	r22, Y+1	; 0x01
     58e:	7a 81       	ldd	r23, Y+2	; 0x02
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 04 18 	call	0x3008	; 0x3008 <__mulsi3>
     598:	3b 01       	movw	r6, r22
     59a:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     59c:	00 e0       	ldi	r16, 0x00	; 0
     59e:	10 e0       	ldi	r17, 0x00	; 0
     5a0:	6e 0c       	add	r6, r14
     5a2:	7f 1c       	adc	r7, r15
     5a4:	80 1e       	adc	r8, r16
     5a6:	91 1e       	adc	r9, r17
  smpl_val += value;
     5a8:	cc 24       	eor	r12, r12
     5aa:	dd 24       	eor	r13, r13
     5ac:	6a 0c       	add	r6, r10
     5ae:	7b 1c       	adc	r7, r11
     5b0:	8c 1c       	adc	r8, r12
     5b2:	9d 1c       	adc	r9, r13
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	14 c0       	rjmp	.+40     	; 0x5e6 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5be:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5c0:	ee 84       	ldd	r14, Y+14	; 0x0e
     5c2:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     5c4:	28 89       	ldd	r18, Y+16	; 0x10
     5c6:	39 89       	ldd	r19, Y+17	; 0x11
     5c8:	4a 89       	ldd	r20, Y+18	; 0x12
     5ca:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     5cc:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     5ce:	69 81       	ldd	r22, Y+1	; 0x01
     5d0:	7a 81       	ldd	r23, Y+2	; 0x02
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	0e 94 04 18 	call	0x3008	; 0x3008 <__mulsi3>
	curr_val += curr_ss;
     5da:	00 e0       	ldi	r16, 0x00	; 0
     5dc:	10 e0       	ldi	r17, 0x00	; 0
     5de:	6e 0d       	add	r22, r14
     5e0:	7f 1d       	adc	r23, r15
     5e2:	80 1f       	adc	r24, r16
     5e4:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5e6:	66 15       	cp	r22, r6
     5e8:	77 05       	cpc	r23, r7
     5ea:	88 05       	cpc	r24, r8
     5ec:	99 05       	cpc	r25, r9
     5ee:	3c f3       	brlt	.-50     	; 0x5be <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	bf 90       	pop	r11
     602:	af 90       	pop	r10
     604:	9f 90       	pop	r9
     606:	8f 90       	pop	r8
     608:	7f 90       	pop	r7
     60a:	6f 90       	pop	r6
     60c:	08 95       	ret

0000060e <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     60e:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     610:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     612:	e0 91 43 01 	lds	r30, 0x0143
     616:	f0 91 44 01 	lds	r31, 0x0144
     61a:	01 c0       	rjmp	.+2      	; 0x61e <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     61c:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     61e:	86 85       	ldd	r24, Z+14	; 0x0e
     620:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     622:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     624:	24 81       	ldd	r18, Z+4	; 0x04
     626:	35 81       	ldd	r19, Z+5	; 0x05
     628:	46 81       	ldd	r20, Z+6	; 0x06
     62a:	57 81       	ldd	r21, Z+7	; 0x07
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	82 17       	cp	r24, r18
     632:	93 07       	cpc	r25, r19
     634:	a4 07       	cpc	r26, r20
     636:	b5 07       	cpc	r27, r21
     638:	89 f7       	brne	.-30     	; 0x61c <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     63a:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     63c:	86 85       	ldd	r24, Z+14	; 0x0e
     63e:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     640:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	84 83       	std	Z+4, r24	; 0x04
     648:	95 83       	std	Z+5, r25	; 0x05
     64a:	a6 83       	std	Z+6, r26	; 0x06
     64c:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     64e:	24 81       	ldd	r18, Z+4	; 0x04
     650:	35 81       	ldd	r19, Z+5	; 0x05
     652:	46 81       	ldd	r20, Z+6	; 0x06
     654:	57 81       	ldd	r21, Z+7	; 0x07
     656:	cb 01       	movw	r24, r22
     658:	a0 e0       	ldi	r26, 0x00	; 0
     65a:	b0 e0       	ldi	r27, 0x00	; 0
     65c:	82 0f       	add	r24, r18
     65e:	93 1f       	adc	r25, r19
     660:	a4 1f       	adc	r26, r20
     662:	b5 1f       	adc	r27, r21
     664:	84 83       	std	Z+4, r24	; 0x04
     666:	95 83       	std	Z+5, r25	; 0x05
     668:	a6 83       	std	Z+6, r26	; 0x06
     66a:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     66c:	24 81       	ldd	r18, Z+4	; 0x04
     66e:	35 81       	ldd	r19, Z+5	; 0x05
     670:	46 81       	ldd	r20, Z+6	; 0x06
     672:	57 81       	ldd	r21, Z+7	; 0x07
     674:	81 81       	ldd	r24, Z+1	; 0x01
     676:	92 81       	ldd	r25, Z+2	; 0x02
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	28 17       	cp	r18, r24
     67e:	39 07       	cpc	r19, r25
     680:	4a 07       	cpc	r20, r26
     682:	5b 07       	cpc	r21, r27
     684:	84 f0       	brlt	.+32     	; 0x6a6 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     686:	24 81       	ldd	r18, Z+4	; 0x04
     688:	35 81       	ldd	r19, Z+5	; 0x05
     68a:	46 81       	ldd	r20, Z+6	; 0x06
     68c:	57 81       	ldd	r21, Z+7	; 0x07
     68e:	81 81       	ldd	r24, Z+1	; 0x01
     690:	92 81       	ldd	r25, Z+2	; 0x02
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	28 1b       	sub	r18, r24
     698:	39 0b       	sbc	r19, r25
     69a:	4a 0b       	sbc	r20, r26
     69c:	5b 0b       	sbc	r21, r27
     69e:	24 83       	std	Z+4, r18	; 0x04
     6a0:	35 83       	std	Z+5, r19	; 0x05
     6a2:	46 83       	std	Z+6, r20	; 0x06
     6a4:	57 83       	std	Z+7, r21	; 0x07
     6a6:	08 95       	ret

000006a8 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6a8:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6aa:	e0 91 43 01 	lds	r30, 0x0143
     6ae:	f0 91 44 01 	lds	r31, 0x0144
     6b2:	20 89       	ldd	r18, Z+16	; 0x10
     6b4:	31 89       	ldd	r19, Z+17	; 0x11
     6b6:	42 89       	ldd	r20, Z+18	; 0x12
     6b8:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     6ba:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     6bc:	a0 e0       	ldi	r26, 0x00	; 0
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	82 0f       	add	r24, r18
     6c2:	93 1f       	adc	r25, r19
     6c4:	a4 1f       	adc	r26, r20
     6c6:	b5 1f       	adc	r27, r21
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e0       	ldi	r20, 0x00	; 0
     6ce:	50 e0       	ldi	r21, 0x00	; 0
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6d2:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6d4:	20 89       	ldd	r18, Z+16	; 0x10
     6d6:	31 89       	ldd	r19, Z+17	; 0x11
     6d8:	42 89       	ldd	r20, Z+18	; 0x12
     6da:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     6dc:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     6de:	28 17       	cp	r18, r24
     6e0:	39 07       	cpc	r19, r25
     6e2:	4a 07       	cpc	r20, r26
     6e4:	5b 07       	cpc	r21, r27
     6e6:	ac f3       	brlt	.-22     	; 0x6d2 <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     6e8:	08 95       	ret

000006ea <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     6ea:	e0 91 43 01 	lds	r30, 0x0143
     6ee:	f0 91 44 01 	lds	r31, 0x0144
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	29 e1       	ldi	r18, 0x19	; 25
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	ac 01       	movw	r20, r24
     6fa:	42 9f       	mul	r20, r18
     6fc:	c0 01       	movw	r24, r0
     6fe:	43 9f       	mul	r20, r19
     700:	90 0d       	add	r25, r0
     702:	52 9f       	mul	r21, r18
     704:	90 0d       	add	r25, r0
     706:	11 24       	eor	r1, r1
     708:	e8 0f       	add	r30, r24
     70a:	f9 1f       	adc	r31, r25
     70c:	86 89       	ldd	r24, Z+22	; 0x16
     70e:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     710:	8f 70       	andi	r24, 0x0F	; 15
     712:	08 95       	ret

00000714 <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     714:	e0 91 43 01 	lds	r30, 0x0143
     718:	f0 91 44 01 	lds	r31, 0x0144
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	29 e1       	ldi	r18, 0x19	; 25
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	ac 01       	movw	r20, r24
     724:	42 9f       	mul	r20, r18
     726:	c0 01       	movw	r24, r0
     728:	43 9f       	mul	r20, r19
     72a:	90 0d       	add	r25, r0
     72c:	52 9f       	mul	r21, r18
     72e:	90 0d       	add	r25, r0
     730:	11 24       	eor	r1, r1
     732:	e8 0f       	add	r30, r24
     734:	f9 1f       	adc	r31, r25
     736:	6f 70       	andi	r22, 0x0F	; 15
     738:	66 0f       	add	r22, r22
     73a:	86 89       	ldd	r24, Z+22	; 0x16
     73c:	81 7e       	andi	r24, 0xE1	; 225
     73e:	86 2b       	or	r24, r22
     740:	86 8b       	std	Z+22, r24	; 0x16
}
     742:	08 95       	ret

00000744 <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     744:	e0 91 43 01 	lds	r30, 0x0143
     748:	f0 91 44 01 	lds	r31, 0x0144
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	29 e1       	ldi	r18, 0x19	; 25
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	ac 01       	movw	r20, r24
     754:	42 9f       	mul	r20, r18
     756:	c0 01       	movw	r24, r0
     758:	43 9f       	mul	r20, r19
     75a:	90 0d       	add	r25, r0
     75c:	52 9f       	mul	r21, r18
     75e:	90 0d       	add	r25, r0
     760:	11 24       	eor	r1, r1
     762:	e8 0f       	add	r30, r24
     764:	f9 1f       	adc	r31, r25
     766:	df 01       	movw	r26, r30
     768:	97 96       	adiw	r26, 0x27	; 39
     76a:	67 a1       	ldd	r22, Z+39	; 0x27
     76c:	11 96       	adiw	r26, 0x01	; 1
     76e:	7c 91       	ld	r23, X
     770:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	8c 91       	ld	r24, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	13 96       	adiw	r26, 0x03	; 3
     77a:	9c 91       	ld	r25, X
     77c:	08 95       	ret

0000077e <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     782:	c0 91 43 01 	lds	r28, 0x0143
     786:	d0 91 44 01 	lds	r29, 0x0144
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	29 e1       	ldi	r18, 0x19	; 25
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	fc 01       	movw	r30, r24
     792:	e2 9f       	mul	r30, r18
     794:	c0 01       	movw	r24, r0
     796:	e3 9f       	mul	r30, r19
     798:	90 0d       	add	r25, r0
     79a:	f2 9f       	mul	r31, r18
     79c:	90 0d       	add	r25, r0
     79e:	11 24       	eor	r1, r1
     7a0:	c8 0f       	add	r28, r24
     7a2:	d9 1f       	adc	r29, r25
     7a4:	ca 01       	movw	r24, r20
     7a6:	db 01       	movw	r26, r22
     7a8:	b7 ff       	sbrs	r27, 7
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <Timebase_UpCounter_SS_Set_Value+0x36>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a0 e0       	ldi	r26, 0x00	; 0
     7b2:	b0 e0       	ldi	r27, 0x00	; 0
     7b4:	8f a3       	std	Y+39, r24	; 0x27
     7b6:	98 a7       	std	Y+40, r25	; 0x28
     7b8:	a9 a7       	std	Y+41, r26	; 0x29
     7ba:	ba a7       	std	Y+42, r27	; 0x2a
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     7c2:	e0 91 43 01 	lds	r30, 0x0143
     7c6:	f0 91 44 01 	lds	r31, 0x0144
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	29 e1       	ldi	r18, 0x19	; 25
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	ac 01       	movw	r20, r24
     7d2:	42 9f       	mul	r20, r18
     7d4:	c0 01       	movw	r24, r0
     7d6:	43 9f       	mul	r20, r19
     7d8:	90 0d       	add	r25, r0
     7da:	52 9f       	mul	r21, r18
     7dc:	90 0d       	add	r25, r0
     7de:	11 24       	eor	r1, r1
     7e0:	e8 0f       	add	r30, r24
     7e2:	f9 1f       	adc	r31, r25
     7e4:	df 01       	movw	r26, r30
     7e6:	57 96       	adiw	r26, 0x17	; 23
     7e8:	67 89       	ldd	r22, Z+23	; 0x17
     7ea:	11 96       	adiw	r26, 0x01	; 1
     7ec:	7c 91       	ld	r23, X
     7ee:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     7f0:	12 96       	adiw	r26, 0x02	; 2
     7f2:	8c 91       	ld	r24, X
     7f4:	12 97       	sbiw	r26, 0x02	; 2
     7f6:	13 96       	adiw	r26, 0x03	; 3
     7f8:	9c 91       	ld	r25, X
     7fa:	08 95       	ret

000007fc <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     7fc:	e0 91 43 01 	lds	r30, 0x0143
     800:	f0 91 44 01 	lds	r31, 0x0144
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	29 e1       	ldi	r18, 0x19	; 25
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	ac 01       	movw	r20, r24
     80c:	42 9f       	mul	r20, r18
     80e:	c0 01       	movw	r24, r0
     810:	43 9f       	mul	r20, r19
     812:	90 0d       	add	r25, r0
     814:	52 9f       	mul	r21, r18
     816:	90 0d       	add	r25, r0
     818:	11 24       	eor	r1, r1
     81a:	e8 0f       	add	r30, r24
     81c:	f9 1f       	adc	r31, r25
     81e:	df 01       	movw	r26, r30
     820:	5b 96       	adiw	r26, 0x1b	; 27
     822:	63 8d       	ldd	r22, Z+27	; 0x1b
     824:	11 96       	adiw	r26, 0x01	; 1
     826:	7c 91       	ld	r23, X
     828:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     82a:	12 96       	adiw	r26, 0x02	; 2
     82c:	8c 91       	ld	r24, X
     82e:	12 97       	sbiw	r26, 0x02	; 2
     830:	13 96       	adiw	r26, 0x03	; 3
     832:	9c 91       	ld	r25, X
     834:	08 95       	ret

00000836 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     836:	e0 91 43 01 	lds	r30, 0x0143
     83a:	f0 91 44 01 	lds	r31, 0x0144
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	29 e1       	ldi	r18, 0x19	; 25
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	dc 01       	movw	r26, r24
     846:	a2 9f       	mul	r26, r18
     848:	c0 01       	movw	r24, r0
     84a:	a3 9f       	mul	r26, r19
     84c:	90 0d       	add	r25, r0
     84e:	b2 9f       	mul	r27, r18
     850:	90 0d       	add	r25, r0
     852:	11 24       	eor	r1, r1
     854:	e8 0f       	add	r30, r24
     856:	f9 1f       	adc	r31, r25
     858:	47 8b       	std	Z+23, r20	; 0x17
     85a:	50 8f       	std	Z+24, r21	; 0x18
     85c:	61 8f       	std	Z+25, r22	; 0x19
     85e:	72 8f       	std	Z+26, r23	; 0x1a
}
     860:	08 95       	ret

00000862 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     862:	e0 91 43 01 	lds	r30, 0x0143
     866:	f0 91 44 01 	lds	r31, 0x0144
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	29 e1       	ldi	r18, 0x19	; 25
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	dc 01       	movw	r26, r24
     872:	a2 9f       	mul	r26, r18
     874:	c0 01       	movw	r24, r0
     876:	a3 9f       	mul	r26, r19
     878:	90 0d       	add	r25, r0
     87a:	b2 9f       	mul	r27, r18
     87c:	90 0d       	add	r25, r0
     87e:	11 24       	eor	r1, r1
     880:	e8 0f       	add	r30, r24
     882:	f9 1f       	adc	r31, r25
     884:	43 8f       	std	Z+27, r20	; 0x1b
     886:	54 8f       	std	Z+28, r21	; 0x1c
     888:	65 8f       	std	Z+29, r22	; 0x1d
     88a:	76 8f       	std	Z+30, r23	; 0x1e
}
     88c:	08 95       	ret

0000088e <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     88e:	e0 91 43 01 	lds	r30, 0x0143
     892:	f0 91 44 01 	lds	r31, 0x0144
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	29 e1       	ldi	r18, 0x19	; 25
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	ac 01       	movw	r20, r24
     89e:	42 9f       	mul	r20, r18
     8a0:	c0 01       	movw	r24, r0
     8a2:	43 9f       	mul	r20, r19
     8a4:	90 0d       	add	r25, r0
     8a6:	52 9f       	mul	r21, r18
     8a8:	90 0d       	add	r25, r0
     8aa:	11 24       	eor	r1, r1
     8ac:	e8 0f       	add	r30, r24
     8ae:	f9 1f       	adc	r31, r25
     8b0:	df 01       	movw	r26, r30
     8b2:	5f 96       	adiw	r26, 0x1f	; 31
     8b4:	67 8d       	ldd	r22, Z+31	; 0x1f
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	7c 91       	ld	r23, X
     8ba:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     8bc:	12 96       	adiw	r26, 0x02	; 2
     8be:	8c 91       	ld	r24, X
     8c0:	12 97       	sbiw	r26, 0x02	; 2
     8c2:	13 96       	adiw	r26, 0x03	; 3
     8c4:	9c 91       	ld	r25, X
     8c6:	08 95       	ret

000008c8 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     8c8:	e0 91 43 01 	lds	r30, 0x0143
     8cc:	f0 91 44 01 	lds	r31, 0x0144
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	29 e1       	ldi	r18, 0x19	; 25
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	dc 01       	movw	r26, r24
     8d8:	a2 9f       	mul	r26, r18
     8da:	c0 01       	movw	r24, r0
     8dc:	a3 9f       	mul	r26, r19
     8de:	90 0d       	add	r25, r0
     8e0:	b2 9f       	mul	r27, r18
     8e2:	90 0d       	add	r25, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	e8 0f       	add	r30, r24
     8e8:	f9 1f       	adc	r31, r25
     8ea:	47 8f       	std	Z+31, r20	; 0x1f
     8ec:	50 a3       	std	Z+32, r21	; 0x20
     8ee:	61 a3       	std	Z+33, r22	; 0x21
     8f0:	72 a3       	std	Z+34, r23	; 0x22
}
     8f2:	08 95       	ret

000008f4 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     8f4:	e0 91 43 01 	lds	r30, 0x0143
     8f8:	f0 91 44 01 	lds	r31, 0x0144
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	29 e1       	ldi	r18, 0x19	; 25
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	ac 01       	movw	r20, r24
     904:	42 9f       	mul	r20, r18
     906:	c0 01       	movw	r24, r0
     908:	43 9f       	mul	r20, r19
     90a:	90 0d       	add	r25, r0
     90c:	52 9f       	mul	r21, r18
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	e8 0f       	add	r30, r24
     914:	f9 1f       	adc	r31, r25
     916:	df 01       	movw	r26, r30
     918:	93 96       	adiw	r26, 0x23	; 35
     91a:	63 a1       	ldd	r22, Z+35	; 0x23
     91c:	11 96       	adiw	r26, 0x01	; 1
     91e:	7c 91       	ld	r23, X
     920:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	8c 91       	ld	r24, X
     926:	12 97       	sbiw	r26, 0x02	; 2
     928:	13 96       	adiw	r26, 0x03	; 3
     92a:	9c 91       	ld	r25, X
     92c:	08 95       	ret

0000092e <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     932:	c0 91 43 01 	lds	r28, 0x0143
     936:	d0 91 44 01 	lds	r29, 0x0144
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	29 e1       	ldi	r18, 0x19	; 25
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	fc 01       	movw	r30, r24
     942:	e2 9f       	mul	r30, r18
     944:	c0 01       	movw	r24, r0
     946:	e3 9f       	mul	r30, r19
     948:	90 0d       	add	r25, r0
     94a:	f2 9f       	mul	r31, r18
     94c:	90 0d       	add	r25, r0
     94e:	11 24       	eor	r1, r1
     950:	c8 0f       	add	r28, r24
     952:	d9 1f       	adc	r29, r25
     954:	ca 01       	movw	r24, r20
     956:	db 01       	movw	r26, r22
     958:	b7 ff       	sbrs	r27, 7
     95a:	04 c0       	rjmp	.+8      	; 0x964 <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	8b a3       	std	Y+35, r24	; 0x23
     966:	9c a3       	std	Y+36, r25	; 0x24
     968:	ad a3       	std	Y+37, r26	; 0x25
     96a:	be a3       	std	Y+38, r27	; 0x26
}
     96c:	df 91       	pop	r29
     96e:	cf 91       	pop	r28
     970:	08 95       	ret

00000972 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     972:	e0 91 43 01 	lds	r30, 0x0143
     976:	f0 91 44 01 	lds	r31, 0x0144
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	29 e1       	ldi	r18, 0x19	; 25
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	ac 01       	movw	r20, r24
     982:	42 9f       	mul	r20, r18
     984:	c0 01       	movw	r24, r0
     986:	43 9f       	mul	r20, r19
     988:	90 0d       	add	r25, r0
     98a:	52 9f       	mul	r21, r18
     98c:	90 0d       	add	r25, r0
     98e:	11 24       	eor	r1, r1
     990:	e8 0f       	add	r30, r24
     992:	f9 1f       	adc	r31, r25
     994:	df 01       	movw	r26, r30
     996:	9b 96       	adiw	r26, 0x2b	; 43
     998:	63 a5       	ldd	r22, Z+43	; 0x2b
     99a:	11 96       	adiw	r26, 0x01	; 1
     99c:	7c 91       	ld	r23, X
     99e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     9a0:	12 96       	adiw	r26, 0x02	; 2
     9a2:	8c 91       	ld	r24, X
     9a4:	12 97       	sbiw	r26, 0x02	; 2
     9a6:	13 96       	adiw	r26, 0x03	; 3
     9a8:	9c 91       	ld	r25, X
     9aa:	08 95       	ret

000009ac <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     9ac:	e0 91 43 01 	lds	r30, 0x0143
     9b0:	f0 91 44 01 	lds	r31, 0x0144
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	29 e1       	ldi	r18, 0x19	; 25
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	dc 01       	movw	r26, r24
     9bc:	a2 9f       	mul	r26, r18
     9be:	c0 01       	movw	r24, r0
     9c0:	a3 9f       	mul	r26, r19
     9c2:	90 0d       	add	r25, r0
     9c4:	b2 9f       	mul	r27, r18
     9c6:	90 0d       	add	r25, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	e8 0f       	add	r30, r24
     9cc:	f9 1f       	adc	r31, r25
     9ce:	43 a7       	std	Z+43, r20	; 0x2b
     9d0:	54 a7       	std	Z+44, r21	; 0x2c
     9d2:	65 a7       	std	Z+45, r22	; 0x2d
     9d4:	76 a7       	std	Z+46, r23	; 0x2e
}
     9d6:	08 95       	ret

000009d8 <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     9d8:	e0 91 43 01 	lds	r30, 0x0143
     9dc:	f0 91 44 01 	lds	r31, 0x0144
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	29 e1       	ldi	r18, 0x19	; 25
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	ac 01       	movw	r20, r24
     9e8:	42 9f       	mul	r20, r18
     9ea:	c0 01       	movw	r24, r0
     9ec:	43 9f       	mul	r20, r19
     9ee:	90 0d       	add	r25, r0
     9f0:	52 9f       	mul	r21, r18
     9f2:	90 0d       	add	r25, r0
     9f4:	11 24       	eor	r1, r1
     9f6:	e8 0f       	add	r30, r24
     9f8:	f9 1f       	adc	r31, r25
     9fa:	86 89       	ldd	r24, Z+22	; 0x16
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     9fc:	81 70       	andi	r24, 0x01	; 1
     9fe:	08 95       	ret

00000a00 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a00:	e0 91 43 01 	lds	r30, 0x0143
     a04:	f0 91 44 01 	lds	r31, 0x0144
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	29 e1       	ldi	r18, 0x19	; 25
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	ac 01       	movw	r20, r24
     a10:	42 9f       	mul	r20, r18
     a12:	c0 01       	movw	r24, r0
     a14:	43 9f       	mul	r20, r19
     a16:	90 0d       	add	r25, r0
     a18:	52 9f       	mul	r21, r18
     a1a:	90 0d       	add	r25, r0
     a1c:	11 24       	eor	r1, r1
     a1e:	e8 0f       	add	r30, r24
     a20:	f9 1f       	adc	r31, r25
     a22:	86 89       	ldd	r24, Z+22	; 0x16
     a24:	81 60       	ori	r24, 0x01	; 1
     a26:	86 8b       	std	Z+22, r24	; 0x16
}
     a28:	08 95       	ret

00000a2a <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a2a:	e0 91 43 01 	lds	r30, 0x0143
     a2e:	f0 91 44 01 	lds	r31, 0x0144
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	29 e1       	ldi	r18, 0x19	; 25
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	ac 01       	movw	r20, r24
     a3a:	42 9f       	mul	r20, r18
     a3c:	c0 01       	movw	r24, r0
     a3e:	43 9f       	mul	r20, r19
     a40:	90 0d       	add	r25, r0
     a42:	52 9f       	mul	r21, r18
     a44:	90 0d       	add	r25, r0
     a46:	11 24       	eor	r1, r1
     a48:	e8 0f       	add	r30, r24
     a4a:	f9 1f       	adc	r31, r25
     a4c:	86 89       	ldd	r24, Z+22	; 0x16
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	86 8b       	std	Z+22, r24	; 0x16
}
     a52:	08 95       	ret

00000a54 <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     a54:	e0 91 43 01 	lds	r30, 0x0143
     a58:	f0 91 44 01 	lds	r31, 0x0144
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	29 e1       	ldi	r18, 0x19	; 25
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	ac 01       	movw	r20, r24
     a64:	42 9f       	mul	r20, r18
     a66:	c0 01       	movw	r24, r0
     a68:	43 9f       	mul	r20, r19
     a6a:	90 0d       	add	r25, r0
     a6c:	52 9f       	mul	r21, r18
     a6e:	90 0d       	add	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	e8 0f       	add	r30, r24
     a74:	f9 1f       	adc	r31, r25
     a76:	86 89       	ldd	r24, Z+22	; 0x16

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     a78:	17 a2       	std	Z+39, r1	; 0x27
     a7a:	10 a6       	std	Z+40, r1	; 0x28
     a7c:	11 a6       	std	Z+41, r1	; 0x29
     a7e:	12 a6       	std	Z+42, r1	; 0x2a
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     a80:	17 8a       	std	Z+23, r1	; 0x17
     a82:	10 8e       	std	Z+24, r1	; 0x18
     a84:	11 8e       	std	Z+25, r1	; 0x19
     a86:	12 8e       	std	Z+26, r1	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     a88:	13 8e       	std	Z+27, r1	; 0x1b
     a8a:	14 8e       	std	Z+28, r1	; 0x1c
     a8c:	15 8e       	std	Z+29, r1	; 0x1d
     a8e:	16 8e       	std	Z+30, r1	; 0x1e
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     a90:	17 8e       	std	Z+31, r1	; 0x1f
     a92:	10 a2       	std	Z+32, r1	; 0x20
     a94:	11 a2       	std	Z+33, r1	; 0x21
     a96:	12 a2       	std	Z+34, r1	; 0x22

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     a98:	13 a2       	std	Z+35, r1	; 0x23
     a9a:	14 a2       	std	Z+36, r1	; 0x24
     a9c:	15 a2       	std	Z+37, r1	; 0x25
     a9e:	16 a2       	std	Z+38, r1	; 0x26
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     aa0:	13 a6       	std	Z+43, r1	; 0x2b
     aa2:	14 a6       	std	Z+44, r1	; 0x2c
     aa4:	15 a6       	std	Z+45, r1	; 0x2d
     aa6:	16 a6       	std	Z+46, r1	; 0x2e
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     aa8:	80 7e       	andi	r24, 0xE0	; 224
     aaa:	86 8b       	std	Z+22, r24	; 0x16
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
     aac:	08 95       	ret

00000aae <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     aae:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
}
     ab2:	08 95       	ret

00000ab4 <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     ab4:	e0 91 43 01 	lds	r30, 0x0143
     ab8:	f0 91 44 01 	lds	r31, 0x0144
     abc:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     abe:	29 e1       	ldi	r18, 0x19	; 25
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	ac 01       	movw	r20, r24
     ac4:	42 9f       	mul	r20, r18
     ac6:	c0 01       	movw	r24, r0
     ac8:	43 9f       	mul	r20, r19
     aca:	90 0d       	add	r25, r0
     acc:	52 9f       	mul	r21, r18
     ace:	90 0d       	add	r25, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	e8 0f       	add	r30, r24
     ad4:	f9 1f       	adc	r31, r25
     ad6:	96 89       	ldd	r25, Z+22	; 0x16
     ad8:	89 2f       	mov	r24, r25
     ada:	86 95       	lsr	r24
     adc:	8f 70       	andi	r24, 0x0F	; 15
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	19 f0       	breq	.+6      	; 0xae8 <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     ae2:	91 7e       	andi	r25, 0xE1	; 225
     ae4:	92 60       	ori	r25, 0x02	; 2
     ae6:	96 8b       	std	Z+22, r25	; 0x16
     ae8:	08 95       	ret

00000aea <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     aea:	e0 91 43 01 	lds	r30, 0x0143
     aee:	f0 91 44 01 	lds	r31, 0x0144
     af2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     af4:	29 e1       	ldi	r18, 0x19	; 25
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	ac 01       	movw	r20, r24
     afa:	42 9f       	mul	r20, r18
     afc:	c0 01       	movw	r24, r0
     afe:	43 9f       	mul	r20, r19
     b00:	90 0d       	add	r25, r0
     b02:	52 9f       	mul	r21, r18
     b04:	90 0d       	add	r25, r0
     b06:	11 24       	eor	r1, r1
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
     b0c:	96 89       	ldd	r25, Z+22	; 0x16
     b0e:	89 2f       	mov	r24, r25
     b10:	86 95       	lsr	r24
     b12:	8f 70       	andi	r24, 0x0F	; 15
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	19 f0       	breq	.+6      	; 0xb1e <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     b18:	91 7e       	andi	r25, 0xE1	; 225
     b1a:	94 60       	ori	r25, 0x04	; 4
     b1c:	96 8b       	std	Z+22, r25	; 0x16
     b1e:	08 95       	ret

00000b20 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
     b20:	2f 92       	push	r2
     b22:	3f 92       	push	r3
     b24:	4f 92       	push	r4
     b26:	5f 92       	push	r5
     b28:	6f 92       	push	r6
     b2a:	7f 92       	push	r7
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	0f 93       	push	r16
     b3e:	1f 93       	push	r17
     b40:	df 93       	push	r29
     b42:	cf 93       	push	r28
     b44:	00 d0       	rcall	.+0      	; 0xb46 <Timebase_UpCounter_SS_Set_Securely+0x26>
     b46:	00 d0       	rcall	.+0      	; 0xb48 <Timebase_UpCounter_SS_Set_Securely+0x28>
     b48:	cd b7       	in	r28, 0x3d	; 61
     b4a:	de b7       	in	r29, 0x3e	; 62
     b4c:	4a 01       	movw	r8, r20
     b4e:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     b50:	20 91 43 01 	lds	r18, 0x0143
     b54:	30 91 44 01 	lds	r19, 0x0144
     b58:	3c 83       	std	Y+4, r19	; 0x04
     b5a:	2b 83       	std	Y+3, r18	; 0x03
     b5c:	a8 2f       	mov	r26, r24
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ba 83       	std	Y+2, r27	; 0x02
     b62:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     b64:	89 e1       	ldi	r24, 0x19	; 25
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	a8 9f       	mul	r26, r24
     b6a:	f0 01       	movw	r30, r0
     b6c:	a9 9f       	mul	r26, r25
     b6e:	f0 0d       	add	r31, r0
     b70:	b8 9f       	mul	r27, r24
     b72:	f0 0d       	add	r31, r0
     b74:	11 24       	eor	r1, r1
     b76:	e2 0f       	add	r30, r18
     b78:	f3 1f       	adc	r31, r19
     b7a:	86 89       	ldd	r24, Z+22	; 0x16
     b7c:	86 95       	lsr	r24
     b7e:	8f 70       	andi	r24, 0x0F	; 15
     b80:	09 f0       	breq	.+2      	; 0xb84 <Timebase_UpCounter_SS_Set_Securely+0x64>
     b82:	75 c0       	rjmp	.+234    	; 0xc6e <Timebase_UpCounter_SS_Set_Securely+0x14e>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     b84:	17 a2       	std	Z+39, r1	; 0x27
     b86:	10 a6       	std	Z+40, r1	; 0x28
     b88:	11 a6       	std	Z+41, r1	; 0x29
     b8a:	12 a6       	std	Z+42, r1	; 0x2a

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     b8c:	13 a2       	std	Z+35, r1	; 0x23
     b8e:	14 a2       	std	Z+36, r1	; 0x24
     b90:	15 a2       	std	Z+37, r1	; 0x25
     b92:	16 a2       	std	Z+38, r1	; 0x26
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     b94:	47 8f       	std	Z+31, r20	; 0x1f
     b96:	50 a3       	std	Z+32, r21	; 0x20
     b98:	61 a3       	std	Z+33, r22	; 0x21
     b9a:	72 a3       	std	Z+34, r23	; 0x22
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     b9c:	f9 01       	movw	r30, r18
     b9e:	c0 84       	ldd	r12, Z+8	; 0x08
     ba0:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ba2:	22 84       	ldd	r2, Z+10	; 0x0a
     ba4:	33 84       	ldd	r3, Z+11	; 0x0b
     ba6:	44 84       	ldd	r4, Z+12	; 0x0c
     ba8:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	subsec_val = value % Timebase->Config.UpdateRate;
     baa:	21 81       	ldd	r18, Z+1	; 0x01
     bac:	32 81       	ldd	r19, Z+2	; 0x02
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     bba:	7b 01       	movw	r14, r22
     bbc:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     bbe:	ab 81       	ldd	r26, Y+3	; 0x03
     bc0:	bc 81       	ldd	r27, Y+4	; 0x04
     bc2:	11 96       	adiw	r26, 0x01	; 1
     bc4:	2d 91       	ld	r18, X+
     bc6:	3c 91       	ld	r19, X
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	c5 01       	movw	r24, r10
     bd0:	b4 01       	movw	r22, r8
     bd2:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     bd6:	c9 01       	movw	r24, r18
     bd8:	da 01       	movw	r26, r20
     bda:	3c 01       	movw	r6, r24
     bdc:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
     bde:	56 01       	movw	r10, r12
     be0:	cc 24       	eor	r12, r12
     be2:	dd 24       	eor	r13, r13
     be4:	ae 0c       	add	r10, r14
     be6:	bf 1c       	adc	r11, r15
     be8:	c0 1e       	adc	r12, r16
     bea:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     bec:	eb 81       	ldd	r30, Y+3	; 0x03
     bee:	fc 81       	ldd	r31, Y+4	; 0x04
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
     bf2:	92 81       	ldd	r25, Z+2	; 0x02
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	a8 16       	cp	r10, r24
     bfa:	b9 06       	cpc	r11, r25
     bfc:	ca 06       	cpc	r12, r26
     bfe:	db 06       	cpc	r13, r27
     c00:	94 f0       	brlt	.+36     	; 0xc26 <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
     c02:	08 94       	sec
     c04:	61 1c       	adc	r6, r1
     c06:	71 1c       	adc	r7, r1
     c08:	81 1c       	adc	r8, r1
     c0a:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     c0c:	21 81       	ldd	r18, Z+1	; 0x01
     c0e:	32 81       	ldd	r19, Z+2	; 0x02
     c10:	40 e0       	ldi	r20, 0x00	; 0
     c12:	50 e0       	ldi	r21, 0x00	; 0
     c14:	c6 01       	movw	r24, r12
     c16:	b5 01       	movw	r22, r10
     c18:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     c1c:	ac 01       	movw	r20, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	da 01       	movw	r26, r20
     c22:	5c 01       	movw	r10, r24
     c24:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     c26:	89 e1       	ldi	r24, 0x19	; 25
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	29 81       	ldd	r18, Y+1	; 0x01
     c2c:	3a 81       	ldd	r19, Y+2	; 0x02
     c2e:	28 9f       	mul	r18, r24
     c30:	f0 01       	movw	r30, r0
     c32:	29 9f       	mul	r18, r25
     c34:	f0 0d       	add	r31, r0
     c36:	38 9f       	mul	r19, r24
     c38:	f0 0d       	add	r31, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	8b 81       	ldd	r24, Y+3	; 0x03
     c3e:	9c 81       	ldd	r25, Y+4	; 0x04
     c40:	e8 0f       	add	r30, r24
     c42:	f9 1f       	adc	r31, r25
     c44:	26 0c       	add	r2, r6
     c46:	37 1c       	adc	r3, r7
     c48:	48 1c       	adc	r4, r8
     c4a:	59 1c       	adc	r5, r9
     c4c:	27 8a       	std	Z+23, r2	; 0x17
     c4e:	30 8e       	std	Z+24, r3	; 0x18
     c50:	41 8e       	std	Z+25, r4	; 0x19
     c52:	52 8e       	std	Z+26, r5	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     c54:	a3 8e       	std	Z+27, r10	; 0x1b
     c56:	b4 8e       	std	Z+28, r11	; 0x1c
     c58:	c5 8e       	std	Z+29, r12	; 0x1d
     c5a:	d6 8e       	std	Z+30, r13	; 0x1e
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     c5c:	96 89       	ldd	r25, Z+22	; 0x16
     c5e:	89 2f       	mov	r24, r25
     c60:	86 95       	lsr	r24
     c62:	8f 70       	andi	r24, 0x0F	; 15
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	19 f0       	breq	.+6      	; 0xc6e <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c68:	91 7e       	andi	r25, 0xE1	; 225
     c6a:	92 60       	ori	r25, 0x02	; 2
     c6c:	96 8b       	std	Z+22, r25	; 0x16
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	7f 90       	pop	r7
     c90:	6f 90       	pop	r6
     c92:	5f 90       	pop	r5
     c94:	4f 90       	pop	r4
     c96:	3f 90       	pop	r3
     c98:	2f 90       	pop	r2
     c9a:	08 95       	ret

00000c9c <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     c9c:	df 92       	push	r13
     c9e:	ef 92       	push	r14
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	d8 2e       	mov	r13, r24
     ca8:	7a 01       	movw	r14, r20
     caa:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
     cac:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
     cb0:	8d 2d       	mov	r24, r13
     cb2:	b8 01       	movw	r22, r16
     cb4:	a7 01       	movw	r20, r14
     cb6:	0e 94 90 05 	call	0xb20	; 0xb20 <Timebase_UpCounter_SS_Set_Securely>
} 
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	08 95       	ret

00000cc6 <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
     cc6:	2f 92       	push	r2
     cc8:	3f 92       	push	r3
     cca:	4f 92       	push	r4
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <Timebase_UpCounter_SS_Update+0x26>
     cec:	00 d0       	rcall	.+0      	; 0xcee <Timebase_UpCounter_SS_Update+0x28>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <Timebase_UpCounter_SS_Update+0x2a>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     cf4:	20 90 43 01 	lds	r2, 0x0143
     cf8:	30 90 44 01 	lds	r3, 0x0144
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	3e 83       	std	Y+6, r19	; 0x06
     d02:	2d 83       	std	Y+5, r18	; 0x05
     d04:	89 e1       	ldi	r24, 0x19	; 25
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	28 9f       	mul	r18, r24
     d0a:	50 01       	movw	r10, r0
     d0c:	29 9f       	mul	r18, r25
     d0e:	b0 0c       	add	r11, r0
     d10:	38 9f       	mul	r19, r24
     d12:	b0 0c       	add	r11, r0
     d14:	11 24       	eor	r1, r1
     d16:	a2 0c       	add	r10, r2
     d18:	b3 1c       	adc	r11, r3
     d1a:	d5 01       	movw	r26, r10
     d1c:	56 96       	adiw	r26, 0x16	; 22
     d1e:	8c 91       	ld	r24, X
     d20:	86 95       	lsr	r24
     d22:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	09 f0       	breq	.+2      	; 0xd2a <Timebase_UpCounter_SS_Update+0x64>
     d28:	a1 c0       	rjmp	.+322    	; 0xe6c <Timebase_UpCounter_SS_Update+0x1a6>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d2a:	f1 01       	movw	r30, r2
     d2c:	82 85       	ldd	r24, Z+10	; 0x0a
     d2e:	93 85       	ldd	r25, Z+11	; 0x0b
     d30:	a4 85       	ldd	r26, Z+12	; 0x0c
     d32:	b5 85       	ldd	r27, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d34:	e0 84       	ldd	r14, Z+8	; 0x08
     d36:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
     d38:	00 e0       	ldi	r16, 0x00	; 0
     d3a:	10 e0       	ldi	r17, 0x00	; 0
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
     d3c:	f5 01       	movw	r30, r10
     d3e:	27 89       	ldd	r18, Z+23	; 0x17
     d40:	30 8d       	ldd	r19, Z+24	; 0x18
     d42:	41 8d       	ldd	r20, Z+25	; 0x19
     d44:	52 8d       	ldd	r21, Z+26	; 0x1a
     d46:	28 1b       	sub	r18, r24
     d48:	39 0b       	sbc	r19, r25
     d4a:	4a 0b       	sbc	r20, r26
     d4c:	5b 0b       	sbc	r21, r27
	curr_s *= Timebase->Config.UpdateRate;
     d4e:	d1 01       	movw	r26, r2
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	6d 91       	ld	r22, X+
     d54:	7c 91       	ld	r23, X
     d56:	12 97       	sbiw	r26, 0x02	; 2
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 04 18 	call	0x3008	; 0x3008 <__mulsi3>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
     d64:	2e 19       	sub	r18, r14
     d66:	3f 09       	sbc	r19, r15
     d68:	40 0b       	sbc	r20, r16
     d6a:	51 0b       	sbc	r21, r17
	curr_ss += curr_s;
     d6c:	f5 01       	movw	r30, r10
     d6e:	83 8d       	ldd	r24, Z+27	; 0x1b
     d70:	94 8d       	ldd	r25, Z+28	; 0x1c
     d72:	a5 8d       	ldd	r26, Z+29	; 0x1d
     d74:	b6 8d       	ldd	r27, Z+30	; 0x1e
     d76:	28 0f       	add	r18, r24
     d78:	39 1f       	adc	r19, r25
     d7a:	4a 1f       	adc	r20, r26
     d7c:	5b 1f       	adc	r21, r27
     d7e:	57 ff       	sbrs	r21, 7
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <Timebase_UpCounter_SS_Update+0xc4>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     d8a:	89 e1       	ldi	r24, 0x19	; 25
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	6d 81       	ldd	r22, Y+5	; 0x05
     d90:	7e 81       	ldd	r23, Y+6	; 0x06
     d92:	68 9f       	mul	r22, r24
     d94:	f0 01       	movw	r30, r0
     d96:	69 9f       	mul	r22, r25
     d98:	f0 0d       	add	r31, r0
     d9a:	78 9f       	mul	r23, r24
     d9c:	f0 0d       	add	r31, r0
     d9e:	11 24       	eor	r1, r1
     da0:	e2 0d       	add	r30, r2
     da2:	f3 1d       	adc	r31, r3
     da4:	23 a3       	std	Z+35, r18	; 0x23
     da6:	34 a3       	std	Z+36, r19	; 0x24
     da8:	45 a3       	std	Z+37, r20	; 0x25
     daa:	56 a3       	std	Z+38, r21	; 0x26
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
     dac:	87 8d       	ldd	r24, Z+31	; 0x1f
     dae:	90 a1       	ldd	r25, Z+32	; 0x20
     db0:	a1 a1       	ldd	r26, Z+33	; 0x21
     db2:	b2 a1       	ldd	r27, Z+34	; 0x22

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     db4:	82 1b       	sub	r24, r18
     db6:	93 0b       	sbc	r25, r19
     db8:	a4 0b       	sbc	r26, r20
     dba:	b5 0b       	sbc	r27, r21
     dbc:	b7 ff       	sbrs	r27, 7
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <Timebase_UpCounter_SS_Update+0x102>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e0       	ldi	r26, 0x00	; 0
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	87 a3       	std	Z+39, r24	; 0x27
     dca:	90 a7       	std	Z+40, r25	; 0x28
     dcc:	a1 a7       	std	Z+41, r26	; 0x29
     dce:	b2 a7       	std	Z+42, r27	; 0x2a
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	ad 81       	ldd	r26, Y+5	; 0x05
     dd6:	be 81       	ldd	r27, Y+6	; 0x06
     dd8:	a8 9f       	mul	r26, r24
     dda:	b0 01       	movw	r22, r0
     ddc:	a9 9f       	mul	r26, r25
     dde:	70 0d       	add	r23, r0
     de0:	b8 9f       	mul	r27, r24
     de2:	70 0d       	add	r23, r0
     de4:	11 24       	eor	r1, r1
     de6:	62 0d       	add	r22, r2
     de8:	73 1d       	adc	r23, r3
     dea:	fb 01       	movw	r30, r22
     dec:	83 a1       	ldd	r24, Z+35	; 0x23
     dee:	94 a1       	ldd	r25, Z+36	; 0x24
     df0:	a5 a1       	ldd	r26, Z+37	; 0x25
     df2:	b6 a1       	ldd	r27, Z+38	; 0x26
     df4:	18 16       	cp	r1, r24
     df6:	19 06       	cpc	r1, r25
     df8:	1a 06       	cpc	r1, r26
     dfa:	1b 06       	cpc	r1, r27
     dfc:	0c f4       	brge	.+2      	; 0xe00 <Timebase_UpCounter_SS_Update+0x13a>
     dfe:	c6 c0       	rjmp	.+396    	; 0xf8c <Timebase_UpCounter_SS_Update+0x2c6>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     e00:	db 01       	movw	r26, r22
     e02:	57 96       	adiw	r26, 0x17	; 23
     e04:	1d 92       	st	X+, r1
     e06:	1d 92       	st	X+, r1
     e08:	1d 92       	st	X+, r1
     e0a:	1c 92       	st	X, r1
     e0c:	5a 97       	sbiw	r26, 0x1a	; 26
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     e0e:	13 8e       	std	Z+27, r1	; 0x1b
     e10:	14 8e       	std	Z+28, r1	; 0x1c
     e12:	15 8e       	std	Z+29, r1	; 0x1d
     e14:	16 8e       	std	Z+30, r1	; 0x1e

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     e16:	93 96       	adiw	r26, 0x23	; 35
     e18:	1d 92       	st	X+, r1
     e1a:	1d 92       	st	X+, r1
     e1c:	1d 92       	st	X+, r1
     e1e:	1c 92       	st	X, r1
     e20:	96 97       	sbiw	r26, 0x26	; 38
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
     e22:	7f 96       	adiw	r30, 0x1f	; 31

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     e24:	5f 96       	adiw	r26, 0x1f	; 31
     e26:	2c 91       	ld	r18, X
     e28:	31 81       	ldd	r19, Z+1	; 0x01
     e2a:	42 81       	ldd	r20, Z+2	; 0x02
     e2c:	53 81       	ldd	r21, Z+3	; 0x03
     e2e:	c9 01       	movw	r24, r18
     e30:	da 01       	movw	r26, r20
     e32:	b7 ff       	sbrs	r27, 7
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <Timebase_UpCounter_SS_Update+0x178>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 e0       	ldi	r26, 0x00	; 0
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	fb 01       	movw	r30, r22
     e40:	87 a3       	std	Z+39, r24	; 0x27
     e42:	90 a7       	std	Z+40, r25	; 0x28
     e44:	a1 a7       	std	Z+41, r26	; 0x29
     e46:	b2 a7       	std	Z+42, r27	; 0x2a
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     e48:	89 e1       	ldi	r24, 0x19	; 25
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2d 81       	ldd	r18, Y+5	; 0x05
     e4e:	3e 81       	ldd	r19, Y+6	; 0x06
     e50:	28 9f       	mul	r18, r24
     e52:	f0 01       	movw	r30, r0
     e54:	29 9f       	mul	r18, r25
     e56:	f0 0d       	add	r31, r0
     e58:	38 9f       	mul	r19, r24
     e5a:	f0 0d       	add	r31, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	e2 0d       	add	r30, r2
     e60:	f3 1d       	adc	r31, r3
     e62:	86 89       	ldd	r24, Z+22	; 0x16
     e64:	81 7e       	andi	r24, 0xE1	; 225
     e66:	88 60       	ori	r24, 0x08	; 8
     e68:	86 8b       	std	Z+22, r24	; 0x16
     e6a:	90 c0       	rjmp	.+288    	; 0xf8c <Timebase_UpCounter_SS_Update+0x2c6>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	09 f0       	breq	.+2      	; 0xe72 <Timebase_UpCounter_SS_Update+0x1ac>
     e70:	8d c0       	rjmp	.+282    	; 0xf8c <Timebase_UpCounter_SS_Update+0x2c6>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e72:	d1 01       	movw	r26, r2
     e74:	1a 96       	adiw	r26, 0x0a	; 10
     e76:	6d 91       	ld	r22, X+
     e78:	7d 91       	ld	r23, X+
     e7a:	8d 91       	ld	r24, X+
     e7c:	9c 91       	ld	r25, X
     e7e:	1d 97       	sbiw	r26, 0x0d	; 13
     e80:	69 83       	std	Y+1, r22	; 0x01
     e82:	7a 83       	std	Y+2, r23	; 0x02
     e84:	8b 83       	std	Y+3, r24	; 0x03
     e86:	9c 83       	std	Y+4, r25	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e88:	18 96       	adiw	r26, 0x08	; 8
     e8a:	8d 90       	ld	r8, X+
     e8c:	9c 90       	ld	r9, X
     e8e:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
     e90:	f5 01       	movw	r30, r10
     e92:	a3 a0       	ldd	r10, Z+35	; 0x23
     e94:	b4 a0       	ldd	r11, Z+36	; 0x24
     e96:	c5 a0       	ldd	r12, Z+37	; 0x25
     e98:	d6 a0       	ldd	r13, Z+38	; 0x26
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	value      = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	subsec_val = value % Timebase->Config.UpdateRate;
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	2d 91       	ld	r18, X+
     e9e:	3c 91       	ld	r19, X
     ea0:	12 97       	sbiw	r26, 0x02	; 2
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	c6 01       	movw	r24, r12
     ea8:	b5 01       	movw	r22, r10
     eaa:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     eae:	7b 01       	movw	r14, r22
     eb0:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     eb2:	d1 01       	movw	r26, r2
     eb4:	11 96       	adiw	r26, 0x01	; 1
     eb6:	2d 91       	ld	r18, X+
     eb8:	3c 91       	ld	r19, X
     eba:	12 97       	sbiw	r26, 0x02	; 2
     ebc:	40 e0       	ldi	r20, 0x00	; 0
     ebe:	50 e0       	ldi	r21, 0x00	; 0
     ec0:	c6 01       	movw	r24, r12
     ec2:	b5 01       	movw	r22, r10
     ec4:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     ec8:	c9 01       	movw	r24, r18
     eca:	da 01       	movw	r26, r20
     ecc:	2c 01       	movw	r4, r24
     ece:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
     ed0:	aa 24       	eor	r10, r10
     ed2:	bb 24       	eor	r11, r11
     ed4:	8e 0c       	add	r8, r14
     ed6:	9f 1c       	adc	r9, r15
     ed8:	a0 1e       	adc	r10, r16
     eda:	b1 1e       	adc	r11, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     edc:	f1 01       	movw	r30, r2
     ede:	81 81       	ldd	r24, Z+1	; 0x01
     ee0:	92 81       	ldd	r25, Z+2	; 0x02
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	88 16       	cp	r8, r24
     ee8:	99 06       	cpc	r9, r25
     eea:	aa 06       	cpc	r10, r26
     eec:	bb 06       	cpc	r11, r27
     eee:	94 f0       	brlt	.+36     	; 0xf14 <Timebase_UpCounter_SS_Update+0x24e>
	  sec_val += 1;
     ef0:	08 94       	sec
     ef2:	41 1c       	adc	r4, r1
     ef4:	51 1c       	adc	r5, r1
     ef6:	61 1c       	adc	r6, r1
     ef8:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     efa:	21 81       	ldd	r18, Z+1	; 0x01
     efc:	32 81       	ldd	r19, Z+2	; 0x02
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	c5 01       	movw	r24, r10
     f04:	b4 01       	movw	r22, r8
     f06:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
     f0a:	ac 01       	movw	r20, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	da 01       	movw	r26, r20
     f10:	4c 01       	movw	r8, r24
     f12:	5d 01       	movw	r10, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     f14:	89 e1       	ldi	r24, 0x19	; 25
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	2d 81       	ldd	r18, Y+5	; 0x05
     f1a:	3e 81       	ldd	r19, Y+6	; 0x06
     f1c:	28 9f       	mul	r18, r24
     f1e:	b0 01       	movw	r22, r0
     f20:	29 9f       	mul	r18, r25
     f22:	70 0d       	add	r23, r0
     f24:	38 9f       	mul	r19, r24
     f26:	70 0d       	add	r23, r0
     f28:	11 24       	eor	r1, r1
     f2a:	62 0d       	add	r22, r2
     f2c:	73 1d       	adc	r23, r3
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	ab 81       	ldd	r26, Y+3	; 0x03
     f34:	bc 81       	ldd	r27, Y+4	; 0x04
     f36:	84 0d       	add	r24, r4
     f38:	95 1d       	adc	r25, r5
     f3a:	a6 1d       	adc	r26, r6
     f3c:	b7 1d       	adc	r27, r7
     f3e:	fb 01       	movw	r30, r22
     f40:	87 8b       	std	Z+23, r24	; 0x17
     f42:	90 8f       	std	Z+24, r25	; 0x18
     f44:	a1 8f       	std	Z+25, r26	; 0x19
     f46:	b2 8f       	std	Z+26, r27	; 0x1a
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     f48:	db 01       	movw	r26, r22
     f4a:	5b 96       	adiw	r26, 0x1b	; 27
     f4c:	8d 92       	st	X+, r8
     f4e:	9d 92       	st	X+, r9
     f50:	ad 92       	st	X+, r10
     f52:	bc 92       	st	X, r11
     f54:	5e 97       	sbiw	r26, 0x1e	; 30
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
     f56:	5f 96       	adiw	r26, 0x1f	; 31
     f58:	2d 91       	ld	r18, X+
     f5a:	3d 91       	ld	r19, X+
     f5c:	4d 91       	ld	r20, X+
     f5e:	5c 91       	ld	r21, X
     f60:	92 97       	sbiw	r26, 0x22	; 34
     f62:	93 96       	adiw	r26, 0x23	; 35
     f64:	8d 91       	ld	r24, X+
     f66:	9d 91       	ld	r25, X+
     f68:	0d 90       	ld	r0, X+
     f6a:	bc 91       	ld	r27, X
     f6c:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     f6e:	28 1b       	sub	r18, r24
     f70:	39 0b       	sbc	r19, r25
     f72:	4a 0b       	sbc	r20, r26
     f74:	5b 0b       	sbc	r21, r27
     f76:	57 ff       	sbrs	r21, 7
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <Timebase_UpCounter_SS_Update+0x2bc>
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e0       	ldi	r20, 0x00	; 0
     f80:	50 e0       	ldi	r21, 0x00	; 0
     f82:	fb 01       	movw	r30, r22
     f84:	27 a3       	std	Z+39, r18	; 0x27
     f86:	30 a7       	std	Z+40, r19	; 0x28
     f88:	41 a7       	std	Z+41, r20	; 0x29
     f8a:	52 a7       	std	Z+42, r21	; 0x2a
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
     f8c:	26 96       	adiw	r28, 0x06	; 6
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	bf 90       	pop	r11
     faa:	af 90       	pop	r10
     fac:	9f 90       	pop	r9
     fae:	8f 90       	pop	r8
     fb0:	7f 90       	pop	r7
     fb2:	6f 90       	pop	r6
     fb4:	5f 90       	pop	r5
     fb6:	4f 90       	pop	r4
     fb8:	3f 90       	pop	r3
     fba:	2f 90       	pop	r2
     fbc:	08 95       	ret

00000fbe <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	e0 91 43 01 	lds	r30, 0x0143
     fc4:	f0 91 44 01 	lds	r31, 0x0144
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	29 e1       	ldi	r18, 0x19	; 25
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	bc 01       	movw	r22, r24
     fd0:	62 9f       	mul	r22, r18
     fd2:	c0 01       	movw	r24, r0
     fd4:	63 9f       	mul	r22, r19
     fd6:	90 0d       	add	r25, r0
     fd8:	72 9f       	mul	r23, r18
     fda:	90 0d       	add	r25, r0
     fdc:	11 24       	eor	r1, r1
     fde:	e8 0f       	add	r30, r24
     fe0:	f9 1f       	adc	r31, r25
     fe2:	86 89       	ldd	r24, Z+22	; 0x16
     fe4:	86 95       	lsr	r24
     fe6:	8f 70       	andi	r24, 0x0F	; 15
     fe8:	84 30       	cpi	r24, 0x04	; 4
     fea:	09 f4       	brne	.+2      	; 0xfee <Timebase_UpCounter_SS_Expired+0x30>
     fec:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fee:	84 2f       	mov	r24, r20
     ff0:	08 95       	ret

00000ff2 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
     ff2:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     ff4:	e0 91 43 01 	lds	r30, 0x0143
     ff8:	f0 91 44 01 	lds	r31, 0x0144
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	89 e1       	ldi	r24, 0x19	; 25
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	bc 01       	movw	r22, r24
    1006:	26 9f       	mul	r18, r22
    1008:	c0 01       	movw	r24, r0
    100a:	27 9f       	mul	r18, r23
    100c:	90 0d       	add	r25, r0
    100e:	36 9f       	mul	r19, r22
    1010:	90 0d       	add	r25, r0
    1012:	11 24       	eor	r1, r1
    1014:	e8 0f       	add	r30, r24
    1016:	f9 1f       	adc	r31, r25
    1018:	86 89       	ldd	r24, Z+22	; 0x16
    101a:	86 95       	lsr	r24
    101c:	8f 70       	andi	r24, 0x0F	; 15
    101e:	84 30       	cpi	r24, 0x04	; 4
    1020:	11 f0       	breq	.+4      	; 0x1026 <Timebase_UpCounter_SS_Expired_Event+0x34>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1026:	84 2f       	mov	r24, r20
    1028:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    102e:	08 95       	ret

00001030 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    1030:	e0 91 43 01 	lds	r30, 0x0143
    1034:	f0 91 44 01 	lds	r31, 0x0144
    1038:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    103a:	29 e1       	ldi	r18, 0x19	; 25
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	dc 01       	movw	r26, r24
    1040:	a2 9f       	mul	r26, r18
    1042:	c0 01       	movw	r24, r0
    1044:	a3 9f       	mul	r26, r19
    1046:	90 0d       	add	r25, r0
    1048:	b2 9f       	mul	r27, r18
    104a:	90 0d       	add	r25, r0
    104c:	11 24       	eor	r1, r1
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	86 89       	ldd	r24, Z+22	; 0x16
    1054:	80 fd       	sbrc	r24, 0
    1056:	0f c0       	rjmp	.+30     	; 0x1076 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1058:	87 a1       	ldd	r24, Z+39	; 0x27
    105a:	90 a5       	ldd	r25, Z+40	; 0x28
    105c:	a1 a5       	ldd	r26, Z+41	; 0x29
    105e:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1060:	84 0f       	add	r24, r20
    1062:	95 1f       	adc	r25, r21
    1064:	a6 1f       	adc	r26, r22
    1066:	b7 1f       	adc	r27, r23
    1068:	83 a7       	std	Z+43, r24	; 0x2b
    106a:	94 a7       	std	Z+44, r25	; 0x2c
    106c:	a5 a7       	std	Z+45, r26	; 0x2d
    106e:	b6 a7       	std	Z+46, r27	; 0x2e
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1070:	86 89       	ldd	r24, Z+22	; 0x16
    1072:	81 60       	ori	r24, 0x01	; 1
    1074:	86 8b       	std	Z+22, r24	; 0x16
    1076:	08 95       	ret

00001078 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1078:	e0 91 43 01 	lds	r30, 0x0143
    107c:	f0 91 44 01 	lds	r31, 0x0144
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	29 e1       	ldi	r18, 0x19	; 25
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ac 01       	movw	r20, r24
    1088:	42 9f       	mul	r20, r18
    108a:	c0 01       	movw	r24, r0
    108c:	43 9f       	mul	r20, r19
    108e:	90 0d       	add	r25, r0
    1090:	52 9f       	mul	r21, r18
    1092:	90 0d       	add	r25, r0
    1094:	11 24       	eor	r1, r1
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	23 a5       	ldd	r18, Z+43	; 0x2b
    109c:	34 a5       	ldd	r19, Z+44	; 0x2c
    109e:	45 a5       	ldd	r20, Z+45	; 0x2d
    10a0:	56 a5       	ldd	r21, Z+46	; 0x2e
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    10a2:	87 a1       	ldd	r24, Z+39	; 0x27
    10a4:	90 a5       	ldd	r25, Z+40	; 0x28
    10a6:	a1 a5       	ldd	r26, Z+41	; 0x29
    10a8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    10aa:	28 1b       	sub	r18, r24
    10ac:	39 0b       	sbc	r19, r25
    10ae:	4a 0b       	sbc	r20, r26
    10b0:	5b 0b       	sbc	r21, r27
    10b2:	57 ff       	sbrs	r21, 7
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    10be:	b9 01       	movw	r22, r18
    10c0:	ca 01       	movw	r24, r20
    10c2:	08 95       	ret

000010c4 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    10c8:	c0 91 43 01 	lds	r28, 0x0143
    10cc:	d0 91 44 01 	lds	r29, 0x0144
    10d0:	68 2f       	mov	r22, r24
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	89 e1       	ldi	r24, 0x19	; 25
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	68 9f       	mul	r22, r24
    10da:	f0 01       	movw	r30, r0
    10dc:	69 9f       	mul	r22, r25
    10de:	f0 0d       	add	r31, r0
    10e0:	78 9f       	mul	r23, r24
    10e2:	f0 0d       	add	r31, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ec 0f       	add	r30, r28
    10e8:	fd 1f       	adc	r31, r29
    10ea:	23 a5       	ldd	r18, Z+43	; 0x2b
    10ec:	34 a5       	ldd	r19, Z+44	; 0x2c
    10ee:	45 a5       	ldd	r20, Z+45	; 0x2d
    10f0:	56 a5       	ldd	r21, Z+46	; 0x2e
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    10f2:	87 a1       	ldd	r24, Z+39	; 0x27
    10f4:	90 a5       	ldd	r25, Z+40	; 0x28
    10f6:	a1 a5       	ldd	r26, Z+41	; 0x29
    10f8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    10fa:	28 1b       	sub	r18, r24
    10fc:	39 0b       	sbc	r19, r25
    10fe:	4a 0b       	sbc	r20, r26
    1100:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1102:	57 fd       	sbrc	r21, 7
    1104:	07 c0       	rjmp	.+14     	; 0x1114 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1106:	21 15       	cp	r18, r1
    1108:	31 05       	cpc	r19, r1
    110a:	41 05       	cpc	r20, r1
    110c:	51 05       	cpc	r21, r1
    110e:	11 f0       	breq	.+4      	; 0x1114 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	89 e1       	ldi	r24, 0x19	; 25
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	ac 01       	movw	r20, r24
    111c:	64 9f       	mul	r22, r20
    111e:	c0 01       	movw	r24, r0
    1120:	65 9f       	mul	r22, r21
    1122:	90 0d       	add	r25, r0
    1124:	74 9f       	mul	r23, r20
    1126:	90 0d       	add	r25, r0
    1128:	11 24       	eor	r1, r1
    112a:	c8 0f       	add	r28, r24
    112c:	d9 1f       	adc	r29, r25
    112e:	8e 89       	ldd	r24, Y+22	; 0x16
    1130:	80 ff       	sbrs	r24, 0
    1132:	21 e0       	ldi	r18, 0x01	; 1
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1138:	82 2f       	mov	r24, r18
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1140:	1f 93       	push	r17
    1142:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1144:	0e 94 62 08 	call	0x10c4	; 0x10c4 <Timebase_UpCounter_SS_Period_Value_Expired>
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	11 f0       	breq	.+4      	; 0x1150 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	16 c0       	rjmp	.+44     	; 0x117c <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1150:	e0 91 43 01 	lds	r30, 0x0143
    1154:	f0 91 44 01 	lds	r31, 0x0144
    1158:	21 2f       	mov	r18, r17
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	89 e1       	ldi	r24, 0x19	; 25
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	ac 01       	movw	r20, r24
    1162:	24 9f       	mul	r18, r20
    1164:	c0 01       	movw	r24, r0
    1166:	25 9f       	mul	r18, r21
    1168:	90 0d       	add	r25, r0
    116a:	34 9f       	mul	r19, r20
    116c:	90 0d       	add	r25, r0
    116e:	11 24       	eor	r1, r1
    1170:	e8 0f       	add	r30, r24
    1172:	f9 1f       	adc	r31, r25
    1174:	86 89       	ldd	r24, Z+22	; 0x16
    1176:	8e 7f       	andi	r24, 0xFE	; 254
    1178:	86 8b       	std	Z+22, r24	; 0x16
    117a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    117c:	1f 91       	pop	r17
    117e:	08 95       	ret

00001180 <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	0e 94 63 06 	call	0xcc6	; 0xcc6 <Timebase_UpCounter_SS_Update>
  }
}
    1186:	08 95       	ret

00001188 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	0e 94 2a 05 	call	0xa54	; 0xa54 <Timebase_UpCounter_SS_Reset>
  }
}
    118e:	08 95       	ret

00001190 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    1190:	e0 91 43 01 	lds	r30, 0x0143
    1194:	f0 91 44 01 	lds	r31, 0x0144
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	25 e1       	ldi	r18, 0x15	; 21
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	ac 01       	movw	r20, r24
    11a0:	42 9f       	mul	r20, r18
    11a2:	c0 01       	movw	r24, r0
    11a4:	43 9f       	mul	r20, r19
    11a6:	90 0d       	add	r25, r0
    11a8:	52 9f       	mul	r21, r18
    11aa:	90 0d       	add	r25, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	e8 0f       	add	r30, r24
    11b0:	f9 1f       	adc	r31, r25
    11b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    11b4:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    11b6:	8f 70       	andi	r24, 0x0F	; 15
    11b8:	08 95       	ret

000011ba <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    11ba:	e0 91 43 01 	lds	r30, 0x0143
    11be:	f0 91 44 01 	lds	r31, 0x0144
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	25 e1       	ldi	r18, 0x15	; 21
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	ac 01       	movw	r20, r24
    11ca:	42 9f       	mul	r20, r18
    11cc:	c0 01       	movw	r24, r0
    11ce:	43 9f       	mul	r20, r19
    11d0:	90 0d       	add	r25, r0
    11d2:	52 9f       	mul	r21, r18
    11d4:	90 0d       	add	r25, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	e8 0f       	add	r30, r24
    11da:	f9 1f       	adc	r31, r25
    11dc:	6f 70       	andi	r22, 0x0F	; 15
    11de:	66 0f       	add	r22, r22
    11e0:	87 a5       	ldd	r24, Z+47	; 0x2f
    11e2:	81 7e       	andi	r24, 0xE1	; 225
    11e4:	86 2b       	or	r24, r22
    11e6:	87 a7       	std	Z+47, r24	; 0x2f
}
    11e8:	08 95       	ret

000011ea <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    11ea:	e0 91 43 01 	lds	r30, 0x0143
    11ee:	f0 91 44 01 	lds	r31, 0x0144
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	25 e1       	ldi	r18, 0x15	; 21
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	ac 01       	movw	r20, r24
    11fa:	42 9f       	mul	r20, r18
    11fc:	c0 01       	movw	r24, r0
    11fe:	43 9f       	mul	r20, r19
    1200:	90 0d       	add	r25, r0
    1202:	52 9f       	mul	r21, r18
    1204:	90 0d       	add	r25, r0
    1206:	11 24       	eor	r1, r1
    1208:	e8 0f       	add	r30, r24
    120a:	f9 1f       	adc	r31, r25
    120c:	df 01       	movw	r26, r30
    120e:	dc 96       	adiw	r26, 0x3c	; 60
    1210:	64 ad       	ldd	r22, Z+60	; 0x3c
    1212:	11 96       	adiw	r26, 0x01	; 1
    1214:	7c 91       	ld	r23, X
    1216:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Value;
}
    1218:	12 96       	adiw	r26, 0x02	; 2
    121a:	8c 91       	ld	r24, X
    121c:	12 97       	sbiw	r26, 0x02	; 2
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	9c 91       	ld	r25, X
    1222:	08 95       	ret

00001224 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1228:	c0 91 43 01 	lds	r28, 0x0143
    122c:	d0 91 44 01 	lds	r29, 0x0144
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	25 e1       	ldi	r18, 0x15	; 21
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	fc 01       	movw	r30, r24
    1238:	e2 9f       	mul	r30, r18
    123a:	c0 01       	movw	r24, r0
    123c:	e3 9f       	mul	r30, r19
    123e:	90 0d       	add	r25, r0
    1240:	f2 9f       	mul	r31, r18
    1242:	90 0d       	add	r25, r0
    1244:	11 24       	eor	r1, r1
    1246:	c8 0f       	add	r28, r24
    1248:	d9 1f       	adc	r29, r25
    124a:	ca 01       	movw	r24, r20
    124c:	db 01       	movw	r26, r22
    124e:	b7 ff       	sbrs	r27, 7
    1250:	04 c0       	rjmp	.+8      	; 0x125a <Timebase_UpCounter_Set_Value+0x36>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 e0       	ldi	r26, 0x00	; 0
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	8c af       	std	Y+60, r24	; 0x3c
    125c:	9d af       	std	Y+61, r25	; 0x3d
    125e:	ae af       	std	Y+62, r26	; 0x3e
    1260:	bf af       	std	Y+63, r27	; 0x3f
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	08 95       	ret

00001268 <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    1268:	e0 91 43 01 	lds	r30, 0x0143
    126c:	f0 91 44 01 	lds	r31, 0x0144
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	25 e1       	ldi	r18, 0x15	; 21
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	ac 01       	movw	r20, r24
    1278:	42 9f       	mul	r20, r18
    127a:	c0 01       	movw	r24, r0
    127c:	43 9f       	mul	r20, r19
    127e:	90 0d       	add	r25, r0
    1280:	52 9f       	mul	r21, r18
    1282:	90 0d       	add	r25, r0
    1284:	11 24       	eor	r1, r1
    1286:	e8 0f       	add	r30, r24
    1288:	f9 1f       	adc	r31, r25
    128a:	df 01       	movw	r26, r30
    128c:	d0 96       	adiw	r26, 0x30	; 48
    128e:	60 a9       	ldd	r22, Z+48	; 0x30
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	7c 91       	ld	r23, X
    1294:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	8c 91       	ld	r24, X
    129a:	12 97       	sbiw	r26, 0x02	; 2
    129c:	13 96       	adiw	r26, 0x03	; 3
    129e:	9c 91       	ld	r25, X
    12a0:	08 95       	ret

000012a2 <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    12a2:	e0 91 43 01 	lds	r30, 0x0143
    12a6:	f0 91 44 01 	lds	r31, 0x0144
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	25 e1       	ldi	r18, 0x15	; 21
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	ac 01       	movw	r20, r24
    12b2:	42 9f       	mul	r20, r18
    12b4:	c0 01       	movw	r24, r0
    12b6:	43 9f       	mul	r20, r19
    12b8:	90 0d       	add	r25, r0
    12ba:	52 9f       	mul	r21, r18
    12bc:	90 0d       	add	r25, r0
    12be:	11 24       	eor	r1, r1
    12c0:	e8 0f       	add	r30, r24
    12c2:	f9 1f       	adc	r31, r25
    12c4:	df 01       	movw	r26, r30
    12c6:	d0 96       	adiw	r26, 0x30	; 48
    12c8:	60 a9       	ldd	r22, Z+48	; 0x30
    12ca:	11 96       	adiw	r26, 0x01	; 1
    12cc:	7c 91       	ld	r23, X
    12ce:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    12d0:	12 96       	adiw	r26, 0x02	; 2
    12d2:	8c 91       	ld	r24, X
    12d4:	12 97       	sbiw	r26, 0x02	; 2
    12d6:	13 96       	adiw	r26, 0x03	; 3
    12d8:	9c 91       	ld	r25, X
    12da:	08 95       	ret

000012dc <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    12dc:	e0 91 43 01 	lds	r30, 0x0143
    12e0:	f0 91 44 01 	lds	r31, 0x0144
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	25 e1       	ldi	r18, 0x15	; 21
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	dc 01       	movw	r26, r24
    12ec:	a2 9f       	mul	r26, r18
    12ee:	c0 01       	movw	r24, r0
    12f0:	a3 9f       	mul	r26, r19
    12f2:	90 0d       	add	r25, r0
    12f4:	b2 9f       	mul	r27, r18
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	e8 0f       	add	r30, r24
    12fc:	f9 1f       	adc	r31, r25
    12fe:	40 ab       	std	Z+48, r20	; 0x30
    1300:	51 ab       	std	Z+49, r21	; 0x31
    1302:	62 ab       	std	Z+50, r22	; 0x32
    1304:	73 ab       	std	Z+51, r23	; 0x33
}
    1306:	08 95       	ret

00001308 <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1308:	e0 91 43 01 	lds	r30, 0x0143
    130c:	f0 91 44 01 	lds	r31, 0x0144
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	25 e1       	ldi	r18, 0x15	; 21
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	dc 01       	movw	r26, r24
    1318:	a2 9f       	mul	r26, r18
    131a:	c0 01       	movw	r24, r0
    131c:	a3 9f       	mul	r26, r19
    131e:	90 0d       	add	r25, r0
    1320:	b2 9f       	mul	r27, r18
    1322:	90 0d       	add	r25, r0
    1324:	11 24       	eor	r1, r1
    1326:	e8 0f       	add	r30, r24
    1328:	f9 1f       	adc	r31, r25
    132a:	40 ab       	std	Z+48, r20	; 0x30
    132c:	51 ab       	std	Z+49, r21	; 0x31
    132e:	62 ab       	std	Z+50, r22	; 0x32
    1330:	73 ab       	std	Z+51, r23	; 0x33
}
    1332:	08 95       	ret

00001334 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    1334:	e0 91 43 01 	lds	r30, 0x0143
    1338:	f0 91 44 01 	lds	r31, 0x0144
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	25 e1       	ldi	r18, 0x15	; 21
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	ac 01       	movw	r20, r24
    1344:	42 9f       	mul	r20, r18
    1346:	c0 01       	movw	r24, r0
    1348:	43 9f       	mul	r20, r19
    134a:	90 0d       	add	r25, r0
    134c:	52 9f       	mul	r21, r18
    134e:	90 0d       	add	r25, r0
    1350:	11 24       	eor	r1, r1
    1352:	e8 0f       	add	r30, r24
    1354:	f9 1f       	adc	r31, r25
    1356:	df 01       	movw	r26, r30
    1358:	d4 96       	adiw	r26, 0x34	; 52
    135a:	64 a9       	ldd	r22, Z+52	; 0x34
    135c:	11 96       	adiw	r26, 0x01	; 1
    135e:	7c 91       	ld	r23, X
    1360:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    1362:	12 96       	adiw	r26, 0x02	; 2
    1364:	8c 91       	ld	r24, X
    1366:	12 97       	sbiw	r26, 0x02	; 2
    1368:	13 96       	adiw	r26, 0x03	; 3
    136a:	9c 91       	ld	r25, X
    136c:	08 95       	ret

0000136e <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    136e:	e0 91 43 01 	lds	r30, 0x0143
    1372:	f0 91 44 01 	lds	r31, 0x0144
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	25 e1       	ldi	r18, 0x15	; 21
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	dc 01       	movw	r26, r24
    137e:	a2 9f       	mul	r26, r18
    1380:	c0 01       	movw	r24, r0
    1382:	a3 9f       	mul	r26, r19
    1384:	90 0d       	add	r25, r0
    1386:	b2 9f       	mul	r27, r18
    1388:	90 0d       	add	r25, r0
    138a:	11 24       	eor	r1, r1
    138c:	e8 0f       	add	r30, r24
    138e:	f9 1f       	adc	r31, r25
    1390:	44 ab       	std	Z+52, r20	; 0x34
    1392:	55 ab       	std	Z+53, r21	; 0x35
    1394:	66 ab       	std	Z+54, r22	; 0x36
    1396:	77 ab       	std	Z+55, r23	; 0x37
}
    1398:	08 95       	ret

0000139a <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    139a:	e0 91 43 01 	lds	r30, 0x0143
    139e:	f0 91 44 01 	lds	r31, 0x0144
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	25 e1       	ldi	r18, 0x15	; 21
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	ac 01       	movw	r20, r24
    13aa:	42 9f       	mul	r20, r18
    13ac:	c0 01       	movw	r24, r0
    13ae:	43 9f       	mul	r20, r19
    13b0:	90 0d       	add	r25, r0
    13b2:	52 9f       	mul	r21, r18
    13b4:	90 0d       	add	r25, r0
    13b6:	11 24       	eor	r1, r1
    13b8:	e8 0f       	add	r30, r24
    13ba:	f9 1f       	adc	r31, r25
    13bc:	df 01       	movw	r26, r30
    13be:	d8 96       	adiw	r26, 0x38	; 56
    13c0:	60 ad       	ldd	r22, Z+56	; 0x38
    13c2:	11 96       	adiw	r26, 0x01	; 1
    13c4:	7c 91       	ld	r23, X
    13c6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
    13c8:	12 96       	adiw	r26, 0x02	; 2
    13ca:	8c 91       	ld	r24, X
    13cc:	12 97       	sbiw	r26, 0x02	; 2
    13ce:	13 96       	adiw	r26, 0x03	; 3
    13d0:	9c 91       	ld	r25, X
    13d2:	08 95       	ret

000013d4 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    13d8:	c0 91 43 01 	lds	r28, 0x0143
    13dc:	d0 91 44 01 	lds	r29, 0x0144
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	25 e1       	ldi	r18, 0x15	; 21
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	fc 01       	movw	r30, r24
    13e8:	e2 9f       	mul	r30, r18
    13ea:	c0 01       	movw	r24, r0
    13ec:	e3 9f       	mul	r30, r19
    13ee:	90 0d       	add	r25, r0
    13f0:	f2 9f       	mul	r31, r18
    13f2:	90 0d       	add	r25, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	c8 0f       	add	r28, r24
    13f8:	d9 1f       	adc	r29, r25
    13fa:	ca 01       	movw	r24, r20
    13fc:	db 01       	movw	r26, r22
    13fe:	b7 ff       	sbrs	r27, 7
    1400:	04 c0       	rjmp	.+8      	; 0x140a <Timebase_UpCounter_Set_TemporaryValue+0x36>
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a0 e0       	ldi	r26, 0x00	; 0
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	88 af       	std	Y+56, r24	; 0x38
    140c:	99 af       	std	Y+57, r25	; 0x39
    140e:	aa af       	std	Y+58, r26	; 0x3a
    1410:	bb af       	std	Y+59, r27	; 0x3b
}
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	08 95       	ret

00001418 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1418:	e0 91 43 01 	lds	r30, 0x0143
    141c:	f0 91 44 01 	lds	r31, 0x0144
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	25 e1       	ldi	r18, 0x15	; 21
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	ac 01       	movw	r20, r24
    1428:	42 9f       	mul	r20, r18
    142a:	c0 01       	movw	r24, r0
    142c:	43 9f       	mul	r20, r19
    142e:	90 0d       	add	r25, r0
    1430:	52 9f       	mul	r21, r18
    1432:	90 0d       	add	r25, r0
    1434:	11 24       	eor	r1, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	e0 5c       	subi	r30, 0xC0	; 192
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	08 95       	ret

00001448 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1448:	e0 91 43 01 	lds	r30, 0x0143
    144c:	f0 91 44 01 	lds	r31, 0x0144
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	25 e1       	ldi	r18, 0x15	; 21
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	dc 01       	movw	r26, r24
    1458:	a2 9f       	mul	r26, r18
    145a:	c0 01       	movw	r24, r0
    145c:	a3 9f       	mul	r26, r19
    145e:	90 0d       	add	r25, r0
    1460:	b2 9f       	mul	r27, r18
    1462:	90 0d       	add	r25, r0
    1464:	11 24       	eor	r1, r1
    1466:	e8 0f       	add	r30, r24
    1468:	f9 1f       	adc	r31, r25
    146a:	e0 5c       	subi	r30, 0xC0	; 192
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	40 83       	st	Z, r20
    1470:	51 83       	std	Z+1, r21	; 0x01
    1472:	62 83       	std	Z+2, r22	; 0x02
    1474:	73 83       	std	Z+3, r23	; 0x03
}
    1476:	08 95       	ret

00001478 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    1478:	e0 91 43 01 	lds	r30, 0x0143
    147c:	f0 91 44 01 	lds	r31, 0x0144
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	25 e1       	ldi	r18, 0x15	; 21
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	ac 01       	movw	r20, r24
    1488:	42 9f       	mul	r20, r18
    148a:	c0 01       	movw	r24, r0
    148c:	43 9f       	mul	r20, r19
    148e:	90 0d       	add	r25, r0
    1490:	52 9f       	mul	r21, r18
    1492:	90 0d       	add	r25, r0
    1494:	11 24       	eor	r1, r1
    1496:	e8 0f       	add	r30, r24
    1498:	f9 1f       	adc	r31, r25
    149a:	87 a5       	ldd	r24, Z+47	; 0x2f
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	08 95       	ret

000014a0 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    14a0:	e0 91 43 01 	lds	r30, 0x0143
    14a4:	f0 91 44 01 	lds	r31, 0x0144
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	25 e1       	ldi	r18, 0x15	; 21
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	ac 01       	movw	r20, r24
    14b0:	42 9f       	mul	r20, r18
    14b2:	c0 01       	movw	r24, r0
    14b4:	43 9f       	mul	r20, r19
    14b6:	90 0d       	add	r25, r0
    14b8:	52 9f       	mul	r21, r18
    14ba:	90 0d       	add	r25, r0
    14bc:	11 24       	eor	r1, r1
    14be:	e8 0f       	add	r30, r24
    14c0:	f9 1f       	adc	r31, r25
    14c2:	87 a5       	ldd	r24, Z+47	; 0x2f
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	87 a7       	std	Z+47, r24	; 0x2f
}
    14c8:	08 95       	ret

000014ca <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14ca:	e0 91 43 01 	lds	r30, 0x0143
    14ce:	f0 91 44 01 	lds	r31, 0x0144
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	25 e1       	ldi	r18, 0x15	; 21
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	ac 01       	movw	r20, r24
    14da:	42 9f       	mul	r20, r18
    14dc:	c0 01       	movw	r24, r0
    14de:	43 9f       	mul	r20, r19
    14e0:	90 0d       	add	r25, r0
    14e2:	52 9f       	mul	r21, r18
    14e4:	90 0d       	add	r25, r0
    14e6:	11 24       	eor	r1, r1
    14e8:	e8 0f       	add	r30, r24
    14ea:	f9 1f       	adc	r31, r25
    14ec:	87 a5       	ldd	r24, Z+47	; 0x2f
    14ee:	8e 7f       	andi	r24, 0xFE	; 254
    14f0:	87 a7       	std	Z+47, r24	; 0x2f
}
    14f2:	08 95       	ret

000014f4 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    14f4:	e0 91 43 01 	lds	r30, 0x0143
    14f8:	f0 91 44 01 	lds	r31, 0x0144
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	25 e1       	ldi	r18, 0x15	; 21
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	ac 01       	movw	r20, r24
    1504:	42 9f       	mul	r20, r18
    1506:	c0 01       	movw	r24, r0
    1508:	43 9f       	mul	r20, r19
    150a:	90 0d       	add	r25, r0
    150c:	52 9f       	mul	r21, r18
    150e:	90 0d       	add	r25, r0
    1510:	11 24       	eor	r1, r1
    1512:	e8 0f       	add	r30, r24
    1514:	f9 1f       	adc	r31, r25
    1516:	87 a5       	ldd	r24, Z+47	; 0x2f

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1518:	14 ae       	std	Z+60, r1	; 0x3c
    151a:	15 ae       	std	Z+61, r1	; 0x3d
    151c:	16 ae       	std	Z+62, r1	; 0x3e
    151e:	17 ae       	std	Z+63, r1	; 0x3f
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1520:	10 aa       	std	Z+48, r1	; 0x30
    1522:	11 aa       	std	Z+49, r1	; 0x31
    1524:	12 aa       	std	Z+50, r1	; 0x32
    1526:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1528:	14 aa       	std	Z+52, r1	; 0x34
    152a:	15 aa       	std	Z+53, r1	; 0x35
    152c:	16 aa       	std	Z+54, r1	; 0x36
    152e:	17 aa       	std	Z+55, r1	; 0x37

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1530:	10 ae       	std	Z+56, r1	; 0x38
    1532:	11 ae       	std	Z+57, r1	; 0x39
    1534:	12 ae       	std	Z+58, r1	; 0x3a
    1536:	13 ae       	std	Z+59, r1	; 0x3b
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1538:	e0 5c       	subi	r30, 0xC0	; 192
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	10 82       	st	Z, r1
    153e:	11 82       	std	Z+1, r1	; 0x01
    1540:	12 82       	std	Z+2, r1	; 0x02
    1542:	13 82       	std	Z+3, r1	; 0x03
    1544:	e0 54       	subi	r30, 0x40	; 64
    1546:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1548:	80 7e       	andi	r24, 0xE0	; 224
    154a:	87 a7       	std	Z+47, r24	; 0x2f
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    154c:	08 95       	ret

0000154e <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    154e:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <Timebase_UpCounter_Reset>
}
    1552:	08 95       	ret

00001554 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1554:	e0 91 43 01 	lds	r30, 0x0143
    1558:	f0 91 44 01 	lds	r31, 0x0144
    155c:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    155e:	25 e1       	ldi	r18, 0x15	; 21
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	ac 01       	movw	r20, r24
    1564:	42 9f       	mul	r20, r18
    1566:	c0 01       	movw	r24, r0
    1568:	43 9f       	mul	r20, r19
    156a:	90 0d       	add	r25, r0
    156c:	52 9f       	mul	r21, r18
    156e:	90 0d       	add	r25, r0
    1570:	11 24       	eor	r1, r1
    1572:	e8 0f       	add	r30, r24
    1574:	f9 1f       	adc	r31, r25
    1576:	97 a5       	ldd	r25, Z+47	; 0x2f
    1578:	89 2f       	mov	r24, r25
    157a:	86 95       	lsr	r24
    157c:	8f 70       	andi	r24, 0x0F	; 15
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	19 f0       	breq	.+6      	; 0x1588 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1582:	91 7e       	andi	r25, 0xE1	; 225
    1584:	92 60       	ori	r25, 0x02	; 2
    1586:	97 a7       	std	Z+47, r25	; 0x2f
    1588:	08 95       	ret

0000158a <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    158a:	e0 91 43 01 	lds	r30, 0x0143
    158e:	f0 91 44 01 	lds	r31, 0x0144
    1592:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1594:	25 e1       	ldi	r18, 0x15	; 21
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	ac 01       	movw	r20, r24
    159a:	42 9f       	mul	r20, r18
    159c:	c0 01       	movw	r24, r0
    159e:	43 9f       	mul	r20, r19
    15a0:	90 0d       	add	r25, r0
    15a2:	52 9f       	mul	r21, r18
    15a4:	90 0d       	add	r25, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	e8 0f       	add	r30, r24
    15aa:	f9 1f       	adc	r31, r25
    15ac:	97 a5       	ldd	r25, Z+47	; 0x2f
    15ae:	89 2f       	mov	r24, r25
    15b0:	86 95       	lsr	r24
    15b2:	8f 70       	andi	r24, 0x0F	; 15
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	19 f0       	breq	.+6      	; 0x15be <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    15b8:	91 7e       	andi	r25, 0xE1	; 225
    15ba:	94 60       	ori	r25, 0x04	; 4
    15bc:	97 a7       	std	Z+47, r25	; 0x2f
    15be:	08 95       	ret

000015c0 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    15c0:	a0 91 43 01 	lds	r26, 0x0143
    15c4:	b0 91 44 01 	lds	r27, 0x0144
    15c8:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    15ca:	25 e1       	ldi	r18, 0x15	; 21
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	82 9f       	mul	r24, r18
    15d0:	f0 01       	movw	r30, r0
    15d2:	83 9f       	mul	r24, r19
    15d4:	f0 0d       	add	r31, r0
    15d6:	92 9f       	mul	r25, r18
    15d8:	f0 0d       	add	r31, r0
    15da:	11 24       	eor	r1, r1
    15dc:	ea 0f       	add	r30, r26
    15de:	fb 1f       	adc	r31, r27
    15e0:	87 a5       	ldd	r24, Z+47	; 0x2f
    15e2:	86 95       	lsr	r24
    15e4:	8f 70       	andi	r24, 0x0F	; 15
    15e6:	19 f5       	brne	.+70     	; 0x162e <Timebase_UpCounter_Set_Securely+0x6e>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    15e8:	14 ae       	std	Z+60, r1	; 0x3c
    15ea:	15 ae       	std	Z+61, r1	; 0x3d
    15ec:	16 ae       	std	Z+62, r1	; 0x3e
    15ee:	17 ae       	std	Z+63, r1	; 0x3f

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    15f0:	10 ae       	std	Z+56, r1	; 0x38
    15f2:	11 ae       	std	Z+57, r1	; 0x39
    15f4:	12 ae       	std	Z+58, r1	; 0x3a
    15f6:	13 ae       	std	Z+59, r1	; 0x3b
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    15f8:	44 ab       	std	Z+52, r20	; 0x34
    15fa:	55 ab       	std	Z+53, r21	; 0x35
    15fc:	66 ab       	std	Z+54, r22	; 0x36
    15fe:	77 ab       	std	Z+55, r23	; 0x37
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1600:	1a 96       	adiw	r26, 0x0a	; 10
    1602:	8d 91       	ld	r24, X+
    1604:	9d 91       	ld	r25, X+
    1606:	0d 90       	ld	r0, X+
    1608:	bc 91       	ld	r27, X
    160a:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    160c:	84 0f       	add	r24, r20
    160e:	95 1f       	adc	r25, r21
    1610:	a6 1f       	adc	r26, r22
    1612:	b7 1f       	adc	r27, r23
    1614:	80 ab       	std	Z+48, r24	; 0x30
    1616:	91 ab       	std	Z+49, r25	; 0x31
    1618:	a2 ab       	std	Z+50, r26	; 0x32
    161a:	b3 ab       	std	Z+51, r27	; 0x33
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    161c:	97 a5       	ldd	r25, Z+47	; 0x2f
    161e:	89 2f       	mov	r24, r25
    1620:	86 95       	lsr	r24
    1622:	8f 70       	andi	r24, 0x0F	; 15
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	19 f0       	breq	.+6      	; 0x162e <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1628:	91 7e       	andi	r25, 0xE1	; 225
    162a:	92 60       	ori	r25, 0x02	; 2
    162c:	97 a7       	std	Z+47, r25	; 0x2f
    162e:	08 95       	ret

00001630 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	d8 2e       	mov	r13, r24
    163c:	7a 01       	movw	r14, r20
    163e:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    1640:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    1644:	8d 2d       	mov	r24, r13
    1646:	b8 01       	movw	r22, r16
    1648:	a7 01       	movw	r20, r14
    164a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Timebase_UpCounter_Set_Securely>
} 
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	08 95       	ret

0000165a <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1662:	60 91 43 01 	lds	r22, 0x0143
    1666:	70 91 44 01 	lds	r23, 0x0144
    166a:	08 2f       	mov	r16, r24
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	85 e1       	ldi	r24, 0x15	; 21
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	08 9f       	mul	r16, r24
    1674:	f0 01       	movw	r30, r0
    1676:	09 9f       	mul	r16, r25
    1678:	f0 0d       	add	r31, r0
    167a:	18 9f       	mul	r17, r24
    167c:	f0 0d       	add	r31, r0
    167e:	11 24       	eor	r1, r1
    1680:	e6 0f       	add	r30, r22
    1682:	f7 1f       	adc	r31, r23
    1684:	87 a5       	ldd	r24, Z+47	; 0x2f
    1686:	86 95       	lsr	r24
    1688:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	09 f0       	breq	.+2      	; 0x1690 <Timebase_UpCounter_Update+0x36>
    168e:	73 c0       	rjmp	.+230    	; 0x1776 <Timebase_UpCounter_Update+0x11c>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1690:	eb 01       	movw	r28, r22
    1692:	8a 85       	ldd	r24, Y+10	; 0x0a
    1694:	9b 85       	ldd	r25, Y+11	; 0x0b
    1696:	ac 85       	ldd	r26, Y+12	; 0x0c
    1698:	bd 85       	ldd	r27, Y+13	; 0x0d

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    169a:	20 a9       	ldd	r18, Z+48	; 0x30
    169c:	31 a9       	ldd	r19, Z+49	; 0x31
    169e:	42 a9       	ldd	r20, Z+50	; 0x32
    16a0:	53 a9       	ldd	r21, Z+51	; 0x33
    16a2:	28 1b       	sub	r18, r24
    16a4:	39 0b       	sbc	r19, r25
    16a6:	4a 0b       	sbc	r20, r26
    16a8:	5b 0b       	sbc	r21, r27
    16aa:	57 ff       	sbrs	r21, 7
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <Timebase_UpCounter_Update+0x5c>
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e0       	ldi	r20, 0x00	; 0
    16b4:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    16b6:	85 e1       	ldi	r24, 0x15	; 21
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	08 9f       	mul	r16, r24
    16bc:	f0 01       	movw	r30, r0
    16be:	09 9f       	mul	r16, r25
    16c0:	f0 0d       	add	r31, r0
    16c2:	18 9f       	mul	r17, r24
    16c4:	f0 0d       	add	r31, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	e6 0f       	add	r30, r22
    16ca:	f7 1f       	adc	r31, r23
    16cc:	20 af       	std	Z+56, r18	; 0x38
    16ce:	31 af       	std	Z+57, r19	; 0x39
    16d0:	42 af       	std	Z+58, r20	; 0x3a
    16d2:	53 af       	std	Z+59, r21	; 0x3b
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    16d4:	84 a9       	ldd	r24, Z+52	; 0x34
    16d6:	95 a9       	ldd	r25, Z+53	; 0x35
    16d8:	a6 a9       	ldd	r26, Z+54	; 0x36
    16da:	b7 a9       	ldd	r27, Z+55	; 0x37

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    16dc:	82 1b       	sub	r24, r18
    16de:	93 0b       	sbc	r25, r19
    16e0:	a4 0b       	sbc	r26, r20
    16e2:	b5 0b       	sbc	r27, r21
    16e4:	b7 ff       	sbrs	r27, 7
    16e6:	04 c0       	rjmp	.+8      	; 0x16f0 <Timebase_UpCounter_Update+0x96>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	84 af       	std	Z+60, r24	; 0x3c
    16f2:	95 af       	std	Z+61, r25	; 0x3d
    16f4:	a6 af       	std	Z+62, r26	; 0x3e
    16f6:	b7 af       	std	Z+63, r27	; 0x3f
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    16f8:	85 e1       	ldi	r24, 0x15	; 21
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	08 9f       	mul	r16, r24
    16fe:	e0 01       	movw	r28, r0
    1700:	09 9f       	mul	r16, r25
    1702:	d0 0d       	add	r29, r0
    1704:	18 9f       	mul	r17, r24
    1706:	d0 0d       	add	r29, r0
    1708:	11 24       	eor	r1, r1
    170a:	c6 0f       	add	r28, r22
    170c:	d7 1f       	adc	r29, r23
    170e:	88 ad       	ldd	r24, Y+56	; 0x38
    1710:	99 ad       	ldd	r25, Y+57	; 0x39
    1712:	aa ad       	ldd	r26, Y+58	; 0x3a
    1714:	bb ad       	ldd	r27, Y+59	; 0x3b
    1716:	18 16       	cp	r1, r24
    1718:	19 06       	cpc	r1, r25
    171a:	1a 06       	cpc	r1, r26
    171c:	1b 06       	cpc	r1, r27
    171e:	0c f4       	brge	.+2      	; 0x1722 <Timebase_UpCounter_Update+0xc8>
    1720:	4f c0       	rjmp	.+158    	; 0x17c0 <Timebase_UpCounter_Update+0x166>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1722:	18 aa       	std	Y+48, r1	; 0x30
    1724:	19 aa       	std	Y+49, r1	; 0x31
    1726:	1a aa       	std	Y+50, r1	; 0x32
    1728:	1b aa       	std	Y+51, r1	; 0x33

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    172a:	18 ae       	std	Y+56, r1	; 0x38
    172c:	19 ae       	std	Y+57, r1	; 0x39
    172e:	1a ae       	std	Y+58, r1	; 0x3a
    1730:	1b ae       	std	Y+59, r1	; 0x3b
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    1732:	fe 01       	movw	r30, r28
    1734:	f4 96       	adiw	r30, 0x34	; 52

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1736:	2c a9       	ldd	r18, Y+52	; 0x34
    1738:	31 81       	ldd	r19, Z+1	; 0x01
    173a:	42 81       	ldd	r20, Z+2	; 0x02
    173c:	53 81       	ldd	r21, Z+3	; 0x03
    173e:	c9 01       	movw	r24, r18
    1740:	da 01       	movw	r26, r20
    1742:	b7 ff       	sbrs	r27, 7
    1744:	04 c0       	rjmp	.+8      	; 0x174e <Timebase_UpCounter_Update+0xf4>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a0 e0       	ldi	r26, 0x00	; 0
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	8c af       	std	Y+60, r24	; 0x3c
    1750:	9d af       	std	Y+61, r25	; 0x3d
    1752:	ae af       	std	Y+62, r26	; 0x3e
    1754:	bf af       	std	Y+63, r27	; 0x3f
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1756:	85 e1       	ldi	r24, 0x15	; 21
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	08 9f       	mul	r16, r24
    175c:	f0 01       	movw	r30, r0
    175e:	09 9f       	mul	r16, r25
    1760:	f0 0d       	add	r31, r0
    1762:	18 9f       	mul	r17, r24
    1764:	f0 0d       	add	r31, r0
    1766:	11 24       	eor	r1, r1
    1768:	e6 0f       	add	r30, r22
    176a:	f7 1f       	adc	r31, r23
    176c:	87 a5       	ldd	r24, Z+47	; 0x2f
    176e:	81 7e       	andi	r24, 0xE1	; 225
    1770:	88 60       	ori	r24, 0x08	; 8
    1772:	87 a7       	std	Z+47, r24	; 0x2f
    1774:	25 c0       	rjmp	.+74     	; 0x17c0 <Timebase_UpCounter_Update+0x166>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	19 f5       	brne	.+70     	; 0x17c0 <Timebase_UpCounter_Update+0x166>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    177a:	eb 01       	movw	r28, r22
    177c:	8a 85       	ldd	r24, Y+10	; 0x0a
    177e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1780:	ac 85       	ldd	r26, Y+12	; 0x0c
    1782:	bd 85       	ldd	r27, Y+13	; 0x0d
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1784:	20 ad       	ldd	r18, Z+56	; 0x38
    1786:	31 ad       	ldd	r19, Z+57	; 0x39
    1788:	42 ad       	ldd	r20, Z+58	; 0x3a
    178a:	53 ad       	ldd	r21, Z+59	; 0x3b
    178c:	82 0f       	add	r24, r18
    178e:	93 1f       	adc	r25, r19
    1790:	a4 1f       	adc	r26, r20
    1792:	b5 1f       	adc	r27, r21
    1794:	80 ab       	std	Z+48, r24	; 0x30
    1796:	91 ab       	std	Z+49, r25	; 0x31
    1798:	a2 ab       	std	Z+50, r26	; 0x32
    179a:	b3 ab       	std	Z+51, r27	; 0x33
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    179c:	84 a9       	ldd	r24, Z+52	; 0x34
    179e:	95 a9       	ldd	r25, Z+53	; 0x35
    17a0:	a6 a9       	ldd	r26, Z+54	; 0x36
    17a2:	b7 a9       	ldd	r27, Z+55	; 0x37

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    17a4:	82 1b       	sub	r24, r18
    17a6:	93 0b       	sbc	r25, r19
    17a8:	a4 0b       	sbc	r26, r20
    17aa:	b5 0b       	sbc	r27, r21
    17ac:	b7 ff       	sbrs	r27, 7
    17ae:	04 c0       	rjmp	.+8      	; 0x17b8 <Timebase_UpCounter_Update+0x15e>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a0 e0       	ldi	r26, 0x00	; 0
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	84 af       	std	Z+60, r24	; 0x3c
    17ba:	95 af       	std	Z+61, r25	; 0x3d
    17bc:	a6 af       	std	Z+62, r26	; 0x3e
    17be:	b7 af       	std	Z+63, r27	; 0x3f
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	08 95       	ret

000017ca <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	e0 91 43 01 	lds	r30, 0x0143
    17d0:	f0 91 44 01 	lds	r31, 0x0144
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	25 e1       	ldi	r18, 0x15	; 21
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	bc 01       	movw	r22, r24
    17dc:	62 9f       	mul	r22, r18
    17de:	c0 01       	movw	r24, r0
    17e0:	63 9f       	mul	r22, r19
    17e2:	90 0d       	add	r25, r0
    17e4:	72 9f       	mul	r23, r18
    17e6:	90 0d       	add	r25, r0
    17e8:	11 24       	eor	r1, r1
    17ea:	e8 0f       	add	r30, r24
    17ec:	f9 1f       	adc	r31, r25
    17ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    17f0:	86 95       	lsr	r24
    17f2:	8f 70       	andi	r24, 0x0F	; 15
    17f4:	84 30       	cpi	r24, 0x04	; 4
    17f6:	09 f4       	brne	.+2      	; 0x17fa <Timebase_UpCounter_Expired+0x30>
    17f8:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17fa:	84 2f       	mov	r24, r20
    17fc:	08 95       	ret

000017fe <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    17fe:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1800:	e0 91 43 01 	lds	r30, 0x0143
    1804:	f0 91 44 01 	lds	r31, 0x0144
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	85 e1       	ldi	r24, 0x15	; 21
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	bc 01       	movw	r22, r24
    1812:	26 9f       	mul	r18, r22
    1814:	c0 01       	movw	r24, r0
    1816:	27 9f       	mul	r18, r23
    1818:	90 0d       	add	r25, r0
    181a:	36 9f       	mul	r19, r22
    181c:	90 0d       	add	r25, r0
    181e:	11 24       	eor	r1, r1
    1820:	e8 0f       	add	r30, r24
    1822:	f9 1f       	adc	r31, r25
    1824:	87 a5       	ldd	r24, Z+47	; 0x2f
    1826:	86 95       	lsr	r24
    1828:	8f 70       	andi	r24, 0x0F	; 15
    182a:	84 30       	cpi	r24, 0x04	; 4
    182c:	11 f0       	breq	.+4      	; 0x1832 <Timebase_UpCounter_Expired_Event+0x34>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1832:	84 2f       	mov	r24, r20
    1834:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <Timebase_UpCounter_Reset>
    1838:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    183a:	08 95       	ret

0000183c <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    183c:	e0 91 43 01 	lds	r30, 0x0143
    1840:	f0 91 44 01 	lds	r31, 0x0144
    1844:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1846:	25 e1       	ldi	r18, 0x15	; 21
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	dc 01       	movw	r26, r24
    184c:	a2 9f       	mul	r26, r18
    184e:	c0 01       	movw	r24, r0
    1850:	a3 9f       	mul	r26, r19
    1852:	90 0d       	add	r25, r0
    1854:	b2 9f       	mul	r27, r18
    1856:	90 0d       	add	r25, r0
    1858:	11 24       	eor	r1, r1
    185a:	e8 0f       	add	r30, r24
    185c:	f9 1f       	adc	r31, r25
    185e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1860:	80 fd       	sbrc	r24, 0
    1862:	13 c0       	rjmp	.+38     	; 0x188a <Timebase_UpCounter_Set_Period_Value_Securely+0x4e>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1864:	84 ad       	ldd	r24, Z+60	; 0x3c
    1866:	95 ad       	ldd	r25, Z+61	; 0x3d
    1868:	a6 ad       	ldd	r26, Z+62	; 0x3e
    186a:	b7 ad       	ldd	r27, Z+63	; 0x3f
    186c:	84 0f       	add	r24, r20
    186e:	95 1f       	adc	r25, r21
    1870:	a6 1f       	adc	r26, r22
    1872:	b7 1f       	adc	r27, r23
    1874:	e0 5c       	subi	r30, 0xC0	; 192
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
    1880:	e0 54       	subi	r30, 0x40	; 64
    1882:	f0 40       	sbci	r31, 0x00	; 0
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1884:	87 a5       	ldd	r24, Z+47	; 0x2f
    1886:	81 60       	ori	r24, 0x01	; 1
    1888:	87 a7       	std	Z+47, r24	; 0x2f
    188a:	08 95       	ret

0000188c <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    188c:	e0 91 43 01 	lds	r30, 0x0143
    1890:	f0 91 44 01 	lds	r31, 0x0144
    1894:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1896:	25 e1       	ldi	r18, 0x15	; 21
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	ac 01       	movw	r20, r24
    189c:	42 9f       	mul	r20, r18
    189e:	c0 01       	movw	r24, r0
    18a0:	43 9f       	mul	r20, r19
    18a2:	90 0d       	add	r25, r0
    18a4:	52 9f       	mul	r21, r18
    18a6:	90 0d       	add	r25, r0
    18a8:	11 24       	eor	r1, r1
    18aa:	e8 0f       	add	r30, r24
    18ac:	f9 1f       	adc	r31, r25
    18ae:	e0 5c       	subi	r30, 0xC0	; 192
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	20 81       	ld	r18, Z
    18b4:	31 81       	ldd	r19, Z+1	; 0x01
    18b6:	42 81       	ldd	r20, Z+2	; 0x02
    18b8:	53 81       	ldd	r21, Z+3	; 0x03
    18ba:	e0 54       	subi	r30, 0x40	; 64
    18bc:	f0 40       	sbci	r31, 0x00	; 0
    18be:	84 ad       	ldd	r24, Z+60	; 0x3c
    18c0:	95 ad       	ldd	r25, Z+61	; 0x3d
    18c2:	a6 ad       	ldd	r26, Z+62	; 0x3e
    18c4:	b7 ad       	ldd	r27, Z+63	; 0x3f
    18c6:	28 1b       	sub	r18, r24
    18c8:	39 0b       	sbc	r19, r25
    18ca:	4a 0b       	sbc	r20, r26
    18cc:	5b 0b       	sbc	r21, r27
    18ce:	57 ff       	sbrs	r21, 7
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <Timebase_UpCounter_Get_Remaining_Period_Value+0x4e>
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    18da:	b9 01       	movw	r22, r18
    18dc:	ca 01       	movw	r24, r20
    18de:	08 95       	ret

000018e0 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    18e4:	c0 91 43 01 	lds	r28, 0x0143
    18e8:	d0 91 44 01 	lds	r29, 0x0144
    18ec:	68 2f       	mov	r22, r24
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    18f0:	85 e1       	ldi	r24, 0x15	; 21
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	68 9f       	mul	r22, r24
    18f6:	f0 01       	movw	r30, r0
    18f8:	69 9f       	mul	r22, r25
    18fa:	f0 0d       	add	r31, r0
    18fc:	78 9f       	mul	r23, r24
    18fe:	f0 0d       	add	r31, r0
    1900:	11 24       	eor	r1, r1
    1902:	ec 0f       	add	r30, r28
    1904:	fd 1f       	adc	r31, r29
    1906:	e0 5c       	subi	r30, 0xC0	; 192
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	20 81       	ld	r18, Z
    190c:	31 81       	ldd	r19, Z+1	; 0x01
    190e:	42 81       	ldd	r20, Z+2	; 0x02
    1910:	53 81       	ldd	r21, Z+3	; 0x03
    1912:	e0 54       	subi	r30, 0x40	; 64
    1914:	f0 40       	sbci	r31, 0x00	; 0
    1916:	84 ad       	ldd	r24, Z+60	; 0x3c
    1918:	95 ad       	ldd	r25, Z+61	; 0x3d
    191a:	a6 ad       	ldd	r26, Z+62	; 0x3e
    191c:	b7 ad       	ldd	r27, Z+63	; 0x3f
    191e:	28 1b       	sub	r18, r24
    1920:	39 0b       	sbc	r19, r25
    1922:	4a 0b       	sbc	r20, r26
    1924:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1926:	57 fd       	sbrc	r21, 7
    1928:	07 c0       	rjmp	.+14     	; 0x1938 <Timebase_UpCounter_Period_Value_Expired+0x58>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    192a:	21 15       	cp	r18, r1
    192c:	31 05       	cpc	r19, r1
    192e:	41 05       	cpc	r20, r1
    1930:	51 05       	cpc	r21, r1
    1932:	11 f0       	breq	.+4      	; 0x1938 <Timebase_UpCounter_Period_Value_Expired+0x58>
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	12 c0       	rjmp	.+36     	; 0x195c <Timebase_UpCounter_Period_Value_Expired+0x7c>
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	85 e1       	ldi	r24, 0x15	; 21
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	ac 01       	movw	r20, r24
    1940:	64 9f       	mul	r22, r20
    1942:	c0 01       	movw	r24, r0
    1944:	65 9f       	mul	r22, r21
    1946:	90 0d       	add	r25, r0
    1948:	74 9f       	mul	r23, r20
    194a:	90 0d       	add	r25, r0
    194c:	11 24       	eor	r1, r1
    194e:	c8 0f       	add	r28, r24
    1950:	d9 1f       	adc	r29, r25
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	80 ff       	sbrs	r24, 0
    1956:	21 e0       	ldi	r18, 0x01	; 1
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    195c:	82 2f       	mov	r24, r18
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	08 95       	ret

00001964 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1964:	1f 93       	push	r17
    1966:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1968:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <Timebase_UpCounter_Period_Value_Expired>
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	11 f0       	breq	.+4      	; 0x1974 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	16 c0       	rjmp	.+44     	; 0x19a0 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1974:	e0 91 43 01 	lds	r30, 0x0143
    1978:	f0 91 44 01 	lds	r31, 0x0144
    197c:	21 2f       	mov	r18, r17
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	85 e1       	ldi	r24, 0x15	; 21
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	ac 01       	movw	r20, r24
    1986:	24 9f       	mul	r18, r20
    1988:	c0 01       	movw	r24, r0
    198a:	25 9f       	mul	r18, r21
    198c:	90 0d       	add	r25, r0
    198e:	34 9f       	mul	r19, r20
    1990:	90 0d       	add	r25, r0
    1992:	11 24       	eor	r1, r1
    1994:	e8 0f       	add	r30, r24
    1996:	f9 1f       	adc	r31, r25
    1998:	87 a5       	ldd	r24, Z+47	; 0x2f
    199a:	8e 7f       	andi	r24, 0xFE	; 254
    199c:	87 a7       	std	Z+47, r24	; 0x2f
    199e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19a0:	1f 91       	pop	r17
    19a2:	08 95       	ret

000019a4 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    19a4:	80 e0       	ldi	r24, 0x00	; 0
    19a6:	0e 94 2d 0b 	call	0x165a	; 0x165a <Timebase_UpCounter_Update>
  }
}
    19aa:	08 95       	ret

000019ac <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <Timebase_UpCounter_Reset>
  }
}
    19b2:	08 95       	ret

000019b4 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    19b4:	e0 91 43 01 	lds	r30, 0x0143
    19b8:	f0 91 44 01 	lds	r31, 0x0144
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	9c 01       	movw	r18, r24
    19c0:	44 e0       	ldi	r20, 0x04	; 4
    19c2:	22 0f       	add	r18, r18
    19c4:	33 1f       	adc	r19, r19
    19c6:	4a 95       	dec	r20
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <Timebase_DownCounter_SS_Get_Status+0xe>
    19ca:	28 0f       	add	r18, r24
    19cc:	39 1f       	adc	r19, r25
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	ec 5b       	subi	r30, 0xBC	; 188
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    19da:	8f 70       	andi	r24, 0x0F	; 15
    19dc:	08 95       	ret

000019de <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    19de:	e0 91 43 01 	lds	r30, 0x0143
    19e2:	f0 91 44 01 	lds	r31, 0x0144
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	9c 01       	movw	r18, r24
    19ea:	54 e0       	ldi	r21, 0x04	; 4
    19ec:	22 0f       	add	r18, r18
    19ee:	33 1f       	adc	r19, r19
    19f0:	5a 95       	dec	r21
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <Timebase_DownCounter_SS_Set_Status+0xe>
    19f4:	28 0f       	add	r18, r24
    19f6:	39 1f       	adc	r19, r25
    19f8:	e2 0f       	add	r30, r18
    19fa:	f3 1f       	adc	r31, r19
    19fc:	ec 5b       	subi	r30, 0xBC	; 188
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	6f 70       	andi	r22, 0x0F	; 15
    1a02:	66 0f       	add	r22, r22
    1a04:	80 81       	ld	r24, Z
    1a06:	81 7e       	andi	r24, 0xE1	; 225
    1a08:	86 2b       	or	r24, r22
    1a0a:	80 83       	st	Z, r24
}
    1a0c:	08 95       	ret

00001a0e <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1a0e:	e0 91 43 01 	lds	r30, 0x0143
    1a12:	f0 91 44 01 	lds	r31, 0x0144
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 01       	movw	r18, r24
    1a1a:	64 e0       	ldi	r22, 0x04	; 4
    1a1c:	22 0f       	add	r18, r18
    1a1e:	33 1f       	adc	r19, r19
    1a20:	6a 95       	dec	r22
    1a22:	e1 f7       	brne	.-8      	; 0x1a1c <Timebase_DownCounter_SS_Get_Value+0xe>
    1a24:	28 0f       	add	r18, r24
    1a26:	39 1f       	adc	r19, r25
    1a28:	e2 0f       	add	r30, r18
    1a2a:	f3 1f       	adc	r31, r19
    1a2c:	e3 5b       	subi	r30, 0xB3	; 179
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	60 81       	ld	r22, Z
    1a32:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1a34:	82 81       	ldd	r24, Z+2	; 0x02
    1a36:	93 81       	ldd	r25, Z+3	; 0x03
    1a38:	08 95       	ret

00001a3a <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1a3a:	e0 91 43 01 	lds	r30, 0x0143
    1a3e:	f0 91 44 01 	lds	r31, 0x0144
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9c 01       	movw	r18, r24
    1a46:	a4 e0       	ldi	r26, 0x04	; 4
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	aa 95       	dec	r26
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <Timebase_DownCounter_SS_Set_Value+0xe>
    1a50:	28 0f       	add	r18, r24
    1a52:	39 1f       	adc	r19, r25
    1a54:	e2 0f       	add	r30, r18
    1a56:	f3 1f       	adc	r31, r19
    1a58:	e3 5b       	subi	r30, 0xB3	; 179
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	40 83       	st	Z, r20
    1a5e:	51 83       	std	Z+1, r21	; 0x01
    1a60:	62 83       	std	Z+2, r22	; 0x02
    1a62:	73 83       	std	Z+3, r23	; 0x03
}
    1a64:	08 95       	ret

00001a66 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1a66:	e0 91 43 01 	lds	r30, 0x0143
    1a6a:	f0 91 44 01 	lds	r31, 0x0144
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 01       	movw	r18, r24
    1a72:	b4 e0       	ldi	r27, 0x04	; 4
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	ba 95       	dec	r27
    1a7a:	e1 f7       	brne	.-8      	; 0x1a74 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1a7c:	28 0f       	add	r18, r24
    1a7e:	39 1f       	adc	r19, r25
    1a80:	e2 0f       	add	r30, r18
    1a82:	f3 1f       	adc	r31, r19
    1a84:	eb 5b       	subi	r30, 0xBB	; 187
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	08 95       	ret

00001a92 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1a92:	e0 91 43 01 	lds	r30, 0x0143
    1a96:	f0 91 44 01 	lds	r31, 0x0144
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9c 01       	movw	r18, r24
    1a9e:	44 e0       	ldi	r20, 0x04	; 4
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	4a 95       	dec	r20
    1aa6:	e1 f7       	brne	.-8      	; 0x1aa0 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1aa8:	28 0f       	add	r18, r24
    1aaa:	39 1f       	adc	r19, r25
    1aac:	e2 0f       	add	r30, r18
    1aae:	f3 1f       	adc	r31, r19
    1ab0:	e7 5b       	subi	r30, 0xB7	; 183
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	08 95       	ret

00001abe <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1abe:	e0 91 43 01 	lds	r30, 0x0143
    1ac2:	f0 91 44 01 	lds	r31, 0x0144
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	9c 01       	movw	r18, r24
    1aca:	a4 e0       	ldi	r26, 0x04	; 4
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	aa 95       	dec	r26
    1ad2:	e1 f7       	brne	.-8      	; 0x1acc <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1ad4:	28 0f       	add	r18, r24
    1ad6:	39 1f       	adc	r19, r25
    1ad8:	e2 0f       	add	r30, r18
    1ada:	f3 1f       	adc	r31, r19
    1adc:	eb 5b       	subi	r30, 0xBB	; 187
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	40 83       	st	Z, r20
    1ae2:	51 83       	std	Z+1, r21	; 0x01
    1ae4:	62 83       	std	Z+2, r22	; 0x02
    1ae6:	73 83       	std	Z+3, r23	; 0x03
}
    1ae8:	08 95       	ret

00001aea <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1aea:	e0 91 43 01 	lds	r30, 0x0143
    1aee:	f0 91 44 01 	lds	r31, 0x0144
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 01       	movw	r18, r24
    1af6:	b4 e0       	ldi	r27, 0x04	; 4
    1af8:	22 0f       	add	r18, r18
    1afa:	33 1f       	adc	r19, r19
    1afc:	ba 95       	dec	r27
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1b00:	28 0f       	add	r18, r24
    1b02:	39 1f       	adc	r19, r25
    1b04:	e2 0f       	add	r30, r18
    1b06:	f3 1f       	adc	r31, r19
    1b08:	e7 5b       	subi	r30, 0xB7	; 183
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	40 83       	st	Z, r20
    1b0e:	51 83       	std	Z+1, r21	; 0x01
    1b10:	62 83       	std	Z+2, r22	; 0x02
    1b12:	73 83       	std	Z+3, r23	; 0x03
}
    1b14:	08 95       	ret

00001b16 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1b16:	e0 91 43 01 	lds	r30, 0x0143
    1b1a:	f0 91 44 01 	lds	r31, 0x0144
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	9c 01       	movw	r18, r24
    1b22:	44 e0       	ldi	r20, 0x04	; 4
    1b24:	22 0f       	add	r18, r18
    1b26:	33 1f       	adc	r19, r19
    1b28:	4a 95       	dec	r20
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1b2c:	28 0f       	add	r18, r24
    1b2e:	39 1f       	adc	r19, r25
    1b30:	e2 0f       	add	r30, r18
    1b32:	f3 1f       	adc	r31, r19
    1b34:	ef 5a       	subi	r30, 0xAF	; 175
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	08 95       	ret

00001b42 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1b42:	e0 91 43 01 	lds	r30, 0x0143
    1b46:	f0 91 44 01 	lds	r31, 0x0144
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1b4e:	77 ff       	sbrs	r23, 7
    1b50:	11 c0       	rjmp	.+34     	; 0x1b74 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1b52:	c9 01       	movw	r24, r18
    1b54:	b4 e0       	ldi	r27, 0x04	; 4
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	ba 95       	dec	r27
    1b5c:	e1 f7       	brne	.-8      	; 0x1b56 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1b5e:	82 0f       	add	r24, r18
    1b60:	93 1f       	adc	r25, r19
    1b62:	e8 0f       	add	r30, r24
    1b64:	f9 1f       	adc	r31, r25
    1b66:	ef 5a       	subi	r30, 0xAF	; 175
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	10 82       	st	Z, r1
    1b6c:	11 82       	std	Z+1, r1	; 0x01
    1b6e:	12 82       	std	Z+2, r1	; 0x02
    1b70:	13 82       	std	Z+3, r1	; 0x03
    1b72:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1b74:	c9 01       	movw	r24, r18
    1b76:	a4 e0       	ldi	r26, 0x04	; 4
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	aa 95       	dec	r26
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	e8 0f       	add	r30, r24
    1b86:	f9 1f       	adc	r31, r25
    1b88:	ef 5a       	subi	r30, 0xAF	; 175
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	40 83       	st	Z, r20
    1b8e:	51 83       	std	Z+1, r21	; 0x01
    1b90:	62 83       	std	Z+2, r22	; 0x02
    1b92:	73 83       	std	Z+3, r23	; 0x03
    1b94:	08 95       	ret

00001b96 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1b96:	e0 91 43 01 	lds	r30, 0x0143
    1b9a:	f0 91 44 01 	lds	r31, 0x0144
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	44 e0       	ldi	r20, 0x04	; 4
    1ba4:	22 0f       	add	r18, r18
    1ba6:	33 1f       	adc	r19, r19
    1ba8:	4a 95       	dec	r20
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1bac:	28 0f       	add	r18, r24
    1bae:	39 1f       	adc	r19, r25
    1bb0:	e2 0f       	add	r30, r18
    1bb2:	f3 1f       	adc	r31, r19
    1bb4:	ec 5b       	subi	r30, 0xBC	; 188
    1bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb8:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	08 95       	ret

00001bbe <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1bbe:	e0 91 43 01 	lds	r30, 0x0143
    1bc2:	f0 91 44 01 	lds	r31, 0x0144
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 01       	movw	r18, r24
    1bca:	54 e0       	ldi	r21, 0x04	; 4
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	5a 95       	dec	r21
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1bd4:	28 0f       	add	r18, r24
    1bd6:	39 1f       	adc	r19, r25
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	ec 5b       	subi	r30, 0xBC	; 188
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	81 60       	ori	r24, 0x01	; 1
    1be4:	80 83       	st	Z, r24
}
    1be6:	08 95       	ret

00001be8 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1be8:	e0 91 43 01 	lds	r30, 0x0143
    1bec:	f0 91 44 01 	lds	r31, 0x0144
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	9c 01       	movw	r18, r24
    1bf4:	64 e0       	ldi	r22, 0x04	; 4
    1bf6:	22 0f       	add	r18, r18
    1bf8:	33 1f       	adc	r19, r19
    1bfa:	6a 95       	dec	r22
    1bfc:	e1 f7       	brne	.-8      	; 0x1bf6 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1bfe:	28 0f       	add	r18, r24
    1c00:	39 1f       	adc	r19, r25
    1c02:	e2 0f       	add	r30, r18
    1c04:	f3 1f       	adc	r31, r19
    1c06:	ec 5b       	subi	r30, 0xBC	; 188
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	8e 7f       	andi	r24, 0xFE	; 254
    1c0e:	80 83       	st	Z, r24
}
    1c10:	08 95       	ret

00001c12 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1c12:	e0 91 43 01 	lds	r30, 0x0143
    1c16:	f0 91 44 01 	lds	r31, 0x0144
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	74 e0       	ldi	r23, 0x04	; 4
    1c20:	22 0f       	add	r18, r18
    1c22:	33 1f       	adc	r19, r19
    1c24:	7a 95       	dec	r23
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <Timebase_DownCounter_SS_Reset+0xe>
    1c28:	28 0f       	add	r18, r24
    1c2a:	39 1f       	adc	r19, r25
    1c2c:	e2 0f       	add	r30, r18
    1c2e:	f3 1f       	adc	r31, r19
    1c30:	e7 5b       	subi	r30, 0xB7	; 183
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	10 82       	st	Z, r1
    1c36:	11 82       	std	Z+1, r1	; 0x01
    1c38:	12 82       	std	Z+2, r1	; 0x02
    1c3a:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1c3c:	12 92       	st	-Z, r1
    1c3e:	12 92       	st	-Z, r1
    1c40:	12 92       	st	-Z, r1
    1c42:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c44:	38 96       	adiw	r30, 0x08	; 8
    1c46:	10 82       	st	Z, r1
    1c48:	11 82       	std	Z+1, r1	; 0x01
    1c4a:	12 82       	std	Z+2, r1	; 0x02
    1c4c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c4e:	39 97       	sbiw	r30, 0x09	; 9
    1c50:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1c52:	80 7e       	andi	r24, 0xE0	; 224
    1c54:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1c56:	08 95       	ret

00001c58 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1c58:	e0 91 43 01 	lds	r30, 0x0143
    1c5c:	f0 91 44 01 	lds	r31, 0x0144
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9c 01       	movw	r18, r24
    1c64:	a4 e0       	ldi	r26, 0x04	; 4
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	aa 95       	dec	r26
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1c6e:	28 0f       	add	r18, r24
    1c70:	39 1f       	adc	r19, r25
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	e7 5b       	subi	r30, 0xB7	; 183
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	10 82       	st	Z, r1
    1c7c:	11 82       	std	Z+1, r1	; 0x01
    1c7e:	12 82       	std	Z+2, r1	; 0x02
    1c80:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1c82:	12 92       	st	-Z, r1
    1c84:	12 92       	st	-Z, r1
    1c86:	12 92       	st	-Z, r1
    1c88:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c8a:	38 96       	adiw	r30, 0x08	; 8
    1c8c:	10 82       	st	Z, r1
    1c8e:	11 82       	std	Z+1, r1	; 0x01
    1c90:	12 82       	std	Z+2, r1	; 0x02
    1c92:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c94:	39 97       	sbiw	r30, 0x09	; 9
    1c96:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1c98:	80 7e       	andi	r24, 0xE0	; 224
    1c9a:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1c9c:	08 95       	ret

00001c9e <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1c9e:	e0 91 43 01 	lds	r30, 0x0143
    1ca2:	f0 91 44 01 	lds	r31, 0x0144
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1ca8:	9c 01       	movw	r18, r24
    1caa:	b4 e0       	ldi	r27, 0x04	; 4
    1cac:	22 0f       	add	r18, r18
    1cae:	33 1f       	adc	r19, r19
    1cb0:	ba 95       	dec	r27
    1cb2:	e1 f7       	brne	.-8      	; 0x1cac <Timebase_DownCounter_SS_Start+0xe>
    1cb4:	28 0f       	add	r18, r24
    1cb6:	39 1f       	adc	r19, r25
    1cb8:	e2 0f       	add	r30, r18
    1cba:	f3 1f       	adc	r31, r19
    1cbc:	ec 5b       	subi	r30, 0xBC	; 188
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	90 81       	ld	r25, Z
    1cc2:	89 2f       	mov	r24, r25
    1cc4:	86 95       	lsr	r24
    1cc6:	8f 70       	andi	r24, 0x0F	; 15
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	19 f0       	breq	.+6      	; 0x1cd2 <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ccc:	91 7e       	andi	r25, 0xE1	; 225
    1cce:	92 60       	ori	r25, 0x02	; 2
    1cd0:	90 83       	st	Z, r25
    1cd2:	08 95       	ret

00001cd4 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1cd4:	e0 91 43 01 	lds	r30, 0x0143
    1cd8:	f0 91 44 01 	lds	r31, 0x0144
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1cde:	9c 01       	movw	r18, r24
    1ce0:	44 e0       	ldi	r20, 0x04	; 4
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	4a 95       	dec	r20
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <Timebase_DownCounter_SS_Stop+0xe>
    1cea:	28 0f       	add	r18, r24
    1cec:	39 1f       	adc	r19, r25
    1cee:	e2 0f       	add	r30, r18
    1cf0:	f3 1f       	adc	r31, r19
    1cf2:	ec 5b       	subi	r30, 0xBC	; 188
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	90 81       	ld	r25, Z
    1cf8:	89 2f       	mov	r24, r25
    1cfa:	86 95       	lsr	r24
    1cfc:	8f 70       	andi	r24, 0x0F	; 15
    1cfe:	82 30       	cpi	r24, 0x02	; 2
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1d02:	91 7e       	andi	r25, 0xE1	; 225
    1d04:	94 60       	ori	r25, 0x04	; 4
    1d06:	90 83       	st	Z, r25
    1d08:	08 95       	ret

00001d0a <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1d0a:	2f 92       	push	r2
    1d0c:	3f 92       	push	r3
    1d0e:	4f 92       	push	r4
    1d10:	5f 92       	push	r5
    1d12:	6f 92       	push	r6
    1d14:	7f 92       	push	r7
    1d16:	8f 92       	push	r8
    1d18:	9f 92       	push	r9
    1d1a:	af 92       	push	r10
    1d1c:	bf 92       	push	r11
    1d1e:	cf 92       	push	r12
    1d20:	df 92       	push	r13
    1d22:	ef 92       	push	r14
    1d24:	ff 92       	push	r15
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	4a 01       	movw	r8, r20
    1d38:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1d3a:	20 91 43 01 	lds	r18, 0x0143
    1d3e:	30 91 44 01 	lds	r19, 0x0144
    1d42:	3c 83       	std	Y+4, r19	; 0x04
    1d44:	2b 83       	std	Y+3, r18	; 0x03
    1d46:	a8 2f       	mov	r26, r24
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	ba 83       	std	Y+2, r27	; 0x02
    1d4c:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1d4e:	fd 01       	movw	r30, r26
    1d50:	64 e0       	ldi	r22, 0x04	; 4
    1d52:	ee 0f       	add	r30, r30
    1d54:	ff 1f       	adc	r31, r31
    1d56:	6a 95       	dec	r22
    1d58:	e1 f7       	brne	.-8      	; 0x1d52 <Timebase_DownCounter_SS_Set_Securely+0x48>
    1d5a:	ea 0f       	add	r30, r26
    1d5c:	fb 1f       	adc	r31, r27
    1d5e:	e2 0f       	add	r30, r18
    1d60:	f3 1f       	adc	r31, r19
    1d62:	ec 5b       	subi	r30, 0xBC	; 188
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 81       	ld	r24, Z
    1d68:	e4 54       	subi	r30, 0x44	; 68
    1d6a:	f0 40       	sbci	r31, 0x00	; 0
    1d6c:	86 95       	lsr	r24
    1d6e:	8f 70       	andi	r24, 0x0F	; 15
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1d72:	72 c0       	rjmp	.+228    	; 0x1e58 <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1d74:	e3 5b       	subi	r30, 0xB3	; 179
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 82       	st	Z, r8
    1d7a:	91 82       	std	Z+1, r9	; 0x01
    1d7c:	a2 82       	std	Z+2, r10	; 0x02
    1d7e:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1d80:	f9 01       	movw	r30, r18
    1d82:	c0 84       	ldd	r12, Z+8	; 0x08
    1d84:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1d86:	22 84       	ldd	r2, Z+10	; 0x0a
    1d88:	33 84       	ldd	r3, Z+11	; 0x0b
    1d8a:	44 84       	ldd	r4, Z+12	; 0x0c
    1d8c:	55 84       	ldd	r5, Z+13	; 0x0d
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
    1d8e:	21 81       	ldd	r18, Z+1	; 0x01
    1d90:	32 81       	ldd	r19, Z+2	; 0x02
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	c5 01       	movw	r24, r10
    1d98:	b4 01       	movw	r22, r8
    1d9a:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
    1d9e:	7b 01       	movw	r14, r22
    1da0:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
    1da2:	ab 81       	ldd	r26, Y+3	; 0x03
    1da4:	bc 81       	ldd	r27, Y+4	; 0x04
    1da6:	11 96       	adiw	r26, 0x01	; 1
    1da8:	2d 91       	ld	r18, X+
    1daa:	3c 91       	ld	r19, X
    1dac:	12 97       	sbiw	r26, 0x02	; 2
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	c5 01       	movw	r24, r10
    1db4:	b4 01       	movw	r22, r8
    1db6:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
    1dba:	c9 01       	movw	r24, r18
    1dbc:	da 01       	movw	r26, r20
    1dbe:	3c 01       	movw	r6, r24
    1dc0:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1dc2:	56 01       	movw	r10, r12
    1dc4:	cc 24       	eor	r12, r12
    1dc6:	dd 24       	eor	r13, r13
    1dc8:	ae 0c       	add	r10, r14
    1dca:	bf 1c       	adc	r11, r15
    1dcc:	c0 1e       	adc	r12, r16
    1dce:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1dd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd4:	81 81       	ldd	r24, Z+1	; 0x01
    1dd6:	92 81       	ldd	r25, Z+2	; 0x02
    1dd8:	a0 e0       	ldi	r26, 0x00	; 0
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	a8 16       	cp	r10, r24
    1dde:	b9 06       	cpc	r11, r25
    1de0:	ca 06       	cpc	r12, r26
    1de2:	db 06       	cpc	r13, r27
    1de4:	94 f0       	brlt	.+36     	; 0x1e0a <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    1de6:	08 94       	sec
    1de8:	61 1c       	adc	r6, r1
    1dea:	71 1c       	adc	r7, r1
    1dec:	81 1c       	adc	r8, r1
    1dee:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1df0:	21 81       	ldd	r18, Z+1	; 0x01
    1df2:	32 81       	ldd	r19, Z+2	; 0x02
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	c6 01       	movw	r24, r12
    1dfa:	b5 01       	movw	r22, r10
    1dfc:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
    1e00:	ac 01       	movw	r20, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	da 01       	movw	r26, r20
    1e06:	5c 01       	movw	r10, r24
    1e08:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e0a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e0c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e0e:	54 e0       	ldi	r21, 0x04	; 4
    1e10:	ee 0f       	add	r30, r30
    1e12:	ff 1f       	adc	r31, r31
    1e14:	5a 95       	dec	r21
    1e16:	e1 f7       	brne	.-8      	; 0x1e10 <Timebase_DownCounter_SS_Set_Securely+0x106>
    1e18:	29 81       	ldd	r18, Y+1	; 0x01
    1e1a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e1c:	e2 0f       	add	r30, r18
    1e1e:	f3 1f       	adc	r31, r19
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	e8 0f       	add	r30, r24
    1e26:	f9 1f       	adc	r31, r25
    1e28:	eb 5b       	subi	r30, 0xBB	; 187
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	26 0c       	add	r2, r6
    1e2e:	37 1c       	adc	r3, r7
    1e30:	48 1c       	adc	r4, r8
    1e32:	59 1c       	adc	r5, r9
    1e34:	21 92       	st	Z+, r2
    1e36:	31 92       	st	Z+, r3
    1e38:	41 92       	st	Z+, r4
    1e3a:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e3c:	a0 82       	st	Z, r10
    1e3e:	b1 82       	std	Z+1, r11	; 0x01
    1e40:	c2 82       	std	Z+2, r12	; 0x02
    1e42:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1e44:	35 97       	sbiw	r30, 0x05	; 5
    1e46:	90 81       	ld	r25, Z
    1e48:	89 2f       	mov	r24, r25
    1e4a:	86 95       	lsr	r24
    1e4c:	8f 70       	andi	r24, 0x0F	; 15
    1e4e:	81 30       	cpi	r24, 0x01	; 1
    1e50:	19 f0       	breq	.+6      	; 0x1e58 <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e52:	91 7e       	andi	r25, 0xE1	; 225
    1e54:	92 60       	ori	r25, 0x02	; 2
    1e56:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	1f 91       	pop	r17
    1e66:	0f 91       	pop	r16
    1e68:	ff 90       	pop	r15
    1e6a:	ef 90       	pop	r14
    1e6c:	df 90       	pop	r13
    1e6e:	cf 90       	pop	r12
    1e70:	bf 90       	pop	r11
    1e72:	af 90       	pop	r10
    1e74:	9f 90       	pop	r9
    1e76:	8f 90       	pop	r8
    1e78:	7f 90       	pop	r7
    1e7a:	6f 90       	pop	r6
    1e7c:	5f 90       	pop	r5
    1e7e:	4f 90       	pop	r4
    1e80:	3f 90       	pop	r3
    1e82:	2f 90       	pop	r2
    1e84:	08 95       	ret

00001e86 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e86:	e0 91 43 01 	lds	r30, 0x0143
    1e8a:	f0 91 44 01 	lds	r31, 0x0144
    1e8e:	a8 2f       	mov	r26, r24
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	9d 01       	movw	r18, r26
    1e94:	94 e0       	ldi	r25, 0x04	; 4
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	9a 95       	dec	r25
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    1e9e:	2a 0f       	add	r18, r26
    1ea0:	3b 1f       	adc	r19, r27
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	e7 5b       	subi	r30, 0xB7	; 183
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	10 82       	st	Z, r1
    1eac:	11 82       	std	Z+1, r1	; 0x01
    1eae:	12 82       	std	Z+2, r1	; 0x02
    1eb0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1eb2:	12 92       	st	-Z, r1
    1eb4:	12 92       	st	-Z, r1
    1eb6:	12 92       	st	-Z, r1
    1eb8:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1eba:	38 96       	adiw	r30, 0x08	; 8
    1ebc:	10 82       	st	Z, r1
    1ebe:	11 82       	std	Z+1, r1	; 0x01
    1ec0:	12 82       	std	Z+2, r1	; 0x02
    1ec2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ec4:	39 97       	sbiw	r30, 0x09	; 9
    1ec6:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ec8:	90 7e       	andi	r25, 0xE0	; 224
    1eca:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1ecc:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <Timebase_DownCounter_SS_Set_Securely>
} 
    1ed0:	08 95       	ret

00001ed2 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1ed2:	2f 92       	push	r2
    1ed4:	3f 92       	push	r3
    1ed6:	4f 92       	push	r4
    1ed8:	5f 92       	push	r5
    1eda:	6f 92       	push	r6
    1edc:	7f 92       	push	r7
    1ede:	8f 92       	push	r8
    1ee0:	9f 92       	push	r9
    1ee2:	af 92       	push	r10
    1ee4:	bf 92       	push	r11
    1ee6:	cf 92       	push	r12
    1ee8:	df 92       	push	r13
    1eea:	ef 92       	push	r14
    1eec:	ff 92       	push	r15
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ef6:	e0 91 43 01 	lds	r30, 0x0143
    1efa:	f0 91 44 01 	lds	r31, 0x0144
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	ec 01       	movw	r28, r24
    1f02:	44 e0       	ldi	r20, 0x04	; 4
    1f04:	cc 0f       	add	r28, r28
    1f06:	dd 1f       	adc	r29, r29
    1f08:	4a 95       	dec	r20
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <Timebase_DownCounter_SS_Update+0x32>
    1f0c:	c8 0f       	add	r28, r24
    1f0e:	d9 1f       	adc	r29, r25
    1f10:	ce 0f       	add	r28, r30
    1f12:	df 1f       	adc	r29, r31
    1f14:	34 e4       	ldi	r19, 0x44	; 68
    1f16:	c3 2e       	mov	r12, r19
    1f18:	d1 2c       	mov	r13, r1
    1f1a:	cc 0e       	add	r12, r28
    1f1c:	dd 1e       	adc	r13, r29
    1f1e:	d6 01       	movw	r26, r12
    1f20:	8c 91       	ld	r24, X
    1f22:	86 95       	lsr	r24
    1f24:	8f 70       	andi	r24, 0x0F	; 15
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <Timebase_DownCounter_SS_Update+0x5a>
    1f2a:	4e c0       	rjmp	.+156    	; 0x1fc8 <Timebase_DownCounter_SS_Update+0xf6>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1f2c:	e0 84       	ldd	r14, Z+8	; 0x08
    1f2e:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
    1f30:	00 e0       	ldi	r16, 0x00	; 0
    1f32:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1f34:	62 84       	ldd	r6, Z+10	; 0x0a
    1f36:	73 84       	ldd	r7, Z+11	; 0x0b
    1f38:	84 84       	ldd	r8, Z+12	; 0x0c
    1f3a:	95 84       	ldd	r9, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    1f3c:	25 e4       	ldi	r18, 0x45	; 69
    1f3e:	a2 2e       	mov	r10, r18
    1f40:	b1 2c       	mov	r11, r1
    1f42:	ac 0e       	add	r10, r28
    1f44:	bd 1e       	adc	r11, r29
    1f46:	d5 01       	movw	r26, r10
    1f48:	2d 91       	ld	r18, X+
    1f4a:	3d 91       	ld	r19, X+
    1f4c:	4d 91       	ld	r20, X+
    1f4e:	5c 91       	ld	r21, X
    1f50:	26 19       	sub	r18, r6
    1f52:	37 09       	sbc	r19, r7
    1f54:	48 09       	sbc	r20, r8
    1f56:	59 09       	sbc	r21, r9
	temp_s *= Timebase->Config.UpdateRate;
    1f58:	61 81       	ldd	r22, Z+1	; 0x01
    1f5a:	72 81       	ldd	r23, Z+2	; 0x02
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 04 18 	call	0x3008	; 0x3008 <__mulsi3>
    1f64:	6e 19       	sub	r22, r14
    1f66:	7f 09       	sbc	r23, r15
    1f68:	80 0b       	sbc	r24, r16
    1f6a:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
    1f6c:	de 01       	movw	r26, r28
    1f6e:	a7 5b       	subi	r26, 0xB7	; 183
    1f70:	bf 4f       	sbci	r27, 0xFF	; 255
    1f72:	2d 91       	ld	r18, X+
    1f74:	3d 91       	ld	r19, X+
    1f76:	4d 91       	ld	r20, X+
    1f78:	5c 91       	ld	r21, X
    1f7a:	13 97       	sbiw	r26, 0x03	; 3
    1f7c:	62 0f       	add	r22, r18
    1f7e:	73 1f       	adc	r23, r19
    1f80:	84 1f       	adc	r24, r20
    1f82:	95 1f       	adc	r25, r21
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f84:	fe 01       	movw	r30, r28
    1f86:	e3 5b       	subi	r30, 0xB3	; 179
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 83       	st	Z, r22
    1f8c:	71 83       	std	Z+1, r23	; 0x01
    1f8e:	82 83       	std	Z+2, r24	; 0x02
    1f90:	93 83       	std	Z+3, r25	; 0x03
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    1f92:	16 16       	cp	r1, r22
    1f94:	17 06       	cpc	r1, r23
    1f96:	18 06       	cpc	r1, r24
    1f98:	19 06       	cpc	r1, r25
    1f9a:	0c f4       	brge	.+2      	; 0x1f9e <Timebase_DownCounter_SS_Update+0xcc>
    1f9c:	48 c0       	rjmp	.+144    	; 0x202e <Timebase_DownCounter_SS_Update+0x15c>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1f9e:	1d 92       	st	X+, r1
    1fa0:	1d 92       	st	X+, r1
    1fa2:	1d 92       	st	X+, r1
    1fa4:	1c 92       	st	X, r1
    1fa6:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fa8:	d5 01       	movw	r26, r10
    1faa:	1d 92       	st	X+, r1
    1fac:	1d 92       	st	X+, r1
    1fae:	1d 92       	st	X+, r1
    1fb0:	1c 92       	st	X, r1
    1fb2:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1fb4:	10 82       	st	Z, r1
    1fb6:	11 82       	std	Z+1, r1	; 0x01
    1fb8:	12 82       	std	Z+2, r1	; 0x02
    1fba:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1fbc:	f6 01       	movw	r30, r12
    1fbe:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1fc0:	80 7e       	andi	r24, 0xE0	; 224
    1fc2:	88 60       	ori	r24, 0x08	; 8
    1fc4:	80 83       	st	Z, r24
    1fc6:	33 c0       	rjmp	.+102    	; 0x202e <Timebase_DownCounter_SS_Update+0x15c>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1fc8:	82 30       	cpi	r24, 0x02	; 2
    1fca:	89 f5       	brne	.+98     	; 0x202e <Timebase_DownCounter_SS_Update+0x15c>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1fcc:	60 84       	ldd	r6, Z+8	; 0x08
    1fce:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1fd0:	e2 84       	ldd	r14, Z+10	; 0x0a
    1fd2:	f3 84       	ldd	r15, Z+11	; 0x0b
    1fd4:	04 85       	ldd	r16, Z+12	; 0x0c
    1fd6:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1fd8:	c3 5b       	subi	r28, 0xB3	; 179
    1fda:	df 4f       	sbci	r29, 0xFF	; 255
    1fdc:	28 80       	ld	r2, Y
    1fde:	39 80       	ldd	r3, Y+1	; 0x01
    1fe0:	4a 80       	ldd	r4, Y+2	; 0x02
    1fe2:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
    1fe4:	21 81       	ldd	r18, Z+1	; 0x01
    1fe6:	32 81       	ldd	r19, Z+2	; 0x02
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
    1fe8:	a1 80       	ldd	r10, Z+1	; 0x01
    1fea:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fec:	28 97       	sbiw	r28, 0x08	; 8
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	c2 01       	movw	r24, r4
    1ff4:	b1 01       	movw	r22, r2
    1ff6:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
    1ffa:	e2 0e       	add	r14, r18
    1ffc:	f3 1e       	adc	r15, r19
    1ffe:	04 1f       	adc	r16, r20
    2000:	15 1f       	adc	r17, r21
    2002:	e9 92       	st	Y+, r14
    2004:	f9 92       	st	Y+, r15
    2006:	09 93       	st	Y+, r16
    2008:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    200a:	cc 24       	eor	r12, r12
    200c:	dd 24       	eor	r13, r13
    200e:	c2 01       	movw	r24, r4
    2010:	b1 01       	movw	r22, r2
    2012:	a6 01       	movw	r20, r12
    2014:	95 01       	movw	r18, r10
    2016:	0e 94 45 18 	call	0x308a	; 0x308a <__divmodsi4>
    201a:	88 24       	eor	r8, r8
    201c:	99 24       	eor	r9, r9
    201e:	66 0e       	add	r6, r22
    2020:	77 1e       	adc	r7, r23
    2022:	88 1e       	adc	r8, r24
    2024:	99 1e       	adc	r9, r25
    2026:	68 82       	st	Y, r6
    2028:	79 82       	std	Y+1, r7	; 0x01
    202a:	8a 82       	std	Y+2, r8	; 0x02
    202c:	9b 82       	std	Y+3, r9	; 0x03
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	df 90       	pop	r13
    203c:	cf 90       	pop	r12
    203e:	bf 90       	pop	r11
    2040:	af 90       	pop	r10
    2042:	9f 90       	pop	r9
    2044:	8f 90       	pop	r8
    2046:	7f 90       	pop	r7
    2048:	6f 90       	pop	r6
    204a:	5f 90       	pop	r5
    204c:	4f 90       	pop	r4
    204e:	3f 90       	pop	r3
    2050:	2f 90       	pop	r2
    2052:	08 95       	ret

00002054 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	e0 91 43 01 	lds	r30, 0x0143
    205a:	f0 91 44 01 	lds	r31, 0x0144
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	9c 01       	movw	r18, r24
    2062:	54 e0       	ldi	r21, 0x04	; 4
    2064:	22 0f       	add	r18, r18
    2066:	33 1f       	adc	r19, r19
    2068:	5a 95       	dec	r21
    206a:	e1 f7       	brne	.-8      	; 0x2064 <Timebase_DownCounter_SS_Expired+0x10>
    206c:	28 0f       	add	r18, r24
    206e:	39 1f       	adc	r19, r25
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	ec 5b       	subi	r30, 0xBC	; 188
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	86 95       	lsr	r24
    207c:	8f 70       	andi	r24, 0x0F	; 15
    207e:	84 30       	cpi	r24, 0x04	; 4
    2080:	09 f4       	brne	.+2      	; 0x2084 <Timebase_DownCounter_SS_Expired+0x30>
    2082:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2084:	84 2f       	mov	r24, r20
    2086:	08 95       	ret

00002088 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2088:	e0 91 43 01 	lds	r30, 0x0143
    208c:	f0 91 44 01 	lds	r31, 0x0144
    2090:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2092:	9c 01       	movw	r18, r24
    2094:	64 e0       	ldi	r22, 0x04	; 4
    2096:	22 0f       	add	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	6a 95       	dec	r22
    209c:	e1 f7       	brne	.-8      	; 0x2096 <Timebase_DownCounter_SS_Expired_Event+0xe>
    209e:	28 0f       	add	r18, r24
    20a0:	39 1f       	adc	r19, r25
    20a2:	e2 0f       	add	r30, r18
    20a4:	f3 1f       	adc	r31, r19
    20a6:	df 01       	movw	r26, r30
    20a8:	ac 5b       	subi	r26, 0xBC	; 188
    20aa:	bf 4f       	sbci	r27, 0xFF	; 255
    20ac:	8c 91       	ld	r24, X
    20ae:	86 95       	lsr	r24
    20b0:	8f 70       	andi	r24, 0x0F	; 15
    20b2:	84 30       	cpi	r24, 0x04	; 4
    20b4:	11 f0       	breq	.+4      	; 0x20ba <Timebase_DownCounter_SS_Expired_Event+0x32>
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    20ba:	e7 5b       	subi	r30, 0xB7	; 183
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	10 82       	st	Z, r1
    20c0:	11 82       	std	Z+1, r1	; 0x01
    20c2:	12 82       	std	Z+2, r1	; 0x02
    20c4:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    20c6:	12 92       	st	-Z, r1
    20c8:	12 92       	st	-Z, r1
    20ca:	12 92       	st	-Z, r1
    20cc:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    20ce:	38 96       	adiw	r30, 0x08	; 8
    20d0:	10 82       	st	Z, r1
    20d2:	11 82       	std	Z+1, r1	; 0x01
    20d4:	12 82       	std	Z+2, r1	; 0x02
    20d6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    20d8:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    20da:	80 7e       	andi	r24, 0xE0	; 224
    20dc:	8c 93       	st	X, r24
    20de:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    20e0:	08 95       	ret

000020e2 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    20e6:	c0 91 43 01 	lds	r28, 0x0143
    20ea:	d0 91 44 01 	lds	r29, 0x0144
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    20f2:	f9 01       	movw	r30, r18
    20f4:	a4 e0       	ldi	r26, 0x04	; 4
    20f6:	ee 0f       	add	r30, r30
    20f8:	ff 1f       	adc	r31, r31
    20fa:	aa 95       	dec	r26
    20fc:	e1 f7       	brne	.-8      	; 0x20f6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	ec 0f       	add	r30, r28
    2104:	fd 1f       	adc	r31, r29
    2106:	ec 5b       	subi	r30, 0xBC	; 188
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	e4 54       	subi	r30, 0x44	; 68
    210e:	f0 40       	sbci	r31, 0x00	; 0
    2110:	80 fd       	sbrc	r24, 0
    2112:	24 c0       	rjmp	.+72     	; 0x215c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    2114:	e3 5b       	subi	r30, 0xB3	; 179
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	81 91       	ld	r24, Z+
    211a:	91 91       	ld	r25, Z+
    211c:	a1 91       	ld	r26, Z+
    211e:	b1 91       	ld	r27, Z+
    2120:	84 1b       	sub	r24, r20
    2122:	95 0b       	sbc	r25, r21
    2124:	a6 0b       	sbc	r26, r22
    2126:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2128:	b7 ff       	sbrs	r27, 7
    212a:	05 c0       	rjmp	.+10     	; 0x2136 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    212c:	10 82       	st	Z, r1
    212e:	11 82       	std	Z+1, r1	; 0x01
    2130:	12 82       	std	Z+2, r1	; 0x02
    2132:	13 82       	std	Z+3, r1	; 0x03
    2134:	04 c0       	rjmp	.+8      	; 0x213e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    2136:	80 83       	st	Z, r24
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	a2 83       	std	Z+2, r26	; 0x02
    213c:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    213e:	f9 01       	movw	r30, r18
    2140:	74 e0       	ldi	r23, 0x04	; 4
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	7a 95       	dec	r23
    2148:	e1 f7       	brne	.-8      	; 0x2142 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    214a:	e2 0f       	add	r30, r18
    214c:	f3 1f       	adc	r31, r19
    214e:	ec 0f       	add	r30, r28
    2150:	fd 1f       	adc	r31, r29
    2152:	ec 5b       	subi	r30, 0xBC	; 188
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	81 60       	ori	r24, 0x01	; 1
    215a:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	08 95       	ret

00002162 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2162:	e0 91 43 01 	lds	r30, 0x0143
    2166:	f0 91 44 01 	lds	r31, 0x0144
    216a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    216c:	9c 01       	movw	r18, r24
    216e:	b4 e0       	ldi	r27, 0x04	; 4
    2170:	22 0f       	add	r18, r18
    2172:	33 1f       	adc	r19, r19
    2174:	ba 95       	dec	r27
    2176:	e1 f7       	brne	.-8      	; 0x2170 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    2178:	28 0f       	add	r18, r24
    217a:	39 1f       	adc	r19, r25
    217c:	e2 0f       	add	r30, r18
    217e:	f3 1f       	adc	r31, r19
    2180:	df 01       	movw	r26, r30
    2182:	af 5a       	subi	r26, 0xAF	; 175
    2184:	bf 4f       	sbci	r27, 0xFF	; 255
    2186:	e3 5b       	subi	r30, 0xB3	; 179
    2188:	ff 4f       	sbci	r31, 0xFF	; 255
    218a:	20 81       	ld	r18, Z
    218c:	31 81       	ldd	r19, Z+1	; 0x01
    218e:	42 81       	ldd	r20, Z+2	; 0x02
    2190:	53 81       	ldd	r21, Z+3	; 0x03
    2192:	8d 91       	ld	r24, X+
    2194:	9d 91       	ld	r25, X+
    2196:	0d 90       	ld	r0, X+
    2198:	bc 91       	ld	r27, X
    219a:	a0 2d       	mov	r26, r0
    219c:	28 1b       	sub	r18, r24
    219e:	39 0b       	sbc	r19, r25
    21a0:	4a 0b       	sbc	r20, r26
    21a2:	5b 0b       	sbc	r21, r27
    21a4:	57 ff       	sbrs	r21, 7
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    21b0:	b9 01       	movw	r22, r18
    21b2:	ca 01       	movw	r24, r20
    21b4:	08 95       	ret

000021b6 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    21ba:	c0 91 43 01 	lds	r28, 0x0143
    21be:	d0 91 44 01 	lds	r29, 0x0144
    21c2:	68 2f       	mov	r22, r24
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    21c6:	fb 01       	movw	r30, r22
    21c8:	44 e0       	ldi	r20, 0x04	; 4
    21ca:	ee 0f       	add	r30, r30
    21cc:	ff 1f       	adc	r31, r31
    21ce:	4a 95       	dec	r20
    21d0:	e1 f7       	brne	.-8      	; 0x21ca <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    21d2:	e6 0f       	add	r30, r22
    21d4:	f7 1f       	adc	r31, r23
    21d6:	ec 0f       	add	r30, r28
    21d8:	fd 1f       	adc	r31, r29
    21da:	df 01       	movw	r26, r30
    21dc:	af 5a       	subi	r26, 0xAF	; 175
    21de:	bf 4f       	sbci	r27, 0xFF	; 255
    21e0:	e3 5b       	subi	r30, 0xB3	; 179
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	20 81       	ld	r18, Z
    21e6:	31 81       	ldd	r19, Z+1	; 0x01
    21e8:	42 81       	ldd	r20, Z+2	; 0x02
    21ea:	53 81       	ldd	r21, Z+3	; 0x03
    21ec:	8d 91       	ld	r24, X+
    21ee:	9d 91       	ld	r25, X+
    21f0:	0d 90       	ld	r0, X+
    21f2:	bc 91       	ld	r27, X
    21f4:	a0 2d       	mov	r26, r0
    21f6:	28 1b       	sub	r18, r24
    21f8:	39 0b       	sbc	r19, r25
    21fa:	4a 0b       	sbc	r20, r26
    21fc:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    21fe:	57 fd       	sbrc	r21, 7
    2200:	07 c0       	rjmp	.+14     	; 0x2210 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2202:	21 15       	cp	r18, r1
    2204:	31 05       	cpc	r19, r1
    2206:	41 05       	cpc	r20, r1
    2208:	51 05       	cpc	r21, r1
    220a:	11 f0       	breq	.+4      	; 0x2210 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	12 c0       	rjmp	.+36     	; 0x2234 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	cb 01       	movw	r24, r22
    2214:	34 e0       	ldi	r19, 0x04	; 4
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	3a 95       	dec	r19
    221c:	e1 f7       	brne	.-8      	; 0x2216 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    221e:	86 0f       	add	r24, r22
    2220:	97 1f       	adc	r25, r23
    2222:	c8 0f       	add	r28, r24
    2224:	d9 1f       	adc	r29, r25
    2226:	cc 5b       	subi	r28, 0xBC	; 188
    2228:	df 4f       	sbci	r29, 0xFF	; 255
    222a:	88 81       	ld	r24, Y
    222c:	80 ff       	sbrs	r24, 0
    222e:	21 e0       	ldi	r18, 0x01	; 1
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2234:	82 2f       	mov	r24, r18
    2236:	df 91       	pop	r29
    2238:	cf 91       	pop	r28
    223a:	08 95       	ret

0000223c <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    223c:	1f 93       	push	r17
    223e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2240:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Timebase_DownCounter_SS_Period_Value_Expired>
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	11 f0       	breq	.+4      	; 0x224c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	16 c0       	rjmp	.+44     	; 0x2278 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    224c:	e0 91 43 01 	lds	r30, 0x0143
    2250:	f0 91 44 01 	lds	r31, 0x0144
    2254:	21 2f       	mov	r18, r17
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	c9 01       	movw	r24, r18
    225a:	54 e0       	ldi	r21, 0x04	; 4
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	5a 95       	dec	r21
    2262:	e1 f7       	brne	.-8      	; 0x225c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    2264:	82 0f       	add	r24, r18
    2266:	93 1f       	adc	r25, r19
    2268:	e8 0f       	add	r30, r24
    226a:	f9 1f       	adc	r31, r25
    226c:	ec 5b       	subi	r30, 0xBC	; 188
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	80 81       	ld	r24, Z
    2272:	8e 7f       	andi	r24, 0xFE	; 254
    2274:	80 83       	st	Z, r24
    2276:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2278:	1f 91       	pop	r17
    227a:	08 95       	ret

0000227c <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <Timebase_DownCounter_SS_Update>
  }
}
    2282:	08 95       	ret

00002284 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2284:	e0 91 43 01 	lds	r30, 0x0143
    2288:	f0 91 44 01 	lds	r31, 0x0144
    228c:	e7 5b       	subi	r30, 0xB7	; 183
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	10 82       	st	Z, r1
    2292:	11 82       	std	Z+1, r1	; 0x01
    2294:	12 82       	std	Z+2, r1	; 0x02
    2296:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2298:	12 92       	st	-Z, r1
    229a:	12 92       	st	-Z, r1
    229c:	12 92       	st	-Z, r1
    229e:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    22a0:	38 96       	adiw	r30, 0x08	; 8
    22a2:	10 82       	st	Z, r1
    22a4:	11 82       	std	Z+1, r1	; 0x01
    22a6:	12 82       	std	Z+2, r1	; 0x02
    22a8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    22aa:	39 97       	sbiw	r30, 0x09	; 9
    22ac:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    22ae:	80 7e       	andi	r24, 0xE0	; 224
    22b0:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    22b2:	08 95       	ret

000022b4 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    22b4:	e0 91 43 01 	lds	r30, 0x0143
    22b8:	f0 91 44 01 	lds	r31, 0x0144
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	2d e0       	ldi	r18, 0x0D	; 13
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	ac 01       	movw	r20, r24
    22c4:	42 9f       	mul	r20, r18
    22c6:	c0 01       	movw	r24, r0
    22c8:	43 9f       	mul	r20, r19
    22ca:	90 0d       	add	r25, r0
    22cc:	52 9f       	mul	r21, r18
    22ce:	90 0d       	add	r25, r0
    22d0:	11 24       	eor	r1, r1
    22d2:	e8 0f       	add	r30, r24
    22d4:	f9 1f       	adc	r31, r25
    22d6:	eb 5a       	subi	r30, 0xAB	; 171
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	80 81       	ld	r24, Z
    22dc:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    22de:	8f 70       	andi	r24, 0x0F	; 15
    22e0:	08 95       	ret

000022e2 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    22e2:	e0 91 43 01 	lds	r30, 0x0143
    22e6:	f0 91 44 01 	lds	r31, 0x0144
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	2d e0       	ldi	r18, 0x0D	; 13
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	ac 01       	movw	r20, r24
    22f2:	42 9f       	mul	r20, r18
    22f4:	c0 01       	movw	r24, r0
    22f6:	43 9f       	mul	r20, r19
    22f8:	90 0d       	add	r25, r0
    22fa:	52 9f       	mul	r21, r18
    22fc:	90 0d       	add	r25, r0
    22fe:	11 24       	eor	r1, r1
    2300:	e8 0f       	add	r30, r24
    2302:	f9 1f       	adc	r31, r25
    2304:	eb 5a       	subi	r30, 0xAB	; 171
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	6f 70       	andi	r22, 0x0F	; 15
    230a:	66 0f       	add	r22, r22
    230c:	80 81       	ld	r24, Z
    230e:	81 7e       	andi	r24, 0xE1	; 225
    2310:	86 2b       	or	r24, r22
    2312:	80 83       	st	Z, r24
}
    2314:	08 95       	ret

00002316 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    2316:	e0 91 43 01 	lds	r30, 0x0143
    231a:	f0 91 44 01 	lds	r31, 0x0144
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	2d e0       	ldi	r18, 0x0D	; 13
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	ac 01       	movw	r20, r24
    2326:	42 9f       	mul	r20, r18
    2328:	c0 01       	movw	r24, r0
    232a:	43 9f       	mul	r20, r19
    232c:	90 0d       	add	r25, r0
    232e:	52 9f       	mul	r21, r18
    2330:	90 0d       	add	r25, r0
    2332:	11 24       	eor	r1, r1
    2334:	e8 0f       	add	r30, r24
    2336:	f9 1f       	adc	r31, r25
    2338:	e6 5a       	subi	r30, 0xA6	; 166
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	60 81       	ld	r22, Z
    233e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    2340:	82 81       	ldd	r24, Z+2	; 0x02
    2342:	93 81       	ldd	r25, Z+3	; 0x03
    2344:	08 95       	ret

00002346 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2346:	e0 91 43 01 	lds	r30, 0x0143
    234a:	f0 91 44 01 	lds	r31, 0x0144
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	2d e0       	ldi	r18, 0x0D	; 13
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	dc 01       	movw	r26, r24
    2356:	a2 9f       	mul	r26, r18
    2358:	c0 01       	movw	r24, r0
    235a:	a3 9f       	mul	r26, r19
    235c:	90 0d       	add	r25, r0
    235e:	b2 9f       	mul	r27, r18
    2360:	90 0d       	add	r25, r0
    2362:	11 24       	eor	r1, r1
    2364:	e8 0f       	add	r30, r24
    2366:	f9 1f       	adc	r31, r25
    2368:	e6 5a       	subi	r30, 0xA6	; 166
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	40 83       	st	Z, r20
    236e:	51 83       	std	Z+1, r21	; 0x01
    2370:	62 83       	std	Z+2, r22	; 0x02
    2372:	73 83       	std	Z+3, r23	; 0x03
}
    2374:	08 95       	ret

00002376 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    2376:	e0 91 43 01 	lds	r30, 0x0143
    237a:	f0 91 44 01 	lds	r31, 0x0144
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	2d e0       	ldi	r18, 0x0D	; 13
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	ac 01       	movw	r20, r24
    2386:	42 9f       	mul	r20, r18
    2388:	c0 01       	movw	r24, r0
    238a:	43 9f       	mul	r20, r19
    238c:	90 0d       	add	r25, r0
    238e:	52 9f       	mul	r21, r18
    2390:	90 0d       	add	r25, r0
    2392:	11 24       	eor	r1, r1
    2394:	e8 0f       	add	r30, r24
    2396:	f9 1f       	adc	r31, r25
    2398:	ea 5a       	subi	r30, 0xAA	; 170
    239a:	ff 4f       	sbci	r31, 0xFF	; 255
    239c:	60 81       	ld	r22, Z
    239e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    23a0:	82 81       	ldd	r24, Z+2	; 0x02
    23a2:	93 81       	ldd	r25, Z+3	; 0x03
    23a4:	08 95       	ret

000023a6 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    23a6:	e0 91 43 01 	lds	r30, 0x0143
    23aa:	f0 91 44 01 	lds	r31, 0x0144
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	2d e0       	ldi	r18, 0x0D	; 13
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	dc 01       	movw	r26, r24
    23b6:	a2 9f       	mul	r26, r18
    23b8:	c0 01       	movw	r24, r0
    23ba:	a3 9f       	mul	r26, r19
    23bc:	90 0d       	add	r25, r0
    23be:	b2 9f       	mul	r27, r18
    23c0:	90 0d       	add	r25, r0
    23c2:	11 24       	eor	r1, r1
    23c4:	e8 0f       	add	r30, r24
    23c6:	f9 1f       	adc	r31, r25
    23c8:	ea 5a       	subi	r30, 0xAA	; 170
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	40 83       	st	Z, r20
    23ce:	51 83       	std	Z+1, r21	; 0x01
    23d0:	62 83       	std	Z+2, r22	; 0x02
    23d2:	73 83       	std	Z+3, r23	; 0x03
}
    23d4:	08 95       	ret

000023d6 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    23d6:	e0 91 43 01 	lds	r30, 0x0143
    23da:	f0 91 44 01 	lds	r31, 0x0144
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	2d e0       	ldi	r18, 0x0D	; 13
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	ac 01       	movw	r20, r24
    23e6:	42 9f       	mul	r20, r18
    23e8:	c0 01       	movw	r24, r0
    23ea:	43 9f       	mul	r20, r19
    23ec:	90 0d       	add	r25, r0
    23ee:	52 9f       	mul	r21, r18
    23f0:	90 0d       	add	r25, r0
    23f2:	11 24       	eor	r1, r1
    23f4:	e8 0f       	add	r30, r24
    23f6:	f9 1f       	adc	r31, r25
    23f8:	e2 5a       	subi	r30, 0xA2	; 162
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	08 95       	ret

00002406 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2406:	e0 91 43 01 	lds	r30, 0x0143
    240a:	f0 91 44 01 	lds	r31, 0x0144
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2412:	77 ff       	sbrs	r23, 7
    2414:	13 c0       	rjmp	.+38     	; 0x243c <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    2416:	8d e0       	ldi	r24, 0x0D	; 13
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	ac 01       	movw	r20, r24
    241c:	24 9f       	mul	r18, r20
    241e:	c0 01       	movw	r24, r0
    2420:	25 9f       	mul	r18, r21
    2422:	90 0d       	add	r25, r0
    2424:	34 9f       	mul	r19, r20
    2426:	90 0d       	add	r25, r0
    2428:	11 24       	eor	r1, r1
    242a:	e8 0f       	add	r30, r24
    242c:	f9 1f       	adc	r31, r25
    242e:	e2 5a       	subi	r30, 0xA2	; 162
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	10 82       	st	Z, r1
    2434:	11 82       	std	Z+1, r1	; 0x01
    2436:	12 82       	std	Z+2, r1	; 0x02
    2438:	13 82       	std	Z+3, r1	; 0x03
    243a:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    243c:	8d e0       	ldi	r24, 0x0D	; 13
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	dc 01       	movw	r26, r24
    2442:	2a 9f       	mul	r18, r26
    2444:	c0 01       	movw	r24, r0
    2446:	2b 9f       	mul	r18, r27
    2448:	90 0d       	add	r25, r0
    244a:	3a 9f       	mul	r19, r26
    244c:	90 0d       	add	r25, r0
    244e:	11 24       	eor	r1, r1
    2450:	e8 0f       	add	r30, r24
    2452:	f9 1f       	adc	r31, r25
    2454:	e2 5a       	subi	r30, 0xA2	; 162
    2456:	ff 4f       	sbci	r31, 0xFF	; 255
    2458:	40 83       	st	Z, r20
    245a:	51 83       	std	Z+1, r21	; 0x01
    245c:	62 83       	std	Z+2, r22	; 0x02
    245e:	73 83       	std	Z+3, r23	; 0x03
    2460:	08 95       	ret

00002462 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    2462:	e0 91 43 01 	lds	r30, 0x0143
    2466:	f0 91 44 01 	lds	r31, 0x0144
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	2d e0       	ldi	r18, 0x0D	; 13
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	ac 01       	movw	r20, r24
    2472:	42 9f       	mul	r20, r18
    2474:	c0 01       	movw	r24, r0
    2476:	43 9f       	mul	r20, r19
    2478:	90 0d       	add	r25, r0
    247a:	52 9f       	mul	r21, r18
    247c:	90 0d       	add	r25, r0
    247e:	11 24       	eor	r1, r1
    2480:	e8 0f       	add	r30, r24
    2482:	f9 1f       	adc	r31, r25
    2484:	eb 5a       	subi	r30, 0xAB	; 171
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    248a:	81 70       	andi	r24, 0x01	; 1
    248c:	08 95       	ret

0000248e <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    248e:	e0 91 43 01 	lds	r30, 0x0143
    2492:	f0 91 44 01 	lds	r31, 0x0144
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	2d e0       	ldi	r18, 0x0D	; 13
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	ac 01       	movw	r20, r24
    249e:	42 9f       	mul	r20, r18
    24a0:	c0 01       	movw	r24, r0
    24a2:	43 9f       	mul	r20, r19
    24a4:	90 0d       	add	r25, r0
    24a6:	52 9f       	mul	r21, r18
    24a8:	90 0d       	add	r25, r0
    24aa:	11 24       	eor	r1, r1
    24ac:	e8 0f       	add	r30, r24
    24ae:	f9 1f       	adc	r31, r25
    24b0:	eb 5a       	subi	r30, 0xAB	; 171
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	81 60       	ori	r24, 0x01	; 1
    24b8:	80 83       	st	Z, r24
}
    24ba:	08 95       	ret

000024bc <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24bc:	e0 91 43 01 	lds	r30, 0x0143
    24c0:	f0 91 44 01 	lds	r31, 0x0144
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	2d e0       	ldi	r18, 0x0D	; 13
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	ac 01       	movw	r20, r24
    24cc:	42 9f       	mul	r20, r18
    24ce:	c0 01       	movw	r24, r0
    24d0:	43 9f       	mul	r20, r19
    24d2:	90 0d       	add	r25, r0
    24d4:	52 9f       	mul	r21, r18
    24d6:	90 0d       	add	r25, r0
    24d8:	11 24       	eor	r1, r1
    24da:	e8 0f       	add	r30, r24
    24dc:	f9 1f       	adc	r31, r25
    24de:	eb 5a       	subi	r30, 0xAB	; 171
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	8e 7f       	andi	r24, 0xFE	; 254
    24e6:	80 83       	st	Z, r24
}
    24e8:	08 95       	ret

000024ea <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    24ea:	e0 91 43 01 	lds	r30, 0x0143
    24ee:	f0 91 44 01 	lds	r31, 0x0144
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	2d e0       	ldi	r18, 0x0D	; 13
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	ac 01       	movw	r20, r24
    24fa:	42 9f       	mul	r20, r18
    24fc:	c0 01       	movw	r24, r0
    24fe:	43 9f       	mul	r20, r19
    2500:	90 0d       	add	r25, r0
    2502:	52 9f       	mul	r21, r18
    2504:	90 0d       	add	r25, r0
    2506:	11 24       	eor	r1, r1
    2508:	e8 0f       	add	r30, r24
    250a:	f9 1f       	adc	r31, r25
    250c:	ea 5a       	subi	r30, 0xAA	; 170
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	11 92       	st	Z+, r1
    2512:	11 92       	st	Z+, r1
    2514:	11 92       	st	Z+, r1
    2516:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2518:	10 82       	st	Z, r1
    251a:	11 82       	std	Z+1, r1	; 0x01
    251c:	12 82       	std	Z+2, r1	; 0x02
    251e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2520:	35 97       	sbiw	r30, 0x05	; 5
    2522:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2524:	80 7e       	andi	r24, 0xE0	; 224
    2526:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2528:	08 95       	ret

0000252a <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    252a:	e0 91 43 01 	lds	r30, 0x0143
    252e:	f0 91 44 01 	lds	r31, 0x0144
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	2d e0       	ldi	r18, 0x0D	; 13
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	ac 01       	movw	r20, r24
    253a:	42 9f       	mul	r20, r18
    253c:	c0 01       	movw	r24, r0
    253e:	43 9f       	mul	r20, r19
    2540:	90 0d       	add	r25, r0
    2542:	52 9f       	mul	r21, r18
    2544:	90 0d       	add	r25, r0
    2546:	11 24       	eor	r1, r1
    2548:	e8 0f       	add	r30, r24
    254a:	f9 1f       	adc	r31, r25
    254c:	ea 5a       	subi	r30, 0xAA	; 170
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	11 92       	st	Z+, r1
    2552:	11 92       	st	Z+, r1
    2554:	11 92       	st	Z+, r1
    2556:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2558:	10 82       	st	Z, r1
    255a:	11 82       	std	Z+1, r1	; 0x01
    255c:	12 82       	std	Z+2, r1	; 0x02
    255e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2560:	35 97       	sbiw	r30, 0x05	; 5
    2562:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2564:	80 7e       	andi	r24, 0xE0	; 224
    2566:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2568:	08 95       	ret

0000256a <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    256a:	e0 91 43 01 	lds	r30, 0x0143
    256e:	f0 91 44 01 	lds	r31, 0x0144
    2572:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2574:	2d e0       	ldi	r18, 0x0D	; 13
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	ac 01       	movw	r20, r24
    257a:	42 9f       	mul	r20, r18
    257c:	c0 01       	movw	r24, r0
    257e:	43 9f       	mul	r20, r19
    2580:	90 0d       	add	r25, r0
    2582:	52 9f       	mul	r21, r18
    2584:	90 0d       	add	r25, r0
    2586:	11 24       	eor	r1, r1
    2588:	e8 0f       	add	r30, r24
    258a:	f9 1f       	adc	r31, r25
    258c:	eb 5a       	subi	r30, 0xAB	; 171
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	90 81       	ld	r25, Z
    2592:	89 2f       	mov	r24, r25
    2594:	86 95       	lsr	r24
    2596:	8f 70       	andi	r24, 0x0F	; 15
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	19 f0       	breq	.+6      	; 0x25a2 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    259c:	91 7e       	andi	r25, 0xE1	; 225
    259e:	92 60       	ori	r25, 0x02	; 2
    25a0:	90 83       	st	Z, r25
    25a2:	08 95       	ret

000025a4 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    25a4:	e0 91 43 01 	lds	r30, 0x0143
    25a8:	f0 91 44 01 	lds	r31, 0x0144
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    25ae:	2d e0       	ldi	r18, 0x0D	; 13
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	ac 01       	movw	r20, r24
    25b4:	42 9f       	mul	r20, r18
    25b6:	c0 01       	movw	r24, r0
    25b8:	43 9f       	mul	r20, r19
    25ba:	90 0d       	add	r25, r0
    25bc:	52 9f       	mul	r21, r18
    25be:	90 0d       	add	r25, r0
    25c0:	11 24       	eor	r1, r1
    25c2:	e8 0f       	add	r30, r24
    25c4:	f9 1f       	adc	r31, r25
    25c6:	eb 5a       	subi	r30, 0xAB	; 171
    25c8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ca:	90 81       	ld	r25, Z
    25cc:	89 2f       	mov	r24, r25
    25ce:	86 95       	lsr	r24
    25d0:	8f 70       	andi	r24, 0x0F	; 15
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	19 f0       	breq	.+6      	; 0x25dc <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25d6:	91 7e       	andi	r25, 0xE1	; 225
    25d8:	94 60       	ori	r25, 0x04	; 4
    25da:	90 83       	st	Z, r25
    25dc:	08 95       	ret

000025de <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    25e2:	a0 91 43 01 	lds	r26, 0x0143
    25e6:	b0 91 44 01 	lds	r27, 0x0144
    25ea:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    25ec:	2d e0       	ldi	r18, 0x0D	; 13
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	82 9f       	mul	r24, r18
    25f2:	f0 01       	movw	r30, r0
    25f4:	83 9f       	mul	r24, r19
    25f6:	f0 0d       	add	r31, r0
    25f8:	92 9f       	mul	r25, r18
    25fa:	f0 0d       	add	r31, r0
    25fc:	11 24       	eor	r1, r1
    25fe:	ea 0f       	add	r30, r26
    2600:	fb 1f       	adc	r31, r27
    2602:	ef 01       	movw	r28, r30
    2604:	cb 5a       	subi	r28, 0xAB	; 171
    2606:	df 4f       	sbci	r29, 0xFF	; 255
    2608:	88 81       	ld	r24, Y
    260a:	86 95       	lsr	r24
    260c:	8f 70       	andi	r24, 0x0F	; 15
    260e:	e9 f4       	brne	.+58     	; 0x264a <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2610:	e6 5a       	subi	r30, 0xA6	; 166
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	40 83       	st	Z, r20
    2616:	51 83       	std	Z+1, r21	; 0x01
    2618:	62 83       	std	Z+2, r22	; 0x02
    261a:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    261c:	1a 96       	adiw	r26, 0x0a	; 10
    261e:	8d 91       	ld	r24, X+
    2620:	9d 91       	ld	r25, X+
    2622:	0d 90       	ld	r0, X+
    2624:	bc 91       	ld	r27, X
    2626:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2628:	84 0f       	add	r24, r20
    262a:	95 1f       	adc	r25, r21
    262c:	a6 1f       	adc	r26, r22
    262e:	b7 1f       	adc	r27, r23
    2630:	b2 93       	st	-Z, r27
    2632:	a2 93       	st	-Z, r26
    2634:	92 93       	st	-Z, r25
    2636:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2638:	98 81       	ld	r25, Y
    263a:	89 2f       	mov	r24, r25
    263c:	86 95       	lsr	r24
    263e:	8f 70       	andi	r24, 0x0F	; 15
    2640:	81 30       	cpi	r24, 0x01	; 1
    2642:	19 f0       	breq	.+6      	; 0x264a <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2644:	91 7e       	andi	r25, 0xE1	; 225
    2646:	92 60       	ori	r25, 0x02	; 2
    2648:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	08 95       	ret

00002650 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2650:	cf 93       	push	r28
    2652:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2654:	e0 91 43 01 	lds	r30, 0x0143
    2658:	f0 91 44 01 	lds	r31, 0x0144
    265c:	a8 2f       	mov	r26, r24
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	2d e0       	ldi	r18, 0x0D	; 13
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	e9 01       	movw	r28, r18
    2666:	ac 9f       	mul	r26, r28
    2668:	90 01       	movw	r18, r0
    266a:	ad 9f       	mul	r26, r29
    266c:	30 0d       	add	r19, r0
    266e:	bc 9f       	mul	r27, r28
    2670:	30 0d       	add	r19, r0
    2672:	11 24       	eor	r1, r1
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	ea 5a       	subi	r30, 0xAA	; 170
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	11 92       	st	Z+, r1
    267e:	11 92       	st	Z+, r1
    2680:	11 92       	st	Z+, r1
    2682:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2684:	10 82       	st	Z, r1
    2686:	11 82       	std	Z+1, r1	; 0x01
    2688:	12 82       	std	Z+2, r1	; 0x02
    268a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    268c:	35 97       	sbiw	r30, 0x05	; 5
    268e:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2690:	90 7e       	andi	r25, 0xE0	; 224
    2692:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2694:	0e 94 ef 12 	call	0x25de	; 0x25de <Timebase_DownCounter_Set_Securely>
} 
    2698:	df 91       	pop	r29
    269a:	cf 91       	pop	r28
    269c:	08 95       	ret

0000269e <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    269e:	0f 93       	push	r16
    26a0:	1f 93       	push	r17
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    26a6:	a0 91 43 01 	lds	r26, 0x0143
    26aa:	b0 91 44 01 	lds	r27, 0x0144
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	2d e0       	ldi	r18, 0x0D	; 13
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	82 9f       	mul	r24, r18
    26b6:	f0 01       	movw	r30, r0
    26b8:	83 9f       	mul	r24, r19
    26ba:	f0 0d       	add	r31, r0
    26bc:	92 9f       	mul	r25, r18
    26be:	f0 0d       	add	r31, r0
    26c0:	11 24       	eor	r1, r1
    26c2:	ea 0f       	add	r30, r26
    26c4:	fb 1f       	adc	r31, r27
    26c6:	8f 01       	movw	r16, r30
    26c8:	0b 5a       	subi	r16, 0xAB	; 171
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	e8 01       	movw	r28, r16
    26ce:	88 81       	ld	r24, Y
    26d0:	86 95       	lsr	r24
    26d2:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	69 f5       	brne	.+90     	; 0x2732 <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    26d8:	1a 96       	adiw	r26, 0x0a	; 10
    26da:	2d 91       	ld	r18, X+
    26dc:	3d 91       	ld	r19, X+
    26de:	4d 91       	ld	r20, X+
    26e0:	5c 91       	ld	r21, X
    26e2:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    26e4:	bf 01       	movw	r22, r30
    26e6:	6a 5a       	subi	r22, 0xAA	; 170
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	eb 01       	movw	r28, r22
    26ec:	88 81       	ld	r24, Y
    26ee:	99 81       	ldd	r25, Y+1	; 0x01
    26f0:	aa 81       	ldd	r26, Y+2	; 0x02
    26f2:	bb 81       	ldd	r27, Y+3	; 0x03
    26f4:	82 1b       	sub	r24, r18
    26f6:	93 0b       	sbc	r25, r19
    26f8:	a4 0b       	sbc	r26, r20
    26fa:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    26fc:	e6 5a       	subi	r30, 0xA6	; 166
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2708:	18 16       	cp	r1, r24
    270a:	19 06       	cpc	r1, r25
    270c:	1a 06       	cpc	r1, r26
    270e:	1b 06       	cpc	r1, r27
    2710:	34 f1       	brlt	.+76     	; 0x275e <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2712:	db 01       	movw	r26, r22
    2714:	1d 92       	st	X+, r1
    2716:	1d 92       	st	X+, r1
    2718:	1d 92       	st	X+, r1
    271a:	1c 92       	st	X, r1
    271c:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    271e:	10 82       	st	Z, r1
    2720:	11 82       	std	Z+1, r1	; 0x01
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2726:	e8 01       	movw	r28, r16
    2728:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    272a:	80 7e       	andi	r24, 0xE0	; 224
    272c:	88 60       	ori	r24, 0x08	; 8
    272e:	88 83       	st	Y, r24
    2730:	16 c0       	rjmp	.+44     	; 0x275e <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2732:	82 30       	cpi	r24, 0x02	; 2
    2734:	a1 f4       	brne	.+40     	; 0x275e <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2736:	1a 96       	adiw	r26, 0x0a	; 10
    2738:	8d 91       	ld	r24, X+
    273a:	9d 91       	ld	r25, X+
    273c:	0d 90       	ld	r0, X+
    273e:	bc 91       	ld	r27, X
    2740:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2742:	e6 5a       	subi	r30, 0xA6	; 166
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	20 81       	ld	r18, Z
    2748:	31 81       	ldd	r19, Z+1	; 0x01
    274a:	42 81       	ldd	r20, Z+2	; 0x02
    274c:	53 81       	ldd	r21, Z+3	; 0x03
    274e:	82 0f       	add	r24, r18
    2750:	93 1f       	adc	r25, r19
    2752:	a4 1f       	adc	r26, r20
    2754:	b5 1f       	adc	r27, r21
    2756:	b2 93       	st	-Z, r27
    2758:	a2 93       	st	-Z, r26
    275a:	92 93       	st	-Z, r25
    275c:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	08 95       	ret

00002768 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	e0 91 43 01 	lds	r30, 0x0143
    276e:	f0 91 44 01 	lds	r31, 0x0144
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	2d e0       	ldi	r18, 0x0D	; 13
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	bc 01       	movw	r22, r24
    277a:	62 9f       	mul	r22, r18
    277c:	c0 01       	movw	r24, r0
    277e:	63 9f       	mul	r22, r19
    2780:	90 0d       	add	r25, r0
    2782:	72 9f       	mul	r23, r18
    2784:	90 0d       	add	r25, r0
    2786:	11 24       	eor	r1, r1
    2788:	e8 0f       	add	r30, r24
    278a:	f9 1f       	adc	r31, r25
    278c:	eb 5a       	subi	r30, 0xAB	; 171
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	86 95       	lsr	r24
    2794:	8f 70       	andi	r24, 0x0F	; 15
    2796:	84 30       	cpi	r24, 0x04	; 4
    2798:	09 f4       	brne	.+2      	; 0x279c <Timebase_DownCounter_Expired+0x34>
    279a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    279c:	84 2f       	mov	r24, r20
    279e:	08 95       	ret

000027a0 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    27a0:	e0 91 43 01 	lds	r30, 0x0143
    27a4:	f0 91 44 01 	lds	r31, 0x0144
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    27aa:	2d e0       	ldi	r18, 0x0D	; 13
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	ac 01       	movw	r20, r24
    27b0:	42 9f       	mul	r20, r18
    27b2:	c0 01       	movw	r24, r0
    27b4:	43 9f       	mul	r20, r19
    27b6:	90 0d       	add	r25, r0
    27b8:	52 9f       	mul	r21, r18
    27ba:	90 0d       	add	r25, r0
    27bc:	11 24       	eor	r1, r1
    27be:	e8 0f       	add	r30, r24
    27c0:	f9 1f       	adc	r31, r25
    27c2:	df 01       	movw	r26, r30
    27c4:	ab 5a       	subi	r26, 0xAB	; 171
    27c6:	bf 4f       	sbci	r27, 0xFF	; 255
    27c8:	8c 91       	ld	r24, X
    27ca:	86 95       	lsr	r24
    27cc:	8f 70       	andi	r24, 0x0F	; 15
    27ce:	84 30       	cpi	r24, 0x04	; 4
    27d0:	11 f0       	breq	.+4      	; 0x27d6 <Timebase_DownCounter_Expired_Event+0x36>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    27d6:	ea 5a       	subi	r30, 0xAA	; 170
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	11 92       	st	Z+, r1
    27dc:	11 92       	st	Z+, r1
    27de:	11 92       	st	Z+, r1
    27e0:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    27e2:	10 82       	st	Z, r1
    27e4:	11 82       	std	Z+1, r1	; 0x01
    27e6:	12 82       	std	Z+2, r1	; 0x02
    27e8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    27ea:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    27ec:	80 7e       	andi	r24, 0xE0	; 224
    27ee:	8c 93       	st	X, r24
    27f0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    27f2:	08 95       	ret

000027f4 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    27f8:	c0 91 43 01 	lds	r28, 0x0143
    27fc:	d0 91 44 01 	lds	r29, 0x0144
    2800:	28 2f       	mov	r18, r24
    2802:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2804:	8d e0       	ldi	r24, 0x0D	; 13
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	28 9f       	mul	r18, r24
    280a:	f0 01       	movw	r30, r0
    280c:	29 9f       	mul	r18, r25
    280e:	f0 0d       	add	r31, r0
    2810:	38 9f       	mul	r19, r24
    2812:	f0 0d       	add	r31, r0
    2814:	11 24       	eor	r1, r1
    2816:	ec 0f       	add	r30, r28
    2818:	fd 1f       	adc	r31, r29
    281a:	eb 5a       	subi	r30, 0xAB	; 171
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	e5 55       	subi	r30, 0x55	; 85
    2822:	f0 40       	sbci	r31, 0x00	; 0
    2824:	80 fd       	sbrc	r24, 0
    2826:	25 c0       	rjmp	.+74     	; 0x2872 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2828:	e6 5a       	subi	r30, 0xA6	; 166
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	81 91       	ld	r24, Z+
    282e:	91 91       	ld	r25, Z+
    2830:	a1 91       	ld	r26, Z+
    2832:	b1 91       	ld	r27, Z+
    2834:	84 1b       	sub	r24, r20
    2836:	95 0b       	sbc	r25, r21
    2838:	a6 0b       	sbc	r26, r22
    283a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    283c:	b7 ff       	sbrs	r27, 7
    283e:	05 c0       	rjmp	.+10     	; 0x284a <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2840:	10 82       	st	Z, r1
    2842:	11 82       	std	Z+1, r1	; 0x01
    2844:	12 82       	std	Z+2, r1	; 0x02
    2846:	13 82       	std	Z+3, r1	; 0x03
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    284a:	80 83       	st	Z, r24
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	a2 83       	std	Z+2, r26	; 0x02
    2850:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2852:	8d e0       	ldi	r24, 0x0D	; 13
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	28 9f       	mul	r18, r24
    2858:	f0 01       	movw	r30, r0
    285a:	29 9f       	mul	r18, r25
    285c:	f0 0d       	add	r31, r0
    285e:	38 9f       	mul	r19, r24
    2860:	f0 0d       	add	r31, r0
    2862:	11 24       	eor	r1, r1
    2864:	ec 0f       	add	r30, r28
    2866:	fd 1f       	adc	r31, r29
    2868:	eb 5a       	subi	r30, 0xAB	; 171
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	81 60       	ori	r24, 0x01	; 1
    2870:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret

00002878 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2878:	e0 91 43 01 	lds	r30, 0x0143
    287c:	f0 91 44 01 	lds	r31, 0x0144
    2880:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2882:	2d e0       	ldi	r18, 0x0D	; 13
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	ac 01       	movw	r20, r24
    2888:	42 9f       	mul	r20, r18
    288a:	c0 01       	movw	r24, r0
    288c:	43 9f       	mul	r20, r19
    288e:	90 0d       	add	r25, r0
    2890:	52 9f       	mul	r21, r18
    2892:	90 0d       	add	r25, r0
    2894:	11 24       	eor	r1, r1
    2896:	e8 0f       	add	r30, r24
    2898:	f9 1f       	adc	r31, r25
    289a:	df 01       	movw	r26, r30
    289c:	a2 5a       	subi	r26, 0xA2	; 162
    289e:	bf 4f       	sbci	r27, 0xFF	; 255
    28a0:	e6 5a       	subi	r30, 0xA6	; 166
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	20 81       	ld	r18, Z
    28a6:	31 81       	ldd	r19, Z+1	; 0x01
    28a8:	42 81       	ldd	r20, Z+2	; 0x02
    28aa:	53 81       	ldd	r21, Z+3	; 0x03
    28ac:	8d 91       	ld	r24, X+
    28ae:	9d 91       	ld	r25, X+
    28b0:	0d 90       	ld	r0, X+
    28b2:	bc 91       	ld	r27, X
    28b4:	a0 2d       	mov	r26, r0
    28b6:	28 1b       	sub	r18, r24
    28b8:	39 0b       	sbc	r19, r25
    28ba:	4a 0b       	sbc	r20, r26
    28bc:	5b 0b       	sbc	r21, r27
    28be:	57 ff       	sbrs	r21, 7
    28c0:	04 c0       	rjmp	.+8      	; 0x28ca <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    28ca:	b9 01       	movw	r22, r18
    28cc:	ca 01       	movw	r24, r20
    28ce:	08 95       	ret

000028d0 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    28d0:	cf 93       	push	r28
    28d2:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    28d4:	c0 91 43 01 	lds	r28, 0x0143
    28d8:	d0 91 44 01 	lds	r29, 0x0144
    28dc:	68 2f       	mov	r22, r24
    28de:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    28e0:	8d e0       	ldi	r24, 0x0D	; 13
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	68 9f       	mul	r22, r24
    28e6:	f0 01       	movw	r30, r0
    28e8:	69 9f       	mul	r22, r25
    28ea:	f0 0d       	add	r31, r0
    28ec:	78 9f       	mul	r23, r24
    28ee:	f0 0d       	add	r31, r0
    28f0:	11 24       	eor	r1, r1
    28f2:	ec 0f       	add	r30, r28
    28f4:	fd 1f       	adc	r31, r29
    28f6:	df 01       	movw	r26, r30
    28f8:	a2 5a       	subi	r26, 0xA2	; 162
    28fa:	bf 4f       	sbci	r27, 0xFF	; 255
    28fc:	e6 5a       	subi	r30, 0xA6	; 166
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	20 81       	ld	r18, Z
    2902:	31 81       	ldd	r19, Z+1	; 0x01
    2904:	42 81       	ldd	r20, Z+2	; 0x02
    2906:	53 81       	ldd	r21, Z+3	; 0x03
    2908:	8d 91       	ld	r24, X+
    290a:	9d 91       	ld	r25, X+
    290c:	0d 90       	ld	r0, X+
    290e:	bc 91       	ld	r27, X
    2910:	a0 2d       	mov	r26, r0
    2912:	28 1b       	sub	r18, r24
    2914:	39 0b       	sbc	r19, r25
    2916:	4a 0b       	sbc	r20, r26
    2918:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    291a:	57 fd       	sbrc	r21, 7
    291c:	07 c0       	rjmp	.+14     	; 0x292c <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    291e:	21 15       	cp	r18, r1
    2920:	31 05       	cpc	r19, r1
    2922:	41 05       	cpc	r20, r1
    2924:	51 05       	cpc	r21, r1
    2926:	11 f0       	breq	.+4      	; 0x292c <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <Timebase_DownCounter_Period_Value_Expired+0x84>
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	8d e0       	ldi	r24, 0x0D	; 13
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	ac 01       	movw	r20, r24
    2934:	64 9f       	mul	r22, r20
    2936:	c0 01       	movw	r24, r0
    2938:	65 9f       	mul	r22, r21
    293a:	90 0d       	add	r25, r0
    293c:	74 9f       	mul	r23, r20
    293e:	90 0d       	add	r25, r0
    2940:	11 24       	eor	r1, r1
    2942:	c8 0f       	add	r28, r24
    2944:	d9 1f       	adc	r29, r25
    2946:	cb 5a       	subi	r28, 0xAB	; 171
    2948:	df 4f       	sbci	r29, 0xFF	; 255
    294a:	88 81       	ld	r24, Y
    294c:	80 ff       	sbrs	r24, 0
    294e:	21 e0       	ldi	r18, 0x01	; 1
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2954:	82 2f       	mov	r24, r18
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	08 95       	ret

0000295c <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    295c:	1f 93       	push	r17
    295e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2960:	0e 94 68 14 	call	0x28d0	; 0x28d0 <Timebase_DownCounter_Period_Value_Expired>
    2964:	81 30       	cpi	r24, 0x01	; 1
    2966:	11 f0       	breq	.+4      	; 0x296c <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	18 c0       	rjmp	.+48     	; 0x299c <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    296c:	e0 91 43 01 	lds	r30, 0x0143
    2970:	f0 91 44 01 	lds	r31, 0x0144
    2974:	21 2f       	mov	r18, r17
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	8d e0       	ldi	r24, 0x0D	; 13
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	ac 01       	movw	r20, r24
    297e:	24 9f       	mul	r18, r20
    2980:	c0 01       	movw	r24, r0
    2982:	25 9f       	mul	r18, r21
    2984:	90 0d       	add	r25, r0
    2986:	34 9f       	mul	r19, r20
    2988:	90 0d       	add	r25, r0
    298a:	11 24       	eor	r1, r1
    298c:	e8 0f       	add	r30, r24
    298e:	f9 1f       	adc	r31, r25
    2990:	eb 5a       	subi	r30, 0xAB	; 171
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	80 81       	ld	r24, Z
    2996:	8e 7f       	andi	r24, 0xFE	; 254
    2998:	80 83       	st	Z, r24
    299a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    299c:	1f 91       	pop	r17
    299e:	08 95       	ret

000029a0 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	0e 94 4f 13 	call	0x269e	; 0x269e <Timebase_DownCounter_Update>
  }
}
    29a6:	08 95       	ret

000029a8 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    29a8:	e0 91 43 01 	lds	r30, 0x0143
    29ac:	f0 91 44 01 	lds	r31, 0x0144
    29b0:	ea 5a       	subi	r30, 0xAA	; 170
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	11 92       	st	Z+, r1
    29b6:	11 92       	st	Z+, r1
    29b8:	11 92       	st	Z+, r1
    29ba:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    29bc:	10 82       	st	Z, r1
    29be:	11 82       	std	Z+1, r1	; 0x01
    29c0:	12 82       	std	Z+2, r1	; 0x02
    29c2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    29c4:	35 97       	sbiw	r30, 0x05	; 5
    29c6:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    29c8:	80 7e       	andi	r24, 0xE0	; 224
    29ca:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    29cc:	08 95       	ret

000029ce <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    29ce:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    29d2:	0e 94 42 11 	call	0x2284	; 0x2284 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    29d6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    29da:	08 95       	ret

000029dc <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    29dc:	0f 93       	push	r16
    29de:	1f 93       	push	r17
    29e0:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    29e2:	0e 94 b5 00 	call	0x16a	; 0x16a <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 8c 01 	call	0x318	; 0x318 <Timebase_Timer_Config>
  Timebase_Reset();
    29ec:	0e 94 e7 14 	call	0x29ce	; 0x29ce <Timebase_Reset>
}
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    29f6:	e0 91 43 01 	lds	r30, 0x0143
    29fa:	f0 91 44 01 	lds	r31, 0x0144
    29fe:	85 89       	ldd	r24, Z+21	; 0x15
    2a00:	82 ff       	sbrs	r24, 2
    2a02:	0b c0       	rjmp	.+22     	; 0x2a1a <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a04:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    2a08:	0e 94 c0 08 	call	0x1180	; 0x1180 <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2a0c:	e0 91 43 01 	lds	r30, 0x0143
    2a10:	f0 91 44 01 	lds	r31, 0x0144
    2a14:	85 89       	ldd	r24, Z+21	; 0x15
    2a16:	8b 7f       	andi	r24, 0xFB	; 251
    2a18:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2a1a:	e0 91 43 01 	lds	r30, 0x0143
    2a1e:	f0 91 44 01 	lds	r31, 0x0144
    2a22:	85 89       	ldd	r24, Z+21	; 0x15
    2a24:	80 ff       	sbrs	r24, 0
    2a26:	0b c0       	rjmp	.+22     	; 0x2a3e <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a28:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    2a2c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2a30:	e0 91 43 01 	lds	r30, 0x0143
    2a34:	f0 91 44 01 	lds	r31, 0x0144
    2a38:	85 89       	ldd	r24, Z+21	; 0x15
    2a3a:	8e 7f       	andi	r24, 0xFE	; 254
    2a3c:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2a3e:	e0 91 43 01 	lds	r30, 0x0143
    2a42:	f0 91 44 01 	lds	r31, 0x0144
    2a46:	85 89       	ldd	r24, Z+21	; 0x15
    2a48:	83 ff       	sbrs	r24, 3
    2a4a:	0b c0       	rjmp	.+22     	; 0x2a62 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a4c:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    2a50:	0e 94 3e 11 	call	0x227c	; 0x227c <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2a54:	e0 91 43 01 	lds	r30, 0x0143
    2a58:	f0 91 44 01 	lds	r31, 0x0144
    2a5c:	85 89       	ldd	r24, Z+21	; 0x15
    2a5e:	87 7f       	andi	r24, 0xF7	; 247
    2a60:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2a62:	e0 91 43 01 	lds	r30, 0x0143
    2a66:	f0 91 44 01 	lds	r31, 0x0144
    2a6a:	85 89       	ldd	r24, Z+21	; 0x15
    2a6c:	81 ff       	sbrs	r24, 1
    2a6e:	0b c0       	rjmp	.+22     	; 0x2a86 <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2a70:	0e 94 93 02 	call	0x526	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    2a74:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2a78:	e0 91 43 01 	lds	r30, 0x0143
    2a7c:	f0 91 44 01 	lds	r31, 0x0144
    2a80:	85 89       	ldd	r24, Z+21	; 0x15
    2a82:	8d 7f       	andi	r24, 0xFD	; 253
    2a84:	85 8b       	std	Z+21, r24	; 0x15
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    2a86:	e0 91 43 01 	lds	r30, 0x0143
    2a8a:	f0 91 44 01 	lds	r31, 0x0144
    2a8e:	14 8a       	std	Z+20, r1	; 0x14
}
    2a90:	08 95       	ret

00002a92 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    2a92:	e0 91 43 01 	lds	r30, 0x0143
    2a96:	f0 91 44 01 	lds	r31, 0x0144
    2a9a:	86 85       	ldd	r24, Z+14	; 0x0e
    2a9c:	97 85       	ldd	r25, Z+15	; 0x0f
    2a9e:	01 96       	adiw	r24, 0x01	; 1
    2aa0:	97 87       	std	Z+15, r25	; 0x0f
    2aa2:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2aa4:	85 89       	ldd	r24, Z+21	; 0x15
    2aa6:	84 60       	ori	r24, 0x04	; 4
    2aa8:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2aaa:	85 89       	ldd	r24, Z+21	; 0x15
    2aac:	88 60       	ori	r24, 0x08	; 8
    2aae:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    2ab0:	26 85       	ldd	r18, Z+14	; 0x0e
    2ab2:	37 85       	ldd	r19, Z+15	; 0x0f
    2ab4:	81 81       	ldd	r24, Z+1	; 0x01
    2ab6:	92 81       	ldd	r25, Z+2	; 0x02
    2ab8:	28 17       	cp	r18, r24
    2aba:	39 07       	cpc	r19, r25
    2abc:	98 f0       	brcs	.+38     	; 0x2ae4 <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    2abe:	80 89       	ldd	r24, Z+16	; 0x10
    2ac0:	91 89       	ldd	r25, Z+17	; 0x11
    2ac2:	a2 89       	ldd	r26, Z+18	; 0x12
    2ac4:	b3 89       	ldd	r27, Z+19	; 0x13
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	a1 1d       	adc	r26, r1
    2aca:	b1 1d       	adc	r27, r1
    2acc:	80 8b       	std	Z+16, r24	; 0x10
    2ace:	91 8b       	std	Z+17, r25	; 0x11
    2ad0:	a2 8b       	std	Z+18, r26	; 0x12
    2ad2:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    2ad4:	17 86       	std	Z+15, r1	; 0x0f
    2ad6:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2ad8:	85 89       	ldd	r24, Z+21	; 0x15
    2ada:	81 60       	ori	r24, 0x01	; 1
    2adc:	85 8b       	std	Z+21, r24	; 0x15
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2ade:	85 89       	ldd	r24, Z+21	; 0x15
    2ae0:	82 60       	ori	r24, 0x02	; 2
    2ae2:	85 8b       	std	Z+21, r24	; 0x15
    2ae4:	08 95       	ret

00002ae6 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2ae6:	1f 92       	push	r1
    2ae8:	0f 92       	push	r0
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	0f 92       	push	r0
    2aee:	11 24       	eor	r1, r1
    2af0:	2f 93       	push	r18
    2af2:	3f 93       	push	r19
    2af4:	4f 93       	push	r20
    2af6:	5f 93       	push	r21
    2af8:	6f 93       	push	r22
    2afa:	7f 93       	push	r23
    2afc:	8f 93       	push	r24
    2afe:	9f 93       	push	r25
    2b00:	af 93       	push	r26
    2b02:	bf 93       	push	r27
    2b04:	ef 93       	push	r30
    2b06:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2b08:	e0 91 43 01 	lds	r30, 0x0143
    2b0c:	f0 91 44 01 	lds	r31, 0x0144
    2b10:	83 81       	ldd	r24, Z+3	; 0x03
    2b12:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2b14:	0e 94 49 15 	call	0x2a92	; 0x2a92 <Timebase_ISR_Executables>
}
    2b18:	ff 91       	pop	r31
    2b1a:	ef 91       	pop	r30
    2b1c:	bf 91       	pop	r27
    2b1e:	af 91       	pop	r26
    2b20:	9f 91       	pop	r25
    2b22:	8f 91       	pop	r24
    2b24:	7f 91       	pop	r23
    2b26:	6f 91       	pop	r22
    2b28:	5f 91       	pop	r21
    2b2a:	4f 91       	pop	r20
    2b2c:	3f 91       	pop	r19
    2b2e:	2f 91       	pop	r18
    2b30:	0f 90       	pop	r0
    2b32:	0f be       	out	0x3f, r0	; 63
    2b34:	0f 90       	pop	r0
    2b36:	1f 90       	pop	r1
    2b38:	18 95       	reti

00002b3a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    2b3a:	10 92 14 01 	sts	0x0114, r1
    2b3e:	e5 e1       	ldi	r30, 0x15	; 21
    2b40:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    2b42:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	ed 31       	cpi	r30, 0x1D	; 29
    2b48:	f8 07       	cpc	r31, r24
    2b4a:	d9 f7       	brne	.-10     	; 0x2b42 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    2b4c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
    2b4e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
    2b50:	80 e2       	ldi	r24, 0x20	; 32
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	93 a3       	std	Z+35, r25	; 0x23
    2b56:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
    2b58:	15 a2       	std	Z+37, r1	; 0x25
    2b5a:	14 a2       	std	Z+36, r1	; 0x24
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	04 c0       	rjmp	.+8      	; 0x2b68 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
    2b60:	ec 5e       	subi	r30, 0xEC	; 236
    2b62:	fe 4f       	sbci	r31, 0xFE	; 254
    2b64:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
    2b66:	2f 5f       	subi	r18, 0xFF	; 255
    2b68:	80 91 3f 01 	lds	r24, 0x013F
    2b6c:	90 91 40 01 	lds	r25, 0x0140
    2b70:	e2 2f       	mov	r30, r18
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	e8 17       	cp	r30, r24
    2b76:	f9 07       	cpc	r31, r25
    2b78:	98 f3       	brcs	.-26     	; 0x2b60 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
    2b7a:	08 95       	ret

00002b7c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    2b7c:	08 95       	ret

00002b7e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    2b7e:	08 95       	ret

00002b80 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    2b80:	9b 01       	movw	r18, r22
    2b82:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    2b84:	60 e6       	ldi	r22, 0x60	; 96
    2b86:	73 ee       	ldi	r23, 0xE3	; 227
    2b88:	86 e1       	ldi	r24, 0x16	; 22
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2b90:	21 50       	subi	r18, 0x01	; 1
    2b92:	30 40       	sbci	r19, 0x00	; 0
    2b94:	40 40       	sbci	r20, 0x00	; 0
    2b96:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    2b98:	e0 ec       	ldi	r30, 0xC0	; 192
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	82 60       	ori	r24, 0x02	; 2
    2ba0:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    2ba2:	bb 27       	eor	r27, r27
    2ba4:	a5 2f       	mov	r26, r21
    2ba6:	94 2f       	mov	r25, r20
    2ba8:	83 2f       	mov	r24, r19
    2baa:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    2bae:	20 93 c4 00 	sts	0x00C4, r18
}
    2bb2:	08 95       	ret

00002bb4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    2bb4:	e1 ec       	ldi	r30, 0xC1	; 193
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	88 60       	ori	r24, 0x08	; 8
    2bbc:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2bbe:	86 e0       	ldi	r24, 0x06	; 6
    2bc0:	80 93 c2 00 	sts	0x00C2, r24
}
    2bc4:	08 95       	ret

00002bc6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    2bc6:	e1 ec       	ldi	r30, 0xC1	; 193
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	80 61       	ori	r24, 0x10	; 16
    2bce:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2bd0:	86 e0       	ldi	r24, 0x06	; 6
    2bd2:	80 93 c2 00 	sts	0x00C2, r24
}
    2bd6:	08 95       	ret

00002bd8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    2bd8:	e1 ec       	ldi	r30, 0xC1	; 193
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	80 68       	ori	r24, 0x80	; 128
    2be0:	80 83       	st	Z, r24
  sei();
    2be2:	78 94       	sei
}
    2be4:	08 95       	ret

00002be6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    2be6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    2be8:	80 91 c0 00 	lds	r24, 0x00C0
    2bec:	85 ff       	sbrs	r24, 5
    2bee:	fc cf       	rjmp	.-8      	; 0x2be8 <UART_Transmit_Byte+0x2>
  UDR0=val;
    2bf0:	90 93 c6 00 	sts	0x00C6, r25
}
    2bf4:	08 95       	ret

00002bf6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	0f 92       	push	r0
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    2c00:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    2c02:	80 91 c0 00 	lds	r24, 0x00C0
    2c06:	84 ff       	sbrs	r24, 4
    2c08:	05 c0       	rjmp	.+10     	; 0x2c14 <UART_Receive_Byte+0x1e>
    val=UDR0;
    2c0a:	80 91 c6 00 	lds	r24, 0x00C6
    2c0e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	08 c0       	rjmp	.+16     	; 0x2c24 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    2c14:	80 91 c0 00 	lds	r24, 0x00C0
    2c18:	83 ff       	sbrs	r24, 3
    2c1a:	07 c0       	rjmp	.+14     	; 0x2c2a <UART_Receive_Byte+0x34>
    val=UDR0;
    2c1c:	80 91 c6 00 	lds	r24, 0x00C6
    2c20:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	80 93 14 01 	sts	0x0114, r24
    2c28:	05 c0       	rjmp	.+10     	; 0x2c34 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    2c2a:	80 91 c6 00 	lds	r24, 0x00C6
    2c2e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    2c30:	10 92 14 01 	sts	0x0114, r1
  }
  return val;
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c36:	0f 90       	pop	r0
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
    2c3e:	80 91 1e 01 	lds	r24, 0x011E
}
    2c42:	08 95       	ret

00002c44 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
    2c44:	10 92 1e 01 	sts	0x011E, r1
}
    2c48:	08 95       	ret

00002c4a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
    2c4a:	1f 93       	push	r17
    2c4c:	cf 93       	push	r28
    2c4e:	df 93       	push	r29
    2c50:	ab 01       	movw	r20, r22
    2c52:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    2c54:	4f 3f       	cpi	r20, 0xFF	; 255
    2c56:	51 05       	cpc	r21, r1
    2c58:	61 05       	cpc	r22, r1
    2c5a:	71 05       	cpc	r23, r1
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <UART_Transmit_Byte_Hex+0x16>
    2c5e:	28 f4       	brcc	.+10     	; 0x2c6a <UART_Transmit_Byte_Hex+0x20>
    2c60:	e8 e0       	ldi	r30, 0x08	; 8
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	c2 e0       	ldi	r28, 0x02	; 2
    2c66:	d0 e0       	ldi	r29, 0x00	; 0
    2c68:	11 c0       	rjmp	.+34     	; 0x2c8c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    2c6a:	40 30       	cpi	r20, 0x00	; 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	58 07       	cpc	r21, r24
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	68 07       	cpc	r22, r24
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	78 07       	cpc	r23, r24
    2c78:	28 f0       	brcs	.+10     	; 0x2c84 <UART_Transmit_Byte_Hex+0x3a>
    2c7a:	e0 e2       	ldi	r30, 0x20	; 32
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	c8 e0       	ldi	r28, 0x08	; 8
    2c80:	d0 e0       	ldi	r29, 0x00	; 0
    2c82:	04 c0       	rjmp	.+8      	; 0x2c8c <UART_Transmit_Byte_Hex+0x42>
    2c84:	e0 e1       	ldi	r30, 0x10	; 16
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	c4 e0       	ldi	r28, 0x04	; 4
    2c8a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2c8c:	80 91 c0 00 	lds	r24, 0x00C0
    2c90:	85 ff       	sbrs	r24, 5
    2c92:	fc cf       	rjmp	.-8      	; 0x2c8c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    2c94:	80 e3       	ldi	r24, 0x30	; 48
    2c96:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2c9a:	80 91 c0 00 	lds	r24, 0x00C0
    2c9e:	85 ff       	sbrs	r24, 5
    2ca0:	fc cf       	rjmp	.-8      	; 0x2c9a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    2ca2:	88 e7       	ldi	r24, 0x78	; 120
    2ca4:	80 93 c6 00 	sts	0x00C6, r24
    2ca8:	10 e0       	ldi	r17, 0x00	; 0
    2caa:	1f c0       	rjmp	.+62     	; 0x2cea <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    2cac:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    2cae:	db 01       	movw	r26, r22
    2cb0:	ca 01       	movw	r24, r20
    2cb2:	0e 2e       	mov	r0, r30
    2cb4:	04 c0       	rjmp	.+8      	; 0x2cbe <UART_Transmit_Byte_Hex+0x74>
    2cb6:	b6 95       	lsr	r27
    2cb8:	a7 95       	ror	r26
    2cba:	97 95       	ror	r25
    2cbc:	87 95       	ror	r24
    2cbe:	0a 94       	dec	r0
    2cc0:	d2 f7       	brpl	.-12     	; 0x2cb6 <UART_Transmit_Byte_Hex+0x6c>
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	8f 70       	andi	r24, 0x0F	; 15
    2cc6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    2cc8:	8a 30       	cpi	r24, 0x0A	; 10
    2cca:	91 05       	cpc	r25, r1
    2ccc:	20 f0       	brcs	.+8      	; 0x2cd6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    2cce:	9c 01       	movw	r18, r24
    2cd0:	29 5c       	subi	r18, 0xC9	; 201
    2cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2cd4:	03 c0       	rjmp	.+6      	; 0x2cdc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    2cd6:	9c 01       	movw	r18, r24
    2cd8:	20 5d       	subi	r18, 0xD0	; 208
    2cda:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2cdc:	80 91 c0 00 	lds	r24, 0x00C0
    2ce0:	85 ff       	sbrs	r24, 5
    2ce2:	fc cf       	rjmp	.-8      	; 0x2cdc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    2ce4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    2ce8:	1f 5f       	subi	r17, 0xFF	; 255
    2cea:	81 2f       	mov	r24, r17
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	8c 17       	cp	r24, r28
    2cf0:	9d 07       	cpc	r25, r29
    2cf2:	e0 f2       	brcs	.-72     	; 0x2cac <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    2cf4:	df 91       	pop	r29
    2cf6:	cf 91       	pop	r28
    2cf8:	1f 91       	pop	r17
    2cfa:	08 95       	ret

00002cfc <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    2cfc:	cf 92       	push	r12
    2cfe:	df 92       	push	r13
    2d00:	ef 92       	push	r14
    2d02:	ff 92       	push	r15
    2d04:	0f 93       	push	r16
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	ab 01       	movw	r20, r22
    2d0e:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    2d10:	4f 3f       	cpi	r20, 0xFF	; 255
    2d12:	51 05       	cpc	r21, r1
    2d14:	61 05       	cpc	r22, r1
    2d16:	71 05       	cpc	r23, r1
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <UART_Transmit_Byte_Bin+0x20>
    2d1a:	10 f4       	brcc	.+4      	; 0x2d20 <UART_Transmit_Byte_Bin+0x24>
    2d1c:	97 e0       	ldi	r25, 0x07	; 7
    2d1e:	0b c0       	rjmp	.+22     	; 0x2d36 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    2d20:	40 30       	cpi	r20, 0x00	; 0
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	58 07       	cpc	r21, r24
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	68 07       	cpc	r22, r24
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	78 07       	cpc	r23, r24
    2d2e:	10 f0       	brcs	.+4      	; 0x2d34 <UART_Transmit_Byte_Bin+0x38>
    2d30:	9f e1       	ldi	r25, 0x1F	; 31
    2d32:	01 c0       	rjmp	.+2      	; 0x2d36 <UART_Transmit_Byte_Bin+0x3a>
    2d34:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d36:	80 91 c0 00 	lds	r24, 0x00C0
    2d3a:	85 ff       	sbrs	r24, 5
    2d3c:	fc cf       	rjmp	.-8      	; 0x2d36 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    2d3e:	80 e3       	ldi	r24, 0x30	; 48
    2d40:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d44:	80 91 c0 00 	lds	r24, 0x00C0
    2d48:	85 ff       	sbrs	r24, 5
    2d4a:	fc cf       	rjmp	.-8      	; 0x2d44 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    2d4c:	82 e6       	ldi	r24, 0x62	; 98
    2d4e:	80 93 c6 00 	sts	0x00C6, r24
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    2d56:	e9 2f       	mov	r30, r25
    2d58:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2d5a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2d5c:	11 e3       	ldi	r17, 0x31	; 49
    2d5e:	ef 01       	movw	r28, r30
    2d60:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    2d62:	cf 01       	movw	r24, r30
    2d64:	82 1b       	sub	r24, r18
    2d66:	93 0b       	sbc	r25, r19
    2d68:	6a 01       	movw	r12, r20
    2d6a:	7b 01       	movw	r14, r22
    2d6c:	04 c0       	rjmp	.+8      	; 0x2d76 <UART_Transmit_Byte_Bin+0x7a>
    2d6e:	f6 94       	lsr	r15
    2d70:	e7 94       	ror	r14
    2d72:	d7 94       	ror	r13
    2d74:	c7 94       	ror	r12
    2d76:	8a 95       	dec	r24
    2d78:	d2 f7       	brpl	.-12     	; 0x2d6e <UART_Transmit_Byte_Bin+0x72>
    2d7a:	d7 01       	movw	r26, r14
    2d7c:	c6 01       	movw	r24, r12
    2d7e:	81 70       	andi	r24, 0x01	; 1
    2d80:	90 70       	andi	r25, 0x00	; 0
    2d82:	89 2b       	or	r24, r25
    2d84:	39 f0       	breq	.+14     	; 0x2d94 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d86:	80 91 c0 00 	lds	r24, 0x00C0
    2d8a:	85 ff       	sbrs	r24, 5
    2d8c:	fc cf       	rjmp	.-8      	; 0x2d86 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    2d8e:	10 93 c6 00 	sts	0x00C6, r17
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d94:	80 91 c0 00 	lds	r24, 0x00C0
    2d98:	85 ff       	sbrs	r24, 5
    2d9a:	fc cf       	rjmp	.-8      	; 0x2d94 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    2d9c:	00 93 c6 00 	sts	0x00C6, r16
    2da0:	2f 5f       	subi	r18, 0xFF	; 255
    2da2:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2da4:	2c 17       	cp	r18, r28
    2da6:	3d 07       	cpc	r19, r29
    2da8:	e1 f6       	brne	.-72     	; 0x2d62 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    2daa:	df 91       	pop	r29
    2dac:	cf 91       	pop	r28
    2dae:	1f 91       	pop	r17
    2db0:	0f 91       	pop	r16
    2db2:	ff 90       	pop	r15
    2db4:	ef 90       	pop	r14
    2db6:	df 90       	pop	r13
    2db8:	cf 90       	pop	r12
    2dba:	08 95       	ret

00002dbc <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    2dbc:	ac 01       	movw	r20, r24
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	07 c0       	rjmp	.+14     	; 0x2dd0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dc2:	80 91 c0 00 	lds	r24, 0x00C0
    2dc6:	85 ff       	sbrs	r24, 5
    2dc8:	fc cf       	rjmp	.-8      	; 0x2dc2 <UART_Transmit_Text+0x6>
  UDR0=val;
    2dca:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    2dce:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    2dd0:	fa 01       	movw	r30, r20
    2dd2:	e2 0f       	add	r30, r18
    2dd4:	f1 1d       	adc	r31, r1
    2dd6:	e0 81       	ld	r30, Z
    2dd8:	ee 23       	and	r30, r30
    2dda:	99 f7       	brne	.-26     	; 0x2dc2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    2ddc:	08 95       	ret

00002dde <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    2dde:	8f e0       	ldi	r24, 0x0F	; 15
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_Transmit_Text>
}
    2de6:	08 95       	ret

00002de8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    2de8:	82 e1       	ldi	r24, 0x12	; 18
    2dea:	91 e0       	ldi	r25, 0x01	; 1
    2dec:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <UART_Transmit_Text>
}
    2df0:	08 95       	ret

00002df2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    2df2:	bf 92       	push	r11
    2df4:	cf 92       	push	r12
    2df6:	df 92       	push	r13
    2df8:	ef 92       	push	r14
    2dfa:	ff 92       	push	r15
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	6b 01       	movw	r12, r22
    2e02:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    2e04:	61 15       	cp	r22, r1
    2e06:	71 05       	cpc	r23, r1
    2e08:	81 05       	cpc	r24, r1
    2e0a:	91 05       	cpc	r25, r1
    2e0c:	31 f4       	brne	.+12     	; 0x2e1a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    2e0e:	10 92 15 01 	sts	0x0115, r1
    UART.InputNumberDigits=1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	80 93 1d 01 	sts	0x011D, r24
    2e18:	23 c0       	rjmp	.+70     	; 0x2e60 <UART_Determine_Digit_Numbers+0x6e>
    2e1a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    2e1c:	0b 2d       	mov	r16, r11
    2e1e:	10 e0       	ldi	r17, 0x00	; 0
    2e20:	0c 5e       	subi	r16, 0xEC	; 236
    2e22:	1e 4f       	sbci	r17, 0xFE	; 254
    2e24:	c7 01       	movw	r24, r14
    2e26:	b6 01       	movw	r22, r12
    2e28:	2a e0       	ldi	r18, 0x0A	; 10
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2e34:	f8 01       	movw	r30, r16
    2e36:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    2e38:	c7 01       	movw	r24, r14
    2e3a:	b6 01       	movw	r22, r12
    2e3c:	2a e0       	ldi	r18, 0x0A	; 10
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	50 e0       	ldi	r21, 0x00	; 0
    2e44:	0e 94 23 18 	call	0x3046	; 0x3046 <__udivmodsi4>
    2e48:	c9 01       	movw	r24, r18
    2e4a:	da 01       	movw	r26, r20
    2e4c:	6c 01       	movw	r12, r24
    2e4e:	7d 01       	movw	r14, r26
      i++;
    2e50:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    2e52:	c1 14       	cp	r12, r1
    2e54:	d1 04       	cpc	r13, r1
    2e56:	e1 04       	cpc	r14, r1
    2e58:	f1 04       	cpc	r15, r1
    2e5a:	01 f7       	brne	.-64     	; 0x2e1c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    2e5c:	b0 92 1d 01 	sts	0x011D, r11
  }
}
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	bf 90       	pop	r11
    2e6e:	08 95       	ret

00002e70 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2e70:	e0 91 1d 01 	lds	r30, 0x011D
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    2e76:	2e 2f       	mov	r18, r30
    2e78:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    2e7a:	e2 2f       	mov	r30, r18
    2e7c:	f0 e0       	ldi	r31, 0x00	; 0
    2e7e:	ec 5e       	subi	r30, 0xEC	; 236
    2e80:	fe 4f       	sbci	r31, 0xFE	; 254
    2e82:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2e84:	80 91 c0 00 	lds	r24, 0x00C0
    2e88:	85 ff       	sbrs	r24, 5
    2e8a:	fc cf       	rjmp	.-8      	; 0x2e84 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    2e8c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2e8e:	90 93 c6 00 	sts	0x00C6, r25
    2e92:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2e94:	ee 23       	and	r30, r30
    2e96:	79 f7       	brne	.-34     	; 0x2e76 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    2e98:	08 95       	ret

00002e9a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    2e9a:	9b 01       	movw	r18, r22
    2e9c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2e9e:	97 ff       	sbrs	r25, 7
    2ea0:	0e c0       	rjmp	.+28     	; 0x2ebe <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2ea2:	80 91 c0 00 	lds	r24, 0x00C0
    2ea6:	85 ff       	sbrs	r24, 5
    2ea8:	fc cf       	rjmp	.-8      	; 0x2ea2 <UART_Transmit_Number+0x8>
  UDR0=val;
    2eaa:	8d e2       	ldi	r24, 0x2D	; 45
    2eac:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2eb0:	50 95       	com	r21
    2eb2:	40 95       	com	r20
    2eb4:	30 95       	com	r19
    2eb6:	21 95       	neg	r18
    2eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eba:	4f 4f       	sbci	r20, 0xFF	; 255
    2ebc:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    2ebe:	ca 01       	movw	r24, r20
    2ec0:	b9 01       	movw	r22, r18
    2ec2:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    2ec6:	0e 94 38 17 	call	0x2e70	; 0x2e70 <UART_Transmit_Number_Digits>
}
    2eca:	08 95       	ret

00002ecc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
    2ecc:	fc 01       	movw	r30, r24
    2ece:	ec 5e       	subi	r30, 0xEC	; 236
    2ed0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed2:	83 85       	ldd	r24, Z+11	; 0x0b
}
    2ed4:	08 95       	ret

00002ed6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
    2ed6:	20 91 41 01 	lds	r18, 0x0141
    2eda:	30 91 42 01 	lds	r19, 0x0142
}
    2ede:	c9 01       	movw	r24, r18
    2ee0:	08 95       	ret

00002ee2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
    2ee2:	10 92 14 01 	sts	0x0114, r1
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
    2eec:	f9 01       	movw	r30, r18
    2eee:	ec 5e       	subi	r30, 0xEC	; 236
    2ef0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
    2ef4:	2f 5f       	subi	r18, 0xFF	; 255
    2ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef8:	80 91 3f 01 	lds	r24, 0x013F
    2efc:	90 91 40 01 	lds	r25, 0x0140
    2f00:	28 17       	cp	r18, r24
    2f02:	39 07       	cpc	r19, r25
    2f04:	98 f3       	brcs	.-26     	; 0x2eec <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
    2f06:	10 92 42 01 	sts	0x0142, r1
    2f0a:	10 92 41 01 	sts	0x0141, r1
  #endif
}
    2f0e:	08 95       	ret

00002f10 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	0f 92       	push	r0
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
    2f1a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
    2f1c:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <UART_Receive_Byte>
    2f20:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
    2f22:	80 91 14 01 	lds	r24, 0x0114
    2f26:	88 23       	and	r24, r24
    2f28:	19 f5       	brne	.+70     	; 0x2f70 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	80 93 1e 01 	sts	0x011E, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
    2f30:	e0 91 41 01 	lds	r30, 0x0141
    2f34:	f0 91 42 01 	lds	r31, 0x0142
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	ec 5e       	subi	r30, 0xEC	; 236
    2f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
    2f40:	80 91 41 01 	lds	r24, 0x0141
    2f44:	90 91 42 01 	lds	r25, 0x0142
    2f48:	01 96       	adiw	r24, 0x01	; 1
    2f4a:	90 93 42 01 	sts	0x0142, r25
    2f4e:	80 93 41 01 	sts	0x0141, r24

    if(UART.BufferIndex>=UART.BufferSize){
    2f52:	20 91 41 01 	lds	r18, 0x0141
    2f56:	30 91 42 01 	lds	r19, 0x0142
    2f5a:	80 91 3f 01 	lds	r24, 0x013F
    2f5e:	90 91 40 01 	lds	r25, 0x0140
    2f62:	28 17       	cp	r18, r24
    2f64:	39 07       	cpc	r19, r25
    2f66:	20 f0       	brcs	.+8      	; 0x2f70 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
    2f68:	10 92 42 01 	sts	0x0142, r1
    2f6c:	10 92 41 01 	sts	0x0141, r1
    }
  }
}
    2f70:	0f 90       	pop	r0
    2f72:	cf 91       	pop	r28
    2f74:	df 91       	pop	r29
    2f76:	08 95       	ret

00002f78 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
    2f78:	1f 92       	push	r1
    2f7a:	0f 92       	push	r0
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	0f 92       	push	r0
    2f80:	11 24       	eor	r1, r1
    2f82:	2f 93       	push	r18
    2f84:	3f 93       	push	r19
    2f86:	4f 93       	push	r20
    2f88:	5f 93       	push	r21
    2f8a:	6f 93       	push	r22
    2f8c:	7f 93       	push	r23
    2f8e:	8f 93       	push	r24
    2f90:	9f 93       	push	r25
    2f92:	af 93       	push	r26
    2f94:	bf 93       	push	r27
    2f96:	ef 93       	push	r30
    2f98:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
    2f9a:	0e 94 88 17 	call	0x2f10	; 0x2f10 <UART_Interrupt_Service_Routine>
}
    2f9e:	ff 91       	pop	r31
    2fa0:	ef 91       	pop	r30
    2fa2:	bf 91       	pop	r27
    2fa4:	af 91       	pop	r26
    2fa6:	9f 91       	pop	r25
    2fa8:	8f 91       	pop	r24
    2faa:	7f 91       	pop	r23
    2fac:	6f 91       	pop	r22
    2fae:	5f 91       	pop	r21
    2fb0:	4f 91       	pop	r20
    2fb2:	3f 91       	pop	r19
    2fb4:	2f 91       	pop	r18
    2fb6:	0f 90       	pop	r0
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	0f 90       	pop	r0
    2fbc:	1f 90       	pop	r1
    2fbe:	18 95       	reti

00002fc0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
    2fc0:	ef 92       	push	r14
    2fc2:	ff 92       	push	r15
    2fc4:	0f 93       	push	r16
    2fc6:	1f 93       	push	r17
    2fc8:	7b 01       	movw	r14, r22
    2fca:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    2fcc:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    2fd0:	c8 01       	movw	r24, r16
    2fd2:	b7 01       	movw	r22, r14
    2fd4:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    2fd8:	e1 ec       	ldi	r30, 0xC1	; 193
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	88 60       	ori	r24, 0x08	; 8
    2fe0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2fe2:	a2 ec       	ldi	r26, 0xC2	; 194
    2fe4:	b0 e0       	ldi	r27, 0x00	; 0
    2fe6:	96 e0       	ldi	r25, 0x06	; 6
    2fe8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    2fea:	80 81       	ld	r24, Z
    2fec:	80 61       	ori	r24, 0x10	; 16
    2fee:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2ff0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    2ff2:	80 81       	ld	r24, Z
    2ff4:	80 68       	ori	r24, 0x80	; 128
    2ff6:	80 83       	st	Z, r24
  sei();
    2ff8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
    2ffa:	0e 94 71 17 	call	0x2ee2	; 0x2ee2 <UART_Flush_Buffer>
}
    2ffe:	1f 91       	pop	r17
    3000:	0f 91       	pop	r16
    3002:	ff 90       	pop	r15
    3004:	ef 90       	pop	r14
    3006:	08 95       	ret

00003008 <__mulsi3>:
    3008:	62 9f       	mul	r22, r18
    300a:	d0 01       	movw	r26, r0
    300c:	73 9f       	mul	r23, r19
    300e:	f0 01       	movw	r30, r0
    3010:	82 9f       	mul	r24, r18
    3012:	e0 0d       	add	r30, r0
    3014:	f1 1d       	adc	r31, r1
    3016:	64 9f       	mul	r22, r20
    3018:	e0 0d       	add	r30, r0
    301a:	f1 1d       	adc	r31, r1
    301c:	92 9f       	mul	r25, r18
    301e:	f0 0d       	add	r31, r0
    3020:	83 9f       	mul	r24, r19
    3022:	f0 0d       	add	r31, r0
    3024:	74 9f       	mul	r23, r20
    3026:	f0 0d       	add	r31, r0
    3028:	65 9f       	mul	r22, r21
    302a:	f0 0d       	add	r31, r0
    302c:	99 27       	eor	r25, r25
    302e:	72 9f       	mul	r23, r18
    3030:	b0 0d       	add	r27, r0
    3032:	e1 1d       	adc	r30, r1
    3034:	f9 1f       	adc	r31, r25
    3036:	63 9f       	mul	r22, r19
    3038:	b0 0d       	add	r27, r0
    303a:	e1 1d       	adc	r30, r1
    303c:	f9 1f       	adc	r31, r25
    303e:	bd 01       	movw	r22, r26
    3040:	cf 01       	movw	r24, r30
    3042:	11 24       	eor	r1, r1
    3044:	08 95       	ret

00003046 <__udivmodsi4>:
    3046:	a1 e2       	ldi	r26, 0x21	; 33
    3048:	1a 2e       	mov	r1, r26
    304a:	aa 1b       	sub	r26, r26
    304c:	bb 1b       	sub	r27, r27
    304e:	fd 01       	movw	r30, r26
    3050:	0d c0       	rjmp	.+26     	; 0x306c <__udivmodsi4_ep>

00003052 <__udivmodsi4_loop>:
    3052:	aa 1f       	adc	r26, r26
    3054:	bb 1f       	adc	r27, r27
    3056:	ee 1f       	adc	r30, r30
    3058:	ff 1f       	adc	r31, r31
    305a:	a2 17       	cp	r26, r18
    305c:	b3 07       	cpc	r27, r19
    305e:	e4 07       	cpc	r30, r20
    3060:	f5 07       	cpc	r31, r21
    3062:	20 f0       	brcs	.+8      	; 0x306c <__udivmodsi4_ep>
    3064:	a2 1b       	sub	r26, r18
    3066:	b3 0b       	sbc	r27, r19
    3068:	e4 0b       	sbc	r30, r20
    306a:	f5 0b       	sbc	r31, r21

0000306c <__udivmodsi4_ep>:
    306c:	66 1f       	adc	r22, r22
    306e:	77 1f       	adc	r23, r23
    3070:	88 1f       	adc	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	1a 94       	dec	r1
    3076:	69 f7       	brne	.-38     	; 0x3052 <__udivmodsi4_loop>
    3078:	60 95       	com	r22
    307a:	70 95       	com	r23
    307c:	80 95       	com	r24
    307e:	90 95       	com	r25
    3080:	9b 01       	movw	r18, r22
    3082:	ac 01       	movw	r20, r24
    3084:	bd 01       	movw	r22, r26
    3086:	cf 01       	movw	r24, r30
    3088:	08 95       	ret

0000308a <__divmodsi4>:
    308a:	97 fb       	bst	r25, 7
    308c:	09 2e       	mov	r0, r25
    308e:	05 26       	eor	r0, r21
    3090:	0e d0       	rcall	.+28     	; 0x30ae <__divmodsi4_neg1>
    3092:	57 fd       	sbrc	r21, 7
    3094:	04 d0       	rcall	.+8      	; 0x309e <__divmodsi4_neg2>
    3096:	d7 df       	rcall	.-82     	; 0x3046 <__udivmodsi4>
    3098:	0a d0       	rcall	.+20     	; 0x30ae <__divmodsi4_neg1>
    309a:	00 1c       	adc	r0, r0
    309c:	38 f4       	brcc	.+14     	; 0x30ac <__divmodsi4_exit>

0000309e <__divmodsi4_neg2>:
    309e:	50 95       	com	r21
    30a0:	40 95       	com	r20
    30a2:	30 95       	com	r19
    30a4:	21 95       	neg	r18
    30a6:	3f 4f       	sbci	r19, 0xFF	; 255
    30a8:	4f 4f       	sbci	r20, 0xFF	; 255
    30aa:	5f 4f       	sbci	r21, 0xFF	; 255

000030ac <__divmodsi4_exit>:
    30ac:	08 95       	ret

000030ae <__divmodsi4_neg1>:
    30ae:	f6 f7       	brtc	.-4      	; 0x30ac <__divmodsi4_exit>
    30b0:	90 95       	com	r25
    30b2:	80 95       	com	r24
    30b4:	70 95       	com	r23
    30b6:	61 95       	neg	r22
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
    30ba:	8f 4f       	sbci	r24, 0xFF	; 255
    30bc:	9f 4f       	sbci	r25, 0xFF	; 255
    30be:	08 95       	ret

000030c0 <_exit>:
    30c0:	f8 94       	cli

000030c2 <__stop_program>:
    30c2:	ff cf       	rjmp	.-2      	; 0x30c2 <__stop_program>
