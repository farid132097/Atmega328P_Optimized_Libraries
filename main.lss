
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002e88  00002f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  0080011a  0080011a  00002f36  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001850  00000000  00000000  00002f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004560  00000000  00000000  000047e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00008d46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002132  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ac0  00000000  00000000  0000b44c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a4d  00000000  00000000  0000bf0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001906  00000000  00000000  0000d959  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f25f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e8       	ldi	r30, 0x88	; 136
      7c:	fe e2       	ldi	r31, 0x2E	; 46
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 42 17 	jmp	0x2e84	; 0x2e84 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <Timebase_DownCounter_SS_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 77 05 	call	0xaee	; 0xaee <Timebase_Timer_Await_SubSeconds>
	UART_Transmit_Text("Timebase\r\n");
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     120:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     122:	0e 94 38 16 	call	0x2c70	; 0x2c70 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     132:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     13c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     13e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     19e:	20 93 c4 00 	sts	0x00C4, r18
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
}
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
}
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
  sei();
     1d2:	78 94       	sei
}
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1d6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1e0:	90 93 c6 00 	sts	0x00C6, r25
}
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1f0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
    val=UDR0;
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     220:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     22e:	80 91 24 01 	lds	r24, 0x0124
}
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     234:	10 92 24 01 	sts	0x0124, r1
}
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     29c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2d4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     34a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3ba:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3be:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3fe:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
      i++;
     440:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     44c:	b0 92 23 01 	sts	0x0123, r11
  }
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     47c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
  UDR0=val;
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
}
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
}
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     50a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5e0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
  sei();
     5e8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSecondsShadow = 0;
     62c:	10 92 5a 01 	sts	0x015A, r1
     630:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.SecondsShadow = 0;
     634:	10 92 5b 01 	sts	0x015B, r1
     638:	10 92 5c 01 	sts	0x015C, r1
     63c:	10 92 5d 01 	sts	0x015D, r1
     640:	10 92 5e 01 	sts	0x015E, r1
  Timebase->Time.SubSeconds = 0;
     644:	10 92 54 01 	sts	0x0154, r1
     648:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     64c:	10 92 55 01 	sts	0x0155, r1
     650:	10 92 56 01 	sts	0x0156, r1
     654:	10 92 57 01 	sts	0x0157, r1
     658:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     65c:	10 92 4f 01 	sts	0x014F, r1
     660:	10 92 50 01 	sts	0x0150, r1
     664:	10 92 51 01 	sts	0x0151, r1
     668:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     66c:	10 92 5f 01 	sts	0x015F, r1
     670:	10 92 60 01 	sts	0x0160, r1
     674:	10 92 61 01 	sts	0x0161, r1
     678:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     67c:	10 92 63 01 	sts	0x0163, r1
     680:	10 92 64 01 	sts	0x0164, r1
     684:	10 92 65 01 	sts	0x0165, r1
     688:	10 92 66 01 	sts	0x0166, r1
	Timebase->Time.Status = 0;
     68c:	10 92 67 01 	sts	0x0167, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     690:	10 92 68 01 	sts	0x0168, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     694:	10 92 69 01 	sts	0x0169, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     698:	10 92 83 01 	sts	0x0183, r1
    Timebase->UpCounter[i].EndValue = 0;
     69c:	10 92 84 01 	sts	0x0184, r1
     6a0:	10 92 85 01 	sts	0x0185, r1
     6a4:	10 92 86 01 	sts	0x0186, r1
     6a8:	10 92 87 01 	sts	0x0187, r1
    Timebase->UpCounter[i].Target = 0;
     6ac:	10 92 88 01 	sts	0x0188, r1
     6b0:	10 92 89 01 	sts	0x0189, r1
     6b4:	10 92 8a 01 	sts	0x018A, r1
     6b8:	10 92 8b 01 	sts	0x018B, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6bc:	10 92 8c 01 	sts	0x018C, r1
     6c0:	10 92 8d 01 	sts	0x018D, r1
     6c4:	10 92 8e 01 	sts	0x018E, r1
     6c8:	10 92 8f 01 	sts	0x018F, r1
    Timebase->UpCounter[i].Value = 0;
     6cc:	10 92 90 01 	sts	0x0190, r1
     6d0:	10 92 91 01 	sts	0x0191, r1
     6d4:	10 92 92 01 	sts	0x0192, r1
     6d8:	10 92 93 01 	sts	0x0193, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6dc:	10 92 94 01 	sts	0x0194, r1
     6e0:	10 92 95 01 	sts	0x0195, r1
     6e4:	10 92 96 01 	sts	0x0196, r1
     6e8:	10 92 97 01 	sts	0x0197, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6ec:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6f0:	10 92 6b 01 	sts	0x016B, r1
     6f4:	10 92 6c 01 	sts	0x016C, r1
     6f8:	10 92 6d 01 	sts	0x016D, r1
     6fc:	10 92 6e 01 	sts	0x016E, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     700:	10 92 6f 01 	sts	0x016F, r1
     704:	10 92 70 01 	sts	0x0170, r1
     708:	10 92 71 01 	sts	0x0171, r1
     70c:	10 92 72 01 	sts	0x0172, r1
    Timebase->UpCounterSS[i].Target = 0;
     710:	10 92 73 01 	sts	0x0173, r1
     714:	10 92 74 01 	sts	0x0174, r1
     718:	10 92 75 01 	sts	0x0175, r1
     71c:	10 92 76 01 	sts	0x0176, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     720:	10 92 77 01 	sts	0x0177, r1
     724:	10 92 78 01 	sts	0x0178, r1
     728:	10 92 79 01 	sts	0x0179, r1
     72c:	10 92 7a 01 	sts	0x017A, r1
    Timebase->UpCounterSS[i].Value = 0;
     730:	10 92 7b 01 	sts	0x017B, r1
     734:	10 92 7c 01 	sts	0x017C, r1
     738:	10 92 7d 01 	sts	0x017D, r1
     73c:	10 92 7e 01 	sts	0x017E, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     740:	10 92 7f 01 	sts	0x017F, r1
     744:	10 92 80 01 	sts	0x0180, r1
     748:	10 92 81 01 	sts	0x0181, r1
     74c:	10 92 82 01 	sts	0x0182, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     750:	10 92 a9 01 	sts	0x01A9, r1
    Timebase->DownCounter[i].EndValue = 0;
     754:	10 92 aa 01 	sts	0x01AA, r1
     758:	10 92 ab 01 	sts	0x01AB, r1
     75c:	10 92 ac 01 	sts	0x01AC, r1
     760:	10 92 ad 01 	sts	0x01AD, r1
    Timebase->DownCounter[i].Value = 0;
     764:	10 92 ae 01 	sts	0x01AE, r1
     768:	10 92 af 01 	sts	0x01AF, r1
     76c:	10 92 b0 01 	sts	0x01B0, r1
     770:	10 92 b1 01 	sts	0x01B1, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     774:	10 92 b2 01 	sts	0x01B2, r1
     778:	10 92 b3 01 	sts	0x01B3, r1
     77c:	10 92 b4 01 	sts	0x01B4, r1
     780:	10 92 b5 01 	sts	0x01B5, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     784:	10 92 98 01 	sts	0x0198, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     788:	10 92 99 01 	sts	0x0199, r1
     78c:	10 92 9a 01 	sts	0x019A, r1
     790:	10 92 9b 01 	sts	0x019B, r1
     794:	10 92 9c 01 	sts	0x019C, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     798:	10 92 9d 01 	sts	0x019D, r1
     79c:	10 92 9e 01 	sts	0x019E, r1
     7a0:	10 92 9f 01 	sts	0x019F, r1
     7a4:	10 92 a0 01 	sts	0x01A0, r1
    Timebase->DownCounterSS[i].Value = 0;
     7a8:	10 92 a1 01 	sts	0x01A1, r1
     7ac:	10 92 a2 01 	sts	0x01A2, r1
     7b0:	10 92 a3 01 	sts	0x01A3, r1
     7b4:	10 92 a4 01 	sts	0x01A4, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7b8:	10 92 a5 01 	sts	0x01A5, r1
     7bc:	10 92 a6 01 	sts	0x01A6, r1
     7c0:	10 92 a7 01 	sts	0x01A7, r1
     7c4:	10 92 a8 01 	sts	0x01A8, r1
  }
  #endif
  
}
     7c8:	08 95       	ret

000007ca <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2a 97       	sbiw	r28, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     7f6:	c0 90 49 01 	lds	r12, 0x0149
     7fa:	d0 90 4a 01 	lds	r13, 0x014A
     7fe:	f6 01       	movw	r30, r12
     800:	80 81       	ld	r24, Z
     802:	80 ff       	sbrs	r24, 0
     804:	31 c0       	rjmp	.+98     	; 0x868 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     806:	01 30       	cpi	r16, 0x01	; 1
     808:	11 05       	cpc	r17, r1
     80a:	11 f4       	brne	.+4      	; 0x810 <Timebase_Timer_Config+0x46>
     80c:	96 e0       	ldi	r25, 0x06	; 6
     80e:	19 c0       	rjmp	.+50     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     810:	02 30       	cpi	r16, 0x02	; 2
     812:	11 05       	cpc	r17, r1
     814:	11 f4       	brne	.+4      	; 0x81a <Timebase_Timer_Config+0x50>
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	14 c0       	rjmp	.+40     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     81a:	04 30       	cpi	r16, 0x04	; 4
     81c:	11 05       	cpc	r17, r1
     81e:	11 f4       	brne	.+4      	; 0x824 <Timebase_Timer_Config+0x5a>
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	0f c0       	rjmp	.+30     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     824:	08 30       	cpi	r16, 0x08	; 8
     826:	11 05       	cpc	r17, r1
     828:	11 f4       	brne	.+4      	; 0x82e <Timebase_Timer_Config+0x64>
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0a c0       	rjmp	.+20     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     82e:	00 31       	cpi	r16, 0x10	; 16
     830:	11 05       	cpc	r17, r1
     832:	11 f4       	brne	.+4      	; 0x838 <Timebase_Timer_Config+0x6e>
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	05 c0       	rjmp	.+10     	; 0x842 <Timebase_Timer_Config+0x78>
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	00 32       	cpi	r16, 0x20	; 32
     83c:	11 05       	cpc	r17, r1
     83e:	09 f4       	brne	.+2      	; 0x842 <Timebase_Timer_Config+0x78>
     840:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     842:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     844:	84 b7       	in	r24, 0x34	; 52
     846:	87 7f       	andi	r24, 0xF7	; 247
     848:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     84a:	80 91 60 00 	lds	r24, 0x0060
     84e:	80 68       	ori	r24, 0x80	; 128
     850:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     854:	80 91 60 00 	lds	r24, 0x0060
     858:	88 61       	ori	r24, 0x18	; 24
     85a:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     85e:	90 64       	ori	r25, 0x40	; 64
     860:	90 93 60 00 	sts	0x0060, r25
    sei();
     864:	78 94       	sei
     866:	67 c0       	rjmp	.+206    	; 0x936 <__stack+0x37>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     868:	81 fd       	sbrc	r24, 1
     86a:	65 c0       	rjmp	.+202    	; 0x936 <__stack+0x37>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     86c:	82 ff       	sbrs	r24, 2
     86e:	63 c0       	rjmp	.+198    	; 0x936 <__stack+0x37>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     870:	de 01       	movw	r26, r28
     872:	11 96       	adiw	r26, 0x01	; 1
     874:	e0 e1       	ldi	r30, 0x10	; 16
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	01 90       	ld	r0, Z+
     87c:	0d 92       	st	X+, r0
     87e:	81 50       	subi	r24, 0x01	; 1
     880:	e1 f7       	brne	.-8      	; 0x87a <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     882:	98 01       	movw	r18, r16
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	7b e1       	ldi	r23, 0x1B	; 27
     88c:	87 eb       	ldi	r24, 0xB7	; 183
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
     894:	72 2e       	mov	r7, r18
     896:	83 2e       	mov	r8, r19
     898:	94 2e       	mov	r9, r20
     89a:	e5 2e       	mov	r14, r21
     89c:	5e 01       	movw	r10, r28
     89e:	08 94       	sec
     8a0:	a1 1c       	adc	r10, r1
     8a2:	b1 1c       	adc	r11, r1
     8a4:	c9 01       	movw	r24, r18
     8a6:	da 01       	movw	r26, r20
     8a8:	9c 01       	movw	r18, r24
     8aa:	ad 01       	movw	r20, r26
     8ac:	ff 24       	eor	r15, r15
     8ae:	14 c0       	rjmp	.+40     	; 0x8d8 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     8b0:	f5 01       	movw	r30, r10
     8b2:	21 91       	ld	r18, Z+
     8b4:	31 91       	ld	r19, Z+
     8b6:	5f 01       	movw	r10, r30
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	67 2d       	mov	r22, r7
     8be:	78 2d       	mov	r23, r8
     8c0:	89 2d       	mov	r24, r9
     8c2:	9e 2d       	mov	r25, r14
     8c4:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
     8c8:	c9 01       	movw	r24, r18
     8ca:	da 01       	movw	r26, r20
     8cc:	9c 01       	movw	r18, r24
     8ce:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8d0:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8d2:	f5 e0       	ldi	r31, 0x05	; 5
     8d4:	ff 16       	cp	r15, r31
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8d8:	2f 3f       	cpi	r18, 0xFF	; 255
     8da:	31 05       	cpc	r19, r1
     8dc:	41 05       	cpc	r20, r1
     8de:	51 05       	cpc	r21, r1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <Timebase_Timer_Config+0x11a>
     8e2:	34 f7       	brge	.-52     	; 0x8b0 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8e4:	8f 2d       	mov	r24, r15
     8e6:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8e8:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8ea:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8ec:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8f0:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8f2:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8f4:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     8f6:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     8f8:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     8fa:	88 23       	and	r24, r24
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
	  TCCR0B = (1<<CS00);
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	0f c0       	rjmp	.+30     	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 1){
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	11 f4       	brne	.+4      	; 0x90a <__stack+0xb>
	  TCCR0B = (1<<CS01);
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	0b c0       	rjmp	.+22     	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 2){
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	11 f4       	brne	.+4      	; 0x912 <__stack+0x13>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	07 c0       	rjmp	.+14     	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 3){
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	11 f4       	brne	.+4      	; 0x91a <__stack+0x1b>
	  TCCR0B = (1<<CS02);
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 4){
     91a:	84 30       	cpi	r24, 0x04	; 4
     91c:	11 f4       	brne	.+4      	; 0x922 <__stack+0x23>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     922:	82 2f       	mov	r24, r18
     924:	80 95       	com	r24
     926:	f6 01       	movw	r30, r12
     928:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 6e 00 	sts	0x006E, r24
    sei();
     934:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     936:	f6 01       	movw	r30, r12
     938:	12 83       	std	Z+2, r17	; 0x02
     93a:	01 83       	std	Z+1, r16	; 0x01
}
     93c:	2a 96       	adiw	r28, 0x0a	; 10
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	7f 90       	pop	r7
     962:	08 95       	ret

00000964 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     964:	f8 94       	cli
}
     966:	08 95       	ret

00000968 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     968:	78 94       	sei
}
     96a:	08 95       	ret

0000096c <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     96c:	e0 91 49 01 	lds	r30, 0x0149
     970:	f0 91 4a 01 	lds	r31, 0x014A
     974:	86 8d       	ldd	r24, Z+30	; 0x1e
}
     976:	08 95       	ret

00000978 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     978:	e0 91 49 01 	lds	r30, 0x0149
     97c:	f0 91 4a 01 	lds	r31, 0x014A
     980:	86 8d       	ldd	r24, Z+30	; 0x1e
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     982:	8f 33       	cpi	r24, 0x3F	; 63
     984:	18 f4       	brcc	.+6      	; 0x98c <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     986:	86 8d       	ldd	r24, Z+30	; 0x1e
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	86 8f       	std	Z+30, r24	; 0x1e
     98c:	08 95       	ret

0000098e <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     98e:	e0 91 49 01 	lds	r30, 0x0149
     992:	f0 91 4a 01 	lds	r31, 0x014A
     996:	86 8d       	ldd	r24, Z+30	; 0x1e
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     998:	88 23       	and	r24, r24
     99a:	19 f0       	breq	.+6      	; 0x9a2 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     99c:	86 8d       	ldd	r24, Z+30	; 0x1e
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	86 8f       	std	Z+30, r24	; 0x1e
     9a2:	08 95       	ret

000009a4 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     9a4:	e0 91 49 01 	lds	r30, 0x0149
     9a8:	f0 91 4a 01 	lds	r31, 0x014A
     9ac:	16 8e       	std	Z+30, r1	; 0x1e
}
     9ae:	08 95       	ret

000009b0 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     9b0:	e0 91 49 01 	lds	r30, 0x0149
     9b4:	f0 91 4a 01 	lds	r31, 0x014A
     9b8:	26 85       	ldd	r18, Z+14	; 0x0e
     9ba:	37 85       	ldd	r19, Z+15	; 0x0f
}
     9bc:	c9 01       	movw	r24, r18
     9be:	08 95       	ret

000009c0 <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     9c0:	e0 91 49 01 	lds	r30, 0x0149
     9c4:	f0 91 4a 01 	lds	r31, 0x014A
     9c8:	20 89       	ldd	r18, Z+16	; 0x10
     9ca:	31 89       	ldd	r19, Z+17	; 0x11
     9cc:	42 89       	ldd	r20, Z+18	; 0x12
     9ce:	53 89       	ldd	r21, Z+19	; 0x13
}
     9d0:	b9 01       	movw	r22, r18
     9d2:	ca 01       	movw	r24, r20
     9d4:	08 95       	ret

000009d6 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9d6:	e0 91 49 01 	lds	r30, 0x0149
     9da:	f0 91 4a 01 	lds	r31, 0x014A
     9de:	20 85       	ldd	r18, Z+8	; 0x08
     9e0:	31 85       	ldd	r19, Z+9	; 0x09
}
     9e2:	c9 01       	movw	r24, r18
     9e4:	08 95       	ret

000009e6 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9e6:	e0 91 49 01 	lds	r30, 0x0149
     9ea:	f0 91 4a 01 	lds	r31, 0x014A
     9ee:	22 85       	ldd	r18, Z+10	; 0x0a
     9f0:	33 85       	ldd	r19, Z+11	; 0x0b
     9f2:	44 85       	ldd	r20, Z+12	; 0x0c
     9f4:	55 85       	ldd	r21, Z+13	; 0x0d
}
     9f6:	b9 01       	movw	r22, r18
     9f8:	ca 01       	movw	r24, r20
     9fa:	08 95       	ret

000009fc <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     9fc:	e0 91 49 01 	lds	r30, 0x0149
     a00:	f0 91 4a 01 	lds	r31, 0x014A
     a04:	91 87       	std	Z+9, r25	; 0x09
     a06:	80 87       	std	Z+8, r24	; 0x08
}
     a08:	08 95       	ret

00000a0a <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     a0a:	e0 91 49 01 	lds	r30, 0x0149
     a0e:	f0 91 4a 01 	lds	r31, 0x014A
     a12:	62 87       	std	Z+10, r22	; 0x0a
     a14:	73 87       	std	Z+11, r23	; 0x0b
     a16:	84 87       	std	Z+12, r24	; 0x0c
     a18:	95 87       	std	Z+13, r25	; 0x0d
}
     a1a:	08 95       	ret

00000a1c <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     a1c:	e0 91 49 01 	lds	r30, 0x0149
     a20:	f0 91 4a 01 	lds	r31, 0x014A
     a24:	86 85       	ldd	r24, Z+14	; 0x0e
     a26:	97 85       	ldd	r25, Z+15	; 0x0f
     a28:	91 87       	std	Z+9, r25	; 0x09
     a2a:	80 87       	std	Z+8, r24	; 0x08
  Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     a2c:	80 89       	ldd	r24, Z+16	; 0x10
     a2e:	91 89       	ldd	r25, Z+17	; 0x11
     a30:	a2 89       	ldd	r26, Z+18	; 0x12
     a32:	b3 89       	ldd	r27, Z+19	; 0x13
     a34:	82 87       	std	Z+10, r24	; 0x0a
     a36:	93 87       	std	Z+11, r25	; 0x0b
     a38:	a4 87       	std	Z+12, r26	; 0x0c
     a3a:	b5 87       	std	Z+13, r27	; 0x0d
}
     a3c:	08 95       	ret

00000a3e <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     a3e:	6f 92       	push	r6
     a40:	7f 92       	push	r7
     a42:	8f 92       	push	r8
     a44:	9f 92       	push	r9
     a46:	af 92       	push	r10
     a48:	bf 92       	push	r11
     a4a:	cf 92       	push	r12
     a4c:	df 92       	push	r13
     a4e:	ef 92       	push	r14
     a50:	ff 92       	push	r15
     a52:	0f 93       	push	r16
     a54:	1f 93       	push	r17
     a56:	cf 93       	push	r28
     a58:	df 93       	push	r29
     a5a:	5c 01       	movw	r10, r24
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a5c:	c0 91 49 01 	lds	r28, 0x0149
     a60:	d0 91 4a 01 	lds	r29, 0x014A
     a64:	e8 84       	ldd	r14, Y+8	; 0x08
     a66:	f9 84       	ldd	r15, Y+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a68:	2a 85       	ldd	r18, Y+10	; 0x0a
     a6a:	3b 85       	ldd	r19, Y+11	; 0x0b
     a6c:	4c 85       	ldd	r20, Y+12	; 0x0c
     a6e:	5d 85       	ldd	r21, Y+13	; 0x0d
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a70:	69 81       	ldd	r22, Y+1	; 0x01
     a72:	7a 81       	ldd	r23, Y+2	; 0x02
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__mulsi3>
     a7c:	3b 01       	movw	r6, r22
     a7e:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a80:	00 e0       	ldi	r16, 0x00	; 0
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	6e 0c       	add	r6, r14
     a86:	7f 1c       	adc	r7, r15
     a88:	80 1e       	adc	r8, r16
     a8a:	91 1e       	adc	r9, r17
  smpl_val += value;
     a8c:	cc 24       	eor	r12, r12
     a8e:	dd 24       	eor	r13, r13
     a90:	6a 0c       	add	r6, r10
     a92:	7b 1c       	adc	r7, r11
     a94:	8c 1c       	adc	r8, r12
     a96:	9d 1c       	adc	r9, r13
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	12 c0       	rjmp	.+36     	; 0xac6 <Timebase_Timer_Delay_SubSeconds+0x88>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     aa2:	e8 84       	ldd	r14, Y+8	; 0x08
     aa4:	f9 84       	ldd	r15, Y+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     aa6:	2a 85       	ldd	r18, Y+10	; 0x0a
     aa8:	3b 85       	ldd	r19, Y+11	; 0x0b
     aaa:	4c 85       	ldd	r20, Y+12	; 0x0c
     aac:	5d 85       	ldd	r21, Y+13	; 0x0d
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     aae:	69 81       	ldd	r22, Y+1	; 0x01
     ab0:	7a 81       	ldd	r23, Y+2	; 0x02
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__mulsi3>
	curr_val += curr_ss;
     aba:	00 e0       	ldi	r16, 0x00	; 0
     abc:	10 e0       	ldi	r17, 0x00	; 0
     abe:	6e 0d       	add	r22, r14
     ac0:	7f 1d       	adc	r23, r15
     ac2:	80 1f       	adc	r24, r16
     ac4:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     ac6:	66 15       	cp	r22, r6
     ac8:	77 05       	cpc	r23, r7
     aca:	88 05       	cpc	r24, r8
     acc:	99 05       	cpc	r25, r9
     ace:	4c f3       	brlt	.-46     	; 0xaa2 <Timebase_Timer_Delay_SubSeconds+0x64>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
     ad8:	ff 90       	pop	r15
     ada:	ef 90       	pop	r14
     adc:	df 90       	pop	r13
     ade:	cf 90       	pop	r12
     ae0:	bf 90       	pop	r11
     ae2:	af 90       	pop	r10
     ae4:	9f 90       	pop	r9
     ae6:	8f 90       	pop	r8
     ae8:	7f 90       	pop	r7
     aea:	6f 90       	pop	r6
     aec:	08 95       	ret

00000aee <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     aee:	bc 01       	movw	r22, r24
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     af0:	e0 91 49 01 	lds	r30, 0x0149
     af4:	f0 91 4a 01 	lds	r31, 0x014A
     af8:	80 85       	ldd	r24, Z+8	; 0x08
     afa:	91 85       	ldd	r25, Z+9	; 0x09
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     afc:	24 81       	ldd	r18, Z+4	; 0x04
     afe:	35 81       	ldd	r19, Z+5	; 0x05
     b00:	46 81       	ldd	r20, Z+6	; 0x06
     b02:	57 81       	ldd	r21, Z+7	; 0x07
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	82 17       	cp	r24, r18
     b0a:	93 07       	cpc	r25, r19
     b0c:	a4 07       	cpc	r26, r20
     b0e:	b5 07       	cpc	r27, r21
     b10:	99 f7       	brne	.-26     	; 0xaf8 <Timebase_Timer_Await_SubSeconds+0xa>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     b12:	80 85       	ldd	r24, Z+8	; 0x08
     b14:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     b16:	86 0f       	add	r24, r22
     b18:	97 1f       	adc	r25, r23
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	84 83       	std	Z+4, r24	; 0x04
     b20:	95 83       	std	Z+5, r25	; 0x05
     b22:	a6 83       	std	Z+6, r26	; 0x06
     b24:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     b26:	24 81       	ldd	r18, Z+4	; 0x04
     b28:	35 81       	ldd	r19, Z+5	; 0x05
     b2a:	46 81       	ldd	r20, Z+6	; 0x06
     b2c:	57 81       	ldd	r21, Z+7	; 0x07
     b2e:	81 81       	ldd	r24, Z+1	; 0x01
     b30:	92 81       	ldd	r25, Z+2	; 0x02
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	28 17       	cp	r18, r24
     b38:	39 07       	cpc	r19, r25
     b3a:	4a 07       	cpc	r20, r26
     b3c:	5b 07       	cpc	r21, r27
     b3e:	84 f0       	brlt	.+32     	; 0xb60 <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b40:	24 81       	ldd	r18, Z+4	; 0x04
     b42:	35 81       	ldd	r19, Z+5	; 0x05
     b44:	46 81       	ldd	r20, Z+6	; 0x06
     b46:	57 81       	ldd	r21, Z+7	; 0x07
     b48:	81 81       	ldd	r24, Z+1	; 0x01
     b4a:	92 81       	ldd	r25, Z+2	; 0x02
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	28 1b       	sub	r18, r24
     b52:	39 0b       	sbc	r19, r25
     b54:	4a 0b       	sbc	r20, r26
     b56:	5b 0b       	sbc	r21, r27
     b58:	24 83       	std	Z+4, r18	; 0x04
     b5a:	35 83       	std	Z+5, r19	; 0x05
     b5c:	46 83       	std	Z+6, r20	; 0x06
     b5e:	57 83       	std	Z+7, r21	; 0x07
     b60:	08 95       	ret

00000b62 <Timebase_Timer_Delay_Seconds>:
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b62:	e0 91 49 01 	lds	r30, 0x0149
     b66:	f0 91 4a 01 	lds	r31, 0x014A
     b6a:	22 85       	ldd	r18, Z+10	; 0x0a
     b6c:	33 85       	ldd	r19, Z+11	; 0x0b
     b6e:	44 85       	ldd	r20, Z+12	; 0x0c
     b70:	55 85       	ldd	r21, Z+13	; 0x0d


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     b72:	a0 e0       	ldi	r26, 0x00	; 0
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	a4 1f       	adc	r26, r20
     b7c:	b5 1f       	adc	r27, r21
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <Timebase_Timer_Delay_Seconds+0x2e>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b88:	22 85       	ldd	r18, Z+10	; 0x0a
     b8a:	33 85       	ldd	r19, Z+11	; 0x0b
     b8c:	44 85       	ldd	r20, Z+12	; 0x0c
     b8e:	55 85       	ldd	r21, Z+13	; 0x0d

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     b90:	28 17       	cp	r18, r24
     b92:	39 07       	cpc	r19, r25
     b94:	4a 07       	cpc	r20, r26
     b96:	5b 07       	cpc	r21, r27
     b98:	bc f3       	brlt	.-18     	; 0xb88 <Timebase_Timer_Delay_Seconds+0x26>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     b9a:	08 95       	ret

00000b9c <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b9c:	e0 91 49 01 	lds	r30, 0x0149
     ba0:	f0 91 4a 01 	lds	r31, 0x014A
     ba4:	14 8a       	std	Z+20, r1	; 0x14
     ba6:	15 8a       	std	Z+21, r1	; 0x15
     ba8:	16 8a       	std	Z+22, r1	; 0x16
     baa:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.StartTimeSubSeconds = 0;
     bac:	10 8e       	std	Z+24, r1	; 0x18
     bae:	11 8e       	std	Z+25, r1	; 0x19
     bb0:	12 8e       	std	Z+26, r1	; 0x1a
     bb2:	13 8e       	std	Z+27, r1	; 0x1b
  Timebase->Time.Status = COUNTER_STATE_RESET;
     bb4:	14 8e       	std	Z+28, r1	; 0x1c
}
     bb6:	08 95       	ret

00000bb8 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     bb8:	e0 91 49 01 	lds	r30, 0x0149
     bbc:	f0 91 4a 01 	lds	r31, 0x014A
     bc0:	84 8d       	ldd	r24, Z+28	; 0x1c
     bc2:	88 23       	and	r24, r24
     bc4:	91 f4       	brne	.+36     	; 0xbea <Timebase_Window_Timer_Start+0x32>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     bc6:	82 85       	ldd	r24, Z+10	; 0x0a
     bc8:	93 85       	ldd	r25, Z+11	; 0x0b
     bca:	a4 85       	ldd	r26, Z+12	; 0x0c
     bcc:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     bce:	84 8b       	std	Z+20, r24	; 0x14
     bd0:	95 8b       	std	Z+21, r25	; 0x15
     bd2:	a6 8b       	std	Z+22, r26	; 0x16
     bd4:	b7 8b       	std	Z+23, r27	; 0x17
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     bd6:	80 85       	ldd	r24, Z+8	; 0x08
     bd8:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	80 8f       	std	Z+24, r24	; 0x18
     be0:	91 8f       	std	Z+25, r25	; 0x19
     be2:	a2 8f       	std	Z+26, r26	; 0x1a
     be4:	b3 8f       	std	Z+27, r27	; 0x1b
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	84 8f       	std	Z+28, r24	; 0x1c
     bea:	08 95       	ret

00000bec <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bf8:	c0 91 49 01 	lds	r28, 0x0149
     bfc:	d0 91 4a 01 	lds	r29, 0x014A
     c00:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	21 f0       	breq	.+8      	; 0xc0e <Timebase_Window_Timer_Get_Interval+0x22>
     c06:	ee 24       	eor	r14, r14
     c08:	ff 24       	eor	r15, r15
     c0a:	87 01       	movw	r16, r14
     c0c:	23 c0       	rjmp	.+70     	; 0xc54 <Timebase_Window_Timer_Get_Interval+0x68>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c0e:	2a 85       	ldd	r18, Y+10	; 0x0a
     c10:	3b 85       	ldd	r19, Y+11	; 0x0b
     c12:	4c 85       	ldd	r20, Y+12	; 0x0c
     c14:	5d 85       	ldd	r21, Y+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c16:	88 85       	ldd	r24, Y+8	; 0x08
     c18:	99 85       	ldd	r25, Y+9	; 0x09

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     c1a:	7c 01       	movw	r14, r24
     c1c:	00 e0       	ldi	r16, 0x00	; 0
     c1e:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     c20:	8c 89       	ldd	r24, Y+20	; 0x14
     c22:	9d 89       	ldd	r25, Y+21	; 0x15
     c24:	ae 89       	ldd	r26, Y+22	; 0x16
     c26:	bf 89       	ldd	r27, Y+23	; 0x17
     c28:	28 1b       	sub	r18, r24
     c2a:	39 0b       	sbc	r19, r25
     c2c:	4a 0b       	sbc	r20, r26
     c2e:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c30:	69 81       	ldd	r22, Y+1	; 0x01
     c32:	7a 81       	ldd	r23, Y+2	; 0x02
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__mulsi3>
	curr_s += curr_ss;
     c3c:	28 8d       	ldd	r18, Y+24	; 0x18
     c3e:	39 8d       	ldd	r19, Y+25	; 0x19
     c40:	4a 8d       	ldd	r20, Y+26	; 0x1a
     c42:	5b 8d       	ldd	r21, Y+27	; 0x1b
     c44:	e2 1a       	sub	r14, r18
     c46:	f3 0a       	sbc	r15, r19
     c48:	04 0b       	sbc	r16, r20
     c4a:	15 0b       	sbc	r17, r21
     c4c:	e6 0e       	add	r14, r22
     c4e:	f7 1e       	adc	r15, r23
     c50:	08 1f       	adc	r16, r24
     c52:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     c54:	b7 01       	movw	r22, r14
     c56:	c8 01       	movw	r24, r16
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	08 95       	ret

00000c66 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     c66:	0e 94 f6 05 	call	0xbec	; 0xbec <Timebase_Window_Timer_Get_Interval>
     c6a:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c6c:	e0 91 49 01 	lds	r30, 0x0149
     c70:	f0 91 4a 01 	lds	r31, 0x014A
     c74:	84 8d       	ldd	r24, Z+28	; 0x1c
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	49 f4       	brne	.+18     	; 0xc8c <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c7a:	14 8a       	std	Z+20, r1	; 0x14
     c7c:	15 8a       	std	Z+21, r1	; 0x15
     c7e:	16 8a       	std	Z+22, r1	; 0x16
     c80:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.StartTimeSubSeconds = 0;
     c82:	10 8e       	std	Z+24, r1	; 0x18
     c84:	11 8e       	std	Z+25, r1	; 0x19
     c86:	12 8e       	std	Z+26, r1	; 0x1a
     c88:	13 8e       	std	Z+27, r1	; 0x1b
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c8a:	14 8e       	std	Z+28, r1	; 0x1c
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     c8c:	82 2f       	mov	r24, r18
     c8e:	08 95       	ret

00000c90 <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     c90:	e0 91 49 01 	lds	r30, 0x0149
     c94:	f0 91 4a 01 	lds	r31, 0x014A
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	29 e1       	ldi	r18, 0x19	; 25
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	ac 01       	movw	r20, r24
     ca0:	42 9f       	mul	r20, r18
     ca2:	c0 01       	movw	r24, r0
     ca4:	43 9f       	mul	r20, r19
     ca6:	90 0d       	add	r25, r0
     ca8:	52 9f       	mul	r21, r18
     caa:	90 0d       	add	r25, r0
     cac:	11 24       	eor	r1, r1
     cae:	e8 0f       	add	r30, r24
     cb0:	f9 1f       	adc	r31, r25
     cb2:	87 8d       	ldd	r24, Z+31	; 0x1f
     cb4:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     cb6:	8f 70       	andi	r24, 0x0F	; 15
     cb8:	08 95       	ret

00000cba <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     cba:	e0 91 49 01 	lds	r30, 0x0149
     cbe:	f0 91 4a 01 	lds	r31, 0x014A
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	29 e1       	ldi	r18, 0x19	; 25
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	ac 01       	movw	r20, r24
     cca:	42 9f       	mul	r20, r18
     ccc:	c0 01       	movw	r24, r0
     cce:	43 9f       	mul	r20, r19
     cd0:	90 0d       	add	r25, r0
     cd2:	52 9f       	mul	r21, r18
     cd4:	90 0d       	add	r25, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	6f 70       	andi	r22, 0x0F	; 15
     cde:	66 0f       	add	r22, r22
     ce0:	87 8d       	ldd	r24, Z+31	; 0x1f
     ce2:	81 7e       	andi	r24, 0xE1	; 225
     ce4:	86 2b       	or	r24, r22
     ce6:	87 8f       	std	Z+31, r24	; 0x1f
}
     ce8:	08 95       	ret

00000cea <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     cea:	e0 91 49 01 	lds	r30, 0x0149
     cee:	f0 91 4a 01 	lds	r31, 0x014A
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	29 e1       	ldi	r18, 0x19	; 25
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	ac 01       	movw	r20, r24
     cfa:	42 9f       	mul	r20, r18
     cfc:	c0 01       	movw	r24, r0
     cfe:	43 9f       	mul	r20, r19
     d00:	90 0d       	add	r25, r0
     d02:	52 9f       	mul	r21, r18
     d04:	90 0d       	add	r25, r0
     d06:	11 24       	eor	r1, r1
     d08:	e8 0f       	add	r30, r24
     d0a:	f9 1f       	adc	r31, r25
     d0c:	df 01       	movw	r26, r30
     d0e:	d0 96       	adiw	r26, 0x30	; 48
     d10:	60 a9       	ldd	r22, Z+48	; 0x30
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	7c 91       	ld	r23, X
     d16:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     d18:	12 96       	adiw	r26, 0x02	; 2
     d1a:	8c 91       	ld	r24, X
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	9c 91       	ld	r25, X
     d22:	08 95       	ret

00000d24 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     d24:	e0 91 49 01 	lds	r30, 0x0149
     d28:	f0 91 4a 01 	lds	r31, 0x014A
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	29 e1       	ldi	r18, 0x19	; 25
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	dc 01       	movw	r26, r24
     d34:	a2 9f       	mul	r26, r18
     d36:	c0 01       	movw	r24, r0
     d38:	a3 9f       	mul	r26, r19
     d3a:	90 0d       	add	r25, r0
     d3c:	b2 9f       	mul	r27, r18
     d3e:	90 0d       	add	r25, r0
     d40:	11 24       	eor	r1, r1
     d42:	e8 0f       	add	r30, r24
     d44:	f9 1f       	adc	r31, r25
     d46:	40 ab       	std	Z+48, r20	; 0x30
     d48:	51 ab       	std	Z+49, r21	; 0x31
     d4a:	62 ab       	std	Z+50, r22	; 0x32
     d4c:	73 ab       	std	Z+51, r23	; 0x33
}
     d4e:	08 95       	ret

00000d50 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     d50:	e0 91 49 01 	lds	r30, 0x0149
     d54:	f0 91 4a 01 	lds	r31, 0x014A
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	29 e1       	ldi	r18, 0x19	; 25
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	ac 01       	movw	r20, r24
     d60:	42 9f       	mul	r20, r18
     d62:	c0 01       	movw	r24, r0
     d64:	43 9f       	mul	r20, r19
     d66:	90 0d       	add	r25, r0
     d68:	52 9f       	mul	r21, r18
     d6a:	90 0d       	add	r25, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	e8 0f       	add	r30, r24
     d70:	f9 1f       	adc	r31, r25
     d72:	df 01       	movw	r26, r30
     d74:	90 96       	adiw	r26, 0x20	; 32
     d76:	60 a1       	ldd	r22, Z+32	; 0x20
     d78:	11 96       	adiw	r26, 0x01	; 1
     d7a:	7c 91       	ld	r23, X
     d7c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     d7e:	12 96       	adiw	r26, 0x02	; 2
     d80:	8c 91       	ld	r24, X
     d82:	12 97       	sbiw	r26, 0x02	; 2
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	9c 91       	ld	r25, X
     d88:	08 95       	ret

00000d8a <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     d8a:	e0 91 49 01 	lds	r30, 0x0149
     d8e:	f0 91 4a 01 	lds	r31, 0x014A
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	29 e1       	ldi	r18, 0x19	; 25
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	ac 01       	movw	r20, r24
     d9a:	42 9f       	mul	r20, r18
     d9c:	c0 01       	movw	r24, r0
     d9e:	43 9f       	mul	r20, r19
     da0:	90 0d       	add	r25, r0
     da2:	52 9f       	mul	r21, r18
     da4:	90 0d       	add	r25, r0
     da6:	11 24       	eor	r1, r1
     da8:	e8 0f       	add	r30, r24
     daa:	f9 1f       	adc	r31, r25
     dac:	df 01       	movw	r26, r30
     dae:	94 96       	adiw	r26, 0x24	; 36
     db0:	64 a1       	ldd	r22, Z+36	; 0x24
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	7c 91       	ld	r23, X
     db6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     db8:	12 96       	adiw	r26, 0x02	; 2
     dba:	8c 91       	ld	r24, X
     dbc:	12 97       	sbiw	r26, 0x02	; 2
     dbe:	13 96       	adiw	r26, 0x03	; 3
     dc0:	9c 91       	ld	r25, X
     dc2:	08 95       	ret

00000dc4 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     dc4:	e0 91 49 01 	lds	r30, 0x0149
     dc8:	f0 91 4a 01 	lds	r31, 0x014A
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	29 e1       	ldi	r18, 0x19	; 25
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	dc 01       	movw	r26, r24
     dd4:	a2 9f       	mul	r26, r18
     dd6:	c0 01       	movw	r24, r0
     dd8:	a3 9f       	mul	r26, r19
     dda:	90 0d       	add	r25, r0
     ddc:	b2 9f       	mul	r27, r18
     dde:	90 0d       	add	r25, r0
     de0:	11 24       	eor	r1, r1
     de2:	e8 0f       	add	r30, r24
     de4:	f9 1f       	adc	r31, r25
     de6:	40 a3       	std	Z+32, r20	; 0x20
     de8:	51 a3       	std	Z+33, r21	; 0x21
     dea:	62 a3       	std	Z+34, r22	; 0x22
     dec:	73 a3       	std	Z+35, r23	; 0x23
}
     dee:	08 95       	ret

00000df0 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     df0:	e0 91 49 01 	lds	r30, 0x0149
     df4:	f0 91 4a 01 	lds	r31, 0x014A
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	29 e1       	ldi	r18, 0x19	; 25
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	dc 01       	movw	r26, r24
     e00:	a2 9f       	mul	r26, r18
     e02:	c0 01       	movw	r24, r0
     e04:	a3 9f       	mul	r26, r19
     e06:	90 0d       	add	r25, r0
     e08:	b2 9f       	mul	r27, r18
     e0a:	90 0d       	add	r25, r0
     e0c:	11 24       	eor	r1, r1
     e0e:	e8 0f       	add	r30, r24
     e10:	f9 1f       	adc	r31, r25
     e12:	44 a3       	std	Z+36, r20	; 0x24
     e14:	55 a3       	std	Z+37, r21	; 0x25
     e16:	66 a3       	std	Z+38, r22	; 0x26
     e18:	77 a3       	std	Z+39, r23	; 0x27
}
     e1a:	08 95       	ret

00000e1c <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     e1c:	e0 91 49 01 	lds	r30, 0x0149
     e20:	f0 91 4a 01 	lds	r31, 0x014A
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	29 e1       	ldi	r18, 0x19	; 25
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	ac 01       	movw	r20, r24
     e2c:	42 9f       	mul	r20, r18
     e2e:	c0 01       	movw	r24, r0
     e30:	43 9f       	mul	r20, r19
     e32:	90 0d       	add	r25, r0
     e34:	52 9f       	mul	r21, r18
     e36:	90 0d       	add	r25, r0
     e38:	11 24       	eor	r1, r1
     e3a:	e8 0f       	add	r30, r24
     e3c:	f9 1f       	adc	r31, r25
     e3e:	df 01       	movw	r26, r30
     e40:	98 96       	adiw	r26, 0x28	; 40
     e42:	60 a5       	ldd	r22, Z+40	; 0x28
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	7c 91       	ld	r23, X
     e48:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     e4a:	12 96       	adiw	r26, 0x02	; 2
     e4c:	8c 91       	ld	r24, X
     e4e:	12 97       	sbiw	r26, 0x02	; 2
     e50:	13 96       	adiw	r26, 0x03	; 3
     e52:	9c 91       	ld	r25, X
     e54:	08 95       	ret

00000e56 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     e56:	e0 91 49 01 	lds	r30, 0x0149
     e5a:	f0 91 4a 01 	lds	r31, 0x014A
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	29 e1       	ldi	r18, 0x19	; 25
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	dc 01       	movw	r26, r24
     e66:	a2 9f       	mul	r26, r18
     e68:	c0 01       	movw	r24, r0
     e6a:	a3 9f       	mul	r26, r19
     e6c:	90 0d       	add	r25, r0
     e6e:	b2 9f       	mul	r27, r18
     e70:	90 0d       	add	r25, r0
     e72:	11 24       	eor	r1, r1
     e74:	e8 0f       	add	r30, r24
     e76:	f9 1f       	adc	r31, r25
     e78:	40 a7       	std	Z+40, r20	; 0x28
     e7a:	51 a7       	std	Z+41, r21	; 0x29
     e7c:	62 a7       	std	Z+42, r22	; 0x2a
     e7e:	73 a7       	std	Z+43, r23	; 0x2b
}
     e80:	08 95       	ret

00000e82 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     e82:	e0 91 49 01 	lds	r30, 0x0149
     e86:	f0 91 4a 01 	lds	r31, 0x014A
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	29 e1       	ldi	r18, 0x19	; 25
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	ac 01       	movw	r20, r24
     e92:	42 9f       	mul	r20, r18
     e94:	c0 01       	movw	r24, r0
     e96:	43 9f       	mul	r20, r19
     e98:	90 0d       	add	r25, r0
     e9a:	52 9f       	mul	r21, r18
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	e8 0f       	add	r30, r24
     ea2:	f9 1f       	adc	r31, r25
     ea4:	df 01       	movw	r26, r30
     ea6:	9c 96       	adiw	r26, 0x2c	; 44
     ea8:	64 a5       	ldd	r22, Z+44	; 0x2c
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	7c 91       	ld	r23, X
     eae:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8c 91       	ld	r24, X
     eb4:	12 97       	sbiw	r26, 0x02	; 2
     eb6:	13 96       	adiw	r26, 0x03	; 3
     eb8:	9c 91       	ld	r25, X
     eba:	08 95       	ret

00000ebc <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
     ebc:	e0 91 49 01 	lds	r30, 0x0149
     ec0:	f0 91 4a 01 	lds	r31, 0x014A
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	29 e1       	ldi	r18, 0x19	; 25
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	dc 01       	movw	r26, r24
     ecc:	a2 9f       	mul	r26, r18
     ece:	c0 01       	movw	r24, r0
     ed0:	a3 9f       	mul	r26, r19
     ed2:	90 0d       	add	r25, r0
     ed4:	b2 9f       	mul	r27, r18
     ed6:	90 0d       	add	r25, r0
     ed8:	11 24       	eor	r1, r1
     eda:	e8 0f       	add	r30, r24
     edc:	f9 1f       	adc	r31, r25
     ede:	44 a7       	std	Z+44, r20	; 0x2c
     ee0:	55 a7       	std	Z+45, r21	; 0x2d
     ee2:	66 a7       	std	Z+46, r22	; 0x2e
     ee4:	77 a7       	std	Z+47, r23	; 0x2f
}
     ee6:	08 95       	ret

00000ee8 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     ee8:	e0 91 49 01 	lds	r30, 0x0149
     eec:	f0 91 4a 01 	lds	r31, 0x014A
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	29 e1       	ldi	r18, 0x19	; 25
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	ac 01       	movw	r20, r24
     ef8:	42 9f       	mul	r20, r18
     efa:	c0 01       	movw	r24, r0
     efc:	43 9f       	mul	r20, r19
     efe:	90 0d       	add	r25, r0
     f00:	52 9f       	mul	r21, r18
     f02:	90 0d       	add	r25, r0
     f04:	11 24       	eor	r1, r1
     f06:	e8 0f       	add	r30, r24
     f08:	f9 1f       	adc	r31, r25
     f0a:	df 01       	movw	r26, r30
     f0c:	d4 96       	adiw	r26, 0x34	; 52
     f0e:	64 a9       	ldd	r22, Z+52	; 0x34
     f10:	11 96       	adiw	r26, 0x01	; 1
     f12:	7c 91       	ld	r23, X
     f14:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     f16:	12 96       	adiw	r26, 0x02	; 2
     f18:	8c 91       	ld	r24, X
     f1a:	12 97       	sbiw	r26, 0x02	; 2
     f1c:	13 96       	adiw	r26, 0x03	; 3
     f1e:	9c 91       	ld	r25, X
     f20:	08 95       	ret

00000f22 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     f22:	e0 91 49 01 	lds	r30, 0x0149
     f26:	f0 91 4a 01 	lds	r31, 0x014A
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	29 e1       	ldi	r18, 0x19	; 25
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	dc 01       	movw	r26, r24
     f32:	a2 9f       	mul	r26, r18
     f34:	c0 01       	movw	r24, r0
     f36:	a3 9f       	mul	r26, r19
     f38:	90 0d       	add	r25, r0
     f3a:	b2 9f       	mul	r27, r18
     f3c:	90 0d       	add	r25, r0
     f3e:	11 24       	eor	r1, r1
     f40:	e8 0f       	add	r30, r24
     f42:	f9 1f       	adc	r31, r25
     f44:	44 ab       	std	Z+52, r20	; 0x34
     f46:	55 ab       	std	Z+53, r21	; 0x35
     f48:	66 ab       	std	Z+54, r22	; 0x36
     f4a:	77 ab       	std	Z+55, r23	; 0x37
}
     f4c:	08 95       	ret

00000f4e <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     f4e:	e0 91 49 01 	lds	r30, 0x0149
     f52:	f0 91 4a 01 	lds	r31, 0x014A
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	29 e1       	ldi	r18, 0x19	; 25
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	ac 01       	movw	r20, r24
     f5e:	42 9f       	mul	r20, r18
     f60:	c0 01       	movw	r24, r0
     f62:	43 9f       	mul	r20, r19
     f64:	90 0d       	add	r25, r0
     f66:	52 9f       	mul	r21, r18
     f68:	90 0d       	add	r25, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	e8 0f       	add	r30, r24
     f6e:	f9 1f       	adc	r31, r25
     f70:	87 8d       	ldd	r24, Z+31	; 0x1f
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     f72:	81 70       	andi	r24, 0x01	; 1
     f74:	08 95       	ret

00000f76 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     f76:	e0 91 49 01 	lds	r30, 0x0149
     f7a:	f0 91 4a 01 	lds	r31, 0x014A
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	29 e1       	ldi	r18, 0x19	; 25
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	ac 01       	movw	r20, r24
     f86:	42 9f       	mul	r20, r18
     f88:	c0 01       	movw	r24, r0
     f8a:	43 9f       	mul	r20, r19
     f8c:	90 0d       	add	r25, r0
     f8e:	52 9f       	mul	r21, r18
     f90:	90 0d       	add	r25, r0
     f92:	11 24       	eor	r1, r1
     f94:	e8 0f       	add	r30, r24
     f96:	f9 1f       	adc	r31, r25
     f98:	87 8d       	ldd	r24, Z+31	; 0x1f
     f9a:	81 60       	ori	r24, 0x01	; 1
     f9c:	87 8f       	std	Z+31, r24	; 0x1f
}
     f9e:	08 95       	ret

00000fa0 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     fa0:	e0 91 49 01 	lds	r30, 0x0149
     fa4:	f0 91 4a 01 	lds	r31, 0x014A
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	29 e1       	ldi	r18, 0x19	; 25
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	ac 01       	movw	r20, r24
     fb0:	42 9f       	mul	r20, r18
     fb2:	c0 01       	movw	r24, r0
     fb4:	43 9f       	mul	r20, r19
     fb6:	90 0d       	add	r25, r0
     fb8:	52 9f       	mul	r21, r18
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	e8 0f       	add	r30, r24
     fc0:	f9 1f       	adc	r31, r25
     fc2:	87 8d       	ldd	r24, Z+31	; 0x1f
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	87 8f       	std	Z+31, r24	; 0x1f
}
     fc8:	08 95       	ret

00000fca <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     fca:	e0 91 49 01 	lds	r30, 0x0149
     fce:	f0 91 4a 01 	lds	r31, 0x014A
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	29 e1       	ldi	r18, 0x19	; 25
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	ac 01       	movw	r20, r24
     fda:	42 9f       	mul	r20, r18
     fdc:	c0 01       	movw	r24, r0
     fde:	43 9f       	mul	r20, r19
     fe0:	90 0d       	add	r25, r0
     fe2:	52 9f       	mul	r21, r18
     fe4:	90 0d       	add	r25, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	e8 0f       	add	r30, r24
     fea:	f9 1f       	adc	r31, r25
     fec:	87 8d       	ldd	r24, Z+31	; 0x1f
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     fee:	10 aa       	std	Z+48, r1	; 0x30
     ff0:	11 aa       	std	Z+49, r1	; 0x31
     ff2:	12 aa       	std	Z+50, r1	; 0x32
     ff4:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     ff6:	10 a2       	std	Z+32, r1	; 0x20
     ff8:	11 a2       	std	Z+33, r1	; 0x21
     ffa:	12 a2       	std	Z+34, r1	; 0x22
     ffc:	13 a2       	std	Z+35, r1	; 0x23
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     ffe:	14 a2       	std	Z+36, r1	; 0x24
    1000:	15 a2       	std	Z+37, r1	; 0x25
    1002:	16 a2       	std	Z+38, r1	; 0x26
    1004:	17 a2       	std	Z+39, r1	; 0x27
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    1006:	10 a6       	std	Z+40, r1	; 0x28
    1008:	11 a6       	std	Z+41, r1	; 0x29
    100a:	12 a6       	std	Z+42, r1	; 0x2a
    100c:	13 a6       	std	Z+43, r1	; 0x2b
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    100e:	14 a6       	std	Z+44, r1	; 0x2c
    1010:	15 a6       	std	Z+45, r1	; 0x2d
    1012:	16 a6       	std	Z+46, r1	; 0x2e
    1014:	17 a6       	std	Z+47, r1	; 0x2f
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1016:	14 aa       	std	Z+52, r1	; 0x34
    1018:	15 aa       	std	Z+53, r1	; 0x35
    101a:	16 aa       	std	Z+54, r1	; 0x36
    101c:	17 aa       	std	Z+55, r1	; 0x37
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    101e:	80 7e       	andi	r24, 0xE0	; 224
    1020:	87 8f       	std	Z+31, r24	; 0x1f
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
    1022:	08 95       	ret

00001024 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1024:	0e 94 e5 07 	call	0xfca	; 0xfca <Timebase_UpCounter_SS_Reset>
}
    1028:	08 95       	ret

0000102a <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    102a:	e0 91 49 01 	lds	r30, 0x0149
    102e:	f0 91 4a 01 	lds	r31, 0x014A
    1032:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1034:	29 e1       	ldi	r18, 0x19	; 25
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	ac 01       	movw	r20, r24
    103a:	42 9f       	mul	r20, r18
    103c:	c0 01       	movw	r24, r0
    103e:	43 9f       	mul	r20, r19
    1040:	90 0d       	add	r25, r0
    1042:	52 9f       	mul	r21, r18
    1044:	90 0d       	add	r25, r0
    1046:	11 24       	eor	r1, r1
    1048:	e8 0f       	add	r30, r24
    104a:	f9 1f       	adc	r31, r25
    104c:	97 8d       	ldd	r25, Z+31	; 0x1f
    104e:	89 2f       	mov	r24, r25
    1050:	86 95       	lsr	r24
    1052:	8f 70       	andi	r24, 0x0F	; 15
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	19 f0       	breq	.+6      	; 0x105e <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1058:	91 7e       	andi	r25, 0xE1	; 225
    105a:	92 60       	ori	r25, 0x02	; 2
    105c:	97 8f       	std	Z+31, r25	; 0x1f
    105e:	08 95       	ret

00001060 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1060:	e0 91 49 01 	lds	r30, 0x0149
    1064:	f0 91 4a 01 	lds	r31, 0x014A
    1068:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    106a:	29 e1       	ldi	r18, 0x19	; 25
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	ac 01       	movw	r20, r24
    1070:	42 9f       	mul	r20, r18
    1072:	c0 01       	movw	r24, r0
    1074:	43 9f       	mul	r20, r19
    1076:	90 0d       	add	r25, r0
    1078:	52 9f       	mul	r21, r18
    107a:	90 0d       	add	r25, r0
    107c:	11 24       	eor	r1, r1
    107e:	e8 0f       	add	r30, r24
    1080:	f9 1f       	adc	r31, r25
    1082:	97 8d       	ldd	r25, Z+31	; 0x1f
    1084:	89 2f       	mov	r24, r25
    1086:	86 95       	lsr	r24
    1088:	8f 70       	andi	r24, 0x0F	; 15
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	19 f0       	breq	.+6      	; 0x1094 <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    108e:	91 7e       	andi	r25, 0xE1	; 225
    1090:	94 60       	ori	r25, 0x04	; 4
    1092:	97 8f       	std	Z+31, r25	; 0x1f
    1094:	08 95       	ret

00001096 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1096:	2f 92       	push	r2
    1098:	3f 92       	push	r3
    109a:	4f 92       	push	r4
    109c:	5f 92       	push	r5
    109e:	6f 92       	push	r6
    10a0:	7f 92       	push	r7
    10a2:	8f 92       	push	r8
    10a4:	9f 92       	push	r9
    10a6:	af 92       	push	r10
    10a8:	bf 92       	push	r11
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <Timebase_UpCounter_SS_Set_Securely+0x26>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <Timebase_UpCounter_SS_Set_Securely+0x28>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	4a 01       	movw	r8, r20
    10c4:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10c6:	20 91 49 01 	lds	r18, 0x0149
    10ca:	30 91 4a 01 	lds	r19, 0x014A
    10ce:	3c 83       	std	Y+4, r19	; 0x04
    10d0:	2b 83       	std	Y+3, r18	; 0x03
    10d2:	a8 2f       	mov	r26, r24
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	ba 83       	std	Y+2, r27	; 0x02
    10d8:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    10da:	89 e1       	ldi	r24, 0x19	; 25
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	a8 9f       	mul	r26, r24
    10e0:	f0 01       	movw	r30, r0
    10e2:	a9 9f       	mul	r26, r25
    10e4:	f0 0d       	add	r31, r0
    10e6:	b8 9f       	mul	r27, r24
    10e8:	f0 0d       	add	r31, r0
    10ea:	11 24       	eor	r1, r1
    10ec:	e2 0f       	add	r30, r18
    10ee:	f3 1f       	adc	r31, r19
    10f0:	87 8d       	ldd	r24, Z+31	; 0x1f
    10f2:	86 95       	lsr	r24
    10f4:	8f 70       	andi	r24, 0x0F	; 15
    10f6:	09 f0       	breq	.+2      	; 0x10fa <Timebase_UpCounter_SS_Set_Securely+0x64>
    10f8:	75 c0       	rjmp	.+234    	; 0x11e4 <Timebase_UpCounter_SS_Set_Securely+0x14e>
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    10fa:	10 aa       	std	Z+48, r1	; 0x30
    10fc:	11 aa       	std	Z+49, r1	; 0x31
    10fe:	12 aa       	std	Z+50, r1	; 0x32
    1100:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    1102:	14 a6       	std	Z+44, r1	; 0x2c
    1104:	15 a6       	std	Z+45, r1	; 0x2d
    1106:	16 a6       	std	Z+46, r1	; 0x2e
    1108:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    110a:	f9 01       	movw	r30, r18
    110c:	82 85       	ldd	r24, Z+10	; 0x0a
    110e:	93 85       	ldd	r25, Z+11	; 0x0b
    1110:	a4 85       	ldd	r26, Z+12	; 0x0c
    1112:	b5 85       	ldd	r27, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1114:	c0 84       	ldd	r12, Z+8	; 0x08
    1116:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1118:	22 84       	ldd	r2, Z+10	; 0x0a
    111a:	33 84       	ldd	r3, Z+11	; 0x0b
    111c:	44 84       	ldd	r4, Z+12	; 0x0c
    111e:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    //Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1120:	21 81       	ldd	r18, Z+1	; 0x01
    1122:	32 81       	ldd	r19, Z+2	; 0x02
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	c5 01       	movw	r24, r10
    112a:	b4 01       	movw	r22, r8
    112c:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    1130:	7b 01       	movw	r14, r22
    1132:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1134:	ab 81       	ldd	r26, Y+3	; 0x03
    1136:	bc 81       	ldd	r27, Y+4	; 0x04
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	2d 91       	ld	r18, X+
    113c:	3c 91       	ld	r19, X
    113e:	12 97       	sbiw	r26, 0x02	; 2
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	c5 01       	movw	r24, r10
    1146:	b4 01       	movw	r22, r8
    1148:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    114c:	c9 01       	movw	r24, r18
    114e:	da 01       	movw	r26, r20
    1150:	3c 01       	movw	r6, r24
    1152:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1154:	56 01       	movw	r10, r12
    1156:	cc 24       	eor	r12, r12
    1158:	dd 24       	eor	r13, r13
    115a:	ae 0c       	add	r10, r14
    115c:	bf 1c       	adc	r11, r15
    115e:	c0 1e       	adc	r12, r16
    1160:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1162:	eb 81       	ldd	r30, Y+3	; 0x03
    1164:	fc 81       	ldd	r31, Y+4	; 0x04
    1166:	81 81       	ldd	r24, Z+1	; 0x01
    1168:	92 81       	ldd	r25, Z+2	; 0x02
    116a:	a0 e0       	ldi	r26, 0x00	; 0
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	a8 16       	cp	r10, r24
    1170:	b9 06       	cpc	r11, r25
    1172:	ca 06       	cpc	r12, r26
    1174:	db 06       	cpc	r13, r27
    1176:	94 f0       	brlt	.+36     	; 0x119c <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
    1178:	08 94       	sec
    117a:	61 1c       	adc	r6, r1
    117c:	71 1c       	adc	r7, r1
    117e:	81 1c       	adc	r8, r1
    1180:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1182:	21 81       	ldd	r18, Z+1	; 0x01
    1184:	32 81       	ldd	r19, Z+2	; 0x02
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	c6 01       	movw	r24, r12
    118c:	b5 01       	movw	r22, r10
    118e:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    1192:	ac 01       	movw	r20, r24
    1194:	cb 01       	movw	r24, r22
    1196:	da 01       	movw	r26, r20
    1198:	5c 01       	movw	r10, r24
    119a:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    119c:	89 e1       	ldi	r24, 0x19	; 25
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	29 81       	ldd	r18, Y+1	; 0x01
    11a2:	3a 81       	ldd	r19, Y+2	; 0x02
    11a4:	28 9f       	mul	r18, r24
    11a6:	f0 01       	movw	r30, r0
    11a8:	29 9f       	mul	r18, r25
    11aa:	f0 0d       	add	r31, r0
    11ac:	38 9f       	mul	r19, r24
    11ae:	f0 0d       	add	r31, r0
    11b0:	11 24       	eor	r1, r1
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	9c 81       	ldd	r25, Y+4	; 0x04
    11b6:	e8 0f       	add	r30, r24
    11b8:	f9 1f       	adc	r31, r25
    11ba:	26 0c       	add	r2, r6
    11bc:	37 1c       	adc	r3, r7
    11be:	48 1c       	adc	r4, r8
    11c0:	59 1c       	adc	r5, r9
    11c2:	20 a2       	std	Z+32, r2	; 0x20
    11c4:	31 a2       	std	Z+33, r3	; 0x21
    11c6:	42 a2       	std	Z+34, r4	; 0x22
    11c8:	53 a2       	std	Z+35, r5	; 0x23
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    11ca:	a4 a2       	std	Z+36, r10	; 0x24
    11cc:	b5 a2       	std	Z+37, r11	; 0x25
    11ce:	c6 a2       	std	Z+38, r12	; 0x26
    11d0:	d7 a2       	std	Z+39, r13	; 0x27
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    11d2:	97 8d       	ldd	r25, Z+31	; 0x1f
    11d4:	89 2f       	mov	r24, r25
    11d6:	86 95       	lsr	r24
    11d8:	8f 70       	andi	r24, 0x0F	; 15
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	19 f0       	breq	.+6      	; 0x11e4 <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    11de:	91 7e       	andi	r25, 0xE1	; 225
    11e0:	92 60       	ori	r25, 0x02	; 2
    11e2:	97 8f       	std	Z+31, r25	; 0x1f
	sec_val += temp_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	7f 90       	pop	r7
    1206:	6f 90       	pop	r6
    1208:	5f 90       	pop	r5
    120a:	4f 90       	pop	r4
    120c:	3f 90       	pop	r3
    120e:	2f 90       	pop	r2
    1210:	08 95       	ret

00001212 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	d8 2e       	mov	r13, r24
    121e:	7a 01       	movw	r14, r20
    1220:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    1222:	0e 94 e5 07 	call	0xfca	; 0xfca <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    1226:	8d 2d       	mov	r24, r13
    1228:	b8 01       	movw	r22, r16
    122a:	a7 01       	movw	r20, r14
    122c:	0e 94 4b 08 	call	0x1096	; 0x1096 <Timebase_UpCounter_SS_Set_Securely>
} 
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	08 95       	ret

0000123c <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    123c:	ef 92       	push	r14
    123e:	ff 92       	push	r15
    1240:	0f 93       	push	r16
    1242:	1f 93       	push	r17

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1244:	a0 91 49 01 	lds	r26, 0x0149
    1248:	b0 91 4a 01 	lds	r27, 0x014A
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	29 e1       	ldi	r18, 0x19	; 25
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	82 9f       	mul	r24, r18
    1254:	f0 01       	movw	r30, r0
    1256:	83 9f       	mul	r24, r19
    1258:	f0 0d       	add	r31, r0
    125a:	92 9f       	mul	r25, r18
    125c:	f0 0d       	add	r31, r0
    125e:	11 24       	eor	r1, r1
    1260:	ea 0f       	add	r30, r26
    1262:	fb 1f       	adc	r31, r27
    1264:	87 8d       	ldd	r24, Z+31	; 0x1f
    1266:	86 95       	lsr	r24
    1268:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	51 f5       	brne	.+84     	; 0x12c2 <Timebase_UpCounter_SS_Update+0x86>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    126e:	1a 96       	adiw	r26, 0x0a	; 10
    1270:	8d 91       	ld	r24, X+
    1272:	9d 91       	ld	r25, X+
    1274:	0d 90       	ld	r0, X+
    1276:	bc 91       	ld	r27, X
    1278:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    127a:	e0 a4       	ldd	r14, Z+40	; 0x28
    127c:	f1 a4       	ldd	r15, Z+41	; 0x29
    127e:	02 a5       	ldd	r16, Z+42	; 0x2a
    1280:	13 a5       	ldd	r17, Z+43	; 0x2b
    1282:	24 a5       	ldd	r18, Z+44	; 0x2c
    1284:	35 a5       	ldd	r19, Z+45	; 0x2d
    1286:	46 a5       	ldd	r20, Z+46	; 0x2e
    1288:	57 a5       	ldd	r21, Z+47	; 0x2f
    128a:	d8 01       	movw	r26, r16
    128c:	c7 01       	movw	r24, r14
    128e:	82 1b       	sub	r24, r18
    1290:	93 0b       	sbc	r25, r19
    1292:	a4 0b       	sbc	r26, r20
    1294:	b5 0b       	sbc	r27, r21
    1296:	80 ab       	std	Z+48, r24	; 0x30
    1298:	91 ab       	std	Z+49, r25	; 0x31
    129a:	a2 ab       	std	Z+50, r26	; 0x32
    129c:	b3 ab       	std	Z+51, r27	; 0x33
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_TemporaryValue(window, Timebase_UpCounter_SS_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	14 06       	cpc	r1, r20
    12a4:	15 06       	cpc	r1, r21
    12a6:	2c f1       	brlt	.+74     	; 0x12f2 <Timebase_UpCounter_SS_Update+0xb6>
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    12a8:	14 a6       	std	Z+44, r1	; 0x2c
    12aa:	15 a6       	std	Z+45, r1	; 0x2d
    12ac:	16 a6       	std	Z+46, r1	; 0x2e
    12ae:	17 a6       	std	Z+47, r1	; 0x2f
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    12b0:	e0 aa       	std	Z+48, r14	; 0x30
    12b2:	f1 aa       	std	Z+49, r15	; 0x31
    12b4:	02 ab       	std	Z+50, r16	; 0x32
    12b6:	13 ab       	std	Z+51, r17	; 0x33
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    12b8:	87 8d       	ldd	r24, Z+31	; 0x1f
    12ba:	81 7e       	andi	r24, 0xE1	; 225
    12bc:	88 60       	ori	r24, 0x08	; 8
    12be:	87 8f       	std	Z+31, r24	; 0x1f
    12c0:	18 c0       	rjmp	.+48     	; 0x12f2 <Timebase_UpCounter_SS_Update+0xb6>
      //Timebase_UpCounter_SS_Set_EndValue(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    12c2:	82 30       	cpi	r24, 0x02	; 2
    12c4:	b1 f4       	brne	.+44     	; 0x12f2 <Timebase_UpCounter_SS_Update+0xb6>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    12c6:	1a 96       	adiw	r26, 0x0a	; 10
    12c8:	8d 91       	ld	r24, X+
    12ca:	9d 91       	ld	r25, X+
    12cc:	0d 90       	ld	r0, X+
    12ce:	bc 91       	ld	r27, X
    12d0:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    12d2:	80 a5       	ldd	r24, Z+40	; 0x28
    12d4:	91 a5       	ldd	r25, Z+41	; 0x29
    12d6:	a2 a5       	ldd	r26, Z+42	; 0x2a
    12d8:	b3 a5       	ldd	r27, Z+43	; 0x2b
    12da:	24 a5       	ldd	r18, Z+44	; 0x2c
    12dc:	35 a5       	ldd	r19, Z+45	; 0x2d
    12de:	46 a5       	ldd	r20, Z+46	; 0x2e
    12e0:	57 a5       	ldd	r21, Z+47	; 0x2f
    12e2:	82 1b       	sub	r24, r18
    12e4:	93 0b       	sbc	r25, r19
    12e6:	a4 0b       	sbc	r26, r20
    12e8:	b5 0b       	sbc	r27, r21
    12ea:	80 ab       	std	Z+48, r24	; 0x30
    12ec:	91 ab       	std	Z+49, r25	; 0x31
    12ee:	a2 ab       	std	Z+50, r26	; 0x32
    12f0:	b3 ab       	std	Z+51, r27	; 0x33
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_EndValue(window, Timebase_UpCounter_SS_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	08 95       	ret

000012fc <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    12fc:	40 e0       	ldi	r20, 0x00	; 0
    12fe:	e0 91 49 01 	lds	r30, 0x0149
    1302:	f0 91 4a 01 	lds	r31, 0x014A
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	29 e1       	ldi	r18, 0x19	; 25
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	bc 01       	movw	r22, r24
    130e:	62 9f       	mul	r22, r18
    1310:	c0 01       	movw	r24, r0
    1312:	63 9f       	mul	r22, r19
    1314:	90 0d       	add	r25, r0
    1316:	72 9f       	mul	r23, r18
    1318:	90 0d       	add	r25, r0
    131a:	11 24       	eor	r1, r1
    131c:	e8 0f       	add	r30, r24
    131e:	f9 1f       	adc	r31, r25
    1320:	87 8d       	ldd	r24, Z+31	; 0x1f
    1322:	86 95       	lsr	r24
    1324:	8f 70       	andi	r24, 0x0F	; 15
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	09 f4       	brne	.+2      	; 0x132c <Timebase_UpCounter_SS_Expired+0x30>
    132a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    132c:	84 2f       	mov	r24, r20
    132e:	08 95       	ret

00001330 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1330:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1332:	e0 91 49 01 	lds	r30, 0x0149
    1336:	f0 91 4a 01 	lds	r31, 0x014A
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	89 e1       	ldi	r24, 0x19	; 25
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	bc 01       	movw	r22, r24
    1344:	26 9f       	mul	r18, r22
    1346:	c0 01       	movw	r24, r0
    1348:	27 9f       	mul	r18, r23
    134a:	90 0d       	add	r25, r0
    134c:	36 9f       	mul	r19, r22
    134e:	90 0d       	add	r25, r0
    1350:	11 24       	eor	r1, r1
    1352:	e8 0f       	add	r30, r24
    1354:	f9 1f       	adc	r31, r25
    1356:	87 8d       	ldd	r24, Z+31	; 0x1f
    1358:	86 95       	lsr	r24
    135a:	8f 70       	andi	r24, 0x0F	; 15
    135c:	84 30       	cpi	r24, 0x04	; 4
    135e:	11 f0       	breq	.+4      	; 0x1364 <Timebase_UpCounter_SS_Expired_Event+0x34>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1364:	84 2f       	mov	r24, r20
    1366:	0e 94 e5 07 	call	0xfca	; 0xfca <Timebase_UpCounter_SS_Reset>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    136c:	08 95       	ret

0000136e <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    136e:	e0 91 49 01 	lds	r30, 0x0149
    1372:	f0 91 4a 01 	lds	r31, 0x014A
    1376:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1378:	29 e1       	ldi	r18, 0x19	; 25
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	dc 01       	movw	r26, r24
    137e:	a2 9f       	mul	r26, r18
    1380:	c0 01       	movw	r24, r0
    1382:	a3 9f       	mul	r26, r19
    1384:	90 0d       	add	r25, r0
    1386:	b2 9f       	mul	r27, r18
    1388:	90 0d       	add	r25, r0
    138a:	11 24       	eor	r1, r1
    138c:	e8 0f       	add	r30, r24
    138e:	f9 1f       	adc	r31, r25
    1390:	87 8d       	ldd	r24, Z+31	; 0x1f
    1392:	80 fd       	sbrc	r24, 0
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1396:	80 a9       	ldd	r24, Z+48	; 0x30
    1398:	91 a9       	ldd	r25, Z+49	; 0x31
    139a:	a2 a9       	ldd	r26, Z+50	; 0x32
    139c:	b3 a9       	ldd	r27, Z+51	; 0x33
    139e:	84 0f       	add	r24, r20
    13a0:	95 1f       	adc	r25, r21
    13a2:	a6 1f       	adc	r26, r22
    13a4:	b7 1f       	adc	r27, r23
    13a6:	84 ab       	std	Z+52, r24	; 0x34
    13a8:	95 ab       	std	Z+53, r25	; 0x35
    13aa:	a6 ab       	std	Z+54, r26	; 0x36
    13ac:	b7 ab       	std	Z+55, r27	; 0x37
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    13ae:	87 8d       	ldd	r24, Z+31	; 0x1f
    13b0:	81 60       	ori	r24, 0x01	; 1
    13b2:	87 8f       	std	Z+31, r24	; 0x1f
    13b4:	08 95       	ret

000013b6 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    13b6:	e0 91 49 01 	lds	r30, 0x0149
    13ba:	f0 91 4a 01 	lds	r31, 0x014A
    13be:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    13c0:	29 e1       	ldi	r18, 0x19	; 25
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	ac 01       	movw	r20, r24
    13c6:	42 9f       	mul	r20, r18
    13c8:	c0 01       	movw	r24, r0
    13ca:	43 9f       	mul	r20, r19
    13cc:	90 0d       	add	r25, r0
    13ce:	52 9f       	mul	r21, r18
    13d0:	90 0d       	add	r25, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	24 a9       	ldd	r18, Z+52	; 0x34
    13da:	35 a9       	ldd	r19, Z+53	; 0x35
    13dc:	46 a9       	ldd	r20, Z+54	; 0x36
    13de:	57 a9       	ldd	r21, Z+55	; 0x37
    13e0:	80 a9       	ldd	r24, Z+48	; 0x30
    13e2:	91 a9       	ldd	r25, Z+49	; 0x31
    13e4:	a2 a9       	ldd	r26, Z+50	; 0x32
    13e6:	b3 a9       	ldd	r27, Z+51	; 0x33
    13e8:	28 1b       	sub	r18, r24
    13ea:	39 0b       	sbc	r19, r25
    13ec:	4a 0b       	sbc	r20, r26
    13ee:	5b 0b       	sbc	r21, r27
    13f0:	57 ff       	sbrs	r21, 7
    13f2:	04 c0       	rjmp	.+8      	; 0x13fc <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    13fc:	b9 01       	movw	r22, r18
    13fe:	ca 01       	movw	r24, r20
    1400:	08 95       	ret

00001402 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1406:	c0 91 49 01 	lds	r28, 0x0149
    140a:	d0 91 4a 01 	lds	r29, 0x014A
    140e:	68 2f       	mov	r22, r24
    1410:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    1412:	89 e1       	ldi	r24, 0x19	; 25
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	68 9f       	mul	r22, r24
    1418:	f0 01       	movw	r30, r0
    141a:	69 9f       	mul	r22, r25
    141c:	f0 0d       	add	r31, r0
    141e:	78 9f       	mul	r23, r24
    1420:	f0 0d       	add	r31, r0
    1422:	11 24       	eor	r1, r1
    1424:	ec 0f       	add	r30, r28
    1426:	fd 1f       	adc	r31, r29
    1428:	24 a9       	ldd	r18, Z+52	; 0x34
    142a:	35 a9       	ldd	r19, Z+53	; 0x35
    142c:	46 a9       	ldd	r20, Z+54	; 0x36
    142e:	57 a9       	ldd	r21, Z+55	; 0x37
    1430:	80 a9       	ldd	r24, Z+48	; 0x30
    1432:	91 a9       	ldd	r25, Z+49	; 0x31
    1434:	a2 a9       	ldd	r26, Z+50	; 0x32
    1436:	b3 a9       	ldd	r27, Z+51	; 0x33
    1438:	28 1b       	sub	r18, r24
    143a:	39 0b       	sbc	r19, r25
    143c:	4a 0b       	sbc	r20, r26
    143e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1440:	57 fd       	sbrc	r21, 7
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	41 05       	cpc	r20, r1
    144a:	51 05       	cpc	r21, r1
    144c:	11 f0       	breq	.+4      	; 0x1452 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	12 c0       	rjmp	.+36     	; 0x1476 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	89 e1       	ldi	r24, 0x19	; 25
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	ac 01       	movw	r20, r24
    145a:	64 9f       	mul	r22, r20
    145c:	c0 01       	movw	r24, r0
    145e:	65 9f       	mul	r22, r21
    1460:	90 0d       	add	r25, r0
    1462:	74 9f       	mul	r23, r20
    1464:	90 0d       	add	r25, r0
    1466:	11 24       	eor	r1, r1
    1468:	c8 0f       	add	r28, r24
    146a:	d9 1f       	adc	r29, r25
    146c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    146e:	80 ff       	sbrs	r24, 0
    1470:	21 e0       	ldi	r18, 0x01	; 1
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1476:	82 2f       	mov	r24, r18
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    147e:	1f 93       	push	r17
    1480:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1482:	0e 94 01 0a 	call	0x1402	; 0x1402 <Timebase_UpCounter_SS_Period_Value_Expired>
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	11 f0       	breq	.+4      	; 0x148e <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    148e:	e0 91 49 01 	lds	r30, 0x0149
    1492:	f0 91 4a 01 	lds	r31, 0x014A
    1496:	21 2f       	mov	r18, r17
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	89 e1       	ldi	r24, 0x19	; 25
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	ac 01       	movw	r20, r24
    14a0:	24 9f       	mul	r18, r20
    14a2:	c0 01       	movw	r24, r0
    14a4:	25 9f       	mul	r18, r21
    14a6:	90 0d       	add	r25, r0
    14a8:	34 9f       	mul	r19, r20
    14aa:	90 0d       	add	r25, r0
    14ac:	11 24       	eor	r1, r1
    14ae:	e8 0f       	add	r30, r24
    14b0:	f9 1f       	adc	r31, r25
    14b2:	87 8d       	ldd	r24, Z+31	; 0x1f
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	87 8f       	std	Z+31, r24	; 0x1f
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    14ba:	1f 91       	pop	r17
    14bc:	08 95       	ret

000014be <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0e 94 1e 09 	call	0x123c	; 0x123c <Timebase_UpCounter_SS_Update>
  }
}
    14c4:	08 95       	ret

000014c6 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0e 94 e5 07 	call	0xfca	; 0xfca <Timebase_UpCounter_SS_Reset>
  }
}
    14cc:	08 95       	ret

000014ce <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    14ce:	e0 91 49 01 	lds	r30, 0x0149
    14d2:	f0 91 4a 01 	lds	r31, 0x014A
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	25 e1       	ldi	r18, 0x15	; 21
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	ac 01       	movw	r20, r24
    14de:	42 9f       	mul	r20, r18
    14e0:	c0 01       	movw	r24, r0
    14e2:	43 9f       	mul	r20, r19
    14e4:	90 0d       	add	r25, r0
    14e6:	52 9f       	mul	r21, r18
    14e8:	90 0d       	add	r25, r0
    14ea:	11 24       	eor	r1, r1
    14ec:	e8 0f       	add	r30, r24
    14ee:	f9 1f       	adc	r31, r25
    14f0:	80 ad       	ldd	r24, Z+56	; 0x38
    14f2:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    14f4:	8f 70       	andi	r24, 0x0F	; 15
    14f6:	08 95       	ret

000014f8 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    14f8:	e0 91 49 01 	lds	r30, 0x0149
    14fc:	f0 91 4a 01 	lds	r31, 0x014A
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	25 e1       	ldi	r18, 0x15	; 21
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	ac 01       	movw	r20, r24
    1508:	42 9f       	mul	r20, r18
    150a:	c0 01       	movw	r24, r0
    150c:	43 9f       	mul	r20, r19
    150e:	90 0d       	add	r25, r0
    1510:	52 9f       	mul	r21, r18
    1512:	90 0d       	add	r25, r0
    1514:	11 24       	eor	r1, r1
    1516:	e8 0f       	add	r30, r24
    1518:	f9 1f       	adc	r31, r25
    151a:	6f 70       	andi	r22, 0x0F	; 15
    151c:	66 0f       	add	r22, r22
    151e:	80 ad       	ldd	r24, Z+56	; 0x38
    1520:	81 7e       	andi	r24, 0xE1	; 225
    1522:	86 2b       	or	r24, r22
    1524:	80 af       	std	Z+56, r24	; 0x38
}
    1526:	08 95       	ret

00001528 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1528:	e0 91 49 01 	lds	r30, 0x0149
    152c:	f0 91 4a 01 	lds	r31, 0x014A
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	25 e1       	ldi	r18, 0x15	; 21
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	ac 01       	movw	r20, r24
    1538:	42 9f       	mul	r20, r18
    153a:	c0 01       	movw	r24, r0
    153c:	43 9f       	mul	r20, r19
    153e:	90 0d       	add	r25, r0
    1540:	52 9f       	mul	r21, r18
    1542:	90 0d       	add	r25, r0
    1544:	11 24       	eor	r1, r1
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	eb 5b       	subi	r30, 0xBB	; 187
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	08 95       	ret

00001558 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1558:	e0 91 49 01 	lds	r30, 0x0149
    155c:	f0 91 4a 01 	lds	r31, 0x014A
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	25 e1       	ldi	r18, 0x15	; 21
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	dc 01       	movw	r26, r24
    1568:	a2 9f       	mul	r26, r18
    156a:	c0 01       	movw	r24, r0
    156c:	a3 9f       	mul	r26, r19
    156e:	90 0d       	add	r25, r0
    1570:	b2 9f       	mul	r27, r18
    1572:	90 0d       	add	r25, r0
    1574:	11 24       	eor	r1, r1
    1576:	e8 0f       	add	r30, r24
    1578:	f9 1f       	adc	r31, r25
    157a:	eb 5b       	subi	r30, 0xBB	; 187
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	40 83       	st	Z, r20
    1580:	51 83       	std	Z+1, r21	; 0x01
    1582:	62 83       	std	Z+2, r22	; 0x02
    1584:	73 83       	std	Z+3, r23	; 0x03
}
    1586:	08 95       	ret

00001588 <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
    1588:	e0 91 49 01 	lds	r30, 0x0149
    158c:	f0 91 4a 01 	lds	r31, 0x014A
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	25 e1       	ldi	r18, 0x15	; 21
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	ac 01       	movw	r20, r24
    1598:	42 9f       	mul	r20, r18
    159a:	c0 01       	movw	r24, r0
    159c:	43 9f       	mul	r20, r19
    159e:	90 0d       	add	r25, r0
    15a0:	52 9f       	mul	r21, r18
    15a2:	90 0d       	add	r25, r0
    15a4:	11 24       	eor	r1, r1
    15a6:	e8 0f       	add	r30, r24
    15a8:	f9 1f       	adc	r31, r25
    15aa:	df 01       	movw	r26, r30
    15ac:	d9 96       	adiw	r26, 0x39	; 57
    15ae:	61 ad       	ldd	r22, Z+57	; 0x39
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	7c 91       	ld	r23, X
    15b4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    15b6:	12 96       	adiw	r26, 0x02	; 2
    15b8:	8c 91       	ld	r24, X
    15ba:	12 97       	sbiw	r26, 0x02	; 2
    15bc:	13 96       	adiw	r26, 0x03	; 3
    15be:	9c 91       	ld	r25, X
    15c0:	08 95       	ret

000015c2 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    15c2:	e0 91 49 01 	lds	r30, 0x0149
    15c6:	f0 91 4a 01 	lds	r31, 0x014A
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	25 e1       	ldi	r18, 0x15	; 21
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	dc 01       	movw	r26, r24
    15d2:	a2 9f       	mul	r26, r18
    15d4:	c0 01       	movw	r24, r0
    15d6:	a3 9f       	mul	r26, r19
    15d8:	90 0d       	add	r25, r0
    15da:	b2 9f       	mul	r27, r18
    15dc:	90 0d       	add	r25, r0
    15de:	11 24       	eor	r1, r1
    15e0:	e8 0f       	add	r30, r24
    15e2:	f9 1f       	adc	r31, r25
    15e4:	41 af       	std	Z+57, r20	; 0x39
    15e6:	52 af       	std	Z+58, r21	; 0x3a
    15e8:	63 af       	std	Z+59, r22	; 0x3b
    15ea:	74 af       	std	Z+60, r23	; 0x3c
}
    15ec:	08 95       	ret

000015ee <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    15ee:	e0 91 49 01 	lds	r30, 0x0149
    15f2:	f0 91 4a 01 	lds	r31, 0x014A
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	25 e1       	ldi	r18, 0x15	; 21
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	ac 01       	movw	r20, r24
    15fe:	42 9f       	mul	r20, r18
    1600:	c0 01       	movw	r24, r0
    1602:	43 9f       	mul	r20, r19
    1604:	90 0d       	add	r25, r0
    1606:	52 9f       	mul	r21, r18
    1608:	90 0d       	add	r25, r0
    160a:	11 24       	eor	r1, r1
    160c:	e8 0f       	add	r30, r24
    160e:	f9 1f       	adc	r31, r25
    1610:	fd 96       	adiw	r30, 0x3d	; 61
    1612:	60 81       	ld	r22, Z
    1614:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Target;
}
    1616:	82 81       	ldd	r24, Z+2	; 0x02
    1618:	93 81       	ldd	r25, Z+3	; 0x03
    161a:	08 95       	ret

0000161c <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    161c:	e0 91 49 01 	lds	r30, 0x0149
    1620:	f0 91 4a 01 	lds	r31, 0x014A
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	25 e1       	ldi	r18, 0x15	; 21
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	dc 01       	movw	r26, r24
    162c:	a2 9f       	mul	r26, r18
    162e:	c0 01       	movw	r24, r0
    1630:	a3 9f       	mul	r26, r19
    1632:	90 0d       	add	r25, r0
    1634:	b2 9f       	mul	r27, r18
    1636:	90 0d       	add	r25, r0
    1638:	11 24       	eor	r1, r1
    163a:	e8 0f       	add	r30, r24
    163c:	f9 1f       	adc	r31, r25
    163e:	fd 96       	adiw	r30, 0x3d	; 61
    1640:	40 83       	st	Z, r20
    1642:	51 83       	std	Z+1, r21	; 0x01
    1644:	62 83       	std	Z+2, r22	; 0x02
    1646:	73 83       	std	Z+3, r23	; 0x03
}
    1648:	08 95       	ret

0000164a <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    164a:	e0 91 49 01 	lds	r30, 0x0149
    164e:	f0 91 4a 01 	lds	r31, 0x014A
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	25 e1       	ldi	r18, 0x15	; 21
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	ac 01       	movw	r20, r24
    165a:	42 9f       	mul	r20, r18
    165c:	c0 01       	movw	r24, r0
    165e:	43 9f       	mul	r20, r19
    1660:	90 0d       	add	r25, r0
    1662:	52 9f       	mul	r21, r18
    1664:	90 0d       	add	r25, r0
    1666:	11 24       	eor	r1, r1
    1668:	e8 0f       	add	r30, r24
    166a:	f9 1f       	adc	r31, r25
    166c:	ef 5b       	subi	r30, 0xBF	; 191
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    1674:	82 81       	ldd	r24, Z+2	; 0x02
    1676:	93 81       	ldd	r25, Z+3	; 0x03
    1678:	08 95       	ret

0000167a <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    167a:	e0 91 49 01 	lds	r30, 0x0149
    167e:	f0 91 4a 01 	lds	r31, 0x014A
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	25 e1       	ldi	r18, 0x15	; 21
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	dc 01       	movw	r26, r24
    168a:	a2 9f       	mul	r26, r18
    168c:	c0 01       	movw	r24, r0
    168e:	a3 9f       	mul	r26, r19
    1690:	90 0d       	add	r25, r0
    1692:	b2 9f       	mul	r27, r18
    1694:	90 0d       	add	r25, r0
    1696:	11 24       	eor	r1, r1
    1698:	e8 0f       	add	r30, r24
    169a:	f9 1f       	adc	r31, r25
    169c:	ef 5b       	subi	r30, 0xBF	; 191
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	40 83       	st	Z, r20
    16a2:	51 83       	std	Z+1, r21	; 0x01
    16a4:	62 83       	std	Z+2, r22	; 0x02
    16a6:	73 83       	std	Z+3, r23	; 0x03
}
    16a8:	08 95       	ret

000016aa <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    16aa:	e0 91 49 01 	lds	r30, 0x0149
    16ae:	f0 91 4a 01 	lds	r31, 0x014A
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	25 e1       	ldi	r18, 0x15	; 21
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	ac 01       	movw	r20, r24
    16ba:	42 9f       	mul	r20, r18
    16bc:	c0 01       	movw	r24, r0
    16be:	43 9f       	mul	r20, r19
    16c0:	90 0d       	add	r25, r0
    16c2:	52 9f       	mul	r21, r18
    16c4:	90 0d       	add	r25, r0
    16c6:	11 24       	eor	r1, r1
    16c8:	e8 0f       	add	r30, r24
    16ca:	f9 1f       	adc	r31, r25
    16cc:	e7 5b       	subi	r30, 0xB7	; 183
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	60 81       	ld	r22, Z
    16d2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    16d4:	82 81       	ldd	r24, Z+2	; 0x02
    16d6:	93 81       	ldd	r25, Z+3	; 0x03
    16d8:	08 95       	ret

000016da <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    16da:	e0 91 49 01 	lds	r30, 0x0149
    16de:	f0 91 4a 01 	lds	r31, 0x014A
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	25 e1       	ldi	r18, 0x15	; 21
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	dc 01       	movw	r26, r24
    16ea:	a2 9f       	mul	r26, r18
    16ec:	c0 01       	movw	r24, r0
    16ee:	a3 9f       	mul	r26, r19
    16f0:	90 0d       	add	r25, r0
    16f2:	b2 9f       	mul	r27, r18
    16f4:	90 0d       	add	r25, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	e7 5b       	subi	r30, 0xB7	; 183
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	40 83       	st	Z, r20
    1702:	51 83       	std	Z+1, r21	; 0x01
    1704:	62 83       	std	Z+2, r22	; 0x02
    1706:	73 83       	std	Z+3, r23	; 0x03
}
    1708:	08 95       	ret

0000170a <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    170a:	e0 91 49 01 	lds	r30, 0x0149
    170e:	f0 91 4a 01 	lds	r31, 0x014A
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	25 e1       	ldi	r18, 0x15	; 21
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	ac 01       	movw	r20, r24
    171a:	42 9f       	mul	r20, r18
    171c:	c0 01       	movw	r24, r0
    171e:	43 9f       	mul	r20, r19
    1720:	90 0d       	add	r25, r0
    1722:	52 9f       	mul	r21, r18
    1724:	90 0d       	add	r25, r0
    1726:	11 24       	eor	r1, r1
    1728:	e8 0f       	add	r30, r24
    172a:	f9 1f       	adc	r31, r25
    172c:	80 ad       	ldd	r24, Z+56	; 0x38
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    172e:	81 70       	andi	r24, 0x01	; 1
    1730:	08 95       	ret

00001732 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1732:	e0 91 49 01 	lds	r30, 0x0149
    1736:	f0 91 4a 01 	lds	r31, 0x014A
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	25 e1       	ldi	r18, 0x15	; 21
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	ac 01       	movw	r20, r24
    1742:	42 9f       	mul	r20, r18
    1744:	c0 01       	movw	r24, r0
    1746:	43 9f       	mul	r20, r19
    1748:	90 0d       	add	r25, r0
    174a:	52 9f       	mul	r21, r18
    174c:	90 0d       	add	r25, r0
    174e:	11 24       	eor	r1, r1
    1750:	e8 0f       	add	r30, r24
    1752:	f9 1f       	adc	r31, r25
    1754:	80 ad       	ldd	r24, Z+56	; 0x38
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	80 af       	std	Z+56, r24	; 0x38
}
    175a:	08 95       	ret

0000175c <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    175c:	e0 91 49 01 	lds	r30, 0x0149
    1760:	f0 91 4a 01 	lds	r31, 0x014A
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	25 e1       	ldi	r18, 0x15	; 21
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	ac 01       	movw	r20, r24
    176c:	42 9f       	mul	r20, r18
    176e:	c0 01       	movw	r24, r0
    1770:	43 9f       	mul	r20, r19
    1772:	90 0d       	add	r25, r0
    1774:	52 9f       	mul	r21, r18
    1776:	90 0d       	add	r25, r0
    1778:	11 24       	eor	r1, r1
    177a:	e8 0f       	add	r30, r24
    177c:	f9 1f       	adc	r31, r25
    177e:	80 ad       	ldd	r24, Z+56	; 0x38
    1780:	8e 7f       	andi	r24, 0xFE	; 254
    1782:	80 af       	std	Z+56, r24	; 0x38
}
    1784:	08 95       	ret

00001786 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1786:	e0 91 49 01 	lds	r30, 0x0149
    178a:	f0 91 4a 01 	lds	r31, 0x014A
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	25 e1       	ldi	r18, 0x15	; 21
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	ac 01       	movw	r20, r24
    1796:	42 9f       	mul	r20, r18
    1798:	c0 01       	movw	r24, r0
    179a:	43 9f       	mul	r20, r19
    179c:	90 0d       	add	r25, r0
    179e:	52 9f       	mul	r21, r18
    17a0:	90 0d       	add	r25, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	e8 0f       	add	r30, r24
    17a6:	f9 1f       	adc	r31, r25
    17a8:	80 ad       	ldd	r24, Z+56	; 0x38
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    17aa:	eb 5b       	subi	r30, 0xBB	; 187
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	10 82       	st	Z, r1
    17b0:	11 82       	std	Z+1, r1	; 0x01
    17b2:	12 82       	std	Z+2, r1	; 0x02
    17b4:	13 82       	std	Z+3, r1	; 0x03
    17b6:	e5 54       	subi	r30, 0x45	; 69
    17b8:	f0 40       	sbci	r31, 0x00	; 0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    17ba:	11 ae       	std	Z+57, r1	; 0x39
    17bc:	12 ae       	std	Z+58, r1	; 0x3a
    17be:	13 ae       	std	Z+59, r1	; 0x3b
    17c0:	14 ae       	std	Z+60, r1	; 0x3c
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    17c2:	fd 96       	adiw	r30, 0x3d	; 61
    17c4:	11 92       	st	Z+, r1
    17c6:	11 92       	st	Z+, r1
    17c8:	11 92       	st	Z+, r1
    17ca:	11 92       	st	Z+, r1
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    17cc:	10 82       	st	Z, r1
    17ce:	11 82       	std	Z+1, r1	; 0x01
    17d0:	12 82       	std	Z+2, r1	; 0x02
    17d2:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    17d4:	38 96       	adiw	r30, 0x08	; 8
    17d6:	10 82       	st	Z, r1
    17d8:	11 82       	std	Z+1, r1	; 0x01
    17da:	12 82       	std	Z+2, r1	; 0x02
    17dc:	13 82       	std	Z+3, r1	; 0x03
    17de:	e9 54       	subi	r30, 0x49	; 73
    17e0:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17e2:	80 7e       	andi	r24, 0xE0	; 224
    17e4:	80 af       	std	Z+56, r24	; 0x38
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    17e6:	08 95       	ret

000017e8 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    17e8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Timebase_UpCounter_Reset>
}
    17ec:	08 95       	ret

000017ee <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    17ee:	e0 91 49 01 	lds	r30, 0x0149
    17f2:	f0 91 4a 01 	lds	r31, 0x014A
    17f6:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    17f8:	25 e1       	ldi	r18, 0x15	; 21
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	ac 01       	movw	r20, r24
    17fe:	42 9f       	mul	r20, r18
    1800:	c0 01       	movw	r24, r0
    1802:	43 9f       	mul	r20, r19
    1804:	90 0d       	add	r25, r0
    1806:	52 9f       	mul	r21, r18
    1808:	90 0d       	add	r25, r0
    180a:	11 24       	eor	r1, r1
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	90 ad       	ldd	r25, Z+56	; 0x38
    1812:	89 2f       	mov	r24, r25
    1814:	86 95       	lsr	r24
    1816:	8f 70       	andi	r24, 0x0F	; 15
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	19 f0       	breq	.+6      	; 0x1822 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    181c:	91 7e       	andi	r25, 0xE1	; 225
    181e:	92 60       	ori	r25, 0x02	; 2
    1820:	90 af       	std	Z+56, r25	; 0x38
    1822:	08 95       	ret

00001824 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1824:	e0 91 49 01 	lds	r30, 0x0149
    1828:	f0 91 4a 01 	lds	r31, 0x014A
    182c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    182e:	25 e1       	ldi	r18, 0x15	; 21
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	ac 01       	movw	r20, r24
    1834:	42 9f       	mul	r20, r18
    1836:	c0 01       	movw	r24, r0
    1838:	43 9f       	mul	r20, r19
    183a:	90 0d       	add	r25, r0
    183c:	52 9f       	mul	r21, r18
    183e:	90 0d       	add	r25, r0
    1840:	11 24       	eor	r1, r1
    1842:	e8 0f       	add	r30, r24
    1844:	f9 1f       	adc	r31, r25
    1846:	90 ad       	ldd	r25, Z+56	; 0x38
    1848:	89 2f       	mov	r24, r25
    184a:	86 95       	lsr	r24
    184c:	8f 70       	andi	r24, 0x0F	; 15
    184e:	82 30       	cpi	r24, 0x02	; 2
    1850:	19 f0       	breq	.+6      	; 0x1858 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1852:	91 7e       	andi	r25, 0xE1	; 225
    1854:	94 60       	ori	r25, 0x04	; 4
    1856:	90 af       	std	Z+56, r25	; 0x38
    1858:	08 95       	ret

0000185a <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    185a:	a0 91 49 01 	lds	r26, 0x0149
    185e:	b0 91 4a 01 	lds	r27, 0x014A
    1862:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1864:	25 e1       	ldi	r18, 0x15	; 21
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	82 9f       	mul	r24, r18
    186a:	f0 01       	movw	r30, r0
    186c:	83 9f       	mul	r24, r19
    186e:	f0 0d       	add	r31, r0
    1870:	92 9f       	mul	r25, r18
    1872:	f0 0d       	add	r31, r0
    1874:	11 24       	eor	r1, r1
    1876:	ea 0f       	add	r30, r26
    1878:	fb 1f       	adc	r31, r27
    187a:	80 ad       	ldd	r24, Z+56	; 0x38
    187c:	86 95       	lsr	r24
    187e:	8f 70       	andi	r24, 0x0F	; 15
    1880:	31 f5       	brne	.+76     	; 0x18ce <Timebase_UpCounter_Set_Securely+0x74>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1882:	eb 5b       	subi	r30, 0xBB	; 187
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	10 82       	st	Z, r1
    1888:	11 82       	std	Z+1, r1	; 0x01
    188a:	12 82       	std	Z+2, r1	; 0x02
    188c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    188e:	12 92       	st	-Z, r1
    1890:	12 92       	st	-Z, r1
    1892:	12 92       	st	-Z, r1
    1894:	12 92       	st	-Z, r1
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1896:	72 93       	st	-Z, r23
    1898:	62 93       	st	-Z, r22
    189a:	52 93       	st	-Z, r21
    189c:	42 93       	st	-Z, r20
    189e:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    18a0:	1a 96       	adiw	r26, 0x0a	; 10
    18a2:	8d 91       	ld	r24, X+
    18a4:	9d 91       	ld	r25, X+
    18a6:	0d 90       	ld	r0, X+
    18a8:	bc 91       	ld	r27, X
    18aa:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    18ac:	84 0f       	add	r24, r20
    18ae:	95 1f       	adc	r25, r21
    18b0:	a6 1f       	adc	r26, r22
    18b2:	b7 1f       	adc	r27, r23
    18b4:	81 af       	std	Z+57, r24	; 0x39
    18b6:	92 af       	std	Z+58, r25	; 0x3a
    18b8:	a3 af       	std	Z+59, r26	; 0x3b
    18ba:	b4 af       	std	Z+60, r27	; 0x3c
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    18bc:	90 ad       	ldd	r25, Z+56	; 0x38
    18be:	89 2f       	mov	r24, r25
    18c0:	86 95       	lsr	r24
    18c2:	8f 70       	andi	r24, 0x0F	; 15
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	19 f0       	breq	.+6      	; 0x18ce <Timebase_UpCounter_Set_Securely+0x74>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    18c8:	91 7e       	andi	r25, 0xE1	; 225
    18ca:	92 60       	ori	r25, 0x02	; 2
    18cc:	90 af       	std	Z+56, r25	; 0x38
    18ce:	08 95       	ret

000018d0 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
    18da:	d8 2e       	mov	r13, r24
    18dc:	7a 01       	movw	r14, r20
    18de:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    18e0:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    18e4:	8d 2d       	mov	r24, r13
    18e6:	b8 01       	movw	r22, r16
    18e8:	a7 01       	movw	r20, r14
    18ea:	0e 94 2d 0c 	call	0x185a	; 0x185a <Timebase_UpCounter_Set_Securely>
} 
    18ee:	1f 91       	pop	r17
    18f0:	0f 91       	pop	r16
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	08 95       	ret

000018fa <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1906:	a0 91 49 01 	lds	r26, 0x0149
    190a:	b0 91 4a 01 	lds	r27, 0x014A
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	25 e1       	ldi	r18, 0x15	; 21
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	82 9f       	mul	r24, r18
    1916:	f0 01       	movw	r30, r0
    1918:	83 9f       	mul	r24, r19
    191a:	f0 0d       	add	r31, r0
    191c:	92 9f       	mul	r25, r18
    191e:	f0 0d       	add	r31, r0
    1920:	11 24       	eor	r1, r1
    1922:	ea 0f       	add	r30, r26
    1924:	fb 1f       	adc	r31, r27
    1926:	80 ad       	ldd	r24, Z+56	; 0x38
    1928:	86 95       	lsr	r24
    192a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	09 f0       	breq	.+2      	; 0x1932 <Timebase_UpCounter_Update+0x38>
    1930:	42 c0       	rjmp	.+132    	; 0x19b6 <Timebase_UpCounter_Update+0xbc>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1932:	1a 96       	adiw	r26, 0x0a	; 10
    1934:	8d 91       	ld	r24, X+
    1936:	9d 91       	ld	r25, X+
    1938:	0d 90       	ld	r0, X+
    193a:	bc 91       	ld	r27, X
    193c:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    193e:	21 ad       	ldd	r18, Z+57	; 0x39
    1940:	32 ad       	ldd	r19, Z+58	; 0x3a
    1942:	43 ad       	ldd	r20, Z+59	; 0x3b
    1944:	54 ad       	ldd	r21, Z+60	; 0x3c
    1946:	28 1b       	sub	r18, r24
    1948:	39 0b       	sbc	r19, r25
    194a:	4a 0b       	sbc	r20, r26
    194c:	5b 0b       	sbc	r21, r27
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    194e:	bf 01       	movw	r22, r30
    1950:	6f 5b       	subi	r22, 0xBF	; 191
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	db 01       	movw	r26, r22
    1956:	2d 93       	st	X+, r18
    1958:	3d 93       	st	X+, r19
    195a:	4d 93       	st	X+, r20
    195c:	5c 93       	st	X, r21
    195e:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1960:	ef 01       	movw	r28, r30
    1962:	cb 5b       	subi	r28, 0xBB	; 187
    1964:	df 4f       	sbci	r29, 0xFF	; 255
    1966:	fd 96       	adiw	r30, 0x3d	; 61
    1968:	e0 80       	ld	r14, Z
    196a:	f1 80       	ldd	r15, Z+1	; 0x01
    196c:	02 81       	ldd	r16, Z+2	; 0x02
    196e:	13 81       	ldd	r17, Z+3	; 0x03
    1970:	fd 97       	sbiw	r30, 0x3d	; 61
    1972:	d8 01       	movw	r26, r16
    1974:	c7 01       	movw	r24, r14
    1976:	82 1b       	sub	r24, r18
    1978:	93 0b       	sbc	r25, r19
    197a:	a4 0b       	sbc	r26, r20
    197c:	b5 0b       	sbc	r27, r21
    197e:	88 83       	st	Y, r24
    1980:	99 83       	std	Y+1, r25	; 0x01
    1982:	aa 83       	std	Y+2, r26	; 0x02
    1984:	bb 83       	std	Y+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1986:	12 16       	cp	r1, r18
    1988:	13 06       	cpc	r1, r19
    198a:	14 06       	cpc	r1, r20
    198c:	15 06       	cpc	r1, r21
    198e:	cc f1       	brlt	.+114    	; 0x1a02 <Timebase_UpCounter_Update+0x108>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1990:	11 ae       	std	Z+57, r1	; 0x39
    1992:	12 ae       	std	Z+58, r1	; 0x3a
    1994:	13 ae       	std	Z+59, r1	; 0x3b
    1996:	14 ae       	std	Z+60, r1	; 0x3c
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1998:	db 01       	movw	r26, r22
    199a:	1d 92       	st	X+, r1
    199c:	1d 92       	st	X+, r1
    199e:	1d 92       	st	X+, r1
    19a0:	1c 92       	st	X, r1
    19a2:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    19a4:	e8 82       	st	Y, r14
    19a6:	f9 82       	std	Y+1, r15	; 0x01
    19a8:	0a 83       	std	Y+2, r16	; 0x02
    19aa:	1b 83       	std	Y+3, r17	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    19ac:	80 ad       	ldd	r24, Z+56	; 0x38
    19ae:	81 7e       	andi	r24, 0xE1	; 225
    19b0:	88 60       	ori	r24, 0x08	; 8
    19b2:	80 af       	std	Z+56, r24	; 0x38
    19b4:	26 c0       	rjmp	.+76     	; 0x1a02 <Timebase_UpCounter_Update+0x108>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    19b6:	82 30       	cpi	r24, 0x02	; 2
    19b8:	21 f5       	brne	.+72     	; 0x1a02 <Timebase_UpCounter_Update+0x108>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    19ba:	1a 96       	adiw	r26, 0x0a	; 10
    19bc:	8d 91       	ld	r24, X+
    19be:	9d 91       	ld	r25, X+
    19c0:	0d 90       	ld	r0, X+
    19c2:	bc 91       	ld	r27, X
    19c4:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    19c6:	ef 5b       	subi	r30, 0xBF	; 191
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	20 81       	ld	r18, Z
    19cc:	31 81       	ldd	r19, Z+1	; 0x01
    19ce:	42 81       	ldd	r20, Z+2	; 0x02
    19d0:	53 81       	ldd	r21, Z+3	; 0x03
    19d2:	e1 54       	subi	r30, 0x41	; 65
    19d4:	f0 40       	sbci	r31, 0x00	; 0
    19d6:	82 0f       	add	r24, r18
    19d8:	93 1f       	adc	r25, r19
    19da:	a4 1f       	adc	r26, r20
    19dc:	b5 1f       	adc	r27, r21
    19de:	81 af       	std	Z+57, r24	; 0x39
    19e0:	92 af       	std	Z+58, r25	; 0x3a
    19e2:	a3 af       	std	Z+59, r26	; 0x3b
    19e4:	b4 af       	std	Z+60, r27	; 0x3c
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    19e6:	fd 96       	adiw	r30, 0x3d	; 61
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	a2 81       	ldd	r26, Z+2	; 0x02
    19ee:	b3 81       	ldd	r27, Z+3	; 0x03
    19f0:	82 1b       	sub	r24, r18
    19f2:	93 0b       	sbc	r25, r19
    19f4:	a4 0b       	sbc	r26, r20
    19f6:	b5 0b       	sbc	r27, r21
    19f8:	38 96       	adiw	r30, 0x08	; 8
    19fa:	80 83       	st	Z, r24
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	a2 83       	std	Z+2, r26	; 0x02
    1a00:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	08 95       	ret

00001a10 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	e0 91 49 01 	lds	r30, 0x0149
    1a16:	f0 91 4a 01 	lds	r31, 0x014A
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	25 e1       	ldi	r18, 0x15	; 21
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	bc 01       	movw	r22, r24
    1a22:	62 9f       	mul	r22, r18
    1a24:	c0 01       	movw	r24, r0
    1a26:	63 9f       	mul	r22, r19
    1a28:	90 0d       	add	r25, r0
    1a2a:	72 9f       	mul	r23, r18
    1a2c:	90 0d       	add	r25, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	e8 0f       	add	r30, r24
    1a32:	f9 1f       	adc	r31, r25
    1a34:	80 ad       	ldd	r24, Z+56	; 0x38
    1a36:	86 95       	lsr	r24
    1a38:	8f 70       	andi	r24, 0x0F	; 15
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <Timebase_UpCounter_Expired+0x30>
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a40:	84 2f       	mov	r24, r20
    1a42:	08 95       	ret

00001a44 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1a44:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1a46:	e0 91 49 01 	lds	r30, 0x0149
    1a4a:	f0 91 4a 01 	lds	r31, 0x014A
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	85 e1       	ldi	r24, 0x15	; 21
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	bc 01       	movw	r22, r24
    1a58:	26 9f       	mul	r18, r22
    1a5a:	c0 01       	movw	r24, r0
    1a5c:	27 9f       	mul	r18, r23
    1a5e:	90 0d       	add	r25, r0
    1a60:	36 9f       	mul	r19, r22
    1a62:	90 0d       	add	r25, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	e8 0f       	add	r30, r24
    1a68:	f9 1f       	adc	r31, r25
    1a6a:	80 ad       	ldd	r24, Z+56	; 0x38
    1a6c:	86 95       	lsr	r24
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	11 f0       	breq	.+4      	; 0x1a78 <Timebase_UpCounter_Expired_Event+0x34>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1a78:	84 2f       	mov	r24, r20
    1a7a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Timebase_UpCounter_Reset>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a80:	08 95       	ret

00001a82 <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1a86:	c0 91 49 01 	lds	r28, 0x0149
    1a8a:	d0 91 4a 01 	lds	r29, 0x014A
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1a90:	25 e1       	ldi	r18, 0x15	; 21
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	e2 9f       	mul	r30, r18
    1a98:	c0 01       	movw	r24, r0
    1a9a:	e3 9f       	mul	r30, r19
    1a9c:	90 0d       	add	r25, r0
    1a9e:	f2 9f       	mul	r31, r18
    1aa0:	90 0d       	add	r25, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	c8 0f       	add	r28, r24
    1aa6:	d9 1f       	adc	r29, r25
    1aa8:	88 ad       	ldd	r24, Y+56	; 0x38
    1aaa:	80 fd       	sbrc	r24, 0
    1aac:	16 c0       	rjmp	.+44     	; 0x1ada <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e7 5b       	subi	r30, 0xB7	; 183
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	cb 5b       	subi	r28, 0xBB	; 187
    1ab6:	df 4f       	sbci	r29, 0xFF	; 255
    1ab8:	88 81       	ld	r24, Y
    1aba:	99 81       	ldd	r25, Y+1	; 0x01
    1abc:	aa 81       	ldd	r26, Y+2	; 0x02
    1abe:	bb 81       	ldd	r27, Y+3	; 0x03
    1ac0:	c5 54       	subi	r28, 0x45	; 69
    1ac2:	d0 40       	sbci	r29, 0x00	; 0
    1ac4:	84 0f       	add	r24, r20
    1ac6:	95 1f       	adc	r25, r21
    1ac8:	a6 1f       	adc	r26, r22
    1aca:	b7 1f       	adc	r27, r23
    1acc:	80 83       	st	Z, r24
    1ace:	91 83       	std	Z+1, r25	; 0x01
    1ad0:	a2 83       	std	Z+2, r26	; 0x02
    1ad2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1ad4:	88 ad       	ldd	r24, Y+56	; 0x38
    1ad6:	81 60       	ori	r24, 0x01	; 1
    1ad8:	88 af       	std	Y+56, r24	; 0x38
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1ae0:	e0 91 49 01 	lds	r30, 0x0149
    1ae4:	f0 91 4a 01 	lds	r31, 0x014A
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1aea:	25 e1       	ldi	r18, 0x15	; 21
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	ac 01       	movw	r20, r24
    1af0:	42 9f       	mul	r20, r18
    1af2:	c0 01       	movw	r24, r0
    1af4:	43 9f       	mul	r20, r19
    1af6:	90 0d       	add	r25, r0
    1af8:	52 9f       	mul	r21, r18
    1afa:	90 0d       	add	r25, r0
    1afc:	11 24       	eor	r1, r1
    1afe:	e8 0f       	add	r30, r24
    1b00:	f9 1f       	adc	r31, r25
    1b02:	df 01       	movw	r26, r30
    1b04:	ab 5b       	subi	r26, 0xBB	; 187
    1b06:	bf 4f       	sbci	r27, 0xFF	; 255
    1b08:	e7 5b       	subi	r30, 0xB7	; 183
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	20 81       	ld	r18, Z
    1b0e:	31 81       	ldd	r19, Z+1	; 0x01
    1b10:	42 81       	ldd	r20, Z+2	; 0x02
    1b12:	53 81       	ldd	r21, Z+3	; 0x03
    1b14:	8d 91       	ld	r24, X+
    1b16:	9d 91       	ld	r25, X+
    1b18:	0d 90       	ld	r0, X+
    1b1a:	bc 91       	ld	r27, X
    1b1c:	a0 2d       	mov	r26, r0
    1b1e:	28 1b       	sub	r18, r24
    1b20:	39 0b       	sbc	r19, r25
    1b22:	4a 0b       	sbc	r20, r26
    1b24:	5b 0b       	sbc	r21, r27
    1b26:	57 ff       	sbrs	r21, 7
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e0       	ldi	r20, 0x00	; 0
    1b30:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1b32:	b9 01       	movw	r22, r18
    1b34:	ca 01       	movw	r24, r20
    1b36:	08 95       	ret

00001b38 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1b3c:	c0 91 49 01 	lds	r28, 0x0149
    1b40:	d0 91 4a 01 	lds	r29, 0x014A
    1b44:	68 2f       	mov	r22, r24
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1b48:	85 e1       	ldi	r24, 0x15	; 21
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	68 9f       	mul	r22, r24
    1b4e:	f0 01       	movw	r30, r0
    1b50:	69 9f       	mul	r22, r25
    1b52:	f0 0d       	add	r31, r0
    1b54:	78 9f       	mul	r23, r24
    1b56:	f0 0d       	add	r31, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	ec 0f       	add	r30, r28
    1b5c:	fd 1f       	adc	r31, r29
    1b5e:	df 01       	movw	r26, r30
    1b60:	ab 5b       	subi	r26, 0xBB	; 187
    1b62:	bf 4f       	sbci	r27, 0xFF	; 255
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	20 81       	ld	r18, Z
    1b6a:	31 81       	ldd	r19, Z+1	; 0x01
    1b6c:	42 81       	ldd	r20, Z+2	; 0x02
    1b6e:	53 81       	ldd	r21, Z+3	; 0x03
    1b70:	8d 91       	ld	r24, X+
    1b72:	9d 91       	ld	r25, X+
    1b74:	0d 90       	ld	r0, X+
    1b76:	bc 91       	ld	r27, X
    1b78:	a0 2d       	mov	r26, r0
    1b7a:	28 1b       	sub	r18, r24
    1b7c:	39 0b       	sbc	r19, r25
    1b7e:	4a 0b       	sbc	r20, r26
    1b80:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1b82:	57 fd       	sbrc	r21, 7
    1b84:	07 c0       	rjmp	.+14     	; 0x1b94 <Timebase_UpCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1b86:	21 15       	cp	r18, r1
    1b88:	31 05       	cpc	r19, r1
    1b8a:	41 05       	cpc	r20, r1
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	11 f0       	breq	.+4      	; 0x1b94 <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	12 c0       	rjmp	.+36     	; 0x1bb8 <Timebase_UpCounter_Period_Value_Expired+0x80>
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	85 e1       	ldi	r24, 0x15	; 21
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	ac 01       	movw	r20, r24
    1b9c:	64 9f       	mul	r22, r20
    1b9e:	c0 01       	movw	r24, r0
    1ba0:	65 9f       	mul	r22, r21
    1ba2:	90 0d       	add	r25, r0
    1ba4:	74 9f       	mul	r23, r20
    1ba6:	90 0d       	add	r25, r0
    1ba8:	11 24       	eor	r1, r1
    1baa:	c8 0f       	add	r28, r24
    1bac:	d9 1f       	adc	r29, r25
    1bae:	88 ad       	ldd	r24, Y+56	; 0x38
    1bb0:	80 ff       	sbrs	r24, 0
    1bb2:	21 e0       	ldi	r18, 0x01	; 1
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1bb8:	82 2f       	mov	r24, r18
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	08 95       	ret

00001bc0 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1bc0:	1f 93       	push	r17
    1bc2:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1bc4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <Timebase_UpCounter_Period_Value_Expired>
    1bc8:	81 30       	cpi	r24, 0x01	; 1
    1bca:	11 f0       	breq	.+4      	; 0x1bd0 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	16 c0       	rjmp	.+44     	; 0x1bfc <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1bd0:	e0 91 49 01 	lds	r30, 0x0149
    1bd4:	f0 91 4a 01 	lds	r31, 0x014A
    1bd8:	21 2f       	mov	r18, r17
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	85 e1       	ldi	r24, 0x15	; 21
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	ac 01       	movw	r20, r24
    1be2:	24 9f       	mul	r18, r20
    1be4:	c0 01       	movw	r24, r0
    1be6:	25 9f       	mul	r18, r21
    1be8:	90 0d       	add	r25, r0
    1bea:	34 9f       	mul	r19, r20
    1bec:	90 0d       	add	r25, r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	e8 0f       	add	r30, r24
    1bf2:	f9 1f       	adc	r31, r25
    1bf4:	80 ad       	ldd	r24, Z+56	; 0x38
    1bf6:	8e 7f       	andi	r24, 0xFE	; 254
    1bf8:	80 af       	std	Z+56, r24	; 0x38
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1bfc:	1f 91       	pop	r17
    1bfe:	08 95       	ret

00001c00 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <Timebase_UpCounter_Update>
  }
}
    1c06:	08 95       	ret

00001c08 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	0e 94 c3 0b 	call	0x1786	; 0x1786 <Timebase_UpCounter_Reset>
  }
}
    1c0e:	08 95       	ret

00001c10 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1c10:	e0 91 49 01 	lds	r30, 0x0149
    1c14:	f0 91 4a 01 	lds	r31, 0x014A
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 01       	movw	r18, r24
    1c1c:	44 e0       	ldi	r20, 0x04	; 4
    1c1e:	22 0f       	add	r18, r18
    1c20:	33 1f       	adc	r19, r19
    1c22:	4a 95       	dec	r20
    1c24:	e1 f7       	brne	.-8      	; 0x1c1e <Timebase_DownCounter_SS_Get_Status+0xe>
    1c26:	28 0f       	add	r18, r24
    1c28:	39 1f       	adc	r19, r25
    1c2a:	e2 0f       	add	r30, r18
    1c2c:	f3 1f       	adc	r31, r19
    1c2e:	e3 5b       	subi	r30, 0xB3	; 179
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1c36:	8f 70       	andi	r24, 0x0F	; 15
    1c38:	08 95       	ret

00001c3a <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c3a:	e0 91 49 01 	lds	r30, 0x0149
    1c3e:	f0 91 4a 01 	lds	r31, 0x014A
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9c 01       	movw	r18, r24
    1c46:	54 e0       	ldi	r21, 0x04	; 4
    1c48:	22 0f       	add	r18, r18
    1c4a:	33 1f       	adc	r19, r19
    1c4c:	5a 95       	dec	r21
    1c4e:	e1 f7       	brne	.-8      	; 0x1c48 <Timebase_DownCounter_SS_Set_Status+0xe>
    1c50:	28 0f       	add	r18, r24
    1c52:	39 1f       	adc	r19, r25
    1c54:	e2 0f       	add	r30, r18
    1c56:	f3 1f       	adc	r31, r19
    1c58:	e3 5b       	subi	r30, 0xB3	; 179
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	6f 70       	andi	r22, 0x0F	; 15
    1c5e:	66 0f       	add	r22, r22
    1c60:	80 81       	ld	r24, Z
    1c62:	81 7e       	andi	r24, 0xE1	; 225
    1c64:	86 2b       	or	r24, r22
    1c66:	80 83       	st	Z, r24
}
    1c68:	08 95       	ret

00001c6a <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1c6a:	e0 91 49 01 	lds	r30, 0x0149
    1c6e:	f0 91 4a 01 	lds	r31, 0x014A
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 01       	movw	r18, r24
    1c76:	64 e0       	ldi	r22, 0x04	; 4
    1c78:	22 0f       	add	r18, r18
    1c7a:	33 1f       	adc	r19, r19
    1c7c:	6a 95       	dec	r22
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <Timebase_DownCounter_SS_Get_Value+0xe>
    1c80:	28 0f       	add	r18, r24
    1c82:	39 1f       	adc	r19, r25
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	ea 5a       	subi	r30, 0xAA	; 170
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	08 95       	ret

00001c96 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c96:	e0 91 49 01 	lds	r30, 0x0149
    1c9a:	f0 91 4a 01 	lds	r31, 0x014A
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9c 01       	movw	r18, r24
    1ca2:	a4 e0       	ldi	r26, 0x04	; 4
    1ca4:	22 0f       	add	r18, r18
    1ca6:	33 1f       	adc	r19, r19
    1ca8:	aa 95       	dec	r26
    1caa:	e1 f7       	brne	.-8      	; 0x1ca4 <Timebase_DownCounter_SS_Set_Value+0xe>
    1cac:	28 0f       	add	r18, r24
    1cae:	39 1f       	adc	r19, r25
    1cb0:	e2 0f       	add	r30, r18
    1cb2:	f3 1f       	adc	r31, r19
    1cb4:	ea 5a       	subi	r30, 0xAA	; 170
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	40 83       	st	Z, r20
    1cba:	51 83       	std	Z+1, r21	; 0x01
    1cbc:	62 83       	std	Z+2, r22	; 0x02
    1cbe:	73 83       	std	Z+3, r23	; 0x03
}
    1cc0:	08 95       	ret

00001cc2 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1cc2:	e0 91 49 01 	lds	r30, 0x0149
    1cc6:	f0 91 4a 01 	lds	r31, 0x014A
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	9c 01       	movw	r18, r24
    1cce:	b4 e0       	ldi	r27, 0x04	; 4
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	ba 95       	dec	r27
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1cd8:	28 0f       	add	r18, r24
    1cda:	39 1f       	adc	r19, r25
    1cdc:	e2 0f       	add	r30, r18
    1cde:	f3 1f       	adc	r31, r19
    1ce0:	e2 5b       	subi	r30, 0xB2	; 178
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	08 95       	ret

00001cee <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1cee:	e0 91 49 01 	lds	r30, 0x0149
    1cf2:	f0 91 4a 01 	lds	r31, 0x014A
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	9c 01       	movw	r18, r24
    1cfa:	44 e0       	ldi	r20, 0x04	; 4
    1cfc:	22 0f       	add	r18, r18
    1cfe:	33 1f       	adc	r19, r19
    1d00:	4a 95       	dec	r20
    1d02:	e1 f7       	brne	.-8      	; 0x1cfc <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1d04:	28 0f       	add	r18, r24
    1d06:	39 1f       	adc	r19, r25
    1d08:	e2 0f       	add	r30, r18
    1d0a:	f3 1f       	adc	r31, r19
    1d0c:	ee 5a       	subi	r30, 0xAE	; 174
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	08 95       	ret

00001d1a <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1d1a:	e0 91 49 01 	lds	r30, 0x0149
    1d1e:	f0 91 4a 01 	lds	r31, 0x014A
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 01       	movw	r18, r24
    1d26:	a4 e0       	ldi	r26, 0x04	; 4
    1d28:	22 0f       	add	r18, r18
    1d2a:	33 1f       	adc	r19, r19
    1d2c:	aa 95       	dec	r26
    1d2e:	e1 f7       	brne	.-8      	; 0x1d28 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1d30:	28 0f       	add	r18, r24
    1d32:	39 1f       	adc	r19, r25
    1d34:	e2 0f       	add	r30, r18
    1d36:	f3 1f       	adc	r31, r19
    1d38:	e2 5b       	subi	r30, 0xB2	; 178
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	40 83       	st	Z, r20
    1d3e:	51 83       	std	Z+1, r21	; 0x01
    1d40:	62 83       	std	Z+2, r22	; 0x02
    1d42:	73 83       	std	Z+3, r23	; 0x03
}
    1d44:	08 95       	ret

00001d46 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1d46:	e0 91 49 01 	lds	r30, 0x0149
    1d4a:	f0 91 4a 01 	lds	r31, 0x014A
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9c 01       	movw	r18, r24
    1d52:	b4 e0       	ldi	r27, 0x04	; 4
    1d54:	22 0f       	add	r18, r18
    1d56:	33 1f       	adc	r19, r19
    1d58:	ba 95       	dec	r27
    1d5a:	e1 f7       	brne	.-8      	; 0x1d54 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1d5c:	28 0f       	add	r18, r24
    1d5e:	39 1f       	adc	r19, r25
    1d60:	e2 0f       	add	r30, r18
    1d62:	f3 1f       	adc	r31, r19
    1d64:	ee 5a       	subi	r30, 0xAE	; 174
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	40 83       	st	Z, r20
    1d6a:	51 83       	std	Z+1, r21	; 0x01
    1d6c:	62 83       	std	Z+2, r22	; 0x02
    1d6e:	73 83       	std	Z+3, r23	; 0x03
}
    1d70:	08 95       	ret

00001d72 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1d72:	e0 91 49 01 	lds	r30, 0x0149
    1d76:	f0 91 4a 01 	lds	r31, 0x014A
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9c 01       	movw	r18, r24
    1d7e:	44 e0       	ldi	r20, 0x04	; 4
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	4a 95       	dec	r20
    1d86:	e1 f7       	brne	.-8      	; 0x1d80 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1d88:	28 0f       	add	r18, r24
    1d8a:	39 1f       	adc	r19, r25
    1d8c:	e2 0f       	add	r30, r18
    1d8e:	f3 1f       	adc	r31, r19
    1d90:	e6 5a       	subi	r30, 0xA6	; 166
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	60 81       	ld	r22, Z
    1d96:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1d98:	82 81       	ldd	r24, Z+2	; 0x02
    1d9a:	93 81       	ldd	r25, Z+3	; 0x03
    1d9c:	08 95       	ret

00001d9e <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1d9e:	e0 91 49 01 	lds	r30, 0x0149
    1da2:	f0 91 4a 01 	lds	r31, 0x014A
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1daa:	77 ff       	sbrs	r23, 7
    1dac:	11 c0       	rjmp	.+34     	; 0x1dd0 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1dae:	c9 01       	movw	r24, r18
    1db0:	b4 e0       	ldi	r27, 0x04	; 4
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	ba 95       	dec	r27
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1dba:	82 0f       	add	r24, r18
    1dbc:	93 1f       	adc	r25, r19
    1dbe:	e8 0f       	add	r30, r24
    1dc0:	f9 1f       	adc	r31, r25
    1dc2:	e6 5a       	subi	r30, 0xA6	; 166
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	10 82       	st	Z, r1
    1dc8:	11 82       	std	Z+1, r1	; 0x01
    1dca:	12 82       	std	Z+2, r1	; 0x02
    1dcc:	13 82       	std	Z+3, r1	; 0x03
    1dce:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1dd0:	c9 01       	movw	r24, r18
    1dd2:	a4 e0       	ldi	r26, 0x04	; 4
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	aa 95       	dec	r26
    1dda:	e1 f7       	brne	.-8      	; 0x1dd4 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1ddc:	82 0f       	add	r24, r18
    1dde:	93 1f       	adc	r25, r19
    1de0:	e8 0f       	add	r30, r24
    1de2:	f9 1f       	adc	r31, r25
    1de4:	e6 5a       	subi	r30, 0xA6	; 166
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	40 83       	st	Z, r20
    1dea:	51 83       	std	Z+1, r21	; 0x01
    1dec:	62 83       	std	Z+2, r22	; 0x02
    1dee:	73 83       	std	Z+3, r23	; 0x03
    1df0:	08 95       	ret

00001df2 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1df2:	e0 91 49 01 	lds	r30, 0x0149
    1df6:	f0 91 4a 01 	lds	r31, 0x014A
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	44 e0       	ldi	r20, 0x04	; 4
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	4a 95       	dec	r20
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1e08:	28 0f       	add	r18, r24
    1e0a:	39 1f       	adc	r19, r25
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	e3 5b       	subi	r30, 0xB3	; 179
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1e16:	81 70       	andi	r24, 0x01	; 1
    1e18:	08 95       	ret

00001e1a <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1e1a:	e0 91 49 01 	lds	r30, 0x0149
    1e1e:	f0 91 4a 01 	lds	r31, 0x014A
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9c 01       	movw	r18, r24
    1e26:	54 e0       	ldi	r21, 0x04	; 4
    1e28:	22 0f       	add	r18, r18
    1e2a:	33 1f       	adc	r19, r19
    1e2c:	5a 95       	dec	r21
    1e2e:	e1 f7       	brne	.-8      	; 0x1e28 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1e30:	28 0f       	add	r18, r24
    1e32:	39 1f       	adc	r19, r25
    1e34:	e2 0f       	add	r30, r18
    1e36:	f3 1f       	adc	r31, r19
    1e38:	e3 5b       	subi	r30, 0xB3	; 179
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	81 60       	ori	r24, 0x01	; 1
    1e40:	80 83       	st	Z, r24
}
    1e42:	08 95       	ret

00001e44 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e44:	e0 91 49 01 	lds	r30, 0x0149
    1e48:	f0 91 4a 01 	lds	r31, 0x014A
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	9c 01       	movw	r18, r24
    1e50:	64 e0       	ldi	r22, 0x04	; 4
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	6a 95       	dec	r22
    1e58:	e1 f7       	brne	.-8      	; 0x1e52 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1e5a:	28 0f       	add	r18, r24
    1e5c:	39 1f       	adc	r19, r25
    1e5e:	e2 0f       	add	r30, r18
    1e60:	f3 1f       	adc	r31, r19
    1e62:	e3 5b       	subi	r30, 0xB3	; 179
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 81       	ld	r24, Z
    1e68:	8e 7f       	andi	r24, 0xFE	; 254
    1e6a:	80 83       	st	Z, r24
}
    1e6c:	08 95       	ret

00001e6e <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e6e:	e0 91 49 01 	lds	r30, 0x0149
    1e72:	f0 91 4a 01 	lds	r31, 0x014A
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	9c 01       	movw	r18, r24
    1e7a:	74 e0       	ldi	r23, 0x04	; 4
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	7a 95       	dec	r23
    1e82:	e1 f7       	brne	.-8      	; 0x1e7c <Timebase_DownCounter_SS_Reset+0xe>
    1e84:	28 0f       	add	r18, r24
    1e86:	39 1f       	adc	r19, r25
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	ee 5a       	subi	r30, 0xAE	; 174
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	10 82       	st	Z, r1
    1e92:	11 82       	std	Z+1, r1	; 0x01
    1e94:	12 82       	std	Z+2, r1	; 0x02
    1e96:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e98:	12 92       	st	-Z, r1
    1e9a:	12 92       	st	-Z, r1
    1e9c:	12 92       	st	-Z, r1
    1e9e:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ea0:	38 96       	adiw	r30, 0x08	; 8
    1ea2:	10 82       	st	Z, r1
    1ea4:	11 82       	std	Z+1, r1	; 0x01
    1ea6:	12 82       	std	Z+2, r1	; 0x02
    1ea8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1eaa:	39 97       	sbiw	r30, 0x09	; 9
    1eac:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1eae:	80 7e       	andi	r24, 0xE0	; 224
    1eb0:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1eb2:	08 95       	ret

00001eb4 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1eb4:	e0 91 49 01 	lds	r30, 0x0149
    1eb8:	f0 91 4a 01 	lds	r31, 0x014A
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 01       	movw	r18, r24
    1ec0:	a4 e0       	ldi	r26, 0x04	; 4
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	aa 95       	dec	r26
    1ec8:	e1 f7       	brne	.-8      	; 0x1ec2 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1eca:	28 0f       	add	r18, r24
    1ecc:	39 1f       	adc	r19, r25
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	ee 5a       	subi	r30, 0xAE	; 174
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	10 82       	st	Z, r1
    1ed8:	11 82       	std	Z+1, r1	; 0x01
    1eda:	12 82       	std	Z+2, r1	; 0x02
    1edc:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ede:	12 92       	st	-Z, r1
    1ee0:	12 92       	st	-Z, r1
    1ee2:	12 92       	st	-Z, r1
    1ee4:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ee6:	38 96       	adiw	r30, 0x08	; 8
    1ee8:	10 82       	st	Z, r1
    1eea:	11 82       	std	Z+1, r1	; 0x01
    1eec:	12 82       	std	Z+2, r1	; 0x02
    1eee:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ef0:	39 97       	sbiw	r30, 0x09	; 9
    1ef2:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ef4:	80 7e       	andi	r24, 0xE0	; 224
    1ef6:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1ef8:	08 95       	ret

00001efa <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1efa:	e0 91 49 01 	lds	r30, 0x0149
    1efe:	f0 91 4a 01 	lds	r31, 0x014A
    1f02:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1f04:	9c 01       	movw	r18, r24
    1f06:	b4 e0       	ldi	r27, 0x04	; 4
    1f08:	22 0f       	add	r18, r18
    1f0a:	33 1f       	adc	r19, r19
    1f0c:	ba 95       	dec	r27
    1f0e:	e1 f7       	brne	.-8      	; 0x1f08 <Timebase_DownCounter_SS_Start+0xe>
    1f10:	28 0f       	add	r18, r24
    1f12:	39 1f       	adc	r19, r25
    1f14:	e2 0f       	add	r30, r18
    1f16:	f3 1f       	adc	r31, r19
    1f18:	e3 5b       	subi	r30, 0xB3	; 179
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	90 81       	ld	r25, Z
    1f1e:	89 2f       	mov	r24, r25
    1f20:	86 95       	lsr	r24
    1f22:	8f 70       	andi	r24, 0x0F	; 15
    1f24:	81 30       	cpi	r24, 0x01	; 1
    1f26:	19 f0       	breq	.+6      	; 0x1f2e <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f28:	91 7e       	andi	r25, 0xE1	; 225
    1f2a:	92 60       	ori	r25, 0x02	; 2
    1f2c:	90 83       	st	Z, r25
    1f2e:	08 95       	ret

00001f30 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f30:	e0 91 49 01 	lds	r30, 0x0149
    1f34:	f0 91 4a 01 	lds	r31, 0x014A
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1f3a:	9c 01       	movw	r18, r24
    1f3c:	44 e0       	ldi	r20, 0x04	; 4
    1f3e:	22 0f       	add	r18, r18
    1f40:	33 1f       	adc	r19, r19
    1f42:	4a 95       	dec	r20
    1f44:	e1 f7       	brne	.-8      	; 0x1f3e <Timebase_DownCounter_SS_Stop+0xe>
    1f46:	28 0f       	add	r18, r24
    1f48:	39 1f       	adc	r19, r25
    1f4a:	e2 0f       	add	r30, r18
    1f4c:	f3 1f       	adc	r31, r19
    1f4e:	e3 5b       	subi	r30, 0xB3	; 179
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	90 81       	ld	r25, Z
    1f54:	89 2f       	mov	r24, r25
    1f56:	86 95       	lsr	r24
    1f58:	8f 70       	andi	r24, 0x0F	; 15
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f5e:	91 7e       	andi	r25, 0xE1	; 225
    1f60:	94 60       	ori	r25, 0x04	; 4
    1f62:	90 83       	st	Z, r25
    1f64:	08 95       	ret

00001f66 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1f66:	2f 92       	push	r2
    1f68:	3f 92       	push	r3
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	00 d0       	rcall	.+0      	; 0x1f8c <Timebase_DownCounter_SS_Set_Securely+0x26>
    1f8c:	00 d0       	rcall	.+0      	; 0x1f8e <Timebase_DownCounter_SS_Set_Securely+0x28>
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	4a 01       	movw	r8, r20
    1f94:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f96:	20 91 49 01 	lds	r18, 0x0149
    1f9a:	30 91 4a 01 	lds	r19, 0x014A
    1f9e:	3c 83       	std	Y+4, r19	; 0x04
    1fa0:	2b 83       	std	Y+3, r18	; 0x03
    1fa2:	a8 2f       	mov	r26, r24
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	ba 83       	std	Y+2, r27	; 0x02
    1fa8:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1faa:	fd 01       	movw	r30, r26
    1fac:	64 e0       	ldi	r22, 0x04	; 4
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	6a 95       	dec	r22
    1fb4:	e1 f7       	brne	.-8      	; 0x1fae <Timebase_DownCounter_SS_Set_Securely+0x48>
    1fb6:	ea 0f       	add	r30, r26
    1fb8:	fb 1f       	adc	r31, r27
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	e3 5b       	subi	r30, 0xB3	; 179
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	ed 54       	subi	r30, 0x4D	; 77
    1fc6:	f0 40       	sbci	r31, 0x00	; 0
    1fc8:	86 95       	lsr	r24
    1fca:	8f 70       	andi	r24, 0x0F	; 15
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1fce:	72 c0       	rjmp	.+228    	; 0x20b4 <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1fd0:	ea 5a       	subi	r30, 0xAA	; 170
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	80 82       	st	Z, r8
    1fd6:	91 82       	std	Z+1, r9	; 0x01
    1fd8:	a2 82       	std	Z+2, r10	; 0x02
    1fda:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1fdc:	f9 01       	movw	r30, r18
    1fde:	c0 84       	ldd	r12, Z+8	; 0x08
    1fe0:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1fe2:	22 84       	ldd	r2, Z+10	; 0x0a
    1fe4:	33 84       	ldd	r3, Z+11	; 0x0b
    1fe6:	44 84       	ldd	r4, Z+12	; 0x0c
    1fe8:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1fea:	21 81       	ldd	r18, Z+1	; 0x01
    1fec:	32 81       	ldd	r19, Z+2	; 0x02
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    1ffa:	7b 01       	movw	r14, r22
    1ffc:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    2000:	bc 81       	ldd	r27, Y+4	; 0x04
    2002:	11 96       	adiw	r26, 0x01	; 1
    2004:	2d 91       	ld	r18, X+
    2006:	3c 91       	ld	r19, X
    2008:	12 97       	sbiw	r26, 0x02	; 2
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	c5 01       	movw	r24, r10
    2010:	b4 01       	movw	r22, r8
    2012:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    2016:	c9 01       	movw	r24, r18
    2018:	da 01       	movw	r26, r20
    201a:	3c 01       	movw	r6, r24
    201c:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    201e:	56 01       	movw	r10, r12
    2020:	cc 24       	eor	r12, r12
    2022:	dd 24       	eor	r13, r13
    2024:	ae 0c       	add	r10, r14
    2026:	bf 1c       	adc	r11, r15
    2028:	c0 1e       	adc	r12, r16
    202a:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    202c:	eb 81       	ldd	r30, Y+3	; 0x03
    202e:	fc 81       	ldd	r31, Y+4	; 0x04
    2030:	81 81       	ldd	r24, Z+1	; 0x01
    2032:	92 81       	ldd	r25, Z+2	; 0x02
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	a8 16       	cp	r10, r24
    203a:	b9 06       	cpc	r11, r25
    203c:	ca 06       	cpc	r12, r26
    203e:	db 06       	cpc	r13, r27
    2040:	94 f0       	brlt	.+36     	; 0x2066 <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    2042:	08 94       	sec
    2044:	61 1c       	adc	r6, r1
    2046:	71 1c       	adc	r7, r1
    2048:	81 1c       	adc	r8, r1
    204a:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    204c:	21 81       	ldd	r18, Z+1	; 0x01
    204e:	32 81       	ldd	r19, Z+2	; 0x02
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	c6 01       	movw	r24, r12
    2056:	b5 01       	movw	r22, r10
    2058:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    205c:	ac 01       	movw	r20, r24
    205e:	cb 01       	movw	r24, r22
    2060:	da 01       	movw	r26, r20
    2062:	5c 01       	movw	r10, r24
    2064:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2066:	e9 81       	ldd	r30, Y+1	; 0x01
    2068:	fa 81       	ldd	r31, Y+2	; 0x02
    206a:	54 e0       	ldi	r21, 0x04	; 4
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	5a 95       	dec	r21
    2072:	e1 f7       	brne	.-8      	; 0x206c <Timebase_DownCounter_SS_Set_Securely+0x106>
    2074:	29 81       	ldd	r18, Y+1	; 0x01
    2076:	3a 81       	ldd	r19, Y+2	; 0x02
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	e8 0f       	add	r30, r24
    2082:	f9 1f       	adc	r31, r25
    2084:	e2 5b       	subi	r30, 0xB2	; 178
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	26 0c       	add	r2, r6
    208a:	37 1c       	adc	r3, r7
    208c:	48 1c       	adc	r4, r8
    208e:	59 1c       	adc	r5, r9
    2090:	21 92       	st	Z+, r2
    2092:	31 92       	st	Z+, r3
    2094:	41 92       	st	Z+, r4
    2096:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2098:	a0 82       	st	Z, r10
    209a:	b1 82       	std	Z+1, r11	; 0x01
    209c:	c2 82       	std	Z+2, r12	; 0x02
    209e:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    20a0:	35 97       	sbiw	r30, 0x05	; 5
    20a2:	90 81       	ld	r25, Z
    20a4:	89 2f       	mov	r24, r25
    20a6:	86 95       	lsr	r24
    20a8:	8f 70       	andi	r24, 0x0F	; 15
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    20ae:	91 7e       	andi	r25, 0xE1	; 225
    20b0:	92 60       	ori	r25, 0x02	; 2
    20b2:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	bf 90       	pop	r11
    20ce:	af 90       	pop	r10
    20d0:	9f 90       	pop	r9
    20d2:	8f 90       	pop	r8
    20d4:	7f 90       	pop	r7
    20d6:	6f 90       	pop	r6
    20d8:	5f 90       	pop	r5
    20da:	4f 90       	pop	r4
    20dc:	3f 90       	pop	r3
    20de:	2f 90       	pop	r2
    20e0:	08 95       	ret

000020e2 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    20e2:	e0 91 49 01 	lds	r30, 0x0149
    20e6:	f0 91 4a 01 	lds	r31, 0x014A
    20ea:	a8 2f       	mov	r26, r24
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	9d 01       	movw	r18, r26
    20f0:	94 e0       	ldi	r25, 0x04	; 4
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	9a 95       	dec	r25
    20f8:	e1 f7       	brne	.-8      	; 0x20f2 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    20fa:	2a 0f       	add	r18, r26
    20fc:	3b 1f       	adc	r19, r27
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	ee 5a       	subi	r30, 0xAE	; 174
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	10 82       	st	Z, r1
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	12 82       	std	Z+2, r1	; 0x02
    210c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    210e:	12 92       	st	-Z, r1
    2110:	12 92       	st	-Z, r1
    2112:	12 92       	st	-Z, r1
    2114:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2116:	38 96       	adiw	r30, 0x08	; 8
    2118:	10 82       	st	Z, r1
    211a:	11 82       	std	Z+1, r1	; 0x01
    211c:	12 82       	std	Z+2, r1	; 0x02
    211e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2120:	39 97       	sbiw	r30, 0x09	; 9
    2122:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2124:	90 7e       	andi	r25, 0xE0	; 224
    2126:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2128:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <Timebase_DownCounter_SS_Set_Securely>
} 
    212c:	08 95       	ret

0000212e <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    212e:	2f 92       	push	r2
    2130:	3f 92       	push	r3
    2132:	4f 92       	push	r4
    2134:	5f 92       	push	r5
    2136:	6f 92       	push	r6
    2138:	7f 92       	push	r7
    213a:	8f 92       	push	r8
    213c:	9f 92       	push	r9
    213e:	af 92       	push	r10
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	df 92       	push	r13
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2152:	c0 90 49 01 	lds	r12, 0x0149
    2156:	d0 90 4a 01 	lds	r13, 0x014A
    215a:	08 2f       	mov	r16, r24
    215c:	10 e0       	ldi	r17, 0x00	; 0
    215e:	e8 01       	movw	r28, r16
    2160:	34 e0       	ldi	r19, 0x04	; 4
    2162:	cc 0f       	add	r28, r28
    2164:	dd 1f       	adc	r29, r29
    2166:	3a 95       	dec	r19
    2168:	e1 f7       	brne	.-8      	; 0x2162 <Timebase_DownCounter_SS_Update+0x34>
    216a:	c0 0f       	add	r28, r16
    216c:	d1 1f       	adc	r29, r17
    216e:	cc 0d       	add	r28, r12
    2170:	dd 1d       	adc	r29, r13
    2172:	c3 5b       	subi	r28, 0xB3	; 179
    2174:	df 4f       	sbci	r29, 0xFF	; 255
    2176:	88 81       	ld	r24, Y
    2178:	cd 54       	subi	r28, 0x4D	; 77
    217a:	d0 40       	sbci	r29, 0x00	; 0
    217c:	86 95       	lsr	r24
    217e:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	09 f0       	breq	.+2      	; 0x2186 <Timebase_DownCounter_SS_Update+0x58>
    2184:	5d c0       	rjmp	.+186    	; 0x2240 <Timebase_DownCounter_SS_Update+0x112>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2186:	f6 01       	movw	r30, r12
    2188:	80 85       	ldd	r24, Z+8	; 0x08
    218a:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    218c:	4c 01       	movw	r8, r24
    218e:	aa 24       	eor	r10, r10
    2190:	bb 24       	eor	r11, r11
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2192:	82 85       	ldd	r24, Z+10	; 0x0a
    2194:	93 85       	ldd	r25, Z+11	; 0x0b
    2196:	a4 85       	ldd	r26, Z+12	; 0x0c
    2198:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    219a:	c2 5b       	subi	r28, 0xB2	; 178
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	28 80       	ld	r2, Y
    21a0:	39 80       	ldd	r3, Y+1	; 0x01
    21a2:	4a 80       	ldd	r4, Y+2	; 0x02
    21a4:	5b 80       	ldd	r5, Y+3	; 0x03
    21a6:	28 1a       	sub	r2, r24
    21a8:	39 0a       	sbc	r3, r25
    21aa:	4a 0a       	sbc	r4, r26
    21ac:	5b 0a       	sbc	r5, r27
    21ae:	57 fe       	sbrs	r5, 7
    21b0:	03 c0       	rjmp	.+6      	; 0x21b8 <Timebase_DownCounter_SS_Update+0x8a>
    21b2:	22 24       	eor	r2, r2
    21b4:	33 24       	eor	r3, r3
    21b6:	21 01       	movw	r4, r2
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    21b8:	f6 01       	movw	r30, r12
    21ba:	21 81       	ldd	r18, Z+1	; 0x01
    21bc:	32 81       	ldd	r19, Z+2	; 0x02
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	50 e0       	ldi	r21, 0x00	; 0
    21c2:	c2 01       	movw	r24, r4
    21c4:	b1 01       	movw	r22, r2
    21c6:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__mulsi3>
	temp_s += temp_ss;
    21ca:	f8 01       	movw	r30, r16
    21cc:	24 e0       	ldi	r18, 0x04	; 4
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	2a 95       	dec	r18
    21d4:	e1 f7       	brne	.-8      	; 0x21ce <Timebase_DownCounter_SS_Update+0xa0>
    21d6:	e0 0f       	add	r30, r16
    21d8:	f1 1f       	adc	r31, r17
    21da:	ec 0d       	add	r30, r12
    21dc:	fd 1d       	adc	r31, r13
    21de:	ef 01       	movw	r28, r30
    21e0:	ce 5a       	subi	r28, 0xAE	; 174
    21e2:	df 4f       	sbci	r29, 0xFF	; 255
    21e4:	28 81       	ld	r18, Y
    21e6:	39 81       	ldd	r19, Y+1	; 0x01
    21e8:	4a 81       	ldd	r20, Y+2	; 0x02
    21ea:	5b 81       	ldd	r21, Y+3	; 0x03
    21ec:	28 19       	sub	r18, r8
    21ee:	39 09       	sbc	r19, r9
    21f0:	4a 09       	sbc	r20, r10
    21f2:	5b 09       	sbc	r21, r11
    21f4:	26 0f       	add	r18, r22
    21f6:	37 1f       	adc	r19, r23
    21f8:	48 1f       	adc	r20, r24
    21fa:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21fc:	df 01       	movw	r26, r30
    21fe:	aa 5a       	subi	r26, 0xAA	; 170
    2200:	bf 4f       	sbci	r27, 0xFF	; 255
    2202:	2d 93       	st	X+, r18
    2204:	3d 93       	st	X+, r19
    2206:	4d 93       	st	X+, r20
    2208:	5c 93       	st	X, r21
    220a:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    220c:	12 16       	cp	r1, r18
    220e:	13 06       	cpc	r1, r19
    2210:	14 06       	cpc	r1, r20
    2212:	15 06       	cpc	r1, r21
    2214:	0c f4       	brge	.+2      	; 0x2218 <Timebase_DownCounter_SS_Update+0xea>
    2216:	48 c0       	rjmp	.+144    	; 0x22a8 <Timebase_DownCounter_SS_Update+0x17a>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2218:	18 82       	st	Y, r1
    221a:	19 82       	std	Y+1, r1	; 0x01
    221c:	1a 82       	std	Y+2, r1	; 0x02
    221e:	1b 82       	std	Y+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2220:	e2 5b       	subi	r30, 0xB2	; 178
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	10 82       	st	Z, r1
    2226:	11 82       	std	Z+1, r1	; 0x01
    2228:	12 82       	std	Z+2, r1	; 0x02
    222a:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    222c:	1d 92       	st	X+, r1
    222e:	1d 92       	st	X+, r1
    2230:	1d 92       	st	X+, r1
    2232:	1c 92       	st	X, r1
    2234:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2236:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2238:	80 7e       	andi	r24, 0xE0	; 224
    223a:	88 60       	ori	r24, 0x08	; 8
    223c:	80 83       	st	Z, r24
    223e:	34 c0       	rjmp	.+104    	; 0x22a8 <Timebase_DownCounter_SS_Update+0x17a>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2240:	82 30       	cpi	r24, 0x02	; 2
    2242:	91 f5       	brne	.+100    	; 0x22a8 <Timebase_DownCounter_SS_Update+0x17a>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2244:	f6 01       	movw	r30, r12
    2246:	60 84       	ldd	r6, Z+8	; 0x08
    2248:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    224a:	e2 84       	ldd	r14, Z+10	; 0x0a
    224c:	f3 84       	ldd	r15, Z+11	; 0x0b
    224e:	04 85       	ldd	r16, Z+12	; 0x0c
    2250:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2252:	ca 5a       	subi	r28, 0xAA	; 170
    2254:	df 4f       	sbci	r29, 0xFF	; 255
    2256:	28 80       	ld	r2, Y
    2258:	39 80       	ldd	r3, Y+1	; 0x01
    225a:	4a 80       	ldd	r4, Y+2	; 0x02
    225c:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    225e:	21 81       	ldd	r18, Z+1	; 0x01
    2260:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    2262:	a1 80       	ldd	r10, Z+1	; 0x01
    2264:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2266:	28 97       	sbiw	r28, 0x08	; 8
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	c2 01       	movw	r24, r4
    226e:	b1 01       	movw	r22, r2
    2270:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    2274:	e2 0e       	add	r14, r18
    2276:	f3 1e       	adc	r15, r19
    2278:	04 1f       	adc	r16, r20
    227a:	15 1f       	adc	r17, r21
    227c:	e9 92       	st	Y+, r14
    227e:	f9 92       	st	Y+, r15
    2280:	09 93       	st	Y+, r16
    2282:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2284:	cc 24       	eor	r12, r12
    2286:	dd 24       	eor	r13, r13
    2288:	c2 01       	movw	r24, r4
    228a:	b1 01       	movw	r22, r2
    228c:	a6 01       	movw	r20, r12
    228e:	95 01       	movw	r18, r10
    2290:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__divmodsi4>
    2294:	88 24       	eor	r8, r8
    2296:	99 24       	eor	r9, r9
    2298:	66 0e       	add	r6, r22
    229a:	77 1e       	adc	r7, r23
    229c:	88 1e       	adc	r8, r24
    229e:	99 1e       	adc	r9, r25
    22a0:	68 82       	st	Y, r6
    22a2:	79 82       	std	Y+1, r7	; 0x01
    22a4:	8a 82       	std	Y+2, r8	; 0x02
    22a6:	9b 82       	std	Y+3, r9	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    22a8:	df 91       	pop	r29
    22aa:	cf 91       	pop	r28
    22ac:	1f 91       	pop	r17
    22ae:	0f 91       	pop	r16
    22b0:	ff 90       	pop	r15
    22b2:	ef 90       	pop	r14
    22b4:	df 90       	pop	r13
    22b6:	cf 90       	pop	r12
    22b8:	bf 90       	pop	r11
    22ba:	af 90       	pop	r10
    22bc:	9f 90       	pop	r9
    22be:	8f 90       	pop	r8
    22c0:	7f 90       	pop	r7
    22c2:	6f 90       	pop	r6
    22c4:	5f 90       	pop	r5
    22c6:	4f 90       	pop	r4
    22c8:	3f 90       	pop	r3
    22ca:	2f 90       	pop	r2
    22cc:	08 95       	ret

000022ce <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	e0 91 49 01 	lds	r30, 0x0149
    22d4:	f0 91 4a 01 	lds	r31, 0x014A
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 01       	movw	r18, r24
    22dc:	54 e0       	ldi	r21, 0x04	; 4
    22de:	22 0f       	add	r18, r18
    22e0:	33 1f       	adc	r19, r19
    22e2:	5a 95       	dec	r21
    22e4:	e1 f7       	brne	.-8      	; 0x22de <Timebase_DownCounter_SS_Expired+0x10>
    22e6:	28 0f       	add	r18, r24
    22e8:	39 1f       	adc	r19, r25
    22ea:	e2 0f       	add	r30, r18
    22ec:	f3 1f       	adc	r31, r19
    22ee:	e3 5b       	subi	r30, 0xB3	; 179
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	86 95       	lsr	r24
    22f6:	8f 70       	andi	r24, 0x0F	; 15
    22f8:	84 30       	cpi	r24, 0x04	; 4
    22fa:	09 f4       	brne	.+2      	; 0x22fe <Timebase_DownCounter_SS_Expired+0x30>
    22fc:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    22fe:	84 2f       	mov	r24, r20
    2300:	08 95       	ret

00002302 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2302:	e0 91 49 01 	lds	r30, 0x0149
    2306:	f0 91 4a 01 	lds	r31, 0x014A
    230a:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    230c:	9c 01       	movw	r18, r24
    230e:	64 e0       	ldi	r22, 0x04	; 4
    2310:	22 0f       	add	r18, r18
    2312:	33 1f       	adc	r19, r19
    2314:	6a 95       	dec	r22
    2316:	e1 f7       	brne	.-8      	; 0x2310 <Timebase_DownCounter_SS_Expired_Event+0xe>
    2318:	28 0f       	add	r18, r24
    231a:	39 1f       	adc	r19, r25
    231c:	e2 0f       	add	r30, r18
    231e:	f3 1f       	adc	r31, r19
    2320:	df 01       	movw	r26, r30
    2322:	a3 5b       	subi	r26, 0xB3	; 179
    2324:	bf 4f       	sbci	r27, 0xFF	; 255
    2326:	8c 91       	ld	r24, X
    2328:	86 95       	lsr	r24
    232a:	8f 70       	andi	r24, 0x0F	; 15
    232c:	84 30       	cpi	r24, 0x04	; 4
    232e:	11 f0       	breq	.+4      	; 0x2334 <Timebase_DownCounter_SS_Expired_Event+0x32>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2334:	ee 5a       	subi	r30, 0xAE	; 174
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	10 82       	st	Z, r1
    233a:	11 82       	std	Z+1, r1	; 0x01
    233c:	12 82       	std	Z+2, r1	; 0x02
    233e:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2340:	12 92       	st	-Z, r1
    2342:	12 92       	st	-Z, r1
    2344:	12 92       	st	-Z, r1
    2346:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2348:	38 96       	adiw	r30, 0x08	; 8
    234a:	10 82       	st	Z, r1
    234c:	11 82       	std	Z+1, r1	; 0x01
    234e:	12 82       	std	Z+2, r1	; 0x02
    2350:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2352:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2354:	80 7e       	andi	r24, 0xE0	; 224
    2356:	8c 93       	st	X, r24
    2358:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    235a:	08 95       	ret

0000235c <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    2360:	c0 91 49 01 	lds	r28, 0x0149
    2364:	d0 91 4a 01 	lds	r29, 0x014A
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    236c:	f9 01       	movw	r30, r18
    236e:	a4 e0       	ldi	r26, 0x04	; 4
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	aa 95       	dec	r26
    2376:	e1 f7       	brne	.-8      	; 0x2370 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2378:	e2 0f       	add	r30, r18
    237a:	f3 1f       	adc	r31, r19
    237c:	ec 0f       	add	r30, r28
    237e:	fd 1f       	adc	r31, r29
    2380:	e3 5b       	subi	r30, 0xB3	; 179
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 81       	ld	r24, Z
    2386:	ed 54       	subi	r30, 0x4D	; 77
    2388:	f0 40       	sbci	r31, 0x00	; 0
    238a:	80 fd       	sbrc	r24, 0
    238c:	24 c0       	rjmp	.+72     	; 0x23d6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    238e:	ea 5a       	subi	r30, 0xAA	; 170
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	81 91       	ld	r24, Z+
    2394:	91 91       	ld	r25, Z+
    2396:	a1 91       	ld	r26, Z+
    2398:	b1 91       	ld	r27, Z+
    239a:	84 1b       	sub	r24, r20
    239c:	95 0b       	sbc	r25, r21
    239e:	a6 0b       	sbc	r26, r22
    23a0:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    23a2:	b7 ff       	sbrs	r27, 7
    23a4:	05 c0       	rjmp	.+10     	; 0x23b0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    23a6:	10 82       	st	Z, r1
    23a8:	11 82       	std	Z+1, r1	; 0x01
    23aa:	12 82       	std	Z+2, r1	; 0x02
    23ac:	13 82       	std	Z+3, r1	; 0x03
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    23b0:	80 83       	st	Z, r24
    23b2:	91 83       	std	Z+1, r25	; 0x01
    23b4:	a2 83       	std	Z+2, r26	; 0x02
    23b6:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    23b8:	f9 01       	movw	r30, r18
    23ba:	74 e0       	ldi	r23, 0x04	; 4
    23bc:	ee 0f       	add	r30, r30
    23be:	ff 1f       	adc	r31, r31
    23c0:	7a 95       	dec	r23
    23c2:	e1 f7       	brne	.-8      	; 0x23bc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    23c4:	e2 0f       	add	r30, r18
    23c6:	f3 1f       	adc	r31, r19
    23c8:	ec 0f       	add	r30, r28
    23ca:	fd 1f       	adc	r31, r29
    23cc:	e3 5b       	subi	r30, 0xB3	; 179
    23ce:	ff 4f       	sbci	r31, 0xFF	; 255
    23d0:	80 81       	ld	r24, Z
    23d2:	81 60       	ori	r24, 0x01	; 1
    23d4:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	08 95       	ret

000023dc <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    23dc:	e0 91 49 01 	lds	r30, 0x0149
    23e0:	f0 91 4a 01 	lds	r31, 0x014A
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    23e6:	9c 01       	movw	r18, r24
    23e8:	b4 e0       	ldi	r27, 0x04	; 4
    23ea:	22 0f       	add	r18, r18
    23ec:	33 1f       	adc	r19, r19
    23ee:	ba 95       	dec	r27
    23f0:	e1 f7       	brne	.-8      	; 0x23ea <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    23f2:	28 0f       	add	r18, r24
    23f4:	39 1f       	adc	r19, r25
    23f6:	e2 0f       	add	r30, r18
    23f8:	f3 1f       	adc	r31, r19
    23fa:	df 01       	movw	r26, r30
    23fc:	a6 5a       	subi	r26, 0xA6	; 166
    23fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2400:	ea 5a       	subi	r30, 0xAA	; 170
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	20 81       	ld	r18, Z
    2406:	31 81       	ldd	r19, Z+1	; 0x01
    2408:	42 81       	ldd	r20, Z+2	; 0x02
    240a:	53 81       	ldd	r21, Z+3	; 0x03
    240c:	8d 91       	ld	r24, X+
    240e:	9d 91       	ld	r25, X+
    2410:	0d 90       	ld	r0, X+
    2412:	bc 91       	ld	r27, X
    2414:	a0 2d       	mov	r26, r0
    2416:	28 1b       	sub	r18, r24
    2418:	39 0b       	sbc	r19, r25
    241a:	4a 0b       	sbc	r20, r26
    241c:	5b 0b       	sbc	r21, r27
    241e:	57 ff       	sbrs	r21, 7
    2420:	04 c0       	rjmp	.+8      	; 0x242a <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    242a:	b9 01       	movw	r22, r18
    242c:	ca 01       	movw	r24, r20
    242e:	08 95       	ret

00002430 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2434:	c0 91 49 01 	lds	r28, 0x0149
    2438:	d0 91 4a 01 	lds	r29, 0x014A
    243c:	68 2f       	mov	r22, r24
    243e:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2440:	fb 01       	movw	r30, r22
    2442:	44 e0       	ldi	r20, 0x04	; 4
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	4a 95       	dec	r20
    244a:	e1 f7       	brne	.-8      	; 0x2444 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    244c:	e6 0f       	add	r30, r22
    244e:	f7 1f       	adc	r31, r23
    2450:	ec 0f       	add	r30, r28
    2452:	fd 1f       	adc	r31, r29
    2454:	df 01       	movw	r26, r30
    2456:	a6 5a       	subi	r26, 0xA6	; 166
    2458:	bf 4f       	sbci	r27, 0xFF	; 255
    245a:	ea 5a       	subi	r30, 0xAA	; 170
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	20 81       	ld	r18, Z
    2460:	31 81       	ldd	r19, Z+1	; 0x01
    2462:	42 81       	ldd	r20, Z+2	; 0x02
    2464:	53 81       	ldd	r21, Z+3	; 0x03
    2466:	8d 91       	ld	r24, X+
    2468:	9d 91       	ld	r25, X+
    246a:	0d 90       	ld	r0, X+
    246c:	bc 91       	ld	r27, X
    246e:	a0 2d       	mov	r26, r0
    2470:	28 1b       	sub	r18, r24
    2472:	39 0b       	sbc	r19, r25
    2474:	4a 0b       	sbc	r20, r26
    2476:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2478:	57 fd       	sbrc	r21, 7
    247a:	07 c0       	rjmp	.+14     	; 0x248a <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    247c:	21 15       	cp	r18, r1
    247e:	31 05       	cpc	r19, r1
    2480:	41 05       	cpc	r20, r1
    2482:	51 05       	cpc	r21, r1
    2484:	11 f0       	breq	.+4      	; 0x248a <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	12 c0       	rjmp	.+36     	; 0x24ae <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	cb 01       	movw	r24, r22
    248e:	34 e0       	ldi	r19, 0x04	; 4
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	3a 95       	dec	r19
    2496:	e1 f7       	brne	.-8      	; 0x2490 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2498:	86 0f       	add	r24, r22
    249a:	97 1f       	adc	r25, r23
    249c:	c8 0f       	add	r28, r24
    249e:	d9 1f       	adc	r29, r25
    24a0:	c3 5b       	subi	r28, 0xB3	; 179
    24a2:	df 4f       	sbci	r29, 0xFF	; 255
    24a4:	88 81       	ld	r24, Y
    24a6:	80 ff       	sbrs	r24, 0
    24a8:	21 e0       	ldi	r18, 0x01	; 1
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    24ae:	82 2f       	mov	r24, r18
    24b0:	df 91       	pop	r29
    24b2:	cf 91       	pop	r28
    24b4:	08 95       	ret

000024b6 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    24b6:	1f 93       	push	r17
    24b8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    24ba:	0e 94 18 12 	call	0x2430	; 0x2430 <Timebase_DownCounter_SS_Period_Value_Expired>
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	11 f0       	breq	.+4      	; 0x24c6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	16 c0       	rjmp	.+44     	; 0x24f2 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24c6:	e0 91 49 01 	lds	r30, 0x0149
    24ca:	f0 91 4a 01 	lds	r31, 0x014A
    24ce:	21 2f       	mov	r18, r17
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	c9 01       	movw	r24, r18
    24d4:	54 e0       	ldi	r21, 0x04	; 4
    24d6:	88 0f       	add	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	5a 95       	dec	r21
    24dc:	e1 f7       	brne	.-8      	; 0x24d6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    24de:	82 0f       	add	r24, r18
    24e0:	93 1f       	adc	r25, r19
    24e2:	e8 0f       	add	r30, r24
    24e4:	f9 1f       	adc	r31, r25
    24e6:	e3 5b       	subi	r30, 0xB3	; 179
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	8e 7f       	andi	r24, 0xFE	; 254
    24ee:	80 83       	st	Z, r24
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    24f2:	1f 91       	pop	r17
    24f4:	08 95       	ret

000024f6 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 97 10 	call	0x212e	; 0x212e <Timebase_DownCounter_SS_Update>
  }
}
    24fc:	08 95       	ret

000024fe <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    24fe:	e0 91 49 01 	lds	r30, 0x0149
    2502:	f0 91 4a 01 	lds	r31, 0x014A
    2506:	ee 5a       	subi	r30, 0xAE	; 174
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	10 82       	st	Z, r1
    250c:	11 82       	std	Z+1, r1	; 0x01
    250e:	12 82       	std	Z+2, r1	; 0x02
    2510:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2512:	12 92       	st	-Z, r1
    2514:	12 92       	st	-Z, r1
    2516:	12 92       	st	-Z, r1
    2518:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    251a:	38 96       	adiw	r30, 0x08	; 8
    251c:	10 82       	st	Z, r1
    251e:	11 82       	std	Z+1, r1	; 0x01
    2520:	12 82       	std	Z+2, r1	; 0x02
    2522:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2524:	39 97       	sbiw	r30, 0x09	; 9
    2526:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2528:	80 7e       	andi	r24, 0xE0	; 224
    252a:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    252c:	08 95       	ret

0000252e <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    252e:	e0 91 49 01 	lds	r30, 0x0149
    2532:	f0 91 4a 01 	lds	r31, 0x014A
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	2d e0       	ldi	r18, 0x0D	; 13
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	ac 01       	movw	r20, r24
    253e:	42 9f       	mul	r20, r18
    2540:	c0 01       	movw	r24, r0
    2542:	43 9f       	mul	r20, r19
    2544:	90 0d       	add	r25, r0
    2546:	52 9f       	mul	r21, r18
    2548:	90 0d       	add	r25, r0
    254a:	11 24       	eor	r1, r1
    254c:	e8 0f       	add	r30, r24
    254e:	f9 1f       	adc	r31, r25
    2550:	e2 5a       	subi	r30, 0xA2	; 162
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2558:	8f 70       	andi	r24, 0x0F	; 15
    255a:	08 95       	ret

0000255c <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    255c:	e0 91 49 01 	lds	r30, 0x0149
    2560:	f0 91 4a 01 	lds	r31, 0x014A
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	2d e0       	ldi	r18, 0x0D	; 13
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	ac 01       	movw	r20, r24
    256c:	42 9f       	mul	r20, r18
    256e:	c0 01       	movw	r24, r0
    2570:	43 9f       	mul	r20, r19
    2572:	90 0d       	add	r25, r0
    2574:	52 9f       	mul	r21, r18
    2576:	90 0d       	add	r25, r0
    2578:	11 24       	eor	r1, r1
    257a:	e8 0f       	add	r30, r24
    257c:	f9 1f       	adc	r31, r25
    257e:	e2 5a       	subi	r30, 0xA2	; 162
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	6f 70       	andi	r22, 0x0F	; 15
    2584:	66 0f       	add	r22, r22
    2586:	80 81       	ld	r24, Z
    2588:	81 7e       	andi	r24, 0xE1	; 225
    258a:	86 2b       	or	r24, r22
    258c:	80 83       	st	Z, r24
}
    258e:	08 95       	ret

00002590 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    2590:	e0 91 49 01 	lds	r30, 0x0149
    2594:	f0 91 4a 01 	lds	r31, 0x014A
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	2d e0       	ldi	r18, 0x0D	; 13
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	ac 01       	movw	r20, r24
    25a0:	42 9f       	mul	r20, r18
    25a2:	c0 01       	movw	r24, r0
    25a4:	43 9f       	mul	r20, r19
    25a6:	90 0d       	add	r25, r0
    25a8:	52 9f       	mul	r21, r18
    25aa:	90 0d       	add	r25, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	e8 0f       	add	r30, r24
    25b0:	f9 1f       	adc	r31, r25
    25b2:	ed 59       	subi	r30, 0x9D	; 157
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	08 95       	ret

000025c0 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    25c0:	e0 91 49 01 	lds	r30, 0x0149
    25c4:	f0 91 4a 01 	lds	r31, 0x014A
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	2d e0       	ldi	r18, 0x0D	; 13
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	dc 01       	movw	r26, r24
    25d0:	a2 9f       	mul	r26, r18
    25d2:	c0 01       	movw	r24, r0
    25d4:	a3 9f       	mul	r26, r19
    25d6:	90 0d       	add	r25, r0
    25d8:	b2 9f       	mul	r27, r18
    25da:	90 0d       	add	r25, r0
    25dc:	11 24       	eor	r1, r1
    25de:	e8 0f       	add	r30, r24
    25e0:	f9 1f       	adc	r31, r25
    25e2:	ed 59       	subi	r30, 0x9D	; 157
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	40 83       	st	Z, r20
    25e8:	51 83       	std	Z+1, r21	; 0x01
    25ea:	62 83       	std	Z+2, r22	; 0x02
    25ec:	73 83       	std	Z+3, r23	; 0x03
}
    25ee:	08 95       	ret

000025f0 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    25f0:	e0 91 49 01 	lds	r30, 0x0149
    25f4:	f0 91 4a 01 	lds	r31, 0x014A
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	2d e0       	ldi	r18, 0x0D	; 13
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	ac 01       	movw	r20, r24
    2600:	42 9f       	mul	r20, r18
    2602:	c0 01       	movw	r24, r0
    2604:	43 9f       	mul	r20, r19
    2606:	90 0d       	add	r25, r0
    2608:	52 9f       	mul	r21, r18
    260a:	90 0d       	add	r25, r0
    260c:	11 24       	eor	r1, r1
    260e:	e8 0f       	add	r30, r24
    2610:	f9 1f       	adc	r31, r25
    2612:	e1 5a       	subi	r30, 0xA1	; 161
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	08 95       	ret

00002620 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2620:	e0 91 49 01 	lds	r30, 0x0149
    2624:	f0 91 4a 01 	lds	r31, 0x014A
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	2d e0       	ldi	r18, 0x0D	; 13
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	dc 01       	movw	r26, r24
    2630:	a2 9f       	mul	r26, r18
    2632:	c0 01       	movw	r24, r0
    2634:	a3 9f       	mul	r26, r19
    2636:	90 0d       	add	r25, r0
    2638:	b2 9f       	mul	r27, r18
    263a:	90 0d       	add	r25, r0
    263c:	11 24       	eor	r1, r1
    263e:	e8 0f       	add	r30, r24
    2640:	f9 1f       	adc	r31, r25
    2642:	e1 5a       	subi	r30, 0xA1	; 161
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	40 83       	st	Z, r20
    2648:	51 83       	std	Z+1, r21	; 0x01
    264a:	62 83       	std	Z+2, r22	; 0x02
    264c:	73 83       	std	Z+3, r23	; 0x03
}
    264e:	08 95       	ret

00002650 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    2650:	e0 91 49 01 	lds	r30, 0x0149
    2654:	f0 91 4a 01 	lds	r31, 0x014A
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	2d e0       	ldi	r18, 0x0D	; 13
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	ac 01       	movw	r20, r24
    2660:	42 9f       	mul	r20, r18
    2662:	c0 01       	movw	r24, r0
    2664:	43 9f       	mul	r20, r19
    2666:	90 0d       	add	r25, r0
    2668:	52 9f       	mul	r21, r18
    266a:	90 0d       	add	r25, r0
    266c:	11 24       	eor	r1, r1
    266e:	e8 0f       	add	r30, r24
    2670:	f9 1f       	adc	r31, r25
    2672:	e9 59       	subi	r30, 0x99	; 153
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	60 81       	ld	r22, Z
    2678:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    267a:	82 81       	ldd	r24, Z+2	; 0x02
    267c:	93 81       	ldd	r25, Z+3	; 0x03
    267e:	08 95       	ret

00002680 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2680:	e0 91 49 01 	lds	r30, 0x0149
    2684:	f0 91 4a 01 	lds	r31, 0x014A
    2688:	28 2f       	mov	r18, r24
    268a:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    268c:	77 ff       	sbrs	r23, 7
    268e:	13 c0       	rjmp	.+38     	; 0x26b6 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    2690:	8d e0       	ldi	r24, 0x0D	; 13
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	ac 01       	movw	r20, r24
    2696:	24 9f       	mul	r18, r20
    2698:	c0 01       	movw	r24, r0
    269a:	25 9f       	mul	r18, r21
    269c:	90 0d       	add	r25, r0
    269e:	34 9f       	mul	r19, r20
    26a0:	90 0d       	add	r25, r0
    26a2:	11 24       	eor	r1, r1
    26a4:	e8 0f       	add	r30, r24
    26a6:	f9 1f       	adc	r31, r25
    26a8:	e9 59       	subi	r30, 0x99	; 153
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	10 82       	st	Z, r1
    26ae:	11 82       	std	Z+1, r1	; 0x01
    26b0:	12 82       	std	Z+2, r1	; 0x02
    26b2:	13 82       	std	Z+3, r1	; 0x03
    26b4:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    26b6:	8d e0       	ldi	r24, 0x0D	; 13
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	dc 01       	movw	r26, r24
    26bc:	2a 9f       	mul	r18, r26
    26be:	c0 01       	movw	r24, r0
    26c0:	2b 9f       	mul	r18, r27
    26c2:	90 0d       	add	r25, r0
    26c4:	3a 9f       	mul	r19, r26
    26c6:	90 0d       	add	r25, r0
    26c8:	11 24       	eor	r1, r1
    26ca:	e8 0f       	add	r30, r24
    26cc:	f9 1f       	adc	r31, r25
    26ce:	e9 59       	subi	r30, 0x99	; 153
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	40 83       	st	Z, r20
    26d4:	51 83       	std	Z+1, r21	; 0x01
    26d6:	62 83       	std	Z+2, r22	; 0x02
    26d8:	73 83       	std	Z+3, r23	; 0x03
    26da:	08 95       	ret

000026dc <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    26dc:	e0 91 49 01 	lds	r30, 0x0149
    26e0:	f0 91 4a 01 	lds	r31, 0x014A
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	2d e0       	ldi	r18, 0x0D	; 13
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	ac 01       	movw	r20, r24
    26ec:	42 9f       	mul	r20, r18
    26ee:	c0 01       	movw	r24, r0
    26f0:	43 9f       	mul	r20, r19
    26f2:	90 0d       	add	r25, r0
    26f4:	52 9f       	mul	r21, r18
    26f6:	90 0d       	add	r25, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	e8 0f       	add	r30, r24
    26fc:	f9 1f       	adc	r31, r25
    26fe:	e2 5a       	subi	r30, 0xA2	; 162
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2704:	81 70       	andi	r24, 0x01	; 1
    2706:	08 95       	ret

00002708 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2708:	e0 91 49 01 	lds	r30, 0x0149
    270c:	f0 91 4a 01 	lds	r31, 0x014A
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	2d e0       	ldi	r18, 0x0D	; 13
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	ac 01       	movw	r20, r24
    2718:	42 9f       	mul	r20, r18
    271a:	c0 01       	movw	r24, r0
    271c:	43 9f       	mul	r20, r19
    271e:	90 0d       	add	r25, r0
    2720:	52 9f       	mul	r21, r18
    2722:	90 0d       	add	r25, r0
    2724:	11 24       	eor	r1, r1
    2726:	e8 0f       	add	r30, r24
    2728:	f9 1f       	adc	r31, r25
    272a:	e2 5a       	subi	r30, 0xA2	; 162
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	81 60       	ori	r24, 0x01	; 1
    2732:	80 83       	st	Z, r24
}
    2734:	08 95       	ret

00002736 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2736:	e0 91 49 01 	lds	r30, 0x0149
    273a:	f0 91 4a 01 	lds	r31, 0x014A
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	2d e0       	ldi	r18, 0x0D	; 13
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	ac 01       	movw	r20, r24
    2746:	42 9f       	mul	r20, r18
    2748:	c0 01       	movw	r24, r0
    274a:	43 9f       	mul	r20, r19
    274c:	90 0d       	add	r25, r0
    274e:	52 9f       	mul	r21, r18
    2750:	90 0d       	add	r25, r0
    2752:	11 24       	eor	r1, r1
    2754:	e8 0f       	add	r30, r24
    2756:	f9 1f       	adc	r31, r25
    2758:	e2 5a       	subi	r30, 0xA2	; 162
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	8e 7f       	andi	r24, 0xFE	; 254
    2760:	80 83       	st	Z, r24
}
    2762:	08 95       	ret

00002764 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2764:	e0 91 49 01 	lds	r30, 0x0149
    2768:	f0 91 4a 01 	lds	r31, 0x014A
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	2d e0       	ldi	r18, 0x0D	; 13
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	ac 01       	movw	r20, r24
    2774:	42 9f       	mul	r20, r18
    2776:	c0 01       	movw	r24, r0
    2778:	43 9f       	mul	r20, r19
    277a:	90 0d       	add	r25, r0
    277c:	52 9f       	mul	r21, r18
    277e:	90 0d       	add	r25, r0
    2780:	11 24       	eor	r1, r1
    2782:	e8 0f       	add	r30, r24
    2784:	f9 1f       	adc	r31, r25
    2786:	e1 5a       	subi	r30, 0xA1	; 161
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	11 92       	st	Z+, r1
    278c:	11 92       	st	Z+, r1
    278e:	11 92       	st	Z+, r1
    2790:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2792:	10 82       	st	Z, r1
    2794:	11 82       	std	Z+1, r1	; 0x01
    2796:	12 82       	std	Z+2, r1	; 0x02
    2798:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    279a:	35 97       	sbiw	r30, 0x05	; 5
    279c:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    279e:	80 7e       	andi	r24, 0xE0	; 224
    27a0:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    27a2:	08 95       	ret

000027a4 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    27a4:	e0 91 49 01 	lds	r30, 0x0149
    27a8:	f0 91 4a 01 	lds	r31, 0x014A
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	2d e0       	ldi	r18, 0x0D	; 13
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	ac 01       	movw	r20, r24
    27b4:	42 9f       	mul	r20, r18
    27b6:	c0 01       	movw	r24, r0
    27b8:	43 9f       	mul	r20, r19
    27ba:	90 0d       	add	r25, r0
    27bc:	52 9f       	mul	r21, r18
    27be:	90 0d       	add	r25, r0
    27c0:	11 24       	eor	r1, r1
    27c2:	e8 0f       	add	r30, r24
    27c4:	f9 1f       	adc	r31, r25
    27c6:	e1 5a       	subi	r30, 0xA1	; 161
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	11 92       	st	Z+, r1
    27cc:	11 92       	st	Z+, r1
    27ce:	11 92       	st	Z+, r1
    27d0:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    27d2:	10 82       	st	Z, r1
    27d4:	11 82       	std	Z+1, r1	; 0x01
    27d6:	12 82       	std	Z+2, r1	; 0x02
    27d8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    27da:	35 97       	sbiw	r30, 0x05	; 5
    27dc:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    27de:	80 7e       	andi	r24, 0xE0	; 224
    27e0:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    27e2:	08 95       	ret

000027e4 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    27e4:	e0 91 49 01 	lds	r30, 0x0149
    27e8:	f0 91 4a 01 	lds	r31, 0x014A
    27ec:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    27ee:	2d e0       	ldi	r18, 0x0D	; 13
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	ac 01       	movw	r20, r24
    27f4:	42 9f       	mul	r20, r18
    27f6:	c0 01       	movw	r24, r0
    27f8:	43 9f       	mul	r20, r19
    27fa:	90 0d       	add	r25, r0
    27fc:	52 9f       	mul	r21, r18
    27fe:	90 0d       	add	r25, r0
    2800:	11 24       	eor	r1, r1
    2802:	e8 0f       	add	r30, r24
    2804:	f9 1f       	adc	r31, r25
    2806:	e2 5a       	subi	r30, 0xA2	; 162
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	90 81       	ld	r25, Z
    280c:	89 2f       	mov	r24, r25
    280e:	86 95       	lsr	r24
    2810:	8f 70       	andi	r24, 0x0F	; 15
    2812:	81 30       	cpi	r24, 0x01	; 1
    2814:	19 f0       	breq	.+6      	; 0x281c <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2816:	91 7e       	andi	r25, 0xE1	; 225
    2818:	92 60       	ori	r25, 0x02	; 2
    281a:	90 83       	st	Z, r25
    281c:	08 95       	ret

0000281e <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    281e:	e0 91 49 01 	lds	r30, 0x0149
    2822:	f0 91 4a 01 	lds	r31, 0x014A
    2826:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2828:	2d e0       	ldi	r18, 0x0D	; 13
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	ac 01       	movw	r20, r24
    282e:	42 9f       	mul	r20, r18
    2830:	c0 01       	movw	r24, r0
    2832:	43 9f       	mul	r20, r19
    2834:	90 0d       	add	r25, r0
    2836:	52 9f       	mul	r21, r18
    2838:	90 0d       	add	r25, r0
    283a:	11 24       	eor	r1, r1
    283c:	e8 0f       	add	r30, r24
    283e:	f9 1f       	adc	r31, r25
    2840:	e2 5a       	subi	r30, 0xA2	; 162
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	90 81       	ld	r25, Z
    2846:	89 2f       	mov	r24, r25
    2848:	86 95       	lsr	r24
    284a:	8f 70       	andi	r24, 0x0F	; 15
    284c:	82 30       	cpi	r24, 0x02	; 2
    284e:	19 f0       	breq	.+6      	; 0x2856 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2850:	91 7e       	andi	r25, 0xE1	; 225
    2852:	94 60       	ori	r25, 0x04	; 4
    2854:	90 83       	st	Z, r25
    2856:	08 95       	ret

00002858 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    285c:	a0 91 49 01 	lds	r26, 0x0149
    2860:	b0 91 4a 01 	lds	r27, 0x014A
    2864:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2866:	2d e0       	ldi	r18, 0x0D	; 13
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	82 9f       	mul	r24, r18
    286c:	f0 01       	movw	r30, r0
    286e:	83 9f       	mul	r24, r19
    2870:	f0 0d       	add	r31, r0
    2872:	92 9f       	mul	r25, r18
    2874:	f0 0d       	add	r31, r0
    2876:	11 24       	eor	r1, r1
    2878:	ea 0f       	add	r30, r26
    287a:	fb 1f       	adc	r31, r27
    287c:	ef 01       	movw	r28, r30
    287e:	c2 5a       	subi	r28, 0xA2	; 162
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	88 81       	ld	r24, Y
    2884:	86 95       	lsr	r24
    2886:	8f 70       	andi	r24, 0x0F	; 15
    2888:	e9 f4       	brne	.+58     	; 0x28c4 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    288a:	ed 59       	subi	r30, 0x9D	; 157
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	40 83       	st	Z, r20
    2890:	51 83       	std	Z+1, r21	; 0x01
    2892:	62 83       	std	Z+2, r22	; 0x02
    2894:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2896:	1a 96       	adiw	r26, 0x0a	; 10
    2898:	8d 91       	ld	r24, X+
    289a:	9d 91       	ld	r25, X+
    289c:	0d 90       	ld	r0, X+
    289e:	bc 91       	ld	r27, X
    28a0:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    28a2:	84 0f       	add	r24, r20
    28a4:	95 1f       	adc	r25, r21
    28a6:	a6 1f       	adc	r26, r22
    28a8:	b7 1f       	adc	r27, r23
    28aa:	b2 93       	st	-Z, r27
    28ac:	a2 93       	st	-Z, r26
    28ae:	92 93       	st	-Z, r25
    28b0:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    28b2:	98 81       	ld	r25, Y
    28b4:	89 2f       	mov	r24, r25
    28b6:	86 95       	lsr	r24
    28b8:	8f 70       	andi	r24, 0x0F	; 15
    28ba:	81 30       	cpi	r24, 0x01	; 1
    28bc:	19 f0       	breq	.+6      	; 0x28c4 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    28be:	91 7e       	andi	r25, 0xE1	; 225
    28c0:	92 60       	ori	r25, 0x02	; 2
    28c2:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	08 95       	ret

000028ca <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    28ce:	e0 91 49 01 	lds	r30, 0x0149
    28d2:	f0 91 4a 01 	lds	r31, 0x014A
    28d6:	a8 2f       	mov	r26, r24
    28d8:	b0 e0       	ldi	r27, 0x00	; 0
    28da:	2d e0       	ldi	r18, 0x0D	; 13
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	e9 01       	movw	r28, r18
    28e0:	ac 9f       	mul	r26, r28
    28e2:	90 01       	movw	r18, r0
    28e4:	ad 9f       	mul	r26, r29
    28e6:	30 0d       	add	r19, r0
    28e8:	bc 9f       	mul	r27, r28
    28ea:	30 0d       	add	r19, r0
    28ec:	11 24       	eor	r1, r1
    28ee:	e2 0f       	add	r30, r18
    28f0:	f3 1f       	adc	r31, r19
    28f2:	e1 5a       	subi	r30, 0xA1	; 161
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	11 92       	st	Z+, r1
    28f8:	11 92       	st	Z+, r1
    28fa:	11 92       	st	Z+, r1
    28fc:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28fe:	10 82       	st	Z, r1
    2900:	11 82       	std	Z+1, r1	; 0x01
    2902:	12 82       	std	Z+2, r1	; 0x02
    2904:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2906:	35 97       	sbiw	r30, 0x05	; 5
    2908:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    290a:	90 7e       	andi	r25, 0xE0	; 224
    290c:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    290e:	0e 94 2c 14 	call	0x2858	; 0x2858 <Timebase_DownCounter_Set_Securely>
} 
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	08 95       	ret

00002918 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    2918:	0f 93       	push	r16
    291a:	1f 93       	push	r17
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2920:	a0 91 49 01 	lds	r26, 0x0149
    2924:	b0 91 4a 01 	lds	r27, 0x014A
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	2d e0       	ldi	r18, 0x0D	; 13
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	82 9f       	mul	r24, r18
    2930:	f0 01       	movw	r30, r0
    2932:	83 9f       	mul	r24, r19
    2934:	f0 0d       	add	r31, r0
    2936:	92 9f       	mul	r25, r18
    2938:	f0 0d       	add	r31, r0
    293a:	11 24       	eor	r1, r1
    293c:	ea 0f       	add	r30, r26
    293e:	fb 1f       	adc	r31, r27
    2940:	8f 01       	movw	r16, r30
    2942:	02 5a       	subi	r16, 0xA2	; 162
    2944:	1f 4f       	sbci	r17, 0xFF	; 255
    2946:	e8 01       	movw	r28, r16
    2948:	88 81       	ld	r24, Y
    294a:	86 95       	lsr	r24
    294c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	69 f5       	brne	.+90     	; 0x29ac <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2952:	1a 96       	adiw	r26, 0x0a	; 10
    2954:	2d 91       	ld	r18, X+
    2956:	3d 91       	ld	r19, X+
    2958:	4d 91       	ld	r20, X+
    295a:	5c 91       	ld	r21, X
    295c:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    295e:	bf 01       	movw	r22, r30
    2960:	61 5a       	subi	r22, 0xA1	; 161
    2962:	7f 4f       	sbci	r23, 0xFF	; 255
    2964:	eb 01       	movw	r28, r22
    2966:	88 81       	ld	r24, Y
    2968:	99 81       	ldd	r25, Y+1	; 0x01
    296a:	aa 81       	ldd	r26, Y+2	; 0x02
    296c:	bb 81       	ldd	r27, Y+3	; 0x03
    296e:	82 1b       	sub	r24, r18
    2970:	93 0b       	sbc	r25, r19
    2972:	a4 0b       	sbc	r26, r20
    2974:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2976:	ed 59       	subi	r30, 0x9D	; 157
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	80 83       	st	Z, r24
    297c:	91 83       	std	Z+1, r25	; 0x01
    297e:	a2 83       	std	Z+2, r26	; 0x02
    2980:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2982:	18 16       	cp	r1, r24
    2984:	19 06       	cpc	r1, r25
    2986:	1a 06       	cpc	r1, r26
    2988:	1b 06       	cpc	r1, r27
    298a:	34 f1       	brlt	.+76     	; 0x29d8 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    298c:	db 01       	movw	r26, r22
    298e:	1d 92       	st	X+, r1
    2990:	1d 92       	st	X+, r1
    2992:	1d 92       	st	X+, r1
    2994:	1c 92       	st	X, r1
    2996:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2998:	10 82       	st	Z, r1
    299a:	11 82       	std	Z+1, r1	; 0x01
    299c:	12 82       	std	Z+2, r1	; 0x02
    299e:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    29a0:	e8 01       	movw	r28, r16
    29a2:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    29a4:	80 7e       	andi	r24, 0xE0	; 224
    29a6:	88 60       	ori	r24, 0x08	; 8
    29a8:	88 83       	st	Y, r24
    29aa:	16 c0       	rjmp	.+44     	; 0x29d8 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	a1 f4       	brne	.+40     	; 0x29d8 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    29b0:	1a 96       	adiw	r26, 0x0a	; 10
    29b2:	8d 91       	ld	r24, X+
    29b4:	9d 91       	ld	r25, X+
    29b6:	0d 90       	ld	r0, X+
    29b8:	bc 91       	ld	r27, X
    29ba:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    29bc:	ed 59       	subi	r30, 0x9D	; 157
    29be:	ff 4f       	sbci	r31, 0xFF	; 255
    29c0:	20 81       	ld	r18, Z
    29c2:	31 81       	ldd	r19, Z+1	; 0x01
    29c4:	42 81       	ldd	r20, Z+2	; 0x02
    29c6:	53 81       	ldd	r21, Z+3	; 0x03
    29c8:	82 0f       	add	r24, r18
    29ca:	93 1f       	adc	r25, r19
    29cc:	a4 1f       	adc	r26, r20
    29ce:	b5 1f       	adc	r27, r21
    29d0:	b2 93       	st	-Z, r27
    29d2:	a2 93       	st	-Z, r26
    29d4:	92 93       	st	-Z, r25
    29d6:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	1f 91       	pop	r17
    29de:	0f 91       	pop	r16
    29e0:	08 95       	ret

000029e2 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	e0 91 49 01 	lds	r30, 0x0149
    29e8:	f0 91 4a 01 	lds	r31, 0x014A
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	2d e0       	ldi	r18, 0x0D	; 13
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	bc 01       	movw	r22, r24
    29f4:	62 9f       	mul	r22, r18
    29f6:	c0 01       	movw	r24, r0
    29f8:	63 9f       	mul	r22, r19
    29fa:	90 0d       	add	r25, r0
    29fc:	72 9f       	mul	r23, r18
    29fe:	90 0d       	add	r25, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	e8 0f       	add	r30, r24
    2a04:	f9 1f       	adc	r31, r25
    2a06:	e2 5a       	subi	r30, 0xA2	; 162
    2a08:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0a:	80 81       	ld	r24, Z
    2a0c:	86 95       	lsr	r24
    2a0e:	8f 70       	andi	r24, 0x0F	; 15
    2a10:	84 30       	cpi	r24, 0x04	; 4
    2a12:	09 f4       	brne	.+2      	; 0x2a16 <Timebase_DownCounter_Expired+0x34>
    2a14:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2a16:	84 2f       	mov	r24, r20
    2a18:	08 95       	ret

00002a1a <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2a1a:	e0 91 49 01 	lds	r30, 0x0149
    2a1e:	f0 91 4a 01 	lds	r31, 0x014A
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2a24:	2d e0       	ldi	r18, 0x0D	; 13
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	ac 01       	movw	r20, r24
    2a2a:	42 9f       	mul	r20, r18
    2a2c:	c0 01       	movw	r24, r0
    2a2e:	43 9f       	mul	r20, r19
    2a30:	90 0d       	add	r25, r0
    2a32:	52 9f       	mul	r21, r18
    2a34:	90 0d       	add	r25, r0
    2a36:	11 24       	eor	r1, r1
    2a38:	e8 0f       	add	r30, r24
    2a3a:	f9 1f       	adc	r31, r25
    2a3c:	df 01       	movw	r26, r30
    2a3e:	a2 5a       	subi	r26, 0xA2	; 162
    2a40:	bf 4f       	sbci	r27, 0xFF	; 255
    2a42:	8c 91       	ld	r24, X
    2a44:	86 95       	lsr	r24
    2a46:	8f 70       	andi	r24, 0x0F	; 15
    2a48:	84 30       	cpi	r24, 0x04	; 4
    2a4a:	11 f0       	breq	.+4      	; 0x2a50 <Timebase_DownCounter_Expired_Event+0x36>
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a50:	e1 5a       	subi	r30, 0xA1	; 161
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	11 92       	st	Z+, r1
    2a56:	11 92       	st	Z+, r1
    2a58:	11 92       	st	Z+, r1
    2a5a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a5c:	10 82       	st	Z, r1
    2a5e:	11 82       	std	Z+1, r1	; 0x01
    2a60:	12 82       	std	Z+2, r1	; 0x02
    2a62:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2a64:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a66:	80 7e       	andi	r24, 0xE0	; 224
    2a68:	8c 93       	st	X, r24
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2a6c:	08 95       	ret

00002a6e <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2a72:	c0 91 49 01 	lds	r28, 0x0149
    2a76:	d0 91 4a 01 	lds	r29, 0x014A
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2a7e:	8d e0       	ldi	r24, 0x0D	; 13
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	28 9f       	mul	r18, r24
    2a84:	f0 01       	movw	r30, r0
    2a86:	29 9f       	mul	r18, r25
    2a88:	f0 0d       	add	r31, r0
    2a8a:	38 9f       	mul	r19, r24
    2a8c:	f0 0d       	add	r31, r0
    2a8e:	11 24       	eor	r1, r1
    2a90:	ec 0f       	add	r30, r28
    2a92:	fd 1f       	adc	r31, r29
    2a94:	e2 5a       	subi	r30, 0xA2	; 162
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	ee 55       	subi	r30, 0x5E	; 94
    2a9c:	f0 40       	sbci	r31, 0x00	; 0
    2a9e:	80 fd       	sbrc	r24, 0
    2aa0:	25 c0       	rjmp	.+74     	; 0x2aec <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2aa2:	ed 59       	subi	r30, 0x9D	; 157
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	81 91       	ld	r24, Z+
    2aa8:	91 91       	ld	r25, Z+
    2aaa:	a1 91       	ld	r26, Z+
    2aac:	b1 91       	ld	r27, Z+
    2aae:	84 1b       	sub	r24, r20
    2ab0:	95 0b       	sbc	r25, r21
    2ab2:	a6 0b       	sbc	r26, r22
    2ab4:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2ab6:	b7 ff       	sbrs	r27, 7
    2ab8:	05 c0       	rjmp	.+10     	; 0x2ac4 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2aba:	10 82       	st	Z, r1
    2abc:	11 82       	std	Z+1, r1	; 0x01
    2abe:	12 82       	std	Z+2, r1	; 0x02
    2ac0:	13 82       	std	Z+3, r1	; 0x03
    2ac2:	04 c0       	rjmp	.+8      	; 0x2acc <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2ac4:	80 83       	st	Z, r24
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	a2 83       	std	Z+2, r26	; 0x02
    2aca:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2acc:	8d e0       	ldi	r24, 0x0D	; 13
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	28 9f       	mul	r18, r24
    2ad2:	f0 01       	movw	r30, r0
    2ad4:	29 9f       	mul	r18, r25
    2ad6:	f0 0d       	add	r31, r0
    2ad8:	38 9f       	mul	r19, r24
    2ada:	f0 0d       	add	r31, r0
    2adc:	11 24       	eor	r1, r1
    2ade:	ec 0f       	add	r30, r28
    2ae0:	fd 1f       	adc	r31, r29
    2ae2:	e2 5a       	subi	r30, 0xA2	; 162
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	81 60       	ori	r24, 0x01	; 1
    2aea:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	08 95       	ret

00002af2 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2af2:	e0 91 49 01 	lds	r30, 0x0149
    2af6:	f0 91 4a 01 	lds	r31, 0x014A
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2afc:	2d e0       	ldi	r18, 0x0D	; 13
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	ac 01       	movw	r20, r24
    2b02:	42 9f       	mul	r20, r18
    2b04:	c0 01       	movw	r24, r0
    2b06:	43 9f       	mul	r20, r19
    2b08:	90 0d       	add	r25, r0
    2b0a:	52 9f       	mul	r21, r18
    2b0c:	90 0d       	add	r25, r0
    2b0e:	11 24       	eor	r1, r1
    2b10:	e8 0f       	add	r30, r24
    2b12:	f9 1f       	adc	r31, r25
    2b14:	df 01       	movw	r26, r30
    2b16:	a9 59       	subi	r26, 0x99	; 153
    2b18:	bf 4f       	sbci	r27, 0xFF	; 255
    2b1a:	ed 59       	subi	r30, 0x9D	; 157
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	20 81       	ld	r18, Z
    2b20:	31 81       	ldd	r19, Z+1	; 0x01
    2b22:	42 81       	ldd	r20, Z+2	; 0x02
    2b24:	53 81       	ldd	r21, Z+3	; 0x03
    2b26:	8d 91       	ld	r24, X+
    2b28:	9d 91       	ld	r25, X+
    2b2a:	0d 90       	ld	r0, X+
    2b2c:	bc 91       	ld	r27, X
    2b2e:	a0 2d       	mov	r26, r0
    2b30:	28 1b       	sub	r18, r24
    2b32:	39 0b       	sbc	r19, r25
    2b34:	4a 0b       	sbc	r20, r26
    2b36:	5b 0b       	sbc	r21, r27
    2b38:	57 ff       	sbrs	r21, 7
    2b3a:	04 c0       	rjmp	.+8      	; 0x2b44 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2b44:	b9 01       	movw	r22, r18
    2b46:	ca 01       	movw	r24, r20
    2b48:	08 95       	ret

00002b4a <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2b4e:	c0 91 49 01 	lds	r28, 0x0149
    2b52:	d0 91 4a 01 	lds	r29, 0x014A
    2b56:	68 2f       	mov	r22, r24
    2b58:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2b5a:	8d e0       	ldi	r24, 0x0D	; 13
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	68 9f       	mul	r22, r24
    2b60:	f0 01       	movw	r30, r0
    2b62:	69 9f       	mul	r22, r25
    2b64:	f0 0d       	add	r31, r0
    2b66:	78 9f       	mul	r23, r24
    2b68:	f0 0d       	add	r31, r0
    2b6a:	11 24       	eor	r1, r1
    2b6c:	ec 0f       	add	r30, r28
    2b6e:	fd 1f       	adc	r31, r29
    2b70:	df 01       	movw	r26, r30
    2b72:	a9 59       	subi	r26, 0x99	; 153
    2b74:	bf 4f       	sbci	r27, 0xFF	; 255
    2b76:	ed 59       	subi	r30, 0x9D	; 157
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	20 81       	ld	r18, Z
    2b7c:	31 81       	ldd	r19, Z+1	; 0x01
    2b7e:	42 81       	ldd	r20, Z+2	; 0x02
    2b80:	53 81       	ldd	r21, Z+3	; 0x03
    2b82:	8d 91       	ld	r24, X+
    2b84:	9d 91       	ld	r25, X+
    2b86:	0d 90       	ld	r0, X+
    2b88:	bc 91       	ld	r27, X
    2b8a:	a0 2d       	mov	r26, r0
    2b8c:	28 1b       	sub	r18, r24
    2b8e:	39 0b       	sbc	r19, r25
    2b90:	4a 0b       	sbc	r20, r26
    2b92:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2b94:	57 fd       	sbrc	r21, 7
    2b96:	07 c0       	rjmp	.+14     	; 0x2ba6 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2b98:	21 15       	cp	r18, r1
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	41 05       	cpc	r20, r1
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	11 f0       	breq	.+4      	; 0x2ba6 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	14 c0       	rjmp	.+40     	; 0x2bce <Timebase_DownCounter_Period_Value_Expired+0x84>
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	8d e0       	ldi	r24, 0x0D	; 13
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	ac 01       	movw	r20, r24
    2bae:	64 9f       	mul	r22, r20
    2bb0:	c0 01       	movw	r24, r0
    2bb2:	65 9f       	mul	r22, r21
    2bb4:	90 0d       	add	r25, r0
    2bb6:	74 9f       	mul	r23, r20
    2bb8:	90 0d       	add	r25, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	c8 0f       	add	r28, r24
    2bbe:	d9 1f       	adc	r29, r25
    2bc0:	c2 5a       	subi	r28, 0xA2	; 162
    2bc2:	df 4f       	sbci	r29, 0xFF	; 255
    2bc4:	88 81       	ld	r24, Y
    2bc6:	80 ff       	sbrs	r24, 0
    2bc8:	21 e0       	ldi	r18, 0x01	; 1
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2bce:	82 2f       	mov	r24, r18
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	08 95       	ret

00002bd6 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2bd6:	1f 93       	push	r17
    2bd8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2bda:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <Timebase_DownCounter_Period_Value_Expired>
    2bde:	81 30       	cpi	r24, 0x01	; 1
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	18 c0       	rjmp	.+48     	; 0x2c16 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2be6:	e0 91 49 01 	lds	r30, 0x0149
    2bea:	f0 91 4a 01 	lds	r31, 0x014A
    2bee:	21 2f       	mov	r18, r17
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	8d e0       	ldi	r24, 0x0D	; 13
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	ac 01       	movw	r20, r24
    2bf8:	24 9f       	mul	r18, r20
    2bfa:	c0 01       	movw	r24, r0
    2bfc:	25 9f       	mul	r18, r21
    2bfe:	90 0d       	add	r25, r0
    2c00:	34 9f       	mul	r19, r20
    2c02:	90 0d       	add	r25, r0
    2c04:	11 24       	eor	r1, r1
    2c06:	e8 0f       	add	r30, r24
    2c08:	f9 1f       	adc	r31, r25
    2c0a:	e2 5a       	subi	r30, 0xA2	; 162
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	80 81       	ld	r24, Z
    2c10:	8e 7f       	andi	r24, 0xFE	; 254
    2c12:	80 83       	st	Z, r24
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2c16:	1f 91       	pop	r17
    2c18:	08 95       	ret

00002c1a <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	0e 94 8c 14 	call	0x2918	; 0x2918 <Timebase_DownCounter_Update>
  }
}
    2c20:	08 95       	ret

00002c22 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2c22:	e0 91 49 01 	lds	r30, 0x0149
    2c26:	f0 91 4a 01 	lds	r31, 0x014A
    2c2a:	e1 5a       	subi	r30, 0xA1	; 161
    2c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2e:	11 92       	st	Z+, r1
    2c30:	11 92       	st	Z+, r1
    2c32:	11 92       	st	Z+, r1
    2c34:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c36:	10 82       	st	Z, r1
    2c38:	11 82       	std	Z+1, r1	; 0x01
    2c3a:	12 82       	std	Z+2, r1	; 0x02
    2c3c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c3e:	35 97       	sbiw	r30, 0x05	; 5
    2c40:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2c42:	80 7e       	andi	r24, 0xE0	; 224
    2c44:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2c46:	08 95       	ret

00002c48 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2c48:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    2c4c:	0e 94 7f 12 	call	0x24fe	; 0x24fe <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2c50:	0e 94 11 16 	call	0x2c22	; 0x2c22 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2c54:	08 95       	ret

00002c56 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2c56:	0f 93       	push	r16
    2c58:	1f 93       	push	r17
    2c5a:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2c5c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2c60:	c8 01       	movw	r24, r16
    2c62:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Timebase_Timer_Config>
  Timebase_Reset();
    2c66:	0e 94 24 16 	call	0x2c48	; 0x2c48 <Timebase_Reset>
}
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

00002c70 <Timebase_Main_Loop_Executables>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2c70:	f8 94       	cli
void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
}

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    2c72:	e0 91 49 01 	lds	r30, 0x0149
    2c76:	f0 91 4a 01 	lds	r31, 0x014A
    2c7a:	86 85       	ldd	r24, Z+14	; 0x0e
    2c7c:	97 85       	ldd	r25, Z+15	; 0x0f
    2c7e:	91 87       	std	Z+9, r25	; 0x09
    2c80:	80 87       	std	Z+8, r24	; 0x08
  Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    2c82:	80 89       	ldd	r24, Z+16	; 0x10
    2c84:	91 89       	ldd	r25, Z+17	; 0x11
    2c86:	a2 89       	ldd	r26, Z+18	; 0x12
    2c88:	b3 89       	ldd	r27, Z+19	; 0x13
    2c8a:	82 87       	std	Z+10, r24	; 0x0a
    2c8c:	93 87       	std	Z+11, r25	; 0x0b
    2c8e:	a4 87       	std	Z+12, r26	; 0x0c
    2c90:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2c92:	78 94       	sei
  Timebase_Timer_Sync_With_Shadow_Variables();
  #endif
  
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2c94:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c96:	82 ff       	sbrs	r24, 2
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <Timebase_Main_Loop_Executables+0x30>
    //add upcounter ss function
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2c9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c9c:	8b 7f       	andi	r24, 0xFB	; 251
    2c9e:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2ca0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ca2:	80 ff       	sbrs	r24, 0
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <Timebase_Main_Loop_Executables+0x48>
    Timebase_UpCounter_Update_All();
    2ca6:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2caa:	e0 91 49 01 	lds	r30, 0x0149
    2cae:	f0 91 4a 01 	lds	r31, 0x014A
    2cb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cb4:	8e 7f       	andi	r24, 0xFE	; 254
    2cb6:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2cb8:	e0 91 49 01 	lds	r30, 0x0149
    2cbc:	f0 91 4a 01 	lds	r31, 0x014A
    2cc0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cc2:	83 ff       	sbrs	r24, 3
    2cc4:	09 c0       	rjmp	.+18     	; 0x2cd8 <Timebase_Main_Loop_Executables+0x68>
    Timebase_DownCounter_SS_Update_All();
    2cc6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2cca:	e0 91 49 01 	lds	r30, 0x0149
    2cce:	f0 91 4a 01 	lds	r31, 0x014A
    2cd2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cd4:	87 7f       	andi	r24, 0xF7	; 247
    2cd6:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2cd8:	e0 91 49 01 	lds	r30, 0x0149
    2cdc:	f0 91 4a 01 	lds	r31, 0x014A
    2ce0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ce2:	81 ff       	sbrs	r24, 1
    2ce4:	09 c0       	rjmp	.+18     	; 0x2cf8 <Timebase_Main_Loop_Executables+0x88>
    Timebase_DownCounter_Update_All();
    2ce6:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2cea:	e0 91 49 01 	lds	r30, 0x0149
    2cee:	f0 91 4a 01 	lds	r31, 0x014A
    2cf2:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cf4:	8d 7f       	andi	r24, 0xFD	; 253
    2cf6:	85 8f       	std	Z+29, r24	; 0x1d
    2cf8:	08 95       	ret

00002cfa <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    2cfa:	e0 91 49 01 	lds	r30, 0x0149
    2cfe:	f0 91 4a 01 	lds	r31, 0x014A
    2d02:	86 85       	ldd	r24, Z+14	; 0x0e
    2d04:	97 85       	ldd	r25, Z+15	; 0x0f
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	97 87       	std	Z+15, r25	; 0x0f
    2d0a:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2d0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d0e:	84 60       	ori	r24, 0x04	; 4
    2d10:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2d12:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d14:	88 60       	ori	r24, 0x08	; 8
    2d16:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if((Timebase->Time.SubSecondsShadow % Timebase->Config.UpdateRate) == 0){
    2d18:	86 85       	ldd	r24, Z+14	; 0x0e
    2d1a:	97 85       	ldd	r25, Z+15	; 0x0f
    2d1c:	61 81       	ldd	r22, Z+1	; 0x01
    2d1e:	72 81       	ldd	r23, Z+2	; 0x02
    2d20:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__udivmodhi4>
    2d24:	89 2b       	or	r24, r25
    2d26:	99 f4       	brne	.+38     	; 0x2d4e <Timebase_ISR_Executables+0x54>
    Timebase->Time.SecondsShadow++;
    2d28:	80 89       	ldd	r24, Z+16	; 0x10
    2d2a:	91 89       	ldd	r25, Z+17	; 0x11
    2d2c:	a2 89       	ldd	r26, Z+18	; 0x12
    2d2e:	b3 89       	ldd	r27, Z+19	; 0x13
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	a1 1d       	adc	r26, r1
    2d34:	b1 1d       	adc	r27, r1
    2d36:	80 8b       	std	Z+16, r24	; 0x10
    2d38:	91 8b       	std	Z+17, r25	; 0x11
    2d3a:	a2 8b       	std	Z+18, r26	; 0x12
    2d3c:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    2d3e:	17 86       	std	Z+15, r1	; 0x0f
    2d40:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2d42:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d44:	81 60       	ori	r24, 0x01	; 1
    2d46:	85 8f       	std	Z+29, r24	; 0x1d
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2d48:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d4a:	82 60       	ori	r24, 0x02	; 2
    2d4c:	85 8f       	std	Z+29, r24	; 0x1d
    2d4e:	08 95       	ret

00002d50 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2d50:	1f 92       	push	r1
    2d52:	0f 92       	push	r0
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	0f 92       	push	r0
    2d58:	11 24       	eor	r1, r1
    2d5a:	2f 93       	push	r18
    2d5c:	3f 93       	push	r19
    2d5e:	4f 93       	push	r20
    2d60:	5f 93       	push	r21
    2d62:	6f 93       	push	r22
    2d64:	7f 93       	push	r23
    2d66:	8f 93       	push	r24
    2d68:	9f 93       	push	r25
    2d6a:	af 93       	push	r26
    2d6c:	bf 93       	push	r27
    2d6e:	ef 93       	push	r30
    2d70:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2d72:	e0 91 49 01 	lds	r30, 0x0149
    2d76:	f0 91 4a 01 	lds	r31, 0x014A
    2d7a:	83 81       	ldd	r24, Z+3	; 0x03
    2d7c:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2d7e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <Timebase_ISR_Executables>
}
    2d82:	ff 91       	pop	r31
    2d84:	ef 91       	pop	r30
    2d86:	bf 91       	pop	r27
    2d88:	af 91       	pop	r26
    2d8a:	9f 91       	pop	r25
    2d8c:	8f 91       	pop	r24
    2d8e:	7f 91       	pop	r23
    2d90:	6f 91       	pop	r22
    2d92:	5f 91       	pop	r21
    2d94:	4f 91       	pop	r20
    2d96:	3f 91       	pop	r19
    2d98:	2f 91       	pop	r18
    2d9a:	0f 90       	pop	r0
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	0f 90       	pop	r0
    2da0:	1f 90       	pop	r1
    2da2:	18 95       	reti

00002da4 <__mulsi3>:
    2da4:	62 9f       	mul	r22, r18
    2da6:	d0 01       	movw	r26, r0
    2da8:	73 9f       	mul	r23, r19
    2daa:	f0 01       	movw	r30, r0
    2dac:	82 9f       	mul	r24, r18
    2dae:	e0 0d       	add	r30, r0
    2db0:	f1 1d       	adc	r31, r1
    2db2:	64 9f       	mul	r22, r20
    2db4:	e0 0d       	add	r30, r0
    2db6:	f1 1d       	adc	r31, r1
    2db8:	92 9f       	mul	r25, r18
    2dba:	f0 0d       	add	r31, r0
    2dbc:	83 9f       	mul	r24, r19
    2dbe:	f0 0d       	add	r31, r0
    2dc0:	74 9f       	mul	r23, r20
    2dc2:	f0 0d       	add	r31, r0
    2dc4:	65 9f       	mul	r22, r21
    2dc6:	f0 0d       	add	r31, r0
    2dc8:	99 27       	eor	r25, r25
    2dca:	72 9f       	mul	r23, r18
    2dcc:	b0 0d       	add	r27, r0
    2dce:	e1 1d       	adc	r30, r1
    2dd0:	f9 1f       	adc	r31, r25
    2dd2:	63 9f       	mul	r22, r19
    2dd4:	b0 0d       	add	r27, r0
    2dd6:	e1 1d       	adc	r30, r1
    2dd8:	f9 1f       	adc	r31, r25
    2dda:	bd 01       	movw	r22, r26
    2ddc:	cf 01       	movw	r24, r30
    2dde:	11 24       	eor	r1, r1
    2de0:	08 95       	ret

00002de2 <__udivmodhi4>:
    2de2:	aa 1b       	sub	r26, r26
    2de4:	bb 1b       	sub	r27, r27
    2de6:	51 e1       	ldi	r21, 0x11	; 17
    2de8:	07 c0       	rjmp	.+14     	; 0x2df8 <__udivmodhi4_ep>

00002dea <__udivmodhi4_loop>:
    2dea:	aa 1f       	adc	r26, r26
    2dec:	bb 1f       	adc	r27, r27
    2dee:	a6 17       	cp	r26, r22
    2df0:	b7 07       	cpc	r27, r23
    2df2:	10 f0       	brcs	.+4      	; 0x2df8 <__udivmodhi4_ep>
    2df4:	a6 1b       	sub	r26, r22
    2df6:	b7 0b       	sbc	r27, r23

00002df8 <__udivmodhi4_ep>:
    2df8:	88 1f       	adc	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	5a 95       	dec	r21
    2dfe:	a9 f7       	brne	.-22     	; 0x2dea <__udivmodhi4_loop>
    2e00:	80 95       	com	r24
    2e02:	90 95       	com	r25
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	08 95       	ret

00002e0a <__udivmodsi4>:
    2e0a:	a1 e2       	ldi	r26, 0x21	; 33
    2e0c:	1a 2e       	mov	r1, r26
    2e0e:	aa 1b       	sub	r26, r26
    2e10:	bb 1b       	sub	r27, r27
    2e12:	fd 01       	movw	r30, r26
    2e14:	0d c0       	rjmp	.+26     	; 0x2e30 <__udivmodsi4_ep>

00002e16 <__udivmodsi4_loop>:
    2e16:	aa 1f       	adc	r26, r26
    2e18:	bb 1f       	adc	r27, r27
    2e1a:	ee 1f       	adc	r30, r30
    2e1c:	ff 1f       	adc	r31, r31
    2e1e:	a2 17       	cp	r26, r18
    2e20:	b3 07       	cpc	r27, r19
    2e22:	e4 07       	cpc	r30, r20
    2e24:	f5 07       	cpc	r31, r21
    2e26:	20 f0       	brcs	.+8      	; 0x2e30 <__udivmodsi4_ep>
    2e28:	a2 1b       	sub	r26, r18
    2e2a:	b3 0b       	sbc	r27, r19
    2e2c:	e4 0b       	sbc	r30, r20
    2e2e:	f5 0b       	sbc	r31, r21

00002e30 <__udivmodsi4_ep>:
    2e30:	66 1f       	adc	r22, r22
    2e32:	77 1f       	adc	r23, r23
    2e34:	88 1f       	adc	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	1a 94       	dec	r1
    2e3a:	69 f7       	brne	.-38     	; 0x2e16 <__udivmodsi4_loop>
    2e3c:	60 95       	com	r22
    2e3e:	70 95       	com	r23
    2e40:	80 95       	com	r24
    2e42:	90 95       	com	r25
    2e44:	9b 01       	movw	r18, r22
    2e46:	ac 01       	movw	r20, r24
    2e48:	bd 01       	movw	r22, r26
    2e4a:	cf 01       	movw	r24, r30
    2e4c:	08 95       	ret

00002e4e <__divmodsi4>:
    2e4e:	97 fb       	bst	r25, 7
    2e50:	09 2e       	mov	r0, r25
    2e52:	05 26       	eor	r0, r21
    2e54:	0e d0       	rcall	.+28     	; 0x2e72 <__divmodsi4_neg1>
    2e56:	57 fd       	sbrc	r21, 7
    2e58:	04 d0       	rcall	.+8      	; 0x2e62 <__divmodsi4_neg2>
    2e5a:	d7 df       	rcall	.-82     	; 0x2e0a <__udivmodsi4>
    2e5c:	0a d0       	rcall	.+20     	; 0x2e72 <__divmodsi4_neg1>
    2e5e:	00 1c       	adc	r0, r0
    2e60:	38 f4       	brcc	.+14     	; 0x2e70 <__divmodsi4_exit>

00002e62 <__divmodsi4_neg2>:
    2e62:	50 95       	com	r21
    2e64:	40 95       	com	r20
    2e66:	30 95       	com	r19
    2e68:	21 95       	neg	r18
    2e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e6c:	4f 4f       	sbci	r20, 0xFF	; 255
    2e6e:	5f 4f       	sbci	r21, 0xFF	; 255

00002e70 <__divmodsi4_exit>:
    2e70:	08 95       	ret

00002e72 <__divmodsi4_neg1>:
    2e72:	f6 f7       	brtc	.-4      	; 0x2e70 <__divmodsi4_exit>
    2e74:	90 95       	com	r25
    2e76:	80 95       	com	r24
    2e78:	70 95       	com	r23
    2e7a:	61 95       	neg	r22
    2e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	08 95       	ret

00002e84 <_exit>:
    2e84:	f8 94       	cli

00002e86 <__stop_program>:
    2e86:	ff cf       	rjmp	.-2      	; 0x2e86 <__stop_program>
