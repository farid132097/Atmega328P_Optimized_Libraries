
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002008  0000209c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800124  00800124  000020c0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000020c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000109c  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033ec  00000000  00000000  000031bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000562  00000000  00000000  000065a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aab  00000000  00000000  00006b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  000085b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000012b8  00000000  00000000  00008d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012ca  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000b29a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 b6 0d 	jmp	0x1b6c	; 0x1b6c <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 6a 0d 	jmp	0x1ad4	; 0x1ad4 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e0       	ldi	r30, 0x08	; 8
      7c:	f0 e2       	ldi	r31, 0x20	; 32
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 37       	cpi	r26, 0x74	; 116
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 02 10 	jmp	0x2004	; 0x2004 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<0);
      ba:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
      bc:	58 98       	cbi	0x0b, 0	; 11
      be:	88 e8       	ldi	r24, 0x88	; 136
      c0:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	2c e2       	ldi	r18, 0x2C	; 44
      c4:	31 e0       	ldi	r19, 0x01	; 1
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
  _delay_ms(500);
  
  
  //Timebase_DownCounter_Set_Securely(0, 14);
  Timebase_DownCounter_SS_Set_Securely(0, 14000);
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	40 eb       	ldi	r20, 0xB0	; 176
      d4:	56 e3       	ldi	r21, 0x36	; 54
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	0e 94 df 05 	call	0xbbe	; 0xbbe <Timebase_DownCounter_SS_Set_Securely>
  Timebase_LPDownCounter_Set_Securely(0, 5);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	45 e0       	ldi	r20, 0x05	; 5
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	0e 94 9c 0a 	call	0x1538	; 0x1538 <Timebase_LPDownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(10);
      ec:	8a e0       	ldi	r24, 0x0A	; 10
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 05 03 	call	0x60a	; 0x60a <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Byte_Hex(Timebase_Get_Update_Req_Sts());
      f4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <Timebase_Get_Update_Req_Sts>
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	bc 01       	movw	r22, r24
     100:	cd 01       	movw	r24, r26
     102:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <UART_Transmit_Byte_Hex>
	UART_Transmit_Text(",");
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_LPTimer_Get_Seconds());
     10e:	0e 94 80 03 	call	0x700	; 0x700 <Timebase_LPTimer_Get_Seconds>
     112:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	91 e0       	ldi	r25, 0x01	; 1
     11a:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_LPDownCounter_Get_Value(0));
     11e:	80 e0       	ldi	r24, 0x00	; 0
     120:	0e 94 25 09 	call	0x124a	; 0x124a <Timebase_LPDownCounter_Get_Value>
     124:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
     130:	0e 94 55 02 	call	0x4aa	; 0x4aa <Timebase_Timer_Get_Seconds>
     134:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
     140:	0e 94 4d 02 	call	0x49a	; 0x49a <Timebase_Timer_Get_SubSeconds>
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b0 e0       	ldi	r27, 0x00	; 0
     148:	bc 01       	movw	r22, r24
     14a:	cd 01       	movw	r24, r26
     14c:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	0e 94 0e 04 	call	0x81c	; 0x81c <Timebase_DownCounter_SS_Get_Value>
     15e:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <UART_Transmit_Number>
	//UART_Transmit_Text(",");
	//UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
	UART_Transmit_Text("\r\n");
     162:	82 e0       	ldi	r24, 0x02	; 2
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
    
	if(Timebase_LPDownCounter_Continuous_Expired_Event(0)){
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <Timebase_LPDownCounter_Continuous_Expired_Event>
     170:	88 23       	and	r24, r24
     172:	21 f0       	breq	.+8      	; 0x17c <main+0xd6>
	  UART_Transmit_Text("LPTIM Expired\r\n");
     174:	85 e0       	ldi	r24, 0x05	; 5
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
	}
	
	
	
	PORTD |= (1<<0);
     17c:	58 9a       	sbi	0x0b, 0	; 11
	Timebase_Main_Loop_Executables();
     17e:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<0);
     182:	58 98       	cbi	0x0b, 0	; 11
     184:	b3 cf       	rjmp	.-154    	; 0xec <main+0x46>

00000186 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     186:	80 e3       	ldi	r24, 0x30	; 48
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	90 93 2f 01 	sts	0x012F, r25
     18e:	80 93 2e 01 	sts	0x012E, r24
  Timebase->Config.UpdateRate = 1;
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	90 93 31 01 	sts	0x0131, r25
     19a:	80 93 30 01 	sts	0x0130, r24
  Timebase->Time.OVFUpdateValue=0;
     19e:	10 92 35 01 	sts	0x0135, r1
     1a2:	10 92 34 01 	sts	0x0134, r1
  Timebase->Time.SubSecondsShadow = 0;
     1a6:	10 92 41 01 	sts	0x0141, r1
     1aa:	10 92 40 01 	sts	0x0140, r1
  Timebase->Time.SecondsShadow = 0;
     1ae:	10 92 42 01 	sts	0x0142, r1
     1b2:	10 92 43 01 	sts	0x0143, r1
     1b6:	10 92 44 01 	sts	0x0144, r1
     1ba:	10 92 45 01 	sts	0x0145, r1
  Timebase->Time.SubSeconds = 0;
     1be:	10 92 3b 01 	sts	0x013B, r1
     1c2:	10 92 3a 01 	sts	0x013A, r1
  Timebase->Time.Seconds = 0;
     1c6:	10 92 3c 01 	sts	0x013C, r1
     1ca:	10 92 3d 01 	sts	0x013D, r1
     1ce:	10 92 3e 01 	sts	0x013E, r1
     1d2:	10 92 3f 01 	sts	0x013F, r1
  Timebase->Time.VariablesSync = 0;
     1d6:	10 92 46 01 	sts	0x0146, r1
  Timebase->Time.LastSample = 0;
     1da:	10 92 36 01 	sts	0x0136, r1
     1de:	10 92 37 01 	sts	0x0137, r1
     1e2:	10 92 38 01 	sts	0x0138, r1
     1e6:	10 92 39 01 	sts	0x0139, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds = 0;
     1ea:	10 92 48 01 	sts	0x0148, r1
     1ee:	10 92 47 01 	sts	0x0147, r1
  Timebase->Time.LPTimerSeconds = 0;
     1f2:	10 92 49 01 	sts	0x0149, r1
     1f6:	10 92 4a 01 	sts	0x014A, r1
     1fa:	10 92 4b 01 	sts	0x014B, r1
     1fe:	10 92 4c 01 	sts	0x014C, r1
  Timebase->Config.LPUpdateRate = 1;
     202:	90 93 33 01 	sts	0x0133, r25
     206:	80 93 32 01 	sts	0x0132, r24
  #endif
  
  Timebase->UpdateRequest = 0;
     20a:	10 92 4d 01 	sts	0x014D, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     20e:	10 92 4e 01 	sts	0x014E, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     212:	10 92 4f 01 	sts	0x014F, r1
     216:	10 92 50 01 	sts	0x0150, r1
     21a:	10 92 51 01 	sts	0x0151, r1
     21e:	10 92 52 01 	sts	0x0152, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     222:	10 92 53 01 	sts	0x0153, r1
     226:	10 92 54 01 	sts	0x0154, r1
     22a:	10 92 55 01 	sts	0x0155, r1
     22e:	10 92 56 01 	sts	0x0156, r1
    Timebase->DownCounterSS[i].Value = 0;
     232:	10 92 57 01 	sts	0x0157, r1
     236:	10 92 58 01 	sts	0x0158, r1
     23a:	10 92 59 01 	sts	0x0159, r1
     23e:	10 92 5a 01 	sts	0x015A, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     242:	10 92 5b 01 	sts	0x015B, r1
     246:	10 92 5c 01 	sts	0x015C, r1
     24a:	10 92 5d 01 	sts	0x015D, r1
     24e:	10 92 5e 01 	sts	0x015E, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     252:	10 92 5f 01 	sts	0x015F, r1
     256:	10 92 60 01 	sts	0x0160, r1
     25a:	10 92 61 01 	sts	0x0161, r1
     25e:	10 92 62 01 	sts	0x0162, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     262:	10 92 63 01 	sts	0x0163, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     266:	10 92 64 01 	sts	0x0164, r1
     26a:	10 92 65 01 	sts	0x0165, r1
     26e:	10 92 66 01 	sts	0x0166, r1
     272:	10 92 67 01 	sts	0x0167, r1
    Timebase->LPDownCounter[i].Value = 0;
     276:	10 92 68 01 	sts	0x0168, r1
     27a:	10 92 69 01 	sts	0x0169, r1
     27e:	10 92 6a 01 	sts	0x016A, r1
     282:	10 92 6b 01 	sts	0x016B, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     286:	10 92 6c 01 	sts	0x016C, r1
     28a:	10 92 6d 01 	sts	0x016D, r1
     28e:	10 92 6e 01 	sts	0x016E, r1
     292:	10 92 6f 01 	sts	0x016F, r1
	Timebase->LPDownCounter[i].ReloadValue = 0;
     296:	10 92 70 01 	sts	0x0170, r1
     29a:	10 92 71 01 	sts	0x0171, r1
     29e:	10 92 72 01 	sts	0x0172, r1
     2a2:	10 92 73 01 	sts	0x0173, r1
  }
  #endif
  
}
     2a6:	08 95       	ret

000002a8 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     2a8:	8f 92       	push	r8
     2aa:	9f 92       	push	r9
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	df 93       	push	r29
     2bc:	cf 93       	push	r28
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	2a 97       	sbiw	r28, 0x0a	; 10
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     2d0:	de 01       	movw	r26, r28
     2d2:	11 96       	adiw	r26, 0x01	; 1
     2d4:	e5 e1       	ldi	r30, 0x15	; 21
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	8a e0       	ldi	r24, 0x0A	; 10
     2da:	01 90       	ld	r0, Z+
     2dc:	0d 92       	st	X+, r0
     2de:	81 50       	subi	r24, 0x01	; 1
     2e0:	e1 f7       	brne	.-8      	; 0x2da <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     2e2:	94 01       	movw	r18, r8
     2e4:	40 e0       	ldi	r20, 0x00	; 0
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	7b e1       	ldi	r23, 0x1B	; 27
     2ec:	87 eb       	ldi	r24, 0xB7	; 183
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     2f4:	b2 2e       	mov	r11, r18
     2f6:	c3 2e       	mov	r12, r19
     2f8:	d4 2e       	mov	r13, r20
     2fa:	05 2f       	mov	r16, r21
     2fc:	7e 01       	movw	r14, r28
     2fe:	08 94       	sec
     300:	e1 1c       	adc	r14, r1
     302:	f1 1c       	adc	r15, r1
     304:	c9 01       	movw	r24, r18
     306:	da 01       	movw	r26, r20
     308:	9c 01       	movw	r18, r24
     30a:	ad 01       	movw	r20, r26
     30c:	10 e0       	ldi	r17, 0x00	; 0
     30e:	13 c0       	rjmp	.+38     	; 0x336 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     310:	f7 01       	movw	r30, r14
     312:	21 91       	ld	r18, Z+
     314:	31 91       	ld	r19, Z+
     316:	7f 01       	movw	r14, r30
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	50 e0       	ldi	r21, 0x00	; 0
     31c:	6b 2d       	mov	r22, r11
     31e:	7c 2d       	mov	r23, r12
     320:	8d 2d       	mov	r24, r13
     322:	90 2f       	mov	r25, r16
     324:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     328:	c9 01       	movw	r24, r18
     32a:	da 01       	movw	r26, r20
     32c:	9c 01       	movw	r18, r24
     32e:	ad 01       	movw	r20, r26
	clock_div_index++;
     330:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     332:	15 30       	cpi	r17, 0x05	; 5
     334:	31 f0       	breq	.+12     	; 0x342 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     336:	2f 3f       	cpi	r18, 0xFF	; 255
     338:	31 05       	cpc	r19, r1
     33a:	41 05       	cpc	r20, r1
     33c:	51 05       	cpc	r21, r1
     33e:	09 f0       	breq	.+2      	; 0x342 <Timebase_Timer_Enable+0x9a>
     340:	3c f7       	brge	.-50     	; 0x310 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     342:	81 2f       	mov	r24, r17
     344:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     346:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     348:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     34a:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     34e:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     350:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     352:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     354:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     356:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     358:	88 23       	and	r24, r24
     35a:	11 f4       	brne	.+4      	; 0x360 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	0f c0       	rjmp	.+30     	; 0x37e <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	11 f4       	brne	.+4      	; 0x368 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     364:	82 e0       	ldi	r24, 0x02	; 2
     366:	0b c0       	rjmp	.+22     	; 0x37e <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     368:	82 30       	cpi	r24, 0x02	; 2
     36a:	11 f4       	brne	.+4      	; 0x370 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	07 c0       	rjmp	.+14     	; 0x37e <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     370:	83 30       	cpi	r24, 0x03	; 3
     372:	11 f4       	brne	.+4      	; 0x378 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     374:	84 e0       	ldi	r24, 0x04	; 4
     376:	03 c0       	rjmp	.+6      	; 0x37e <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     378:	84 30       	cpi	r24, 0x04	; 4
     37a:	11 f4       	brne	.+4      	; 0x380 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     37c:	85 e0       	ldi	r24, 0x05	; 5
     37e:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     380:	e0 91 2e 01 	lds	r30, 0x012E
     384:	f0 91 2f 01 	lds	r31, 0x012F
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	82 1b       	sub	r24, r18
     38e:	93 0b       	sbc	r25, r19
     390:	95 83       	std	Z+5, r25	; 0x05
     392:	84 83       	std	Z+4, r24	; 0x04
  TCNT0  = Timebase->Time.OVFUpdateValue;
     394:	84 81       	ldd	r24, Z+4	; 0x04
     396:	95 81       	ldd	r25, Z+5	; 0x05
     398:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 6e 00 	sts	0x006E, r24
  sei();
     3a0:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     3a2:	91 82       	std	Z+1, r9	; 0x01
     3a4:	80 82       	st	Z, r8
}
     3a6:	2a 96       	adiw	r28, 0x0a	; 10
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	de bf       	out	0x3e, r29	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	bf 90       	pop	r11
     3c4:	9f 90       	pop	r9
     3c6:	8f 90       	pop	r8
     3c8:	08 95       	ret

000003ca <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     3ca:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     3cc:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     3ce:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     3d2:	87 e0       	ldi	r24, 0x07	; 7
     3d4:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     3d6:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     3d8:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     3da:	16 bc       	out	0x26, r1	; 38
}
     3dc:	08 95       	ret

000003de <Timebase_LPTimer_Enable>:



#ifdef TIMEBASE_LP_TIMER_ENABLE

void Timebase_LPTimer_Enable(uint16_t UpdateRateHz){
     3de:	9c 01       	movw	r18, r24
    uint8_t  Prescaler_val;
	
    if(UpdateRateHz == 1){
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	91 05       	cpc	r25, r1
     3e4:	11 f4       	brne	.+4      	; 0x3ea <Timebase_LPTimer_Enable+0xc>
     3e6:	96 e0       	ldi	r25, 0x06	; 6
     3e8:	19 c0       	rjmp	.+50     	; 0x41c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     3ea:	82 30       	cpi	r24, 0x02	; 2
     3ec:	91 05       	cpc	r25, r1
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <Timebase_LPTimer_Enable+0x16>
     3f0:	95 e0       	ldi	r25, 0x05	; 5
     3f2:	14 c0       	rjmp	.+40     	; 0x41c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     3f4:	84 30       	cpi	r24, 0x04	; 4
     3f6:	91 05       	cpc	r25, r1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <Timebase_LPTimer_Enable+0x20>
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	0f c0       	rjmp	.+30     	; 0x41c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	91 05       	cpc	r25, r1
     402:	11 f4       	brne	.+4      	; 0x408 <Timebase_LPTimer_Enable+0x2a>
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	0a c0       	rjmp	.+20     	; 0x41c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     408:	80 31       	cpi	r24, 0x10	; 16
     40a:	91 05       	cpc	r25, r1
     40c:	11 f4       	brne	.+4      	; 0x412 <Timebase_LPTimer_Enable+0x34>
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	05 c0       	rjmp	.+10     	; 0x41c <Timebase_LPTimer_Enable+0x3e>
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	20 32       	cpi	r18, 0x20	; 32
     416:	31 05       	cpc	r19, r1
     418:	09 f4       	brne	.+2      	; 0x41c <Timebase_LPTimer_Enable+0x3e>
     41a:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     41c:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     41e:	84 b7       	in	r24, 0x34	; 52
     420:	87 7f       	andi	r24, 0xF7	; 247
     422:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     424:	80 91 60 00 	lds	r24, 0x0060
     428:	80 68       	ori	r24, 0x80	; 128
     42a:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     42e:	80 91 60 00 	lds	r24, 0x0060
     432:	88 61       	ori	r24, 0x18	; 24
     434:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     438:	90 64       	ori	r25, 0x40	; 64
     43a:	90 93 60 00 	sts	0x0060, r25
    sei();
     43e:	78 94       	sei
	Timebase->Config.LPUpdateRate = UpdateRateHz;
     440:	e0 91 2e 01 	lds	r30, 0x012E
     444:	f0 91 2f 01 	lds	r31, 0x012F
     448:	33 83       	std	Z+3, r19	; 0x03
     44a:	22 83       	std	Z+2, r18	; 0x02
}
     44c:	08 95       	ret

0000044e <Timebase_LPTimer_Disable>:


void Timebase_LPTimer_Disable(void){
    cli();
     44e:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     450:	84 b7       	in	r24, 0x34	; 52
     452:	87 7f       	andi	r24, 0xF7	; 247
     454:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     456:	e0 e6       	ldi	r30, 0x60	; 96
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	80 68       	ori	r24, 0x80	; 128
     45e:	80 83       	st	Z, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     460:	80 81       	ld	r24, Z
     462:	88 61       	ori	r24, 0x18	; 24
     464:	80 83       	st	Z, r24
    WDTCSR  = 0x00;
     466:	10 82       	st	Z, r1
    sei();
     468:	78 94       	sei
}
     46a:	08 95       	ret

0000046c <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     46c:	f8 94       	cli
}
     46e:	08 95       	ret

00000470 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     470:	78 94       	sei
}
     472:	08 95       	ret

00000474 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     474:	e0 91 2e 01 	lds	r30, 0x012E
     478:	f0 91 2f 01 	lds	r31, 0x012F
     47c:	20 89       	ldd	r18, Z+16	; 0x10
     47e:	31 89       	ldd	r19, Z+17	; 0x11
}
     480:	c9 01       	movw	r24, r18
     482:	08 95       	ret

00000484 <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     484:	e0 91 2e 01 	lds	r30, 0x012E
     488:	f0 91 2f 01 	lds	r31, 0x012F
     48c:	22 89       	ldd	r18, Z+18	; 0x12
     48e:	33 89       	ldd	r19, Z+19	; 0x13
     490:	44 89       	ldd	r20, Z+20	; 0x14
     492:	55 89       	ldd	r21, Z+21	; 0x15
}
     494:	b9 01       	movw	r22, r18
     496:	ca 01       	movw	r24, r20
     498:	08 95       	ret

0000049a <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     49a:	e0 91 2e 01 	lds	r30, 0x012E
     49e:	f0 91 2f 01 	lds	r31, 0x012F
     4a2:	22 85       	ldd	r18, Z+10	; 0x0a
     4a4:	33 85       	ldd	r19, Z+11	; 0x0b
}
     4a6:	c9 01       	movw	r24, r18
     4a8:	08 95       	ret

000004aa <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     4aa:	e0 91 2e 01 	lds	r30, 0x012E
     4ae:	f0 91 2f 01 	lds	r31, 0x012F
     4b2:	24 85       	ldd	r18, Z+12	; 0x0c
     4b4:	35 85       	ldd	r19, Z+13	; 0x0d
     4b6:	46 85       	ldd	r20, Z+14	; 0x0e
     4b8:	57 85       	ldd	r21, Z+15	; 0x0f
}
     4ba:	b9 01       	movw	r22, r18
     4bc:	ca 01       	movw	r24, r20
     4be:	08 95       	ret

000004c0 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     4c0:	e0 91 2e 01 	lds	r30, 0x012E
     4c4:	f0 91 2f 01 	lds	r31, 0x012F
     4c8:	93 87       	std	Z+11, r25	; 0x0b
     4ca:	82 87       	std	Z+10, r24	; 0x0a
}
     4cc:	08 95       	ret

000004ce <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     4ce:	e0 91 2e 01 	lds	r30, 0x012E
     4d2:	f0 91 2f 01 	lds	r31, 0x012F
     4d6:	64 87       	std	Z+12, r22	; 0x0c
     4d8:	75 87       	std	Z+13, r23	; 0x0d
     4da:	86 87       	std	Z+14, r24	; 0x0e
     4dc:	97 87       	std	Z+15, r25	; 0x0f
}
     4de:	08 95       	ret

000004e0 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4e0:	e0 91 2e 01 	lds	r30, 0x012E
     4e4:	f0 91 2f 01 	lds	r31, 0x012F
     4e8:	20 89       	ldd	r18, Z+16	; 0x10
     4ea:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     4ec:	80 89       	ldd	r24, Z+16	; 0x10
     4ee:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	c9 f7       	brne	.-14     	; 0x4e8 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     4f6:	c9 01       	movw	r24, r18
     4f8:	08 95       	ret

000004fa <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4fa:	e0 91 2e 01 	lds	r30, 0x012E
     4fe:	f0 91 2f 01 	lds	r31, 0x012F
     502:	22 89       	ldd	r18, Z+18	; 0x12
     504:	33 89       	ldd	r19, Z+19	; 0x13
     506:	44 89       	ldd	r20, Z+20	; 0x14
     508:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     50a:	82 89       	ldd	r24, Z+18	; 0x12
     50c:	93 89       	ldd	r25, Z+19	; 0x13
     50e:	a4 89       	ldd	r26, Z+20	; 0x14
     510:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     512:	28 17       	cp	r18, r24
     514:	39 07       	cpc	r19, r25
     516:	4a 07       	cpc	r20, r26
     518:	5b 07       	cpc	r21, r27
     51a:	99 f7       	brne	.-26     	; 0x502 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     51c:	b9 01       	movw	r22, r18
     51e:	ca 01       	movw	r24, r20
     520:	08 95       	ret

00000522 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     522:	e0 91 2e 01 	lds	r30, 0x012E
     526:	f0 91 2f 01 	lds	r31, 0x012F
     52a:	86 89       	ldd	r24, Z+22	; 0x16
     52c:	88 23       	and	r24, r24
     52e:	81 f4       	brne	.+32     	; 0x550 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     530:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     532:	80 89       	ldd	r24, Z+16	; 0x10
     534:	91 89       	ldd	r25, Z+17	; 0x11
     536:	93 87       	std	Z+11, r25	; 0x0b
     538:	82 87       	std	Z+10, r24	; 0x0a
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     53a:	82 89       	ldd	r24, Z+18	; 0x12
     53c:	93 89       	ldd	r25, Z+19	; 0x13
     53e:	a4 89       	ldd	r26, Z+20	; 0x14
     540:	b5 89       	ldd	r27, Z+21	; 0x15
     542:	84 87       	std	Z+12, r24	; 0x0c
     544:	95 87       	std	Z+13, r25	; 0x0d
     546:	a6 87       	std	Z+14, r26	; 0x0e
     548:	b7 87       	std	Z+15, r27	; 0x0f
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     54a:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	86 8b       	std	Z+22, r24	; 0x16
     550:	08 95       	ret

00000552 <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     552:	6f 92       	push	r6
     554:	7f 92       	push	r7
     556:	8f 92       	push	r8
     558:	9f 92       	push	r9
     55a:	af 92       	push	r10
     55c:	bf 92       	push	r11
     55e:	cf 92       	push	r12
     560:	df 92       	push	r13
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     570:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     572:	c0 91 2e 01 	lds	r28, 0x012E
     576:	d0 91 2f 01 	lds	r29, 0x012F
     57a:	e8 88       	ldd	r14, Y+16	; 0x10
     57c:	f9 88       	ldd	r15, Y+17	; 0x11
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     57e:	2a 89       	ldd	r18, Y+18	; 0x12
     580:	3b 89       	ldd	r19, Y+19	; 0x13
     582:	4c 89       	ldd	r20, Y+20	; 0x14
     584:	5d 89       	ldd	r21, Y+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     586:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     588:	68 81       	ld	r22, Y
     58a:	79 81       	ldd	r23, Y+1	; 0x01
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsi3>
     594:	3b 01       	movw	r6, r22
     596:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     598:	00 e0       	ldi	r16, 0x00	; 0
     59a:	10 e0       	ldi	r17, 0x00	; 0
     59c:	6e 0c       	add	r6, r14
     59e:	7f 1c       	adc	r7, r15
     5a0:	80 1e       	adc	r8, r16
     5a2:	91 1e       	adc	r9, r17
  smpl_val += value;
     5a4:	cc 24       	eor	r12, r12
     5a6:	dd 24       	eor	r13, r13
     5a8:	6a 0c       	add	r6, r10
     5aa:	7b 1c       	adc	r7, r11
     5ac:	8c 1c       	adc	r8, r12
     5ae:	9d 1c       	adc	r9, r13
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	14 c0       	rjmp	.+40     	; 0x5e2 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5ba:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5bc:	e8 88       	ldd	r14, Y+16	; 0x10
     5be:	f9 88       	ldd	r15, Y+17	; 0x11
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     5c0:	2a 89       	ldd	r18, Y+18	; 0x12
     5c2:	3b 89       	ldd	r19, Y+19	; 0x13
     5c4:	4c 89       	ldd	r20, Y+20	; 0x14
     5c6:	5d 89       	ldd	r21, Y+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     5c8:	78 94       	sei
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     5ca:	68 81       	ld	r22, Y
     5cc:	79 81       	ldd	r23, Y+1	; 0x01
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsi3>
	curr_val += curr_ss;
     5d6:	00 e0       	ldi	r16, 0x00	; 0
     5d8:	10 e0       	ldi	r17, 0x00	; 0
     5da:	6e 0d       	add	r22, r14
     5dc:	7f 1d       	adc	r23, r15
     5de:	80 1f       	adc	r24, r16
     5e0:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5e2:	66 15       	cp	r22, r6
     5e4:	77 05       	cpc	r23, r7
     5e6:	88 05       	cpc	r24, r8
     5e8:	99 05       	cpc	r25, r9
     5ea:	3c f3       	brlt	.-50     	; 0x5ba <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	1f 91       	pop	r17
     5f2:	0f 91       	pop	r16
     5f4:	ff 90       	pop	r15
     5f6:	ef 90       	pop	r14
     5f8:	df 90       	pop	r13
     5fa:	cf 90       	pop	r12
     5fc:	bf 90       	pop	r11
     5fe:	af 90       	pop	r10
     600:	9f 90       	pop	r9
     602:	8f 90       	pop	r8
     604:	7f 90       	pop	r7
     606:	6f 90       	pop	r6
     608:	08 95       	ret

0000060a <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     60a:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     60c:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     60e:	e0 91 2e 01 	lds	r30, 0x012E
     612:	f0 91 2f 01 	lds	r31, 0x012F
     616:	01 c0       	rjmp	.+2      	; 0x61a <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     618:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     61a:	80 89       	ldd	r24, Z+16	; 0x10
     61c:	91 89       	ldd	r25, Z+17	; 0x11
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     61e:	78 94       	sei
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     620:	26 81       	ldd	r18, Z+6	; 0x06
     622:	37 81       	ldd	r19, Z+7	; 0x07
     624:	40 85       	ldd	r20, Z+8	; 0x08
     626:	51 85       	ldd	r21, Z+9	; 0x09
     628:	a0 e0       	ldi	r26, 0x00	; 0
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	82 17       	cp	r24, r18
     62e:	93 07       	cpc	r25, r19
     630:	a4 07       	cpc	r26, r20
     632:	b5 07       	cpc	r27, r21
     634:	89 f7       	brne	.-30     	; 0x618 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     636:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     638:	80 89       	ldd	r24, Z+16	; 0x10
     63a:	91 89       	ldd	r25, Z+17	; 0x11
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     63c:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     63e:	a0 e0       	ldi	r26, 0x00	; 0
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	86 83       	std	Z+6, r24	; 0x06
     644:	97 83       	std	Z+7, r25	; 0x07
     646:	a0 87       	std	Z+8, r26	; 0x08
     648:	b1 87       	std	Z+9, r27	; 0x09
  Timebase->Time.LastSample += value;
     64a:	26 81       	ldd	r18, Z+6	; 0x06
     64c:	37 81       	ldd	r19, Z+7	; 0x07
     64e:	40 85       	ldd	r20, Z+8	; 0x08
     650:	51 85       	ldd	r21, Z+9	; 0x09
     652:	cb 01       	movw	r24, r22
     654:	a0 e0       	ldi	r26, 0x00	; 0
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	82 0f       	add	r24, r18
     65a:	93 1f       	adc	r25, r19
     65c:	a4 1f       	adc	r26, r20
     65e:	b5 1f       	adc	r27, r21
     660:	86 83       	std	Z+6, r24	; 0x06
     662:	97 83       	std	Z+7, r25	; 0x07
     664:	a0 87       	std	Z+8, r26	; 0x08
     666:	b1 87       	std	Z+9, r27	; 0x09
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     668:	26 81       	ldd	r18, Z+6	; 0x06
     66a:	37 81       	ldd	r19, Z+7	; 0x07
     66c:	40 85       	ldd	r20, Z+8	; 0x08
     66e:	51 85       	ldd	r21, Z+9	; 0x09
     670:	80 81       	ld	r24, Z
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	a0 e0       	ldi	r26, 0x00	; 0
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	28 17       	cp	r18, r24
     67a:	39 07       	cpc	r19, r25
     67c:	4a 07       	cpc	r20, r26
     67e:	5b 07       	cpc	r21, r27
     680:	84 f0       	brlt	.+32     	; 0x6a2 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     682:	26 81       	ldd	r18, Z+6	; 0x06
     684:	37 81       	ldd	r19, Z+7	; 0x07
     686:	40 85       	ldd	r20, Z+8	; 0x08
     688:	51 85       	ldd	r21, Z+9	; 0x09
     68a:	80 81       	ld	r24, Z
     68c:	91 81       	ldd	r25, Z+1	; 0x01
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e0       	ldi	r27, 0x00	; 0
     692:	28 1b       	sub	r18, r24
     694:	39 0b       	sbc	r19, r25
     696:	4a 0b       	sbc	r20, r26
     698:	5b 0b       	sbc	r21, r27
     69a:	26 83       	std	Z+6, r18	; 0x06
     69c:	37 83       	std	Z+7, r19	; 0x07
     69e:	40 87       	std	Z+8, r20	; 0x08
     6a0:	51 87       	std	Z+9, r21	; 0x09
     6a2:	08 95       	ret

000006a4 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6a4:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6a6:	e0 91 2e 01 	lds	r30, 0x012E
     6aa:	f0 91 2f 01 	lds	r31, 0x012F
     6ae:	22 89       	ldd	r18, Z+18	; 0x12
     6b0:	33 89       	ldd	r19, Z+19	; 0x13
     6b2:	44 89       	ldd	r20, Z+20	; 0x14
     6b4:	55 89       	ldd	r21, Z+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     6b6:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     6b8:	a0 e0       	ldi	r26, 0x00	; 0
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	a4 1f       	adc	r26, r20
     6c2:	b5 1f       	adc	r27, r21
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6ce:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6d0:	22 89       	ldd	r18, Z+18	; 0x12
     6d2:	33 89       	ldd	r19, Z+19	; 0x13
     6d4:	44 89       	ldd	r20, Z+20	; 0x14
     6d6:	55 89       	ldd	r21, Z+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     6d8:	78 94       	sei
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     6da:	28 17       	cp	r18, r24
     6dc:	39 07       	cpc	r19, r25
     6de:	4a 07       	cpc	r20, r26
     6e0:	5b 07       	cpc	r21, r27
     6e2:	ac f3       	brlt	.-22     	; 0x6ce <Timebase_Timer_Delay_Seconds+0x2a>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     6e4:	08 95       	ret

000006e6 <Timebase_LPTimer_Get_SubSeconds>:
#ifdef TIMEBASE_LP_TIMER_ENABLE

uint16_t Timebase_LPTimer_Get_SubSeconds(void){
  uint16_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSubSeconds;
     6e6:	e0 91 2e 01 	lds	r30, 0x012E
     6ea:	f0 91 2f 01 	lds	r31, 0x012F
     6ee:	27 89       	ldd	r18, Z+23	; 0x17
     6f0:	30 8d       	ldd	r19, Z+24	; 0x18
    temp1 = Timebase->Time.LPTimerSubSeconds;
     6f2:	87 89       	ldd	r24, Z+23	; 0x17
     6f4:	90 8d       	ldd	r25, Z+24	; 0x18
    if(temp0 == temp1){
     6f6:	28 17       	cp	r18, r24
     6f8:	39 07       	cpc	r19, r25
     6fa:	c9 f7       	brne	.-14     	; 0x6ee <Timebase_LPTimer_Get_SubSeconds+0x8>
	  break;
    }
  }
  return temp0;
}
     6fc:	c9 01       	movw	r24, r18
     6fe:	08 95       	ret

00000700 <Timebase_LPTimer_Get_Seconds>:


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     700:	e0 91 2e 01 	lds	r30, 0x012E
     704:	f0 91 2f 01 	lds	r31, 0x012F
     708:	21 8d       	ldd	r18, Z+25	; 0x19
     70a:	32 8d       	ldd	r19, Z+26	; 0x1a
     70c:	43 8d       	ldd	r20, Z+27	; 0x1b
     70e:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     710:	81 8d       	ldd	r24, Z+25	; 0x19
     712:	92 8d       	ldd	r25, Z+26	; 0x1a
     714:	a3 8d       	ldd	r26, Z+27	; 0x1b
     716:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     718:	28 17       	cp	r18, r24
     71a:	39 07       	cpc	r19, r25
     71c:	4a 07       	cpc	r20, r26
     71e:	5b 07       	cpc	r21, r27
     720:	99 f7       	brne	.-26     	; 0x708 <Timebase_LPTimer_Get_Seconds+0x8>
	  break;
    }
  }
  return temp0;
}
     722:	b9 01       	movw	r22, r18
     724:	ca 01       	movw	r24, r20
     726:	08 95       	ret

00000728 <Timebase_LPTimer_Set_SubSeconds>:


void Timebase_LPTimer_Set_SubSeconds(uint16_t value){
  Timebase->Time.LPTimerSubSeconds = value;
     728:	e0 91 2e 01 	lds	r30, 0x012E
     72c:	f0 91 2f 01 	lds	r31, 0x012F
     730:	90 8f       	std	Z+24, r25	; 0x18
     732:	87 8b       	std	Z+23, r24	; 0x17
}
     734:	08 95       	ret

00000736 <Timebase_LPTimer_Set_Seconds>:


void Timebase_LPTimer_Set_Seconds(int32_t value){
  Timebase->Time.LPTimerSeconds = value;
     736:	e0 91 2e 01 	lds	r30, 0x012E
     73a:	f0 91 2f 01 	lds	r31, 0x012F
     73e:	61 8f       	std	Z+25, r22	; 0x19
     740:	72 8f       	std	Z+26, r23	; 0x1a
     742:	83 8f       	std	Z+27, r24	; 0x1b
     744:	94 8f       	std	Z+28, r25	; 0x1c
}
     746:	08 95       	ret

00000748 <Timebase_LPTimer_Delay_Seconds>:

void Timebase_LPTimer_Delay_Seconds(uint16_t value){
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     752:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     754:	e0 91 2e 01 	lds	r30, 0x012E
     758:	f0 91 2f 01 	lds	r31, 0x012F
     75c:	21 8d       	ldd	r18, Z+25	; 0x19
     75e:	32 8d       	ldd	r19, Z+26	; 0x1a
     760:	43 8d       	ldd	r20, Z+27	; 0x1b
     762:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     764:	81 8d       	ldd	r24, Z+25	; 0x19
     766:	92 8d       	ldd	r25, Z+26	; 0x1a
     768:	a3 8d       	ldd	r26, Z+27	; 0x1b
     76a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	4a 07       	cpc	r20, r26
     772:	5b 07       	cpc	r21, r27
     774:	99 f7       	brne	.-26     	; 0x75c <Timebase_LPTimer_Delay_Seconds+0x14>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     776:	78 94       	sei
void Timebase_LPTimer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
     778:	7b 01       	movw	r14, r22
     77a:	00 e0       	ldi	r16, 0x00	; 0
     77c:	10 e0       	ldi	r17, 0x00	; 0
     77e:	e2 0e       	add	r14, r18
     780:	f3 1e       	adc	r15, r19
     782:	04 1f       	adc	r16, r20
     784:	15 1f       	adc	r17, r21
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	0f c0       	rjmp	.+30     	; 0x7ae <Timebase_LPTimer_Delay_Seconds+0x66>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     790:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     792:	21 8d       	ldd	r18, Z+25	; 0x19
     794:	32 8d       	ldd	r19, Z+26	; 0x1a
     796:	43 8d       	ldd	r20, Z+27	; 0x1b
     798:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     79a:	81 8d       	ldd	r24, Z+25	; 0x19
     79c:	92 8d       	ldd	r25, Z+26	; 0x1a
     79e:	a3 8d       	ldd	r26, Z+27	; 0x1b
     7a0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     7a2:	28 17       	cp	r18, r24
     7a4:	39 07       	cpc	r19, r25
     7a6:	4a 07       	cpc	r20, r26
     7a8:	5b 07       	cpc	r21, r27
     7aa:	99 f7       	brne	.-26     	; 0x792 <Timebase_LPTimer_Delay_Seconds+0x4a>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7ac:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     7ae:	2e 15       	cp	r18, r14
     7b0:	3f 05       	cpc	r19, r15
     7b2:	40 07       	cpc	r20, r16
     7b4:	51 07       	cpc	r21, r17
     7b6:	64 f3       	brlt	.-40     	; 0x790 <Timebase_LPTimer_Delay_Seconds+0x48>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_LPTimer_Get_Seconds();
	Timebase_Atomic_Operation_End();
  }
}
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	08 95       	ret

000007c2 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     7c2:	e0 91 2e 01 	lds	r30, 0x012E
     7c6:	f0 91 2f 01 	lds	r31, 0x012F
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	25 e1       	ldi	r18, 0x15	; 21
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	ac 01       	movw	r20, r24
     7d2:	42 9f       	mul	r20, r18
     7d4:	c0 01       	movw	r24, r0
     7d6:	43 9f       	mul	r20, r19
     7d8:	90 0d       	add	r25, r0
     7da:	52 9f       	mul	r21, r18
     7dc:	90 0d       	add	r25, r0
     7de:	11 24       	eor	r1, r1
     7e0:	e8 0f       	add	r30, r24
     7e2:	f9 1f       	adc	r31, r25
     7e4:	86 8d       	ldd	r24, Z+30	; 0x1e
     7e6:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     7e8:	8f 70       	andi	r24, 0x0F	; 15
     7ea:	08 95       	ret

000007ec <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     7ec:	e0 91 2e 01 	lds	r30, 0x012E
     7f0:	f0 91 2f 01 	lds	r31, 0x012F
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	25 e1       	ldi	r18, 0x15	; 21
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	ac 01       	movw	r20, r24
     7fc:	42 9f       	mul	r20, r18
     7fe:	c0 01       	movw	r24, r0
     800:	43 9f       	mul	r20, r19
     802:	90 0d       	add	r25, r0
     804:	52 9f       	mul	r21, r18
     806:	90 0d       	add	r25, r0
     808:	11 24       	eor	r1, r1
     80a:	e8 0f       	add	r30, r24
     80c:	f9 1f       	adc	r31, r25
     80e:	6f 70       	andi	r22, 0x0F	; 15
     810:	66 0f       	add	r22, r22
     812:	86 8d       	ldd	r24, Z+30	; 0x1e
     814:	81 7e       	andi	r24, 0xE1	; 225
     816:	86 2b       	or	r24, r22
     818:	86 8f       	std	Z+30, r24	; 0x1e
}
     81a:	08 95       	ret

0000081c <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     81c:	e0 91 2e 01 	lds	r30, 0x012E
     820:	f0 91 2f 01 	lds	r31, 0x012F
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	25 e1       	ldi	r18, 0x15	; 21
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	ac 01       	movw	r20, r24
     82c:	42 9f       	mul	r20, r18
     82e:	c0 01       	movw	r24, r0
     830:	43 9f       	mul	r20, r19
     832:	90 0d       	add	r25, r0
     834:	52 9f       	mul	r21, r18
     836:	90 0d       	add	r25, r0
     838:	11 24       	eor	r1, r1
     83a:	e8 0f       	add	r30, r24
     83c:	f9 1f       	adc	r31, r25
     83e:	df 01       	movw	r26, r30
     840:	97 96       	adiw	r26, 0x27	; 39
     842:	67 a1       	ldd	r22, Z+39	; 0x27
     844:	11 96       	adiw	r26, 0x01	; 1
     846:	7c 91       	ld	r23, X
     848:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	8c 91       	ld	r24, X
     84e:	12 97       	sbiw	r26, 0x02	; 2
     850:	13 96       	adiw	r26, 0x03	; 3
     852:	9c 91       	ld	r25, X
     854:	08 95       	ret

00000856 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     856:	e0 91 2e 01 	lds	r30, 0x012E
     85a:	f0 91 2f 01 	lds	r31, 0x012F
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	25 e1       	ldi	r18, 0x15	; 21
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	dc 01       	movw	r26, r24
     866:	a2 9f       	mul	r26, r18
     868:	c0 01       	movw	r24, r0
     86a:	a3 9f       	mul	r26, r19
     86c:	90 0d       	add	r25, r0
     86e:	b2 9f       	mul	r27, r18
     870:	90 0d       	add	r25, r0
     872:	11 24       	eor	r1, r1
     874:	e8 0f       	add	r30, r24
     876:	f9 1f       	adc	r31, r25
     878:	47 a3       	std	Z+39, r20	; 0x27
     87a:	50 a7       	std	Z+40, r21	; 0x28
     87c:	61 a7       	std	Z+41, r22	; 0x29
     87e:	72 a7       	std	Z+42, r23	; 0x2a
}
     880:	08 95       	ret

00000882 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     882:	e0 91 2e 01 	lds	r30, 0x012E
     886:	f0 91 2f 01 	lds	r31, 0x012F
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	25 e1       	ldi	r18, 0x15	; 21
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	ac 01       	movw	r20, r24
     892:	42 9f       	mul	r20, r18
     894:	c0 01       	movw	r24, r0
     896:	43 9f       	mul	r20, r19
     898:	90 0d       	add	r25, r0
     89a:	52 9f       	mul	r21, r18
     89c:	90 0d       	add	r25, r0
     89e:	11 24       	eor	r1, r1
     8a0:	e8 0f       	add	r30, r24
     8a2:	f9 1f       	adc	r31, r25
     8a4:	df 01       	movw	r26, r30
     8a6:	5f 96       	adiw	r26, 0x1f	; 31
     8a8:	67 8d       	ldd	r22, Z+31	; 0x1f
     8aa:	11 96       	adiw	r26, 0x01	; 1
     8ac:	7c 91       	ld	r23, X
     8ae:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     8b0:	12 96       	adiw	r26, 0x02	; 2
     8b2:	8c 91       	ld	r24, X
     8b4:	12 97       	sbiw	r26, 0x02	; 2
     8b6:	13 96       	adiw	r26, 0x03	; 3
     8b8:	9c 91       	ld	r25, X
     8ba:	08 95       	ret

000008bc <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     8bc:	e0 91 2e 01 	lds	r30, 0x012E
     8c0:	f0 91 2f 01 	lds	r31, 0x012F
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	25 e1       	ldi	r18, 0x15	; 21
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	ac 01       	movw	r20, r24
     8cc:	42 9f       	mul	r20, r18
     8ce:	c0 01       	movw	r24, r0
     8d0:	43 9f       	mul	r20, r19
     8d2:	90 0d       	add	r25, r0
     8d4:	52 9f       	mul	r21, r18
     8d6:	90 0d       	add	r25, r0
     8d8:	11 24       	eor	r1, r1
     8da:	e8 0f       	add	r30, r24
     8dc:	f9 1f       	adc	r31, r25
     8de:	df 01       	movw	r26, r30
     8e0:	93 96       	adiw	r26, 0x23	; 35
     8e2:	63 a1       	ldd	r22, Z+35	; 0x23
     8e4:	11 96       	adiw	r26, 0x01	; 1
     8e6:	7c 91       	ld	r23, X
     8e8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     8ea:	12 96       	adiw	r26, 0x02	; 2
     8ec:	8c 91       	ld	r24, X
     8ee:	12 97       	sbiw	r26, 0x02	; 2
     8f0:	13 96       	adiw	r26, 0x03	; 3
     8f2:	9c 91       	ld	r25, X
     8f4:	08 95       	ret

000008f6 <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     8f6:	e0 91 2e 01 	lds	r30, 0x012E
     8fa:	f0 91 2f 01 	lds	r31, 0x012F
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	25 e1       	ldi	r18, 0x15	; 21
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	dc 01       	movw	r26, r24
     906:	a2 9f       	mul	r26, r18
     908:	c0 01       	movw	r24, r0
     90a:	a3 9f       	mul	r26, r19
     90c:	90 0d       	add	r25, r0
     90e:	b2 9f       	mul	r27, r18
     910:	90 0d       	add	r25, r0
     912:	11 24       	eor	r1, r1
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	47 8f       	std	Z+31, r20	; 0x1f
     91a:	50 a3       	std	Z+32, r21	; 0x20
     91c:	61 a3       	std	Z+33, r22	; 0x21
     91e:	72 a3       	std	Z+34, r23	; 0x22
}
     920:	08 95       	ret

00000922 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     922:	e0 91 2e 01 	lds	r30, 0x012E
     926:	f0 91 2f 01 	lds	r31, 0x012F
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	25 e1       	ldi	r18, 0x15	; 21
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	dc 01       	movw	r26, r24
     932:	a2 9f       	mul	r26, r18
     934:	c0 01       	movw	r24, r0
     936:	a3 9f       	mul	r26, r19
     938:	90 0d       	add	r25, r0
     93a:	b2 9f       	mul	r27, r18
     93c:	90 0d       	add	r25, r0
     93e:	11 24       	eor	r1, r1
     940:	e8 0f       	add	r30, r24
     942:	f9 1f       	adc	r31, r25
     944:	43 a3       	std	Z+35, r20	; 0x23
     946:	54 a3       	std	Z+36, r21	; 0x24
     948:	65 a3       	std	Z+37, r22	; 0x25
     94a:	76 a3       	std	Z+38, r23	; 0x26
}
     94c:	08 95       	ret

0000094e <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     94e:	e0 91 2e 01 	lds	r30, 0x012E
     952:	f0 91 2f 01 	lds	r31, 0x012F
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	25 e1       	ldi	r18, 0x15	; 21
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	ac 01       	movw	r20, r24
     95e:	42 9f       	mul	r20, r18
     960:	c0 01       	movw	r24, r0
     962:	43 9f       	mul	r20, r19
     964:	90 0d       	add	r25, r0
     966:	52 9f       	mul	r21, r18
     968:	90 0d       	add	r25, r0
     96a:	11 24       	eor	r1, r1
     96c:	e8 0f       	add	r30, r24
     96e:	f9 1f       	adc	r31, r25
     970:	df 01       	movw	r26, r30
     972:	9b 96       	adiw	r26, 0x2b	; 43
     974:	63 a5       	ldd	r22, Z+43	; 0x2b
     976:	11 96       	adiw	r26, 0x01	; 1
     978:	7c 91       	ld	r23, X
     97a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     97c:	12 96       	adiw	r26, 0x02	; 2
     97e:	8c 91       	ld	r24, X
     980:	12 97       	sbiw	r26, 0x02	; 2
     982:	13 96       	adiw	r26, 0x03	; 3
     984:	9c 91       	ld	r25, X
     986:	08 95       	ret

00000988 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     988:	e0 91 2e 01 	lds	r30, 0x012E
     98c:	f0 91 2f 01 	lds	r31, 0x012F
     990:	28 2f       	mov	r18, r24
     992:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     994:	77 ff       	sbrs	r23, 7
     996:	11 c0       	rjmp	.+34     	; 0x9ba <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     998:	85 e1       	ldi	r24, 0x15	; 21
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	ac 01       	movw	r20, r24
     99e:	24 9f       	mul	r18, r20
     9a0:	c0 01       	movw	r24, r0
     9a2:	25 9f       	mul	r18, r21
     9a4:	90 0d       	add	r25, r0
     9a6:	34 9f       	mul	r19, r20
     9a8:	90 0d       	add	r25, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	13 a6       	std	Z+43, r1	; 0x2b
     9b2:	14 a6       	std	Z+44, r1	; 0x2c
     9b4:	15 a6       	std	Z+45, r1	; 0x2d
     9b6:	16 a6       	std	Z+46, r1	; 0x2e
     9b8:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     9ba:	85 e1       	ldi	r24, 0x15	; 21
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	dc 01       	movw	r26, r24
     9c0:	2a 9f       	mul	r18, r26
     9c2:	c0 01       	movw	r24, r0
     9c4:	2b 9f       	mul	r18, r27
     9c6:	90 0d       	add	r25, r0
     9c8:	3a 9f       	mul	r19, r26
     9ca:	90 0d       	add	r25, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	e8 0f       	add	r30, r24
     9d0:	f9 1f       	adc	r31, r25
     9d2:	43 a7       	std	Z+43, r20	; 0x2b
     9d4:	54 a7       	std	Z+44, r21	; 0x2c
     9d6:	65 a7       	std	Z+45, r22	; 0x2d
     9d8:	76 a7       	std	Z+46, r23	; 0x2e
     9da:	08 95       	ret

000009dc <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     9dc:	e0 91 2e 01 	lds	r30, 0x012E
     9e0:	f0 91 2f 01 	lds	r31, 0x012F
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	25 e1       	ldi	r18, 0x15	; 21
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	ac 01       	movw	r20, r24
     9ec:	42 9f       	mul	r20, r18
     9ee:	c0 01       	movw	r24, r0
     9f0:	43 9f       	mul	r20, r19
     9f2:	90 0d       	add	r25, r0
     9f4:	52 9f       	mul	r21, r18
     9f6:	90 0d       	add	r25, r0
     9f8:	11 24       	eor	r1, r1
     9fa:	e8 0f       	add	r30, r24
     9fc:	f9 1f       	adc	r31, r25
     9fe:	86 8d       	ldd	r24, Z+30	; 0x1e
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     a00:	81 70       	andi	r24, 0x01	; 1
     a02:	08 95       	ret

00000a04 <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a04:	e0 91 2e 01 	lds	r30, 0x012E
     a08:	f0 91 2f 01 	lds	r31, 0x012F
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	25 e1       	ldi	r18, 0x15	; 21
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	ac 01       	movw	r20, r24
     a14:	42 9f       	mul	r20, r18
     a16:	c0 01       	movw	r24, r0
     a18:	43 9f       	mul	r20, r19
     a1a:	90 0d       	add	r25, r0
     a1c:	52 9f       	mul	r21, r18
     a1e:	90 0d       	add	r25, r0
     a20:	11 24       	eor	r1, r1
     a22:	e8 0f       	add	r30, r24
     a24:	f9 1f       	adc	r31, r25
     a26:	86 8d       	ldd	r24, Z+30	; 0x1e
     a28:	81 60       	ori	r24, 0x01	; 1
     a2a:	86 8f       	std	Z+30, r24	; 0x1e
}
     a2c:	08 95       	ret

00000a2e <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a2e:	e0 91 2e 01 	lds	r30, 0x012E
     a32:	f0 91 2f 01 	lds	r31, 0x012F
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	25 e1       	ldi	r18, 0x15	; 21
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	ac 01       	movw	r20, r24
     a3e:	42 9f       	mul	r20, r18
     a40:	c0 01       	movw	r24, r0
     a42:	43 9f       	mul	r20, r19
     a44:	90 0d       	add	r25, r0
     a46:	52 9f       	mul	r21, r18
     a48:	90 0d       	add	r25, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	e8 0f       	add	r30, r24
     a4e:	f9 1f       	adc	r31, r25
     a50:	86 8d       	ldd	r24, Z+30	; 0x1e
     a52:	8e 7f       	andi	r24, 0xFE	; 254
     a54:	86 8f       	std	Z+30, r24	; 0x1e
}
     a56:	08 95       	ret

00000a58 <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     a58:	e0 91 2e 01 	lds	r30, 0x012E
     a5c:	f0 91 2f 01 	lds	r31, 0x012F
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	25 e1       	ldi	r18, 0x15	; 21
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	ac 01       	movw	r20, r24
     a68:	42 9f       	mul	r20, r18
     a6a:	c0 01       	movw	r24, r0
     a6c:	43 9f       	mul	r20, r19
     a6e:	90 0d       	add	r25, r0
     a70:	52 9f       	mul	r21, r18
     a72:	90 0d       	add	r25, r0
     a74:	11 24       	eor	r1, r1
     a76:	e8 0f       	add	r30, r24
     a78:	f9 1f       	adc	r31, r25
     a7a:	df 01       	movw	r26, r30
     a7c:	9f 96       	adiw	r26, 0x2f	; 47
     a7e:	67 a5       	ldd	r22, Z+47	; 0x2f
     a80:	11 96       	adiw	r26, 0x01	; 1
     a82:	7c 91       	ld	r23, X
     a84:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     a86:	12 96       	adiw	r26, 0x02	; 2
     a88:	8c 91       	ld	r24, X
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	13 96       	adiw	r26, 0x03	; 3
     a8e:	9c 91       	ld	r25, X
     a90:	08 95       	ret

00000a92 <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     a92:	e0 91 2e 01 	lds	r30, 0x012E
     a96:	f0 91 2f 01 	lds	r31, 0x012F
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	25 e1       	ldi	r18, 0x15	; 21
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	dc 01       	movw	r26, r24
     aa2:	a2 9f       	mul	r26, r18
     aa4:	c0 01       	movw	r24, r0
     aa6:	a3 9f       	mul	r26, r19
     aa8:	90 0d       	add	r25, r0
     aaa:	b2 9f       	mul	r27, r18
     aac:	90 0d       	add	r25, r0
     aae:	11 24       	eor	r1, r1
     ab0:	e8 0f       	add	r30, r24
     ab2:	f9 1f       	adc	r31, r25
     ab4:	47 a7       	std	Z+47, r20	; 0x2f
     ab6:	50 ab       	std	Z+48, r21	; 0x30
     ab8:	61 ab       	std	Z+49, r22	; 0x31
     aba:	72 ab       	std	Z+50, r23	; 0x32
}
     abc:	08 95       	ret

00000abe <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     abe:	e0 91 2e 01 	lds	r30, 0x012E
     ac2:	f0 91 2f 01 	lds	r31, 0x012F
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	25 e1       	ldi	r18, 0x15	; 21
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	ac 01       	movw	r20, r24
     ace:	42 9f       	mul	r20, r18
     ad0:	c0 01       	movw	r24, r0
     ad2:	43 9f       	mul	r20, r19
     ad4:	90 0d       	add	r25, r0
     ad6:	52 9f       	mul	r21, r18
     ad8:	90 0d       	add	r25, r0
     ada:	11 24       	eor	r1, r1
     adc:	e8 0f       	add	r30, r24
     ade:	f9 1f       	adc	r31, r25
     ae0:	13 a2       	std	Z+35, r1	; 0x23
     ae2:	14 a2       	std	Z+36, r1	; 0x24
     ae4:	15 a2       	std	Z+37, r1	; 0x25
     ae6:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     ae8:	17 8e       	std	Z+31, r1	; 0x1f
     aea:	10 a2       	std	Z+32, r1	; 0x20
     aec:	11 a2       	std	Z+33, r1	; 0x21
     aee:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     af0:	17 a2       	std	Z+39, r1	; 0x27
     af2:	10 a6       	std	Z+40, r1	; 0x28
     af4:	11 a6       	std	Z+41, r1	; 0x29
     af6:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     af8:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     afa:	80 7e       	andi	r24, 0xE0	; 224
     afc:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     afe:	17 a6       	std	Z+47, r1	; 0x2f
     b00:	10 aa       	std	Z+48, r1	; 0x30
     b02:	11 aa       	std	Z+49, r1	; 0x31
     b04:	12 aa       	std	Z+50, r1	; 0x32
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     b06:	08 95       	ret

00000b08 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b08:	e0 91 2e 01 	lds	r30, 0x012E
     b0c:	f0 91 2f 01 	lds	r31, 0x012F
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	25 e1       	ldi	r18, 0x15	; 21
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	ac 01       	movw	r20, r24
     b18:	42 9f       	mul	r20, r18
     b1a:	c0 01       	movw	r24, r0
     b1c:	43 9f       	mul	r20, r19
     b1e:	90 0d       	add	r25, r0
     b20:	52 9f       	mul	r21, r18
     b22:	90 0d       	add	r25, r0
     b24:	11 24       	eor	r1, r1
     b26:	e8 0f       	add	r30, r24
     b28:	f9 1f       	adc	r31, r25
     b2a:	13 a2       	std	Z+35, r1	; 0x23
     b2c:	14 a2       	std	Z+36, r1	; 0x24
     b2e:	15 a2       	std	Z+37, r1	; 0x25
     b30:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b32:	17 8e       	std	Z+31, r1	; 0x1f
     b34:	10 a2       	std	Z+32, r1	; 0x20
     b36:	11 a2       	std	Z+33, r1	; 0x21
     b38:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b3a:	17 a2       	std	Z+39, r1	; 0x27
     b3c:	10 a6       	std	Z+40, r1	; 0x28
     b3e:	11 a6       	std	Z+41, r1	; 0x29
     b40:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b42:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b44:	80 7e       	andi	r24, 0xE0	; 224
     b46:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b48:	17 a6       	std	Z+47, r1	; 0x2f
     b4a:	10 aa       	std	Z+48, r1	; 0x30
     b4c:	11 aa       	std	Z+49, r1	; 0x31
     b4e:	12 aa       	std	Z+50, r1	; 0x32
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     b50:	08 95       	ret

00000b52 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     b52:	e0 91 2e 01 	lds	r30, 0x012E
     b56:	f0 91 2f 01 	lds	r31, 0x012F
     b5a:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     b5c:	25 e1       	ldi	r18, 0x15	; 21
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	ac 01       	movw	r20, r24
     b62:	42 9f       	mul	r20, r18
     b64:	c0 01       	movw	r24, r0
     b66:	43 9f       	mul	r20, r19
     b68:	90 0d       	add	r25, r0
     b6a:	52 9f       	mul	r21, r18
     b6c:	90 0d       	add	r25, r0
     b6e:	11 24       	eor	r1, r1
     b70:	e8 0f       	add	r30, r24
     b72:	f9 1f       	adc	r31, r25
     b74:	96 8d       	ldd	r25, Z+30	; 0x1e
     b76:	89 2f       	mov	r24, r25
     b78:	86 95       	lsr	r24
     b7a:	8f 70       	andi	r24, 0x0F	; 15
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	19 f0       	breq	.+6      	; 0xb86 <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b80:	91 7e       	andi	r25, 0xE1	; 225
     b82:	92 60       	ori	r25, 0x02	; 2
     b84:	96 8f       	std	Z+30, r25	; 0x1e
     b86:	08 95       	ret

00000b88 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     b88:	e0 91 2e 01 	lds	r30, 0x012E
     b8c:	f0 91 2f 01 	lds	r31, 0x012F
     b90:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     b92:	25 e1       	ldi	r18, 0x15	; 21
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	ac 01       	movw	r20, r24
     b98:	42 9f       	mul	r20, r18
     b9a:	c0 01       	movw	r24, r0
     b9c:	43 9f       	mul	r20, r19
     b9e:	90 0d       	add	r25, r0
     ba0:	52 9f       	mul	r21, r18
     ba2:	90 0d       	add	r25, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	e8 0f       	add	r30, r24
     ba8:	f9 1f       	adc	r31, r25
     baa:	96 8d       	ldd	r25, Z+30	; 0x1e
     bac:	89 2f       	mov	r24, r25
     bae:	86 95       	lsr	r24
     bb0:	8f 70       	andi	r24, 0x0F	; 15
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	19 f0       	breq	.+6      	; 0xbbc <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bb6:	91 7e       	andi	r25, 0xE1	; 225
     bb8:	94 60       	ori	r25, 0x04	; 4
     bba:	96 8f       	std	Z+30, r25	; 0x1e
     bbc:	08 95       	ret

00000bbe <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     bbe:	2f 92       	push	r2
     bc0:	3f 92       	push	r3
     bc2:	4f 92       	push	r4
     bc4:	5f 92       	push	r5
     bc6:	6f 92       	push	r6
     bc8:	7f 92       	push	r7
     bca:	8f 92       	push	r8
     bcc:	9f 92       	push	r9
     bce:	af 92       	push	r10
     bd0:	bf 92       	push	r11
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
     be6:	28 97       	sbiw	r28, 0x08	; 8
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	1a 01       	movw	r2, r20
     bf4:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     bf6:	20 91 2e 01 	lds	r18, 0x012E
     bfa:	30 91 2f 01 	lds	r19, 0x012F
     bfe:	38 87       	std	Y+8, r19	; 0x08
     c00:	2f 83       	std	Y+7, r18	; 0x07
     c02:	a8 2f       	mov	r26, r24
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	ba 83       	std	Y+2, r27	; 0x02
     c08:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     c0a:	85 e1       	ldi	r24, 0x15	; 21
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a8 9f       	mul	r26, r24
     c10:	f0 01       	movw	r30, r0
     c12:	a9 9f       	mul	r26, r25
     c14:	f0 0d       	add	r31, r0
     c16:	b8 9f       	mul	r27, r24
     c18:	f0 0d       	add	r31, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	86 8d       	ldd	r24, Z+30	; 0x1e
     c22:	86 95       	lsr	r24
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	09 f0       	breq	.+2      	; 0xc2a <Timebase_DownCounter_SS_Set_Securely+0x6c>
     c28:	80 c0       	rjmp	.+256    	; 0xd2a <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     c2a:	47 a3       	std	Z+39, r20	; 0x27
     c2c:	50 a7       	std	Z+40, r21	; 0x28
     c2e:	61 a7       	std	Z+41, r22	; 0x29
     c30:	72 a7       	std	Z+42, r23	; 0x2a
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c32:	f9 01       	movw	r30, r18
     c34:	c2 84       	ldd	r12, Z+10	; 0x0a
     c36:	d3 84       	ldd	r13, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c38:	d9 01       	movw	r26, r18
     c3a:	1c 96       	adiw	r26, 0x0c	; 12
     c3c:	8d 91       	ld	r24, X+
     c3e:	9d 91       	ld	r25, X+
     c40:	0d 90       	ld	r0, X+
     c42:	bc 91       	ld	r27, X
     c44:	a0 2d       	mov	r26, r0
     c46:	8b 83       	std	Y+3, r24	; 0x03
     c48:	9c 83       	std	Y+4, r25	; 0x04
     c4a:	ad 83       	std	Y+5, r26	; 0x05
     c4c:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     c4e:	20 81       	ld	r18, Z
     c50:	31 81       	ldd	r19, Z+1	; 0x01
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	50 e0       	ldi	r21, 0x00	; 0
     c56:	c2 01       	movw	r24, r4
     c58:	b1 01       	movw	r22, r2
     c5a:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     c5e:	7b 01       	movw	r14, r22
     c60:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     c62:	ef 81       	ldd	r30, Y+7	; 0x07
     c64:	f8 85       	ldd	r31, Y+8	; 0x08
     c66:	20 81       	ld	r18, Z
     c68:	31 81       	ldd	r19, Z+1	; 0x01
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	c2 01       	movw	r24, r4
     c70:	b1 01       	movw	r22, r2
     c72:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     c76:	c9 01       	movw	r24, r18
     c78:	da 01       	movw	r26, r20
     c7a:	3c 01       	movw	r6, r24
     c7c:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     c7e:	56 01       	movw	r10, r12
     c80:	cc 24       	eor	r12, r12
     c82:	dd 24       	eor	r13, r13
     c84:	ae 0c       	add	r10, r14
     c86:	bf 1c       	adc	r11, r15
     c88:	c0 1e       	adc	r12, r16
     c8a:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     c8c:	af 81       	ldd	r26, Y+7	; 0x07
     c8e:	b8 85       	ldd	r27, Y+8	; 0x08
     c90:	8d 91       	ld	r24, X+
     c92:	9c 91       	ld	r25, X
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	a8 16       	cp	r10, r24
     c9a:	b9 06       	cpc	r11, r25
     c9c:	ca 06       	cpc	r12, r26
     c9e:	db 06       	cpc	r13, r27
     ca0:	a4 f0       	brlt	.+40     	; 0xcca <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     ca2:	08 94       	sec
     ca4:	61 1c       	adc	r6, r1
     ca6:	71 1c       	adc	r7, r1
     ca8:	81 1c       	adc	r8, r1
     caa:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     cac:	ef 81       	ldd	r30, Y+7	; 0x07
     cae:	f8 85       	ldd	r31, Y+8	; 0x08
     cb0:	20 81       	ld	r18, Z
     cb2:	31 81       	ldd	r19, Z+1	; 0x01
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	c6 01       	movw	r24, r12
     cba:	b5 01       	movw	r22, r10
     cbc:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     cc0:	ac 01       	movw	r20, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	da 01       	movw	r26, r20
     cc6:	5c 01       	movw	r10, r24
     cc8:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     cca:	85 e1       	ldi	r24, 0x15	; 21
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	3a 81       	ldd	r19, Y+2	; 0x02
     cd2:	28 9f       	mul	r18, r24
     cd4:	a0 01       	movw	r20, r0
     cd6:	29 9f       	mul	r18, r25
     cd8:	50 0d       	add	r21, r0
     cda:	38 9f       	mul	r19, r24
     cdc:	50 0d       	add	r21, r0
     cde:	11 24       	eor	r1, r1
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	98 85       	ldd	r25, Y+8	; 0x08
     ce4:	48 0f       	add	r20, r24
     ce6:	59 1f       	adc	r21, r25
     ce8:	8b 81       	ldd	r24, Y+3	; 0x03
     cea:	9c 81       	ldd	r25, Y+4	; 0x04
     cec:	ad 81       	ldd	r26, Y+5	; 0x05
     cee:	be 81       	ldd	r27, Y+6	; 0x06
     cf0:	86 0d       	add	r24, r6
     cf2:	97 1d       	adc	r25, r7
     cf4:	a8 1d       	adc	r26, r8
     cf6:	b9 1d       	adc	r27, r9
     cf8:	fa 01       	movw	r30, r20
     cfa:	87 8f       	std	Z+31, r24	; 0x1f
     cfc:	90 a3       	std	Z+32, r25	; 0x20
     cfe:	a1 a3       	std	Z+33, r26	; 0x21
     d00:	b2 a3       	std	Z+34, r27	; 0x22
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d02:	da 01       	movw	r26, r20
     d04:	93 96       	adiw	r26, 0x23	; 35
     d06:	ad 92       	st	X+, r10
     d08:	bd 92       	st	X+, r11
     d0a:	cd 92       	st	X+, r12
     d0c:	dc 92       	st	X, r13
     d0e:	96 97       	sbiw	r26, 0x26	; 38
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d10:	27 a6       	std	Z+47, r2	; 0x2f
     d12:	30 aa       	std	Z+48, r3	; 0x30
     d14:	41 aa       	std	Z+49, r4	; 0x31
     d16:	52 aa       	std	Z+50, r5	; 0x32
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     d18:	96 8d       	ldd	r25, Z+30	; 0x1e
     d1a:	89 2f       	mov	r24, r25
     d1c:	86 95       	lsr	r24
     d1e:	8f 70       	andi	r24, 0x0F	; 15
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	19 f0       	breq	.+6      	; 0xd2a <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d24:	91 7e       	andi	r25, 0xE1	; 225
     d26:	92 60       	ori	r25, 0x02	; 2
     d28:	96 8f       	std	Z+30, r25	; 0x1e
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     d2a:	28 96       	adiw	r28, 0x08	; 8
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	bf 90       	pop	r11
     d48:	af 90       	pop	r10
     d4a:	9f 90       	pop	r9
     d4c:	8f 90       	pop	r8
     d4e:	7f 90       	pop	r7
     d50:	6f 90       	pop	r6
     d52:	5f 90       	pop	r5
     d54:	4f 90       	pop	r4
     d56:	3f 90       	pop	r3
     d58:	2f 90       	pop	r2
     d5a:	08 95       	ret

00000d5c <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	7a 01       	movw	r14, r20
     d6a:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d6c:	e0 91 2e 01 	lds	r30, 0x012E
     d70:	f0 91 2f 01 	lds	r31, 0x012F
     d74:	48 2f       	mov	r20, r24
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	25 e1       	ldi	r18, 0x15	; 21
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	42 9f       	mul	r20, r18
     d7e:	60 01       	movw	r12, r0
     d80:	43 9f       	mul	r20, r19
     d82:	d0 0c       	add	r13, r0
     d84:	52 9f       	mul	r21, r18
     d86:	d0 0c       	add	r13, r0
     d88:	11 24       	eor	r1, r1
     d8a:	ec 0d       	add	r30, r12
     d8c:	fd 1d       	adc	r31, r13
     d8e:	13 a2       	std	Z+35, r1	; 0x23
     d90:	14 a2       	std	Z+36, r1	; 0x24
     d92:	15 a2       	std	Z+37, r1	; 0x25
     d94:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     d96:	17 8e       	std	Z+31, r1	; 0x1f
     d98:	10 a2       	std	Z+32, r1	; 0x20
     d9a:	11 a2       	std	Z+33, r1	; 0x21
     d9c:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     d9e:	17 a2       	std	Z+39, r1	; 0x27
     da0:	10 a6       	std	Z+40, r1	; 0x28
     da2:	11 a6       	std	Z+41, r1	; 0x29
     da4:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     da6:	96 8d       	ldd	r25, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     da8:	90 7e       	andi	r25, 0xE0	; 224
     daa:	96 8f       	std	Z+30, r25	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dac:	17 a6       	std	Z+47, r1	; 0x2f
     dae:	10 aa       	std	Z+48, r1	; 0x30
     db0:	11 aa       	std	Z+49, r1	; 0x31
     db2:	12 aa       	std	Z+50, r1	; 0x32
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     db4:	b8 01       	movw	r22, r16
     db6:	a7 01       	movw	r20, r14
     db8:	0e 94 df 05 	call	0xbbe	; 0xbbe <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dbc:	e0 91 2e 01 	lds	r30, 0x012E
     dc0:	f0 91 2f 01 	lds	r31, 0x012F
     dc4:	ec 0d       	add	r30, r12
     dc6:	fd 1d       	adc	r31, r13
     dc8:	e7 a6       	std	Z+47, r14	; 0x2f
     dca:	f0 aa       	std	Z+48, r15	; 0x30
     dcc:	01 ab       	std	Z+49, r16	; 0x31
     dce:	12 ab       	std	Z+50, r17	; 0x32

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	df 90       	pop	r13
     dda:	cf 90       	pop	r12
     ddc:	08 95       	ret

00000dde <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     dde:	2f 92       	push	r2
     de0:	3f 92       	push	r3
     de2:	4f 92       	push	r4
     de4:	5f 92       	push	r5
     de6:	6f 92       	push	r6
     de8:	7f 92       	push	r7
     dea:	8f 92       	push	r8
     dec:	9f 92       	push	r9
     dee:	af 92       	push	r10
     df0:	bf 92       	push	r11
     df2:	cf 92       	push	r12
     df4:	df 92       	push	r13
     df6:	ef 92       	push	r14
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e02:	e0 91 2e 01 	lds	r30, 0x012E
     e06:	f0 91 2f 01 	lds	r31, 0x012F
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	25 e1       	ldi	r18, 0x15	; 21
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	82 9f       	mul	r24, r18
     e12:	e0 01       	movw	r28, r0
     e14:	83 9f       	mul	r24, r19
     e16:	d0 0d       	add	r29, r0
     e18:	92 9f       	mul	r25, r18
     e1a:	d0 0d       	add	r29, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	ce 0f       	add	r28, r30
     e20:	df 1f       	adc	r29, r31
     e22:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e24:	86 95       	lsr	r24
     e26:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	09 f0       	breq	.+2      	; 0xe2e <Timebase_DownCounter_SS_Update+0x50>
     e2c:	48 c0       	rjmp	.+144    	; 0xebe <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e2e:	e2 84       	ldd	r14, Z+10	; 0x0a
     e30:	f3 84       	ldd	r15, Z+11	; 0x0b

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     e32:	00 e0       	ldi	r16, 0x00	; 0
     e34:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e36:	84 85       	ldd	r24, Z+12	; 0x0c
     e38:	95 85       	ldd	r25, Z+13	; 0x0d
     e3a:	a6 85       	ldd	r26, Z+14	; 0x0e
     e3c:	b7 85       	ldd	r27, Z+15	; 0x0f
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     e3e:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e40:	38 a1       	ldd	r19, Y+32	; 0x20
     e42:	49 a1       	ldd	r20, Y+33	; 0x21
     e44:	5a a1       	ldd	r21, Y+34	; 0x22
     e46:	28 1b       	sub	r18, r24
     e48:	39 0b       	sbc	r19, r25
     e4a:	4a 0b       	sbc	r20, r26
     e4c:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <__mulsi3>
     e5a:	6e 19       	sub	r22, r14
     e5c:	7f 09       	sbc	r23, r15
     e5e:	80 0b       	sbc	r24, r16
     e60:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     e62:	2b a1       	ldd	r18, Y+35	; 0x23
     e64:	3c a1       	ldd	r19, Y+36	; 0x24
     e66:	4d a1       	ldd	r20, Y+37	; 0x25
     e68:	5e a1       	ldd	r21, Y+38	; 0x26
     e6a:	62 0f       	add	r22, r18
     e6c:	73 1f       	adc	r23, r19
     e6e:	84 1f       	adc	r24, r20
     e70:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e72:	6f a3       	std	Y+39, r22	; 0x27
     e74:	78 a7       	std	Y+40, r23	; 0x28
     e76:	89 a7       	std	Y+41, r24	; 0x29
     e78:	9a a7       	std	Y+42, r25	; 0x2a
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     e7a:	16 16       	cp	r1, r22
     e7c:	17 06       	cpc	r1, r23
     e7e:	18 06       	cpc	r1, r24
     e80:	19 06       	cpc	r1, r25
     e82:	0c f4       	brge	.+2      	; 0xe86 <Timebase_DownCounter_SS_Update+0xa8>
     e84:	4c c0       	rjmp	.+152    	; 0xf1e <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     e86:	8f a5       	ldd	r24, Y+47	; 0x2f
     e88:	98 a9       	ldd	r25, Y+48	; 0x30
     e8a:	a9 a9       	ldd	r26, Y+49	; 0x31
     e8c:	ba a9       	ldd	r27, Y+50	; 0x32
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e8e:	1b a2       	std	Y+35, r1	; 0x23
     e90:	1c a2       	std	Y+36, r1	; 0x24
     e92:	1d a2       	std	Y+37, r1	; 0x25
     e94:	1e a2       	std	Y+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e96:	1f 8e       	std	Y+31, r1	; 0x1f
     e98:	18 a2       	std	Y+32, r1	; 0x20
     e9a:	19 a2       	std	Y+33, r1	; 0x21
     e9c:	1a a2       	std	Y+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e9e:	1f a2       	std	Y+39, r1	; 0x27
     ea0:	18 a6       	std	Y+40, r1	; 0x28
     ea2:	19 a6       	std	Y+41, r1	; 0x29
     ea4:	1a a6       	std	Y+42, r1	; 0x2a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ea6:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ea8:	2e 7f       	andi	r18, 0xFE	; 254
     eaa:	2e 8f       	std	Y+30, r18	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     eac:	8f a7       	std	Y+47, r24	; 0x2f
     eae:	98 ab       	std	Y+48, r25	; 0x30
     eb0:	a9 ab       	std	Y+49, r26	; 0x31
     eb2:	ba ab       	std	Y+50, r27	; 0x32
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     eb4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb6:	81 7e       	andi	r24, 0xE1	; 225
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	8e 8f       	std	Y+30, r24	; 0x1e
     ebc:	30 c0       	rjmp	.+96     	; 0xf1e <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	71 f5       	brne	.+92     	; 0xf1e <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ec2:	62 84       	ldd	r6, Z+10	; 0x0a
     ec4:	73 84       	ldd	r7, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ec6:	e4 84       	ldd	r14, Z+12	; 0x0c
     ec8:	f5 84       	ldd	r15, Z+13	; 0x0d
     eca:	06 85       	ldd	r16, Z+14	; 0x0e
     ecc:	17 85       	ldd	r17, Z+15	; 0x0f
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     ece:	2f a0       	ldd	r2, Y+39	; 0x27
     ed0:	38 a4       	ldd	r3, Y+40	; 0x28
     ed2:	49 a4       	ldd	r4, Y+41	; 0x29
     ed4:	5a a4       	ldd	r5, Y+42	; 0x2a
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     ed6:	20 81       	ld	r18, Z
     ed8:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     eda:	a0 80       	ld	r10, Z
     edc:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	c2 01       	movw	r24, r4
     ee4:	b1 01       	movw	r22, r2
     ee6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     eea:	e2 0e       	add	r14, r18
     eec:	f3 1e       	adc	r15, r19
     eee:	04 1f       	adc	r16, r20
     ef0:	15 1f       	adc	r17, r21
     ef2:	ef 8e       	std	Y+31, r14	; 0x1f
     ef4:	f8 a2       	std	Y+32, r15	; 0x20
     ef6:	09 a3       	std	Y+33, r16	; 0x21
     ef8:	1a a3       	std	Y+34, r17	; 0x22
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     efa:	cc 24       	eor	r12, r12
     efc:	dd 24       	eor	r13, r13
     efe:	c2 01       	movw	r24, r4
     f00:	b1 01       	movw	r22, r2
     f02:	a6 01       	movw	r20, r12
     f04:	95 01       	movw	r18, r10
     f06:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodsi4>
     f0a:	88 24       	eor	r8, r8
     f0c:	99 24       	eor	r9, r9
     f0e:	66 0e       	add	r6, r22
     f10:	77 1e       	adc	r7, r23
     f12:	88 1e       	adc	r8, r24
     f14:	99 1e       	adc	r9, r25
     f16:	6b a2       	std	Y+35, r6	; 0x23
     f18:	7c a2       	std	Y+36, r7	; 0x24
     f1a:	8d a2       	std	Y+37, r8	; 0x25
     f1c:	9e a2       	std	Y+38, r9	; 0x26
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	9f 90       	pop	r9
     f34:	8f 90       	pop	r8
     f36:	7f 90       	pop	r7
     f38:	6f 90       	pop	r6
     f3a:	5f 90       	pop	r5
     f3c:	4f 90       	pop	r4
     f3e:	3f 90       	pop	r3
     f40:	2f 90       	pop	r2
     f42:	08 95       	ret

00000f44 <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	e0 91 2e 01 	lds	r30, 0x012E
     f4a:	f0 91 2f 01 	lds	r31, 0x012F
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	25 e1       	ldi	r18, 0x15	; 21
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	bc 01       	movw	r22, r24
     f56:	62 9f       	mul	r22, r18
     f58:	c0 01       	movw	r24, r0
     f5a:	63 9f       	mul	r22, r19
     f5c:	90 0d       	add	r25, r0
     f5e:	72 9f       	mul	r23, r18
     f60:	90 0d       	add	r25, r0
     f62:	11 24       	eor	r1, r1
     f64:	e8 0f       	add	r30, r24
     f66:	f9 1f       	adc	r31, r25
     f68:	86 8d       	ldd	r24, Z+30	; 0x1e
     f6a:	86 95       	lsr	r24
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	84 30       	cpi	r24, 0x04	; 4
     f70:	09 f4       	brne	.+2      	; 0xf74 <Timebase_DownCounter_SS_Expired+0x30>
     f72:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     f74:	84 2f       	mov	r24, r20
     f76:	08 95       	ret

00000f78 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     f78:	e0 91 2e 01 	lds	r30, 0x012E
     f7c:	f0 91 2f 01 	lds	r31, 0x012F
     f80:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     f82:	25 e1       	ldi	r18, 0x15	; 21
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	ac 01       	movw	r20, r24
     f88:	42 9f       	mul	r20, r18
     f8a:	c0 01       	movw	r24, r0
     f8c:	43 9f       	mul	r20, r19
     f8e:	90 0d       	add	r25, r0
     f90:	52 9f       	mul	r21, r18
     f92:	90 0d       	add	r25, r0
     f94:	11 24       	eor	r1, r1
     f96:	e8 0f       	add	r30, r24
     f98:	f9 1f       	adc	r31, r25
     f9a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f9c:	86 95       	lsr	r24
     f9e:	8f 70       	andi	r24, 0x0F	; 15
     fa0:	84 30       	cpi	r24, 0x04	; 4
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <Timebase_DownCounter_SS_Expired_Event+0x30>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     fa8:	13 a2       	std	Z+35, r1	; 0x23
     faa:	14 a2       	std	Z+36, r1	; 0x24
     fac:	15 a2       	std	Z+37, r1	; 0x25
     fae:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     fb0:	17 8e       	std	Z+31, r1	; 0x1f
     fb2:	10 a2       	std	Z+32, r1	; 0x20
     fb4:	11 a2       	std	Z+33, r1	; 0x21
     fb6:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     fb8:	17 a2       	std	Z+39, r1	; 0x27
     fba:	10 a6       	std	Z+40, r1	; 0x28
     fbc:	11 a6       	std	Z+41, r1	; 0x29
     fbe:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     fc0:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     fc2:	80 7e       	andi	r24, 0xE0	; 224
     fc4:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     fc6:	17 a6       	std	Z+47, r1	; 0x2f
     fc8:	10 aa       	std	Z+48, r1	; 0x30
     fca:	11 aa       	std	Z+49, r1	; 0x31
     fcc:	12 aa       	std	Z+50, r1	; 0x32
     fce:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fd0:	08 95       	ret

00000fd2 <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
     fd2:	0e 94 bc 07 	call	0xf78	; 0xf78 <Timebase_DownCounter_SS_Expired_Event>
}
     fd6:	08 95       	ret

00000fd8 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
     fd8:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     fda:	e0 91 2e 01 	lds	r30, 0x012E
     fde:	f0 91 2f 01 	lds	r31, 0x012F
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     fe6:	85 e1       	ldi	r24, 0x15	; 21
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	ac 01       	movw	r20, r24
     fec:	24 9f       	mul	r18, r20
     fee:	c0 01       	movw	r24, r0
     ff0:	25 9f       	mul	r18, r21
     ff2:	90 0d       	add	r25, r0
     ff4:	34 9f       	mul	r19, r20
     ff6:	90 0d       	add	r25, r0
     ff8:	11 24       	eor	r1, r1
     ffa:	e8 0f       	add	r30, r24
     ffc:	f9 1f       	adc	r31, r25
     ffe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1000:	86 95       	lsr	r24
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	11 f0       	breq	.+4      	; 0x100c <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    100c:	47 a5       	ldd	r20, Z+47	; 0x2f
    100e:	50 a9       	ldd	r21, Z+48	; 0x30
    1010:	61 a9       	ldd	r22, Z+49	; 0x31
    1012:	72 a9       	ldd	r23, Z+50	; 0x32
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1014:	13 a2       	std	Z+35, r1	; 0x23
    1016:	14 a2       	std	Z+36, r1	; 0x24
    1018:	15 a2       	std	Z+37, r1	; 0x25
    101a:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    101c:	17 8e       	std	Z+31, r1	; 0x1f
    101e:	10 a2       	std	Z+32, r1	; 0x20
    1020:	11 a2       	std	Z+33, r1	; 0x21
    1022:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1024:	17 a2       	std	Z+39, r1	; 0x27
    1026:	10 a6       	std	Z+40, r1	; 0x28
    1028:	11 a6       	std	Z+41, r1	; 0x29
    102a:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    102c:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    102e:	80 7e       	andi	r24, 0xE0	; 224
    1030:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1032:	17 a6       	std	Z+47, r1	; 0x2f
    1034:	10 aa       	std	Z+48, r1	; 0x30
    1036:	11 aa       	std	Z+49, r1	; 0x31
    1038:	12 aa       	std	Z+50, r1	; 0x32

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    103a:	8a 2f       	mov	r24, r26
    103c:	0e 94 df 05 	call	0xbbe	; 0xbbe <Timebase_DownCounter_SS_Set_Securely>
    1040:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1042:	08 95       	ret

00001044 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1048:	c0 91 2e 01 	lds	r28, 0x012E
    104c:	d0 91 2f 01 	lds	r29, 0x012F
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1054:	85 e1       	ldi	r24, 0x15	; 21
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	28 9f       	mul	r18, r24
    105a:	f0 01       	movw	r30, r0
    105c:	29 9f       	mul	r18, r25
    105e:	f0 0d       	add	r31, r0
    1060:	38 9f       	mul	r19, r24
    1062:	f0 0d       	add	r31, r0
    1064:	11 24       	eor	r1, r1
    1066:	ec 0f       	add	r30, r28
    1068:	fd 1f       	adc	r31, r29
    106a:	86 8d       	ldd	r24, Z+30	; 0x1e
    106c:	80 fd       	sbrc	r24, 0
    106e:	21 c0       	rjmp	.+66     	; 0x10b2 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1070:	87 a1       	ldd	r24, Z+39	; 0x27
    1072:	90 a5       	ldd	r25, Z+40	; 0x28
    1074:	a1 a5       	ldd	r26, Z+41	; 0x29
    1076:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1078:	84 1b       	sub	r24, r20
    107a:	95 0b       	sbc	r25, r21
    107c:	a6 0b       	sbc	r26, r22
    107e:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1080:	b7 ff       	sbrs	r27, 7
    1082:	05 c0       	rjmp	.+10     	; 0x108e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1084:	13 a6       	std	Z+43, r1	; 0x2b
    1086:	14 a6       	std	Z+44, r1	; 0x2c
    1088:	15 a6       	std	Z+45, r1	; 0x2d
    108a:	16 a6       	std	Z+46, r1	; 0x2e
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    108e:	83 a7       	std	Z+43, r24	; 0x2b
    1090:	94 a7       	std	Z+44, r25	; 0x2c
    1092:	a5 a7       	std	Z+45, r26	; 0x2d
    1094:	b6 a7       	std	Z+46, r27	; 0x2e
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1096:	85 e1       	ldi	r24, 0x15	; 21
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	28 9f       	mul	r18, r24
    109c:	f0 01       	movw	r30, r0
    109e:	29 9f       	mul	r18, r25
    10a0:	f0 0d       	add	r31, r0
    10a2:	38 9f       	mul	r19, r24
    10a4:	f0 0d       	add	r31, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	ec 0f       	add	r30, r28
    10aa:	fd 1f       	adc	r31, r29
    10ac:	86 8d       	ldd	r24, Z+30	; 0x1e
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	86 8f       	std	Z+30, r24	; 0x1e
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    10b2:	df 91       	pop	r29
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    10b8:	e0 91 2e 01 	lds	r30, 0x012E
    10bc:	f0 91 2f 01 	lds	r31, 0x012F
    10c0:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    10c2:	25 e1       	ldi	r18, 0x15	; 21
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	ac 01       	movw	r20, r24
    10c8:	42 9f       	mul	r20, r18
    10ca:	c0 01       	movw	r24, r0
    10cc:	43 9f       	mul	r20, r19
    10ce:	90 0d       	add	r25, r0
    10d0:	52 9f       	mul	r21, r18
    10d2:	90 0d       	add	r25, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	e8 0f       	add	r30, r24
    10d8:	f9 1f       	adc	r31, r25
    10da:	27 a1       	ldd	r18, Z+39	; 0x27
    10dc:	30 a5       	ldd	r19, Z+40	; 0x28
    10de:	41 a5       	ldd	r20, Z+41	; 0x29
    10e0:	52 a5       	ldd	r21, Z+42	; 0x2a
    10e2:	83 a5       	ldd	r24, Z+43	; 0x2b
    10e4:	94 a5       	ldd	r25, Z+44	; 0x2c
    10e6:	a5 a5       	ldd	r26, Z+45	; 0x2d
    10e8:	b6 a5       	ldd	r27, Z+46	; 0x2e
    10ea:	28 1b       	sub	r18, r24
    10ec:	39 0b       	sbc	r19, r25
    10ee:	4a 0b       	sbc	r20, r26
    10f0:	5b 0b       	sbc	r21, r27
    10f2:	57 ff       	sbrs	r21, 7
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    10fe:	b9 01       	movw	r22, r18
    1100:	ca 01       	movw	r24, r20
    1102:	08 95       	ret

00001104 <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1108:	c0 91 2e 01 	lds	r28, 0x012E
    110c:	d0 91 2f 01 	lds	r29, 0x012F
    1110:	68 2f       	mov	r22, r24
    1112:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1114:	85 e1       	ldi	r24, 0x15	; 21
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	68 9f       	mul	r22, r24
    111a:	f0 01       	movw	r30, r0
    111c:	69 9f       	mul	r22, r25
    111e:	f0 0d       	add	r31, r0
    1120:	78 9f       	mul	r23, r24
    1122:	f0 0d       	add	r31, r0
    1124:	11 24       	eor	r1, r1
    1126:	ec 0f       	add	r30, r28
    1128:	fd 1f       	adc	r31, r29
    112a:	27 a1       	ldd	r18, Z+39	; 0x27
    112c:	30 a5       	ldd	r19, Z+40	; 0x28
    112e:	41 a5       	ldd	r20, Z+41	; 0x29
    1130:	52 a5       	ldd	r21, Z+42	; 0x2a
    1132:	83 a5       	ldd	r24, Z+43	; 0x2b
    1134:	94 a5       	ldd	r25, Z+44	; 0x2c
    1136:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1138:	b6 a5       	ldd	r27, Z+46	; 0x2e
    113a:	28 1b       	sub	r18, r24
    113c:	39 0b       	sbc	r19, r25
    113e:	4a 0b       	sbc	r20, r26
    1140:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1142:	57 fd       	sbrc	r21, 7
    1144:	07 c0       	rjmp	.+14     	; 0x1154 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1146:	21 15       	cp	r18, r1
    1148:	31 05       	cpc	r19, r1
    114a:	41 05       	cpc	r20, r1
    114c:	51 05       	cpc	r21, r1
    114e:	11 f0       	breq	.+4      	; 0x1154 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	12 c0       	rjmp	.+36     	; 0x1178 <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	85 e1       	ldi	r24, 0x15	; 21
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	ac 01       	movw	r20, r24
    115c:	64 9f       	mul	r22, r20
    115e:	c0 01       	movw	r24, r0
    1160:	65 9f       	mul	r22, r21
    1162:	90 0d       	add	r25, r0
    1164:	74 9f       	mul	r23, r20
    1166:	90 0d       	add	r25, r0
    1168:	11 24       	eor	r1, r1
    116a:	c8 0f       	add	r28, r24
    116c:	d9 1f       	adc	r29, r25
    116e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1170:	80 ff       	sbrs	r24, 0
    1172:	21 e0       	ldi	r18, 0x01	; 1
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1178:	82 2f       	mov	r24, r18
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1180:	1f 93       	push	r17
    1182:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1184:	0e 94 82 08 	call	0x1104	; 0x1104 <Timebase_DownCounter_SS_Period_Value_Expired>
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	11 f0       	breq	.+4      	; 0x1190 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	16 c0       	rjmp	.+44     	; 0x11bc <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1190:	e0 91 2e 01 	lds	r30, 0x012E
    1194:	f0 91 2f 01 	lds	r31, 0x012F
    1198:	21 2f       	mov	r18, r17
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	85 e1       	ldi	r24, 0x15	; 21
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	ac 01       	movw	r20, r24
    11a2:	24 9f       	mul	r18, r20
    11a4:	c0 01       	movw	r24, r0
    11a6:	25 9f       	mul	r18, r21
    11a8:	90 0d       	add	r25, r0
    11aa:	34 9f       	mul	r19, r20
    11ac:	90 0d       	add	r25, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	e8 0f       	add	r30, r24
    11b2:	f9 1f       	adc	r31, r25
    11b4:	86 8d       	ldd	r24, Z+30	; 0x1e
    11b6:	8e 7f       	andi	r24, 0xFE	; 254
    11b8:	86 8f       	std	Z+30, r24	; 0x1e
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11bc:	1f 91       	pop	r17
    11be:	08 95       	ret

000011c0 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0e 94 ef 06 	call	0xdde	; 0xdde <Timebase_DownCounter_SS_Update>
  }
}
    11c6:	08 95       	ret

000011c8 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    11c8:	e0 91 2e 01 	lds	r30, 0x012E
    11cc:	f0 91 2f 01 	lds	r31, 0x012F
    11d0:	13 a2       	std	Z+35, r1	; 0x23
    11d2:	14 a2       	std	Z+36, r1	; 0x24
    11d4:	15 a2       	std	Z+37, r1	; 0x25
    11d6:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    11d8:	17 8e       	std	Z+31, r1	; 0x1f
    11da:	10 a2       	std	Z+32, r1	; 0x20
    11dc:	11 a2       	std	Z+33, r1	; 0x21
    11de:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    11e0:	17 a2       	std	Z+39, r1	; 0x27
    11e2:	10 a6       	std	Z+40, r1	; 0x28
    11e4:	11 a6       	std	Z+41, r1	; 0x29
    11e6:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    11e8:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    11ea:	80 7e       	andi	r24, 0xE0	; 224
    11ec:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    11ee:	17 a6       	std	Z+47, r1	; 0x2f
    11f0:	10 aa       	std	Z+48, r1	; 0x30
    11f2:	11 aa       	std	Z+49, r1	; 0x31
    11f4:	12 aa       	std	Z+50, r1	; 0x32

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    11f6:	08 95       	ret

000011f8 <Timebase_LPDownCounter_Get_Status>:


/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
    11f8:	e0 91 2e 01 	lds	r30, 0x012E
    11fc:	f0 91 2f 01 	lds	r31, 0x012F
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9c 01       	movw	r18, r24
    1204:	44 e0       	ldi	r20, 0x04	; 4
    1206:	22 0f       	add	r18, r18
    1208:	33 1f       	adc	r19, r19
    120a:	4a 95       	dec	r20
    120c:	e1 f7       	brne	.-8      	; 0x1206 <Timebase_LPDownCounter_Get_Status+0xe>
    120e:	28 0f       	add	r18, r24
    1210:	39 1f       	adc	r19, r25
    1212:	e2 0f       	add	r30, r18
    1214:	f3 1f       	adc	r31, r19
    1216:	83 a9       	ldd	r24, Z+51	; 0x33
    1218:	86 95       	lsr	r24
  return Timebase->LPDownCounter[window].Status.Value;
}
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	08 95       	ret

0000121e <Timebase_LPDownCounter_Set_Status>:


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    121e:	e0 91 2e 01 	lds	r30, 0x012E
    1222:	f0 91 2f 01 	lds	r31, 0x012F
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	9c 01       	movw	r18, r24
    122a:	54 e0       	ldi	r21, 0x04	; 4
    122c:	22 0f       	add	r18, r18
    122e:	33 1f       	adc	r19, r19
    1230:	5a 95       	dec	r21
    1232:	e1 f7       	brne	.-8      	; 0x122c <Timebase_LPDownCounter_Set_Status+0xe>
    1234:	28 0f       	add	r18, r24
    1236:	39 1f       	adc	r19, r25
    1238:	e2 0f       	add	r30, r18
    123a:	f3 1f       	adc	r31, r19
    123c:	6f 70       	andi	r22, 0x0F	; 15
    123e:	66 0f       	add	r22, r22
    1240:	83 a9       	ldd	r24, Z+51	; 0x33
    1242:	81 7e       	andi	r24, 0xE1	; 225
    1244:	86 2b       	or	r24, r22
    1246:	83 ab       	std	Z+51, r24	; 0x33
}
    1248:	08 95       	ret

0000124a <Timebase_LPDownCounter_Get_Value>:


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
    124a:	e0 91 2e 01 	lds	r30, 0x012E
    124e:	f0 91 2f 01 	lds	r31, 0x012F
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9c 01       	movw	r18, r24
    1256:	64 e0       	ldi	r22, 0x04	; 4
    1258:	22 0f       	add	r18, r18
    125a:	33 1f       	adc	r19, r19
    125c:	6a 95       	dec	r22
    125e:	e1 f7       	brne	.-8      	; 0x1258 <Timebase_LPDownCounter_Get_Value+0xe>
    1260:	28 0f       	add	r18, r24
    1262:	39 1f       	adc	r19, r25
    1264:	e2 0f       	add	r30, r18
    1266:	f3 1f       	adc	r31, r19
    1268:	df 01       	movw	r26, r30
    126a:	d8 96       	adiw	r26, 0x38	; 56
    126c:	60 ad       	ldd	r22, Z+56	; 0x38
    126e:	11 96       	adiw	r26, 0x01	; 1
    1270:	7c 91       	ld	r23, X
    1272:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].Value;
}
    1274:	12 96       	adiw	r26, 0x02	; 2
    1276:	8c 91       	ld	r24, X
    1278:	12 97       	sbiw	r26, 0x02	; 2
    127a:	13 96       	adiw	r26, 0x03	; 3
    127c:	9c 91       	ld	r25, X
    127e:	08 95       	ret

00001280 <Timebase_LPDownCounter_Set_Value>:


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1280:	e0 91 2e 01 	lds	r30, 0x012E
    1284:	f0 91 2f 01 	lds	r31, 0x012F
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9c 01       	movw	r18, r24
    128c:	a4 e0       	ldi	r26, 0x04	; 4
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	aa 95       	dec	r26
    1294:	e1 f7       	brne	.-8      	; 0x128e <Timebase_LPDownCounter_Set_Value+0xe>
    1296:	28 0f       	add	r18, r24
    1298:	39 1f       	adc	r19, r25
    129a:	e2 0f       	add	r30, r18
    129c:	f3 1f       	adc	r31, r19
    129e:	40 af       	std	Z+56, r20	; 0x38
    12a0:	51 af       	std	Z+57, r21	; 0x39
    12a2:	62 af       	std	Z+58, r22	; 0x3a
    12a4:	73 af       	std	Z+59, r23	; 0x3b
}
    12a6:	08 95       	ret

000012a8 <Timebase_LPDownCounter_Get_EndValue>:


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
    12a8:	e0 91 2e 01 	lds	r30, 0x012E
    12ac:	f0 91 2f 01 	lds	r31, 0x012F
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 01       	movw	r18, r24
    12b4:	b4 e0       	ldi	r27, 0x04	; 4
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	ba 95       	dec	r27
    12bc:	e1 f7       	brne	.-8      	; 0x12b6 <Timebase_LPDownCounter_Get_EndValue+0xe>
    12be:	28 0f       	add	r18, r24
    12c0:	39 1f       	adc	r19, r25
    12c2:	e2 0f       	add	r30, r18
    12c4:	f3 1f       	adc	r31, r19
    12c6:	df 01       	movw	r26, r30
    12c8:	d4 96       	adiw	r26, 0x34	; 52
    12ca:	64 a9       	ldd	r22, Z+52	; 0x34
    12cc:	11 96       	adiw	r26, 0x01	; 1
    12ce:	7c 91       	ld	r23, X
    12d0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].EndValue;
}
    12d2:	12 96       	adiw	r26, 0x02	; 2
    12d4:	8c 91       	ld	r24, X
    12d6:	12 97       	sbiw	r26, 0x02	; 2
    12d8:	13 96       	adiw	r26, 0x03	; 3
    12da:	9c 91       	ld	r25, X
    12dc:	08 95       	ret

000012de <Timebase_LPDownCounter_Set_EndValue>:


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    12de:	e0 91 2e 01 	lds	r30, 0x012E
    12e2:	f0 91 2f 01 	lds	r31, 0x012F
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 01       	movw	r18, r24
    12ea:	a4 e0       	ldi	r26, 0x04	; 4
    12ec:	22 0f       	add	r18, r18
    12ee:	33 1f       	adc	r19, r19
    12f0:	aa 95       	dec	r26
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <Timebase_LPDownCounter_Set_EndValue+0xe>
    12f4:	28 0f       	add	r18, r24
    12f6:	39 1f       	adc	r19, r25
    12f8:	e2 0f       	add	r30, r18
    12fa:	f3 1f       	adc	r31, r19
    12fc:	44 ab       	std	Z+52, r20	; 0x34
    12fe:	55 ab       	std	Z+53, r21	; 0x35
    1300:	66 ab       	std	Z+54, r22	; 0x36
    1302:	77 ab       	std	Z+55, r23	; 0x37
}
    1304:	08 95       	ret

00001306 <Timebase_LPDownCounter_Get_PeriodValue>:


int32_t Timebase_LPDownCounter_Get_PeriodValue(uint8_t window){
    1306:	e0 91 2e 01 	lds	r30, 0x012E
    130a:	f0 91 2f 01 	lds	r31, 0x012F
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	9c 01       	movw	r18, r24
    1312:	b4 e0       	ldi	r27, 0x04	; 4
    1314:	22 0f       	add	r18, r18
    1316:	33 1f       	adc	r19, r19
    1318:	ba 95       	dec	r27
    131a:	e1 f7       	brne	.-8      	; 0x1314 <Timebase_LPDownCounter_Get_PeriodValue+0xe>
    131c:	28 0f       	add	r18, r24
    131e:	39 1f       	adc	r19, r25
    1320:	e2 0f       	add	r30, r18
    1322:	f3 1f       	adc	r31, r19
    1324:	df 01       	movw	r26, r30
    1326:	dc 96       	adiw	r26, 0x3c	; 60
    1328:	64 ad       	ldd	r22, Z+60	; 0x3c
    132a:	11 96       	adiw	r26, 0x01	; 1
    132c:	7c 91       	ld	r23, X
    132e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].PeriodValue;
}
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	8c 91       	ld	r24, X
    1334:	12 97       	sbiw	r26, 0x02	; 2
    1336:	13 96       	adiw	r26, 0x03	; 3
    1338:	9c 91       	ld	r25, X
    133a:	08 95       	ret

0000133c <Timebase_LPDownCounter_Set_PeriodValue>:


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    133c:	e0 91 2e 01 	lds	r30, 0x012E
    1340:	f0 91 2f 01 	lds	r31, 0x012F
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1348:	77 ff       	sbrs	r23, 7
    134a:	0f c0       	rjmp	.+30     	; 0x136a <Timebase_LPDownCounter_Set_PeriodValue+0x2e>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    134c:	c9 01       	movw	r24, r18
    134e:	b4 e0       	ldi	r27, 0x04	; 4
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	ba 95       	dec	r27
    1356:	e1 f7       	brne	.-8      	; 0x1350 <Timebase_LPDownCounter_Set_PeriodValue+0x14>
    1358:	82 0f       	add	r24, r18
    135a:	93 1f       	adc	r25, r19
    135c:	e8 0f       	add	r30, r24
    135e:	f9 1f       	adc	r31, r25
    1360:	14 ae       	std	Z+60, r1	; 0x3c
    1362:	15 ae       	std	Z+61, r1	; 0x3d
    1364:	16 ae       	std	Z+62, r1	; 0x3e
    1366:	17 ae       	std	Z+63, r1	; 0x3f
    1368:	08 95       	ret
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    136a:	c9 01       	movw	r24, r18
    136c:	a4 e0       	ldi	r26, 0x04	; 4
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	aa 95       	dec	r26
    1374:	e1 f7       	brne	.-8      	; 0x136e <Timebase_LPDownCounter_Set_PeriodValue+0x32>
    1376:	82 0f       	add	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	e8 0f       	add	r30, r24
    137c:	f9 1f       	adc	r31, r25
    137e:	44 af       	std	Z+60, r20	; 0x3c
    1380:	55 af       	std	Z+61, r21	; 0x3d
    1382:	66 af       	std	Z+62, r22	; 0x3e
    1384:	77 af       	std	Z+63, r23	; 0x3f
    1386:	08 95       	ret

00001388 <Timebase_LPDownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
    1388:	e0 91 2e 01 	lds	r30, 0x012E
    138c:	f0 91 2f 01 	lds	r31, 0x012F
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9c 01       	movw	r18, r24
    1394:	44 e0       	ldi	r20, 0x04	; 4
    1396:	22 0f       	add	r18, r18
    1398:	33 1f       	adc	r19, r19
    139a:	4a 95       	dec	r20
    139c:	e1 f7       	brne	.-8      	; 0x1396 <Timebase_LPDownCounter_Get_Period_Flag+0xe>
    139e:	28 0f       	add	r18, r24
    13a0:	39 1f       	adc	r19, r25
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	83 a9       	ldd	r24, Z+51	; 0x33
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}
    13a8:	81 70       	andi	r24, 0x01	; 1
    13aa:	08 95       	ret

000013ac <Timebase_LPDownCounter_Set_Period_Flag>:


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    13ac:	e0 91 2e 01 	lds	r30, 0x012E
    13b0:	f0 91 2f 01 	lds	r31, 0x012F
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	9c 01       	movw	r18, r24
    13b8:	54 e0       	ldi	r21, 0x04	; 4
    13ba:	22 0f       	add	r18, r18
    13bc:	33 1f       	adc	r19, r19
    13be:	5a 95       	dec	r21
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <Timebase_LPDownCounter_Set_Period_Flag+0xe>
    13c2:	28 0f       	add	r18, r24
    13c4:	39 1f       	adc	r19, r25
    13c6:	e2 0f       	add	r30, r18
    13c8:	f3 1f       	adc	r31, r19
    13ca:	83 a9       	ldd	r24, Z+51	; 0x33
    13cc:	81 60       	ori	r24, 0x01	; 1
    13ce:	83 ab       	std	Z+51, r24	; 0x33
}
    13d0:	08 95       	ret

000013d2 <Timebase_LPDownCounter_Clear_Period_Flag>:


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    13d2:	e0 91 2e 01 	lds	r30, 0x012E
    13d6:	f0 91 2f 01 	lds	r31, 0x012F
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9c 01       	movw	r18, r24
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	6a 95       	dec	r22
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <Timebase_LPDownCounter_Clear_Period_Flag+0xe>
    13e8:	28 0f       	add	r18, r24
    13ea:	39 1f       	adc	r19, r25
    13ec:	e2 0f       	add	r30, r18
    13ee:	f3 1f       	adc	r31, r19
    13f0:	83 a9       	ldd	r24, Z+51	; 0x33
    13f2:	8e 7f       	andi	r24, 0xFE	; 254
    13f4:	83 ab       	std	Z+51, r24	; 0x33
}
    13f6:	08 95       	ret

000013f8 <Timebase_LPDownCounter_Get_ReloadValue>:

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
    13f8:	e0 91 2e 01 	lds	r30, 0x012E
    13fc:	f0 91 2f 01 	lds	r31, 0x012F
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	9c 01       	movw	r18, r24
    1404:	74 e0       	ldi	r23, 0x04	; 4
    1406:	22 0f       	add	r18, r18
    1408:	33 1f       	adc	r19, r19
    140a:	7a 95       	dec	r23
    140c:	e1 f7       	brne	.-8      	; 0x1406 <Timebase_LPDownCounter_Get_ReloadValue+0xe>
    140e:	28 0f       	add	r18, r24
    1410:	39 1f       	adc	r19, r25
    1412:	e2 0f       	add	r30, r18
    1414:	f3 1f       	adc	r31, r19
    1416:	e0 5c       	subi	r30, 0xC0	; 192
    1418:	ff 4f       	sbci	r31, 0xFF	; 255
    141a:	60 81       	ld	r22, Z
    141c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].ReloadValue;
}
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	08 95       	ret

00001424 <Timebase_LPDownCounter_Set_ReloadValue>:

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1424:	e0 91 2e 01 	lds	r30, 0x012E
    1428:	f0 91 2f 01 	lds	r31, 0x012F
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 01       	movw	r18, r24
    1430:	a4 e0       	ldi	r26, 0x04	; 4
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	aa 95       	dec	r26
    1438:	e1 f7       	brne	.-8      	; 0x1432 <Timebase_LPDownCounter_Set_ReloadValue+0xe>
    143a:	28 0f       	add	r18, r24
    143c:	39 1f       	adc	r19, r25
    143e:	e2 0f       	add	r30, r18
    1440:	f3 1f       	adc	r31, r19
    1442:	e0 5c       	subi	r30, 0xC0	; 192
    1444:	ff 4f       	sbci	r31, 0xFF	; 255
    1446:	40 83       	st	Z, r20
    1448:	51 83       	std	Z+1, r21	; 0x01
    144a:	62 83       	std	Z+2, r22	; 0x02
    144c:	73 83       	std	Z+3, r23	; 0x03
}
    144e:	08 95       	ret

00001450 <Timebase_LPDownCounter_Reset>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1450:	e0 91 2e 01 	lds	r30, 0x012E
    1454:	f0 91 2f 01 	lds	r31, 0x012F
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9c 01       	movw	r18, r24
    145c:	b4 e0       	ldi	r27, 0x04	; 4
    145e:	22 0f       	add	r18, r18
    1460:	33 1f       	adc	r19, r19
    1462:	ba 95       	dec	r27
    1464:	e1 f7       	brne	.-8      	; 0x145e <Timebase_LPDownCounter_Reset+0xe>
    1466:	28 0f       	add	r18, r24
    1468:	39 1f       	adc	r19, r25
    146a:	e2 0f       	add	r30, r18
    146c:	f3 1f       	adc	r31, r19
    146e:	14 aa       	std	Z+52, r1	; 0x34
    1470:	15 aa       	std	Z+53, r1	; 0x35
    1472:	16 aa       	std	Z+54, r1	; 0x36
    1474:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1476:	10 ae       	std	Z+56, r1	; 0x38
    1478:	11 ae       	std	Z+57, r1	; 0x39
    147a:	12 ae       	std	Z+58, r1	; 0x3a
    147c:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    147e:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1480:	80 7e       	andi	r24, 0xE0	; 224
    1482:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1484:	e0 5c       	subi	r30, 0xC0	; 192
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	10 82       	st	Z, r1
    148a:	11 82       	std	Z+1, r1	; 0x01
    148c:	12 82       	std	Z+2, r1	; 0x02
    148e:	13 82       	std	Z+3, r1	; 0x03
  Timebase_LPDownCounter_Set_EndValue(window, 0);
  Timebase_LPDownCounter_Set_Value(window, 0);
  Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_LPDownCounter_Clear_Period_Flag(window);
  Timebase_LPDownCounter_Set_ReloadValue(window, 0);
} 
    1490:	08 95       	ret

00001492 <Timebase_LPDownCounter_Clear_All_Flags>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1492:	e0 91 2e 01 	lds	r30, 0x012E
    1496:	f0 91 2f 01 	lds	r31, 0x012F
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 01       	movw	r18, r24
    149e:	44 e0       	ldi	r20, 0x04	; 4
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	4a 95       	dec	r20
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <Timebase_LPDownCounter_Clear_All_Flags+0xe>
    14a8:	28 0f       	add	r18, r24
    14aa:	39 1f       	adc	r19, r25
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	14 aa       	std	Z+52, r1	; 0x34
    14b2:	15 aa       	std	Z+53, r1	; 0x35
    14b4:	16 aa       	std	Z+54, r1	; 0x36
    14b6:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    14b8:	10 ae       	std	Z+56, r1	; 0x38
    14ba:	11 ae       	std	Z+57, r1	; 0x39
    14bc:	12 ae       	std	Z+58, r1	; 0x3a
    14be:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    14c0:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14c2:	80 7e       	andi	r24, 0xE0	; 224
    14c4:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    14c6:	e0 5c       	subi	r30, 0xC0	; 192
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	10 82       	st	Z, r1
    14cc:	11 82       	std	Z+1, r1	; 0x01
    14ce:	12 82       	std	Z+2, r1	; 0x02
    14d0:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_LPDownCounter_Clear_All_Flags(uint8_t window){
  Timebase_LPDownCounter_Reset( window );
}
    14d2:	08 95       	ret

000014d4 <Timebase_LPDownCounter_Start>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    14d4:	e0 91 2e 01 	lds	r30, 0x012E
    14d8:	f0 91 2f 01 	lds	r31, 0x012F
    14dc:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    14de:	9c 01       	movw	r18, r24
    14e0:	54 e0       	ldi	r21, 0x04	; 4
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	5a 95       	dec	r21
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <Timebase_LPDownCounter_Start+0xe>
    14ea:	28 0f       	add	r18, r24
    14ec:	39 1f       	adc	r19, r25
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	93 a9       	ldd	r25, Z+51	; 0x33
    14f4:	89 2f       	mov	r24, r25
    14f6:	86 95       	lsr	r24
    14f8:	8f 70       	andi	r24, 0x0F	; 15
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	19 f0       	breq	.+6      	; 0x1504 <Timebase_LPDownCounter_Start+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    14fe:	91 7e       	andi	r25, 0xE1	; 225
    1500:	92 60       	ori	r25, 0x02	; 2
    1502:	93 ab       	std	Z+51, r25	; 0x33
    1504:	08 95       	ret

00001506 <Timebase_LPDownCounter_Stop>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1506:	e0 91 2e 01 	lds	r30, 0x012E
    150a:	f0 91 2f 01 	lds	r31, 0x012F
    150e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Stop(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1510:	9c 01       	movw	r18, r24
    1512:	64 e0       	ldi	r22, 0x04	; 4
    1514:	22 0f       	add	r18, r18
    1516:	33 1f       	adc	r19, r19
    1518:	6a 95       	dec	r22
    151a:	e1 f7       	brne	.-8      	; 0x1514 <Timebase_LPDownCounter_Stop+0xe>
    151c:	28 0f       	add	r18, r24
    151e:	39 1f       	adc	r19, r25
    1520:	e2 0f       	add	r30, r18
    1522:	f3 1f       	adc	r31, r19
    1524:	93 a9       	ldd	r25, Z+51	; 0x33
    1526:	89 2f       	mov	r24, r25
    1528:	86 95       	lsr	r24
    152a:	8f 70       	andi	r24, 0x0F	; 15
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	19 f0       	breq	.+6      	; 0x1536 <Timebase_LPDownCounter_Stop+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1530:	91 7e       	andi	r25, 0xE1	; 225
    1532:	94 60       	ori	r25, 0x04	; 4
    1534:	93 ab       	std	Z+51, r25	; 0x33
    1536:	08 95       	ret

00001538 <Timebase_LPDownCounter_Set_Securely>:
    Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	7a 01       	movw	r14, r20
    1546:	8b 01       	movw	r16, r22

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1548:	c0 91 2e 01 	lds	r28, 0x012E
    154c:	d0 91 2f 01 	lds	r29, 0x012F
    1550:	68 2f       	mov	r22, r24
    1552:	70 e0       	ldi	r23, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1554:	fb 01       	movw	r30, r22
    1556:	b4 e0       	ldi	r27, 0x04	; 4
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	ba 95       	dec	r27
    155e:	e1 f7       	brne	.-8      	; 0x1558 <Timebase_LPDownCounter_Set_Securely+0x20>
    1560:	e6 0f       	add	r30, r22
    1562:	f7 1f       	adc	r31, r23
    1564:	ec 0f       	add	r30, r28
    1566:	fd 1f       	adc	r31, r29
    1568:	83 a9       	ldd	r24, Z+51	; 0x33
    156a:	86 95       	lsr	r24
    156c:	8f 70       	andi	r24, 0x0F	; 15
    156e:	a1 f5       	brne	.+104    	; 0x15d8 <Timebase_LPDownCounter_Set_Securely+0xa0>
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1570:	e0 ae       	std	Z+56, r14	; 0x38
    1572:	f1 ae       	std	Z+57, r15	; 0x39
    1574:	02 af       	std	Z+58, r16	; 0x3a
    1576:	13 af       	std	Z+59, r17	; 0x3b


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    1578:	29 8d       	ldd	r18, Y+25	; 0x19
    157a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    157c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    157e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    1580:	89 8d       	ldd	r24, Y+25	; 0x19
    1582:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1584:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1586:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
    1588:	28 17       	cp	r18, r24
    158a:	39 07       	cpc	r19, r25
    158c:	4a 07       	cpc	r20, r26
    158e:	5b 07       	cpc	r21, r27
    1590:	99 f7       	brne	.-26     	; 0x1578 <Timebase_LPDownCounter_Set_Securely+0x40>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1592:	fb 01       	movw	r30, r22
    1594:	a4 e0       	ldi	r26, 0x04	; 4
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	aa 95       	dec	r26
    159c:	e1 f7       	brne	.-8      	; 0x1596 <Timebase_LPDownCounter_Set_Securely+0x5e>
    159e:	e6 0f       	add	r30, r22
    15a0:	f7 1f       	adc	r31, r23
    15a2:	ec 0f       	add	r30, r28
    15a4:	fd 1f       	adc	r31, r29
    15a6:	2e 0d       	add	r18, r14
    15a8:	3f 1d       	adc	r19, r15
    15aa:	40 1f       	adc	r20, r16
    15ac:	51 1f       	adc	r21, r17
    15ae:	24 ab       	std	Z+52, r18	; 0x34
    15b0:	35 ab       	std	Z+53, r19	; 0x35
    15b2:	46 ab       	std	Z+54, r20	; 0x36
    15b4:	57 ab       	std	Z+55, r21	; 0x37
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    15b6:	e0 5c       	subi	r30, 0xC0	; 192
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	e0 82       	st	Z, r14
    15bc:	f1 82       	std	Z+1, r15	; 0x01
    15be:	02 83       	std	Z+2, r16	; 0x02
    15c0:	13 83       	std	Z+3, r17	; 0x03
    15c2:	e0 54       	subi	r30, 0x40	; 64
    15c4:	f0 40       	sbci	r31, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    15c6:	93 a9       	ldd	r25, Z+51	; 0x33
    15c8:	89 2f       	mov	r24, r25
    15ca:	86 95       	lsr	r24
    15cc:	8f 70       	andi	r24, 0x0F	; 15
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	19 f0       	breq	.+6      	; 0x15d8 <Timebase_LPDownCounter_Set_Securely+0xa0>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    15d2:	91 7e       	andi	r25, 0xE1	; 225
    15d4:	92 60       	ori	r25, 0x02	; 2
    15d6:	93 ab       	std	Z+51, r25	; 0x33
    Timebase_LPDownCounter_Set_Value(window, value);
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPTimer_Get_Seconds() + value);
	Timebase_LPDownCounter_Set_ReloadValue(window, value);
    Timebase_LPDownCounter_Start(window);
  }
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	08 95       	ret

000015e6 <Timebase_LPDownCounter_Set_Forcefully>:


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
    15e6:	cf 92       	push	r12
    15e8:	df 92       	push	r13
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	6a 01       	movw	r12, r20
    15f4:	7b 01       	movw	r14, r22
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    15f6:	e0 91 2e 01 	lds	r30, 0x012E
    15fa:	f0 91 2f 01 	lds	r31, 0x012F
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	89 01       	movw	r16, r18
    1604:	94 e0       	ldi	r25, 0x04	; 4
    1606:	00 0f       	add	r16, r16
    1608:	11 1f       	adc	r17, r17
    160a:	9a 95       	dec	r25
    160c:	e1 f7       	brne	.-8      	; 0x1606 <Timebase_LPDownCounter_Set_Forcefully+0x20>
    160e:	02 0f       	add	r16, r18
    1610:	13 1f       	adc	r17, r19
    1612:	e0 0f       	add	r30, r16
    1614:	f1 1f       	adc	r31, r17
    1616:	14 aa       	std	Z+52, r1	; 0x34
    1618:	15 aa       	std	Z+53, r1	; 0x35
    161a:	16 aa       	std	Z+54, r1	; 0x36
    161c:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    161e:	10 ae       	std	Z+56, r1	; 0x38
    1620:	11 ae       	std	Z+57, r1	; 0x39
    1622:	12 ae       	std	Z+58, r1	; 0x3a
    1624:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1626:	93 a9       	ldd	r25, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1628:	90 7e       	andi	r25, 0xE0	; 224
    162a:	93 ab       	std	Z+51, r25	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    162c:	e0 5c       	subi	r30, 0xC0	; 192
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	10 82       	st	Z, r1
    1632:	11 82       	std	Z+1, r1	; 0x01
    1634:	12 82       	std	Z+2, r1	; 0x02
    1636:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
    1638:	0e 94 9c 0a 	call	0x1538	; 0x1538 <Timebase_LPDownCounter_Set_Securely>
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    163c:	e0 91 2e 01 	lds	r30, 0x012E
    1640:	f0 91 2f 01 	lds	r31, 0x012F
    1644:	e0 0f       	add	r30, r16
    1646:	f1 1f       	adc	r31, r17
    1648:	e0 5c       	subi	r30, 0xC0	; 192
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	c0 82       	st	Z, r12
    164e:	d1 82       	std	Z+1, r13	; 0x01
    1650:	e2 82       	std	Z+2, r14	; 0x02
    1652:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	08 95       	ret

00001662 <Timebase_LPDownCounter_Update>:


void Timebase_LPDownCounter_Update(uint8_t window){
    1662:	cf 92       	push	r12
    1664:	df 92       	push	r13
    1666:	ef 92       	push	r14
    1668:	ff 92       	push	r15
    166a:	0f 93       	push	r16
    166c:	1f 93       	push	r17
    166e:	cf 93       	push	r28
    1670:	df 93       	push	r29

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1672:	60 91 2e 01 	lds	r22, 0x012E
    1676:	70 91 2f 01 	lds	r23, 0x012F
    167a:	c8 2e       	mov	r12, r24
    167c:	dd 24       	eor	r13, r13
    167e:	f6 01       	movw	r30, r12
    1680:	a4 e0       	ldi	r26, 0x04	; 4
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	aa 95       	dec	r26
    1688:	e1 f7       	brne	.-8      	; 0x1682 <Timebase_LPDownCounter_Update+0x20>
    168a:	ec 0d       	add	r30, r12
    168c:	fd 1d       	adc	r31, r13
    168e:	e6 0f       	add	r30, r22
    1690:	f7 1f       	adc	r31, r23
    1692:	83 a9       	ldd	r24, Z+51	; 0x33
    1694:	86 95       	lsr	r24
    1696:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	c1 f5       	brne	.+112    	; 0x170c <Timebase_LPDownCounter_Update+0xaa>
  Timebase->LPDownCounter[window].Value = value;
}


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
  return Timebase->LPDownCounter[window].EndValue;
    169c:	e4 a8       	ldd	r14, Z+52	; 0x34
    169e:	f5 a8       	ldd	r15, Z+53	; 0x35
    16a0:	06 a9       	ldd	r16, Z+54	; 0x36
    16a2:	17 a9       	ldd	r17, Z+55	; 0x37


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    16a4:	fb 01       	movw	r30, r22
    16a6:	21 8d       	ldd	r18, Z+25	; 0x19
    16a8:	32 8d       	ldd	r19, Z+26	; 0x1a
    16aa:	43 8d       	ldd	r20, Z+27	; 0x1b
    16ac:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    16ae:	81 8d       	ldd	r24, Z+25	; 0x19
    16b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    16b2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    16b4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    16b6:	28 17       	cp	r18, r24
    16b8:	39 07       	cpc	r19, r25
    16ba:	4a 07       	cpc	r20, r26
    16bc:	5b 07       	cpc	r21, r27
    16be:	91 f7       	brne	.-28     	; 0x16a4 <Timebase_LPDownCounter_Update+0x42>
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    16c0:	d8 01       	movw	r26, r16
    16c2:	c7 01       	movw	r24, r14
    16c4:	82 1b       	sub	r24, r18
    16c6:	93 0b       	sbc	r25, r19
    16c8:	a4 0b       	sbc	r26, r20
    16ca:	b5 0b       	sbc	r27, r21
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    16cc:	e6 01       	movw	r28, r12
    16ce:	f4 e0       	ldi	r31, 0x04	; 4
    16d0:	cc 0f       	add	r28, r28
    16d2:	dd 1f       	adc	r29, r29
    16d4:	fa 95       	dec	r31
    16d6:	e1 f7       	brne	.-8      	; 0x16d0 <Timebase_LPDownCounter_Update+0x6e>
    16d8:	cc 0d       	add	r28, r12
    16da:	dd 1d       	adc	r29, r13
    16dc:	c6 0f       	add	r28, r22
    16de:	d7 1f       	adc	r29, r23
    16e0:	88 af       	std	Y+56, r24	; 0x38
    16e2:	99 af       	std	Y+57, r25	; 0x39
    16e4:	aa af       	std	Y+58, r26	; 0x3a
    16e6:	bb af       	std	Y+59, r27	; 0x3b


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
    16e8:	18 16       	cp	r1, r24
    16ea:	19 06       	cpc	r1, r25
    16ec:	1a 06       	cpc	r1, r26
    16ee:	1b 06       	cpc	r1, r27
    16f0:	a4 f1       	brlt	.+104    	; 0x175a <Timebase_LPDownCounter_Update+0xf8>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    16f2:	1c aa       	std	Y+52, r1	; 0x34
    16f4:	1d aa       	std	Y+53, r1	; 0x35
    16f6:	1e aa       	std	Y+54, r1	; 0x36
    16f8:	1f aa       	std	Y+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    16fa:	18 ae       	std	Y+56, r1	; 0x38
    16fc:	19 ae       	std	Y+57, r1	; 0x39
    16fe:	1a ae       	std	Y+58, r1	; 0x3a
    1700:	1b ae       	std	Y+59, r1	; 0x3b
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1702:	8b a9       	ldd	r24, Y+51	; 0x33
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1704:	80 7e       	andi	r24, 0xE0	; 224
    1706:	88 60       	ori	r24, 0x08	; 8
    1708:	8b ab       	std	Y+51, r24	; 0x33
    170a:	27 c0       	rjmp	.+78     	; 0x175a <Timebase_LPDownCounter_Update+0xf8>
	  int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
      Timebase_LPDownCounter_Reset(window);
	  Timebase_LPDownCounter_Set_ReloadValue(window, temp);
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	29 f5       	brne	.+74     	; 0x175a <Timebase_LPDownCounter_Update+0xf8>
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    1710:	e0 ac       	ldd	r14, Z+56	; 0x38
    1712:	f1 ac       	ldd	r15, Z+57	; 0x39
    1714:	02 ad       	ldd	r16, Z+58	; 0x3a
    1716:	13 ad       	ldd	r17, Z+59	; 0x3b


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    1718:	fb 01       	movw	r30, r22
    171a:	21 8d       	ldd	r18, Z+25	; 0x19
    171c:	32 8d       	ldd	r19, Z+26	; 0x1a
    171e:	43 8d       	ldd	r20, Z+27	; 0x1b
    1720:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    1722:	81 8d       	ldd	r24, Z+25	; 0x19
    1724:	92 8d       	ldd	r25, Z+26	; 0x1a
    1726:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1728:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    172a:	28 17       	cp	r18, r24
    172c:	39 07       	cpc	r19, r25
    172e:	4a 07       	cpc	r20, r26
    1730:	5b 07       	cpc	r21, r27
    1732:	91 f7       	brne	.-28     	; 0x1718 <Timebase_LPDownCounter_Update+0xb6>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1734:	c6 01       	movw	r24, r12
    1736:	e4 e0       	ldi	r30, 0x04	; 4
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	ea 95       	dec	r30
    173e:	e1 f7       	brne	.-8      	; 0x1738 <Timebase_LPDownCounter_Update+0xd6>
    1740:	8c 0d       	add	r24, r12
    1742:	9d 1d       	adc	r25, r13
    1744:	68 0f       	add	r22, r24
    1746:	79 1f       	adc	r23, r25
    1748:	2e 0d       	add	r18, r14
    174a:	3f 1d       	adc	r19, r15
    174c:	40 1f       	adc	r20, r16
    174e:	51 1f       	adc	r21, r17
    1750:	fb 01       	movw	r30, r22
    1752:	24 ab       	std	Z+52, r18	; 0x34
    1754:	35 ab       	std	Z+53, r19	; 0x35
    1756:	46 ab       	std	Z+54, r20	; 0x36
    1758:	57 ab       	std	Z+55, r21	; 0x37
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPDownCounter_Get_Value(window) + Timebase_LPTimer_Get_Seconds());
  }
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	08 95       	ret

0000176c <Timebase_LPDownCounter_Expired>:


uint8_t Timebase_LPDownCounter_Expired(uint8_t window){
    176c:	40 e0       	ldi	r20, 0x00	; 0
    176e:	e0 91 2e 01 	lds	r30, 0x012E
    1772:	f0 91 2f 01 	lds	r31, 0x012F
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	9c 01       	movw	r18, r24
    177a:	b4 e0       	ldi	r27, 0x04	; 4
    177c:	22 0f       	add	r18, r18
    177e:	33 1f       	adc	r19, r19
    1780:	ba 95       	dec	r27
    1782:	e1 f7       	brne	.-8      	; 0x177c <Timebase_LPDownCounter_Expired+0x10>
    1784:	28 0f       	add	r18, r24
    1786:	39 1f       	adc	r19, r25
    1788:	e2 0f       	add	r30, r18
    178a:	f3 1f       	adc	r31, r19
    178c:	83 a9       	ldd	r24, Z+51	; 0x33
    178e:	86 95       	lsr	r24
    1790:	8f 70       	andi	r24, 0x0F	; 15
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	09 f4       	brne	.+2      	; 0x1798 <Timebase_LPDownCounter_Expired+0x2c>
    1796:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1798:	84 2f       	mov	r24, r20
    179a:	08 95       	ret

0000179c <Timebase_LPDownCounter_Expired_Event>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    179c:	e0 91 2e 01 	lds	r30, 0x012E
    17a0:	f0 91 2f 01 	lds	r31, 0x012F
    17a4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_LPDownCounter_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    17a6:	9c 01       	movw	r18, r24
    17a8:	44 e0       	ldi	r20, 0x04	; 4
    17aa:	22 0f       	add	r18, r18
    17ac:	33 1f       	adc	r19, r19
    17ae:	4a 95       	dec	r20
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <Timebase_LPDownCounter_Expired_Event+0xe>
    17b2:	28 0f       	add	r18, r24
    17b4:	39 1f       	adc	r19, r25
    17b6:	e2 0f       	add	r30, r18
    17b8:	f3 1f       	adc	r31, r19
    17ba:	83 a9       	ldd	r24, Z+51	; 0x33
    17bc:	86 95       	lsr	r24
    17be:	8f 70       	andi	r24, 0x0F	; 15
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	11 f0       	breq	.+4      	; 0x17c8 <Timebase_LPDownCounter_Expired_Event+0x2c>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	08 95       	ret
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    17c8:	14 aa       	std	Z+52, r1	; 0x34
    17ca:	15 aa       	std	Z+53, r1	; 0x35
    17cc:	16 aa       	std	Z+54, r1	; 0x36
    17ce:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    17d0:	10 ae       	std	Z+56, r1	; 0x38
    17d2:	11 ae       	std	Z+57, r1	; 0x39
    17d4:	12 ae       	std	Z+58, r1	; 0x3a
    17d6:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    17d8:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17da:	80 7e       	andi	r24, 0xE0	; 224
    17dc:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    17de:	e0 5c       	subi	r30, 0xC0	; 192
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	10 82       	st	Z, r1
    17e4:	11 82       	std	Z+1, r1	; 0x01
    17e6:	12 82       	std	Z+2, r1	; 0x02
    17e8:	13 82       	std	Z+3, r1	; 0x03
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17ec:	08 95       	ret

000017ee <Timebase_LPDownCounter_Oneshot_Expired_Event>:

uint8_t Timebase_LPDownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_LPDownCounter_Expired_Event(window);
    17ee:	0e 94 ce 0b 	call	0x179c	; 0x179c <Timebase_LPDownCounter_Expired_Event>
}
    17f2:	08 95       	ret

000017f4 <Timebase_LPDownCounter_Continuous_Expired_Event>:


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
    17f4:	1f 93       	push	r17
    17f6:	18 2f       	mov	r17, r24

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    17f8:	a0 91 2e 01 	lds	r26, 0x012E
    17fc:	b0 91 2f 01 	lds	r27, 0x012F
    1800:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_LPDownCounter_Expired_Event(window);
}


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1802:	9c 01       	movw	r18, r24
    1804:	54 e0       	ldi	r21, 0x04	; 4
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	5a 95       	dec	r21
    180c:	e1 f7       	brne	.-8      	; 0x1806 <Timebase_LPDownCounter_Continuous_Expired_Event+0x12>
    180e:	28 0f       	add	r18, r24
    1810:	39 1f       	adc	r19, r25
    1812:	a2 0f       	add	r26, r18
    1814:	b3 1f       	adc	r27, r19
    1816:	d3 96       	adiw	r26, 0x33	; 51
    1818:	8c 91       	ld	r24, X
    181a:	d3 97       	sbiw	r26, 0x33	; 51
    181c:	86 95       	lsr	r24
    181e:	8f 70       	andi	r24, 0x0F	; 15
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	11 f0       	breq	.+4      	; 0x1828 <Timebase_LPDownCounter_Continuous_Expired_Event+0x34>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	21 c0       	rjmp	.+66     	; 0x186a <Timebase_LPDownCounter_Continuous_Expired_Event+0x76>
void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
    1828:	fd 01       	movw	r30, r26
    182a:	e0 5c       	subi	r30, 0xC0	; 192
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	40 81       	ld	r20, Z
    1830:	51 81       	ldd	r21, Z+1	; 0x01
    1832:	62 81       	ldd	r22, Z+2	; 0x02
    1834:	73 81       	ldd	r23, Z+3	; 0x03
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1836:	d4 96       	adiw	r26, 0x34	; 52
    1838:	1d 92       	st	X+, r1
    183a:	1d 92       	st	X+, r1
    183c:	1d 92       	st	X+, r1
    183e:	1c 92       	st	X, r1
    1840:	d7 97       	sbiw	r26, 0x37	; 55
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1842:	d8 96       	adiw	r26, 0x38	; 56
    1844:	1d 92       	st	X+, r1
    1846:	1d 92       	st	X+, r1
    1848:	1d 92       	st	X+, r1
    184a:	1c 92       	st	X, r1
    184c:	db 97       	sbiw	r26, 0x3b	; 59
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    184e:	d3 96       	adiw	r26, 0x33	; 51
    1850:	8c 91       	ld	r24, X
    1852:	d3 97       	sbiw	r26, 0x33	; 51
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1854:	80 7e       	andi	r24, 0xE0	; 224
    1856:	d3 96       	adiw	r26, 0x33	; 51
    1858:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    185a:	10 82       	st	Z, r1
    185c:	11 82       	std	Z+1, r1	; 0x01
    185e:	12 82       	std	Z+2, r1	; 0x02
    1860:	13 82       	std	Z+3, r1	; 0x03

uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
    Timebase_LPDownCounter_Clear_All_Flags( window );
	Timebase_LPDownCounter_Set_Securely(window, temp);
    1862:	81 2f       	mov	r24, r17
    1864:	0e 94 9c 0a 	call	0x1538	; 0x1538 <Timebase_LPDownCounter_Set_Securely>
    1868:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    186a:	1f 91       	pop	r17
    186c:	08 95       	ret

0000186e <Timebase_LPDownCounter_Set_Period_Value_Securely>:


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
    1872:	c0 91 2e 01 	lds	r28, 0x012E
    1876:	d0 91 2f 01 	lds	r29, 0x012F
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    187e:	f9 01       	movw	r30, r18
    1880:	a4 e0       	ldi	r26, 0x04	; 4
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	aa 95       	dec	r26
    1888:	e1 f7       	brne	.-8      	; 0x1882 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x14>
    188a:	e2 0f       	add	r30, r18
    188c:	f3 1f       	adc	r31, r19
    188e:	ec 0f       	add	r30, r28
    1890:	fd 1f       	adc	r31, r29
    1892:	83 a9       	ldd	r24, Z+51	; 0x33
    1894:	80 fd       	sbrc	r24, 0
    1896:	20 c0       	rjmp	.+64     	; 0x18d8 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x6a>
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    1898:	80 ad       	ldd	r24, Z+56	; 0x38
    189a:	91 ad       	ldd	r25, Z+57	; 0x39
    189c:	a2 ad       	ldd	r26, Z+58	; 0x3a
    189e:	b3 ad       	ldd	r27, Z+59	; 0x3b
    18a0:	84 1b       	sub	r24, r20
    18a2:	95 0b       	sbc	r25, r21
    18a4:	a6 0b       	sbc	r26, r22
    18a6:	b7 0b       	sbc	r27, r23
  return Timebase->LPDownCounter[window].PeriodValue;
}


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    18a8:	b7 ff       	sbrs	r27, 7
    18aa:	05 c0       	rjmp	.+10     	; 0x18b6 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x48>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    18ac:	14 ae       	std	Z+60, r1	; 0x3c
    18ae:	15 ae       	std	Z+61, r1	; 0x3d
    18b0:	16 ae       	std	Z+62, r1	; 0x3e
    18b2:	17 ae       	std	Z+63, r1	; 0x3f
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <Timebase_LPDownCounter_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    18b6:	84 af       	std	Z+60, r24	; 0x3c
    18b8:	95 af       	std	Z+61, r25	; 0x3d
    18ba:	a6 af       	std	Z+62, r26	; 0x3e
    18bc:	b7 af       	std	Z+63, r27	; 0x3f
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    18be:	f9 01       	movw	r30, r18
    18c0:	64 e0       	ldi	r22, 0x04	; 4
    18c2:	ee 0f       	add	r30, r30
    18c4:	ff 1f       	adc	r31, r31
    18c6:	6a 95       	dec	r22
    18c8:	e1 f7       	brne	.-8      	; 0x18c2 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x54>
    18ca:	e2 0f       	add	r30, r18
    18cc:	f3 1f       	adc	r31, r19
    18ce:	ec 0f       	add	r30, r28
    18d0:	fd 1f       	adc	r31, r29
    18d2:	83 a9       	ldd	r24, Z+51	; 0x33
    18d4:	81 60       	ori	r24, 0x01	; 1
    18d6:	83 ab       	std	Z+51, r24	; 0x33
void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    Timebase_LPDownCounter_Set_Period_Flag(window);
  }
}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	08 95       	ret

000018de <Timebase_LPDownCounter_Get_Remaining_Period_Value>:
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    18de:	e0 91 2e 01 	lds	r30, 0x012E
    18e2:	f0 91 2f 01 	lds	r31, 0x012F
    18e6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    18e8:	9c 01       	movw	r18, r24
    18ea:	b4 e0       	ldi	r27, 0x04	; 4
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	ba 95       	dec	r27
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <Timebase_LPDownCounter_Get_Remaining_Period_Value+0xe>
    18f4:	28 0f       	add	r18, r24
    18f6:	39 1f       	adc	r19, r25
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	20 ad       	ldd	r18, Z+56	; 0x38
    18fe:	31 ad       	ldd	r19, Z+57	; 0x39
    1900:	42 ad       	ldd	r20, Z+58	; 0x3a
    1902:	53 ad       	ldd	r21, Z+59	; 0x3b
    1904:	84 ad       	ldd	r24, Z+60	; 0x3c
    1906:	95 ad       	ldd	r25, Z+61	; 0x3d
    1908:	a6 ad       	ldd	r26, Z+62	; 0x3e
    190a:	b7 ad       	ldd	r27, Z+63	; 0x3f
    190c:	28 1b       	sub	r18, r24
    190e:	39 0b       	sbc	r19, r25
    1910:	4a 0b       	sbc	r20, r26
    1912:	5b 0b       	sbc	r21, r27
    1914:	57 ff       	sbrs	r21, 7
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <Timebase_LPDownCounter_Get_Remaining_Period_Value+0x42>
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1920:	b9 01       	movw	r22, r18
    1922:	ca 01       	movw	r24, r20
    1924:	08 95       	ret

00001926 <Timebase_LPDownCounter_Period_Value_Expired>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    192a:	c0 91 2e 01 	lds	r28, 0x012E
    192e:	d0 91 2f 01 	lds	r29, 0x012F
    1932:	68 2f       	mov	r22, r24
    1934:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    1936:	fb 01       	movw	r30, r22
    1938:	44 e0       	ldi	r20, 0x04	; 4
    193a:	ee 0f       	add	r30, r30
    193c:	ff 1f       	adc	r31, r31
    193e:	4a 95       	dec	r20
    1940:	e1 f7       	brne	.-8      	; 0x193a <Timebase_LPDownCounter_Period_Value_Expired+0x14>
    1942:	e6 0f       	add	r30, r22
    1944:	f7 1f       	adc	r31, r23
    1946:	ec 0f       	add	r30, r28
    1948:	fd 1f       	adc	r31, r29
    194a:	20 ad       	ldd	r18, Z+56	; 0x38
    194c:	31 ad       	ldd	r19, Z+57	; 0x39
    194e:	42 ad       	ldd	r20, Z+58	; 0x3a
    1950:	53 ad       	ldd	r21, Z+59	; 0x3b
    1952:	84 ad       	ldd	r24, Z+60	; 0x3c
    1954:	95 ad       	ldd	r25, Z+61	; 0x3d
    1956:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1958:	b7 ad       	ldd	r27, Z+63	; 0x3f
    195a:	28 1b       	sub	r18, r24
    195c:	39 0b       	sbc	r19, r25
    195e:	4a 0b       	sbc	r20, r26
    1960:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1962:	57 fd       	sbrc	r21, 7
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
  return temp;
}


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_LPDownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1966:	21 15       	cp	r18, r1
    1968:	31 05       	cpc	r19, r1
    196a:	41 05       	cpc	r20, r1
    196c:	51 05       	cpc	r21, r1
    196e:	11 f0       	breq	.+4      	; 0x1974 <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	10 c0       	rjmp	.+32     	; 0x1994 <Timebase_LPDownCounter_Period_Value_Expired+0x6e>
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	cb 01       	movw	r24, r22
    1978:	34 e0       	ldi	r19, 0x04	; 4
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	3a 95       	dec	r19
    1980:	e1 f7       	brne	.-8      	; 0x197a <Timebase_LPDownCounter_Period_Value_Expired+0x54>
    1982:	86 0f       	add	r24, r22
    1984:	97 1f       	adc	r25, r23
    1986:	c8 0f       	add	r28, r24
    1988:	d9 1f       	adc	r29, r25
    198a:	8b a9       	ldd	r24, Y+51	; 0x33
    198c:	80 ff       	sbrs	r24, 0
    198e:	21 e0       	ldi	r18, 0x01	; 1
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1994:	82 2f       	mov	r24, r18
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <Timebase_LPDownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired_Event(uint8_t window){
    199c:	1f 93       	push	r17
    199e:	18 2f       	mov	r17, r24
  if(Timebase_LPDownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    19a0:	0e 94 93 0c 	call	0x1926	; 0x1926 <Timebase_LPDownCounter_Period_Value_Expired>
    19a4:	81 30       	cpi	r24, 0x01	; 1
    19a6:	11 f0       	breq	.+4      	; 0x19ac <Timebase_LPDownCounter_Period_Value_Expired_Event+0x10>
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x38>
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    19ac:	e0 91 2e 01 	lds	r30, 0x012E
    19b0:	f0 91 2f 01 	lds	r31, 0x012F
    19b4:	21 2f       	mov	r18, r17
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	c9 01       	movw	r24, r18
    19ba:	54 e0       	ldi	r21, 0x04	; 4
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	5a 95       	dec	r21
    19c2:	e1 f7       	brne	.-8      	; 0x19bc <Timebase_LPDownCounter_Period_Value_Expired_Event+0x20>
    19c4:	82 0f       	add	r24, r18
    19c6:	93 1f       	adc	r25, r19
    19c8:	e8 0f       	add	r30, r24
    19ca:	f9 1f       	adc	r31, r25
    19cc:	83 a9       	ldd	r24, Z+51	; 0x33
    19ce:	8e 7f       	andi	r24, 0xFE	; 254
    19d0:	83 ab       	std	Z+51, r24	; 0x33
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19d4:	1f 91       	pop	r17
    19d6:	08 95       	ret

000019d8 <Timebase_LPDownCounter_Update_All>:


void Timebase_LPDownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Update(i);
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0e 94 31 0b 	call	0x1662	; 0x1662 <Timebase_LPDownCounter_Update>
  }
}
    19de:	08 95       	ret

000019e0 <Timebase_LPDownCounter_Reset_All>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    19e0:	e0 91 2e 01 	lds	r30, 0x012E
    19e4:	f0 91 2f 01 	lds	r31, 0x012F
    19e8:	14 aa       	std	Z+52, r1	; 0x34
    19ea:	15 aa       	std	Z+53, r1	; 0x35
    19ec:	16 aa       	std	Z+54, r1	; 0x36
    19ee:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    19f0:	10 ae       	std	Z+56, r1	; 0x38
    19f2:	11 ae       	std	Z+57, r1	; 0x39
    19f4:	12 ae       	std	Z+58, r1	; 0x3a
    19f6:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    19f8:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    19fa:	80 7e       	andi	r24, 0xE0	; 224
    19fc:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    19fe:	e0 5c       	subi	r30, 0xC0	; 192
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	10 82       	st	Z, r1
    1a04:	11 82       	std	Z+1, r1	; 0x01
    1a06:	12 82       	std	Z+2, r1	; 0x02
    1a08:	13 82       	std	Z+3, r1	; 0x03

void Timebase_LPDownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Reset(i);
  }
}
    1a0a:	08 95       	ret

00001a0c <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    1a0c:	e0 91 2e 01 	lds	r30, 0x012E
    1a10:	f0 91 2f 01 	lds	r31, 0x012F
    1a14:	85 8d       	ldd	r24, Z+29	; 0x1d
}
    1a16:	08 95       	ret

00001a18 <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a18:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    1a1c:	08 95       	ret

00001a1e <Timebase_LP_Reset>:


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    1a1e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <Timebase_LPDownCounter_Reset_All>
  #endif
}
    1a22:	08 95       	ret

00001a24 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1a2a:	0e 94 c3 00 	call	0x186	; 0x186 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    1a2e:	c8 01       	movw	r24, r16
    1a30:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a34:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <Timebase_DownCounter_SS_Reset_All>
  Timebase_Timer_Enable(UpdateRateHz);
  Timebase_Reset();
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 ef 01 	call	0x3de	; 0x3de <Timebase_LPTimer_Enable>
}


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    1a40:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <Timebase_LPDownCounter_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	08 95       	ret

00001a4a <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1a4a:	e0 91 2e 01 	lds	r30, 0x012E
    1a4e:	f0 91 2f 01 	lds	r31, 0x012F
    1a52:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a54:	83 ff       	sbrs	r24, 3
    1a56:	0b c0       	rjmp	.+22     	; 0x1a6e <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1a58:	0e 94 91 02 	call	0x522	; 0x522 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1a5c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1a60:	e0 91 2e 01 	lds	r30, 0x012E
    1a64:	f0 91 2f 01 	lds	r31, 0x012F
    1a68:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a6a:	87 7f       	andi	r24, 0xF7	; 247
    1a6c:	85 8f       	std	Z+29, r24	; 0x1d
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    1a6e:	e0 91 2e 01 	lds	r30, 0x012E
    1a72:	f0 91 2f 01 	lds	r31, 0x012F
    1a76:	16 8a       	std	Z+22, r1	; 0x16
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    1a78:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a7a:	85 ff       	sbrs	r24, 5
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <Timebase_Main_Loop_Executables+0x46>
    Timebase_LPDownCounter_Update_All();
    1a7e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <Timebase_LPDownCounter_Update_All>
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
    1a82:	e0 91 2e 01 	lds	r30, 0x012E
    1a86:	f0 91 2f 01 	lds	r31, 0x012F
    1a8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a8c:	8f 7d       	andi	r24, 0xDF	; 223
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    1a90:	08 95       	ret

00001a92 <Timebase_ISR_Executables>:
  #endif
}


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    1a92:	e0 91 2e 01 	lds	r30, 0x012E
    1a96:	f0 91 2f 01 	lds	r31, 0x012F
    1a9a:	80 89       	ldd	r24, Z+16	; 0x10
    1a9c:	91 89       	ldd	r25, Z+17	; 0x11
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	91 8b       	std	Z+17, r25	; 0x11
    1aa2:	80 8b       	std	Z+16, r24	; 0x10
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1aa4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aa6:	88 60       	ori	r24, 0x08	; 8
    1aa8:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    1aaa:	20 89       	ldd	r18, Z+16	; 0x10
    1aac:	31 89       	ldd	r19, Z+17	; 0x11
    1aae:	80 81       	ld	r24, Z
    1ab0:	91 81       	ldd	r25, Z+1	; 0x01
    1ab2:	28 17       	cp	r18, r24
    1ab4:	39 07       	cpc	r19, r25
    1ab6:	68 f0       	brcs	.+26     	; 0x1ad2 <Timebase_ISR_Executables+0x40>
    Timebase->Time.SubSecondsShadow = 0;
    1ab8:	11 8a       	std	Z+17, r1	; 0x11
    1aba:	10 8a       	std	Z+16, r1	; 0x10
    Timebase->Time.SecondsShadow++;
    1abc:	82 89       	ldd	r24, Z+18	; 0x12
    1abe:	93 89       	ldd	r25, Z+19	; 0x13
    1ac0:	a4 89       	ldd	r26, Z+20	; 0x14
    1ac2:	b5 89       	ldd	r27, Z+21	; 0x15
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	a1 1d       	adc	r26, r1
    1ac8:	b1 1d       	adc	r27, r1
    1aca:	82 8b       	std	Z+18, r24	; 0x12
    1acc:	93 8b       	std	Z+19, r25	; 0x13
    1ace:	a4 8b       	std	Z+20, r26	; 0x14
    1ad0:	b5 8b       	std	Z+21, r27	; 0x15
    1ad2:	08 95       	ret

00001ad4 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    1ad4:	1f 92       	push	r1
    1ad6:	0f 92       	push	r0
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	0f 92       	push	r0
    1adc:	11 24       	eor	r1, r1
    1ade:	2f 93       	push	r18
    1ae0:	3f 93       	push	r19
    1ae2:	4f 93       	push	r20
    1ae4:	5f 93       	push	r21
    1ae6:	6f 93       	push	r22
    1ae8:	7f 93       	push	r23
    1aea:	8f 93       	push	r24
    1aec:	9f 93       	push	r25
    1aee:	af 93       	push	r26
    1af0:	bf 93       	push	r27
    1af2:	ef 93       	push	r30
    1af4:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1af6:	e0 91 2e 01 	lds	r30, 0x012E
    1afa:	f0 91 2f 01 	lds	r31, 0x012F
    1afe:	84 81       	ldd	r24, Z+4	; 0x04
    1b00:	95 81       	ldd	r25, Z+5	; 0x05
    1b02:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1b04:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <Timebase_ISR_Executables>
}
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <Timebase_LP_ISR_Executables>:
}


void Timebase_LP_ISR_Executables(void){
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds++;
    1b2a:	e0 91 2e 01 	lds	r30, 0x012E
    1b2e:	f0 91 2f 01 	lds	r31, 0x012F
    1b32:	87 89       	ldd	r24, Z+23	; 0x17
    1b34:	90 8d       	ldd	r25, Z+24	; 0x18
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	90 8f       	std	Z+24, r25	; 0x18
    1b3a:	87 8b       	std	Z+23, r24	; 0x17
  if(Timebase->Time.LPTimerSubSeconds >= Timebase->Config.LPUpdateRate){
    1b3c:	27 89       	ldd	r18, Z+23	; 0x17
    1b3e:	30 8d       	ldd	r19, Z+24	; 0x18
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	28 17       	cp	r18, r24
    1b46:	39 07       	cpc	r19, r25
    1b48:	68 f0       	brcs	.+26     	; 0x1b64 <Timebase_LP_ISR_Executables+0x3a>
    Timebase->Time.LPTimerSubSeconds = 0;
    1b4a:	10 8e       	std	Z+24, r1	; 0x18
    1b4c:	17 8a       	std	Z+23, r1	; 0x17
    Timebase->Time.LPTimerSeconds++;
    1b4e:	81 8d       	ldd	r24, Z+25	; 0x19
    1b50:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b52:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1b54:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	a1 1d       	adc	r26, r1
    1b5a:	b1 1d       	adc	r27, r1
    1b5c:	81 8f       	std	Z+25, r24	; 0x19
    1b5e:	92 8f       	std	Z+26, r25	; 0x1a
    1b60:	a3 8f       	std	Z+27, r26	; 0x1b
    1b62:	b4 8f       	std	Z+28, r27	; 0x1c
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
    1b64:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b66:	80 62       	ori	r24, 0x20	; 32
    1b68:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
}
    1b6a:	08 95       	ret

00001b6c <__vector_6>:

/**********************************LPTimer ISR Start*********************************/

#ifdef TIMEBASE_LP_TIMER_ENABLE

ISR(WDT_vect){
    1b6c:	1f 92       	push	r1
    1b6e:	0f 92       	push	r0
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	0f 92       	push	r0
    1b74:	11 24       	eor	r1, r1
    1b76:	2f 93       	push	r18
    1b78:	3f 93       	push	r19
    1b7a:	4f 93       	push	r20
    1b7c:	5f 93       	push	r21
    1b7e:	6f 93       	push	r22
    1b80:	7f 93       	push	r23
    1b82:	8f 93       	push	r24
    1b84:	9f 93       	push	r25
    1b86:	af 93       	push	r26
    1b88:	bf 93       	push	r27
    1b8a:	ef 93       	push	r30
    1b8c:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
    1b8e:	e0 e6       	ldi	r30, 0x60	; 96
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	80 64       	ori	r24, 0x40	; 64
    1b96:	80 83       	st	Z, r24
  Timebase_LP_ISR_Executables();
    1b98:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <Timebase_LP_ISR_Executables>
}
    1b9c:	ff 91       	pop	r31
    1b9e:	ef 91       	pop	r30
    1ba0:	bf 91       	pop	r27
    1ba2:	af 91       	pop	r26
    1ba4:	9f 91       	pop	r25
    1ba6:	8f 91       	pop	r24
    1ba8:	7f 91       	pop	r23
    1baa:	6f 91       	pop	r22
    1bac:	5f 91       	pop	r21
    1bae:	4f 91       	pop	r20
    1bb0:	3f 91       	pop	r19
    1bb2:	2f 91       	pop	r18
    1bb4:	0f 90       	pop	r0
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	0f 90       	pop	r0
    1bba:	1f 90       	pop	r1
    1bbc:	18 95       	reti

00001bbe <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    1bbe:	10 92 24 01 	sts	0x0124, r1
    1bc2:	e5 e2       	ldi	r30, 0x25	; 37
    1bc4:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    1bc6:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	ed 32       	cpi	r30, 0x2D	; 45
    1bcc:	f8 07       	cpc	r31, r24
    1bce:	d9 f7       	brne	.-10     	; 0x1bc6 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    1bd0:	10 82       	st	Z, r1
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
  }
  #endif
  
}
    1bd2:	08 95       	ret

00001bd4 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    1bd4:	08 95       	ret

00001bd6 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    1bd6:	08 95       	ret

00001bd8 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    1bd8:	9b 01       	movw	r18, r22
    1bda:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1bdc:	60 e6       	ldi	r22, 0x60	; 96
    1bde:	73 ee       	ldi	r23, 0xE3	; 227
    1be0:	86 e1       	ldi	r24, 0x16	; 22
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
    1be8:	21 50       	subi	r18, 0x01	; 1
    1bea:	30 40       	sbci	r19, 0x00	; 0
    1bec:	40 40       	sbci	r20, 0x00	; 0
    1bee:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    1bf0:	e0 ec       	ldi	r30, 0xC0	; 192
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    1bfa:	bb 27       	eor	r27, r27
    1bfc:	a5 2f       	mov	r26, r21
    1bfe:	94 2f       	mov	r25, r20
    1c00:	83 2f       	mov	r24, r19
    1c02:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    1c06:	20 93 c4 00 	sts	0x00C4, r18
}
    1c0a:	08 95       	ret

00001c0c <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    1c0c:	e1 ec       	ldi	r30, 0xC1	; 193
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	88 60       	ori	r24, 0x08	; 8
    1c14:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1c16:	86 e0       	ldi	r24, 0x06	; 6
    1c18:	80 93 c2 00 	sts	0x00C2, r24
}
    1c1c:	08 95       	ret

00001c1e <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    1c1e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 61       	ori	r24, 0x10	; 16
    1c26:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1c28:	86 e0       	ldi	r24, 0x06	; 6
    1c2a:	80 93 c2 00 	sts	0x00C2, r24
}
    1c2e:	08 95       	ret

00001c30 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    1c30:	e1 ec       	ldi	r30, 0xC1	; 193
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 68       	ori	r24, 0x80	; 128
    1c38:	80 83       	st	Z, r24
  sei();
    1c3a:	78 94       	sei
}
    1c3c:	08 95       	ret

00001c3e <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    1c3e:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1c40:	80 91 c0 00 	lds	r24, 0x00C0
    1c44:	85 ff       	sbrs	r24, 5
    1c46:	fc cf       	rjmp	.-8      	; 0x1c40 <UART_Transmit_Byte+0x2>
  UDR0=val;
    1c48:	90 93 c6 00 	sts	0x00C6, r25
}
    1c4c:	08 95       	ret

00001c4e <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	0f 92       	push	r0
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    1c58:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    1c5a:	80 91 c0 00 	lds	r24, 0x00C0
    1c5e:	84 ff       	sbrs	r24, 4
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <UART_Receive_Byte+0x1e>
    val=UDR0;
    1c62:	80 91 c6 00 	lds	r24, 0x00C6
    1c66:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	08 c0       	rjmp	.+16     	; 0x1c7c <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    1c6c:	80 91 c0 00 	lds	r24, 0x00C0
    1c70:	83 ff       	sbrs	r24, 3
    1c72:	07 c0       	rjmp	.+14     	; 0x1c82 <UART_Receive_Byte+0x34>
    val=UDR0;
    1c74:	80 91 c6 00 	lds	r24, 0x00C6
    1c78:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    1c7a:	82 e0       	ldi	r24, 0x02	; 2
    1c7c:	80 93 24 01 	sts	0x0124, r24
    1c80:	05 c0       	rjmp	.+10     	; 0x1c8c <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    1c82:	80 91 c6 00 	lds	r24, 0x00C6
    1c86:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    1c88:	10 92 24 01 	sts	0x0124, r1
  }
  return val;
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <UART_Transmit_Byte_Hex>:
}
#endif



void UART_Transmit_Byte_Hex(uint32_t val){
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	ab 01       	movw	r20, r22
    1c9e:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    1ca0:	4f 3f       	cpi	r20, 0xFF	; 255
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	61 05       	cpc	r22, r1
    1ca6:	71 05       	cpc	r23, r1
    1ca8:	09 f0       	breq	.+2      	; 0x1cac <UART_Transmit_Byte_Hex+0x16>
    1caa:	28 f4       	brcc	.+10     	; 0x1cb6 <UART_Transmit_Byte_Hex+0x20>
    1cac:	e8 e0       	ldi	r30, 0x08	; 8
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	c2 e0       	ldi	r28, 0x02	; 2
    1cb2:	d0 e0       	ldi	r29, 0x00	; 0
    1cb4:	11 c0       	rjmp	.+34     	; 0x1cd8 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    1cb6:	40 30       	cpi	r20, 0x00	; 0
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	58 07       	cpc	r21, r24
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	68 07       	cpc	r22, r24
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	78 07       	cpc	r23, r24
    1cc4:	28 f0       	brcs	.+10     	; 0x1cd0 <UART_Transmit_Byte_Hex+0x3a>
    1cc6:	e0 e2       	ldi	r30, 0x20	; 32
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	c8 e0       	ldi	r28, 0x08	; 8
    1ccc:	d0 e0       	ldi	r29, 0x00	; 0
    1cce:	04 c0       	rjmp	.+8      	; 0x1cd8 <UART_Transmit_Byte_Hex+0x42>
    1cd0:	e0 e1       	ldi	r30, 0x10	; 16
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	c4 e0       	ldi	r28, 0x04	; 4
    1cd6:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1cd8:	80 91 c0 00 	lds	r24, 0x00C0
    1cdc:	85 ff       	sbrs	r24, 5
    1cde:	fc cf       	rjmp	.-8      	; 0x1cd8 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    1ce0:	80 e3       	ldi	r24, 0x30	; 48
    1ce2:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ce6:	80 91 c0 00 	lds	r24, 0x00C0
    1cea:	85 ff       	sbrs	r24, 5
    1cec:	fc cf       	rjmp	.-8      	; 0x1ce6 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    1cee:	88 e7       	ldi	r24, 0x78	; 120
    1cf0:	80 93 c6 00 	sts	0x00C6, r24
    1cf4:	10 e0       	ldi	r17, 0x00	; 0
    1cf6:	1f c0       	rjmp	.+62     	; 0x1d36 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    1cf8:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    1cfa:	db 01       	movw	r26, r22
    1cfc:	ca 01       	movw	r24, r20
    1cfe:	0e 2e       	mov	r0, r30
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <UART_Transmit_Byte_Hex+0x74>
    1d02:	b6 95       	lsr	r27
    1d04:	a7 95       	ror	r26
    1d06:	97 95       	ror	r25
    1d08:	87 95       	ror	r24
    1d0a:	0a 94       	dec	r0
    1d0c:	d2 f7       	brpl	.-12     	; 0x1d02 <UART_Transmit_Byte_Hex+0x6c>
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	8f 70       	andi	r24, 0x0F	; 15
    1d12:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    1d14:	8a 30       	cpi	r24, 0x0A	; 10
    1d16:	91 05       	cpc	r25, r1
    1d18:	20 f0       	brcs	.+8      	; 0x1d22 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    1d1a:	9c 01       	movw	r18, r24
    1d1c:	29 5c       	subi	r18, 0xC9	; 201
    1d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d20:	03 c0       	rjmp	.+6      	; 0x1d28 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    1d22:	9c 01       	movw	r18, r24
    1d24:	20 5d       	subi	r18, 0xD0	; 208
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d28:	80 91 c0 00 	lds	r24, 0x00C0
    1d2c:	85 ff       	sbrs	r24, 5
    1d2e:	fc cf       	rjmp	.-8      	; 0x1d28 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    1d30:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    1d34:	1f 5f       	subi	r17, 0xFF	; 255
    1d36:	81 2f       	mov	r24, r17
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	8c 17       	cp	r24, r28
    1d3c:	9d 07       	cpc	r25, r29
    1d3e:	e0 f2       	brcs	.-72     	; 0x1cf8 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    1d40:	df 91       	pop	r29
    1d42:	cf 91       	pop	r28
    1d44:	1f 91       	pop	r17
    1d46:	08 95       	ret

00001d48 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    1d48:	cf 92       	push	r12
    1d4a:	df 92       	push	r13
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	0f 93       	push	r16
    1d52:	1f 93       	push	r17
    1d54:	cf 93       	push	r28
    1d56:	df 93       	push	r29
    1d58:	ab 01       	movw	r20, r22
    1d5a:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    1d5c:	4f 3f       	cpi	r20, 0xFF	; 255
    1d5e:	51 05       	cpc	r21, r1
    1d60:	61 05       	cpc	r22, r1
    1d62:	71 05       	cpc	r23, r1
    1d64:	09 f0       	breq	.+2      	; 0x1d68 <UART_Transmit_Byte_Bin+0x20>
    1d66:	10 f4       	brcc	.+4      	; 0x1d6c <UART_Transmit_Byte_Bin+0x24>
    1d68:	97 e0       	ldi	r25, 0x07	; 7
    1d6a:	0b c0       	rjmp	.+22     	; 0x1d82 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    1d6c:	40 30       	cpi	r20, 0x00	; 0
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	58 07       	cpc	r21, r24
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	68 07       	cpc	r22, r24
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	78 07       	cpc	r23, r24
    1d7a:	10 f0       	brcs	.+4      	; 0x1d80 <UART_Transmit_Byte_Bin+0x38>
    1d7c:	9f e1       	ldi	r25, 0x1F	; 31
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <UART_Transmit_Byte_Bin+0x3a>
    1d80:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d82:	80 91 c0 00 	lds	r24, 0x00C0
    1d86:	85 ff       	sbrs	r24, 5
    1d88:	fc cf       	rjmp	.-8      	; 0x1d82 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    1d8a:	80 e3       	ldi	r24, 0x30	; 48
    1d8c:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d90:	80 91 c0 00 	lds	r24, 0x00C0
    1d94:	85 ff       	sbrs	r24, 5
    1d96:	fc cf       	rjmp	.-8      	; 0x1d90 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    1d98:	82 e6       	ldi	r24, 0x62	; 98
    1d9a:	80 93 c6 00 	sts	0x00C6, r24
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    1da2:	e9 2f       	mov	r30, r25
    1da4:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    1da6:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    1da8:	11 e3       	ldi	r17, 0x31	; 49
    1daa:	ef 01       	movw	r28, r30
    1dac:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1dae:	cf 01       	movw	r24, r30
    1db0:	82 1b       	sub	r24, r18
    1db2:	93 0b       	sbc	r25, r19
    1db4:	6a 01       	movw	r12, r20
    1db6:	7b 01       	movw	r14, r22
    1db8:	04 c0       	rjmp	.+8      	; 0x1dc2 <UART_Transmit_Byte_Bin+0x7a>
    1dba:	f6 94       	lsr	r15
    1dbc:	e7 94       	ror	r14
    1dbe:	d7 94       	ror	r13
    1dc0:	c7 94       	ror	r12
    1dc2:	8a 95       	dec	r24
    1dc4:	d2 f7       	brpl	.-12     	; 0x1dba <UART_Transmit_Byte_Bin+0x72>
    1dc6:	d7 01       	movw	r26, r14
    1dc8:	c6 01       	movw	r24, r12
    1dca:	81 70       	andi	r24, 0x01	; 1
    1dcc:	90 70       	andi	r25, 0x00	; 0
    1dce:	89 2b       	or	r24, r25
    1dd0:	39 f0       	breq	.+14     	; 0x1de0 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1dd2:	80 91 c0 00 	lds	r24, 0x00C0
    1dd6:	85 ff       	sbrs	r24, 5
    1dd8:	fc cf       	rjmp	.-8      	; 0x1dd2 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    1dda:	10 93 c6 00 	sts	0x00C6, r17
    1dde:	06 c0       	rjmp	.+12     	; 0x1dec <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1de0:	80 91 c0 00 	lds	r24, 0x00C0
    1de4:	85 ff       	sbrs	r24, 5
    1de6:	fc cf       	rjmp	.-8      	; 0x1de0 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    1de8:	00 93 c6 00 	sts	0x00C6, r16
    1dec:	2f 5f       	subi	r18, 0xFF	; 255
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    1df0:	2c 17       	cp	r18, r28
    1df2:	3d 07       	cpc	r19, r29
    1df4:	e1 f6       	brne	.-72     	; 0x1dae <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	1f 91       	pop	r17
    1dfc:	0f 91       	pop	r16
    1dfe:	ff 90       	pop	r15
    1e00:	ef 90       	pop	r14
    1e02:	df 90       	pop	r13
    1e04:	cf 90       	pop	r12
    1e06:	08 95       	ret

00001e08 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    1e08:	ac 01       	movw	r20, r24
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	07 c0       	rjmp	.+14     	; 0x1e1c <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e0e:	80 91 c0 00 	lds	r24, 0x00C0
    1e12:	85 ff       	sbrs	r24, 5
    1e14:	fc cf       	rjmp	.-8      	; 0x1e0e <UART_Transmit_Text+0x6>
  UDR0=val;
    1e16:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    1e1a:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    1e1c:	fa 01       	movw	r30, r20
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f1 1d       	adc	r31, r1
    1e22:	e0 81       	ld	r30, Z
    1e24:	ee 23       	and	r30, r30
    1e26:	99 f7       	brne	.-26     	; 0x1e0e <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    1e28:	08 95       	ret

00001e2a <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    1e2a:	8f e1       	ldi	r24, 0x1F	; 31
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
}
    1e32:	08 95       	ret

00001e34 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    1e34:	82 e2       	ldi	r24, 0x22	; 34
    1e36:	91 e0       	ldi	r25, 0x01	; 1
    1e38:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <UART_Transmit_Text>
}
    1e3c:	08 95       	ret

00001e3e <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    1e3e:	bf 92       	push	r11
    1e40:	cf 92       	push	r12
    1e42:	df 92       	push	r13
    1e44:	ef 92       	push	r14
    1e46:	ff 92       	push	r15
    1e48:	0f 93       	push	r16
    1e4a:	1f 93       	push	r17
    1e4c:	6b 01       	movw	r12, r22
    1e4e:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    1e50:	61 15       	cp	r22, r1
    1e52:	71 05       	cpc	r23, r1
    1e54:	81 05       	cpc	r24, r1
    1e56:	91 05       	cpc	r25, r1
    1e58:	31 f4       	brne	.+12     	; 0x1e66 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    1e5a:	10 92 25 01 	sts	0x0125, r1
    UART.InputNumberDigits=1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	80 93 2d 01 	sts	0x012D, r24
    1e64:	23 c0       	rjmp	.+70     	; 0x1eac <UART_Determine_Digit_Numbers+0x6e>
    1e66:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    1e68:	0b 2d       	mov	r16, r11
    1e6a:	10 e0       	ldi	r17, 0x00	; 0
    1e6c:	0c 5d       	subi	r16, 0xDC	; 220
    1e6e:	1e 4f       	sbci	r17, 0xFE	; 254
    1e70:	c7 01       	movw	r24, r14
    1e72:	b6 01       	movw	r22, r12
    1e74:	2a e0       	ldi	r18, 0x0A	; 10
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
    1e80:	f8 01       	movw	r30, r16
    1e82:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    1e84:	c7 01       	movw	r24, r14
    1e86:	b6 01       	movw	r22, r12
    1e88:	2a e0       	ldi	r18, 0x0A	; 10
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__udivmodsi4>
    1e94:	c9 01       	movw	r24, r18
    1e96:	da 01       	movw	r26, r20
    1e98:	6c 01       	movw	r12, r24
    1e9a:	7d 01       	movw	r14, r26
      i++;
    1e9c:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    1e9e:	c1 14       	cp	r12, r1
    1ea0:	d1 04       	cpc	r13, r1
    1ea2:	e1 04       	cpc	r14, r1
    1ea4:	f1 04       	cpc	r15, r1
    1ea6:	01 f7       	brne	.-64     	; 0x1e68 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    1ea8:	b0 92 2d 01 	sts	0x012D, r11
  }
}
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	bf 90       	pop	r11
    1eba:	08 95       	ret

00001ebc <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    1ebc:	e0 91 2d 01 	lds	r30, 0x012D
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    1ec2:	2e 2f       	mov	r18, r30
    1ec4:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    1ec6:	e2 2f       	mov	r30, r18
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	ec 5d       	subi	r30, 0xDC	; 220
    1ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ece:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ed0:	80 91 c0 00 	lds	r24, 0x00C0
    1ed4:	85 ff       	sbrs	r24, 5
    1ed6:	fc cf       	rjmp	.-8      	; 0x1ed0 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    1ed8:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    1eda:	90 93 c6 00 	sts	0x00C6, r25
    1ede:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    1ee0:	ee 23       	and	r30, r30
    1ee2:	79 f7       	brne	.-34     	; 0x1ec2 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    1ee4:	08 95       	ret

00001ee6 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    1ee6:	9b 01       	movw	r18, r22
    1ee8:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    1eea:	97 ff       	sbrs	r25, 7
    1eec:	0e c0       	rjmp	.+28     	; 0x1f0a <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1eee:	80 91 c0 00 	lds	r24, 0x00C0
    1ef2:	85 ff       	sbrs	r24, 5
    1ef4:	fc cf       	rjmp	.-8      	; 0x1eee <UART_Transmit_Number+0x8>
  UDR0=val;
    1ef6:	8d e2       	ldi	r24, 0x2D	; 45
    1ef8:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    1efc:	50 95       	com	r21
    1efe:	40 95       	com	r20
    1f00:	30 95       	com	r19
    1f02:	21 95       	neg	r18
    1f04:	3f 4f       	sbci	r19, 0xFF	; 255
    1f06:	4f 4f       	sbci	r20, 0xFF	; 255
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	b9 01       	movw	r22, r18
    1f0e:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    1f12:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <UART_Transmit_Number_Digits>
}
    1f16:	08 95       	ret

00001f18 <UART_Flush_Buffer>:
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
  #endif
}
    1f18:	08 95       	ret

00001f1a <UART_Init>:
}
#endif



void UART_Init(uint32_t baud){
    1f1a:	ef 92       	push	r14
    1f1c:	ff 92       	push	r15
    1f1e:	0f 93       	push	r16
    1f20:	1f 93       	push	r17
    1f22:	7b 01       	movw	r14, r22
    1f24:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    1f26:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    1f2a:	c8 01       	movw	r24, r16
    1f2c:	b7 01       	movw	r22, r14
    1f2e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    1f32:	e1 ec       	ldi	r30, 0xC1	; 193
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	88 60       	ori	r24, 0x08	; 8
    1f3a:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1f3c:	86 e0       	ldi	r24, 0x06	; 6
    1f3e:	80 93 c2 00 	sts	0x00C2, r24
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
}
    1f42:	1f 91       	pop	r17
    1f44:	0f 91       	pop	r16
    1f46:	ff 90       	pop	r15
    1f48:	ef 90       	pop	r14
    1f4a:	08 95       	ret

00001f4c <__mulsi3>:
    1f4c:	62 9f       	mul	r22, r18
    1f4e:	d0 01       	movw	r26, r0
    1f50:	73 9f       	mul	r23, r19
    1f52:	f0 01       	movw	r30, r0
    1f54:	82 9f       	mul	r24, r18
    1f56:	e0 0d       	add	r30, r0
    1f58:	f1 1d       	adc	r31, r1
    1f5a:	64 9f       	mul	r22, r20
    1f5c:	e0 0d       	add	r30, r0
    1f5e:	f1 1d       	adc	r31, r1
    1f60:	92 9f       	mul	r25, r18
    1f62:	f0 0d       	add	r31, r0
    1f64:	83 9f       	mul	r24, r19
    1f66:	f0 0d       	add	r31, r0
    1f68:	74 9f       	mul	r23, r20
    1f6a:	f0 0d       	add	r31, r0
    1f6c:	65 9f       	mul	r22, r21
    1f6e:	f0 0d       	add	r31, r0
    1f70:	99 27       	eor	r25, r25
    1f72:	72 9f       	mul	r23, r18
    1f74:	b0 0d       	add	r27, r0
    1f76:	e1 1d       	adc	r30, r1
    1f78:	f9 1f       	adc	r31, r25
    1f7a:	63 9f       	mul	r22, r19
    1f7c:	b0 0d       	add	r27, r0
    1f7e:	e1 1d       	adc	r30, r1
    1f80:	f9 1f       	adc	r31, r25
    1f82:	bd 01       	movw	r22, r26
    1f84:	cf 01       	movw	r24, r30
    1f86:	11 24       	eor	r1, r1
    1f88:	08 95       	ret

00001f8a <__udivmodsi4>:
    1f8a:	a1 e2       	ldi	r26, 0x21	; 33
    1f8c:	1a 2e       	mov	r1, r26
    1f8e:	aa 1b       	sub	r26, r26
    1f90:	bb 1b       	sub	r27, r27
    1f92:	fd 01       	movw	r30, r26
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <__udivmodsi4_ep>

00001f96 <__udivmodsi4_loop>:
    1f96:	aa 1f       	adc	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	ee 1f       	adc	r30, r30
    1f9c:	ff 1f       	adc	r31, r31
    1f9e:	a2 17       	cp	r26, r18
    1fa0:	b3 07       	cpc	r27, r19
    1fa2:	e4 07       	cpc	r30, r20
    1fa4:	f5 07       	cpc	r31, r21
    1fa6:	20 f0       	brcs	.+8      	; 0x1fb0 <__udivmodsi4_ep>
    1fa8:	a2 1b       	sub	r26, r18
    1faa:	b3 0b       	sbc	r27, r19
    1fac:	e4 0b       	sbc	r30, r20
    1fae:	f5 0b       	sbc	r31, r21

00001fb0 <__udivmodsi4_ep>:
    1fb0:	66 1f       	adc	r22, r22
    1fb2:	77 1f       	adc	r23, r23
    1fb4:	88 1f       	adc	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	1a 94       	dec	r1
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <__udivmodsi4_loop>
    1fbc:	60 95       	com	r22
    1fbe:	70 95       	com	r23
    1fc0:	80 95       	com	r24
    1fc2:	90 95       	com	r25
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	bd 01       	movw	r22, r26
    1fca:	cf 01       	movw	r24, r30
    1fcc:	08 95       	ret

00001fce <__divmodsi4>:
    1fce:	97 fb       	bst	r25, 7
    1fd0:	09 2e       	mov	r0, r25
    1fd2:	05 26       	eor	r0, r21
    1fd4:	0e d0       	rcall	.+28     	; 0x1ff2 <__divmodsi4_neg1>
    1fd6:	57 fd       	sbrc	r21, 7
    1fd8:	04 d0       	rcall	.+8      	; 0x1fe2 <__divmodsi4_neg2>
    1fda:	d7 df       	rcall	.-82     	; 0x1f8a <__udivmodsi4>
    1fdc:	0a d0       	rcall	.+20     	; 0x1ff2 <__divmodsi4_neg1>
    1fde:	00 1c       	adc	r0, r0
    1fe0:	38 f4       	brcc	.+14     	; 0x1ff0 <__divmodsi4_exit>

00001fe2 <__divmodsi4_neg2>:
    1fe2:	50 95       	com	r21
    1fe4:	40 95       	com	r20
    1fe6:	30 95       	com	r19
    1fe8:	21 95       	neg	r18
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	4f 4f       	sbci	r20, 0xFF	; 255
    1fee:	5f 4f       	sbci	r21, 0xFF	; 255

00001ff0 <__divmodsi4_exit>:
    1ff0:	08 95       	ret

00001ff2 <__divmodsi4_neg1>:
    1ff2:	f6 f7       	brtc	.-4      	; 0x1ff0 <__divmodsi4_exit>
    1ff4:	90 95       	com	r25
    1ff6:	80 95       	com	r24
    1ff8:	70 95       	com	r23
    1ffa:	61 95       	neg	r22
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	08 95       	ret

00002004 <_exit>:
    2004:	f8 94       	cli

00002006 <__stop_program>:
    2006:	ff cf       	rjmp	.-2      	; 0x2006 <__stop_program>
