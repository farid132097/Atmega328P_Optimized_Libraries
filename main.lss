
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  00002630  000026c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002630  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080018c  0080018c  00002750  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002750  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001371  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d84  00000000  00000000  00003b61  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  000078e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e90  00000000  00000000  00007fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000980  00000000  00000000  00009e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016a4  00000000  00000000  0000a7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001556  00000000  00000000  0000be8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000d3e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 7b 0d 	jmp	0x1af6	; 0x1af6 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e3       	ldi	r30, 0x30	; 48
      7c:	f6 e2       	ldi	r31, 0x26	; 38
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 38       	cpi	r26, 0x8C	; 140
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ac e8       	ldi	r26, 0x8C	; 140
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 3d       	cpi	r26, 0xDC	; 220
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 16 13 	jmp	0x262c	; 0x262c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <Timebase_Init>
  App_Setup();
      ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:
}


void App_Main_Loop(void){

  if(Timebase_DownCounter_SS_Continuous_Expired_Event(0)){
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 fd 07 	call	0xffa	; 0xffa <Timebase_DownCounter_SS_Continuous_Expired_Event>
      c2:	88 23       	and	r24, r24
      c4:	41 f0       	breq	.+16     	; 0xd6 <App_Main_Loop+0x1a>
    UART_Transmit_Number(Timebase_LPTimer_Get_Seconds());
      c6:	0e 94 91 03 	call	0x722	; 0x722 <Timebase_LPTimer_Get_Seconds>
      ca:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_Transmit_Text>
      d6:	08 95       	ret

000000d8 <App_Setup>:



void App_Setup(void){

  UART_Init(57600);
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	71 ee       	ldi	r23, 0xE1	; 225
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <UART_Init>
  
  DDRD  |=  (1<<0);
      e4:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
      e6:	58 98       	cbi	0x0b, 0	; 11
  
  Timebase_DownCounter_SS_Set_Securely(0, 50);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	42 e3       	ldi	r20, 0x32	; 50
      ec:	50 e0       	ldi	r21, 0x00	; 0
      ee:	60 e0       	ldi	r22, 0x00	; 0
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_LPDownCounter_Set_Securely(0, 5);
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	45 e0       	ldi	r20, 0x05	; 5
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timebase_LPDownCounter_Set_Securely>
}
     104:	08 95       	ret

00000106 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     106:	88 e9       	ldi	r24, 0x98	; 152
     108:	91 e0       	ldi	r25, 0x01	; 1
     10a:	90 93 97 01 	sts	0x0197, r25
     10e:	80 93 96 01 	sts	0x0196, r24
  Timebase->Config.UpdateRate = 1;
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	90 93 99 01 	sts	0x0199, r25
     11a:	80 93 98 01 	sts	0x0198, r24
  Timebase->Time.OVFUpdateValue=0;
     11e:	10 92 9d 01 	sts	0x019D, r1
     122:	10 92 9c 01 	sts	0x019C, r1
  Timebase->Time.SubSecondsShadow = 0;
     126:	10 92 a9 01 	sts	0x01A9, r1
     12a:	10 92 a8 01 	sts	0x01A8, r1
  Timebase->Time.SecondsShadow = 0;
     12e:	10 92 aa 01 	sts	0x01AA, r1
     132:	10 92 ab 01 	sts	0x01AB, r1
     136:	10 92 ac 01 	sts	0x01AC, r1
     13a:	10 92 ad 01 	sts	0x01AD, r1
  Timebase->Time.SubSeconds = 0;
     13e:	10 92 a3 01 	sts	0x01A3, r1
     142:	10 92 a2 01 	sts	0x01A2, r1
  Timebase->Time.Seconds = 0;
     146:	10 92 a4 01 	sts	0x01A4, r1
     14a:	10 92 a5 01 	sts	0x01A5, r1
     14e:	10 92 a6 01 	sts	0x01A6, r1
     152:	10 92 a7 01 	sts	0x01A7, r1
  Timebase->Time.VariablesSync = 0;
     156:	10 92 ae 01 	sts	0x01AE, r1
  Timebase->Time.LastSample = 0;
     15a:	10 92 9e 01 	sts	0x019E, r1
     15e:	10 92 9f 01 	sts	0x019F, r1
     162:	10 92 a0 01 	sts	0x01A0, r1
     166:	10 92 a1 01 	sts	0x01A1, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds = 0;
     16a:	10 92 b0 01 	sts	0x01B0, r1
     16e:	10 92 af 01 	sts	0x01AF, r1
  Timebase->Time.LPTimerSeconds = 0;
     172:	10 92 b1 01 	sts	0x01B1, r1
     176:	10 92 b2 01 	sts	0x01B2, r1
     17a:	10 92 b3 01 	sts	0x01B3, r1
     17e:	10 92 b4 01 	sts	0x01B4, r1
  Timebase->Config.LPUpdateRate = 1;
     182:	90 93 9b 01 	sts	0x019B, r25
     186:	80 93 9a 01 	sts	0x019A, r24
  #endif
  
  Timebase->UpdateRequest = 0;
     18a:	10 92 b5 01 	sts	0x01B5, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     18e:	10 92 b6 01 	sts	0x01B6, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     192:	10 92 b7 01 	sts	0x01B7, r1
     196:	10 92 b8 01 	sts	0x01B8, r1
     19a:	10 92 b9 01 	sts	0x01B9, r1
     19e:	10 92 ba 01 	sts	0x01BA, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     1a2:	10 92 bb 01 	sts	0x01BB, r1
     1a6:	10 92 bc 01 	sts	0x01BC, r1
     1aa:	10 92 bd 01 	sts	0x01BD, r1
     1ae:	10 92 be 01 	sts	0x01BE, r1
    Timebase->DownCounterSS[i].Value = 0;
     1b2:	10 92 bf 01 	sts	0x01BF, r1
     1b6:	10 92 c0 01 	sts	0x01C0, r1
     1ba:	10 92 c1 01 	sts	0x01C1, r1
     1be:	10 92 c2 01 	sts	0x01C2, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     1c2:	10 92 c3 01 	sts	0x01C3, r1
     1c6:	10 92 c4 01 	sts	0x01C4, r1
     1ca:	10 92 c5 01 	sts	0x01C5, r1
     1ce:	10 92 c6 01 	sts	0x01C6, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     1d2:	10 92 c7 01 	sts	0x01C7, r1
     1d6:	10 92 c8 01 	sts	0x01C8, r1
     1da:	10 92 c9 01 	sts	0x01C9, r1
     1de:	10 92 ca 01 	sts	0x01CA, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     1e2:	10 92 cb 01 	sts	0x01CB, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     1e6:	10 92 cc 01 	sts	0x01CC, r1
     1ea:	10 92 cd 01 	sts	0x01CD, r1
     1ee:	10 92 ce 01 	sts	0x01CE, r1
     1f2:	10 92 cf 01 	sts	0x01CF, r1
    Timebase->LPDownCounter[i].Value = 0;
     1f6:	10 92 d0 01 	sts	0x01D0, r1
     1fa:	10 92 d1 01 	sts	0x01D1, r1
     1fe:	10 92 d2 01 	sts	0x01D2, r1
     202:	10 92 d3 01 	sts	0x01D3, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     206:	10 92 d4 01 	sts	0x01D4, r1
     20a:	10 92 d5 01 	sts	0x01D5, r1
     20e:	10 92 d6 01 	sts	0x01D6, r1
     212:	10 92 d7 01 	sts	0x01D7, r1
	Timebase->LPDownCounter[i].ReloadValue = 0;
     216:	10 92 d8 01 	sts	0x01D8, r1
     21a:	10 92 d9 01 	sts	0x01D9, r1
     21e:	10 92 da 01 	sts	0x01DA, r1
     222:	10 92 db 01 	sts	0x01DB, r1
  }
  #endif
  
}
     226:	08 95       	ret

00000228 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     228:	8f 92       	push	r8
     22a:	9f 92       	push	r9
     22c:	bf 92       	push	r11
     22e:	cf 92       	push	r12
     230:	df 92       	push	r13
     232:	ef 92       	push	r14
     234:	ff 92       	push	r15
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	2a 97       	sbiw	r28, 0x0a	; 10
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	de bf       	out	0x3e, r29	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	cd bf       	out	0x3d, r28	; 61
     24e:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     250:	de 01       	movw	r26, r28
     252:	11 96       	adiw	r26, 0x01	; 1
     254:	e3 e0       	ldi	r30, 0x03	; 3
     256:	f1 e0       	ldi	r31, 0x01	; 1
     258:	8a e0       	ldi	r24, 0x0A	; 10
     25a:	01 90       	ld	r0, Z+
     25c:	0d 92       	st	X+, r0
     25e:	81 50       	subi	r24, 0x01	; 1
     260:	e1 f7       	brne	.-8      	; 0x25a <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     262:	94 01       	movw	r18, r8
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	7b e1       	ldi	r23, 0x1B	; 27
     26c:	87 eb       	ldi	r24, 0xB7	; 183
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     274:	b2 2e       	mov	r11, r18
     276:	c3 2e       	mov	r12, r19
     278:	d4 2e       	mov	r13, r20
     27a:	05 2f       	mov	r16, r21
     27c:	7e 01       	movw	r14, r28
     27e:	08 94       	sec
     280:	e1 1c       	adc	r14, r1
     282:	f1 1c       	adc	r15, r1
     284:	c9 01       	movw	r24, r18
     286:	da 01       	movw	r26, r20
     288:	9c 01       	movw	r18, r24
     28a:	ad 01       	movw	r20, r26
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	13 c0       	rjmp	.+38     	; 0x2b6 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     290:	f7 01       	movw	r30, r14
     292:	21 91       	ld	r18, Z+
     294:	31 91       	ld	r19, Z+
     296:	7f 01       	movw	r14, r30
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	6b 2d       	mov	r22, r11
     29e:	7c 2d       	mov	r23, r12
     2a0:	8d 2d       	mov	r24, r13
     2a2:	90 2f       	mov	r25, r16
     2a4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     2a8:	c9 01       	movw	r24, r18
     2aa:	da 01       	movw	r26, r20
     2ac:	9c 01       	movw	r18, r24
     2ae:	ad 01       	movw	r20, r26
	clock_div_index++;
     2b0:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     2b2:	15 30       	cpi	r17, 0x05	; 5
     2b4:	31 f0       	breq	.+12     	; 0x2c2 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     2b6:	2f 3f       	cpi	r18, 0xFF	; 255
     2b8:	31 05       	cpc	r19, r1
     2ba:	41 05       	cpc	r20, r1
     2bc:	51 05       	cpc	r21, r1
     2be:	09 f0       	breq	.+2      	; 0x2c2 <Timebase_Timer_Enable+0x9a>
     2c0:	3c f7       	brge	.-50     	; 0x290 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     2c2:	81 2f       	mov	r24, r17
     2c4:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     2c6:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2c8:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     2ca:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     2ce:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     2d0:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     2d2:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     2d4:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     2d6:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     2d8:	88 23       	and	r24, r24
     2da:	11 f4       	brne	.+4      	; 0x2e0 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0f c0       	rjmp	.+30     	; 0x2fe <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     2e0:	81 30       	cpi	r24, 0x01	; 1
     2e2:	11 f4       	brne	.+4      	; 0x2e8 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     2e4:	82 e0       	ldi	r24, 0x02	; 2
     2e6:	0b c0       	rjmp	.+22     	; 0x2fe <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     2e8:	82 30       	cpi	r24, 0x02	; 2
     2ea:	11 f4       	brne	.+4      	; 0x2f0 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     2ec:	83 e0       	ldi	r24, 0x03	; 3
     2ee:	07 c0       	rjmp	.+14     	; 0x2fe <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     2f4:	84 e0       	ldi	r24, 0x04	; 4
     2f6:	03 c0       	rjmp	.+6      	; 0x2fe <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	11 f4       	brne	.+4      	; 0x300 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     2fc:	85 e0       	ldi	r24, 0x05	; 5
     2fe:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     300:	e0 91 96 01 	lds	r30, 0x0196
     304:	f0 91 97 01 	lds	r31, 0x0197
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	82 1b       	sub	r24, r18
     30e:	93 0b       	sbc	r25, r19
     310:	95 83       	std	Z+5, r25	; 0x05
     312:	84 83       	std	Z+4, r24	; 0x04
  TCNT0  = Timebase->Time.OVFUpdateValue;
     314:	84 81       	ldd	r24, Z+4	; 0x04
     316:	95 81       	ldd	r25, Z+5	; 0x05
     318:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 6e 00 	sts	0x006E, r24
  sei();
     320:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     322:	91 82       	std	Z+1, r9	; 0x01
     324:	80 82       	st	Z, r8
}
     326:	2a 96       	adiw	r28, 0x0a	; 10
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	ff 90       	pop	r15
     33c:	ef 90       	pop	r14
     33e:	df 90       	pop	r13
     340:	cf 90       	pop	r12
     342:	bf 90       	pop	r11
     344:	9f 90       	pop	r9
     346:	8f 90       	pop	r8
     348:	08 95       	ret

0000034a <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     34a:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     34c:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     34e:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     352:	87 e0       	ldi	r24, 0x07	; 7
     354:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     356:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     358:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     35a:	16 bc       	out	0x26, r1	; 38
}
     35c:	08 95       	ret

0000035e <Timebase_LPTimer_Enable>:



#ifdef TIMEBASE_LP_TIMER_ENABLE

void Timebase_LPTimer_Enable(uint16_t UpdateRateHz){
     35e:	9c 01       	movw	r18, r24
    uint8_t  Prescaler_val;
	
    if(UpdateRateHz == 1){
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	91 05       	cpc	r25, r1
     364:	11 f4       	brne	.+4      	; 0x36a <Timebase_LPTimer_Enable+0xc>
     366:	96 e0       	ldi	r25, 0x06	; 6
     368:	19 c0       	rjmp	.+50     	; 0x39c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     36a:	82 30       	cpi	r24, 0x02	; 2
     36c:	91 05       	cpc	r25, r1
     36e:	11 f4       	brne	.+4      	; 0x374 <Timebase_LPTimer_Enable+0x16>
     370:	95 e0       	ldi	r25, 0x05	; 5
     372:	14 c0       	rjmp	.+40     	; 0x39c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     374:	84 30       	cpi	r24, 0x04	; 4
     376:	91 05       	cpc	r25, r1
     378:	11 f4       	brne	.+4      	; 0x37e <Timebase_LPTimer_Enable+0x20>
     37a:	94 e0       	ldi	r25, 0x04	; 4
     37c:	0f c0       	rjmp	.+30     	; 0x39c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     37e:	88 30       	cpi	r24, 0x08	; 8
     380:	91 05       	cpc	r25, r1
     382:	11 f4       	brne	.+4      	; 0x388 <Timebase_LPTimer_Enable+0x2a>
     384:	93 e0       	ldi	r25, 0x03	; 3
     386:	0a c0       	rjmp	.+20     	; 0x39c <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     388:	80 31       	cpi	r24, 0x10	; 16
     38a:	91 05       	cpc	r25, r1
     38c:	11 f4       	brne	.+4      	; 0x392 <Timebase_LPTimer_Enable+0x34>
     38e:	92 e0       	ldi	r25, 0x02	; 2
     390:	05 c0       	rjmp	.+10     	; 0x39c <Timebase_LPTimer_Enable+0x3e>
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	20 32       	cpi	r18, 0x20	; 32
     396:	31 05       	cpc	r19, r1
     398:	09 f4       	brne	.+2      	; 0x39c <Timebase_LPTimer_Enable+0x3e>
     39a:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     39c:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     39e:	84 b7       	in	r24, 0x34	; 52
     3a0:	87 7f       	andi	r24, 0xF7	; 247
     3a2:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     3a4:	80 91 60 00 	lds	r24, 0x0060
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     3ae:	80 91 60 00 	lds	r24, 0x0060
     3b2:	88 61       	ori	r24, 0x18	; 24
     3b4:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     3b8:	90 64       	ori	r25, 0x40	; 64
     3ba:	90 93 60 00 	sts	0x0060, r25
    sei();
     3be:	78 94       	sei
	Timebase->Config.LPUpdateRate = UpdateRateHz;
     3c0:	e0 91 96 01 	lds	r30, 0x0196
     3c4:	f0 91 97 01 	lds	r31, 0x0197
     3c8:	33 83       	std	Z+3, r19	; 0x03
     3ca:	22 83       	std	Z+2, r18	; 0x02
}
     3cc:	08 95       	ret

000003ce <Timebase_LPTimer_Disable>:


void Timebase_LPTimer_Disable(void){
    cli();
     3ce:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     3d0:	84 b7       	in	r24, 0x34	; 52
     3d2:	87 7f       	andi	r24, 0xF7	; 247
     3d4:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     3d6:	e0 e6       	ldi	r30, 0x60	; 96
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	80 68       	ori	r24, 0x80	; 128
     3de:	80 83       	st	Z, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     3e0:	80 81       	ld	r24, Z
     3e2:	88 61       	ori	r24, 0x18	; 24
     3e4:	80 83       	st	Z, r24
    WDTCSR  = 0x00;
     3e6:	10 82       	st	Z, r1
    sei();
     3e8:	78 94       	sei
}
     3ea:	08 95       	ret

000003ec <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     3ec:	f8 94       	cli
}
     3ee:	08 95       	ret

000003f0 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     3f0:	78 94       	sei
}
     3f2:	08 95       	ret

000003f4 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     3f4:	e0 91 96 01 	lds	r30, 0x0196
     3f8:	f0 91 97 01 	lds	r31, 0x0197
     3fc:	20 89       	ldd	r18, Z+16	; 0x10
     3fe:	31 89       	ldd	r19, Z+17	; 0x11
}
     400:	c9 01       	movw	r24, r18
     402:	08 95       	ret

00000404 <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     404:	e0 91 96 01 	lds	r30, 0x0196
     408:	f0 91 97 01 	lds	r31, 0x0197
     40c:	22 89       	ldd	r18, Z+18	; 0x12
     40e:	33 89       	ldd	r19, Z+19	; 0x13
     410:	44 89       	ldd	r20, Z+20	; 0x14
     412:	55 89       	ldd	r21, Z+21	; 0x15
}
     414:	b9 01       	movw	r22, r18
     416:	ca 01       	movw	r24, r20
     418:	08 95       	ret

0000041a <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     41a:	e0 91 96 01 	lds	r30, 0x0196
     41e:	f0 91 97 01 	lds	r31, 0x0197
     422:	22 85       	ldd	r18, Z+10	; 0x0a
     424:	33 85       	ldd	r19, Z+11	; 0x0b
}
     426:	c9 01       	movw	r24, r18
     428:	08 95       	ret

0000042a <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     42a:	e0 91 96 01 	lds	r30, 0x0196
     42e:	f0 91 97 01 	lds	r31, 0x0197
     432:	24 85       	ldd	r18, Z+12	; 0x0c
     434:	35 85       	ldd	r19, Z+13	; 0x0d
     436:	46 85       	ldd	r20, Z+14	; 0x0e
     438:	57 85       	ldd	r21, Z+15	; 0x0f
}
     43a:	b9 01       	movw	r22, r18
     43c:	ca 01       	movw	r24, r20
     43e:	08 95       	ret

00000440 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     440:	e0 91 96 01 	lds	r30, 0x0196
     444:	f0 91 97 01 	lds	r31, 0x0197
     448:	93 87       	std	Z+11, r25	; 0x0b
     44a:	82 87       	std	Z+10, r24	; 0x0a
}
     44c:	08 95       	ret

0000044e <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     44e:	e0 91 96 01 	lds	r30, 0x0196
     452:	f0 91 97 01 	lds	r31, 0x0197
     456:	64 87       	std	Z+12, r22	; 0x0c
     458:	75 87       	std	Z+13, r23	; 0x0d
     45a:	86 87       	std	Z+14, r24	; 0x0e
     45c:	97 87       	std	Z+15, r25	; 0x0f
}
     45e:	08 95       	ret

00000460 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     460:	e0 91 96 01 	lds	r30, 0x0196
     464:	f0 91 97 01 	lds	r31, 0x0197
     468:	20 89       	ldd	r18, Z+16	; 0x10
     46a:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     46c:	80 89       	ldd	r24, Z+16	; 0x10
     46e:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     470:	28 17       	cp	r18, r24
     472:	39 07       	cpc	r19, r25
     474:	c9 f7       	brne	.-14     	; 0x468 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     476:	c9 01       	movw	r24, r18
     478:	08 95       	ret

0000047a <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     47a:	e0 91 96 01 	lds	r30, 0x0196
     47e:	f0 91 97 01 	lds	r31, 0x0197
     482:	22 89       	ldd	r18, Z+18	; 0x12
     484:	33 89       	ldd	r19, Z+19	; 0x13
     486:	44 89       	ldd	r20, Z+20	; 0x14
     488:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     48a:	82 89       	ldd	r24, Z+18	; 0x12
     48c:	93 89       	ldd	r25, Z+19	; 0x13
     48e:	a4 89       	ldd	r26, Z+20	; 0x14
     490:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     492:	28 17       	cp	r18, r24
     494:	39 07       	cpc	r19, r25
     496:	4a 07       	cpc	r20, r26
     498:	5b 07       	cpc	r21, r27
     49a:	99 f7       	brne	.-26     	; 0x482 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     49c:	b9 01       	movw	r22, r18
     49e:	ca 01       	movw	r24, r20
     4a0:	08 95       	ret

000004a2 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     4a2:	e0 91 96 01 	lds	r30, 0x0196
     4a6:	f0 91 97 01 	lds	r31, 0x0197
     4aa:	86 89       	ldd	r24, Z+22	; 0x16
     4ac:	88 23       	and	r24, r24
     4ae:	e1 f4       	brne	.+56     	; 0x4e8 <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4b0:	20 89       	ldd	r18, Z+16	; 0x10
     4b2:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     4b4:	80 89       	ldd	r24, Z+16	; 0x10
     4b6:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     4b8:	28 17       	cp	r18, r24
     4ba:	39 07       	cpc	r19, r25
     4bc:	c9 f7       	brne	.-14     	; 0x4b0 <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     4be:	33 87       	std	Z+11, r19	; 0x0b
     4c0:	22 87       	std	Z+10, r18	; 0x0a
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4c2:	22 89       	ldd	r18, Z+18	; 0x12
     4c4:	33 89       	ldd	r19, Z+19	; 0x13
     4c6:	44 89       	ldd	r20, Z+20	; 0x14
     4c8:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     4ca:	82 89       	ldd	r24, Z+18	; 0x12
     4cc:	93 89       	ldd	r25, Z+19	; 0x13
     4ce:	a4 89       	ldd	r26, Z+20	; 0x14
     4d0:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     4d2:	28 17       	cp	r18, r24
     4d4:	39 07       	cpc	r19, r25
     4d6:	4a 07       	cpc	r20, r26
     4d8:	5b 07       	cpc	r21, r27
     4da:	99 f7       	brne	.-26     	; 0x4c2 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     4dc:	24 87       	std	Z+12, r18	; 0x0c
     4de:	35 87       	std	Z+13, r19	; 0x0d
     4e0:	46 87       	std	Z+14, r20	; 0x0e
     4e2:	57 87       	std	Z+15, r21	; 0x0f
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	86 8b       	std	Z+22, r24	; 0x16
     4e8:	08 95       	ret

000004ea <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     504:	c0 91 96 01 	lds	r28, 0x0196
     508:	d0 91 97 01 	lds	r29, 0x0197
     50c:	c8 88       	ldd	r12, Y+16	; 0x10
     50e:	d9 88       	ldd	r13, Y+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     510:	88 89       	ldd	r24, Y+16	; 0x10
     512:	99 89       	ldd	r25, Y+17	; 0x11
	if(tmp0 == tmp1){
     514:	c8 16       	cp	r12, r24
     516:	d9 06       	cpc	r13, r25
     518:	c9 f7       	brne	.-14     	; 0x50c <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     51a:	ea 88       	ldd	r14, Y+18	; 0x12
     51c:	fb 88       	ldd	r15, Y+19	; 0x13
     51e:	0c 89       	ldd	r16, Y+20	; 0x14
     520:	1d 89       	ldd	r17, Y+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     522:	8a 89       	ldd	r24, Y+18	; 0x12
     524:	9b 89       	ldd	r25, Y+19	; 0x13
     526:	ac 89       	ldd	r26, Y+20	; 0x14
     528:	bd 89       	ldd	r27, Y+21	; 0x15
	if(tmp0 == tmp1){
     52a:	e8 16       	cp	r14, r24
     52c:	f9 06       	cpc	r15, r25
     52e:	0a 07       	cpc	r16, r26
     530:	1b 07       	cpc	r17, r27
     532:	99 f7       	brne	.-26     	; 0x51a <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     534:	28 81       	ld	r18, Y
     536:	39 81       	ldd	r19, Y+1	; 0x01
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	c8 01       	movw	r24, r16
     53e:	b7 01       	movw	r22, r14
     540:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulsi3>
  smpl_val += smpl_ss;
     544:	76 01       	movw	r14, r12
     546:	00 e0       	ldi	r16, 0x00	; 0
     548:	10 e0       	ldi	r17, 0x00	; 0
     54a:	95 01       	movw	r18, r10
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	e2 0e       	add	r14, r18
     552:	f3 1e       	adc	r15, r19
     554:	04 1f       	adc	r16, r20
     556:	15 1f       	adc	r17, r21
  smpl_val += value;
     558:	e6 0e       	add	r14, r22
     55a:	f7 1e       	adc	r15, r23
     55c:	08 1f       	adc	r16, r24
     55e:	19 1f       	adc	r17, r25
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	25 c0       	rjmp	.+74     	; 0x5b4 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     56a:	88 88       	ldd	r8, Y+16	; 0x10
     56c:	99 88       	ldd	r9, Y+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     56e:	88 89       	ldd	r24, Y+16	; 0x10
     570:	99 89       	ldd	r25, Y+17	; 0x11
	if(tmp0 == tmp1){
     572:	88 16       	cp	r8, r24
     574:	99 06       	cpc	r9, r25
     576:	c9 f7       	brne	.-14     	; 0x56a <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     578:	aa 88       	ldd	r10, Y+18	; 0x12
     57a:	bb 88       	ldd	r11, Y+19	; 0x13
     57c:	cc 88       	ldd	r12, Y+20	; 0x14
     57e:	dd 88       	ldd	r13, Y+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     580:	8a 89       	ldd	r24, Y+18	; 0x12
     582:	9b 89       	ldd	r25, Y+19	; 0x13
     584:	ac 89       	ldd	r26, Y+20	; 0x14
     586:	bd 89       	ldd	r27, Y+21	; 0x15
	if(tmp0 == tmp1){
     588:	a8 16       	cp	r10, r24
     58a:	b9 06       	cpc	r11, r25
     58c:	ca 06       	cpc	r12, r26
     58e:	db 06       	cpc	r13, r27
     590:	99 f7       	brne	.-26     	; 0x578 <Timebase_Timer_Delay_SubSeconds+0x8e>
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     592:	28 81       	ld	r18, Y
     594:	39 81       	ldd	r19, Y+1	; 0x01
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	50 e0       	ldi	r21, 0x00	; 0
     59a:	c6 01       	movw	r24, r12
     59c:	b5 01       	movw	r22, r10
     59e:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulsi3>
     5a2:	9b 01       	movw	r18, r22
     5a4:	ac 01       	movw	r20, r24
	curr_val += curr_ss;
     5a6:	c4 01       	movw	r24, r8
     5a8:	a0 e0       	ldi	r26, 0x00	; 0
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	28 0f       	add	r18, r24
     5ae:	39 1f       	adc	r19, r25
     5b0:	4a 1f       	adc	r20, r26
     5b2:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5b4:	2e 15       	cp	r18, r14
     5b6:	3f 05       	cpc	r19, r15
     5b8:	40 07       	cpc	r20, r16
     5ba:	51 07       	cpc	r21, r17
     5bc:	b4 f2       	brlt	.-84     	; 0x56a <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     5be:	df 91       	pop	r29
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	ff 90       	pop	r15
     5c8:	ef 90       	pop	r14
     5ca:	df 90       	pop	r13
     5cc:	cf 90       	pop	r12
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
     5d6:	08 95       	ret

000005d8 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5de:	e0 91 96 01 	lds	r30, 0x0196
     5e2:	f0 91 97 01 	lds	r31, 0x0197
     5e6:	60 89       	ldd	r22, Z+16	; 0x10
     5e8:	71 89       	ldd	r23, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     5ea:	80 89       	ldd	r24, Z+16	; 0x10
     5ec:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     5ee:	68 17       	cp	r22, r24
     5f0:	79 07       	cpc	r23, r25
     5f2:	c9 f7       	brne	.-14     	; 0x5e6 <Timebase_Timer_Await_SubSeconds+0xe>
     5f4:	07 c0       	rjmp	.+14     	; 0x604 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5f6:	60 89       	ldd	r22, Z+16	; 0x10
     5f8:	71 89       	ldd	r23, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     5fa:	80 89       	ldd	r24, Z+16	; 0x10
     5fc:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     5fe:	68 17       	cp	r22, r24
     600:	79 07       	cpc	r23, r25
     602:	c9 f7       	brne	.-14     	; 0x5f6 <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     604:	26 81       	ldd	r18, Z+6	; 0x06
     606:	37 81       	ldd	r19, Z+7	; 0x07
     608:	40 85       	ldd	r20, Z+8	; 0x08
     60a:	51 85       	ldd	r21, Z+9	; 0x09
     60c:	cb 01       	movw	r24, r22
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	82 17       	cp	r24, r18
     614:	93 07       	cpc	r25, r19
     616:	a4 07       	cpc	r26, r20
     618:	b5 07       	cpc	r27, r21
     61a:	69 f7       	brne	.-38     	; 0x5f6 <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     61c:	20 89       	ldd	r18, Z+16	; 0x10
     61e:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     620:	80 89       	ldd	r24, Z+16	; 0x10
     622:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     624:	28 17       	cp	r18, r24
     626:	39 07       	cpc	r19, r25
     628:	c9 f7       	brne	.-14     	; 0x61c <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     62a:	c9 01       	movw	r24, r18
     62c:	a0 e0       	ldi	r26, 0x00	; 0
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	86 83       	std	Z+6, r24	; 0x06
     632:	97 83       	std	Z+7, r25	; 0x07
     634:	a0 87       	std	Z+8, r26	; 0x08
     636:	b1 87       	std	Z+9, r27	; 0x09
  Timebase->Time.LastSample += value;
     638:	26 81       	ldd	r18, Z+6	; 0x06
     63a:	37 81       	ldd	r19, Z+7	; 0x07
     63c:	40 85       	ldd	r20, Z+8	; 0x08
     63e:	51 85       	ldd	r21, Z+9	; 0x09
     640:	ce 01       	movw	r24, r28
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	82 0f       	add	r24, r18
     648:	93 1f       	adc	r25, r19
     64a:	a4 1f       	adc	r26, r20
     64c:	b5 1f       	adc	r27, r21
     64e:	86 83       	std	Z+6, r24	; 0x06
     650:	97 83       	std	Z+7, r25	; 0x07
     652:	a0 87       	std	Z+8, r26	; 0x08
     654:	b1 87       	std	Z+9, r27	; 0x09
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     656:	26 81       	ldd	r18, Z+6	; 0x06
     658:	37 81       	ldd	r19, Z+7	; 0x07
     65a:	40 85       	ldd	r20, Z+8	; 0x08
     65c:	51 85       	ldd	r21, Z+9	; 0x09
     65e:	80 81       	ld	r24, Z
     660:	91 81       	ldd	r25, Z+1	; 0x01
     662:	a0 e0       	ldi	r26, 0x00	; 0
     664:	b0 e0       	ldi	r27, 0x00	; 0
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	4a 07       	cpc	r20, r26
     66c:	5b 07       	cpc	r21, r27
     66e:	84 f0       	brlt	.+32     	; 0x690 <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     670:	26 81       	ldd	r18, Z+6	; 0x06
     672:	37 81       	ldd	r19, Z+7	; 0x07
     674:	40 85       	ldd	r20, Z+8	; 0x08
     676:	51 85       	ldd	r21, Z+9	; 0x09
     678:	80 81       	ld	r24, Z
     67a:	91 81       	ldd	r25, Z+1	; 0x01
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	28 1b       	sub	r18, r24
     682:	39 0b       	sbc	r19, r25
     684:	4a 0b       	sbc	r20, r26
     686:	5b 0b       	sbc	r21, r27
     688:	26 83       	std	Z+6, r18	; 0x06
     68a:	37 83       	std	Z+7, r19	; 0x07
     68c:	40 87       	std	Z+8, r20	; 0x08
     68e:	51 87       	std	Z+9, r21	; 0x09
  }
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     696:	ef 92       	push	r14
     698:	ff 92       	push	r15
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     6a0:	e0 91 96 01 	lds	r30, 0x0196
     6a4:	f0 91 97 01 	lds	r31, 0x0197
     6a8:	22 89       	ldd	r18, Z+18	; 0x12
     6aa:	33 89       	ldd	r19, Z+19	; 0x13
     6ac:	44 89       	ldd	r20, Z+20	; 0x14
     6ae:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     6b0:	82 89       	ldd	r24, Z+18	; 0x12
     6b2:	93 89       	ldd	r25, Z+19	; 0x13
     6b4:	a4 89       	ldd	r26, Z+20	; 0x14
     6b6:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     6b8:	28 17       	cp	r18, r24
     6ba:	39 07       	cpc	r19, r25
     6bc:	4a 07       	cpc	r20, r26
     6be:	5b 07       	cpc	r21, r27
     6c0:	99 f7       	brne	.-26     	; 0x6a8 <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     6c2:	7b 01       	movw	r14, r22
     6c4:	00 e0       	ldi	r16, 0x00	; 0
     6c6:	10 e0       	ldi	r17, 0x00	; 0
     6c8:	e2 0e       	add	r14, r18
     6ca:	f3 1e       	adc	r15, r19
     6cc:	04 1f       	adc	r16, r20
     6ce:	15 1f       	adc	r17, r21
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     6da:	22 89       	ldd	r18, Z+18	; 0x12
     6dc:	33 89       	ldd	r19, Z+19	; 0x13
     6de:	44 89       	ldd	r20, Z+20	; 0x14
     6e0:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     6e2:	82 89       	ldd	r24, Z+18	; 0x12
     6e4:	93 89       	ldd	r25, Z+19	; 0x13
     6e6:	a4 89       	ldd	r26, Z+20	; 0x14
     6e8:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     6ea:	28 17       	cp	r18, r24
     6ec:	39 07       	cpc	r19, r25
     6ee:	4a 07       	cpc	r20, r26
     6f0:	5b 07       	cpc	r21, r27
     6f2:	99 f7       	brne	.-26     	; 0x6da <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     6f4:	2e 15       	cp	r18, r14
     6f6:	3f 05       	cpc	r19, r15
     6f8:	40 07       	cpc	r20, r16
     6fa:	51 07       	cpc	r21, r17
     6fc:	74 f3       	brlt	.-36     	; 0x6da <Timebase_Timer_Delay_Seconds+0x44>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     6fe:	1f 91       	pop	r17
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	08 95       	ret

00000708 <Timebase_LPTimer_Get_SubSeconds>:
#ifdef TIMEBASE_LP_TIMER_ENABLE

uint16_t Timebase_LPTimer_Get_SubSeconds(void){
  uint16_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSubSeconds;
     708:	e0 91 96 01 	lds	r30, 0x0196
     70c:	f0 91 97 01 	lds	r31, 0x0197
     710:	27 89       	ldd	r18, Z+23	; 0x17
     712:	30 8d       	ldd	r19, Z+24	; 0x18
    temp1 = Timebase->Time.LPTimerSubSeconds;
     714:	87 89       	ldd	r24, Z+23	; 0x17
     716:	90 8d       	ldd	r25, Z+24	; 0x18
    if(temp0 == temp1){
     718:	28 17       	cp	r18, r24
     71a:	39 07       	cpc	r19, r25
     71c:	c9 f7       	brne	.-14     	; 0x710 <Timebase_LPTimer_Get_SubSeconds+0x8>
	  break;
    }
  }
  return temp0;
}
     71e:	c9 01       	movw	r24, r18
     720:	08 95       	ret

00000722 <Timebase_LPTimer_Get_Seconds>:


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     722:	e0 91 96 01 	lds	r30, 0x0196
     726:	f0 91 97 01 	lds	r31, 0x0197
     72a:	21 8d       	ldd	r18, Z+25	; 0x19
     72c:	32 8d       	ldd	r19, Z+26	; 0x1a
     72e:	43 8d       	ldd	r20, Z+27	; 0x1b
     730:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     732:	81 8d       	ldd	r24, Z+25	; 0x19
     734:	92 8d       	ldd	r25, Z+26	; 0x1a
     736:	a3 8d       	ldd	r26, Z+27	; 0x1b
     738:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     73a:	28 17       	cp	r18, r24
     73c:	39 07       	cpc	r19, r25
     73e:	4a 07       	cpc	r20, r26
     740:	5b 07       	cpc	r21, r27
     742:	99 f7       	brne	.-26     	; 0x72a <Timebase_LPTimer_Get_Seconds+0x8>
	  break;
    }
  }
  return temp0;
}
     744:	b9 01       	movw	r22, r18
     746:	ca 01       	movw	r24, r20
     748:	08 95       	ret

0000074a <Timebase_LPTimer_Set_SubSeconds>:


void Timebase_LPTimer_Set_SubSeconds(uint16_t value){
  Timebase->Time.LPTimerSubSeconds = value;
     74a:	e0 91 96 01 	lds	r30, 0x0196
     74e:	f0 91 97 01 	lds	r31, 0x0197
     752:	90 8f       	std	Z+24, r25	; 0x18
     754:	87 8b       	std	Z+23, r24	; 0x17
}
     756:	08 95       	ret

00000758 <Timebase_LPTimer_Set_Seconds>:


void Timebase_LPTimer_Set_Seconds(int32_t value){
  Timebase->Time.LPTimerSeconds = value;
     758:	e0 91 96 01 	lds	r30, 0x0196
     75c:	f0 91 97 01 	lds	r31, 0x0197
     760:	61 8f       	std	Z+25, r22	; 0x19
     762:	72 8f       	std	Z+26, r23	; 0x1a
     764:	83 8f       	std	Z+27, r24	; 0x1b
     766:	94 8f       	std	Z+28, r25	; 0x1c
}
     768:	08 95       	ret

0000076a <Timebase_LPTimer_Delay_Seconds>:

void Timebase_LPTimer_Delay_Seconds(uint16_t value){
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     774:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     776:	e0 91 96 01 	lds	r30, 0x0196
     77a:	f0 91 97 01 	lds	r31, 0x0197
     77e:	21 8d       	ldd	r18, Z+25	; 0x19
     780:	32 8d       	ldd	r19, Z+26	; 0x1a
     782:	43 8d       	ldd	r20, Z+27	; 0x1b
     784:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     786:	81 8d       	ldd	r24, Z+25	; 0x19
     788:	92 8d       	ldd	r25, Z+26	; 0x1a
     78a:	a3 8d       	ldd	r26, Z+27	; 0x1b
     78c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     78e:	28 17       	cp	r18, r24
     790:	39 07       	cpc	r19, r25
     792:	4a 07       	cpc	r20, r26
     794:	5b 07       	cpc	r21, r27
     796:	99 f7       	brne	.-26     	; 0x77e <Timebase_LPTimer_Delay_Seconds+0x14>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     798:	78 94       	sei
void Timebase_LPTimer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
     79a:	7b 01       	movw	r14, r22
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	e2 0e       	add	r14, r18
     7a2:	f3 1e       	adc	r15, r19
     7a4:	04 1f       	adc	r16, r20
     7a6:	15 1f       	adc	r17, r21
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	0f c0       	rjmp	.+30     	; 0x7d0 <Timebase_LPTimer_Delay_Seconds+0x66>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     7b2:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     7b4:	21 8d       	ldd	r18, Z+25	; 0x19
     7b6:	32 8d       	ldd	r19, Z+26	; 0x1a
     7b8:	43 8d       	ldd	r20, Z+27	; 0x1b
     7ba:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     7bc:	81 8d       	ldd	r24, Z+25	; 0x19
     7be:	92 8d       	ldd	r25, Z+26	; 0x1a
     7c0:	a3 8d       	ldd	r26, Z+27	; 0x1b
     7c2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     7c4:	28 17       	cp	r18, r24
     7c6:	39 07       	cpc	r19, r25
     7c8:	4a 07       	cpc	r20, r26
     7ca:	5b 07       	cpc	r21, r27
     7cc:	99 f7       	brne	.-26     	; 0x7b4 <Timebase_LPTimer_Delay_Seconds+0x4a>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7ce:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     7d0:	2e 15       	cp	r18, r14
     7d2:	3f 05       	cpc	r19, r15
     7d4:	40 07       	cpc	r20, r16
     7d6:	51 07       	cpc	r21, r17
     7d8:	64 f3       	brlt	.-40     	; 0x7b2 <Timebase_LPTimer_Delay_Seconds+0x48>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_LPTimer_Get_Seconds();
	Timebase_Atomic_Operation_End();
  }
}
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	08 95       	ret

000007e4 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     7e4:	e0 91 96 01 	lds	r30, 0x0196
     7e8:	f0 91 97 01 	lds	r31, 0x0197
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	25 e1       	ldi	r18, 0x15	; 21
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	ac 01       	movw	r20, r24
     7f4:	42 9f       	mul	r20, r18
     7f6:	c0 01       	movw	r24, r0
     7f8:	43 9f       	mul	r20, r19
     7fa:	90 0d       	add	r25, r0
     7fc:	52 9f       	mul	r21, r18
     7fe:	90 0d       	add	r25, r0
     800:	11 24       	eor	r1, r1
     802:	e8 0f       	add	r30, r24
     804:	f9 1f       	adc	r31, r25
     806:	86 8d       	ldd	r24, Z+30	; 0x1e
     808:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     80a:	8f 70       	andi	r24, 0x0F	; 15
     80c:	08 95       	ret

0000080e <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     80e:	e0 91 96 01 	lds	r30, 0x0196
     812:	f0 91 97 01 	lds	r31, 0x0197
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	25 e1       	ldi	r18, 0x15	; 21
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	ac 01       	movw	r20, r24
     81e:	42 9f       	mul	r20, r18
     820:	c0 01       	movw	r24, r0
     822:	43 9f       	mul	r20, r19
     824:	90 0d       	add	r25, r0
     826:	52 9f       	mul	r21, r18
     828:	90 0d       	add	r25, r0
     82a:	11 24       	eor	r1, r1
     82c:	e8 0f       	add	r30, r24
     82e:	f9 1f       	adc	r31, r25
     830:	6f 70       	andi	r22, 0x0F	; 15
     832:	66 0f       	add	r22, r22
     834:	86 8d       	ldd	r24, Z+30	; 0x1e
     836:	81 7e       	andi	r24, 0xE1	; 225
     838:	86 2b       	or	r24, r22
     83a:	86 8f       	std	Z+30, r24	; 0x1e
}
     83c:	08 95       	ret

0000083e <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     83e:	e0 91 96 01 	lds	r30, 0x0196
     842:	f0 91 97 01 	lds	r31, 0x0197
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	25 e1       	ldi	r18, 0x15	; 21
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	ac 01       	movw	r20, r24
     84e:	42 9f       	mul	r20, r18
     850:	c0 01       	movw	r24, r0
     852:	43 9f       	mul	r20, r19
     854:	90 0d       	add	r25, r0
     856:	52 9f       	mul	r21, r18
     858:	90 0d       	add	r25, r0
     85a:	11 24       	eor	r1, r1
     85c:	e8 0f       	add	r30, r24
     85e:	f9 1f       	adc	r31, r25
     860:	df 01       	movw	r26, r30
     862:	97 96       	adiw	r26, 0x27	; 39
     864:	67 a1       	ldd	r22, Z+39	; 0x27
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	7c 91       	ld	r23, X
     86a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     86c:	12 96       	adiw	r26, 0x02	; 2
     86e:	8c 91       	ld	r24, X
     870:	12 97       	sbiw	r26, 0x02	; 2
     872:	13 96       	adiw	r26, 0x03	; 3
     874:	9c 91       	ld	r25, X
     876:	08 95       	ret

00000878 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     878:	e0 91 96 01 	lds	r30, 0x0196
     87c:	f0 91 97 01 	lds	r31, 0x0197
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	25 e1       	ldi	r18, 0x15	; 21
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	dc 01       	movw	r26, r24
     888:	a2 9f       	mul	r26, r18
     88a:	c0 01       	movw	r24, r0
     88c:	a3 9f       	mul	r26, r19
     88e:	90 0d       	add	r25, r0
     890:	b2 9f       	mul	r27, r18
     892:	90 0d       	add	r25, r0
     894:	11 24       	eor	r1, r1
     896:	e8 0f       	add	r30, r24
     898:	f9 1f       	adc	r31, r25
     89a:	47 a3       	std	Z+39, r20	; 0x27
     89c:	50 a7       	std	Z+40, r21	; 0x28
     89e:	61 a7       	std	Z+41, r22	; 0x29
     8a0:	72 a7       	std	Z+42, r23	; 0x2a
}
     8a2:	08 95       	ret

000008a4 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     8a4:	e0 91 96 01 	lds	r30, 0x0196
     8a8:	f0 91 97 01 	lds	r31, 0x0197
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	25 e1       	ldi	r18, 0x15	; 21
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	ac 01       	movw	r20, r24
     8b4:	42 9f       	mul	r20, r18
     8b6:	c0 01       	movw	r24, r0
     8b8:	43 9f       	mul	r20, r19
     8ba:	90 0d       	add	r25, r0
     8bc:	52 9f       	mul	r21, r18
     8be:	90 0d       	add	r25, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	df 01       	movw	r26, r30
     8c8:	5f 96       	adiw	r26, 0x1f	; 31
     8ca:	67 8d       	ldd	r22, Z+31	; 0x1f
     8cc:	11 96       	adiw	r26, 0x01	; 1
     8ce:	7c 91       	ld	r23, X
     8d0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     8d2:	12 96       	adiw	r26, 0x02	; 2
     8d4:	8c 91       	ld	r24, X
     8d6:	12 97       	sbiw	r26, 0x02	; 2
     8d8:	13 96       	adiw	r26, 0x03	; 3
     8da:	9c 91       	ld	r25, X
     8dc:	08 95       	ret

000008de <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     8de:	e0 91 96 01 	lds	r30, 0x0196
     8e2:	f0 91 97 01 	lds	r31, 0x0197
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	25 e1       	ldi	r18, 0x15	; 21
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	ac 01       	movw	r20, r24
     8ee:	42 9f       	mul	r20, r18
     8f0:	c0 01       	movw	r24, r0
     8f2:	43 9f       	mul	r20, r19
     8f4:	90 0d       	add	r25, r0
     8f6:	52 9f       	mul	r21, r18
     8f8:	90 0d       	add	r25, r0
     8fa:	11 24       	eor	r1, r1
     8fc:	e8 0f       	add	r30, r24
     8fe:	f9 1f       	adc	r31, r25
     900:	df 01       	movw	r26, r30
     902:	93 96       	adiw	r26, 0x23	; 35
     904:	63 a1       	ldd	r22, Z+35	; 0x23
     906:	11 96       	adiw	r26, 0x01	; 1
     908:	7c 91       	ld	r23, X
     90a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     90c:	12 96       	adiw	r26, 0x02	; 2
     90e:	8c 91       	ld	r24, X
     910:	12 97       	sbiw	r26, 0x02	; 2
     912:	13 96       	adiw	r26, 0x03	; 3
     914:	9c 91       	ld	r25, X
     916:	08 95       	ret

00000918 <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     918:	e0 91 96 01 	lds	r30, 0x0196
     91c:	f0 91 97 01 	lds	r31, 0x0197
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	25 e1       	ldi	r18, 0x15	; 21
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	dc 01       	movw	r26, r24
     928:	a2 9f       	mul	r26, r18
     92a:	c0 01       	movw	r24, r0
     92c:	a3 9f       	mul	r26, r19
     92e:	90 0d       	add	r25, r0
     930:	b2 9f       	mul	r27, r18
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	e8 0f       	add	r30, r24
     938:	f9 1f       	adc	r31, r25
     93a:	47 8f       	std	Z+31, r20	; 0x1f
     93c:	50 a3       	std	Z+32, r21	; 0x20
     93e:	61 a3       	std	Z+33, r22	; 0x21
     940:	72 a3       	std	Z+34, r23	; 0x22
}
     942:	08 95       	ret

00000944 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     944:	e0 91 96 01 	lds	r30, 0x0196
     948:	f0 91 97 01 	lds	r31, 0x0197
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	25 e1       	ldi	r18, 0x15	; 21
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	dc 01       	movw	r26, r24
     954:	a2 9f       	mul	r26, r18
     956:	c0 01       	movw	r24, r0
     958:	a3 9f       	mul	r26, r19
     95a:	90 0d       	add	r25, r0
     95c:	b2 9f       	mul	r27, r18
     95e:	90 0d       	add	r25, r0
     960:	11 24       	eor	r1, r1
     962:	e8 0f       	add	r30, r24
     964:	f9 1f       	adc	r31, r25
     966:	43 a3       	std	Z+35, r20	; 0x23
     968:	54 a3       	std	Z+36, r21	; 0x24
     96a:	65 a3       	std	Z+37, r22	; 0x25
     96c:	76 a3       	std	Z+38, r23	; 0x26
}
     96e:	08 95       	ret

00000970 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     970:	e0 91 96 01 	lds	r30, 0x0196
     974:	f0 91 97 01 	lds	r31, 0x0197
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	25 e1       	ldi	r18, 0x15	; 21
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	ac 01       	movw	r20, r24
     980:	42 9f       	mul	r20, r18
     982:	c0 01       	movw	r24, r0
     984:	43 9f       	mul	r20, r19
     986:	90 0d       	add	r25, r0
     988:	52 9f       	mul	r21, r18
     98a:	90 0d       	add	r25, r0
     98c:	11 24       	eor	r1, r1
     98e:	e8 0f       	add	r30, r24
     990:	f9 1f       	adc	r31, r25
     992:	df 01       	movw	r26, r30
     994:	9b 96       	adiw	r26, 0x2b	; 43
     996:	63 a5       	ldd	r22, Z+43	; 0x2b
     998:	11 96       	adiw	r26, 0x01	; 1
     99a:	7c 91       	ld	r23, X
     99c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     99e:	12 96       	adiw	r26, 0x02	; 2
     9a0:	8c 91       	ld	r24, X
     9a2:	12 97       	sbiw	r26, 0x02	; 2
     9a4:	13 96       	adiw	r26, 0x03	; 3
     9a6:	9c 91       	ld	r25, X
     9a8:	08 95       	ret

000009aa <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     9aa:	e0 91 96 01 	lds	r30, 0x0196
     9ae:	f0 91 97 01 	lds	r31, 0x0197
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     9b6:	77 ff       	sbrs	r23, 7
     9b8:	11 c0       	rjmp	.+34     	; 0x9dc <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     9ba:	85 e1       	ldi	r24, 0x15	; 21
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	ac 01       	movw	r20, r24
     9c0:	24 9f       	mul	r18, r20
     9c2:	c0 01       	movw	r24, r0
     9c4:	25 9f       	mul	r18, r21
     9c6:	90 0d       	add	r25, r0
     9c8:	34 9f       	mul	r19, r20
     9ca:	90 0d       	add	r25, r0
     9cc:	11 24       	eor	r1, r1
     9ce:	e8 0f       	add	r30, r24
     9d0:	f9 1f       	adc	r31, r25
     9d2:	13 a6       	std	Z+43, r1	; 0x2b
     9d4:	14 a6       	std	Z+44, r1	; 0x2c
     9d6:	15 a6       	std	Z+45, r1	; 0x2d
     9d8:	16 a6       	std	Z+46, r1	; 0x2e
     9da:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     9dc:	85 e1       	ldi	r24, 0x15	; 21
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	dc 01       	movw	r26, r24
     9e2:	2a 9f       	mul	r18, r26
     9e4:	c0 01       	movw	r24, r0
     9e6:	2b 9f       	mul	r18, r27
     9e8:	90 0d       	add	r25, r0
     9ea:	3a 9f       	mul	r19, r26
     9ec:	90 0d       	add	r25, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	43 a7       	std	Z+43, r20	; 0x2b
     9f6:	54 a7       	std	Z+44, r21	; 0x2c
     9f8:	65 a7       	std	Z+45, r22	; 0x2d
     9fa:	76 a7       	std	Z+46, r23	; 0x2e
     9fc:	08 95       	ret

000009fe <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     9fe:	e0 91 96 01 	lds	r30, 0x0196
     a02:	f0 91 97 01 	lds	r31, 0x0197
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	25 e1       	ldi	r18, 0x15	; 21
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	ac 01       	movw	r20, r24
     a0e:	42 9f       	mul	r20, r18
     a10:	c0 01       	movw	r24, r0
     a12:	43 9f       	mul	r20, r19
     a14:	90 0d       	add	r25, r0
     a16:	52 9f       	mul	r21, r18
     a18:	90 0d       	add	r25, r0
     a1a:	11 24       	eor	r1, r1
     a1c:	e8 0f       	add	r30, r24
     a1e:	f9 1f       	adc	r31, r25
     a20:	86 8d       	ldd	r24, Z+30	; 0x1e
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     a22:	81 70       	andi	r24, 0x01	; 1
     a24:	08 95       	ret

00000a26 <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a26:	e0 91 96 01 	lds	r30, 0x0196
     a2a:	f0 91 97 01 	lds	r31, 0x0197
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	25 e1       	ldi	r18, 0x15	; 21
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	ac 01       	movw	r20, r24
     a36:	42 9f       	mul	r20, r18
     a38:	c0 01       	movw	r24, r0
     a3a:	43 9f       	mul	r20, r19
     a3c:	90 0d       	add	r25, r0
     a3e:	52 9f       	mul	r21, r18
     a40:	90 0d       	add	r25, r0
     a42:	11 24       	eor	r1, r1
     a44:	e8 0f       	add	r30, r24
     a46:	f9 1f       	adc	r31, r25
     a48:	86 8d       	ldd	r24, Z+30	; 0x1e
     a4a:	81 60       	ori	r24, 0x01	; 1
     a4c:	86 8f       	std	Z+30, r24	; 0x1e
}
     a4e:	08 95       	ret

00000a50 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a50:	e0 91 96 01 	lds	r30, 0x0196
     a54:	f0 91 97 01 	lds	r31, 0x0197
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	25 e1       	ldi	r18, 0x15	; 21
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	ac 01       	movw	r20, r24
     a60:	42 9f       	mul	r20, r18
     a62:	c0 01       	movw	r24, r0
     a64:	43 9f       	mul	r20, r19
     a66:	90 0d       	add	r25, r0
     a68:	52 9f       	mul	r21, r18
     a6a:	90 0d       	add	r25, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	e8 0f       	add	r30, r24
     a70:	f9 1f       	adc	r31, r25
     a72:	86 8d       	ldd	r24, Z+30	; 0x1e
     a74:	8e 7f       	andi	r24, 0xFE	; 254
     a76:	86 8f       	std	Z+30, r24	; 0x1e
}
     a78:	08 95       	ret

00000a7a <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     a7a:	e0 91 96 01 	lds	r30, 0x0196
     a7e:	f0 91 97 01 	lds	r31, 0x0197
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	25 e1       	ldi	r18, 0x15	; 21
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	ac 01       	movw	r20, r24
     a8a:	42 9f       	mul	r20, r18
     a8c:	c0 01       	movw	r24, r0
     a8e:	43 9f       	mul	r20, r19
     a90:	90 0d       	add	r25, r0
     a92:	52 9f       	mul	r21, r18
     a94:	90 0d       	add	r25, r0
     a96:	11 24       	eor	r1, r1
     a98:	e8 0f       	add	r30, r24
     a9a:	f9 1f       	adc	r31, r25
     a9c:	df 01       	movw	r26, r30
     a9e:	9f 96       	adiw	r26, 0x2f	; 47
     aa0:	67 a5       	ldd	r22, Z+47	; 0x2f
     aa2:	11 96       	adiw	r26, 0x01	; 1
     aa4:	7c 91       	ld	r23, X
     aa6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     aa8:	12 96       	adiw	r26, 0x02	; 2
     aaa:	8c 91       	ld	r24, X
     aac:	12 97       	sbiw	r26, 0x02	; 2
     aae:	13 96       	adiw	r26, 0x03	; 3
     ab0:	9c 91       	ld	r25, X
     ab2:	08 95       	ret

00000ab4 <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     ab4:	e0 91 96 01 	lds	r30, 0x0196
     ab8:	f0 91 97 01 	lds	r31, 0x0197
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	25 e1       	ldi	r18, 0x15	; 21
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	dc 01       	movw	r26, r24
     ac4:	a2 9f       	mul	r26, r18
     ac6:	c0 01       	movw	r24, r0
     ac8:	a3 9f       	mul	r26, r19
     aca:	90 0d       	add	r25, r0
     acc:	b2 9f       	mul	r27, r18
     ace:	90 0d       	add	r25, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	e8 0f       	add	r30, r24
     ad4:	f9 1f       	adc	r31, r25
     ad6:	47 a7       	std	Z+47, r20	; 0x2f
     ad8:	50 ab       	std	Z+48, r21	; 0x30
     ada:	61 ab       	std	Z+49, r22	; 0x31
     adc:	72 ab       	std	Z+50, r23	; 0x32
}
     ade:	08 95       	ret

00000ae0 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     ae0:	e0 91 96 01 	lds	r30, 0x0196
     ae4:	f0 91 97 01 	lds	r31, 0x0197
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	25 e1       	ldi	r18, 0x15	; 21
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	ac 01       	movw	r20, r24
     af0:	42 9f       	mul	r20, r18
     af2:	c0 01       	movw	r24, r0
     af4:	43 9f       	mul	r20, r19
     af6:	90 0d       	add	r25, r0
     af8:	52 9f       	mul	r21, r18
     afa:	90 0d       	add	r25, r0
     afc:	11 24       	eor	r1, r1
     afe:	e8 0f       	add	r30, r24
     b00:	f9 1f       	adc	r31, r25
     b02:	13 a2       	std	Z+35, r1	; 0x23
     b04:	14 a2       	std	Z+36, r1	; 0x24
     b06:	15 a2       	std	Z+37, r1	; 0x25
     b08:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b0a:	17 8e       	std	Z+31, r1	; 0x1f
     b0c:	10 a2       	std	Z+32, r1	; 0x20
     b0e:	11 a2       	std	Z+33, r1	; 0x21
     b10:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b12:	17 a2       	std	Z+39, r1	; 0x27
     b14:	10 a6       	std	Z+40, r1	; 0x28
     b16:	11 a6       	std	Z+41, r1	; 0x29
     b18:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b1a:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b1c:	80 7e       	andi	r24, 0xE0	; 224
     b1e:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b20:	17 a6       	std	Z+47, r1	; 0x2f
     b22:	10 aa       	std	Z+48, r1	; 0x30
     b24:	11 aa       	std	Z+49, r1	; 0x31
     b26:	12 aa       	std	Z+50, r1	; 0x32
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     b28:	08 95       	ret

00000b2a <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b2a:	e0 91 96 01 	lds	r30, 0x0196
     b2e:	f0 91 97 01 	lds	r31, 0x0197
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	25 e1       	ldi	r18, 0x15	; 21
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	ac 01       	movw	r20, r24
     b3a:	42 9f       	mul	r20, r18
     b3c:	c0 01       	movw	r24, r0
     b3e:	43 9f       	mul	r20, r19
     b40:	90 0d       	add	r25, r0
     b42:	52 9f       	mul	r21, r18
     b44:	90 0d       	add	r25, r0
     b46:	11 24       	eor	r1, r1
     b48:	e8 0f       	add	r30, r24
     b4a:	f9 1f       	adc	r31, r25
     b4c:	13 a2       	std	Z+35, r1	; 0x23
     b4e:	14 a2       	std	Z+36, r1	; 0x24
     b50:	15 a2       	std	Z+37, r1	; 0x25
     b52:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b54:	17 8e       	std	Z+31, r1	; 0x1f
     b56:	10 a2       	std	Z+32, r1	; 0x20
     b58:	11 a2       	std	Z+33, r1	; 0x21
     b5a:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b5c:	17 a2       	std	Z+39, r1	; 0x27
     b5e:	10 a6       	std	Z+40, r1	; 0x28
     b60:	11 a6       	std	Z+41, r1	; 0x29
     b62:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b64:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b66:	80 7e       	andi	r24, 0xE0	; 224
     b68:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b6a:	17 a6       	std	Z+47, r1	; 0x2f
     b6c:	10 aa       	std	Z+48, r1	; 0x30
     b6e:	11 aa       	std	Z+49, r1	; 0x31
     b70:	12 aa       	std	Z+50, r1	; 0x32
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     b72:	08 95       	ret

00000b74 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     b74:	e0 91 96 01 	lds	r30, 0x0196
     b78:	f0 91 97 01 	lds	r31, 0x0197
     b7c:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     b7e:	25 e1       	ldi	r18, 0x15	; 21
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	ac 01       	movw	r20, r24
     b84:	42 9f       	mul	r20, r18
     b86:	c0 01       	movw	r24, r0
     b88:	43 9f       	mul	r20, r19
     b8a:	90 0d       	add	r25, r0
     b8c:	52 9f       	mul	r21, r18
     b8e:	90 0d       	add	r25, r0
     b90:	11 24       	eor	r1, r1
     b92:	e8 0f       	add	r30, r24
     b94:	f9 1f       	adc	r31, r25
     b96:	96 8d       	ldd	r25, Z+30	; 0x1e
     b98:	89 2f       	mov	r24, r25
     b9a:	86 95       	lsr	r24
     b9c:	8f 70       	andi	r24, 0x0F	; 15
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	19 f0       	breq	.+6      	; 0xba8 <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ba2:	91 7e       	andi	r25, 0xE1	; 225
     ba4:	92 60       	ori	r25, 0x02	; 2
     ba6:	96 8f       	std	Z+30, r25	; 0x1e
     ba8:	08 95       	ret

00000baa <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     baa:	e0 91 96 01 	lds	r30, 0x0196
     bae:	f0 91 97 01 	lds	r31, 0x0197
     bb2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     bb4:	25 e1       	ldi	r18, 0x15	; 21
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	ac 01       	movw	r20, r24
     bba:	42 9f       	mul	r20, r18
     bbc:	c0 01       	movw	r24, r0
     bbe:	43 9f       	mul	r20, r19
     bc0:	90 0d       	add	r25, r0
     bc2:	52 9f       	mul	r21, r18
     bc4:	90 0d       	add	r25, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	e8 0f       	add	r30, r24
     bca:	f9 1f       	adc	r31, r25
     bcc:	96 8d       	ldd	r25, Z+30	; 0x1e
     bce:	89 2f       	mov	r24, r25
     bd0:	86 95       	lsr	r24
     bd2:	8f 70       	andi	r24, 0x0F	; 15
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	19 f0       	breq	.+6      	; 0xbde <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bd8:	91 7e       	andi	r25, 0xE1	; 225
     bda:	94 60       	ori	r25, 0x04	; 4
     bdc:	96 8f       	std	Z+30, r25	; 0x1e
     bde:	08 95       	ret

00000be0 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     be0:	2f 92       	push	r2
     be2:	3f 92       	push	r3
     be4:	4f 92       	push	r4
     be6:	5f 92       	push	r5
     be8:	6f 92       	push	r6
     bea:	7f 92       	push	r7
     bec:	8f 92       	push	r8
     bee:	9f 92       	push	r9
     bf0:	af 92       	push	r10
     bf2:	bf 92       	push	r11
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	28 97       	sbiw	r28, 0x08	; 8
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	1a 01       	movw	r2, r20
     c16:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c18:	20 91 96 01 	lds	r18, 0x0196
     c1c:	30 91 97 01 	lds	r19, 0x0197
     c20:	38 87       	std	Y+8, r19	; 0x08
     c22:	2f 83       	std	Y+7, r18	; 0x07
     c24:	a8 2f       	mov	r26, r24
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ba 83       	std	Y+2, r27	; 0x02
     c2a:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     c2c:	85 e1       	ldi	r24, 0x15	; 21
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	a8 9f       	mul	r26, r24
     c32:	f0 01       	movw	r30, r0
     c34:	a9 9f       	mul	r26, r25
     c36:	f0 0d       	add	r31, r0
     c38:	b8 9f       	mul	r27, r24
     c3a:	f0 0d       	add	r31, r0
     c3c:	11 24       	eor	r1, r1
     c3e:	e2 0f       	add	r30, r18
     c40:	f3 1f       	adc	r31, r19
     c42:	86 8d       	ldd	r24, Z+30	; 0x1e
     c44:	86 95       	lsr	r24
     c46:	8f 70       	andi	r24, 0x0F	; 15
     c48:	09 f0       	breq	.+2      	; 0xc4c <Timebase_DownCounter_SS_Set_Securely+0x6c>
     c4a:	80 c0       	rjmp	.+256    	; 0xd4c <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     c4c:	47 a3       	std	Z+39, r20	; 0x27
     c4e:	50 a7       	std	Z+40, r21	; 0x28
     c50:	61 a7       	std	Z+41, r22	; 0x29
     c52:	72 a7       	std	Z+42, r23	; 0x2a
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c54:	f9 01       	movw	r30, r18
     c56:	c2 84       	ldd	r12, Z+10	; 0x0a
     c58:	d3 84       	ldd	r13, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c5a:	d9 01       	movw	r26, r18
     c5c:	1c 96       	adiw	r26, 0x0c	; 12
     c5e:	8d 91       	ld	r24, X+
     c60:	9d 91       	ld	r25, X+
     c62:	0d 90       	ld	r0, X+
     c64:	bc 91       	ld	r27, X
     c66:	a0 2d       	mov	r26, r0
     c68:	8b 83       	std	Y+3, r24	; 0x03
     c6a:	9c 83       	std	Y+4, r25	; 0x04
     c6c:	ad 83       	std	Y+5, r26	; 0x05
     c6e:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     c70:	20 81       	ld	r18, Z
     c72:	31 81       	ldd	r19, Z+1	; 0x01
     c74:	40 e0       	ldi	r20, 0x00	; 0
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	c2 01       	movw	r24, r4
     c7a:	b1 01       	movw	r22, r2
     c7c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     c80:	7b 01       	movw	r14, r22
     c82:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     c84:	ef 81       	ldd	r30, Y+7	; 0x07
     c86:	f8 85       	ldd	r31, Y+8	; 0x08
     c88:	20 81       	ld	r18, Z
     c8a:	31 81       	ldd	r19, Z+1	; 0x01
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	c2 01       	movw	r24, r4
     c92:	b1 01       	movw	r22, r2
     c94:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     c98:	c9 01       	movw	r24, r18
     c9a:	da 01       	movw	r26, r20
     c9c:	3c 01       	movw	r6, r24
     c9e:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     ca0:	56 01       	movw	r10, r12
     ca2:	cc 24       	eor	r12, r12
     ca4:	dd 24       	eor	r13, r13
     ca6:	ae 0c       	add	r10, r14
     ca8:	bf 1c       	adc	r11, r15
     caa:	c0 1e       	adc	r12, r16
     cac:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     cae:	af 81       	ldd	r26, Y+7	; 0x07
     cb0:	b8 85       	ldd	r27, Y+8	; 0x08
     cb2:	8d 91       	ld	r24, X+
     cb4:	9c 91       	ld	r25, X
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	a8 16       	cp	r10, r24
     cbc:	b9 06       	cpc	r11, r25
     cbe:	ca 06       	cpc	r12, r26
     cc0:	db 06       	cpc	r13, r27
     cc2:	a4 f0       	brlt	.+40     	; 0xcec <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     cc4:	08 94       	sec
     cc6:	61 1c       	adc	r6, r1
     cc8:	71 1c       	adc	r7, r1
     cca:	81 1c       	adc	r8, r1
     ccc:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     cce:	ef 81       	ldd	r30, Y+7	; 0x07
     cd0:	f8 85       	ldd	r31, Y+8	; 0x08
     cd2:	20 81       	ld	r18, Z
     cd4:	31 81       	ldd	r19, Z+1	; 0x01
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	c6 01       	movw	r24, r12
     cdc:	b5 01       	movw	r22, r10
     cde:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     ce2:	ac 01       	movw	r20, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	da 01       	movw	r26, r20
     ce8:	5c 01       	movw	r10, r24
     cea:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     cec:	85 e1       	ldi	r24, 0x15	; 21
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	29 81       	ldd	r18, Y+1	; 0x01
     cf2:	3a 81       	ldd	r19, Y+2	; 0x02
     cf4:	28 9f       	mul	r18, r24
     cf6:	a0 01       	movw	r20, r0
     cf8:	29 9f       	mul	r18, r25
     cfa:	50 0d       	add	r21, r0
     cfc:	38 9f       	mul	r19, r24
     cfe:	50 0d       	add	r21, r0
     d00:	11 24       	eor	r1, r1
     d02:	8f 81       	ldd	r24, Y+7	; 0x07
     d04:	98 85       	ldd	r25, Y+8	; 0x08
     d06:	48 0f       	add	r20, r24
     d08:	59 1f       	adc	r21, r25
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	9c 81       	ldd	r25, Y+4	; 0x04
     d0e:	ad 81       	ldd	r26, Y+5	; 0x05
     d10:	be 81       	ldd	r27, Y+6	; 0x06
     d12:	86 0d       	add	r24, r6
     d14:	97 1d       	adc	r25, r7
     d16:	a8 1d       	adc	r26, r8
     d18:	b9 1d       	adc	r27, r9
     d1a:	fa 01       	movw	r30, r20
     d1c:	87 8f       	std	Z+31, r24	; 0x1f
     d1e:	90 a3       	std	Z+32, r25	; 0x20
     d20:	a1 a3       	std	Z+33, r26	; 0x21
     d22:	b2 a3       	std	Z+34, r27	; 0x22
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d24:	da 01       	movw	r26, r20
     d26:	93 96       	adiw	r26, 0x23	; 35
     d28:	ad 92       	st	X+, r10
     d2a:	bd 92       	st	X+, r11
     d2c:	cd 92       	st	X+, r12
     d2e:	dc 92       	st	X, r13
     d30:	96 97       	sbiw	r26, 0x26	; 38
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d32:	27 a6       	std	Z+47, r2	; 0x2f
     d34:	30 aa       	std	Z+48, r3	; 0x30
     d36:	41 aa       	std	Z+49, r4	; 0x31
     d38:	52 aa       	std	Z+50, r5	; 0x32
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     d3a:	96 8d       	ldd	r25, Z+30	; 0x1e
     d3c:	89 2f       	mov	r24, r25
     d3e:	86 95       	lsr	r24
     d40:	8f 70       	andi	r24, 0x0F	; 15
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	19 f0       	breq	.+6      	; 0xd4c <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d46:	91 7e       	andi	r25, 0xE1	; 225
     d48:	92 60       	ori	r25, 0x02	; 2
     d4a:	96 8f       	std	Z+30, r25	; 0x1e
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     d4c:	28 96       	adiw	r28, 0x08	; 8
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
     d68:	bf 90       	pop	r11
     d6a:	af 90       	pop	r10
     d6c:	9f 90       	pop	r9
     d6e:	8f 90       	pop	r8
     d70:	7f 90       	pop	r7
     d72:	6f 90       	pop	r6
     d74:	5f 90       	pop	r5
     d76:	4f 90       	pop	r4
     d78:	3f 90       	pop	r3
     d7a:	2f 90       	pop	r2
     d7c:	08 95       	ret

00000d7e <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     d7e:	cf 92       	push	r12
     d80:	df 92       	push	r13
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	7a 01       	movw	r14, r20
     d8c:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d8e:	e0 91 96 01 	lds	r30, 0x0196
     d92:	f0 91 97 01 	lds	r31, 0x0197
     d96:	48 2f       	mov	r20, r24
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	25 e1       	ldi	r18, 0x15	; 21
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	42 9f       	mul	r20, r18
     da0:	60 01       	movw	r12, r0
     da2:	43 9f       	mul	r20, r19
     da4:	d0 0c       	add	r13, r0
     da6:	52 9f       	mul	r21, r18
     da8:	d0 0c       	add	r13, r0
     daa:	11 24       	eor	r1, r1
     dac:	ec 0d       	add	r30, r12
     dae:	fd 1d       	adc	r31, r13
     db0:	13 a2       	std	Z+35, r1	; 0x23
     db2:	14 a2       	std	Z+36, r1	; 0x24
     db4:	15 a2       	std	Z+37, r1	; 0x25
     db6:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     db8:	17 8e       	std	Z+31, r1	; 0x1f
     dba:	10 a2       	std	Z+32, r1	; 0x20
     dbc:	11 a2       	std	Z+33, r1	; 0x21
     dbe:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     dc0:	17 a2       	std	Z+39, r1	; 0x27
     dc2:	10 a6       	std	Z+40, r1	; 0x28
     dc4:	11 a6       	std	Z+41, r1	; 0x29
     dc6:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     dc8:	96 8d       	ldd	r25, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     dca:	90 7e       	andi	r25, 0xE0	; 224
     dcc:	96 8f       	std	Z+30, r25	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dce:	17 a6       	std	Z+47, r1	; 0x2f
     dd0:	10 aa       	std	Z+48, r1	; 0x30
     dd2:	11 aa       	std	Z+49, r1	; 0x31
     dd4:	12 aa       	std	Z+50, r1	; 0x32
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     dd6:	b8 01       	movw	r22, r16
     dd8:	a7 01       	movw	r20, r14
     dda:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dde:	e0 91 96 01 	lds	r30, 0x0196
     de2:	f0 91 97 01 	lds	r31, 0x0197
     de6:	ec 0d       	add	r30, r12
     de8:	fd 1d       	adc	r31, r13
     dea:	e7 a6       	std	Z+47, r14	; 0x2f
     dec:	f0 aa       	std	Z+48, r15	; 0x30
     dee:	01 ab       	std	Z+49, r16	; 0x31
     df0:	12 ab       	std	Z+50, r17	; 0x32

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	08 95       	ret

00000e00 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     e00:	2f 92       	push	r2
     e02:	3f 92       	push	r3
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e24:	e0 91 96 01 	lds	r30, 0x0196
     e28:	f0 91 97 01 	lds	r31, 0x0197
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	25 e1       	ldi	r18, 0x15	; 21
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	82 9f       	mul	r24, r18
     e34:	e0 01       	movw	r28, r0
     e36:	83 9f       	mul	r24, r19
     e38:	d0 0d       	add	r29, r0
     e3a:	92 9f       	mul	r25, r18
     e3c:	d0 0d       	add	r29, r0
     e3e:	11 24       	eor	r1, r1
     e40:	ce 0f       	add	r28, r30
     e42:	df 1f       	adc	r29, r31
     e44:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e46:	86 95       	lsr	r24
     e48:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     e4a:	81 30       	cpi	r24, 0x01	; 1
     e4c:	09 f0       	breq	.+2      	; 0xe50 <Timebase_DownCounter_SS_Update+0x50>
     e4e:	48 c0       	rjmp	.+144    	; 0xee0 <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e50:	e2 84       	ldd	r14, Z+10	; 0x0a
     e52:	f3 84       	ldd	r15, Z+11	; 0x0b

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     e54:	00 e0       	ldi	r16, 0x00	; 0
     e56:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e58:	84 85       	ldd	r24, Z+12	; 0x0c
     e5a:	95 85       	ldd	r25, Z+13	; 0x0d
     e5c:	a6 85       	ldd	r26, Z+14	; 0x0e
     e5e:	b7 85       	ldd	r27, Z+15	; 0x0f
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     e60:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e62:	38 a1       	ldd	r19, Y+32	; 0x20
     e64:	49 a1       	ldd	r20, Y+33	; 0x21
     e66:	5a a1       	ldd	r21, Y+34	; 0x22
     e68:	28 1b       	sub	r18, r24
     e6a:	39 0b       	sbc	r19, r25
     e6c:	4a 0b       	sbc	r20, r26
     e6e:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     e70:	60 81       	ld	r22, Z
     e72:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulsi3>
     e7c:	6e 19       	sub	r22, r14
     e7e:	7f 09       	sbc	r23, r15
     e80:	80 0b       	sbc	r24, r16
     e82:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     e84:	2b a1       	ldd	r18, Y+35	; 0x23
     e86:	3c a1       	ldd	r19, Y+36	; 0x24
     e88:	4d a1       	ldd	r20, Y+37	; 0x25
     e8a:	5e a1       	ldd	r21, Y+38	; 0x26
     e8c:	62 0f       	add	r22, r18
     e8e:	73 1f       	adc	r23, r19
     e90:	84 1f       	adc	r24, r20
     e92:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e94:	6f a3       	std	Y+39, r22	; 0x27
     e96:	78 a7       	std	Y+40, r23	; 0x28
     e98:	89 a7       	std	Y+41, r24	; 0x29
     e9a:	9a a7       	std	Y+42, r25	; 0x2a
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     e9c:	16 16       	cp	r1, r22
     e9e:	17 06       	cpc	r1, r23
     ea0:	18 06       	cpc	r1, r24
     ea2:	19 06       	cpc	r1, r25
     ea4:	0c f4       	brge	.+2      	; 0xea8 <Timebase_DownCounter_SS_Update+0xa8>
     ea6:	4c c0       	rjmp	.+152    	; 0xf40 <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eaa:	98 a9       	ldd	r25, Y+48	; 0x30
     eac:	a9 a9       	ldd	r26, Y+49	; 0x31
     eae:	ba a9       	ldd	r27, Y+50	; 0x32
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     eb0:	1b a2       	std	Y+35, r1	; 0x23
     eb2:	1c a2       	std	Y+36, r1	; 0x24
     eb4:	1d a2       	std	Y+37, r1	; 0x25
     eb6:	1e a2       	std	Y+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     eb8:	1f 8e       	std	Y+31, r1	; 0x1f
     eba:	18 a2       	std	Y+32, r1	; 0x20
     ebc:	19 a2       	std	Y+33, r1	; 0x21
     ebe:	1a a2       	std	Y+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ec0:	1f a2       	std	Y+39, r1	; 0x27
     ec2:	18 a6       	std	Y+40, r1	; 0x28
     ec4:	19 a6       	std	Y+41, r1	; 0x29
     ec6:	1a a6       	std	Y+42, r1	; 0x2a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ec8:	2e 8d       	ldd	r18, Y+30	; 0x1e
     eca:	2e 7f       	andi	r18, 0xFE	; 254
     ecc:	2e 8f       	std	Y+30, r18	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     ece:	8f a7       	std	Y+47, r24	; 0x2f
     ed0:	98 ab       	std	Y+48, r25	; 0x30
     ed2:	a9 ab       	std	Y+49, r26	; 0x31
     ed4:	ba ab       	std	Y+50, r27	; 0x32
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ed8:	81 7e       	andi	r24, 0xE1	; 225
     eda:	88 60       	ori	r24, 0x08	; 8
     edc:	8e 8f       	std	Y+30, r24	; 0x1e
     ede:	30 c0       	rjmp	.+96     	; 0xf40 <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	71 f5       	brne	.+92     	; 0xf40 <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ee4:	62 84       	ldd	r6, Z+10	; 0x0a
     ee6:	73 84       	ldd	r7, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ee8:	e4 84       	ldd	r14, Z+12	; 0x0c
     eea:	f5 84       	ldd	r15, Z+13	; 0x0d
     eec:	06 85       	ldd	r16, Z+14	; 0x0e
     eee:	17 85       	ldd	r17, Z+15	; 0x0f
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     ef0:	2f a0       	ldd	r2, Y+39	; 0x27
     ef2:	38 a4       	ldd	r3, Y+40	; 0x28
     ef4:	49 a4       	ldd	r4, Y+41	; 0x29
     ef6:	5a a4       	ldd	r5, Y+42	; 0x2a
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     ef8:	20 81       	ld	r18, Z
     efa:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     efc:	a0 80       	ld	r10, Z
     efe:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	c2 01       	movw	r24, r4
     f06:	b1 01       	movw	r22, r2
     f08:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     f0c:	e2 0e       	add	r14, r18
     f0e:	f3 1e       	adc	r15, r19
     f10:	04 1f       	adc	r16, r20
     f12:	15 1f       	adc	r17, r21
     f14:	ef 8e       	std	Y+31, r14	; 0x1f
     f16:	f8 a2       	std	Y+32, r15	; 0x20
     f18:	09 a3       	std	Y+33, r16	; 0x21
     f1a:	1a a3       	std	Y+34, r17	; 0x22
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     f1c:	cc 24       	eor	r12, r12
     f1e:	dd 24       	eor	r13, r13
     f20:	c2 01       	movw	r24, r4
     f22:	b1 01       	movw	r22, r2
     f24:	a6 01       	movw	r20, r12
     f26:	95 01       	movw	r18, r10
     f28:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
     f2c:	88 24       	eor	r8, r8
     f2e:	99 24       	eor	r9, r9
     f30:	66 0e       	add	r6, r22
     f32:	77 1e       	adc	r7, r23
     f34:	88 1e       	adc	r8, r24
     f36:	99 1e       	adc	r9, r25
     f38:	6b a2       	std	Y+35, r6	; 0x23
     f3a:	7c a2       	std	Y+36, r7	; 0x24
     f3c:	8d a2       	std	Y+37, r8	; 0x25
     f3e:	9e a2       	std	Y+38, r9	; 0x26
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	5f 90       	pop	r5
     f5e:	4f 90       	pop	r4
     f60:	3f 90       	pop	r3
     f62:	2f 90       	pop	r2
     f64:	08 95       	ret

00000f66 <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	e0 91 96 01 	lds	r30, 0x0196
     f6c:	f0 91 97 01 	lds	r31, 0x0197
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	25 e1       	ldi	r18, 0x15	; 21
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	bc 01       	movw	r22, r24
     f78:	62 9f       	mul	r22, r18
     f7a:	c0 01       	movw	r24, r0
     f7c:	63 9f       	mul	r22, r19
     f7e:	90 0d       	add	r25, r0
     f80:	72 9f       	mul	r23, r18
     f82:	90 0d       	add	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	e8 0f       	add	r30, r24
     f88:	f9 1f       	adc	r31, r25
     f8a:	86 8d       	ldd	r24, Z+30	; 0x1e
     f8c:	86 95       	lsr	r24
     f8e:	8f 70       	andi	r24, 0x0F	; 15
     f90:	84 30       	cpi	r24, 0x04	; 4
     f92:	09 f4       	brne	.+2      	; 0xf96 <Timebase_DownCounter_SS_Expired+0x30>
     f94:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     f96:	84 2f       	mov	r24, r20
     f98:	08 95       	ret

00000f9a <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     f9a:	e0 91 96 01 	lds	r30, 0x0196
     f9e:	f0 91 97 01 	lds	r31, 0x0197
     fa2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     fa4:	25 e1       	ldi	r18, 0x15	; 21
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	ac 01       	movw	r20, r24
     faa:	42 9f       	mul	r20, r18
     fac:	c0 01       	movw	r24, r0
     fae:	43 9f       	mul	r20, r19
     fb0:	90 0d       	add	r25, r0
     fb2:	52 9f       	mul	r21, r18
     fb4:	90 0d       	add	r25, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	e8 0f       	add	r30, r24
     fba:	f9 1f       	adc	r31, r25
     fbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     fbe:	86 95       	lsr	r24
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	84 30       	cpi	r24, 0x04	; 4
     fc4:	11 f0       	breq	.+4      	; 0xfca <Timebase_DownCounter_SS_Expired_Event+0x30>
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     fca:	13 a2       	std	Z+35, r1	; 0x23
     fcc:	14 a2       	std	Z+36, r1	; 0x24
     fce:	15 a2       	std	Z+37, r1	; 0x25
     fd0:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     fd2:	17 8e       	std	Z+31, r1	; 0x1f
     fd4:	10 a2       	std	Z+32, r1	; 0x20
     fd6:	11 a2       	std	Z+33, r1	; 0x21
     fd8:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     fda:	17 a2       	std	Z+39, r1	; 0x27
     fdc:	10 a6       	std	Z+40, r1	; 0x28
     fde:	11 a6       	std	Z+41, r1	; 0x29
     fe0:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     fe2:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     fe4:	80 7e       	andi	r24, 0xE0	; 224
     fe6:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     fe8:	17 a6       	std	Z+47, r1	; 0x2f
     fea:	10 aa       	std	Z+48, r1	; 0x30
     fec:	11 aa       	std	Z+49, r1	; 0x31
     fee:	12 aa       	std	Z+50, r1	; 0x32
     ff0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     ff2:	08 95       	ret

00000ff4 <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
     ff4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <Timebase_DownCounter_SS_Expired_Event>
}
     ff8:	08 95       	ret

00000ffa <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
     ffa:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     ffc:	e0 91 96 01 	lds	r30, 0x0196
    1000:	f0 91 97 01 	lds	r31, 0x0197
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1008:	85 e1       	ldi	r24, 0x15	; 21
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	ac 01       	movw	r20, r24
    100e:	24 9f       	mul	r18, r20
    1010:	c0 01       	movw	r24, r0
    1012:	25 9f       	mul	r18, r21
    1014:	90 0d       	add	r25, r0
    1016:	34 9f       	mul	r19, r20
    1018:	90 0d       	add	r25, r0
    101a:	11 24       	eor	r1, r1
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	86 8d       	ldd	r24, Z+30	; 0x1e
    1022:	86 95       	lsr	r24
    1024:	8f 70       	andi	r24, 0x0F	; 15
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	11 f0       	breq	.+4      	; 0x102e <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    102e:	47 a5       	ldd	r20, Z+47	; 0x2f
    1030:	50 a9       	ldd	r21, Z+48	; 0x30
    1032:	61 a9       	ldd	r22, Z+49	; 0x31
    1034:	72 a9       	ldd	r23, Z+50	; 0x32
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1036:	13 a2       	std	Z+35, r1	; 0x23
    1038:	14 a2       	std	Z+36, r1	; 0x24
    103a:	15 a2       	std	Z+37, r1	; 0x25
    103c:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    103e:	17 8e       	std	Z+31, r1	; 0x1f
    1040:	10 a2       	std	Z+32, r1	; 0x20
    1042:	11 a2       	std	Z+33, r1	; 0x21
    1044:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1046:	17 a2       	std	Z+39, r1	; 0x27
    1048:	10 a6       	std	Z+40, r1	; 0x28
    104a:	11 a6       	std	Z+41, r1	; 0x29
    104c:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    104e:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1050:	80 7e       	andi	r24, 0xE0	; 224
    1052:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1054:	17 a6       	std	Z+47, r1	; 0x2f
    1056:	10 aa       	std	Z+48, r1	; 0x30
    1058:	11 aa       	std	Z+49, r1	; 0x31
    105a:	12 aa       	std	Z+50, r1	; 0x32

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    105c:	8a 2f       	mov	r24, r26
    105e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Timebase_DownCounter_SS_Set_Securely>
    1062:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1064:	08 95       	ret

00001066 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    106a:	c0 91 96 01 	lds	r28, 0x0196
    106e:	d0 91 97 01 	lds	r29, 0x0197
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1076:	85 e1       	ldi	r24, 0x15	; 21
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	28 9f       	mul	r18, r24
    107c:	f0 01       	movw	r30, r0
    107e:	29 9f       	mul	r18, r25
    1080:	f0 0d       	add	r31, r0
    1082:	38 9f       	mul	r19, r24
    1084:	f0 0d       	add	r31, r0
    1086:	11 24       	eor	r1, r1
    1088:	ec 0f       	add	r30, r28
    108a:	fd 1f       	adc	r31, r29
    108c:	86 8d       	ldd	r24, Z+30	; 0x1e
    108e:	80 fd       	sbrc	r24, 0
    1090:	21 c0       	rjmp	.+66     	; 0x10d4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1092:	87 a1       	ldd	r24, Z+39	; 0x27
    1094:	90 a5       	ldd	r25, Z+40	; 0x28
    1096:	a1 a5       	ldd	r26, Z+41	; 0x29
    1098:	b2 a5       	ldd	r27, Z+42	; 0x2a
    109a:	84 1b       	sub	r24, r20
    109c:	95 0b       	sbc	r25, r21
    109e:	a6 0b       	sbc	r26, r22
    10a0:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    10a2:	b7 ff       	sbrs	r27, 7
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    10a6:	13 a6       	std	Z+43, r1	; 0x2b
    10a8:	14 a6       	std	Z+44, r1	; 0x2c
    10aa:	15 a6       	std	Z+45, r1	; 0x2d
    10ac:	16 a6       	std	Z+46, r1	; 0x2e
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    10b0:	83 a7       	std	Z+43, r24	; 0x2b
    10b2:	94 a7       	std	Z+44, r25	; 0x2c
    10b4:	a5 a7       	std	Z+45, r26	; 0x2d
    10b6:	b6 a7       	std	Z+46, r27	; 0x2e
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    10b8:	85 e1       	ldi	r24, 0x15	; 21
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	28 9f       	mul	r18, r24
    10be:	f0 01       	movw	r30, r0
    10c0:	29 9f       	mul	r18, r25
    10c2:	f0 0d       	add	r31, r0
    10c4:	38 9f       	mul	r19, r24
    10c6:	f0 0d       	add	r31, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	ec 0f       	add	r30, r28
    10cc:	fd 1f       	adc	r31, r29
    10ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    10d0:	81 60       	ori	r24, 0x01	; 1
    10d2:	86 8f       	std	Z+30, r24	; 0x1e
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    10da:	e0 91 96 01 	lds	r30, 0x0196
    10de:	f0 91 97 01 	lds	r31, 0x0197
    10e2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    10e4:	25 e1       	ldi	r18, 0x15	; 21
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	ac 01       	movw	r20, r24
    10ea:	42 9f       	mul	r20, r18
    10ec:	c0 01       	movw	r24, r0
    10ee:	43 9f       	mul	r20, r19
    10f0:	90 0d       	add	r25, r0
    10f2:	52 9f       	mul	r21, r18
    10f4:	90 0d       	add	r25, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	e8 0f       	add	r30, r24
    10fa:	f9 1f       	adc	r31, r25
    10fc:	27 a1       	ldd	r18, Z+39	; 0x27
    10fe:	30 a5       	ldd	r19, Z+40	; 0x28
    1100:	41 a5       	ldd	r20, Z+41	; 0x29
    1102:	52 a5       	ldd	r21, Z+42	; 0x2a
    1104:	83 a5       	ldd	r24, Z+43	; 0x2b
    1106:	94 a5       	ldd	r25, Z+44	; 0x2c
    1108:	a5 a5       	ldd	r26, Z+45	; 0x2d
    110a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    110c:	28 1b       	sub	r18, r24
    110e:	39 0b       	sbc	r19, r25
    1110:	4a 0b       	sbc	r20, r26
    1112:	5b 0b       	sbc	r21, r27
    1114:	57 ff       	sbrs	r21, 7
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1120:	b9 01       	movw	r22, r18
    1122:	ca 01       	movw	r24, r20
    1124:	08 95       	ret

00001126 <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    112a:	c0 91 96 01 	lds	r28, 0x0196
    112e:	d0 91 97 01 	lds	r29, 0x0197
    1132:	68 2f       	mov	r22, r24
    1134:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1136:	85 e1       	ldi	r24, 0x15	; 21
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	68 9f       	mul	r22, r24
    113c:	f0 01       	movw	r30, r0
    113e:	69 9f       	mul	r22, r25
    1140:	f0 0d       	add	r31, r0
    1142:	78 9f       	mul	r23, r24
    1144:	f0 0d       	add	r31, r0
    1146:	11 24       	eor	r1, r1
    1148:	ec 0f       	add	r30, r28
    114a:	fd 1f       	adc	r31, r29
    114c:	27 a1       	ldd	r18, Z+39	; 0x27
    114e:	30 a5       	ldd	r19, Z+40	; 0x28
    1150:	41 a5       	ldd	r20, Z+41	; 0x29
    1152:	52 a5       	ldd	r21, Z+42	; 0x2a
    1154:	83 a5       	ldd	r24, Z+43	; 0x2b
    1156:	94 a5       	ldd	r25, Z+44	; 0x2c
    1158:	a5 a5       	ldd	r26, Z+45	; 0x2d
    115a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    115c:	28 1b       	sub	r18, r24
    115e:	39 0b       	sbc	r19, r25
    1160:	4a 0b       	sbc	r20, r26
    1162:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1164:	57 fd       	sbrc	r21, 7
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1168:	21 15       	cp	r18, r1
    116a:	31 05       	cpc	r19, r1
    116c:	41 05       	cpc	r20, r1
    116e:	51 05       	cpc	r21, r1
    1170:	11 f0       	breq	.+4      	; 0x1176 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	12 c0       	rjmp	.+36     	; 0x119a <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	85 e1       	ldi	r24, 0x15	; 21
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	ac 01       	movw	r20, r24
    117e:	64 9f       	mul	r22, r20
    1180:	c0 01       	movw	r24, r0
    1182:	65 9f       	mul	r22, r21
    1184:	90 0d       	add	r25, r0
    1186:	74 9f       	mul	r23, r20
    1188:	90 0d       	add	r25, r0
    118a:	11 24       	eor	r1, r1
    118c:	c8 0f       	add	r28, r24
    118e:	d9 1f       	adc	r29, r25
    1190:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1192:	80 ff       	sbrs	r24, 0
    1194:	21 e0       	ldi	r18, 0x01	; 1
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    119a:	82 2f       	mov	r24, r18
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    11a2:	1f 93       	push	r17
    11a4:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    11a6:	0e 94 93 08 	call	0x1126	; 0x1126 <Timebase_DownCounter_SS_Period_Value_Expired>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	11 f0       	breq	.+4      	; 0x11b2 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	16 c0       	rjmp	.+44     	; 0x11de <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    11b2:	e0 91 96 01 	lds	r30, 0x0196
    11b6:	f0 91 97 01 	lds	r31, 0x0197
    11ba:	21 2f       	mov	r18, r17
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	85 e1       	ldi	r24, 0x15	; 21
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	ac 01       	movw	r20, r24
    11c4:	24 9f       	mul	r18, r20
    11c6:	c0 01       	movw	r24, r0
    11c8:	25 9f       	mul	r18, r21
    11ca:	90 0d       	add	r25, r0
    11cc:	34 9f       	mul	r19, r20
    11ce:	90 0d       	add	r25, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	e8 0f       	add	r30, r24
    11d4:	f9 1f       	adc	r31, r25
    11d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    11d8:	8e 7f       	andi	r24, 0xFE	; 254
    11da:	86 8f       	std	Z+30, r24	; 0x1e
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11de:	1f 91       	pop	r17
    11e0:	08 95       	ret

000011e2 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	0e 94 00 07 	call	0xe00	; 0xe00 <Timebase_DownCounter_SS_Update>
  }
}
    11e8:	08 95       	ret

000011ea <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    11ea:	e0 91 96 01 	lds	r30, 0x0196
    11ee:	f0 91 97 01 	lds	r31, 0x0197
    11f2:	13 a2       	std	Z+35, r1	; 0x23
    11f4:	14 a2       	std	Z+36, r1	; 0x24
    11f6:	15 a2       	std	Z+37, r1	; 0x25
    11f8:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    11fa:	17 8e       	std	Z+31, r1	; 0x1f
    11fc:	10 a2       	std	Z+32, r1	; 0x20
    11fe:	11 a2       	std	Z+33, r1	; 0x21
    1200:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1202:	17 a2       	std	Z+39, r1	; 0x27
    1204:	10 a6       	std	Z+40, r1	; 0x28
    1206:	11 a6       	std	Z+41, r1	; 0x29
    1208:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    120a:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    120c:	80 7e       	andi	r24, 0xE0	; 224
    120e:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1210:	17 a6       	std	Z+47, r1	; 0x2f
    1212:	10 aa       	std	Z+48, r1	; 0x30
    1214:	11 aa       	std	Z+49, r1	; 0x31
    1216:	12 aa       	std	Z+50, r1	; 0x32

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1218:	08 95       	ret

0000121a <Timebase_LPDownCounter_Get_Status>:


/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
    121a:	e0 91 96 01 	lds	r30, 0x0196
    121e:	f0 91 97 01 	lds	r31, 0x0197
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9c 01       	movw	r18, r24
    1226:	44 e0       	ldi	r20, 0x04	; 4
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	4a 95       	dec	r20
    122e:	e1 f7       	brne	.-8      	; 0x1228 <Timebase_LPDownCounter_Get_Status+0xe>
    1230:	28 0f       	add	r18, r24
    1232:	39 1f       	adc	r19, r25
    1234:	e2 0f       	add	r30, r18
    1236:	f3 1f       	adc	r31, r19
    1238:	83 a9       	ldd	r24, Z+51	; 0x33
    123a:	86 95       	lsr	r24
  return Timebase->LPDownCounter[window].Status.Value;
}
    123c:	8f 70       	andi	r24, 0x0F	; 15
    123e:	08 95       	ret

00001240 <Timebase_LPDownCounter_Set_Status>:


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1240:	e0 91 96 01 	lds	r30, 0x0196
    1244:	f0 91 97 01 	lds	r31, 0x0197
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9c 01       	movw	r18, r24
    124c:	54 e0       	ldi	r21, 0x04	; 4
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	5a 95       	dec	r21
    1254:	e1 f7       	brne	.-8      	; 0x124e <Timebase_LPDownCounter_Set_Status+0xe>
    1256:	28 0f       	add	r18, r24
    1258:	39 1f       	adc	r19, r25
    125a:	e2 0f       	add	r30, r18
    125c:	f3 1f       	adc	r31, r19
    125e:	6f 70       	andi	r22, 0x0F	; 15
    1260:	66 0f       	add	r22, r22
    1262:	83 a9       	ldd	r24, Z+51	; 0x33
    1264:	81 7e       	andi	r24, 0xE1	; 225
    1266:	86 2b       	or	r24, r22
    1268:	83 ab       	std	Z+51, r24	; 0x33
}
    126a:	08 95       	ret

0000126c <Timebase_LPDownCounter_Get_Value>:


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
    126c:	e0 91 96 01 	lds	r30, 0x0196
    1270:	f0 91 97 01 	lds	r31, 0x0197
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c 01       	movw	r18, r24
    1278:	64 e0       	ldi	r22, 0x04	; 4
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	6a 95       	dec	r22
    1280:	e1 f7       	brne	.-8      	; 0x127a <Timebase_LPDownCounter_Get_Value+0xe>
    1282:	28 0f       	add	r18, r24
    1284:	39 1f       	adc	r19, r25
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	df 01       	movw	r26, r30
    128c:	d8 96       	adiw	r26, 0x38	; 56
    128e:	60 ad       	ldd	r22, Z+56	; 0x38
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	7c 91       	ld	r23, X
    1294:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].Value;
}
    1296:	12 96       	adiw	r26, 0x02	; 2
    1298:	8c 91       	ld	r24, X
    129a:	12 97       	sbiw	r26, 0x02	; 2
    129c:	13 96       	adiw	r26, 0x03	; 3
    129e:	9c 91       	ld	r25, X
    12a0:	08 95       	ret

000012a2 <Timebase_LPDownCounter_Set_Value>:


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    12a2:	e0 91 96 01 	lds	r30, 0x0196
    12a6:	f0 91 97 01 	lds	r31, 0x0197
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	9c 01       	movw	r18, r24
    12ae:	a4 e0       	ldi	r26, 0x04	; 4
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	aa 95       	dec	r26
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <Timebase_LPDownCounter_Set_Value+0xe>
    12b8:	28 0f       	add	r18, r24
    12ba:	39 1f       	adc	r19, r25
    12bc:	e2 0f       	add	r30, r18
    12be:	f3 1f       	adc	r31, r19
    12c0:	40 af       	std	Z+56, r20	; 0x38
    12c2:	51 af       	std	Z+57, r21	; 0x39
    12c4:	62 af       	std	Z+58, r22	; 0x3a
    12c6:	73 af       	std	Z+59, r23	; 0x3b
}
    12c8:	08 95       	ret

000012ca <Timebase_LPDownCounter_Get_EndValue>:


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
    12ca:	e0 91 96 01 	lds	r30, 0x0196
    12ce:	f0 91 97 01 	lds	r31, 0x0197
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9c 01       	movw	r18, r24
    12d6:	b4 e0       	ldi	r27, 0x04	; 4
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	ba 95       	dec	r27
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <Timebase_LPDownCounter_Get_EndValue+0xe>
    12e0:	28 0f       	add	r18, r24
    12e2:	39 1f       	adc	r19, r25
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	df 01       	movw	r26, r30
    12ea:	d4 96       	adiw	r26, 0x34	; 52
    12ec:	64 a9       	ldd	r22, Z+52	; 0x34
    12ee:	11 96       	adiw	r26, 0x01	; 1
    12f0:	7c 91       	ld	r23, X
    12f2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].EndValue;
}
    12f4:	12 96       	adiw	r26, 0x02	; 2
    12f6:	8c 91       	ld	r24, X
    12f8:	12 97       	sbiw	r26, 0x02	; 2
    12fa:	13 96       	adiw	r26, 0x03	; 3
    12fc:	9c 91       	ld	r25, X
    12fe:	08 95       	ret

00001300 <Timebase_LPDownCounter_Set_EndValue>:


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1300:	e0 91 96 01 	lds	r30, 0x0196
    1304:	f0 91 97 01 	lds	r31, 0x0197
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9c 01       	movw	r18, r24
    130c:	a4 e0       	ldi	r26, 0x04	; 4
    130e:	22 0f       	add	r18, r18
    1310:	33 1f       	adc	r19, r19
    1312:	aa 95       	dec	r26
    1314:	e1 f7       	brne	.-8      	; 0x130e <Timebase_LPDownCounter_Set_EndValue+0xe>
    1316:	28 0f       	add	r18, r24
    1318:	39 1f       	adc	r19, r25
    131a:	e2 0f       	add	r30, r18
    131c:	f3 1f       	adc	r31, r19
    131e:	44 ab       	std	Z+52, r20	; 0x34
    1320:	55 ab       	std	Z+53, r21	; 0x35
    1322:	66 ab       	std	Z+54, r22	; 0x36
    1324:	77 ab       	std	Z+55, r23	; 0x37
}
    1326:	08 95       	ret

00001328 <Timebase_LPDownCounter_Get_PeriodValue>:


int32_t Timebase_LPDownCounter_Get_PeriodValue(uint8_t window){
    1328:	e0 91 96 01 	lds	r30, 0x0196
    132c:	f0 91 97 01 	lds	r31, 0x0197
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	9c 01       	movw	r18, r24
    1334:	b4 e0       	ldi	r27, 0x04	; 4
    1336:	22 0f       	add	r18, r18
    1338:	33 1f       	adc	r19, r19
    133a:	ba 95       	dec	r27
    133c:	e1 f7       	brne	.-8      	; 0x1336 <Timebase_LPDownCounter_Get_PeriodValue+0xe>
    133e:	28 0f       	add	r18, r24
    1340:	39 1f       	adc	r19, r25
    1342:	e2 0f       	add	r30, r18
    1344:	f3 1f       	adc	r31, r19
    1346:	df 01       	movw	r26, r30
    1348:	dc 96       	adiw	r26, 0x3c	; 60
    134a:	64 ad       	ldd	r22, Z+60	; 0x3c
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	7c 91       	ld	r23, X
    1350:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].PeriodValue;
}
    1352:	12 96       	adiw	r26, 0x02	; 2
    1354:	8c 91       	ld	r24, X
    1356:	12 97       	sbiw	r26, 0x02	; 2
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	9c 91       	ld	r25, X
    135c:	08 95       	ret

0000135e <Timebase_LPDownCounter_Set_PeriodValue>:


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    135e:	e0 91 96 01 	lds	r30, 0x0196
    1362:	f0 91 97 01 	lds	r31, 0x0197
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    136a:	77 ff       	sbrs	r23, 7
    136c:	0f c0       	rjmp	.+30     	; 0x138c <Timebase_LPDownCounter_Set_PeriodValue+0x2e>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    136e:	c9 01       	movw	r24, r18
    1370:	b4 e0       	ldi	r27, 0x04	; 4
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	ba 95       	dec	r27
    1378:	e1 f7       	brne	.-8      	; 0x1372 <Timebase_LPDownCounter_Set_PeriodValue+0x14>
    137a:	82 0f       	add	r24, r18
    137c:	93 1f       	adc	r25, r19
    137e:	e8 0f       	add	r30, r24
    1380:	f9 1f       	adc	r31, r25
    1382:	14 ae       	std	Z+60, r1	; 0x3c
    1384:	15 ae       	std	Z+61, r1	; 0x3d
    1386:	16 ae       	std	Z+62, r1	; 0x3e
    1388:	17 ae       	std	Z+63, r1	; 0x3f
    138a:	08 95       	ret
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    138c:	c9 01       	movw	r24, r18
    138e:	a4 e0       	ldi	r26, 0x04	; 4
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	aa 95       	dec	r26
    1396:	e1 f7       	brne	.-8      	; 0x1390 <Timebase_LPDownCounter_Set_PeriodValue+0x32>
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	e8 0f       	add	r30, r24
    139e:	f9 1f       	adc	r31, r25
    13a0:	44 af       	std	Z+60, r20	; 0x3c
    13a2:	55 af       	std	Z+61, r21	; 0x3d
    13a4:	66 af       	std	Z+62, r22	; 0x3e
    13a6:	77 af       	std	Z+63, r23	; 0x3f
    13a8:	08 95       	ret

000013aa <Timebase_LPDownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
    13aa:	e0 91 96 01 	lds	r30, 0x0196
    13ae:	f0 91 97 01 	lds	r31, 0x0197
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 01       	movw	r18, r24
    13b6:	44 e0       	ldi	r20, 0x04	; 4
    13b8:	22 0f       	add	r18, r18
    13ba:	33 1f       	adc	r19, r19
    13bc:	4a 95       	dec	r20
    13be:	e1 f7       	brne	.-8      	; 0x13b8 <Timebase_LPDownCounter_Get_Period_Flag+0xe>
    13c0:	28 0f       	add	r18, r24
    13c2:	39 1f       	adc	r19, r25
    13c4:	e2 0f       	add	r30, r18
    13c6:	f3 1f       	adc	r31, r19
    13c8:	83 a9       	ldd	r24, Z+51	; 0x33
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}
    13ca:	81 70       	andi	r24, 0x01	; 1
    13cc:	08 95       	ret

000013ce <Timebase_LPDownCounter_Set_Period_Flag>:


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    13ce:	e0 91 96 01 	lds	r30, 0x0196
    13d2:	f0 91 97 01 	lds	r31, 0x0197
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9c 01       	movw	r18, r24
    13da:	54 e0       	ldi	r21, 0x04	; 4
    13dc:	22 0f       	add	r18, r18
    13de:	33 1f       	adc	r19, r19
    13e0:	5a 95       	dec	r21
    13e2:	e1 f7       	brne	.-8      	; 0x13dc <Timebase_LPDownCounter_Set_Period_Flag+0xe>
    13e4:	28 0f       	add	r18, r24
    13e6:	39 1f       	adc	r19, r25
    13e8:	e2 0f       	add	r30, r18
    13ea:	f3 1f       	adc	r31, r19
    13ec:	83 a9       	ldd	r24, Z+51	; 0x33
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	83 ab       	std	Z+51, r24	; 0x33
}
    13f2:	08 95       	ret

000013f4 <Timebase_LPDownCounter_Clear_Period_Flag>:


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    13f4:	e0 91 96 01 	lds	r30, 0x0196
    13f8:	f0 91 97 01 	lds	r31, 0x0197
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9c 01       	movw	r18, r24
    1400:	64 e0       	ldi	r22, 0x04	; 4
    1402:	22 0f       	add	r18, r18
    1404:	33 1f       	adc	r19, r19
    1406:	6a 95       	dec	r22
    1408:	e1 f7       	brne	.-8      	; 0x1402 <Timebase_LPDownCounter_Clear_Period_Flag+0xe>
    140a:	28 0f       	add	r18, r24
    140c:	39 1f       	adc	r19, r25
    140e:	e2 0f       	add	r30, r18
    1410:	f3 1f       	adc	r31, r19
    1412:	83 a9       	ldd	r24, Z+51	; 0x33
    1414:	8e 7f       	andi	r24, 0xFE	; 254
    1416:	83 ab       	std	Z+51, r24	; 0x33
}
    1418:	08 95       	ret

0000141a <Timebase_LPDownCounter_Get_ReloadValue>:

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
    141a:	e0 91 96 01 	lds	r30, 0x0196
    141e:	f0 91 97 01 	lds	r31, 0x0197
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 01       	movw	r18, r24
    1426:	74 e0       	ldi	r23, 0x04	; 4
    1428:	22 0f       	add	r18, r18
    142a:	33 1f       	adc	r19, r19
    142c:	7a 95       	dec	r23
    142e:	e1 f7       	brne	.-8      	; 0x1428 <Timebase_LPDownCounter_Get_ReloadValue+0xe>
    1430:	28 0f       	add	r18, r24
    1432:	39 1f       	adc	r19, r25
    1434:	e2 0f       	add	r30, r18
    1436:	f3 1f       	adc	r31, r19
    1438:	e0 5c       	subi	r30, 0xC0	; 192
    143a:	ff 4f       	sbci	r31, 0xFF	; 255
    143c:	60 81       	ld	r22, Z
    143e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].ReloadValue;
}
    1440:	82 81       	ldd	r24, Z+2	; 0x02
    1442:	93 81       	ldd	r25, Z+3	; 0x03
    1444:	08 95       	ret

00001446 <Timebase_LPDownCounter_Set_ReloadValue>:

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1446:	e0 91 96 01 	lds	r30, 0x0196
    144a:	f0 91 97 01 	lds	r31, 0x0197
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 01       	movw	r18, r24
    1452:	a4 e0       	ldi	r26, 0x04	; 4
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	aa 95       	dec	r26
    145a:	e1 f7       	brne	.-8      	; 0x1454 <Timebase_LPDownCounter_Set_ReloadValue+0xe>
    145c:	28 0f       	add	r18, r24
    145e:	39 1f       	adc	r19, r25
    1460:	e2 0f       	add	r30, r18
    1462:	f3 1f       	adc	r31, r19
    1464:	e0 5c       	subi	r30, 0xC0	; 192
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	40 83       	st	Z, r20
    146a:	51 83       	std	Z+1, r21	; 0x01
    146c:	62 83       	std	Z+2, r22	; 0x02
    146e:	73 83       	std	Z+3, r23	; 0x03
}
    1470:	08 95       	ret

00001472 <Timebase_LPDownCounter_Reset>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1472:	e0 91 96 01 	lds	r30, 0x0196
    1476:	f0 91 97 01 	lds	r31, 0x0197
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 01       	movw	r18, r24
    147e:	b4 e0       	ldi	r27, 0x04	; 4
    1480:	22 0f       	add	r18, r18
    1482:	33 1f       	adc	r19, r19
    1484:	ba 95       	dec	r27
    1486:	e1 f7       	brne	.-8      	; 0x1480 <Timebase_LPDownCounter_Reset+0xe>
    1488:	28 0f       	add	r18, r24
    148a:	39 1f       	adc	r19, r25
    148c:	e2 0f       	add	r30, r18
    148e:	f3 1f       	adc	r31, r19
    1490:	14 aa       	std	Z+52, r1	; 0x34
    1492:	15 aa       	std	Z+53, r1	; 0x35
    1494:	16 aa       	std	Z+54, r1	; 0x36
    1496:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1498:	10 ae       	std	Z+56, r1	; 0x38
    149a:	11 ae       	std	Z+57, r1	; 0x39
    149c:	12 ae       	std	Z+58, r1	; 0x3a
    149e:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    14a0:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14a2:	80 7e       	andi	r24, 0xE0	; 224
    14a4:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    14a6:	e0 5c       	subi	r30, 0xC0	; 192
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	10 82       	st	Z, r1
    14ac:	11 82       	std	Z+1, r1	; 0x01
    14ae:	12 82       	std	Z+2, r1	; 0x02
    14b0:	13 82       	std	Z+3, r1	; 0x03
  Timebase_LPDownCounter_Set_EndValue(window, 0);
  Timebase_LPDownCounter_Set_Value(window, 0);
  Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_LPDownCounter_Clear_Period_Flag(window);
  Timebase_LPDownCounter_Set_ReloadValue(window, 0);
} 
    14b2:	08 95       	ret

000014b4 <Timebase_LPDownCounter_Clear_All_Flags>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    14b4:	e0 91 96 01 	lds	r30, 0x0196
    14b8:	f0 91 97 01 	lds	r31, 0x0197
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9c 01       	movw	r18, r24
    14c0:	44 e0       	ldi	r20, 0x04	; 4
    14c2:	22 0f       	add	r18, r18
    14c4:	33 1f       	adc	r19, r19
    14c6:	4a 95       	dec	r20
    14c8:	e1 f7       	brne	.-8      	; 0x14c2 <Timebase_LPDownCounter_Clear_All_Flags+0xe>
    14ca:	28 0f       	add	r18, r24
    14cc:	39 1f       	adc	r19, r25
    14ce:	e2 0f       	add	r30, r18
    14d0:	f3 1f       	adc	r31, r19
    14d2:	14 aa       	std	Z+52, r1	; 0x34
    14d4:	15 aa       	std	Z+53, r1	; 0x35
    14d6:	16 aa       	std	Z+54, r1	; 0x36
    14d8:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    14da:	10 ae       	std	Z+56, r1	; 0x38
    14dc:	11 ae       	std	Z+57, r1	; 0x39
    14de:	12 ae       	std	Z+58, r1	; 0x3a
    14e0:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    14e2:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14e4:	80 7e       	andi	r24, 0xE0	; 224
    14e6:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    14e8:	e0 5c       	subi	r30, 0xC0	; 192
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	10 82       	st	Z, r1
    14ee:	11 82       	std	Z+1, r1	; 0x01
    14f0:	12 82       	std	Z+2, r1	; 0x02
    14f2:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_LPDownCounter_Clear_All_Flags(uint8_t window){
  Timebase_LPDownCounter_Reset( window );
}
    14f4:	08 95       	ret

000014f6 <Timebase_LPDownCounter_Start>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    14f6:	e0 91 96 01 	lds	r30, 0x0196
    14fa:	f0 91 97 01 	lds	r31, 0x0197
    14fe:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1500:	9c 01       	movw	r18, r24
    1502:	54 e0       	ldi	r21, 0x04	; 4
    1504:	22 0f       	add	r18, r18
    1506:	33 1f       	adc	r19, r19
    1508:	5a 95       	dec	r21
    150a:	e1 f7       	brne	.-8      	; 0x1504 <Timebase_LPDownCounter_Start+0xe>
    150c:	28 0f       	add	r18, r24
    150e:	39 1f       	adc	r19, r25
    1510:	e2 0f       	add	r30, r18
    1512:	f3 1f       	adc	r31, r19
    1514:	93 a9       	ldd	r25, Z+51	; 0x33
    1516:	89 2f       	mov	r24, r25
    1518:	86 95       	lsr	r24
    151a:	8f 70       	andi	r24, 0x0F	; 15
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	19 f0       	breq	.+6      	; 0x1526 <Timebase_LPDownCounter_Start+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1520:	91 7e       	andi	r25, 0xE1	; 225
    1522:	92 60       	ori	r25, 0x02	; 2
    1524:	93 ab       	std	Z+51, r25	; 0x33
    1526:	08 95       	ret

00001528 <Timebase_LPDownCounter_Stop>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1528:	e0 91 96 01 	lds	r30, 0x0196
    152c:	f0 91 97 01 	lds	r31, 0x0197
    1530:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Stop(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1532:	9c 01       	movw	r18, r24
    1534:	64 e0       	ldi	r22, 0x04	; 4
    1536:	22 0f       	add	r18, r18
    1538:	33 1f       	adc	r19, r19
    153a:	6a 95       	dec	r22
    153c:	e1 f7       	brne	.-8      	; 0x1536 <Timebase_LPDownCounter_Stop+0xe>
    153e:	28 0f       	add	r18, r24
    1540:	39 1f       	adc	r19, r25
    1542:	e2 0f       	add	r30, r18
    1544:	f3 1f       	adc	r31, r19
    1546:	93 a9       	ldd	r25, Z+51	; 0x33
    1548:	89 2f       	mov	r24, r25
    154a:	86 95       	lsr	r24
    154c:	8f 70       	andi	r24, 0x0F	; 15
    154e:	82 30       	cpi	r24, 0x02	; 2
    1550:	19 f0       	breq	.+6      	; 0x1558 <Timebase_LPDownCounter_Stop+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1552:	91 7e       	andi	r25, 0xE1	; 225
    1554:	94 60       	ori	r25, 0x04	; 4
    1556:	93 ab       	std	Z+51, r25	; 0x33
    1558:	08 95       	ret

0000155a <Timebase_LPDownCounter_Set_Securely>:
    Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	7a 01       	movw	r14, r20
    1568:	8b 01       	movw	r16, r22

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    156a:	c0 91 96 01 	lds	r28, 0x0196
    156e:	d0 91 97 01 	lds	r29, 0x0197
    1572:	68 2f       	mov	r22, r24
    1574:	70 e0       	ldi	r23, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1576:	fb 01       	movw	r30, r22
    1578:	b4 e0       	ldi	r27, 0x04	; 4
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	ba 95       	dec	r27
    1580:	e1 f7       	brne	.-8      	; 0x157a <Timebase_LPDownCounter_Set_Securely+0x20>
    1582:	e6 0f       	add	r30, r22
    1584:	f7 1f       	adc	r31, r23
    1586:	ec 0f       	add	r30, r28
    1588:	fd 1f       	adc	r31, r29
    158a:	83 a9       	ldd	r24, Z+51	; 0x33
    158c:	86 95       	lsr	r24
    158e:	8f 70       	andi	r24, 0x0F	; 15
    1590:	a1 f5       	brne	.+104    	; 0x15fa <Timebase_LPDownCounter_Set_Securely+0xa0>
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1592:	e0 ae       	std	Z+56, r14	; 0x38
    1594:	f1 ae       	std	Z+57, r15	; 0x39
    1596:	02 af       	std	Z+58, r16	; 0x3a
    1598:	13 af       	std	Z+59, r17	; 0x3b


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    159a:	29 8d       	ldd	r18, Y+25	; 0x19
    159c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    159e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    15a0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    15a2:	89 8d       	ldd	r24, Y+25	; 0x19
    15a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    15a6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    15a8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
    15aa:	28 17       	cp	r18, r24
    15ac:	39 07       	cpc	r19, r25
    15ae:	4a 07       	cpc	r20, r26
    15b0:	5b 07       	cpc	r21, r27
    15b2:	99 f7       	brne	.-26     	; 0x159a <Timebase_LPDownCounter_Set_Securely+0x40>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    15b4:	fb 01       	movw	r30, r22
    15b6:	a4 e0       	ldi	r26, 0x04	; 4
    15b8:	ee 0f       	add	r30, r30
    15ba:	ff 1f       	adc	r31, r31
    15bc:	aa 95       	dec	r26
    15be:	e1 f7       	brne	.-8      	; 0x15b8 <Timebase_LPDownCounter_Set_Securely+0x5e>
    15c0:	e6 0f       	add	r30, r22
    15c2:	f7 1f       	adc	r31, r23
    15c4:	ec 0f       	add	r30, r28
    15c6:	fd 1f       	adc	r31, r29
    15c8:	2e 0d       	add	r18, r14
    15ca:	3f 1d       	adc	r19, r15
    15cc:	40 1f       	adc	r20, r16
    15ce:	51 1f       	adc	r21, r17
    15d0:	24 ab       	std	Z+52, r18	; 0x34
    15d2:	35 ab       	std	Z+53, r19	; 0x35
    15d4:	46 ab       	std	Z+54, r20	; 0x36
    15d6:	57 ab       	std	Z+55, r21	; 0x37
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    15d8:	e0 5c       	subi	r30, 0xC0	; 192
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	e0 82       	st	Z, r14
    15de:	f1 82       	std	Z+1, r15	; 0x01
    15e0:	02 83       	std	Z+2, r16	; 0x02
    15e2:	13 83       	std	Z+3, r17	; 0x03
    15e4:	e0 54       	subi	r30, 0x40	; 64
    15e6:	f0 40       	sbci	r31, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    15e8:	93 a9       	ldd	r25, Z+51	; 0x33
    15ea:	89 2f       	mov	r24, r25
    15ec:	86 95       	lsr	r24
    15ee:	8f 70       	andi	r24, 0x0F	; 15
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	19 f0       	breq	.+6      	; 0x15fa <Timebase_LPDownCounter_Set_Securely+0xa0>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    15f4:	91 7e       	andi	r25, 0xE1	; 225
    15f6:	92 60       	ori	r25, 0x02	; 2
    15f8:	93 ab       	std	Z+51, r25	; 0x33
    Timebase_LPDownCounter_Set_Value(window, value);
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPTimer_Get_Seconds() + value);
	Timebase_LPDownCounter_Set_ReloadValue(window, value);
    Timebase_LPDownCounter_Start(window);
  }
}
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	0f 91       	pop	r16
    1602:	ff 90       	pop	r15
    1604:	ef 90       	pop	r14
    1606:	08 95       	ret

00001608 <Timebase_LPDownCounter_Set_Forcefully>:


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	6a 01       	movw	r12, r20
    1616:	7b 01       	movw	r14, r22
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1618:	e0 91 96 01 	lds	r30, 0x0196
    161c:	f0 91 97 01 	lds	r31, 0x0197
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	89 01       	movw	r16, r18
    1626:	94 e0       	ldi	r25, 0x04	; 4
    1628:	00 0f       	add	r16, r16
    162a:	11 1f       	adc	r17, r17
    162c:	9a 95       	dec	r25
    162e:	e1 f7       	brne	.-8      	; 0x1628 <Timebase_LPDownCounter_Set_Forcefully+0x20>
    1630:	02 0f       	add	r16, r18
    1632:	13 1f       	adc	r17, r19
    1634:	e0 0f       	add	r30, r16
    1636:	f1 1f       	adc	r31, r17
    1638:	14 aa       	std	Z+52, r1	; 0x34
    163a:	15 aa       	std	Z+53, r1	; 0x35
    163c:	16 aa       	std	Z+54, r1	; 0x36
    163e:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1640:	10 ae       	std	Z+56, r1	; 0x38
    1642:	11 ae       	std	Z+57, r1	; 0x39
    1644:	12 ae       	std	Z+58, r1	; 0x3a
    1646:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1648:	93 a9       	ldd	r25, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    164a:	90 7e       	andi	r25, 0xE0	; 224
    164c:	93 ab       	std	Z+51, r25	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    164e:	e0 5c       	subi	r30, 0xC0	; 192
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	10 82       	st	Z, r1
    1654:	11 82       	std	Z+1, r1	; 0x01
    1656:	12 82       	std	Z+2, r1	; 0x02
    1658:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
    165a:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timebase_LPDownCounter_Set_Securely>
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    165e:	e0 91 96 01 	lds	r30, 0x0196
    1662:	f0 91 97 01 	lds	r31, 0x0197
    1666:	e0 0f       	add	r30, r16
    1668:	f1 1f       	adc	r31, r17
    166a:	e0 5c       	subi	r30, 0xC0	; 192
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	c0 82       	st	Z, r12
    1670:	d1 82       	std	Z+1, r13	; 0x01
    1672:	e2 82       	std	Z+2, r14	; 0x02
    1674:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	08 95       	ret

00001684 <Timebase_LPDownCounter_Update>:


void Timebase_LPDownCounter_Update(uint8_t window){
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1694:	60 91 96 01 	lds	r22, 0x0196
    1698:	70 91 97 01 	lds	r23, 0x0197
    169c:	c8 2e       	mov	r12, r24
    169e:	dd 24       	eor	r13, r13
    16a0:	f6 01       	movw	r30, r12
    16a2:	a4 e0       	ldi	r26, 0x04	; 4
    16a4:	ee 0f       	add	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	aa 95       	dec	r26
    16aa:	e1 f7       	brne	.-8      	; 0x16a4 <Timebase_LPDownCounter_Update+0x20>
    16ac:	ec 0d       	add	r30, r12
    16ae:	fd 1d       	adc	r31, r13
    16b0:	e6 0f       	add	r30, r22
    16b2:	f7 1f       	adc	r31, r23
    16b4:	83 a9       	ldd	r24, Z+51	; 0x33
    16b6:	86 95       	lsr	r24
    16b8:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	c1 f5       	brne	.+112    	; 0x172e <Timebase_LPDownCounter_Update+0xaa>
  Timebase->LPDownCounter[window].Value = value;
}


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
  return Timebase->LPDownCounter[window].EndValue;
    16be:	e4 a8       	ldd	r14, Z+52	; 0x34
    16c0:	f5 a8       	ldd	r15, Z+53	; 0x35
    16c2:	06 a9       	ldd	r16, Z+54	; 0x36
    16c4:	17 a9       	ldd	r17, Z+55	; 0x37


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    16c6:	fb 01       	movw	r30, r22
    16c8:	21 8d       	ldd	r18, Z+25	; 0x19
    16ca:	32 8d       	ldd	r19, Z+26	; 0x1a
    16cc:	43 8d       	ldd	r20, Z+27	; 0x1b
    16ce:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    16d0:	81 8d       	ldd	r24, Z+25	; 0x19
    16d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    16d4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    16d6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    16d8:	28 17       	cp	r18, r24
    16da:	39 07       	cpc	r19, r25
    16dc:	4a 07       	cpc	r20, r26
    16de:	5b 07       	cpc	r21, r27
    16e0:	91 f7       	brne	.-28     	; 0x16c6 <Timebase_LPDownCounter_Update+0x42>
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    16e2:	d8 01       	movw	r26, r16
    16e4:	c7 01       	movw	r24, r14
    16e6:	82 1b       	sub	r24, r18
    16e8:	93 0b       	sbc	r25, r19
    16ea:	a4 0b       	sbc	r26, r20
    16ec:	b5 0b       	sbc	r27, r21
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    16ee:	e6 01       	movw	r28, r12
    16f0:	f4 e0       	ldi	r31, 0x04	; 4
    16f2:	cc 0f       	add	r28, r28
    16f4:	dd 1f       	adc	r29, r29
    16f6:	fa 95       	dec	r31
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <Timebase_LPDownCounter_Update+0x6e>
    16fa:	cc 0d       	add	r28, r12
    16fc:	dd 1d       	adc	r29, r13
    16fe:	c6 0f       	add	r28, r22
    1700:	d7 1f       	adc	r29, r23
    1702:	88 af       	std	Y+56, r24	; 0x38
    1704:	99 af       	std	Y+57, r25	; 0x39
    1706:	aa af       	std	Y+58, r26	; 0x3a
    1708:	bb af       	std	Y+59, r27	; 0x3b


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
    170a:	18 16       	cp	r1, r24
    170c:	19 06       	cpc	r1, r25
    170e:	1a 06       	cpc	r1, r26
    1710:	1b 06       	cpc	r1, r27
    1712:	a4 f1       	brlt	.+104    	; 0x177c <Timebase_LPDownCounter_Update+0xf8>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1714:	1c aa       	std	Y+52, r1	; 0x34
    1716:	1d aa       	std	Y+53, r1	; 0x35
    1718:	1e aa       	std	Y+54, r1	; 0x36
    171a:	1f aa       	std	Y+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    171c:	18 ae       	std	Y+56, r1	; 0x38
    171e:	19 ae       	std	Y+57, r1	; 0x39
    1720:	1a ae       	std	Y+58, r1	; 0x3a
    1722:	1b ae       	std	Y+59, r1	; 0x3b
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1724:	8b a9       	ldd	r24, Y+51	; 0x33
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1726:	80 7e       	andi	r24, 0xE0	; 224
    1728:	88 60       	ori	r24, 0x08	; 8
    172a:	8b ab       	std	Y+51, r24	; 0x33
    172c:	27 c0       	rjmp	.+78     	; 0x177c <Timebase_LPDownCounter_Update+0xf8>
	  int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
      Timebase_LPDownCounter_Reset(window);
	  Timebase_LPDownCounter_Set_ReloadValue(window, temp);
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	29 f5       	brne	.+74     	; 0x177c <Timebase_LPDownCounter_Update+0xf8>
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    1732:	e0 ac       	ldd	r14, Z+56	; 0x38
    1734:	f1 ac       	ldd	r15, Z+57	; 0x39
    1736:	02 ad       	ldd	r16, Z+58	; 0x3a
    1738:	13 ad       	ldd	r17, Z+59	; 0x3b


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    173a:	fb 01       	movw	r30, r22
    173c:	21 8d       	ldd	r18, Z+25	; 0x19
    173e:	32 8d       	ldd	r19, Z+26	; 0x1a
    1740:	43 8d       	ldd	r20, Z+27	; 0x1b
    1742:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    1744:	81 8d       	ldd	r24, Z+25	; 0x19
    1746:	92 8d       	ldd	r25, Z+26	; 0x1a
    1748:	a3 8d       	ldd	r26, Z+27	; 0x1b
    174a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    174c:	28 17       	cp	r18, r24
    174e:	39 07       	cpc	r19, r25
    1750:	4a 07       	cpc	r20, r26
    1752:	5b 07       	cpc	r21, r27
    1754:	91 f7       	brne	.-28     	; 0x173a <Timebase_LPDownCounter_Update+0xb6>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1756:	c6 01       	movw	r24, r12
    1758:	e4 e0       	ldi	r30, 0x04	; 4
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	ea 95       	dec	r30
    1760:	e1 f7       	brne	.-8      	; 0x175a <Timebase_LPDownCounter_Update+0xd6>
    1762:	8c 0d       	add	r24, r12
    1764:	9d 1d       	adc	r25, r13
    1766:	68 0f       	add	r22, r24
    1768:	79 1f       	adc	r23, r25
    176a:	2e 0d       	add	r18, r14
    176c:	3f 1d       	adc	r19, r15
    176e:	40 1f       	adc	r20, r16
    1770:	51 1f       	adc	r21, r17
    1772:	fb 01       	movw	r30, r22
    1774:	24 ab       	std	Z+52, r18	; 0x34
    1776:	35 ab       	std	Z+53, r19	; 0x35
    1778:	46 ab       	std	Z+54, r20	; 0x36
    177a:	57 ab       	std	Z+55, r21	; 0x37
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPDownCounter_Get_Value(window) + Timebase_LPTimer_Get_Seconds());
  }
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	08 95       	ret

0000178e <Timebase_LPDownCounter_Expired>:


uint8_t Timebase_LPDownCounter_Expired(uint8_t window){
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	e0 91 96 01 	lds	r30, 0x0196
    1794:	f0 91 97 01 	lds	r31, 0x0197
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9c 01       	movw	r18, r24
    179c:	b4 e0       	ldi	r27, 0x04	; 4
    179e:	22 0f       	add	r18, r18
    17a0:	33 1f       	adc	r19, r19
    17a2:	ba 95       	dec	r27
    17a4:	e1 f7       	brne	.-8      	; 0x179e <Timebase_LPDownCounter_Expired+0x10>
    17a6:	28 0f       	add	r18, r24
    17a8:	39 1f       	adc	r19, r25
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	83 a9       	ldd	r24, Z+51	; 0x33
    17b0:	86 95       	lsr	r24
    17b2:	8f 70       	andi	r24, 0x0F	; 15
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	09 f4       	brne	.+2      	; 0x17ba <Timebase_LPDownCounter_Expired+0x2c>
    17b8:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17ba:	84 2f       	mov	r24, r20
    17bc:	08 95       	ret

000017be <Timebase_LPDownCounter_Expired_Event>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    17be:	e0 91 96 01 	lds	r30, 0x0196
    17c2:	f0 91 97 01 	lds	r31, 0x0197
    17c6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_LPDownCounter_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    17c8:	9c 01       	movw	r18, r24
    17ca:	44 e0       	ldi	r20, 0x04	; 4
    17cc:	22 0f       	add	r18, r18
    17ce:	33 1f       	adc	r19, r19
    17d0:	4a 95       	dec	r20
    17d2:	e1 f7       	brne	.-8      	; 0x17cc <Timebase_LPDownCounter_Expired_Event+0xe>
    17d4:	28 0f       	add	r18, r24
    17d6:	39 1f       	adc	r19, r25
    17d8:	e2 0f       	add	r30, r18
    17da:	f3 1f       	adc	r31, r19
    17dc:	83 a9       	ldd	r24, Z+51	; 0x33
    17de:	86 95       	lsr	r24
    17e0:	8f 70       	andi	r24, 0x0F	; 15
    17e2:	84 30       	cpi	r24, 0x04	; 4
    17e4:	11 f0       	breq	.+4      	; 0x17ea <Timebase_LPDownCounter_Expired_Event+0x2c>
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	08 95       	ret
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    17ea:	14 aa       	std	Z+52, r1	; 0x34
    17ec:	15 aa       	std	Z+53, r1	; 0x35
    17ee:	16 aa       	std	Z+54, r1	; 0x36
    17f0:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    17f2:	10 ae       	std	Z+56, r1	; 0x38
    17f4:	11 ae       	std	Z+57, r1	; 0x39
    17f6:	12 ae       	std	Z+58, r1	; 0x3a
    17f8:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    17fa:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17fc:	80 7e       	andi	r24, 0xE0	; 224
    17fe:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1800:	e0 5c       	subi	r30, 0xC0	; 192
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	10 82       	st	Z, r1
    1806:	11 82       	std	Z+1, r1	; 0x01
    1808:	12 82       	std	Z+2, r1	; 0x02
    180a:	13 82       	std	Z+3, r1	; 0x03
    180c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    180e:	08 95       	ret

00001810 <Timebase_LPDownCounter_Oneshot_Expired_Event>:

uint8_t Timebase_LPDownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_LPDownCounter_Expired_Event(window);
    1810:	0e 94 df 0b 	call	0x17be	; 0x17be <Timebase_LPDownCounter_Expired_Event>
}
    1814:	08 95       	ret

00001816 <Timebase_LPDownCounter_Continuous_Expired_Event>:


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
    1816:	1f 93       	push	r17
    1818:	18 2f       	mov	r17, r24

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    181a:	a0 91 96 01 	lds	r26, 0x0196
    181e:	b0 91 97 01 	lds	r27, 0x0197
    1822:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_LPDownCounter_Expired_Event(window);
}


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1824:	9c 01       	movw	r18, r24
    1826:	54 e0       	ldi	r21, 0x04	; 4
    1828:	22 0f       	add	r18, r18
    182a:	33 1f       	adc	r19, r19
    182c:	5a 95       	dec	r21
    182e:	e1 f7       	brne	.-8      	; 0x1828 <Timebase_LPDownCounter_Continuous_Expired_Event+0x12>
    1830:	28 0f       	add	r18, r24
    1832:	39 1f       	adc	r19, r25
    1834:	a2 0f       	add	r26, r18
    1836:	b3 1f       	adc	r27, r19
    1838:	d3 96       	adiw	r26, 0x33	; 51
    183a:	8c 91       	ld	r24, X
    183c:	d3 97       	sbiw	r26, 0x33	; 51
    183e:	86 95       	lsr	r24
    1840:	8f 70       	andi	r24, 0x0F	; 15
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	11 f0       	breq	.+4      	; 0x184a <Timebase_LPDownCounter_Continuous_Expired_Event+0x34>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	21 c0       	rjmp	.+66     	; 0x188c <Timebase_LPDownCounter_Continuous_Expired_Event+0x76>
void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
    184a:	fd 01       	movw	r30, r26
    184c:	e0 5c       	subi	r30, 0xC0	; 192
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	40 81       	ld	r20, Z
    1852:	51 81       	ldd	r21, Z+1	; 0x01
    1854:	62 81       	ldd	r22, Z+2	; 0x02
    1856:	73 81       	ldd	r23, Z+3	; 0x03
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1858:	d4 96       	adiw	r26, 0x34	; 52
    185a:	1d 92       	st	X+, r1
    185c:	1d 92       	st	X+, r1
    185e:	1d 92       	st	X+, r1
    1860:	1c 92       	st	X, r1
    1862:	d7 97       	sbiw	r26, 0x37	; 55
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1864:	d8 96       	adiw	r26, 0x38	; 56
    1866:	1d 92       	st	X+, r1
    1868:	1d 92       	st	X+, r1
    186a:	1d 92       	st	X+, r1
    186c:	1c 92       	st	X, r1
    186e:	db 97       	sbiw	r26, 0x3b	; 59
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1870:	d3 96       	adiw	r26, 0x33	; 51
    1872:	8c 91       	ld	r24, X
    1874:	d3 97       	sbiw	r26, 0x33	; 51
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1876:	80 7e       	andi	r24, 0xE0	; 224
    1878:	d3 96       	adiw	r26, 0x33	; 51
    187a:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    187c:	10 82       	st	Z, r1
    187e:	11 82       	std	Z+1, r1	; 0x01
    1880:	12 82       	std	Z+2, r1	; 0x02
    1882:	13 82       	std	Z+3, r1	; 0x03

uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
    Timebase_LPDownCounter_Clear_All_Flags( window );
	Timebase_LPDownCounter_Set_Securely(window, temp);
    1884:	81 2f       	mov	r24, r17
    1886:	0e 94 ad 0a 	call	0x155a	; 0x155a <Timebase_LPDownCounter_Set_Securely>
    188a:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    188c:	1f 91       	pop	r17
    188e:	08 95       	ret

00001890 <Timebase_LPDownCounter_Set_Period_Value_Securely>:


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
    1894:	c0 91 96 01 	lds	r28, 0x0196
    1898:	d0 91 97 01 	lds	r29, 0x0197
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    18a0:	f9 01       	movw	r30, r18
    18a2:	a4 e0       	ldi	r26, 0x04	; 4
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	aa 95       	dec	r26
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x14>
    18ac:	e2 0f       	add	r30, r18
    18ae:	f3 1f       	adc	r31, r19
    18b0:	ec 0f       	add	r30, r28
    18b2:	fd 1f       	adc	r31, r29
    18b4:	83 a9       	ldd	r24, Z+51	; 0x33
    18b6:	80 fd       	sbrc	r24, 0
    18b8:	20 c0       	rjmp	.+64     	; 0x18fa <Timebase_LPDownCounter_Set_Period_Value_Securely+0x6a>
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    18ba:	80 ad       	ldd	r24, Z+56	; 0x38
    18bc:	91 ad       	ldd	r25, Z+57	; 0x39
    18be:	a2 ad       	ldd	r26, Z+58	; 0x3a
    18c0:	b3 ad       	ldd	r27, Z+59	; 0x3b
    18c2:	84 1b       	sub	r24, r20
    18c4:	95 0b       	sbc	r25, r21
    18c6:	a6 0b       	sbc	r26, r22
    18c8:	b7 0b       	sbc	r27, r23
  return Timebase->LPDownCounter[window].PeriodValue;
}


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    18ca:	b7 ff       	sbrs	r27, 7
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x48>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    18ce:	14 ae       	std	Z+60, r1	; 0x3c
    18d0:	15 ae       	std	Z+61, r1	; 0x3d
    18d2:	16 ae       	std	Z+62, r1	; 0x3e
    18d4:	17 ae       	std	Z+63, r1	; 0x3f
    18d6:	04 c0       	rjmp	.+8      	; 0x18e0 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    18d8:	84 af       	std	Z+60, r24	; 0x3c
    18da:	95 af       	std	Z+61, r25	; 0x3d
    18dc:	a6 af       	std	Z+62, r26	; 0x3e
    18de:	b7 af       	std	Z+63, r27	; 0x3f
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    18e0:	f9 01       	movw	r30, r18
    18e2:	64 e0       	ldi	r22, 0x04	; 4
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	6a 95       	dec	r22
    18ea:	e1 f7       	brne	.-8      	; 0x18e4 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x54>
    18ec:	e2 0f       	add	r30, r18
    18ee:	f3 1f       	adc	r31, r19
    18f0:	ec 0f       	add	r30, r28
    18f2:	fd 1f       	adc	r31, r29
    18f4:	83 a9       	ldd	r24, Z+51	; 0x33
    18f6:	81 60       	ori	r24, 0x01	; 1
    18f8:	83 ab       	std	Z+51, r24	; 0x33
void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    Timebase_LPDownCounter_Set_Period_Flag(window);
  }
}
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <Timebase_LPDownCounter_Get_Remaining_Period_Value>:
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    1900:	e0 91 96 01 	lds	r30, 0x0196
    1904:	f0 91 97 01 	lds	r31, 0x0197
    1908:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    190a:	9c 01       	movw	r18, r24
    190c:	b4 e0       	ldi	r27, 0x04	; 4
    190e:	22 0f       	add	r18, r18
    1910:	33 1f       	adc	r19, r19
    1912:	ba 95       	dec	r27
    1914:	e1 f7       	brne	.-8      	; 0x190e <Timebase_LPDownCounter_Get_Remaining_Period_Value+0xe>
    1916:	28 0f       	add	r18, r24
    1918:	39 1f       	adc	r19, r25
    191a:	e2 0f       	add	r30, r18
    191c:	f3 1f       	adc	r31, r19
    191e:	20 ad       	ldd	r18, Z+56	; 0x38
    1920:	31 ad       	ldd	r19, Z+57	; 0x39
    1922:	42 ad       	ldd	r20, Z+58	; 0x3a
    1924:	53 ad       	ldd	r21, Z+59	; 0x3b
    1926:	84 ad       	ldd	r24, Z+60	; 0x3c
    1928:	95 ad       	ldd	r25, Z+61	; 0x3d
    192a:	a6 ad       	ldd	r26, Z+62	; 0x3e
    192c:	b7 ad       	ldd	r27, Z+63	; 0x3f
    192e:	28 1b       	sub	r18, r24
    1930:	39 0b       	sbc	r19, r25
    1932:	4a 0b       	sbc	r20, r26
    1934:	5b 0b       	sbc	r21, r27
    1936:	57 ff       	sbrs	r21, 7
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <Timebase_LPDownCounter_Get_Remaining_Period_Value+0x42>
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1942:	b9 01       	movw	r22, r18
    1944:	ca 01       	movw	r24, r20
    1946:	08 95       	ret

00001948 <Timebase_LPDownCounter_Period_Value_Expired>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    194c:	c0 91 96 01 	lds	r28, 0x0196
    1950:	d0 91 97 01 	lds	r29, 0x0197
    1954:	68 2f       	mov	r22, r24
    1956:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    1958:	fb 01       	movw	r30, r22
    195a:	44 e0       	ldi	r20, 0x04	; 4
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	4a 95       	dec	r20
    1962:	e1 f7       	brne	.-8      	; 0x195c <Timebase_LPDownCounter_Period_Value_Expired+0x14>
    1964:	e6 0f       	add	r30, r22
    1966:	f7 1f       	adc	r31, r23
    1968:	ec 0f       	add	r30, r28
    196a:	fd 1f       	adc	r31, r29
    196c:	20 ad       	ldd	r18, Z+56	; 0x38
    196e:	31 ad       	ldd	r19, Z+57	; 0x39
    1970:	42 ad       	ldd	r20, Z+58	; 0x3a
    1972:	53 ad       	ldd	r21, Z+59	; 0x3b
    1974:	84 ad       	ldd	r24, Z+60	; 0x3c
    1976:	95 ad       	ldd	r25, Z+61	; 0x3d
    1978:	a6 ad       	ldd	r26, Z+62	; 0x3e
    197a:	b7 ad       	ldd	r27, Z+63	; 0x3f
    197c:	28 1b       	sub	r18, r24
    197e:	39 0b       	sbc	r19, r25
    1980:	4a 0b       	sbc	r20, r26
    1982:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1984:	57 fd       	sbrc	r21, 7
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
  return temp;
}


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_LPDownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1988:	21 15       	cp	r18, r1
    198a:	31 05       	cpc	r19, r1
    198c:	41 05       	cpc	r20, r1
    198e:	51 05       	cpc	r21, r1
    1990:	11 f0       	breq	.+4      	; 0x1996 <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	10 c0       	rjmp	.+32     	; 0x19b6 <Timebase_LPDownCounter_Period_Value_Expired+0x6e>
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	cb 01       	movw	r24, r22
    199a:	34 e0       	ldi	r19, 0x04	; 4
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	3a 95       	dec	r19
    19a2:	e1 f7       	brne	.-8      	; 0x199c <Timebase_LPDownCounter_Period_Value_Expired+0x54>
    19a4:	86 0f       	add	r24, r22
    19a6:	97 1f       	adc	r25, r23
    19a8:	c8 0f       	add	r28, r24
    19aa:	d9 1f       	adc	r29, r25
    19ac:	8b a9       	ldd	r24, Y+51	; 0x33
    19ae:	80 ff       	sbrs	r24, 0
    19b0:	21 e0       	ldi	r18, 0x01	; 1
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19b6:	82 2f       	mov	r24, r18
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <Timebase_LPDownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired_Event(uint8_t window){
    19be:	1f 93       	push	r17
    19c0:	18 2f       	mov	r17, r24
  if(Timebase_LPDownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    19c2:	0e 94 a4 0c 	call	0x1948	; 0x1948 <Timebase_LPDownCounter_Period_Value_Expired>
    19c6:	81 30       	cpi	r24, 0x01	; 1
    19c8:	11 f0       	breq	.+4      	; 0x19ce <Timebase_LPDownCounter_Period_Value_Expired_Event+0x10>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	14 c0       	rjmp	.+40     	; 0x19f6 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x38>
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    19ce:	e0 91 96 01 	lds	r30, 0x0196
    19d2:	f0 91 97 01 	lds	r31, 0x0197
    19d6:	21 2f       	mov	r18, r17
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	c9 01       	movw	r24, r18
    19dc:	54 e0       	ldi	r21, 0x04	; 4
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	5a 95       	dec	r21
    19e4:	e1 f7       	brne	.-8      	; 0x19de <Timebase_LPDownCounter_Period_Value_Expired_Event+0x20>
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	e8 0f       	add	r30, r24
    19ec:	f9 1f       	adc	r31, r25
    19ee:	83 a9       	ldd	r24, Z+51	; 0x33
    19f0:	8e 7f       	andi	r24, 0xFE	; 254
    19f2:	83 ab       	std	Z+51, r24	; 0x33
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19f6:	1f 91       	pop	r17
    19f8:	08 95       	ret

000019fa <Timebase_LPDownCounter_Update_All>:


void Timebase_LPDownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Update(i);
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	0e 94 42 0b 	call	0x1684	; 0x1684 <Timebase_LPDownCounter_Update>
  }
}
    1a00:	08 95       	ret

00001a02 <Timebase_LPDownCounter_Reset_All>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1a02:	e0 91 96 01 	lds	r30, 0x0196
    1a06:	f0 91 97 01 	lds	r31, 0x0197
    1a0a:	14 aa       	std	Z+52, r1	; 0x34
    1a0c:	15 aa       	std	Z+53, r1	; 0x35
    1a0e:	16 aa       	std	Z+54, r1	; 0x36
    1a10:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1a12:	10 ae       	std	Z+56, r1	; 0x38
    1a14:	11 ae       	std	Z+57, r1	; 0x39
    1a16:	12 ae       	std	Z+58, r1	; 0x3a
    1a18:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1a1a:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a1c:	80 7e       	andi	r24, 0xE0	; 224
    1a1e:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1a20:	e0 5c       	subi	r30, 0xC0	; 192
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	10 82       	st	Z, r1
    1a26:	11 82       	std	Z+1, r1	; 0x01
    1a28:	12 82       	std	Z+2, r1	; 0x02
    1a2a:	13 82       	std	Z+3, r1	; 0x03

void Timebase_LPDownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Reset(i);
  }
}
    1a2c:	08 95       	ret

00001a2e <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    1a2e:	e0 91 96 01 	lds	r30, 0x0196
    1a32:	f0 91 97 01 	lds	r31, 0x0197
    1a36:	85 8d       	ldd	r24, Z+29	; 0x1d
}
    1a38:	08 95       	ret

00001a3a <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a3a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    1a3e:	08 95       	ret

00001a40 <Timebase_LP_Reset>:


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    1a40:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Timebase_LPDownCounter_Reset_All>
  #endif
}
    1a44:	08 95       	ret

00001a46 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1a46:	0f 93       	push	r16
    1a48:	1f 93       	push	r17
    1a4a:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1a4c:	0e 94 83 00 	call	0x106	; 0x106 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    1a50:	c8 01       	movw	r24, r16
    1a52:	0e 94 14 01 	call	0x228	; 0x228 <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a56:	0e 94 f5 08 	call	0x11ea	; 0x11ea <Timebase_DownCounter_SS_Reset_All>
  Timebase_Timer_Enable(UpdateRateHz);
  Timebase_Reset();
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	0e 94 af 01 	call	0x35e	; 0x35e <Timebase_LPTimer_Enable>
}


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    1a62:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <Timebase_LPDownCounter_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1a6c:	e0 91 96 01 	lds	r30, 0x0196
    1a70:	f0 91 97 01 	lds	r31, 0x0197
    1a74:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a76:	83 ff       	sbrs	r24, 3
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1a7a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1a7e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1a82:	e0 91 96 01 	lds	r30, 0x0196
    1a86:	f0 91 97 01 	lds	r31, 0x0197
    1a8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a8c:	87 7f       	andi	r24, 0xF7	; 247
    1a8e:	85 8f       	std	Z+29, r24	; 0x1d
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    1a90:	e0 91 96 01 	lds	r30, 0x0196
    1a94:	f0 91 97 01 	lds	r31, 0x0197
    1a98:	16 8a       	std	Z+22, r1	; 0x16
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    1a9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a9c:	85 ff       	sbrs	r24, 5
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <Timebase_Main_Loop_Executables+0x46>
    Timebase_LPDownCounter_Update_All();
    1aa0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <Timebase_LPDownCounter_Update_All>
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
    1aa4:	e0 91 96 01 	lds	r30, 0x0196
    1aa8:	f0 91 97 01 	lds	r31, 0x0197
    1aac:	85 8d       	ldd	r24, Z+29	; 0x1d
    1aae:	8f 7d       	andi	r24, 0xDF	; 223
    1ab0:	85 8f       	std	Z+29, r24	; 0x1d
    1ab2:	08 95       	ret

00001ab4 <Timebase_ISR_Executables>:
  #endif
}


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    1ab4:	e0 91 96 01 	lds	r30, 0x0196
    1ab8:	f0 91 97 01 	lds	r31, 0x0197
    1abc:	80 89       	ldd	r24, Z+16	; 0x10
    1abe:	91 89       	ldd	r25, Z+17	; 0x11
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	91 8b       	std	Z+17, r25	; 0x11
    1ac4:	80 8b       	std	Z+16, r24	; 0x10
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1ac6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ac8:	88 60       	ori	r24, 0x08	; 8
    1aca:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    1acc:	20 89       	ldd	r18, Z+16	; 0x10
    1ace:	31 89       	ldd	r19, Z+17	; 0x11
    1ad0:	80 81       	ld	r24, Z
    1ad2:	91 81       	ldd	r25, Z+1	; 0x01
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	68 f0       	brcs	.+26     	; 0x1af4 <Timebase_ISR_Executables+0x40>
    Timebase->Time.SubSecondsShadow = 0;
    1ada:	11 8a       	std	Z+17, r1	; 0x11
    1adc:	10 8a       	std	Z+16, r1	; 0x10
    Timebase->Time.SecondsShadow++;
    1ade:	82 89       	ldd	r24, Z+18	; 0x12
    1ae0:	93 89       	ldd	r25, Z+19	; 0x13
    1ae2:	a4 89       	ldd	r26, Z+20	; 0x14
    1ae4:	b5 89       	ldd	r27, Z+21	; 0x15
    1ae6:	01 96       	adiw	r24, 0x01	; 1
    1ae8:	a1 1d       	adc	r26, r1
    1aea:	b1 1d       	adc	r27, r1
    1aec:	82 8b       	std	Z+18, r24	; 0x12
    1aee:	93 8b       	std	Z+19, r25	; 0x13
    1af0:	a4 8b       	std	Z+20, r26	; 0x14
    1af2:	b5 8b       	std	Z+21, r27	; 0x15
    1af4:	08 95       	ret

00001af6 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    1af6:	1f 92       	push	r1
    1af8:	0f 92       	push	r0
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	0f 92       	push	r0
    1afe:	11 24       	eor	r1, r1
    1b00:	2f 93       	push	r18
    1b02:	3f 93       	push	r19
    1b04:	4f 93       	push	r20
    1b06:	5f 93       	push	r21
    1b08:	6f 93       	push	r22
    1b0a:	7f 93       	push	r23
    1b0c:	8f 93       	push	r24
    1b0e:	9f 93       	push	r25
    1b10:	af 93       	push	r26
    1b12:	bf 93       	push	r27
    1b14:	ef 93       	push	r30
    1b16:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b18:	e0 91 96 01 	lds	r30, 0x0196
    1b1c:	f0 91 97 01 	lds	r31, 0x0197
    1b20:	84 81       	ldd	r24, Z+4	; 0x04
    1b22:	95 81       	ldd	r25, Z+5	; 0x05
    1b24:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1b26:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <Timebase_ISR_Executables>
}
    1b2a:	ff 91       	pop	r31
    1b2c:	ef 91       	pop	r30
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <Timebase_LP_ISR_Executables>:
}


void Timebase_LP_ISR_Executables(void){
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds++;
    1b4c:	e0 91 96 01 	lds	r30, 0x0196
    1b50:	f0 91 97 01 	lds	r31, 0x0197
    1b54:	87 89       	ldd	r24, Z+23	; 0x17
    1b56:	90 8d       	ldd	r25, Z+24	; 0x18
    1b58:	01 96       	adiw	r24, 0x01	; 1
    1b5a:	90 8f       	std	Z+24, r25	; 0x18
    1b5c:	87 8b       	std	Z+23, r24	; 0x17
  if(Timebase->Time.LPTimerSubSeconds >= Timebase->Config.LPUpdateRate){
    1b5e:	27 89       	ldd	r18, Z+23	; 0x17
    1b60:	30 8d       	ldd	r19, Z+24	; 0x18
    1b62:	82 81       	ldd	r24, Z+2	; 0x02
    1b64:	93 81       	ldd	r25, Z+3	; 0x03
    1b66:	28 17       	cp	r18, r24
    1b68:	39 07       	cpc	r19, r25
    1b6a:	68 f0       	brcs	.+26     	; 0x1b86 <Timebase_LP_ISR_Executables+0x3a>
    Timebase->Time.LPTimerSubSeconds = 0;
    1b6c:	10 8e       	std	Z+24, r1	; 0x18
    1b6e:	17 8a       	std	Z+23, r1	; 0x17
    Timebase->Time.LPTimerSeconds++;
    1b70:	81 8d       	ldd	r24, Z+25	; 0x19
    1b72:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b74:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1b76:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1b78:	01 96       	adiw	r24, 0x01	; 1
    1b7a:	a1 1d       	adc	r26, r1
    1b7c:	b1 1d       	adc	r27, r1
    1b7e:	81 8f       	std	Z+25, r24	; 0x19
    1b80:	92 8f       	std	Z+26, r25	; 0x1a
    1b82:	a3 8f       	std	Z+27, r26	; 0x1b
    1b84:	b4 8f       	std	Z+28, r27	; 0x1c
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
    1b86:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b88:	80 62       	ori	r24, 0x20	; 32
    1b8a:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
}
    1b8c:	08 95       	ret

00001b8e <__vector_6>:

/**********************************LPTimer ISR Start*********************************/

#ifdef TIMEBASE_LP_TIMER_ENABLE

ISR(WDT_vect){
    1b8e:	1f 92       	push	r1
    1b90:	0f 92       	push	r0
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	0f 92       	push	r0
    1b96:	11 24       	eor	r1, r1
    1b98:	2f 93       	push	r18
    1b9a:	3f 93       	push	r19
    1b9c:	4f 93       	push	r20
    1b9e:	5f 93       	push	r21
    1ba0:	6f 93       	push	r22
    1ba2:	7f 93       	push	r23
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	af 93       	push	r26
    1baa:	bf 93       	push	r27
    1bac:	ef 93       	push	r30
    1bae:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
    1bb0:	e0 e6       	ldi	r30, 0x60	; 96
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	80 64       	ori	r24, 0x40	; 64
    1bb8:	80 83       	st	Z, r24
  Timebase_LP_ISR_Executables();
    1bba:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <Timebase_LP_ISR_Executables>
}
    1bbe:	ff 91       	pop	r31
    1bc0:	ef 91       	pop	r30
    1bc2:	bf 91       	pop	r27
    1bc4:	af 91       	pop	r26
    1bc6:	9f 91       	pop	r25
    1bc8:	8f 91       	pop	r24
    1bca:	7f 91       	pop	r23
    1bcc:	6f 91       	pop	r22
    1bce:	5f 91       	pop	r21
    1bd0:	4f 91       	pop	r20
    1bd2:	3f 91       	pop	r19
    1bd4:	2f 91       	pop	r18
    1bd6:	0f 90       	pop	r0
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	0f 90       	pop	r0
    1bdc:	1f 90       	pop	r1
    1bde:	18 95       	reti

00001be0 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    1be0:	10 92 8c 01 	sts	0x018C, r1
    1be4:	ed e8       	ldi	r30, 0x8D	; 141
    1be6:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    1be8:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	e5 39       	cpi	r30, 0x95	; 149
    1bee:	f8 07       	cpc	r31, r24
    1bf0:	d9 f7       	brne	.-10     	; 0x1be8 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    1bf2:	10 82       	st	Z, r1
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
  }
  #endif
  
}
    1bf4:	08 95       	ret

00001bf6 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    1bf6:	08 95       	ret

00001bf8 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    1bf8:	08 95       	ret

00001bfa <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    1bfa:	9b 01       	movw	r18, r22
    1bfc:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1bfe:	60 e6       	ldi	r22, 0x60	; 96
    1c00:	73 ee       	ldi	r23, 0xE3	; 227
    1c02:	86 e1       	ldi	r24, 0x16	; 22
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__udivmodsi4>
    1c0a:	21 50       	subi	r18, 0x01	; 1
    1c0c:	30 40       	sbci	r19, 0x00	; 0
    1c0e:	40 40       	sbci	r20, 0x00	; 0
    1c10:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    1c12:	e0 ec       	ldi	r30, 0xC0	; 192
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	82 60       	ori	r24, 0x02	; 2
    1c1a:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    1c1c:	bb 27       	eor	r27, r27
    1c1e:	a5 2f       	mov	r26, r21
    1c20:	94 2f       	mov	r25, r20
    1c22:	83 2f       	mov	r24, r19
    1c24:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    1c28:	20 93 c4 00 	sts	0x00C4, r18
}
    1c2c:	08 95       	ret

00001c2e <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    1c2e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1c38:	86 e0       	ldi	r24, 0x06	; 6
    1c3a:	80 93 c2 00 	sts	0x00C2, r24
}
    1c3e:	08 95       	ret

00001c40 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    1c40:	e1 ec       	ldi	r30, 0xC1	; 193
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	80 61       	ori	r24, 0x10	; 16
    1c48:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1c4a:	86 e0       	ldi	r24, 0x06	; 6
    1c4c:	80 93 c2 00 	sts	0x00C2, r24
}
    1c50:	08 95       	ret

00001c52 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    1c52:	e1 ec       	ldi	r30, 0xC1	; 193
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	80 81       	ld	r24, Z
    1c58:	80 68       	ori	r24, 0x80	; 128
    1c5a:	80 83       	st	Z, r24
  sei();
    1c5c:	78 94       	sei
}
    1c5e:	08 95       	ret

00001c60 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    1c60:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1c62:	80 91 c0 00 	lds	r24, 0x00C0
    1c66:	85 ff       	sbrs	r24, 5
    1c68:	fc cf       	rjmp	.-8      	; 0x1c62 <UART_Transmit_Byte+0x2>
  UDR0=val;
    1c6a:	90 93 c6 00 	sts	0x00C6, r25
}
    1c6e:	08 95       	ret

00001c70 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	0f 92       	push	r0
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    1c7a:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    1c7c:	80 91 c0 00 	lds	r24, 0x00C0
    1c80:	84 ff       	sbrs	r24, 4
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <UART_Receive_Byte+0x1e>
    val=UDR0;
    1c84:	80 91 c6 00 	lds	r24, 0x00C6
    1c88:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	08 c0       	rjmp	.+16     	; 0x1c9e <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    1c8e:	80 91 c0 00 	lds	r24, 0x00C0
    1c92:	83 ff       	sbrs	r24, 3
    1c94:	07 c0       	rjmp	.+14     	; 0x1ca4 <UART_Receive_Byte+0x34>
    val=UDR0;
    1c96:	80 91 c6 00 	lds	r24, 0x00C6
    1c9a:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	80 93 8c 01 	sts	0x018C, r24
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    1ca4:	80 91 c6 00 	lds	r24, 0x00C6
    1ca8:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    1caa:	10 92 8c 01 	sts	0x018C, r1
  }
  return val;
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb0:	0f 90       	pop	r0
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <UART_Transmit_Byte_Hex>:
}
#endif



void UART_Transmit_Byte_Hex(uint32_t val){
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
    1cbc:	df 93       	push	r29
    1cbe:	ab 01       	movw	r20, r22
    1cc0:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    1cc2:	4f 3f       	cpi	r20, 0xFF	; 255
    1cc4:	51 05       	cpc	r21, r1
    1cc6:	61 05       	cpc	r22, r1
    1cc8:	71 05       	cpc	r23, r1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <UART_Transmit_Byte_Hex+0x16>
    1ccc:	28 f4       	brcc	.+10     	; 0x1cd8 <UART_Transmit_Byte_Hex+0x20>
    1cce:	e8 e0       	ldi	r30, 0x08	; 8
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	c2 e0       	ldi	r28, 0x02	; 2
    1cd4:	d0 e0       	ldi	r29, 0x00	; 0
    1cd6:	11 c0       	rjmp	.+34     	; 0x1cfa <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    1cd8:	40 30       	cpi	r20, 0x00	; 0
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	58 07       	cpc	r21, r24
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	68 07       	cpc	r22, r24
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	78 07       	cpc	r23, r24
    1ce6:	28 f0       	brcs	.+10     	; 0x1cf2 <UART_Transmit_Byte_Hex+0x3a>
    1ce8:	e0 e2       	ldi	r30, 0x20	; 32
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	c8 e0       	ldi	r28, 0x08	; 8
    1cee:	d0 e0       	ldi	r29, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <UART_Transmit_Byte_Hex+0x42>
    1cf2:	e0 e1       	ldi	r30, 0x10	; 16
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	c4 e0       	ldi	r28, 0x04	; 4
    1cf8:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1cfa:	80 91 c0 00 	lds	r24, 0x00C0
    1cfe:	85 ff       	sbrs	r24, 5
    1d00:	fc cf       	rjmp	.-8      	; 0x1cfa <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    1d02:	80 e3       	ldi	r24, 0x30	; 48
    1d04:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d08:	80 91 c0 00 	lds	r24, 0x00C0
    1d0c:	85 ff       	sbrs	r24, 5
    1d0e:	fc cf       	rjmp	.-8      	; 0x1d08 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    1d10:	88 e7       	ldi	r24, 0x78	; 120
    1d12:	80 93 c6 00 	sts	0x00C6, r24
    1d16:	10 e0       	ldi	r17, 0x00	; 0
    1d18:	1f c0       	rjmp	.+62     	; 0x1d58 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    1d1a:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    1d1c:	db 01       	movw	r26, r22
    1d1e:	ca 01       	movw	r24, r20
    1d20:	0e 2e       	mov	r0, r30
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <UART_Transmit_Byte_Hex+0x74>
    1d24:	b6 95       	lsr	r27
    1d26:	a7 95       	ror	r26
    1d28:	97 95       	ror	r25
    1d2a:	87 95       	ror	r24
    1d2c:	0a 94       	dec	r0
    1d2e:	d2 f7       	brpl	.-12     	; 0x1d24 <UART_Transmit_Byte_Hex+0x6c>
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	8f 70       	andi	r24, 0x0F	; 15
    1d34:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    1d36:	8a 30       	cpi	r24, 0x0A	; 10
    1d38:	91 05       	cpc	r25, r1
    1d3a:	20 f0       	brcs	.+8      	; 0x1d44 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	29 5c       	subi	r18, 0xC9	; 201
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	03 c0       	rjmp	.+6      	; 0x1d4a <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    1d44:	9c 01       	movw	r18, r24
    1d46:	20 5d       	subi	r18, 0xD0	; 208
    1d48:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d4a:	80 91 c0 00 	lds	r24, 0x00C0
    1d4e:	85 ff       	sbrs	r24, 5
    1d50:	fc cf       	rjmp	.-8      	; 0x1d4a <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    1d52:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    1d56:	1f 5f       	subi	r17, 0xFF	; 255
    1d58:	81 2f       	mov	r24, r17
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	8c 17       	cp	r24, r28
    1d5e:	9d 07       	cpc	r25, r29
    1d60:	e0 f2       	brcs	.-72     	; 0x1d1a <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    1d62:	df 91       	pop	r29
    1d64:	cf 91       	pop	r28
    1d66:	1f 91       	pop	r17
    1d68:	08 95       	ret

00001d6a <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	ab 01       	movw	r20, r22
    1d7c:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    1d7e:	4f 3f       	cpi	r20, 0xFF	; 255
    1d80:	51 05       	cpc	r21, r1
    1d82:	61 05       	cpc	r22, r1
    1d84:	71 05       	cpc	r23, r1
    1d86:	09 f0       	breq	.+2      	; 0x1d8a <UART_Transmit_Byte_Bin+0x20>
    1d88:	10 f4       	brcc	.+4      	; 0x1d8e <UART_Transmit_Byte_Bin+0x24>
    1d8a:	97 e0       	ldi	r25, 0x07	; 7
    1d8c:	0b c0       	rjmp	.+22     	; 0x1da4 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    1d8e:	40 30       	cpi	r20, 0x00	; 0
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	58 07       	cpc	r21, r24
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	68 07       	cpc	r22, r24
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	78 07       	cpc	r23, r24
    1d9c:	10 f0       	brcs	.+4      	; 0x1da2 <UART_Transmit_Byte_Bin+0x38>
    1d9e:	9f e1       	ldi	r25, 0x1F	; 31
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <UART_Transmit_Byte_Bin+0x3a>
    1da2:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1da4:	80 91 c0 00 	lds	r24, 0x00C0
    1da8:	85 ff       	sbrs	r24, 5
    1daa:	fc cf       	rjmp	.-8      	; 0x1da4 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    1dac:	80 e3       	ldi	r24, 0x30	; 48
    1dae:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1db2:	80 91 c0 00 	lds	r24, 0x00C0
    1db6:	85 ff       	sbrs	r24, 5
    1db8:	fc cf       	rjmp	.-8      	; 0x1db2 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    1dba:	82 e6       	ldi	r24, 0x62	; 98
    1dbc:	80 93 c6 00 	sts	0x00C6, r24
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    1dc4:	e9 2f       	mov	r30, r25
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    1dc8:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    1dca:	11 e3       	ldi	r17, 0x31	; 49
    1dcc:	ef 01       	movw	r28, r30
    1dce:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1dd0:	cf 01       	movw	r24, r30
    1dd2:	82 1b       	sub	r24, r18
    1dd4:	93 0b       	sbc	r25, r19
    1dd6:	6a 01       	movw	r12, r20
    1dd8:	7b 01       	movw	r14, r22
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <UART_Transmit_Byte_Bin+0x7a>
    1ddc:	f6 94       	lsr	r15
    1dde:	e7 94       	ror	r14
    1de0:	d7 94       	ror	r13
    1de2:	c7 94       	ror	r12
    1de4:	8a 95       	dec	r24
    1de6:	d2 f7       	brpl	.-12     	; 0x1ddc <UART_Transmit_Byte_Bin+0x72>
    1de8:	d7 01       	movw	r26, r14
    1dea:	c6 01       	movw	r24, r12
    1dec:	81 70       	andi	r24, 0x01	; 1
    1dee:	90 70       	andi	r25, 0x00	; 0
    1df0:	89 2b       	or	r24, r25
    1df2:	39 f0       	breq	.+14     	; 0x1e02 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1df4:	80 91 c0 00 	lds	r24, 0x00C0
    1df8:	85 ff       	sbrs	r24, 5
    1dfa:	fc cf       	rjmp	.-8      	; 0x1df4 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    1dfc:	10 93 c6 00 	sts	0x00C6, r17
    1e00:	06 c0       	rjmp	.+12     	; 0x1e0e <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e02:	80 91 c0 00 	lds	r24, 0x00C0
    1e06:	85 ff       	sbrs	r24, 5
    1e08:	fc cf       	rjmp	.-8      	; 0x1e02 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    1e0a:	00 93 c6 00 	sts	0x00C6, r16
    1e0e:	2f 5f       	subi	r18, 0xFF	; 255
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    1e12:	2c 17       	cp	r18, r28
    1e14:	3d 07       	cpc	r19, r29
    1e16:	e1 f6       	brne	.-72     	; 0x1dd0 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	08 95       	ret

00001e2a <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    1e2a:	ac 01       	movw	r20, r24
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	07 c0       	rjmp	.+14     	; 0x1e3e <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e30:	80 91 c0 00 	lds	r24, 0x00C0
    1e34:	85 ff       	sbrs	r24, 5
    1e36:	fc cf       	rjmp	.-8      	; 0x1e30 <UART_Transmit_Text+0x6>
  UDR0=val;
    1e38:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    1e3c:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    1e3e:	fa 01       	movw	r30, r20
    1e40:	e2 0f       	add	r30, r18
    1e42:	f1 1d       	adc	r31, r1
    1e44:	e0 81       	ld	r30, Z
    1e46:	ee 23       	and	r30, r30
    1e48:	99 f7       	brne	.-26     	; 0x1e30 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    1e4a:	08 95       	ret

00001e4c <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    1e4c:	8d e0       	ldi	r24, 0x0D	; 13
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    1e50:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_Transmit_Text>
}
    1e54:	08 95       	ret

00001e56 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    1e56:	80 e1       	ldi	r24, 0x10	; 16
    1e58:	91 e0       	ldi	r25, 0x01	; 1
    1e5a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <UART_Transmit_Text>
}
    1e5e:	08 95       	ret

00001e60 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    1e60:	bf 92       	push	r11
    1e62:	cf 92       	push	r12
    1e64:	df 92       	push	r13
    1e66:	ef 92       	push	r14
    1e68:	ff 92       	push	r15
    1e6a:	0f 93       	push	r16
    1e6c:	1f 93       	push	r17
    1e6e:	6b 01       	movw	r12, r22
    1e70:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    1e72:	61 15       	cp	r22, r1
    1e74:	71 05       	cpc	r23, r1
    1e76:	81 05       	cpc	r24, r1
    1e78:	91 05       	cpc	r25, r1
    1e7a:	31 f4       	brne	.+12     	; 0x1e88 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    1e7c:	10 92 8d 01 	sts	0x018D, r1
    UART.InputNumberDigits=1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	80 93 95 01 	sts	0x0195, r24
    1e86:	23 c0       	rjmp	.+70     	; 0x1ece <UART_Determine_Digit_Numbers+0x6e>
    1e88:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    1e8a:	0b 2d       	mov	r16, r11
    1e8c:	10 e0       	ldi	r17, 0x00	; 0
    1e8e:	04 57       	subi	r16, 0x74	; 116
    1e90:	1e 4f       	sbci	r17, 0xFE	; 254
    1e92:	c7 01       	movw	r24, r14
    1e94:	b6 01       	movw	r22, r12
    1e96:	2a e0       	ldi	r18, 0x0A	; 10
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__udivmodsi4>
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    1ea6:	c7 01       	movw	r24, r14
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	2a e0       	ldi	r18, 0x0A	; 10
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <__udivmodsi4>
    1eb6:	c9 01       	movw	r24, r18
    1eb8:	da 01       	movw	r26, r20
    1eba:	6c 01       	movw	r12, r24
    1ebc:	7d 01       	movw	r14, r26
      i++;
    1ebe:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    1ec0:	c1 14       	cp	r12, r1
    1ec2:	d1 04       	cpc	r13, r1
    1ec4:	e1 04       	cpc	r14, r1
    1ec6:	f1 04       	cpc	r15, r1
    1ec8:	01 f7       	brne	.-64     	; 0x1e8a <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    1eca:	b0 92 95 01 	sts	0x0195, r11
  }
}
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	df 90       	pop	r13
    1ed8:	cf 90       	pop	r12
    1eda:	bf 90       	pop	r11
    1edc:	08 95       	ret

00001ede <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    1ede:	e0 91 95 01 	lds	r30, 0x0195
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    1ee4:	2e 2f       	mov	r18, r30
    1ee6:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    1ee8:	e2 2f       	mov	r30, r18
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	e4 57       	subi	r30, 0x74	; 116
    1eee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ef2:	80 91 c0 00 	lds	r24, 0x00C0
    1ef6:	85 ff       	sbrs	r24, 5
    1ef8:	fc cf       	rjmp	.-8      	; 0x1ef2 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    1efa:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    1efc:	90 93 c6 00 	sts	0x00C6, r25
    1f00:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    1f02:	ee 23       	and	r30, r30
    1f04:	79 f7       	brne	.-34     	; 0x1ee4 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    1f06:	08 95       	ret

00001f08 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    1f08:	9b 01       	movw	r18, r22
    1f0a:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    1f0c:	97 ff       	sbrs	r25, 7
    1f0e:	0e c0       	rjmp	.+28     	; 0x1f2c <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f10:	80 91 c0 00 	lds	r24, 0x00C0
    1f14:	85 ff       	sbrs	r24, 5
    1f16:	fc cf       	rjmp	.-8      	; 0x1f10 <UART_Transmit_Number+0x8>
  UDR0=val;
    1f18:	8d e2       	ldi	r24, 0x2D	; 45
    1f1a:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    1f1e:	50 95       	com	r21
    1f20:	40 95       	com	r20
    1f22:	30 95       	com	r19
    1f24:	21 95       	neg	r18
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
    1f28:	4f 4f       	sbci	r20, 0xFF	; 255
    1f2a:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    1f2c:	ca 01       	movw	r24, r20
    1f2e:	b9 01       	movw	r22, r18
    1f30:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    1f34:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <UART_Transmit_Number_Digits>
}
    1f38:	08 95       	ret

00001f3a <UART_Flush_Buffer>:
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
  #endif
}
    1f3a:	08 95       	ret

00001f3c <UART_Init>:
}
#endif



void UART_Init(uint32_t baud){
    1f3c:	ef 92       	push	r14
    1f3e:	ff 92       	push	r15
    1f40:	0f 93       	push	r16
    1f42:	1f 93       	push	r17
    1f44:	7b 01       	movw	r14, r22
    1f46:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    1f48:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    1f4c:	c8 01       	movw	r24, r16
    1f4e:	b7 01       	movw	r22, r14
    1f50:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    1f54:	e1 ec       	ldi	r30, 0xC1	; 193
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 60       	ori	r24, 0x08	; 8
    1f5c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1f5e:	86 e0       	ldi	r24, 0x06	; 6
    1f60:	80 93 c2 00 	sts	0x00C2, r24
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
}
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	08 95       	ret

00001f6e <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    1f6e:	10 92 12 01 	sts	0x0112, r1
    1f72:	10 92 13 01 	sts	0x0113, r1
    1f76:	10 92 14 01 	sts	0x0114, r1
    1f7a:	10 92 15 01 	sts	0x0115, r1
  PID.Input.Ki = 0;
    1f7e:	10 92 16 01 	sts	0x0116, r1
    1f82:	10 92 17 01 	sts	0x0117, r1
    1f86:	10 92 18 01 	sts	0x0118, r1
    1f8a:	10 92 19 01 	sts	0x0119, r1
  PID.Input.Kd = 0;
    1f8e:	10 92 1a 01 	sts	0x011A, r1
    1f92:	10 92 1b 01 	sts	0x011B, r1
    1f96:	10 92 1c 01 	sts	0x011C, r1
    1f9a:	10 92 1d 01 	sts	0x011D, r1
  PID.Input.SetPoint = 0;
    1f9e:	10 92 1e 01 	sts	0x011E, r1
    1fa2:	10 92 1f 01 	sts	0x011F, r1
    1fa6:	10 92 20 01 	sts	0x0120, r1
    1faa:	10 92 21 01 	sts	0x0121, r1
  PID.Input.ProcessValue = 0;
    1fae:	10 92 22 01 	sts	0x0122, r1
    1fb2:	10 92 23 01 	sts	0x0123, r1
    1fb6:	10 92 24 01 	sts	0x0124, r1
    1fba:	10 92 25 01 	sts	0x0125, r1
  PID.Error.PError = 0;
    1fbe:	10 92 26 01 	sts	0x0126, r1
    1fc2:	10 92 27 01 	sts	0x0127, r1
    1fc6:	10 92 28 01 	sts	0x0128, r1
    1fca:	10 92 29 01 	sts	0x0129, r1
  PID.Error.DError = 0;
    1fce:	10 92 2a 01 	sts	0x012A, r1
    1fd2:	10 92 2b 01 	sts	0x012B, r1
    1fd6:	10 92 2c 01 	sts	0x012C, r1
    1fda:	10 92 2d 01 	sts	0x012D, r1
  PID.Error.IError = 0;
    1fde:	10 92 2e 01 	sts	0x012E, r1
    1fe2:	10 92 2f 01 	sts	0x012F, r1
    1fe6:	10 92 30 01 	sts	0x0130, r1
    1fea:	10 92 31 01 	sts	0x0131, r1
  PID.Error.IErrorLimit = 0;
    1fee:	10 92 32 01 	sts	0x0132, r1
    1ff2:	10 92 33 01 	sts	0x0133, r1
    1ff6:	10 92 34 01 	sts	0x0134, r1
    1ffa:	10 92 35 01 	sts	0x0135, r1
  PID.Error.LastError = 0;
    1ffe:	10 92 36 01 	sts	0x0136, r1
    2002:	10 92 37 01 	sts	0x0137, r1
    2006:	10 92 38 01 	sts	0x0138, r1
    200a:	10 92 39 01 	sts	0x0139, r1
  PID.Products.PError = 0;
    200e:	10 92 3a 01 	sts	0x013A, r1
    2012:	10 92 3b 01 	sts	0x013B, r1
    2016:	10 92 3c 01 	sts	0x013C, r1
    201a:	10 92 3d 01 	sts	0x013D, r1
  PID.Products.IError = 0;
    201e:	10 92 3e 01 	sts	0x013E, r1
    2022:	10 92 3f 01 	sts	0x013F, r1
    2026:	10 92 40 01 	sts	0x0140, r1
    202a:	10 92 41 01 	sts	0x0141, r1
  PID.Products.DError = 0;
    202e:	10 92 42 01 	sts	0x0142, r1
    2032:	10 92 43 01 	sts	0x0143, r1
    2036:	10 92 44 01 	sts	0x0144, r1
    203a:	10 92 45 01 	sts	0x0145, r1
  PID.Products.ScaleFact = 0;
    203e:	10 92 46 01 	sts	0x0146, r1
    2042:	10 92 47 01 	sts	0x0147, r1
    2046:	10 92 48 01 	sts	0x0148, r1
    204a:	10 92 49 01 	sts	0x0149, r1
  PID.Output = 0;
    204e:	10 92 4a 01 	sts	0x014A, r1
    2052:	10 92 4b 01 	sts	0x014B, r1
    2056:	10 92 4c 01 	sts	0x014C, r1
    205a:	10 92 4d 01 	sts	0x014D, r1
  PID.OutputNonNegative = 0;
    205e:	10 92 4e 01 	sts	0x014E, r1
    2062:	10 92 4f 01 	sts	0x014F, r1
    2066:	10 92 50 01 	sts	0x0150, r1
    206a:	10 92 51 01 	sts	0x0151, r1
}
    206e:	08 95       	ret

00002070 <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2070:	60 93 12 01 	sts	0x0112, r22
    2074:	70 93 13 01 	sts	0x0113, r23
    2078:	80 93 14 01 	sts	0x0114, r24
    207c:	90 93 15 01 	sts	0x0115, r25
}
    2080:	08 95       	ret

00002082 <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2082:	60 93 16 01 	sts	0x0116, r22
    2086:	70 93 17 01 	sts	0x0117, r23
    208a:	80 93 18 01 	sts	0x0118, r24
    208e:	90 93 19 01 	sts	0x0119, r25
}
    2092:	08 95       	ret

00002094 <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2094:	60 93 1a 01 	sts	0x011A, r22
    2098:	70 93 1b 01 	sts	0x011B, r23
    209c:	80 93 1c 01 	sts	0x011C, r24
    20a0:	90 93 1d 01 	sts	0x011D, r25
}
    20a4:	08 95       	ret

000020a6 <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    20a6:	ef 92       	push	r14
    20a8:	ff 92       	push	r15
    20aa:	0f 93       	push	r16
    20ac:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    20ae:	60 93 12 01 	sts	0x0112, r22
    20b2:	70 93 13 01 	sts	0x0113, r23
    20b6:	80 93 14 01 	sts	0x0114, r24
    20ba:	90 93 15 01 	sts	0x0115, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    20be:	20 93 16 01 	sts	0x0116, r18
    20c2:	30 93 17 01 	sts	0x0117, r19
    20c6:	40 93 18 01 	sts	0x0118, r20
    20ca:	50 93 19 01 	sts	0x0119, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    20ce:	e0 92 1a 01 	sts	0x011A, r14
    20d2:	f0 92 1b 01 	sts	0x011B, r15
    20d6:	00 93 1c 01 	sts	0x011C, r16
    20da:	10 93 1d 01 	sts	0x011D, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	08 95       	ret

000020e8 <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    20e8:	60 93 1e 01 	sts	0x011E, r22
    20ec:	70 93 1f 01 	sts	0x011F, r23
    20f0:	80 93 20 01 	sts	0x0120, r24
    20f4:	90 93 21 01 	sts	0x0121, r25
}
    20f8:	08 95       	ret

000020fa <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    20fa:	60 93 22 01 	sts	0x0122, r22
    20fe:	70 93 23 01 	sts	0x0123, r23
    2102:	80 93 24 01 	sts	0x0124, r24
    2106:	90 93 25 01 	sts	0x0125, r25
}
    210a:	08 95       	ret

0000210c <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    210c:	60 93 32 01 	sts	0x0132, r22
    2110:	70 93 33 01 	sts	0x0133, r23
    2114:	80 93 34 01 	sts	0x0134, r24
    2118:	90 93 35 01 	sts	0x0135, r25
}
    211c:	08 95       	ret

0000211e <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    211e:	60 93 46 01 	sts	0x0146, r22
    2122:	70 93 47 01 	sts	0x0147, r23
    2126:	80 93 48 01 	sts	0x0148, r24
    212a:	90 93 49 01 	sts	0x0149, r25
}
    212e:	08 95       	ret

00002130 <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    2130:	10 92 2e 01 	sts	0x012E, r1
    2134:	10 92 2f 01 	sts	0x012F, r1
    2138:	10 92 30 01 	sts	0x0130, r1
    213c:	10 92 31 01 	sts	0x0131, r1
}
    2140:	08 95       	ret

00002142 <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    214a:	20 91 1e 01 	lds	r18, 0x011E
    214e:	30 91 1f 01 	lds	r19, 0x011F
    2152:	40 91 20 01 	lds	r20, 0x0120
    2156:	50 91 21 01 	lds	r21, 0x0121
    215a:	80 91 22 01 	lds	r24, 0x0122
    215e:	90 91 23 01 	lds	r25, 0x0123
    2162:	a0 91 24 01 	lds	r26, 0x0124
    2166:	b0 91 25 01 	lds	r27, 0x0125
    216a:	28 1b       	sub	r18, r24
    216c:	39 0b       	sbc	r19, r25
    216e:	4a 0b       	sbc	r20, r26
    2170:	5b 0b       	sbc	r21, r27
    2172:	20 93 26 01 	sts	0x0126, r18
    2176:	30 93 27 01 	sts	0x0127, r19
    217a:	40 93 28 01 	sts	0x0128, r20
    217e:	50 93 29 01 	sts	0x0129, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    2182:	80 91 36 01 	lds	r24, 0x0136
    2186:	90 91 37 01 	lds	r25, 0x0137
    218a:	a0 91 38 01 	lds	r26, 0x0138
    218e:	b0 91 39 01 	lds	r27, 0x0139
    2192:	79 01       	movw	r14, r18
    2194:	8a 01       	movw	r16, r20
    2196:	e8 1a       	sub	r14, r24
    2198:	f9 0a       	sbc	r15, r25
    219a:	0a 0b       	sbc	r16, r26
    219c:	1b 0b       	sbc	r17, r27
    219e:	e0 92 2a 01 	sts	0x012A, r14
    21a2:	f0 92 2b 01 	sts	0x012B, r15
    21a6:	00 93 2c 01 	sts	0x012C, r16
    21aa:	10 93 2d 01 	sts	0x012D, r17
  PID.Error.LastError = PID.Error.PError;
    21ae:	20 93 36 01 	sts	0x0136, r18
    21b2:	30 93 37 01 	sts	0x0137, r19
    21b6:	40 93 38 01 	sts	0x0138, r20
    21ba:	50 93 39 01 	sts	0x0139, r21
  PID.Error.IError += PID.Error.PError;
    21be:	e0 90 2e 01 	lds	r14, 0x012E
    21c2:	f0 90 2f 01 	lds	r15, 0x012F
    21c6:	00 91 30 01 	lds	r16, 0x0130
    21ca:	10 91 31 01 	lds	r17, 0x0131
    21ce:	e2 0e       	add	r14, r18
    21d0:	f3 1e       	adc	r15, r19
    21d2:	04 1f       	adc	r16, r20
    21d4:	15 1f       	adc	r17, r21
    21d6:	e0 92 2e 01 	sts	0x012E, r14
    21da:	f0 92 2f 01 	sts	0x012F, r15
    21de:	00 93 30 01 	sts	0x0130, r16
    21e2:	10 93 31 01 	sts	0x0131, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    21e6:	80 91 32 01 	lds	r24, 0x0132
    21ea:	90 91 33 01 	lds	r25, 0x0133
    21ee:	a0 91 34 01 	lds	r26, 0x0134
    21f2:	b0 91 35 01 	lds	r27, 0x0135
    21f6:	8e 15       	cp	r24, r14
    21f8:	9f 05       	cpc	r25, r15
    21fa:	a0 07       	cpc	r26, r16
    21fc:	b1 07       	cpc	r27, r17
    21fe:	4c f4       	brge	.+18     	; 0x2212 <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    2200:	80 93 2e 01 	sts	0x012E, r24
    2204:	90 93 2f 01 	sts	0x012F, r25
    2208:	a0 93 30 01 	sts	0x0130, r26
    220c:	b0 93 31 01 	sts	0x0131, r27
    2210:	14 c0       	rjmp	.+40     	; 0x223a <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    2212:	22 27       	eor	r18, r18
    2214:	33 27       	eor	r19, r19
    2216:	a9 01       	movw	r20, r18
    2218:	28 1b       	sub	r18, r24
    221a:	39 0b       	sbc	r19, r25
    221c:	4a 0b       	sbc	r20, r26
    221e:	5b 0b       	sbc	r21, r27
    2220:	e2 16       	cp	r14, r18
    2222:	f3 06       	cpc	r15, r19
    2224:	04 07       	cpc	r16, r20
    2226:	15 07       	cpc	r17, r21
    2228:	44 f4       	brge	.+16     	; 0x223a <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    222a:	20 93 2e 01 	sts	0x012E, r18
    222e:	30 93 2f 01 	sts	0x012F, r19
    2232:	40 93 30 01 	sts	0x0130, r20
    2236:	50 93 31 01 	sts	0x0131, r21
  }
}
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	08 95       	ret

00002244 <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    2244:	6f 92       	push	r6
    2246:	7f 92       	push	r7
    2248:	8f 92       	push	r8
    224a:	9f 92       	push	r9
    224c:	af 92       	push	r10
    224e:	bf 92       	push	r11
    2250:	cf 92       	push	r12
    2252:	df 92       	push	r13
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    225c:	60 91 16 01 	lds	r22, 0x0116
    2260:	70 91 17 01 	lds	r23, 0x0117
    2264:	80 91 18 01 	lds	r24, 0x0118
    2268:	90 91 19 01 	lds	r25, 0x0119
    226c:	20 91 2e 01 	lds	r18, 0x012E
    2270:	30 91 2f 01 	lds	r19, 0x012F
    2274:	40 91 30 01 	lds	r20, 0x0130
    2278:	50 91 31 01 	lds	r21, 0x0131
    227c:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulsi3>
    2280:	3b 01       	movw	r6, r22
    2282:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    2284:	60 91 1a 01 	lds	r22, 0x011A
    2288:	70 91 1b 01 	lds	r23, 0x011B
    228c:	80 91 1c 01 	lds	r24, 0x011C
    2290:	90 91 1d 01 	lds	r25, 0x011D
    2294:	20 91 2a 01 	lds	r18, 0x012A
    2298:	30 91 2b 01 	lds	r19, 0x012B
    229c:	40 91 2c 01 	lds	r20, 0x012C
    22a0:	50 91 2d 01 	lds	r21, 0x012D
    22a4:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulsi3>
    22a8:	5b 01       	movw	r10, r22
    22aa:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    22ac:	e0 90 46 01 	lds	r14, 0x0146
    22b0:	f0 90 47 01 	lds	r15, 0x0147
    22b4:	00 91 48 01 	lds	r16, 0x0148
    22b8:	10 91 49 01 	lds	r17, 0x0149
    22bc:	60 91 12 01 	lds	r22, 0x0112
    22c0:	70 91 13 01 	lds	r23, 0x0113
    22c4:	80 91 14 01 	lds	r24, 0x0114
    22c8:	90 91 15 01 	lds	r25, 0x0115
    22cc:	20 91 26 01 	lds	r18, 0x0126
    22d0:	30 91 27 01 	lds	r19, 0x0127
    22d4:	40 91 28 01 	lds	r20, 0x0128
    22d8:	50 91 29 01 	lds	r21, 0x0129
    22dc:	0e 94 ba 12 	call	0x2574	; 0x2574 <__mulsi3>
    22e0:	a8 01       	movw	r20, r16
    22e2:	97 01       	movw	r18, r14
    22e4:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
    22e8:	20 93 3a 01 	sts	0x013A, r18
    22ec:	30 93 3b 01 	sts	0x013B, r19
    22f0:	40 93 3c 01 	sts	0x013C, r20
    22f4:	50 93 3d 01 	sts	0x013D, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    22f8:	c4 01       	movw	r24, r8
    22fa:	b3 01       	movw	r22, r6
    22fc:	a8 01       	movw	r20, r16
    22fe:	97 01       	movw	r18, r14
    2300:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
    2304:	20 93 3e 01 	sts	0x013E, r18
    2308:	30 93 3f 01 	sts	0x013F, r19
    230c:	40 93 40 01 	sts	0x0140, r20
    2310:	50 93 41 01 	sts	0x0141, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    2314:	c6 01       	movw	r24, r12
    2316:	b5 01       	movw	r22, r10
    2318:	a8 01       	movw	r20, r16
    231a:	97 01       	movw	r18, r14
    231c:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <__divmodsi4>
    2320:	20 93 42 01 	sts	0x0142, r18
    2324:	30 93 43 01 	sts	0x0143, r19
    2328:	40 93 44 01 	sts	0x0144, r20
    232c:	50 93 45 01 	sts	0x0145, r21
}
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	ff 90       	pop	r15
    2336:	ef 90       	pop	r14
    2338:	df 90       	pop	r13
    233a:	cf 90       	pop	r12
    233c:	bf 90       	pop	r11
    233e:	af 90       	pop	r10
    2340:	9f 90       	pop	r9
    2342:	8f 90       	pop	r8
    2344:	7f 90       	pop	r7
    2346:	6f 90       	pop	r6
    2348:	08 95       	ret

0000234a <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    234a:	0e 94 a1 10 	call	0x2142	; 0x2142 <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    234e:	0e 94 22 11 	call	0x2244	; 0x2244 <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    2352:	20 91 3a 01 	lds	r18, 0x013A
    2356:	30 91 3b 01 	lds	r19, 0x013B
    235a:	40 91 3c 01 	lds	r20, 0x013C
    235e:	50 91 3d 01 	lds	r21, 0x013D
  control_value += PID.Products.IError;
    2362:	80 91 3e 01 	lds	r24, 0x013E
    2366:	90 91 3f 01 	lds	r25, 0x013F
    236a:	a0 91 40 01 	lds	r26, 0x0140
    236e:	b0 91 41 01 	lds	r27, 0x0141
    2372:	28 0f       	add	r18, r24
    2374:	39 1f       	adc	r19, r25
    2376:	4a 1f       	adc	r20, r26
    2378:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    237a:	80 91 42 01 	lds	r24, 0x0142
    237e:	90 91 43 01 	lds	r25, 0x0143
    2382:	a0 91 44 01 	lds	r26, 0x0144
    2386:	b0 91 45 01 	lds	r27, 0x0145
    238a:	28 0f       	add	r18, r24
    238c:	39 1f       	adc	r19, r25
    238e:	4a 1f       	adc	r20, r26
    2390:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    2392:	20 93 4a 01 	sts	0x014A, r18
    2396:	30 93 4b 01 	sts	0x014B, r19
    239a:	40 93 4c 01 	sts	0x014C, r20
    239e:	50 93 4d 01 	sts	0x014D, r21
  if(control_value < 0){
    23a2:	57 ff       	sbrs	r21, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    23a6:	10 92 4e 01 	sts	0x014E, r1
    23aa:	10 92 4f 01 	sts	0x014F, r1
    23ae:	10 92 50 01 	sts	0x0150, r1
    23b2:	10 92 51 01 	sts	0x0151, r1
    23b6:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    23b8:	20 93 4e 01 	sts	0x014E, r18
    23bc:	30 93 4f 01 	sts	0x014F, r19
    23c0:	40 93 50 01 	sts	0x0150, r20
    23c4:	50 93 51 01 	sts	0x0151, r21
    23c8:	08 95       	ret

000023ca <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    23ca:	60 91 12 01 	lds	r22, 0x0112
    23ce:	70 91 13 01 	lds	r23, 0x0113
  return PID.Input.Kp;
}
    23d2:	80 91 14 01 	lds	r24, 0x0114
    23d6:	90 91 15 01 	lds	r25, 0x0115
    23da:	08 95       	ret

000023dc <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    23dc:	60 91 16 01 	lds	r22, 0x0116
    23e0:	70 91 17 01 	lds	r23, 0x0117
  return PID.Input.Ki;
}
    23e4:	80 91 18 01 	lds	r24, 0x0118
    23e8:	90 91 19 01 	lds	r25, 0x0119
    23ec:	08 95       	ret

000023ee <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    23ee:	60 91 1a 01 	lds	r22, 0x011A
    23f2:	70 91 1b 01 	lds	r23, 0x011B
  return PID.Input.Kd;
}
    23f6:	80 91 1c 01 	lds	r24, 0x011C
    23fa:	90 91 1d 01 	lds	r25, 0x011D
    23fe:	08 95       	ret

00002400 <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    2400:	60 91 1e 01 	lds	r22, 0x011E
    2404:	70 91 1f 01 	lds	r23, 0x011F
  return PID.Input.SetPoint;
}
    2408:	80 91 20 01 	lds	r24, 0x0120
    240c:	90 91 21 01 	lds	r25, 0x0121
    2410:	08 95       	ret

00002412 <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    2412:	60 91 22 01 	lds	r22, 0x0122
    2416:	70 91 23 01 	lds	r23, 0x0123
  return PID.Input.ProcessValue;
}
    241a:	80 91 24 01 	lds	r24, 0x0124
    241e:	90 91 25 01 	lds	r25, 0x0125
    2422:	08 95       	ret

00002424 <PID_Get_PError>:

signed long PID_Get_PError(void){
    2424:	60 91 26 01 	lds	r22, 0x0126
    2428:	70 91 27 01 	lds	r23, 0x0127
  return PID.Error.PError;
}
    242c:	80 91 28 01 	lds	r24, 0x0128
    2430:	90 91 29 01 	lds	r25, 0x0129
    2434:	08 95       	ret

00002436 <PID_Get_IError>:

signed long PID_Get_IError(void){
    2436:	60 91 2e 01 	lds	r22, 0x012E
    243a:	70 91 2f 01 	lds	r23, 0x012F
  return PID.Error.IError;
}
    243e:	80 91 30 01 	lds	r24, 0x0130
    2442:	90 91 31 01 	lds	r25, 0x0131
    2446:	08 95       	ret

00002448 <PID_Get_DError>:

signed long PID_Get_DError(void){
    2448:	60 91 2a 01 	lds	r22, 0x012A
    244c:	70 91 2b 01 	lds	r23, 0x012B
  return PID.Error.DError;
}
    2450:	80 91 2c 01 	lds	r24, 0x012C
    2454:	90 91 2d 01 	lds	r25, 0x012D
    2458:	08 95       	ret

0000245a <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    245a:	60 91 32 01 	lds	r22, 0x0132
    245e:	70 91 33 01 	lds	r23, 0x0133
  return PID.Error.IErrorLimit;
}
    2462:	80 91 34 01 	lds	r24, 0x0134
    2466:	90 91 35 01 	lds	r25, 0x0135
    246a:	08 95       	ret

0000246c <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    246c:	60 91 3a 01 	lds	r22, 0x013A
    2470:	70 91 3b 01 	lds	r23, 0x013B
  return PID.Products.PError;
}
    2474:	80 91 3c 01 	lds	r24, 0x013C
    2478:	90 91 3d 01 	lds	r25, 0x013D
    247c:	08 95       	ret

0000247e <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    247e:	60 91 3e 01 	lds	r22, 0x013E
    2482:	70 91 3f 01 	lds	r23, 0x013F
  return PID.Products.IError;
}
    2486:	80 91 40 01 	lds	r24, 0x0140
    248a:	90 91 41 01 	lds	r25, 0x0141
    248e:	08 95       	ret

00002490 <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    2490:	60 91 42 01 	lds	r22, 0x0142
    2494:	70 91 43 01 	lds	r23, 0x0143
  return PID.Products.DError;
}
    2498:	80 91 44 01 	lds	r24, 0x0144
    249c:	90 91 45 01 	lds	r25, 0x0145
    24a0:	08 95       	ret

000024a2 <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    24a2:	60 91 46 01 	lds	r22, 0x0146
    24a6:	70 91 47 01 	lds	r23, 0x0147
  return PID.Products.ScaleFact;
}
    24aa:	80 91 48 01 	lds	r24, 0x0148
    24ae:	90 91 49 01 	lds	r25, 0x0149
    24b2:	08 95       	ret

000024b4 <PID_Get_Output>:


signed long PID_Get_Output(void){
    24b4:	60 91 4a 01 	lds	r22, 0x014A
    24b8:	70 91 4b 01 	lds	r23, 0x014B
  return PID.Output;
}
    24bc:	80 91 4c 01 	lds	r24, 0x014C
    24c0:	90 91 4d 01 	lds	r25, 0x014D
    24c4:	08 95       	ret

000024c6 <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    24c6:	60 91 4e 01 	lds	r22, 0x014E
    24ca:	70 91 4f 01 	lds	r23, 0x014F
  return PID.OutputNonNegative;
}
    24ce:	80 91 50 01 	lds	r24, 0x0150
    24d2:	90 91 51 01 	lds	r25, 0x0151
    24d6:	08 95       	ret

000024d8 <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    24d8:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <PID_Struct_Init>
}
    24dc:	08 95       	ret

000024de <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    24de:	af 92       	push	r10
    24e0:	bf 92       	push	r11
    24e2:	cf 92       	push	r12
    24e4:	df 92       	push	r13
    24e6:	ef 92       	push	r14
    24e8:	ff 92       	push	r15
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    24f6:	60 93 12 01 	sts	0x0112, r22
    24fa:	70 93 13 01 	sts	0x0113, r23
    24fe:	80 93 14 01 	sts	0x0114, r24
    2502:	90 93 15 01 	sts	0x0115, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2506:	20 93 16 01 	sts	0x0116, r18
    250a:	30 93 17 01 	sts	0x0117, r19
    250e:	40 93 18 01 	sts	0x0118, r20
    2512:	50 93 19 01 	sts	0x0119, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2516:	e0 92 1a 01 	sts	0x011A, r14
    251a:	f0 92 1b 01 	sts	0x011B, r15
    251e:	00 93 1c 01 	sts	0x011C, r16
    2522:	10 93 1d 01 	sts	0x011D, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    2526:	a0 92 32 01 	sts	0x0132, r10
    252a:	b0 92 33 01 	sts	0x0133, r11
    252e:	c0 92 34 01 	sts	0x0134, r12
    2532:	d0 92 35 01 	sts	0x0135, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    2536:	8d 85       	ldd	r24, Y+13	; 0x0d
    2538:	9e 85       	ldd	r25, Y+14	; 0x0e
    253a:	af 85       	ldd	r26, Y+15	; 0x0f
    253c:	b8 89       	ldd	r27, Y+16	; 0x10
    253e:	80 93 46 01 	sts	0x0146, r24
    2542:	90 93 47 01 	sts	0x0147, r25
    2546:	a0 93 48 01 	sts	0x0148, r26
    254a:	b0 93 49 01 	sts	0x0149, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    254e:	10 92 2e 01 	sts	0x012E, r1
    2552:	10 92 2f 01 	sts	0x012F, r1
    2556:	10 92 30 01 	sts	0x0130, r1
    255a:	10 92 31 01 	sts	0x0131, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	bf 90       	pop	r11
    2570:	af 90       	pop	r10
    2572:	08 95       	ret

00002574 <__mulsi3>:
    2574:	62 9f       	mul	r22, r18
    2576:	d0 01       	movw	r26, r0
    2578:	73 9f       	mul	r23, r19
    257a:	f0 01       	movw	r30, r0
    257c:	82 9f       	mul	r24, r18
    257e:	e0 0d       	add	r30, r0
    2580:	f1 1d       	adc	r31, r1
    2582:	64 9f       	mul	r22, r20
    2584:	e0 0d       	add	r30, r0
    2586:	f1 1d       	adc	r31, r1
    2588:	92 9f       	mul	r25, r18
    258a:	f0 0d       	add	r31, r0
    258c:	83 9f       	mul	r24, r19
    258e:	f0 0d       	add	r31, r0
    2590:	74 9f       	mul	r23, r20
    2592:	f0 0d       	add	r31, r0
    2594:	65 9f       	mul	r22, r21
    2596:	f0 0d       	add	r31, r0
    2598:	99 27       	eor	r25, r25
    259a:	72 9f       	mul	r23, r18
    259c:	b0 0d       	add	r27, r0
    259e:	e1 1d       	adc	r30, r1
    25a0:	f9 1f       	adc	r31, r25
    25a2:	63 9f       	mul	r22, r19
    25a4:	b0 0d       	add	r27, r0
    25a6:	e1 1d       	adc	r30, r1
    25a8:	f9 1f       	adc	r31, r25
    25aa:	bd 01       	movw	r22, r26
    25ac:	cf 01       	movw	r24, r30
    25ae:	11 24       	eor	r1, r1
    25b0:	08 95       	ret

000025b2 <__udivmodsi4>:
    25b2:	a1 e2       	ldi	r26, 0x21	; 33
    25b4:	1a 2e       	mov	r1, r26
    25b6:	aa 1b       	sub	r26, r26
    25b8:	bb 1b       	sub	r27, r27
    25ba:	fd 01       	movw	r30, r26
    25bc:	0d c0       	rjmp	.+26     	; 0x25d8 <__udivmodsi4_ep>

000025be <__udivmodsi4_loop>:
    25be:	aa 1f       	adc	r26, r26
    25c0:	bb 1f       	adc	r27, r27
    25c2:	ee 1f       	adc	r30, r30
    25c4:	ff 1f       	adc	r31, r31
    25c6:	a2 17       	cp	r26, r18
    25c8:	b3 07       	cpc	r27, r19
    25ca:	e4 07       	cpc	r30, r20
    25cc:	f5 07       	cpc	r31, r21
    25ce:	20 f0       	brcs	.+8      	; 0x25d8 <__udivmodsi4_ep>
    25d0:	a2 1b       	sub	r26, r18
    25d2:	b3 0b       	sbc	r27, r19
    25d4:	e4 0b       	sbc	r30, r20
    25d6:	f5 0b       	sbc	r31, r21

000025d8 <__udivmodsi4_ep>:
    25d8:	66 1f       	adc	r22, r22
    25da:	77 1f       	adc	r23, r23
    25dc:	88 1f       	adc	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	1a 94       	dec	r1
    25e2:	69 f7       	brne	.-38     	; 0x25be <__udivmodsi4_loop>
    25e4:	60 95       	com	r22
    25e6:	70 95       	com	r23
    25e8:	80 95       	com	r24
    25ea:	90 95       	com	r25
    25ec:	9b 01       	movw	r18, r22
    25ee:	ac 01       	movw	r20, r24
    25f0:	bd 01       	movw	r22, r26
    25f2:	cf 01       	movw	r24, r30
    25f4:	08 95       	ret

000025f6 <__divmodsi4>:
    25f6:	97 fb       	bst	r25, 7
    25f8:	09 2e       	mov	r0, r25
    25fa:	05 26       	eor	r0, r21
    25fc:	0e d0       	rcall	.+28     	; 0x261a <__divmodsi4_neg1>
    25fe:	57 fd       	sbrc	r21, 7
    2600:	04 d0       	rcall	.+8      	; 0x260a <__divmodsi4_neg2>
    2602:	d7 df       	rcall	.-82     	; 0x25b2 <__udivmodsi4>
    2604:	0a d0       	rcall	.+20     	; 0x261a <__divmodsi4_neg1>
    2606:	00 1c       	adc	r0, r0
    2608:	38 f4       	brcc	.+14     	; 0x2618 <__divmodsi4_exit>

0000260a <__divmodsi4_neg2>:
    260a:	50 95       	com	r21
    260c:	40 95       	com	r20
    260e:	30 95       	com	r19
    2610:	21 95       	neg	r18
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	4f 4f       	sbci	r20, 0xFF	; 255
    2616:	5f 4f       	sbci	r21, 0xFF	; 255

00002618 <__divmodsi4_exit>:
    2618:	08 95       	ret

0000261a <__divmodsi4_neg1>:
    261a:	f6 f7       	brtc	.-4      	; 0x2618 <__divmodsi4_exit>
    261c:	90 95       	com	r25
    261e:	80 95       	com	r24
    2620:	70 95       	com	r23
    2622:	61 95       	neg	r22
    2624:	7f 4f       	sbci	r23, 0xFF	; 255
    2626:	8f 4f       	sbci	r24, 0xFF	; 255
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	08 95       	ret

0000262c <_exit>:
    262c:	f8 94       	cli

0000262e <__stop_program>:
    262e:	ff cf       	rjmp	.-2      	; 0x262e <__stop_program>
