
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001d02  00001d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  0080011c  0080011c  00001db2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e11  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002af2  00000000  00000000  00002c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005da  00000000  00000000  00005715  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001749  00000000  00000000  00005cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  00007438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ff5  00000000  00000000  00007ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f34  00000000  00000000  00008abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000099f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 e9 0d 	jmp	0x1bd2	; 0x1bd2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a8 02 	jmp	0x550	; 0x550 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e0       	ldi	r30, 0x02	; 2
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3f       	cpi	r26, 0xFB	; 251
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "timebase.h"
#include "uart.h"

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
  
  
  
  UART_Init(19200);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	7b e4       	ldi	r23, 0x4B	; 75
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 cc 02 	call	0x598	; 0x598 <UART_Init>
  Timebase_Init(1000);
      b6:	88 ee       	ldi	r24, 0xE8	; 232
      b8:	93 e0       	ldi	r25, 0x03	; 3
      ba:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      be:	8a b1       	in	r24, 0x0a	; 10
      c0:	80 66       	ori	r24, 0x60	; 96
      c2:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c4:	8b b1       	in	r24, 0x0b	; 11
      c6:	8f 79       	andi	r24, 0x9F	; 159
      c8:	8b b9       	out	0x0b, r24	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	cc e2       	ldi	r28, 0x2C	; 44
      cc:	d1 e0       	ldi	r29, 0x01	; 1
  
  while(1){
    
    UART_Transmit_Text("Timebase ");
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	0e 94 ca 01 	call	0x394	; 0x394 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
      d6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Timebase_Timer_Get_Seconds>
      da:	0e 94 39 02 	call	0x472	; 0x472 <UART_Transmit_Number>
	UART_Transmit_Text(" ");
      de:	8a e0       	ldi	r24, 0x0A	; 10
      e0:	91 e0       	ldi	r25, 0x01	; 1
      e2:	0e 94 ca 01 	call	0x394	; 0x394 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
      e6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <Timebase_Timer_Get_SubSeconds>
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	bc 01       	movw	r22, r24
      f0:	cd 01       	movw	r24, r26
      f2:	0e 94 39 02 	call	0x472	; 0x472 <UART_Transmit_Number>
	UART_Transmit_New_Line();
      f6:	0e 94 db 01 	call	0x3b6	; 0x3b6 <UART_Transmit_New_Line>
      fa:	88 ee       	ldi	r24, 0xE8	; 232
      fc:	93 e0       	ldi	r25, 0x03	; 3
      fe:	fe 01       	movw	r30, r28
     100:	31 97       	sbiw	r30, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     106:	d9 f7       	brne	.-10     	; 0xfe <main+0x58>
	
	_delay_ms(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     108:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     10a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     10e:	5e 98       	cbi	0x0b, 6	; 11
     110:	de cf       	rjmp	.-68     	; 0xce <main+0x28>

00000112 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     112:	10 92 1c 01 	sts	0x011C, r1
     116:	ed e1       	ldi	r30, 0x1D	; 29
     118:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     11a:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	e5 32       	cpi	r30, 0x25	; 37
     120:	f8 07       	cpc	r31, r24
     122:	d9 f7       	brne	.-10     	; 0x11a <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     124:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     126:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     128:	80 e2       	ldi	r24, 0x20	; 32
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	93 a3       	std	Z+35, r25	; 0x23
     12e:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     130:	15 a2       	std	Z+37, r1	; 0x25
     132:	14 a2       	std	Z+36, r1	; 0x24
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	04 c0       	rjmp	.+8      	; 0x140 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     138:	e4 5e       	subi	r30, 0xE4	; 228
     13a:	fe 4f       	sbci	r31, 0xFE	; 254
     13c:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     13e:	2f 5f       	subi	r18, 0xFF	; 255
     140:	80 91 47 01 	lds	r24, 0x0147
     144:	90 91 48 01 	lds	r25, 0x0148
     148:	e2 2f       	mov	r30, r18
     14a:	f0 e0       	ldi	r31, 0x00	; 0
     14c:	e8 17       	cp	r30, r24
     14e:	f9 07       	cpc	r31, r25
     150:	98 f3       	brcs	.-26     	; 0x138 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     152:	08 95       	ret

00000154 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     154:	08 95       	ret

00000156 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     156:	08 95       	ret

00000158 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     158:	9b 01       	movw	r18, r22
     15a:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     15c:	60 e6       	ldi	r22, 0x60	; 96
     15e:	73 ee       	ldi	r23, 0xE3	; 227
     160:	86 e1       	ldi	r24, 0x16	; 22
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__udivmodsi4>
     168:	21 50       	subi	r18, 0x01	; 1
     16a:	30 40       	sbci	r19, 0x00	; 0
     16c:	40 40       	sbci	r20, 0x00	; 0
     16e:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     170:	e0 ec       	ldi	r30, 0xC0	; 192
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	82 60       	ori	r24, 0x02	; 2
     178:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     17a:	bb 27       	eor	r27, r27
     17c:	a5 2f       	mov	r26, r21
     17e:	94 2f       	mov	r25, r20
     180:	83 2f       	mov	r24, r19
     182:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     186:	20 93 c4 00 	sts	0x00C4, r18
}
     18a:	08 95       	ret

0000018c <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     18c:	e1 ec       	ldi	r30, 0xC1	; 193
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	88 60       	ori	r24, 0x08	; 8
     194:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     196:	86 e0       	ldi	r24, 0x06	; 6
     198:	80 93 c2 00 	sts	0x00C2, r24
}
     19c:	08 95       	ret

0000019e <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     19e:	e1 ec       	ldi	r30, 0xC1	; 193
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	80 81       	ld	r24, Z
     1a4:	80 61       	ori	r24, 0x10	; 16
     1a6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1a8:	86 e0       	ldi	r24, 0x06	; 6
     1aa:	80 93 c2 00 	sts	0x00C2, r24
}
     1ae:	08 95       	ret

000001b0 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1b0:	e1 ec       	ldi	r30, 0xC1	; 193
     1b2:	f0 e0       	ldi	r31, 0x00	; 0
     1b4:	80 81       	ld	r24, Z
     1b6:	80 68       	ori	r24, 0x80	; 128
     1b8:	80 83       	st	Z, r24
  sei();
     1ba:	78 94       	sei
}
     1bc:	08 95       	ret

000001be <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1be:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1c0:	80 91 c0 00 	lds	r24, 0x00C0
     1c4:	85 ff       	sbrs	r24, 5
     1c6:	fc cf       	rjmp	.-8      	; 0x1c0 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1c8:	90 93 c6 00 	sts	0x00C6, r25
}
     1cc:	08 95       	ret

000001ce <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1ce:	df 93       	push	r29
     1d0:	cf 93       	push	r28
     1d2:	0f 92       	push	r0
     1d4:	cd b7       	in	r28, 0x3d	; 61
     1d6:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1d8:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1da:	80 91 c0 00 	lds	r24, 0x00C0
     1de:	84 ff       	sbrs	r24, 4
     1e0:	05 c0       	rjmp	.+10     	; 0x1ec <UART_Receive_Byte+0x1e>
    val=UDR0;
     1e2:	80 91 c6 00 	lds	r24, 0x00C6
     1e6:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	08 c0       	rjmp	.+16     	; 0x1fc <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1ec:	80 91 c0 00 	lds	r24, 0x00C0
     1f0:	83 ff       	sbrs	r24, 3
     1f2:	07 c0       	rjmp	.+14     	; 0x202 <UART_Receive_Byte+0x34>
    val=UDR0;
     1f4:	80 91 c6 00 	lds	r24, 0x00C6
     1f8:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	80 93 1c 01 	sts	0x011C, r24
     200:	05 c0       	rjmp	.+10     	; 0x20c <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     202:	80 91 c6 00 	lds	r24, 0x00C6
     206:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     208:	10 92 1c 01 	sts	0x011C, r1
  }
  return val;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
}
     20e:	0f 90       	pop	r0
     210:	cf 91       	pop	r28
     212:	df 91       	pop	r29
     214:	08 95       	ret

00000216 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     216:	80 91 26 01 	lds	r24, 0x0126
}
     21a:	08 95       	ret

0000021c <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     21c:	10 92 26 01 	sts	0x0126, r1
}
     220:	08 95       	ret

00000222 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	ab 01       	movw	r20, r22
     22a:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     22c:	4f 3f       	cpi	r20, 0xFF	; 255
     22e:	51 05       	cpc	r21, r1
     230:	61 05       	cpc	r22, r1
     232:	71 05       	cpc	r23, r1
     234:	09 f0       	breq	.+2      	; 0x238 <UART_Transmit_Byte_Hex+0x16>
     236:	28 f4       	brcc	.+10     	; 0x242 <UART_Transmit_Byte_Hex+0x20>
     238:	e8 e0       	ldi	r30, 0x08	; 8
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	c2 e0       	ldi	r28, 0x02	; 2
     23e:	d0 e0       	ldi	r29, 0x00	; 0
     240:	11 c0       	rjmp	.+34     	; 0x264 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     242:	40 30       	cpi	r20, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	58 07       	cpc	r21, r24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	68 07       	cpc	r22, r24
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	78 07       	cpc	r23, r24
     250:	28 f0       	brcs	.+10     	; 0x25c <UART_Transmit_Byte_Hex+0x3a>
     252:	e0 e2       	ldi	r30, 0x20	; 32
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	c8 e0       	ldi	r28, 0x08	; 8
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	04 c0       	rjmp	.+8      	; 0x264 <UART_Transmit_Byte_Hex+0x42>
     25c:	e0 e1       	ldi	r30, 0x10	; 16
     25e:	f0 e0       	ldi	r31, 0x00	; 0
     260:	c4 e0       	ldi	r28, 0x04	; 4
     262:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     264:	80 91 c0 00 	lds	r24, 0x00C0
     268:	85 ff       	sbrs	r24, 5
     26a:	fc cf       	rjmp	.-8      	; 0x264 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     26c:	80 e3       	ldi	r24, 0x30	; 48
     26e:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     272:	80 91 c0 00 	lds	r24, 0x00C0
     276:	85 ff       	sbrs	r24, 5
     278:	fc cf       	rjmp	.-8      	; 0x272 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     27a:	88 e7       	ldi	r24, 0x78	; 120
     27c:	80 93 c6 00 	sts	0x00C6, r24
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	1f c0       	rjmp	.+62     	; 0x2c2 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     284:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     286:	db 01       	movw	r26, r22
     288:	ca 01       	movw	r24, r20
     28a:	0e 2e       	mov	r0, r30
     28c:	04 c0       	rjmp	.+8      	; 0x296 <UART_Transmit_Byte_Hex+0x74>
     28e:	b6 95       	lsr	r27
     290:	a7 95       	ror	r26
     292:	97 95       	ror	r25
     294:	87 95       	ror	r24
     296:	0a 94       	dec	r0
     298:	d2 f7       	brpl	.-12     	; 0x28e <UART_Transmit_Byte_Hex+0x6c>
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	8f 70       	andi	r24, 0x0F	; 15
     29e:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2a0:	8a 30       	cpi	r24, 0x0A	; 10
     2a2:	91 05       	cpc	r25, r1
     2a4:	20 f0       	brcs	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2a6:	9c 01       	movw	r18, r24
     2a8:	29 5c       	subi	r18, 0xC9	; 201
     2aa:	3f 4f       	sbci	r19, 0xFF	; 255
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2ae:	9c 01       	movw	r18, r24
     2b0:	20 5d       	subi	r18, 0xD0	; 208
     2b2:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2b4:	80 91 c0 00 	lds	r24, 0x00C0
     2b8:	85 ff       	sbrs	r24, 5
     2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2bc:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2c0:	1f 5f       	subi	r17, 0xFF	; 255
     2c2:	81 2f       	mov	r24, r17
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	8c 17       	cp	r24, r28
     2c8:	9d 07       	cpc	r25, r29
     2ca:	e0 f2       	brcs	.-72     	; 0x284 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	08 95       	ret

000002d4 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ab 01       	movw	r20, r22
     2e6:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2e8:	4f 3f       	cpi	r20, 0xFF	; 255
     2ea:	51 05       	cpc	r21, r1
     2ec:	61 05       	cpc	r22, r1
     2ee:	71 05       	cpc	r23, r1
     2f0:	09 f0       	breq	.+2      	; 0x2f4 <UART_Transmit_Byte_Bin+0x20>
     2f2:	10 f4       	brcc	.+4      	; 0x2f8 <UART_Transmit_Byte_Bin+0x24>
     2f4:	97 e0       	ldi	r25, 0x07	; 7
     2f6:	0b c0       	rjmp	.+22     	; 0x30e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     2f8:	40 30       	cpi	r20, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	58 07       	cpc	r21, r24
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	68 07       	cpc	r22, r24
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	78 07       	cpc	r23, r24
     306:	10 f0       	brcs	.+4      	; 0x30c <UART_Transmit_Byte_Bin+0x38>
     308:	9f e1       	ldi	r25, 0x1F	; 31
     30a:	01 c0       	rjmp	.+2      	; 0x30e <UART_Transmit_Byte_Bin+0x3a>
     30c:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     30e:	80 91 c0 00 	lds	r24, 0x00C0
     312:	85 ff       	sbrs	r24, 5
     314:	fc cf       	rjmp	.-8      	; 0x30e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     316:	80 e3       	ldi	r24, 0x30	; 48
     318:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     31c:	80 91 c0 00 	lds	r24, 0x00C0
     320:	85 ff       	sbrs	r24, 5
     322:	fc cf       	rjmp	.-8      	; 0x31c <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     324:	82 e6       	ldi	r24, 0x62	; 98
     326:	80 93 c6 00 	sts	0x00C6, r24
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     32e:	e9 2f       	mov	r30, r25
     330:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     332:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     334:	11 e3       	ldi	r17, 0x31	; 49
     336:	ef 01       	movw	r28, r30
     338:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     33a:	cf 01       	movw	r24, r30
     33c:	82 1b       	sub	r24, r18
     33e:	93 0b       	sbc	r25, r19
     340:	6a 01       	movw	r12, r20
     342:	7b 01       	movw	r14, r22
     344:	04 c0       	rjmp	.+8      	; 0x34e <UART_Transmit_Byte_Bin+0x7a>
     346:	f6 94       	lsr	r15
     348:	e7 94       	ror	r14
     34a:	d7 94       	ror	r13
     34c:	c7 94       	ror	r12
     34e:	8a 95       	dec	r24
     350:	d2 f7       	brpl	.-12     	; 0x346 <UART_Transmit_Byte_Bin+0x72>
     352:	d7 01       	movw	r26, r14
     354:	c6 01       	movw	r24, r12
     356:	81 70       	andi	r24, 0x01	; 1
     358:	90 70       	andi	r25, 0x00	; 0
     35a:	89 2b       	or	r24, r25
     35c:	39 f0       	breq	.+14     	; 0x36c <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     35e:	80 91 c0 00 	lds	r24, 0x00C0
     362:	85 ff       	sbrs	r24, 5
     364:	fc cf       	rjmp	.-8      	; 0x35e <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     366:	10 93 c6 00 	sts	0x00C6, r17
     36a:	06 c0       	rjmp	.+12     	; 0x378 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     36c:	80 91 c0 00 	lds	r24, 0x00C0
     370:	85 ff       	sbrs	r24, 5
     372:	fc cf       	rjmp	.-8      	; 0x36c <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     374:	00 93 c6 00 	sts	0x00C6, r16
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     37c:	2c 17       	cp	r18, r28
     37e:	3d 07       	cpc	r19, r29
     380:	e1 f6       	brne	.-72     	; 0x33a <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     382:	df 91       	pop	r29
     384:	cf 91       	pop	r28
     386:	1f 91       	pop	r17
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	08 95       	ret

00000394 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     394:	ac 01       	movw	r20, r24
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     39a:	80 91 c0 00 	lds	r24, 0x00C0
     39e:	85 ff       	sbrs	r24, 5
     3a0:	fc cf       	rjmp	.-8      	; 0x39a <UART_Transmit_Text+0x6>
  UDR0=val;
     3a2:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3a8:	fa 01       	movw	r30, r20
     3aa:	e2 0f       	add	r30, r18
     3ac:	f1 1d       	adc	r31, r1
     3ae:	e0 81       	ld	r30, Z
     3b0:	ee 23       	and	r30, r30
     3b2:	99 f7       	brne	.-26     	; 0x39a <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3b4:	08 95       	ret

000003b6 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3b6:	8c e0       	ldi	r24, 0x0C	; 12
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 ca 01 	call	0x394	; 0x394 <UART_Transmit_Text>
}
     3be:	08 95       	ret

000003c0 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3c0:	8f e0       	ldi	r24, 0x0F	; 15
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 ca 01 	call	0x394	; 0x394 <UART_Transmit_Text>
}
     3c8:	08 95       	ret

000003ca <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3ca:	bf 92       	push	r11
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	6b 01       	movw	r12, r22
     3da:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3dc:	61 15       	cp	r22, r1
     3de:	71 05       	cpc	r23, r1
     3e0:	81 05       	cpc	r24, r1
     3e2:	91 05       	cpc	r25, r1
     3e4:	31 f4       	brne	.+12     	; 0x3f2 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3e6:	10 92 1d 01 	sts	0x011D, r1
    UART.InputNumberDigits=1;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	80 93 25 01 	sts	0x0125, r24
     3f0:	23 c0       	rjmp	.+70     	; 0x438 <UART_Determine_Digit_Numbers+0x6e>
     3f2:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     3f4:	0b 2d       	mov	r16, r11
     3f6:	10 e0       	ldi	r17, 0x00	; 0
     3f8:	04 5e       	subi	r16, 0xE4	; 228
     3fa:	1e 4f       	sbci	r17, 0xFE	; 254
     3fc:	c7 01       	movw	r24, r14
     3fe:	b6 01       	movw	r22, r12
     400:	2a e0       	ldi	r18, 0x0A	; 10
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	40 e0       	ldi	r20, 0x00	; 0
     406:	50 e0       	ldi	r21, 0x00	; 0
     408:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__udivmodsi4>
     40c:	f8 01       	movw	r30, r16
     40e:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     410:	c7 01       	movw	r24, r14
     412:	b6 01       	movw	r22, r12
     414:	2a e0       	ldi	r18, 0x0A	; 10
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	40 e0       	ldi	r20, 0x00	; 0
     41a:	50 e0       	ldi	r21, 0x00	; 0
     41c:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <__udivmodsi4>
     420:	c9 01       	movw	r24, r18
     422:	da 01       	movw	r26, r20
     424:	6c 01       	movw	r12, r24
     426:	7d 01       	movw	r14, r26
      i++;
     428:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     42a:	c1 14       	cp	r12, r1
     42c:	d1 04       	cpc	r13, r1
     42e:	e1 04       	cpc	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	01 f7       	brne	.-64     	; 0x3f4 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     434:	b0 92 25 01 	sts	0x0125, r11
  }
}
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	ff 90       	pop	r15
     43e:	ef 90       	pop	r14
     440:	df 90       	pop	r13
     442:	cf 90       	pop	r12
     444:	bf 90       	pop	r11
     446:	08 95       	ret

00000448 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     448:	e0 91 25 01 	lds	r30, 0x0125
     44c:	0f c0       	rjmp	.+30     	; 0x46c <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     44e:	2e 2f       	mov	r18, r30
     450:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     452:	e2 2f       	mov	r30, r18
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	e4 5e       	subi	r30, 0xE4	; 228
     458:	fe 4f       	sbci	r31, 0xFE	; 254
     45a:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     45c:	80 91 c0 00 	lds	r24, 0x00C0
     460:	85 ff       	sbrs	r24, 5
     462:	fc cf       	rjmp	.-8      	; 0x45c <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     464:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     466:	90 93 c6 00 	sts	0x00C6, r25
     46a:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     46c:	ee 23       	and	r30, r30
     46e:	79 f7       	brne	.-34     	; 0x44e <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     470:	08 95       	ret

00000472 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     472:	9b 01       	movw	r18, r22
     474:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     476:	97 ff       	sbrs	r25, 7
     478:	0e c0       	rjmp	.+28     	; 0x496 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     47a:	80 91 c0 00 	lds	r24, 0x00C0
     47e:	85 ff       	sbrs	r24, 5
     480:	fc cf       	rjmp	.-8      	; 0x47a <UART_Transmit_Number+0x8>
  UDR0=val;
     482:	8d e2       	ldi	r24, 0x2D	; 45
     484:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     488:	50 95       	com	r21
     48a:	40 95       	com	r20
     48c:	30 95       	com	r19
     48e:	21 95       	neg	r18
     490:	3f 4f       	sbci	r19, 0xFF	; 255
     492:	4f 4f       	sbci	r20, 0xFF	; 255
     494:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     496:	ca 01       	movw	r24, r20
     498:	b9 01       	movw	r22, r18
     49a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     49e:	0e 94 24 02 	call	0x448	; 0x448 <UART_Transmit_Number_Digits>
}
     4a2:	08 95       	ret

000004a4 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4a4:	fc 01       	movw	r30, r24
     4a6:	e4 5e       	subi	r30, 0xE4	; 228
     4a8:	fe 4f       	sbci	r31, 0xFE	; 254
     4aa:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4ac:	08 95       	ret

000004ae <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4ae:	20 91 49 01 	lds	r18, 0x0149
     4b2:	30 91 4a 01 	lds	r19, 0x014A
}
     4b6:	c9 01       	movw	r24, r18
     4b8:	08 95       	ret

000004ba <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4ba:	10 92 1c 01 	sts	0x011C, r1
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4c4:	f9 01       	movw	r30, r18
     4c6:	e4 5e       	subi	r30, 0xE4	; 228
     4c8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ca:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4cc:	2f 5f       	subi	r18, 0xFF	; 255
     4ce:	3f 4f       	sbci	r19, 0xFF	; 255
     4d0:	80 91 47 01 	lds	r24, 0x0147
     4d4:	90 91 48 01 	lds	r25, 0x0148
     4d8:	28 17       	cp	r18, r24
     4da:	39 07       	cpc	r19, r25
     4dc:	98 f3       	brcs	.-26     	; 0x4c4 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4de:	10 92 4a 01 	sts	0x014A, r1
     4e2:	10 92 49 01 	sts	0x0149, r1
  #endif
}
     4e6:	08 95       	ret

000004e8 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	0f 92       	push	r0
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     4f2:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     4f4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <UART_Receive_Byte>
     4f8:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     4fa:	80 91 1c 01 	lds	r24, 0x011C
     4fe:	88 23       	and	r24, r24
     500:	19 f5       	brne	.+70     	; 0x548 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	80 93 26 01 	sts	0x0126, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     508:	e0 91 49 01 	lds	r30, 0x0149
     50c:	f0 91 4a 01 	lds	r31, 0x014A
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	e4 5e       	subi	r30, 0xE4	; 228
     514:	fe 4f       	sbci	r31, 0xFE	; 254
     516:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     518:	80 91 49 01 	lds	r24, 0x0149
     51c:	90 91 4a 01 	lds	r25, 0x014A
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	90 93 4a 01 	sts	0x014A, r25
     526:	80 93 49 01 	sts	0x0149, r24

    if(UART.BufferIndex>=UART.BufferSize){
     52a:	20 91 49 01 	lds	r18, 0x0149
     52e:	30 91 4a 01 	lds	r19, 0x014A
     532:	80 91 47 01 	lds	r24, 0x0147
     536:	90 91 48 01 	lds	r25, 0x0148
     53a:	28 17       	cp	r18, r24
     53c:	39 07       	cpc	r19, r25
     53e:	20 f0       	brcs	.+8      	; 0x548 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     540:	10 92 4a 01 	sts	0x014A, r1
     544:	10 92 49 01 	sts	0x0149, r1
    }
  }
}
     548:	0f 90       	pop	r0
     54a:	cf 91       	pop	r28
     54c:	df 91       	pop	r29
     54e:	08 95       	ret

00000550 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     550:	1f 92       	push	r1
     552:	0f 92       	push	r0
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	0f 92       	push	r0
     558:	11 24       	eor	r1, r1
     55a:	2f 93       	push	r18
     55c:	3f 93       	push	r19
     55e:	4f 93       	push	r20
     560:	5f 93       	push	r21
     562:	6f 93       	push	r22
     564:	7f 93       	push	r23
     566:	8f 93       	push	r24
     568:	9f 93       	push	r25
     56a:	af 93       	push	r26
     56c:	bf 93       	push	r27
     56e:	ef 93       	push	r30
     570:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     572:	0e 94 74 02 	call	0x4e8	; 0x4e8 <UART_Interrupt_Service_Routine>
}
     576:	ff 91       	pop	r31
     578:	ef 91       	pop	r30
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5a4:	0e 94 89 00 	call	0x112	; 0x112 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5a8:	c8 01       	movw	r24, r16
     5aa:	b7 01       	movw	r22, r14
     5ac:	0e 94 ac 00 	call	0x158	; 0x158 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5b0:	e1 ec       	ldi	r30, 0xC1	; 193
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	88 60       	ori	r24, 0x08	; 8
     5b8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ba:	a2 ec       	ldi	r26, 0xC2	; 194
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	96 e0       	ldi	r25, 0x06	; 6
     5c0:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5c2:	80 81       	ld	r24, Z
     5c4:	80 61       	ori	r24, 0x10	; 16
     5c6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5c8:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5ca:	80 81       	ld	r24, Z
     5cc:	80 68       	ori	r24, 0x80	; 128
     5ce:	80 83       	st	Z, r24
  sei();
     5d0:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5d2:	0e 94 5d 02 	call	0x4ba	; 0x4ba <UART_Flush_Buffer>
}
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	08 95       	ret

000005e0 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5e0:	8d e4       	ldi	r24, 0x4D	; 77
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	90 93 4c 01 	sts	0x014C, r25
     5e8:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.Value = 0;
     5ec:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5f0:	80 91 4d 01 	lds	r24, 0x014D
     5f4:	84 60       	ori	r24, 0x04	; 4
     5f6:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5fa:	80 91 4d 01 	lds	r24, 0x014D
     5fe:	87 70       	andi	r24, 0x07	; 7
     600:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.UpdateRate = 1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	90 93 4f 01 	sts	0x014F, r25
     60c:	80 93 4e 01 	sts	0x014E, r24
  Timebase->Time.OVFUpdateValue=0;
     610:	10 92 50 01 	sts	0x0150, r1
  Timebase->Time.SubSeconds = 0;
     614:	10 92 56 01 	sts	0x0156, r1
     618:	10 92 55 01 	sts	0x0155, r1
  Timebase->Time.Seconds = 0;
     61c:	10 92 57 01 	sts	0x0157, r1
     620:	10 92 58 01 	sts	0x0158, r1
     624:	10 92 59 01 	sts	0x0159, r1
     628:	10 92 5a 01 	sts	0x015A, r1
  Timebase->Time.LastSample = 0;
     62c:	10 92 51 01 	sts	0x0151, r1
     630:	10 92 52 01 	sts	0x0152, r1
     634:	10 92 53 01 	sts	0x0153, r1
     638:	10 92 54 01 	sts	0x0154, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     63c:	10 92 5b 01 	sts	0x015B, r1
     640:	10 92 5c 01 	sts	0x015C, r1
     644:	10 92 5d 01 	sts	0x015D, r1
     648:	10 92 5e 01 	sts	0x015E, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     64c:	10 92 5f 01 	sts	0x015F, r1
     650:	10 92 60 01 	sts	0x0160, r1
     654:	10 92 61 01 	sts	0x0161, r1
     658:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.Status = 0;
     65c:	10 92 63 01 	sts	0x0163, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     660:	10 92 64 01 	sts	0x0164, r1
     664:	ab eb       	ldi	r26, 0xBB	; 187
     666:	b1 e0       	ldi	r27, 0x01	; 1
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     66c:	2d e0       	ldi	r18, 0x0D	; 13
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	82 9f       	mul	r24, r18
     672:	f0 01       	movw	r30, r0
     674:	83 9f       	mul	r24, r19
     676:	f0 0d       	add	r31, r0
     678:	92 9f       	mul	r25, r18
     67a:	f0 0d       	add	r31, r0
     67c:	11 24       	eor	r1, r1
     67e:	e6 54       	subi	r30, 0x46	; 70
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     684:	1d 92       	st	X+, r1
     686:	1d 92       	st	X+, r1
     688:	1d 92       	st	X+, r1
     68a:	1c 92       	st	X, r1
     68c:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     68e:	14 96       	adiw	r26, 0x04	; 4
     690:	1d 92       	st	X+, r1
     692:	1d 92       	st	X+, r1
     694:	1d 92       	st	X+, r1
     696:	1c 92       	st	X, r1
     698:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     69a:	18 96       	adiw	r26, 0x08	; 8
     69c:	1d 92       	st	X+, r1
     69e:	1d 92       	st	X+, r1
     6a0:	1d 92       	st	X+, r1
     6a2:	1c 92       	st	X, r1
     6a4:	1b 97       	sbiw	r26, 0x0b	; 11
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	91 05       	cpc	r25, r1
     6ae:	01 f7       	brne	.-64     	; 0x670 <Timebase_Struct_Init+0x90>
     6b0:	a6 e6       	ldi	r26, 0x66	; 102
     6b2:	b1 e0       	ldi	r27, 0x01	; 1
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     6b8:	fc 01       	movw	r30, r24
     6ba:	24 e0       	ldi	r18, 0x04	; 4
     6bc:	ee 0f       	add	r30, r30
     6be:	ff 1f       	adc	r31, r31
     6c0:	2a 95       	dec	r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <Timebase_Struct_Init+0xdc>
     6c4:	e8 0f       	add	r30, r24
     6c6:	f9 1f       	adc	r31, r25
     6c8:	e3 5b       	subi	r30, 0xB3	; 179
     6ca:	fe 4f       	sbci	r31, 0xFE	; 254
     6cc:	10 8e       	std	Z+24, r1	; 0x18
    Timebase->DownCounterSS[i].EndValueSec = 0;
     6ce:	1d 92       	st	X+, r1
     6d0:	1d 92       	st	X+, r1
     6d2:	1d 92       	st	X+, r1
     6d4:	1c 92       	st	X, r1
     6d6:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     6d8:	14 96       	adiw	r26, 0x04	; 4
     6da:	1d 92       	st	X+, r1
     6dc:	1d 92       	st	X+, r1
     6de:	1d 92       	st	X+, r1
     6e0:	1c 92       	st	X, r1
     6e2:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     6e4:	18 96       	adiw	r26, 0x08	; 8
     6e6:	1d 92       	st	X+, r1
     6e8:	1d 92       	st	X+, r1
     6ea:	1d 92       	st	X+, r1
     6ec:	1c 92       	st	X, r1
     6ee:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     6f0:	1c 96       	adiw	r26, 0x0c	; 12
     6f2:	1d 92       	st	X+, r1
     6f4:	1d 92       	st	X+, r1
     6f6:	1d 92       	st	X+, r1
     6f8:	1c 92       	st	X, r1
     6fa:	1f 97       	sbiw	r26, 0x0f	; 15
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	91 05       	cpc	r25, r1
     704:	c9 f6       	brne	.-78     	; 0x6b8 <Timebase_Struct_Init+0xd8>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     706:	08 95       	ret

00000708 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     708:	7f 92       	push	r7
     70a:	8f 92       	push	r8
     70c:	9f 92       	push	r9
     70e:	af 92       	push	r10
     710:	bf 92       	push	r11
     712:	cf 92       	push	r12
     714:	df 92       	push	r13
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	2a 97       	sbiw	r28, 0x0a	; 10
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     734:	c0 90 4b 01 	lds	r12, 0x014B
     738:	d0 90 4c 01 	lds	r13, 0x014C
     73c:	f6 01       	movw	r30, r12
     73e:	80 81       	ld	r24, Z
     740:	80 ff       	sbrs	r24, 0
     742:	31 c0       	rjmp	.+98     	; 0x7a6 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     744:	01 30       	cpi	r16, 0x01	; 1
     746:	11 05       	cpc	r17, r1
     748:	11 f4       	brne	.+4      	; 0x74e <Timebase_Timer_Config+0x46>
     74a:	96 e0       	ldi	r25, 0x06	; 6
     74c:	19 c0       	rjmp	.+50     	; 0x780 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     74e:	02 30       	cpi	r16, 0x02	; 2
     750:	11 05       	cpc	r17, r1
     752:	11 f4       	brne	.+4      	; 0x758 <Timebase_Timer_Config+0x50>
     754:	95 e0       	ldi	r25, 0x05	; 5
     756:	14 c0       	rjmp	.+40     	; 0x780 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     758:	04 30       	cpi	r16, 0x04	; 4
     75a:	11 05       	cpc	r17, r1
     75c:	11 f4       	brne	.+4      	; 0x762 <Timebase_Timer_Config+0x5a>
     75e:	94 e0       	ldi	r25, 0x04	; 4
     760:	0f c0       	rjmp	.+30     	; 0x780 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     762:	08 30       	cpi	r16, 0x08	; 8
     764:	11 05       	cpc	r17, r1
     766:	11 f4       	brne	.+4      	; 0x76c <Timebase_Timer_Config+0x64>
     768:	93 e0       	ldi	r25, 0x03	; 3
     76a:	0a c0       	rjmp	.+20     	; 0x780 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     76c:	00 31       	cpi	r16, 0x10	; 16
     76e:	11 05       	cpc	r17, r1
     770:	11 f4       	brne	.+4      	; 0x776 <Timebase_Timer_Config+0x6e>
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	05 c0       	rjmp	.+10     	; 0x780 <Timebase_Timer_Config+0x78>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	00 32       	cpi	r16, 0x20	; 32
     77a:	11 05       	cpc	r17, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <Timebase_Timer_Config+0x78>
     77e:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     780:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     782:	84 b7       	in	r24, 0x34	; 52
     784:	87 7f       	andi	r24, 0xF7	; 247
     786:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     788:	80 91 60 00 	lds	r24, 0x0060
     78c:	80 68       	ori	r24, 0x80	; 128
     78e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     792:	80 91 60 00 	lds	r24, 0x0060
     796:	88 61       	ori	r24, 0x18	; 24
     798:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     79c:	90 64       	ori	r25, 0x40	; 64
     79e:	90 93 60 00 	sts	0x0060, r25
    sei();
     7a2:	78 94       	sei
     7a4:	67 c0       	rjmp	.+206    	; 0x874 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     7a6:	81 fd       	sbrc	r24, 1
     7a8:	65 c0       	rjmp	.+202    	; 0x874 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     7aa:	82 ff       	sbrs	r24, 2
     7ac:	63 c0       	rjmp	.+198    	; 0x874 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     7ae:	de 01       	movw	r26, r28
     7b0:	11 96       	adiw	r26, 0x01	; 1
     7b2:	e1 e1       	ldi	r30, 0x11	; 17
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	8a e0       	ldi	r24, 0x0A	; 10
     7b8:	01 90       	ld	r0, Z+
     7ba:	0d 92       	st	X+, r0
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	e1 f7       	brne	.-8      	; 0x7b8 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     7c0:	98 01       	movw	r18, r16
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	60 e0       	ldi	r22, 0x00	; 0
     7c8:	7b e1       	ldi	r23, 0x1B	; 27
     7ca:	87 eb       	ldi	r24, 0xB7	; 183
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
     7d2:	72 2e       	mov	r7, r18
     7d4:	83 2e       	mov	r8, r19
     7d6:	94 2e       	mov	r9, r20
     7d8:	e5 2e       	mov	r14, r21
     7da:	5e 01       	movw	r10, r28
     7dc:	08 94       	sec
     7de:	a1 1c       	adc	r10, r1
     7e0:	b1 1c       	adc	r11, r1
     7e2:	c9 01       	movw	r24, r18
     7e4:	da 01       	movw	r26, r20
     7e6:	9c 01       	movw	r18, r24
     7e8:	ad 01       	movw	r20, r26
     7ea:	ff 24       	eor	r15, r15
     7ec:	14 c0       	rjmp	.+40     	; 0x816 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     7ee:	f5 01       	movw	r30, r10
     7f0:	21 91       	ld	r18, Z+
     7f2:	31 91       	ld	r19, Z+
     7f4:	5f 01       	movw	r10, r30
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	67 2d       	mov	r22, r7
     7fc:	78 2d       	mov	r23, r8
     7fe:	89 2d       	mov	r24, r9
     800:	9e 2d       	mov	r25, r14
     802:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
     806:	c9 01       	movw	r24, r18
     808:	da 01       	movw	r26, r20
     80a:	9c 01       	movw	r18, r24
     80c:	ad 01       	movw	r20, r26
	  clock_div_index++;
     80e:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     810:	f5 e0       	ldi	r31, 0x05	; 5
     812:	ff 16       	cp	r15, r31
     814:	31 f0       	breq	.+12     	; 0x822 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     816:	2f 3f       	cpi	r18, 0xFF	; 255
     818:	31 05       	cpc	r19, r1
     81a:	41 05       	cpc	r20, r1
     81c:	51 05       	cpc	r21, r1
     81e:	09 f0       	breq	.+2      	; 0x822 <Timebase_Timer_Config+0x11a>
     820:	34 f7       	brge	.-52     	; 0x7ee <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     822:	8f 2d       	mov	r24, r15
     824:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     826:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     828:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     82a:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     82e:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     830:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     832:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     834:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     836:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     838:	88 23       	and	r24, r24
     83a:	11 f4       	brne	.+4      	; 0x840 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0f c0       	rjmp	.+30     	; 0x85e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	11 f4       	brne	.+4      	; 0x848 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0b c0       	rjmp	.+22     	; 0x85e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     848:	82 30       	cpi	r24, 0x02	; 2
     84a:	11 f4       	brne	.+4      	; 0x850 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     84c:	83 e0       	ldi	r24, 0x03	; 3
     84e:	07 c0       	rjmp	.+14     	; 0x85e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	11 f4       	brne	.+4      	; 0x858 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	03 c0       	rjmp	.+6      	; 0x85e <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     858:	84 30       	cpi	r24, 0x04	; 4
     85a:	11 f4       	brne	.+4      	; 0x860 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     85c:	85 e0       	ldi	r24, 0x05	; 5
     85e:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     860:	82 2f       	mov	r24, r18
     862:	80 95       	com	r24
     864:	f6 01       	movw	r30, r12
     866:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     868:	83 81       	ldd	r24, Z+3	; 0x03
     86a:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	80 93 6e 00 	sts	0x006E, r24
    sei();
     872:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     874:	f6 01       	movw	r30, r12
     876:	12 83       	std	Z+2, r17	; 0x02
     878:	01 83       	std	Z+1, r16	; 0x01
}
     87a:	2a 96       	adiw	r28, 0x0a	; 10
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	f8 94       	cli
     880:	de bf       	out	0x3e, r29	; 62
     882:	0f be       	out	0x3f, r0	; 63
     884:	cd bf       	out	0x3d, r28	; 61
     886:	cf 91       	pop	r28
     888:	df 91       	pop	r29
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	7f 90       	pop	r7
     8a0:	08 95       	ret

000008a2 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8a2:	e0 91 4b 01 	lds	r30, 0x014B
     8a6:	f0 91 4c 01 	lds	r31, 0x014C
     8aa:	87 89       	ldd	r24, Z+23	; 0x17
}
     8ac:	08 95       	ret

000008ae <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8ae:	e0 91 4b 01 	lds	r30, 0x014B
     8b2:	f0 91 4c 01 	lds	r31, 0x014C
     8b6:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     8b8:	8f 33       	cpi	r24, 0x3F	; 63
     8ba:	18 f4       	brcc	.+6      	; 0x8c2 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     8bc:	87 89       	ldd	r24, Z+23	; 0x17
     8be:	8f 5f       	subi	r24, 0xFF	; 255
     8c0:	87 8b       	std	Z+23, r24	; 0x17
     8c2:	08 95       	ret

000008c4 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8c4:	e0 91 4b 01 	lds	r30, 0x014B
     8c8:	f0 91 4c 01 	lds	r31, 0x014C
     8cc:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8ce:	88 23       	and	r24, r24
     8d0:	19 f0       	breq	.+6      	; 0x8d8 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8d2:	87 89       	ldd	r24, Z+23	; 0x17
     8d4:	81 50       	subi	r24, 0x01	; 1
     8d6:	87 8b       	std	Z+23, r24	; 0x17
     8d8:	08 95       	ret

000008da <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8da:	e0 91 4b 01 	lds	r30, 0x014B
     8de:	f0 91 4c 01 	lds	r31, 0x014C
     8e2:	17 8a       	std	Z+23, r1	; 0x17
}
     8e4:	08 95       	ret

000008e6 <Timebase_Timer_Get_SubSeconds>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8e6:	e0 91 4b 01 	lds	r30, 0x014B
     8ea:	f0 91 4c 01 	lds	r31, 0x014C
     8ee:	20 85       	ldd	r18, Z+8	; 0x08
     8f0:	31 85       	ldd	r19, Z+9	; 0x09
}
     8f2:	c9 01       	movw	r24, r18
     8f4:	08 95       	ret

000008f6 <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8f6:	e0 91 4b 01 	lds	r30, 0x014B
     8fa:	f0 91 4c 01 	lds	r31, 0x014C
     8fe:	22 85       	ldd	r18, Z+10	; 0x0a
     900:	33 85       	ldd	r19, Z+11	; 0x0b
     902:	44 85       	ldd	r20, Z+12	; 0x0c
     904:	55 85       	ldd	r21, Z+13	; 0x0d
}
     906:	b9 01       	movw	r22, r18
     908:	ca 01       	movw	r24, r20
     90a:	08 95       	ret

0000090c <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     90c:	e0 91 4b 01 	lds	r30, 0x014B
     910:	f0 91 4c 01 	lds	r31, 0x014C
     914:	91 87       	std	Z+9, r25	; 0x09
     916:	80 87       	std	Z+8, r24	; 0x08
}
     918:	08 95       	ret

0000091a <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     91a:	e0 91 4b 01 	lds	r30, 0x014B
     91e:	f0 91 4c 01 	lds	r31, 0x014C
     922:	62 87       	std	Z+10, r22	; 0x0a
     924:	73 87       	std	Z+11, r23	; 0x0b
     926:	84 87       	std	Z+12, r24	; 0x0c
     928:	95 87       	std	Z+13, r25	; 0x0d
}
     92a:	08 95       	ret

0000092c <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     92c:	9c 01       	movw	r18, r24

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     92e:	e0 91 4b 01 	lds	r30, 0x014B
     932:	f0 91 4c 01 	lds	r31, 0x014C
     936:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     938:	8f 33       	cpi	r24, 0x3F	; 63
     93a:	18 f4       	brcc	.+6      	; 0x942 <Timebase_Timer_Delay_SubSeconds+0x16>
    Timebase->ActiveTokens += 1;
     93c:	87 89       	ldd	r24, Z+23	; 0x17
     93e:	8f 5f       	subi	r24, 0xFF	; 255
     940:	87 8b       	std	Z+23, r24	; 0x17


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     942:	80 85       	ldd	r24, Z+8	; 0x08
     944:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds();
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
  temp += value;
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	28 0f       	add	r18, r24
     950:	39 1f       	adc	r19, r25
     952:	4a 1f       	adc	r20, r26
     954:	5b 1f       	adc	r21, r27


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     956:	80 85       	ldd	r24, Z+8	; 0x08
     958:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds();
  temp += value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     95a:	a0 e0       	ldi	r26, 0x00	; 0
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	82 17       	cp	r24, r18
     960:	93 07       	cpc	r25, r19
     962:	a4 07       	cpc	r26, r20
     964:	b5 07       	cpc	r27, r21
     966:	bc f3       	brlt	.-18     	; 0x956 <Timebase_Timer_Delay_SubSeconds+0x2a>

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     968:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     96a:	88 23       	and	r24, r24
     96c:	19 f0       	breq	.+6      	; 0x974 <Timebase_Timer_Delay_SubSeconds+0x48>
    Timebase->ActiveTokens -= 1;
     96e:	87 89       	ldd	r24, Z+23	; 0x17
     970:	81 50       	subi	r24, 0x01	; 1
     972:	87 8b       	std	Z+23, r24	; 0x17
     974:	08 95       	ret

00000976 <Timebase_Timer_Await_SubSeconds>:
  Timebase_Token_Remove();
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     976:	bc 01       	movw	r22, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     978:	e0 91 4b 01 	lds	r30, 0x014B
     97c:	f0 91 4c 01 	lds	r31, 0x014C
     980:	80 85       	ldd	r24, Z+8	; 0x08
     982:	91 85       	ldd	r25, Z+9	; 0x09
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     984:	24 81       	ldd	r18, Z+4	; 0x04
     986:	35 81       	ldd	r19, Z+5	; 0x05
     988:	46 81       	ldd	r20, Z+6	; 0x06
     98a:	57 81       	ldd	r21, Z+7	; 0x07
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	82 17       	cp	r24, r18
     992:	93 07       	cpc	r25, r19
     994:	a4 07       	cpc	r26, r20
     996:	b5 07       	cpc	r27, r21
     998:	99 f7       	brne	.-26     	; 0x980 <Timebase_Timer_Await_SubSeconds+0xa>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     99a:	80 85       	ldd	r24, Z+8	; 0x08
     99c:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     99e:	86 0f       	add	r24, r22
     9a0:	97 1f       	adc	r25, r23
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	84 83       	std	Z+4, r24	; 0x04
     9a8:	95 83       	std	Z+5, r25	; 0x05
     9aa:	a6 83       	std	Z+6, r26	; 0x06
     9ac:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     9ae:	24 81       	ldd	r18, Z+4	; 0x04
     9b0:	35 81       	ldd	r19, Z+5	; 0x05
     9b2:	46 81       	ldd	r20, Z+6	; 0x06
     9b4:	57 81       	ldd	r21, Z+7	; 0x07
     9b6:	81 81       	ldd	r24, Z+1	; 0x01
     9b8:	92 81       	ldd	r25, Z+2	; 0x02
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	28 17       	cp	r18, r24
     9c0:	39 07       	cpc	r19, r25
     9c2:	4a 07       	cpc	r20, r26
     9c4:	5b 07       	cpc	r21, r27
     9c6:	84 f0       	brlt	.+32     	; 0x9e8 <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     9c8:	24 81       	ldd	r18, Z+4	; 0x04
     9ca:	35 81       	ldd	r19, Z+5	; 0x05
     9cc:	46 81       	ldd	r20, Z+6	; 0x06
     9ce:	57 81       	ldd	r21, Z+7	; 0x07
     9d0:	81 81       	ldd	r24, Z+1	; 0x01
     9d2:	92 81       	ldd	r25, Z+2	; 0x02
     9d4:	a0 e0       	ldi	r26, 0x00	; 0
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	28 1b       	sub	r18, r24
     9da:	39 0b       	sbc	r19, r25
     9dc:	4a 0b       	sbc	r20, r26
     9de:	5b 0b       	sbc	r21, r27
     9e0:	24 83       	std	Z+4, r18	; 0x04
     9e2:	35 83       	std	Z+5, r19	; 0x05
     9e4:	46 83       	std	Z+6, r20	; 0x06
     9e6:	57 83       	std	Z+7, r21	; 0x07
     9e8:	08 95       	ret

000009ea <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9f2:	e0 91 4b 01 	lds	r30, 0x014B
     9f6:	f0 91 4c 01 	lds	r31, 0x014C
     9fa:	22 85       	ldd	r18, Z+10	; 0x0a
     9fc:	33 85       	ldd	r19, Z+11	; 0x0b
     9fe:	44 85       	ldd	r20, Z+12	; 0x0c
     a00:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     a02:	7c 01       	movw	r14, r24
     a04:	00 e0       	ldi	r16, 0x00	; 0
     a06:	10 e0       	ldi	r17, 0x00	; 0
     a08:	e2 0e       	add	r14, r18
     a0a:	f3 1e       	adc	r15, r19
     a0c:	04 1f       	adc	r16, r20
     a0e:	15 1f       	adc	r17, r21
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a10:	82 85       	ldd	r24, Z+10	; 0x0a
     a12:	93 85       	ldd	r25, Z+11	; 0x0b
     a14:	a4 85       	ldd	r26, Z+12	; 0x0c
     a16:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     a18:	8e 15       	cp	r24, r14
     a1a:	9f 05       	cpc	r25, r15
     a1c:	a0 07       	cpc	r26, r16
     a1e:	b1 07       	cpc	r27, r17
     a20:	bc f3       	brlt	.-18     	; 0xa10 <Timebase_Timer_Delay_Seconds+0x26>
}
     a22:	1f 91       	pop	r17
     a24:	0f 91       	pop	r16
     a26:	ff 90       	pop	r15
     a28:	ef 90       	pop	r14
     a2a:	08 95       	ret

00000a2c <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     a2c:	e0 91 4b 01 	lds	r30, 0x014B
     a30:	f0 91 4c 01 	lds	r31, 0x014C
     a34:	16 86       	std	Z+14, r1	; 0x0e
     a36:	17 86       	std	Z+15, r1	; 0x0f
     a38:	10 8a       	std	Z+16, r1	; 0x10
     a3a:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     a3c:	12 8a       	std	Z+18, r1	; 0x12
     a3e:	13 8a       	std	Z+19, r1	; 0x13
     a40:	14 8a       	std	Z+20, r1	; 0x14
     a42:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     a44:	16 8a       	std	Z+22, r1	; 0x16
}
     a46:	08 95       	ret

00000a48 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     a48:	e0 91 4b 01 	lds	r30, 0x014B
     a4c:	f0 91 4c 01 	lds	r31, 0x014C
     a50:	86 89       	ldd	r24, Z+22	; 0x16
     a52:	88 23       	and	r24, r24
     a54:	91 f4       	brne	.+36     	; 0xa7a <Timebase_Window_Timer_Start+0x32>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a56:	82 85       	ldd	r24, Z+10	; 0x0a
     a58:	93 85       	ldd	r25, Z+11	; 0x0b
     a5a:	a4 85       	ldd	r26, Z+12	; 0x0c
     a5c:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     a5e:	86 87       	std	Z+14, r24	; 0x0e
     a60:	97 87       	std	Z+15, r25	; 0x0f
     a62:	a0 8b       	std	Z+16, r26	; 0x10
     a64:	b1 8b       	std	Z+17, r27	; 0x11


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a66:	80 85       	ldd	r24, Z+8	; 0x08
     a68:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	82 8b       	std	Z+18, r24	; 0x12
     a70:	93 8b       	std	Z+19, r25	; 0x13
     a72:	a4 8b       	std	Z+20, r26	; 0x14
     a74:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	86 8b       	std	Z+22, r24	; 0x16
     a7a:	08 95       	ret

00000a7c <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     a88:	c0 91 4b 01 	lds	r28, 0x014B
     a8c:	d0 91 4c 01 	lds	r29, 0x014C
     a90:	8e 89       	ldd	r24, Y+22	; 0x16
     a92:	81 30       	cpi	r24, 0x01	; 1
     a94:	21 f0       	breq	.+8      	; 0xa9e <Timebase_Window_Timer_Get_Interval+0x22>
     a96:	ee 24       	eor	r14, r14
     a98:	ff 24       	eor	r15, r15
     a9a:	87 01       	movw	r16, r14
     a9c:	23 c0       	rjmp	.+70     	; 0xae4 <Timebase_Window_Timer_Get_Interval+0x68>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a9e:	2a 85       	ldd	r18, Y+10	; 0x0a
     aa0:	3b 85       	ldd	r19, Y+11	; 0x0b
     aa2:	4c 85       	ldd	r20, Y+12	; 0x0c
     aa4:	5d 85       	ldd	r21, Y+13	; 0x0d


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     aa6:	88 85       	ldd	r24, Y+8	; 0x08
     aa8:	99 85       	ldd	r25, Y+9	; 0x09


int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    int32_t curr_s = Timebase_Timer_Get_Seconds();
    int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
     aaa:	7c 01       	movw	r14, r24
     aac:	00 e0       	ldi	r16, 0x00	; 0
     aae:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     ab0:	8e 85       	ldd	r24, Y+14	; 0x0e
     ab2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ab4:	a8 89       	ldd	r26, Y+16	; 0x10
     ab6:	b9 89       	ldd	r27, Y+17	; 0x11
     ab8:	28 1b       	sub	r18, r24
     aba:	39 0b       	sbc	r19, r25
     abc:	4a 0b       	sbc	r20, r26
     abe:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     ac0:	69 81       	ldd	r22, Y+1	; 0x01
     ac2:	7a 81       	ldd	r23, Y+2	; 0x02
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__mulsi3>
	curr_s += curr_ss;
     acc:	2a 89       	ldd	r18, Y+18	; 0x12
     ace:	3b 89       	ldd	r19, Y+19	; 0x13
     ad0:	4c 89       	ldd	r20, Y+20	; 0x14
     ad2:	5d 89       	ldd	r21, Y+21	; 0x15
     ad4:	e2 1a       	sub	r14, r18
     ad6:	f3 0a       	sbc	r15, r19
     ad8:	04 0b       	sbc	r16, r20
     ada:	15 0b       	sbc	r17, r21
     adc:	e6 0e       	add	r14, r22
     ade:	f7 1e       	adc	r15, r23
     ae0:	08 1f       	adc	r16, r24
     ae2:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     ae4:	b7 01       	movw	r22, r14
     ae6:	c8 01       	movw	r24, r16
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	08 95       	ret

00000af6 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     af6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <Timebase_Window_Timer_Get_Interval>
     afa:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     afc:	e0 91 4b 01 	lds	r30, 0x014B
     b00:	f0 91 4c 01 	lds	r31, 0x014C
     b04:	86 89       	ldd	r24, Z+22	; 0x16
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	49 f4       	brne	.+18     	; 0xb1c <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b0a:	16 86       	std	Z+14, r1	; 0x0e
     b0c:	17 86       	std	Z+15, r1	; 0x0f
     b0e:	10 8a       	std	Z+16, r1	; 0x10
     b10:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     b12:	12 8a       	std	Z+18, r1	; 0x12
     b14:	13 8a       	std	Z+19, r1	; 0x13
     b16:	14 8a       	std	Z+20, r1	; 0x14
     b18:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b1a:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     b1c:	82 2f       	mov	r24, r18
     b1e:	08 95       	ret

00000b20 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
     b20:	e0 91 4b 01 	lds	r30, 0x014B
     b24:	f0 91 4c 01 	lds	r31, 0x014C
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	2d e0       	ldi	r18, 0x0D	; 13
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	ac 01       	movw	r20, r24
     b30:	42 9f       	mul	r20, r18
     b32:	c0 01       	movw	r24, r0
     b34:	43 9f       	mul	r20, r19
     b36:	90 0d       	add	r25, r0
     b38:	52 9f       	mul	r21, r18
     b3a:	90 0d       	add	r25, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	e8 0f       	add	r30, r24
     b40:	f9 1f       	adc	r31, r25
     b42:	e3 59       	subi	r30, 0x93	; 147
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	80 81       	ld	r24, Z
     b48:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
     b4a:	8f 70       	andi	r24, 0x0F	; 15
     b4c:	08 95       	ret

00000b4e <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     b4e:	e0 91 4b 01 	lds	r30, 0x014B
     b52:	f0 91 4c 01 	lds	r31, 0x014C
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	2d e0       	ldi	r18, 0x0D	; 13
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	ac 01       	movw	r20, r24
     b5e:	42 9f       	mul	r20, r18
     b60:	c0 01       	movw	r24, r0
     b62:	43 9f       	mul	r20, r19
     b64:	90 0d       	add	r25, r0
     b66:	52 9f       	mul	r21, r18
     b68:	90 0d       	add	r25, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	e8 0f       	add	r30, r24
     b6e:	f9 1f       	adc	r31, r25
     b70:	e3 59       	subi	r30, 0x93	; 147
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	6f 70       	andi	r22, 0x0F	; 15
     b76:	66 0f       	add	r22, r22
     b78:	80 81       	ld	r24, Z
     b7a:	81 7e       	andi	r24, 0xE1	; 225
     b7c:	86 2b       	or	r24, r22
     b7e:	80 83       	st	Z, r24
}
     b80:	08 95       	ret

00000b82 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
     b82:	e0 91 4b 01 	lds	r30, 0x014B
     b86:	f0 91 4c 01 	lds	r31, 0x014C
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	2d e0       	ldi	r18, 0x0D	; 13
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	ac 01       	movw	r20, r24
     b92:	42 9f       	mul	r20, r18
     b94:	c0 01       	movw	r24, r0
     b96:	43 9f       	mul	r20, r19
     b98:	90 0d       	add	r25, r0
     b9a:	52 9f       	mul	r21, r18
     b9c:	90 0d       	add	r25, r0
     b9e:	11 24       	eor	r1, r1
     ba0:	e8 0f       	add	r30, r24
     ba2:	f9 1f       	adc	r31, r25
     ba4:	ee 58       	subi	r30, 0x8E	; 142
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	08 95       	ret

00000bb2 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     bb2:	e0 91 4b 01 	lds	r30, 0x014B
     bb6:	f0 91 4c 01 	lds	r31, 0x014C
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	2d e0       	ldi	r18, 0x0D	; 13
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	dc 01       	movw	r26, r24
     bc2:	a2 9f       	mul	r26, r18
     bc4:	c0 01       	movw	r24, r0
     bc6:	a3 9f       	mul	r26, r19
     bc8:	90 0d       	add	r25, r0
     bca:	b2 9f       	mul	r27, r18
     bcc:	90 0d       	add	r25, r0
     bce:	11 24       	eor	r1, r1
     bd0:	e8 0f       	add	r30, r24
     bd2:	f9 1f       	adc	r31, r25
     bd4:	ee 58       	subi	r30, 0x8E	; 142
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	40 83       	st	Z, r20
     bda:	51 83       	std	Z+1, r21	; 0x01
     bdc:	62 83       	std	Z+2, r22	; 0x02
     bde:	73 83       	std	Z+3, r23	; 0x03
}
     be0:	08 95       	ret

00000be2 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
     be2:	e0 91 4b 01 	lds	r30, 0x014B
     be6:	f0 91 4c 01 	lds	r31, 0x014C
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	2d e0       	ldi	r18, 0x0D	; 13
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	ac 01       	movw	r20, r24
     bf2:	42 9f       	mul	r20, r18
     bf4:	c0 01       	movw	r24, r0
     bf6:	43 9f       	mul	r20, r19
     bf8:	90 0d       	add	r25, r0
     bfa:	52 9f       	mul	r21, r18
     bfc:	90 0d       	add	r25, r0
     bfe:	11 24       	eor	r1, r1
     c00:	e8 0f       	add	r30, r24
     c02:	f9 1f       	adc	r31, r25
     c04:	e2 59       	subi	r30, 0x92	; 146
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	08 95       	ret

00000c12 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     c12:	e0 91 4b 01 	lds	r30, 0x014B
     c16:	f0 91 4c 01 	lds	r31, 0x014C
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	2d e0       	ldi	r18, 0x0D	; 13
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	dc 01       	movw	r26, r24
     c22:	a2 9f       	mul	r26, r18
     c24:	c0 01       	movw	r24, r0
     c26:	a3 9f       	mul	r26, r19
     c28:	90 0d       	add	r25, r0
     c2a:	b2 9f       	mul	r27, r18
     c2c:	90 0d       	add	r25, r0
     c2e:	11 24       	eor	r1, r1
     c30:	e8 0f       	add	r30, r24
     c32:	f9 1f       	adc	r31, r25
     c34:	e2 59       	subi	r30, 0x92	; 146
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	40 83       	st	Z, r20
     c3a:	51 83       	std	Z+1, r21	; 0x01
     c3c:	62 83       	std	Z+2, r22	; 0x02
     c3e:	73 83       	std	Z+3, r23	; 0x03
}
     c40:	08 95       	ret

00000c42 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
     c42:	e0 91 4b 01 	lds	r30, 0x014B
     c46:	f0 91 4c 01 	lds	r31, 0x014C
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	2d e0       	ldi	r18, 0x0D	; 13
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	ac 01       	movw	r20, r24
     c52:	42 9f       	mul	r20, r18
     c54:	c0 01       	movw	r24, r0
     c56:	43 9f       	mul	r20, r19
     c58:	90 0d       	add	r25, r0
     c5a:	52 9f       	mul	r21, r18
     c5c:	90 0d       	add	r25, r0
     c5e:	11 24       	eor	r1, r1
     c60:	e8 0f       	add	r30, r24
     c62:	f9 1f       	adc	r31, r25
     c64:	ea 58       	subi	r30, 0x8A	; 138
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	60 81       	ld	r22, Z
     c6a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
     c6c:	82 81       	ldd	r24, Z+2	; 0x02
     c6e:	93 81       	ldd	r25, Z+3	; 0x03
     c70:	08 95       	ret

00000c72 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     c72:	e0 91 4b 01 	lds	r30, 0x014B
     c76:	f0 91 4c 01 	lds	r31, 0x014C
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     c7e:	77 ff       	sbrs	r23, 7
     c80:	13 c0       	rjmp	.+38     	; 0xca8 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
     c82:	8d e0       	ldi	r24, 0x0D	; 13
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	ac 01       	movw	r20, r24
     c88:	24 9f       	mul	r18, r20
     c8a:	c0 01       	movw	r24, r0
     c8c:	25 9f       	mul	r18, r21
     c8e:	90 0d       	add	r25, r0
     c90:	34 9f       	mul	r19, r20
     c92:	90 0d       	add	r25, r0
     c94:	11 24       	eor	r1, r1
     c96:	e8 0f       	add	r30, r24
     c98:	f9 1f       	adc	r31, r25
     c9a:	ea 58       	subi	r30, 0x8A	; 138
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	10 82       	st	Z, r1
     ca0:	11 82       	std	Z+1, r1	; 0x01
     ca2:	12 82       	std	Z+2, r1	; 0x02
     ca4:	13 82       	std	Z+3, r1	; 0x03
     ca6:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
     ca8:	8d e0       	ldi	r24, 0x0D	; 13
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	dc 01       	movw	r26, r24
     cae:	2a 9f       	mul	r18, r26
     cb0:	c0 01       	movw	r24, r0
     cb2:	2b 9f       	mul	r18, r27
     cb4:	90 0d       	add	r25, r0
     cb6:	3a 9f       	mul	r19, r26
     cb8:	90 0d       	add	r25, r0
     cba:	11 24       	eor	r1, r1
     cbc:	e8 0f       	add	r30, r24
     cbe:	f9 1f       	adc	r31, r25
     cc0:	ea 58       	subi	r30, 0x8A	; 138
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	40 83       	st	Z, r20
     cc6:	51 83       	std	Z+1, r21	; 0x01
     cc8:	62 83       	std	Z+2, r22	; 0x02
     cca:	73 83       	std	Z+3, r23	; 0x03
     ccc:	08 95       	ret

00000cce <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
     cce:	e0 91 4b 01 	lds	r30, 0x014B
     cd2:	f0 91 4c 01 	lds	r31, 0x014C
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	2d e0       	ldi	r18, 0x0D	; 13
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	ac 01       	movw	r20, r24
     cde:	42 9f       	mul	r20, r18
     ce0:	c0 01       	movw	r24, r0
     ce2:	43 9f       	mul	r20, r19
     ce4:	90 0d       	add	r25, r0
     ce6:	52 9f       	mul	r21, r18
     ce8:	90 0d       	add	r25, r0
     cea:	11 24       	eor	r1, r1
     cec:	e8 0f       	add	r30, r24
     cee:	f9 1f       	adc	r31, r25
     cf0:	e3 59       	subi	r30, 0x93	; 147
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
     cf6:	81 70       	andi	r24, 0x01	; 1
     cf8:	08 95       	ret

00000cfa <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
     cfa:	e0 91 4b 01 	lds	r30, 0x014B
     cfe:	f0 91 4c 01 	lds	r31, 0x014C
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	2d e0       	ldi	r18, 0x0D	; 13
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	ac 01       	movw	r20, r24
     d0a:	42 9f       	mul	r20, r18
     d0c:	c0 01       	movw	r24, r0
     d0e:	43 9f       	mul	r20, r19
     d10:	90 0d       	add	r25, r0
     d12:	52 9f       	mul	r21, r18
     d14:	90 0d       	add	r25, r0
     d16:	11 24       	eor	r1, r1
     d18:	e8 0f       	add	r30, r24
     d1a:	f9 1f       	adc	r31, r25
     d1c:	e3 59       	subi	r30, 0x93	; 147
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	80 81       	ld	r24, Z
     d22:	81 60       	ori	r24, 0x01	; 1
     d24:	80 83       	st	Z, r24
}
     d26:	08 95       	ret

00000d28 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     d28:	e0 91 4b 01 	lds	r30, 0x014B
     d2c:	f0 91 4c 01 	lds	r31, 0x014C
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2d e0       	ldi	r18, 0x0D	; 13
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	ac 01       	movw	r20, r24
     d38:	42 9f       	mul	r20, r18
     d3a:	c0 01       	movw	r24, r0
     d3c:	43 9f       	mul	r20, r19
     d3e:	90 0d       	add	r25, r0
     d40:	52 9f       	mul	r21, r18
     d42:	90 0d       	add	r25, r0
     d44:	11 24       	eor	r1, r1
     d46:	e8 0f       	add	r30, r24
     d48:	f9 1f       	adc	r31, r25
     d4a:	e3 59       	subi	r30, 0x93	; 147
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	8e 7f       	andi	r24, 0xFE	; 254
     d52:	80 83       	st	Z, r24
}
     d54:	08 95       	ret

00000d56 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     d56:	e0 91 4b 01 	lds	r30, 0x014B
     d5a:	f0 91 4c 01 	lds	r31, 0x014C
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	2d e0       	ldi	r18, 0x0D	; 13
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	ac 01       	movw	r20, r24
     d66:	42 9f       	mul	r20, r18
     d68:	c0 01       	movw	r24, r0
     d6a:	43 9f       	mul	r20, r19
     d6c:	90 0d       	add	r25, r0
     d6e:	52 9f       	mul	r21, r18
     d70:	90 0d       	add	r25, r0
     d72:	11 24       	eor	r1, r1
     d74:	e8 0f       	add	r30, r24
     d76:	f9 1f       	adc	r31, r25
     d78:	e2 59       	subi	r30, 0x92	; 146
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	11 92       	st	Z+, r1
     d7e:	11 92       	st	Z+, r1
     d80:	11 92       	st	Z+, r1
     d82:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     d84:	10 82       	st	Z, r1
     d86:	11 82       	std	Z+1, r1	; 0x01
     d88:	12 82       	std	Z+2, r1	; 0x02
     d8a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     d8c:	35 97       	sbiw	r30, 0x05	; 5
     d8e:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     d90:	80 7e       	andi	r24, 0xE0	; 224
     d92:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
     d94:	08 95       	ret

00000d96 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     d96:	e0 91 4b 01 	lds	r30, 0x014B
     d9a:	f0 91 4c 01 	lds	r31, 0x014C
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2d e0       	ldi	r18, 0x0D	; 13
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	ac 01       	movw	r20, r24
     da6:	42 9f       	mul	r20, r18
     da8:	c0 01       	movw	r24, r0
     daa:	43 9f       	mul	r20, r19
     dac:	90 0d       	add	r25, r0
     dae:	52 9f       	mul	r21, r18
     db0:	90 0d       	add	r25, r0
     db2:	11 24       	eor	r1, r1
     db4:	e8 0f       	add	r30, r24
     db6:	f9 1f       	adc	r31, r25
     db8:	e2 59       	subi	r30, 0x92	; 146
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	11 92       	st	Z+, r1
     dbe:	11 92       	st	Z+, r1
     dc0:	11 92       	st	Z+, r1
     dc2:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     dc4:	10 82       	st	Z, r1
     dc6:	11 82       	std	Z+1, r1	; 0x01
     dc8:	12 82       	std	Z+2, r1	; 0x02
     dca:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     dcc:	35 97       	sbiw	r30, 0x05	; 5
     dce:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     dd0:	80 7e       	andi	r24, 0xE0	; 224
     dd2:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
     dd4:	08 95       	ret

00000dd6 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     dd6:	e0 91 4b 01 	lds	r30, 0x014B
     dda:	f0 91 4c 01 	lds	r31, 0x014C
     dde:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     de0:	2d e0       	ldi	r18, 0x0D	; 13
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	ac 01       	movw	r20, r24
     de6:	42 9f       	mul	r20, r18
     de8:	c0 01       	movw	r24, r0
     dea:	43 9f       	mul	r20, r19
     dec:	90 0d       	add	r25, r0
     dee:	52 9f       	mul	r21, r18
     df0:	90 0d       	add	r25, r0
     df2:	11 24       	eor	r1, r1
     df4:	e8 0f       	add	r30, r24
     df6:	f9 1f       	adc	r31, r25
     df8:	e3 59       	subi	r30, 0x93	; 147
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	90 81       	ld	r25, Z
     dfe:	89 2f       	mov	r24, r25
     e00:	86 95       	lsr	r24
     e02:	8f 70       	andi	r24, 0x0F	; 15
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	19 f0       	breq	.+6      	; 0xe0e <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e08:	91 7e       	andi	r25, 0xE1	; 225
     e0a:	92 60       	ori	r25, 0x02	; 2
     e0c:	90 83       	st	Z, r25
     e0e:	08 95       	ret

00000e10 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     e10:	e0 91 4b 01 	lds	r30, 0x014B
     e14:	f0 91 4c 01 	lds	r31, 0x014C
     e18:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     e1a:	2d e0       	ldi	r18, 0x0D	; 13
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	ac 01       	movw	r20, r24
     e20:	42 9f       	mul	r20, r18
     e22:	c0 01       	movw	r24, r0
     e24:	43 9f       	mul	r20, r19
     e26:	90 0d       	add	r25, r0
     e28:	52 9f       	mul	r21, r18
     e2a:	90 0d       	add	r25, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	e8 0f       	add	r30, r24
     e30:	f9 1f       	adc	r31, r25
     e32:	e3 59       	subi	r30, 0x93	; 147
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	90 81       	ld	r25, Z
     e38:	89 2f       	mov	r24, r25
     e3a:	86 95       	lsr	r24
     e3c:	8f 70       	andi	r24, 0x0F	; 15
     e3e:	82 30       	cpi	r24, 0x02	; 2
     e40:	19 f0       	breq	.+6      	; 0xe48 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e42:	91 7e       	andi	r25, 0xE1	; 225
     e44:	94 60       	ori	r25, 0x04	; 4
     e46:	90 83       	st	Z, r25
     e48:	08 95       	ret

00000e4a <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     e4e:	a0 91 4b 01 	lds	r26, 0x014B
     e52:	b0 91 4c 01 	lds	r27, 0x014C
     e56:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     e58:	2d e0       	ldi	r18, 0x0D	; 13
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	82 9f       	mul	r24, r18
     e5e:	f0 01       	movw	r30, r0
     e60:	83 9f       	mul	r24, r19
     e62:	f0 0d       	add	r31, r0
     e64:	92 9f       	mul	r25, r18
     e66:	f0 0d       	add	r31, r0
     e68:	11 24       	eor	r1, r1
     e6a:	ea 0f       	add	r30, r26
     e6c:	fb 1f       	adc	r31, r27
     e6e:	ef 01       	movw	r28, r30
     e70:	c3 59       	subi	r28, 0x93	; 147
     e72:	df 4f       	sbci	r29, 0xFF	; 255
     e74:	88 81       	ld	r24, Y
     e76:	86 95       	lsr	r24
     e78:	8f 70       	andi	r24, 0x0F	; 15
     e7a:	e9 f4       	brne	.+58     	; 0xeb6 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e7c:	ee 58       	subi	r30, 0x8E	; 142
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	40 83       	st	Z, r20
     e82:	51 83       	std	Z+1, r21	; 0x01
     e84:	62 83       	std	Z+2, r22	; 0x02
     e86:	73 83       	std	Z+3, r23	; 0x03
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e88:	1a 96       	adiw	r26, 0x0a	; 10
     e8a:	8d 91       	ld	r24, X+
     e8c:	9d 91       	ld	r25, X+
     e8e:	0d 90       	ld	r0, X+
     e90:	bc 91       	ld	r27, X
     e92:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e94:	84 0f       	add	r24, r20
     e96:	95 1f       	adc	r25, r21
     e98:	a6 1f       	adc	r26, r22
     e9a:	b7 1f       	adc	r27, r23
     e9c:	b2 93       	st	-Z, r27
     e9e:	a2 93       	st	-Z, r26
     ea0:	92 93       	st	-Z, r25
     ea2:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     ea4:	98 81       	ld	r25, Y
     ea6:	89 2f       	mov	r24, r25
     ea8:	86 95       	lsr	r24
     eaa:	8f 70       	andi	r24, 0x0F	; 15
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	19 f0       	breq	.+6      	; 0xeb6 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     eb0:	91 7e       	andi	r25, 0xE1	; 225
     eb2:	92 60       	ori	r25, 0x02	; 2
     eb4:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     ec0:	e0 91 4b 01 	lds	r30, 0x014B
     ec4:	f0 91 4c 01 	lds	r31, 0x014C
     ec8:	a8 2f       	mov	r26, r24
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	2d e0       	ldi	r18, 0x0D	; 13
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	e9 01       	movw	r28, r18
     ed2:	ac 9f       	mul	r26, r28
     ed4:	90 01       	movw	r18, r0
     ed6:	ad 9f       	mul	r26, r29
     ed8:	30 0d       	add	r19, r0
     eda:	bc 9f       	mul	r27, r28
     edc:	30 0d       	add	r19, r0
     ede:	11 24       	eor	r1, r1
     ee0:	e2 0f       	add	r30, r18
     ee2:	f3 1f       	adc	r31, r19
     ee4:	e2 59       	subi	r30, 0x92	; 146
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	11 92       	st	Z+, r1
     eea:	11 92       	st	Z+, r1
     eec:	11 92       	st	Z+, r1
     eee:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     ef0:	10 82       	st	Z, r1
     ef2:	11 82       	std	Z+1, r1	; 0x01
     ef4:	12 82       	std	Z+2, r1	; 0x02
     ef6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ef8:	35 97       	sbiw	r30, 0x05	; 5
     efa:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     efc:	90 7e       	andi	r25, 0xE0	; 224
     efe:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
     f00:	0e 94 25 07 	call	0xe4a	; 0xe4a <Timebase_DownCounter_Set_Securely>
} 
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     f12:	a0 91 4b 01 	lds	r26, 0x014B
     f16:	b0 91 4c 01 	lds	r27, 0x014C
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	2d e0       	ldi	r18, 0x0D	; 13
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	82 9f       	mul	r24, r18
     f22:	f0 01       	movw	r30, r0
     f24:	83 9f       	mul	r24, r19
     f26:	f0 0d       	add	r31, r0
     f28:	92 9f       	mul	r25, r18
     f2a:	f0 0d       	add	r31, r0
     f2c:	11 24       	eor	r1, r1
     f2e:	ea 0f       	add	r30, r26
     f30:	fb 1f       	adc	r31, r27
     f32:	8f 01       	movw	r16, r30
     f34:	03 59       	subi	r16, 0x93	; 147
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	e8 01       	movw	r28, r16
     f3a:	88 81       	ld	r24, Y
     f3c:	86 95       	lsr	r24
     f3e:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	69 f5       	brne	.+90     	; 0xf9e <Timebase_DownCounter_Update+0x94>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f44:	1a 96       	adiw	r26, 0x0a	; 10
     f46:	2d 91       	ld	r18, X+
     f48:	3d 91       	ld	r19, X+
     f4a:	4d 91       	ld	r20, X+
     f4c:	5c 91       	ld	r21, X
     f4e:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
     f50:	bf 01       	movw	r22, r30
     f52:	62 59       	subi	r22, 0x92	; 146
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	eb 01       	movw	r28, r22
     f58:	88 81       	ld	r24, Y
     f5a:	99 81       	ldd	r25, Y+1	; 0x01
     f5c:	aa 81       	ldd	r26, Y+2	; 0x02
     f5e:	bb 81       	ldd	r27, Y+3	; 0x03
     f60:	82 1b       	sub	r24, r18
     f62:	93 0b       	sbc	r25, r19
     f64:	a4 0b       	sbc	r26, r20
     f66:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f68:	ee 58       	subi	r30, 0x8E	; 142
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 83       	st	Z, r24
     f6e:	91 83       	std	Z+1, r25	; 0x01
     f70:	a2 83       	std	Z+2, r26	; 0x02
     f72:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
     f74:	18 16       	cp	r1, r24
     f76:	19 06       	cpc	r1, r25
     f78:	1a 06       	cpc	r1, r26
     f7a:	1b 06       	cpc	r1, r27
     f7c:	34 f1       	brlt	.+76     	; 0xfca <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f7e:	db 01       	movw	r26, r22
     f80:	1d 92       	st	X+, r1
     f82:	1d 92       	st	X+, r1
     f84:	1d 92       	st	X+, r1
     f86:	1c 92       	st	X, r1
     f88:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f8a:	10 82       	st	Z, r1
     f8c:	11 82       	std	Z+1, r1	; 0x01
     f8e:	12 82       	std	Z+2, r1	; 0x02
     f90:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     f92:	e8 01       	movw	r28, r16
     f94:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f96:	80 7e       	andi	r24, 0xE0	; 224
     f98:	88 60       	ori	r24, 0x08	; 8
     f9a:	88 83       	st	Y, r24
     f9c:	16 c0       	rjmp	.+44     	; 0xfca <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	a1 f4       	brne	.+40     	; 0xfca <Timebase_DownCounter_Update+0xc0>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     fa2:	1a 96       	adiw	r26, 0x0a	; 10
     fa4:	8d 91       	ld	r24, X+
     fa6:	9d 91       	ld	r25, X+
     fa8:	0d 90       	ld	r0, X+
     faa:	bc 91       	ld	r27, X
     fac:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     fae:	ee 58       	subi	r30, 0x8E	; 142
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	20 81       	ld	r18, Z
     fb4:	31 81       	ldd	r19, Z+1	; 0x01
     fb6:	42 81       	ldd	r20, Z+2	; 0x02
     fb8:	53 81       	ldd	r21, Z+3	; 0x03
     fba:	82 0f       	add	r24, r18
     fbc:	93 1f       	adc	r25, r19
     fbe:	a4 1f       	adc	r26, r20
     fc0:	b5 1f       	adc	r27, r21
     fc2:	b2 93       	st	-Z, r27
     fc4:	a2 93       	st	-Z, r26
     fc6:	92 93       	st	-Z, r25
     fc8:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	08 95       	ret

00000fd4 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	e0 91 4b 01 	lds	r30, 0x014B
     fda:	f0 91 4c 01 	lds	r31, 0x014C
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	2d e0       	ldi	r18, 0x0D	; 13
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	bc 01       	movw	r22, r24
     fe6:	62 9f       	mul	r22, r18
     fe8:	c0 01       	movw	r24, r0
     fea:	63 9f       	mul	r22, r19
     fec:	90 0d       	add	r25, r0
     fee:	72 9f       	mul	r23, r18
     ff0:	90 0d       	add	r25, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	e8 0f       	add	r30, r24
     ff6:	f9 1f       	adc	r31, r25
     ff8:	e3 59       	subi	r30, 0x93	; 147
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	80 81       	ld	r24, Z
     ffe:	86 95       	lsr	r24
    1000:	8f 70       	andi	r24, 0x0F	; 15
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	09 f4       	brne	.+2      	; 0x1008 <Timebase_DownCounter_Expired+0x34>
    1006:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1008:	84 2f       	mov	r24, r20
    100a:	08 95       	ret

0000100c <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    100c:	e0 91 4b 01 	lds	r30, 0x014B
    1010:	f0 91 4c 01 	lds	r31, 0x014C
    1014:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1016:	2d e0       	ldi	r18, 0x0D	; 13
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	ac 01       	movw	r20, r24
    101c:	42 9f       	mul	r20, r18
    101e:	c0 01       	movw	r24, r0
    1020:	43 9f       	mul	r20, r19
    1022:	90 0d       	add	r25, r0
    1024:	52 9f       	mul	r21, r18
    1026:	90 0d       	add	r25, r0
    1028:	11 24       	eor	r1, r1
    102a:	e8 0f       	add	r30, r24
    102c:	f9 1f       	adc	r31, r25
    102e:	df 01       	movw	r26, r30
    1030:	a3 59       	subi	r26, 0x93	; 147
    1032:	bf 4f       	sbci	r27, 0xFF	; 255
    1034:	8c 91       	ld	r24, X
    1036:	86 95       	lsr	r24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	11 f0       	breq	.+4      	; 0x1042 <Timebase_DownCounter_Expired_Event+0x36>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1042:	e2 59       	subi	r30, 0x92	; 146
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	11 92       	st	Z+, r1
    1048:	11 92       	st	Z+, r1
    104a:	11 92       	st	Z+, r1
    104c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    104e:	10 82       	st	Z, r1
    1050:	11 82       	std	Z+1, r1	; 0x01
    1052:	12 82       	std	Z+2, r1	; 0x02
    1054:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1056:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1058:	80 7e       	andi	r24, 0xE0	; 224
    105a:	8c 93       	st	X, r24
    105c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    105e:	08 95       	ret

00001060 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    1064:	c0 91 4b 01 	lds	r28, 0x014B
    1068:	d0 91 4c 01 	lds	r29, 0x014C
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	28 9f       	mul	r18, r24
    1076:	f0 01       	movw	r30, r0
    1078:	29 9f       	mul	r18, r25
    107a:	f0 0d       	add	r31, r0
    107c:	38 9f       	mul	r19, r24
    107e:	f0 0d       	add	r31, r0
    1080:	11 24       	eor	r1, r1
    1082:	ec 0f       	add	r30, r28
    1084:	fd 1f       	adc	r31, r29
    1086:	e3 59       	subi	r30, 0x93	; 147
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	80 81       	ld	r24, Z
    108c:	ed 56       	subi	r30, 0x6D	; 109
    108e:	f0 40       	sbci	r31, 0x00	; 0
    1090:	80 fd       	sbrc	r24, 0
    1092:	25 c0       	rjmp	.+74     	; 0x10de <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    1094:	ee 58       	subi	r30, 0x8E	; 142
    1096:	ff 4f       	sbci	r31, 0xFF	; 255
    1098:	81 91       	ld	r24, Z+
    109a:	91 91       	ld	r25, Z+
    109c:	a1 91       	ld	r26, Z+
    109e:	b1 91       	ld	r27, Z+
    10a0:	84 1b       	sub	r24, r20
    10a2:	95 0b       	sbc	r25, r21
    10a4:	a6 0b       	sbc	r26, r22
    10a6:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    10a8:	b7 ff       	sbrs	r27, 7
    10aa:	05 c0       	rjmp	.+10     	; 0x10b6 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    10ac:	10 82       	st	Z, r1
    10ae:	11 82       	std	Z+1, r1	; 0x01
    10b0:	12 82       	std	Z+2, r1	; 0x02
    10b2:	13 82       	std	Z+3, r1	; 0x03
    10b4:	04 c0       	rjmp	.+8      	; 0x10be <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    10b6:	80 83       	st	Z, r24
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	a2 83       	std	Z+2, r26	; 0x02
    10bc:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    10be:	8d e0       	ldi	r24, 0x0D	; 13
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	28 9f       	mul	r18, r24
    10c4:	f0 01       	movw	r30, r0
    10c6:	29 9f       	mul	r18, r25
    10c8:	f0 0d       	add	r31, r0
    10ca:	38 9f       	mul	r19, r24
    10cc:	f0 0d       	add	r31, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	ec 0f       	add	r30, r28
    10d2:	fd 1f       	adc	r31, r29
    10d4:	e3 59       	subi	r30, 0x93	; 147
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 81       	ld	r24, Z
    10da:	81 60       	ori	r24, 0x01	; 1
    10dc:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    10e4:	e0 91 4b 01 	lds	r30, 0x014B
    10e8:	f0 91 4c 01 	lds	r31, 0x014C
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    10ee:	2d e0       	ldi	r18, 0x0D	; 13
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	ac 01       	movw	r20, r24
    10f4:	42 9f       	mul	r20, r18
    10f6:	c0 01       	movw	r24, r0
    10f8:	43 9f       	mul	r20, r19
    10fa:	90 0d       	add	r25, r0
    10fc:	52 9f       	mul	r21, r18
    10fe:	90 0d       	add	r25, r0
    1100:	11 24       	eor	r1, r1
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	df 01       	movw	r26, r30
    1108:	aa 58       	subi	r26, 0x8A	; 138
    110a:	bf 4f       	sbci	r27, 0xFF	; 255
    110c:	ee 58       	subi	r30, 0x8E	; 142
    110e:	ff 4f       	sbci	r31, 0xFF	; 255
    1110:	20 81       	ld	r18, Z
    1112:	31 81       	ldd	r19, Z+1	; 0x01
    1114:	42 81       	ldd	r20, Z+2	; 0x02
    1116:	53 81       	ldd	r21, Z+3	; 0x03
    1118:	8d 91       	ld	r24, X+
    111a:	9d 91       	ld	r25, X+
    111c:	0d 90       	ld	r0, X+
    111e:	bc 91       	ld	r27, X
    1120:	a0 2d       	mov	r26, r0
    1122:	28 1b       	sub	r18, r24
    1124:	39 0b       	sbc	r19, r25
    1126:	4a 0b       	sbc	r20, r26
    1128:	5b 0b       	sbc	r21, r27
    112a:	57 ff       	sbrs	r21, 7
    112c:	04 c0       	rjmp	.+8      	; 0x1136 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
    1134:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1136:	b9 01       	movw	r22, r18
    1138:	ca 01       	movw	r24, r20
    113a:	08 95       	ret

0000113c <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1140:	c0 91 4b 01 	lds	r28, 0x014B
    1144:	d0 91 4c 01 	lds	r29, 0x014C
    1148:	68 2f       	mov	r22, r24
    114a:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    114c:	8d e0       	ldi	r24, 0x0D	; 13
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	68 9f       	mul	r22, r24
    1152:	f0 01       	movw	r30, r0
    1154:	69 9f       	mul	r22, r25
    1156:	f0 0d       	add	r31, r0
    1158:	78 9f       	mul	r23, r24
    115a:	f0 0d       	add	r31, r0
    115c:	11 24       	eor	r1, r1
    115e:	ec 0f       	add	r30, r28
    1160:	fd 1f       	adc	r31, r29
    1162:	df 01       	movw	r26, r30
    1164:	aa 58       	subi	r26, 0x8A	; 138
    1166:	bf 4f       	sbci	r27, 0xFF	; 255
    1168:	ee 58       	subi	r30, 0x8E	; 142
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	20 81       	ld	r18, Z
    116e:	31 81       	ldd	r19, Z+1	; 0x01
    1170:	42 81       	ldd	r20, Z+2	; 0x02
    1172:	53 81       	ldd	r21, Z+3	; 0x03
    1174:	8d 91       	ld	r24, X+
    1176:	9d 91       	ld	r25, X+
    1178:	0d 90       	ld	r0, X+
    117a:	bc 91       	ld	r27, X
    117c:	a0 2d       	mov	r26, r0
    117e:	28 1b       	sub	r18, r24
    1180:	39 0b       	sbc	r19, r25
    1182:	4a 0b       	sbc	r20, r26
    1184:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1186:	57 fd       	sbrc	r21, 7
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	41 05       	cpc	r20, r1
    1190:	51 05       	cpc	r21, r1
    1192:	11 f0       	breq	.+4      	; 0x1198 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	14 c0       	rjmp	.+40     	; 0x11c0 <Timebase_DownCounter_Period_Value_Expired+0x84>
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	8d e0       	ldi	r24, 0x0D	; 13
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	ac 01       	movw	r20, r24
    11a0:	64 9f       	mul	r22, r20
    11a2:	c0 01       	movw	r24, r0
    11a4:	65 9f       	mul	r22, r21
    11a6:	90 0d       	add	r25, r0
    11a8:	74 9f       	mul	r23, r20
    11aa:	90 0d       	add	r25, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	c8 0f       	add	r28, r24
    11b0:	d9 1f       	adc	r29, r25
    11b2:	c3 59       	subi	r28, 0x93	; 147
    11b4:	df 4f       	sbci	r29, 0xFF	; 255
    11b6:	88 81       	ld	r24, Y
    11b8:	80 ff       	sbrs	r24, 0
    11ba:	21 e0       	ldi	r18, 0x01	; 1
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    11c0:	82 2f       	mov	r24, r18
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    11c8:	1f 93       	push	r17
    11ca:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    11cc:	0e 94 9e 08 	call	0x113c	; 0x113c <Timebase_DownCounter_Period_Value_Expired>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	11 f0       	breq	.+4      	; 0x11d8 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	18 c0       	rjmp	.+48     	; 0x1208 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    11d8:	e0 91 4b 01 	lds	r30, 0x014B
    11dc:	f0 91 4c 01 	lds	r31, 0x014C
    11e0:	21 2f       	mov	r18, r17
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	8d e0       	ldi	r24, 0x0D	; 13
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	ac 01       	movw	r20, r24
    11ea:	24 9f       	mul	r18, r20
    11ec:	c0 01       	movw	r24, r0
    11ee:	25 9f       	mul	r18, r21
    11f0:	90 0d       	add	r25, r0
    11f2:	34 9f       	mul	r19, r20
    11f4:	90 0d       	add	r25, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	e8 0f       	add	r30, r24
    11fa:	f9 1f       	adc	r31, r25
    11fc:	e3 59       	subi	r30, 0x93	; 147
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	8e 7f       	andi	r24, 0xFE	; 254
    1204:	80 83       	st	Z, r24
    1206:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1208:	1f 91       	pop	r17
    120a:	08 95       	ret

0000120c <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    120c:	1f 93       	push	r17
    120e:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1210:	81 2f       	mov	r24, r17
    1212:	0e 94 85 07 	call	0xf0a	; 0xf0a <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    1216:	1f 5f       	subi	r17, 0xFF	; 255
    1218:	15 30       	cpi	r17, 0x05	; 5
    121a:	d1 f7       	brne	.-12     	; 0x1210 <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    121c:	1f 91       	pop	r17
    121e:	08 95       	ret

00001220 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1220:	40 91 4b 01 	lds	r20, 0x014B
    1224:	50 91 4c 01 	lds	r21, 0x014C
    1228:	da 01       	movw	r26, r20
    122a:	a2 59       	subi	r26, 0x92	; 146
    122c:	bf 4f       	sbci	r27, 0xFF	; 255
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1232:	6d e0       	ldi	r22, 0x0D	; 13
    1234:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1236:	1d 92       	st	X+, r1
    1238:	1d 92       	st	X+, r1
    123a:	1d 92       	st	X+, r1
    123c:	1c 92       	st	X, r1
    123e:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1240:	14 96       	adiw	r26, 0x04	; 4
    1242:	1d 92       	st	X+, r1
    1244:	1d 92       	st	X+, r1
    1246:	1d 92       	st	X+, r1
    1248:	1c 92       	st	X, r1
    124a:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    124c:	26 9f       	mul	r18, r22
    124e:	f0 01       	movw	r30, r0
    1250:	27 9f       	mul	r18, r23
    1252:	f0 0d       	add	r31, r0
    1254:	36 9f       	mul	r19, r22
    1256:	f0 0d       	add	r31, r0
    1258:	11 24       	eor	r1, r1
    125a:	e4 0f       	add	r30, r20
    125c:	f5 1f       	adc	r31, r21
    125e:	e3 59       	subi	r30, 0x93	; 147
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1264:	80 7e       	andi	r24, 0xE0	; 224
    1266:	80 83       	st	Z, r24
    1268:	2f 5f       	subi	r18, 0xFF	; 255
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    126e:	25 30       	cpi	r18, 0x05	; 5
    1270:	31 05       	cpc	r19, r1
    1272:	09 f7       	brne	.-62     	; 0x1236 <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    1274:	08 95       	ret

00001276 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1276:	e0 91 4b 01 	lds	r30, 0x014B
    127a:	f0 91 4c 01 	lds	r31, 0x014C
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	9c 01       	movw	r18, r24
    1282:	44 e0       	ldi	r20, 0x04	; 4
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	4a 95       	dec	r20
    128a:	e1 f7       	brne	.-8      	; 0x1284 <Timebase_DownCounter_SS_Get_Status+0xe>
    128c:	28 0f       	add	r18, r24
    128e:	39 1f       	adc	r19, r25
    1290:	e2 0f       	add	r30, r18
    1292:	f3 1f       	adc	r31, r19
    1294:	80 8d       	ldd	r24, Z+24	; 0x18
    1296:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1298:	8f 70       	andi	r24, 0x0F	; 15
    129a:	08 95       	ret

0000129c <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    129c:	e0 91 4b 01 	lds	r30, 0x014B
    12a0:	f0 91 4c 01 	lds	r31, 0x014C
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	9c 01       	movw	r18, r24
    12a8:	54 e0       	ldi	r21, 0x04	; 4
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	5a 95       	dec	r21
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <Timebase_DownCounter_SS_Set_Status+0xe>
    12b2:	28 0f       	add	r18, r24
    12b4:	39 1f       	adc	r19, r25
    12b6:	e2 0f       	add	r30, r18
    12b8:	f3 1f       	adc	r31, r19
    12ba:	6f 70       	andi	r22, 0x0F	; 15
    12bc:	66 0f       	add	r22, r22
    12be:	80 8d       	ldd	r24, Z+24	; 0x18
    12c0:	81 7e       	andi	r24, 0xE1	; 225
    12c2:	86 2b       	or	r24, r22
    12c4:	80 8f       	std	Z+24, r24	; 0x18
}
    12c6:	08 95       	ret

000012c8 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    12c8:	e0 91 4b 01 	lds	r30, 0x014B
    12cc:	f0 91 4c 01 	lds	r31, 0x014C
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9c 01       	movw	r18, r24
    12d4:	64 e0       	ldi	r22, 0x04	; 4
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	6a 95       	dec	r22
    12dc:	e1 f7       	brne	.-8      	; 0x12d6 <Timebase_DownCounter_SS_Get_Value+0xe>
    12de:	28 0f       	add	r18, r24
    12e0:	39 1f       	adc	r19, r25
    12e2:	e2 0f       	add	r30, r18
    12e4:	f3 1f       	adc	r31, r19
    12e6:	df 01       	movw	r26, r30
    12e8:	91 96       	adiw	r26, 0x21	; 33
    12ea:	61 a1       	ldd	r22, Z+33	; 0x21
    12ec:	11 96       	adiw	r26, 0x01	; 1
    12ee:	7c 91       	ld	r23, X
    12f0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
    12f2:	12 96       	adiw	r26, 0x02	; 2
    12f4:	8c 91       	ld	r24, X
    12f6:	12 97       	sbiw	r26, 0x02	; 2
    12f8:	13 96       	adiw	r26, 0x03	; 3
    12fa:	9c 91       	ld	r25, X
    12fc:	08 95       	ret

000012fe <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    12fe:	e0 91 4b 01 	lds	r30, 0x014B
    1302:	f0 91 4c 01 	lds	r31, 0x014C
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	9c 01       	movw	r18, r24
    130a:	a4 e0       	ldi	r26, 0x04	; 4
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	aa 95       	dec	r26
    1312:	e1 f7       	brne	.-8      	; 0x130c <Timebase_DownCounter_SS_Set_Value+0xe>
    1314:	28 0f       	add	r18, r24
    1316:	39 1f       	adc	r19, r25
    1318:	e2 0f       	add	r30, r18
    131a:	f3 1f       	adc	r31, r19
    131c:	41 a3       	std	Z+33, r20	; 0x21
    131e:	52 a3       	std	Z+34, r21	; 0x22
    1320:	63 a3       	std	Z+35, r22	; 0x23
    1322:	74 a3       	std	Z+36, r23	; 0x24
}
    1324:	08 95       	ret

00001326 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1326:	e0 91 4b 01 	lds	r30, 0x014B
    132a:	f0 91 4c 01 	lds	r31, 0x014C
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 01       	movw	r18, r24
    1332:	b4 e0       	ldi	r27, 0x04	; 4
    1334:	22 0f       	add	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	ba 95       	dec	r27
    133a:	e1 f7       	brne	.-8      	; 0x1334 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    133c:	28 0f       	add	r18, r24
    133e:	39 1f       	adc	r19, r25
    1340:	e2 0f       	add	r30, r18
    1342:	f3 1f       	adc	r31, r19
    1344:	df 01       	movw	r26, r30
    1346:	59 96       	adiw	r26, 0x19	; 25
    1348:	61 8d       	ldd	r22, Z+25	; 0x19
    134a:	11 96       	adiw	r26, 0x01	; 1
    134c:	7c 91       	ld	r23, X
    134e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1350:	12 96       	adiw	r26, 0x02	; 2
    1352:	8c 91       	ld	r24, X
    1354:	12 97       	sbiw	r26, 0x02	; 2
    1356:	13 96       	adiw	r26, 0x03	; 3
    1358:	9c 91       	ld	r25, X
    135a:	08 95       	ret

0000135c <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    135c:	e0 91 4b 01 	lds	r30, 0x014B
    1360:	f0 91 4c 01 	lds	r31, 0x014C
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9c 01       	movw	r18, r24
    1368:	44 e0       	ldi	r20, 0x04	; 4
    136a:	22 0f       	add	r18, r18
    136c:	33 1f       	adc	r19, r19
    136e:	4a 95       	dec	r20
    1370:	e1 f7       	brne	.-8      	; 0x136a <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1372:	28 0f       	add	r18, r24
    1374:	39 1f       	adc	r19, r25
    1376:	e2 0f       	add	r30, r18
    1378:	f3 1f       	adc	r31, r19
    137a:	df 01       	movw	r26, r30
    137c:	5d 96       	adiw	r26, 0x1d	; 29
    137e:	65 8d       	ldd	r22, Z+29	; 0x1d
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	7c 91       	ld	r23, X
    1384:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	8c 91       	ld	r24, X
    138a:	12 97       	sbiw	r26, 0x02	; 2
    138c:	13 96       	adiw	r26, 0x03	; 3
    138e:	9c 91       	ld	r25, X
    1390:	08 95       	ret

00001392 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1392:	e0 91 4b 01 	lds	r30, 0x014B
    1396:	f0 91 4c 01 	lds	r31, 0x014C
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	9c 01       	movw	r18, r24
    139e:	a4 e0       	ldi	r26, 0x04	; 4
    13a0:	22 0f       	add	r18, r18
    13a2:	33 1f       	adc	r19, r19
    13a4:	aa 95       	dec	r26
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    13a8:	28 0f       	add	r18, r24
    13aa:	39 1f       	adc	r19, r25
    13ac:	e2 0f       	add	r30, r18
    13ae:	f3 1f       	adc	r31, r19
    13b0:	41 8f       	std	Z+25, r20	; 0x19
    13b2:	52 8f       	std	Z+26, r21	; 0x1a
    13b4:	63 8f       	std	Z+27, r22	; 0x1b
    13b6:	74 8f       	std	Z+28, r23	; 0x1c
}
    13b8:	08 95       	ret

000013ba <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    13ba:	e0 91 4b 01 	lds	r30, 0x014B
    13be:	f0 91 4c 01 	lds	r31, 0x014C
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9c 01       	movw	r18, r24
    13c6:	b4 e0       	ldi	r27, 0x04	; 4
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	ba 95       	dec	r27
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    13d0:	28 0f       	add	r18, r24
    13d2:	39 1f       	adc	r19, r25
    13d4:	e2 0f       	add	r30, r18
    13d6:	f3 1f       	adc	r31, r19
    13d8:	45 8f       	std	Z+29, r20	; 0x1d
    13da:	56 8f       	std	Z+30, r21	; 0x1e
    13dc:	67 8f       	std	Z+31, r22	; 0x1f
    13de:	70 a3       	std	Z+32, r23	; 0x20
}
    13e0:	08 95       	ret

000013e2 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    13e2:	e0 91 4b 01 	lds	r30, 0x014B
    13e6:	f0 91 4c 01 	lds	r31, 0x014C
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 01       	movw	r18, r24
    13ee:	44 e0       	ldi	r20, 0x04	; 4
    13f0:	22 0f       	add	r18, r18
    13f2:	33 1f       	adc	r19, r19
    13f4:	4a 95       	dec	r20
    13f6:	e1 f7       	brne	.-8      	; 0x13f0 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    13f8:	28 0f       	add	r18, r24
    13fa:	39 1f       	adc	r19, r25
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	df 01       	movw	r26, r30
    1402:	95 96       	adiw	r26, 0x25	; 37
    1404:	65 a1       	ldd	r22, Z+37	; 0x25
    1406:	11 96       	adiw	r26, 0x01	; 1
    1408:	7c 91       	ld	r23, X
    140a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
    140c:	12 96       	adiw	r26, 0x02	; 2
    140e:	8c 91       	ld	r24, X
    1410:	12 97       	sbiw	r26, 0x02	; 2
    1412:	13 96       	adiw	r26, 0x03	; 3
    1414:	9c 91       	ld	r25, X
    1416:	08 95       	ret

00001418 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1418:	e0 91 4b 01 	lds	r30, 0x014B
    141c:	f0 91 4c 01 	lds	r31, 0x014C
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1424:	77 ff       	sbrs	r23, 7
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <Timebase_DownCounter_SS_Set_PeriodValue+0x2e>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1428:	c9 01       	movw	r24, r18
    142a:	b4 e0       	ldi	r27, 0x04	; 4
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	ba 95       	dec	r27
    1432:	e1 f7       	brne	.-8      	; 0x142c <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1434:	82 0f       	add	r24, r18
    1436:	93 1f       	adc	r25, r19
    1438:	e8 0f       	add	r30, r24
    143a:	f9 1f       	adc	r31, r25
    143c:	15 a2       	std	Z+37, r1	; 0x25
    143e:	16 a2       	std	Z+38, r1	; 0x26
    1440:	17 a2       	std	Z+39, r1	; 0x27
    1442:	10 a6       	std	Z+40, r1	; 0x28
    1444:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1446:	c9 01       	movw	r24, r18
    1448:	a4 e0       	ldi	r26, 0x04	; 4
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	aa 95       	dec	r26
    1450:	e1 f7       	brne	.-8      	; 0x144a <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	e8 0f       	add	r30, r24
    1458:	f9 1f       	adc	r31, r25
    145a:	45 a3       	std	Z+37, r20	; 0x25
    145c:	56 a3       	std	Z+38, r21	; 0x26
    145e:	67 a3       	std	Z+39, r22	; 0x27
    1460:	70 a7       	std	Z+40, r23	; 0x28
    1462:	08 95       	ret

00001464 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1464:	e0 91 4b 01 	lds	r30, 0x014B
    1468:	f0 91 4c 01 	lds	r31, 0x014C
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 01       	movw	r18, r24
    1470:	44 e0       	ldi	r20, 0x04	; 4
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	4a 95       	dec	r20
    1478:	e1 f7       	brne	.-8      	; 0x1472 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    147a:	28 0f       	add	r18, r24
    147c:	39 1f       	adc	r19, r25
    147e:	e2 0f       	add	r30, r18
    1480:	f3 1f       	adc	r31, r19
    1482:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1484:	81 70       	andi	r24, 0x01	; 1
    1486:	08 95       	ret

00001488 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1488:	e0 91 4b 01 	lds	r30, 0x014B
    148c:	f0 91 4c 01 	lds	r31, 0x014C
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 01       	movw	r18, r24
    1494:	54 e0       	ldi	r21, 0x04	; 4
    1496:	22 0f       	add	r18, r18
    1498:	33 1f       	adc	r19, r19
    149a:	5a 95       	dec	r21
    149c:	e1 f7       	brne	.-8      	; 0x1496 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    149e:	28 0f       	add	r18, r24
    14a0:	39 1f       	adc	r19, r25
    14a2:	e2 0f       	add	r30, r18
    14a4:	f3 1f       	adc	r31, r19
    14a6:	80 8d       	ldd	r24, Z+24	; 0x18
    14a8:	81 60       	ori	r24, 0x01	; 1
    14aa:	80 8f       	std	Z+24, r24	; 0x18
}
    14ac:	08 95       	ret

000014ae <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    14ae:	e0 91 4b 01 	lds	r30, 0x014B
    14b2:	f0 91 4c 01 	lds	r31, 0x014C
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9c 01       	movw	r18, r24
    14ba:	64 e0       	ldi	r22, 0x04	; 4
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	6a 95       	dec	r22
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    14c4:	28 0f       	add	r18, r24
    14c6:	39 1f       	adc	r19, r25
    14c8:	e2 0f       	add	r30, r18
    14ca:	f3 1f       	adc	r31, r19
    14cc:	80 8d       	ldd	r24, Z+24	; 0x18
    14ce:	8e 7f       	andi	r24, 0xFE	; 254
    14d0:	80 8f       	std	Z+24, r24	; 0x18
}
    14d2:	08 95       	ret

000014d4 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    14d4:	e0 91 4b 01 	lds	r30, 0x014B
    14d8:	f0 91 4c 01 	lds	r31, 0x014C
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9c 01       	movw	r18, r24
    14e0:	74 e0       	ldi	r23, 0x04	; 4
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	7a 95       	dec	r23
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <Timebase_DownCounter_SS_Reset+0xe>
    14ea:	28 0f       	add	r18, r24
    14ec:	39 1f       	adc	r19, r25
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	15 8e       	std	Z+29, r1	; 0x1d
    14f4:	16 8e       	std	Z+30, r1	; 0x1e
    14f6:	17 8e       	std	Z+31, r1	; 0x1f
    14f8:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    14fa:	11 8e       	std	Z+25, r1	; 0x19
    14fc:	12 8e       	std	Z+26, r1	; 0x1a
    14fe:	13 8e       	std	Z+27, r1	; 0x1b
    1500:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1502:	11 a2       	std	Z+33, r1	; 0x21
    1504:	12 a2       	std	Z+34, r1	; 0x22
    1506:	13 a2       	std	Z+35, r1	; 0x23
    1508:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    150a:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    150c:	80 7e       	andi	r24, 0xE0	; 224
    150e:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1510:	08 95       	ret

00001512 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1512:	e0 91 4b 01 	lds	r30, 0x014B
    1516:	f0 91 4c 01 	lds	r31, 0x014C
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	9c 01       	movw	r18, r24
    151e:	a4 e0       	ldi	r26, 0x04	; 4
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	aa 95       	dec	r26
    1526:	e1 f7       	brne	.-8      	; 0x1520 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1528:	28 0f       	add	r18, r24
    152a:	39 1f       	adc	r19, r25
    152c:	e2 0f       	add	r30, r18
    152e:	f3 1f       	adc	r31, r19
    1530:	15 8e       	std	Z+29, r1	; 0x1d
    1532:	16 8e       	std	Z+30, r1	; 0x1e
    1534:	17 8e       	std	Z+31, r1	; 0x1f
    1536:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1538:	11 8e       	std	Z+25, r1	; 0x19
    153a:	12 8e       	std	Z+26, r1	; 0x1a
    153c:	13 8e       	std	Z+27, r1	; 0x1b
    153e:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1540:	11 a2       	std	Z+33, r1	; 0x21
    1542:	12 a2       	std	Z+34, r1	; 0x22
    1544:	13 a2       	std	Z+35, r1	; 0x23
    1546:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1548:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    154a:	80 7e       	andi	r24, 0xE0	; 224
    154c:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    154e:	08 95       	ret

00001550 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1550:	e0 91 4b 01 	lds	r30, 0x014B
    1554:	f0 91 4c 01 	lds	r31, 0x014C
    1558:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    155a:	9c 01       	movw	r18, r24
    155c:	b4 e0       	ldi	r27, 0x04	; 4
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	ba 95       	dec	r27
    1564:	e1 f7       	brne	.-8      	; 0x155e <Timebase_DownCounter_SS_Start+0xe>
    1566:	28 0f       	add	r18, r24
    1568:	39 1f       	adc	r19, r25
    156a:	e2 0f       	add	r30, r18
    156c:	f3 1f       	adc	r31, r19
    156e:	90 8d       	ldd	r25, Z+24	; 0x18
    1570:	89 2f       	mov	r24, r25
    1572:	86 95       	lsr	r24
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	19 f0       	breq	.+6      	; 0x1580 <Timebase_DownCounter_SS_Start+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    157a:	91 7e       	andi	r25, 0xE1	; 225
    157c:	92 60       	ori	r25, 0x02	; 2
    157e:	90 8f       	std	Z+24, r25	; 0x18
    1580:	08 95       	ret

00001582 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1582:	e0 91 4b 01 	lds	r30, 0x014B
    1586:	f0 91 4c 01 	lds	r31, 0x014C
    158a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    158c:	9c 01       	movw	r18, r24
    158e:	44 e0       	ldi	r20, 0x04	; 4
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	4a 95       	dec	r20
    1596:	e1 f7       	brne	.-8      	; 0x1590 <Timebase_DownCounter_SS_Stop+0xe>
    1598:	28 0f       	add	r18, r24
    159a:	39 1f       	adc	r19, r25
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	90 8d       	ldd	r25, Z+24	; 0x18
    15a2:	89 2f       	mov	r24, r25
    15a4:	86 95       	lsr	r24
    15a6:	8f 70       	andi	r24, 0x0F	; 15
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <Timebase_DownCounter_SS_Stop+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    15ac:	91 7e       	andi	r25, 0xE1	; 225
    15ae:	94 60       	ori	r25, 0x04	; 4
    15b0:	90 8f       	std	Z+24, r25	; 0x18
    15b2:	08 95       	ret

000015b4 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    15b4:	2f 92       	push	r2
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	00 d0       	rcall	.+0      	; 0x15da <Timebase_DownCounter_SS_Set_Securely+0x26>
    15da:	00 d0       	rcall	.+0      	; 0x15dc <Timebase_DownCounter_SS_Set_Securely+0x28>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	4a 01       	movw	r8, r20
    15e2:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    15e4:	20 91 4b 01 	lds	r18, 0x014B
    15e8:	30 91 4c 01 	lds	r19, 0x014C
    15ec:	3c 83       	std	Y+4, r19	; 0x04
    15ee:	2b 83       	std	Y+3, r18	; 0x03
    15f0:	a8 2f       	mov	r26, r24
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ba 83       	std	Y+2, r27	; 0x02
    15f6:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    15f8:	fd 01       	movw	r30, r26
    15fa:	64 e0       	ldi	r22, 0x04	; 4
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	6a 95       	dec	r22
    1602:	e1 f7       	brne	.-8      	; 0x15fc <Timebase_DownCounter_SS_Set_Securely+0x48>
    1604:	ea 0f       	add	r30, r26
    1606:	fb 1f       	adc	r31, r27
    1608:	e2 0f       	add	r30, r18
    160a:	f3 1f       	adc	r31, r19
    160c:	80 8d       	ldd	r24, Z+24	; 0x18
    160e:	86 95       	lsr	r24
    1610:	8f 70       	andi	r24, 0x0F	; 15
    1612:	09 f0       	breq	.+2      	; 0x1616 <Timebase_DownCounter_SS_Set_Securely+0x62>
    1614:	78 c0       	rjmp	.+240    	; 0x1706 <Timebase_DownCounter_SS_Set_Securely+0x152>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1616:	81 a2       	std	Z+33, r8	; 0x21
    1618:	92 a2       	std	Z+34, r9	; 0x22
    161a:	a3 a2       	std	Z+35, r10	; 0x23
    161c:	b4 a2       	std	Z+36, r11	; 0x24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    161e:	f9 01       	movw	r30, r18
    1620:	c0 84       	ldd	r12, Z+8	; 0x08
    1622:	d1 84       	ldd	r13, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1624:	22 84       	ldd	r2, Z+10	; 0x0a
    1626:	33 84       	ldd	r3, Z+11	; 0x0b
    1628:	44 84       	ldd	r4, Z+12	; 0x0c
    162a:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    162c:	21 81       	ldd	r18, Z+1	; 0x01
    162e:	32 81       	ldd	r19, Z+2	; 0x02
    1630:	40 e0       	ldi	r20, 0x00	; 0
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	c5 01       	movw	r24, r10
    1636:	b4 01       	movw	r22, r8
    1638:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
    163c:	7b 01       	movw	r14, r22
    163e:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1640:	ab 81       	ldd	r26, Y+3	; 0x03
    1642:	bc 81       	ldd	r27, Y+4	; 0x04
    1644:	11 96       	adiw	r26, 0x01	; 1
    1646:	2d 91       	ld	r18, X+
    1648:	3c 91       	ld	r19, X
    164a:	12 97       	sbiw	r26, 0x02	; 2
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	c5 01       	movw	r24, r10
    1652:	b4 01       	movw	r22, r8
    1654:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
    1658:	c9 01       	movw	r24, r18
    165a:	da 01       	movw	r26, r20
    165c:	3c 01       	movw	r6, r24
    165e:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1660:	56 01       	movw	r10, r12
    1662:	cc 24       	eor	r12, r12
    1664:	dd 24       	eor	r13, r13
    1666:	ae 0c       	add	r10, r14
    1668:	bf 1c       	adc	r11, r15
    166a:	c0 1e       	adc	r12, r16
    166c:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    166e:	eb 81       	ldd	r30, Y+3	; 0x03
    1670:	fc 81       	ldd	r31, Y+4	; 0x04
    1672:	81 81       	ldd	r24, Z+1	; 0x01
    1674:	92 81       	ldd	r25, Z+2	; 0x02
    1676:	a0 e0       	ldi	r26, 0x00	; 0
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	a8 16       	cp	r10, r24
    167c:	b9 06       	cpc	r11, r25
    167e:	ca 06       	cpc	r12, r26
    1680:	db 06       	cpc	r13, r27
    1682:	94 f0       	brlt	.+36     	; 0x16a8 <Timebase_DownCounter_SS_Set_Securely+0xf4>
	  sec_val += 1;
    1684:	08 94       	sec
    1686:	61 1c       	adc	r6, r1
    1688:	71 1c       	adc	r7, r1
    168a:	81 1c       	adc	r8, r1
    168c:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    168e:	21 81       	ldd	r18, Z+1	; 0x01
    1690:	32 81       	ldd	r19, Z+2	; 0x02
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	c6 01       	movw	r24, r12
    1698:	b5 01       	movw	r22, r10
    169a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
    169e:	ac 01       	movw	r20, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	da 01       	movw	r26, r20
    16a4:	5c 01       	movw	r10, r24
    16a6:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    16a8:	e9 81       	ldd	r30, Y+1	; 0x01
    16aa:	fa 81       	ldd	r31, Y+2	; 0x02
    16ac:	54 e0       	ldi	r21, 0x04	; 4
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	5a 95       	dec	r21
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <Timebase_DownCounter_SS_Set_Securely+0xfa>
    16b6:	29 81       	ldd	r18, Y+1	; 0x01
    16b8:	3a 81       	ldd	r19, Y+2	; 0x02
    16ba:	e2 0f       	add	r30, r18
    16bc:	f3 1f       	adc	r31, r19
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	e8 0f       	add	r30, r24
    16c4:	f9 1f       	adc	r31, r25
    16c6:	26 0c       	add	r2, r6
    16c8:	37 1c       	adc	r3, r7
    16ca:	48 1c       	adc	r4, r8
    16cc:	59 1c       	adc	r5, r9
    16ce:	21 8e       	std	Z+25, r2	; 0x19
    16d0:	32 8e       	std	Z+26, r3	; 0x1a
    16d2:	43 8e       	std	Z+27, r4	; 0x1b
    16d4:	54 8e       	std	Z+28, r5	; 0x1c


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    16d6:	dc 01       	movw	r26, r24
    16d8:	18 96       	adiw	r26, 0x08	; 8
    16da:	8d 91       	ld	r24, X+
    16dc:	9c 91       	ld	r25, X
    16de:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	8a 0d       	add	r24, r10
    16e6:	9b 1d       	adc	r25, r11
    16e8:	ac 1d       	adc	r26, r12
    16ea:	bd 1d       	adc	r27, r13
    16ec:	85 8f       	std	Z+29, r24	; 0x1d
    16ee:	96 8f       	std	Z+30, r25	; 0x1e
    16f0:	a7 8f       	std	Z+31, r26	; 0x1f
    16f2:	b0 a3       	std	Z+32, r27	; 0x20
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    16f4:	90 8d       	ldd	r25, Z+24	; 0x18
    16f6:	89 2f       	mov	r24, r25
    16f8:	86 95       	lsr	r24
    16fa:	8f 70       	andi	r24, 0x0F	; 15
    16fc:	81 30       	cpi	r24, 0x01	; 1
    16fe:	19 f0       	breq	.+6      	; 0x1706 <Timebase_DownCounter_SS_Set_Securely+0x152>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1700:	91 7e       	andi	r25, 0xE1	; 225
    1702:	92 60       	ori	r25, 0x02	; 2
    1704:	90 8f       	std	Z+24, r25	; 0x18
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, Timebase_Timer_Get_SubSeconds() + subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	9f 90       	pop	r9
    1724:	8f 90       	pop	r8
    1726:	7f 90       	pop	r7
    1728:	6f 90       	pop	r6
    172a:	5f 90       	pop	r5
    172c:	4f 90       	pop	r4
    172e:	3f 90       	pop	r3
    1730:	2f 90       	pop	r2
    1732:	08 95       	ret

00001734 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1734:	e0 91 4b 01 	lds	r30, 0x014B
    1738:	f0 91 4c 01 	lds	r31, 0x014C
    173c:	a8 2f       	mov	r26, r24
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	9d 01       	movw	r18, r26
    1742:	94 e0       	ldi	r25, 0x04	; 4
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	9a 95       	dec	r25
    174a:	e1 f7       	brne	.-8      	; 0x1744 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    174c:	2a 0f       	add	r18, r26
    174e:	3b 1f       	adc	r19, r27
    1750:	e2 0f       	add	r30, r18
    1752:	f3 1f       	adc	r31, r19
    1754:	15 8e       	std	Z+29, r1	; 0x1d
    1756:	16 8e       	std	Z+30, r1	; 0x1e
    1758:	17 8e       	std	Z+31, r1	; 0x1f
    175a:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    175c:	11 8e       	std	Z+25, r1	; 0x19
    175e:	12 8e       	std	Z+26, r1	; 0x1a
    1760:	13 8e       	std	Z+27, r1	; 0x1b
    1762:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1764:	11 a2       	std	Z+33, r1	; 0x21
    1766:	12 a2       	std	Z+34, r1	; 0x22
    1768:	13 a2       	std	Z+35, r1	; 0x23
    176a:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    176c:	90 8d       	ldd	r25, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    176e:	90 7e       	andi	r25, 0xE0	; 224
    1770:	90 8f       	std	Z+24, r25	; 0x18
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1772:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Timebase_DownCounter_SS_Set_Securely>
} 
    1776:	08 95       	ret

00001778 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1778:	2f 92       	push	r2
    177a:	3f 92       	push	r3
    177c:	4f 92       	push	r4
    177e:	5f 92       	push	r5
    1780:	6f 92       	push	r6
    1782:	7f 92       	push	r7
    1784:	8f 92       	push	r8
    1786:	9f 92       	push	r9
    1788:	af 92       	push	r10
    178a:	bf 92       	push	r11
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	0f 93       	push	r16
    1796:	1f 93       	push	r17
    1798:	cf 93       	push	r28
    179a:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    179c:	80 90 4b 01 	lds	r8, 0x014B
    17a0:	90 90 4c 01 	lds	r9, 0x014C
    17a4:	68 2e       	mov	r6, r24
    17a6:	77 24       	eor	r7, r7
    17a8:	e3 01       	movw	r28, r6
    17aa:	34 e0       	ldi	r19, 0x04	; 4
    17ac:	cc 0f       	add	r28, r28
    17ae:	dd 1f       	adc	r29, r29
    17b0:	3a 95       	dec	r19
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <Timebase_DownCounter_SS_Update+0x34>
    17b4:	c6 0d       	add	r28, r6
    17b6:	d7 1d       	adc	r29, r7
    17b8:	c8 0d       	add	r28, r8
    17ba:	d9 1d       	adc	r29, r9
    17bc:	88 8d       	ldd	r24, Y+24	; 0x18
    17be:	86 95       	lsr	r24
    17c0:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <Timebase_DownCounter_SS_Update+0x50>
    17c6:	5b c0       	rjmp	.+182    	; 0x187e <Timebase_DownCounter_SS_Update+0x106>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    17c8:	f4 01       	movw	r30, r8
    17ca:	80 85       	ldd	r24, Z+8	; 0x08
    17cc:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    17ce:	5c 01       	movw	r10, r24
    17d0:	cc 24       	eor	r12, r12
    17d2:	dd 24       	eor	r13, r13
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    17d4:	e2 84       	ldd	r14, Z+10	; 0x0a
    17d6:	f3 84       	ldd	r15, Z+11	; 0x0b
    17d8:	04 85       	ldd	r16, Z+12	; 0x0c
    17da:	15 85       	ldd	r17, Z+13	; 0x0d

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss -= Timebase_DownCounter_SS_Get_EndValueSubSec(window);
    17dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17e0:	af 8d       	ldd	r26, Y+31	; 0x1f
    17e2:	b8 a1       	ldd	r27, Y+32	; 0x20
    17e4:	a8 1a       	sub	r10, r24
    17e6:	b9 0a       	sbc	r11, r25
    17e8:	ca 0a       	sbc	r12, r26
    17ea:	db 0a       	sbc	r13, r27
	if(temp_ss < 0){
	  temp_ss = 0;
	}
	temp_s -= Timebase_DownCounter_SS_Get_EndValueSec(window);
    17ec:	89 8d       	ldd	r24, Y+25	; 0x19
    17ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    17f0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    17f2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    17f4:	e8 1a       	sub	r14, r24
    17f6:	f9 0a       	sbc	r15, r25
    17f8:	0a 0b       	sbc	r16, r26
    17fa:	1b 0b       	sbc	r17, r27
    17fc:	17 ff       	sbrs	r17, 7
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <Timebase_DownCounter_SS_Update+0x8e>
    1800:	ee 24       	eor	r14, r14
    1802:	ff 24       	eor	r15, r15
    1804:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    1806:	f4 01       	movw	r30, r8
    1808:	21 81       	ldd	r18, Z+1	; 0x01
    180a:	32 81       	ldd	r19, Z+2	; 0x02
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	c8 01       	movw	r24, r16
    1812:	b7 01       	movw	r22, r14
    1814:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <__mulsi3>
    1818:	fc 01       	movw	r30, r24
	temp_s += temp_ss;
    181a:	a6 01       	movw	r20, r12
    181c:	95 01       	movw	r18, r10
    181e:	d7 fe       	sbrs	r13, 7
    1820:	04 c0       	rjmp	.+8      	; 0x182a <Timebase_DownCounter_SS_Update+0xb2>
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	40 e0       	ldi	r20, 0x00	; 0
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	cb 01       	movw	r24, r22
    182c:	df 01       	movw	r26, r30
    182e:	82 0f       	add	r24, r18
    1830:	93 1f       	adc	r25, r19
    1832:	a4 1f       	adc	r26, r20
    1834:	b5 1f       	adc	r27, r21
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1836:	f3 01       	movw	r30, r6
    1838:	24 e0       	ldi	r18, 0x04	; 4
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	2a 95       	dec	r18
    1840:	e1 f7       	brne	.-8      	; 0x183a <Timebase_DownCounter_SS_Update+0xc2>
    1842:	e6 0d       	add	r30, r6
    1844:	f7 1d       	adc	r31, r7
    1846:	e8 0d       	add	r30, r8
    1848:	f9 1d       	adc	r31, r9
    184a:	81 a3       	std	Z+33, r24	; 0x21
    184c:	92 a3       	std	Z+34, r25	; 0x22
    184e:	a3 a3       	std	Z+35, r26	; 0x23
    1850:	b4 a3       	std	Z+36, r27	; 0x24
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	a1 05       	cpc	r26, r1
    1856:	b1 05       	cpc	r27, r1
    1858:	09 f0       	breq	.+2      	; 0x185c <Timebase_DownCounter_SS_Update+0xe4>
    185a:	42 c0       	rjmp	.+132    	; 0x18e0 <Timebase_DownCounter_SS_Update+0x168>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    185c:	15 8e       	std	Z+29, r1	; 0x1d
    185e:	16 8e       	std	Z+30, r1	; 0x1e
    1860:	17 8e       	std	Z+31, r1	; 0x1f
    1862:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1864:	11 8e       	std	Z+25, r1	; 0x19
    1866:	12 8e       	std	Z+26, r1	; 0x1a
    1868:	13 8e       	std	Z+27, r1	; 0x1b
    186a:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    186c:	11 a2       	std	Z+33, r1	; 0x21
    186e:	12 a2       	std	Z+34, r1	; 0x22
    1870:	13 a2       	std	Z+35, r1	; 0x23
    1872:	14 a2       	std	Z+36, r1	; 0x24
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1874:	80 8d       	ldd	r24, Z+24	; 0x18
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1876:	80 7e       	andi	r24, 0xE0	; 224
    1878:	88 60       	ori	r24, 0x08	; 8
    187a:	80 8f       	std	Z+24, r24	; 0x18
    187c:	31 c0       	rjmp	.+98     	; 0x18e0 <Timebase_DownCounter_SS_Update+0x168>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    187e:	82 30       	cpi	r24, 0x02	; 2
    1880:	79 f5       	brne	.+94     	; 0x18e0 <Timebase_DownCounter_SS_Update+0x168>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1882:	f4 01       	movw	r30, r8
    1884:	60 84       	ldd	r6, Z+8	; 0x08
    1886:	71 84       	ldd	r7, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1888:	e2 84       	ldd	r14, Z+10	; 0x0a
    188a:	f3 84       	ldd	r15, Z+11	; 0x0b
    188c:	04 85       	ldd	r16, Z+12	; 0x0c
    188e:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1890:	29 a0       	ldd	r2, Y+33	; 0x21
    1892:	3a a0       	ldd	r3, Y+34	; 0x22
    1894:	4b a0       	ldd	r4, Y+35	; 0x23
    1896:	5c a0       	ldd	r5, Y+36	; 0x24
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    1898:	21 81       	ldd	r18, Z+1	; 0x01
    189a:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    189c:	a1 80       	ldd	r10, Z+1	; 0x01
    189e:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	c2 01       	movw	r24, r4
    18a6:	b1 01       	movw	r22, r2
    18a8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
    18ac:	e2 0e       	add	r14, r18
    18ae:	f3 1e       	adc	r15, r19
    18b0:	04 1f       	adc	r16, r20
    18b2:	15 1f       	adc	r17, r21
    18b4:	e9 8e       	std	Y+25, r14	; 0x19
    18b6:	fa 8e       	std	Y+26, r15	; 0x1a
    18b8:	0b 8f       	std	Y+27, r16	; 0x1b
    18ba:	1c 8f       	std	Y+28, r17	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    18bc:	cc 24       	eor	r12, r12
    18be:	dd 24       	eor	r13, r13
    18c0:	c2 01       	movw	r24, r4
    18c2:	b1 01       	movw	r22, r2
    18c4:	a6 01       	movw	r20, r12
    18c6:	95 01       	movw	r18, r10
    18c8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__divmodsi4>
    18cc:	88 24       	eor	r8, r8
    18ce:	99 24       	eor	r9, r9
    18d0:	66 0e       	add	r6, r22
    18d2:	77 1e       	adc	r7, r23
    18d4:	88 1e       	adc	r8, r24
    18d6:	99 1e       	adc	r9, r25
    18d8:	6d 8e       	std	Y+29, r6	; 0x1d
    18da:	7e 8e       	std	Y+30, r7	; 0x1e
    18dc:	8f 8e       	std	Y+31, r8	; 0x1f
    18de:	98 a2       	std	Y+32, r9	; 0x20
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	df 90       	pop	r13
    18ee:	cf 90       	pop	r12
    18f0:	bf 90       	pop	r11
    18f2:	af 90       	pop	r10
    18f4:	9f 90       	pop	r9
    18f6:	8f 90       	pop	r8
    18f8:	7f 90       	pop	r7
    18fa:	6f 90       	pop	r6
    18fc:	5f 90       	pop	r5
    18fe:	4f 90       	pop	r4
    1900:	3f 90       	pop	r3
    1902:	2f 90       	pop	r2
    1904:	08 95       	ret

00001906 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    1906:	40 e0       	ldi	r20, 0x00	; 0
    1908:	e0 91 4b 01 	lds	r30, 0x014B
    190c:	f0 91 4c 01 	lds	r31, 0x014C
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9c 01       	movw	r18, r24
    1914:	54 e0       	ldi	r21, 0x04	; 4
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	5a 95       	dec	r21
    191c:	e1 f7       	brne	.-8      	; 0x1916 <Timebase_DownCounter_SS_Expired+0x10>
    191e:	28 0f       	add	r18, r24
    1920:	39 1f       	adc	r19, r25
    1922:	e2 0f       	add	r30, r18
    1924:	f3 1f       	adc	r31, r19
    1926:	80 8d       	ldd	r24, Z+24	; 0x18
    1928:	86 95       	lsr	r24
    192a:	8f 70       	andi	r24, 0x0F	; 15
    192c:	84 30       	cpi	r24, 0x04	; 4
    192e:	09 f4       	brne	.+2      	; 0x1932 <Timebase_DownCounter_SS_Expired+0x2c>
    1930:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1932:	84 2f       	mov	r24, r20
    1934:	08 95       	ret

00001936 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1936:	e0 91 4b 01 	lds	r30, 0x014B
    193a:	f0 91 4c 01 	lds	r31, 0x014C
    193e:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1940:	9c 01       	movw	r18, r24
    1942:	64 e0       	ldi	r22, 0x04	; 4
    1944:	22 0f       	add	r18, r18
    1946:	33 1f       	adc	r19, r19
    1948:	6a 95       	dec	r22
    194a:	e1 f7       	brne	.-8      	; 0x1944 <Timebase_DownCounter_SS_Expired_Event+0xe>
    194c:	28 0f       	add	r18, r24
    194e:	39 1f       	adc	r19, r25
    1950:	e2 0f       	add	r30, r18
    1952:	f3 1f       	adc	r31, r19
    1954:	80 8d       	ldd	r24, Z+24	; 0x18
    1956:	86 95       	lsr	r24
    1958:	8f 70       	andi	r24, 0x0F	; 15
    195a:	84 30       	cpi	r24, 0x04	; 4
    195c:	11 f0       	breq	.+4      	; 0x1962 <Timebase_DownCounter_SS_Expired_Event+0x2c>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1962:	15 8e       	std	Z+29, r1	; 0x1d
    1964:	16 8e       	std	Z+30, r1	; 0x1e
    1966:	17 8e       	std	Z+31, r1	; 0x1f
    1968:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    196a:	11 8e       	std	Z+25, r1	; 0x19
    196c:	12 8e       	std	Z+26, r1	; 0x1a
    196e:	13 8e       	std	Z+27, r1	; 0x1b
    1970:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1972:	11 a2       	std	Z+33, r1	; 0x21
    1974:	12 a2       	std	Z+34, r1	; 0x22
    1976:	13 a2       	std	Z+35, r1	; 0x23
    1978:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    197a:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    197c:	80 7e       	andi	r24, 0xE0	; 224
    197e:	80 8f       	std	Z+24, r24	; 0x18
    1980:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1982:	08 95       	ret

00001984 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1988:	c0 91 4b 01 	lds	r28, 0x014B
    198c:	d0 91 4c 01 	lds	r29, 0x014C
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    1994:	f9 01       	movw	r30, r18
    1996:	a4 e0       	ldi	r26, 0x04	; 4
    1998:	ee 0f       	add	r30, r30
    199a:	ff 1f       	adc	r31, r31
    199c:	aa 95       	dec	r26
    199e:	e1 f7       	brne	.-8      	; 0x1998 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    19a0:	e2 0f       	add	r30, r18
    19a2:	f3 1f       	adc	r31, r19
    19a4:	ec 0f       	add	r30, r28
    19a6:	fd 1f       	adc	r31, r29
    19a8:	80 8d       	ldd	r24, Z+24	; 0x18
    19aa:	80 fd       	sbrc	r24, 0
    19ac:	20 c0       	rjmp	.+64     	; 0x19ee <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    19ae:	81 a1       	ldd	r24, Z+33	; 0x21
    19b0:	92 a1       	ldd	r25, Z+34	; 0x22
    19b2:	a3 a1       	ldd	r26, Z+35	; 0x23
    19b4:	b4 a1       	ldd	r27, Z+36	; 0x24
    19b6:	84 1b       	sub	r24, r20
    19b8:	95 0b       	sbc	r25, r21
    19ba:	a6 0b       	sbc	r26, r22
    19bc:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    19be:	b7 ff       	sbrs	r27, 7
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x48>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    19c2:	15 a2       	std	Z+37, r1	; 0x25
    19c4:	16 a2       	std	Z+38, r1	; 0x26
    19c6:	17 a2       	std	Z+39, r1	; 0x27
    19c8:	10 a6       	std	Z+40, r1	; 0x28
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    19cc:	85 a3       	std	Z+37, r24	; 0x25
    19ce:	96 a3       	std	Z+38, r25	; 0x26
    19d0:	a7 a3       	std	Z+39, r26	; 0x27
    19d2:	b0 a7       	std	Z+40, r27	; 0x28
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    19d4:	f9 01       	movw	r30, r18
    19d6:	74 e0       	ldi	r23, 0x04	; 4
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	7a 95       	dec	r23
    19de:	e1 f7       	brne	.-8      	; 0x19d8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    19e0:	e2 0f       	add	r30, r18
    19e2:	f3 1f       	adc	r31, r19
    19e4:	ec 0f       	add	r30, r28
    19e6:	fd 1f       	adc	r31, r29
    19e8:	80 8d       	ldd	r24, Z+24	; 0x18
    19ea:	81 60       	ori	r24, 0x01	; 1
    19ec:	80 8f       	std	Z+24, r24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    19f4:	e0 91 4b 01 	lds	r30, 0x014B
    19f8:	f0 91 4c 01 	lds	r31, 0x014C
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    19fe:	9c 01       	movw	r18, r24
    1a00:	b4 e0       	ldi	r27, 0x04	; 4
    1a02:	22 0f       	add	r18, r18
    1a04:	33 1f       	adc	r19, r19
    1a06:	ba 95       	dec	r27
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    1a0a:	28 0f       	add	r18, r24
    1a0c:	39 1f       	adc	r19, r25
    1a0e:	e2 0f       	add	r30, r18
    1a10:	f3 1f       	adc	r31, r19
    1a12:	21 a1       	ldd	r18, Z+33	; 0x21
    1a14:	32 a1       	ldd	r19, Z+34	; 0x22
    1a16:	43 a1       	ldd	r20, Z+35	; 0x23
    1a18:	54 a1       	ldd	r21, Z+36	; 0x24
    1a1a:	85 a1       	ldd	r24, Z+37	; 0x25
    1a1c:	96 a1       	ldd	r25, Z+38	; 0x26
    1a1e:	a7 a1       	ldd	r26, Z+39	; 0x27
    1a20:	b0 a5       	ldd	r27, Z+40	; 0x28
    1a22:	28 1b       	sub	r18, r24
    1a24:	39 0b       	sbc	r19, r25
    1a26:	4a 0b       	sbc	r20, r26
    1a28:	5b 0b       	sbc	r21, r27
    1a2a:	57 ff       	sbrs	r21, 7
    1a2c:	04 c0       	rjmp	.+8      	; 0x1a36 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x42>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1a36:	b9 01       	movw	r22, r18
    1a38:	ca 01       	movw	r24, r20
    1a3a:	08 95       	ret

00001a3c <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1a40:	c0 91 4b 01 	lds	r28, 0x014B
    1a44:	d0 91 4c 01 	lds	r29, 0x014C
    1a48:	68 2f       	mov	r22, r24
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	44 e0       	ldi	r20, 0x04	; 4
    1a50:	ee 0f       	add	r30, r30
    1a52:	ff 1f       	adc	r31, r31
    1a54:	4a 95       	dec	r20
    1a56:	e1 f7       	brne	.-8      	; 0x1a50 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    1a58:	e6 0f       	add	r30, r22
    1a5a:	f7 1f       	adc	r31, r23
    1a5c:	ec 0f       	add	r30, r28
    1a5e:	fd 1f       	adc	r31, r29
    1a60:	21 a1       	ldd	r18, Z+33	; 0x21
    1a62:	32 a1       	ldd	r19, Z+34	; 0x22
    1a64:	43 a1       	ldd	r20, Z+35	; 0x23
    1a66:	54 a1       	ldd	r21, Z+36	; 0x24
    1a68:	85 a1       	ldd	r24, Z+37	; 0x25
    1a6a:	96 a1       	ldd	r25, Z+38	; 0x26
    1a6c:	a7 a1       	ldd	r26, Z+39	; 0x27
    1a6e:	b0 a5       	ldd	r27, Z+40	; 0x28
    1a70:	28 1b       	sub	r18, r24
    1a72:	39 0b       	sbc	r19, r25
    1a74:	4a 0b       	sbc	r20, r26
    1a76:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1a78:	57 fd       	sbrc	r21, 7
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1a7c:	21 15       	cp	r18, r1
    1a7e:	31 05       	cpc	r19, r1
    1a80:	41 05       	cpc	r20, r1
    1a82:	51 05       	cpc	r21, r1
    1a84:	11 f0       	breq	.+4      	; 0x1a8a <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	10 c0       	rjmp	.+32     	; 0x1aaa <Timebase_DownCounter_SS_Period_Value_Expired+0x6e>
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	34 e0       	ldi	r19, 0x04	; 4
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	3a 95       	dec	r19
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <Timebase_DownCounter_SS_Period_Value_Expired+0x54>
    1a98:	86 0f       	add	r24, r22
    1a9a:	97 1f       	adc	r25, r23
    1a9c:	c8 0f       	add	r28, r24
    1a9e:	d9 1f       	adc	r29, r25
    1aa0:	88 8d       	ldd	r24, Y+24	; 0x18
    1aa2:	80 ff       	sbrs	r24, 0
    1aa4:	21 e0       	ldi	r18, 0x01	; 1
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1aaa:	82 2f       	mov	r24, r18
    1aac:	df 91       	pop	r29
    1aae:	cf 91       	pop	r28
    1ab0:	08 95       	ret

00001ab2 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1ab2:	1f 93       	push	r17
    1ab4:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    1ab6:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Timebase_DownCounter_SS_Period_Value_Expired>
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x38>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1ac2:	e0 91 4b 01 	lds	r30, 0x014B
    1ac6:	f0 91 4c 01 	lds	r31, 0x014C
    1aca:	21 2f       	mov	r18, r17
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	c9 01       	movw	r24, r18
    1ad0:	54 e0       	ldi	r21, 0x04	; 4
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	5a 95       	dec	r21
    1ad8:	e1 f7       	brne	.-8      	; 0x1ad2 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    1ada:	82 0f       	add	r24, r18
    1adc:	93 1f       	adc	r25, r19
    1ade:	e8 0f       	add	r30, r24
    1ae0:	f9 1f       	adc	r31, r25
    1ae2:	80 8d       	ldd	r24, Z+24	; 0x18
    1ae4:	8e 7f       	andi	r24, 0xFE	; 254
    1ae6:	80 8f       	std	Z+24, r24	; 0x18
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1aea:	1f 91       	pop	r17
    1aec:	08 95       	ret

00001aee <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    1aee:	1f 93       	push	r17
    1af0:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1af2:	81 2f       	mov	r24, r17
    1af4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1af8:	1f 5f       	subi	r17, 0xFF	; 255
    1afa:	15 30       	cpi	r17, 0x05	; 5
    1afc:	d1 f7       	brne	.-12     	; 0x1af2 <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    1afe:	1f 91       	pop	r17
    1b00:	08 95       	ret

00001b02 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1b02:	40 91 4b 01 	lds	r20, 0x014B
    1b06:	50 91 4c 01 	lds	r21, 0x014C
    1b0a:	da 01       	movw	r26, r20
    1b0c:	59 96       	adiw	r26, 0x19	; 25
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	14 96       	adiw	r26, 0x04	; 4
    1b14:	1d 92       	st	X+, r1
    1b16:	1d 92       	st	X+, r1
    1b18:	1d 92       	st	X+, r1
    1b1a:	1c 92       	st	X, r1
    1b1c:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1b1e:	1d 92       	st	X+, r1
    1b20:	1d 92       	st	X+, r1
    1b22:	1d 92       	st	X+, r1
    1b24:	1c 92       	st	X, r1
    1b26:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1b28:	18 96       	adiw	r26, 0x08	; 8
    1b2a:	1d 92       	st	X+, r1
    1b2c:	1d 92       	st	X+, r1
    1b2e:	1d 92       	st	X+, r1
    1b30:	1c 92       	st	X, r1
    1b32:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1b34:	f9 01       	movw	r30, r18
    1b36:	64 e0       	ldi	r22, 0x04	; 4
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	6a 95       	dec	r22
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <Timebase_DownCounter_SS_Reset_All+0x36>
    1b40:	e2 0f       	add	r30, r18
    1b42:	f3 1f       	adc	r31, r19
    1b44:	e4 0f       	add	r30, r20
    1b46:	f5 1f       	adc	r31, r21
    1b48:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1b4a:	80 7e       	andi	r24, 0xE0	; 224
    1b4c:	80 8f       	std	Z+24, r24	; 0x18
    1b4e:	2f 5f       	subi	r18, 0xFF	; 255
    1b50:	3f 4f       	sbci	r19, 0xFF	; 255
    1b52:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1b54:	25 30       	cpi	r18, 0x05	; 5
    1b56:	31 05       	cpc	r19, r1
    1b58:	e1 f6       	brne	.-72     	; 0x1b12 <Timebase_DownCounter_SS_Reset_All+0x10>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1b5a:	08 95       	ret

00001b5c <Timebase_Reset>:
void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1b5c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1b60:	0e 94 10 09 	call	0x1220	; 0x1220 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    1b64:	08 95       	ret

00001b66 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1b6c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1b70:	c8 01       	movw	r24, r16
    1b72:	0e 94 84 03 	call	0x708	; 0x708 <Timebase_Timer_Config>
  Timebase_Reset();
    1b76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <Timebase_Reset>
}
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <Timebase_Main_Loop_Executables>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Update_All();
    1b80:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Timebase_DownCounter_SS_Update_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1b84:	0e 94 06 09 	call	0x120c	; 0x120c <Timebase_DownCounter_Update_All>
  #endif
}
    1b88:	08 95       	ret

00001b8a <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1b8a:	e0 91 4b 01 	lds	r30, 0x014B
    1b8e:	f0 91 4c 01 	lds	r31, 0x014C
    1b92:	80 85       	ldd	r24, Z+8	; 0x08
    1b94:	91 85       	ldd	r25, Z+9	; 0x09
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	91 87       	std	Z+9, r25	; 0x09
    1b9a:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b9c:	83 81       	ldd	r24, Z+3	; 0x03
    1b9e:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1ba0:	80 85       	ldd	r24, Z+8	; 0x08
    1ba2:	91 85       	ldd	r25, Z+9	; 0x09
    1ba4:	61 81       	ldd	r22, Z+1	; 0x01
    1ba6:	72 81       	ldd	r23, Z+2	; 0x02
    1ba8:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <__udivmodhi4>
    1bac:	89 2b       	or	r24, r25
    1bae:	81 f4       	brne	.+32     	; 0x1bd0 <Timebase_ISR_Executables+0x46>
    Timebase->Time.Seconds++;
    1bb0:	82 85       	ldd	r24, Z+10	; 0x0a
    1bb2:	93 85       	ldd	r25, Z+11	; 0x0b
    1bb4:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bb6:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bb8:	01 96       	adiw	r24, 0x01	; 1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	82 87       	std	Z+10, r24	; 0x0a
    1bc0:	93 87       	std	Z+11, r25	; 0x0b
    1bc2:	a4 87       	std	Z+12, r26	; 0x0c
    1bc4:	b5 87       	std	Z+13, r27	; 0x0d

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    1bc6:	87 89       	ldd	r24, Z+23	; 0x17
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
    1bc8:	88 23       	and	r24, r24
    1bca:	11 f4       	brne	.+4      	; 0x1bd0 <Timebase_ISR_Executables+0x46>
      Timebase->Time.SubSeconds = 0;
    1bcc:	11 86       	std	Z+9, r1	; 0x09
    1bce:	10 86       	std	Z+8, r1	; 0x08
    1bd0:	08 95       	ret

00001bd2 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    1bd2:	1f 92       	push	r1
    1bd4:	0f 92       	push	r0
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	0f 92       	push	r0
    1bda:	11 24       	eor	r1, r1
    1bdc:	2f 93       	push	r18
    1bde:	3f 93       	push	r19
    1be0:	4f 93       	push	r20
    1be2:	5f 93       	push	r21
    1be4:	6f 93       	push	r22
    1be6:	7f 93       	push	r23
    1be8:	8f 93       	push	r24
    1bea:	9f 93       	push	r25
    1bec:	af 93       	push	r26
    1bee:	bf 93       	push	r27
    1bf0:	ef 93       	push	r30
    1bf2:	ff 93       	push	r31
  PORTD|=(1<<5);
    1bf4:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    1bf6:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    1bfa:	5d 98       	cbi	0x0b, 5	; 11
}
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	0f 90       	pop	r0
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	0f 90       	pop	r0
    1c1a:	1f 90       	pop	r1
    1c1c:	18 95       	reti

00001c1e <__mulsi3>:
    1c1e:	62 9f       	mul	r22, r18
    1c20:	d0 01       	movw	r26, r0
    1c22:	73 9f       	mul	r23, r19
    1c24:	f0 01       	movw	r30, r0
    1c26:	82 9f       	mul	r24, r18
    1c28:	e0 0d       	add	r30, r0
    1c2a:	f1 1d       	adc	r31, r1
    1c2c:	64 9f       	mul	r22, r20
    1c2e:	e0 0d       	add	r30, r0
    1c30:	f1 1d       	adc	r31, r1
    1c32:	92 9f       	mul	r25, r18
    1c34:	f0 0d       	add	r31, r0
    1c36:	83 9f       	mul	r24, r19
    1c38:	f0 0d       	add	r31, r0
    1c3a:	74 9f       	mul	r23, r20
    1c3c:	f0 0d       	add	r31, r0
    1c3e:	65 9f       	mul	r22, r21
    1c40:	f0 0d       	add	r31, r0
    1c42:	99 27       	eor	r25, r25
    1c44:	72 9f       	mul	r23, r18
    1c46:	b0 0d       	add	r27, r0
    1c48:	e1 1d       	adc	r30, r1
    1c4a:	f9 1f       	adc	r31, r25
    1c4c:	63 9f       	mul	r22, r19
    1c4e:	b0 0d       	add	r27, r0
    1c50:	e1 1d       	adc	r30, r1
    1c52:	f9 1f       	adc	r31, r25
    1c54:	bd 01       	movw	r22, r26
    1c56:	cf 01       	movw	r24, r30
    1c58:	11 24       	eor	r1, r1
    1c5a:	08 95       	ret

00001c5c <__udivmodhi4>:
    1c5c:	aa 1b       	sub	r26, r26
    1c5e:	bb 1b       	sub	r27, r27
    1c60:	51 e1       	ldi	r21, 0x11	; 17
    1c62:	07 c0       	rjmp	.+14     	; 0x1c72 <__udivmodhi4_ep>

00001c64 <__udivmodhi4_loop>:
    1c64:	aa 1f       	adc	r26, r26
    1c66:	bb 1f       	adc	r27, r27
    1c68:	a6 17       	cp	r26, r22
    1c6a:	b7 07       	cpc	r27, r23
    1c6c:	10 f0       	brcs	.+4      	; 0x1c72 <__udivmodhi4_ep>
    1c6e:	a6 1b       	sub	r26, r22
    1c70:	b7 0b       	sbc	r27, r23

00001c72 <__udivmodhi4_ep>:
    1c72:	88 1f       	adc	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	5a 95       	dec	r21
    1c78:	a9 f7       	brne	.-22     	; 0x1c64 <__udivmodhi4_loop>
    1c7a:	80 95       	com	r24
    1c7c:	90 95       	com	r25
    1c7e:	bc 01       	movw	r22, r24
    1c80:	cd 01       	movw	r24, r26
    1c82:	08 95       	ret

00001c84 <__udivmodsi4>:
    1c84:	a1 e2       	ldi	r26, 0x21	; 33
    1c86:	1a 2e       	mov	r1, r26
    1c88:	aa 1b       	sub	r26, r26
    1c8a:	bb 1b       	sub	r27, r27
    1c8c:	fd 01       	movw	r30, r26
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <__udivmodsi4_ep>

00001c90 <__udivmodsi4_loop>:
    1c90:	aa 1f       	adc	r26, r26
    1c92:	bb 1f       	adc	r27, r27
    1c94:	ee 1f       	adc	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	a2 17       	cp	r26, r18
    1c9a:	b3 07       	cpc	r27, r19
    1c9c:	e4 07       	cpc	r30, r20
    1c9e:	f5 07       	cpc	r31, r21
    1ca0:	20 f0       	brcs	.+8      	; 0x1caa <__udivmodsi4_ep>
    1ca2:	a2 1b       	sub	r26, r18
    1ca4:	b3 0b       	sbc	r27, r19
    1ca6:	e4 0b       	sbc	r30, r20
    1ca8:	f5 0b       	sbc	r31, r21

00001caa <__udivmodsi4_ep>:
    1caa:	66 1f       	adc	r22, r22
    1cac:	77 1f       	adc	r23, r23
    1cae:	88 1f       	adc	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	1a 94       	dec	r1
    1cb4:	69 f7       	brne	.-38     	; 0x1c90 <__udivmodsi4_loop>
    1cb6:	60 95       	com	r22
    1cb8:	70 95       	com	r23
    1cba:	80 95       	com	r24
    1cbc:	90 95       	com	r25
    1cbe:	9b 01       	movw	r18, r22
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	bd 01       	movw	r22, r26
    1cc4:	cf 01       	movw	r24, r30
    1cc6:	08 95       	ret

00001cc8 <__divmodsi4>:
    1cc8:	97 fb       	bst	r25, 7
    1cca:	09 2e       	mov	r0, r25
    1ccc:	05 26       	eor	r0, r21
    1cce:	0e d0       	rcall	.+28     	; 0x1cec <__divmodsi4_neg1>
    1cd0:	57 fd       	sbrc	r21, 7
    1cd2:	04 d0       	rcall	.+8      	; 0x1cdc <__divmodsi4_neg2>
    1cd4:	d7 df       	rcall	.-82     	; 0x1c84 <__udivmodsi4>
    1cd6:	0a d0       	rcall	.+20     	; 0x1cec <__divmodsi4_neg1>
    1cd8:	00 1c       	adc	r0, r0
    1cda:	38 f4       	brcc	.+14     	; 0x1cea <__divmodsi4_exit>

00001cdc <__divmodsi4_neg2>:
    1cdc:	50 95       	com	r21
    1cde:	40 95       	com	r20
    1ce0:	30 95       	com	r19
    1ce2:	21 95       	neg	r18
    1ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce6:	4f 4f       	sbci	r20, 0xFF	; 255
    1ce8:	5f 4f       	sbci	r21, 0xFF	; 255

00001cea <__divmodsi4_exit>:
    1cea:	08 95       	ret

00001cec <__divmodsi4_neg1>:
    1cec:	f6 f7       	brtc	.-4      	; 0x1cea <__divmodsi4_exit>
    1cee:	90 95       	com	r25
    1cf0:	80 95       	com	r24
    1cf2:	70 95       	com	r23
    1cf4:	61 95       	neg	r22
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	08 95       	ret

00001cfe <_exit>:
    1cfe:	f8 94       	cli

00001d00 <__stop_program>:
    1d00:	ff cf       	rjmp	.-2      	; 0x1d00 <__stop_program>
