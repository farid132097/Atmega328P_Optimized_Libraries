
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00001e24  00001eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  00800110  00800110  00001ec8  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ea6  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e86  00000000  00000000  00002dce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  00005c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018b7  00000000  00000000  00006239  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006d0  00000000  00000000  00007af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001108  00000000  00000000  000081c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000114a  00000000  00000000  000092c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000a412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e2       	ldi	r30, 0x24	; 36
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3f       	cpi	r26, 0xF0	; 240
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 46 0b 	call	0x168c	; 0x168c <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 46 0b 	call	0x168c	; 0x168c <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 46 0b 	call	0x168c	; 0x168c <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 46 0b 	call	0x168c	; 0x168c <Timebase_DownCounter_SS_Set_Securely>
	UART_Transmit_Space();
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSubSec(0));
	UART_Transmit_Space();*/
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	Timebase_Timer_Delay_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 bb 04 	call	0x976	; 0x976 <Timebase_Timer_Delay_SubSeconds>
	
	//Add update req flag
	PORTD |= (1<<6);
     118:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     11a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     11e:	5e 98       	cbi	0x0b, 6	; 11
     120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x6a>

00000122 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     122:	10 92 10 01 	sts	0x0110, r1
     126:	e1 e1       	ldi	r30, 0x11	; 17
     128:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     12a:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	e9 31       	cpi	r30, 0x19	; 25
     130:	f8 07       	cpc	r31, r24
     132:	d9 f7       	brne	.-10     	; 0x12a <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     134:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     136:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     138:	80 e2       	ldi	r24, 0x20	; 32
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	93 a3       	std	Z+35, r25	; 0x23
     13e:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     140:	15 a2       	std	Z+37, r1	; 0x25
     142:	14 a2       	std	Z+36, r1	; 0x24
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	04 c0       	rjmp	.+8      	; 0x150 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     148:	e0 5f       	subi	r30, 0xF0	; 240
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	80 91 3b 01 	lds	r24, 0x013B
     154:	90 91 3c 01 	lds	r25, 0x013C
     158:	e2 2f       	mov	r30, r18
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	e8 17       	cp	r30, r24
     15e:	f9 07       	cpc	r31, r25
     160:	98 f3       	brcs	.-26     	; 0x148 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     162:	08 95       	ret

00000164 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     164:	08 95       	ret

00000166 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     166:	08 95       	ret

00000168 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     168:	9b 01       	movw	r18, r22
     16a:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     16c:	60 e6       	ldi	r22, 0x60	; 96
     16e:	73 ee       	ldi	r23, 0xE3	; 227
     170:	86 e1       	ldi	r24, 0x16	; 22
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__udivmodsi4>
     178:	21 50       	subi	r18, 0x01	; 1
     17a:	30 40       	sbci	r19, 0x00	; 0
     17c:	40 40       	sbci	r20, 0x00	; 0
     17e:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     180:	e0 ec       	ldi	r30, 0xC0	; 192
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	82 60       	ori	r24, 0x02	; 2
     188:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     18a:	bb 27       	eor	r27, r27
     18c:	a5 2f       	mov	r26, r21
     18e:	94 2f       	mov	r25, r20
     190:	83 2f       	mov	r24, r19
     192:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     196:	20 93 c4 00 	sts	0x00C4, r18
}
     19a:	08 95       	ret

0000019c <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     19c:	e1 ec       	ldi	r30, 0xC1	; 193
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	88 60       	ori	r24, 0x08	; 8
     1a4:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	80 93 c2 00 	sts	0x00C2, r24
}
     1ac:	08 95       	ret

000001ae <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1ae:	e1 ec       	ldi	r30, 0xC1	; 193
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	80 93 c2 00 	sts	0x00C2, r24
}
     1be:	08 95       	ret

000001c0 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c0:	e1 ec       	ldi	r30, 0xC1	; 193
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	80 68       	ori	r24, 0x80	; 128
     1c8:	80 83       	st	Z, r24
  sei();
     1ca:	78 94       	sei
}
     1cc:	08 95       	ret

000001ce <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1ce:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d0:	80 91 c0 00 	lds	r24, 0x00C0
     1d4:	85 ff       	sbrs	r24, 5
     1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1d8:	90 93 c6 00 	sts	0x00C6, r25
}
     1dc:	08 95       	ret

000001de <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	0f 92       	push	r0
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1e8:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1ea:	80 91 c0 00 	lds	r24, 0x00C0
     1ee:	84 ff       	sbrs	r24, 4
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <UART_Receive_Byte+0x1e>
    val=UDR0;
     1f2:	80 91 c6 00 	lds	r24, 0x00C6
     1f6:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	08 c0       	rjmp	.+16     	; 0x20c <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1fc:	80 91 c0 00 	lds	r24, 0x00C0
     200:	83 ff       	sbrs	r24, 3
     202:	07 c0       	rjmp	.+14     	; 0x212 <UART_Receive_Byte+0x34>
    val=UDR0;
     204:	80 91 c6 00 	lds	r24, 0x00C6
     208:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	80 93 10 01 	sts	0x0110, r24
     210:	05 c0       	rjmp	.+10     	; 0x21c <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     212:	80 91 c6 00 	lds	r24, 0x00C6
     216:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     218:	10 92 10 01 	sts	0x0110, r1
  }
  return val;
     21c:	89 81       	ldd	r24, Y+1	; 0x01
}
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	08 95       	ret

00000226 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     226:	80 91 1a 01 	lds	r24, 0x011A
}
     22a:	08 95       	ret

0000022c <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     22c:	10 92 1a 01 	sts	0x011A, r1
}
     230:	08 95       	ret

00000232 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	ab 01       	movw	r20, r22
     23a:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     23c:	4f 3f       	cpi	r20, 0xFF	; 255
     23e:	51 05       	cpc	r21, r1
     240:	61 05       	cpc	r22, r1
     242:	71 05       	cpc	r23, r1
     244:	09 f0       	breq	.+2      	; 0x248 <UART_Transmit_Byte_Hex+0x16>
     246:	28 f4       	brcc	.+10     	; 0x252 <UART_Transmit_Byte_Hex+0x20>
     248:	e8 e0       	ldi	r30, 0x08	; 8
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	c2 e0       	ldi	r28, 0x02	; 2
     24e:	d0 e0       	ldi	r29, 0x00	; 0
     250:	11 c0       	rjmp	.+34     	; 0x274 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     252:	40 30       	cpi	r20, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	58 07       	cpc	r21, r24
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	68 07       	cpc	r22, r24
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	78 07       	cpc	r23, r24
     260:	28 f0       	brcs	.+10     	; 0x26c <UART_Transmit_Byte_Hex+0x3a>
     262:	e0 e2       	ldi	r30, 0x20	; 32
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	c8 e0       	ldi	r28, 0x08	; 8
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	04 c0       	rjmp	.+8      	; 0x274 <UART_Transmit_Byte_Hex+0x42>
     26c:	e0 e1       	ldi	r30, 0x10	; 16
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	c4 e0       	ldi	r28, 0x04	; 4
     272:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     274:	80 91 c0 00 	lds	r24, 0x00C0
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     282:	80 91 c0 00 	lds	r24, 0x00C0
     286:	85 ff       	sbrs	r24, 5
     288:	fc cf       	rjmp	.-8      	; 0x282 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     28a:	88 e7       	ldi	r24, 0x78	; 120
     28c:	80 93 c6 00 	sts	0x00C6, r24
     290:	10 e0       	ldi	r17, 0x00	; 0
     292:	1f c0       	rjmp	.+62     	; 0x2d2 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     294:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     296:	db 01       	movw	r26, r22
     298:	ca 01       	movw	r24, r20
     29a:	0e 2e       	mov	r0, r30
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <UART_Transmit_Byte_Hex+0x74>
     29e:	b6 95       	lsr	r27
     2a0:	a7 95       	ror	r26
     2a2:	97 95       	ror	r25
     2a4:	87 95       	ror	r24
     2a6:	0a 94       	dec	r0
     2a8:	d2 f7       	brpl	.-12     	; 0x29e <UART_Transmit_Byte_Hex+0x6c>
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	8f 70       	andi	r24, 0x0F	; 15
     2ae:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b0:	8a 30       	cpi	r24, 0x0A	; 10
     2b2:	91 05       	cpc	r25, r1
     2b4:	20 f0       	brcs	.+8      	; 0x2be <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2b6:	9c 01       	movw	r18, r24
     2b8:	29 5c       	subi	r18, 0xC9	; 201
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2be:	9c 01       	movw	r18, r24
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2c4:	80 91 c0 00 	lds	r24, 0x00C0
     2c8:	85 ff       	sbrs	r24, 5
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2cc:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d0:	1f 5f       	subi	r17, 0xFF	; 255
     2d2:	81 2f       	mov	r24, r17
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	8c 17       	cp	r24, r28
     2d8:	9d 07       	cpc	r25, r29
     2da:	e0 f2       	brcs	.-72     	; 0x294 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	ab 01       	movw	r20, r22
     2f6:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2f8:	4f 3f       	cpi	r20, 0xFF	; 255
     2fa:	51 05       	cpc	r21, r1
     2fc:	61 05       	cpc	r22, r1
     2fe:	71 05       	cpc	r23, r1
     300:	09 f0       	breq	.+2      	; 0x304 <UART_Transmit_Byte_Bin+0x20>
     302:	10 f4       	brcc	.+4      	; 0x308 <UART_Transmit_Byte_Bin+0x24>
     304:	97 e0       	ldi	r25, 0x07	; 7
     306:	0b c0       	rjmp	.+22     	; 0x31e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     308:	40 30       	cpi	r20, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	58 07       	cpc	r21, r24
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	68 07       	cpc	r22, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	78 07       	cpc	r23, r24
     316:	10 f0       	brcs	.+4      	; 0x31c <UART_Transmit_Byte_Bin+0x38>
     318:	9f e1       	ldi	r25, 0x1F	; 31
     31a:	01 c0       	rjmp	.+2      	; 0x31e <UART_Transmit_Byte_Bin+0x3a>
     31c:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     31e:	80 91 c0 00 	lds	r24, 0x00C0
     322:	85 ff       	sbrs	r24, 5
     324:	fc cf       	rjmp	.-8      	; 0x31e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     326:	80 e3       	ldi	r24, 0x30	; 48
     328:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     32c:	80 91 c0 00 	lds	r24, 0x00C0
     330:	85 ff       	sbrs	r24, 5
     332:	fc cf       	rjmp	.-8      	; 0x32c <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     334:	82 e6       	ldi	r24, 0x62	; 98
     336:	80 93 c6 00 	sts	0x00C6, r24
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     33e:	e9 2f       	mov	r30, r25
     340:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     342:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     344:	11 e3       	ldi	r17, 0x31	; 49
     346:	ef 01       	movw	r28, r30
     348:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     34a:	cf 01       	movw	r24, r30
     34c:	82 1b       	sub	r24, r18
     34e:	93 0b       	sbc	r25, r19
     350:	6a 01       	movw	r12, r20
     352:	7b 01       	movw	r14, r22
     354:	04 c0       	rjmp	.+8      	; 0x35e <UART_Transmit_Byte_Bin+0x7a>
     356:	f6 94       	lsr	r15
     358:	e7 94       	ror	r14
     35a:	d7 94       	ror	r13
     35c:	c7 94       	ror	r12
     35e:	8a 95       	dec	r24
     360:	d2 f7       	brpl	.-12     	; 0x356 <UART_Transmit_Byte_Bin+0x72>
     362:	d7 01       	movw	r26, r14
     364:	c6 01       	movw	r24, r12
     366:	81 70       	andi	r24, 0x01	; 1
     368:	90 70       	andi	r25, 0x00	; 0
     36a:	89 2b       	or	r24, r25
     36c:	39 f0       	breq	.+14     	; 0x37c <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     36e:	80 91 c0 00 	lds	r24, 0x00C0
     372:	85 ff       	sbrs	r24, 5
     374:	fc cf       	rjmp	.-8      	; 0x36e <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     376:	10 93 c6 00 	sts	0x00C6, r17
     37a:	06 c0       	rjmp	.+12     	; 0x388 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     37c:	80 91 c0 00 	lds	r24, 0x00C0
     380:	85 ff       	sbrs	r24, 5
     382:	fc cf       	rjmp	.-8      	; 0x37c <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     384:	00 93 c6 00 	sts	0x00C6, r16
     388:	2f 5f       	subi	r18, 0xFF	; 255
     38a:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     38c:	2c 17       	cp	r18, r28
     38e:	3d 07       	cpc	r19, r29
     390:	e1 f6       	brne	.-72     	; 0x34a <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3a4:	ac 01       	movw	r20, r24
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3aa:	80 91 c0 00 	lds	r24, 0x00C0
     3ae:	85 ff       	sbrs	r24, 5
     3b0:	fc cf       	rjmp	.-8      	; 0x3aa <UART_Transmit_Text+0x6>
  UDR0=val;
     3b2:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3b8:	fa 01       	movw	r30, r20
     3ba:	e2 0f       	add	r30, r18
     3bc:	f1 1d       	adc	r31, r1
     3be:	e0 81       	ld	r30, Z
     3c0:	ee 23       	and	r30, r30
     3c2:	99 f7       	brne	.-26     	; 0x3aa <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3c4:	08 95       	ret

000003c6 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <UART_Transmit_Text>
}
     3ce:	08 95       	ret

000003d0 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <UART_Transmit_Text>
}
     3d8:	08 95       	ret

000003da <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	6b 01       	movw	r12, r22
     3ea:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3ec:	61 15       	cp	r22, r1
     3ee:	71 05       	cpc	r23, r1
     3f0:	81 05       	cpc	r24, r1
     3f2:	91 05       	cpc	r25, r1
     3f4:	31 f4       	brne	.+12     	; 0x402 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3f6:	10 92 11 01 	sts	0x0111, r1
    UART.InputNumberDigits=1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 19 01 	sts	0x0119, r24
     400:	23 c0       	rjmp	.+70     	; 0x448 <UART_Determine_Digit_Numbers+0x6e>
     402:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     404:	0b 2d       	mov	r16, r11
     406:	10 e0       	ldi	r17, 0x00	; 0
     408:	00 5f       	subi	r16, 0xF0	; 240
     40a:	1e 4f       	sbci	r17, 0xFE	; 254
     40c:	c7 01       	movw	r24, r14
     40e:	b6 01       	movw	r22, r12
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__udivmodsi4>
     41c:	f8 01       	movw	r30, r16
     41e:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	2a e0       	ldi	r18, 0x0A	; 10
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__udivmodsi4>
     430:	c9 01       	movw	r24, r18
     432:	da 01       	movw	r26, r20
     434:	6c 01       	movw	r12, r24
     436:	7d 01       	movw	r14, r26
      i++;
     438:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     43a:	c1 14       	cp	r12, r1
     43c:	d1 04       	cpc	r13, r1
     43e:	e1 04       	cpc	r14, r1
     440:	f1 04       	cpc	r15, r1
     442:	01 f7       	brne	.-64     	; 0x404 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     444:	b0 92 19 01 	sts	0x0119, r11
  }
}
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	08 95       	ret

00000458 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     458:	e0 91 19 01 	lds	r30, 0x0119
     45c:	0f c0       	rjmp	.+30     	; 0x47c <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     45e:	2e 2f       	mov	r18, r30
     460:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     462:	e2 2f       	mov	r30, r18
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	e0 5f       	subi	r30, 0xF0	; 240
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     46c:	80 91 c0 00 	lds	r24, 0x00C0
     470:	85 ff       	sbrs	r24, 5
     472:	fc cf       	rjmp	.-8      	; 0x46c <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     474:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     476:	90 93 c6 00 	sts	0x00C6, r25
     47a:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     47c:	ee 23       	and	r30, r30
     47e:	79 f7       	brne	.-34     	; 0x45e <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     480:	08 95       	ret

00000482 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     482:	9b 01       	movw	r18, r22
     484:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     486:	97 ff       	sbrs	r25, 7
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     48a:	80 91 c0 00 	lds	r24, 0x00C0
     48e:	85 ff       	sbrs	r24, 5
     490:	fc cf       	rjmp	.-8      	; 0x48a <UART_Transmit_Number+0x8>
  UDR0=val;
     492:	8d e2       	ldi	r24, 0x2D	; 45
     494:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     498:	50 95       	com	r21
     49a:	40 95       	com	r20
     49c:	30 95       	com	r19
     49e:	21 95       	neg	r18
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	4f 4f       	sbci	r20, 0xFF	; 255
     4a4:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4a6:	ca 01       	movw	r24, r20
     4a8:	b9 01       	movw	r22, r18
     4aa:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4ae:	0e 94 2c 02 	call	0x458	; 0x458 <UART_Transmit_Number_Digits>
}
     4b2:	08 95       	ret

000004b4 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4b4:	fc 01       	movw	r30, r24
     4b6:	e0 5f       	subi	r30, 0xF0	; 240
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4bc:	08 95       	ret

000004be <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4be:	20 91 3d 01 	lds	r18, 0x013D
     4c2:	30 91 3e 01 	lds	r19, 0x013E
}
     4c6:	c9 01       	movw	r24, r18
     4c8:	08 95       	ret

000004ca <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4ca:	10 92 10 01 	sts	0x0110, r1
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4d4:	f9 01       	movw	r30, r18
     4d6:	e0 5f       	subi	r30, 0xF0	; 240
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4dc:	2f 5f       	subi	r18, 0xFF	; 255
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	80 91 3b 01 	lds	r24, 0x013B
     4e4:	90 91 3c 01 	lds	r25, 0x013C
     4e8:	28 17       	cp	r18, r24
     4ea:	39 07       	cpc	r19, r25
     4ec:	98 f3       	brcs	.-26     	; 0x4d4 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4ee:	10 92 3e 01 	sts	0x013E, r1
     4f2:	10 92 3d 01 	sts	0x013D, r1
  #endif
}
     4f6:	08 95       	ret

000004f8 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4f8:	df 93       	push	r29
     4fa:	cf 93       	push	r28
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     502:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     504:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_Receive_Byte>
     508:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     50a:	80 91 10 01 	lds	r24, 0x0110
     50e:	88 23       	and	r24, r24
     510:	19 f5       	brne	.+70     	; 0x558 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	80 93 1a 01 	sts	0x011A, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     518:	e0 91 3d 01 	lds	r30, 0x013D
     51c:	f0 91 3e 01 	lds	r31, 0x013E
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	e0 5f       	subi	r30, 0xF0	; 240
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     528:	80 91 3d 01 	lds	r24, 0x013D
     52c:	90 91 3e 01 	lds	r25, 0x013E
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	90 93 3e 01 	sts	0x013E, r25
     536:	80 93 3d 01 	sts	0x013D, r24

    if(UART.BufferIndex>=UART.BufferSize){
     53a:	20 91 3d 01 	lds	r18, 0x013D
     53e:	30 91 3e 01 	lds	r19, 0x013E
     542:	80 91 3b 01 	lds	r24, 0x013B
     546:	90 91 3c 01 	lds	r25, 0x013C
     54a:	28 17       	cp	r18, r24
     54c:	39 07       	cpc	r19, r25
     54e:	20 f0       	brcs	.+8      	; 0x558 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     550:	10 92 3e 01 	sts	0x013E, r1
     554:	10 92 3d 01 	sts	0x013D, r1
    }
  }
}
     558:	0f 90       	pop	r0
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     582:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <UART_Interrupt_Service_Routine>
}
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	7f 91       	pop	r23
     594:	6f 91       	pop	r22
     596:	5f 91       	pop	r21
     598:	4f 91       	pop	r20
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	7b 01       	movw	r14, r22
     5b2:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5b4:	0e 94 91 00 	call	0x122	; 0x122 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5b8:	c8 01       	movw	r24, r16
     5ba:	b7 01       	movw	r22, r14
     5bc:	0e 94 b4 00 	call	0x168	; 0x168 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c0:	e1 ec       	ldi	r30, 0xC1	; 193
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	88 60       	ori	r24, 0x08	; 8
     5c8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ca:	a2 ec       	ldi	r26, 0xC2	; 194
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	96 e0       	ldi	r25, 0x06	; 6
     5d0:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5d2:	80 81       	ld	r24, Z
     5d4:	80 61       	ori	r24, 0x10	; 16
     5d6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d8:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 68       	ori	r24, 0x80	; 128
     5de:	80 83       	st	Z, r24
  sei();
     5e0:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5e2:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Flush_Buffer>
}
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f0:	81 e4       	ldi	r24, 0x41	; 65
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	90 93 40 01 	sts	0x0140, r25
     5f8:	80 93 3f 01 	sts	0x013F, r24
  Timebase->Config.TimerType.Value = 0;
     5fc:	10 92 41 01 	sts	0x0141, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     600:	80 91 41 01 	lds	r24, 0x0141
     604:	84 60       	ori	r24, 0x04	; 4
     606:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     60a:	80 91 41 01 	lds	r24, 0x0141
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.UpdateRate = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	90 93 43 01 	sts	0x0143, r25
     61c:	80 93 42 01 	sts	0x0142, r24
  Timebase->Time.OVFUpdateValue=0;
     620:	10 92 44 01 	sts	0x0144, r1
  Timebase->Time.SubSeconds = 0;
     624:	10 92 4a 01 	sts	0x014A, r1
     628:	10 92 49 01 	sts	0x0149, r1
  Timebase->Time.Seconds = 0;
     62c:	10 92 4b 01 	sts	0x014B, r1
     630:	10 92 4c 01 	sts	0x014C, r1
     634:	10 92 4d 01 	sts	0x014D, r1
     638:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.LastSample = 0;
     63c:	10 92 45 01 	sts	0x0145, r1
     640:	10 92 46 01 	sts	0x0146, r1
     644:	10 92 47 01 	sts	0x0147, r1
     648:	10 92 48 01 	sts	0x0148, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     64c:	10 92 4f 01 	sts	0x014F, r1
     650:	10 92 50 01 	sts	0x0150, r1
     654:	10 92 51 01 	sts	0x0151, r1
     658:	10 92 52 01 	sts	0x0152, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     65c:	10 92 53 01 	sts	0x0153, r1
     660:	10 92 54 01 	sts	0x0154, r1
     664:	10 92 55 01 	sts	0x0155, r1
     668:	10 92 56 01 	sts	0x0156, r1
	Timebase->Time.Status = 0;
     66c:	10 92 57 01 	sts	0x0157, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     670:	10 92 58 01 	sts	0x0158, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     674:	10 92 59 01 	sts	0x0159, r1
     678:	a0 eb       	ldi	r26, 0xB0	; 176
     67a:	b1 e0       	ldi	r27, 0x01	; 1
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     680:	2d e0       	ldi	r18, 0x0D	; 13
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	82 9f       	mul	r24, r18
     686:	f0 01       	movw	r30, r0
     688:	83 9f       	mul	r24, r19
     68a:	f0 0d       	add	r31, r0
     68c:	92 9f       	mul	r25, r18
     68e:	f0 0d       	add	r31, r0
     690:	11 24       	eor	r1, r1
     692:	e1 55       	subi	r30, 0x51	; 81
     694:	fe 4f       	sbci	r31, 0xFE	; 254
     696:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     698:	1d 92       	st	X+, r1
     69a:	1d 92       	st	X+, r1
     69c:	1d 92       	st	X+, r1
     69e:	1c 92       	st	X, r1
     6a0:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     6a2:	14 96       	adiw	r26, 0x04	; 4
     6a4:	1d 92       	st	X+, r1
     6a6:	1d 92       	st	X+, r1
     6a8:	1d 92       	st	X+, r1
     6aa:	1c 92       	st	X, r1
     6ac:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     6ae:	18 96       	adiw	r26, 0x08	; 8
     6b0:	1d 92       	st	X+, r1
     6b2:	1d 92       	st	X+, r1
     6b4:	1d 92       	st	X+, r1
     6b6:	1c 92       	st	X, r1
     6b8:	1b 97       	sbiw	r26, 0x0b	; 11
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     6be:	85 30       	cpi	r24, 0x05	; 5
     6c0:	91 05       	cpc	r25, r1
     6c2:	01 f7       	brne	.-64     	; 0x684 <Timebase_Struct_Init+0x94>
     6c4:	ab e5       	ldi	r26, 0x5B	; 91
     6c6:	b1 e0       	ldi	r27, 0x01	; 1
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     6cc:	fc 01       	movw	r30, r24
     6ce:	24 e0       	ldi	r18, 0x04	; 4
     6d0:	ee 0f       	add	r30, r30
     6d2:	ff 1f       	adc	r31, r31
     6d4:	2a 95       	dec	r18
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <Timebase_Struct_Init+0xe0>
     6d8:	e8 0f       	add	r30, r24
     6da:	f9 1f       	adc	r31, r25
     6dc:	ef 5b       	subi	r30, 0xBF	; 191
     6de:	fe 4f       	sbci	r31, 0xFE	; 254
     6e0:	11 8e       	std	Z+25, r1	; 0x19
    Timebase->DownCounterSS[i].EndValueSec = 0;
     6e2:	1d 92       	st	X+, r1
     6e4:	1d 92       	st	X+, r1
     6e6:	1d 92       	st	X+, r1
     6e8:	1c 92       	st	X, r1
     6ea:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     6ec:	14 96       	adiw	r26, 0x04	; 4
     6ee:	1d 92       	st	X+, r1
     6f0:	1d 92       	st	X+, r1
     6f2:	1d 92       	st	X+, r1
     6f4:	1c 92       	st	X, r1
     6f6:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     6f8:	18 96       	adiw	r26, 0x08	; 8
     6fa:	1d 92       	st	X+, r1
     6fc:	1d 92       	st	X+, r1
     6fe:	1d 92       	st	X+, r1
     700:	1c 92       	st	X, r1
     702:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     704:	1c 96       	adiw	r26, 0x0c	; 12
     706:	1d 92       	st	X+, r1
     708:	1d 92       	st	X+, r1
     70a:	1d 92       	st	X+, r1
     70c:	1c 92       	st	X, r1
     70e:	1f 97       	sbiw	r26, 0x0f	; 15
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     714:	85 30       	cpi	r24, 0x05	; 5
     716:	91 05       	cpc	r25, r1
     718:	c9 f6       	brne	.-78     	; 0x6cc <Timebase_Struct_Init+0xdc>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     71a:	08 95       	ret

0000071c <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     71c:	7f 92       	push	r7
     71e:	8f 92       	push	r8
     720:	9f 92       	push	r9
     722:	af 92       	push	r10
     724:	bf 92       	push	r11
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	2a 97       	sbiw	r28, 0x0a	; 10
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     748:	c0 90 3f 01 	lds	r12, 0x013F
     74c:	d0 90 40 01 	lds	r13, 0x0140
     750:	f6 01       	movw	r30, r12
     752:	80 81       	ld	r24, Z
     754:	80 ff       	sbrs	r24, 0
     756:	31 c0       	rjmp	.+98     	; 0x7ba <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     758:	01 30       	cpi	r16, 0x01	; 1
     75a:	11 05       	cpc	r17, r1
     75c:	11 f4       	brne	.+4      	; 0x762 <Timebase_Timer_Config+0x46>
     75e:	96 e0       	ldi	r25, 0x06	; 6
     760:	19 c0       	rjmp	.+50     	; 0x794 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     762:	02 30       	cpi	r16, 0x02	; 2
     764:	11 05       	cpc	r17, r1
     766:	11 f4       	brne	.+4      	; 0x76c <Timebase_Timer_Config+0x50>
     768:	95 e0       	ldi	r25, 0x05	; 5
     76a:	14 c0       	rjmp	.+40     	; 0x794 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     76c:	04 30       	cpi	r16, 0x04	; 4
     76e:	11 05       	cpc	r17, r1
     770:	11 f4       	brne	.+4      	; 0x776 <Timebase_Timer_Config+0x5a>
     772:	94 e0       	ldi	r25, 0x04	; 4
     774:	0f c0       	rjmp	.+30     	; 0x794 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     776:	08 30       	cpi	r16, 0x08	; 8
     778:	11 05       	cpc	r17, r1
     77a:	11 f4       	brne	.+4      	; 0x780 <Timebase_Timer_Config+0x64>
     77c:	93 e0       	ldi	r25, 0x03	; 3
     77e:	0a c0       	rjmp	.+20     	; 0x794 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     780:	00 31       	cpi	r16, 0x10	; 16
     782:	11 05       	cpc	r17, r1
     784:	11 f4       	brne	.+4      	; 0x78a <Timebase_Timer_Config+0x6e>
     786:	92 e0       	ldi	r25, 0x02	; 2
     788:	05 c0       	rjmp	.+10     	; 0x794 <Timebase_Timer_Config+0x78>
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	00 32       	cpi	r16, 0x20	; 32
     78e:	11 05       	cpc	r17, r1
     790:	09 f4       	brne	.+2      	; 0x794 <Timebase_Timer_Config+0x78>
     792:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     794:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     796:	84 b7       	in	r24, 0x34	; 52
     798:	87 7f       	andi	r24, 0xF7	; 247
     79a:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     79c:	80 91 60 00 	lds	r24, 0x0060
     7a0:	80 68       	ori	r24, 0x80	; 128
     7a2:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     7a6:	80 91 60 00 	lds	r24, 0x0060
     7aa:	88 61       	ori	r24, 0x18	; 24
     7ac:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     7b0:	90 64       	ori	r25, 0x40	; 64
     7b2:	90 93 60 00 	sts	0x0060, r25
    sei();
     7b6:	78 94       	sei
     7b8:	67 c0       	rjmp	.+206    	; 0x888 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     7ba:	81 fd       	sbrc	r24, 1
     7bc:	65 c0       	rjmp	.+202    	; 0x888 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     7be:	82 ff       	sbrs	r24, 2
     7c0:	63 c0       	rjmp	.+198    	; 0x888 <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     7c2:	de 01       	movw	r26, r28
     7c4:	11 96       	adiw	r26, 0x01	; 1
     7c6:	e5 e0       	ldi	r30, 0x05	; 5
     7c8:	f1 e0       	ldi	r31, 0x01	; 1
     7ca:	8a e0       	ldi	r24, 0x0A	; 10
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     7d4:	98 01       	movw	r18, r16
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	7b e1       	ldi	r23, 0x1B	; 27
     7de:	87 eb       	ldi	r24, 0xB7	; 183
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
     7e6:	72 2e       	mov	r7, r18
     7e8:	83 2e       	mov	r8, r19
     7ea:	94 2e       	mov	r9, r20
     7ec:	e5 2e       	mov	r14, r21
     7ee:	5e 01       	movw	r10, r28
     7f0:	08 94       	sec
     7f2:	a1 1c       	adc	r10, r1
     7f4:	b1 1c       	adc	r11, r1
     7f6:	c9 01       	movw	r24, r18
     7f8:	da 01       	movw	r26, r20
     7fa:	9c 01       	movw	r18, r24
     7fc:	ad 01       	movw	r20, r26
     7fe:	ff 24       	eor	r15, r15
     800:	14 c0       	rjmp	.+40     	; 0x82a <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     802:	f5 01       	movw	r30, r10
     804:	21 91       	ld	r18, Z+
     806:	31 91       	ld	r19, Z+
     808:	5f 01       	movw	r10, r30
     80a:	40 e0       	ldi	r20, 0x00	; 0
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	67 2d       	mov	r22, r7
     810:	78 2d       	mov	r23, r8
     812:	89 2d       	mov	r24, r9
     814:	9e 2d       	mov	r25, r14
     816:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
     81a:	c9 01       	movw	r24, r18
     81c:	da 01       	movw	r26, r20
     81e:	9c 01       	movw	r18, r24
     820:	ad 01       	movw	r20, r26
	  clock_div_index++;
     822:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     824:	f5 e0       	ldi	r31, 0x05	; 5
     826:	ff 16       	cp	r15, r31
     828:	31 f0       	breq	.+12     	; 0x836 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     82a:	2f 3f       	cpi	r18, 0xFF	; 255
     82c:	31 05       	cpc	r19, r1
     82e:	41 05       	cpc	r20, r1
     830:	51 05       	cpc	r21, r1
     832:	09 f0       	breq	.+2      	; 0x836 <Timebase_Timer_Config+0x11a>
     834:	34 f7       	brge	.-52     	; 0x802 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     836:	8f 2d       	mov	r24, r15
     838:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     83a:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     83c:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     83e:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     842:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     844:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     846:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     848:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     84a:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     84c:	88 23       	and	r24, r24
     84e:	11 f4       	brne	.+4      	; 0x854 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	0f c0       	rjmp	.+30     	; 0x872 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	11 f4       	brne	.+4      	; 0x85c <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	0b c0       	rjmp	.+22     	; 0x872 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	11 f4       	brne	.+4      	; 0x864 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	07 c0       	rjmp	.+14     	; 0x872 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     864:	83 30       	cpi	r24, 0x03	; 3
     866:	11 f4       	brne	.+4      	; 0x86c <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     868:	84 e0       	ldi	r24, 0x04	; 4
     86a:	03 c0       	rjmp	.+6      	; 0x872 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     86c:	84 30       	cpi	r24, 0x04	; 4
     86e:	11 f4       	brne	.+4      	; 0x874 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     870:	85 e0       	ldi	r24, 0x05	; 5
     872:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     874:	82 2f       	mov	r24, r18
     876:	80 95       	com	r24
     878:	f6 01       	movw	r30, r12
     87a:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     87c:	83 81       	ldd	r24, Z+3	; 0x03
     87e:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	80 93 6e 00 	sts	0x006E, r24
    sei();
     886:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     888:	f6 01       	movw	r30, r12
     88a:	12 83       	std	Z+2, r17	; 0x02
     88c:	01 83       	std	Z+1, r16	; 0x01
}
     88e:	2a 96       	adiw	r28, 0x0a	; 10
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	cf 91       	pop	r28
     89c:	df 91       	pop	r29
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	08 95       	ret

000008b6 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     8b6:	f8 94       	cli
}
     8b8:	08 95       	ret

000008ba <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     8ba:	78 94       	sei
}
     8bc:	08 95       	ret

000008be <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8be:	e0 91 3f 01 	lds	r30, 0x013F
     8c2:	f0 91 40 01 	lds	r31, 0x0140
     8c6:	80 8d       	ldd	r24, Z+24	; 0x18
}
     8c8:	08 95       	ret

000008ca <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8ca:	e0 91 3f 01 	lds	r30, 0x013F
     8ce:	f0 91 40 01 	lds	r31, 0x0140
     8d2:	80 8d       	ldd	r24, Z+24	; 0x18
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     8d4:	8f 33       	cpi	r24, 0x3F	; 63
     8d6:	18 f4       	brcc	.+6      	; 0x8de <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     8d8:	80 8d       	ldd	r24, Z+24	; 0x18
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	80 8f       	std	Z+24, r24	; 0x18
     8de:	08 95       	ret

000008e0 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8e0:	e0 91 3f 01 	lds	r30, 0x013F
     8e4:	f0 91 40 01 	lds	r31, 0x0140
     8e8:	80 8d       	ldd	r24, Z+24	; 0x18
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8ea:	88 23       	and	r24, r24
     8ec:	19 f0       	breq	.+6      	; 0x8f4 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8ee:	80 8d       	ldd	r24, Z+24	; 0x18
     8f0:	81 50       	subi	r24, 0x01	; 1
     8f2:	80 8f       	std	Z+24, r24	; 0x18
     8f4:	08 95       	ret

000008f6 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8f6:	e0 91 3f 01 	lds	r30, 0x013F
     8fa:	f0 91 40 01 	lds	r31, 0x0140
     8fe:	10 8e       	std	Z+24, r1	; 0x18
}
     900:	08 95       	ret

00000902 <Timebase_Timer_Get_SubSeconds>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     902:	e0 91 3f 01 	lds	r30, 0x013F
     906:	f0 91 40 01 	lds	r31, 0x0140
     90a:	20 85       	ldd	r18, Z+8	; 0x08
     90c:	31 85       	ldd	r19, Z+9	; 0x09
}
     90e:	c9 01       	movw	r24, r18
     910:	08 95       	ret

00000912 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     912:	e0 91 3f 01 	lds	r30, 0x013F
     916:	f0 91 40 01 	lds	r31, 0x0140
     91a:	22 85       	ldd	r18, Z+10	; 0x0a
     91c:	33 85       	ldd	r19, Z+11	; 0x0b
     91e:	44 85       	ldd	r20, Z+12	; 0x0c
     920:	55 85       	ldd	r21, Z+13	; 0x0d
}
     922:	b9 01       	movw	r22, r18
     924:	ca 01       	movw	r24, r20
     926:	08 95       	ret

00000928 <Timebase_Timer_Get_SubSeconds_Atomic>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     928:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     92a:	e0 91 3f 01 	lds	r30, 0x013F
     92e:	f0 91 40 01 	lds	r31, 0x0140
     932:	20 85       	ldd	r18, Z+8	; 0x08
     934:	31 85       	ldd	r19, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     936:	78 94       	sei
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
  Timebase_Atomic_Operation_End();
  return curr_ss;
}
     938:	c9 01       	movw	r24, r18
     93a:	08 95       	ret

0000093c <Timebase_Timer_Get_Seconds_Atomic>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     93c:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     93e:	e0 91 3f 01 	lds	r30, 0x013F
     942:	f0 91 40 01 	lds	r31, 0x0140
     946:	22 85       	ldd	r18, Z+10	; 0x0a
     948:	33 85       	ldd	r19, Z+11	; 0x0b
     94a:	44 85       	ldd	r20, Z+12	; 0x0c
     94c:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     94e:	78 94       	sei
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
  Timebase_Atomic_Operation_End();
  return curr_s;
}
     950:	b9 01       	movw	r22, r18
     952:	ca 01       	movw	r24, r20
     954:	08 95       	ret

00000956 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     956:	e0 91 3f 01 	lds	r30, 0x013F
     95a:	f0 91 40 01 	lds	r31, 0x0140
     95e:	91 87       	std	Z+9, r25	; 0x09
     960:	80 87       	std	Z+8, r24	; 0x08
}
     962:	08 95       	ret

00000964 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     964:	e0 91 3f 01 	lds	r30, 0x013F
     968:	f0 91 40 01 	lds	r31, 0x0140
     96c:	62 87       	std	Z+10, r22	; 0x0a
     96e:	73 87       	std	Z+11, r23	; 0x0b
     970:	84 87       	std	Z+12, r24	; 0x0c
     972:	95 87       	std	Z+13, r25	; 0x0d
}
     974:	08 95       	ret

00000976 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     994:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     996:	c0 91 3f 01 	lds	r28, 0x013F
     99a:	d0 91 40 01 	lds	r29, 0x0140
     99e:	e8 84       	ldd	r14, Y+8	; 0x08
     9a0:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9a2:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9a4:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9a6:	2a 85       	ldd	r18, Y+10	; 0x0a
     9a8:	3b 85       	ldd	r19, Y+11	; 0x0b
     9aa:	4c 85       	ldd	r20, Y+12	; 0x0c
     9ac:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9ae:	78 94       	sei
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds_Atomic();
  smpl_s   = Timebase_Timer_Get_Seconds_Atomic();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     9b0:	69 81       	ldd	r22, Y+1	; 0x01
     9b2:	7a 81       	ldd	r23, Y+2	; 0x02
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__mulsi3>
     9bc:	3b 01       	movw	r6, r22
     9be:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     9c0:	00 e0       	ldi	r16, 0x00	; 0
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	6e 0c       	add	r6, r14
     9c6:	7f 1c       	adc	r7, r15
     9c8:	80 1e       	adc	r8, r16
     9ca:	91 1e       	adc	r9, r17
  smpl_val += value;
     9cc:	cc 24       	eor	r12, r12
     9ce:	dd 24       	eor	r13, r13
     9d0:	6a 0c       	add	r6, r10
     9d2:	7b 1c       	adc	r7, r11
     9d4:	8c 1c       	adc	r8, r12
     9d6:	9d 1c       	adc	r9, r13
     9d8:	60 e0       	ldi	r22, 0x00	; 0
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	16 c0       	rjmp	.+44     	; 0xa0e <Timebase_Timer_Delay_SubSeconds+0x98>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9e2:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     9e4:	e8 84       	ldd	r14, Y+8	; 0x08
     9e6:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9e8:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9ea:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9ec:	2a 85       	ldd	r18, Y+10	; 0x0a
     9ee:	3b 85       	ldd	r19, Y+11	; 0x0b
     9f0:	4c 85       	ldd	r20, Y+12	; 0x0c
     9f2:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9f4:	78 94       	sei
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds_Atomic();
	curr_s    = Timebase_Timer_Get_Seconds_Atomic();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     9f6:	69 81       	ldd	r22, Y+1	; 0x01
     9f8:	7a 81       	ldd	r23, Y+2	; 0x02
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__mulsi3>
	curr_val += curr_ss;
     a02:	00 e0       	ldi	r16, 0x00	; 0
     a04:	10 e0       	ldi	r17, 0x00	; 0
     a06:	6e 0d       	add	r22, r14
     a08:	7f 1d       	adc	r23, r15
     a0a:	80 1f       	adc	r24, r16
     a0c:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     a0e:	66 15       	cp	r22, r6
     a10:	77 05       	cpc	r23, r7
     a12:	88 05       	cpc	r24, r8
     a14:	99 05       	cpc	r25, r9
     a16:	2c f3       	brlt	.-54     	; 0x9e2 <Timebase_Timer_Delay_SubSeconds+0x6c>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	bf 90       	pop	r11
     a2a:	af 90       	pop	r10
     a2c:	9f 90       	pop	r9
     a2e:	8f 90       	pop	r8
     a30:	7f 90       	pop	r7
     a32:	6f 90       	pop	r6
     a34:	08 95       	ret

00000a36 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     a36:	bc 01       	movw	r22, r24
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a38:	e0 91 3f 01 	lds	r30, 0x013F
     a3c:	f0 91 40 01 	lds	r31, 0x0140

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a40:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a42:	80 85       	ldd	r24, Z+8	; 0x08
     a44:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a46:	78 94       	sei
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds_Atomic() != Timebase->Time.LastSample);
     a48:	24 81       	ldd	r18, Z+4	; 0x04
     a4a:	35 81       	ldd	r19, Z+5	; 0x05
     a4c:	46 81       	ldd	r20, Z+6	; 0x06
     a4e:	57 81       	ldd	r21, Z+7	; 0x07
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	b0 e0       	ldi	r27, 0x00	; 0
     a54:	82 17       	cp	r24, r18
     a56:	93 07       	cpc	r25, r19
     a58:	a4 07       	cpc	r26, r20
     a5a:	b5 07       	cpc	r27, r21
     a5c:	89 f7       	brne	.-30     	; 0xa40 <Timebase_Timer_Await_SubSeconds+0xa>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a5e:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a60:	80 85       	ldd	r24, Z+8	; 0x08
     a62:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a64:	78 94       	sei


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds_Atomic() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds_Atomic() + value;
     a66:	86 0f       	add	r24, r22
     a68:	97 1f       	adc	r25, r23
     a6a:	a0 e0       	ldi	r26, 0x00	; 0
     a6c:	b0 e0       	ldi	r27, 0x00	; 0
     a6e:	84 83       	std	Z+4, r24	; 0x04
     a70:	95 83       	std	Z+5, r25	; 0x05
     a72:	a6 83       	std	Z+6, r26	; 0x06
     a74:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     a76:	24 81       	ldd	r18, Z+4	; 0x04
     a78:	35 81       	ldd	r19, Z+5	; 0x05
     a7a:	46 81       	ldd	r20, Z+6	; 0x06
     a7c:	57 81       	ldd	r21, Z+7	; 0x07
     a7e:	81 81       	ldd	r24, Z+1	; 0x01
     a80:	92 81       	ldd	r25, Z+2	; 0x02
     a82:	a0 e0       	ldi	r26, 0x00	; 0
     a84:	b0 e0       	ldi	r27, 0x00	; 0
     a86:	28 17       	cp	r18, r24
     a88:	39 07       	cpc	r19, r25
     a8a:	4a 07       	cpc	r20, r26
     a8c:	5b 07       	cpc	r21, r27
     a8e:	84 f0       	brlt	.+32     	; 0xab0 <Timebase_Timer_Await_SubSeconds+0x7a>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     a90:	24 81       	ldd	r18, Z+4	; 0x04
     a92:	35 81       	ldd	r19, Z+5	; 0x05
     a94:	46 81       	ldd	r20, Z+6	; 0x06
     a96:	57 81       	ldd	r21, Z+7	; 0x07
     a98:	81 81       	ldd	r24, Z+1	; 0x01
     a9a:	92 81       	ldd	r25, Z+2	; 0x02
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	24 83       	std	Z+4, r18	; 0x04
     aaa:	35 83       	std	Z+5, r19	; 0x05
     aac:	46 83       	std	Z+6, r20	; 0x06
     aae:	57 83       	std	Z+7, r21	; 0x07
     ab0:	08 95       	ret

00000ab2 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ab2:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     ab4:	e0 91 3f 01 	lds	r30, 0x013F
     ab8:	f0 91 40 01 	lds	r31, 0x0140
     abc:	22 85       	ldd	r18, Z+10	; 0x0a
     abe:	33 85       	ldd	r19, Z+11	; 0x0b
     ac0:	44 85       	ldd	r20, Z+12	; 0x0c
     ac2:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ac4:	78 94       	sei


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds_Atomic();
  target_s += value;
     ac6:	a0 e0       	ldi	r26, 0x00	; 0
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	82 0f       	add	r24, r18
     acc:	93 1f       	adc	r25, r19
     ace:	a4 1f       	adc	r26, r20
     ad0:	b5 1f       	adc	r27, r21
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	06 c0       	rjmp	.+12     	; 0xae8 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     adc:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     ade:	22 85       	ldd	r18, Z+10	; 0x0a
     ae0:	33 85       	ldd	r19, Z+11	; 0x0b
     ae2:	44 85       	ldd	r20, Z+12	; 0x0c
     ae4:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ae6:	78 94       	sei

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds_Atomic();
  target_s += value;
  while(target_s > curr_s){
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	4a 07       	cpc	r20, r26
     aee:	5b 07       	cpc	r21, r27
     af0:	ac f3       	brlt	.-22     	; 0xadc <Timebase_Timer_Delay_Seconds+0x2a>
    curr_s = Timebase_Timer_Get_Seconds_Atomic();
  }
}
     af2:	08 95       	ret

00000af4 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     af4:	e0 91 3f 01 	lds	r30, 0x013F
     af8:	f0 91 40 01 	lds	r31, 0x0140
     afc:	16 86       	std	Z+14, r1	; 0x0e
     afe:	17 86       	std	Z+15, r1	; 0x0f
     b00:	10 8a       	std	Z+16, r1	; 0x10
     b02:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     b04:	12 8a       	std	Z+18, r1	; 0x12
     b06:	13 8a       	std	Z+19, r1	; 0x13
     b08:	14 8a       	std	Z+20, r1	; 0x14
     b0a:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b0c:	16 8a       	std	Z+22, r1	; 0x16
}
     b0e:	08 95       	ret

00000b10 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     b10:	e0 91 3f 01 	lds	r30, 0x013F
     b14:	f0 91 40 01 	lds	r31, 0x0140
     b18:	86 89       	ldd	r24, Z+22	; 0x16
     b1a:	88 23       	and	r24, r24
     b1c:	b1 f4       	brne	.+44     	; 0xb4a <Timebase_Window_Timer_Start+0x3a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b1e:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b20:	82 85       	ldd	r24, Z+10	; 0x0a
     b22:	93 85       	ldd	r25, Z+11	; 0x0b
     b24:	a4 85       	ldd	r26, Z+12	; 0x0c
     b26:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b28:	78 94       	sei
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds_Atomic();
     b2a:	86 87       	std	Z+14, r24	; 0x0e
     b2c:	97 87       	std	Z+15, r25	; 0x0f
     b2e:	a0 8b       	std	Z+16, r26	; 0x10
     b30:	b1 8b       	std	Z+17, r27	; 0x11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b32:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     b34:	80 85       	ldd	r24, Z+8	; 0x08
     b36:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b38:	78 94       	sei
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds_Atomic();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds_Atomic();
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	82 8b       	std	Z+18, r24	; 0x12
     b40:	93 8b       	std	Z+19, r25	; 0x13
     b42:	a4 8b       	std	Z+20, r26	; 0x14
     b44:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	86 8b       	std	Z+22, r24	; 0x16
     b4a:	08 95       	ret

00000b4c <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     b4c:	ef 92       	push	r14
     b4e:	ff 92       	push	r15
     b50:	0f 93       	push	r16
     b52:	1f 93       	push	r17
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     b58:	c0 91 3f 01 	lds	r28, 0x013F
     b5c:	d0 91 40 01 	lds	r29, 0x0140
     b60:	8e 89       	ldd	r24, Y+22	; 0x16
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	21 f0       	breq	.+8      	; 0xb6e <Timebase_Window_Timer_Get_Interval+0x22>
     b66:	ee 24       	eor	r14, r14
     b68:	ff 24       	eor	r15, r15
     b6a:	87 01       	movw	r16, r14
     b6c:	27 c0       	rjmp	.+78     	; 0xbbc <Timebase_Window_Timer_Get_Interval+0x70>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b6e:	f8 94       	cli
}

int32_t Timebase_Timer_Get_Seconds_Atomic(void){
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b70:	2a 85       	ldd	r18, Y+10	; 0x0a
     b72:	3b 85       	ldd	r19, Y+11	; 0x0b
     b74:	4c 85       	ldd	r20, Y+12	; 0x0c
     b76:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b78:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b7a:	f8 94       	cli
}

uint16_t Timebase_Timer_Get_SubSeconds_Atomic(void){
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     b7c:	88 85       	ldd	r24, Y+8	; 0x08
     b7e:	99 85       	ldd	r25, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b80:	78 94       	sei

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds_Atomic();
    curr_ss = Timebase_Timer_Get_SubSeconds_Atomic();
     b82:	7c 01       	movw	r14, r24
     b84:	00 e0       	ldi	r16, 0x00	; 0
     b86:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     b88:	8e 85       	ldd	r24, Y+14	; 0x0e
     b8a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b8c:	a8 89       	ldd	r26, Y+16	; 0x10
     b8e:	b9 89       	ldd	r27, Y+17	; 0x11
     b90:	28 1b       	sub	r18, r24
     b92:	39 0b       	sbc	r19, r25
     b94:	4a 0b       	sbc	r20, r26
     b96:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     b98:	69 81       	ldd	r22, Y+1	; 0x01
     b9a:	7a 81       	ldd	r23, Y+2	; 0x02
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__mulsi3>
	curr_s += curr_ss;
     ba4:	2a 89       	ldd	r18, Y+18	; 0x12
     ba6:	3b 89       	ldd	r19, Y+19	; 0x13
     ba8:	4c 89       	ldd	r20, Y+20	; 0x14
     baa:	5d 89       	ldd	r21, Y+21	; 0x15
     bac:	e2 1a       	sub	r14, r18
     bae:	f3 0a       	sbc	r15, r19
     bb0:	04 0b       	sbc	r16, r20
     bb2:	15 0b       	sbc	r17, r21
     bb4:	e6 0e       	add	r14, r22
     bb6:	f7 1e       	adc	r15, r23
     bb8:	08 1f       	adc	r16, r24
     bba:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     bbc:	b7 01       	movw	r22, r14
     bbe:	c8 01       	movw	r24, r16
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	08 95       	ret

00000bce <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     bce:	0e 94 a6 05 	call	0xb4c	; 0xb4c <Timebase_Window_Timer_Get_Interval>
     bd2:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bd4:	e0 91 3f 01 	lds	r30, 0x013F
     bd8:	f0 91 40 01 	lds	r31, 0x0140
     bdc:	86 89       	ldd	r24, Z+22	; 0x16
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	49 f4       	brne	.+18     	; 0xbf4 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     be2:	16 86       	std	Z+14, r1	; 0x0e
     be4:	17 86       	std	Z+15, r1	; 0x0f
     be6:	10 8a       	std	Z+16, r1	; 0x10
     be8:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     bea:	12 8a       	std	Z+18, r1	; 0x12
     bec:	13 8a       	std	Z+19, r1	; 0x13
     bee:	14 8a       	std	Z+20, r1	; 0x14
     bf0:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     bf2:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     bf4:	82 2f       	mov	r24, r18
     bf6:	08 95       	ret

00000bf8 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
     bf8:	e0 91 3f 01 	lds	r30, 0x013F
     bfc:	f0 91 40 01 	lds	r31, 0x0140
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2d e0       	ldi	r18, 0x0D	; 13
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	ac 01       	movw	r20, r24
     c08:	42 9f       	mul	r20, r18
     c0a:	c0 01       	movw	r24, r0
     c0c:	43 9f       	mul	r20, r19
     c0e:	90 0d       	add	r25, r0
     c10:	52 9f       	mul	r21, r18
     c12:	90 0d       	add	r25, r0
     c14:	11 24       	eor	r1, r1
     c16:	e8 0f       	add	r30, r24
     c18:	f9 1f       	adc	r31, r25
     c1a:	e2 59       	subi	r30, 0x92	; 146
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	80 81       	ld	r24, Z
     c20:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
     c22:	8f 70       	andi	r24, 0x0F	; 15
     c24:	08 95       	ret

00000c26 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     c26:	e0 91 3f 01 	lds	r30, 0x013F
     c2a:	f0 91 40 01 	lds	r31, 0x0140
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	2d e0       	ldi	r18, 0x0D	; 13
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	ac 01       	movw	r20, r24
     c36:	42 9f       	mul	r20, r18
     c38:	c0 01       	movw	r24, r0
     c3a:	43 9f       	mul	r20, r19
     c3c:	90 0d       	add	r25, r0
     c3e:	52 9f       	mul	r21, r18
     c40:	90 0d       	add	r25, r0
     c42:	11 24       	eor	r1, r1
     c44:	e8 0f       	add	r30, r24
     c46:	f9 1f       	adc	r31, r25
     c48:	e2 59       	subi	r30, 0x92	; 146
     c4a:	ff 4f       	sbci	r31, 0xFF	; 255
     c4c:	6f 70       	andi	r22, 0x0F	; 15
     c4e:	66 0f       	add	r22, r22
     c50:	80 81       	ld	r24, Z
     c52:	81 7e       	andi	r24, 0xE1	; 225
     c54:	86 2b       	or	r24, r22
     c56:	80 83       	st	Z, r24
}
     c58:	08 95       	ret

00000c5a <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
     c5a:	e0 91 3f 01 	lds	r30, 0x013F
     c5e:	f0 91 40 01 	lds	r31, 0x0140
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	2d e0       	ldi	r18, 0x0D	; 13
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	ac 01       	movw	r20, r24
     c6a:	42 9f       	mul	r20, r18
     c6c:	c0 01       	movw	r24, r0
     c6e:	43 9f       	mul	r20, r19
     c70:	90 0d       	add	r25, r0
     c72:	52 9f       	mul	r21, r18
     c74:	90 0d       	add	r25, r0
     c76:	11 24       	eor	r1, r1
     c78:	e8 0f       	add	r30, r24
     c7a:	f9 1f       	adc	r31, r25
     c7c:	ed 58       	subi	r30, 0x8D	; 141
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	60 81       	ld	r22, Z
     c82:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	08 95       	ret

00000c8a <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     c8a:	e0 91 3f 01 	lds	r30, 0x013F
     c8e:	f0 91 40 01 	lds	r31, 0x0140
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	2d e0       	ldi	r18, 0x0D	; 13
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	dc 01       	movw	r26, r24
     c9a:	a2 9f       	mul	r26, r18
     c9c:	c0 01       	movw	r24, r0
     c9e:	a3 9f       	mul	r26, r19
     ca0:	90 0d       	add	r25, r0
     ca2:	b2 9f       	mul	r27, r18
     ca4:	90 0d       	add	r25, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	e8 0f       	add	r30, r24
     caa:	f9 1f       	adc	r31, r25
     cac:	ed 58       	subi	r30, 0x8D	; 141
     cae:	ff 4f       	sbci	r31, 0xFF	; 255
     cb0:	40 83       	st	Z, r20
     cb2:	51 83       	std	Z+1, r21	; 0x01
     cb4:	62 83       	std	Z+2, r22	; 0x02
     cb6:	73 83       	std	Z+3, r23	; 0x03
}
     cb8:	08 95       	ret

00000cba <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
     cba:	e0 91 3f 01 	lds	r30, 0x013F
     cbe:	f0 91 40 01 	lds	r31, 0x0140
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	2d e0       	ldi	r18, 0x0D	; 13
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	ac 01       	movw	r20, r24
     cca:	42 9f       	mul	r20, r18
     ccc:	c0 01       	movw	r24, r0
     cce:	43 9f       	mul	r20, r19
     cd0:	90 0d       	add	r25, r0
     cd2:	52 9f       	mul	r21, r18
     cd4:	90 0d       	add	r25, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	e1 59       	subi	r30, 0x91	; 145
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	08 95       	ret

00000cea <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     cea:	e0 91 3f 01 	lds	r30, 0x013F
     cee:	f0 91 40 01 	lds	r31, 0x0140
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2d e0       	ldi	r18, 0x0D	; 13
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	dc 01       	movw	r26, r24
     cfa:	a2 9f       	mul	r26, r18
     cfc:	c0 01       	movw	r24, r0
     cfe:	a3 9f       	mul	r26, r19
     d00:	90 0d       	add	r25, r0
     d02:	b2 9f       	mul	r27, r18
     d04:	90 0d       	add	r25, r0
     d06:	11 24       	eor	r1, r1
     d08:	e8 0f       	add	r30, r24
     d0a:	f9 1f       	adc	r31, r25
     d0c:	e1 59       	subi	r30, 0x91	; 145
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	40 83       	st	Z, r20
     d12:	51 83       	std	Z+1, r21	; 0x01
     d14:	62 83       	std	Z+2, r22	; 0x02
     d16:	73 83       	std	Z+3, r23	; 0x03
}
     d18:	08 95       	ret

00000d1a <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
     d1a:	e0 91 3f 01 	lds	r30, 0x013F
     d1e:	f0 91 40 01 	lds	r31, 0x0140
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	2d e0       	ldi	r18, 0x0D	; 13
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	ac 01       	movw	r20, r24
     d2a:	42 9f       	mul	r20, r18
     d2c:	c0 01       	movw	r24, r0
     d2e:	43 9f       	mul	r20, r19
     d30:	90 0d       	add	r25, r0
     d32:	52 9f       	mul	r21, r18
     d34:	90 0d       	add	r25, r0
     d36:	11 24       	eor	r1, r1
     d38:	e8 0f       	add	r30, r24
     d3a:	f9 1f       	adc	r31, r25
     d3c:	e9 58       	subi	r30, 0x89	; 137
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	08 95       	ret

00000d4a <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     d4a:	e0 91 3f 01 	lds	r30, 0x013F
     d4e:	f0 91 40 01 	lds	r31, 0x0140
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     d56:	77 ff       	sbrs	r23, 7
     d58:	13 c0       	rjmp	.+38     	; 0xd80 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
     d5a:	8d e0       	ldi	r24, 0x0D	; 13
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	ac 01       	movw	r20, r24
     d60:	24 9f       	mul	r18, r20
     d62:	c0 01       	movw	r24, r0
     d64:	25 9f       	mul	r18, r21
     d66:	90 0d       	add	r25, r0
     d68:	34 9f       	mul	r19, r20
     d6a:	90 0d       	add	r25, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	e8 0f       	add	r30, r24
     d70:	f9 1f       	adc	r31, r25
     d72:	e9 58       	subi	r30, 0x89	; 137
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	10 82       	st	Z, r1
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	12 82       	std	Z+2, r1	; 0x02
     d7c:	13 82       	std	Z+3, r1	; 0x03
     d7e:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
     d80:	8d e0       	ldi	r24, 0x0D	; 13
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	dc 01       	movw	r26, r24
     d86:	2a 9f       	mul	r18, r26
     d88:	c0 01       	movw	r24, r0
     d8a:	2b 9f       	mul	r18, r27
     d8c:	90 0d       	add	r25, r0
     d8e:	3a 9f       	mul	r19, r26
     d90:	90 0d       	add	r25, r0
     d92:	11 24       	eor	r1, r1
     d94:	e8 0f       	add	r30, r24
     d96:	f9 1f       	adc	r31, r25
     d98:	e9 58       	subi	r30, 0x89	; 137
     d9a:	ff 4f       	sbci	r31, 0xFF	; 255
     d9c:	40 83       	st	Z, r20
     d9e:	51 83       	std	Z+1, r21	; 0x01
     da0:	62 83       	std	Z+2, r22	; 0x02
     da2:	73 83       	std	Z+3, r23	; 0x03
     da4:	08 95       	ret

00000da6 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
     da6:	e0 91 3f 01 	lds	r30, 0x013F
     daa:	f0 91 40 01 	lds	r31, 0x0140
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	2d e0       	ldi	r18, 0x0D	; 13
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	ac 01       	movw	r20, r24
     db6:	42 9f       	mul	r20, r18
     db8:	c0 01       	movw	r24, r0
     dba:	43 9f       	mul	r20, r19
     dbc:	90 0d       	add	r25, r0
     dbe:	52 9f       	mul	r21, r18
     dc0:	90 0d       	add	r25, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	e2 59       	subi	r30, 0x92	; 146
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
     dce:	81 70       	andi	r24, 0x01	; 1
     dd0:	08 95       	ret

00000dd2 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
     dd2:	e0 91 3f 01 	lds	r30, 0x013F
     dd6:	f0 91 40 01 	lds	r31, 0x0140
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	2d e0       	ldi	r18, 0x0D	; 13
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	ac 01       	movw	r20, r24
     de2:	42 9f       	mul	r20, r18
     de4:	c0 01       	movw	r24, r0
     de6:	43 9f       	mul	r20, r19
     de8:	90 0d       	add	r25, r0
     dea:	52 9f       	mul	r21, r18
     dec:	90 0d       	add	r25, r0
     dee:	11 24       	eor	r1, r1
     df0:	e8 0f       	add	r30, r24
     df2:	f9 1f       	adc	r31, r25
     df4:	e2 59       	subi	r30, 0x92	; 146
     df6:	ff 4f       	sbci	r31, 0xFF	; 255
     df8:	80 81       	ld	r24, Z
     dfa:	81 60       	ori	r24, 0x01	; 1
     dfc:	80 83       	st	Z, r24
}
     dfe:	08 95       	ret

00000e00 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e00:	e0 91 3f 01 	lds	r30, 0x013F
     e04:	f0 91 40 01 	lds	r31, 0x0140
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	2d e0       	ldi	r18, 0x0D	; 13
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	ac 01       	movw	r20, r24
     e10:	42 9f       	mul	r20, r18
     e12:	c0 01       	movw	r24, r0
     e14:	43 9f       	mul	r20, r19
     e16:	90 0d       	add	r25, r0
     e18:	52 9f       	mul	r21, r18
     e1a:	90 0d       	add	r25, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	e2 59       	subi	r30, 0x92	; 146
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	8e 7f       	andi	r24, 0xFE	; 254
     e2a:	80 83       	st	Z, r24
}
     e2c:	08 95       	ret

00000e2e <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e2e:	e0 91 3f 01 	lds	r30, 0x013F
     e32:	f0 91 40 01 	lds	r31, 0x0140
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	2d e0       	ldi	r18, 0x0D	; 13
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	ac 01       	movw	r20, r24
     e3e:	42 9f       	mul	r20, r18
     e40:	c0 01       	movw	r24, r0
     e42:	43 9f       	mul	r20, r19
     e44:	90 0d       	add	r25, r0
     e46:	52 9f       	mul	r21, r18
     e48:	90 0d       	add	r25, r0
     e4a:	11 24       	eor	r1, r1
     e4c:	e8 0f       	add	r30, r24
     e4e:	f9 1f       	adc	r31, r25
     e50:	e1 59       	subi	r30, 0x91	; 145
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	11 92       	st	Z+, r1
     e56:	11 92       	st	Z+, r1
     e58:	11 92       	st	Z+, r1
     e5a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e5c:	10 82       	st	Z, r1
     e5e:	11 82       	std	Z+1, r1	; 0x01
     e60:	12 82       	std	Z+2, r1	; 0x02
     e62:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e64:	35 97       	sbiw	r30, 0x05	; 5
     e66:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e68:	80 7e       	andi	r24, 0xE0	; 224
     e6a:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
     e6c:	08 95       	ret

00000e6e <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e6e:	e0 91 3f 01 	lds	r30, 0x013F
     e72:	f0 91 40 01 	lds	r31, 0x0140
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	2d e0       	ldi	r18, 0x0D	; 13
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	ac 01       	movw	r20, r24
     e7e:	42 9f       	mul	r20, r18
     e80:	c0 01       	movw	r24, r0
     e82:	43 9f       	mul	r20, r19
     e84:	90 0d       	add	r25, r0
     e86:	52 9f       	mul	r21, r18
     e88:	90 0d       	add	r25, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	e8 0f       	add	r30, r24
     e8e:	f9 1f       	adc	r31, r25
     e90:	e1 59       	subi	r30, 0x91	; 145
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	11 92       	st	Z+, r1
     e96:	11 92       	st	Z+, r1
     e98:	11 92       	st	Z+, r1
     e9a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e9c:	10 82       	st	Z, r1
     e9e:	11 82       	std	Z+1, r1	; 0x01
     ea0:	12 82       	std	Z+2, r1	; 0x02
     ea2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ea4:	35 97       	sbiw	r30, 0x05	; 5
     ea6:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     ea8:	80 7e       	andi	r24, 0xE0	; 224
     eaa:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
     eac:	08 95       	ret

00000eae <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     eae:	e0 91 3f 01 	lds	r30, 0x013F
     eb2:	f0 91 40 01 	lds	r31, 0x0140
     eb6:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     eb8:	2d e0       	ldi	r18, 0x0D	; 13
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	ac 01       	movw	r20, r24
     ebe:	42 9f       	mul	r20, r18
     ec0:	c0 01       	movw	r24, r0
     ec2:	43 9f       	mul	r20, r19
     ec4:	90 0d       	add	r25, r0
     ec6:	52 9f       	mul	r21, r18
     ec8:	90 0d       	add	r25, r0
     eca:	11 24       	eor	r1, r1
     ecc:	e8 0f       	add	r30, r24
     ece:	f9 1f       	adc	r31, r25
     ed0:	e2 59       	subi	r30, 0x92	; 146
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	90 81       	ld	r25, Z
     ed6:	89 2f       	mov	r24, r25
     ed8:	86 95       	lsr	r24
     eda:	8f 70       	andi	r24, 0x0F	; 15
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	19 f0       	breq	.+6      	; 0xee6 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ee0:	91 7e       	andi	r25, 0xE1	; 225
     ee2:	92 60       	ori	r25, 0x02	; 2
     ee4:	90 83       	st	Z, r25
     ee6:	08 95       	ret

00000ee8 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     ee8:	e0 91 3f 01 	lds	r30, 0x013F
     eec:	f0 91 40 01 	lds	r31, 0x0140
     ef0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     ef2:	2d e0       	ldi	r18, 0x0D	; 13
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	ac 01       	movw	r20, r24
     ef8:	42 9f       	mul	r20, r18
     efa:	c0 01       	movw	r24, r0
     efc:	43 9f       	mul	r20, r19
     efe:	90 0d       	add	r25, r0
     f00:	52 9f       	mul	r21, r18
     f02:	90 0d       	add	r25, r0
     f04:	11 24       	eor	r1, r1
     f06:	e8 0f       	add	r30, r24
     f08:	f9 1f       	adc	r31, r25
     f0a:	e2 59       	subi	r30, 0x92	; 146
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	90 81       	ld	r25, Z
     f10:	89 2f       	mov	r24, r25
     f12:	86 95       	lsr	r24
     f14:	8f 70       	andi	r24, 0x0F	; 15
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	19 f0       	breq	.+6      	; 0xf20 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f1a:	91 7e       	andi	r25, 0xE1	; 225
     f1c:	94 60       	ori	r25, 0x04	; 4
     f1e:	90 83       	st	Z, r25
     f20:	08 95       	ret

00000f22 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     f26:	a0 91 3f 01 	lds	r26, 0x013F
     f2a:	b0 91 40 01 	lds	r27, 0x0140
     f2e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     f30:	2d e0       	ldi	r18, 0x0D	; 13
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	82 9f       	mul	r24, r18
     f36:	f0 01       	movw	r30, r0
     f38:	83 9f       	mul	r24, r19
     f3a:	f0 0d       	add	r31, r0
     f3c:	92 9f       	mul	r25, r18
     f3e:	f0 0d       	add	r31, r0
     f40:	11 24       	eor	r1, r1
     f42:	ea 0f       	add	r30, r26
     f44:	fb 1f       	adc	r31, r27
     f46:	ef 01       	movw	r28, r30
     f48:	c2 59       	subi	r28, 0x92	; 146
     f4a:	df 4f       	sbci	r29, 0xFF	; 255
     f4c:	88 81       	ld	r24, Y
     f4e:	86 95       	lsr	r24
     f50:	8f 70       	andi	r24, 0x0F	; 15
     f52:	e9 f4       	brne	.+58     	; 0xf8e <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f54:	ed 58       	subi	r30, 0x8D	; 141
     f56:	ff 4f       	sbci	r31, 0xFF	; 255
     f58:	40 83       	st	Z, r20
     f5a:	51 83       	std	Z+1, r21	; 0x01
     f5c:	62 83       	std	Z+2, r22	; 0x02
     f5e:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f60:	1a 96       	adiw	r26, 0x0a	; 10
     f62:	8d 91       	ld	r24, X+
     f64:	9d 91       	ld	r25, X+
     f66:	0d 90       	ld	r0, X+
     f68:	bc 91       	ld	r27, X
     f6a:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f6c:	84 0f       	add	r24, r20
     f6e:	95 1f       	adc	r25, r21
     f70:	a6 1f       	adc	r26, r22
     f72:	b7 1f       	adc	r27, r23
     f74:	b2 93       	st	-Z, r27
     f76:	a2 93       	st	-Z, r26
     f78:	92 93       	st	-Z, r25
     f7a:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     f7c:	98 81       	ld	r25, Y
     f7e:	89 2f       	mov	r24, r25
     f80:	86 95       	lsr	r24
     f82:	8f 70       	andi	r24, 0x0F	; 15
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	19 f0       	breq	.+6      	; 0xf8e <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f88:	91 7e       	andi	r25, 0xE1	; 225
     f8a:	92 60       	ori	r25, 0x02	; 2
     f8c:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	08 95       	ret

00000f94 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f98:	e0 91 3f 01 	lds	r30, 0x013F
     f9c:	f0 91 40 01 	lds	r31, 0x0140
     fa0:	a8 2f       	mov	r26, r24
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	2d e0       	ldi	r18, 0x0D	; 13
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	e9 01       	movw	r28, r18
     faa:	ac 9f       	mul	r26, r28
     fac:	90 01       	movw	r18, r0
     fae:	ad 9f       	mul	r26, r29
     fb0:	30 0d       	add	r19, r0
     fb2:	bc 9f       	mul	r27, r28
     fb4:	30 0d       	add	r19, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	e1 59       	subi	r30, 0x91	; 145
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	11 92       	st	Z+, r1
     fc2:	11 92       	st	Z+, r1
     fc4:	11 92       	st	Z+, r1
     fc6:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     fc8:	10 82       	st	Z, r1
     fca:	11 82       	std	Z+1, r1	; 0x01
     fcc:	12 82       	std	Z+2, r1	; 0x02
     fce:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     fd0:	35 97       	sbiw	r30, 0x05	; 5
     fd2:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     fd4:	90 7e       	andi	r25, 0xE0	; 224
     fd6:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
     fd8:	0e 94 91 07 	call	0xf22	; 0xf22 <Timebase_DownCounter_Set_Securely>
} 
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     fea:	a0 91 3f 01 	lds	r26, 0x013F
     fee:	b0 91 40 01 	lds	r27, 0x0140
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	2d e0       	ldi	r18, 0x0D	; 13
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	82 9f       	mul	r24, r18
     ffa:	f0 01       	movw	r30, r0
     ffc:	83 9f       	mul	r24, r19
     ffe:	f0 0d       	add	r31, r0
    1000:	92 9f       	mul	r25, r18
    1002:	f0 0d       	add	r31, r0
    1004:	11 24       	eor	r1, r1
    1006:	ea 0f       	add	r30, r26
    1008:	fb 1f       	adc	r31, r27
    100a:	8f 01       	movw	r16, r30
    100c:	02 59       	subi	r16, 0x92	; 146
    100e:	1f 4f       	sbci	r17, 0xFF	; 255
    1010:	e8 01       	movw	r28, r16
    1012:	88 81       	ld	r24, Y
    1014:	86 95       	lsr	r24
    1016:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	69 f5       	brne	.+90     	; 0x1076 <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    101c:	1a 96       	adiw	r26, 0x0a	; 10
    101e:	2d 91       	ld	r18, X+
    1020:	3d 91       	ld	r19, X+
    1022:	4d 91       	ld	r20, X+
    1024:	5c 91       	ld	r21, X
    1026:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    1028:	bf 01       	movw	r22, r30
    102a:	61 59       	subi	r22, 0x91	; 145
    102c:	7f 4f       	sbci	r23, 0xFF	; 255
    102e:	eb 01       	movw	r28, r22
    1030:	88 81       	ld	r24, Y
    1032:	99 81       	ldd	r25, Y+1	; 0x01
    1034:	aa 81       	ldd	r26, Y+2	; 0x02
    1036:	bb 81       	ldd	r27, Y+3	; 0x03
    1038:	82 1b       	sub	r24, r18
    103a:	93 0b       	sbc	r25, r19
    103c:	a4 0b       	sbc	r26, r20
    103e:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1040:	ed 58       	subi	r30, 0x8D	; 141
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 83       	st	Z, r24
    1046:	91 83       	std	Z+1, r25	; 0x01
    1048:	a2 83       	std	Z+2, r26	; 0x02
    104a:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    104c:	18 16       	cp	r1, r24
    104e:	19 06       	cpc	r1, r25
    1050:	1a 06       	cpc	r1, r26
    1052:	1b 06       	cpc	r1, r27
    1054:	34 f1       	brlt	.+76     	; 0x10a2 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1056:	db 01       	movw	r26, r22
    1058:	1d 92       	st	X+, r1
    105a:	1d 92       	st	X+, r1
    105c:	1d 92       	st	X+, r1
    105e:	1c 92       	st	X, r1
    1060:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1062:	10 82       	st	Z, r1
    1064:	11 82       	std	Z+1, r1	; 0x01
    1066:	12 82       	std	Z+2, r1	; 0x02
    1068:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    106a:	e8 01       	movw	r28, r16
    106c:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    106e:	80 7e       	andi	r24, 0xE0	; 224
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	88 83       	st	Y, r24
    1074:	16 c0       	rjmp	.+44     	; 0x10a2 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	a1 f4       	brne	.+40     	; 0x10a2 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    107a:	1a 96       	adiw	r26, 0x0a	; 10
    107c:	8d 91       	ld	r24, X+
    107e:	9d 91       	ld	r25, X+
    1080:	0d 90       	ld	r0, X+
    1082:	bc 91       	ld	r27, X
    1084:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1086:	ed 58       	subi	r30, 0x8D	; 141
    1088:	ff 4f       	sbci	r31, 0xFF	; 255
    108a:	20 81       	ld	r18, Z
    108c:	31 81       	ldd	r19, Z+1	; 0x01
    108e:	42 81       	ldd	r20, Z+2	; 0x02
    1090:	53 81       	ldd	r21, Z+3	; 0x03
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	a4 1f       	adc	r26, r20
    1098:	b5 1f       	adc	r27, r21
    109a:	b2 93       	st	-Z, r27
    109c:	a2 93       	st	-Z, r26
    109e:	92 93       	st	-Z, r25
    10a0:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret

000010ac <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	e0 91 3f 01 	lds	r30, 0x013F
    10b2:	f0 91 40 01 	lds	r31, 0x0140
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	2d e0       	ldi	r18, 0x0D	; 13
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	bc 01       	movw	r22, r24
    10be:	62 9f       	mul	r22, r18
    10c0:	c0 01       	movw	r24, r0
    10c2:	63 9f       	mul	r22, r19
    10c4:	90 0d       	add	r25, r0
    10c6:	72 9f       	mul	r23, r18
    10c8:	90 0d       	add	r25, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	e8 0f       	add	r30, r24
    10ce:	f9 1f       	adc	r31, r25
    10d0:	e2 59       	subi	r30, 0x92	; 146
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	86 95       	lsr	r24
    10d8:	8f 70       	andi	r24, 0x0F	; 15
    10da:	84 30       	cpi	r24, 0x04	; 4
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <Timebase_DownCounter_Expired+0x34>
    10de:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    10e0:	84 2f       	mov	r24, r20
    10e2:	08 95       	ret

000010e4 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    10e4:	e0 91 3f 01 	lds	r30, 0x013F
    10e8:	f0 91 40 01 	lds	r31, 0x0140
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    10ee:	2d e0       	ldi	r18, 0x0D	; 13
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	ac 01       	movw	r20, r24
    10f4:	42 9f       	mul	r20, r18
    10f6:	c0 01       	movw	r24, r0
    10f8:	43 9f       	mul	r20, r19
    10fa:	90 0d       	add	r25, r0
    10fc:	52 9f       	mul	r21, r18
    10fe:	90 0d       	add	r25, r0
    1100:	11 24       	eor	r1, r1
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	df 01       	movw	r26, r30
    1108:	a2 59       	subi	r26, 0x92	; 146
    110a:	bf 4f       	sbci	r27, 0xFF	; 255
    110c:	8c 91       	ld	r24, X
    110e:	86 95       	lsr	r24
    1110:	8f 70       	andi	r24, 0x0F	; 15
    1112:	84 30       	cpi	r24, 0x04	; 4
    1114:	11 f0       	breq	.+4      	; 0x111a <Timebase_DownCounter_Expired_Event+0x36>
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    111a:	e1 59       	subi	r30, 0x91	; 145
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	11 92       	st	Z+, r1
    1120:	11 92       	st	Z+, r1
    1122:	11 92       	st	Z+, r1
    1124:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1126:	10 82       	st	Z, r1
    1128:	11 82       	std	Z+1, r1	; 0x01
    112a:	12 82       	std	Z+2, r1	; 0x02
    112c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    112e:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1130:	80 7e       	andi	r24, 0xE0	; 224
    1132:	8c 93       	st	X, r24
    1134:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1136:	08 95       	ret

00001138 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    113c:	c0 91 3f 01 	lds	r28, 0x013F
    1140:	d0 91 40 01 	lds	r29, 0x0140
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    1148:	8d e0       	ldi	r24, 0x0D	; 13
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	28 9f       	mul	r18, r24
    114e:	f0 01       	movw	r30, r0
    1150:	29 9f       	mul	r18, r25
    1152:	f0 0d       	add	r31, r0
    1154:	38 9f       	mul	r19, r24
    1156:	f0 0d       	add	r31, r0
    1158:	11 24       	eor	r1, r1
    115a:	ec 0f       	add	r30, r28
    115c:	fd 1f       	adc	r31, r29
    115e:	e2 59       	subi	r30, 0x92	; 146
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 81       	ld	r24, Z
    1164:	ee 56       	subi	r30, 0x6E	; 110
    1166:	f0 40       	sbci	r31, 0x00	; 0
    1168:	80 fd       	sbrc	r24, 0
    116a:	25 c0       	rjmp	.+74     	; 0x11b6 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    116c:	ed 58       	subi	r30, 0x8D	; 141
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	81 91       	ld	r24, Z+
    1172:	91 91       	ld	r25, Z+
    1174:	a1 91       	ld	r26, Z+
    1176:	b1 91       	ld	r27, Z+
    1178:	84 1b       	sub	r24, r20
    117a:	95 0b       	sbc	r25, r21
    117c:	a6 0b       	sbc	r26, r22
    117e:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1180:	b7 ff       	sbrs	r27, 7
    1182:	05 c0       	rjmp	.+10     	; 0x118e <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    1184:	10 82       	st	Z, r1
    1186:	11 82       	std	Z+1, r1	; 0x01
    1188:	12 82       	std	Z+2, r1	; 0x02
    118a:	13 82       	std	Z+3, r1	; 0x03
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    118e:	80 83       	st	Z, r24
    1190:	91 83       	std	Z+1, r25	; 0x01
    1192:	a2 83       	std	Z+2, r26	; 0x02
    1194:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1196:	8d e0       	ldi	r24, 0x0D	; 13
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	28 9f       	mul	r18, r24
    119c:	f0 01       	movw	r30, r0
    119e:	29 9f       	mul	r18, r25
    11a0:	f0 0d       	add	r31, r0
    11a2:	38 9f       	mul	r19, r24
    11a4:	f0 0d       	add	r31, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	ec 0f       	add	r30, r28
    11aa:	fd 1f       	adc	r31, r29
    11ac:	e2 59       	subi	r30, 0x92	; 146
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	81 60       	ori	r24, 0x01	; 1
    11b4:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	08 95       	ret

000011bc <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    11bc:	e0 91 3f 01 	lds	r30, 0x013F
    11c0:	f0 91 40 01 	lds	r31, 0x0140
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    11c6:	2d e0       	ldi	r18, 0x0D	; 13
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	ac 01       	movw	r20, r24
    11cc:	42 9f       	mul	r20, r18
    11ce:	c0 01       	movw	r24, r0
    11d0:	43 9f       	mul	r20, r19
    11d2:	90 0d       	add	r25, r0
    11d4:	52 9f       	mul	r21, r18
    11d6:	90 0d       	add	r25, r0
    11d8:	11 24       	eor	r1, r1
    11da:	e8 0f       	add	r30, r24
    11dc:	f9 1f       	adc	r31, r25
    11de:	df 01       	movw	r26, r30
    11e0:	a9 58       	subi	r26, 0x89	; 137
    11e2:	bf 4f       	sbci	r27, 0xFF	; 255
    11e4:	ed 58       	subi	r30, 0x8D	; 141
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	20 81       	ld	r18, Z
    11ea:	31 81       	ldd	r19, Z+1	; 0x01
    11ec:	42 81       	ldd	r20, Z+2	; 0x02
    11ee:	53 81       	ldd	r21, Z+3	; 0x03
    11f0:	8d 91       	ld	r24, X+
    11f2:	9d 91       	ld	r25, X+
    11f4:	0d 90       	ld	r0, X+
    11f6:	bc 91       	ld	r27, X
    11f8:	a0 2d       	mov	r26, r0
    11fa:	28 1b       	sub	r18, r24
    11fc:	39 0b       	sbc	r19, r25
    11fe:	4a 0b       	sbc	r20, r26
    1200:	5b 0b       	sbc	r21, r27
    1202:	57 ff       	sbrs	r21, 7
    1204:	04 c0       	rjmp	.+8      	; 0x120e <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    120e:	b9 01       	movw	r22, r18
    1210:	ca 01       	movw	r24, r20
    1212:	08 95       	ret

00001214 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1218:	c0 91 3f 01 	lds	r28, 0x013F
    121c:	d0 91 40 01 	lds	r29, 0x0140
    1220:	68 2f       	mov	r22, r24
    1222:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1224:	8d e0       	ldi	r24, 0x0D	; 13
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	68 9f       	mul	r22, r24
    122a:	f0 01       	movw	r30, r0
    122c:	69 9f       	mul	r22, r25
    122e:	f0 0d       	add	r31, r0
    1230:	78 9f       	mul	r23, r24
    1232:	f0 0d       	add	r31, r0
    1234:	11 24       	eor	r1, r1
    1236:	ec 0f       	add	r30, r28
    1238:	fd 1f       	adc	r31, r29
    123a:	df 01       	movw	r26, r30
    123c:	a9 58       	subi	r26, 0x89	; 137
    123e:	bf 4f       	sbci	r27, 0xFF	; 255
    1240:	ed 58       	subi	r30, 0x8D	; 141
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	20 81       	ld	r18, Z
    1246:	31 81       	ldd	r19, Z+1	; 0x01
    1248:	42 81       	ldd	r20, Z+2	; 0x02
    124a:	53 81       	ldd	r21, Z+3	; 0x03
    124c:	8d 91       	ld	r24, X+
    124e:	9d 91       	ld	r25, X+
    1250:	0d 90       	ld	r0, X+
    1252:	bc 91       	ld	r27, X
    1254:	a0 2d       	mov	r26, r0
    1256:	28 1b       	sub	r18, r24
    1258:	39 0b       	sbc	r19, r25
    125a:	4a 0b       	sbc	r20, r26
    125c:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    125e:	57 fd       	sbrc	r21, 7
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    1262:	21 15       	cp	r18, r1
    1264:	31 05       	cpc	r19, r1
    1266:	41 05       	cpc	r20, r1
    1268:	51 05       	cpc	r21, r1
    126a:	11 f0       	breq	.+4      	; 0x1270 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <Timebase_DownCounter_Period_Value_Expired+0x84>
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	8d e0       	ldi	r24, 0x0D	; 13
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	ac 01       	movw	r20, r24
    1278:	64 9f       	mul	r22, r20
    127a:	c0 01       	movw	r24, r0
    127c:	65 9f       	mul	r22, r21
    127e:	90 0d       	add	r25, r0
    1280:	74 9f       	mul	r23, r20
    1282:	90 0d       	add	r25, r0
    1284:	11 24       	eor	r1, r1
    1286:	c8 0f       	add	r28, r24
    1288:	d9 1f       	adc	r29, r25
    128a:	c2 59       	subi	r28, 0x92	; 146
    128c:	df 4f       	sbci	r29, 0xFF	; 255
    128e:	88 81       	ld	r24, Y
    1290:	80 ff       	sbrs	r24, 0
    1292:	21 e0       	ldi	r18, 0x01	; 1
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1298:	82 2f       	mov	r24, r18
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	08 95       	ret

000012a0 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    12a0:	1f 93       	push	r17
    12a2:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    12a4:	0e 94 0a 09 	call	0x1214	; 0x1214 <Timebase_DownCounter_Period_Value_Expired>
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	18 c0       	rjmp	.+48     	; 0x12e0 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    12b0:	e0 91 3f 01 	lds	r30, 0x013F
    12b4:	f0 91 40 01 	lds	r31, 0x0140
    12b8:	21 2f       	mov	r18, r17
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	8d e0       	ldi	r24, 0x0D	; 13
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	ac 01       	movw	r20, r24
    12c2:	24 9f       	mul	r18, r20
    12c4:	c0 01       	movw	r24, r0
    12c6:	25 9f       	mul	r18, r21
    12c8:	90 0d       	add	r25, r0
    12ca:	34 9f       	mul	r19, r20
    12cc:	90 0d       	add	r25, r0
    12ce:	11 24       	eor	r1, r1
    12d0:	e8 0f       	add	r30, r24
    12d2:	f9 1f       	adc	r31, r25
    12d4:	e2 59       	subi	r30, 0x92	; 146
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	80 83       	st	Z, r24
    12de:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    12e0:	1f 91       	pop	r17
    12e2:	08 95       	ret

000012e4 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    12e4:	1f 93       	push	r17
    12e6:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    12e8:	81 2f       	mov	r24, r17
    12ea:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    12ee:	1f 5f       	subi	r17, 0xFF	; 255
    12f0:	15 30       	cpi	r17, 0x05	; 5
    12f2:	d1 f7       	brne	.-12     	; 0x12e8 <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    12f4:	1f 91       	pop	r17
    12f6:	08 95       	ret

000012f8 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    12f8:	40 91 3f 01 	lds	r20, 0x013F
    12fc:	50 91 40 01 	lds	r21, 0x0140
    1300:	da 01       	movw	r26, r20
    1302:	a1 59       	subi	r26, 0x91	; 145
    1304:	bf 4f       	sbci	r27, 0xFF	; 255
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    130a:	6d e0       	ldi	r22, 0x0D	; 13
    130c:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    130e:	1d 92       	st	X+, r1
    1310:	1d 92       	st	X+, r1
    1312:	1d 92       	st	X+, r1
    1314:	1c 92       	st	X, r1
    1316:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1318:	14 96       	adiw	r26, 0x04	; 4
    131a:	1d 92       	st	X+, r1
    131c:	1d 92       	st	X+, r1
    131e:	1d 92       	st	X+, r1
    1320:	1c 92       	st	X, r1
    1322:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1324:	26 9f       	mul	r18, r22
    1326:	f0 01       	movw	r30, r0
    1328:	27 9f       	mul	r18, r23
    132a:	f0 0d       	add	r31, r0
    132c:	36 9f       	mul	r19, r22
    132e:	f0 0d       	add	r31, r0
    1330:	11 24       	eor	r1, r1
    1332:	e4 0f       	add	r30, r20
    1334:	f5 1f       	adc	r31, r21
    1336:	e2 59       	subi	r30, 0x92	; 146
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    133c:	80 7e       	andi	r24, 0xE0	; 224
    133e:	80 83       	st	Z, r24
    1340:	2f 5f       	subi	r18, 0xFF	; 255
    1342:	3f 4f       	sbci	r19, 0xFF	; 255
    1344:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    1346:	25 30       	cpi	r18, 0x05	; 5
    1348:	31 05       	cpc	r19, r1
    134a:	09 f7       	brne	.-62     	; 0x130e <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    134c:	08 95       	ret

0000134e <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    134e:	e0 91 3f 01 	lds	r30, 0x013F
    1352:	f0 91 40 01 	lds	r31, 0x0140
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9c 01       	movw	r18, r24
    135a:	44 e0       	ldi	r20, 0x04	; 4
    135c:	22 0f       	add	r18, r18
    135e:	33 1f       	adc	r19, r19
    1360:	4a 95       	dec	r20
    1362:	e1 f7       	brne	.-8      	; 0x135c <Timebase_DownCounter_SS_Get_Status+0xe>
    1364:	28 0f       	add	r18, r24
    1366:	39 1f       	adc	r19, r25
    1368:	e2 0f       	add	r30, r18
    136a:	f3 1f       	adc	r31, r19
    136c:	81 8d       	ldd	r24, Z+25	; 0x19
    136e:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1370:	8f 70       	andi	r24, 0x0F	; 15
    1372:	08 95       	ret

00001374 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1374:	e0 91 3f 01 	lds	r30, 0x013F
    1378:	f0 91 40 01 	lds	r31, 0x0140
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	9c 01       	movw	r18, r24
    1380:	54 e0       	ldi	r21, 0x04	; 4
    1382:	22 0f       	add	r18, r18
    1384:	33 1f       	adc	r19, r19
    1386:	5a 95       	dec	r21
    1388:	e1 f7       	brne	.-8      	; 0x1382 <Timebase_DownCounter_SS_Set_Status+0xe>
    138a:	28 0f       	add	r18, r24
    138c:	39 1f       	adc	r19, r25
    138e:	e2 0f       	add	r30, r18
    1390:	f3 1f       	adc	r31, r19
    1392:	6f 70       	andi	r22, 0x0F	; 15
    1394:	66 0f       	add	r22, r22
    1396:	81 8d       	ldd	r24, Z+25	; 0x19
    1398:	81 7e       	andi	r24, 0xE1	; 225
    139a:	86 2b       	or	r24, r22
    139c:	81 8f       	std	Z+25, r24	; 0x19
}
    139e:	08 95       	ret

000013a0 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    13a0:	e0 91 3f 01 	lds	r30, 0x013F
    13a4:	f0 91 40 01 	lds	r31, 0x0140
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	9c 01       	movw	r18, r24
    13ac:	64 e0       	ldi	r22, 0x04	; 4
    13ae:	22 0f       	add	r18, r18
    13b0:	33 1f       	adc	r19, r19
    13b2:	6a 95       	dec	r22
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <Timebase_DownCounter_SS_Get_Value+0xe>
    13b6:	28 0f       	add	r18, r24
    13b8:	39 1f       	adc	r19, r25
    13ba:	e2 0f       	add	r30, r18
    13bc:	f3 1f       	adc	r31, r19
    13be:	df 01       	movw	r26, r30
    13c0:	92 96       	adiw	r26, 0x22	; 34
    13c2:	62 a1       	ldd	r22, Z+34	; 0x22
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	7c 91       	ld	r23, X
    13c8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
    13ca:	12 96       	adiw	r26, 0x02	; 2
    13cc:	8c 91       	ld	r24, X
    13ce:	12 97       	sbiw	r26, 0x02	; 2
    13d0:	13 96       	adiw	r26, 0x03	; 3
    13d2:	9c 91       	ld	r25, X
    13d4:	08 95       	ret

000013d6 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    13d6:	e0 91 3f 01 	lds	r30, 0x013F
    13da:	f0 91 40 01 	lds	r31, 0x0140
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9c 01       	movw	r18, r24
    13e2:	a4 e0       	ldi	r26, 0x04	; 4
    13e4:	22 0f       	add	r18, r18
    13e6:	33 1f       	adc	r19, r19
    13e8:	aa 95       	dec	r26
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <Timebase_DownCounter_SS_Set_Value+0xe>
    13ec:	28 0f       	add	r18, r24
    13ee:	39 1f       	adc	r19, r25
    13f0:	e2 0f       	add	r30, r18
    13f2:	f3 1f       	adc	r31, r19
    13f4:	42 a3       	std	Z+34, r20	; 0x22
    13f6:	53 a3       	std	Z+35, r21	; 0x23
    13f8:	64 a3       	std	Z+36, r22	; 0x24
    13fa:	75 a3       	std	Z+37, r23	; 0x25
}
    13fc:	08 95       	ret

000013fe <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    13fe:	e0 91 3f 01 	lds	r30, 0x013F
    1402:	f0 91 40 01 	lds	r31, 0x0140
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9c 01       	movw	r18, r24
    140a:	b4 e0       	ldi	r27, 0x04	; 4
    140c:	22 0f       	add	r18, r18
    140e:	33 1f       	adc	r19, r19
    1410:	ba 95       	dec	r27
    1412:	e1 f7       	brne	.-8      	; 0x140c <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1414:	28 0f       	add	r18, r24
    1416:	39 1f       	adc	r19, r25
    1418:	e2 0f       	add	r30, r18
    141a:	f3 1f       	adc	r31, r19
    141c:	df 01       	movw	r26, r30
    141e:	5a 96       	adiw	r26, 0x1a	; 26
    1420:	62 8d       	ldd	r22, Z+26	; 0x1a
    1422:	11 96       	adiw	r26, 0x01	; 1
    1424:	7c 91       	ld	r23, X
    1426:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1428:	12 96       	adiw	r26, 0x02	; 2
    142a:	8c 91       	ld	r24, X
    142c:	12 97       	sbiw	r26, 0x02	; 2
    142e:	13 96       	adiw	r26, 0x03	; 3
    1430:	9c 91       	ld	r25, X
    1432:	08 95       	ret

00001434 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1434:	e0 91 3f 01 	lds	r30, 0x013F
    1438:	f0 91 40 01 	lds	r31, 0x0140
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 01       	movw	r18, r24
    1440:	44 e0       	ldi	r20, 0x04	; 4
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	4a 95       	dec	r20
    1448:	e1 f7       	brne	.-8      	; 0x1442 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    144a:	28 0f       	add	r18, r24
    144c:	39 1f       	adc	r19, r25
    144e:	e2 0f       	add	r30, r18
    1450:	f3 1f       	adc	r31, r19
    1452:	df 01       	movw	r26, r30
    1454:	5e 96       	adiw	r26, 0x1e	; 30
    1456:	66 8d       	ldd	r22, Z+30	; 0x1e
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	7c 91       	ld	r23, X
    145c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    145e:	12 96       	adiw	r26, 0x02	; 2
    1460:	8c 91       	ld	r24, X
    1462:	12 97       	sbiw	r26, 0x02	; 2
    1464:	13 96       	adiw	r26, 0x03	; 3
    1466:	9c 91       	ld	r25, X
    1468:	08 95       	ret

0000146a <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    146a:	e0 91 3f 01 	lds	r30, 0x013F
    146e:	f0 91 40 01 	lds	r31, 0x0140
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	9c 01       	movw	r18, r24
    1476:	a4 e0       	ldi	r26, 0x04	; 4
    1478:	22 0f       	add	r18, r18
    147a:	33 1f       	adc	r19, r19
    147c:	aa 95       	dec	r26
    147e:	e1 f7       	brne	.-8      	; 0x1478 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1480:	28 0f       	add	r18, r24
    1482:	39 1f       	adc	r19, r25
    1484:	e2 0f       	add	r30, r18
    1486:	f3 1f       	adc	r31, r19
    1488:	42 8f       	std	Z+26, r20	; 0x1a
    148a:	53 8f       	std	Z+27, r21	; 0x1b
    148c:	64 8f       	std	Z+28, r22	; 0x1c
    148e:	75 8f       	std	Z+29, r23	; 0x1d
}
    1490:	08 95       	ret

00001492 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1492:	e0 91 3f 01 	lds	r30, 0x013F
    1496:	f0 91 40 01 	lds	r31, 0x0140
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 01       	movw	r18, r24
    149e:	b4 e0       	ldi	r27, 0x04	; 4
    14a0:	22 0f       	add	r18, r18
    14a2:	33 1f       	adc	r19, r19
    14a4:	ba 95       	dec	r27
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    14a8:	28 0f       	add	r18, r24
    14aa:	39 1f       	adc	r19, r25
    14ac:	e2 0f       	add	r30, r18
    14ae:	f3 1f       	adc	r31, r19
    14b0:	46 8f       	std	Z+30, r20	; 0x1e
    14b2:	57 8f       	std	Z+31, r21	; 0x1f
    14b4:	60 a3       	std	Z+32, r22	; 0x20
    14b6:	71 a3       	std	Z+33, r23	; 0x21
}
    14b8:	08 95       	ret

000014ba <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    14ba:	e0 91 3f 01 	lds	r30, 0x013F
    14be:	f0 91 40 01 	lds	r31, 0x0140
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	9c 01       	movw	r18, r24
    14c6:	44 e0       	ldi	r20, 0x04	; 4
    14c8:	22 0f       	add	r18, r18
    14ca:	33 1f       	adc	r19, r19
    14cc:	4a 95       	dec	r20
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    14d0:	28 0f       	add	r18, r24
    14d2:	39 1f       	adc	r19, r25
    14d4:	e2 0f       	add	r30, r18
    14d6:	f3 1f       	adc	r31, r19
    14d8:	df 01       	movw	r26, r30
    14da:	96 96       	adiw	r26, 0x26	; 38
    14dc:	66 a1       	ldd	r22, Z+38	; 0x26
    14de:	11 96       	adiw	r26, 0x01	; 1
    14e0:	7c 91       	ld	r23, X
    14e2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
    14e4:	12 96       	adiw	r26, 0x02	; 2
    14e6:	8c 91       	ld	r24, X
    14e8:	12 97       	sbiw	r26, 0x02	; 2
    14ea:	13 96       	adiw	r26, 0x03	; 3
    14ec:	9c 91       	ld	r25, X
    14ee:	08 95       	ret

000014f0 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    14f0:	e0 91 3f 01 	lds	r30, 0x013F
    14f4:	f0 91 40 01 	lds	r31, 0x0140
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    14fc:	77 ff       	sbrs	r23, 7
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <Timebase_DownCounter_SS_Set_PeriodValue+0x2e>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1500:	c9 01       	movw	r24, r18
    1502:	b4 e0       	ldi	r27, 0x04	; 4
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	ba 95       	dec	r27
    150a:	e1 f7       	brne	.-8      	; 0x1504 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    150c:	82 0f       	add	r24, r18
    150e:	93 1f       	adc	r25, r19
    1510:	e8 0f       	add	r30, r24
    1512:	f9 1f       	adc	r31, r25
    1514:	16 a2       	std	Z+38, r1	; 0x26
    1516:	17 a2       	std	Z+39, r1	; 0x27
    1518:	10 a6       	std	Z+40, r1	; 0x28
    151a:	11 a6       	std	Z+41, r1	; 0x29
    151c:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    151e:	c9 01       	movw	r24, r18
    1520:	a4 e0       	ldi	r26, 0x04	; 4
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	aa 95       	dec	r26
    1528:	e1 f7       	brne	.-8      	; 0x1522 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    152a:	82 0f       	add	r24, r18
    152c:	93 1f       	adc	r25, r19
    152e:	e8 0f       	add	r30, r24
    1530:	f9 1f       	adc	r31, r25
    1532:	46 a3       	std	Z+38, r20	; 0x26
    1534:	57 a3       	std	Z+39, r21	; 0x27
    1536:	60 a7       	std	Z+40, r22	; 0x28
    1538:	71 a7       	std	Z+41, r23	; 0x29
    153a:	08 95       	ret

0000153c <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    153c:	e0 91 3f 01 	lds	r30, 0x013F
    1540:	f0 91 40 01 	lds	r31, 0x0140
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	9c 01       	movw	r18, r24
    1548:	44 e0       	ldi	r20, 0x04	; 4
    154a:	22 0f       	add	r18, r18
    154c:	33 1f       	adc	r19, r19
    154e:	4a 95       	dec	r20
    1550:	e1 f7       	brne	.-8      	; 0x154a <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1552:	28 0f       	add	r18, r24
    1554:	39 1f       	adc	r19, r25
    1556:	e2 0f       	add	r30, r18
    1558:	f3 1f       	adc	r31, r19
    155a:	81 8d       	ldd	r24, Z+25	; 0x19
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	08 95       	ret

00001560 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1560:	e0 91 3f 01 	lds	r30, 0x013F
    1564:	f0 91 40 01 	lds	r31, 0x0140
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	9c 01       	movw	r18, r24
    156c:	54 e0       	ldi	r21, 0x04	; 4
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	5a 95       	dec	r21
    1574:	e1 f7       	brne	.-8      	; 0x156e <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1576:	28 0f       	add	r18, r24
    1578:	39 1f       	adc	r19, r25
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	81 8d       	ldd	r24, Z+25	; 0x19
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	81 8f       	std	Z+25, r24	; 0x19
}
    1584:	08 95       	ret

00001586 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1586:	e0 91 3f 01 	lds	r30, 0x013F
    158a:	f0 91 40 01 	lds	r31, 0x0140
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9c 01       	movw	r18, r24
    1592:	64 e0       	ldi	r22, 0x04	; 4
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	6a 95       	dec	r22
    159a:	e1 f7       	brne	.-8      	; 0x1594 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    159c:	28 0f       	add	r18, r24
    159e:	39 1f       	adc	r19, r25
    15a0:	e2 0f       	add	r30, r18
    15a2:	f3 1f       	adc	r31, r19
    15a4:	81 8d       	ldd	r24, Z+25	; 0x19
    15a6:	8e 7f       	andi	r24, 0xFE	; 254
    15a8:	81 8f       	std	Z+25, r24	; 0x19
}
    15aa:	08 95       	ret

000015ac <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    15ac:	e0 91 3f 01 	lds	r30, 0x013F
    15b0:	f0 91 40 01 	lds	r31, 0x0140
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	9c 01       	movw	r18, r24
    15b8:	74 e0       	ldi	r23, 0x04	; 4
    15ba:	22 0f       	add	r18, r18
    15bc:	33 1f       	adc	r19, r19
    15be:	7a 95       	dec	r23
    15c0:	e1 f7       	brne	.-8      	; 0x15ba <Timebase_DownCounter_SS_Reset+0xe>
    15c2:	28 0f       	add	r18, r24
    15c4:	39 1f       	adc	r19, r25
    15c6:	e2 0f       	add	r30, r18
    15c8:	f3 1f       	adc	r31, r19
    15ca:	16 8e       	std	Z+30, r1	; 0x1e
    15cc:	17 8e       	std	Z+31, r1	; 0x1f
    15ce:	10 a2       	std	Z+32, r1	; 0x20
    15d0:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    15d2:	12 8e       	std	Z+26, r1	; 0x1a
    15d4:	13 8e       	std	Z+27, r1	; 0x1b
    15d6:	14 8e       	std	Z+28, r1	; 0x1c
    15d8:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    15da:	12 a2       	std	Z+34, r1	; 0x22
    15dc:	13 a2       	std	Z+35, r1	; 0x23
    15de:	14 a2       	std	Z+36, r1	; 0x24
    15e0:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    15e2:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    15e4:	80 7e       	andi	r24, 0xE0	; 224
    15e6:	81 8f       	std	Z+25, r24	; 0x19
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    15e8:	08 95       	ret

000015ea <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    15ea:	e0 91 3f 01 	lds	r30, 0x013F
    15ee:	f0 91 40 01 	lds	r31, 0x0140
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9c 01       	movw	r18, r24
    15f6:	a4 e0       	ldi	r26, 0x04	; 4
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	aa 95       	dec	r26
    15fe:	e1 f7       	brne	.-8      	; 0x15f8 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1600:	28 0f       	add	r18, r24
    1602:	39 1f       	adc	r19, r25
    1604:	e2 0f       	add	r30, r18
    1606:	f3 1f       	adc	r31, r19
    1608:	16 8e       	std	Z+30, r1	; 0x1e
    160a:	17 8e       	std	Z+31, r1	; 0x1f
    160c:	10 a2       	std	Z+32, r1	; 0x20
    160e:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1610:	12 8e       	std	Z+26, r1	; 0x1a
    1612:	13 8e       	std	Z+27, r1	; 0x1b
    1614:	14 8e       	std	Z+28, r1	; 0x1c
    1616:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1618:	12 a2       	std	Z+34, r1	; 0x22
    161a:	13 a2       	std	Z+35, r1	; 0x23
    161c:	14 a2       	std	Z+36, r1	; 0x24
    161e:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1620:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1622:	80 7e       	andi	r24, 0xE0	; 224
    1624:	81 8f       	std	Z+25, r24	; 0x19
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1626:	08 95       	ret

00001628 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1628:	e0 91 3f 01 	lds	r30, 0x013F
    162c:	f0 91 40 01 	lds	r31, 0x0140
    1630:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1632:	9c 01       	movw	r18, r24
    1634:	b4 e0       	ldi	r27, 0x04	; 4
    1636:	22 0f       	add	r18, r18
    1638:	33 1f       	adc	r19, r19
    163a:	ba 95       	dec	r27
    163c:	e1 f7       	brne	.-8      	; 0x1636 <Timebase_DownCounter_SS_Start+0xe>
    163e:	28 0f       	add	r18, r24
    1640:	39 1f       	adc	r19, r25
    1642:	e2 0f       	add	r30, r18
    1644:	f3 1f       	adc	r31, r19
    1646:	91 8d       	ldd	r25, Z+25	; 0x19
    1648:	89 2f       	mov	r24, r25
    164a:	86 95       	lsr	r24
    164c:	8f 70       	andi	r24, 0x0F	; 15
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	19 f0       	breq	.+6      	; 0x1658 <Timebase_DownCounter_SS_Start+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1652:	91 7e       	andi	r25, 0xE1	; 225
    1654:	92 60       	ori	r25, 0x02	; 2
    1656:	91 8f       	std	Z+25, r25	; 0x19
    1658:	08 95       	ret

0000165a <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    165a:	e0 91 3f 01 	lds	r30, 0x013F
    165e:	f0 91 40 01 	lds	r31, 0x0140
    1662:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1664:	9c 01       	movw	r18, r24
    1666:	44 e0       	ldi	r20, 0x04	; 4
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	4a 95       	dec	r20
    166e:	e1 f7       	brne	.-8      	; 0x1668 <Timebase_DownCounter_SS_Stop+0xe>
    1670:	28 0f       	add	r18, r24
    1672:	39 1f       	adc	r19, r25
    1674:	e2 0f       	add	r30, r18
    1676:	f3 1f       	adc	r31, r19
    1678:	91 8d       	ldd	r25, Z+25	; 0x19
    167a:	89 2f       	mov	r24, r25
    167c:	86 95       	lsr	r24
    167e:	8f 70       	andi	r24, 0x0F	; 15
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	19 f0       	breq	.+6      	; 0x168a <Timebase_DownCounter_SS_Stop+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1684:	91 7e       	andi	r25, 0xE1	; 225
    1686:	94 60       	ori	r25, 0x04	; 4
    1688:	91 8f       	std	Z+25, r25	; 0x19
    168a:	08 95       	ret

0000168c <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    168c:	2f 92       	push	r2
    168e:	3f 92       	push	r3
    1690:	4f 92       	push	r4
    1692:	5f 92       	push	r5
    1694:	6f 92       	push	r6
    1696:	7f 92       	push	r7
    1698:	8f 92       	push	r8
    169a:	9f 92       	push	r9
    169c:	af 92       	push	r10
    169e:	bf 92       	push	r11
    16a0:	cf 92       	push	r12
    16a2:	df 92       	push	r13
    16a4:	ef 92       	push	r14
    16a6:	ff 92       	push	r15
    16a8:	0f 93       	push	r16
    16aa:	1f 93       	push	r17
    16ac:	df 93       	push	r29
    16ae:	cf 93       	push	r28
    16b0:	00 d0       	rcall	.+0      	; 0x16b2 <Timebase_DownCounter_SS_Set_Securely+0x26>
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <Timebase_DownCounter_SS_Set_Securely+0x28>
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
    16b8:	4a 01       	movw	r8, r20
    16ba:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    16bc:	20 91 3f 01 	lds	r18, 0x013F
    16c0:	30 91 40 01 	lds	r19, 0x0140
    16c4:	3c 83       	std	Y+4, r19	; 0x04
    16c6:	2b 83       	std	Y+3, r18	; 0x03
    16c8:	a8 2f       	mov	r26, r24
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	ba 83       	std	Y+2, r27	; 0x02
    16ce:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    16d0:	fd 01       	movw	r30, r26
    16d2:	64 e0       	ldi	r22, 0x04	; 4
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	6a 95       	dec	r22
    16da:	e1 f7       	brne	.-8      	; 0x16d4 <Timebase_DownCounter_SS_Set_Securely+0x48>
    16dc:	ea 0f       	add	r30, r26
    16de:	fb 1f       	adc	r31, r27
    16e0:	e2 0f       	add	r30, r18
    16e2:	f3 1f       	adc	r31, r19
    16e4:	81 8d       	ldd	r24, Z+25	; 0x19
    16e6:	86 95       	lsr	r24
    16e8:	8f 70       	andi	r24, 0x0F	; 15
    16ea:	09 f0       	breq	.+2      	; 0x16ee <Timebase_DownCounter_SS_Set_Securely+0x62>
    16ec:	6d c0       	rjmp	.+218    	; 0x17c8 <Timebase_DownCounter_SS_Set_Securely+0x13c>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    16ee:	82 a2       	std	Z+34, r8	; 0x22
    16f0:	93 a2       	std	Z+35, r9	; 0x23
    16f2:	a4 a2       	std	Z+36, r10	; 0x24
    16f4:	b5 a2       	std	Z+37, r11	; 0x25


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    16f6:	f9 01       	movw	r30, r18
    16f8:	c0 84       	ldd	r12, Z+8	; 0x08
    16fa:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16fc:	22 84       	ldd	r2, Z+10	; 0x0a
    16fe:	33 84       	ldd	r3, Z+11	; 0x0b
    1700:	44 84       	ldd	r4, Z+12	; 0x0c
    1702:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1704:	21 81       	ldd	r18, Z+1	; 0x01
    1706:	32 81       	ldd	r19, Z+2	; 0x02
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	c5 01       	movw	r24, r10
    170e:	b4 01       	movw	r22, r8
    1710:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
    1714:	7b 01       	movw	r14, r22
    1716:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1718:	ab 81       	ldd	r26, Y+3	; 0x03
    171a:	bc 81       	ldd	r27, Y+4	; 0x04
    171c:	11 96       	adiw	r26, 0x01	; 1
    171e:	2d 91       	ld	r18, X+
    1720:	3c 91       	ld	r19, X
    1722:	12 97       	sbiw	r26, 0x02	; 2
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	c5 01       	movw	r24, r10
    172a:	b4 01       	movw	r22, r8
    172c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
    1730:	c9 01       	movw	r24, r18
    1732:	da 01       	movw	r26, r20
    1734:	3c 01       	movw	r6, r24
    1736:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1738:	56 01       	movw	r10, r12
    173a:	cc 24       	eor	r12, r12
    173c:	dd 24       	eor	r13, r13
    173e:	ae 0c       	add	r10, r14
    1740:	bf 1c       	adc	r11, r15
    1742:	c0 1e       	adc	r12, r16
    1744:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1746:	eb 81       	ldd	r30, Y+3	; 0x03
    1748:	fc 81       	ldd	r31, Y+4	; 0x04
    174a:	81 81       	ldd	r24, Z+1	; 0x01
    174c:	92 81       	ldd	r25, Z+2	; 0x02
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	a8 16       	cp	r10, r24
    1754:	b9 06       	cpc	r11, r25
    1756:	ca 06       	cpc	r12, r26
    1758:	db 06       	cpc	r13, r27
    175a:	94 f0       	brlt	.+36     	; 0x1780 <Timebase_DownCounter_SS_Set_Securely+0xf4>
	  sec_val += 1;
    175c:	08 94       	sec
    175e:	61 1c       	adc	r6, r1
    1760:	71 1c       	adc	r7, r1
    1762:	81 1c       	adc	r8, r1
    1764:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1766:	21 81       	ldd	r18, Z+1	; 0x01
    1768:	32 81       	ldd	r19, Z+2	; 0x02
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	c6 01       	movw	r24, r12
    1770:	b5 01       	movw	r22, r10
    1772:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
    1776:	ac 01       	movw	r20, r24
    1778:	cb 01       	movw	r24, r22
    177a:	da 01       	movw	r26, r20
    177c:	5c 01       	movw	r10, r24
    177e:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1780:	e9 81       	ldd	r30, Y+1	; 0x01
    1782:	fa 81       	ldd	r31, Y+2	; 0x02
    1784:	54 e0       	ldi	r21, 0x04	; 4
    1786:	ee 0f       	add	r30, r30
    1788:	ff 1f       	adc	r31, r31
    178a:	5a 95       	dec	r21
    178c:	e1 f7       	brne	.-8      	; 0x1786 <Timebase_DownCounter_SS_Set_Securely+0xfa>
    178e:	29 81       	ldd	r18, Y+1	; 0x01
    1790:	3a 81       	ldd	r19, Y+2	; 0x02
    1792:	e2 0f       	add	r30, r18
    1794:	f3 1f       	adc	r31, r19
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	e8 0f       	add	r30, r24
    179c:	f9 1f       	adc	r31, r25
    179e:	26 0c       	add	r2, r6
    17a0:	37 1c       	adc	r3, r7
    17a2:	48 1c       	adc	r4, r8
    17a4:	59 1c       	adc	r5, r9
    17a6:	22 8e       	std	Z+26, r2	; 0x1a
    17a8:	33 8e       	std	Z+27, r3	; 0x1b
    17aa:	44 8e       	std	Z+28, r4	; 0x1c
    17ac:	55 8e       	std	Z+29, r5	; 0x1d
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    17ae:	a6 8e       	std	Z+30, r10	; 0x1e
    17b0:	b7 8e       	std	Z+31, r11	; 0x1f
    17b2:	c0 a2       	std	Z+32, r12	; 0x20
    17b4:	d1 a2       	std	Z+33, r13	; 0x21
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    17b6:	91 8d       	ldd	r25, Z+25	; 0x19
    17b8:	89 2f       	mov	r24, r25
    17ba:	86 95       	lsr	r24
    17bc:	8f 70       	andi	r24, 0x0F	; 15
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	19 f0       	breq	.+6      	; 0x17c8 <Timebase_DownCounter_SS_Set_Securely+0x13c>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    17c2:	91 7e       	andi	r25, 0xE1	; 225
    17c4:	92 60       	ori	r25, 0x02	; 2
    17c6:	91 8f       	std	Z+25, r25	; 0x19
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	af 90       	pop	r10
    17e4:	9f 90       	pop	r9
    17e6:	8f 90       	pop	r8
    17e8:	7f 90       	pop	r7
    17ea:	6f 90       	pop	r6
    17ec:	5f 90       	pop	r5
    17ee:	4f 90       	pop	r4
    17f0:	3f 90       	pop	r3
    17f2:	2f 90       	pop	r2
    17f4:	08 95       	ret

000017f6 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    17f6:	e0 91 3f 01 	lds	r30, 0x013F
    17fa:	f0 91 40 01 	lds	r31, 0x0140
    17fe:	a8 2f       	mov	r26, r24
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	9d 01       	movw	r18, r26
    1804:	94 e0       	ldi	r25, 0x04	; 4
    1806:	22 0f       	add	r18, r18
    1808:	33 1f       	adc	r19, r19
    180a:	9a 95       	dec	r25
    180c:	e1 f7       	brne	.-8      	; 0x1806 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    180e:	2a 0f       	add	r18, r26
    1810:	3b 1f       	adc	r19, r27
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	16 8e       	std	Z+30, r1	; 0x1e
    1818:	17 8e       	std	Z+31, r1	; 0x1f
    181a:	10 a2       	std	Z+32, r1	; 0x20
    181c:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    181e:	12 8e       	std	Z+26, r1	; 0x1a
    1820:	13 8e       	std	Z+27, r1	; 0x1b
    1822:	14 8e       	std	Z+28, r1	; 0x1c
    1824:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1826:	12 a2       	std	Z+34, r1	; 0x22
    1828:	13 a2       	std	Z+35, r1	; 0x23
    182a:	14 a2       	std	Z+36, r1	; 0x24
    182c:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    182e:	91 8d       	ldd	r25, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1830:	90 7e       	andi	r25, 0xE0	; 224
    1832:	91 8f       	std	Z+25, r25	; 0x19
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1834:	0e 94 46 0b 	call	0x168c	; 0x168c <Timebase_DownCounter_SS_Set_Securely>
} 
    1838:	08 95       	ret

0000183a <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    183a:	2f 92       	push	r2
    183c:	3f 92       	push	r3
    183e:	4f 92       	push	r4
    1840:	5f 92       	push	r5
    1842:	6f 92       	push	r6
    1844:	7f 92       	push	r7
    1846:	8f 92       	push	r8
    1848:	9f 92       	push	r9
    184a:	af 92       	push	r10
    184c:	bf 92       	push	r11
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	00 d0       	rcall	.+0      	; 0x1860 <Timebase_DownCounter_SS_Update+0x26>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <Timebase_DownCounter_SS_Update+0x28>
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1866:	20 91 3f 01 	lds	r18, 0x013F
    186a:	30 91 40 01 	lds	r19, 0x0140
    186e:	3c 83       	std	Y+4, r19	; 0x04
    1870:	2b 83       	std	Y+3, r18	; 0x03
    1872:	c8 2e       	mov	r12, r24
    1874:	dd 24       	eor	r13, r13
    1876:	c6 01       	movw	r24, r12
    1878:	44 e0       	ldi	r20, 0x04	; 4
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	4a 95       	dec	r20
    1880:	e1 f7       	brne	.-8      	; 0x187a <Timebase_DownCounter_SS_Update+0x40>
    1882:	8c 0d       	add	r24, r12
    1884:	9d 1d       	adc	r25, r13
    1886:	82 0f       	add	r24, r18
    1888:	93 1f       	adc	r25, r19
    188a:	9a 83       	std	Y+2, r25	; 0x02
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	fc 01       	movw	r30, r24
    1890:	81 8d       	ldd	r24, Z+25	; 0x19
    1892:	86 95       	lsr	r24
    1894:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	09 f0       	breq	.+2      	; 0x189c <Timebase_DownCounter_SS_Update+0x62>
    189a:	56 c0       	rjmp	.+172    	; 0x1948 <Timebase_DownCounter_SS_Update+0x10e>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    189c:	f9 01       	movw	r30, r18
    189e:	80 85       	ldd	r24, Z+8	; 0x08
    18a0:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    18a2:	4c 01       	movw	r8, r24
    18a4:	aa 24       	eor	r10, r10
    18a6:	bb 24       	eor	r11, r11
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    18a8:	82 85       	ldd	r24, Z+10	; 0x0a
    18aa:	93 85       	ldd	r25, Z+11	; 0x0b
    18ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    18ae:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    18b0:	e9 81       	ldd	r30, Y+1	; 0x01
    18b2:	fa 81       	ldd	r31, Y+2	; 0x02
    18b4:	e2 8c       	ldd	r14, Z+26	; 0x1a
    18b6:	f3 8c       	ldd	r15, Z+27	; 0x1b
    18b8:	04 8d       	ldd	r16, Z+28	; 0x1c
    18ba:	15 8d       	ldd	r17, Z+29	; 0x1d
    18bc:	e8 1a       	sub	r14, r24
    18be:	f9 0a       	sbc	r15, r25
    18c0:	0a 0b       	sbc	r16, r26
    18c2:	1b 0b       	sbc	r17, r27
    18c4:	17 ff       	sbrs	r17, 7
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <Timebase_DownCounter_SS_Update+0x94>
    18c8:	ee 24       	eor	r14, r14
    18ca:	ff 24       	eor	r15, r15
    18cc:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    18ce:	eb 81       	ldd	r30, Y+3	; 0x03
    18d0:	fc 81       	ldd	r31, Y+4	; 0x04
    18d2:	21 81       	ldd	r18, Z+1	; 0x01
    18d4:	32 81       	ldd	r19, Z+2	; 0x02
    18d6:	40 e0       	ldi	r20, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	c8 01       	movw	r24, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <__mulsi3>
	temp_s += temp_ss;
    18e2:	f6 01       	movw	r30, r12
    18e4:	24 e0       	ldi	r18, 0x04	; 4
    18e6:	ee 0f       	add	r30, r30
    18e8:	ff 1f       	adc	r31, r31
    18ea:	2a 95       	dec	r18
    18ec:	e1 f7       	brne	.-8      	; 0x18e6 <Timebase_DownCounter_SS_Update+0xac>
    18ee:	ec 0d       	add	r30, r12
    18f0:	fd 1d       	adc	r31, r13
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	e2 0f       	add	r30, r18
    18f8:	f3 1f       	adc	r31, r19
    18fa:	26 8d       	ldd	r18, Z+30	; 0x1e
    18fc:	37 8d       	ldd	r19, Z+31	; 0x1f
    18fe:	40 a1       	ldd	r20, Z+32	; 0x20
    1900:	51 a1       	ldd	r21, Z+33	; 0x21
    1902:	28 19       	sub	r18, r8
    1904:	39 09       	sbc	r19, r9
    1906:	4a 09       	sbc	r20, r10
    1908:	5b 09       	sbc	r21, r11
    190a:	26 0f       	add	r18, r22
    190c:	37 1f       	adc	r19, r23
    190e:	48 1f       	adc	r20, r24
    1910:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1912:	22 a3       	std	Z+34, r18	; 0x22
    1914:	33 a3       	std	Z+35, r19	; 0x23
    1916:	44 a3       	std	Z+36, r20	; 0x24
    1918:	55 a3       	std	Z+37, r21	; 0x25
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    191a:	12 16       	cp	r1, r18
    191c:	13 06       	cpc	r1, r19
    191e:	14 06       	cpc	r1, r20
    1920:	15 06       	cpc	r1, r21
    1922:	0c f4       	brge	.+2      	; 0x1926 <Timebase_DownCounter_SS_Update+0xec>
    1924:	4b c0       	rjmp	.+150    	; 0x19bc <Timebase_DownCounter_SS_Update+0x182>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1926:	16 8e       	std	Z+30, r1	; 0x1e
    1928:	17 8e       	std	Z+31, r1	; 0x1f
    192a:	10 a2       	std	Z+32, r1	; 0x20
    192c:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    192e:	12 8e       	std	Z+26, r1	; 0x1a
    1930:	13 8e       	std	Z+27, r1	; 0x1b
    1932:	14 8e       	std	Z+28, r1	; 0x1c
    1934:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1936:	12 a2       	std	Z+34, r1	; 0x22
    1938:	13 a2       	std	Z+35, r1	; 0x23
    193a:	14 a2       	std	Z+36, r1	; 0x24
    193c:	15 a2       	std	Z+37, r1	; 0x25
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    193e:	81 8d       	ldd	r24, Z+25	; 0x19
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1940:	80 7e       	andi	r24, 0xE0	; 224
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	81 8f       	std	Z+25, r24	; 0x19
    1946:	3a c0       	rjmp	.+116    	; 0x19bc <Timebase_DownCounter_SS_Update+0x182>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	c1 f5       	brne	.+112    	; 0x19bc <Timebase_DownCounter_SS_Update+0x182>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    194c:	eb 81       	ldd	r30, Y+3	; 0x03
    194e:	fc 81       	ldd	r31, Y+4	; 0x04
    1950:	60 84       	ldd	r6, Z+8	; 0x08
    1952:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1954:	e2 84       	ldd	r14, Z+10	; 0x0a
    1956:	f3 84       	ldd	r15, Z+11	; 0x0b
    1958:	04 85       	ldd	r16, Z+12	; 0x0c
    195a:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    195c:	e9 81       	ldd	r30, Y+1	; 0x01
    195e:	fa 81       	ldd	r31, Y+2	; 0x02
    1960:	22 a0       	ldd	r2, Z+34	; 0x22
    1962:	33 a0       	ldd	r3, Z+35	; 0x23
    1964:	44 a0       	ldd	r4, Z+36	; 0x24
    1966:	55 a0       	ldd	r5, Z+37	; 0x25
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    1968:	eb 81       	ldd	r30, Y+3	; 0x03
    196a:	fc 81       	ldd	r31, Y+4	; 0x04
    196c:	21 81       	ldd	r18, Z+1	; 0x01
    196e:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    1970:	a1 80       	ldd	r10, Z+1	; 0x01
    1972:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	50 e0       	ldi	r21, 0x00	; 0
    1978:	c2 01       	movw	r24, r4
    197a:	b1 01       	movw	r22, r2
    197c:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
    1980:	e2 0e       	add	r14, r18
    1982:	f3 1e       	adc	r15, r19
    1984:	04 1f       	adc	r16, r20
    1986:	15 1f       	adc	r17, r21
    1988:	e9 81       	ldd	r30, Y+1	; 0x01
    198a:	fa 81       	ldd	r31, Y+2	; 0x02
    198c:	e2 8e       	std	Z+26, r14	; 0x1a
    198e:	f3 8e       	std	Z+27, r15	; 0x1b
    1990:	04 8f       	std	Z+28, r16	; 0x1c
    1992:	15 8f       	std	Z+29, r17	; 0x1d
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1994:	cc 24       	eor	r12, r12
    1996:	dd 24       	eor	r13, r13
    1998:	c2 01       	movw	r24, r4
    199a:	b1 01       	movw	r22, r2
    199c:	a6 01       	movw	r20, r12
    199e:	95 01       	movw	r18, r10
    19a0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__divmodsi4>
    19a4:	88 24       	eor	r8, r8
    19a6:	99 24       	eor	r9, r9
    19a8:	66 0e       	add	r6, r22
    19aa:	77 1e       	adc	r7, r23
    19ac:	88 1e       	adc	r8, r24
    19ae:	99 1e       	adc	r9, r25
    19b0:	e9 81       	ldd	r30, Y+1	; 0x01
    19b2:	fa 81       	ldd	r31, Y+2	; 0x02
    19b4:	66 8e       	std	Z+30, r6	; 0x1e
    19b6:	77 8e       	std	Z+31, r7	; 0x1f
    19b8:	80 a2       	std	Z+32, r8	; 0x20
    19ba:	91 a2       	std	Z+33, r9	; 0x21
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	1f 91       	pop	r17
    19ca:	0f 91       	pop	r16
    19cc:	ff 90       	pop	r15
    19ce:	ef 90       	pop	r14
    19d0:	df 90       	pop	r13
    19d2:	cf 90       	pop	r12
    19d4:	bf 90       	pop	r11
    19d6:	af 90       	pop	r10
    19d8:	9f 90       	pop	r9
    19da:	8f 90       	pop	r8
    19dc:	7f 90       	pop	r7
    19de:	6f 90       	pop	r6
    19e0:	5f 90       	pop	r5
    19e2:	4f 90       	pop	r4
    19e4:	3f 90       	pop	r3
    19e6:	2f 90       	pop	r2
    19e8:	08 95       	ret

000019ea <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	e0 91 3f 01 	lds	r30, 0x013F
    19f0:	f0 91 40 01 	lds	r31, 0x0140
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9c 01       	movw	r18, r24
    19f8:	54 e0       	ldi	r21, 0x04	; 4
    19fa:	22 0f       	add	r18, r18
    19fc:	33 1f       	adc	r19, r19
    19fe:	5a 95       	dec	r21
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <Timebase_DownCounter_SS_Expired+0x10>
    1a02:	28 0f       	add	r18, r24
    1a04:	39 1f       	adc	r19, r25
    1a06:	e2 0f       	add	r30, r18
    1a08:	f3 1f       	adc	r31, r19
    1a0a:	81 8d       	ldd	r24, Z+25	; 0x19
    1a0c:	86 95       	lsr	r24
    1a0e:	8f 70       	andi	r24, 0x0F	; 15
    1a10:	84 30       	cpi	r24, 0x04	; 4
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <Timebase_DownCounter_SS_Expired+0x2c>
    1a14:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1a16:	84 2f       	mov	r24, r20
    1a18:	08 95       	ret

00001a1a <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1a1a:	e0 91 3f 01 	lds	r30, 0x013F
    1a1e:	f0 91 40 01 	lds	r31, 0x0140
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1a24:	9c 01       	movw	r18, r24
    1a26:	64 e0       	ldi	r22, 0x04	; 4
    1a28:	22 0f       	add	r18, r18
    1a2a:	33 1f       	adc	r19, r19
    1a2c:	6a 95       	dec	r22
    1a2e:	e1 f7       	brne	.-8      	; 0x1a28 <Timebase_DownCounter_SS_Expired_Event+0xe>
    1a30:	28 0f       	add	r18, r24
    1a32:	39 1f       	adc	r19, r25
    1a34:	e2 0f       	add	r30, r18
    1a36:	f3 1f       	adc	r31, r19
    1a38:	81 8d       	ldd	r24, Z+25	; 0x19
    1a3a:	86 95       	lsr	r24
    1a3c:	8f 70       	andi	r24, 0x0F	; 15
    1a3e:	84 30       	cpi	r24, 0x04	; 4
    1a40:	11 f0       	breq	.+4      	; 0x1a46 <Timebase_DownCounter_SS_Expired_Event+0x2c>
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1a46:	16 8e       	std	Z+30, r1	; 0x1e
    1a48:	17 8e       	std	Z+31, r1	; 0x1f
    1a4a:	10 a2       	std	Z+32, r1	; 0x20
    1a4c:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1a4e:	12 8e       	std	Z+26, r1	; 0x1a
    1a50:	13 8e       	std	Z+27, r1	; 0x1b
    1a52:	14 8e       	std	Z+28, r1	; 0x1c
    1a54:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1a56:	12 a2       	std	Z+34, r1	; 0x22
    1a58:	13 a2       	std	Z+35, r1	; 0x23
    1a5a:	14 a2       	std	Z+36, r1	; 0x24
    1a5c:	15 a2       	std	Z+37, r1	; 0x25
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1a5e:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1a60:	80 7e       	andi	r24, 0xE0	; 224
    1a62:	81 8f       	std	Z+25, r24	; 0x19
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1a66:	08 95       	ret

00001a68 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1a6c:	c0 91 3f 01 	lds	r28, 0x013F
    1a70:	d0 91 40 01 	lds	r29, 0x0140
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    1a78:	f9 01       	movw	r30, r18
    1a7a:	a4 e0       	ldi	r26, 0x04	; 4
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	aa 95       	dec	r26
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    1a84:	e2 0f       	add	r30, r18
    1a86:	f3 1f       	adc	r31, r19
    1a88:	ec 0f       	add	r30, r28
    1a8a:	fd 1f       	adc	r31, r29
    1a8c:	81 8d       	ldd	r24, Z+25	; 0x19
    1a8e:	80 fd       	sbrc	r24, 0
    1a90:	20 c0       	rjmp	.+64     	; 0x1ad2 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1a92:	82 a1       	ldd	r24, Z+34	; 0x22
    1a94:	93 a1       	ldd	r25, Z+35	; 0x23
    1a96:	a4 a1       	ldd	r26, Z+36	; 0x24
    1a98:	b5 a1       	ldd	r27, Z+37	; 0x25
    1a9a:	84 1b       	sub	r24, r20
    1a9c:	95 0b       	sbc	r25, r21
    1a9e:	a6 0b       	sbc	r26, r22
    1aa0:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1aa2:	b7 ff       	sbrs	r27, 7
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x48>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1aa6:	16 a2       	std	Z+38, r1	; 0x26
    1aa8:	17 a2       	std	Z+39, r1	; 0x27
    1aaa:	10 a6       	std	Z+40, r1	; 0x28
    1aac:	11 a6       	std	Z+41, r1	; 0x29
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1ab0:	86 a3       	std	Z+38, r24	; 0x26
    1ab2:	97 a3       	std	Z+39, r25	; 0x27
    1ab4:	a0 a7       	std	Z+40, r26	; 0x28
    1ab6:	b1 a7       	std	Z+41, r27	; 0x29
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1ab8:	f9 01       	movw	r30, r18
    1aba:	74 e0       	ldi	r23, 0x04	; 4
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	7a 95       	dec	r23
    1ac2:	e1 f7       	brne	.-8      	; 0x1abc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    1ac4:	e2 0f       	add	r30, r18
    1ac6:	f3 1f       	adc	r31, r19
    1ac8:	ec 0f       	add	r30, r28
    1aca:	fd 1f       	adc	r31, r29
    1acc:	81 8d       	ldd	r24, Z+25	; 0x19
    1ace:	81 60       	ori	r24, 0x01	; 1
    1ad0:	81 8f       	std	Z+25, r24	; 0x19
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1ad8:	e0 91 3f 01 	lds	r30, 0x013F
    1adc:	f0 91 40 01 	lds	r31, 0x0140
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1ae2:	9c 01       	movw	r18, r24
    1ae4:	b4 e0       	ldi	r27, 0x04	; 4
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	ba 95       	dec	r27
    1aec:	e1 f7       	brne	.-8      	; 0x1ae6 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    1aee:	28 0f       	add	r18, r24
    1af0:	39 1f       	adc	r19, r25
    1af2:	e2 0f       	add	r30, r18
    1af4:	f3 1f       	adc	r31, r19
    1af6:	22 a1       	ldd	r18, Z+34	; 0x22
    1af8:	33 a1       	ldd	r19, Z+35	; 0x23
    1afa:	44 a1       	ldd	r20, Z+36	; 0x24
    1afc:	55 a1       	ldd	r21, Z+37	; 0x25
    1afe:	86 a1       	ldd	r24, Z+38	; 0x26
    1b00:	97 a1       	ldd	r25, Z+39	; 0x27
    1b02:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b04:	b1 a5       	ldd	r27, Z+41	; 0x29
    1b06:	28 1b       	sub	r18, r24
    1b08:	39 0b       	sbc	r19, r25
    1b0a:	4a 0b       	sbc	r20, r26
    1b0c:	5b 0b       	sbc	r21, r27
    1b0e:	57 ff       	sbrs	r21, 7
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x42>
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1b1a:	b9 01       	movw	r22, r18
    1b1c:	ca 01       	movw	r24, r20
    1b1e:	08 95       	ret

00001b20 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1b20:	cf 93       	push	r28
    1b22:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1b24:	c0 91 3f 01 	lds	r28, 0x013F
    1b28:	d0 91 40 01 	lds	r29, 0x0140
    1b2c:	68 2f       	mov	r22, r24
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1b30:	fb 01       	movw	r30, r22
    1b32:	44 e0       	ldi	r20, 0x04	; 4
    1b34:	ee 0f       	add	r30, r30
    1b36:	ff 1f       	adc	r31, r31
    1b38:	4a 95       	dec	r20
    1b3a:	e1 f7       	brne	.-8      	; 0x1b34 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    1b3c:	e6 0f       	add	r30, r22
    1b3e:	f7 1f       	adc	r31, r23
    1b40:	ec 0f       	add	r30, r28
    1b42:	fd 1f       	adc	r31, r29
    1b44:	22 a1       	ldd	r18, Z+34	; 0x22
    1b46:	33 a1       	ldd	r19, Z+35	; 0x23
    1b48:	44 a1       	ldd	r20, Z+36	; 0x24
    1b4a:	55 a1       	ldd	r21, Z+37	; 0x25
    1b4c:	86 a1       	ldd	r24, Z+38	; 0x26
    1b4e:	97 a1       	ldd	r25, Z+39	; 0x27
    1b50:	a0 a5       	ldd	r26, Z+40	; 0x28
    1b52:	b1 a5       	ldd	r27, Z+41	; 0x29
    1b54:	28 1b       	sub	r18, r24
    1b56:	39 0b       	sbc	r19, r25
    1b58:	4a 0b       	sbc	r20, r26
    1b5a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1b5c:	57 fd       	sbrc	r21, 7
    1b5e:	07 c0       	rjmp	.+14     	; 0x1b6e <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1b60:	21 15       	cp	r18, r1
    1b62:	31 05       	cpc	r19, r1
    1b64:	41 05       	cpc	r20, r1
    1b66:	51 05       	cpc	r21, r1
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <Timebase_DownCounter_SS_Period_Value_Expired+0x6e>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	cb 01       	movw	r24, r22
    1b72:	34 e0       	ldi	r19, 0x04	; 4
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	3a 95       	dec	r19
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <Timebase_DownCounter_SS_Period_Value_Expired+0x54>
    1b7c:	86 0f       	add	r24, r22
    1b7e:	97 1f       	adc	r25, r23
    1b80:	c8 0f       	add	r28, r24
    1b82:	d9 1f       	adc	r29, r25
    1b84:	89 8d       	ldd	r24, Y+25	; 0x19
    1b86:	80 ff       	sbrs	r24, 0
    1b88:	21 e0       	ldi	r18, 0x01	; 1
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1b8e:	82 2f       	mov	r24, r18
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1b96:	1f 93       	push	r17
    1b98:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    1b9a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <Timebase_DownCounter_SS_Period_Value_Expired>
    1b9e:	81 30       	cpi	r24, 0x01	; 1
    1ba0:	11 f0       	breq	.+4      	; 0x1ba6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x38>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1ba6:	e0 91 3f 01 	lds	r30, 0x013F
    1baa:	f0 91 40 01 	lds	r31, 0x0140
    1bae:	21 2f       	mov	r18, r17
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	c9 01       	movw	r24, r18
    1bb4:	54 e0       	ldi	r21, 0x04	; 4
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	5a 95       	dec	r21
    1bbc:	e1 f7       	brne	.-8      	; 0x1bb6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    1bbe:	82 0f       	add	r24, r18
    1bc0:	93 1f       	adc	r25, r19
    1bc2:	e8 0f       	add	r30, r24
    1bc4:	f9 1f       	adc	r31, r25
    1bc6:	81 8d       	ldd	r24, Z+25	; 0x19
    1bc8:	8e 7f       	andi	r24, 0xFE	; 254
    1bca:	81 8f       	std	Z+25, r24	; 0x19
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1bce:	1f 91       	pop	r17
    1bd0:	08 95       	ret

00001bd2 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    1bd2:	1f 93       	push	r17
    1bd4:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1bd6:	81 2f       	mov	r24, r17
    1bd8:	0e 94 1d 0c 	call	0x183a	; 0x183a <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1bdc:	1f 5f       	subi	r17, 0xFF	; 255
    1bde:	15 30       	cpi	r17, 0x05	; 5
    1be0:	d1 f7       	brne	.-12     	; 0x1bd6 <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    1be2:	1f 91       	pop	r17
    1be4:	08 95       	ret

00001be6 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1be6:	40 91 3f 01 	lds	r20, 0x013F
    1bea:	50 91 40 01 	lds	r21, 0x0140
    1bee:	da 01       	movw	r26, r20
    1bf0:	5a 96       	adiw	r26, 0x1a	; 26
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	14 96       	adiw	r26, 0x04	; 4
    1bf8:	1d 92       	st	X+, r1
    1bfa:	1d 92       	st	X+, r1
    1bfc:	1d 92       	st	X+, r1
    1bfe:	1c 92       	st	X, r1
    1c00:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1c02:	1d 92       	st	X+, r1
    1c04:	1d 92       	st	X+, r1
    1c06:	1d 92       	st	X+, r1
    1c08:	1c 92       	st	X, r1
    1c0a:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c0c:	18 96       	adiw	r26, 0x08	; 8
    1c0e:	1d 92       	st	X+, r1
    1c10:	1d 92       	st	X+, r1
    1c12:	1d 92       	st	X+, r1
    1c14:	1c 92       	st	X, r1
    1c16:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c18:	f9 01       	movw	r30, r18
    1c1a:	64 e0       	ldi	r22, 0x04	; 4
    1c1c:	ee 0f       	add	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	6a 95       	dec	r22
    1c22:	e1 f7       	brne	.-8      	; 0x1c1c <Timebase_DownCounter_SS_Reset_All+0x36>
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	e4 0f       	add	r30, r20
    1c2a:	f5 1f       	adc	r31, r21
    1c2c:	81 8d       	ldd	r24, Z+25	; 0x19
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1c2e:	80 7e       	andi	r24, 0xE0	; 224
    1c30:	81 8f       	std	Z+25, r24	; 0x19
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1c38:	25 30       	cpi	r18, 0x05	; 5
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	e1 f6       	brne	.-72     	; 0x1bf6 <Timebase_DownCounter_SS_Reset_All+0x10>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1c3e:	08 95       	ret

00001c40 <Timebase_Reset>:
void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1c40:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1c44:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    1c48:	08 95       	ret

00001c4a <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1c50:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1c54:	c8 01       	movw	r24, r16
    1c56:	0e 94 8e 03 	call	0x71c	; 0x71c <Timebase_Timer_Config>
  Timebase_Reset();
    1c5a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <Timebase_Reset>
}
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	08 95       	ret

00001c64 <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTERSS_UPDATE_REQ){
    1c64:	e0 91 3f 01 	lds	r30, 0x013F
    1c68:	f0 91 40 01 	lds	r31, 0x0140
    1c6c:	87 89       	ldd	r24, Z+23	; 0x17
    1c6e:	83 ff       	sbrs	r24, 3
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <Timebase_Main_Loop_Executables+0x20>
    Timebase_DownCounter_SS_Update_All();
    1c72:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTERSS_UPDATE_REQ;
    1c76:	e0 91 3f 01 	lds	r30, 0x013F
    1c7a:	f0 91 40 01 	lds	r31, 0x0140
    1c7e:	87 89       	ldd	r24, Z+23	; 0x17
    1c80:	87 7f       	andi	r24, 0xF7	; 247
    1c82:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    1c84:	e0 91 3f 01 	lds	r30, 0x013F
    1c88:	f0 91 40 01 	lds	r31, 0x0140
    1c8c:	87 89       	ldd	r24, Z+23	; 0x17
    1c8e:	81 ff       	sbrs	r24, 1
    1c90:	09 c0       	rjmp	.+18     	; 0x1ca4 <Timebase_Main_Loop_Executables+0x40>
    Timebase_DownCounter_Update_All();
    1c92:	0e 94 72 09 	call	0x12e4	; 0x12e4 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    1c96:	e0 91 3f 01 	lds	r30, 0x013F
    1c9a:	f0 91 40 01 	lds	r31, 0x0140
    1c9e:	87 89       	ldd	r24, Z+23	; 0x17
    1ca0:	8d 7f       	andi	r24, 0xFD	; 253
    1ca2:	87 8b       	std	Z+23, r24	; 0x17
    1ca4:	08 95       	ret

00001ca6 <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1ca6:	e0 91 3f 01 	lds	r30, 0x013F
    1caa:	f0 91 40 01 	lds	r31, 0x0140
    1cae:	80 85       	ldd	r24, Z+8	; 0x08
    1cb0:	91 85       	ldd	r25, Z+9	; 0x09
    1cb2:	01 96       	adiw	r24, 0x01	; 1
    1cb4:	91 87       	std	Z+9, r25	; 0x09
    1cb6:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1cb8:	83 81       	ldd	r24, Z+3	; 0x03
    1cba:	86 bd       	out	0x26, r24	; 38
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTERSS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTERSS_UPDATE_REQ;
    1cbc:	87 89       	ldd	r24, Z+23	; 0x17
    1cbe:	88 60       	ori	r24, 0x08	; 8
    1cc0:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  
  
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1cc2:	80 85       	ldd	r24, Z+8	; 0x08
    1cc4:	91 85       	ldd	r25, Z+9	; 0x09
    1cc6:	61 81       	ldd	r22, Z+1	; 0x01
    1cc8:	72 81       	ldd	r23, Z+2	; 0x02
    1cca:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__udivmodhi4>
    1cce:	89 2b       	or	r24, r25
    1cd0:	81 f4       	brne	.+32     	; 0x1cf2 <Timebase_ISR_Executables+0x4c>
    Timebase->Time.Seconds++;
    1cd2:	82 85       	ldd	r24, Z+10	; 0x0a
    1cd4:	93 85       	ldd	r25, Z+11	; 0x0b
    1cd6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cd8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cda:	01 96       	adiw	r24, 0x01	; 1
    1cdc:	a1 1d       	adc	r26, r1
    1cde:	b1 1d       	adc	r27, r1
    1ce0:	82 87       	std	Z+10, r24	; 0x0a
    1ce2:	93 87       	std	Z+11, r25	; 0x0b
    1ce4:	a4 87       	std	Z+12, r26	; 0x0c
    1ce6:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    1ce8:	11 86       	std	Z+9, r1	; 0x09
    1cea:	10 86       	std	Z+8, r1	; 0x08
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    1cec:	87 89       	ldd	r24, Z+23	; 0x17
    1cee:	82 60       	ori	r24, 0x02	; 2
    1cf0:	87 8b       	std	Z+23, r24	; 0x17
    1cf2:	08 95       	ret

00001cf4 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    1cf4:	1f 92       	push	r1
    1cf6:	0f 92       	push	r0
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	0f 92       	push	r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	2f 93       	push	r18
    1d00:	3f 93       	push	r19
    1d02:	4f 93       	push	r20
    1d04:	5f 93       	push	r21
    1d06:	6f 93       	push	r22
    1d08:	7f 93       	push	r23
    1d0a:	8f 93       	push	r24
    1d0c:	9f 93       	push	r25
    1d0e:	af 93       	push	r26
    1d10:	bf 93       	push	r27
    1d12:	ef 93       	push	r30
    1d14:	ff 93       	push	r31
  PORTD|=(1<<5);
    1d16:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    1d18:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    1d1c:	5d 98       	cbi	0x0b, 5	; 11
}
    1d1e:	ff 91       	pop	r31
    1d20:	ef 91       	pop	r30
    1d22:	bf 91       	pop	r27
    1d24:	af 91       	pop	r26
    1d26:	9f 91       	pop	r25
    1d28:	8f 91       	pop	r24
    1d2a:	7f 91       	pop	r23
    1d2c:	6f 91       	pop	r22
    1d2e:	5f 91       	pop	r21
    1d30:	4f 91       	pop	r20
    1d32:	3f 91       	pop	r19
    1d34:	2f 91       	pop	r18
    1d36:	0f 90       	pop	r0
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	0f 90       	pop	r0
    1d3c:	1f 90       	pop	r1
    1d3e:	18 95       	reti

00001d40 <__mulsi3>:
    1d40:	62 9f       	mul	r22, r18
    1d42:	d0 01       	movw	r26, r0
    1d44:	73 9f       	mul	r23, r19
    1d46:	f0 01       	movw	r30, r0
    1d48:	82 9f       	mul	r24, r18
    1d4a:	e0 0d       	add	r30, r0
    1d4c:	f1 1d       	adc	r31, r1
    1d4e:	64 9f       	mul	r22, r20
    1d50:	e0 0d       	add	r30, r0
    1d52:	f1 1d       	adc	r31, r1
    1d54:	92 9f       	mul	r25, r18
    1d56:	f0 0d       	add	r31, r0
    1d58:	83 9f       	mul	r24, r19
    1d5a:	f0 0d       	add	r31, r0
    1d5c:	74 9f       	mul	r23, r20
    1d5e:	f0 0d       	add	r31, r0
    1d60:	65 9f       	mul	r22, r21
    1d62:	f0 0d       	add	r31, r0
    1d64:	99 27       	eor	r25, r25
    1d66:	72 9f       	mul	r23, r18
    1d68:	b0 0d       	add	r27, r0
    1d6a:	e1 1d       	adc	r30, r1
    1d6c:	f9 1f       	adc	r31, r25
    1d6e:	63 9f       	mul	r22, r19
    1d70:	b0 0d       	add	r27, r0
    1d72:	e1 1d       	adc	r30, r1
    1d74:	f9 1f       	adc	r31, r25
    1d76:	bd 01       	movw	r22, r26
    1d78:	cf 01       	movw	r24, r30
    1d7a:	11 24       	eor	r1, r1
    1d7c:	08 95       	ret

00001d7e <__udivmodhi4>:
    1d7e:	aa 1b       	sub	r26, r26
    1d80:	bb 1b       	sub	r27, r27
    1d82:	51 e1       	ldi	r21, 0x11	; 17
    1d84:	07 c0       	rjmp	.+14     	; 0x1d94 <__udivmodhi4_ep>

00001d86 <__udivmodhi4_loop>:
    1d86:	aa 1f       	adc	r26, r26
    1d88:	bb 1f       	adc	r27, r27
    1d8a:	a6 17       	cp	r26, r22
    1d8c:	b7 07       	cpc	r27, r23
    1d8e:	10 f0       	brcs	.+4      	; 0x1d94 <__udivmodhi4_ep>
    1d90:	a6 1b       	sub	r26, r22
    1d92:	b7 0b       	sbc	r27, r23

00001d94 <__udivmodhi4_ep>:
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	5a 95       	dec	r21
    1d9a:	a9 f7       	brne	.-22     	; 0x1d86 <__udivmodhi4_loop>
    1d9c:	80 95       	com	r24
    1d9e:	90 95       	com	r25
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	08 95       	ret

00001da6 <__udivmodsi4>:
    1da6:	a1 e2       	ldi	r26, 0x21	; 33
    1da8:	1a 2e       	mov	r1, r26
    1daa:	aa 1b       	sub	r26, r26
    1dac:	bb 1b       	sub	r27, r27
    1dae:	fd 01       	movw	r30, r26
    1db0:	0d c0       	rjmp	.+26     	; 0x1dcc <__udivmodsi4_ep>

00001db2 <__udivmodsi4_loop>:
    1db2:	aa 1f       	adc	r26, r26
    1db4:	bb 1f       	adc	r27, r27
    1db6:	ee 1f       	adc	r30, r30
    1db8:	ff 1f       	adc	r31, r31
    1dba:	a2 17       	cp	r26, r18
    1dbc:	b3 07       	cpc	r27, r19
    1dbe:	e4 07       	cpc	r30, r20
    1dc0:	f5 07       	cpc	r31, r21
    1dc2:	20 f0       	brcs	.+8      	; 0x1dcc <__udivmodsi4_ep>
    1dc4:	a2 1b       	sub	r26, r18
    1dc6:	b3 0b       	sbc	r27, r19
    1dc8:	e4 0b       	sbc	r30, r20
    1dca:	f5 0b       	sbc	r31, r21

00001dcc <__udivmodsi4_ep>:
    1dcc:	66 1f       	adc	r22, r22
    1dce:	77 1f       	adc	r23, r23
    1dd0:	88 1f       	adc	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	1a 94       	dec	r1
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <__udivmodsi4_loop>
    1dd8:	60 95       	com	r22
    1dda:	70 95       	com	r23
    1ddc:	80 95       	com	r24
    1dde:	90 95       	com	r25
    1de0:	9b 01       	movw	r18, r22
    1de2:	ac 01       	movw	r20, r24
    1de4:	bd 01       	movw	r22, r26
    1de6:	cf 01       	movw	r24, r30
    1de8:	08 95       	ret

00001dea <__divmodsi4>:
    1dea:	97 fb       	bst	r25, 7
    1dec:	09 2e       	mov	r0, r25
    1dee:	05 26       	eor	r0, r21
    1df0:	0e d0       	rcall	.+28     	; 0x1e0e <__divmodsi4_neg1>
    1df2:	57 fd       	sbrc	r21, 7
    1df4:	04 d0       	rcall	.+8      	; 0x1dfe <__divmodsi4_neg2>
    1df6:	d7 df       	rcall	.-82     	; 0x1da6 <__udivmodsi4>
    1df8:	0a d0       	rcall	.+20     	; 0x1e0e <__divmodsi4_neg1>
    1dfa:	00 1c       	adc	r0, r0
    1dfc:	38 f4       	brcc	.+14     	; 0x1e0c <__divmodsi4_exit>

00001dfe <__divmodsi4_neg2>:
    1dfe:	50 95       	com	r21
    1e00:	40 95       	com	r20
    1e02:	30 95       	com	r19
    1e04:	21 95       	neg	r18
    1e06:	3f 4f       	sbci	r19, 0xFF	; 255
    1e08:	4f 4f       	sbci	r20, 0xFF	; 255
    1e0a:	5f 4f       	sbci	r21, 0xFF	; 255

00001e0c <__divmodsi4_exit>:
    1e0c:	08 95       	ret

00001e0e <__divmodsi4_neg1>:
    1e0e:	f6 f7       	brtc	.-4      	; 0x1e0c <__divmodsi4_exit>
    1e10:	90 95       	com	r25
    1e12:	80 95       	com	r24
    1e14:	70 95       	com	r23
    1e16:	61 95       	neg	r22
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	08 95       	ret

00001e20 <_exit>:
    1e20:	f8 94       	cli

00001e22 <__stop_program>:
    1e22:	ff cf       	rjmp	.-2      	; 0x1e22 <__stop_program>
