
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  0000228c  00002320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000228c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800196  00800196  000023b6  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000023b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001266  00000000  00000000  00002456  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000039c3  00000000  00000000  000036bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  0000707f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002105  00000000  00000000  0000788d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  00009994  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000015f1  00000000  00000000  0000a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001559  00000000  00000000  0000b9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000cf3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e8       	ldi	r30, 0x8C	; 140
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 39       	cpi	r26, 0x96	; 150
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 e9       	ldi	r26, 0x96	; 150
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 31       	cpi	r26, 0x1B	; 27
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 44 11 	jmp	0x2288	; 0x2288 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 39 08 	call	0x1072	; 0x1072 <Timebase_Init>
  App_Setup();
      ae:	0e 94 7e 00 	call	0xfc	; 0xfc <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 46 08 	call	0x108c	; 0x108c <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:


void App_Main_Loop(void){
  
  
  if(UART_Data_Available()){
      bc:	0e 94 30 0c 	call	0x1860	; 0x1860 <UART_Data_Available>
      c0:	88 23       	and	r24, r24
      c2:	d9 f0       	breq	.+54     	; 0xfa <App_Main_Loop+0x3e>
    UART_Tx_Parameter_Hex_SP("CalcCRC", UART_Data_Calculated_CRC_Get() );
      c4:	0e 94 38 0c 	call	0x1870	; 0x1870 <UART_Data_Calculated_CRC_Get>
      c8:	ac 01       	movw	r20, r24
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	0e 94 9f 0b 	call	0x173e	; 0x173e <UART_Tx_Parameter_Hex_SP>
    UART_Tx_Parameter_Hex_SP("ErrorCode", UART_Error_Code_Get() );
      d6:	0e 94 90 0c 	call	0x1920	; 0x1920 <UART_Error_Code_Get>
      da:	48 2f       	mov	r20, r24
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	88 e0       	ldi	r24, 0x08	; 8
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	0e 94 9f 0b 	call	0x173e	; 0x173e <UART_Tx_Parameter_Hex_SP>
    UART_Data_Print_Buf();
      ea:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_Data_Print_Buf>
	UART_Buf_Flush();
      ee:	0e 94 17 0c 	call	0x182e	; 0x182e <UART_Buf_Flush>
	UART_Data_Clear_Available_Flag();
      f2:	0e 94 4a 0c 	call	0x1894	; 0x1894 <UART_Data_Clear_Available_Flag>
	UART_Data_Clear_Read_Complete_Flag();
      f6:	0e 94 4d 0c 	call	0x189a	; 0x189a <UART_Data_Clear_Read_Complete_Flag>
      fa:	08 95       	ret

000000fc <App_Setup>:



void App_Setup(void){

  UART_Init(57600);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	71 ee       	ldi	r23, 0xE1	; 225
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <UART_Init>
  
  
  Timebase_DownCounter_SS_Set_Securely(0, 50);
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	42 e3       	ldi	r20, 0x32	; 50
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	0e 94 12 05 	call	0xa24	; 0xa24 <Timebase_DownCounter_SS_Set_Securely>
  
}
     116:	08 95       	ret

00000118 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     118:	80 ef       	ldi	r24, 0xF0	; 240
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	90 93 ef 01 	sts	0x01EF, r25
     120:	80 93 ee 01 	sts	0x01EE, r24
  Timebase->Config.UpdateRate = 1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	90 93 f1 01 	sts	0x01F1, r25
     12c:	80 93 f0 01 	sts	0x01F0, r24
  Timebase->Time.OVFUpdateValue=0;
     130:	10 92 f3 01 	sts	0x01F3, r1
     134:	10 92 f2 01 	sts	0x01F2, r1
  Timebase->Time.SubSecondsShadow = 0;
     138:	10 92 ff 01 	sts	0x01FF, r1
     13c:	10 92 fe 01 	sts	0x01FE, r1
  Timebase->Time.SecondsShadow = 0;
     140:	10 92 00 02 	sts	0x0200, r1
     144:	10 92 01 02 	sts	0x0201, r1
     148:	10 92 02 02 	sts	0x0202, r1
     14c:	10 92 03 02 	sts	0x0203, r1
  Timebase->Time.SubSeconds = 0;
     150:	10 92 f9 01 	sts	0x01F9, r1
     154:	10 92 f8 01 	sts	0x01F8, r1
  Timebase->Time.Seconds = 0;
     158:	10 92 fa 01 	sts	0x01FA, r1
     15c:	10 92 fb 01 	sts	0x01FB, r1
     160:	10 92 fc 01 	sts	0x01FC, r1
     164:	10 92 fd 01 	sts	0x01FD, r1
  Timebase->Time.VariablesSync = 0;
     168:	10 92 04 02 	sts	0x0204, r1
  Timebase->Time.LastSample = 0;
     16c:	10 92 f4 01 	sts	0x01F4, r1
     170:	10 92 f5 01 	sts	0x01F5, r1
     174:	10 92 f6 01 	sts	0x01F6, r1
     178:	10 92 f7 01 	sts	0x01F7, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
     17c:	10 92 05 02 	sts	0x0205, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     180:	10 92 06 02 	sts	0x0206, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     184:	10 92 07 02 	sts	0x0207, r1
     188:	10 92 08 02 	sts	0x0208, r1
     18c:	10 92 09 02 	sts	0x0209, r1
     190:	10 92 0a 02 	sts	0x020A, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     194:	10 92 0b 02 	sts	0x020B, r1
     198:	10 92 0c 02 	sts	0x020C, r1
     19c:	10 92 0d 02 	sts	0x020D, r1
     1a0:	10 92 0e 02 	sts	0x020E, r1
    Timebase->DownCounterSS[i].Value = 0;
     1a4:	10 92 0f 02 	sts	0x020F, r1
     1a8:	10 92 10 02 	sts	0x0210, r1
     1ac:	10 92 11 02 	sts	0x0211, r1
     1b0:	10 92 12 02 	sts	0x0212, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     1b4:	10 92 13 02 	sts	0x0213, r1
     1b8:	10 92 14 02 	sts	0x0214, r1
     1bc:	10 92 15 02 	sts	0x0215, r1
     1c0:	10 92 16 02 	sts	0x0216, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     1c4:	10 92 17 02 	sts	0x0217, r1
     1c8:	10 92 18 02 	sts	0x0218, r1
     1cc:	10 92 19 02 	sts	0x0219, r1
     1d0:	10 92 1a 02 	sts	0x021A, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
	Timebase->LPDownCounter[i].ReloadValue = 0;
  }
  #endif
  
}
     1d4:	08 95       	ret

000001d6 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     1d6:	8f 92       	push	r8
     1d8:	9f 92       	push	r9
     1da:	bf 92       	push	r11
     1dc:	cf 92       	push	r12
     1de:	df 92       	push	r13
     1e0:	ef 92       	push	r14
     1e2:	ff 92       	push	r15
     1e4:	0f 93       	push	r16
     1e6:	1f 93       	push	r17
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	2a 97       	sbiw	r28, 0x0a	; 10
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     1fe:	de 01       	movw	r26, r28
     200:	11 96       	adiw	r26, 0x01	; 1
     202:	e2 e1       	ldi	r30, 0x12	; 18
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	8a e0       	ldi	r24, 0x0A	; 10
     208:	01 90       	ld	r0, Z+
     20a:	0d 92       	st	X+, r0
     20c:	81 50       	subi	r24, 0x01	; 1
     20e:	e1 f7       	brne	.-8      	; 0x208 <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     210:	94 01       	movw	r18, r8
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	7b e1       	ldi	r23, 0x1B	; 27
     21a:	87 eb       	ldi	r24, 0xB7	; 183
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     222:	b2 2e       	mov	r11, r18
     224:	c3 2e       	mov	r12, r19
     226:	d4 2e       	mov	r13, r20
     228:	05 2f       	mov	r16, r21
     22a:	7e 01       	movw	r14, r28
     22c:	08 94       	sec
     22e:	e1 1c       	adc	r14, r1
     230:	f1 1c       	adc	r15, r1
     232:	c9 01       	movw	r24, r18
     234:	da 01       	movw	r26, r20
     236:	9c 01       	movw	r18, r24
     238:	ad 01       	movw	r20, r26
     23a:	10 e0       	ldi	r17, 0x00	; 0
     23c:	13 c0       	rjmp	.+38     	; 0x264 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     23e:	f7 01       	movw	r30, r14
     240:	21 91       	ld	r18, Z+
     242:	31 91       	ld	r19, Z+
     244:	7f 01       	movw	r14, r30
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	6b 2d       	mov	r22, r11
     24c:	7c 2d       	mov	r23, r12
     24e:	8d 2d       	mov	r24, r13
     250:	90 2f       	mov	r25, r16
     252:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     256:	c9 01       	movw	r24, r18
     258:	da 01       	movw	r26, r20
     25a:	9c 01       	movw	r18, r24
     25c:	ad 01       	movw	r20, r26
	clock_div_index++;
     25e:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     260:	15 30       	cpi	r17, 0x05	; 5
     262:	31 f0       	breq	.+12     	; 0x270 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     264:	2f 3f       	cpi	r18, 0xFF	; 255
     266:	31 05       	cpc	r19, r1
     268:	41 05       	cpc	r20, r1
     26a:	51 05       	cpc	r21, r1
     26c:	09 f0       	breq	.+2      	; 0x270 <Timebase_Timer_Enable+0x9a>
     26e:	3c f7       	brge	.-50     	; 0x23e <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     270:	81 2f       	mov	r24, r17
     272:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     274:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     276:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     278:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     27c:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     27e:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     280:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     282:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     284:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     286:	88 23       	and	r24, r24
     288:	11 f4       	brne	.+4      	; 0x28e <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	0f c0       	rjmp	.+30     	; 0x2ac <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	11 f4       	brne	.+4      	; 0x296 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0b c0       	rjmp	.+22     	; 0x2ac <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     296:	82 30       	cpi	r24, 0x02	; 2
     298:	11 f4       	brne	.+4      	; 0x29e <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	07 c0       	rjmp	.+14     	; 0x2ac <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	11 f4       	brne	.+4      	; 0x2a6 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     2a2:	84 e0       	ldi	r24, 0x04	; 4
     2a4:	03 c0       	rjmp	.+6      	; 0x2ac <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     2a6:	84 30       	cpi	r24, 0x04	; 4
     2a8:	11 f4       	brne	.+4      	; 0x2ae <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     2aa:	85 e0       	ldi	r24, 0x05	; 5
     2ac:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     2ae:	e0 91 ee 01 	lds	r30, 0x01EE
     2b2:	f0 91 ef 01 	lds	r31, 0x01EF
     2b6:	8f ef       	ldi	r24, 0xFF	; 255
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	82 1b       	sub	r24, r18
     2bc:	93 0b       	sbc	r25, r19
     2be:	93 83       	std	Z+3, r25	; 0x03
     2c0:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     2c2:	82 81       	ldd	r24, Z+2	; 0x02
     2c4:	93 81       	ldd	r25, Z+3	; 0x03
     2c6:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 6e 00 	sts	0x006E, r24
  sei();
     2ce:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     2d0:	91 82       	std	Z+1, r9	; 0x01
     2d2:	80 82       	st	Z, r8
}
     2d4:	2a 96       	adiw	r28, 0x0a	; 10
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	cf 91       	pop	r28
     2e2:	df 91       	pop	r29
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	9f 90       	pop	r9
     2f4:	8f 90       	pop	r8
     2f6:	08 95       	ret

000002f8 <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     2f8:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2fa:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     2fc:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     300:	87 e0       	ldi	r24, 0x07	; 7
     302:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     304:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     306:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     308:	16 bc       	out	0x26, r1	; 38
}
     30a:	08 95       	ret

0000030c <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     30c:	f8 94       	cli
}
     30e:	08 95       	ret

00000310 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     310:	78 94       	sei
}
     312:	08 95       	ret

00000314 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     314:	e0 91 ee 01 	lds	r30, 0x01EE
     318:	f0 91 ef 01 	lds	r31, 0x01EF
     31c:	26 85       	ldd	r18, Z+14	; 0x0e
     31e:	37 85       	ldd	r19, Z+15	; 0x0f
}
     320:	c9 01       	movw	r24, r18
     322:	08 95       	ret

00000324 <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     324:	e0 91 ee 01 	lds	r30, 0x01EE
     328:	f0 91 ef 01 	lds	r31, 0x01EF
     32c:	20 89       	ldd	r18, Z+16	; 0x10
     32e:	31 89       	ldd	r19, Z+17	; 0x11
     330:	42 89       	ldd	r20, Z+18	; 0x12
     332:	53 89       	ldd	r21, Z+19	; 0x13
}
     334:	b9 01       	movw	r22, r18
     336:	ca 01       	movw	r24, r20
     338:	08 95       	ret

0000033a <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     33a:	e0 91 ee 01 	lds	r30, 0x01EE
     33e:	f0 91 ef 01 	lds	r31, 0x01EF
     342:	20 85       	ldd	r18, Z+8	; 0x08
     344:	31 85       	ldd	r19, Z+9	; 0x09
}
     346:	c9 01       	movw	r24, r18
     348:	08 95       	ret

0000034a <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     34a:	e0 91 ee 01 	lds	r30, 0x01EE
     34e:	f0 91 ef 01 	lds	r31, 0x01EF
     352:	22 85       	ldd	r18, Z+10	; 0x0a
     354:	33 85       	ldd	r19, Z+11	; 0x0b
     356:	44 85       	ldd	r20, Z+12	; 0x0c
     358:	55 85       	ldd	r21, Z+13	; 0x0d
}
     35a:	b9 01       	movw	r22, r18
     35c:	ca 01       	movw	r24, r20
     35e:	08 95       	ret

00000360 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     360:	e0 91 ee 01 	lds	r30, 0x01EE
     364:	f0 91 ef 01 	lds	r31, 0x01EF
     368:	91 87       	std	Z+9, r25	; 0x09
     36a:	80 87       	std	Z+8, r24	; 0x08
}
     36c:	08 95       	ret

0000036e <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     36e:	e0 91 ee 01 	lds	r30, 0x01EE
     372:	f0 91 ef 01 	lds	r31, 0x01EF
     376:	62 87       	std	Z+10, r22	; 0x0a
     378:	73 87       	std	Z+11, r23	; 0x0b
     37a:	84 87       	std	Z+12, r24	; 0x0c
     37c:	95 87       	std	Z+13, r25	; 0x0d
}
     37e:	08 95       	ret

00000380 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     380:	e0 91 ee 01 	lds	r30, 0x01EE
     384:	f0 91 ef 01 	lds	r31, 0x01EF
     388:	26 85       	ldd	r18, Z+14	; 0x0e
     38a:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     38c:	86 85       	ldd	r24, Z+14	; 0x0e
     38e:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     390:	28 17       	cp	r18, r24
     392:	39 07       	cpc	r19, r25
     394:	c9 f7       	brne	.-14     	; 0x388 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     396:	c9 01       	movw	r24, r18
     398:	08 95       	ret

0000039a <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     39a:	e0 91 ee 01 	lds	r30, 0x01EE
     39e:	f0 91 ef 01 	lds	r31, 0x01EF
     3a2:	20 89       	ldd	r18, Z+16	; 0x10
     3a4:	31 89       	ldd	r19, Z+17	; 0x11
     3a6:	42 89       	ldd	r20, Z+18	; 0x12
     3a8:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     3aa:	80 89       	ldd	r24, Z+16	; 0x10
     3ac:	91 89       	ldd	r25, Z+17	; 0x11
     3ae:	a2 89       	ldd	r26, Z+18	; 0x12
     3b0:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     3b2:	28 17       	cp	r18, r24
     3b4:	39 07       	cpc	r19, r25
     3b6:	4a 07       	cpc	r20, r26
     3b8:	5b 07       	cpc	r21, r27
     3ba:	99 f7       	brne	.-26     	; 0x3a2 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     3bc:	b9 01       	movw	r22, r18
     3be:	ca 01       	movw	r24, r20
     3c0:	08 95       	ret

000003c2 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     3c2:	e0 91 ee 01 	lds	r30, 0x01EE
     3c6:	f0 91 ef 01 	lds	r31, 0x01EF
     3ca:	84 89       	ldd	r24, Z+20	; 0x14
     3cc:	88 23       	and	r24, r24
     3ce:	e1 f4       	brne	.+56     	; 0x408 <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     3d0:	26 85       	ldd	r18, Z+14	; 0x0e
     3d2:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     3d4:	86 85       	ldd	r24, Z+14	; 0x0e
     3d6:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     3d8:	28 17       	cp	r18, r24
     3da:	39 07       	cpc	r19, r25
     3dc:	c9 f7       	brne	.-14     	; 0x3d0 <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     3de:	31 87       	std	Z+9, r19	; 0x09
     3e0:	20 87       	std	Z+8, r18	; 0x08
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     3e2:	20 89       	ldd	r18, Z+16	; 0x10
     3e4:	31 89       	ldd	r19, Z+17	; 0x11
     3e6:	42 89       	ldd	r20, Z+18	; 0x12
     3e8:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     3ea:	80 89       	ldd	r24, Z+16	; 0x10
     3ec:	91 89       	ldd	r25, Z+17	; 0x11
     3ee:	a2 89       	ldd	r26, Z+18	; 0x12
     3f0:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     3f2:	28 17       	cp	r18, r24
     3f4:	39 07       	cpc	r19, r25
     3f6:	4a 07       	cpc	r20, r26
     3f8:	5b 07       	cpc	r21, r27
     3fa:	99 f7       	brne	.-26     	; 0x3e2 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     3fc:	22 87       	std	Z+10, r18	; 0x0a
     3fe:	33 87       	std	Z+11, r19	; 0x0b
     400:	44 87       	std	Z+12, r20	; 0x0c
     402:	55 87       	std	Z+13, r21	; 0x0d
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	84 8b       	std	Z+20, r24	; 0x14
     408:	08 95       	ret

0000040a <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     40a:	8f 92       	push	r8
     40c:	9f 92       	push	r9
     40e:	af 92       	push	r10
     410:	bf 92       	push	r11
     412:	cf 92       	push	r12
     414:	df 92       	push	r13
     416:	ef 92       	push	r14
     418:	ff 92       	push	r15
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     424:	c0 91 ee 01 	lds	r28, 0x01EE
     428:	d0 91 ef 01 	lds	r29, 0x01EF
     42c:	ce 84       	ldd	r12, Y+14	; 0x0e
     42e:	df 84       	ldd	r13, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     430:	8e 85       	ldd	r24, Y+14	; 0x0e
     432:	9f 85       	ldd	r25, Y+15	; 0x0f
	if(tmp0 == tmp1){
     434:	c8 16       	cp	r12, r24
     436:	d9 06       	cpc	r13, r25
     438:	c9 f7       	brne	.-14     	; 0x42c <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     43a:	e8 88       	ldd	r14, Y+16	; 0x10
     43c:	f9 88       	ldd	r15, Y+17	; 0x11
     43e:	0a 89       	ldd	r16, Y+18	; 0x12
     440:	1b 89       	ldd	r17, Y+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     442:	88 89       	ldd	r24, Y+16	; 0x10
     444:	99 89       	ldd	r25, Y+17	; 0x11
     446:	aa 89       	ldd	r26, Y+18	; 0x12
     448:	bb 89       	ldd	r27, Y+19	; 0x13
	if(tmp0 == tmp1){
     44a:	e8 16       	cp	r14, r24
     44c:	f9 06       	cpc	r15, r25
     44e:	0a 07       	cpc	r16, r26
     450:	1b 07       	cpc	r17, r27
     452:	99 f7       	brne	.-26     	; 0x43a <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     454:	28 81       	ld	r18, Y
     456:	39 81       	ldd	r19, Y+1	; 0x01
     458:	40 e0       	ldi	r20, 0x00	; 0
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	c8 01       	movw	r24, r16
     45e:	b7 01       	movw	r22, r14
     460:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
  smpl_val += smpl_ss;
     464:	76 01       	movw	r14, r12
     466:	00 e0       	ldi	r16, 0x00	; 0
     468:	10 e0       	ldi	r17, 0x00	; 0
     46a:	95 01       	movw	r18, r10
     46c:	40 e0       	ldi	r20, 0x00	; 0
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	e2 0e       	add	r14, r18
     472:	f3 1e       	adc	r15, r19
     474:	04 1f       	adc	r16, r20
     476:	15 1f       	adc	r17, r21
  smpl_val += value;
     478:	e6 0e       	add	r14, r22
     47a:	f7 1e       	adc	r15, r23
     47c:	08 1f       	adc	r16, r24
     47e:	19 1f       	adc	r17, r25
     480:	20 e0       	ldi	r18, 0x00	; 0
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	40 e0       	ldi	r20, 0x00	; 0
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	25 c0       	rjmp	.+74     	; 0x4d4 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     48a:	8e 84       	ldd	r8, Y+14	; 0x0e
     48c:	9f 84       	ldd	r9, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     48e:	8e 85       	ldd	r24, Y+14	; 0x0e
     490:	9f 85       	ldd	r25, Y+15	; 0x0f
	if(tmp0 == tmp1){
     492:	88 16       	cp	r8, r24
     494:	99 06       	cpc	r9, r25
     496:	c9 f7       	brne	.-14     	; 0x48a <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     498:	a8 88       	ldd	r10, Y+16	; 0x10
     49a:	b9 88       	ldd	r11, Y+17	; 0x11
     49c:	ca 88       	ldd	r12, Y+18	; 0x12
     49e:	db 88       	ldd	r13, Y+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     4a0:	88 89       	ldd	r24, Y+16	; 0x10
     4a2:	99 89       	ldd	r25, Y+17	; 0x11
     4a4:	aa 89       	ldd	r26, Y+18	; 0x12
     4a6:	bb 89       	ldd	r27, Y+19	; 0x13
	if(tmp0 == tmp1){
     4a8:	a8 16       	cp	r10, r24
     4aa:	b9 06       	cpc	r11, r25
     4ac:	ca 06       	cpc	r12, r26
     4ae:	db 06       	cpc	r13, r27
     4b0:	99 f7       	brne	.-26     	; 0x498 <Timebase_Timer_Delay_SubSeconds+0x8e>
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     4b2:	28 81       	ld	r18, Y
     4b4:	39 81       	ldd	r19, Y+1	; 0x01
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	50 e0       	ldi	r21, 0x00	; 0
     4ba:	c6 01       	movw	r24, r12
     4bc:	b5 01       	movw	r22, r10
     4be:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
	curr_val += curr_ss;
     4c6:	c4 01       	movw	r24, r8
     4c8:	a0 e0       	ldi	r26, 0x00	; 0
     4ca:	b0 e0       	ldi	r27, 0x00	; 0
     4cc:	28 0f       	add	r18, r24
     4ce:	39 1f       	adc	r19, r25
     4d0:	4a 1f       	adc	r20, r26
     4d2:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     4d4:	2e 15       	cp	r18, r14
     4d6:	3f 05       	cpc	r19, r15
     4d8:	40 07       	cpc	r20, r16
     4da:	51 07       	cpc	r21, r17
     4dc:	b4 f2       	brlt	.-84     	; 0x48a <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     4de:	df 91       	pop	r29
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	ff 90       	pop	r15
     4e8:	ef 90       	pop	r14
     4ea:	df 90       	pop	r13
     4ec:	cf 90       	pop	r12
     4ee:	bf 90       	pop	r11
     4f0:	af 90       	pop	r10
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	08 95       	ret

000004f8 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4fe:	e0 91 ee 01 	lds	r30, 0x01EE
     502:	f0 91 ef 01 	lds	r31, 0x01EF
     506:	66 85       	ldd	r22, Z+14	; 0x0e
     508:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     50a:	86 85       	ldd	r24, Z+14	; 0x0e
     50c:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     50e:	68 17       	cp	r22, r24
     510:	79 07       	cpc	r23, r25
     512:	c9 f7       	brne	.-14     	; 0x506 <Timebase_Timer_Await_SubSeconds+0xe>
     514:	07 c0       	rjmp	.+14     	; 0x524 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     516:	66 85       	ldd	r22, Z+14	; 0x0e
     518:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     51a:	86 85       	ldd	r24, Z+14	; 0x0e
     51c:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     51e:	68 17       	cp	r22, r24
     520:	79 07       	cpc	r23, r25
     522:	c9 f7       	brne	.-14     	; 0x516 <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     524:	24 81       	ldd	r18, Z+4	; 0x04
     526:	35 81       	ldd	r19, Z+5	; 0x05
     528:	46 81       	ldd	r20, Z+6	; 0x06
     52a:	57 81       	ldd	r21, Z+7	; 0x07
     52c:	cb 01       	movw	r24, r22
     52e:	a0 e0       	ldi	r26, 0x00	; 0
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	82 17       	cp	r24, r18
     534:	93 07       	cpc	r25, r19
     536:	a4 07       	cpc	r26, r20
     538:	b5 07       	cpc	r27, r21
     53a:	69 f7       	brne	.-38     	; 0x516 <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     53c:	26 85       	ldd	r18, Z+14	; 0x0e
     53e:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     540:	86 85       	ldd	r24, Z+14	; 0x0e
     542:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     544:	28 17       	cp	r18, r24
     546:	39 07       	cpc	r19, r25
     548:	c9 f7       	brne	.-14     	; 0x53c <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     54a:	c9 01       	movw	r24, r18
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	84 83       	std	Z+4, r24	; 0x04
     552:	95 83       	std	Z+5, r25	; 0x05
     554:	a6 83       	std	Z+6, r26	; 0x06
     556:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     558:	24 81       	ldd	r18, Z+4	; 0x04
     55a:	35 81       	ldd	r19, Z+5	; 0x05
     55c:	46 81       	ldd	r20, Z+6	; 0x06
     55e:	57 81       	ldd	r21, Z+7	; 0x07
     560:	ce 01       	movw	r24, r28
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	82 0f       	add	r24, r18
     568:	93 1f       	adc	r25, r19
     56a:	a4 1f       	adc	r26, r20
     56c:	b5 1f       	adc	r27, r21
     56e:	84 83       	std	Z+4, r24	; 0x04
     570:	95 83       	std	Z+5, r25	; 0x05
     572:	a6 83       	std	Z+6, r26	; 0x06
     574:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     576:	24 81       	ldd	r18, Z+4	; 0x04
     578:	35 81       	ldd	r19, Z+5	; 0x05
     57a:	46 81       	ldd	r20, Z+6	; 0x06
     57c:	57 81       	ldd	r21, Z+7	; 0x07
     57e:	80 81       	ld	r24, Z
     580:	91 81       	ldd	r25, Z+1	; 0x01
     582:	a0 e0       	ldi	r26, 0x00	; 0
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	28 17       	cp	r18, r24
     588:	39 07       	cpc	r19, r25
     58a:	4a 07       	cpc	r20, r26
     58c:	5b 07       	cpc	r21, r27
     58e:	84 f0       	brlt	.+32     	; 0x5b0 <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     590:	24 81       	ldd	r18, Z+4	; 0x04
     592:	35 81       	ldd	r19, Z+5	; 0x05
     594:	46 81       	ldd	r20, Z+6	; 0x06
     596:	57 81       	ldd	r21, Z+7	; 0x07
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	a0 e0       	ldi	r26, 0x00	; 0
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	28 1b       	sub	r18, r24
     5a2:	39 0b       	sbc	r19, r25
     5a4:	4a 0b       	sbc	r20, r26
     5a6:	5b 0b       	sbc	r21, r27
     5a8:	24 83       	std	Z+4, r18	; 0x04
     5aa:	35 83       	std	Z+5, r19	; 0x05
     5ac:	46 83       	std	Z+6, r20	; 0x06
     5ae:	57 83       	std	Z+7, r21	; 0x07
  }
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     5c0:	e0 91 ee 01 	lds	r30, 0x01EE
     5c4:	f0 91 ef 01 	lds	r31, 0x01EF
     5c8:	20 89       	ldd	r18, Z+16	; 0x10
     5ca:	31 89       	ldd	r19, Z+17	; 0x11
     5cc:	42 89       	ldd	r20, Z+18	; 0x12
     5ce:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     5d0:	80 89       	ldd	r24, Z+16	; 0x10
     5d2:	91 89       	ldd	r25, Z+17	; 0x11
     5d4:	a2 89       	ldd	r26, Z+18	; 0x12
     5d6:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     5d8:	28 17       	cp	r18, r24
     5da:	39 07       	cpc	r19, r25
     5dc:	4a 07       	cpc	r20, r26
     5de:	5b 07       	cpc	r21, r27
     5e0:	99 f7       	brne	.-26     	; 0x5c8 <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     5e2:	7b 01       	movw	r14, r22
     5e4:	00 e0       	ldi	r16, 0x00	; 0
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	e2 0e       	add	r14, r18
     5ea:	f3 1e       	adc	r15, r19
     5ec:	04 1f       	adc	r16, r20
     5ee:	15 1f       	adc	r17, r21
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	0d c0       	rjmp	.+26     	; 0x614 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     5fa:	20 89       	ldd	r18, Z+16	; 0x10
     5fc:	31 89       	ldd	r19, Z+17	; 0x11
     5fe:	42 89       	ldd	r20, Z+18	; 0x12
     600:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     602:	80 89       	ldd	r24, Z+16	; 0x10
     604:	91 89       	ldd	r25, Z+17	; 0x11
     606:	a2 89       	ldd	r26, Z+18	; 0x12
     608:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     60a:	28 17       	cp	r18, r24
     60c:	39 07       	cpc	r19, r25
     60e:	4a 07       	cpc	r20, r26
     610:	5b 07       	cpc	r21, r27
     612:	99 f7       	brne	.-26     	; 0x5fa <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     614:	2e 15       	cp	r18, r14
     616:	3f 05       	cpc	r19, r15
     618:	40 07       	cpc	r20, r16
     61a:	51 07       	cpc	r21, r17
     61c:	74 f3       	brlt	.-36     	; 0x5fa <Timebase_Timer_Delay_Seconds+0x44>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	08 95       	ret

00000628 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     628:	e0 91 ee 01 	lds	r30, 0x01EE
     62c:	f0 91 ef 01 	lds	r31, 0x01EF
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	25 e1       	ldi	r18, 0x15	; 21
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	ac 01       	movw	r20, r24
     638:	42 9f       	mul	r20, r18
     63a:	c0 01       	movw	r24, r0
     63c:	43 9f       	mul	r20, r19
     63e:	90 0d       	add	r25, r0
     640:	52 9f       	mul	r21, r18
     642:	90 0d       	add	r25, r0
     644:	11 24       	eor	r1, r1
     646:	e8 0f       	add	r30, r24
     648:	f9 1f       	adc	r31, r25
     64a:	86 89       	ldd	r24, Z+22	; 0x16
     64c:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     64e:	8f 70       	andi	r24, 0x0F	; 15
     650:	08 95       	ret

00000652 <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     652:	e0 91 ee 01 	lds	r30, 0x01EE
     656:	f0 91 ef 01 	lds	r31, 0x01EF
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	25 e1       	ldi	r18, 0x15	; 21
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	ac 01       	movw	r20, r24
     662:	42 9f       	mul	r20, r18
     664:	c0 01       	movw	r24, r0
     666:	43 9f       	mul	r20, r19
     668:	90 0d       	add	r25, r0
     66a:	52 9f       	mul	r21, r18
     66c:	90 0d       	add	r25, r0
     66e:	11 24       	eor	r1, r1
     670:	e8 0f       	add	r30, r24
     672:	f9 1f       	adc	r31, r25
     674:	6f 70       	andi	r22, 0x0F	; 15
     676:	66 0f       	add	r22, r22
     678:	86 89       	ldd	r24, Z+22	; 0x16
     67a:	81 7e       	andi	r24, 0xE1	; 225
     67c:	86 2b       	or	r24, r22
     67e:	86 8b       	std	Z+22, r24	; 0x16
}
     680:	08 95       	ret

00000682 <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     682:	e0 91 ee 01 	lds	r30, 0x01EE
     686:	f0 91 ef 01 	lds	r31, 0x01EF
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	25 e1       	ldi	r18, 0x15	; 21
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	ac 01       	movw	r20, r24
     692:	42 9f       	mul	r20, r18
     694:	c0 01       	movw	r24, r0
     696:	43 9f       	mul	r20, r19
     698:	90 0d       	add	r25, r0
     69a:	52 9f       	mul	r21, r18
     69c:	90 0d       	add	r25, r0
     69e:	11 24       	eor	r1, r1
     6a0:	e8 0f       	add	r30, r24
     6a2:	f9 1f       	adc	r31, r25
     6a4:	df 01       	movw	r26, r30
     6a6:	5f 96       	adiw	r26, 0x1f	; 31
     6a8:	67 8d       	ldd	r22, Z+31	; 0x1f
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	7c 91       	ld	r23, X
     6ae:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	8c 91       	ld	r24, X
     6b4:	12 97       	sbiw	r26, 0x02	; 2
     6b6:	13 96       	adiw	r26, 0x03	; 3
     6b8:	9c 91       	ld	r25, X
     6ba:	08 95       	ret

000006bc <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     6bc:	e0 91 ee 01 	lds	r30, 0x01EE
     6c0:	f0 91 ef 01 	lds	r31, 0x01EF
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	25 e1       	ldi	r18, 0x15	; 21
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	dc 01       	movw	r26, r24
     6cc:	a2 9f       	mul	r26, r18
     6ce:	c0 01       	movw	r24, r0
     6d0:	a3 9f       	mul	r26, r19
     6d2:	90 0d       	add	r25, r0
     6d4:	b2 9f       	mul	r27, r18
     6d6:	90 0d       	add	r25, r0
     6d8:	11 24       	eor	r1, r1
     6da:	e8 0f       	add	r30, r24
     6dc:	f9 1f       	adc	r31, r25
     6de:	47 8f       	std	Z+31, r20	; 0x1f
     6e0:	50 a3       	std	Z+32, r21	; 0x20
     6e2:	61 a3       	std	Z+33, r22	; 0x21
     6e4:	72 a3       	std	Z+34, r23	; 0x22
}
     6e6:	08 95       	ret

000006e8 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     6e8:	e0 91 ee 01 	lds	r30, 0x01EE
     6ec:	f0 91 ef 01 	lds	r31, 0x01EF
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	25 e1       	ldi	r18, 0x15	; 21
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	ac 01       	movw	r20, r24
     6f8:	42 9f       	mul	r20, r18
     6fa:	c0 01       	movw	r24, r0
     6fc:	43 9f       	mul	r20, r19
     6fe:	90 0d       	add	r25, r0
     700:	52 9f       	mul	r21, r18
     702:	90 0d       	add	r25, r0
     704:	11 24       	eor	r1, r1
     706:	e8 0f       	add	r30, r24
     708:	f9 1f       	adc	r31, r25
     70a:	df 01       	movw	r26, r30
     70c:	57 96       	adiw	r26, 0x17	; 23
     70e:	67 89       	ldd	r22, Z+23	; 0x17
     710:	11 96       	adiw	r26, 0x01	; 1
     712:	7c 91       	ld	r23, X
     714:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     716:	12 96       	adiw	r26, 0x02	; 2
     718:	8c 91       	ld	r24, X
     71a:	12 97       	sbiw	r26, 0x02	; 2
     71c:	13 96       	adiw	r26, 0x03	; 3
     71e:	9c 91       	ld	r25, X
     720:	08 95       	ret

00000722 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     722:	e0 91 ee 01 	lds	r30, 0x01EE
     726:	f0 91 ef 01 	lds	r31, 0x01EF
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	25 e1       	ldi	r18, 0x15	; 21
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	ac 01       	movw	r20, r24
     732:	42 9f       	mul	r20, r18
     734:	c0 01       	movw	r24, r0
     736:	43 9f       	mul	r20, r19
     738:	90 0d       	add	r25, r0
     73a:	52 9f       	mul	r21, r18
     73c:	90 0d       	add	r25, r0
     73e:	11 24       	eor	r1, r1
     740:	e8 0f       	add	r30, r24
     742:	f9 1f       	adc	r31, r25
     744:	df 01       	movw	r26, r30
     746:	5b 96       	adiw	r26, 0x1b	; 27
     748:	63 8d       	ldd	r22, Z+27	; 0x1b
     74a:	11 96       	adiw	r26, 0x01	; 1
     74c:	7c 91       	ld	r23, X
     74e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     750:	12 96       	adiw	r26, 0x02	; 2
     752:	8c 91       	ld	r24, X
     754:	12 97       	sbiw	r26, 0x02	; 2
     756:	13 96       	adiw	r26, 0x03	; 3
     758:	9c 91       	ld	r25, X
     75a:	08 95       	ret

0000075c <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     75c:	e0 91 ee 01 	lds	r30, 0x01EE
     760:	f0 91 ef 01 	lds	r31, 0x01EF
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	25 e1       	ldi	r18, 0x15	; 21
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	dc 01       	movw	r26, r24
     76c:	a2 9f       	mul	r26, r18
     76e:	c0 01       	movw	r24, r0
     770:	a3 9f       	mul	r26, r19
     772:	90 0d       	add	r25, r0
     774:	b2 9f       	mul	r27, r18
     776:	90 0d       	add	r25, r0
     778:	11 24       	eor	r1, r1
     77a:	e8 0f       	add	r30, r24
     77c:	f9 1f       	adc	r31, r25
     77e:	47 8b       	std	Z+23, r20	; 0x17
     780:	50 8f       	std	Z+24, r21	; 0x18
     782:	61 8f       	std	Z+25, r22	; 0x19
     784:	72 8f       	std	Z+26, r23	; 0x1a
}
     786:	08 95       	ret

00000788 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     788:	e0 91 ee 01 	lds	r30, 0x01EE
     78c:	f0 91 ef 01 	lds	r31, 0x01EF
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	25 e1       	ldi	r18, 0x15	; 21
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	dc 01       	movw	r26, r24
     798:	a2 9f       	mul	r26, r18
     79a:	c0 01       	movw	r24, r0
     79c:	a3 9f       	mul	r26, r19
     79e:	90 0d       	add	r25, r0
     7a0:	b2 9f       	mul	r27, r18
     7a2:	90 0d       	add	r25, r0
     7a4:	11 24       	eor	r1, r1
     7a6:	e8 0f       	add	r30, r24
     7a8:	f9 1f       	adc	r31, r25
     7aa:	43 8f       	std	Z+27, r20	; 0x1b
     7ac:	54 8f       	std	Z+28, r21	; 0x1c
     7ae:	65 8f       	std	Z+29, r22	; 0x1d
     7b0:	76 8f       	std	Z+30, r23	; 0x1e
}
     7b2:	08 95       	ret

000007b4 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     7b4:	e0 91 ee 01 	lds	r30, 0x01EE
     7b8:	f0 91 ef 01 	lds	r31, 0x01EF
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	25 e1       	ldi	r18, 0x15	; 21
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	ac 01       	movw	r20, r24
     7c4:	42 9f       	mul	r20, r18
     7c6:	c0 01       	movw	r24, r0
     7c8:	43 9f       	mul	r20, r19
     7ca:	90 0d       	add	r25, r0
     7cc:	52 9f       	mul	r21, r18
     7ce:	90 0d       	add	r25, r0
     7d0:	11 24       	eor	r1, r1
     7d2:	e8 0f       	add	r30, r24
     7d4:	f9 1f       	adc	r31, r25
     7d6:	df 01       	movw	r26, r30
     7d8:	93 96       	adiw	r26, 0x23	; 35
     7da:	63 a1       	ldd	r22, Z+35	; 0x23
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	7c 91       	ld	r23, X
     7e0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     7e2:	12 96       	adiw	r26, 0x02	; 2
     7e4:	8c 91       	ld	r24, X
     7e6:	12 97       	sbiw	r26, 0x02	; 2
     7e8:	13 96       	adiw	r26, 0x03	; 3
     7ea:	9c 91       	ld	r25, X
     7ec:	08 95       	ret

000007ee <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     7ee:	e0 91 ee 01 	lds	r30, 0x01EE
     7f2:	f0 91 ef 01 	lds	r31, 0x01EF
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     7fa:	77 ff       	sbrs	r23, 7
     7fc:	11 c0       	rjmp	.+34     	; 0x820 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     7fe:	85 e1       	ldi	r24, 0x15	; 21
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	ac 01       	movw	r20, r24
     804:	24 9f       	mul	r18, r20
     806:	c0 01       	movw	r24, r0
     808:	25 9f       	mul	r18, r21
     80a:	90 0d       	add	r25, r0
     80c:	34 9f       	mul	r19, r20
     80e:	90 0d       	add	r25, r0
     810:	11 24       	eor	r1, r1
     812:	e8 0f       	add	r30, r24
     814:	f9 1f       	adc	r31, r25
     816:	13 a2       	std	Z+35, r1	; 0x23
     818:	14 a2       	std	Z+36, r1	; 0x24
     81a:	15 a2       	std	Z+37, r1	; 0x25
     81c:	16 a2       	std	Z+38, r1	; 0x26
     81e:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     820:	85 e1       	ldi	r24, 0x15	; 21
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	dc 01       	movw	r26, r24
     826:	2a 9f       	mul	r18, r26
     828:	c0 01       	movw	r24, r0
     82a:	2b 9f       	mul	r18, r27
     82c:	90 0d       	add	r25, r0
     82e:	3a 9f       	mul	r19, r26
     830:	90 0d       	add	r25, r0
     832:	11 24       	eor	r1, r1
     834:	e8 0f       	add	r30, r24
     836:	f9 1f       	adc	r31, r25
     838:	43 a3       	std	Z+35, r20	; 0x23
     83a:	54 a3       	std	Z+36, r21	; 0x24
     83c:	65 a3       	std	Z+37, r22	; 0x25
     83e:	76 a3       	std	Z+38, r23	; 0x26
     840:	08 95       	ret

00000842 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     842:	e0 91 ee 01 	lds	r30, 0x01EE
     846:	f0 91 ef 01 	lds	r31, 0x01EF
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	25 e1       	ldi	r18, 0x15	; 21
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	ac 01       	movw	r20, r24
     852:	42 9f       	mul	r20, r18
     854:	c0 01       	movw	r24, r0
     856:	43 9f       	mul	r20, r19
     858:	90 0d       	add	r25, r0
     85a:	52 9f       	mul	r21, r18
     85c:	90 0d       	add	r25, r0
     85e:	11 24       	eor	r1, r1
     860:	e8 0f       	add	r30, r24
     862:	f9 1f       	adc	r31, r25
     864:	86 89       	ldd	r24, Z+22	; 0x16
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     866:	81 70       	andi	r24, 0x01	; 1
     868:	08 95       	ret

0000086a <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     86a:	e0 91 ee 01 	lds	r30, 0x01EE
     86e:	f0 91 ef 01 	lds	r31, 0x01EF
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	25 e1       	ldi	r18, 0x15	; 21
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	ac 01       	movw	r20, r24
     87a:	42 9f       	mul	r20, r18
     87c:	c0 01       	movw	r24, r0
     87e:	43 9f       	mul	r20, r19
     880:	90 0d       	add	r25, r0
     882:	52 9f       	mul	r21, r18
     884:	90 0d       	add	r25, r0
     886:	11 24       	eor	r1, r1
     888:	e8 0f       	add	r30, r24
     88a:	f9 1f       	adc	r31, r25
     88c:	86 89       	ldd	r24, Z+22	; 0x16
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	86 8b       	std	Z+22, r24	; 0x16
}
     892:	08 95       	ret

00000894 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     894:	e0 91 ee 01 	lds	r30, 0x01EE
     898:	f0 91 ef 01 	lds	r31, 0x01EF
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	25 e1       	ldi	r18, 0x15	; 21
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	ac 01       	movw	r20, r24
     8a4:	42 9f       	mul	r20, r18
     8a6:	c0 01       	movw	r24, r0
     8a8:	43 9f       	mul	r20, r19
     8aa:	90 0d       	add	r25, r0
     8ac:	52 9f       	mul	r21, r18
     8ae:	90 0d       	add	r25, r0
     8b0:	11 24       	eor	r1, r1
     8b2:	e8 0f       	add	r30, r24
     8b4:	f9 1f       	adc	r31, r25
     8b6:	86 89       	ldd	r24, Z+22	; 0x16
     8b8:	8e 7f       	andi	r24, 0xFE	; 254
     8ba:	86 8b       	std	Z+22, r24	; 0x16
}
     8bc:	08 95       	ret

000008be <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     8be:	e0 91 ee 01 	lds	r30, 0x01EE
     8c2:	f0 91 ef 01 	lds	r31, 0x01EF
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	25 e1       	ldi	r18, 0x15	; 21
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	ac 01       	movw	r20, r24
     8ce:	42 9f       	mul	r20, r18
     8d0:	c0 01       	movw	r24, r0
     8d2:	43 9f       	mul	r20, r19
     8d4:	90 0d       	add	r25, r0
     8d6:	52 9f       	mul	r21, r18
     8d8:	90 0d       	add	r25, r0
     8da:	11 24       	eor	r1, r1
     8dc:	e8 0f       	add	r30, r24
     8de:	f9 1f       	adc	r31, r25
     8e0:	df 01       	movw	r26, r30
     8e2:	97 96       	adiw	r26, 0x27	; 39
     8e4:	67 a1       	ldd	r22, Z+39	; 0x27
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	7c 91       	ld	r23, X
     8ea:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     8ec:	12 96       	adiw	r26, 0x02	; 2
     8ee:	8c 91       	ld	r24, X
     8f0:	12 97       	sbiw	r26, 0x02	; 2
     8f2:	13 96       	adiw	r26, 0x03	; 3
     8f4:	9c 91       	ld	r25, X
     8f6:	08 95       	ret

000008f8 <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     8f8:	e0 91 ee 01 	lds	r30, 0x01EE
     8fc:	f0 91 ef 01 	lds	r31, 0x01EF
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	25 e1       	ldi	r18, 0x15	; 21
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	dc 01       	movw	r26, r24
     908:	a2 9f       	mul	r26, r18
     90a:	c0 01       	movw	r24, r0
     90c:	a3 9f       	mul	r26, r19
     90e:	90 0d       	add	r25, r0
     910:	b2 9f       	mul	r27, r18
     912:	90 0d       	add	r25, r0
     914:	11 24       	eor	r1, r1
     916:	e8 0f       	add	r30, r24
     918:	f9 1f       	adc	r31, r25
     91a:	47 a3       	std	Z+39, r20	; 0x27
     91c:	50 a7       	std	Z+40, r21	; 0x28
     91e:	61 a7       	std	Z+41, r22	; 0x29
     920:	72 a7       	std	Z+42, r23	; 0x2a
}
     922:	08 95       	ret

00000924 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     924:	e0 91 ee 01 	lds	r30, 0x01EE
     928:	f0 91 ef 01 	lds	r31, 0x01EF
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	25 e1       	ldi	r18, 0x15	; 21
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	ac 01       	movw	r20, r24
     934:	42 9f       	mul	r20, r18
     936:	c0 01       	movw	r24, r0
     938:	43 9f       	mul	r20, r19
     93a:	90 0d       	add	r25, r0
     93c:	52 9f       	mul	r21, r18
     93e:	90 0d       	add	r25, r0
     940:	11 24       	eor	r1, r1
     942:	e8 0f       	add	r30, r24
     944:	f9 1f       	adc	r31, r25
     946:	13 8e       	std	Z+27, r1	; 0x1b
     948:	14 8e       	std	Z+28, r1	; 0x1c
     94a:	15 8e       	std	Z+29, r1	; 0x1d
     94c:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     94e:	17 8a       	std	Z+23, r1	; 0x17
     950:	10 8e       	std	Z+24, r1	; 0x18
     952:	11 8e       	std	Z+25, r1	; 0x19
     954:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     956:	17 8e       	std	Z+31, r1	; 0x1f
     958:	10 a2       	std	Z+32, r1	; 0x20
     95a:	11 a2       	std	Z+33, r1	; 0x21
     95c:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     95e:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     960:	80 7e       	andi	r24, 0xE0	; 224
     962:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     964:	17 a2       	std	Z+39, r1	; 0x27
     966:	10 a6       	std	Z+40, r1	; 0x28
     968:	11 a6       	std	Z+41, r1	; 0x29
     96a:	12 a6       	std	Z+42, r1	; 0x2a
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     96c:	08 95       	ret

0000096e <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     96e:	e0 91 ee 01 	lds	r30, 0x01EE
     972:	f0 91 ef 01 	lds	r31, 0x01EF
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	25 e1       	ldi	r18, 0x15	; 21
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	ac 01       	movw	r20, r24
     97e:	42 9f       	mul	r20, r18
     980:	c0 01       	movw	r24, r0
     982:	43 9f       	mul	r20, r19
     984:	90 0d       	add	r25, r0
     986:	52 9f       	mul	r21, r18
     988:	90 0d       	add	r25, r0
     98a:	11 24       	eor	r1, r1
     98c:	e8 0f       	add	r30, r24
     98e:	f9 1f       	adc	r31, r25
     990:	13 8e       	std	Z+27, r1	; 0x1b
     992:	14 8e       	std	Z+28, r1	; 0x1c
     994:	15 8e       	std	Z+29, r1	; 0x1d
     996:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     998:	17 8a       	std	Z+23, r1	; 0x17
     99a:	10 8e       	std	Z+24, r1	; 0x18
     99c:	11 8e       	std	Z+25, r1	; 0x19
     99e:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     9a0:	17 8e       	std	Z+31, r1	; 0x1f
     9a2:	10 a2       	std	Z+32, r1	; 0x20
     9a4:	11 a2       	std	Z+33, r1	; 0x21
     9a6:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     9a8:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     9aa:	80 7e       	andi	r24, 0xE0	; 224
     9ac:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     9ae:	17 a2       	std	Z+39, r1	; 0x27
     9b0:	10 a6       	std	Z+40, r1	; 0x28
     9b2:	11 a6       	std	Z+41, r1	; 0x29
     9b4:	12 a6       	std	Z+42, r1	; 0x2a
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     9b6:	08 95       	ret

000009b8 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     9b8:	e0 91 ee 01 	lds	r30, 0x01EE
     9bc:	f0 91 ef 01 	lds	r31, 0x01EF
     9c0:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     9c2:	25 e1       	ldi	r18, 0x15	; 21
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	ac 01       	movw	r20, r24
     9c8:	42 9f       	mul	r20, r18
     9ca:	c0 01       	movw	r24, r0
     9cc:	43 9f       	mul	r20, r19
     9ce:	90 0d       	add	r25, r0
     9d0:	52 9f       	mul	r21, r18
     9d2:	90 0d       	add	r25, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	e8 0f       	add	r30, r24
     9d8:	f9 1f       	adc	r31, r25
     9da:	96 89       	ldd	r25, Z+22	; 0x16
     9dc:	89 2f       	mov	r24, r25
     9de:	86 95       	lsr	r24
     9e0:	8f 70       	andi	r24, 0x0F	; 15
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	19 f0       	breq	.+6      	; 0x9ec <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     9e6:	91 7e       	andi	r25, 0xE1	; 225
     9e8:	92 60       	ori	r25, 0x02	; 2
     9ea:	96 8b       	std	Z+22, r25	; 0x16
     9ec:	08 95       	ret

000009ee <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     9ee:	e0 91 ee 01 	lds	r30, 0x01EE
     9f2:	f0 91 ef 01 	lds	r31, 0x01EF
     9f6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     9f8:	25 e1       	ldi	r18, 0x15	; 21
     9fa:	30 e0       	ldi	r19, 0x00	; 0
     9fc:	ac 01       	movw	r20, r24
     9fe:	42 9f       	mul	r20, r18
     a00:	c0 01       	movw	r24, r0
     a02:	43 9f       	mul	r20, r19
     a04:	90 0d       	add	r25, r0
     a06:	52 9f       	mul	r21, r18
     a08:	90 0d       	add	r25, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	e8 0f       	add	r30, r24
     a0e:	f9 1f       	adc	r31, r25
     a10:	96 89       	ldd	r25, Z+22	; 0x16
     a12:	89 2f       	mov	r24, r25
     a14:	86 95       	lsr	r24
     a16:	8f 70       	andi	r24, 0x0F	; 15
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	19 f0       	breq	.+6      	; 0xa22 <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     a1c:	91 7e       	andi	r25, 0xE1	; 225
     a1e:	94 60       	ori	r25, 0x04	; 4
     a20:	96 8b       	std	Z+22, r25	; 0x16
     a22:	08 95       	ret

00000a24 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     a24:	2f 92       	push	r2
     a26:	3f 92       	push	r3
     a28:	4f 92       	push	r4
     a2a:	5f 92       	push	r5
     a2c:	6f 92       	push	r6
     a2e:	7f 92       	push	r7
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	28 97       	sbiw	r28, 0x08	; 8
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	1a 01       	movw	r2, r20
     a5a:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     a5c:	20 91 ee 01 	lds	r18, 0x01EE
     a60:	30 91 ef 01 	lds	r19, 0x01EF
     a64:	38 87       	std	Y+8, r19	; 0x08
     a66:	2f 83       	std	Y+7, r18	; 0x07
     a68:	a8 2f       	mov	r26, r24
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	ba 83       	std	Y+2, r27	; 0x02
     a6e:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     a70:	85 e1       	ldi	r24, 0x15	; 21
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a8 9f       	mul	r26, r24
     a76:	f0 01       	movw	r30, r0
     a78:	a9 9f       	mul	r26, r25
     a7a:	f0 0d       	add	r31, r0
     a7c:	b8 9f       	mul	r27, r24
     a7e:	f0 0d       	add	r31, r0
     a80:	11 24       	eor	r1, r1
     a82:	e2 0f       	add	r30, r18
     a84:	f3 1f       	adc	r31, r19
     a86:	86 89       	ldd	r24, Z+22	; 0x16
     a88:	86 95       	lsr	r24
     a8a:	8f 70       	andi	r24, 0x0F	; 15
     a8c:	09 f0       	breq	.+2      	; 0xa90 <Timebase_DownCounter_SS_Set_Securely+0x6c>
     a8e:	80 c0       	rjmp	.+256    	; 0xb90 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     a90:	47 8f       	std	Z+31, r20	; 0x1f
     a92:	50 a3       	std	Z+32, r21	; 0x20
     a94:	61 a3       	std	Z+33, r22	; 0x21
     a96:	72 a3       	std	Z+34, r23	; 0x22
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a98:	f9 01       	movw	r30, r18
     a9a:	c0 84       	ldd	r12, Z+8	; 0x08
     a9c:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a9e:	d9 01       	movw	r26, r18
     aa0:	1a 96       	adiw	r26, 0x0a	; 10
     aa2:	8d 91       	ld	r24, X+
     aa4:	9d 91       	ld	r25, X+
     aa6:	0d 90       	ld	r0, X+
     aa8:	bc 91       	ld	r27, X
     aaa:	a0 2d       	mov	r26, r0
     aac:	8b 83       	std	Y+3, r24	; 0x03
     aae:	9c 83       	std	Y+4, r25	; 0x04
     ab0:	ad 83       	std	Y+5, r26	; 0x05
     ab2:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     ab4:	20 81       	ld	r18, Z
     ab6:	31 81       	ldd	r19, Z+1	; 0x01
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	c2 01       	movw	r24, r4
     abe:	b1 01       	movw	r22, r2
     ac0:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     ac4:	7b 01       	movw	r14, r22
     ac6:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     ac8:	ef 81       	ldd	r30, Y+7	; 0x07
     aca:	f8 85       	ldd	r31, Y+8	; 0x08
     acc:	20 81       	ld	r18, Z
     ace:	31 81       	ldd	r19, Z+1	; 0x01
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	c2 01       	movw	r24, r4
     ad6:	b1 01       	movw	r22, r2
     ad8:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     adc:	c9 01       	movw	r24, r18
     ade:	da 01       	movw	r26, r20
     ae0:	3c 01       	movw	r6, r24
     ae2:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     ae4:	56 01       	movw	r10, r12
     ae6:	cc 24       	eor	r12, r12
     ae8:	dd 24       	eor	r13, r13
     aea:	ae 0c       	add	r10, r14
     aec:	bf 1c       	adc	r11, r15
     aee:	c0 1e       	adc	r12, r16
     af0:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     af2:	af 81       	ldd	r26, Y+7	; 0x07
     af4:	b8 85       	ldd	r27, Y+8	; 0x08
     af6:	8d 91       	ld	r24, X+
     af8:	9c 91       	ld	r25, X
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	a8 16       	cp	r10, r24
     b00:	b9 06       	cpc	r11, r25
     b02:	ca 06       	cpc	r12, r26
     b04:	db 06       	cpc	r13, r27
     b06:	a4 f0       	brlt	.+40     	; 0xb30 <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     b08:	08 94       	sec
     b0a:	61 1c       	adc	r6, r1
     b0c:	71 1c       	adc	r7, r1
     b0e:	81 1c       	adc	r8, r1
     b10:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     b12:	ef 81       	ldd	r30, Y+7	; 0x07
     b14:	f8 85       	ldd	r31, Y+8	; 0x08
     b16:	20 81       	ld	r18, Z
     b18:	31 81       	ldd	r19, Z+1	; 0x01
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	c6 01       	movw	r24, r12
     b20:	b5 01       	movw	r22, r10
     b22:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     b26:	ac 01       	movw	r20, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	da 01       	movw	r26, r20
     b2c:	5c 01       	movw	r10, r24
     b2e:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b30:	85 e1       	ldi	r24, 0x15	; 21
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	29 81       	ldd	r18, Y+1	; 0x01
     b36:	3a 81       	ldd	r19, Y+2	; 0x02
     b38:	28 9f       	mul	r18, r24
     b3a:	a0 01       	movw	r20, r0
     b3c:	29 9f       	mul	r18, r25
     b3e:	50 0d       	add	r21, r0
     b40:	38 9f       	mul	r19, r24
     b42:	50 0d       	add	r21, r0
     b44:	11 24       	eor	r1, r1
     b46:	8f 81       	ldd	r24, Y+7	; 0x07
     b48:	98 85       	ldd	r25, Y+8	; 0x08
     b4a:	48 0f       	add	r20, r24
     b4c:	59 1f       	adc	r21, r25
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	9c 81       	ldd	r25, Y+4	; 0x04
     b52:	ad 81       	ldd	r26, Y+5	; 0x05
     b54:	be 81       	ldd	r27, Y+6	; 0x06
     b56:	86 0d       	add	r24, r6
     b58:	97 1d       	adc	r25, r7
     b5a:	a8 1d       	adc	r26, r8
     b5c:	b9 1d       	adc	r27, r9
     b5e:	fa 01       	movw	r30, r20
     b60:	87 8b       	std	Z+23, r24	; 0x17
     b62:	90 8f       	std	Z+24, r25	; 0x18
     b64:	a1 8f       	std	Z+25, r26	; 0x19
     b66:	b2 8f       	std	Z+26, r27	; 0x1a
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b68:	da 01       	movw	r26, r20
     b6a:	5b 96       	adiw	r26, 0x1b	; 27
     b6c:	ad 92       	st	X+, r10
     b6e:	bd 92       	st	X+, r11
     b70:	cd 92       	st	X+, r12
     b72:	dc 92       	st	X, r13
     b74:	5e 97       	sbiw	r26, 0x1e	; 30
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b76:	27 a2       	std	Z+39, r2	; 0x27
     b78:	30 a6       	std	Z+40, r3	; 0x28
     b7a:	41 a6       	std	Z+41, r4	; 0x29
     b7c:	52 a6       	std	Z+42, r5	; 0x2a
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     b7e:	96 89       	ldd	r25, Z+22	; 0x16
     b80:	89 2f       	mov	r24, r25
     b82:	86 95       	lsr	r24
     b84:	8f 70       	andi	r24, 0x0F	; 15
     b86:	81 30       	cpi	r24, 0x01	; 1
     b88:	19 f0       	breq	.+6      	; 0xb90 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b8a:	91 7e       	andi	r25, 0xE1	; 225
     b8c:	92 60       	ori	r25, 0x02	; 2
     b8e:	96 8b       	std	Z+22, r25	; 0x16
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     b90:	28 96       	adiw	r28, 0x08	; 8
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	ff 90       	pop	r15
     ba6:	ef 90       	pop	r14
     ba8:	df 90       	pop	r13
     baa:	cf 90       	pop	r12
     bac:	bf 90       	pop	r11
     bae:	af 90       	pop	r10
     bb0:	9f 90       	pop	r9
     bb2:	8f 90       	pop	r8
     bb4:	7f 90       	pop	r7
     bb6:	6f 90       	pop	r6
     bb8:	5f 90       	pop	r5
     bba:	4f 90       	pop	r4
     bbc:	3f 90       	pop	r3
     bbe:	2f 90       	pop	r2
     bc0:	08 95       	ret

00000bc2 <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	7a 01       	movw	r14, r20
     bd0:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     bd2:	e0 91 ee 01 	lds	r30, 0x01EE
     bd6:	f0 91 ef 01 	lds	r31, 0x01EF
     bda:	48 2f       	mov	r20, r24
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	25 e1       	ldi	r18, 0x15	; 21
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	42 9f       	mul	r20, r18
     be4:	60 01       	movw	r12, r0
     be6:	43 9f       	mul	r20, r19
     be8:	d0 0c       	add	r13, r0
     bea:	52 9f       	mul	r21, r18
     bec:	d0 0c       	add	r13, r0
     bee:	11 24       	eor	r1, r1
     bf0:	ec 0d       	add	r30, r12
     bf2:	fd 1d       	adc	r31, r13
     bf4:	13 8e       	std	Z+27, r1	; 0x1b
     bf6:	14 8e       	std	Z+28, r1	; 0x1c
     bf8:	15 8e       	std	Z+29, r1	; 0x1d
     bfa:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     bfc:	17 8a       	std	Z+23, r1	; 0x17
     bfe:	10 8e       	std	Z+24, r1	; 0x18
     c00:	11 8e       	std	Z+25, r1	; 0x19
     c02:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     c04:	17 8e       	std	Z+31, r1	; 0x1f
     c06:	10 a2       	std	Z+32, r1	; 0x20
     c08:	11 a2       	std	Z+33, r1	; 0x21
     c0a:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c0c:	96 89       	ldd	r25, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     c0e:	90 7e       	andi	r25, 0xE0	; 224
     c10:	96 8b       	std	Z+22, r25	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c12:	17 a2       	std	Z+39, r1	; 0x27
     c14:	10 a6       	std	Z+40, r1	; 0x28
     c16:	11 a6       	std	Z+41, r1	; 0x29
     c18:	12 a6       	std	Z+42, r1	; 0x2a
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     c1a:	b8 01       	movw	r22, r16
     c1c:	a7 01       	movw	r20, r14
     c1e:	0e 94 12 05 	call	0xa24	; 0xa24 <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c22:	e0 91 ee 01 	lds	r30, 0x01EE
     c26:	f0 91 ef 01 	lds	r31, 0x01EF
     c2a:	ec 0d       	add	r30, r12
     c2c:	fd 1d       	adc	r31, r13
     c2e:	e7 a2       	std	Z+39, r14	; 0x27
     c30:	f0 a6       	std	Z+40, r15	; 0x28
     c32:	01 a7       	std	Z+41, r16	; 0x29
     c34:	12 a7       	std	Z+42, r17	; 0x2a

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	df 90       	pop	r13
     c40:	cf 90       	pop	r12
     c42:	08 95       	ret

00000c44 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     c44:	2f 92       	push	r2
     c46:	3f 92       	push	r3
     c48:	4f 92       	push	r4
     c4a:	5f 92       	push	r5
     c4c:	6f 92       	push	r6
     c4e:	7f 92       	push	r7
     c50:	8f 92       	push	r8
     c52:	9f 92       	push	r9
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	cf 92       	push	r12
     c5a:	df 92       	push	r13
     c5c:	ef 92       	push	r14
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c68:	e0 91 ee 01 	lds	r30, 0x01EE
     c6c:	f0 91 ef 01 	lds	r31, 0x01EF
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	25 e1       	ldi	r18, 0x15	; 21
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	82 9f       	mul	r24, r18
     c78:	e0 01       	movw	r28, r0
     c7a:	83 9f       	mul	r24, r19
     c7c:	d0 0d       	add	r29, r0
     c7e:	92 9f       	mul	r25, r18
     c80:	d0 0d       	add	r29, r0
     c82:	11 24       	eor	r1, r1
     c84:	ce 0f       	add	r28, r30
     c86:	df 1f       	adc	r29, r31
     c88:	8e 89       	ldd	r24, Y+22	; 0x16
     c8a:	86 95       	lsr	r24
     c8c:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <Timebase_DownCounter_SS_Update+0x50>
     c92:	48 c0       	rjmp	.+144    	; 0xd24 <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c94:	e0 84       	ldd	r14, Z+8	; 0x08
     c96:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     c98:	00 e0       	ldi	r16, 0x00	; 0
     c9a:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c9c:	82 85       	ldd	r24, Z+10	; 0x0a
     c9e:	93 85       	ldd	r25, Z+11	; 0x0b
     ca0:	a4 85       	ldd	r26, Z+12	; 0x0c
     ca2:	b5 85       	ldd	r27, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     ca4:	2f 89       	ldd	r18, Y+23	; 0x17
     ca6:	38 8d       	ldd	r19, Y+24	; 0x18
     ca8:	49 8d       	ldd	r20, Y+25	; 0x19
     caa:	5a 8d       	ldd	r21, Y+26	; 0x1a
     cac:	28 1b       	sub	r18, r24
     cae:	39 0b       	sbc	r19, r25
     cb0:	4a 0b       	sbc	r20, r26
     cb2:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     cb4:	60 81       	ld	r22, Z
     cb6:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
     cc0:	6e 19       	sub	r22, r14
     cc2:	7f 09       	sbc	r23, r15
     cc4:	80 0b       	sbc	r24, r16
     cc6:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     cc8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     cca:	3c 8d       	ldd	r19, Y+28	; 0x1c
     ccc:	4d 8d       	ldd	r20, Y+29	; 0x1d
     cce:	5e 8d       	ldd	r21, Y+30	; 0x1e
     cd0:	62 0f       	add	r22, r18
     cd2:	73 1f       	adc	r23, r19
     cd4:	84 1f       	adc	r24, r20
     cd6:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     cd8:	6f 8f       	std	Y+31, r22	; 0x1f
     cda:	78 a3       	std	Y+32, r23	; 0x20
     cdc:	89 a3       	std	Y+33, r24	; 0x21
     cde:	9a a3       	std	Y+34, r25	; 0x22
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     ce0:	16 16       	cp	r1, r22
     ce2:	17 06       	cpc	r1, r23
     ce4:	18 06       	cpc	r1, r24
     ce6:	19 06       	cpc	r1, r25
     ce8:	0c f4       	brge	.+2      	; 0xcec <Timebase_DownCounter_SS_Update+0xa8>
     cea:	4c c0       	rjmp	.+152    	; 0xd84 <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     cec:	8f a1       	ldd	r24, Y+39	; 0x27
     cee:	98 a5       	ldd	r25, Y+40	; 0x28
     cf0:	a9 a5       	ldd	r26, Y+41	; 0x29
     cf2:	ba a5       	ldd	r27, Y+42	; 0x2a
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     cf4:	1b 8e       	std	Y+27, r1	; 0x1b
     cf6:	1c 8e       	std	Y+28, r1	; 0x1c
     cf8:	1d 8e       	std	Y+29, r1	; 0x1d
     cfa:	1e 8e       	std	Y+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     cfc:	1f 8a       	std	Y+23, r1	; 0x17
     cfe:	18 8e       	std	Y+24, r1	; 0x18
     d00:	19 8e       	std	Y+25, r1	; 0x19
     d02:	1a 8e       	std	Y+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     d04:	1f 8e       	std	Y+31, r1	; 0x1f
     d06:	18 a2       	std	Y+32, r1	; 0x20
     d08:	19 a2       	std	Y+33, r1	; 0x21
     d0a:	1a a2       	std	Y+34, r1	; 0x22
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     d0c:	2e 89       	ldd	r18, Y+22	; 0x16
     d0e:	2e 7f       	andi	r18, 0xFE	; 254
     d10:	2e 8b       	std	Y+22, r18	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d12:	8f a3       	std	Y+39, r24	; 0x27
     d14:	98 a7       	std	Y+40, r25	; 0x28
     d16:	a9 a7       	std	Y+41, r26	; 0x29
     d18:	ba a7       	std	Y+42, r27	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d1a:	8e 89       	ldd	r24, Y+22	; 0x16
     d1c:	81 7e       	andi	r24, 0xE1	; 225
     d1e:	88 60       	ori	r24, 0x08	; 8
     d20:	8e 8b       	std	Y+22, r24	; 0x16
     d22:	30 c0       	rjmp	.+96     	; 0xd84 <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     d24:	82 30       	cpi	r24, 0x02	; 2
     d26:	71 f5       	brne	.+92     	; 0xd84 <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d28:	60 84       	ldd	r6, Z+8	; 0x08
     d2a:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d2c:	e2 84       	ldd	r14, Z+10	; 0x0a
     d2e:	f3 84       	ldd	r15, Z+11	; 0x0b
     d30:	04 85       	ldd	r16, Z+12	; 0x0c
     d32:	15 85       	ldd	r17, Z+13	; 0x0d
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     d34:	2f 8c       	ldd	r2, Y+31	; 0x1f
     d36:	38 a0       	ldd	r3, Y+32	; 0x20
     d38:	49 a0       	ldd	r4, Y+33	; 0x21
     d3a:	5a a0       	ldd	r5, Y+34	; 0x22
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     d40:	a0 80       	ld	r10, Z
     d42:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	c2 01       	movw	r24, r4
     d4a:	b1 01       	movw	r22, r2
     d4c:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     d50:	e2 0e       	add	r14, r18
     d52:	f3 1e       	adc	r15, r19
     d54:	04 1f       	adc	r16, r20
     d56:	15 1f       	adc	r17, r21
     d58:	ef 8a       	std	Y+23, r14	; 0x17
     d5a:	f8 8e       	std	Y+24, r15	; 0x18
     d5c:	09 8f       	std	Y+25, r16	; 0x19
     d5e:	1a 8f       	std	Y+26, r17	; 0x1a
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d60:	cc 24       	eor	r12, r12
     d62:	dd 24       	eor	r13, r13
     d64:	c2 01       	movw	r24, r4
     d66:	b1 01       	movw	r22, r2
     d68:	a6 01       	movw	r20, r12
     d6a:	95 01       	movw	r18, r10
     d6c:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
     d70:	88 24       	eor	r8, r8
     d72:	99 24       	eor	r9, r9
     d74:	66 0e       	add	r6, r22
     d76:	77 1e       	adc	r7, r23
     d78:	88 1e       	adc	r8, r24
     d7a:	99 1e       	adc	r9, r25
     d7c:	6b 8e       	std	Y+27, r6	; 0x1b
     d7e:	7c 8e       	std	Y+28, r7	; 0x1c
     d80:	8d 8e       	std	Y+29, r8	; 0x1d
     d82:	9e 8e       	std	Y+30, r9	; 0x1e
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	df 90       	pop	r13
     d92:	cf 90       	pop	r12
     d94:	bf 90       	pop	r11
     d96:	af 90       	pop	r10
     d98:	9f 90       	pop	r9
     d9a:	8f 90       	pop	r8
     d9c:	7f 90       	pop	r7
     d9e:	6f 90       	pop	r6
     da0:	5f 90       	pop	r5
     da2:	4f 90       	pop	r4
     da4:	3f 90       	pop	r3
     da6:	2f 90       	pop	r2
     da8:	08 95       	ret

00000daa <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	e0 91 ee 01 	lds	r30, 0x01EE
     db0:	f0 91 ef 01 	lds	r31, 0x01EF
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	25 e1       	ldi	r18, 0x15	; 21
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	bc 01       	movw	r22, r24
     dbc:	62 9f       	mul	r22, r18
     dbe:	c0 01       	movw	r24, r0
     dc0:	63 9f       	mul	r22, r19
     dc2:	90 0d       	add	r25, r0
     dc4:	72 9f       	mul	r23, r18
     dc6:	90 0d       	add	r25, r0
     dc8:	11 24       	eor	r1, r1
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	86 89       	ldd	r24, Z+22	; 0x16
     dd0:	86 95       	lsr	r24
     dd2:	8f 70       	andi	r24, 0x0F	; 15
     dd4:	84 30       	cpi	r24, 0x04	; 4
     dd6:	09 f4       	brne	.+2      	; 0xdda <Timebase_DownCounter_SS_Expired+0x30>
     dd8:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     dda:	84 2f       	mov	r24, r20
     ddc:	08 95       	ret

00000dde <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     dde:	e0 91 ee 01 	lds	r30, 0x01EE
     de2:	f0 91 ef 01 	lds	r31, 0x01EF
     de6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     de8:	25 e1       	ldi	r18, 0x15	; 21
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	ac 01       	movw	r20, r24
     dee:	42 9f       	mul	r20, r18
     df0:	c0 01       	movw	r24, r0
     df2:	43 9f       	mul	r20, r19
     df4:	90 0d       	add	r25, r0
     df6:	52 9f       	mul	r21, r18
     df8:	90 0d       	add	r25, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	e8 0f       	add	r30, r24
     dfe:	f9 1f       	adc	r31, r25
     e00:	86 89       	ldd	r24, Z+22	; 0x16
     e02:	86 95       	lsr	r24
     e04:	8f 70       	andi	r24, 0x0F	; 15
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	11 f0       	breq	.+4      	; 0xe0e <Timebase_DownCounter_SS_Expired_Event+0x30>
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e0e:	13 8e       	std	Z+27, r1	; 0x1b
     e10:	14 8e       	std	Z+28, r1	; 0x1c
     e12:	15 8e       	std	Z+29, r1	; 0x1d
     e14:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e16:	17 8a       	std	Z+23, r1	; 0x17
     e18:	10 8e       	std	Z+24, r1	; 0x18
     e1a:	11 8e       	std	Z+25, r1	; 0x19
     e1c:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e1e:	17 8e       	std	Z+31, r1	; 0x1f
     e20:	10 a2       	std	Z+32, r1	; 0x20
     e22:	11 a2       	std	Z+33, r1	; 0x21
     e24:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e26:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e28:	80 7e       	andi	r24, 0xE0	; 224
     e2a:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e2c:	17 a2       	std	Z+39, r1	; 0x27
     e2e:	10 a6       	std	Z+40, r1	; 0x28
     e30:	11 a6       	std	Z+41, r1	; 0x29
     e32:	12 a6       	std	Z+42, r1	; 0x2a
     e34:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e36:	08 95       	ret

00000e38 <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
     e38:	0e 94 ef 06 	call	0xdde	; 0xdde <Timebase_DownCounter_SS_Expired_Event>
}
     e3c:	08 95       	ret

00000e3e <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
     e3e:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e40:	e0 91 ee 01 	lds	r30, 0x01EE
     e44:	f0 91 ef 01 	lds	r31, 0x01EF
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     e4c:	85 e1       	ldi	r24, 0x15	; 21
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	ac 01       	movw	r20, r24
     e52:	24 9f       	mul	r18, r20
     e54:	c0 01       	movw	r24, r0
     e56:	25 9f       	mul	r18, r21
     e58:	90 0d       	add	r25, r0
     e5a:	34 9f       	mul	r19, r20
     e5c:	90 0d       	add	r25, r0
     e5e:	11 24       	eor	r1, r1
     e60:	e8 0f       	add	r30, r24
     e62:	f9 1f       	adc	r31, r25
     e64:	86 89       	ldd	r24, Z+22	; 0x16
     e66:	86 95       	lsr	r24
     e68:	8f 70       	andi	r24, 0x0F	; 15
     e6a:	84 30       	cpi	r24, 0x04	; 4
     e6c:	11 f0       	breq	.+4      	; 0xe72 <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     e72:	47 a1       	ldd	r20, Z+39	; 0x27
     e74:	50 a5       	ldd	r21, Z+40	; 0x28
     e76:	61 a5       	ldd	r22, Z+41	; 0x29
     e78:	72 a5       	ldd	r23, Z+42	; 0x2a
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e7a:	13 8e       	std	Z+27, r1	; 0x1b
     e7c:	14 8e       	std	Z+28, r1	; 0x1c
     e7e:	15 8e       	std	Z+29, r1	; 0x1d
     e80:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e82:	17 8a       	std	Z+23, r1	; 0x17
     e84:	10 8e       	std	Z+24, r1	; 0x18
     e86:	11 8e       	std	Z+25, r1	; 0x19
     e88:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e8a:	17 8e       	std	Z+31, r1	; 0x1f
     e8c:	10 a2       	std	Z+32, r1	; 0x20
     e8e:	11 a2       	std	Z+33, r1	; 0x21
     e90:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e92:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e94:	80 7e       	andi	r24, 0xE0	; 224
     e96:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e98:	17 a2       	std	Z+39, r1	; 0x27
     e9a:	10 a6       	std	Z+40, r1	; 0x28
     e9c:	11 a6       	std	Z+41, r1	; 0x29
     e9e:	12 a6       	std	Z+42, r1	; 0x2a

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
     ea0:	8a 2f       	mov	r24, r26
     ea2:	0e 94 12 05 	call	0xa24	; 0xa24 <Timebase_DownCounter_SS_Set_Securely>
     ea6:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     ea8:	08 95       	ret

00000eaa <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
     eae:	c0 91 ee 01 	lds	r28, 0x01EE
     eb2:	d0 91 ef 01 	lds	r29, 0x01EF
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
     eba:	85 e1       	ldi	r24, 0x15	; 21
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	28 9f       	mul	r18, r24
     ec0:	f0 01       	movw	r30, r0
     ec2:	29 9f       	mul	r18, r25
     ec4:	f0 0d       	add	r31, r0
     ec6:	38 9f       	mul	r19, r24
     ec8:	f0 0d       	add	r31, r0
     eca:	11 24       	eor	r1, r1
     ecc:	ec 0f       	add	r30, r28
     ece:	fd 1f       	adc	r31, r29
     ed0:	86 89       	ldd	r24, Z+22	; 0x16
     ed2:	80 fd       	sbrc	r24, 0
     ed4:	21 c0       	rjmp	.+66     	; 0xf18 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
     ed6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ed8:	90 a1       	ldd	r25, Z+32	; 0x20
     eda:	a1 a1       	ldd	r26, Z+33	; 0x21
     edc:	b2 a1       	ldd	r27, Z+34	; 0x22
     ede:	84 1b       	sub	r24, r20
     ee0:	95 0b       	sbc	r25, r21
     ee2:	a6 0b       	sbc	r26, r22
     ee4:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
     ee6:	b7 ff       	sbrs	r27, 7
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     eea:	13 a2       	std	Z+35, r1	; 0x23
     eec:	14 a2       	std	Z+36, r1	; 0x24
     eee:	15 a2       	std	Z+37, r1	; 0x25
     ef0:	16 a2       	std	Z+38, r1	; 0x26
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     ef4:	83 a3       	std	Z+35, r24	; 0x23
     ef6:	94 a3       	std	Z+36, r25	; 0x24
     ef8:	a5 a3       	std	Z+37, r26	; 0x25
     efa:	b6 a3       	std	Z+38, r27	; 0x26
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     efc:	85 e1       	ldi	r24, 0x15	; 21
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	28 9f       	mul	r18, r24
     f02:	f0 01       	movw	r30, r0
     f04:	29 9f       	mul	r18, r25
     f06:	f0 0d       	add	r31, r0
     f08:	38 9f       	mul	r19, r24
     f0a:	f0 0d       	add	r31, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	ec 0f       	add	r30, r28
     f10:	fd 1f       	adc	r31, r29
     f12:	86 89       	ldd	r24, Z+22	; 0x16
     f14:	81 60       	ori	r24, 0x01	; 1
     f16:	86 8b       	std	Z+22, r24	; 0x16
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f1e:	e0 91 ee 01 	lds	r30, 0x01EE
     f22:	f0 91 ef 01 	lds	r31, 0x01EF
     f26:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
     f28:	25 e1       	ldi	r18, 0x15	; 21
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	ac 01       	movw	r20, r24
     f2e:	42 9f       	mul	r20, r18
     f30:	c0 01       	movw	r24, r0
     f32:	43 9f       	mul	r20, r19
     f34:	90 0d       	add	r25, r0
     f36:	52 9f       	mul	r21, r18
     f38:	90 0d       	add	r25, r0
     f3a:	11 24       	eor	r1, r1
     f3c:	e8 0f       	add	r30, r24
     f3e:	f9 1f       	adc	r31, r25
     f40:	27 8d       	ldd	r18, Z+31	; 0x1f
     f42:	30 a1       	ldd	r19, Z+32	; 0x20
     f44:	41 a1       	ldd	r20, Z+33	; 0x21
     f46:	52 a1       	ldd	r21, Z+34	; 0x22
     f48:	83 a1       	ldd	r24, Z+35	; 0x23
     f4a:	94 a1       	ldd	r25, Z+36	; 0x24
     f4c:	a5 a1       	ldd	r26, Z+37	; 0x25
     f4e:	b6 a1       	ldd	r27, Z+38	; 0x26
     f50:	28 1b       	sub	r18, r24
     f52:	39 0b       	sbc	r19, r25
     f54:	4a 0b       	sbc	r20, r26
     f56:	5b 0b       	sbc	r21, r27
     f58:	57 ff       	sbrs	r21, 7
     f5a:	04 c0       	rjmp	.+8      	; 0xf64 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
     f64:	b9 01       	movw	r22, r18
     f66:	ca 01       	movw	r24, r20
     f68:	08 95       	ret

00000f6a <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f6e:	c0 91 ee 01 	lds	r28, 0x01EE
     f72:	d0 91 ef 01 	lds	r29, 0x01EF
     f76:	68 2f       	mov	r22, r24
     f78:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
     f7a:	85 e1       	ldi	r24, 0x15	; 21
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	68 9f       	mul	r22, r24
     f80:	f0 01       	movw	r30, r0
     f82:	69 9f       	mul	r22, r25
     f84:	f0 0d       	add	r31, r0
     f86:	78 9f       	mul	r23, r24
     f88:	f0 0d       	add	r31, r0
     f8a:	11 24       	eor	r1, r1
     f8c:	ec 0f       	add	r30, r28
     f8e:	fd 1f       	adc	r31, r29
     f90:	27 8d       	ldd	r18, Z+31	; 0x1f
     f92:	30 a1       	ldd	r19, Z+32	; 0x20
     f94:	41 a1       	ldd	r20, Z+33	; 0x21
     f96:	52 a1       	ldd	r21, Z+34	; 0x22
     f98:	83 a1       	ldd	r24, Z+35	; 0x23
     f9a:	94 a1       	ldd	r25, Z+36	; 0x24
     f9c:	a5 a1       	ldd	r26, Z+37	; 0x25
     f9e:	b6 a1       	ldd	r27, Z+38	; 0x26
     fa0:	28 1b       	sub	r18, r24
     fa2:	39 0b       	sbc	r19, r25
     fa4:	4a 0b       	sbc	r20, r26
     fa6:	5b 0b       	sbc	r21, r27
  if(temp < 0){
     fa8:	57 fd       	sbrc	r21, 7
     faa:	07 c0       	rjmp	.+14     	; 0xfba <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
     fac:	21 15       	cp	r18, r1
     fae:	31 05       	cpc	r19, r1
     fb0:	41 05       	cpc	r20, r1
     fb2:	51 05       	cpc	r21, r1
     fb4:	11 f0       	breq	.+4      	; 0xfba <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	12 c0       	rjmp	.+36     	; 0xfde <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	85 e1       	ldi	r24, 0x15	; 21
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	ac 01       	movw	r20, r24
     fc2:	64 9f       	mul	r22, r20
     fc4:	c0 01       	movw	r24, r0
     fc6:	65 9f       	mul	r22, r21
     fc8:	90 0d       	add	r25, r0
     fca:	74 9f       	mul	r23, r20
     fcc:	90 0d       	add	r25, r0
     fce:	11 24       	eor	r1, r1
     fd0:	c8 0f       	add	r28, r24
     fd2:	d9 1f       	adc	r29, r25
     fd4:	8e 89       	ldd	r24, Y+22	; 0x16
     fd6:	80 ff       	sbrs	r24, 0
     fd8:	21 e0       	ldi	r18, 0x01	; 1
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fde:	82 2f       	mov	r24, r18
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
     fe6:	1f 93       	push	r17
     fe8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
     fea:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Timebase_DownCounter_SS_Period_Value_Expired>
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	11 f0       	breq	.+4      	; 0xff6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	16 c0       	rjmp	.+44     	; 0x1022 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ff6:	e0 91 ee 01 	lds	r30, 0x01EE
     ffa:	f0 91 ef 01 	lds	r31, 0x01EF
     ffe:	21 2f       	mov	r18, r17
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	85 e1       	ldi	r24, 0x15	; 21
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	ac 01       	movw	r20, r24
    1008:	24 9f       	mul	r18, r20
    100a:	c0 01       	movw	r24, r0
    100c:	25 9f       	mul	r18, r21
    100e:	90 0d       	add	r25, r0
    1010:	34 9f       	mul	r19, r20
    1012:	90 0d       	add	r25, r0
    1014:	11 24       	eor	r1, r1
    1016:	e8 0f       	add	r30, r24
    1018:	f9 1f       	adc	r31, r25
    101a:	86 89       	ldd	r24, Z+22	; 0x16
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	86 8b       	std	Z+22, r24	; 0x16
    1020:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1022:	1f 91       	pop	r17
    1024:	08 95       	ret

00001026 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	0e 94 22 06 	call	0xc44	; 0xc44 <Timebase_DownCounter_SS_Update>
  }
}
    102c:	08 95       	ret

0000102e <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    102e:	e0 91 ee 01 	lds	r30, 0x01EE
    1032:	f0 91 ef 01 	lds	r31, 0x01EF
    1036:	13 8e       	std	Z+27, r1	; 0x1b
    1038:	14 8e       	std	Z+28, r1	; 0x1c
    103a:	15 8e       	std	Z+29, r1	; 0x1d
    103c:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    103e:	17 8a       	std	Z+23, r1	; 0x17
    1040:	10 8e       	std	Z+24, r1	; 0x18
    1042:	11 8e       	std	Z+25, r1	; 0x19
    1044:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1046:	17 8e       	std	Z+31, r1	; 0x1f
    1048:	10 a2       	std	Z+32, r1	; 0x20
    104a:	11 a2       	std	Z+33, r1	; 0x21
    104c:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    104e:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1050:	80 7e       	andi	r24, 0xE0	; 224
    1052:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1054:	17 a2       	std	Z+39, r1	; 0x27
    1056:	10 a6       	std	Z+40, r1	; 0x28
    1058:	11 a6       	std	Z+41, r1	; 0x29
    105a:	12 a6       	std	Z+42, r1	; 0x2a

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    105c:	08 95       	ret

0000105e <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    105e:	e0 91 ee 01 	lds	r30, 0x01EE
    1062:	f0 91 ef 01 	lds	r31, 0x01EF
    1066:	85 89       	ldd	r24, Z+21	; 0x15
}
    1068:	08 95       	ret

0000106a <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    106a:	0e 94 17 08 	call	0x102e	; 0x102e <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    106e:	08 95       	ret

00001070 <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
    1070:	08 95       	ret

00001072 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1078:	0e 94 8c 00 	call	0x118	; 0x118 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    107c:	c8 01       	movw	r24, r16
    107e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1082:	0e 94 17 08 	call	0x102e	; 0x102e <Timebase_DownCounter_SS_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	08 95       	ret

0000108c <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    108c:	e0 91 ee 01 	lds	r30, 0x01EE
    1090:	f0 91 ef 01 	lds	r31, 0x01EF
    1094:	85 89       	ldd	r24, Z+21	; 0x15
    1096:	83 ff       	sbrs	r24, 3
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    109a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    109e:	0e 94 13 08 	call	0x1026	; 0x1026 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    10a2:	e0 91 ee 01 	lds	r30, 0x01EE
    10a6:	f0 91 ef 01 	lds	r31, 0x01EF
    10aa:	85 89       	ldd	r24, Z+21	; 0x15
    10ac:	87 7f       	andi	r24, 0xF7	; 247
    10ae:	85 8b       	std	Z+21, r24	; 0x15
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    10b0:	e0 91 ee 01 	lds	r30, 0x01EE
    10b4:	f0 91 ef 01 	lds	r31, 0x01EF
    10b8:	14 8a       	std	Z+20, r1	; 0x14
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
    10ba:	08 95       	ret

000010bc <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    10bc:	e0 91 ee 01 	lds	r30, 0x01EE
    10c0:	f0 91 ef 01 	lds	r31, 0x01EF
    10c4:	86 85       	ldd	r24, Z+14	; 0x0e
    10c6:	97 85       	ldd	r25, Z+15	; 0x0f
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	97 87       	std	Z+15, r25	; 0x0f
    10cc:	86 87       	std	Z+14, r24	; 0x0e
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    10ce:	85 89       	ldd	r24, Z+21	; 0x15
    10d0:	88 60       	ori	r24, 0x08	; 8
    10d2:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    10d4:	26 85       	ldd	r18, Z+14	; 0x0e
    10d6:	37 85       	ldd	r19, Z+15	; 0x0f
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	28 17       	cp	r18, r24
    10de:	39 07       	cpc	r19, r25
    10e0:	68 f0       	brcs	.+26     	; 0x10fc <Timebase_ISR_Executables+0x40>
    Timebase->Time.SubSecondsShadow = 0;
    10e2:	17 86       	std	Z+15, r1	; 0x0f
    10e4:	16 86       	std	Z+14, r1	; 0x0e
    Timebase->Time.SecondsShadow++;
    10e6:	80 89       	ldd	r24, Z+16	; 0x10
    10e8:	91 89       	ldd	r25, Z+17	; 0x11
    10ea:	a2 89       	ldd	r26, Z+18	; 0x12
    10ec:	b3 89       	ldd	r27, Z+19	; 0x13
    10ee:	01 96       	adiw	r24, 0x01	; 1
    10f0:	a1 1d       	adc	r26, r1
    10f2:	b1 1d       	adc	r27, r1
    10f4:	80 8b       	std	Z+16, r24	; 0x10
    10f6:	91 8b       	std	Z+17, r25	; 0x11
    10f8:	a2 8b       	std	Z+18, r26	; 0x12
    10fa:	b3 8b       	std	Z+19, r27	; 0x13
    10fc:	08 95       	ret

000010fe <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    10fe:	1f 92       	push	r1
    1100:	0f 92       	push	r0
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	0f 92       	push	r0
    1106:	11 24       	eor	r1, r1
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1120:	e0 91 ee 01 	lds	r30, 0x01EE
    1124:	f0 91 ef 01 	lds	r31, 0x01EF
    1128:	82 81       	ldd	r24, Z+2	; 0x02
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    112e:	0e 94 5e 08 	call	0x10bc	; 0x10bc <Timebase_ISR_Executables>
}
    1132:	ff 91       	pop	r31
    1134:	ef 91       	pop	r30
    1136:	bf 91       	pop	r27
    1138:	af 91       	pop	r26
    113a:	9f 91       	pop	r25
    113c:	8f 91       	pop	r24
    113e:	7f 91       	pop	r23
    1140:	6f 91       	pop	r22
    1142:	5f 91       	pop	r21
    1144:	4f 91       	pop	r20
    1146:	3f 91       	pop	r19
    1148:	2f 91       	pop	r18
    114a:	0f 90       	pop	r0
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	0f 90       	pop	r0
    1150:	1f 90       	pop	r1
    1152:	18 95       	reti

00001154 <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
    1154:	08 95       	ret

00001156 <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    1156:	10 92 96 01 	sts	0x0196, r1
    115a:	e7 e9       	ldi	r30, 0x97	; 151
    115c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    115e:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	ef 39       	cpi	r30, 0x9F	; 159
    1164:	f8 07       	cpc	r31, r24
    1166:	d9 f7       	brne	.-10     	; 0x115e <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    1168:	10 82       	st	Z, r1
    
  UART.LastRxByte = UART_NULL;
    116a:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    116c:	80 e4       	ldi	r24, 0x40	; 64
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	90 93 e2 01 	sts	0x01E2, r25
    1174:	80 93 e1 01 	sts	0x01E1, r24
  UART.BufIndex = 0;
    1178:	10 92 e4 01 	sts	0x01E4, r1
    117c:	10 92 e3 01 	sts	0x01E3, r1
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	04 c0       	rjmp	.+8      	; 0x118c <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    1184:	ea 56       	subi	r30, 0x6A	; 106
    1186:	fe 4f       	sbci	r31, 0xFE	; 254
    1188:	13 86       	std	Z+11, r1	; 0x0b
  UART.InputNumDigits = UART_NULL;
    
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    118a:	2f 5f       	subi	r18, 0xFF	; 255
    118c:	80 91 e1 01 	lds	r24, 0x01E1
    1190:	90 91 e2 01 	lds	r25, 0x01E2
    1194:	e2 2f       	mov	r30, r18
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	e8 17       	cp	r30, r24
    119a:	f9 07       	cpc	r31, r25
    119c:	98 f3       	brcs	.-26     	; 0x1184 <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
    119e:	08 95       	ret

000011a0 <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    11a0:	10 92 e8 01 	sts	0x01E8, r1
    11a4:	10 92 e7 01 	sts	0x01E7, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    11a8:	10 92 ea 01 	sts	0x01EA, r1
    11ac:	10 92 e9 01 	sts	0x01E9, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    11b0:	10 92 eb 01 	sts	0x01EB, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    11b4:	10 92 ec 01 	sts	0x01EC, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	80 93 ed 01 	sts	0x01ED, r24
}
    11be:	08 95       	ret

000011c0 <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    11c0:	08 95       	ret

000011c2 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    11c2:	08 95       	ret

000011c4 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    11c8:	60 e6       	ldi	r22, 0x60	; 96
    11ca:	73 ee       	ldi	r23, 0xE3	; 227
    11cc:	86 e1       	ldi	r24, 0x16	; 22
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    11d4:	21 50       	subi	r18, 0x01	; 1
    11d6:	30 40       	sbci	r19, 0x00	; 0
    11d8:	40 40       	sbci	r20, 0x00	; 0
    11da:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    11dc:	e0 ec       	ldi	r30, 0xC0	; 192
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    11e6:	bb 27       	eor	r27, r27
    11e8:	a5 2f       	mov	r26, r21
    11ea:	94 2f       	mov	r25, r20
    11ec:	83 2f       	mov	r24, r19
    11ee:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    11f2:	20 93 c4 00 	sts	0x00C4, r18
}
    11f6:	08 95       	ret

000011f8 <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    11f8:	e1 ec       	ldi	r30, 0xC1	; 193
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 60       	ori	r24, 0x08	; 8
    1200:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1202:	86 e0       	ldi	r24, 0x06	; 6
    1204:	80 93 c2 00 	sts	0x00C2, r24
}
    1208:	08 95       	ret

0000120a <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    120a:	e1 ec       	ldi	r30, 0xC1	; 193
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1214:	86 e0       	ldi	r24, 0x06	; 6
    1216:	80 93 c2 00 	sts	0x00C2, r24
}
    121a:	08 95       	ret

0000121c <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    121c:	e1 ec       	ldi	r30, 0xC1	; 193
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 68       	ori	r24, 0x80	; 128
    1224:	80 83       	st	Z, r24
  sei();
    1226:	78 94       	sei
}
    1228:	08 95       	ret

0000122a <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    122a:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    122c:	80 91 c0 00 	lds	r24, 0x00C0
    1230:	85 ff       	sbrs	r24, 5
    1232:	fc cf       	rjmp	.-8      	; 0x122c <UART_Tx_Byte+0x2>
  UDR0 = val;
    1234:	90 93 c6 00 	sts	0x00C6, r25
}
    1238:	08 95       	ret

0000123a <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	0f 92       	push	r0
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    1244:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    1246:	80 91 c0 00 	lds	r24, 0x00C0
    124a:	84 ff       	sbrs	r24, 4
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <UART_Rx_Byte+0x1e>
    val = UDR0;
    124e:	80 91 c6 00 	lds	r24, 0x00C6
    1252:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <UART_Rx_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    1258:	80 91 c0 00 	lds	r24, 0x00C0
    125c:	83 ff       	sbrs	r24, 3
    125e:	07 c0       	rjmp	.+14     	; 0x126e <UART_Rx_Byte+0x34>
    val = UDR0;
    1260:	80 91 c6 00 	lds	r24, 0x00C6
    1264:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
    1266:	82 e0       	ldi	r24, 0x02	; 2
    1268:	80 93 96 01 	sts	0x0196, r24
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    126e:	80 91 c6 00 	lds	r24, 0x00C6
    1272:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
    1274:	10 92 96 01 	sts	0x0196, r1
  }
  return val;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
}
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1282:	10 92 e5 01 	sts	0x01E5, r1
  UART.Timer.ResetVal = UART_NULL;
    1286:	10 92 e6 01 	sts	0x01E6, r1
}
    128a:	08 95       	ret

0000128c <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
    128c:	84 e0       	ldi	r24, 0x04	; 4
    128e:	80 93 e6 01 	sts	0x01E6, r24
  UART.Timer.ResetVal = 0xFF - temp1;
    1292:	8b ef       	ldi	r24, 0xFB	; 251
    1294:	80 93 e6 01 	sts	0x01E6, r24
  
  ASSR   = 0x00;
    1298:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
    129c:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
    12a0:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
    12a4:	e0 e7       	ldi	r30, 0x70	; 112
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	10 82       	st	Z, r1
  TCNT2  = 0x00;
    12aa:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 83       	st	Z, r24
  sei();
    12b6:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
    12b8:	08 95       	ret

000012ba <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    12ba:	87 e0       	ldi	r24, 0x07	; 7
    12bc:	80 93 b1 00 	sts	0x00B1, r24
}
    12c0:	08 95       	ret

000012c2 <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    12c2:	10 92 b1 00 	sts	0x00B1, r1
}
    12c6:	08 95       	ret

000012c8 <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    12c8:	80 91 e5 01 	lds	r24, 0x01E5
}
    12cc:	08 95       	ret

000012ce <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
    12ce:	80 91 b2 00 	lds	r24, 0x00B2
}
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    12d6:	80 91 e6 01 	lds	r24, 0x01E6
    12da:	80 93 b2 00 	sts	0x00B2, r24
}
    12de:	08 95       	ret

000012e0 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    12e0:	ac 01       	movw	r20, r24
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	0c c0       	rjmp	.+24     	; 0x1302 <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    12ea:	fa 01       	movw	r30, r20
    12ec:	e2 0f       	add	r30, r18
    12ee:	f3 1f       	adc	r31, r19
    12f0:	e0 81       	ld	r30, Z
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    12f2:	80 91 c0 00 	lds	r24, 0x00C0
    12f6:	85 ff       	sbrs	r24, 5
    12f8:	fc cf       	rjmp	.-8      	; 0x12f2 <UART_Tx_Buf+0x12>
  UDR0 = val;
    12fa:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    12fe:	2f 5f       	subi	r18, 0xFF	; 255
    1300:	3f 4f       	sbci	r19, 0xFF	; 255
    1302:	26 17       	cp	r18, r22
    1304:	37 07       	cpc	r19, r23
    1306:	88 f3       	brcs	.-30     	; 0x12ea <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    1308:	08 95       	ret

0000130a <UART_Tx_NL>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    130a:	80 91 c0 00 	lds	r24, 0x00C0
    130e:	85 ff       	sbrs	r24, 5
    1310:	fc cf       	rjmp	.-8      	; 0x130a <UART_Tx_NL>
  UDR0 = val;
    1312:	8d e0       	ldi	r24, 0x0D	; 13
    1314:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1318:	80 91 c0 00 	lds	r24, 0x00C0
    131c:	85 ff       	sbrs	r24, 5
    131e:	fc cf       	rjmp	.-8      	; 0x1318 <UART_Tx_NL+0xe>
  UDR0 = val;
    1320:	8a e0       	ldi	r24, 0x0A	; 10
    1322:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    1326:	08 95       	ret

00001328 <UART_Tx_SP>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1328:	80 91 c0 00 	lds	r24, 0x00C0
    132c:	85 ff       	sbrs	r24, 5
    132e:	fc cf       	rjmp	.-8      	; 0x1328 <UART_Tx_SP>
  UDR0 = val;
    1330:	80 e2       	ldi	r24, 0x20	; 32
    1332:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    1336:	08 95       	ret

00001338 <UART_Tx_CM>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1338:	80 91 c0 00 	lds	r24, 0x00C0
    133c:	85 ff       	sbrs	r24, 5
    133e:	fc cf       	rjmp	.-8      	; 0x1338 <UART_Tx_CM>
  UDR0 = val;
    1340:	8c e2       	ldi	r24, 0x2C	; 44
    1342:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    1346:	08 95       	ret

00001348 <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    1348:	ac 01       	movw	r20, r24
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	07 c0       	rjmp	.+14     	; 0x135c <UART_Tx_Text+0x14>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    134e:	80 91 c0 00 	lds	r24, 0x00C0
    1352:	85 ff       	sbrs	r24, 5
    1354:	fc cf       	rjmp	.-8      	; 0x134e <UART_Tx_Text+0x6>
  UDR0 = val;
    1356:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    135a:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    135c:	fa 01       	movw	r30, r20
    135e:	e2 0f       	add	r30, r18
    1360:	f1 1d       	adc	r31, r1
    1362:	e0 81       	ld	r30, Z
    1364:	ee 23       	and	r30, r30
    1366:	99 f7       	brne	.-26     	; 0x134e <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    1368:	08 95       	ret

0000136a <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    136a:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UART_Tx_NL();
    136e:	0e 94 85 09 	call	0x130a	; 0x130a <UART_Tx_NL>
}
    1372:	08 95       	ret

00001374 <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    1374:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1378:	80 91 c0 00 	lds	r24, 0x00C0
    137c:	85 ff       	sbrs	r24, 5
    137e:	fc cf       	rjmp	.-8      	; 0x1378 <UART_Tx_Text_SP+0x4>
  UDR0 = val;
    1380:	80 e2       	ldi	r24, 0x20	; 32
    1382:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    1386:	08 95       	ret

00001388 <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    1388:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    138c:	80 91 c0 00 	lds	r24, 0x00C0
    1390:	85 ff       	sbrs	r24, 5
    1392:	fc cf       	rjmp	.-8      	; 0x138c <UART_Tx_Text_CM+0x4>
  UDR0 = val;
    1394:	8c e2       	ldi	r24, 0x2C	; 44
    1396:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    139a:	08 95       	ret

0000139c <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    139c:	bf 92       	push	r11
    139e:	cf 92       	push	r12
    13a0:	df 92       	push	r13
    13a2:	ef 92       	push	r14
    13a4:	ff 92       	push	r15
    13a6:	0f 93       	push	r16
    13a8:	1f 93       	push	r17
    13aa:	6b 01       	movw	r12, r22
    13ac:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    13ae:	61 15       	cp	r22, r1
    13b0:	71 05       	cpc	r23, r1
    13b2:	81 05       	cpc	r24, r1
    13b4:	91 05       	cpc	r25, r1
    13b6:	31 f4       	brne	.+12     	; 0x13c4 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    13b8:	10 92 97 01 	sts	0x0197, r1
    UART.InputNumDigits = 1;
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	80 93 9f 01 	sts	0x019F, r24
    13c2:	23 c0       	rjmp	.+70     	; 0x140a <UART_Determine_Digit_Numbers+0x6e>
    13c4:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    13c6:	0b 2d       	mov	r16, r11
    13c8:	10 e0       	ldi	r17, 0x00	; 0
    13ca:	0a 56       	subi	r16, 0x6A	; 106
    13cc:	1e 4f       	sbci	r17, 0xFE	; 254
    13ce:	c7 01       	movw	r24, r14
    13d0:	b6 01       	movw	r22, r12
    13d2:	2a e0       	ldi	r18, 0x0A	; 10
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    13de:	f8 01       	movw	r30, r16
    13e0:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    13e2:	c7 01       	movw	r24, r14
    13e4:	b6 01       	movw	r22, r12
    13e6:	2a e0       	ldi	r18, 0x0A	; 10
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e0       	ldi	r20, 0x00	; 0
    13ec:	50 e0       	ldi	r21, 0x00	; 0
    13ee:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    13f2:	c9 01       	movw	r24, r18
    13f4:	da 01       	movw	r26, r20
    13f6:	6c 01       	movw	r12, r24
    13f8:	7d 01       	movw	r14, r26
      i++;
    13fa:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    13fc:	c1 14       	cp	r12, r1
    13fe:	d1 04       	cpc	r13, r1
    1400:	e1 04       	cpc	r14, r1
    1402:	f1 04       	cpc	r15, r1
    1404:	01 f7       	brne	.-64     	; 0x13c6 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    1406:	b0 92 9f 01 	sts	0x019F, r11
  }
}
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	bf 90       	pop	r11
    1418:	08 95       	ret

0000141a <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    141a:	e0 91 9f 01 	lds	r30, 0x019F
    141e:	0f c0       	rjmp	.+30     	; 0x143e <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1420:	2e 2f       	mov	r18, r30
    1422:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    1424:	e2 2f       	mov	r30, r18
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ea 56       	subi	r30, 0x6A	; 106
    142a:	fe 4f       	sbci	r31, 0xFE	; 254
    142c:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    142e:	80 91 c0 00 	lds	r24, 0x00C0
    1432:	85 ff       	sbrs	r24, 5
    1434:	fc cf       	rjmp	.-8      	; 0x142e <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    1436:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    1438:	90 93 c6 00 	sts	0x00C6, r25
    143c:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    143e:	ee 23       	and	r30, r30
    1440:	79 f7       	brne	.-34     	; 0x1420 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    1442:	08 95       	ret

00001444 <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    1444:	9b 01       	movw	r18, r22
    1446:	ac 01       	movw	r20, r24
  if(num < 0){
    1448:	97 ff       	sbrs	r25, 7
    144a:	0e c0       	rjmp	.+28     	; 0x1468 <UART_Tx_Number+0x24>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    144c:	80 91 c0 00 	lds	r24, 0x00C0
    1450:	85 ff       	sbrs	r24, 5
    1452:	fc cf       	rjmp	.-8      	; 0x144c <UART_Tx_Number+0x8>
  UDR0 = val;
    1454:	8d e2       	ldi	r24, 0x2D	; 45
    1456:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    145a:	50 95       	com	r21
    145c:	40 95       	com	r20
    145e:	30 95       	com	r19
    1460:	21 95       	neg	r18
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	4f 4f       	sbci	r20, 0xFF	; 255
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    1470:	0e 94 0d 0a 	call	0x141a	; 0x141a <UART_Tx_Number_Digits>
}
    1474:	08 95       	ret

00001476 <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	ab 01       	movw	r20, r22
    147e:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    1480:	4f 3f       	cpi	r20, 0xFF	; 255
    1482:	51 05       	cpc	r21, r1
    1484:	61 05       	cpc	r22, r1
    1486:	71 05       	cpc	r23, r1
    1488:	09 f0       	breq	.+2      	; 0x148c <UART_Tx_Number_Hex+0x16>
    148a:	28 f4       	brcc	.+10     	; 0x1496 <UART_Tx_Number_Hex+0x20>
    148c:	e8 e0       	ldi	r30, 0x08	; 8
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	c2 e0       	ldi	r28, 0x02	; 2
    1492:	d0 e0       	ldi	r29, 0x00	; 0
    1494:	11 c0       	rjmp	.+34     	; 0x14b8 <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    1496:	40 30       	cpi	r20, 0x00	; 0
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	58 07       	cpc	r21, r24
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	68 07       	cpc	r22, r24
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	78 07       	cpc	r23, r24
    14a4:	28 f0       	brcs	.+10     	; 0x14b0 <UART_Tx_Number_Hex+0x3a>
    14a6:	e0 e2       	ldi	r30, 0x20	; 32
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	c8 e0       	ldi	r28, 0x08	; 8
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <UART_Tx_Number_Hex+0x42>
    14b0:	e0 e1       	ldi	r30, 0x10	; 16
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	c4 e0       	ldi	r28, 0x04	; 4
    14b6:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14b8:	80 91 c0 00 	lds	r24, 0x00C0
    14bc:	85 ff       	sbrs	r24, 5
    14be:	fc cf       	rjmp	.-8      	; 0x14b8 <UART_Tx_Number_Hex+0x42>
  UDR0 = val;
    14c0:	80 e3       	ldi	r24, 0x30	; 48
    14c2:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14c6:	80 91 c0 00 	lds	r24, 0x00C0
    14ca:	85 ff       	sbrs	r24, 5
    14cc:	fc cf       	rjmp	.-8      	; 0x14c6 <UART_Tx_Number_Hex+0x50>
  UDR0 = val;
    14ce:	88 e7       	ldi	r24, 0x78	; 120
    14d0:	80 93 c6 00 	sts	0x00C6, r24
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	1f c0       	rjmp	.+62     	; 0x1516 <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    14d8:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    14da:	db 01       	movw	r26, r22
    14dc:	ca 01       	movw	r24, r20
    14de:	0e 2e       	mov	r0, r30
    14e0:	04 c0       	rjmp	.+8      	; 0x14ea <UART_Tx_Number_Hex+0x74>
    14e2:	b6 95       	lsr	r27
    14e4:	a7 95       	ror	r26
    14e6:	97 95       	ror	r25
    14e8:	87 95       	ror	r24
    14ea:	0a 94       	dec	r0
    14ec:	d2 f7       	brpl	.-12     	; 0x14e2 <UART_Tx_Number_Hex+0x6c>
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	8f 70       	andi	r24, 0x0F	; 15
    14f2:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    14f4:	8a 30       	cpi	r24, 0x0A	; 10
    14f6:	91 05       	cpc	r25, r1
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    14fa:	9c 01       	movw	r18, r24
    14fc:	29 5c       	subi	r18, 0xC9	; 201
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    1502:	9c 01       	movw	r18, r24
    1504:	20 5d       	subi	r18, 0xD0	; 208
    1506:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1508:	80 91 c0 00 	lds	r24, 0x00C0
    150c:	85 ff       	sbrs	r24, 5
    150e:	fc cf       	rjmp	.-8      	; 0x1508 <UART_Tx_Number_Hex+0x92>
  UDR0 = val;
    1510:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    1514:	1f 5f       	subi	r17, 0xFF	; 255
    1516:	81 2f       	mov	r24, r17
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	8c 17       	cp	r24, r28
    151c:	9d 07       	cpc	r25, r29
    151e:	e0 f2       	brcs	.-72     	; 0x14d8 <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	08 95       	ret

00001528 <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	ab 01       	movw	r20, r22
    153a:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    153c:	4f 3f       	cpi	r20, 0xFF	; 255
    153e:	51 05       	cpc	r21, r1
    1540:	61 05       	cpc	r22, r1
    1542:	71 05       	cpc	r23, r1
    1544:	09 f0       	breq	.+2      	; 0x1548 <UART_Tx_Number_Bin+0x20>
    1546:	10 f4       	brcc	.+4      	; 0x154c <UART_Tx_Number_Bin+0x24>
    1548:	97 e0       	ldi	r25, 0x07	; 7
    154a:	0b c0       	rjmp	.+22     	; 0x1562 <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    154c:	40 30       	cpi	r20, 0x00	; 0
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	58 07       	cpc	r21, r24
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	68 07       	cpc	r22, r24
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	78 07       	cpc	r23, r24
    155a:	10 f0       	brcs	.+4      	; 0x1560 <UART_Tx_Number_Bin+0x38>
    155c:	9f e1       	ldi	r25, 0x1F	; 31
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <UART_Tx_Number_Bin+0x3a>
    1560:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1562:	80 91 c0 00 	lds	r24, 0x00C0
    1566:	85 ff       	sbrs	r24, 5
    1568:	fc cf       	rjmp	.-8      	; 0x1562 <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1570:	80 91 c0 00 	lds	r24, 0x00C0
    1574:	85 ff       	sbrs	r24, 5
    1576:	fc cf       	rjmp	.-8      	; 0x1570 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;
    1578:	82 e6       	ldi	r24, 0x62	; 98
    157a:	80 93 c6 00 	sts	0x00C6, r24
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    1582:	e9 2f       	mov	r30, r25
    1584:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    1586:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1588:	11 e3       	ldi	r17, 0x31	; 49
    158a:	ef 01       	movw	r28, r30
    158c:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    158e:	cf 01       	movw	r24, r30
    1590:	82 1b       	sub	r24, r18
    1592:	93 0b       	sbc	r25, r19
    1594:	6a 01       	movw	r12, r20
    1596:	7b 01       	movw	r14, r22
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <UART_Tx_Number_Bin+0x7a>
    159a:	f6 94       	lsr	r15
    159c:	e7 94       	ror	r14
    159e:	d7 94       	ror	r13
    15a0:	c7 94       	ror	r12
    15a2:	8a 95       	dec	r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <UART_Tx_Number_Bin+0x72>
    15a6:	d7 01       	movw	r26, r14
    15a8:	c6 01       	movw	r24, r12
    15aa:	81 70       	andi	r24, 0x01	; 1
    15ac:	90 70       	andi	r25, 0x00	; 0
    15ae:	89 2b       	or	r24, r25
    15b0:	39 f0       	breq	.+14     	; 0x15c0 <UART_Tx_Number_Bin+0x98>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15b2:	80 91 c0 00 	lds	r24, 0x00C0
    15b6:	85 ff       	sbrs	r24, 5
    15b8:	fc cf       	rjmp	.-8      	; 0x15b2 <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;
    15ba:	10 93 c6 00 	sts	0x00C6, r17
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <UART_Tx_Number_Bin+0xa4>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15c0:	80 91 c0 00 	lds	r24, 0x00C0
    15c4:	85 ff       	sbrs	r24, 5
    15c6:	fc cf       	rjmp	.-8      	; 0x15c0 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;
    15c8:	00 93 c6 00 	sts	0x00C6, r16
    15cc:	2f 5f       	subi	r18, 0xFF	; 255
    15ce:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    15d0:	2c 17       	cp	r18, r28
    15d2:	3d 07       	cpc	r19, r29
    15d4:	e1 f6       	brne	.-72     	; 0x158e <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	df 90       	pop	r13
    15e4:	cf 90       	pop	r12
    15e6:	08 95       	ret

000015e8 <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    15e8:	0e 94 22 0a 	call	0x1444	; 0x1444 <UART_Tx_Number>
  UART_Tx_NL();
    15ec:	0e 94 85 09 	call	0x130a	; 0x130a <UART_Tx_NL>
}
    15f0:	08 95       	ret

000015f2 <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    15f2:	0e 94 22 0a 	call	0x1444	; 0x1444 <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15f6:	80 91 c0 00 	lds	r24, 0x00C0
    15fa:	85 ff       	sbrs	r24, 5
    15fc:	fc cf       	rjmp	.-8      	; 0x15f6 <UART_Tx_Number_SP+0x4>
  UDR0 = val;
    15fe:	80 e2       	ldi	r24, 0x20	; 32
    1600:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    1604:	08 95       	ret

00001606 <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    1606:	0e 94 22 0a 	call	0x1444	; 0x1444 <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    160a:	80 91 c0 00 	lds	r24, 0x00C0
    160e:	85 ff       	sbrs	r24, 5
    1610:	fc cf       	rjmp	.-8      	; 0x160a <UART_Tx_Number_CM+0x4>
  UDR0 = val;
    1612:	8c e2       	ldi	r24, 0x2C	; 44
    1614:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    1618:	08 95       	ret

0000161a <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    161a:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_Tx_Number_Hex>
  UART_Tx_NL();
    161e:	0e 94 85 09 	call	0x130a	; 0x130a <UART_Tx_NL>
}
    1622:	08 95       	ret

00001624 <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    1624:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1628:	80 91 c0 00 	lds	r24, 0x00C0
    162c:	85 ff       	sbrs	r24, 5
    162e:	fc cf       	rjmp	.-8      	; 0x1628 <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;
    1630:	80 e2       	ldi	r24, 0x20	; 32
    1632:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    1636:	08 95       	ret

00001638 <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    1638:	0e 94 3b 0a 	call	0x1476	; 0x1476 <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    163c:	80 91 c0 00 	lds	r24, 0x00C0
    1640:	85 ff       	sbrs	r24, 5
    1642:	fc cf       	rjmp	.-8      	; 0x163c <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;
    1644:	8c e2       	ldi	r24, 0x2C	; 44
    1646:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    164a:	08 95       	ret

0000164c <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    164c:	0e 94 94 0a 	call	0x1528	; 0x1528 <UART_Tx_Number_Bin>
  UART_Tx_NL();
    1650:	0e 94 85 09 	call	0x130a	; 0x130a <UART_Tx_NL>
}
    1654:	08 95       	ret

00001656 <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    1656:	0e 94 94 0a 	call	0x1528	; 0x1528 <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    165a:	80 91 c0 00 	lds	r24, 0x00C0
    165e:	85 ff       	sbrs	r24, 5
    1660:	fc cf       	rjmp	.-8      	; 0x165a <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    1668:	08 95       	ret

0000166a <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    166a:	0e 94 94 0a 	call	0x1528	; 0x1528 <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    166e:	80 91 c0 00 	lds	r24, 0x00C0
    1672:	85 ff       	sbrs	r24, 5
    1674:	fc cf       	rjmp	.-8      	; 0x166e <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;
    1676:	8c e2       	ldi	r24, 0x2C	; 44
    1678:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    167c:	08 95       	ret

0000167e <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	7a 01       	movw	r14, r20
    1688:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    168a:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    168e:	80 91 c0 00 	lds	r24, 0x00C0
    1692:	85 ff       	sbrs	r24, 5
    1694:	fc cf       	rjmp	.-8      	; 0x168e <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    169c:	c8 01       	movw	r24, r16
    169e:	b7 01       	movw	r22, r14
    16a0:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <UART_Tx_Number_NL>
}
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	08 95       	ret

000016ae <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    16ae:	ef 92       	push	r14
    16b0:	ff 92       	push	r15
    16b2:	0f 93       	push	r16
    16b4:	1f 93       	push	r17
    16b6:	7a 01       	movw	r14, r20
    16b8:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    16ba:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16be:	80 91 c0 00 	lds	r24, 0x00C0
    16c2:	85 ff       	sbrs	r24, 5
    16c4:	fc cf       	rjmp	.-8      	; 0x16be <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;
    16c6:	80 e2       	ldi	r24, 0x20	; 32
    16c8:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    16cc:	c8 01       	movw	r24, r16
    16ce:	b7 01       	movw	r22, r14
    16d0:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <UART_Tx_Number_SP>
}
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	08 95       	ret

000016de <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	7a 01       	movw	r14, r20
    16e8:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    16ea:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16ee:	80 91 c0 00 	lds	r24, 0x00C0
    16f2:	85 ff       	sbrs	r24, 5
    16f4:	fc cf       	rjmp	.-8      	; 0x16ee <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;
    16f6:	80 e2       	ldi	r24, 0x20	; 32
    16f8:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    16fc:	c8 01       	movw	r24, r16
    16fe:	b7 01       	movw	r22, r14
    1700:	0e 94 03 0b 	call	0x1606	; 0x1606 <UART_Tx_Number_CM>
}
    1704:	1f 91       	pop	r17
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	08 95       	ret

0000170e <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	1f 93       	push	r17
    1716:	7a 01       	movw	r14, r20
    1718:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    171a:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    171e:	80 91 c0 00 	lds	r24, 0x00C0
    1722:	85 ff       	sbrs	r24, 5
    1724:	fc cf       	rjmp	.-8      	; 0x171e <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;
    1726:	80 e2       	ldi	r24, 0x20	; 32
    1728:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    172c:	c8 01       	movw	r24, r16
    172e:	b7 01       	movw	r22, r14
    1730:	0e 94 0d 0b 	call	0x161a	; 0x161a <UART_Tx_Number_Hex_NL>
}
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	08 95       	ret

0000173e <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	7a 01       	movw	r14, r20
    1748:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    174a:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    174e:	80 91 c0 00 	lds	r24, 0x00C0
    1752:	85 ff       	sbrs	r24, 5
    1754:	fc cf       	rjmp	.-8      	; 0x174e <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    175c:	c8 01       	movw	r24, r16
    175e:	b7 01       	movw	r22, r14
    1760:	0e 94 12 0b 	call	0x1624	; 0x1624 <UART_Tx_Number_Hex_SP>
}
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	08 95       	ret

0000176e <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	7a 01       	movw	r14, r20
    1778:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    177a:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    177e:	80 91 c0 00 	lds	r24, 0x00C0
    1782:	85 ff       	sbrs	r24, 5
    1784:	fc cf       	rjmp	.-8      	; 0x177e <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;
    1786:	80 e2       	ldi	r24, 0x20	; 32
    1788:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    178c:	c8 01       	movw	r24, r16
    178e:	b7 01       	movw	r22, r14
    1790:	0e 94 1c 0b 	call	0x1638	; 0x1638 <UART_Tx_Number_Hex_CM>
}
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	08 95       	ret

0000179e <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    179e:	ef 92       	push	r14
    17a0:	ff 92       	push	r15
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	7a 01       	movw	r14, r20
    17a8:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    17aa:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17ae:	80 91 c0 00 	lds	r24, 0x00C0
    17b2:	85 ff       	sbrs	r24, 5
    17b4:	fc cf       	rjmp	.-8      	; 0x17ae <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    17bc:	c8 01       	movw	r24, r16
    17be:	b7 01       	movw	r22, r14
    17c0:	0e 94 26 0b 	call	0x164c	; 0x164c <UART_Tx_Number_Bin_NL>
}
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	08 95       	ret

000017ce <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	7a 01       	movw	r14, r20
    17d8:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    17da:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17de:	80 91 c0 00 	lds	r24, 0x00C0
    17e2:	85 ff       	sbrs	r24, 5
    17e4:	fc cf       	rjmp	.-8      	; 0x17de <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;
    17e6:	80 e2       	ldi	r24, 0x20	; 32
    17e8:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    17ec:	c8 01       	movw	r24, r16
    17ee:	b7 01       	movw	r22, r14
    17f0:	0e 94 2b 0b 	call	0x1656	; 0x1656 <UART_Tx_Number_Bin_SP>
}
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	ff 90       	pop	r15
    17fa:	ef 90       	pop	r14
    17fc:	08 95       	ret

000017fe <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	7a 01       	movw	r14, r20
    1808:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    180a:	0e 94 a4 09 	call	0x1348	; 0x1348 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    180e:	80 91 c0 00 	lds	r24, 0x00C0
    1812:	85 ff       	sbrs	r24, 5
    1814:	fc cf       	rjmp	.-8      	; 0x180e <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;
    1816:	80 e2       	ldi	r24, 0x20	; 32
    1818:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    181c:	c8 01       	movw	r24, r16
    181e:	b7 01       	movw	r22, r14
    1820:	0e 94 35 0b 	call	0x166a	; 0x166a <UART_Tx_Number_Bin_CM>
}
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	08 95       	ret

0000182e <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1832:	fc 01       	movw	r30, r24
    1834:	ea 56       	subi	r30, 0x6A	; 106
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	13 86       	std	Z+11, r1	; 0x0b
    183a:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    183c:	80 34       	cpi	r24, 0x40	; 64
    183e:	91 05       	cpc	r25, r1
    1840:	c1 f7       	brne	.-16     	; 0x1832 <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1842:	10 92 e4 01 	sts	0x01E4, r1
    1846:	10 92 e3 01 	sts	0x01E3, r1
}
    184a:	08 95       	ret

0000184c <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    184c:	fc 01       	movw	r30, r24
    184e:	ea 56       	subi	r30, 0x6A	; 106
    1850:	fe 4f       	sbci	r31, 0xFE	; 254
    1852:	83 85       	ldd	r24, Z+11	; 0x0b
}
    1854:	08 95       	ret

00001856 <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1856:	80 91 e3 01 	lds	r24, 0x01E3
    185a:	90 91 e4 01 	lds	r25, 0x01E4
}
    185e:	08 95       	ret

00001860 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
    1860:	80 91 ec 01 	lds	r24, 0x01EC
}
    1864:	08 95       	ret

00001866 <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1866:	80 91 e3 01 	lds	r24, 0x01E3
    186a:	90 91 e4 01 	lds	r25, 0x01E4
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
    186e:	08 95       	ret

00001870 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
    1870:	20 91 e7 01 	lds	r18, 0x01E7
    1874:	30 91 e8 01 	lds	r19, 0x01E8
}
    1878:	c9 01       	movw	r24, r18
    187a:	08 95       	ret

0000187c <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
    187c:	20 91 e9 01 	lds	r18, 0x01E9
    1880:	30 91 ea 01 	lds	r19, 0x01EA
}
    1884:	c9 01       	movw	r24, r18
    1886:	08 95       	ret

00001888 <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
    1888:	80 91 eb 01 	lds	r24, 0x01EB
}
    188c:	08 95       	ret

0000188e <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
    188e:	80 91 ed 01 	lds	r24, 0x01ED
}
    1892:	08 95       	ret

00001894 <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    1894:	10 92 ec 01 	sts	0x01EC, r1
}
    1898:	08 95       	ret

0000189a <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    189e:	fc 01       	movw	r30, r24
    18a0:	ea 56       	subi	r30, 0x6A	; 106
    18a2:	fe 4f       	sbci	r31, 0xFE	; 254
    18a4:	13 86       	std	Z+11, r1	; 0x0b
    18a6:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    18a8:	80 34       	cpi	r24, 0x40	; 64
    18aa:	91 05       	cpc	r25, r1
    18ac:	c1 f7       	brne	.-16     	; 0x189e <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    18ae:	10 92 e4 01 	sts	0x01E4, r1
    18b2:	10 92 e3 01 	sts	0x01E3, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	80 93 ed 01 	sts	0x01ED, r24
}
    18bc:	08 95       	ret

000018be <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
    18be:	ac 01       	movw	r20, r24
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	0a c0       	rjmp	.+20     	; 0x18da <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    18c6:	f9 01       	movw	r30, r18
    18c8:	ea 56       	subi	r30, 0x6A	; 106
    18ca:	fe 4f       	sbci	r31, 0xFE	; 254
    18cc:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
    18ce:	fa 01       	movw	r30, r20
    18d0:	e2 0f       	add	r30, r18
    18d2:	f3 1f       	adc	r31, r19
    18d4:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    18d6:	2f 5f       	subi	r18, 0xFF	; 255
    18d8:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    18da:	80 91 e3 01 	lds	r24, 0x01E3
    18de:	90 91 e4 01 	lds	r25, 0x01E4
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	28 17       	cp	r18, r24
    18e6:	39 07       	cpc	r19, r25
    18e8:	70 f3       	brcs	.-36     	; 0x18c6 <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
    18ea:	08 95       	ret

000018ec <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	0c c0       	rjmp	.+24     	; 0x190a <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    18f2:	f9 01       	movw	r30, r18
    18f4:	ea 56       	subi	r30, 0x6A	; 106
    18f6:	fe 4f       	sbci	r31, 0xFE	; 254
    18f8:	93 85       	ldd	r25, Z+11	; 0x0b
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    18fa:	80 91 c0 00 	lds	r24, 0x00C0
    18fe:	85 ff       	sbrs	r24, 5
    1900:	fc cf       	rjmp	.-8      	; 0x18fa <UART_Data_Print_Buf+0xe>
  UDR0 = val;
    1902:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1906:	2f 5f       	subi	r18, 0xFF	; 255
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    190a:	80 91 e3 01 	lds	r24, 0x01E3
    190e:	90 91 e4 01 	lds	r25, 0x01E4
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	28 17       	cp	r18, r24
    1916:	39 07       	cpc	r19, r25
    1918:	60 f3       	brcs	.-40     	; 0x18f2 <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
    191a:	0e 94 85 09 	call	0x130a	; 0x130a <UART_Tx_NL>
}
    191e:	08 95       	ret

00001920 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
    1920:	80 91 96 01 	lds	r24, 0x0196
}
    1924:	08 95       	ret

00001926 <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
    1926:	10 92 96 01 	sts	0x0196, r1
}
    192a:	08 95       	ret

0000192c <UART_ISR_Handler>:


/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    192c:	0e 94 1d 09 	call	0x123a	; 0x123a <UART_Rx_Byte>
    1930:	80 93 a0 01 	sts	0x01A0, r24
  if(UART.Error == 0x00){
    1934:	80 91 96 01 	lds	r24, 0x0196
    1938:	88 23       	and	r24, r24
    193a:	11 f5       	brne	.+68     	; 0x1980 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    193c:	e0 91 e3 01 	lds	r30, 0x01E3
    1940:	f0 91 e4 01 	lds	r31, 0x01E4
    1944:	80 91 a0 01 	lds	r24, 0x01A0
    1948:	ea 56       	subi	r30, 0x6A	; 106
    194a:	fe 4f       	sbci	r31, 0xFE	; 254
    194c:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    194e:	80 91 e3 01 	lds	r24, 0x01E3
    1952:	90 91 e4 01 	lds	r25, 0x01E4
    1956:	01 96       	adiw	r24, 0x01	; 1
    1958:	90 93 e4 01 	sts	0x01E4, r25
    195c:	80 93 e3 01 	sts	0x01E3, r24
    if(UART.BufIndex >= UART.BufSize){
    1960:	20 91 e3 01 	lds	r18, 0x01E3
    1964:	30 91 e4 01 	lds	r19, 0x01E4
    1968:	80 91 e1 01 	lds	r24, 0x01E1
    196c:	90 91 e2 01 	lds	r25, 0x01E2
    1970:	28 17       	cp	r18, r24
    1972:	39 07       	cpc	r19, r25
    1974:	38 f0       	brcs	.+14     	; 0x1984 <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    1976:	10 92 e4 01 	sts	0x01E4, r1
    197a:	10 92 e3 01 	sts	0x01E3, r1
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    1980:	10 92 a0 01 	sts	0x01A0, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    1984:	80 91 e6 01 	lds	r24, 0x01E6
    1988:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
    198c:	80 91 e5 01 	lds	r24, 0x01E5
    1990:	88 23       	and	r24, r24
    1992:	31 f4       	brne	.+12     	; 0x19a0 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1994:	87 e0       	ldi	r24, 0x07	; 7
    1996:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	80 93 e5 01 	sts	0x01E5, r24
    19a0:	08 95       	ret

000019a2 <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    19a2:	1f 92       	push	r1
    19a4:	0f 92       	push	r0
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	0f 92       	push	r0
    19aa:	11 24       	eor	r1, r1
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	4f 93       	push	r20
    19b2:	5f 93       	push	r21
    19b4:	6f 93       	push	r22
    19b6:	7f 93       	push	r23
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	af 93       	push	r26
    19be:	bf 93       	push	r27
    19c0:	ef 93       	push	r30
    19c2:	ff 93       	push	r31
  UART_ISR_Handler();
    19c4:	0e 94 96 0c 	call	0x192c	; 0x192c <UART_ISR_Handler>
  //Clear flag if necessary
}
    19c8:	ff 91       	pop	r31
    19ca:	ef 91       	pop	r30
    19cc:	bf 91       	pop	r27
    19ce:	af 91       	pop	r26
    19d0:	9f 91       	pop	r25
    19d2:	8f 91       	pop	r24
    19d4:	7f 91       	pop	r23
    19d6:	6f 91       	pop	r22
    19d8:	5f 91       	pop	r21
    19da:	4f 91       	pop	r20
    19dc:	3f 91       	pop	r19
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    19ea:	36 2f       	mov	r19, r22
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	28 27       	eor	r18, r24
    19f0:	39 27       	eor	r19, r25
    19f2:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    19f4:	61 e2       	ldi	r22, 0x21	; 33
    19f6:	70 e1       	ldi	r23, 0x10	; 16
    19f8:	c9 01       	movw	r24, r18
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    19fe:	37 ff       	sbrs	r19, 7
    1a00:	04 c0       	rjmp	.+8      	; 0x1a0a <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    1a02:	9c 01       	movw	r18, r24
    1a04:	26 27       	eor	r18, r22
    1a06:	37 27       	eor	r19, r23
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    1a0a:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    1a0c:	4f 5f       	subi	r20, 0xFF	; 255
    1a0e:	48 30       	cpi	r20, 0x08	; 8
    1a10:	99 f7       	brne	.-26     	; 0x19f8 <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    1a12:	c9 01       	movw	r24, r18
    1a14:	08 95       	ret

00001a16 <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	06 2f       	mov	r16, r22
    1a20:	ec 01       	movw	r28, r24
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	30 e0       	ldi	r19, 0x00	; 0
    1a26:	10 e0       	ldi	r17, 0x00	; 0
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	69 91       	ld	r22, Y+
    1a2e:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <UART_CRC_Calculate_Byte>
    1a32:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    1a34:	1f 5f       	subi	r17, 0xFF	; 255
    1a36:	10 17       	cp	r17, r16
    1a38:	c0 f3       	brcs	.-16     	; 0x1a2a <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	08 95       	ret

00001a46 <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a46:	60 91 e3 01 	lds	r22, 0x01E3
    1a4a:	70 91 e4 01 	lds	r23, 0x01E4

/**********UART RX Packet Check Functions Start************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
    1a4e:	62 50       	subi	r22, 0x02	; 2
    1a50:	81 ea       	ldi	r24, 0xA1	; 161
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <UART_CRC_Calculate_Block>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a58:	e0 91 e3 01 	lds	r30, 0x01E3
    1a5c:	f0 91 e4 01 	lds	r31, 0x01E4
/**********UART RX Packet Check Functions Start************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1a62:	ec 56       	subi	r30, 0x6C	; 108
    1a64:	fe 4f       	sbci	r31, 0xFE	; 254
    1a66:	23 85       	ldd	r18, Z+11	; 0x0b

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
    1a68:	52 2f       	mov	r21, r18
    1a6a:	40 e0       	ldi	r20, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a6c:	e0 91 e3 01 	lds	r30, 0x01E3
    1a70:	f0 91 e4 01 	lds	r31, 0x01E4
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1a76:	eb 56       	subi	r30, 0x6B	; 107
    1a78:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7a:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	42 2b       	or	r20, r18
    1a80:	53 2b       	or	r21, r19
  UART.RxPacket.CalculatedCRC = crc_calc;
    1a82:	90 93 e8 01 	sts	0x01E8, r25
    1a86:	80 93 e7 01 	sts	0x01E7, r24
  UART.RxPacket.ReceivedCRC = crc_recv;
    1a8a:	50 93 ea 01 	sts	0x01EA, r21
    1a8e:	40 93 e9 01 	sts	0x01E9, r20
  if(UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC){
    1a92:	20 91 e7 01 	lds	r18, 0x01E7
    1a96:	30 91 e8 01 	lds	r19, 0x01E8
    1a9a:	80 91 e9 01 	lds	r24, 0x01E9
    1a9e:	90 91 ea 01 	lds	r25, 0x01EA
    1aa2:	28 17       	cp	r18, r24
    1aa4:	39 07       	cpc	r19, r25
    1aa6:	21 f4       	brne	.+8      	; 0x1ab0 <UART_RX_Packet_CRC_Check+0x6a>
    UART.RxPacket.CRCStatus = UART_TRUE;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	80 93 eb 01 	sts	0x01EB, r24
    1aae:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
    1ab0:	10 92 eb 01 	sts	0x01EB, r1
    1ab4:	08 95       	ret

00001ab6 <UART_Timer_ISR_Handler>:
  }
  
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    1ab6:	80 91 e5 01 	lds	r24, 0x01E5
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	21 f4       	brne	.+8      	; 0x1ac6 <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    1abe:	10 92 b1 00 	sts	0x00B1, r1
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
    1ac2:	10 92 e5 01 	sts	0x01E5, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1ac6:	80 91 e3 01 	lds	r24, 0x01E3
    1aca:	90 91 e4 01 	lds	r25, 0x01E4
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    1ace:	88 23       	and	r24, r24
    1ad0:	71 f0       	breq	.+28     	; 0x1aee <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
    1ad2:	80 91 ed 01 	lds	r24, 0x01ED
    1ad6:	88 23       	and	r24, r24
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
    1ada:	80 e1       	ldi	r24, 0x10	; 16
    1adc:	80 93 96 01 	sts	0x0196, r24
	}
    UART_RX_Packet_CRC_Check();
    1ae0:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	80 93 ec 01 	sts	0x01EC, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
    1aea:	10 92 ed 01 	sts	0x01ED, r1
    1aee:	08 95       	ret

00001af0 <__vector_9>:
  TCNT2 = UART.Timer.ResetVal;
}



ISR(TIMER2_OVF_vect){
    1af0:	1f 92       	push	r1
    1af2:	0f 92       	push	r0
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	0f 92       	push	r0
    1af8:	11 24       	eor	r1, r1
    1afa:	2f 93       	push	r18
    1afc:	3f 93       	push	r19
    1afe:	4f 93       	push	r20
    1b00:	5f 93       	push	r21
    1b02:	6f 93       	push	r22
    1b04:	7f 93       	push	r23
    1b06:	8f 93       	push	r24
    1b08:	9f 93       	push	r25
    1b0a:	af 93       	push	r26
    1b0c:	bf 93       	push	r27
    1b0e:	ef 93       	push	r30
    1b10:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    1b12:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <UART_Timer_ISR_Handler>
  //Clear flag if necessary
}
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	bf 91       	pop	r27
    1b1c:	af 91       	pop	r26
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	7f 91       	pop	r23
    1b24:	6f 91       	pop	r22
    1b26:	5f 91       	pop	r21
    1b28:	4f 91       	pop	r20
    1b2a:	3f 91       	pop	r19
    1b2c:	2f 91       	pop	r18
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    1b38:	ef 92       	push	r14
    1b3a:	ff 92       	push	r15
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
    1b40:	7b 01       	movw	r14, r22
    1b42:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    1b44:	0e 94 ab 08 	call	0x1156	; 0x1156 <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1b48:	10 92 e8 01 	sts	0x01E8, r1
    1b4c:	10 92 e7 01 	sts	0x01E7, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1b50:	10 92 ea 01 	sts	0x01EA, r1
    1b54:	10 92 e9 01 	sts	0x01E9, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1b58:	10 92 eb 01 	sts	0x01EB, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1b5c:	10 92 ec 01 	sts	0x01EC, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	80 93 ed 01 	sts	0x01ED, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1b66:	10 92 e5 01 	sts	0x01E5, r1
  UART.Timer.ResetVal = UART_NULL;
    1b6a:	10 92 e6 01 	sts	0x01E6, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    1b6e:	c8 01       	movw	r24, r16
    1b70:	b7 01       	movw	r22, r14
    1b72:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1b76:	80 91 c1 00 	lds	r24, 0x00C1
    1b7a:	88 60       	ori	r24, 0x08	; 8
    1b7c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1b80:	96 e0       	ldi	r25, 0x06	; 6
    1b82:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1b86:	80 91 c1 00 	lds	r24, 0x00C1
    1b8a:	80 61       	ori	r24, 0x10	; 16
    1b8c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1b90:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1b94:	80 91 c1 00 	lds	r24, 0x00C1
    1b98:	80 68       	ori	r24, 0x80	; 128
    1b9a:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    1b9e:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    1ba0:	0e 94 46 09 	call	0x128c	; 0x128c <UART_Timer_Init>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ea 56       	subi	r30, 0x6A	; 106
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	13 86       	std	Z+11, r1	; 0x0b
    1bb0:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1bb2:	80 34       	cpi	r24, 0x40	; 64
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	c1 f7       	brne	.-16     	; 0x1ba8 <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1bb8:	10 92 e4 01 	sts	0x01E4, r1
    1bbc:	10 92 e3 01 	sts	0x01E3, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	08 95       	ret

00001bca <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    1bca:	10 92 1c 01 	sts	0x011C, r1
    1bce:	10 92 1d 01 	sts	0x011D, r1
    1bd2:	10 92 1e 01 	sts	0x011E, r1
    1bd6:	10 92 1f 01 	sts	0x011F, r1
  PID.Input.Ki = 0;
    1bda:	10 92 20 01 	sts	0x0120, r1
    1bde:	10 92 21 01 	sts	0x0121, r1
    1be2:	10 92 22 01 	sts	0x0122, r1
    1be6:	10 92 23 01 	sts	0x0123, r1
  PID.Input.Kd = 0;
    1bea:	10 92 24 01 	sts	0x0124, r1
    1bee:	10 92 25 01 	sts	0x0125, r1
    1bf2:	10 92 26 01 	sts	0x0126, r1
    1bf6:	10 92 27 01 	sts	0x0127, r1
  PID.Input.SetPoint = 0;
    1bfa:	10 92 28 01 	sts	0x0128, r1
    1bfe:	10 92 29 01 	sts	0x0129, r1
    1c02:	10 92 2a 01 	sts	0x012A, r1
    1c06:	10 92 2b 01 	sts	0x012B, r1
  PID.Input.ProcessValue = 0;
    1c0a:	10 92 2c 01 	sts	0x012C, r1
    1c0e:	10 92 2d 01 	sts	0x012D, r1
    1c12:	10 92 2e 01 	sts	0x012E, r1
    1c16:	10 92 2f 01 	sts	0x012F, r1
  PID.Error.PError = 0;
    1c1a:	10 92 30 01 	sts	0x0130, r1
    1c1e:	10 92 31 01 	sts	0x0131, r1
    1c22:	10 92 32 01 	sts	0x0132, r1
    1c26:	10 92 33 01 	sts	0x0133, r1
  PID.Error.DError = 0;
    1c2a:	10 92 34 01 	sts	0x0134, r1
    1c2e:	10 92 35 01 	sts	0x0135, r1
    1c32:	10 92 36 01 	sts	0x0136, r1
    1c36:	10 92 37 01 	sts	0x0137, r1
  PID.Error.IError = 0;
    1c3a:	10 92 38 01 	sts	0x0138, r1
    1c3e:	10 92 39 01 	sts	0x0139, r1
    1c42:	10 92 3a 01 	sts	0x013A, r1
    1c46:	10 92 3b 01 	sts	0x013B, r1
  PID.Error.IErrorLimit = 0;
    1c4a:	10 92 3c 01 	sts	0x013C, r1
    1c4e:	10 92 3d 01 	sts	0x013D, r1
    1c52:	10 92 3e 01 	sts	0x013E, r1
    1c56:	10 92 3f 01 	sts	0x013F, r1
  PID.Error.LastError = 0;
    1c5a:	10 92 40 01 	sts	0x0140, r1
    1c5e:	10 92 41 01 	sts	0x0141, r1
    1c62:	10 92 42 01 	sts	0x0142, r1
    1c66:	10 92 43 01 	sts	0x0143, r1
  PID.Products.PError = 0;
    1c6a:	10 92 44 01 	sts	0x0144, r1
    1c6e:	10 92 45 01 	sts	0x0145, r1
    1c72:	10 92 46 01 	sts	0x0146, r1
    1c76:	10 92 47 01 	sts	0x0147, r1
  PID.Products.IError = 0;
    1c7a:	10 92 48 01 	sts	0x0148, r1
    1c7e:	10 92 49 01 	sts	0x0149, r1
    1c82:	10 92 4a 01 	sts	0x014A, r1
    1c86:	10 92 4b 01 	sts	0x014B, r1
  PID.Products.DError = 0;
    1c8a:	10 92 4c 01 	sts	0x014C, r1
    1c8e:	10 92 4d 01 	sts	0x014D, r1
    1c92:	10 92 4e 01 	sts	0x014E, r1
    1c96:	10 92 4f 01 	sts	0x014F, r1
  PID.Products.ScaleFact = 0;
    1c9a:	10 92 50 01 	sts	0x0150, r1
    1c9e:	10 92 51 01 	sts	0x0151, r1
    1ca2:	10 92 52 01 	sts	0x0152, r1
    1ca6:	10 92 53 01 	sts	0x0153, r1
  PID.Output = 0;
    1caa:	10 92 54 01 	sts	0x0154, r1
    1cae:	10 92 55 01 	sts	0x0155, r1
    1cb2:	10 92 56 01 	sts	0x0156, r1
    1cb6:	10 92 57 01 	sts	0x0157, r1
  PID.OutputNonNegative = 0;
    1cba:	10 92 58 01 	sts	0x0158, r1
    1cbe:	10 92 59 01 	sts	0x0159, r1
    1cc2:	10 92 5a 01 	sts	0x015A, r1
    1cc6:	10 92 5b 01 	sts	0x015B, r1
}
    1cca:	08 95       	ret

00001ccc <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1ccc:	60 93 1c 01 	sts	0x011C, r22
    1cd0:	70 93 1d 01 	sts	0x011D, r23
    1cd4:	80 93 1e 01 	sts	0x011E, r24
    1cd8:	90 93 1f 01 	sts	0x011F, r25
}
    1cdc:	08 95       	ret

00001cde <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1cde:	60 93 20 01 	sts	0x0120, r22
    1ce2:	70 93 21 01 	sts	0x0121, r23
    1ce6:	80 93 22 01 	sts	0x0122, r24
    1cea:	90 93 23 01 	sts	0x0123, r25
}
    1cee:	08 95       	ret

00001cf0 <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1cf0:	60 93 24 01 	sts	0x0124, r22
    1cf4:	70 93 25 01 	sts	0x0125, r23
    1cf8:	80 93 26 01 	sts	0x0126, r24
    1cfc:	90 93 27 01 	sts	0x0127, r25
}
    1d00:	08 95       	ret

00001d02 <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1d0a:	60 93 1c 01 	sts	0x011C, r22
    1d0e:	70 93 1d 01 	sts	0x011D, r23
    1d12:	80 93 1e 01 	sts	0x011E, r24
    1d16:	90 93 1f 01 	sts	0x011F, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1d1a:	20 93 20 01 	sts	0x0120, r18
    1d1e:	30 93 21 01 	sts	0x0121, r19
    1d22:	40 93 22 01 	sts	0x0122, r20
    1d26:	50 93 23 01 	sts	0x0123, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1d2a:	e0 92 24 01 	sts	0x0124, r14
    1d2e:	f0 92 25 01 	sts	0x0125, r15
    1d32:	00 93 26 01 	sts	0x0126, r16
    1d36:	10 93 27 01 	sts	0x0127, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	08 95       	ret

00001d44 <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    1d44:	60 93 28 01 	sts	0x0128, r22
    1d48:	70 93 29 01 	sts	0x0129, r23
    1d4c:	80 93 2a 01 	sts	0x012A, r24
    1d50:	90 93 2b 01 	sts	0x012B, r25
}
    1d54:	08 95       	ret

00001d56 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    1d56:	60 93 2c 01 	sts	0x012C, r22
    1d5a:	70 93 2d 01 	sts	0x012D, r23
    1d5e:	80 93 2e 01 	sts	0x012E, r24
    1d62:	90 93 2f 01 	sts	0x012F, r25
}
    1d66:	08 95       	ret

00001d68 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    1d68:	60 93 3c 01 	sts	0x013C, r22
    1d6c:	70 93 3d 01 	sts	0x013D, r23
    1d70:	80 93 3e 01 	sts	0x013E, r24
    1d74:	90 93 3f 01 	sts	0x013F, r25
}
    1d78:	08 95       	ret

00001d7a <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    1d7a:	60 93 50 01 	sts	0x0150, r22
    1d7e:	70 93 51 01 	sts	0x0151, r23
    1d82:	80 93 52 01 	sts	0x0152, r24
    1d86:	90 93 53 01 	sts	0x0153, r25
}
    1d8a:	08 95       	ret

00001d8c <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    1d8c:	10 92 38 01 	sts	0x0138, r1
    1d90:	10 92 39 01 	sts	0x0139, r1
    1d94:	10 92 3a 01 	sts	0x013A, r1
    1d98:	10 92 3b 01 	sts	0x013B, r1
}
    1d9c:	08 95       	ret

00001d9e <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    1da6:	20 91 28 01 	lds	r18, 0x0128
    1daa:	30 91 29 01 	lds	r19, 0x0129
    1dae:	40 91 2a 01 	lds	r20, 0x012A
    1db2:	50 91 2b 01 	lds	r21, 0x012B
    1db6:	80 91 2c 01 	lds	r24, 0x012C
    1dba:	90 91 2d 01 	lds	r25, 0x012D
    1dbe:	a0 91 2e 01 	lds	r26, 0x012E
    1dc2:	b0 91 2f 01 	lds	r27, 0x012F
    1dc6:	28 1b       	sub	r18, r24
    1dc8:	39 0b       	sbc	r19, r25
    1dca:	4a 0b       	sbc	r20, r26
    1dcc:	5b 0b       	sbc	r21, r27
    1dce:	20 93 30 01 	sts	0x0130, r18
    1dd2:	30 93 31 01 	sts	0x0131, r19
    1dd6:	40 93 32 01 	sts	0x0132, r20
    1dda:	50 93 33 01 	sts	0x0133, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    1dde:	80 91 40 01 	lds	r24, 0x0140
    1de2:	90 91 41 01 	lds	r25, 0x0141
    1de6:	a0 91 42 01 	lds	r26, 0x0142
    1dea:	b0 91 43 01 	lds	r27, 0x0143
    1dee:	79 01       	movw	r14, r18
    1df0:	8a 01       	movw	r16, r20
    1df2:	e8 1a       	sub	r14, r24
    1df4:	f9 0a       	sbc	r15, r25
    1df6:	0a 0b       	sbc	r16, r26
    1df8:	1b 0b       	sbc	r17, r27
    1dfa:	e0 92 34 01 	sts	0x0134, r14
    1dfe:	f0 92 35 01 	sts	0x0135, r15
    1e02:	00 93 36 01 	sts	0x0136, r16
    1e06:	10 93 37 01 	sts	0x0137, r17
  PID.Error.LastError = PID.Error.PError;
    1e0a:	20 93 40 01 	sts	0x0140, r18
    1e0e:	30 93 41 01 	sts	0x0141, r19
    1e12:	40 93 42 01 	sts	0x0142, r20
    1e16:	50 93 43 01 	sts	0x0143, r21
  PID.Error.IError += PID.Error.PError;
    1e1a:	e0 90 38 01 	lds	r14, 0x0138
    1e1e:	f0 90 39 01 	lds	r15, 0x0139
    1e22:	00 91 3a 01 	lds	r16, 0x013A
    1e26:	10 91 3b 01 	lds	r17, 0x013B
    1e2a:	e2 0e       	add	r14, r18
    1e2c:	f3 1e       	adc	r15, r19
    1e2e:	04 1f       	adc	r16, r20
    1e30:	15 1f       	adc	r17, r21
    1e32:	e0 92 38 01 	sts	0x0138, r14
    1e36:	f0 92 39 01 	sts	0x0139, r15
    1e3a:	00 93 3a 01 	sts	0x013A, r16
    1e3e:	10 93 3b 01 	sts	0x013B, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    1e42:	80 91 3c 01 	lds	r24, 0x013C
    1e46:	90 91 3d 01 	lds	r25, 0x013D
    1e4a:	a0 91 3e 01 	lds	r26, 0x013E
    1e4e:	b0 91 3f 01 	lds	r27, 0x013F
    1e52:	8e 15       	cp	r24, r14
    1e54:	9f 05       	cpc	r25, r15
    1e56:	a0 07       	cpc	r26, r16
    1e58:	b1 07       	cpc	r27, r17
    1e5a:	4c f4       	brge	.+18     	; 0x1e6e <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    1e5c:	80 93 38 01 	sts	0x0138, r24
    1e60:	90 93 39 01 	sts	0x0139, r25
    1e64:	a0 93 3a 01 	sts	0x013A, r26
    1e68:	b0 93 3b 01 	sts	0x013B, r27
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    1e6e:	22 27       	eor	r18, r18
    1e70:	33 27       	eor	r19, r19
    1e72:	a9 01       	movw	r20, r18
    1e74:	28 1b       	sub	r18, r24
    1e76:	39 0b       	sbc	r19, r25
    1e78:	4a 0b       	sbc	r20, r26
    1e7a:	5b 0b       	sbc	r21, r27
    1e7c:	e2 16       	cp	r14, r18
    1e7e:	f3 06       	cpc	r15, r19
    1e80:	04 07       	cpc	r16, r20
    1e82:	15 07       	cpc	r17, r21
    1e84:	44 f4       	brge	.+16     	; 0x1e96 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    1e86:	20 93 38 01 	sts	0x0138, r18
    1e8a:	30 93 39 01 	sts	0x0139, r19
    1e8e:	40 93 3a 01 	sts	0x013A, r20
    1e92:	50 93 3b 01 	sts	0x013B, r21
  }
}
    1e96:	1f 91       	pop	r17
    1e98:	0f 91       	pop	r16
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	08 95       	ret

00001ea0 <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    1ea0:	6f 92       	push	r6
    1ea2:	7f 92       	push	r7
    1ea4:	8f 92       	push	r8
    1ea6:	9f 92       	push	r9
    1ea8:	af 92       	push	r10
    1eaa:	bf 92       	push	r11
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	0f 93       	push	r16
    1eb6:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    1eb8:	60 91 20 01 	lds	r22, 0x0120
    1ebc:	70 91 21 01 	lds	r23, 0x0121
    1ec0:	80 91 22 01 	lds	r24, 0x0122
    1ec4:	90 91 23 01 	lds	r25, 0x0123
    1ec8:	20 91 38 01 	lds	r18, 0x0138
    1ecc:	30 91 39 01 	lds	r19, 0x0139
    1ed0:	40 91 3a 01 	lds	r20, 0x013A
    1ed4:	50 91 3b 01 	lds	r21, 0x013B
    1ed8:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
    1edc:	3b 01       	movw	r6, r22
    1ede:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    1ee0:	60 91 24 01 	lds	r22, 0x0124
    1ee4:	70 91 25 01 	lds	r23, 0x0125
    1ee8:	80 91 26 01 	lds	r24, 0x0126
    1eec:	90 91 27 01 	lds	r25, 0x0127
    1ef0:	20 91 34 01 	lds	r18, 0x0134
    1ef4:	30 91 35 01 	lds	r19, 0x0135
    1ef8:	40 91 36 01 	lds	r20, 0x0136
    1efc:	50 91 37 01 	lds	r21, 0x0137
    1f00:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
    1f04:	5b 01       	movw	r10, r22
    1f06:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    1f08:	e0 90 50 01 	lds	r14, 0x0150
    1f0c:	f0 90 51 01 	lds	r15, 0x0151
    1f10:	00 91 52 01 	lds	r16, 0x0152
    1f14:	10 91 53 01 	lds	r17, 0x0153
    1f18:	60 91 1c 01 	lds	r22, 0x011C
    1f1c:	70 91 1d 01 	lds	r23, 0x011D
    1f20:	80 91 1e 01 	lds	r24, 0x011E
    1f24:	90 91 1f 01 	lds	r25, 0x011F
    1f28:	20 91 30 01 	lds	r18, 0x0130
    1f2c:	30 91 31 01 	lds	r19, 0x0131
    1f30:	40 91 32 01 	lds	r20, 0x0132
    1f34:	50 91 33 01 	lds	r21, 0x0133
    1f38:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__mulsi3>
    1f3c:	a8 01       	movw	r20, r16
    1f3e:	97 01       	movw	r18, r14
    1f40:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
    1f44:	20 93 44 01 	sts	0x0144, r18
    1f48:	30 93 45 01 	sts	0x0145, r19
    1f4c:	40 93 46 01 	sts	0x0146, r20
    1f50:	50 93 47 01 	sts	0x0147, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    1f54:	c4 01       	movw	r24, r8
    1f56:	b3 01       	movw	r22, r6
    1f58:	a8 01       	movw	r20, r16
    1f5a:	97 01       	movw	r18, r14
    1f5c:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
    1f60:	20 93 48 01 	sts	0x0148, r18
    1f64:	30 93 49 01 	sts	0x0149, r19
    1f68:	40 93 4a 01 	sts	0x014A, r20
    1f6c:	50 93 4b 01 	sts	0x014B, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    1f70:	c6 01       	movw	r24, r12
    1f72:	b5 01       	movw	r22, r10
    1f74:	a8 01       	movw	r20, r16
    1f76:	97 01       	movw	r18, r14
    1f78:	0e 94 29 11 	call	0x2252	; 0x2252 <__divmodsi4>
    1f7c:	20 93 4c 01 	sts	0x014C, r18
    1f80:	30 93 4d 01 	sts	0x014D, r19
    1f84:	40 93 4e 01 	sts	0x014E, r20
    1f88:	50 93 4f 01 	sts	0x014F, r21
}
    1f8c:	1f 91       	pop	r17
    1f8e:	0f 91       	pop	r16
    1f90:	ff 90       	pop	r15
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	bf 90       	pop	r11
    1f9a:	af 90       	pop	r10
    1f9c:	9f 90       	pop	r9
    1f9e:	8f 90       	pop	r8
    1fa0:	7f 90       	pop	r7
    1fa2:	6f 90       	pop	r6
    1fa4:	08 95       	ret

00001fa6 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    1fa6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    1faa:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    1fae:	20 91 44 01 	lds	r18, 0x0144
    1fb2:	30 91 45 01 	lds	r19, 0x0145
    1fb6:	40 91 46 01 	lds	r20, 0x0146
    1fba:	50 91 47 01 	lds	r21, 0x0147
  control_value += PID.Products.IError;
    1fbe:	80 91 48 01 	lds	r24, 0x0148
    1fc2:	90 91 49 01 	lds	r25, 0x0149
    1fc6:	a0 91 4a 01 	lds	r26, 0x014A
    1fca:	b0 91 4b 01 	lds	r27, 0x014B
    1fce:	28 0f       	add	r18, r24
    1fd0:	39 1f       	adc	r19, r25
    1fd2:	4a 1f       	adc	r20, r26
    1fd4:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    1fd6:	80 91 4c 01 	lds	r24, 0x014C
    1fda:	90 91 4d 01 	lds	r25, 0x014D
    1fde:	a0 91 4e 01 	lds	r26, 0x014E
    1fe2:	b0 91 4f 01 	lds	r27, 0x014F
    1fe6:	28 0f       	add	r18, r24
    1fe8:	39 1f       	adc	r19, r25
    1fea:	4a 1f       	adc	r20, r26
    1fec:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    1fee:	20 93 54 01 	sts	0x0154, r18
    1ff2:	30 93 55 01 	sts	0x0155, r19
    1ff6:	40 93 56 01 	sts	0x0156, r20
    1ffa:	50 93 57 01 	sts	0x0157, r21
  if(control_value < 0){
    1ffe:	57 ff       	sbrs	r21, 7
    2000:	09 c0       	rjmp	.+18     	; 0x2014 <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    2002:	10 92 58 01 	sts	0x0158, r1
    2006:	10 92 59 01 	sts	0x0159, r1
    200a:	10 92 5a 01 	sts	0x015A, r1
    200e:	10 92 5b 01 	sts	0x015B, r1
    2012:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    2014:	20 93 58 01 	sts	0x0158, r18
    2018:	30 93 59 01 	sts	0x0159, r19
    201c:	40 93 5a 01 	sts	0x015A, r20
    2020:	50 93 5b 01 	sts	0x015B, r21
    2024:	08 95       	ret

00002026 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    2026:	60 91 1c 01 	lds	r22, 0x011C
    202a:	70 91 1d 01 	lds	r23, 0x011D
  return PID.Input.Kp;
}
    202e:	80 91 1e 01 	lds	r24, 0x011E
    2032:	90 91 1f 01 	lds	r25, 0x011F
    2036:	08 95       	ret

00002038 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2038:	60 91 20 01 	lds	r22, 0x0120
    203c:	70 91 21 01 	lds	r23, 0x0121
  return PID.Input.Ki;
}
    2040:	80 91 22 01 	lds	r24, 0x0122
    2044:	90 91 23 01 	lds	r25, 0x0123
    2048:	08 95       	ret

0000204a <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    204a:	60 91 24 01 	lds	r22, 0x0124
    204e:	70 91 25 01 	lds	r23, 0x0125
  return PID.Input.Kd;
}
    2052:	80 91 26 01 	lds	r24, 0x0126
    2056:	90 91 27 01 	lds	r25, 0x0127
    205a:	08 95       	ret

0000205c <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    205c:	60 91 28 01 	lds	r22, 0x0128
    2060:	70 91 29 01 	lds	r23, 0x0129
  return PID.Input.SetPoint;
}
    2064:	80 91 2a 01 	lds	r24, 0x012A
    2068:	90 91 2b 01 	lds	r25, 0x012B
    206c:	08 95       	ret

0000206e <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    206e:	60 91 2c 01 	lds	r22, 0x012C
    2072:	70 91 2d 01 	lds	r23, 0x012D
  return PID.Input.ProcessValue;
}
    2076:	80 91 2e 01 	lds	r24, 0x012E
    207a:	90 91 2f 01 	lds	r25, 0x012F
    207e:	08 95       	ret

00002080 <PID_Get_PError>:

signed long PID_Get_PError(void){
    2080:	60 91 30 01 	lds	r22, 0x0130
    2084:	70 91 31 01 	lds	r23, 0x0131
  return PID.Error.PError;
}
    2088:	80 91 32 01 	lds	r24, 0x0132
    208c:	90 91 33 01 	lds	r25, 0x0133
    2090:	08 95       	ret

00002092 <PID_Get_IError>:

signed long PID_Get_IError(void){
    2092:	60 91 38 01 	lds	r22, 0x0138
    2096:	70 91 39 01 	lds	r23, 0x0139
  return PID.Error.IError;
}
    209a:	80 91 3a 01 	lds	r24, 0x013A
    209e:	90 91 3b 01 	lds	r25, 0x013B
    20a2:	08 95       	ret

000020a4 <PID_Get_DError>:

signed long PID_Get_DError(void){
    20a4:	60 91 34 01 	lds	r22, 0x0134
    20a8:	70 91 35 01 	lds	r23, 0x0135
  return PID.Error.DError;
}
    20ac:	80 91 36 01 	lds	r24, 0x0136
    20b0:	90 91 37 01 	lds	r25, 0x0137
    20b4:	08 95       	ret

000020b6 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    20b6:	60 91 3c 01 	lds	r22, 0x013C
    20ba:	70 91 3d 01 	lds	r23, 0x013D
  return PID.Error.IErrorLimit;
}
    20be:	80 91 3e 01 	lds	r24, 0x013E
    20c2:	90 91 3f 01 	lds	r25, 0x013F
    20c6:	08 95       	ret

000020c8 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    20c8:	60 91 44 01 	lds	r22, 0x0144
    20cc:	70 91 45 01 	lds	r23, 0x0145
  return PID.Products.PError;
}
    20d0:	80 91 46 01 	lds	r24, 0x0146
    20d4:	90 91 47 01 	lds	r25, 0x0147
    20d8:	08 95       	ret

000020da <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    20da:	60 91 48 01 	lds	r22, 0x0148
    20de:	70 91 49 01 	lds	r23, 0x0149
  return PID.Products.IError;
}
    20e2:	80 91 4a 01 	lds	r24, 0x014A
    20e6:	90 91 4b 01 	lds	r25, 0x014B
    20ea:	08 95       	ret

000020ec <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    20ec:	60 91 4c 01 	lds	r22, 0x014C
    20f0:	70 91 4d 01 	lds	r23, 0x014D
  return PID.Products.DError;
}
    20f4:	80 91 4e 01 	lds	r24, 0x014E
    20f8:	90 91 4f 01 	lds	r25, 0x014F
    20fc:	08 95       	ret

000020fe <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    20fe:	60 91 50 01 	lds	r22, 0x0150
    2102:	70 91 51 01 	lds	r23, 0x0151
  return PID.Products.ScaleFact;
}
    2106:	80 91 52 01 	lds	r24, 0x0152
    210a:	90 91 53 01 	lds	r25, 0x0153
    210e:	08 95       	ret

00002110 <PID_Get_Output>:


signed long PID_Get_Output(void){
    2110:	60 91 54 01 	lds	r22, 0x0154
    2114:	70 91 55 01 	lds	r23, 0x0155
  return PID.Output;
}
    2118:	80 91 56 01 	lds	r24, 0x0156
    211c:	90 91 57 01 	lds	r25, 0x0157
    2120:	08 95       	ret

00002122 <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    2122:	60 91 58 01 	lds	r22, 0x0158
    2126:	70 91 59 01 	lds	r23, 0x0159
  return PID.OutputNonNegative;
}
    212a:	80 91 5a 01 	lds	r24, 0x015A
    212e:	90 91 5b 01 	lds	r25, 0x015B
    2132:	08 95       	ret

00002134 <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    2134:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <PID_Struct_Init>
}
    2138:	08 95       	ret

0000213a <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2152:	60 93 1c 01 	sts	0x011C, r22
    2156:	70 93 1d 01 	sts	0x011D, r23
    215a:	80 93 1e 01 	sts	0x011E, r24
    215e:	90 93 1f 01 	sts	0x011F, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2162:	20 93 20 01 	sts	0x0120, r18
    2166:	30 93 21 01 	sts	0x0121, r19
    216a:	40 93 22 01 	sts	0x0122, r20
    216e:	50 93 23 01 	sts	0x0123, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2172:	e0 92 24 01 	sts	0x0124, r14
    2176:	f0 92 25 01 	sts	0x0125, r15
    217a:	00 93 26 01 	sts	0x0126, r16
    217e:	10 93 27 01 	sts	0x0127, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    2182:	a0 92 3c 01 	sts	0x013C, r10
    2186:	b0 92 3d 01 	sts	0x013D, r11
    218a:	c0 92 3e 01 	sts	0x013E, r12
    218e:	d0 92 3f 01 	sts	0x013F, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    2192:	8d 85       	ldd	r24, Y+13	; 0x0d
    2194:	9e 85       	ldd	r25, Y+14	; 0x0e
    2196:	af 85       	ldd	r26, Y+15	; 0x0f
    2198:	b8 89       	ldd	r27, Y+16	; 0x10
    219a:	80 93 50 01 	sts	0x0150, r24
    219e:	90 93 51 01 	sts	0x0151, r25
    21a2:	a0 93 52 01 	sts	0x0152, r26
    21a6:	b0 93 53 01 	sts	0x0153, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    21aa:	10 92 38 01 	sts	0x0138, r1
    21ae:	10 92 39 01 	sts	0x0139, r1
    21b2:	10 92 3a 01 	sts	0x013A, r1
    21b6:	10 92 3b 01 	sts	0x013B, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	bf 90       	pop	r11
    21cc:	af 90       	pop	r10
    21ce:	08 95       	ret

000021d0 <__mulsi3>:
    21d0:	62 9f       	mul	r22, r18
    21d2:	d0 01       	movw	r26, r0
    21d4:	73 9f       	mul	r23, r19
    21d6:	f0 01       	movw	r30, r0
    21d8:	82 9f       	mul	r24, r18
    21da:	e0 0d       	add	r30, r0
    21dc:	f1 1d       	adc	r31, r1
    21de:	64 9f       	mul	r22, r20
    21e0:	e0 0d       	add	r30, r0
    21e2:	f1 1d       	adc	r31, r1
    21e4:	92 9f       	mul	r25, r18
    21e6:	f0 0d       	add	r31, r0
    21e8:	83 9f       	mul	r24, r19
    21ea:	f0 0d       	add	r31, r0
    21ec:	74 9f       	mul	r23, r20
    21ee:	f0 0d       	add	r31, r0
    21f0:	65 9f       	mul	r22, r21
    21f2:	f0 0d       	add	r31, r0
    21f4:	99 27       	eor	r25, r25
    21f6:	72 9f       	mul	r23, r18
    21f8:	b0 0d       	add	r27, r0
    21fa:	e1 1d       	adc	r30, r1
    21fc:	f9 1f       	adc	r31, r25
    21fe:	63 9f       	mul	r22, r19
    2200:	b0 0d       	add	r27, r0
    2202:	e1 1d       	adc	r30, r1
    2204:	f9 1f       	adc	r31, r25
    2206:	bd 01       	movw	r22, r26
    2208:	cf 01       	movw	r24, r30
    220a:	11 24       	eor	r1, r1
    220c:	08 95       	ret

0000220e <__udivmodsi4>:
    220e:	a1 e2       	ldi	r26, 0x21	; 33
    2210:	1a 2e       	mov	r1, r26
    2212:	aa 1b       	sub	r26, r26
    2214:	bb 1b       	sub	r27, r27
    2216:	fd 01       	movw	r30, r26
    2218:	0d c0       	rjmp	.+26     	; 0x2234 <__udivmodsi4_ep>

0000221a <__udivmodsi4_loop>:
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	ee 1f       	adc	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	a2 17       	cp	r26, r18
    2224:	b3 07       	cpc	r27, r19
    2226:	e4 07       	cpc	r30, r20
    2228:	f5 07       	cpc	r31, r21
    222a:	20 f0       	brcs	.+8      	; 0x2234 <__udivmodsi4_ep>
    222c:	a2 1b       	sub	r26, r18
    222e:	b3 0b       	sbc	r27, r19
    2230:	e4 0b       	sbc	r30, r20
    2232:	f5 0b       	sbc	r31, r21

00002234 <__udivmodsi4_ep>:
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	1a 94       	dec	r1
    223e:	69 f7       	brne	.-38     	; 0x221a <__udivmodsi4_loop>
    2240:	60 95       	com	r22
    2242:	70 95       	com	r23
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	cf 01       	movw	r24, r30
    2250:	08 95       	ret

00002252 <__divmodsi4>:
    2252:	97 fb       	bst	r25, 7
    2254:	09 2e       	mov	r0, r25
    2256:	05 26       	eor	r0, r21
    2258:	0e d0       	rcall	.+28     	; 0x2276 <__divmodsi4_neg1>
    225a:	57 fd       	sbrc	r21, 7
    225c:	04 d0       	rcall	.+8      	; 0x2266 <__divmodsi4_neg2>
    225e:	d7 df       	rcall	.-82     	; 0x220e <__udivmodsi4>
    2260:	0a d0       	rcall	.+20     	; 0x2276 <__divmodsi4_neg1>
    2262:	00 1c       	adc	r0, r0
    2264:	38 f4       	brcc	.+14     	; 0x2274 <__divmodsi4_exit>

00002266 <__divmodsi4_neg2>:
    2266:	50 95       	com	r21
    2268:	40 95       	com	r20
    226a:	30 95       	com	r19
    226c:	21 95       	neg	r18
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	4f 4f       	sbci	r20, 0xFF	; 255
    2272:	5f 4f       	sbci	r21, 0xFF	; 255

00002274 <__divmodsi4_exit>:
    2274:	08 95       	ret

00002276 <__divmodsi4_neg1>:
    2276:	f6 f7       	brtc	.-4      	; 0x2274 <__divmodsi4_exit>
    2278:	90 95       	com	r25
    227a:	80 95       	com	r24
    227c:	70 95       	com	r23
    227e:	61 95       	neg	r22
    2280:	7f 4f       	sbci	r23, 0xFF	; 255
    2282:	8f 4f       	sbci	r24, 0xFF	; 255
    2284:	9f 4f       	sbci	r25, 0xFF	; 255
    2286:	08 95       	ret

00002288 <_exit>:
    2288:	f8 94       	cli

0000228a <__stop_program>:
    228a:	ff cf       	rjmp	.-2      	; 0x228a <__stop_program>
