
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800112  00800112  000003a2  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b8  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057d  00000000  00000000  0000059a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ca  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000519  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000026e  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 33       	cpi	r26, 0x3F	; 63
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "debug.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  Debug_Init();
  aa:	0e 94 75 01 	call	0x2ea	; 0x2ea <Debug_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	cc e2       	ldi	r28, 0x2C	; 44
  b0:	d1 e0       	ldi	r29, 0x01	; 1
  
  while(1){
    
	Debug_Tx_Byte(0xAA);
  b2:	8a ea       	ldi	r24, 0xAA	; 170
  b4:	0e 94 1a 01 	call	0x234	; 0x234 <Debug_Tx_Byte>
  b8:	80 e1       	ldi	r24, 0x10	; 16
  ba:	97 e2       	ldi	r25, 0x27	; 39
  bc:	fe 01       	movw	r30, r28
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x18>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c4:	d9 f7       	brne	.-10     	; 0xbc <main+0x16>
  c6:	f5 cf       	rjmp	.-22     	; 0xb2 <main+0xc>

000000c8 <Debug_Struct_Init>:
}debug_t;

debug_t debug;

void Debug_Struct_Init(void){
  debug.error=0;
  c8:	10 92 12 01 	sts	0x0112, r1
  debug.datareg=0;
  cc:	10 92 13 01 	sts	0x0113, r1
  debug.databsy=1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 14 01 	sts	0x0114, r24
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  da:	fc 01       	movw	r30, r24
  dc:	ee 5e       	subi	r30, 0xEE	; 238
  de:	fe 4f       	sbci	r31, 0xFE	; 254
  e0:	13 82       	std	Z+3, r1	; 0x03
  e2:	01 96       	adiw	r24, 0x01	; 1

void Debug_Struct_Init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
  e4:	80 32       	cpi	r24, 0x20	; 32
  e6:	91 05       	cpc	r25, r1
  e8:	c1 f7       	brne	.-16     	; 0xda <Debug_Struct_Init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  ea:	10 92 35 01 	sts	0x0135, r1
  ee:	e6 e3       	ldi	r30, 0x36	; 54
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
  f2:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	ee 33       	cpi	r30, 0x3E	; 62
  f8:	f8 07       	cpc	r31, r24
  fa:	d9 f7       	brne	.-10     	; 0xf2 <Debug_Struct_Init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
  fc:	10 82       	st	Z, r1
}
  fe:	08 95       	ret

00000100 <Debug_Timings_Init>:
  TIMSK0=0x00;
  TIFR0 =0xff;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCCR1A=0x00;
 100:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=0x00;
 104:	10 92 81 00 	sts	0x0081, r1
  TCCR1C=0x00;
 108:	10 92 82 00 	sts	0x0082, r1
  TIMSK1=0x00;
 10c:	10 92 6f 00 	sts	0x006F, r1
  TIFR1 =0xff;
 110:	8f ef       	ldi	r24, 0xFF	; 255
 112:	86 bb       	out	0x16, r24	; 22
  sei();
  #define ISR_PCINT_VECT PCINT1_vect
  #endif
  
  #ifdef DEBUG_RX_DDRD
  PCICR |=(1<<PCIE2);
 114:	e8 e6       	ldi	r30, 0x68	; 104
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 83       	st	Z, r24
  PCMSK2|=(1<<DEBUG_RX_bp);
 11e:	ed e6       	ldi	r30, 0x6D	; 109
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 62       	ori	r24, 0x20	; 32
 126:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF2);
 128:	da 9a       	sbi	0x1b, 2	; 27
  sei();
 12a:	78 94       	sei
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
 12c:	08 95       	ret

0000012e <Debug_Timer_Start>:
  TIMSK0=(1<<TOIE0);
  #define TIMER_OVF_VECT TIMER0_OVF_vect
  #endif

  #ifdef DEBUG_USE_TIMER1
  TIFR1 =0xff;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	86 bb       	out	0x16, r24	; 22
  TIMSK1=0x00;
 132:	ef e6       	ldi	r30, 0x6F	; 111
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	10 82       	st	Z, r1
  TCNT1 =53000;
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	9f ec       	ldi	r25, 0xCF	; 207
 13c:	90 93 85 00 	sts	0x0085, r25
 140:	80 93 84 00 	sts	0x0084, r24
  TCCR1B=(1<<CS10);
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 81 00 	sts	0x0081, r24
  TIFR1 =(1<<TOV1);
 14a:	86 bb       	out	0x16, r24	; 22
  TIMSK1=(1<<TOIE1);
 14c:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
 14e:	08 95       	ret

00000150 <Debug_Timer_Stop>:
  TCCR0B=0;
  TCNT0 =0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TIMSK1=0;
 150:	10 92 6f 00 	sts	0x006F, r1
  TCCR1B=0;
 154:	10 92 81 00 	sts	0x0081, r1
  TCNT1 =0;
 158:	10 92 85 00 	sts	0x0085, r1
 15c:	10 92 84 00 	sts	0x0084, r1
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
 160:	08 95       	ret

00000162 <Debug_GPIO_Init>:

void Debug_GPIO_Init(void){
  DEBUG_TX_DDR   |= (1<<DEBUG_TX_bp);
 162:	56 9a       	sbi	0x0a, 6	; 10
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 164:	5e 9a       	sbi	0x0b, 6	; 11
  DEBUG_RX_DDR   &=~(1<<DEBUG_RX_bp);
 166:	55 98       	cbi	0x0a, 5	; 10
  DEBUG_RX_PORT  |= (1<<DEBUG_RX_bp);
 168:	5d 9a       	sbi	0x0b, 5	; 11
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR |= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
 16a:	08 95       	ret

0000016c <Debug_Tx_Pin_High>:

void Debug_Tx_Pin_High(void){
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 16c:	5e 9a       	sbi	0x0b, 6	; 11
} 
 16e:	08 95       	ret

00000170 <Debug_Tx_Pin_Low>:

void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
 170:	5e 98       	cbi	0x0b, 6	; 11
}
 172:	08 95       	ret

00000174 <Debug_Tx_Pin_Set_State>:

void Debug_Tx_Pin_Set_State(uint8_t pin_state){
  if(pin_state==1){
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	11 f4       	brne	.+4      	; 0x17c <Debug_Tx_Pin_Set_State+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void Debug_Tx_Pin_High(void){
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 178:	5e 9a       	sbi	0x0b, 6	; 11
 17a:	08 95       	ret
} 

void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
 17c:	5e 98       	cbi	0x0b, 6	; 11
 17e:	08 95       	ret

00000180 <Debug_Rx_Pin_Get_State>:
}



uint8_t Debug_Rx_Pin_Get_State(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
 180:	89 b1       	in	r24, 0x09	; 9
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e0       	ldi	r18, 0x05	; 5
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	2a 95       	dec	r18
 18c:	e1 f7       	brne	.-8      	; 0x186 <Debug_Rx_Pin_Get_State+0x6>
    return 1;
  }else{
    return 0;
  }
}
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	08 95       	ret

00000192 <Debug_Delay>:

void Debug_Delay(uint16_t val){
 192:	9c 01       	movw	r18, r24
  while(TCNT0<val){}
  TCCR0B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 194:	10 92 85 00 	sts	0x0085, r1
 198:	10 92 84 00 	sts	0x0084, r1
  TCCR1B=(1<<CS10);
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 81 00 	sts	0x0081, r24
  while(TCNT1<val){}
 1a2:	80 91 84 00 	lds	r24, 0x0084
 1a6:	90 91 85 00 	lds	r25, 0x0085
 1aa:	82 17       	cp	r24, r18
 1ac:	93 07       	cpc	r25, r19
 1ae:	c8 f3       	brcs	.-14     	; 0x1a2 <Debug_Delay+0x10>
  TCCR1B=0;
 1b0:	10 92 81 00 	sts	0x0081, r1
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
 1b4:	08 95       	ret

000001b6 <Debug_Delay_Tx_Bits>:
    #ifdef DEBUG_BAUD_RATE_19200
    Debug_Delay(TIM1_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM1_BAUD_38400[0]);
 1b6:	20 91 0c 01 	lds	r18, 0x010C
 1ba:	30 91 0d 01 	lds	r19, 0x010D
  while(TCNT0<val){}
  TCCR0B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 1be:	10 92 85 00 	sts	0x0085, r1
 1c2:	10 92 84 00 	sts	0x0084, r1
  TCCR1B=(1<<CS10);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 81 00 	sts	0x0081, r24
  while(TCNT1<val){}
 1cc:	80 91 84 00 	lds	r24, 0x0084
 1d0:	90 91 85 00 	lds	r25, 0x0085
 1d4:	82 17       	cp	r24, r18
 1d6:	93 07       	cpc	r25, r19
 1d8:	c8 f3       	brcs	.-14     	; 0x1cc <Debug_Delay_Tx_Bits+0x16>
  TCCR1B=0;
 1da:	10 92 81 00 	sts	0x0081, r1
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
 1de:	08 95       	ret

000001e0 <Debug_Delay_Index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    Debug_Delay(TIM1_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM1_BAUD_38400[1]);
 1e0:	20 91 0e 01 	lds	r18, 0x010E
 1e4:	30 91 0f 01 	lds	r19, 0x010F
  while(TCNT0<val){}
  TCCR0B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 1e8:	10 92 85 00 	sts	0x0085, r1
 1ec:	10 92 84 00 	sts	0x0084, r1
  TCCR1B=(1<<CS10);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 81 00 	sts	0x0081, r24
  while(TCNT1<val){}
 1f6:	80 91 84 00 	lds	r24, 0x0084
 1fa:	90 91 85 00 	lds	r25, 0x0085
 1fe:	82 17       	cp	r24, r18
 200:	93 07       	cpc	r25, r19
 202:	c8 f3       	brcs	.-14     	; 0x1f6 <Debug_Delay_Index_1+0x16>
  TCCR1B=0;
 204:	10 92 81 00 	sts	0x0081, r1
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
 208:	08 95       	ret

0000020a <Debug_Delay_Index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    Debug_Delay(TIM1_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM1_BAUD_38400[2]);
 20a:	20 91 10 01 	lds	r18, 0x0110
 20e:	30 91 11 01 	lds	r19, 0x0111
  while(TCNT0<val){}
  TCCR0B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 212:	10 92 85 00 	sts	0x0085, r1
 216:	10 92 84 00 	sts	0x0084, r1
  TCCR1B=(1<<CS10);
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 81 00 	sts	0x0081, r24
  while(TCNT1<val){}
 220:	80 91 84 00 	lds	r24, 0x0084
 224:	90 91 85 00 	lds	r25, 0x0085
 228:	82 17       	cp	r24, r18
 22a:	93 07       	cpc	r25, r19
 22c:	c8 f3       	brcs	.-14     	; 0x220 <Debug_Delay_Index_2+0x16>
  TCCR1B=0;
 22e:	10 92 81 00 	sts	0x0081, r1
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
 232:	08 95       	ret

00000234 <Debug_Tx_Byte>:


void Debug_Tx_Byte(uint8_t val){
 234:	df 93       	push	r29
 236:	cf 93       	push	r28
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2a 97       	sbiw	r28, 0x0a	; 10
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
 248:	fe 01       	movw	r30, r28
 24a:	31 96       	adiw	r30, 0x01	; 1
 24c:	9a e0       	ldi	r25, 0x0A	; 10
 24e:	df 01       	movw	r26, r30
 250:	1d 92       	st	X+, r1
 252:	9a 95       	dec	r25
 254:	e9 f7       	brne	.-6      	; 0x250 <Debug_Tx_Byte+0x1c>
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	9a 87       	std	Y+10, r25	; 0x0a
 25a:	fe 01       	movw	r30, r28
 25c:	32 96       	adiw	r30, 0x02	; 2
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 262:	48 2f       	mov	r20, r24
 264:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
 266:	61 e0       	ldi	r22, 0x01	; 1


void Debug_Tx_Byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
 268:	ca 01       	movw	r24, r20
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <Debug_Tx_Byte+0x3e>
 26e:	95 95       	asr	r25
 270:	87 95       	ror	r24
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <Debug_Tx_Byte+0x3a>
 276:	80 ff       	sbrs	r24, 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <Debug_Tx_Byte+0x4a>
	  buf[i+1]=1;
 27a:	60 83       	st	Z, r22
 27c:	01 c0       	rjmp	.+2      	; 0x280 <Debug_Tx_Byte+0x4c>
	}else{
	  buf[i+1]=0;
 27e:	10 82       	st	Z, r1
 280:	2f 5f       	subi	r18, 0xFF	; 255
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	31 96       	adiw	r30, 0x01	; 1
}


void Debug_Tx_Byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
 286:	28 30       	cpi	r18, 0x08	; 8
 288:	31 05       	cpc	r19, r1
 28a:	71 f7       	brne	.-36     	; 0x268 <Debug_Tx_Byte+0x34>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
 28c:	6f b7       	in	r22, 0x3f	; 63
  cli();
 28e:	f8 94       	cli
    #ifdef DEBUG_BAUD_RATE_19200
    Debug_Delay(TIM1_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    Debug_Delay(TIM1_BAUD_38400[0]);
 290:	20 91 0c 01 	lds	r18, 0x010C
 294:	30 91 0d 01 	lds	r19, 0x010D
 298:	fe 01       	movw	r30, r28
 29a:	31 96       	adiw	r30, 0x01	; 1
  TCCR0B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
  TCCR1B=(1<<CS10);
 29c:	71 e0       	ldi	r23, 0x01	; 1
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 29e:	ae 01       	movw	r20, r28
 2a0:	45 5f       	subi	r20, 0xF5	; 245
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
}

void Debug_Tx_Pin_Set_State(uint8_t pin_state){
  if(pin_state==1){
 2a4:	80 81       	ld	r24, Z
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	11 f4       	brne	.+4      	; 0x2ae <Debug_Tx_Byte+0x7a>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void Debug_Tx_Pin_High(void){
  DEBUG_TX_PORT  |= (1<<DEBUG_TX_bp);
 2aa:	5e 9a       	sbi	0x0b, 6	; 11
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <Debug_Tx_Byte+0x7c>
} 

void Debug_Tx_Pin_Low(void){
  DEBUG_TX_PORT  &=~(1<<DEBUG_TX_bp);
 2ae:	5e 98       	cbi	0x0b, 6	; 11
  while(TCNT0<val){}
  TCCR0B=0;
  #endif
  
  #ifdef DEBUG_USE_TIMER1
  TCNT1=0;
 2b0:	10 92 85 00 	sts	0x0085, r1
 2b4:	10 92 84 00 	sts	0x0084, r1
  TCCR1B=(1<<CS10);
 2b8:	70 93 81 00 	sts	0x0081, r23
  while(TCNT1<val){}
 2bc:	80 91 84 00 	lds	r24, 0x0084
 2c0:	90 91 85 00 	lds	r25, 0x0085
 2c4:	82 17       	cp	r24, r18
 2c6:	93 07       	cpc	r25, r19
 2c8:	c8 f3       	brcs	.-14     	; 0x2bc <Debug_Tx_Byte+0x88>
  TCCR1B=0;
 2ca:	10 92 81 00 	sts	0x0081, r1
 2ce:	31 96       	adiw	r30, 0x01	; 1
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
 2d0:	e4 17       	cp	r30, r20
 2d2:	f5 07       	cpc	r31, r21
 2d4:	39 f7       	brne	.-50     	; 0x2a4 <Debug_Tx_Byte+0x70>
    Debug_Tx_Pin_Set_State(buf[i]);
	Debug_Delay_Tx_Bits();
  }
  SREG=sreg;
 2d6:	6f bf       	out	0x3f, r22	; 63
}
 2d8:	2a 96       	adiw	r28, 0x0a	; 10
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
 2e4:	cf 91       	pop	r28
 2e6:	df 91       	pop	r29
 2e8:	08 95       	ret

000002ea <Debug_Init>:
}*/
  
  
  
void Debug_Init(void){
  Debug_Struct_Init();
 2ea:	0e 94 64 00 	call	0xc8	; 0xc8 <Debug_Struct_Init>
  Debug_Timings_Init();
 2ee:	0e 94 80 00 	call	0x100	; 0x100 <Debug_Timings_Init>
  Debug_GPIO_Init();
 2f2:	0e 94 b1 00 	call	0x162	; 0x162 <Debug_GPIO_Init>
}
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
