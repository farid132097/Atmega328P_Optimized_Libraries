
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000270c  000027a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000270c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  0080011a  0080011a  000027ba  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000027ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000012b9  00000000  00000000  0000281a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e5b  00000000  00000000  00003ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d0  00000000  00000000  0000792e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e33  00000000  00000000  00007efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000890  00000000  00000000  00009d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000153e  00000000  00000000  0000a5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015fe  00000000  00000000  0000bb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e0       	ldi	r30, 0x0C	; 12
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3b       	cpi	r26, 0xB0	; 176
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 84 13 	jmp	0x2708	; 0x2708 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Timebase_DownCounter_SS_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 57 05 	call	0xaae	; 0xaae <Timebase_Timer_Await_SubSeconds>
	UART_Transmit_Text("Timebase\r\n");
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     120:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     122:	0e 94 88 12 	call	0x2510	; 0x2510 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     132:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     13c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     13e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 47 13 	call	0x268e	; 0x268e <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     19e:	20 93 c4 00 	sts	0x00C4, r18
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
}
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
}
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
  sei();
     1d2:	78 94       	sei
}
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1d6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1e0:	90 93 c6 00 	sts	0x00C6, r25
}
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1f0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
    val=UDR0;
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     220:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     22e:	80 91 24 01 	lds	r24, 0x0124
}
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     234:	10 92 24 01 	sts	0x0124, r1
}
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     29c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2d4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     34a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3ba:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3be:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3fe:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 47 13 	call	0x268e	; 0x268e <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 47 13 	call	0x268e	; 0x268e <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
      i++;
     440:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     44c:	b0 92 23 01 	sts	0x0123, r11
  }
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     47c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
  UDR0=val;
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
}
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
}
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     50a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5e0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
  sei();
     5e8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSeconds = 0;
     62c:	10 92 54 01 	sts	0x0154, r1
     630:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     634:	10 92 55 01 	sts	0x0155, r1
     638:	10 92 56 01 	sts	0x0156, r1
     63c:	10 92 57 01 	sts	0x0157, r1
     640:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     644:	10 92 4f 01 	sts	0x014F, r1
     648:	10 92 50 01 	sts	0x0150, r1
     64c:	10 92 51 01 	sts	0x0151, r1
     650:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     654:	10 92 59 01 	sts	0x0159, r1
     658:	10 92 5a 01 	sts	0x015A, r1
     65c:	10 92 5b 01 	sts	0x015B, r1
     660:	10 92 5c 01 	sts	0x015C, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     664:	10 92 5d 01 	sts	0x015D, r1
     668:	10 92 5e 01 	sts	0x015E, r1
     66c:	10 92 5f 01 	sts	0x015F, r1
     670:	10 92 60 01 	sts	0x0160, r1
	Timebase->Time.Status = 0;
     674:	10 92 61 01 	sts	0x0161, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     678:	10 92 62 01 	sts	0x0162, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     67c:	10 92 63 01 	sts	0x0163, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     680:	10 92 7d 01 	sts	0x017D, r1
    Timebase->UpCounter[i].EndValue = 0;
     684:	10 92 7e 01 	sts	0x017E, r1
     688:	10 92 7f 01 	sts	0x017F, r1
     68c:	10 92 80 01 	sts	0x0180, r1
     690:	10 92 81 01 	sts	0x0181, r1
    Timebase->UpCounter[i].Target = 0;
     694:	10 92 82 01 	sts	0x0182, r1
     698:	10 92 83 01 	sts	0x0183, r1
     69c:	10 92 84 01 	sts	0x0184, r1
     6a0:	10 92 85 01 	sts	0x0185, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6a4:	10 92 86 01 	sts	0x0186, r1
     6a8:	10 92 87 01 	sts	0x0187, r1
     6ac:	10 92 88 01 	sts	0x0188, r1
     6b0:	10 92 89 01 	sts	0x0189, r1
    Timebase->UpCounter[i].Value = 0;
     6b4:	10 92 8a 01 	sts	0x018A, r1
     6b8:	10 92 8b 01 	sts	0x018B, r1
     6bc:	10 92 8c 01 	sts	0x018C, r1
     6c0:	10 92 8d 01 	sts	0x018D, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6c4:	10 92 8e 01 	sts	0x018E, r1
     6c8:	10 92 8f 01 	sts	0x018F, r1
     6cc:	10 92 90 01 	sts	0x0190, r1
     6d0:	10 92 91 01 	sts	0x0191, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6d4:	10 92 64 01 	sts	0x0164, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6d8:	10 92 65 01 	sts	0x0165, r1
     6dc:	10 92 66 01 	sts	0x0166, r1
     6e0:	10 92 67 01 	sts	0x0167, r1
     6e4:	10 92 68 01 	sts	0x0168, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     6e8:	10 92 69 01 	sts	0x0169, r1
     6ec:	10 92 6a 01 	sts	0x016A, r1
     6f0:	10 92 6b 01 	sts	0x016B, r1
     6f4:	10 92 6c 01 	sts	0x016C, r1
    Timebase->UpCounterSS[i].Target = 0;
     6f8:	10 92 6d 01 	sts	0x016D, r1
     6fc:	10 92 6e 01 	sts	0x016E, r1
     700:	10 92 6f 01 	sts	0x016F, r1
     704:	10 92 70 01 	sts	0x0170, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     708:	10 92 71 01 	sts	0x0171, r1
     70c:	10 92 72 01 	sts	0x0172, r1
     710:	10 92 73 01 	sts	0x0173, r1
     714:	10 92 74 01 	sts	0x0174, r1
    Timebase->UpCounterSS[i].Value = 0;
     718:	10 92 75 01 	sts	0x0175, r1
     71c:	10 92 76 01 	sts	0x0176, r1
     720:	10 92 77 01 	sts	0x0177, r1
     724:	10 92 78 01 	sts	0x0178, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     728:	10 92 79 01 	sts	0x0179, r1
     72c:	10 92 7a 01 	sts	0x017A, r1
     730:	10 92 7b 01 	sts	0x017B, r1
     734:	10 92 7c 01 	sts	0x017C, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     738:	10 92 a3 01 	sts	0x01A3, r1
    Timebase->DownCounter[i].EndValue = 0;
     73c:	10 92 a4 01 	sts	0x01A4, r1
     740:	10 92 a5 01 	sts	0x01A5, r1
     744:	10 92 a6 01 	sts	0x01A6, r1
     748:	10 92 a7 01 	sts	0x01A7, r1
    Timebase->DownCounter[i].Value = 0;
     74c:	10 92 a8 01 	sts	0x01A8, r1
     750:	10 92 a9 01 	sts	0x01A9, r1
     754:	10 92 aa 01 	sts	0x01AA, r1
     758:	10 92 ab 01 	sts	0x01AB, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     75c:	10 92 ac 01 	sts	0x01AC, r1
     760:	10 92 ad 01 	sts	0x01AD, r1
     764:	10 92 ae 01 	sts	0x01AE, r1
     768:	10 92 af 01 	sts	0x01AF, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     76c:	10 92 92 01 	sts	0x0192, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     770:	10 92 93 01 	sts	0x0193, r1
     774:	10 92 94 01 	sts	0x0194, r1
     778:	10 92 95 01 	sts	0x0195, r1
     77c:	10 92 96 01 	sts	0x0196, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     780:	10 92 97 01 	sts	0x0197, r1
     784:	10 92 98 01 	sts	0x0198, r1
     788:	10 92 99 01 	sts	0x0199, r1
     78c:	10 92 9a 01 	sts	0x019A, r1
    Timebase->DownCounterSS[i].Value = 0;
     790:	10 92 9b 01 	sts	0x019B, r1
     794:	10 92 9c 01 	sts	0x019C, r1
     798:	10 92 9d 01 	sts	0x019D, r1
     79c:	10 92 9e 01 	sts	0x019E, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7a0:	10 92 9f 01 	sts	0x019F, r1
     7a4:	10 92 a0 01 	sts	0x01A0, r1
     7a8:	10 92 a1 01 	sts	0x01A1, r1
     7ac:	10 92 a2 01 	sts	0x01A2, r1
  }
  #endif
  
}
     7b0:	08 95       	ret

000007b2 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7b2:	7f 92       	push	r7
     7b4:	8f 92       	push	r8
     7b6:	9f 92       	push	r9
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	2a 97       	sbiw	r28, 0x0a	; 10
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     7de:	c0 90 49 01 	lds	r12, 0x0149
     7e2:	d0 90 4a 01 	lds	r13, 0x014A
     7e6:	f6 01       	movw	r30, r12
     7e8:	80 81       	ld	r24, Z
     7ea:	80 ff       	sbrs	r24, 0
     7ec:	31 c0       	rjmp	.+98     	; 0x850 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     7ee:	01 30       	cpi	r16, 0x01	; 1
     7f0:	11 05       	cpc	r17, r1
     7f2:	11 f4       	brne	.+4      	; 0x7f8 <Timebase_Timer_Config+0x46>
     7f4:	96 e0       	ldi	r25, 0x06	; 6
     7f6:	19 c0       	rjmp	.+50     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     7f8:	02 30       	cpi	r16, 0x02	; 2
     7fa:	11 05       	cpc	r17, r1
     7fc:	11 f4       	brne	.+4      	; 0x802 <Timebase_Timer_Config+0x50>
     7fe:	95 e0       	ldi	r25, 0x05	; 5
     800:	14 c0       	rjmp	.+40     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     802:	04 30       	cpi	r16, 0x04	; 4
     804:	11 05       	cpc	r17, r1
     806:	11 f4       	brne	.+4      	; 0x80c <Timebase_Timer_Config+0x5a>
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	0f c0       	rjmp	.+30     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     80c:	08 30       	cpi	r16, 0x08	; 8
     80e:	11 05       	cpc	r17, r1
     810:	11 f4       	brne	.+4      	; 0x816 <Timebase_Timer_Config+0x64>
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0a c0       	rjmp	.+20     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     816:	00 31       	cpi	r16, 0x10	; 16
     818:	11 05       	cpc	r17, r1
     81a:	11 f4       	brne	.+4      	; 0x820 <Timebase_Timer_Config+0x6e>
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	05 c0       	rjmp	.+10     	; 0x82a <Timebase_Timer_Config+0x78>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	00 32       	cpi	r16, 0x20	; 32
     824:	11 05       	cpc	r17, r1
     826:	09 f4       	brne	.+2      	; 0x82a <Timebase_Timer_Config+0x78>
     828:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     82a:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     82c:	84 b7       	in	r24, 0x34	; 52
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     832:	80 91 60 00 	lds	r24, 0x0060
     836:	80 68       	ori	r24, 0x80	; 128
     838:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     83c:	80 91 60 00 	lds	r24, 0x0060
     840:	88 61       	ori	r24, 0x18	; 24
     842:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     846:	90 64       	ori	r25, 0x40	; 64
     848:	90 93 60 00 	sts	0x0060, r25
    sei();
     84c:	78 94       	sei
     84e:	67 c0       	rjmp	.+206    	; 0x91e <__stack+0x1f>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     850:	81 fd       	sbrc	r24, 1
     852:	65 c0       	rjmp	.+202    	; 0x91e <__stack+0x1f>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     854:	82 ff       	sbrs	r24, 2
     856:	63 c0       	rjmp	.+198    	; 0x91e <__stack+0x1f>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     858:	de 01       	movw	r26, r28
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	e0 e1       	ldi	r30, 0x10	; 16
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	81 50       	subi	r24, 0x01	; 1
     868:	e1 f7       	brne	.-8      	; 0x862 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     86a:	98 01       	movw	r18, r16
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	7b e1       	ldi	r23, 0x1B	; 27
     874:	87 eb       	ldi	r24, 0xB7	; 183
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
     87c:	72 2e       	mov	r7, r18
     87e:	83 2e       	mov	r8, r19
     880:	94 2e       	mov	r9, r20
     882:	e5 2e       	mov	r14, r21
     884:	5e 01       	movw	r10, r28
     886:	08 94       	sec
     888:	a1 1c       	adc	r10, r1
     88a:	b1 1c       	adc	r11, r1
     88c:	c9 01       	movw	r24, r18
     88e:	da 01       	movw	r26, r20
     890:	9c 01       	movw	r18, r24
     892:	ad 01       	movw	r20, r26
     894:	ff 24       	eor	r15, r15
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     898:	f5 01       	movw	r30, r10
     89a:	21 91       	ld	r18, Z+
     89c:	31 91       	ld	r19, Z+
     89e:	5f 01       	movw	r10, r30
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	67 2d       	mov	r22, r7
     8a6:	78 2d       	mov	r23, r8
     8a8:	89 2d       	mov	r24, r9
     8aa:	9e 2d       	mov	r25, r14
     8ac:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
     8b0:	c9 01       	movw	r24, r18
     8b2:	da 01       	movw	r26, r20
     8b4:	9c 01       	movw	r18, r24
     8b6:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8b8:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8ba:	f5 e0       	ldi	r31, 0x05	; 5
     8bc:	ff 16       	cp	r15, r31
     8be:	31 f0       	breq	.+12     	; 0x8cc <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8c0:	2f 3f       	cpi	r18, 0xFF	; 255
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <Timebase_Timer_Config+0x11a>
     8ca:	34 f7       	brge	.-52     	; 0x898 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8cc:	8f 2d       	mov	r24, r15
     8ce:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8d0:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8d2:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8d4:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8d8:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8da:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8dc:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     8de:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     8e0:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     8e2:	88 23       	and	r24, r24
     8e4:	11 f4       	brne	.+4      	; 0x8ea <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 1){
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0b c0       	rjmp	.+22     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 2){
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	11 f4       	brne	.+4      	; 0x8fa <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 3){
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
	  TCCR0B = (1<<CS02);
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 4){
     902:	84 30       	cpi	r24, 0x04	; 4
     904:	11 f4       	brne	.+4      	; 0x90a <__stack+0xb>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     90a:	82 2f       	mov	r24, r18
     90c:	80 95       	com	r24
     90e:	f6 01       	movw	r30, r12
     910:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     912:	83 81       	ldd	r24, Z+3	; 0x03
     914:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 6e 00 	sts	0x006E, r24
    sei();
     91c:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     91e:	f6 01       	movw	r30, r12
     920:	12 83       	std	Z+2, r17	; 0x02
     922:	01 83       	std	Z+1, r16	; 0x01
}
     924:	2a 96       	adiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	08 95       	ret

0000094c <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     94c:	f8 94       	cli
}
     94e:	08 95       	ret

00000950 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     950:	78 94       	sei
}
     952:	08 95       	ret

00000954 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     954:	e0 91 49 01 	lds	r30, 0x0149
     958:	f0 91 4a 01 	lds	r31, 0x014A
     95c:	80 8d       	ldd	r24, Z+24	; 0x18
}
     95e:	08 95       	ret

00000960 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     960:	e0 91 49 01 	lds	r30, 0x0149
     964:	f0 91 4a 01 	lds	r31, 0x014A
     968:	80 8d       	ldd	r24, Z+24	; 0x18
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     96a:	8f 33       	cpi	r24, 0x3F	; 63
     96c:	18 f4       	brcc	.+6      	; 0x974 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     96e:	80 8d       	ldd	r24, Z+24	; 0x18
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	80 8f       	std	Z+24, r24	; 0x18
     974:	08 95       	ret

00000976 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     976:	e0 91 49 01 	lds	r30, 0x0149
     97a:	f0 91 4a 01 	lds	r31, 0x014A
     97e:	80 8d       	ldd	r24, Z+24	; 0x18
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     980:	88 23       	and	r24, r24
     982:	19 f0       	breq	.+6      	; 0x98a <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     984:	80 8d       	ldd	r24, Z+24	; 0x18
     986:	81 50       	subi	r24, 0x01	; 1
     988:	80 8f       	std	Z+24, r24	; 0x18
     98a:	08 95       	ret

0000098c <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     98c:	e0 91 49 01 	lds	r30, 0x0149
     990:	f0 91 4a 01 	lds	r31, 0x014A
     994:	10 8e       	std	Z+24, r1	; 0x18
}
     996:	08 95       	ret

00000998 <Timebase_Timer_Get_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     998:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     99a:	e0 91 49 01 	lds	r30, 0x0149
     99e:	f0 91 4a 01 	lds	r31, 0x014A
     9a2:	20 85       	ldd	r18, Z+8	; 0x08
     9a4:	31 85       	ldd	r19, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9a6:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_ss;
  #else
  return Timebase->Time.SubSeconds;
  #endif
}
     9a8:	c9 01       	movw	r24, r18
     9aa:	08 95       	ret

000009ac <Timebase_Timer_Get_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9ac:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9ae:	e0 91 49 01 	lds	r30, 0x0149
     9b2:	f0 91 4a 01 	lds	r31, 0x014A
     9b6:	22 85       	ldd	r18, Z+10	; 0x0a
     9b8:	33 85       	ldd	r19, Z+11	; 0x0b
     9ba:	44 85       	ldd	r20, Z+12	; 0x0c
     9bc:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9be:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_s;
  #else
  Timebase->Time.Seconds;
  #endif
}
     9c0:	b9 01       	movw	r22, r18
     9c2:	ca 01       	movw	r24, r20
     9c4:	08 95       	ret

000009c6 <Timebase_Timer_Set_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9c6:	f8 94       	cli
}

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.SubSeconds = value;
     9c8:	e0 91 49 01 	lds	r30, 0x0149
     9cc:	f0 91 4a 01 	lds	r31, 0x014A
     9d0:	91 87       	std	Z+9, r25	; 0x09
     9d2:	80 87       	std	Z+8, r24	; 0x08
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9d4:	78 94       	sei
  Timebase->Time.SubSeconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.SubSeconds = value;
  #endif
}
     9d6:	08 95       	ret

000009d8 <Timebase_Timer_Set_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9d8:	f8 94       	cli
}

void Timebase_Timer_Set_Seconds(int32_t value){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.Seconds = value;
     9da:	e0 91 49 01 	lds	r30, 0x0149
     9de:	f0 91 4a 01 	lds	r31, 0x014A
     9e2:	62 87       	std	Z+10, r22	; 0x0a
     9e4:	73 87       	std	Z+11, r23	; 0x0b
     9e6:	84 87       	std	Z+12, r24	; 0x0c
     9e8:	95 87       	std	Z+13, r25	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9ea:	78 94       	sei
  Timebase->Time.Seconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.Seconds = value;
  #endif
}
     9ec:	08 95       	ret

000009ee <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     9ee:	6f 92       	push	r6
     9f0:	7f 92       	push	r7
     9f2:	8f 92       	push	r8
     9f4:	9f 92       	push	r9
     9f6:	af 92       	push	r10
     9f8:	bf 92       	push	r11
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a0c:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a0e:	c0 91 49 01 	lds	r28, 0x0149
     a12:	d0 91 4a 01 	lds	r29, 0x014A
     a16:	e8 84       	ldd	r14, Y+8	; 0x08
     a18:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a1a:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a1c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a1e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a20:	3b 85       	ldd	r19, Y+11	; 0x0b
     a22:	4c 85       	ldd	r20, Y+12	; 0x0c
     a24:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a26:	78 94       	sei
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	7a 81       	ldd	r23, Y+2	; 0x02
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsi3>
     a34:	3b 01       	movw	r6, r22
     a36:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	6e 0c       	add	r6, r14
     a3e:	7f 1c       	adc	r7, r15
     a40:	80 1e       	adc	r8, r16
     a42:	91 1e       	adc	r9, r17
  smpl_val += value;
     a44:	cc 24       	eor	r12, r12
     a46:	dd 24       	eor	r13, r13
     a48:	6a 0c       	add	r6, r10
     a4a:	7b 1c       	adc	r7, r11
     a4c:	8c 1c       	adc	r8, r12
     a4e:	9d 1c       	adc	r9, r13
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <Timebase_Timer_Delay_SubSeconds+0x98>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a5a:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a5c:	e8 84       	ldd	r14, Y+8	; 0x08
     a5e:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a60:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a62:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a64:	2a 85       	ldd	r18, Y+10	; 0x0a
     a66:	3b 85       	ldd	r19, Y+11	; 0x0b
     a68:	4c 85       	ldd	r20, Y+12	; 0x0c
     a6a:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a6c:	78 94       	sei
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     a6e:	69 81       	ldd	r22, Y+1	; 0x01
     a70:	7a 81       	ldd	r23, Y+2	; 0x02
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsi3>
	curr_val += curr_ss;
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	6e 0d       	add	r22, r14
     a80:	7f 1d       	adc	r23, r15
     a82:	80 1f       	adc	r24, r16
     a84:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     a86:	66 15       	cp	r22, r6
     a88:	77 05       	cpc	r23, r7
     a8a:	88 05       	cpc	r24, r8
     a8c:	99 05       	cpc	r25, r9
     a8e:	2c f3       	brlt	.-54     	; 0xa5a <Timebase_Timer_Delay_SubSeconds+0x6c>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	af 90       	pop	r10
     aa4:	9f 90       	pop	r9
     aa6:	8f 90       	pop	r8
     aa8:	7f 90       	pop	r7
     aaa:	6f 90       	pop	r6
     aac:	08 95       	ret

00000aae <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     aae:	bc 01       	movw	r22, r24

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ab0:	e0 91 49 01 	lds	r30, 0x0149
     ab4:	f0 91 4a 01 	lds	r31, 0x014A

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ab8:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     aba:	80 85       	ldd	r24, Z+8	; 0x08
     abc:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     abe:	78 94       	sei
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     ac0:	24 81       	ldd	r18, Z+4	; 0x04
     ac2:	35 81       	ldd	r19, Z+5	; 0x05
     ac4:	46 81       	ldd	r20, Z+6	; 0x06
     ac6:	57 81       	ldd	r21, Z+7	; 0x07
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	a4 07       	cpc	r26, r20
     ad2:	b5 07       	cpc	r27, r21
     ad4:	89 f7       	brne	.-30     	; 0xab8 <Timebase_Timer_Await_SubSeconds+0xa>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ad6:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ad8:	80 85       	ldd	r24, Z+8	; 0x08
     ada:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     adc:	78 94       	sei


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     ade:	86 0f       	add	r24, r22
     ae0:	97 1f       	adc	r25, r23
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	84 83       	std	Z+4, r24	; 0x04
     ae8:	95 83       	std	Z+5, r25	; 0x05
     aea:	a6 83       	std	Z+6, r26	; 0x06
     aec:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     aee:	24 81       	ldd	r18, Z+4	; 0x04
     af0:	35 81       	ldd	r19, Z+5	; 0x05
     af2:	46 81       	ldd	r20, Z+6	; 0x06
     af4:	57 81       	ldd	r21, Z+7	; 0x07
     af6:	81 81       	ldd	r24, Z+1	; 0x01
     af8:	92 81       	ldd	r25, Z+2	; 0x02
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	4a 07       	cpc	r20, r26
     b04:	5b 07       	cpc	r21, r27
     b06:	84 f0       	brlt	.+32     	; 0xb28 <Timebase_Timer_Await_SubSeconds+0x7a>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b08:	24 81       	ldd	r18, Z+4	; 0x04
     b0a:	35 81       	ldd	r19, Z+5	; 0x05
     b0c:	46 81       	ldd	r20, Z+6	; 0x06
     b0e:	57 81       	ldd	r21, Z+7	; 0x07
     b10:	81 81       	ldd	r24, Z+1	; 0x01
     b12:	92 81       	ldd	r25, Z+2	; 0x02
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	28 1b       	sub	r18, r24
     b1a:	39 0b       	sbc	r19, r25
     b1c:	4a 0b       	sbc	r20, r26
     b1e:	5b 0b       	sbc	r21, r27
     b20:	24 83       	std	Z+4, r18	; 0x04
     b22:	35 83       	std	Z+5, r19	; 0x05
     b24:	46 83       	std	Z+6, r20	; 0x06
     b26:	57 83       	std	Z+7, r21	; 0x07
     b28:	08 95       	ret

00000b2a <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b2a:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b2c:	e0 91 49 01 	lds	r30, 0x0149
     b30:	f0 91 4a 01 	lds	r31, 0x014A
     b34:	22 85       	ldd	r18, Z+10	; 0x0a
     b36:	33 85       	ldd	r19, Z+11	; 0x0b
     b38:	44 85       	ldd	r20, Z+12	; 0x0c
     b3a:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b3c:	78 94       	sei


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	a4 1f       	adc	r26, r20
     b48:	b5 1f       	adc	r27, r21
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b54:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b56:	22 85       	ldd	r18, Z+10	; 0x0a
     b58:	33 85       	ldd	r19, Z+11	; 0x0b
     b5a:	44 85       	ldd	r20, Z+12	; 0x0c
     b5c:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b5e:	78 94       	sei

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	4a 07       	cpc	r20, r26
     b66:	5b 07       	cpc	r21, r27
     b68:	ac f3       	brlt	.-22     	; 0xb54 <Timebase_Timer_Delay_Seconds+0x2a>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     b6a:	08 95       	ret

00000b6c <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b6c:	e0 91 49 01 	lds	r30, 0x0149
     b70:	f0 91 4a 01 	lds	r31, 0x014A
     b74:	16 86       	std	Z+14, r1	; 0x0e
     b76:	17 86       	std	Z+15, r1	; 0x0f
     b78:	10 8a       	std	Z+16, r1	; 0x10
     b7a:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     b7c:	12 8a       	std	Z+18, r1	; 0x12
     b7e:	13 8a       	std	Z+19, r1	; 0x13
     b80:	14 8a       	std	Z+20, r1	; 0x14
     b82:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b84:	16 8a       	std	Z+22, r1	; 0x16
}
     b86:	08 95       	ret

00000b88 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     b88:	e0 91 49 01 	lds	r30, 0x0149
     b8c:	f0 91 4a 01 	lds	r31, 0x014A
     b90:	86 89       	ldd	r24, Z+22	; 0x16
     b92:	88 23       	and	r24, r24
     b94:	b1 f4       	brne	.+44     	; 0xbc2 <Timebase_Window_Timer_Start+0x3a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b96:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b98:	82 85       	ldd	r24, Z+10	; 0x0a
     b9a:	93 85       	ldd	r25, Z+11	; 0x0b
     b9c:	a4 85       	ldd	r26, Z+12	; 0x0c
     b9e:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ba0:	78 94       	sei
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     ba2:	86 87       	std	Z+14, r24	; 0x0e
     ba4:	97 87       	std	Z+15, r25	; 0x0f
     ba6:	a0 8b       	std	Z+16, r26	; 0x10
     ba8:	b1 8b       	std	Z+17, r27	; 0x11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     baa:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bac:	80 85       	ldd	r24, Z+8	; 0x08
     bae:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bb0:	78 94       	sei
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	82 8b       	std	Z+18, r24	; 0x12
     bb8:	93 8b       	std	Z+19, r25	; 0x13
     bba:	a4 8b       	std	Z+20, r26	; 0x14
     bbc:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	86 8b       	std	Z+22, r24	; 0x16
     bc2:	08 95       	ret

00000bc4 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bd0:	c0 91 49 01 	lds	r28, 0x0149
     bd4:	d0 91 4a 01 	lds	r29, 0x014A
     bd8:	8e 89       	ldd	r24, Y+22	; 0x16
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <Timebase_Window_Timer_Get_Interval+0x22>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <Timebase_Window_Timer_Get_Interval+0x70>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     be6:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     be8:	2a 85       	ldd	r18, Y+10	; 0x0a
     bea:	3b 85       	ldd	r19, Y+11	; 0x0b
     bec:	4c 85       	ldd	r20, Y+12	; 0x0c
     bee:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf0:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bf2:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bf4:	88 85       	ldd	r24, Y+8	; 0x08
     bf6:	99 85       	ldd	r25, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf8:	78 94       	sei

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     bfa:	7c 01       	movw	r14, r24
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     c00:	8e 85       	ldd	r24, Y+14	; 0x0e
     c02:	9f 85       	ldd	r25, Y+15	; 0x0f
     c04:	a8 89       	ldd	r26, Y+16	; 0x10
     c06:	b9 89       	ldd	r27, Y+17	; 0x11
     c08:	28 1b       	sub	r18, r24
     c0a:	39 0b       	sbc	r19, r25
     c0c:	4a 0b       	sbc	r20, r26
     c0e:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c10:	69 81       	ldd	r22, Y+1	; 0x01
     c12:	7a 81       	ldd	r23, Y+2	; 0x02
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsi3>
	curr_s += curr_ss;
     c1c:	2a 89       	ldd	r18, Y+18	; 0x12
     c1e:	3b 89       	ldd	r19, Y+19	; 0x13
     c20:	4c 89       	ldd	r20, Y+20	; 0x14
     c22:	5d 89       	ldd	r21, Y+21	; 0x15
     c24:	e2 1a       	sub	r14, r18
     c26:	f3 0a       	sbc	r15, r19
     c28:	04 0b       	sbc	r16, r20
     c2a:	15 0b       	sbc	r17, r21
     c2c:	e6 0e       	add	r14, r22
     c2e:	f7 1e       	adc	r15, r23
     c30:	08 1f       	adc	r16, r24
     c32:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     c34:	b7 01       	movw	r22, r14
     c36:	c8 01       	movw	r24, r16
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     c46:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Timebase_Window_Timer_Get_Interval>
     c4a:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c4c:	e0 91 49 01 	lds	r30, 0x0149
     c50:	f0 91 4a 01 	lds	r31, 0x014A
     c54:	86 89       	ldd	r24, Z+22	; 0x16
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	49 f4       	brne	.+18     	; 0xc6c <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c5a:	16 86       	std	Z+14, r1	; 0x0e
     c5c:	17 86       	std	Z+15, r1	; 0x0f
     c5e:	10 8a       	std	Z+16, r1	; 0x10
     c60:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     c62:	12 8a       	std	Z+18, r1	; 0x12
     c64:	13 8a       	std	Z+19, r1	; 0x13
     c66:	14 8a       	std	Z+20, r1	; 0x14
     c68:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c6a:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     c6c:	82 2f       	mov	r24, r18
     c6e:	08 95       	ret

00000c70 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
     c70:	e0 91 49 01 	lds	r30, 0x0149
     c74:	f0 91 4a 01 	lds	r31, 0x014A
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	25 e1       	ldi	r18, 0x15	; 21
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	ac 01       	movw	r20, r24
     c80:	42 9f       	mul	r20, r18
     c82:	c0 01       	movw	r24, r0
     c84:	43 9f       	mul	r20, r19
     c86:	90 0d       	add	r25, r0
     c88:	52 9f       	mul	r21, r18
     c8a:	90 0d       	add	r25, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	e8 0f       	add	r30, r24
     c90:	f9 1f       	adc	r31, r25
     c92:	82 a9       	ldd	r24, Z+50	; 0x32
     c94:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
     c96:	8f 70       	andi	r24, 0x0F	; 15
     c98:	08 95       	ret

00000c9a <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     c9a:	e0 91 49 01 	lds	r30, 0x0149
     c9e:	f0 91 4a 01 	lds	r31, 0x014A
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	25 e1       	ldi	r18, 0x15	; 21
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	ac 01       	movw	r20, r24
     caa:	42 9f       	mul	r20, r18
     cac:	c0 01       	movw	r24, r0
     cae:	43 9f       	mul	r20, r19
     cb0:	90 0d       	add	r25, r0
     cb2:	52 9f       	mul	r21, r18
     cb4:	90 0d       	add	r25, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	e8 0f       	add	r30, r24
     cba:	f9 1f       	adc	r31, r25
     cbc:	6f 70       	andi	r22, 0x0F	; 15
     cbe:	66 0f       	add	r22, r22
     cc0:	82 a9       	ldd	r24, Z+50	; 0x32
     cc2:	81 7e       	andi	r24, 0xE1	; 225
     cc4:	86 2b       	or	r24, r22
     cc6:	82 ab       	std	Z+50, r24	; 0x32
}
     cc8:	08 95       	ret

00000cca <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
     cca:	e0 91 49 01 	lds	r30, 0x0149
     cce:	f0 91 4a 01 	lds	r31, 0x014A
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	25 e1       	ldi	r18, 0x15	; 21
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	ac 01       	movw	r20, r24
     cda:	42 9f       	mul	r20, r18
     cdc:	c0 01       	movw	r24, r0
     cde:	43 9f       	mul	r20, r19
     ce0:	90 0d       	add	r25, r0
     ce2:	52 9f       	mul	r21, r18
     ce4:	90 0d       	add	r25, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	ff 96       	adiw	r30, 0x3f	; 63
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
     cf2:	82 81       	ldd	r24, Z+2	; 0x02
     cf4:	93 81       	ldd	r25, Z+3	; 0x03
     cf6:	08 95       	ret

00000cf8 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     cf8:	e0 91 49 01 	lds	r30, 0x0149
     cfc:	f0 91 4a 01 	lds	r31, 0x014A
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	25 e1       	ldi	r18, 0x15	; 21
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	dc 01       	movw	r26, r24
     d08:	a2 9f       	mul	r26, r18
     d0a:	c0 01       	movw	r24, r0
     d0c:	a3 9f       	mul	r26, r19
     d0e:	90 0d       	add	r25, r0
     d10:	b2 9f       	mul	r27, r18
     d12:	90 0d       	add	r25, r0
     d14:	11 24       	eor	r1, r1
     d16:	e8 0f       	add	r30, r24
     d18:	f9 1f       	adc	r31, r25
     d1a:	ff 96       	adiw	r30, 0x3f	; 63
     d1c:	40 83       	st	Z, r20
     d1e:	51 83       	std	Z+1, r21	; 0x01
     d20:	62 83       	std	Z+2, r22	; 0x02
     d22:	73 83       	std	Z+3, r23	; 0x03
}
     d24:	08 95       	ret

00000d26 <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
     d26:	e0 91 49 01 	lds	r30, 0x0149
     d2a:	f0 91 4a 01 	lds	r31, 0x014A
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	25 e1       	ldi	r18, 0x15	; 21
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	ac 01       	movw	r20, r24
     d36:	42 9f       	mul	r20, r18
     d38:	c0 01       	movw	r24, r0
     d3a:	43 9f       	mul	r20, r19
     d3c:	90 0d       	add	r25, r0
     d3e:	52 9f       	mul	r21, r18
     d40:	90 0d       	add	r25, r0
     d42:	11 24       	eor	r1, r1
     d44:	e8 0f       	add	r30, r24
     d46:	f9 1f       	adc	r31, r25
     d48:	df 01       	movw	r26, r30
     d4a:	d3 96       	adiw	r26, 0x33	; 51
     d4c:	63 a9       	ldd	r22, Z+51	; 0x33
     d4e:	11 96       	adiw	r26, 0x01	; 1
     d50:	7c 91       	ld	r23, X
     d52:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
     d54:	12 96       	adiw	r26, 0x02	; 2
     d56:	8c 91       	ld	r24, X
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	13 96       	adiw	r26, 0x03	; 3
     d5c:	9c 91       	ld	r25, X
     d5e:	08 95       	ret

00000d60 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     d60:	e0 91 49 01 	lds	r30, 0x0149
     d64:	f0 91 4a 01 	lds	r31, 0x014A
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	25 e1       	ldi	r18, 0x15	; 21
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	dc 01       	movw	r26, r24
     d70:	a2 9f       	mul	r26, r18
     d72:	c0 01       	movw	r24, r0
     d74:	a3 9f       	mul	r26, r19
     d76:	90 0d       	add	r25, r0
     d78:	b2 9f       	mul	r27, r18
     d7a:	90 0d       	add	r25, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	e8 0f       	add	r30, r24
     d80:	f9 1f       	adc	r31, r25
     d82:	43 ab       	std	Z+51, r20	; 0x33
     d84:	54 ab       	std	Z+52, r21	; 0x34
     d86:	65 ab       	std	Z+53, r22	; 0x35
     d88:	76 ab       	std	Z+54, r23	; 0x36
}
     d8a:	08 95       	ret

00000d8c <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
     d8c:	e0 91 49 01 	lds	r30, 0x0149
     d90:	f0 91 4a 01 	lds	r31, 0x014A
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	25 e1       	ldi	r18, 0x15	; 21
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	ac 01       	movw	r20, r24
     d9c:	42 9f       	mul	r20, r18
     d9e:	c0 01       	movw	r24, r0
     da0:	43 9f       	mul	r20, r19
     da2:	90 0d       	add	r25, r0
     da4:	52 9f       	mul	r21, r18
     da6:	90 0d       	add	r25, r0
     da8:	11 24       	eor	r1, r1
     daa:	e8 0f       	add	r30, r24
     dac:	f9 1f       	adc	r31, r25
     dae:	df 01       	movw	r26, r30
     db0:	d7 96       	adiw	r26, 0x37	; 55
     db2:	67 a9       	ldd	r22, Z+55	; 0x37
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	7c 91       	ld	r23, X
     db8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	8c 91       	ld	r24, X
     dbe:	12 97       	sbiw	r26, 0x02	; 2
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 91       	ld	r25, X
     dc4:	08 95       	ret

00000dc6 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     dc6:	e0 91 49 01 	lds	r30, 0x0149
     dca:	f0 91 4a 01 	lds	r31, 0x014A
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	25 e1       	ldi	r18, 0x15	; 21
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	dc 01       	movw	r26, r24
     dd6:	a2 9f       	mul	r26, r18
     dd8:	c0 01       	movw	r24, r0
     dda:	a3 9f       	mul	r26, r19
     ddc:	90 0d       	add	r25, r0
     dde:	b2 9f       	mul	r27, r18
     de0:	90 0d       	add	r25, r0
     de2:	11 24       	eor	r1, r1
     de4:	e8 0f       	add	r30, r24
     de6:	f9 1f       	adc	r31, r25
     de8:	47 ab       	std	Z+55, r20	; 0x37
     dea:	50 af       	std	Z+56, r21	; 0x38
     dec:	61 af       	std	Z+57, r22	; 0x39
     dee:	72 af       	std	Z+58, r23	; 0x3a
}
     df0:	08 95       	ret

00000df2 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
     df2:	e0 91 49 01 	lds	r30, 0x0149
     df6:	f0 91 4a 01 	lds	r31, 0x014A
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	25 e1       	ldi	r18, 0x15	; 21
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	ac 01       	movw	r20, r24
     e02:	42 9f       	mul	r20, r18
     e04:	c0 01       	movw	r24, r0
     e06:	43 9f       	mul	r20, r19
     e08:	90 0d       	add	r25, r0
     e0a:	52 9f       	mul	r21, r18
     e0c:	90 0d       	add	r25, r0
     e0e:	11 24       	eor	r1, r1
     e10:	e8 0f       	add	r30, r24
     e12:	f9 1f       	adc	r31, r25
     e14:	df 01       	movw	r26, r30
     e16:	db 96       	adiw	r26, 0x3b	; 59
     e18:	63 ad       	ldd	r22, Z+59	; 0x3b
     e1a:	11 96       	adiw	r26, 0x01	; 1
     e1c:	7c 91       	ld	r23, X
     e1e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
     e20:	12 96       	adiw	r26, 0x02	; 2
     e22:	8c 91       	ld	r24, X
     e24:	12 97       	sbiw	r26, 0x02	; 2
     e26:	13 96       	adiw	r26, 0x03	; 3
     e28:	9c 91       	ld	r25, X
     e2a:	08 95       	ret

00000e2c <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     e2c:	e0 91 49 01 	lds	r30, 0x0149
     e30:	f0 91 4a 01 	lds	r31, 0x014A
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	25 e1       	ldi	r18, 0x15	; 21
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	dc 01       	movw	r26, r24
     e3c:	a2 9f       	mul	r26, r18
     e3e:	c0 01       	movw	r24, r0
     e40:	a3 9f       	mul	r26, r19
     e42:	90 0d       	add	r25, r0
     e44:	b2 9f       	mul	r27, r18
     e46:	90 0d       	add	r25, r0
     e48:	11 24       	eor	r1, r1
     e4a:	e8 0f       	add	r30, r24
     e4c:	f9 1f       	adc	r31, r25
     e4e:	43 af       	std	Z+59, r20	; 0x3b
     e50:	54 af       	std	Z+60, r21	; 0x3c
     e52:	65 af       	std	Z+61, r22	; 0x3d
     e54:	76 af       	std	Z+62, r23	; 0x3e
}
     e56:	08 95       	ret

00000e58 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
     e58:	e0 91 49 01 	lds	r30, 0x0149
     e5c:	f0 91 4a 01 	lds	r31, 0x014A
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	25 e1       	ldi	r18, 0x15	; 21
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	ac 01       	movw	r20, r24
     e68:	42 9f       	mul	r20, r18
     e6a:	c0 01       	movw	r24, r0
     e6c:	43 9f       	mul	r20, r19
     e6e:	90 0d       	add	r25, r0
     e70:	52 9f       	mul	r21, r18
     e72:	90 0d       	add	r25, r0
     e74:	11 24       	eor	r1, r1
     e76:	e8 0f       	add	r30, r24
     e78:	f9 1f       	adc	r31, r25
     e7a:	ed 5b       	subi	r30, 0xBD	; 189
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	60 81       	ld	r22, Z
     e80:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	08 95       	ret

00000e88 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     e88:	e0 91 49 01 	lds	r30, 0x0149
     e8c:	f0 91 4a 01 	lds	r31, 0x014A
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	25 e1       	ldi	r18, 0x15	; 21
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	dc 01       	movw	r26, r24
     e98:	a2 9f       	mul	r26, r18
     e9a:	c0 01       	movw	r24, r0
     e9c:	a3 9f       	mul	r26, r19
     e9e:	90 0d       	add	r25, r0
     ea0:	b2 9f       	mul	r27, r18
     ea2:	90 0d       	add	r25, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	e8 0f       	add	r30, r24
     ea8:	f9 1f       	adc	r31, r25
     eaa:	ed 5b       	subi	r30, 0xBD	; 189
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	40 83       	st	Z, r20
     eb0:	51 83       	std	Z+1, r21	; 0x01
     eb2:	62 83       	std	Z+2, r22	; 0x02
     eb4:	73 83       	std	Z+3, r23	; 0x03
}
     eb6:	08 95       	ret

00000eb8 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
     eb8:	e0 91 49 01 	lds	r30, 0x0149
     ebc:	f0 91 4a 01 	lds	r31, 0x014A
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	25 e1       	ldi	r18, 0x15	; 21
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	ac 01       	movw	r20, r24
     ec8:	42 9f       	mul	r20, r18
     eca:	c0 01       	movw	r24, r0
     ecc:	43 9f       	mul	r20, r19
     ece:	90 0d       	add	r25, r0
     ed0:	52 9f       	mul	r21, r18
     ed2:	90 0d       	add	r25, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	e8 0f       	add	r30, r24
     ed8:	f9 1f       	adc	r31, r25
     eda:	82 a9       	ldd	r24, Z+50	; 0x32
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
     edc:	81 70       	andi	r24, 0x01	; 1
     ede:	08 95       	ret

00000ee0 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
     ee0:	e0 91 49 01 	lds	r30, 0x0149
     ee4:	f0 91 4a 01 	lds	r31, 0x014A
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	25 e1       	ldi	r18, 0x15	; 21
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	ac 01       	movw	r20, r24
     ef0:	42 9f       	mul	r20, r18
     ef2:	c0 01       	movw	r24, r0
     ef4:	43 9f       	mul	r20, r19
     ef6:	90 0d       	add	r25, r0
     ef8:	52 9f       	mul	r21, r18
     efa:	90 0d       	add	r25, r0
     efc:	11 24       	eor	r1, r1
     efe:	e8 0f       	add	r30, r24
     f00:	f9 1f       	adc	r31, r25
     f02:	82 a9       	ldd	r24, Z+50	; 0x32
     f04:	81 60       	ori	r24, 0x01	; 1
     f06:	82 ab       	std	Z+50, r24	; 0x32
}
     f08:	08 95       	ret

00000f0a <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f0a:	e0 91 49 01 	lds	r30, 0x0149
     f0e:	f0 91 4a 01 	lds	r31, 0x014A
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	25 e1       	ldi	r18, 0x15	; 21
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	ac 01       	movw	r20, r24
     f1a:	42 9f       	mul	r20, r18
     f1c:	c0 01       	movw	r24, r0
     f1e:	43 9f       	mul	r20, r19
     f20:	90 0d       	add	r25, r0
     f22:	52 9f       	mul	r21, r18
     f24:	90 0d       	add	r25, r0
     f26:	11 24       	eor	r1, r1
     f28:	e8 0f       	add	r30, r24
     f2a:	f9 1f       	adc	r31, r25
     f2c:	82 a9       	ldd	r24, Z+50	; 0x32
     f2e:	8e 7f       	andi	r24, 0xFE	; 254
     f30:	82 ab       	std	Z+50, r24	; 0x32
}
     f32:	08 95       	ret

00000f34 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     f34:	e0 91 49 01 	lds	r30, 0x0149
     f38:	f0 91 4a 01 	lds	r31, 0x014A
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	25 e1       	ldi	r18, 0x15	; 21
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	ac 01       	movw	r20, r24
     f44:	42 9f       	mul	r20, r18
     f46:	c0 01       	movw	r24, r0
     f48:	43 9f       	mul	r20, r19
     f4a:	90 0d       	add	r25, r0
     f4c:	52 9f       	mul	r21, r18
     f4e:	90 0d       	add	r25, r0
     f50:	11 24       	eor	r1, r1
     f52:	e8 0f       	add	r30, r24
     f54:	f9 1f       	adc	r31, r25
     f56:	82 a9       	ldd	r24, Z+50	; 0x32
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     f58:	ff 96       	adiw	r30, 0x3f	; 63
     f5a:	10 82       	st	Z, r1
     f5c:	11 82       	std	Z+1, r1	; 0x01
     f5e:	12 82       	std	Z+2, r1	; 0x02
     f60:	13 82       	std	Z+3, r1	; 0x03
     f62:	ff 97       	sbiw	r30, 0x3f	; 63
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     f64:	13 aa       	std	Z+51, r1	; 0x33
     f66:	14 aa       	std	Z+52, r1	; 0x34
     f68:	15 aa       	std	Z+53, r1	; 0x35
     f6a:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     f6c:	17 aa       	std	Z+55, r1	; 0x37
     f6e:	10 ae       	std	Z+56, r1	; 0x38
     f70:	11 ae       	std	Z+57, r1	; 0x39
     f72:	12 ae       	std	Z+58, r1	; 0x3a
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     f74:	13 ae       	std	Z+59, r1	; 0x3b
     f76:	14 ae       	std	Z+60, r1	; 0x3c
     f78:	15 ae       	std	Z+61, r1	; 0x3d
     f7a:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     f7c:	ed 5b       	subi	r30, 0xBD	; 189
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	10 82       	st	Z, r1
     f82:	11 82       	std	Z+1, r1	; 0x01
     f84:	12 82       	std	Z+2, r1	; 0x02
     f86:	13 82       	std	Z+3, r1	; 0x03
     f88:	e3 54       	subi	r30, 0x43	; 67
     f8a:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f8c:	80 7e       	andi	r24, 0xE0	; 224
     f8e:	82 ab       	std	Z+50, r24	; 0x32
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
     f90:	08 95       	ret

00000f92 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
     f92:	0e 94 9a 07 	call	0xf34	; 0xf34 <Timebase_UpCounter_Reset>
}
     f96:	08 95       	ret

00000f98 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     f98:	e0 91 49 01 	lds	r30, 0x0149
     f9c:	f0 91 4a 01 	lds	r31, 0x014A
     fa0:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     fa2:	25 e1       	ldi	r18, 0x15	; 21
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	ac 01       	movw	r20, r24
     fa8:	42 9f       	mul	r20, r18
     faa:	c0 01       	movw	r24, r0
     fac:	43 9f       	mul	r20, r19
     fae:	90 0d       	add	r25, r0
     fb0:	52 9f       	mul	r21, r18
     fb2:	90 0d       	add	r25, r0
     fb4:	11 24       	eor	r1, r1
     fb6:	e8 0f       	add	r30, r24
     fb8:	f9 1f       	adc	r31, r25
     fba:	92 a9       	ldd	r25, Z+50	; 0x32
     fbc:	89 2f       	mov	r24, r25
     fbe:	86 95       	lsr	r24
     fc0:	8f 70       	andi	r24, 0x0F	; 15
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	19 f0       	breq	.+6      	; 0xfcc <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     fc6:	91 7e       	andi	r25, 0xE1	; 225
     fc8:	92 60       	ori	r25, 0x02	; 2
     fca:	92 ab       	std	Z+50, r25	; 0x32
     fcc:	08 95       	ret

00000fce <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     fce:	e0 91 49 01 	lds	r30, 0x0149
     fd2:	f0 91 4a 01 	lds	r31, 0x014A
     fd6:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     fd8:	25 e1       	ldi	r18, 0x15	; 21
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	ac 01       	movw	r20, r24
     fde:	42 9f       	mul	r20, r18
     fe0:	c0 01       	movw	r24, r0
     fe2:	43 9f       	mul	r20, r19
     fe4:	90 0d       	add	r25, r0
     fe6:	52 9f       	mul	r21, r18
     fe8:	90 0d       	add	r25, r0
     fea:	11 24       	eor	r1, r1
     fec:	e8 0f       	add	r30, r24
     fee:	f9 1f       	adc	r31, r25
     ff0:	92 a9       	ldd	r25, Z+50	; 0x32
     ff2:	89 2f       	mov	r24, r25
     ff4:	86 95       	lsr	r24
     ff6:	8f 70       	andi	r24, 0x0F	; 15
     ff8:	82 30       	cpi	r24, 0x02	; 2
     ffa:	19 f0       	breq	.+6      	; 0x1002 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     ffc:	91 7e       	andi	r25, 0xE1	; 225
     ffe:	94 60       	ori	r25, 0x04	; 4
    1000:	92 ab       	std	Z+50, r25	; 0x32
    1002:	08 95       	ret

00001004 <Timebase_UpCounter_Set_Securely>:
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
    1004:	0f 93       	push	r16
    1006:	1f 93       	push	r17
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    100c:	c0 91 49 01 	lds	r28, 0x0149
    1010:	d0 91 4a 01 	lds	r29, 0x014A
    1014:	08 2f       	mov	r16, r24
    1016:	10 e0       	ldi	r17, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1018:	85 e1       	ldi	r24, 0x15	; 21
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	08 9f       	mul	r16, r24
    101e:	f0 01       	movw	r30, r0
    1020:	09 9f       	mul	r16, r25
    1022:	f0 0d       	add	r31, r0
    1024:	18 9f       	mul	r17, r24
    1026:	f0 0d       	add	r31, r0
    1028:	11 24       	eor	r1, r1
    102a:	ec 0f       	add	r30, r28
    102c:	fd 1f       	adc	r31, r29
    102e:	82 a9       	ldd	r24, Z+50	; 0x32
    1030:	86 95       	lsr	r24
    1032:	8f 70       	andi	r24, 0x0F	; 15
    1034:	81 f5       	brne	.+96     	; 0x1096 <Timebase_UpCounter_Set_Securely+0x92>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1036:	ff 96       	adiw	r30, 0x3f	; 63
    1038:	10 82       	st	Z, r1
    103a:	11 82       	std	Z+1, r1	; 0x01
    103c:	12 82       	std	Z+2, r1	; 0x02
    103e:	13 82       	std	Z+3, r1	; 0x03
    1040:	ff 97       	sbiw	r30, 0x3f	; 63
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1042:	13 ae       	std	Z+59, r1	; 0x3b
    1044:	14 ae       	std	Z+60, r1	; 0x3c
    1046:	15 ae       	std	Z+61, r1	; 0x3d
    1048:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    104a:	47 ab       	std	Z+55, r20	; 0x37
    104c:	50 af       	std	Z+56, r21	; 0x38
    104e:	61 af       	std	Z+57, r22	; 0x39
    1050:	72 af       	std	Z+58, r23	; 0x3a

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1052:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1054:	8a 85       	ldd	r24, Y+10	; 0x0a
    1056:	9b 85       	ldd	r25, Y+11	; 0x0b
    1058:	ac 85       	ldd	r26, Y+12	; 0x0c
    105a:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    105c:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    105e:	25 e1       	ldi	r18, 0x15	; 21
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	02 9f       	mul	r16, r18
    1064:	f0 01       	movw	r30, r0
    1066:	03 9f       	mul	r16, r19
    1068:	f0 0d       	add	r31, r0
    106a:	12 9f       	mul	r17, r18
    106c:	f0 0d       	add	r31, r0
    106e:	11 24       	eor	r1, r1
    1070:	ec 0f       	add	r30, r28
    1072:	fd 1f       	adc	r31, r29
    1074:	84 0f       	add	r24, r20
    1076:	95 1f       	adc	r25, r21
    1078:	a6 1f       	adc	r26, r22
    107a:	b7 1f       	adc	r27, r23
    107c:	83 ab       	std	Z+51, r24	; 0x33
    107e:	94 ab       	std	Z+52, r25	; 0x34
    1080:	a5 ab       	std	Z+53, r26	; 0x35
    1082:	b6 ab       	std	Z+54, r27	; 0x36
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1084:	92 a9       	ldd	r25, Z+50	; 0x32
    1086:	89 2f       	mov	r24, r25
    1088:	86 95       	lsr	r24
    108a:	8f 70       	andi	r24, 0x0F	; 15
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	19 f0       	breq	.+6      	; 0x1096 <Timebase_UpCounter_Set_Securely+0x92>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1090:	91 7e       	andi	r25, 0xE1	; 225
    1092:	92 60       	ori	r25, 0x02	; 2
    1094:	92 ab       	std	Z+50, r25	; 0x32
    Timebase_UpCounter_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_Start(window);
  }
}
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	1f 91       	pop	r17
    109c:	0f 91       	pop	r16
    109e:	08 95       	ret

000010a0 <Timebase_UpCounter_Set_Forcefully>:

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	d8 2e       	mov	r13, r24
    10ac:	7a 01       	movw	r14, r20
    10ae:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    10b0:	0e 94 9a 07 	call	0xf34	; 0xf34 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    10b4:	8d 2d       	mov	r24, r13
    10b6:	b8 01       	movw	r22, r16
    10b8:	a7 01       	movw	r20, r14
    10ba:	0e 94 02 08 	call	0x1004	; 0x1004 <Timebase_UpCounter_Set_Securely>
} 
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	08 95       	ret

000010ca <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    10d6:	c0 91 49 01 	lds	r28, 0x0149
    10da:	d0 91 4a 01 	lds	r29, 0x014A
    10de:	48 2f       	mov	r20, r24
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	85 e1       	ldi	r24, 0x15	; 21
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	48 9f       	mul	r20, r24
    10e8:	f0 01       	movw	r30, r0
    10ea:	49 9f       	mul	r20, r25
    10ec:	f0 0d       	add	r31, r0
    10ee:	58 9f       	mul	r21, r24
    10f0:	f0 0d       	add	r31, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	ec 0f       	add	r30, r28
    10f6:	fd 1f       	adc	r31, r29
    10f8:	82 a9       	ldd	r24, Z+50	; 0x32
    10fa:	86 95       	lsr	r24
    10fc:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	09 f0       	breq	.+2      	; 0x1104 <Timebase_UpCounter_Update+0x3a>
    1102:	44 c0       	rjmp	.+136    	; 0x118c <Timebase_UpCounter_Update+0xc2>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1104:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1106:	ea 84       	ldd	r14, Y+10	; 0x0a
    1108:	fb 84       	ldd	r15, Y+11	; 0x0b
    110a:	0c 85       	ldd	r16, Y+12	; 0x0c
    110c:	1d 85       	ldd	r17, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    110e:	78 94       	sei

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    1110:	85 e1       	ldi	r24, 0x15	; 21
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	48 9f       	mul	r20, r24
    1116:	f0 01       	movw	r30, r0
    1118:	49 9f       	mul	r20, r25
    111a:	f0 0d       	add	r31, r0
    111c:	58 9f       	mul	r21, r24
    111e:	f0 0d       	add	r31, r0
    1120:	11 24       	eor	r1, r1
    1122:	ec 0f       	add	r30, r28
    1124:	fd 1f       	adc	r31, r29
    1126:	23 a9       	ldd	r18, Z+51	; 0x33
    1128:	34 a9       	ldd	r19, Z+52	; 0x34
    112a:	45 a9       	ldd	r20, Z+53	; 0x35
    112c:	56 a9       	ldd	r21, Z+54	; 0x36
    112e:	2e 19       	sub	r18, r14
    1130:	3f 09       	sbc	r19, r15
    1132:	40 0b       	sbc	r20, r16
    1134:	51 0b       	sbc	r21, r17
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1136:	23 af       	std	Z+59, r18	; 0x3b
    1138:	34 af       	std	Z+60, r19	; 0x3c
    113a:	45 af       	std	Z+61, r20	; 0x3d
    113c:	56 af       	std	Z+62, r21	; 0x3e
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    113e:	ef 01       	movw	r28, r30
    1140:	ef 96       	adiw	r28, 0x3f	; 63
    1142:	e7 a8       	ldd	r14, Z+55	; 0x37
    1144:	f0 ac       	ldd	r15, Z+56	; 0x38
    1146:	01 ad       	ldd	r16, Z+57	; 0x39
    1148:	12 ad       	ldd	r17, Z+58	; 0x3a
    114a:	d8 01       	movw	r26, r16
    114c:	c7 01       	movw	r24, r14
    114e:	82 1b       	sub	r24, r18
    1150:	93 0b       	sbc	r25, r19
    1152:	a4 0b       	sbc	r26, r20
    1154:	b5 0b       	sbc	r27, r21
    1156:	88 83       	st	Y, r24
    1158:	99 83       	std	Y+1, r25	; 0x01
    115a:	aa 83       	std	Y+2, r26	; 0x02
    115c:	bb 83       	std	Y+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    115e:	12 16       	cp	r1, r18
    1160:	13 06       	cpc	r1, r19
    1162:	14 06       	cpc	r1, r20
    1164:	15 06       	cpc	r1, r21
    1166:	0c f4       	brge	.+2      	; 0x116a <Timebase_UpCounter_Update+0xa0>
    1168:	3d c0       	rjmp	.+122    	; 0x11e4 <Timebase_UpCounter_Update+0x11a>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    116a:	13 aa       	std	Z+51, r1	; 0x33
    116c:	14 aa       	std	Z+52, r1	; 0x34
    116e:	15 aa       	std	Z+53, r1	; 0x35
    1170:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1172:	13 ae       	std	Z+59, r1	; 0x3b
    1174:	14 ae       	std	Z+60, r1	; 0x3c
    1176:	15 ae       	std	Z+61, r1	; 0x3d
    1178:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    117a:	e8 82       	st	Y, r14
    117c:	f9 82       	std	Y+1, r15	; 0x01
    117e:	0a 83       	std	Y+2, r16	; 0x02
    1180:	1b 83       	std	Y+3, r17	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1182:	82 a9       	ldd	r24, Z+50	; 0x32
    1184:	81 7e       	andi	r24, 0xE1	; 225
    1186:	88 60       	ori	r24, 0x08	; 8
    1188:	82 ab       	std	Z+50, r24	; 0x32
    118a:	2c c0       	rjmp	.+88     	; 0x11e4 <Timebase_UpCounter_Update+0x11a>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	51 f5       	brne	.+84     	; 0x11e4 <Timebase_UpCounter_Update+0x11a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1190:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	9b 85       	ldd	r25, Y+11	; 0x0b
    1196:	ac 85       	ldd	r26, Y+12	; 0x0c
    1198:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    119a:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    119c:	25 e1       	ldi	r18, 0x15	; 21
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	42 9f       	mul	r20, r18
    11a2:	f0 01       	movw	r30, r0
    11a4:	43 9f       	mul	r20, r19
    11a6:	f0 0d       	add	r31, r0
    11a8:	52 9f       	mul	r21, r18
    11aa:	f0 0d       	add	r31, r0
    11ac:	11 24       	eor	r1, r1
    11ae:	ec 0f       	add	r30, r28
    11b0:	fd 1f       	adc	r31, r29
    11b2:	23 ad       	ldd	r18, Z+59	; 0x3b
    11b4:	34 ad       	ldd	r19, Z+60	; 0x3c
    11b6:	45 ad       	ldd	r20, Z+61	; 0x3d
    11b8:	56 ad       	ldd	r21, Z+62	; 0x3e
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	a4 1f       	adc	r26, r20
    11c0:	b5 1f       	adc	r27, r21
    11c2:	83 ab       	std	Z+51, r24	; 0x33
    11c4:	94 ab       	std	Z+52, r25	; 0x34
    11c6:	a5 ab       	std	Z+53, r26	; 0x35
    11c8:	b6 ab       	std	Z+54, r27	; 0x36
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    11ca:	87 a9       	ldd	r24, Z+55	; 0x37
    11cc:	90 ad       	ldd	r25, Z+56	; 0x38
    11ce:	a1 ad       	ldd	r26, Z+57	; 0x39
    11d0:	b2 ad       	ldd	r27, Z+58	; 0x3a
    11d2:	82 1b       	sub	r24, r18
    11d4:	93 0b       	sbc	r25, r19
    11d6:	a4 0b       	sbc	r26, r20
    11d8:	b5 0b       	sbc	r27, r21
    11da:	ff 96       	adiw	r30, 0x3f	; 63
    11dc:	80 83       	st	Z, r24
    11de:	91 83       	std	Z+1, r25	; 0x01
    11e0:	a2 83       	std	Z+2, r26	; 0x02
    11e2:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    11e4:	df 91       	pop	r29
    11e6:	cf 91       	pop	r28
    11e8:	1f 91       	pop	r17
    11ea:	0f 91       	pop	r16
    11ec:	ff 90       	pop	r15
    11ee:	ef 90       	pop	r14
    11f0:	08 95       	ret

000011f2 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	e0 91 49 01 	lds	r30, 0x0149
    11f8:	f0 91 4a 01 	lds	r31, 0x014A
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	25 e1       	ldi	r18, 0x15	; 21
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	bc 01       	movw	r22, r24
    1204:	62 9f       	mul	r22, r18
    1206:	c0 01       	movw	r24, r0
    1208:	63 9f       	mul	r22, r19
    120a:	90 0d       	add	r25, r0
    120c:	72 9f       	mul	r23, r18
    120e:	90 0d       	add	r25, r0
    1210:	11 24       	eor	r1, r1
    1212:	e8 0f       	add	r30, r24
    1214:	f9 1f       	adc	r31, r25
    1216:	82 a9       	ldd	r24, Z+50	; 0x32
    1218:	86 95       	lsr	r24
    121a:	8f 70       	andi	r24, 0x0F	; 15
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	09 f4       	brne	.+2      	; 0x1222 <Timebase_UpCounter_Expired+0x30>
    1220:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1222:	84 2f       	mov	r24, r20
    1224:	08 95       	ret

00001226 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1226:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1228:	e0 91 49 01 	lds	r30, 0x0149
    122c:	f0 91 4a 01 	lds	r31, 0x014A
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	85 e1       	ldi	r24, 0x15	; 21
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	bc 01       	movw	r22, r24
    123a:	26 9f       	mul	r18, r22
    123c:	c0 01       	movw	r24, r0
    123e:	27 9f       	mul	r18, r23
    1240:	90 0d       	add	r25, r0
    1242:	36 9f       	mul	r19, r22
    1244:	90 0d       	add	r25, r0
    1246:	11 24       	eor	r1, r1
    1248:	e8 0f       	add	r30, r24
    124a:	f9 1f       	adc	r31, r25
    124c:	82 a9       	ldd	r24, Z+50	; 0x32
    124e:	86 95       	lsr	r24
    1250:	8f 70       	andi	r24, 0x0F	; 15
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	11 f0       	breq	.+4      	; 0x125a <Timebase_UpCounter_Expired_Event+0x34>
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    125a:	84 2f       	mov	r24, r20
    125c:	0e 94 9a 07 	call	0xf34	; 0xf34 <Timebase_UpCounter_Reset>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1262:	08 95       	ret

00001264 <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1268:	c0 91 49 01 	lds	r28, 0x0149
    126c:	d0 91 4a 01 	lds	r29, 0x014A
    1270:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1272:	25 e1       	ldi	r18, 0x15	; 21
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	fc 01       	movw	r30, r24
    1278:	e2 9f       	mul	r30, r18
    127a:	c0 01       	movw	r24, r0
    127c:	e3 9f       	mul	r30, r19
    127e:	90 0d       	add	r25, r0
    1280:	f2 9f       	mul	r31, r18
    1282:	90 0d       	add	r25, r0
    1284:	11 24       	eor	r1, r1
    1286:	c8 0f       	add	r28, r24
    1288:	d9 1f       	adc	r29, r25
    128a:	8a a9       	ldd	r24, Y+50	; 0x32
    128c:	80 fd       	sbrc	r24, 0
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <Timebase_UpCounter_Set_Period_Value_Securely+0x54>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1290:	fe 01       	movw	r30, r28
    1292:	ed 5b       	subi	r30, 0xBD	; 189
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	ef 96       	adiw	r28, 0x3f	; 63
    1298:	88 81       	ld	r24, Y
    129a:	99 81       	ldd	r25, Y+1	; 0x01
    129c:	aa 81       	ldd	r26, Y+2	; 0x02
    129e:	bb 81       	ldd	r27, Y+3	; 0x03
    12a0:	ef 97       	sbiw	r28, 0x3f	; 63
    12a2:	84 0f       	add	r24, r20
    12a4:	95 1f       	adc	r25, r21
    12a6:	a6 1f       	adc	r26, r22
    12a8:	b7 1f       	adc	r27, r23
    12aa:	80 83       	st	Z, r24
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	a2 83       	std	Z+2, r26	; 0x02
    12b0:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    12b2:	8a a9       	ldd	r24, Y+50	; 0x32
    12b4:	81 60       	ori	r24, 0x01	; 1
    12b6:	8a ab       	std	Y+50, r24	; 0x32
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	08 95       	ret

000012be <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    12be:	e0 91 49 01 	lds	r30, 0x0149
    12c2:	f0 91 4a 01 	lds	r31, 0x014A
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    12c8:	25 e1       	ldi	r18, 0x15	; 21
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	ac 01       	movw	r20, r24
    12ce:	42 9f       	mul	r20, r18
    12d0:	c0 01       	movw	r24, r0
    12d2:	43 9f       	mul	r20, r19
    12d4:	90 0d       	add	r25, r0
    12d6:	52 9f       	mul	r21, r18
    12d8:	90 0d       	add	r25, r0
    12da:	11 24       	eor	r1, r1
    12dc:	e8 0f       	add	r30, r24
    12de:	f9 1f       	adc	r31, r25
    12e0:	df 01       	movw	r26, r30
    12e2:	df 96       	adiw	r26, 0x3f	; 63
    12e4:	ed 5b       	subi	r30, 0xBD	; 189
    12e6:	ff 4f       	sbci	r31, 0xFF	; 255
    12e8:	20 81       	ld	r18, Z
    12ea:	31 81       	ldd	r19, Z+1	; 0x01
    12ec:	42 81       	ldd	r20, Z+2	; 0x02
    12ee:	53 81       	ldd	r21, Z+3	; 0x03
    12f0:	8d 91       	ld	r24, X+
    12f2:	9d 91       	ld	r25, X+
    12f4:	0d 90       	ld	r0, X+
    12f6:	bc 91       	ld	r27, X
    12f8:	a0 2d       	mov	r26, r0
    12fa:	28 1b       	sub	r18, r24
    12fc:	39 0b       	sbc	r19, r25
    12fe:	4a 0b       	sbc	r20, r26
    1300:	5b 0b       	sbc	r21, r27
    1302:	57 ff       	sbrs	r21, 7
    1304:	04 c0       	rjmp	.+8      	; 0x130e <Timebase_UpCounter_Get_Remaining_Period_Value+0x50>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    130e:	b9 01       	movw	r22, r18
    1310:	ca 01       	movw	r24, r20
    1312:	08 95       	ret

00001314 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1318:	c0 91 49 01 	lds	r28, 0x0149
    131c:	d0 91 4a 01 	lds	r29, 0x014A
    1320:	68 2f       	mov	r22, r24
    1322:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1324:	85 e1       	ldi	r24, 0x15	; 21
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	68 9f       	mul	r22, r24
    132a:	f0 01       	movw	r30, r0
    132c:	69 9f       	mul	r22, r25
    132e:	f0 0d       	add	r31, r0
    1330:	78 9f       	mul	r23, r24
    1332:	f0 0d       	add	r31, r0
    1334:	11 24       	eor	r1, r1
    1336:	ec 0f       	add	r30, r28
    1338:	fd 1f       	adc	r31, r29
    133a:	df 01       	movw	r26, r30
    133c:	df 96       	adiw	r26, 0x3f	; 63
    133e:	ed 5b       	subi	r30, 0xBD	; 189
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	20 81       	ld	r18, Z
    1344:	31 81       	ldd	r19, Z+1	; 0x01
    1346:	42 81       	ldd	r20, Z+2	; 0x02
    1348:	53 81       	ldd	r21, Z+3	; 0x03
    134a:	8d 91       	ld	r24, X+
    134c:	9d 91       	ld	r25, X+
    134e:	0d 90       	ld	r0, X+
    1350:	bc 91       	ld	r27, X
    1352:	a0 2d       	mov	r26, r0
    1354:	28 1b       	sub	r18, r24
    1356:	39 0b       	sbc	r19, r25
    1358:	4a 0b       	sbc	r20, r26
    135a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    135c:	57 fd       	sbrc	r21, 7
    135e:	07 c0       	rjmp	.+14     	; 0x136e <Timebase_UpCounter_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1360:	21 15       	cp	r18, r1
    1362:	31 05       	cpc	r19, r1
    1364:	41 05       	cpc	r20, r1
    1366:	51 05       	cpc	r21, r1
    1368:	11 f0       	breq	.+4      	; 0x136e <Timebase_UpCounter_Period_Value_Expired+0x5a>
    136a:	20 e0       	ldi	r18, 0x00	; 0
    136c:	12 c0       	rjmp	.+36     	; 0x1392 <Timebase_UpCounter_Period_Value_Expired+0x7e>
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	85 e1       	ldi	r24, 0x15	; 21
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	ac 01       	movw	r20, r24
    1376:	64 9f       	mul	r22, r20
    1378:	c0 01       	movw	r24, r0
    137a:	65 9f       	mul	r22, r21
    137c:	90 0d       	add	r25, r0
    137e:	74 9f       	mul	r23, r20
    1380:	90 0d       	add	r25, r0
    1382:	11 24       	eor	r1, r1
    1384:	c8 0f       	add	r28, r24
    1386:	d9 1f       	adc	r29, r25
    1388:	8a a9       	ldd	r24, Y+50	; 0x32
    138a:	80 ff       	sbrs	r24, 0
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1392:	82 2f       	mov	r24, r18
    1394:	df 91       	pop	r29
    1396:	cf 91       	pop	r28
    1398:	08 95       	ret

0000139a <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    139a:	1f 93       	push	r17
    139c:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    139e:	0e 94 8a 09 	call	0x1314	; 0x1314 <Timebase_UpCounter_Period_Value_Expired>
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	11 f0       	breq	.+4      	; 0x13aa <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	16 c0       	rjmp	.+44     	; 0x13d6 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    13aa:	e0 91 49 01 	lds	r30, 0x0149
    13ae:	f0 91 4a 01 	lds	r31, 0x014A
    13b2:	21 2f       	mov	r18, r17
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	85 e1       	ldi	r24, 0x15	; 21
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	ac 01       	movw	r20, r24
    13bc:	24 9f       	mul	r18, r20
    13be:	c0 01       	movw	r24, r0
    13c0:	25 9f       	mul	r18, r21
    13c2:	90 0d       	add	r25, r0
    13c4:	34 9f       	mul	r19, r20
    13c6:	90 0d       	add	r25, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	e8 0f       	add	r30, r24
    13cc:	f9 1f       	adc	r31, r25
    13ce:	82 a9       	ldd	r24, Z+50	; 0x32
    13d0:	8e 7f       	andi	r24, 0xFE	; 254
    13d2:	82 ab       	std	Z+50, r24	; 0x32
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    13d6:	1f 91       	pop	r17
    13d8:	08 95       	ret

000013da <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	0e 94 65 08 	call	0x10ca	; 0x10ca <Timebase_UpCounter_Update>
  }
}
    13e0:	08 95       	ret

000013e2 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	0e 94 9a 07 	call	0xf34	; 0xf34 <Timebase_UpCounter_Reset>
  }
}
    13e8:	08 95       	ret

000013ea <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    13ea:	e0 91 49 01 	lds	r30, 0x0149
    13ee:	f0 91 4a 01 	lds	r31, 0x014A
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	2d e0       	ldi	r18, 0x0D	; 13
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	ac 01       	movw	r20, r24
    13fa:	42 9f       	mul	r20, r18
    13fc:	c0 01       	movw	r24, r0
    13fe:	43 9f       	mul	r20, r19
    1400:	90 0d       	add	r25, r0
    1402:	52 9f       	mul	r21, r18
    1404:	90 0d       	add	r25, r0
    1406:	11 24       	eor	r1, r1
    1408:	e8 0f       	add	r30, r24
    140a:	f9 1f       	adc	r31, r25
    140c:	e8 5a       	subi	r30, 0xA8	; 168
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	80 81       	ld	r24, Z
    1412:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    1414:	8f 70       	andi	r24, 0x0F	; 15
    1416:	08 95       	ret

00001418 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1418:	e0 91 49 01 	lds	r30, 0x0149
    141c:	f0 91 4a 01 	lds	r31, 0x014A
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	2d e0       	ldi	r18, 0x0D	; 13
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	ac 01       	movw	r20, r24
    1428:	42 9f       	mul	r20, r18
    142a:	c0 01       	movw	r24, r0
    142c:	43 9f       	mul	r20, r19
    142e:	90 0d       	add	r25, r0
    1430:	52 9f       	mul	r21, r18
    1432:	90 0d       	add	r25, r0
    1434:	11 24       	eor	r1, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	e8 5a       	subi	r30, 0xA8	; 168
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	6f 70       	andi	r22, 0x0F	; 15
    1440:	66 0f       	add	r22, r22
    1442:	80 81       	ld	r24, Z
    1444:	81 7e       	andi	r24, 0xE1	; 225
    1446:	86 2b       	or	r24, r22
    1448:	80 83       	st	Z, r24
}
    144a:	08 95       	ret

0000144c <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    144c:	e0 91 49 01 	lds	r30, 0x0149
    1450:	f0 91 4a 01 	lds	r31, 0x014A
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	2d e0       	ldi	r18, 0x0D	; 13
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	ac 01       	movw	r20, r24
    145c:	42 9f       	mul	r20, r18
    145e:	c0 01       	movw	r24, r0
    1460:	43 9f       	mul	r20, r19
    1462:	90 0d       	add	r25, r0
    1464:	52 9f       	mul	r21, r18
    1466:	90 0d       	add	r25, r0
    1468:	11 24       	eor	r1, r1
    146a:	e8 0f       	add	r30, r24
    146c:	f9 1f       	adc	r31, r25
    146e:	e3 5a       	subi	r30, 0xA3	; 163
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	60 81       	ld	r22, Z
    1474:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    1476:	82 81       	ldd	r24, Z+2	; 0x02
    1478:	93 81       	ldd	r25, Z+3	; 0x03
    147a:	08 95       	ret

0000147c <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    147c:	e0 91 49 01 	lds	r30, 0x0149
    1480:	f0 91 4a 01 	lds	r31, 0x014A
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	2d e0       	ldi	r18, 0x0D	; 13
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	dc 01       	movw	r26, r24
    148c:	a2 9f       	mul	r26, r18
    148e:	c0 01       	movw	r24, r0
    1490:	a3 9f       	mul	r26, r19
    1492:	90 0d       	add	r25, r0
    1494:	b2 9f       	mul	r27, r18
    1496:	90 0d       	add	r25, r0
    1498:	11 24       	eor	r1, r1
    149a:	e8 0f       	add	r30, r24
    149c:	f9 1f       	adc	r31, r25
    149e:	e3 5a       	subi	r30, 0xA3	; 163
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	40 83       	st	Z, r20
    14a4:	51 83       	std	Z+1, r21	; 0x01
    14a6:	62 83       	std	Z+2, r22	; 0x02
    14a8:	73 83       	std	Z+3, r23	; 0x03
}
    14aa:	08 95       	ret

000014ac <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    14ac:	e0 91 49 01 	lds	r30, 0x0149
    14b0:	f0 91 4a 01 	lds	r31, 0x014A
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	2d e0       	ldi	r18, 0x0D	; 13
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	ac 01       	movw	r20, r24
    14bc:	42 9f       	mul	r20, r18
    14be:	c0 01       	movw	r24, r0
    14c0:	43 9f       	mul	r20, r19
    14c2:	90 0d       	add	r25, r0
    14c4:	52 9f       	mul	r21, r18
    14c6:	90 0d       	add	r25, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	e7 5a       	subi	r30, 0xA7	; 167
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    14d6:	82 81       	ldd	r24, Z+2	; 0x02
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	08 95       	ret

000014dc <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    14dc:	e0 91 49 01 	lds	r30, 0x0149
    14e0:	f0 91 4a 01 	lds	r31, 0x014A
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	2d e0       	ldi	r18, 0x0D	; 13
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	dc 01       	movw	r26, r24
    14ec:	a2 9f       	mul	r26, r18
    14ee:	c0 01       	movw	r24, r0
    14f0:	a3 9f       	mul	r26, r19
    14f2:	90 0d       	add	r25, r0
    14f4:	b2 9f       	mul	r27, r18
    14f6:	90 0d       	add	r25, r0
    14f8:	11 24       	eor	r1, r1
    14fa:	e8 0f       	add	r30, r24
    14fc:	f9 1f       	adc	r31, r25
    14fe:	e7 5a       	subi	r30, 0xA7	; 167
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	40 83       	st	Z, r20
    1504:	51 83       	std	Z+1, r21	; 0x01
    1506:	62 83       	std	Z+2, r22	; 0x02
    1508:	73 83       	std	Z+3, r23	; 0x03
}
    150a:	08 95       	ret

0000150c <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    150c:	e0 91 49 01 	lds	r30, 0x0149
    1510:	f0 91 4a 01 	lds	r31, 0x014A
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	2d e0       	ldi	r18, 0x0D	; 13
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	ac 01       	movw	r20, r24
    151c:	42 9f       	mul	r20, r18
    151e:	c0 01       	movw	r24, r0
    1520:	43 9f       	mul	r20, r19
    1522:	90 0d       	add	r25, r0
    1524:	52 9f       	mul	r21, r18
    1526:	90 0d       	add	r25, r0
    1528:	11 24       	eor	r1, r1
    152a:	e8 0f       	add	r30, r24
    152c:	f9 1f       	adc	r31, r25
    152e:	ef 59       	subi	r30, 0x9F	; 159
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	60 81       	ld	r22, Z
    1534:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    1536:	82 81       	ldd	r24, Z+2	; 0x02
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	08 95       	ret

0000153c <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    153c:	e0 91 49 01 	lds	r30, 0x0149
    1540:	f0 91 4a 01 	lds	r31, 0x014A
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1548:	77 ff       	sbrs	r23, 7
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    154c:	8d e0       	ldi	r24, 0x0D	; 13
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	ac 01       	movw	r20, r24
    1552:	24 9f       	mul	r18, r20
    1554:	c0 01       	movw	r24, r0
    1556:	25 9f       	mul	r18, r21
    1558:	90 0d       	add	r25, r0
    155a:	34 9f       	mul	r19, r20
    155c:	90 0d       	add	r25, r0
    155e:	11 24       	eor	r1, r1
    1560:	e8 0f       	add	r30, r24
    1562:	f9 1f       	adc	r31, r25
    1564:	ef 59       	subi	r30, 0x9F	; 159
    1566:	ff 4f       	sbci	r31, 0xFF	; 255
    1568:	10 82       	st	Z, r1
    156a:	11 82       	std	Z+1, r1	; 0x01
    156c:	12 82       	std	Z+2, r1	; 0x02
    156e:	13 82       	std	Z+3, r1	; 0x03
    1570:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1572:	8d e0       	ldi	r24, 0x0D	; 13
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	dc 01       	movw	r26, r24
    1578:	2a 9f       	mul	r18, r26
    157a:	c0 01       	movw	r24, r0
    157c:	2b 9f       	mul	r18, r27
    157e:	90 0d       	add	r25, r0
    1580:	3a 9f       	mul	r19, r26
    1582:	90 0d       	add	r25, r0
    1584:	11 24       	eor	r1, r1
    1586:	e8 0f       	add	r30, r24
    1588:	f9 1f       	adc	r31, r25
    158a:	ef 59       	subi	r30, 0x9F	; 159
    158c:	ff 4f       	sbci	r31, 0xFF	; 255
    158e:	40 83       	st	Z, r20
    1590:	51 83       	std	Z+1, r21	; 0x01
    1592:	62 83       	std	Z+2, r22	; 0x02
    1594:	73 83       	std	Z+3, r23	; 0x03
    1596:	08 95       	ret

00001598 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    1598:	e0 91 49 01 	lds	r30, 0x0149
    159c:	f0 91 4a 01 	lds	r31, 0x014A
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	2d e0       	ldi	r18, 0x0D	; 13
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	ac 01       	movw	r20, r24
    15a8:	42 9f       	mul	r20, r18
    15aa:	c0 01       	movw	r24, r0
    15ac:	43 9f       	mul	r20, r19
    15ae:	90 0d       	add	r25, r0
    15b0:	52 9f       	mul	r21, r18
    15b2:	90 0d       	add	r25, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	e8 0f       	add	r30, r24
    15b8:	f9 1f       	adc	r31, r25
    15ba:	e8 5a       	subi	r30, 0xA8	; 168
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    15c0:	81 70       	andi	r24, 0x01	; 1
    15c2:	08 95       	ret

000015c4 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    15c4:	e0 91 49 01 	lds	r30, 0x0149
    15c8:	f0 91 4a 01 	lds	r31, 0x014A
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	2d e0       	ldi	r18, 0x0D	; 13
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	ac 01       	movw	r20, r24
    15d4:	42 9f       	mul	r20, r18
    15d6:	c0 01       	movw	r24, r0
    15d8:	43 9f       	mul	r20, r19
    15da:	90 0d       	add	r25, r0
    15dc:	52 9f       	mul	r21, r18
    15de:	90 0d       	add	r25, r0
    15e0:	11 24       	eor	r1, r1
    15e2:	e8 0f       	add	r30, r24
    15e4:	f9 1f       	adc	r31, r25
    15e6:	e8 5a       	subi	r30, 0xA8	; 168
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	80 83       	st	Z, r24
}
    15f0:	08 95       	ret

000015f2 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    15f2:	e0 91 49 01 	lds	r30, 0x0149
    15f6:	f0 91 4a 01 	lds	r31, 0x014A
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	2d e0       	ldi	r18, 0x0D	; 13
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	ac 01       	movw	r20, r24
    1602:	42 9f       	mul	r20, r18
    1604:	c0 01       	movw	r24, r0
    1606:	43 9f       	mul	r20, r19
    1608:	90 0d       	add	r25, r0
    160a:	52 9f       	mul	r21, r18
    160c:	90 0d       	add	r25, r0
    160e:	11 24       	eor	r1, r1
    1610:	e8 0f       	add	r30, r24
    1612:	f9 1f       	adc	r31, r25
    1614:	e8 5a       	subi	r30, 0xA8	; 168
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	80 81       	ld	r24, Z
    161a:	8e 7f       	andi	r24, 0xFE	; 254
    161c:	80 83       	st	Z, r24
}
    161e:	08 95       	ret

00001620 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1620:	e0 91 49 01 	lds	r30, 0x0149
    1624:	f0 91 4a 01 	lds	r31, 0x014A
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	2d e0       	ldi	r18, 0x0D	; 13
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	ac 01       	movw	r20, r24
    1630:	42 9f       	mul	r20, r18
    1632:	c0 01       	movw	r24, r0
    1634:	43 9f       	mul	r20, r19
    1636:	90 0d       	add	r25, r0
    1638:	52 9f       	mul	r21, r18
    163a:	90 0d       	add	r25, r0
    163c:	11 24       	eor	r1, r1
    163e:	e8 0f       	add	r30, r24
    1640:	f9 1f       	adc	r31, r25
    1642:	e7 5a       	subi	r30, 0xA7	; 167
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	11 92       	st	Z+, r1
    1648:	11 92       	st	Z+, r1
    164a:	11 92       	st	Z+, r1
    164c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    164e:	10 82       	st	Z, r1
    1650:	11 82       	std	Z+1, r1	; 0x01
    1652:	12 82       	std	Z+2, r1	; 0x02
    1654:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1656:	35 97       	sbiw	r30, 0x05	; 5
    1658:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    165a:	80 7e       	andi	r24, 0xE0	; 224
    165c:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    165e:	08 95       	ret

00001660 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1660:	e0 91 49 01 	lds	r30, 0x0149
    1664:	f0 91 4a 01 	lds	r31, 0x014A
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	2d e0       	ldi	r18, 0x0D	; 13
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	ac 01       	movw	r20, r24
    1670:	42 9f       	mul	r20, r18
    1672:	c0 01       	movw	r24, r0
    1674:	43 9f       	mul	r20, r19
    1676:	90 0d       	add	r25, r0
    1678:	52 9f       	mul	r21, r18
    167a:	90 0d       	add	r25, r0
    167c:	11 24       	eor	r1, r1
    167e:	e8 0f       	add	r30, r24
    1680:	f9 1f       	adc	r31, r25
    1682:	e7 5a       	subi	r30, 0xA7	; 167
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	11 92       	st	Z+, r1
    1688:	11 92       	st	Z+, r1
    168a:	11 92       	st	Z+, r1
    168c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    168e:	10 82       	st	Z, r1
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	12 82       	std	Z+2, r1	; 0x02
    1694:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1696:	35 97       	sbiw	r30, 0x05	; 5
    1698:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    169a:	80 7e       	andi	r24, 0xE0	; 224
    169c:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    169e:	08 95       	ret

000016a0 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    16a0:	e0 91 49 01 	lds	r30, 0x0149
    16a4:	f0 91 4a 01 	lds	r31, 0x014A
    16a8:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    16aa:	2d e0       	ldi	r18, 0x0D	; 13
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	ac 01       	movw	r20, r24
    16b0:	42 9f       	mul	r20, r18
    16b2:	c0 01       	movw	r24, r0
    16b4:	43 9f       	mul	r20, r19
    16b6:	90 0d       	add	r25, r0
    16b8:	52 9f       	mul	r21, r18
    16ba:	90 0d       	add	r25, r0
    16bc:	11 24       	eor	r1, r1
    16be:	e8 0f       	add	r30, r24
    16c0:	f9 1f       	adc	r31, r25
    16c2:	e8 5a       	subi	r30, 0xA8	; 168
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	90 81       	ld	r25, Z
    16c8:	89 2f       	mov	r24, r25
    16ca:	86 95       	lsr	r24
    16cc:	8f 70       	andi	r24, 0x0F	; 15
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	19 f0       	breq	.+6      	; 0x16d8 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16d2:	91 7e       	andi	r25, 0xE1	; 225
    16d4:	92 60       	ori	r25, 0x02	; 2
    16d6:	90 83       	st	Z, r25
    16d8:	08 95       	ret

000016da <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    16da:	e0 91 49 01 	lds	r30, 0x0149
    16de:	f0 91 4a 01 	lds	r31, 0x014A
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    16e4:	2d e0       	ldi	r18, 0x0D	; 13
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	ac 01       	movw	r20, r24
    16ea:	42 9f       	mul	r20, r18
    16ec:	c0 01       	movw	r24, r0
    16ee:	43 9f       	mul	r20, r19
    16f0:	90 0d       	add	r25, r0
    16f2:	52 9f       	mul	r21, r18
    16f4:	90 0d       	add	r25, r0
    16f6:	11 24       	eor	r1, r1
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	e8 5a       	subi	r30, 0xA8	; 168
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	90 81       	ld	r25, Z
    1702:	89 2f       	mov	r24, r25
    1704:	86 95       	lsr	r24
    1706:	8f 70       	andi	r24, 0x0F	; 15
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	19 f0       	breq	.+6      	; 0x1712 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    170c:	91 7e       	andi	r25, 0xE1	; 225
    170e:	94 60       	ori	r25, 0x04	; 4
    1710:	90 83       	st	Z, r25
    1712:	08 95       	ret

00001714 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    1714:	0f 93       	push	r16
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    171c:	c0 91 49 01 	lds	r28, 0x0149
    1720:	d0 91 4a 01 	lds	r29, 0x014A
    1724:	08 2f       	mov	r16, r24
    1726:	10 e0       	ldi	r17, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1728:	8d e0       	ldi	r24, 0x0D	; 13
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	08 9f       	mul	r16, r24
    172e:	f0 01       	movw	r30, r0
    1730:	09 9f       	mul	r16, r25
    1732:	f0 0d       	add	r31, r0
    1734:	18 9f       	mul	r17, r24
    1736:	f0 0d       	add	r31, r0
    1738:	11 24       	eor	r1, r1
    173a:	ec 0f       	add	r30, r28
    173c:	fd 1f       	adc	r31, r29
    173e:	e8 5a       	subi	r30, 0xA8	; 168
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	80 81       	ld	r24, Z
    1744:	e8 55       	subi	r30, 0x58	; 88
    1746:	f0 40       	sbci	r31, 0x00	; 0
    1748:	86 95       	lsr	r24
    174a:	8f 70       	andi	r24, 0x0F	; 15
    174c:	51 f5       	brne	.+84     	; 0x17a2 <Timebase_DownCounter_Set_Securely+0x8e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    174e:	e3 5a       	subi	r30, 0xA3	; 163
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	40 83       	st	Z, r20
    1754:	51 83       	std	Z+1, r21	; 0x01
    1756:	62 83       	std	Z+2, r22	; 0x02
    1758:	73 83       	std	Z+3, r23	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    175a:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    175c:	8a 85       	ldd	r24, Y+10	; 0x0a
    175e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1760:	ac 85       	ldd	r26, Y+12	; 0x0c
    1762:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1764:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1766:	2d e0       	ldi	r18, 0x0D	; 13
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	02 9f       	mul	r16, r18
    176c:	f0 01       	movw	r30, r0
    176e:	03 9f       	mul	r16, r19
    1770:	f0 0d       	add	r31, r0
    1772:	12 9f       	mul	r17, r18
    1774:	f0 0d       	add	r31, r0
    1776:	11 24       	eor	r1, r1
    1778:	ec 0f       	add	r30, r28
    177a:	fd 1f       	adc	r31, r29
    177c:	e7 5a       	subi	r30, 0xA7	; 167
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	84 0f       	add	r24, r20
    1782:	95 1f       	adc	r25, r21
    1784:	a6 1f       	adc	r26, r22
    1786:	b7 1f       	adc	r27, r23
    1788:	80 83       	st	Z, r24
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	a2 83       	std	Z+2, r26	; 0x02
    178e:	b3 83       	std	Z+3, r27	; 0x03
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1790:	92 91       	ld	r25, -Z
    1792:	89 2f       	mov	r24, r25
    1794:	86 95       	lsr	r24
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	19 f0       	breq	.+6      	; 0x17a2 <Timebase_DownCounter_Set_Securely+0x8e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    179c:	91 7e       	andi	r25, 0xE1	; 225
    179e:	92 60       	ori	r25, 0x02	; 2
    17a0:	90 83       	st	Z, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	0f 91       	pop	r16
    17aa:	08 95       	ret

000017ac <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    17b0:	e0 91 49 01 	lds	r30, 0x0149
    17b4:	f0 91 4a 01 	lds	r31, 0x014A
    17b8:	a8 2f       	mov	r26, r24
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	2d e0       	ldi	r18, 0x0D	; 13
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	e9 01       	movw	r28, r18
    17c2:	ac 9f       	mul	r26, r28
    17c4:	90 01       	movw	r18, r0
    17c6:	ad 9f       	mul	r26, r29
    17c8:	30 0d       	add	r19, r0
    17ca:	bc 9f       	mul	r27, r28
    17cc:	30 0d       	add	r19, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	e2 0f       	add	r30, r18
    17d2:	f3 1f       	adc	r31, r19
    17d4:	e7 5a       	subi	r30, 0xA7	; 167
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	11 92       	st	Z+, r1
    17da:	11 92       	st	Z+, r1
    17dc:	11 92       	st	Z+, r1
    17de:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    17e0:	10 82       	st	Z, r1
    17e2:	11 82       	std	Z+1, r1	; 0x01
    17e4:	12 82       	std	Z+2, r1	; 0x02
    17e6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    17e8:	35 97       	sbiw	r30, 0x05	; 5
    17ea:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17ec:	90 7e       	andi	r25, 0xE0	; 224
    17ee:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    17f0:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Timebase_DownCounter_Set_Securely>
} 
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	08 95       	ret

000017fa <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    17fe:	c0 91 49 01 	lds	r28, 0x0149
    1802:	d0 91 4a 01 	lds	r29, 0x014A
    1806:	68 2f       	mov	r22, r24
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	8d e0       	ldi	r24, 0x0D	; 13
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	68 9f       	mul	r22, r24
    1810:	f0 01       	movw	r30, r0
    1812:	69 9f       	mul	r22, r25
    1814:	f0 0d       	add	r31, r0
    1816:	78 9f       	mul	r23, r24
    1818:	f0 0d       	add	r31, r0
    181a:	11 24       	eor	r1, r1
    181c:	ec 0f       	add	r30, r28
    181e:	fd 1f       	adc	r31, r29
    1820:	e8 5a       	subi	r30, 0xA8	; 168
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	e0 81       	ld	r30, Z
    1826:	e6 95       	lsr	r30
    1828:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    182a:	e1 30       	cpi	r30, 0x01	; 1
    182c:	d1 f5       	brne	.+116    	; 0x18a2 <Timebase_DownCounter_Update+0xa8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    182e:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1830:	2a 85       	ldd	r18, Y+10	; 0x0a
    1832:	3b 85       	ldd	r19, Y+11	; 0x0b
    1834:	4c 85       	ldd	r20, Y+12	; 0x0c
    1836:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1838:	78 94       	sei
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    183a:	8d e0       	ldi	r24, 0x0D	; 13
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	68 9f       	mul	r22, r24
    1840:	f0 01       	movw	r30, r0
    1842:	69 9f       	mul	r22, r25
    1844:	f0 0d       	add	r31, r0
    1846:	78 9f       	mul	r23, r24
    1848:	f0 0d       	add	r31, r0
    184a:	11 24       	eor	r1, r1
    184c:	ec 0f       	add	r30, r28
    184e:	fd 1f       	adc	r31, r29
    1850:	bf 01       	movw	r22, r30
    1852:	67 5a       	subi	r22, 0xA7	; 167
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	eb 01       	movw	r28, r22
    1858:	88 81       	ld	r24, Y
    185a:	99 81       	ldd	r25, Y+1	; 0x01
    185c:	aa 81       	ldd	r26, Y+2	; 0x02
    185e:	bb 81       	ldd	r27, Y+3	; 0x03
    1860:	82 1b       	sub	r24, r18
    1862:	93 0b       	sbc	r25, r19
    1864:	a4 0b       	sbc	r26, r20
    1866:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1868:	ef 01       	movw	r28, r30
    186a:	c3 5a       	subi	r28, 0xA3	; 163
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	88 83       	st	Y, r24
    1870:	99 83       	std	Y+1, r25	; 0x01
    1872:	aa 83       	std	Y+2, r26	; 0x02
    1874:	bb 83       	std	Y+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    1876:	18 16       	cp	r1, r24
    1878:	19 06       	cpc	r1, r25
    187a:	1a 06       	cpc	r1, r26
    187c:	1b 06       	cpc	r1, r27
    187e:	94 f1       	brlt	.+100    	; 0x18e4 <Timebase_DownCounter_Update+0xea>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1880:	db 01       	movw	r26, r22
    1882:	1d 92       	st	X+, r1
    1884:	1d 92       	st	X+, r1
    1886:	1d 92       	st	X+, r1
    1888:	1c 92       	st	X, r1
    188a:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    188c:	18 82       	st	Y, r1
    188e:	19 82       	std	Y+1, r1	; 0x01
    1890:	1a 82       	std	Y+2, r1	; 0x02
    1892:	1b 82       	std	Y+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1894:	e8 5a       	subi	r30, 0xA8	; 168
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    189a:	80 7e       	andi	r24, 0xE0	; 224
    189c:	88 60       	ori	r24, 0x08	; 8
    189e:	80 83       	st	Z, r24
    18a0:	21 c0       	rjmp	.+66     	; 0x18e4 <Timebase_DownCounter_Update+0xea>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    18a2:	e2 30       	cpi	r30, 0x02	; 2
    18a4:	f9 f4       	brne	.+62     	; 0x18e4 <Timebase_DownCounter_Update+0xea>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    18a6:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    18a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ac:	ac 85       	ldd	r26, Y+12	; 0x0c
    18ae:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    18b0:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    18b2:	2d e0       	ldi	r18, 0x0D	; 13
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	62 9f       	mul	r22, r18
    18b8:	f0 01       	movw	r30, r0
    18ba:	63 9f       	mul	r22, r19
    18bc:	f0 0d       	add	r31, r0
    18be:	72 9f       	mul	r23, r18
    18c0:	f0 0d       	add	r31, r0
    18c2:	11 24       	eor	r1, r1
    18c4:	ec 0f       	add	r30, r28
    18c6:	fd 1f       	adc	r31, r29
    18c8:	e3 5a       	subi	r30, 0xA3	; 163
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	20 81       	ld	r18, Z
    18ce:	31 81       	ldd	r19, Z+1	; 0x01
    18d0:	42 81       	ldd	r20, Z+2	; 0x02
    18d2:	53 81       	ldd	r21, Z+3	; 0x03
    18d4:	82 0f       	add	r24, r18
    18d6:	93 1f       	adc	r25, r19
    18d8:	a4 1f       	adc	r26, r20
    18da:	b5 1f       	adc	r27, r21
    18dc:	b2 93       	st	-Z, r27
    18de:	a2 93       	st	-Z, r26
    18e0:	92 93       	st	-Z, r25
    18e2:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    18e4:	df 91       	pop	r29
    18e6:	cf 91       	pop	r28
    18e8:	08 95       	ret

000018ea <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	e0 91 49 01 	lds	r30, 0x0149
    18f0:	f0 91 4a 01 	lds	r31, 0x014A
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	2d e0       	ldi	r18, 0x0D	; 13
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	bc 01       	movw	r22, r24
    18fc:	62 9f       	mul	r22, r18
    18fe:	c0 01       	movw	r24, r0
    1900:	63 9f       	mul	r22, r19
    1902:	90 0d       	add	r25, r0
    1904:	72 9f       	mul	r23, r18
    1906:	90 0d       	add	r25, r0
    1908:	11 24       	eor	r1, r1
    190a:	e8 0f       	add	r30, r24
    190c:	f9 1f       	adc	r31, r25
    190e:	e8 5a       	subi	r30, 0xA8	; 168
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	86 95       	lsr	r24
    1916:	8f 70       	andi	r24, 0x0F	; 15
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	09 f4       	brne	.+2      	; 0x191e <Timebase_DownCounter_Expired+0x34>
    191c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    191e:	84 2f       	mov	r24, r20
    1920:	08 95       	ret

00001922 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1922:	e0 91 49 01 	lds	r30, 0x0149
    1926:	f0 91 4a 01 	lds	r31, 0x014A
    192a:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    192c:	2d e0       	ldi	r18, 0x0D	; 13
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	ac 01       	movw	r20, r24
    1932:	42 9f       	mul	r20, r18
    1934:	c0 01       	movw	r24, r0
    1936:	43 9f       	mul	r20, r19
    1938:	90 0d       	add	r25, r0
    193a:	52 9f       	mul	r21, r18
    193c:	90 0d       	add	r25, r0
    193e:	11 24       	eor	r1, r1
    1940:	e8 0f       	add	r30, r24
    1942:	f9 1f       	adc	r31, r25
    1944:	df 01       	movw	r26, r30
    1946:	a8 5a       	subi	r26, 0xA8	; 168
    1948:	bf 4f       	sbci	r27, 0xFF	; 255
    194a:	8c 91       	ld	r24, X
    194c:	86 95       	lsr	r24
    194e:	8f 70       	andi	r24, 0x0F	; 15
    1950:	84 30       	cpi	r24, 0x04	; 4
    1952:	11 f0       	breq	.+4      	; 0x1958 <Timebase_DownCounter_Expired_Event+0x36>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1958:	e7 5a       	subi	r30, 0xA7	; 167
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	11 92       	st	Z+, r1
    195e:	11 92       	st	Z+, r1
    1960:	11 92       	st	Z+, r1
    1962:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1964:	10 82       	st	Z, r1
    1966:	11 82       	std	Z+1, r1	; 0x01
    1968:	12 82       	std	Z+2, r1	; 0x02
    196a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    196c:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    196e:	80 7e       	andi	r24, 0xE0	; 224
    1970:	8c 93       	st	X, r24
    1972:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1974:	08 95       	ret

00001976 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    197a:	c0 91 49 01 	lds	r28, 0x0149
    197e:	d0 91 4a 01 	lds	r29, 0x014A
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1986:	8d e0       	ldi	r24, 0x0D	; 13
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	28 9f       	mul	r18, r24
    198c:	f0 01       	movw	r30, r0
    198e:	29 9f       	mul	r18, r25
    1990:	f0 0d       	add	r31, r0
    1992:	38 9f       	mul	r19, r24
    1994:	f0 0d       	add	r31, r0
    1996:	11 24       	eor	r1, r1
    1998:	ec 0f       	add	r30, r28
    199a:	fd 1f       	adc	r31, r29
    199c:	e8 5a       	subi	r30, 0xA8	; 168
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 81       	ld	r24, Z
    19a2:	e8 55       	subi	r30, 0x58	; 88
    19a4:	f0 40       	sbci	r31, 0x00	; 0
    19a6:	80 fd       	sbrc	r24, 0
    19a8:	25 c0       	rjmp	.+74     	; 0x19f4 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    19aa:	e3 5a       	subi	r30, 0xA3	; 163
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	81 91       	ld	r24, Z+
    19b0:	91 91       	ld	r25, Z+
    19b2:	a1 91       	ld	r26, Z+
    19b4:	b1 91       	ld	r27, Z+
    19b6:	84 1b       	sub	r24, r20
    19b8:	95 0b       	sbc	r25, r21
    19ba:	a6 0b       	sbc	r26, r22
    19bc:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    19be:	b7 ff       	sbrs	r27, 7
    19c0:	05 c0       	rjmp	.+10     	; 0x19cc <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    19c2:	10 82       	st	Z, r1
    19c4:	11 82       	std	Z+1, r1	; 0x01
    19c6:	12 82       	std	Z+2, r1	; 0x02
    19c8:	13 82       	std	Z+3, r1	; 0x03
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    19cc:	80 83       	st	Z, r24
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	a2 83       	std	Z+2, r26	; 0x02
    19d2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    19d4:	8d e0       	ldi	r24, 0x0D	; 13
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	28 9f       	mul	r18, r24
    19da:	f0 01       	movw	r30, r0
    19dc:	29 9f       	mul	r18, r25
    19de:	f0 0d       	add	r31, r0
    19e0:	38 9f       	mul	r19, r24
    19e2:	f0 0d       	add	r31, r0
    19e4:	11 24       	eor	r1, r1
    19e6:	ec 0f       	add	r30, r28
    19e8:	fd 1f       	adc	r31, r29
    19ea:	e8 5a       	subi	r30, 0xA8	; 168
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	80 81       	ld	r24, Z
    19f0:	81 60       	ori	r24, 0x01	; 1
    19f2:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    19fa:	e0 91 49 01 	lds	r30, 0x0149
    19fe:	f0 91 4a 01 	lds	r31, 0x014A
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1a04:	2d e0       	ldi	r18, 0x0D	; 13
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	ac 01       	movw	r20, r24
    1a0a:	42 9f       	mul	r20, r18
    1a0c:	c0 01       	movw	r24, r0
    1a0e:	43 9f       	mul	r20, r19
    1a10:	90 0d       	add	r25, r0
    1a12:	52 9f       	mul	r21, r18
    1a14:	90 0d       	add	r25, r0
    1a16:	11 24       	eor	r1, r1
    1a18:	e8 0f       	add	r30, r24
    1a1a:	f9 1f       	adc	r31, r25
    1a1c:	df 01       	movw	r26, r30
    1a1e:	af 59       	subi	r26, 0x9F	; 159
    1a20:	bf 4f       	sbci	r27, 0xFF	; 255
    1a22:	e3 5a       	subi	r30, 0xA3	; 163
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	20 81       	ld	r18, Z
    1a28:	31 81       	ldd	r19, Z+1	; 0x01
    1a2a:	42 81       	ldd	r20, Z+2	; 0x02
    1a2c:	53 81       	ldd	r21, Z+3	; 0x03
    1a2e:	8d 91       	ld	r24, X+
    1a30:	9d 91       	ld	r25, X+
    1a32:	0d 90       	ld	r0, X+
    1a34:	bc 91       	ld	r27, X
    1a36:	a0 2d       	mov	r26, r0
    1a38:	28 1b       	sub	r18, r24
    1a3a:	39 0b       	sbc	r19, r25
    1a3c:	4a 0b       	sbc	r20, r26
    1a3e:	5b 0b       	sbc	r21, r27
    1a40:	57 ff       	sbrs	r21, 7
    1a42:	04 c0       	rjmp	.+8      	; 0x1a4c <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1a4c:	b9 01       	movw	r22, r18
    1a4e:	ca 01       	movw	r24, r20
    1a50:	08 95       	ret

00001a52 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    1a52:	cf 93       	push	r28
    1a54:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1a56:	c0 91 49 01 	lds	r28, 0x0149
    1a5a:	d0 91 4a 01 	lds	r29, 0x014A
    1a5e:	68 2f       	mov	r22, r24
    1a60:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1a62:	8d e0       	ldi	r24, 0x0D	; 13
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	68 9f       	mul	r22, r24
    1a68:	f0 01       	movw	r30, r0
    1a6a:	69 9f       	mul	r22, r25
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	78 9f       	mul	r23, r24
    1a70:	f0 0d       	add	r31, r0
    1a72:	11 24       	eor	r1, r1
    1a74:	ec 0f       	add	r30, r28
    1a76:	fd 1f       	adc	r31, r29
    1a78:	df 01       	movw	r26, r30
    1a7a:	af 59       	subi	r26, 0x9F	; 159
    1a7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7e:	e3 5a       	subi	r30, 0xA3	; 163
    1a80:	ff 4f       	sbci	r31, 0xFF	; 255
    1a82:	20 81       	ld	r18, Z
    1a84:	31 81       	ldd	r19, Z+1	; 0x01
    1a86:	42 81       	ldd	r20, Z+2	; 0x02
    1a88:	53 81       	ldd	r21, Z+3	; 0x03
    1a8a:	8d 91       	ld	r24, X+
    1a8c:	9d 91       	ld	r25, X+
    1a8e:	0d 90       	ld	r0, X+
    1a90:	bc 91       	ld	r27, X
    1a92:	a0 2d       	mov	r26, r0
    1a94:	28 1b       	sub	r18, r24
    1a96:	39 0b       	sbc	r19, r25
    1a98:	4a 0b       	sbc	r20, r26
    1a9a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1a9c:	57 fd       	sbrc	r21, 7
    1a9e:	07 c0       	rjmp	.+14     	; 0x1aae <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1aa0:	21 15       	cp	r18, r1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	41 05       	cpc	r20, r1
    1aa6:	51 05       	cpc	r21, r1
    1aa8:	11 f0       	breq	.+4      	; 0x1aae <Timebase_DownCounter_Period_Value_Expired+0x5c>
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <Timebase_DownCounter_Period_Value_Expired+0x84>
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	8d e0       	ldi	r24, 0x0D	; 13
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	ac 01       	movw	r20, r24
    1ab6:	64 9f       	mul	r22, r20
    1ab8:	c0 01       	movw	r24, r0
    1aba:	65 9f       	mul	r22, r21
    1abc:	90 0d       	add	r25, r0
    1abe:	74 9f       	mul	r23, r20
    1ac0:	90 0d       	add	r25, r0
    1ac2:	11 24       	eor	r1, r1
    1ac4:	c8 0f       	add	r28, r24
    1ac6:	d9 1f       	adc	r29, r25
    1ac8:	c8 5a       	subi	r28, 0xA8	; 168
    1aca:	df 4f       	sbci	r29, 0xFF	; 255
    1acc:	88 81       	ld	r24, Y
    1ace:	80 ff       	sbrs	r24, 0
    1ad0:	21 e0       	ldi	r18, 0x01	; 1
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1ad6:	82 2f       	mov	r24, r18
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1ade:	1f 93       	push	r17
    1ae0:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1ae2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <Timebase_DownCounter_Period_Value_Expired>
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	11 f0       	breq	.+4      	; 0x1aee <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	18 c0       	rjmp	.+48     	; 0x1b1e <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1aee:	e0 91 49 01 	lds	r30, 0x0149
    1af2:	f0 91 4a 01 	lds	r31, 0x014A
    1af6:	21 2f       	mov	r18, r17
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	8d e0       	ldi	r24, 0x0D	; 13
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	ac 01       	movw	r20, r24
    1b00:	24 9f       	mul	r18, r20
    1b02:	c0 01       	movw	r24, r0
    1b04:	25 9f       	mul	r18, r21
    1b06:	90 0d       	add	r25, r0
    1b08:	34 9f       	mul	r19, r20
    1b0a:	90 0d       	add	r25, r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	e8 0f       	add	r30, r24
    1b10:	f9 1f       	adc	r31, r25
    1b12:	e8 5a       	subi	r30, 0xA8	; 168
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	8e 7f       	andi	r24, 0xFE	; 254
    1b1a:	80 83       	st	Z, r24
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1b1e:	1f 91       	pop	r17
    1b20:	08 95       	ret

00001b22 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <Timebase_DownCounter_Update>
  }
}
    1b28:	08 95       	ret

00001b2a <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1b2a:	e0 91 49 01 	lds	r30, 0x0149
    1b2e:	f0 91 4a 01 	lds	r31, 0x014A
    1b32:	e7 5a       	subi	r30, 0xA7	; 167
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	11 92       	st	Z+, r1
    1b38:	11 92       	st	Z+, r1
    1b3a:	11 92       	st	Z+, r1
    1b3c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1b3e:	10 82       	st	Z, r1
    1b40:	11 82       	std	Z+1, r1	; 0x01
    1b42:	12 82       	std	Z+2, r1	; 0x02
    1b44:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1b46:	35 97       	sbiw	r30, 0x05	; 5
    1b48:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1b4a:	80 7e       	andi	r24, 0xE0	; 224
    1b4c:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    1b4e:	08 95       	ret

00001b50 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1b50:	e0 91 49 01 	lds	r30, 0x0149
    1b54:	f0 91 4a 01 	lds	r31, 0x014A
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 01       	movw	r18, r24
    1b5c:	44 e0       	ldi	r20, 0x04	; 4
    1b5e:	22 0f       	add	r18, r18
    1b60:	33 1f       	adc	r19, r19
    1b62:	4a 95       	dec	r20
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <Timebase_DownCounter_SS_Get_Status+0xe>
    1b66:	28 0f       	add	r18, r24
    1b68:	39 1f       	adc	r19, r25
    1b6a:	e2 0f       	add	r30, r18
    1b6c:	f3 1f       	adc	r31, r19
    1b6e:	e9 5b       	subi	r30, 0xB9	; 185
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1b76:	8f 70       	andi	r24, 0x0F	; 15
    1b78:	08 95       	ret

00001b7a <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1b7a:	e0 91 49 01 	lds	r30, 0x0149
    1b7e:	f0 91 4a 01 	lds	r31, 0x014A
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	9c 01       	movw	r18, r24
    1b86:	54 e0       	ldi	r21, 0x04	; 4
    1b88:	22 0f       	add	r18, r18
    1b8a:	33 1f       	adc	r19, r19
    1b8c:	5a 95       	dec	r21
    1b8e:	e1 f7       	brne	.-8      	; 0x1b88 <Timebase_DownCounter_SS_Set_Status+0xe>
    1b90:	28 0f       	add	r18, r24
    1b92:	39 1f       	adc	r19, r25
    1b94:	e2 0f       	add	r30, r18
    1b96:	f3 1f       	adc	r31, r19
    1b98:	e9 5b       	subi	r30, 0xB9	; 185
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	6f 70       	andi	r22, 0x0F	; 15
    1b9e:	66 0f       	add	r22, r22
    1ba0:	80 81       	ld	r24, Z
    1ba2:	81 7e       	andi	r24, 0xE1	; 225
    1ba4:	86 2b       	or	r24, r22
    1ba6:	80 83       	st	Z, r24
}
    1ba8:	08 95       	ret

00001baa <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1baa:	e0 91 49 01 	lds	r30, 0x0149
    1bae:	f0 91 4a 01 	lds	r31, 0x014A
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	64 e0       	ldi	r22, 0x04	; 4
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	6a 95       	dec	r22
    1bbe:	e1 f7       	brne	.-8      	; 0x1bb8 <Timebase_DownCounter_SS_Get_Value+0xe>
    1bc0:	28 0f       	add	r18, r24
    1bc2:	39 1f       	adc	r19, r25
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	e0 5b       	subi	r30, 0xB0	; 176
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	08 95       	ret

00001bd6 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1bd6:	e0 91 49 01 	lds	r30, 0x0149
    1bda:	f0 91 4a 01 	lds	r31, 0x014A
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9c 01       	movw	r18, r24
    1be2:	a4 e0       	ldi	r26, 0x04	; 4
    1be4:	22 0f       	add	r18, r18
    1be6:	33 1f       	adc	r19, r19
    1be8:	aa 95       	dec	r26
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <Timebase_DownCounter_SS_Set_Value+0xe>
    1bec:	28 0f       	add	r18, r24
    1bee:	39 1f       	adc	r19, r25
    1bf0:	e2 0f       	add	r30, r18
    1bf2:	f3 1f       	adc	r31, r19
    1bf4:	e0 5b       	subi	r30, 0xB0	; 176
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	40 83       	st	Z, r20
    1bfa:	51 83       	std	Z+1, r21	; 0x01
    1bfc:	62 83       	std	Z+2, r22	; 0x02
    1bfe:	73 83       	std	Z+3, r23	; 0x03
}
    1c00:	08 95       	ret

00001c02 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1c02:	e0 91 49 01 	lds	r30, 0x0149
    1c06:	f0 91 4a 01 	lds	r31, 0x014A
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9c 01       	movw	r18, r24
    1c0e:	b4 e0       	ldi	r27, 0x04	; 4
    1c10:	22 0f       	add	r18, r18
    1c12:	33 1f       	adc	r19, r19
    1c14:	ba 95       	dec	r27
    1c16:	e1 f7       	brne	.-8      	; 0x1c10 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1c18:	28 0f       	add	r18, r24
    1c1a:	39 1f       	adc	r19, r25
    1c1c:	e2 0f       	add	r30, r18
    1c1e:	f3 1f       	adc	r31, r19
    1c20:	e8 5b       	subi	r30, 0xB8	; 184
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1c28:	82 81       	ldd	r24, Z+2	; 0x02
    1c2a:	93 81       	ldd	r25, Z+3	; 0x03
    1c2c:	08 95       	ret

00001c2e <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1c2e:	e0 91 49 01 	lds	r30, 0x0149
    1c32:	f0 91 4a 01 	lds	r31, 0x014A
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	9c 01       	movw	r18, r24
    1c3a:	44 e0       	ldi	r20, 0x04	; 4
    1c3c:	22 0f       	add	r18, r18
    1c3e:	33 1f       	adc	r19, r19
    1c40:	4a 95       	dec	r20
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1c44:	28 0f       	add	r18, r24
    1c46:	39 1f       	adc	r19, r25
    1c48:	e2 0f       	add	r30, r18
    1c4a:	f3 1f       	adc	r31, r19
    1c4c:	e4 5b       	subi	r30, 0xB4	; 180
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	60 81       	ld	r22, Z
    1c52:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1c54:	82 81       	ldd	r24, Z+2	; 0x02
    1c56:	93 81       	ldd	r25, Z+3	; 0x03
    1c58:	08 95       	ret

00001c5a <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1c5a:	e0 91 49 01 	lds	r30, 0x0149
    1c5e:	f0 91 4a 01 	lds	r31, 0x014A
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9c 01       	movw	r18, r24
    1c66:	a4 e0       	ldi	r26, 0x04	; 4
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	aa 95       	dec	r26
    1c6e:	e1 f7       	brne	.-8      	; 0x1c68 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1c70:	28 0f       	add	r18, r24
    1c72:	39 1f       	adc	r19, r25
    1c74:	e2 0f       	add	r30, r18
    1c76:	f3 1f       	adc	r31, r19
    1c78:	e8 5b       	subi	r30, 0xB8	; 184
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	40 83       	st	Z, r20
    1c7e:	51 83       	std	Z+1, r21	; 0x01
    1c80:	62 83       	std	Z+2, r22	; 0x02
    1c82:	73 83       	std	Z+3, r23	; 0x03
}
    1c84:	08 95       	ret

00001c86 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1c86:	e0 91 49 01 	lds	r30, 0x0149
    1c8a:	f0 91 4a 01 	lds	r31, 0x014A
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9c 01       	movw	r18, r24
    1c92:	b4 e0       	ldi	r27, 0x04	; 4
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	ba 95       	dec	r27
    1c9a:	e1 f7       	brne	.-8      	; 0x1c94 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1c9c:	28 0f       	add	r18, r24
    1c9e:	39 1f       	adc	r19, r25
    1ca0:	e2 0f       	add	r30, r18
    1ca2:	f3 1f       	adc	r31, r19
    1ca4:	e4 5b       	subi	r30, 0xB4	; 180
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	40 83       	st	Z, r20
    1caa:	51 83       	std	Z+1, r21	; 0x01
    1cac:	62 83       	std	Z+2, r22	; 0x02
    1cae:	73 83       	std	Z+3, r23	; 0x03
}
    1cb0:	08 95       	ret

00001cb2 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1cb2:	e0 91 49 01 	lds	r30, 0x0149
    1cb6:	f0 91 4a 01 	lds	r31, 0x014A
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	9c 01       	movw	r18, r24
    1cbe:	44 e0       	ldi	r20, 0x04	; 4
    1cc0:	22 0f       	add	r18, r18
    1cc2:	33 1f       	adc	r19, r19
    1cc4:	4a 95       	dec	r20
    1cc6:	e1 f7       	brne	.-8      	; 0x1cc0 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1cc8:	28 0f       	add	r18, r24
    1cca:	39 1f       	adc	r19, r25
    1ccc:	e2 0f       	add	r30, r18
    1cce:	f3 1f       	adc	r31, r19
    1cd0:	ec 5a       	subi	r30, 0xAC	; 172
    1cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd4:	60 81       	ld	r22, Z
    1cd6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1cd8:	82 81       	ldd	r24, Z+2	; 0x02
    1cda:	93 81       	ldd	r25, Z+3	; 0x03
    1cdc:	08 95       	ret

00001cde <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1cde:	e0 91 49 01 	lds	r30, 0x0149
    1ce2:	f0 91 4a 01 	lds	r31, 0x014A
    1ce6:	28 2f       	mov	r18, r24
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1cea:	77 ff       	sbrs	r23, 7
    1cec:	11 c0       	rjmp	.+34     	; 0x1d10 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1cee:	c9 01       	movw	r24, r18
    1cf0:	b4 e0       	ldi	r27, 0x04	; 4
    1cf2:	88 0f       	add	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	ba 95       	dec	r27
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	e8 0f       	add	r30, r24
    1d00:	f9 1f       	adc	r31, r25
    1d02:	ec 5a       	subi	r30, 0xAC	; 172
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	10 82       	st	Z, r1
    1d08:	11 82       	std	Z+1, r1	; 0x01
    1d0a:	12 82       	std	Z+2, r1	; 0x02
    1d0c:	13 82       	std	Z+3, r1	; 0x03
    1d0e:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1d10:	c9 01       	movw	r24, r18
    1d12:	a4 e0       	ldi	r26, 0x04	; 4
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	aa 95       	dec	r26
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	e8 0f       	add	r30, r24
    1d22:	f9 1f       	adc	r31, r25
    1d24:	ec 5a       	subi	r30, 0xAC	; 172
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	40 83       	st	Z, r20
    1d2a:	51 83       	std	Z+1, r21	; 0x01
    1d2c:	62 83       	std	Z+2, r22	; 0x02
    1d2e:	73 83       	std	Z+3, r23	; 0x03
    1d30:	08 95       	ret

00001d32 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1d32:	e0 91 49 01 	lds	r30, 0x0149
    1d36:	f0 91 4a 01 	lds	r31, 0x014A
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9c 01       	movw	r18, r24
    1d3e:	44 e0       	ldi	r20, 0x04	; 4
    1d40:	22 0f       	add	r18, r18
    1d42:	33 1f       	adc	r19, r19
    1d44:	4a 95       	dec	r20
    1d46:	e1 f7       	brne	.-8      	; 0x1d40 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1d48:	28 0f       	add	r18, r24
    1d4a:	39 1f       	adc	r19, r25
    1d4c:	e2 0f       	add	r30, r18
    1d4e:	f3 1f       	adc	r31, r19
    1d50:	e9 5b       	subi	r30, 0xB9	; 185
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1d56:	81 70       	andi	r24, 0x01	; 1
    1d58:	08 95       	ret

00001d5a <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1d5a:	e0 91 49 01 	lds	r30, 0x0149
    1d5e:	f0 91 4a 01 	lds	r31, 0x014A
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	9c 01       	movw	r18, r24
    1d66:	54 e0       	ldi	r21, 0x04	; 4
    1d68:	22 0f       	add	r18, r18
    1d6a:	33 1f       	adc	r19, r19
    1d6c:	5a 95       	dec	r21
    1d6e:	e1 f7       	brne	.-8      	; 0x1d68 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1d70:	28 0f       	add	r18, r24
    1d72:	39 1f       	adc	r19, r25
    1d74:	e2 0f       	add	r30, r18
    1d76:	f3 1f       	adc	r31, r19
    1d78:	e9 5b       	subi	r30, 0xB9	; 185
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	80 81       	ld	r24, Z
    1d7e:	81 60       	ori	r24, 0x01	; 1
    1d80:	80 83       	st	Z, r24
}
    1d82:	08 95       	ret

00001d84 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1d84:	e0 91 49 01 	lds	r30, 0x0149
    1d88:	f0 91 4a 01 	lds	r31, 0x014A
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 01       	movw	r18, r24
    1d90:	64 e0       	ldi	r22, 0x04	; 4
    1d92:	22 0f       	add	r18, r18
    1d94:	33 1f       	adc	r19, r19
    1d96:	6a 95       	dec	r22
    1d98:	e1 f7       	brne	.-8      	; 0x1d92 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1d9a:	28 0f       	add	r18, r24
    1d9c:	39 1f       	adc	r19, r25
    1d9e:	e2 0f       	add	r30, r18
    1da0:	f3 1f       	adc	r31, r19
    1da2:	e9 5b       	subi	r30, 0xB9	; 185
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	8e 7f       	andi	r24, 0xFE	; 254
    1daa:	80 83       	st	Z, r24
}
    1dac:	08 95       	ret

00001dae <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1dae:	e0 91 49 01 	lds	r30, 0x0149
    1db2:	f0 91 4a 01 	lds	r31, 0x014A
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9c 01       	movw	r18, r24
    1dba:	74 e0       	ldi	r23, 0x04	; 4
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	7a 95       	dec	r23
    1dc2:	e1 f7       	brne	.-8      	; 0x1dbc <Timebase_DownCounter_SS_Reset+0xe>
    1dc4:	28 0f       	add	r18, r24
    1dc6:	39 1f       	adc	r19, r25
    1dc8:	e2 0f       	add	r30, r18
    1dca:	f3 1f       	adc	r31, r19
    1dcc:	e4 5b       	subi	r30, 0xB4	; 180
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	10 82       	st	Z, r1
    1dd2:	11 82       	std	Z+1, r1	; 0x01
    1dd4:	12 82       	std	Z+2, r1	; 0x02
    1dd6:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1dd8:	12 92       	st	-Z, r1
    1dda:	12 92       	st	-Z, r1
    1ddc:	12 92       	st	-Z, r1
    1dde:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1de0:	38 96       	adiw	r30, 0x08	; 8
    1de2:	10 82       	st	Z, r1
    1de4:	11 82       	std	Z+1, r1	; 0x01
    1de6:	12 82       	std	Z+2, r1	; 0x02
    1de8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1dea:	39 97       	sbiw	r30, 0x09	; 9
    1dec:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1dee:	80 7e       	andi	r24, 0xE0	; 224
    1df0:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1df2:	08 95       	ret

00001df4 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1df4:	e0 91 49 01 	lds	r30, 0x0149
    1df8:	f0 91 4a 01 	lds	r31, 0x014A
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9c 01       	movw	r18, r24
    1e00:	a4 e0       	ldi	r26, 0x04	; 4
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	aa 95       	dec	r26
    1e08:	e1 f7       	brne	.-8      	; 0x1e02 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1e0a:	28 0f       	add	r18, r24
    1e0c:	39 1f       	adc	r19, r25
    1e0e:	e2 0f       	add	r30, r18
    1e10:	f3 1f       	adc	r31, r19
    1e12:	e4 5b       	subi	r30, 0xB4	; 180
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	10 82       	st	Z, r1
    1e18:	11 82       	std	Z+1, r1	; 0x01
    1e1a:	12 82       	std	Z+2, r1	; 0x02
    1e1c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e1e:	12 92       	st	-Z, r1
    1e20:	12 92       	st	-Z, r1
    1e22:	12 92       	st	-Z, r1
    1e24:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e26:	38 96       	adiw	r30, 0x08	; 8
    1e28:	10 82       	st	Z, r1
    1e2a:	11 82       	std	Z+1, r1	; 0x01
    1e2c:	12 82       	std	Z+2, r1	; 0x02
    1e2e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e30:	39 97       	sbiw	r30, 0x09	; 9
    1e32:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e34:	80 7e       	andi	r24, 0xE0	; 224
    1e36:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1e38:	08 95       	ret

00001e3a <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e3a:	e0 91 49 01 	lds	r30, 0x0149
    1e3e:	f0 91 4a 01 	lds	r31, 0x014A
    1e42:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1e44:	9c 01       	movw	r18, r24
    1e46:	b4 e0       	ldi	r27, 0x04	; 4
    1e48:	22 0f       	add	r18, r18
    1e4a:	33 1f       	adc	r19, r19
    1e4c:	ba 95       	dec	r27
    1e4e:	e1 f7       	brne	.-8      	; 0x1e48 <Timebase_DownCounter_SS_Start+0xe>
    1e50:	28 0f       	add	r18, r24
    1e52:	39 1f       	adc	r19, r25
    1e54:	e2 0f       	add	r30, r18
    1e56:	f3 1f       	adc	r31, r19
    1e58:	e9 5b       	subi	r30, 0xB9	; 185
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	90 81       	ld	r25, Z
    1e5e:	89 2f       	mov	r24, r25
    1e60:	86 95       	lsr	r24
    1e62:	8f 70       	andi	r24, 0x0F	; 15
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e68:	91 7e       	andi	r25, 0xE1	; 225
    1e6a:	92 60       	ori	r25, 0x02	; 2
    1e6c:	90 83       	st	Z, r25
    1e6e:	08 95       	ret

00001e70 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e70:	e0 91 49 01 	lds	r30, 0x0149
    1e74:	f0 91 4a 01 	lds	r31, 0x014A
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1e7a:	9c 01       	movw	r18, r24
    1e7c:	44 e0       	ldi	r20, 0x04	; 4
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	4a 95       	dec	r20
    1e84:	e1 f7       	brne	.-8      	; 0x1e7e <Timebase_DownCounter_SS_Stop+0xe>
    1e86:	28 0f       	add	r18, r24
    1e88:	39 1f       	adc	r19, r25
    1e8a:	e2 0f       	add	r30, r18
    1e8c:	f3 1f       	adc	r31, r19
    1e8e:	e9 5b       	subi	r30, 0xB9	; 185
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	90 81       	ld	r25, Z
    1e94:	89 2f       	mov	r24, r25
    1e96:	86 95       	lsr	r24
    1e98:	8f 70       	andi	r24, 0x0F	; 15
    1e9a:	82 30       	cpi	r24, 0x02	; 2
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e9e:	91 7e       	andi	r25, 0xE1	; 225
    1ea0:	94 60       	ori	r25, 0x04	; 4
    1ea2:	90 83       	st	Z, r25
    1ea4:	08 95       	ret

00001ea6 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1ea6:	2f 92       	push	r2
    1ea8:	3f 92       	push	r3
    1eaa:	4f 92       	push	r4
    1eac:	5f 92       	push	r5
    1eae:	6f 92       	push	r6
    1eb0:	7f 92       	push	r7
    1eb2:	8f 92       	push	r8
    1eb4:	9f 92       	push	r9
    1eb6:	af 92       	push	r10
    1eb8:	bf 92       	push	r11
    1eba:	cf 92       	push	r12
    1ebc:	df 92       	push	r13
    1ebe:	ef 92       	push	r14
    1ec0:	ff 92       	push	r15
    1ec2:	0f 93       	push	r16
    1ec4:	1f 93       	push	r17
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <Timebase_DownCounter_SS_Set_Securely+0x26>
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <Timebase_DownCounter_SS_Set_Securely+0x28>
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	4a 01       	movw	r8, r20
    1ed4:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ed6:	20 91 49 01 	lds	r18, 0x0149
    1eda:	30 91 4a 01 	lds	r19, 0x014A
    1ede:	3c 83       	std	Y+4, r19	; 0x04
    1ee0:	2b 83       	std	Y+3, r18	; 0x03
    1ee2:	a8 2f       	mov	r26, r24
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	ba 83       	std	Y+2, r27	; 0x02
    1ee8:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1eea:	fd 01       	movw	r30, r26
    1eec:	64 e0       	ldi	r22, 0x04	; 4
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	6a 95       	dec	r22
    1ef4:	e1 f7       	brne	.-8      	; 0x1eee <Timebase_DownCounter_SS_Set_Securely+0x48>
    1ef6:	ea 0f       	add	r30, r26
    1ef8:	fb 1f       	adc	r31, r27
    1efa:	e2 0f       	add	r30, r18
    1efc:	f3 1f       	adc	r31, r19
    1efe:	e9 5b       	subi	r30, 0xB9	; 185
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	e7 54       	subi	r30, 0x47	; 71
    1f06:	f0 40       	sbci	r31, 0x00	; 0
    1f08:	86 95       	lsr	r24
    1f0a:	8f 70       	andi	r24, 0x0F	; 15
    1f0c:	09 f0       	breq	.+2      	; 0x1f10 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1f0e:	76 c0       	rjmp	.+236    	; 0x1ffc <Timebase_DownCounter_SS_Set_Securely+0x156>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f10:	e0 5b       	subi	r30, 0xB0	; 176
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 82       	st	Z, r8
    1f16:	91 82       	std	Z+1, r9	; 0x01
    1f18:	a2 82       	std	Z+2, r10	; 0x02
    1f1a:	b3 82       	std	Z+3, r11	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1f1c:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    1f1e:	f9 01       	movw	r30, r18
    1f20:	c0 84       	ldd	r12, Z+8	; 0x08
    1f22:	d1 84       	ldd	r13, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1f24:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1f26:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1f28:	22 84       	ldd	r2, Z+10	; 0x0a
    1f2a:	33 84       	ldd	r3, Z+11	; 0x0b
    1f2c:	44 84       	ldd	r4, Z+12	; 0x0c
    1f2e:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1f30:	78 94       	sei
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1f32:	21 81       	ldd	r18, Z+1	; 0x01
    1f34:	32 81       	ldd	r19, Z+2	; 0x02
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	50 e0       	ldi	r21, 0x00	; 0
    1f3a:	c5 01       	movw	r24, r10
    1f3c:	b4 01       	movw	r22, r8
    1f3e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    1f42:	7b 01       	movw	r14, r22
    1f44:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1f46:	ab 81       	ldd	r26, Y+3	; 0x03
    1f48:	bc 81       	ldd	r27, Y+4	; 0x04
    1f4a:	11 96       	adiw	r26, 0x01	; 1
    1f4c:	2d 91       	ld	r18, X+
    1f4e:	3c 91       	ld	r19, X
    1f50:	12 97       	sbiw	r26, 0x02	; 2
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	c5 01       	movw	r24, r10
    1f58:	b4 01       	movw	r22, r8
    1f5a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    1f5e:	c9 01       	movw	r24, r18
    1f60:	da 01       	movw	r26, r20
    1f62:	3c 01       	movw	r6, r24
    1f64:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1f66:	56 01       	movw	r10, r12
    1f68:	cc 24       	eor	r12, r12
    1f6a:	dd 24       	eor	r13, r13
    1f6c:	ae 0c       	add	r10, r14
    1f6e:	bf 1c       	adc	r11, r15
    1f70:	c0 1e       	adc	r12, r16
    1f72:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1f74:	eb 81       	ldd	r30, Y+3	; 0x03
    1f76:	fc 81       	ldd	r31, Y+4	; 0x04
    1f78:	81 81       	ldd	r24, Z+1	; 0x01
    1f7a:	92 81       	ldd	r25, Z+2	; 0x02
    1f7c:	a0 e0       	ldi	r26, 0x00	; 0
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	a8 16       	cp	r10, r24
    1f82:	b9 06       	cpc	r11, r25
    1f84:	ca 06       	cpc	r12, r26
    1f86:	db 06       	cpc	r13, r27
    1f88:	94 f0       	brlt	.+36     	; 0x1fae <Timebase_DownCounter_SS_Set_Securely+0x108>
	  sec_val += 1;
    1f8a:	08 94       	sec
    1f8c:	61 1c       	adc	r6, r1
    1f8e:	71 1c       	adc	r7, r1
    1f90:	81 1c       	adc	r8, r1
    1f92:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1f94:	21 81       	ldd	r18, Z+1	; 0x01
    1f96:	32 81       	ldd	r19, Z+2	; 0x02
    1f98:	40 e0       	ldi	r20, 0x00	; 0
    1f9a:	50 e0       	ldi	r21, 0x00	; 0
    1f9c:	c6 01       	movw	r24, r12
    1f9e:	b5 01       	movw	r22, r10
    1fa0:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	da 01       	movw	r26, r20
    1faa:	5c 01       	movw	r10, r24
    1fac:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fae:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb2:	54 e0       	ldi	r21, 0x04	; 4
    1fb4:	ee 0f       	add	r30, r30
    1fb6:	ff 1f       	adc	r31, r31
    1fb8:	5a 95       	dec	r21
    1fba:	e1 f7       	brne	.-8      	; 0x1fb4 <Timebase_DownCounter_SS_Set_Securely+0x10e>
    1fbc:	29 81       	ldd	r18, Y+1	; 0x01
    1fbe:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc0:	e2 0f       	add	r30, r18
    1fc2:	f3 1f       	adc	r31, r19
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc8:	e8 0f       	add	r30, r24
    1fca:	f9 1f       	adc	r31, r25
    1fcc:	e8 5b       	subi	r30, 0xB8	; 184
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	26 0c       	add	r2, r6
    1fd2:	37 1c       	adc	r3, r7
    1fd4:	48 1c       	adc	r4, r8
    1fd6:	59 1c       	adc	r5, r9
    1fd8:	21 92       	st	Z+, r2
    1fda:	31 92       	st	Z+, r3
    1fdc:	41 92       	st	Z+, r4
    1fde:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1fe0:	a0 82       	st	Z, r10
    1fe2:	b1 82       	std	Z+1, r11	; 0x01
    1fe4:	c2 82       	std	Z+2, r12	; 0x02
    1fe6:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1fe8:	35 97       	sbiw	r30, 0x05	; 5
    1fea:	90 81       	ld	r25, Z
    1fec:	89 2f       	mov	r24, r25
    1fee:	86 95       	lsr	r24
    1ff0:	8f 70       	andi	r24, 0x0F	; 15
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <Timebase_DownCounter_SS_Set_Securely+0x156>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ff6:	91 7e       	andi	r25, 0xE1	; 225
    1ff8:	92 60       	ori	r25, 0x02	; 2
    1ffa:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	bf 90       	pop	r11
    2016:	af 90       	pop	r10
    2018:	9f 90       	pop	r9
    201a:	8f 90       	pop	r8
    201c:	7f 90       	pop	r7
    201e:	6f 90       	pop	r6
    2020:	5f 90       	pop	r5
    2022:	4f 90       	pop	r4
    2024:	3f 90       	pop	r3
    2026:	2f 90       	pop	r2
    2028:	08 95       	ret

0000202a <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    202a:	e0 91 49 01 	lds	r30, 0x0149
    202e:	f0 91 4a 01 	lds	r31, 0x014A
    2032:	a8 2f       	mov	r26, r24
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	9d 01       	movw	r18, r26
    2038:	94 e0       	ldi	r25, 0x04	; 4
    203a:	22 0f       	add	r18, r18
    203c:	33 1f       	adc	r19, r19
    203e:	9a 95       	dec	r25
    2040:	e1 f7       	brne	.-8      	; 0x203a <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    2042:	2a 0f       	add	r18, r26
    2044:	3b 1f       	adc	r19, r27
    2046:	e2 0f       	add	r30, r18
    2048:	f3 1f       	adc	r31, r19
    204a:	e4 5b       	subi	r30, 0xB4	; 180
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	10 82       	st	Z, r1
    2050:	11 82       	std	Z+1, r1	; 0x01
    2052:	12 82       	std	Z+2, r1	; 0x02
    2054:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2056:	12 92       	st	-Z, r1
    2058:	12 92       	st	-Z, r1
    205a:	12 92       	st	-Z, r1
    205c:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    205e:	38 96       	adiw	r30, 0x08	; 8
    2060:	10 82       	st	Z, r1
    2062:	11 82       	std	Z+1, r1	; 0x01
    2064:	12 82       	std	Z+2, r1	; 0x02
    2066:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2068:	39 97       	sbiw	r30, 0x09	; 9
    206a:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    206c:	90 7e       	andi	r25, 0xE0	; 224
    206e:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2070:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <Timebase_DownCounter_SS_Set_Securely>
} 
    2074:	08 95       	ret

00002076 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    2076:	4f 92       	push	r4
    2078:	5f 92       	push	r5
    207a:	6f 92       	push	r6
    207c:	7f 92       	push	r7
    207e:	8f 92       	push	r8
    2080:	9f 92       	push	r9
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <Timebase_DownCounter_SS_Update+0x22>
    2098:	00 d0       	rcall	.+0      	; 0x209a <Timebase_DownCounter_SS_Update+0x24>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    209e:	60 90 49 01 	lds	r6, 0x0149
    20a2:	70 90 4a 01 	lds	r7, 0x014A
    20a6:	c8 2e       	mov	r12, r24
    20a8:	dd 24       	eor	r13, r13
    20aa:	f6 01       	movw	r30, r12
    20ac:	54 e0       	ldi	r21, 0x04	; 4
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	5a 95       	dec	r21
    20b4:	e1 f7       	brne	.-8      	; 0x20ae <Timebase_DownCounter_SS_Update+0x38>
    20b6:	ec 0d       	add	r30, r12
    20b8:	fd 1d       	adc	r31, r13
    20ba:	e6 0d       	add	r30, r6
    20bc:	f7 1d       	adc	r31, r7
    20be:	e9 5b       	subi	r30, 0xB9	; 185
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	e0 81       	ld	r30, Z
    20c4:	e6 95       	lsr	r30
    20c6:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    20c8:	e1 30       	cpi	r30, 0x01	; 1
    20ca:	09 f0       	breq	.+2      	; 0x20ce <Timebase_DownCounter_SS_Update+0x58>
    20cc:	75 c0       	rjmp	.+234    	; 0x21b8 <Timebase_DownCounter_SS_Update+0x142>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    20ce:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    20d0:	d3 01       	movw	r26, r6
    20d2:	18 96       	adiw	r26, 0x08	; 8
    20d4:	8d 91       	ld	r24, X+
    20d6:	9c 91       	ld	r25, X
    20d8:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    20da:	78 94       	sei
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    20dc:	4c 01       	movw	r8, r24
    20de:	aa 24       	eor	r10, r10
    20e0:	bb 24       	eor	r11, r11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    20e2:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    20e4:	f3 01       	movw	r30, r6
    20e6:	82 85       	ldd	r24, Z+10	; 0x0a
    20e8:	93 85       	ldd	r25, Z+11	; 0x0b
    20ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    20ec:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    20ee:	78 94       	sei
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    20f0:	f6 01       	movw	r30, r12
    20f2:	44 e0       	ldi	r20, 0x04	; 4
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	4a 95       	dec	r20
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <Timebase_DownCounter_SS_Update+0x7e>
    20fc:	ec 0d       	add	r30, r12
    20fe:	fd 1d       	adc	r31, r13
    2100:	e6 0d       	add	r30, r6
    2102:	f7 1d       	adc	r31, r7
    2104:	e8 5b       	subi	r30, 0xB8	; 184
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	e0 80       	ld	r14, Z
    210a:	f1 80       	ldd	r15, Z+1	; 0x01
    210c:	02 81       	ldd	r16, Z+2	; 0x02
    210e:	13 81       	ldd	r17, Z+3	; 0x03
    2110:	e8 1a       	sub	r14, r24
    2112:	f9 0a       	sbc	r15, r25
    2114:	0a 0b       	sbc	r16, r26
    2116:	1b 0b       	sbc	r17, r27
    2118:	17 ff       	sbrs	r17, 7
    211a:	03 c0       	rjmp	.+6      	; 0x2122 <Timebase_DownCounter_SS_Update+0xac>
    211c:	ee 24       	eor	r14, r14
    211e:	ff 24       	eor	r15, r15
    2120:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    2122:	d3 01       	movw	r26, r6
    2124:	11 96       	adiw	r26, 0x01	; 1
    2126:	2d 91       	ld	r18, X+
    2128:	3c 91       	ld	r19, X
    212a:	12 97       	sbiw	r26, 0x02	; 2
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	50 e0       	ldi	r21, 0x00	; 0
    2130:	c8 01       	movw	r24, r16
    2132:	b7 01       	movw	r22, r14
    2134:	0e 94 14 13 	call	0x2628	; 0x2628 <__mulsi3>
	temp_s += temp_ss;
    2138:	f6 01       	movw	r30, r12
    213a:	34 e0       	ldi	r19, 0x04	; 4
    213c:	ee 0f       	add	r30, r30
    213e:	ff 1f       	adc	r31, r31
    2140:	3a 95       	dec	r19
    2142:	e1 f7       	brne	.-8      	; 0x213c <Timebase_DownCounter_SS_Update+0xc6>
    2144:	ec 0d       	add	r30, r12
    2146:	fd 1d       	adc	r31, r13
    2148:	e6 0d       	add	r30, r6
    214a:	f7 1d       	adc	r31, r7
    214c:	8f 01       	movw	r16, r30
    214e:	04 5b       	subi	r16, 0xB4	; 180
    2150:	1f 4f       	sbci	r17, 0xFF	; 255
    2152:	d8 01       	movw	r26, r16
    2154:	2d 91       	ld	r18, X+
    2156:	3d 91       	ld	r19, X+
    2158:	4d 91       	ld	r20, X+
    215a:	5c 91       	ld	r21, X
    215c:	28 19       	sub	r18, r8
    215e:	39 09       	sbc	r19, r9
    2160:	4a 09       	sbc	r20, r10
    2162:	5b 09       	sbc	r21, r11
    2164:	26 0f       	add	r18, r22
    2166:	37 1f       	adc	r19, r23
    2168:	48 1f       	adc	r20, r24
    216a:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    216c:	cf 01       	movw	r24, r30
    216e:	80 5b       	subi	r24, 0xB0	; 176
    2170:	9f 4f       	sbci	r25, 0xFF	; 255
    2172:	dc 01       	movw	r26, r24
    2174:	2d 93       	st	X+, r18
    2176:	3d 93       	st	X+, r19
    2178:	4d 93       	st	X+, r20
    217a:	5c 93       	st	X, r21
    217c:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    217e:	12 16       	cp	r1, r18
    2180:	13 06       	cpc	r1, r19
    2182:	14 06       	cpc	r1, r20
    2184:	15 06       	cpc	r1, r21
    2186:	0c f4       	brge	.+2      	; 0x218a <Timebase_DownCounter_SS_Update+0x114>
    2188:	6a c0       	rjmp	.+212    	; 0x225e <Timebase_DownCounter_SS_Update+0x1e8>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    218a:	d8 01       	movw	r26, r16
    218c:	1d 92       	st	X+, r1
    218e:	1d 92       	st	X+, r1
    2190:	1d 92       	st	X+, r1
    2192:	1c 92       	st	X, r1
    2194:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2196:	e8 5b       	subi	r30, 0xB8	; 184
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	10 82       	st	Z, r1
    219c:	11 82       	std	Z+1, r1	; 0x01
    219e:	12 82       	std	Z+2, r1	; 0x02
    21a0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21a2:	dc 01       	movw	r26, r24
    21a4:	1d 92       	st	X+, r1
    21a6:	1d 92       	st	X+, r1
    21a8:	1d 92       	st	X+, r1
    21aa:	1c 92       	st	X, r1
    21ac:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    21ae:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    21b0:	80 7e       	andi	r24, 0xE0	; 224
    21b2:	88 60       	ori	r24, 0x08	; 8
    21b4:	80 83       	st	Z, r24
    21b6:	53 c0       	rjmp	.+166    	; 0x225e <Timebase_DownCounter_SS_Update+0x1e8>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    21b8:	e2 30       	cpi	r30, 0x02	; 2
    21ba:	09 f0       	breq	.+2      	; 0x21be <Timebase_DownCounter_SS_Update+0x148>
    21bc:	50 c0       	rjmp	.+160    	; 0x225e <Timebase_DownCounter_SS_Update+0x1e8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    21be:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    21c0:	f3 01       	movw	r30, r6
    21c2:	40 84       	ldd	r4, Z+8	; 0x08
    21c4:	51 84       	ldd	r5, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    21c6:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    21c8:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    21ca:	d3 01       	movw	r26, r6
    21cc:	1a 96       	adiw	r26, 0x0a	; 10
    21ce:	8d 90       	ld	r8, X+
    21d0:	9d 90       	ld	r9, X+
    21d2:	ad 90       	ld	r10, X+
    21d4:	bc 90       	ld	r11, X
    21d6:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    21d8:	78 94       	sei
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    21da:	86 01       	movw	r16, r12
    21dc:	24 e0       	ldi	r18, 0x04	; 4
    21de:	00 0f       	add	r16, r16
    21e0:	11 1f       	adc	r17, r17
    21e2:	2a 95       	dec	r18
    21e4:	e1 f7       	brne	.-8      	; 0x21de <Timebase_DownCounter_SS_Update+0x168>
    21e6:	0c 0d       	add	r16, r12
    21e8:	1d 1d       	adc	r17, r13
    21ea:	06 0d       	add	r16, r6
    21ec:	17 1d       	adc	r17, r7
    21ee:	00 5b       	subi	r16, 0xB0	; 176
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	d8 01       	movw	r26, r16
    21f4:	8d 91       	ld	r24, X+
    21f6:	9d 91       	ld	r25, X+
    21f8:	0d 90       	ld	r0, X+
    21fa:	bc 91       	ld	r27, X
    21fc:	a0 2d       	mov	r26, r0
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	9a 83       	std	Y+2, r25	; 0x02
    2202:	ab 83       	std	Y+3, r26	; 0x03
    2204:	bc 83       	std	Y+4, r27	; 0x04
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    2206:	f3 01       	movw	r30, r6
    2208:	21 81       	ldd	r18, Z+1	; 0x01
    220a:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    220c:	c1 80       	ldd	r12, Z+1	; 0x01
    220e:	d2 80       	ldd	r13, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2210:	08 50       	subi	r16, 0x08	; 8
    2212:	10 40       	sbci	r17, 0x00	; 0
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    2220:	82 0e       	add	r8, r18
    2222:	93 1e       	adc	r9, r19
    2224:	a4 1e       	adc	r10, r20
    2226:	b5 1e       	adc	r11, r21
    2228:	d8 01       	movw	r26, r16
    222a:	8d 92       	st	X+, r8
    222c:	9d 92       	st	X+, r9
    222e:	ad 92       	st	X+, r10
    2230:	bd 92       	st	X+, r11
    2232:	8d 01       	movw	r16, r26
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2234:	ee 24       	eor	r14, r14
    2236:	ff 24       	eor	r15, r15
    2238:	69 81       	ldd	r22, Y+1	; 0x01
    223a:	7a 81       	ldd	r23, Y+2	; 0x02
    223c:	8b 81       	ldd	r24, Y+3	; 0x03
    223e:	9c 81       	ldd	r25, Y+4	; 0x04
    2240:	a7 01       	movw	r20, r14
    2242:	96 01       	movw	r18, r12
    2244:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__divmodsi4>
    2248:	66 24       	eor	r6, r6
    224a:	77 24       	eor	r7, r7
    224c:	46 0e       	add	r4, r22
    224e:	57 1e       	adc	r5, r23
    2250:	68 1e       	adc	r6, r24
    2252:	79 1e       	adc	r7, r25
    2254:	f8 01       	movw	r30, r16
    2256:	40 82       	st	Z, r4
    2258:	51 82       	std	Z+1, r5	; 0x01
    225a:	62 82       	std	Z+2, r6	; 0x02
    225c:	73 82       	std	Z+3, r7	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	bf 90       	pop	r11
    2278:	af 90       	pop	r10
    227a:	9f 90       	pop	r9
    227c:	8f 90       	pop	r8
    227e:	7f 90       	pop	r7
    2280:	6f 90       	pop	r6
    2282:	5f 90       	pop	r5
    2284:	4f 90       	pop	r4
    2286:	08 95       	ret

00002288 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	e0 91 49 01 	lds	r30, 0x0149
    228e:	f0 91 4a 01 	lds	r31, 0x014A
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 01       	movw	r18, r24
    2296:	64 e0       	ldi	r22, 0x04	; 4
    2298:	22 0f       	add	r18, r18
    229a:	33 1f       	adc	r19, r19
    229c:	6a 95       	dec	r22
    229e:	e1 f7       	brne	.-8      	; 0x2298 <Timebase_DownCounter_SS_Expired+0x10>
    22a0:	28 0f       	add	r18, r24
    22a2:	39 1f       	adc	r19, r25
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	e9 5b       	subi	r30, 0xB9	; 185
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	86 95       	lsr	r24
    22b0:	8f 70       	andi	r24, 0x0F	; 15
    22b2:	84 30       	cpi	r24, 0x04	; 4
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <Timebase_DownCounter_SS_Expired+0x30>
    22b6:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    22b8:	84 2f       	mov	r24, r20
    22ba:	08 95       	ret

000022bc <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    22bc:	e0 91 49 01 	lds	r30, 0x0149
    22c0:	f0 91 4a 01 	lds	r31, 0x014A
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    22c6:	9c 01       	movw	r18, r24
    22c8:	74 e0       	ldi	r23, 0x04	; 4
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	7a 95       	dec	r23
    22d0:	e1 f7       	brne	.-8      	; 0x22ca <Timebase_DownCounter_SS_Expired_Event+0xe>
    22d2:	28 0f       	add	r18, r24
    22d4:	39 1f       	adc	r19, r25
    22d6:	e2 0f       	add	r30, r18
    22d8:	f3 1f       	adc	r31, r19
    22da:	df 01       	movw	r26, r30
    22dc:	a9 5b       	subi	r26, 0xB9	; 185
    22de:	bf 4f       	sbci	r27, 0xFF	; 255
    22e0:	8c 91       	ld	r24, X
    22e2:	86 95       	lsr	r24
    22e4:	8f 70       	andi	r24, 0x0F	; 15
    22e6:	84 30       	cpi	r24, 0x04	; 4
    22e8:	11 f0       	breq	.+4      	; 0x22ee <Timebase_DownCounter_SS_Expired_Event+0x32>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    22ee:	e4 5b       	subi	r30, 0xB4	; 180
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	10 82       	st	Z, r1
    22f4:	11 82       	std	Z+1, r1	; 0x01
    22f6:	12 82       	std	Z+2, r1	; 0x02
    22f8:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    22fa:	12 92       	st	-Z, r1
    22fc:	12 92       	st	-Z, r1
    22fe:	12 92       	st	-Z, r1
    2300:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2302:	38 96       	adiw	r30, 0x08	; 8
    2304:	10 82       	st	Z, r1
    2306:	11 82       	std	Z+1, r1	; 0x01
    2308:	12 82       	std	Z+2, r1	; 0x02
    230a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    230c:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    230e:	80 7e       	andi	r24, 0xE0	; 224
    2310:	8c 93       	st	X, r24
    2312:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2314:	08 95       	ret

00002316 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    231a:	c0 91 49 01 	lds	r28, 0x0149
    231e:	d0 91 4a 01 	lds	r29, 0x014A
    2322:	28 2f       	mov	r18, r24
    2324:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2326:	f9 01       	movw	r30, r18
    2328:	b4 e0       	ldi	r27, 0x04	; 4
    232a:	ee 0f       	add	r30, r30
    232c:	ff 1f       	adc	r31, r31
    232e:	ba 95       	dec	r27
    2330:	e1 f7       	brne	.-8      	; 0x232a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2332:	e2 0f       	add	r30, r18
    2334:	f3 1f       	adc	r31, r19
    2336:	ec 0f       	add	r30, r28
    2338:	fd 1f       	adc	r31, r29
    233a:	e9 5b       	subi	r30, 0xB9	; 185
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	e7 54       	subi	r30, 0x47	; 71
    2342:	f0 40       	sbci	r31, 0x00	; 0
    2344:	80 fd       	sbrc	r24, 0
    2346:	24 c0       	rjmp	.+72     	; 0x2390 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    2348:	e0 5b       	subi	r30, 0xB0	; 176
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	81 91       	ld	r24, Z+
    234e:	91 91       	ld	r25, Z+
    2350:	a1 91       	ld	r26, Z+
    2352:	b1 91       	ld	r27, Z+
    2354:	84 1b       	sub	r24, r20
    2356:	95 0b       	sbc	r25, r21
    2358:	a6 0b       	sbc	r26, r22
    235a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    235c:	b7 ff       	sbrs	r27, 7
    235e:	05 c0       	rjmp	.+10     	; 0x236a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2360:	10 82       	st	Z, r1
    2362:	11 82       	std	Z+1, r1	; 0x01
    2364:	12 82       	std	Z+2, r1	; 0x02
    2366:	13 82       	std	Z+3, r1	; 0x03
    2368:	04 c0       	rjmp	.+8      	; 0x2372 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    236a:	80 83       	st	Z, r24
    236c:	91 83       	std	Z+1, r25	; 0x01
    236e:	a2 83       	std	Z+2, r26	; 0x02
    2370:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    2372:	f9 01       	movw	r30, r18
    2374:	a4 e0       	ldi	r26, 0x04	; 4
    2376:	ee 0f       	add	r30, r30
    2378:	ff 1f       	adc	r31, r31
    237a:	aa 95       	dec	r26
    237c:	e1 f7       	brne	.-8      	; 0x2376 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    237e:	e2 0f       	add	r30, r18
    2380:	f3 1f       	adc	r31, r19
    2382:	ec 0f       	add	r30, r28
    2384:	fd 1f       	adc	r31, r29
    2386:	e9 5b       	subi	r30, 0xB9	; 185
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 81       	ld	r24, Z
    238c:	81 60       	ori	r24, 0x01	; 1
    238e:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	08 95       	ret

00002396 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2396:	e0 91 49 01 	lds	r30, 0x0149
    239a:	f0 91 4a 01 	lds	r31, 0x014A
    239e:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    23a0:	9c 01       	movw	r18, r24
    23a2:	44 e0       	ldi	r20, 0x04	; 4
    23a4:	22 0f       	add	r18, r18
    23a6:	33 1f       	adc	r19, r19
    23a8:	4a 95       	dec	r20
    23aa:	e1 f7       	brne	.-8      	; 0x23a4 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    23ac:	28 0f       	add	r18, r24
    23ae:	39 1f       	adc	r19, r25
    23b0:	e2 0f       	add	r30, r18
    23b2:	f3 1f       	adc	r31, r19
    23b4:	df 01       	movw	r26, r30
    23b6:	ac 5a       	subi	r26, 0xAC	; 172
    23b8:	bf 4f       	sbci	r27, 0xFF	; 255
    23ba:	e0 5b       	subi	r30, 0xB0	; 176
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	20 81       	ld	r18, Z
    23c0:	31 81       	ldd	r19, Z+1	; 0x01
    23c2:	42 81       	ldd	r20, Z+2	; 0x02
    23c4:	53 81       	ldd	r21, Z+3	; 0x03
    23c6:	8d 91       	ld	r24, X+
    23c8:	9d 91       	ld	r25, X+
    23ca:	0d 90       	ld	r0, X+
    23cc:	bc 91       	ld	r27, X
    23ce:	a0 2d       	mov	r26, r0
    23d0:	28 1b       	sub	r18, r24
    23d2:	39 0b       	sbc	r19, r25
    23d4:	4a 0b       	sbc	r20, r26
    23d6:	5b 0b       	sbc	r21, r27
    23d8:	57 ff       	sbrs	r21, 7
    23da:	04 c0       	rjmp	.+8      	; 0x23e4 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    23e4:	b9 01       	movw	r22, r18
    23e6:	ca 01       	movw	r24, r20
    23e8:	08 95       	ret

000023ea <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    23ee:	c0 91 49 01 	lds	r28, 0x0149
    23f2:	d0 91 4a 01 	lds	r29, 0x014A
    23f6:	68 2f       	mov	r22, r24
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    23fa:	fb 01       	movw	r30, r22
    23fc:	a4 e0       	ldi	r26, 0x04	; 4
    23fe:	ee 0f       	add	r30, r30
    2400:	ff 1f       	adc	r31, r31
    2402:	aa 95       	dec	r26
    2404:	e1 f7       	brne	.-8      	; 0x23fe <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    2406:	e6 0f       	add	r30, r22
    2408:	f7 1f       	adc	r31, r23
    240a:	ec 0f       	add	r30, r28
    240c:	fd 1f       	adc	r31, r29
    240e:	df 01       	movw	r26, r30
    2410:	ac 5a       	subi	r26, 0xAC	; 172
    2412:	bf 4f       	sbci	r27, 0xFF	; 255
    2414:	e0 5b       	subi	r30, 0xB0	; 176
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	20 81       	ld	r18, Z
    241a:	31 81       	ldd	r19, Z+1	; 0x01
    241c:	42 81       	ldd	r20, Z+2	; 0x02
    241e:	53 81       	ldd	r21, Z+3	; 0x03
    2420:	8d 91       	ld	r24, X+
    2422:	9d 91       	ld	r25, X+
    2424:	0d 90       	ld	r0, X+
    2426:	bc 91       	ld	r27, X
    2428:	a0 2d       	mov	r26, r0
    242a:	28 1b       	sub	r18, r24
    242c:	39 0b       	sbc	r19, r25
    242e:	4a 0b       	sbc	r20, r26
    2430:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2432:	57 fd       	sbrc	r21, 7
    2434:	07 c0       	rjmp	.+14     	; 0x2444 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2436:	21 15       	cp	r18, r1
    2438:	31 05       	cpc	r19, r1
    243a:	41 05       	cpc	r20, r1
    243c:	51 05       	cpc	r21, r1
    243e:	11 f0       	breq	.+4      	; 0x2444 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	12 c0       	rjmp	.+36     	; 0x2468 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	cb 01       	movw	r24, r22
    2448:	54 e0       	ldi	r21, 0x04	; 4
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	5a 95       	dec	r21
    2450:	e1 f7       	brne	.-8      	; 0x244a <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2452:	86 0f       	add	r24, r22
    2454:	97 1f       	adc	r25, r23
    2456:	c8 0f       	add	r28, r24
    2458:	d9 1f       	adc	r29, r25
    245a:	c9 5b       	subi	r28, 0xB9	; 185
    245c:	df 4f       	sbci	r29, 0xFF	; 255
    245e:	88 81       	ld	r24, Y
    2460:	80 ff       	sbrs	r24, 0
    2462:	21 e0       	ldi	r18, 0x01	; 1
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2468:	82 2f       	mov	r24, r18
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	08 95       	ret

00002470 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    2470:	1f 93       	push	r17
    2472:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2474:	0e 94 f5 11 	call	0x23ea	; 0x23ea <Timebase_DownCounter_SS_Period_Value_Expired>
    2478:	81 30       	cpi	r24, 0x01	; 1
    247a:	11 f0       	breq	.+4      	; 0x2480 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    247c:	80 e0       	ldi	r24, 0x00	; 0
    247e:	16 c0       	rjmp	.+44     	; 0x24ac <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2480:	e0 91 49 01 	lds	r30, 0x0149
    2484:	f0 91 4a 01 	lds	r31, 0x014A
    2488:	21 2f       	mov	r18, r17
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	c9 01       	movw	r24, r18
    248e:	b4 e0       	ldi	r27, 0x04	; 4
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	ba 95       	dec	r27
    2496:	e1 f7       	brne	.-8      	; 0x2490 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    2498:	82 0f       	add	r24, r18
    249a:	93 1f       	adc	r25, r19
    249c:	e8 0f       	add	r30, r24
    249e:	f9 1f       	adc	r31, r25
    24a0:	e9 5b       	subi	r30, 0xB9	; 185
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	8e 7f       	andi	r24, 0xFE	; 254
    24a8:	80 83       	st	Z, r24
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    24ac:	1f 91       	pop	r17
    24ae:	08 95       	ret

000024b0 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	0e 94 3b 10 	call	0x2076	; 0x2076 <Timebase_DownCounter_SS_Update>
  }
}
    24b6:	08 95       	ret

000024b8 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    24b8:	e0 91 49 01 	lds	r30, 0x0149
    24bc:	f0 91 4a 01 	lds	r31, 0x014A
    24c0:	e4 5b       	subi	r30, 0xB4	; 180
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	10 82       	st	Z, r1
    24c6:	11 82       	std	Z+1, r1	; 0x01
    24c8:	12 82       	std	Z+2, r1	; 0x02
    24ca:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    24cc:	12 92       	st	-Z, r1
    24ce:	12 92       	st	-Z, r1
    24d0:	12 92       	st	-Z, r1
    24d2:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    24d4:	38 96       	adiw	r30, 0x08	; 8
    24d6:	10 82       	st	Z, r1
    24d8:	11 82       	std	Z+1, r1	; 0x01
    24da:	12 82       	std	Z+2, r1	; 0x02
    24dc:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    24de:	39 97       	sbiw	r30, 0x09	; 9
    24e0:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24e2:	80 7e       	andi	r24, 0xE0	; 224
    24e4:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    24e6:	08 95       	ret

000024e8 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    24e8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    24ec:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    24f0:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <Timebase_DownCounter_Reset_All>
  #endif
  
}
    24f4:	08 95       	ret

000024f6 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    24f6:	0f 93       	push	r16
    24f8:	1f 93       	push	r17
    24fa:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    24fc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2500:	c8 01       	movw	r24, r16
    2502:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Timebase_Timer_Config>
  Timebase_Reset();
    2506:	0e 94 74 12 	call	0x24e8	; 0x24e8 <Timebase_Reset>
}
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	08 95       	ret

00002510 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2510:	e0 91 49 01 	lds	r30, 0x0149
    2514:	f0 91 4a 01 	lds	r31, 0x014A
    2518:	87 89       	ldd	r24, Z+23	; 0x17
    251a:	82 ff       	sbrs	r24, 2
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <Timebase_Main_Loop_Executables+0x14>
    //add upcounter ss function
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    251e:	87 89       	ldd	r24, Z+23	; 0x17
    2520:	8b 7f       	andi	r24, 0xFB	; 251
    2522:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2524:	87 89       	ldd	r24, Z+23	; 0x17
    2526:	80 ff       	sbrs	r24, 0
    2528:	09 c0       	rjmp	.+18     	; 0x253c <Timebase_Main_Loop_Executables+0x2c>
    Timebase_UpCounter_Update_All();
    252a:	0e 94 ed 09 	call	0x13da	; 0x13da <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    252e:	e0 91 49 01 	lds	r30, 0x0149
    2532:	f0 91 4a 01 	lds	r31, 0x014A
    2536:	87 89       	ldd	r24, Z+23	; 0x17
    2538:	8e 7f       	andi	r24, 0xFE	; 254
    253a:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    253c:	e0 91 49 01 	lds	r30, 0x0149
    2540:	f0 91 4a 01 	lds	r31, 0x014A
    2544:	87 89       	ldd	r24, Z+23	; 0x17
    2546:	83 ff       	sbrs	r24, 3
    2548:	09 c0       	rjmp	.+18     	; 0x255c <Timebase_Main_Loop_Executables+0x4c>
    Timebase_DownCounter_SS_Update_All();
    254a:	0e 94 58 12 	call	0x24b0	; 0x24b0 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    254e:	e0 91 49 01 	lds	r30, 0x0149
    2552:	f0 91 4a 01 	lds	r31, 0x014A
    2556:	87 89       	ldd	r24, Z+23	; 0x17
    2558:	87 7f       	andi	r24, 0xF7	; 247
    255a:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    255c:	e0 91 49 01 	lds	r30, 0x0149
    2560:	f0 91 4a 01 	lds	r31, 0x014A
    2564:	87 89       	ldd	r24, Z+23	; 0x17
    2566:	81 ff       	sbrs	r24, 1
    2568:	09 c0       	rjmp	.+18     	; 0x257c <Timebase_Main_Loop_Executables+0x6c>
    Timebase_DownCounter_Update_All();
    256a:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    256e:	e0 91 49 01 	lds	r30, 0x0149
    2572:	f0 91 4a 01 	lds	r31, 0x014A
    2576:	87 89       	ldd	r24, Z+23	; 0x17
    2578:	8d 7f       	andi	r24, 0xFD	; 253
    257a:	87 8b       	std	Z+23, r24	; 0x17
    257c:	08 95       	ret

0000257e <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    257e:	e0 91 49 01 	lds	r30, 0x0149
    2582:	f0 91 4a 01 	lds	r31, 0x014A
    2586:	80 85       	ldd	r24, Z+8	; 0x08
    2588:	91 85       	ldd	r25, Z+9	; 0x09
    258a:	01 96       	adiw	r24, 0x01	; 1
    258c:	91 87       	std	Z+9, r25	; 0x09
    258e:	80 87       	std	Z+8, r24	; 0x08
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2590:	87 89       	ldd	r24, Z+23	; 0x17
    2592:	84 60       	ori	r24, 0x04	; 4
    2594:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2596:	87 89       	ldd	r24, Z+23	; 0x17
    2598:	88 60       	ori	r24, 0x08	; 8
    259a:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    259c:	80 85       	ldd	r24, Z+8	; 0x08
    259e:	91 85       	ldd	r25, Z+9	; 0x09
    25a0:	61 81       	ldd	r22, Z+1	; 0x01
    25a2:	72 81       	ldd	r23, Z+2	; 0x02
    25a4:	0e 94 33 13 	call	0x2666	; 0x2666 <__udivmodhi4>
    25a8:	89 2b       	or	r24, r25
    25aa:	99 f4       	brne	.+38     	; 0x25d2 <Timebase_ISR_Executables+0x54>
    Timebase->Time.Seconds++;
    25ac:	82 85       	ldd	r24, Z+10	; 0x0a
    25ae:	93 85       	ldd	r25, Z+11	; 0x0b
    25b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    25b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    25b4:	01 96       	adiw	r24, 0x01	; 1
    25b6:	a1 1d       	adc	r26, r1
    25b8:	b1 1d       	adc	r27, r1
    25ba:	82 87       	std	Z+10, r24	; 0x0a
    25bc:	93 87       	std	Z+11, r25	; 0x0b
    25be:	a4 87       	std	Z+12, r26	; 0x0c
    25c0:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    25c2:	11 86       	std	Z+9, r1	; 0x09
    25c4:	10 86       	std	Z+8, r1	; 0x08
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    25c6:	87 89       	ldd	r24, Z+23	; 0x17
    25c8:	81 60       	ori	r24, 0x01	; 1
    25ca:	87 8b       	std	Z+23, r24	; 0x17
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    25cc:	87 89       	ldd	r24, Z+23	; 0x17
    25ce:	82 60       	ori	r24, 0x02	; 2
    25d0:	87 8b       	std	Z+23, r24	; 0x17
    25d2:	08 95       	ret

000025d4 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    25d4:	1f 92       	push	r1
    25d6:	0f 92       	push	r0
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	0f 92       	push	r0
    25dc:	11 24       	eor	r1, r1
    25de:	2f 93       	push	r18
    25e0:	3f 93       	push	r19
    25e2:	4f 93       	push	r20
    25e4:	5f 93       	push	r21
    25e6:	6f 93       	push	r22
    25e8:	7f 93       	push	r23
    25ea:	8f 93       	push	r24
    25ec:	9f 93       	push	r25
    25ee:	af 93       	push	r26
    25f0:	bf 93       	push	r27
    25f2:	ef 93       	push	r30
    25f4:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    25f6:	e0 91 49 01 	lds	r30, 0x0149
    25fa:	f0 91 4a 01 	lds	r31, 0x014A
    25fe:	83 81       	ldd	r24, Z+3	; 0x03
    2600:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2602:	0e 94 bf 12 	call	0x257e	; 0x257e <Timebase_ISR_Executables>
}
    2606:	ff 91       	pop	r31
    2608:	ef 91       	pop	r30
    260a:	bf 91       	pop	r27
    260c:	af 91       	pop	r26
    260e:	9f 91       	pop	r25
    2610:	8f 91       	pop	r24
    2612:	7f 91       	pop	r23
    2614:	6f 91       	pop	r22
    2616:	5f 91       	pop	r21
    2618:	4f 91       	pop	r20
    261a:	3f 91       	pop	r19
    261c:	2f 91       	pop	r18
    261e:	0f 90       	pop	r0
    2620:	0f be       	out	0x3f, r0	; 63
    2622:	0f 90       	pop	r0
    2624:	1f 90       	pop	r1
    2626:	18 95       	reti

00002628 <__mulsi3>:
    2628:	62 9f       	mul	r22, r18
    262a:	d0 01       	movw	r26, r0
    262c:	73 9f       	mul	r23, r19
    262e:	f0 01       	movw	r30, r0
    2630:	82 9f       	mul	r24, r18
    2632:	e0 0d       	add	r30, r0
    2634:	f1 1d       	adc	r31, r1
    2636:	64 9f       	mul	r22, r20
    2638:	e0 0d       	add	r30, r0
    263a:	f1 1d       	adc	r31, r1
    263c:	92 9f       	mul	r25, r18
    263e:	f0 0d       	add	r31, r0
    2640:	83 9f       	mul	r24, r19
    2642:	f0 0d       	add	r31, r0
    2644:	74 9f       	mul	r23, r20
    2646:	f0 0d       	add	r31, r0
    2648:	65 9f       	mul	r22, r21
    264a:	f0 0d       	add	r31, r0
    264c:	99 27       	eor	r25, r25
    264e:	72 9f       	mul	r23, r18
    2650:	b0 0d       	add	r27, r0
    2652:	e1 1d       	adc	r30, r1
    2654:	f9 1f       	adc	r31, r25
    2656:	63 9f       	mul	r22, r19
    2658:	b0 0d       	add	r27, r0
    265a:	e1 1d       	adc	r30, r1
    265c:	f9 1f       	adc	r31, r25
    265e:	bd 01       	movw	r22, r26
    2660:	cf 01       	movw	r24, r30
    2662:	11 24       	eor	r1, r1
    2664:	08 95       	ret

00002666 <__udivmodhi4>:
    2666:	aa 1b       	sub	r26, r26
    2668:	bb 1b       	sub	r27, r27
    266a:	51 e1       	ldi	r21, 0x11	; 17
    266c:	07 c0       	rjmp	.+14     	; 0x267c <__udivmodhi4_ep>

0000266e <__udivmodhi4_loop>:
    266e:	aa 1f       	adc	r26, r26
    2670:	bb 1f       	adc	r27, r27
    2672:	a6 17       	cp	r26, r22
    2674:	b7 07       	cpc	r27, r23
    2676:	10 f0       	brcs	.+4      	; 0x267c <__udivmodhi4_ep>
    2678:	a6 1b       	sub	r26, r22
    267a:	b7 0b       	sbc	r27, r23

0000267c <__udivmodhi4_ep>:
    267c:	88 1f       	adc	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	5a 95       	dec	r21
    2682:	a9 f7       	brne	.-22     	; 0x266e <__udivmodhi4_loop>
    2684:	80 95       	com	r24
    2686:	90 95       	com	r25
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	08 95       	ret

0000268e <__udivmodsi4>:
    268e:	a1 e2       	ldi	r26, 0x21	; 33
    2690:	1a 2e       	mov	r1, r26
    2692:	aa 1b       	sub	r26, r26
    2694:	bb 1b       	sub	r27, r27
    2696:	fd 01       	movw	r30, r26
    2698:	0d c0       	rjmp	.+26     	; 0x26b4 <__udivmodsi4_ep>

0000269a <__udivmodsi4_loop>:
    269a:	aa 1f       	adc	r26, r26
    269c:	bb 1f       	adc	r27, r27
    269e:	ee 1f       	adc	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	a2 17       	cp	r26, r18
    26a4:	b3 07       	cpc	r27, r19
    26a6:	e4 07       	cpc	r30, r20
    26a8:	f5 07       	cpc	r31, r21
    26aa:	20 f0       	brcs	.+8      	; 0x26b4 <__udivmodsi4_ep>
    26ac:	a2 1b       	sub	r26, r18
    26ae:	b3 0b       	sbc	r27, r19
    26b0:	e4 0b       	sbc	r30, r20
    26b2:	f5 0b       	sbc	r31, r21

000026b4 <__udivmodsi4_ep>:
    26b4:	66 1f       	adc	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	88 1f       	adc	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	1a 94       	dec	r1
    26be:	69 f7       	brne	.-38     	; 0x269a <__udivmodsi4_loop>
    26c0:	60 95       	com	r22
    26c2:	70 95       	com	r23
    26c4:	80 95       	com	r24
    26c6:	90 95       	com	r25
    26c8:	9b 01       	movw	r18, r22
    26ca:	ac 01       	movw	r20, r24
    26cc:	bd 01       	movw	r22, r26
    26ce:	cf 01       	movw	r24, r30
    26d0:	08 95       	ret

000026d2 <__divmodsi4>:
    26d2:	97 fb       	bst	r25, 7
    26d4:	09 2e       	mov	r0, r25
    26d6:	05 26       	eor	r0, r21
    26d8:	0e d0       	rcall	.+28     	; 0x26f6 <__divmodsi4_neg1>
    26da:	57 fd       	sbrc	r21, 7
    26dc:	04 d0       	rcall	.+8      	; 0x26e6 <__divmodsi4_neg2>
    26de:	d7 df       	rcall	.-82     	; 0x268e <__udivmodsi4>
    26e0:	0a d0       	rcall	.+20     	; 0x26f6 <__divmodsi4_neg1>
    26e2:	00 1c       	adc	r0, r0
    26e4:	38 f4       	brcc	.+14     	; 0x26f4 <__divmodsi4_exit>

000026e6 <__divmodsi4_neg2>:
    26e6:	50 95       	com	r21
    26e8:	40 95       	com	r20
    26ea:	30 95       	com	r19
    26ec:	21 95       	neg	r18
    26ee:	3f 4f       	sbci	r19, 0xFF	; 255
    26f0:	4f 4f       	sbci	r20, 0xFF	; 255
    26f2:	5f 4f       	sbci	r21, 0xFF	; 255

000026f4 <__divmodsi4_exit>:
    26f4:	08 95       	ret

000026f6 <__divmodsi4_neg1>:
    26f6:	f6 f7       	brtc	.-4      	; 0x26f4 <__divmodsi4_exit>
    26f8:	90 95       	com	r25
    26fa:	80 95       	com	r24
    26fc:	70 95       	com	r23
    26fe:	61 95       	neg	r22
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	8f 4f       	sbci	r24, 0xFF	; 255
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	08 95       	ret

00002708 <_exit>:
    2708:	f8 94       	cli

0000270a <__stop_program>:
    270a:	ff cf       	rjmp	.-2      	; 0x270a <__stop_program>
