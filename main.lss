
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000329c  00003330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000329c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  00800114  00800114  00003344  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003344  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000018aa  00000000  00000000  000033a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004896  00000000  00000000  00004c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bb  00000000  00000000  000094e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000236d  00000000  00000000  00009a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ae0  00000000  00000000  0000be0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001af7  00000000  00000000  0000c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c02  00000000  00000000  0000e3e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000ffe5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 c6 18 	jmp	0x318c	; 0x318c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	f2 e3       	ldi	r31, 0x32	; 50
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a1 3b       	cpi	r26, 0xB1	; 177
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 4c 19 	jmp	0x3298	; 0x3298 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <UART_Init>
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 41 18 	call	0x3082	; 0x3082 <Timebase_Init>
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e2       	ldi	r20, 0x20	; 32
      dc:	5e e4       	ldi	r21, 0x4E	; 78
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 ab 08 	call	0x1156	; 0x1156 <Timebase_UpCounter_SS_Set_Securely>
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	42 e1       	ldi	r20, 0x12	; 18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <Timebase_UpCounter_Set_Securely>
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	40 e8       	ldi	r20, 0x80	; 128
      f8:	5e e3       	ldi	r21, 0x3E	; 62
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 c9 11 	call	0x2392	; 0x2392 <Timebase_DownCounter_SS_Set_Securely>
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	4e e0       	ldi	r20, 0x0E	; 14
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <Timebase_DownCounter_Set_Securely>
     110:	82 e3       	ldi	r24, 0x32	; 50
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 a4 05 	call	0xb48	; 0xb48 <Timebase_Timer_Await_SubSeconds>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <Timebase_UpCounter_SS_Get_Value>
     11e:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	91 e0       	ldi	r25, 0x01	; 1
     126:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	0e 94 24 0c 	call	0x1848	; 0x1848 <Timebase_UpCounter_Get_Value>
     130:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
     134:	80 e0       	ldi	r24, 0x00	; 0
     136:	91 e0       	ldi	r25, 0x01	; 1
     138:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 4b 10 	call	0x2096	; 0x2096 <Timebase_DownCounter_SS_Get_Value>
     142:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	0e 94 de 14 	call	0x29bc	; 0x29bc <Timebase_DownCounter_Get_Value>
     154:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Transmit_Number>
     158:	82 e0       	ldi	r24, 0x02	; 2
     15a:	91 e0       	ldi	r25, 0x01	; 1
     15c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
     160:	5e 9a       	sbi	0x0b, 6	; 11
     162:	0e 94 4e 18 	call	0x309c	; 0x309c <Timebase_Main_Loop_Executables>
     166:	5e 98       	cbi	0x0b, 6	; 11
     168:	d3 cf       	rjmp	.-90     	; 0x110 <main+0x6a>

0000016a <UART_Struct_Init>:
     16a:	10 92 14 01 	sts	0x0114, r1
     16e:	e5 e1       	ldi	r30, 0x15	; 21
     170:	f1 e0       	ldi	r31, 0x01	; 1
     172:	11 92       	st	Z+, r1
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	ed 31       	cpi	r30, 0x1D	; 29
     178:	f8 07       	cpc	r31, r24
     17a:	d9 f7       	brne	.-10     	; 0x172 <UART_Struct_Init+0x8>
     17c:	10 82       	st	Z, r1
     17e:	11 82       	std	Z+1, r1	; 0x01
     180:	80 e2       	ldi	r24, 0x20	; 32
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	93 a3       	std	Z+35, r25	; 0x23
     186:	82 a3       	std	Z+34, r24	; 0x22
     188:	15 a2       	std	Z+37, r1	; 0x25
     18a:	14 a2       	std	Z+36, r1	; 0x24
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	04 c0       	rjmp	.+8      	; 0x198 <UART_Struct_Init+0x2e>
     190:	ec 5e       	subi	r30, 0xEC	; 236
     192:	fe 4f       	sbci	r31, 0xFE	; 254
     194:	13 86       	std	Z+11, r1	; 0x0b
     196:	2f 5f       	subi	r18, 0xFF	; 255
     198:	80 91 3f 01 	lds	r24, 0x013F
     19c:	90 91 40 01 	lds	r25, 0x0140
     1a0:	e2 2f       	mov	r30, r18
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	e8 17       	cp	r30, r24
     1a6:	f9 07       	cpc	r31, r25
     1a8:	98 f3       	brcs	.-26     	; 0x190 <UART_Struct_Init+0x26>
     1aa:	08 95       	ret

000001ac <UART_Config_GPIO>:
     1ac:	08 95       	ret

000001ae <UART_Config_Clock>:
     1ae:	08 95       	ret

000001b0 <UART_Config_BAUD_Rate>:
     1b0:	9b 01       	movw	r18, r22
     1b2:	ac 01       	movw	r20, r24
     1b4:	60 e6       	ldi	r22, 0x60	; 96
     1b6:	73 ee       	ldi	r23, 0xE3	; 227
     1b8:	86 e1       	ldi	r24, 0x16	; 22
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 0f 19 	call	0x321e	; 0x321e <__udivmodsi4>
     1c0:	21 50       	subi	r18, 0x01	; 1
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 40       	sbci	r21, 0x00	; 0
     1c8:	e0 ec       	ldi	r30, 0xC0	; 192
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	82 60       	ori	r24, 0x02	; 2
     1d0:	80 83       	st	Z, r24
     1d2:	bb 27       	eor	r27, r27
     1d4:	a5 2f       	mov	r26, r21
     1d6:	94 2f       	mov	r25, r20
     1d8:	83 2f       	mov	r24, r19
     1da:	80 93 c5 00 	sts	0x00C5, r24
     1de:	20 93 c4 00 	sts	0x00C4, r18
     1e2:	08 95       	ret

000001e4 <UART_Config_Transmitter>:
     1e4:	e1 ec       	ldi	r30, 0xC1	; 193
     1e6:	f0 e0       	ldi	r31, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	88 60       	ori	r24, 0x08	; 8
     1ec:	80 83       	st	Z, r24
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	80 93 c2 00 	sts	0x00C2, r24
     1f4:	08 95       	ret

000001f6 <UART_Config_Receiver>:
     1f6:	e1 ec       	ldi	r30, 0xC1	; 193
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	80 81       	ld	r24, Z
     1fc:	80 61       	ori	r24, 0x10	; 16
     1fe:	80 83       	st	Z, r24
     200:	86 e0       	ldi	r24, 0x06	; 6
     202:	80 93 c2 00 	sts	0x00C2, r24
     206:	08 95       	ret

00000208 <UART_Config_Receiver_Interrupt>:
     208:	e1 ec       	ldi	r30, 0xC1	; 193
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	80 81       	ld	r24, Z
     20e:	80 68       	ori	r24, 0x80	; 128
     210:	80 83       	st	Z, r24
     212:	78 94       	sei
     214:	08 95       	ret

00000216 <UART_Transmit_Byte>:
     216:	98 2f       	mov	r25, r24
     218:	80 91 c0 00 	lds	r24, 0x00C0
     21c:	85 ff       	sbrs	r24, 5
     21e:	fc cf       	rjmp	.-8      	; 0x218 <UART_Transmit_Byte+0x2>
     220:	90 93 c6 00 	sts	0x00C6, r25
     224:	08 95       	ret

00000226 <UART_Receive_Byte>:
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	0f 92       	push	r0
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	19 82       	std	Y+1, r1	; 0x01
     232:	80 91 c0 00 	lds	r24, 0x00C0
     236:	84 ff       	sbrs	r24, 4
     238:	05 c0       	rjmp	.+10     	; 0x244 <UART_Receive_Byte+0x1e>
     23a:	80 91 c6 00 	lds	r24, 0x00C6
     23e:	89 83       	std	Y+1, r24	; 0x01
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	08 c0       	rjmp	.+16     	; 0x254 <UART_Receive_Byte+0x2e>
     244:	80 91 c0 00 	lds	r24, 0x00C0
     248:	83 ff       	sbrs	r24, 3
     24a:	07 c0       	rjmp	.+14     	; 0x25a <UART_Receive_Byte+0x34>
     24c:	80 91 c6 00 	lds	r24, 0x00C6
     250:	89 83       	std	Y+1, r24	; 0x01
     252:	82 e0       	ldi	r24, 0x02	; 2
     254:	80 93 14 01 	sts	0x0114, r24
     258:	05 c0       	rjmp	.+10     	; 0x264 <UART_Receive_Byte+0x3e>
     25a:	80 91 c6 00 	lds	r24, 0x00C6
     25e:	89 83       	std	Y+1, r24	; 0x01
     260:	10 92 14 01 	sts	0x0114, r1
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <UART_Last_Received_Byte>:
     26e:	80 91 1e 01 	lds	r24, 0x011E
     272:	08 95       	ret

00000274 <UART_Reset_Last_Received_Byte>:
     274:	10 92 1e 01 	sts	0x011E, r1
     278:	08 95       	ret

0000027a <UART_Transmit_Byte_Hex>:
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ab 01       	movw	r20, r22
     282:	bc 01       	movw	r22, r24
     284:	4f 3f       	cpi	r20, 0xFF	; 255
     286:	51 05       	cpc	r21, r1
     288:	61 05       	cpc	r22, r1
     28a:	71 05       	cpc	r23, r1
     28c:	09 f0       	breq	.+2      	; 0x290 <UART_Transmit_Byte_Hex+0x16>
     28e:	28 f4       	brcc	.+10     	; 0x29a <UART_Transmit_Byte_Hex+0x20>
     290:	e8 e0       	ldi	r30, 0x08	; 8
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	c2 e0       	ldi	r28, 0x02	; 2
     296:	d0 e0       	ldi	r29, 0x00	; 0
     298:	11 c0       	rjmp	.+34     	; 0x2bc <UART_Transmit_Byte_Hex+0x42>
     29a:	40 30       	cpi	r20, 0x00	; 0
     29c:	80 e0       	ldi	r24, 0x00	; 0
     29e:	58 07       	cpc	r21, r24
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	68 07       	cpc	r22, r24
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	78 07       	cpc	r23, r24
     2a8:	28 f0       	brcs	.+10     	; 0x2b4 <UART_Transmit_Byte_Hex+0x3a>
     2aa:	e0 e2       	ldi	r30, 0x20	; 32
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	c8 e0       	ldi	r28, 0x08	; 8
     2b0:	d0 e0       	ldi	r29, 0x00	; 0
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <UART_Transmit_Byte_Hex+0x42>
     2b4:	e0 e1       	ldi	r30, 0x10	; 16
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	c4 e0       	ldi	r28, 0x04	; 4
     2ba:	d0 e0       	ldi	r29, 0x00	; 0
     2bc:	80 91 c0 00 	lds	r24, 0x00C0
     2c0:	85 ff       	sbrs	r24, 5
     2c2:	fc cf       	rjmp	.-8      	; 0x2bc <UART_Transmit_Byte_Hex+0x42>
     2c4:	80 e3       	ldi	r24, 0x30	; 48
     2c6:	80 93 c6 00 	sts	0x00C6, r24
     2ca:	80 91 c0 00 	lds	r24, 0x00C0
     2ce:	85 ff       	sbrs	r24, 5
     2d0:	fc cf       	rjmp	.-8      	; 0x2ca <UART_Transmit_Byte_Hex+0x50>
     2d2:	88 e7       	ldi	r24, 0x78	; 120
     2d4:	80 93 c6 00 	sts	0x00C6, r24
     2d8:	10 e0       	ldi	r17, 0x00	; 0
     2da:	1f c0       	rjmp	.+62     	; 0x31a <UART_Transmit_Byte_Hex+0xa0>
     2dc:	34 97       	sbiw	r30, 0x04	; 4
     2de:	db 01       	movw	r26, r22
     2e0:	ca 01       	movw	r24, r20
     2e2:	0e 2e       	mov	r0, r30
     2e4:	04 c0       	rjmp	.+8      	; 0x2ee <UART_Transmit_Byte_Hex+0x74>
     2e6:	b6 95       	lsr	r27
     2e8:	a7 95       	ror	r26
     2ea:	97 95       	ror	r25
     2ec:	87 95       	ror	r24
     2ee:	0a 94       	dec	r0
     2f0:	d2 f7       	brpl	.-12     	; 0x2e6 <UART_Transmit_Byte_Hex+0x6c>
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	8f 70       	andi	r24, 0x0F	; 15
     2f6:	90 70       	andi	r25, 0x00	; 0
     2f8:	8a 30       	cpi	r24, 0x0A	; 10
     2fa:	91 05       	cpc	r25, r1
     2fc:	20 f0       	brcs	.+8      	; 0x306 <UART_Transmit_Byte_Hex+0x8c>
     2fe:	9c 01       	movw	r18, r24
     300:	29 5c       	subi	r18, 0xC9	; 201
     302:	3f 4f       	sbci	r19, 0xFF	; 255
     304:	03 c0       	rjmp	.+6      	; 0x30c <UART_Transmit_Byte_Hex+0x92>
     306:	9c 01       	movw	r18, r24
     308:	20 5d       	subi	r18, 0xD0	; 208
     30a:	3f 4f       	sbci	r19, 0xFF	; 255
     30c:	80 91 c0 00 	lds	r24, 0x00C0
     310:	85 ff       	sbrs	r24, 5
     312:	fc cf       	rjmp	.-8      	; 0x30c <UART_Transmit_Byte_Hex+0x92>
     314:	20 93 c6 00 	sts	0x00C6, r18
     318:	1f 5f       	subi	r17, 0xFF	; 255
     31a:	81 2f       	mov	r24, r17
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	8c 17       	cp	r24, r28
     320:	9d 07       	cpc	r25, r29
     322:	e0 f2       	brcs	.-72     	; 0x2dc <UART_Transmit_Byte_Hex+0x62>
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	08 95       	ret

0000032c <UART_Transmit_Byte_Bin>:
     32c:	cf 92       	push	r12
     32e:	df 92       	push	r13
     330:	ef 92       	push	r14
     332:	ff 92       	push	r15
     334:	0f 93       	push	r16
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	ab 01       	movw	r20, r22
     33e:	bc 01       	movw	r22, r24
     340:	4f 3f       	cpi	r20, 0xFF	; 255
     342:	51 05       	cpc	r21, r1
     344:	61 05       	cpc	r22, r1
     346:	71 05       	cpc	r23, r1
     348:	09 f0       	breq	.+2      	; 0x34c <UART_Transmit_Byte_Bin+0x20>
     34a:	10 f4       	brcc	.+4      	; 0x350 <UART_Transmit_Byte_Bin+0x24>
     34c:	97 e0       	ldi	r25, 0x07	; 7
     34e:	0b c0       	rjmp	.+22     	; 0x366 <UART_Transmit_Byte_Bin+0x3a>
     350:	40 30       	cpi	r20, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	58 07       	cpc	r21, r24
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	68 07       	cpc	r22, r24
     35a:	80 e0       	ldi	r24, 0x00	; 0
     35c:	78 07       	cpc	r23, r24
     35e:	10 f0       	brcs	.+4      	; 0x364 <UART_Transmit_Byte_Bin+0x38>
     360:	9f e1       	ldi	r25, 0x1F	; 31
     362:	01 c0       	rjmp	.+2      	; 0x366 <UART_Transmit_Byte_Bin+0x3a>
     364:	9f e0       	ldi	r25, 0x0F	; 15
     366:	80 91 c0 00 	lds	r24, 0x00C0
     36a:	85 ff       	sbrs	r24, 5
     36c:	fc cf       	rjmp	.-8      	; 0x366 <UART_Transmit_Byte_Bin+0x3a>
     36e:	80 e3       	ldi	r24, 0x30	; 48
     370:	80 93 c6 00 	sts	0x00C6, r24
     374:	80 91 c0 00 	lds	r24, 0x00C0
     378:	85 ff       	sbrs	r24, 5
     37a:	fc cf       	rjmp	.-8      	; 0x374 <UART_Transmit_Byte_Bin+0x48>
     37c:	82 e6       	ldi	r24, 0x62	; 98
     37e:	80 93 c6 00 	sts	0x00C6, r24
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	e9 2f       	mov	r30, r25
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	00 e3       	ldi	r16, 0x30	; 48
     38c:	11 e3       	ldi	r17, 0x31	; 49
     38e:	ef 01       	movw	r28, r30
     390:	21 96       	adiw	r28, 0x01	; 1
     392:	cf 01       	movw	r24, r30
     394:	82 1b       	sub	r24, r18
     396:	93 0b       	sbc	r25, r19
     398:	6a 01       	movw	r12, r20
     39a:	7b 01       	movw	r14, r22
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <UART_Transmit_Byte_Bin+0x7a>
     39e:	f6 94       	lsr	r15
     3a0:	e7 94       	ror	r14
     3a2:	d7 94       	ror	r13
     3a4:	c7 94       	ror	r12
     3a6:	8a 95       	dec	r24
     3a8:	d2 f7       	brpl	.-12     	; 0x39e <UART_Transmit_Byte_Bin+0x72>
     3aa:	d7 01       	movw	r26, r14
     3ac:	c6 01       	movw	r24, r12
     3ae:	81 70       	andi	r24, 0x01	; 1
     3b0:	90 70       	andi	r25, 0x00	; 0
     3b2:	89 2b       	or	r24, r25
     3b4:	39 f0       	breq	.+14     	; 0x3c4 <UART_Transmit_Byte_Bin+0x98>
     3b6:	80 91 c0 00 	lds	r24, 0x00C0
     3ba:	85 ff       	sbrs	r24, 5
     3bc:	fc cf       	rjmp	.-8      	; 0x3b6 <UART_Transmit_Byte_Bin+0x8a>
     3be:	10 93 c6 00 	sts	0x00C6, r17
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <UART_Transmit_Byte_Bin+0xa4>
     3c4:	80 91 c0 00 	lds	r24, 0x00C0
     3c8:	85 ff       	sbrs	r24, 5
     3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <UART_Transmit_Byte_Bin+0x98>
     3cc:	00 93 c6 00 	sts	0x00C6, r16
     3d0:	2f 5f       	subi	r18, 0xFF	; 255
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	2c 17       	cp	r18, r28
     3d6:	3d 07       	cpc	r19, r29
     3d8:	e1 f6       	brne	.-72     	; 0x392 <UART_Transmit_Byte_Bin+0x66>
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <UART_Transmit_Text>:
     3ec:	ac 01       	movw	r20, r24
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <UART_Transmit_Text+0x14>
     3f2:	80 91 c0 00 	lds	r24, 0x00C0
     3f6:	85 ff       	sbrs	r24, 5
     3f8:	fc cf       	rjmp	.-8      	; 0x3f2 <UART_Transmit_Text+0x6>
     3fa:	e0 93 c6 00 	sts	0x00C6, r30
     3fe:	2f 5f       	subi	r18, 0xFF	; 255
     400:	fa 01       	movw	r30, r20
     402:	e2 0f       	add	r30, r18
     404:	f1 1d       	adc	r31, r1
     406:	e0 81       	ld	r30, Z
     408:	ee 23       	and	r30, r30
     40a:	99 f7       	brne	.-26     	; 0x3f2 <UART_Transmit_Text+0x6>
     40c:	08 95       	ret

0000040e <UART_Transmit_New_Line>:
     40e:	85 e0       	ldi	r24, 0x05	; 5
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
     416:	08 95       	ret

00000418 <UART_Transmit_Space>:
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <UART_Transmit_Text>
     420:	08 95       	ret

00000422 <UART_Determine_Digit_Numbers>:
     422:	bf 92       	push	r11
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	6b 01       	movw	r12, r22
     432:	7c 01       	movw	r14, r24
     434:	61 15       	cp	r22, r1
     436:	71 05       	cpc	r23, r1
     438:	81 05       	cpc	r24, r1
     43a:	91 05       	cpc	r25, r1
     43c:	31 f4       	brne	.+12     	; 0x44a <UART_Determine_Digit_Numbers+0x28>
     43e:	10 92 15 01 	sts	0x0115, r1
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 1d 01 	sts	0x011D, r24
     448:	23 c0       	rjmp	.+70     	; 0x490 <UART_Determine_Digit_Numbers+0x6e>
     44a:	bb 24       	eor	r11, r11
     44c:	0b 2d       	mov	r16, r11
     44e:	10 e0       	ldi	r17, 0x00	; 0
     450:	0c 5e       	subi	r16, 0xEC	; 236
     452:	1e 4f       	sbci	r17, 0xFE	; 254
     454:	c7 01       	movw	r24, r14
     456:	b6 01       	movw	r22, r12
     458:	2a e0       	ldi	r18, 0x0A	; 10
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	0e 94 0f 19 	call	0x321e	; 0x321e <__udivmodsi4>
     464:	f8 01       	movw	r30, r16
     466:	61 83       	std	Z+1, r22	; 0x01
     468:	c7 01       	movw	r24, r14
     46a:	b6 01       	movw	r22, r12
     46c:	2a e0       	ldi	r18, 0x0A	; 10
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	50 e0       	ldi	r21, 0x00	; 0
     474:	0e 94 0f 19 	call	0x321e	; 0x321e <__udivmodsi4>
     478:	c9 01       	movw	r24, r18
     47a:	da 01       	movw	r26, r20
     47c:	6c 01       	movw	r12, r24
     47e:	7d 01       	movw	r14, r26
     480:	b3 94       	inc	r11
     482:	c1 14       	cp	r12, r1
     484:	d1 04       	cpc	r13, r1
     486:	e1 04       	cpc	r14, r1
     488:	f1 04       	cpc	r15, r1
     48a:	01 f7       	brne	.-64     	; 0x44c <UART_Determine_Digit_Numbers+0x2a>
     48c:	b0 92 1d 01 	sts	0x011D, r11
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	df 90       	pop	r13
     49a:	cf 90       	pop	r12
     49c:	bf 90       	pop	r11
     49e:	08 95       	ret

000004a0 <UART_Transmit_Number_Digits>:
     4a0:	e0 91 1d 01 	lds	r30, 0x011D
     4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <UART_Transmit_Number_Digits+0x24>
     4a6:	2e 2f       	mov	r18, r30
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	e2 2f       	mov	r30, r18
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	ec 5e       	subi	r30, 0xEC	; 236
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	80 91 c0 00 	lds	r24, 0x00C0
     4b8:	85 ff       	sbrs	r24, 5
     4ba:	fc cf       	rjmp	.-8      	; 0x4b4 <UART_Transmit_Number_Digits+0x14>
     4bc:	90 5d       	subi	r25, 0xD0	; 208
     4be:	90 93 c6 00 	sts	0x00C6, r25
     4c2:	e2 2f       	mov	r30, r18
     4c4:	ee 23       	and	r30, r30
     4c6:	79 f7       	brne	.-34     	; 0x4a6 <UART_Transmit_Number_Digits+0x6>
     4c8:	08 95       	ret

000004ca <UART_Transmit_Number>:
     4ca:	9b 01       	movw	r18, r22
     4cc:	ac 01       	movw	r20, r24
     4ce:	97 ff       	sbrs	r25, 7
     4d0:	0e c0       	rjmp	.+28     	; 0x4ee <UART_Transmit_Number+0x24>
     4d2:	80 91 c0 00 	lds	r24, 0x00C0
     4d6:	85 ff       	sbrs	r24, 5
     4d8:	fc cf       	rjmp	.-8      	; 0x4d2 <UART_Transmit_Number+0x8>
     4da:	8d e2       	ldi	r24, 0x2D	; 45
     4dc:	80 93 c6 00 	sts	0x00C6, r24
     4e0:	50 95       	com	r21
     4e2:	40 95       	com	r20
     4e4:	30 95       	com	r19
     4e6:	21 95       	neg	r18
     4e8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ea:	4f 4f       	sbci	r20, 0xFF	; 255
     4ec:	5f 4f       	sbci	r21, 0xFF	; 255
     4ee:	ca 01       	movw	r24, r20
     4f0:	b9 01       	movw	r22, r18
     4f2:	0e 94 11 02 	call	0x422	; 0x422 <UART_Determine_Digit_Numbers>
     4f6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <UART_Transmit_Number_Digits>
     4fa:	08 95       	ret

000004fc <UART_Read_From_Buffer>:
     4fc:	fc 01       	movw	r30, r24
     4fe:	ec 5e       	subi	r30, 0xEC	; 236
     500:	fe 4f       	sbci	r31, 0xFE	; 254
     502:	83 85       	ldd	r24, Z+11	; 0x0b
     504:	08 95       	ret

00000506 <UART_Current_Buffer_Index>:
     506:	20 91 41 01 	lds	r18, 0x0141
     50a:	30 91 42 01 	lds	r19, 0x0142
     50e:	c9 01       	movw	r24, r18
     510:	08 95       	ret

00000512 <UART_Flush_Buffer>:
     512:	10 92 14 01 	sts	0x0114, r1
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	06 c0       	rjmp	.+12     	; 0x528 <UART_Flush_Buffer+0x16>
     51c:	f9 01       	movw	r30, r18
     51e:	ec 5e       	subi	r30, 0xEC	; 236
     520:	fe 4f       	sbci	r31, 0xFE	; 254
     522:	13 86       	std	Z+11, r1	; 0x0b
     524:	2f 5f       	subi	r18, 0xFF	; 255
     526:	3f 4f       	sbci	r19, 0xFF	; 255
     528:	80 91 3f 01 	lds	r24, 0x013F
     52c:	90 91 40 01 	lds	r25, 0x0140
     530:	28 17       	cp	r18, r24
     532:	39 07       	cpc	r19, r25
     534:	98 f3       	brcs	.-26     	; 0x51c <UART_Flush_Buffer+0xa>
     536:	10 92 42 01 	sts	0x0142, r1
     53a:	10 92 41 01 	sts	0x0141, r1
     53e:	08 95       	ret

00000540 <UART_Interrupt_Service_Routine>:
     540:	df 93       	push	r29
     542:	cf 93       	push	r28
     544:	0f 92       	push	r0
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	19 82       	std	Y+1, r1	; 0x01
     54c:	0e 94 13 01 	call	0x226	; 0x226 <UART_Receive_Byte>
     550:	89 83       	std	Y+1, r24	; 0x01
     552:	80 91 14 01 	lds	r24, 0x0114
     556:	88 23       	and	r24, r24
     558:	19 f5       	brne	.+70     	; 0x5a0 <UART_Interrupt_Service_Routine+0x60>
     55a:	89 81       	ldd	r24, Y+1	; 0x01
     55c:	80 93 1e 01 	sts	0x011E, r24
     560:	e0 91 41 01 	lds	r30, 0x0141
     564:	f0 91 42 01 	lds	r31, 0x0142
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	ec 5e       	subi	r30, 0xEC	; 236
     56c:	fe 4f       	sbci	r31, 0xFE	; 254
     56e:	83 87       	std	Z+11, r24	; 0x0b
     570:	80 91 41 01 	lds	r24, 0x0141
     574:	90 91 42 01 	lds	r25, 0x0142
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	90 93 42 01 	sts	0x0142, r25
     57e:	80 93 41 01 	sts	0x0141, r24
     582:	20 91 41 01 	lds	r18, 0x0141
     586:	30 91 42 01 	lds	r19, 0x0142
     58a:	80 91 3f 01 	lds	r24, 0x013F
     58e:	90 91 40 01 	lds	r25, 0x0140
     592:	28 17       	cp	r18, r24
     594:	39 07       	cpc	r19, r25
     596:	20 f0       	brcs	.+8      	; 0x5a0 <UART_Interrupt_Service_Routine+0x60>
     598:	10 92 42 01 	sts	0x0142, r1
     59c:	10 92 41 01 	sts	0x0141, r1
     5a0:	0f 90       	pop	r0
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	08 95       	ret

000005a8 <__vector_18>:
     5a8:	1f 92       	push	r1
     5aa:	0f 92       	push	r0
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	0f 92       	push	r0
     5b0:	11 24       	eor	r1, r1
     5b2:	2f 93       	push	r18
     5b4:	3f 93       	push	r19
     5b6:	4f 93       	push	r20
     5b8:	5f 93       	push	r21
     5ba:	6f 93       	push	r22
     5bc:	7f 93       	push	r23
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	af 93       	push	r26
     5c4:	bf 93       	push	r27
     5c6:	ef 93       	push	r30
     5c8:	ff 93       	push	r31
     5ca:	0e 94 a0 02 	call	0x540	; 0x540 <UART_Interrupt_Service_Routine>
     5ce:	ff 91       	pop	r31
     5d0:	ef 91       	pop	r30
     5d2:	bf 91       	pop	r27
     5d4:	af 91       	pop	r26
     5d6:	9f 91       	pop	r25
     5d8:	8f 91       	pop	r24
     5da:	7f 91       	pop	r23
     5dc:	6f 91       	pop	r22
     5de:	5f 91       	pop	r21
     5e0:	4f 91       	pop	r20
     5e2:	3f 91       	pop	r19
     5e4:	2f 91       	pop	r18
     5e6:	0f 90       	pop	r0
     5e8:	0f be       	out	0x3f, r0	; 63
     5ea:	0f 90       	pop	r0
     5ec:	1f 90       	pop	r1
     5ee:	18 95       	reti

000005f0 <UART_Init>:
     5f0:	ef 92       	push	r14
     5f2:	ff 92       	push	r15
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	7b 01       	movw	r14, r22
     5fa:	8c 01       	movw	r16, r24
     5fc:	0e 94 b5 00 	call	0x16a	; 0x16a <UART_Struct_Init>
     600:	c8 01       	movw	r24, r16
     602:	b7 01       	movw	r22, r14
     604:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <UART_Config_BAUD_Rate>
     608:	e1 ec       	ldi	r30, 0xC1	; 193
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	88 60       	ori	r24, 0x08	; 8
     610:	80 83       	st	Z, r24
     612:	a2 ec       	ldi	r26, 0xC2	; 194
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	96 e0       	ldi	r25, 0x06	; 6
     618:	9c 93       	st	X, r25
     61a:	80 81       	ld	r24, Z
     61c:	80 61       	ori	r24, 0x10	; 16
     61e:	80 83       	st	Z, r24
     620:	9c 93       	st	X, r25
     622:	80 81       	ld	r24, Z
     624:	80 68       	ori	r24, 0x80	; 128
     626:	80 83       	st	Z, r24
     628:	78 94       	sei
     62a:	0e 94 89 02 	call	0x512	; 0x512 <UART_Flush_Buffer>
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	08 95       	ret

00000638 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     638:	85 e4       	ldi	r24, 0x45	; 69
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 44 01 	sts	0x0144, r25
     640:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.TimerType.Value = 0;
     644:	10 92 45 01 	sts	0x0145, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     648:	80 91 45 01 	lds	r24, 0x0145
     64c:	84 60       	ori	r24, 0x04	; 4
     64e:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     652:	80 91 45 01 	lds	r24, 0x0145
     656:	87 70       	andi	r24, 0x07	; 7
     658:	80 93 45 01 	sts	0x0145, r24
  Timebase->Config.UpdateRate = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 47 01 	sts	0x0147, r25
     664:	80 93 46 01 	sts	0x0146, r24
  Timebase->Time.OVFUpdateValue=0;
     668:	10 92 48 01 	sts	0x0148, r1
  Timebase->Time.SubSecondsShadow = 0;
     66c:	10 92 54 01 	sts	0x0154, r1
     670:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.SecondsShadow = 0;
     674:	10 92 55 01 	sts	0x0155, r1
     678:	10 92 56 01 	sts	0x0156, r1
     67c:	10 92 57 01 	sts	0x0157, r1
     680:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.SubSeconds = 0;
     684:	10 92 4e 01 	sts	0x014E, r1
     688:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Time.Seconds = 0;
     68c:	10 92 4f 01 	sts	0x014F, r1
     690:	10 92 50 01 	sts	0x0150, r1
     694:	10 92 51 01 	sts	0x0151, r1
     698:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.VariablesSync = 0;
     69c:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.LastSample = 0;
     6a0:	10 92 49 01 	sts	0x0149, r1
     6a4:	10 92 4a 01 	sts	0x014A, r1
     6a8:	10 92 4b 01 	sts	0x014B, r1
     6ac:	10 92 4c 01 	sts	0x014C, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     6b0:	10 92 5a 01 	sts	0x015A, r1
     6b4:	10 92 5b 01 	sts	0x015B, r1
     6b8:	10 92 5c 01 	sts	0x015C, r1
     6bc:	10 92 5d 01 	sts	0x015D, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     6c0:	10 92 5e 01 	sts	0x015E, r1
     6c4:	10 92 5f 01 	sts	0x015F, r1
     6c8:	10 92 60 01 	sts	0x0160, r1
     6cc:	10 92 61 01 	sts	0x0161, r1
	Timebase->Time.Status = 0;
     6d0:	10 92 62 01 	sts	0x0162, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     6d4:	10 92 63 01 	sts	0x0163, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     6d8:	10 92 64 01 	sts	0x0164, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     6dc:	10 92 7e 01 	sts	0x017E, r1
    Timebase->UpCounter[i].EndValue = 0;
     6e0:	10 92 7f 01 	sts	0x017F, r1
     6e4:	10 92 80 01 	sts	0x0180, r1
     6e8:	10 92 81 01 	sts	0x0181, r1
     6ec:	10 92 82 01 	sts	0x0182, r1
    Timebase->UpCounter[i].Target = 0;
     6f0:	10 92 83 01 	sts	0x0183, r1
     6f4:	10 92 84 01 	sts	0x0184, r1
     6f8:	10 92 85 01 	sts	0x0185, r1
     6fc:	10 92 86 01 	sts	0x0186, r1
    Timebase->UpCounter[i].Temporary = 0;    
     700:	10 92 87 01 	sts	0x0187, r1
     704:	10 92 88 01 	sts	0x0188, r1
     708:	10 92 89 01 	sts	0x0189, r1
     70c:	10 92 8a 01 	sts	0x018A, r1
    Timebase->UpCounter[i].Value = 0;
     710:	10 92 8b 01 	sts	0x018B, r1
     714:	10 92 8c 01 	sts	0x018C, r1
     718:	10 92 8d 01 	sts	0x018D, r1
     71c:	10 92 8e 01 	sts	0x018E, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     720:	10 92 8f 01 	sts	0x018F, r1
     724:	10 92 90 01 	sts	0x0190, r1
     728:	10 92 91 01 	sts	0x0191, r1
     72c:	10 92 92 01 	sts	0x0192, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     730:	10 92 65 01 	sts	0x0165, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     734:	10 92 66 01 	sts	0x0166, r1
     738:	10 92 67 01 	sts	0x0167, r1
     73c:	10 92 68 01 	sts	0x0168, r1
     740:	10 92 69 01 	sts	0x0169, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     744:	10 92 6a 01 	sts	0x016A, r1
     748:	10 92 6b 01 	sts	0x016B, r1
     74c:	10 92 6c 01 	sts	0x016C, r1
     750:	10 92 6d 01 	sts	0x016D, r1
    Timebase->UpCounterSS[i].Target = 0;
     754:	10 92 6e 01 	sts	0x016E, r1
     758:	10 92 6f 01 	sts	0x016F, r1
     75c:	10 92 70 01 	sts	0x0170, r1
     760:	10 92 71 01 	sts	0x0171, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     764:	10 92 72 01 	sts	0x0172, r1
     768:	10 92 73 01 	sts	0x0173, r1
     76c:	10 92 74 01 	sts	0x0174, r1
     770:	10 92 75 01 	sts	0x0175, r1
    Timebase->UpCounterSS[i].Value = 0;
     774:	10 92 76 01 	sts	0x0176, r1
     778:	10 92 77 01 	sts	0x0177, r1
     77c:	10 92 78 01 	sts	0x0178, r1
     780:	10 92 79 01 	sts	0x0179, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     784:	10 92 7a 01 	sts	0x017A, r1
     788:	10 92 7b 01 	sts	0x017B, r1
     78c:	10 92 7c 01 	sts	0x017C, r1
     790:	10 92 7d 01 	sts	0x017D, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     794:	10 92 a4 01 	sts	0x01A4, r1
    Timebase->DownCounter[i].EndValue = 0;
     798:	10 92 a5 01 	sts	0x01A5, r1
     79c:	10 92 a6 01 	sts	0x01A6, r1
     7a0:	10 92 a7 01 	sts	0x01A7, r1
     7a4:	10 92 a8 01 	sts	0x01A8, r1
    Timebase->DownCounter[i].Value = 0;
     7a8:	10 92 a9 01 	sts	0x01A9, r1
     7ac:	10 92 aa 01 	sts	0x01AA, r1
     7b0:	10 92 ab 01 	sts	0x01AB, r1
     7b4:	10 92 ac 01 	sts	0x01AC, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     7b8:	10 92 ad 01 	sts	0x01AD, r1
     7bc:	10 92 ae 01 	sts	0x01AE, r1
     7c0:	10 92 af 01 	sts	0x01AF, r1
     7c4:	10 92 b0 01 	sts	0x01B0, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     7c8:	10 92 93 01 	sts	0x0193, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     7cc:	10 92 94 01 	sts	0x0194, r1
     7d0:	10 92 95 01 	sts	0x0195, r1
     7d4:	10 92 96 01 	sts	0x0196, r1
     7d8:	10 92 97 01 	sts	0x0197, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     7dc:	10 92 98 01 	sts	0x0198, r1
     7e0:	10 92 99 01 	sts	0x0199, r1
     7e4:	10 92 9a 01 	sts	0x019A, r1
     7e8:	10 92 9b 01 	sts	0x019B, r1
    Timebase->DownCounterSS[i].Value = 0;
     7ec:	10 92 9c 01 	sts	0x019C, r1
     7f0:	10 92 9d 01 	sts	0x019D, r1
     7f4:	10 92 9e 01 	sts	0x019E, r1
     7f8:	10 92 9f 01 	sts	0x019F, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7fc:	10 92 a0 01 	sts	0x01A0, r1
     800:	10 92 a1 01 	sts	0x01A1, r1
     804:	10 92 a2 01 	sts	0x01A2, r1
     808:	10 92 a3 01 	sts	0x01A3, r1
  }
  #endif
  
}
     80c:	08 95       	ret

0000080e <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     80e:	7f 92       	push	r7
     810:	8f 92       	push	r8
     812:	9f 92       	push	r9
     814:	af 92       	push	r10
     816:	bf 92       	push	r11
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	2a 97       	sbiw	r28, 0x0a	; 10
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
     838:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     83a:	c0 90 43 01 	lds	r12, 0x0143
     83e:	d0 90 44 01 	lds	r13, 0x0144
     842:	f6 01       	movw	r30, r12
     844:	80 81       	ld	r24, Z
     846:	80 ff       	sbrs	r24, 0
     848:	31 c0       	rjmp	.+98     	; 0x8ac <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     84a:	01 30       	cpi	r16, 0x01	; 1
     84c:	11 05       	cpc	r17, r1
     84e:	11 f4       	brne	.+4      	; 0x854 <Timebase_Timer_Config+0x46>
     850:	96 e0       	ldi	r25, 0x06	; 6
     852:	19 c0       	rjmp	.+50     	; 0x886 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     854:	02 30       	cpi	r16, 0x02	; 2
     856:	11 05       	cpc	r17, r1
     858:	11 f4       	brne	.+4      	; 0x85e <Timebase_Timer_Config+0x50>
     85a:	95 e0       	ldi	r25, 0x05	; 5
     85c:	14 c0       	rjmp	.+40     	; 0x886 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     85e:	04 30       	cpi	r16, 0x04	; 4
     860:	11 05       	cpc	r17, r1
     862:	11 f4       	brne	.+4      	; 0x868 <Timebase_Timer_Config+0x5a>
     864:	94 e0       	ldi	r25, 0x04	; 4
     866:	0f c0       	rjmp	.+30     	; 0x886 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     868:	08 30       	cpi	r16, 0x08	; 8
     86a:	11 05       	cpc	r17, r1
     86c:	11 f4       	brne	.+4      	; 0x872 <Timebase_Timer_Config+0x64>
     86e:	93 e0       	ldi	r25, 0x03	; 3
     870:	0a c0       	rjmp	.+20     	; 0x886 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     872:	00 31       	cpi	r16, 0x10	; 16
     874:	11 05       	cpc	r17, r1
     876:	11 f4       	brne	.+4      	; 0x87c <Timebase_Timer_Config+0x6e>
     878:	92 e0       	ldi	r25, 0x02	; 2
     87a:	05 c0       	rjmp	.+10     	; 0x886 <Timebase_Timer_Config+0x78>
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	00 32       	cpi	r16, 0x20	; 32
     880:	11 05       	cpc	r17, r1
     882:	09 f4       	brne	.+2      	; 0x886 <Timebase_Timer_Config+0x78>
     884:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     886:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     888:	84 b7       	in	r24, 0x34	; 52
     88a:	87 7f       	andi	r24, 0xF7	; 247
     88c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     88e:	80 91 60 00 	lds	r24, 0x0060
     892:	80 68       	ori	r24, 0x80	; 128
     894:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     898:	80 91 60 00 	lds	r24, 0x0060
     89c:	88 61       	ori	r24, 0x18	; 24
     89e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     8a2:	90 64       	ori	r25, 0x40	; 64
     8a4:	90 93 60 00 	sts	0x0060, r25
    sei();
     8a8:	78 94       	sei
     8aa:	67 c0       	rjmp	.+206    	; 0x97a <__stack+0x7b>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     8ac:	81 fd       	sbrc	r24, 1
     8ae:	65 c0       	rjmp	.+202    	; 0x97a <__stack+0x7b>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     8b0:	82 ff       	sbrs	r24, 2
     8b2:	63 c0       	rjmp	.+198    	; 0x97a <__stack+0x7b>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     8b4:	de 01       	movw	r26, r28
     8b6:	11 96       	adiw	r26, 0x01	; 1
     8b8:	ea e0       	ldi	r30, 0x0A	; 10
     8ba:	f1 e0       	ldi	r31, 0x01	; 1
     8bc:	8a e0       	ldi	r24, 0x0A	; 10
     8be:	01 90       	ld	r0, Z+
     8c0:	0d 92       	st	X+, r0
     8c2:	81 50       	subi	r24, 0x01	; 1
     8c4:	e1 f7       	brne	.-8      	; 0x8be <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     8c6:	98 01       	movw	r18, r16
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	7b e1       	ldi	r23, 0x1B	; 27
     8d0:	87 eb       	ldi	r24, 0xB7	; 183
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
     8d8:	72 2e       	mov	r7, r18
     8da:	83 2e       	mov	r8, r19
     8dc:	94 2e       	mov	r9, r20
     8de:	e5 2e       	mov	r14, r21
     8e0:	5e 01       	movw	r10, r28
     8e2:	08 94       	sec
     8e4:	a1 1c       	adc	r10, r1
     8e6:	b1 1c       	adc	r11, r1
     8e8:	c9 01       	movw	r24, r18
     8ea:	da 01       	movw	r26, r20
     8ec:	9c 01       	movw	r18, r24
     8ee:	ad 01       	movw	r20, r26
     8f0:	ff 24       	eor	r15, r15
     8f2:	14 c0       	rjmp	.+40     	; 0x91c <__stack+0x1d>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     8f4:	f5 01       	movw	r30, r10
     8f6:	21 91       	ld	r18, Z+
     8f8:	31 91       	ld	r19, Z+
     8fa:	5f 01       	movw	r10, r30
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	67 2d       	mov	r22, r7
     902:	78 2d       	mov	r23, r8
     904:	89 2d       	mov	r24, r9
     906:	9e 2d       	mov	r25, r14
     908:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
     90c:	c9 01       	movw	r24, r18
     90e:	da 01       	movw	r26, r20
     910:	9c 01       	movw	r18, r24
     912:	ad 01       	movw	r20, r26
	  clock_div_index++;
     914:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     916:	f5 e0       	ldi	r31, 0x05	; 5
     918:	ff 16       	cp	r15, r31
     91a:	31 f0       	breq	.+12     	; 0x928 <__stack+0x29>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     91c:	2f 3f       	cpi	r18, 0xFF	; 255
     91e:	31 05       	cpc	r19, r1
     920:	41 05       	cpc	r20, r1
     922:	51 05       	cpc	r21, r1
     924:	09 f0       	breq	.+2      	; 0x928 <__stack+0x29>
     926:	34 f7       	brge	.-52     	; 0x8f4 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     928:	8f 2d       	mov	r24, r15
     92a:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     92c:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     92e:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     930:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     934:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     936:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     938:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     93a:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     93c:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     93e:	88 23       	and	r24, r24
     940:	11 f4       	brne	.+4      	; 0x946 <__stack+0x47>
	  TCCR0B = (1<<CS00);
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	0f c0       	rjmp	.+30     	; 0x964 <__stack+0x65>
	}else if(clock_div_index == 1){
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	11 f4       	brne	.+4      	; 0x94e <__stack+0x4f>
	  TCCR0B = (1<<CS01);
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	0b c0       	rjmp	.+22     	; 0x964 <__stack+0x65>
	}else if(clock_div_index == 2){
     94e:	82 30       	cpi	r24, 0x02	; 2
     950:	11 f4       	brne	.+4      	; 0x956 <__stack+0x57>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     952:	83 e0       	ldi	r24, 0x03	; 3
     954:	07 c0       	rjmp	.+14     	; 0x964 <__stack+0x65>
	}else if(clock_div_index == 3){
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	11 f4       	brne	.+4      	; 0x95e <__stack+0x5f>
	  TCCR0B = (1<<CS02);
     95a:	84 e0       	ldi	r24, 0x04	; 4
     95c:	03 c0       	rjmp	.+6      	; 0x964 <__stack+0x65>
	}else if(clock_div_index == 4){
     95e:	84 30       	cpi	r24, 0x04	; 4
     960:	11 f4       	brne	.+4      	; 0x966 <__stack+0x67>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     962:	85 e0       	ldi	r24, 0x05	; 5
     964:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     966:	82 2f       	mov	r24, r18
     968:	80 95       	com	r24
     96a:	f6 01       	movw	r30, r12
     96c:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     96e:	83 81       	ldd	r24, Z+3	; 0x03
     970:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	80 93 6e 00 	sts	0x006E, r24
    sei();
     978:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     97a:	f6 01       	movw	r30, r12
     97c:	12 83       	std	Z+2, r17	; 0x02
     97e:	01 83       	std	Z+1, r16	; 0x01
}
     980:	2a 96       	adiw	r28, 0x0a	; 10
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	cf 91       	pop	r28
     98e:	df 91       	pop	r29
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	08 95       	ret

000009a8 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9a8:	f8 94       	cli
}
     9aa:	08 95       	ret

000009ac <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     9ac:	78 94       	sei
}
     9ae:	08 95       	ret

000009b0 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     9b0:	e0 91 43 01 	lds	r30, 0x0143
     9b4:	f0 91 44 01 	lds	r31, 0x0144
     9b8:	87 8d       	ldd	r24, Z+31	; 0x1f
}
     9ba:	08 95       	ret

000009bc <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     9bc:	e0 91 43 01 	lds	r30, 0x0143
     9c0:	f0 91 44 01 	lds	r31, 0x0144
     9c4:	87 8d       	ldd	r24, Z+31	; 0x1f
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     9c6:	8f 33       	cpi	r24, 0x3F	; 63
     9c8:	18 f4       	brcc	.+6      	; 0x9d0 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     9ca:	87 8d       	ldd	r24, Z+31	; 0x1f
     9cc:	8f 5f       	subi	r24, 0xFF	; 255
     9ce:	87 8f       	std	Z+31, r24	; 0x1f
     9d0:	08 95       	ret

000009d2 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     9d2:	e0 91 43 01 	lds	r30, 0x0143
     9d6:	f0 91 44 01 	lds	r31, 0x0144
     9da:	87 8d       	ldd	r24, Z+31	; 0x1f
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     9dc:	88 23       	and	r24, r24
     9de:	19 f0       	breq	.+6      	; 0x9e6 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     9e0:	87 8d       	ldd	r24, Z+31	; 0x1f
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	87 8f       	std	Z+31, r24	; 0x1f
     9e6:	08 95       	ret

000009e8 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     9e8:	e0 91 43 01 	lds	r30, 0x0143
     9ec:	f0 91 44 01 	lds	r31, 0x0144
     9f0:	17 8e       	std	Z+31, r1	; 0x1f
}
     9f2:	08 95       	ret

000009f4 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     9f4:	e0 91 43 01 	lds	r30, 0x0143
     9f8:	f0 91 44 01 	lds	r31, 0x0144
     9fc:	26 85       	ldd	r18, Z+14	; 0x0e
     9fe:	37 85       	ldd	r19, Z+15	; 0x0f
}
     a00:	c9 01       	movw	r24, r18
     a02:	08 95       	ret

00000a04 <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     a04:	e0 91 43 01 	lds	r30, 0x0143
     a08:	f0 91 44 01 	lds	r31, 0x0144
     a0c:	20 89       	ldd	r18, Z+16	; 0x10
     a0e:	31 89       	ldd	r19, Z+17	; 0x11
     a10:	42 89       	ldd	r20, Z+18	; 0x12
     a12:	53 89       	ldd	r21, Z+19	; 0x13
}
     a14:	b9 01       	movw	r22, r18
     a16:	ca 01       	movw	r24, r20
     a18:	08 95       	ret

00000a1a <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a1a:	e0 91 43 01 	lds	r30, 0x0143
     a1e:	f0 91 44 01 	lds	r31, 0x0144
     a22:	20 85       	ldd	r18, Z+8	; 0x08
     a24:	31 85       	ldd	r19, Z+9	; 0x09
}
     a26:	c9 01       	movw	r24, r18
     a28:	08 95       	ret

00000a2a <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a2a:	e0 91 43 01 	lds	r30, 0x0143
     a2e:	f0 91 44 01 	lds	r31, 0x0144
     a32:	22 85       	ldd	r18, Z+10	; 0x0a
     a34:	33 85       	ldd	r19, Z+11	; 0x0b
     a36:	44 85       	ldd	r20, Z+12	; 0x0c
     a38:	55 85       	ldd	r21, Z+13	; 0x0d
}
     a3a:	b9 01       	movw	r22, r18
     a3c:	ca 01       	movw	r24, r20
     a3e:	08 95       	ret

00000a40 <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     a40:	e0 91 43 01 	lds	r30, 0x0143
     a44:	f0 91 44 01 	lds	r31, 0x0144
     a48:	91 87       	std	Z+9, r25	; 0x09
     a4a:	80 87       	std	Z+8, r24	; 0x08
}
     a4c:	08 95       	ret

00000a4e <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     a4e:	e0 91 43 01 	lds	r30, 0x0143
     a52:	f0 91 44 01 	lds	r31, 0x0144
     a56:	62 87       	std	Z+10, r22	; 0x0a
     a58:	73 87       	std	Z+11, r23	; 0x0b
     a5a:	84 87       	std	Z+12, r24	; 0x0c
     a5c:	95 87       	std	Z+13, r25	; 0x0d
}
     a5e:	08 95       	ret

00000a60 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     a60:	e0 91 43 01 	lds	r30, 0x0143
     a64:	f0 91 44 01 	lds	r31, 0x0144
     a68:	84 89       	ldd	r24, Z+20	; 0x14
     a6a:	88 23       	and	r24, r24
     a6c:	81 f4       	brne	.+32     	; 0xa8e <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a6e:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
  
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     a70:	86 85       	ldd	r24, Z+14	; 0x0e
     a72:	97 85       	ldd	r25, Z+15	; 0x0f
     a74:	91 87       	std	Z+9, r25	; 0x09
     a76:	80 87       	std	Z+8, r24	; 0x08
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     a78:	80 89       	ldd	r24, Z+16	; 0x10
     a7a:	91 89       	ldd	r25, Z+17	; 0x11
     a7c:	a2 89       	ldd	r26, Z+18	; 0x12
     a7e:	b3 89       	ldd	r27, Z+19	; 0x13
     a80:	82 87       	std	Z+10, r24	; 0x0a
     a82:	93 87       	std	Z+11, r25	; 0x0b
     a84:	a4 87       	std	Z+12, r26	; 0x0c
     a86:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a88:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	84 8b       	std	Z+20, r24	; 0x14
     a8e:	08 95       	ret

00000a90 <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     a90:	6f 92       	push	r6
     a92:	7f 92       	push	r7
     a94:	8f 92       	push	r8
     a96:	9f 92       	push	r9
     a98:	af 92       	push	r10
     a9a:	bf 92       	push	r11
     a9c:	cf 92       	push	r12
     a9e:	df 92       	push	r13
     aa0:	ef 92       	push	r14
     aa2:	ff 92       	push	r15
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     aae:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     ab0:	c0 91 43 01 	lds	r28, 0x0143
     ab4:	d0 91 44 01 	lds	r29, 0x0144
     ab8:	ee 84       	ldd	r14, Y+14	; 0x0e
     aba:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     abc:	28 89       	ldd	r18, Y+16	; 0x10
     abe:	39 89       	ldd	r19, Y+17	; 0x11
     ac0:	4a 89       	ldd	r20, Y+18	; 0x12
     ac2:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ac4:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     ac6:	69 81       	ldd	r22, Y+1	; 0x01
     ac8:	7a 81       	ldd	r23, Y+2	; 0x02
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__mulsi3>
     ad2:	3b 01       	movw	r6, r22
     ad4:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     ad6:	00 e0       	ldi	r16, 0x00	; 0
     ad8:	10 e0       	ldi	r17, 0x00	; 0
     ada:	6e 0c       	add	r6, r14
     adc:	7f 1c       	adc	r7, r15
     ade:	80 1e       	adc	r8, r16
     ae0:	91 1e       	adc	r9, r17
  smpl_val += value;
     ae2:	cc 24       	eor	r12, r12
     ae4:	dd 24       	eor	r13, r13
     ae6:	6a 0c       	add	r6, r10
     ae8:	7b 1c       	adc	r7, r11
     aea:	8c 1c       	adc	r8, r12
     aec:	9d 1c       	adc	r9, r13
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	14 c0       	rjmp	.+40     	; 0xb20 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     af8:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     afa:	ee 84       	ldd	r14, Y+14	; 0x0e
     afc:	ff 84       	ldd	r15, Y+15	; 0x0f
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     afe:	28 89       	ldd	r18, Y+16	; 0x10
     b00:	39 89       	ldd	r19, Y+17	; 0x11
     b02:	4a 89       	ldd	r20, Y+18	; 0x12
     b04:	5b 89       	ldd	r21, Y+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b06:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     b08:	69 81       	ldd	r22, Y+1	; 0x01
     b0a:	7a 81       	ldd	r23, Y+2	; 0x02
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__mulsi3>
	curr_val += curr_ss;
     b14:	00 e0       	ldi	r16, 0x00	; 0
     b16:	10 e0       	ldi	r17, 0x00	; 0
     b18:	6e 0d       	add	r22, r14
     b1a:	7f 1d       	adc	r23, r15
     b1c:	80 1f       	adc	r24, r16
     b1e:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     b20:	66 15       	cp	r22, r6
     b22:	77 05       	cpc	r23, r7
     b24:	88 05       	cpc	r24, r8
     b26:	99 05       	cpc	r25, r9
     b28:	3c f3       	brlt	.-50     	; 0xaf8 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	cf 90       	pop	r12
     b3a:	bf 90       	pop	r11
     b3c:	af 90       	pop	r10
     b3e:	9f 90       	pop	r9
     b40:	8f 90       	pop	r8
     b42:	7f 90       	pop	r7
     b44:	6f 90       	pop	r6
     b46:	08 95       	ret

00000b48 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     b48:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b4a:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b4c:	e0 91 43 01 	lds	r30, 0x0143
     b50:	f0 91 44 01 	lds	r31, 0x0144
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b56:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b58:	86 85       	ldd	r24, Z+14	; 0x0e
     b5a:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b5c:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     b5e:	24 81       	ldd	r18, Z+4	; 0x04
     b60:	35 81       	ldd	r19, Z+5	; 0x05
     b62:	46 81       	ldd	r20, Z+6	; 0x06
     b64:	57 81       	ldd	r21, Z+7	; 0x07
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	82 17       	cp	r24, r18
     b6c:	93 07       	cpc	r25, r19
     b6e:	a4 07       	cpc	r26, r20
     b70:	b5 07       	cpc	r27, r21
     b72:	89 f7       	brne	.-30     	; 0xb56 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b74:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     b76:	86 85       	ldd	r24, Z+14	; 0x0e
     b78:	97 85       	ldd	r25, Z+15	; 0x0f
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b7a:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	84 83       	std	Z+4, r24	; 0x04
     b82:	95 83       	std	Z+5, r25	; 0x05
     b84:	a6 83       	std	Z+6, r26	; 0x06
     b86:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     b88:	24 81       	ldd	r18, Z+4	; 0x04
     b8a:	35 81       	ldd	r19, Z+5	; 0x05
     b8c:	46 81       	ldd	r20, Z+6	; 0x06
     b8e:	57 81       	ldd	r21, Z+7	; 0x07
     b90:	cb 01       	movw	r24, r22
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	82 0f       	add	r24, r18
     b98:	93 1f       	adc	r25, r19
     b9a:	a4 1f       	adc	r26, r20
     b9c:	b5 1f       	adc	r27, r21
     b9e:	84 83       	std	Z+4, r24	; 0x04
     ba0:	95 83       	std	Z+5, r25	; 0x05
     ba2:	a6 83       	std	Z+6, r26	; 0x06
     ba4:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     ba6:	24 81       	ldd	r18, Z+4	; 0x04
     ba8:	35 81       	ldd	r19, Z+5	; 0x05
     baa:	46 81       	ldd	r20, Z+6	; 0x06
     bac:	57 81       	ldd	r21, Z+7	; 0x07
     bae:	81 81       	ldd	r24, Z+1	; 0x01
     bb0:	92 81       	ldd	r25, Z+2	; 0x02
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	28 17       	cp	r18, r24
     bb8:	39 07       	cpc	r19, r25
     bba:	4a 07       	cpc	r20, r26
     bbc:	5b 07       	cpc	r21, r27
     bbe:	84 f0       	brlt	.+32     	; 0xbe0 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     bc0:	24 81       	ldd	r18, Z+4	; 0x04
     bc2:	35 81       	ldd	r19, Z+5	; 0x05
     bc4:	46 81       	ldd	r20, Z+6	; 0x06
     bc6:	57 81       	ldd	r21, Z+7	; 0x07
     bc8:	81 81       	ldd	r24, Z+1	; 0x01
     bca:	92 81       	ldd	r25, Z+2	; 0x02
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	28 1b       	sub	r18, r24
     bd2:	39 0b       	sbc	r19, r25
     bd4:	4a 0b       	sbc	r20, r26
     bd6:	5b 0b       	sbc	r21, r27
     bd8:	24 83       	std	Z+4, r18	; 0x04
     bda:	35 83       	std	Z+5, r19	; 0x05
     bdc:	46 83       	std	Z+6, r20	; 0x06
     bde:	57 83       	std	Z+7, r21	; 0x07
     be0:	08 95       	ret

00000be2 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     be2:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     be4:	e0 91 43 01 	lds	r30, 0x0143
     be8:	f0 91 44 01 	lds	r31, 0x0144
     bec:	20 89       	ldd	r18, Z+16	; 0x10
     bee:	31 89       	ldd	r19, Z+17	; 0x11
     bf0:	42 89       	ldd	r20, Z+18	; 0x12
     bf2:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf4:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     bf6:	a0 e0       	ldi	r26, 0x00	; 0
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	a4 1f       	adc	r26, r20
     c00:	b5 1f       	adc	r27, r21
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	06 c0       	rjmp	.+12     	; 0xc18 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c0c:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     c0e:	20 89       	ldd	r18, Z+16	; 0x10
     c10:	31 89       	ldd	r19, Z+17	; 0x11
     c12:	42 89       	ldd	r20, Z+18	; 0x12
     c14:	53 89       	ldd	r21, Z+19	; 0x13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     c16:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     c18:	28 17       	cp	r18, r24
     c1a:	39 07       	cpc	r19, r25
     c1c:	4a 07       	cpc	r20, r26
     c1e:	5b 07       	cpc	r21, r27
     c20:	ac f3       	brlt	.-22     	; 0xc0c <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     c22:	08 95       	ret

00000c24 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c24:	e0 91 43 01 	lds	r30, 0x0143
     c28:	f0 91 44 01 	lds	r31, 0x0144
     c2c:	15 8a       	std	Z+21, r1	; 0x15
     c2e:	16 8a       	std	Z+22, r1	; 0x16
     c30:	17 8a       	std	Z+23, r1	; 0x17
     c32:	10 8e       	std	Z+24, r1	; 0x18
  Timebase->Time.StartTimeSubSeconds = 0;
     c34:	11 8e       	std	Z+25, r1	; 0x19
     c36:	12 8e       	std	Z+26, r1	; 0x1a
     c38:	13 8e       	std	Z+27, r1	; 0x1b
     c3a:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c3c:	15 8e       	std	Z+29, r1	; 0x1d
}
     c3e:	08 95       	ret

00000c40 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     c40:	e0 91 43 01 	lds	r30, 0x0143
     c44:	f0 91 44 01 	lds	r31, 0x0144
     c48:	85 8d       	ldd	r24, Z+29	; 0x1d
     c4a:	88 23       	and	r24, r24
     c4c:	a1 f4       	brne	.+40     	; 0xc76 <Timebase_Window_Timer_Start+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c4e:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     c50:	80 89       	ldd	r24, Z+16	; 0x10
     c52:	91 89       	ldd	r25, Z+17	; 0x11
     c54:	a2 89       	ldd	r26, Z+18	; 0x12
     c56:	b3 89       	ldd	r27, Z+19	; 0x13
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
     c58:	85 8b       	std	Z+21, r24	; 0x15
     c5a:	96 8b       	std	Z+22, r25	; 0x16
     c5c:	a7 8b       	std	Z+23, r26	; 0x17
     c5e:	b0 8f       	std	Z+24, r27	; 0x18


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     c60:	86 85       	ldd	r24, Z+14	; 0x0e
     c62:	97 85       	ldd	r25, Z+15	; 0x0f

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
     c64:	a0 e0       	ldi	r26, 0x00	; 0
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	81 8f       	std	Z+25, r24	; 0x19
     c6a:	92 8f       	std	Z+26, r25	; 0x1a
     c6c:	a3 8f       	std	Z+27, r26	; 0x1b
     c6e:	b4 8f       	std	Z+28, r27	; 0x1c
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     c70:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	85 8f       	std	Z+29, r24	; 0x1d
     c76:	08 95       	ret

00000c78 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     c78:	ef 92       	push	r14
     c7a:	ff 92       	push	r15
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c84:	c0 91 43 01 	lds	r28, 0x0143
     c88:	d0 91 44 01 	lds	r29, 0x0144
     c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	21 f0       	breq	.+8      	; 0xc9a <Timebase_Window_Timer_Get_Interval+0x22>
     c92:	ee 24       	eor	r14, r14
     c94:	ff 24       	eor	r15, r15
     c96:	87 01       	movw	r16, r14
     c98:	25 c0       	rjmp	.+74     	; 0xce4 <Timebase_Window_Timer_Get_Interval+0x6c>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c9a:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     c9c:	28 89       	ldd	r18, Y+16	; 0x10
     c9e:	39 89       	ldd	r19, Y+17	; 0x11
     ca0:	4a 89       	ldd	r20, Y+18	; 0x12
     ca2:	5b 89       	ldd	r21, Y+19	; 0x13


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     ca4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ca6:	9f 85       	ldd	r25, Y+15	; 0x0f
int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
     ca8:	7c 01       	movw	r14, r24
     caa:	00 e0       	ldi	r16, 0x00	; 0
     cac:	10 e0       	ldi	r17, 0x00	; 0
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     cae:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
	curr_s -= Timebase->Time.StartTimeSeconds;
     cb0:	8d 89       	ldd	r24, Y+21	; 0x15
     cb2:	9e 89       	ldd	r25, Y+22	; 0x16
     cb4:	af 89       	ldd	r26, Y+23	; 0x17
     cb6:	b8 8d       	ldd	r27, Y+24	; 0x18
     cb8:	28 1b       	sub	r18, r24
     cba:	39 0b       	sbc	r19, r25
     cbc:	4a 0b       	sbc	r20, r26
     cbe:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     cc0:	69 81       	ldd	r22, Y+1	; 0x01
     cc2:	7a 81       	ldd	r23, Y+2	; 0x02
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__mulsi3>
	curr_s += curr_ss;
     ccc:	29 8d       	ldd	r18, Y+25	; 0x19
     cce:	3a 8d       	ldd	r19, Y+26	; 0x1a
     cd0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     cd2:	5c 8d       	ldd	r21, Y+28	; 0x1c
     cd4:	e2 1a       	sub	r14, r18
     cd6:	f3 0a       	sbc	r15, r19
     cd8:	04 0b       	sbc	r16, r20
     cda:	15 0b       	sbc	r17, r21
     cdc:	e6 0e       	add	r14, r22
     cde:	f7 1e       	adc	r15, r23
     ce0:	08 1f       	adc	r16, r24
     ce2:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     ce4:	b7 01       	movw	r22, r14
     ce6:	c8 01       	movw	r24, r16
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     cf6:	0e 94 3c 06 	call	0xc78	; 0xc78 <Timebase_Window_Timer_Get_Interval>
     cfa:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     cfc:	e0 91 43 01 	lds	r30, 0x0143
     d00:	f0 91 44 01 	lds	r31, 0x0144
     d04:	85 8d       	ldd	r24, Z+29	; 0x1d
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	49 f4       	brne	.+18     	; 0xd1c <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     d0a:	15 8a       	std	Z+21, r1	; 0x15
     d0c:	16 8a       	std	Z+22, r1	; 0x16
     d0e:	17 8a       	std	Z+23, r1	; 0x17
     d10:	10 8e       	std	Z+24, r1	; 0x18
  Timebase->Time.StartTimeSubSeconds = 0;
     d12:	11 8e       	std	Z+25, r1	; 0x19
     d14:	12 8e       	std	Z+26, r1	; 0x1a
     d16:	13 8e       	std	Z+27, r1	; 0x1b
     d18:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.Status = COUNTER_STATE_RESET;
     d1a:	15 8e       	std	Z+29, r1	; 0x1d
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     d1c:	82 2f       	mov	r24, r18
     d1e:	08 95       	ret

00000d20 <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     d20:	e0 91 43 01 	lds	r30, 0x0143
     d24:	f0 91 44 01 	lds	r31, 0x0144
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	29 e1       	ldi	r18, 0x19	; 25
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	ac 01       	movw	r20, r24
     d30:	42 9f       	mul	r20, r18
     d32:	c0 01       	movw	r24, r0
     d34:	43 9f       	mul	r20, r19
     d36:	90 0d       	add	r25, r0
     d38:	52 9f       	mul	r21, r18
     d3a:	90 0d       	add	r25, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	e8 0f       	add	r30, r24
     d40:	f9 1f       	adc	r31, r25
     d42:	80 a1       	ldd	r24, Z+32	; 0x20
     d44:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     d46:	8f 70       	andi	r24, 0x0F	; 15
     d48:	08 95       	ret

00000d4a <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     d4a:	e0 91 43 01 	lds	r30, 0x0143
     d4e:	f0 91 44 01 	lds	r31, 0x0144
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	29 e1       	ldi	r18, 0x19	; 25
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	ac 01       	movw	r20, r24
     d5a:	42 9f       	mul	r20, r18
     d5c:	c0 01       	movw	r24, r0
     d5e:	43 9f       	mul	r20, r19
     d60:	90 0d       	add	r25, r0
     d62:	52 9f       	mul	r21, r18
     d64:	90 0d       	add	r25, r0
     d66:	11 24       	eor	r1, r1
     d68:	e8 0f       	add	r30, r24
     d6a:	f9 1f       	adc	r31, r25
     d6c:	6f 70       	andi	r22, 0x0F	; 15
     d6e:	66 0f       	add	r22, r22
     d70:	80 a1       	ldd	r24, Z+32	; 0x20
     d72:	81 7e       	andi	r24, 0xE1	; 225
     d74:	86 2b       	or	r24, r22
     d76:	80 a3       	std	Z+32, r24	; 0x20
}
     d78:	08 95       	ret

00000d7a <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     d7a:	e0 91 43 01 	lds	r30, 0x0143
     d7e:	f0 91 44 01 	lds	r31, 0x0144
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	29 e1       	ldi	r18, 0x19	; 25
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	ac 01       	movw	r20, r24
     d8a:	42 9f       	mul	r20, r18
     d8c:	c0 01       	movw	r24, r0
     d8e:	43 9f       	mul	r20, r19
     d90:	90 0d       	add	r25, r0
     d92:	52 9f       	mul	r21, r18
     d94:	90 0d       	add	r25, r0
     d96:	11 24       	eor	r1, r1
     d98:	e8 0f       	add	r30, r24
     d9a:	f9 1f       	adc	r31, r25
     d9c:	df 01       	movw	r26, r30
     d9e:	d1 96       	adiw	r26, 0x31	; 49
     da0:	61 a9       	ldd	r22, Z+49	; 0x31
     da2:	11 96       	adiw	r26, 0x01	; 1
     da4:	7c 91       	ld	r23, X
     da6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     da8:	12 96       	adiw	r26, 0x02	; 2
     daa:	8c 91       	ld	r24, X
     dac:	12 97       	sbiw	r26, 0x02	; 2
     dae:	13 96       	adiw	r26, 0x03	; 3
     db0:	9c 91       	ld	r25, X
     db2:	08 95       	ret

00000db4 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     db8:	c0 91 43 01 	lds	r28, 0x0143
     dbc:	d0 91 44 01 	lds	r29, 0x0144
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	29 e1       	ldi	r18, 0x19	; 25
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	fc 01       	movw	r30, r24
     dc8:	e2 9f       	mul	r30, r18
     dca:	c0 01       	movw	r24, r0
     dcc:	e3 9f       	mul	r30, r19
     dce:	90 0d       	add	r25, r0
     dd0:	f2 9f       	mul	r31, r18
     dd2:	90 0d       	add	r25, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	c8 0f       	add	r28, r24
     dd8:	d9 1f       	adc	r29, r25
     dda:	ca 01       	movw	r24, r20
     ddc:	db 01       	movw	r26, r22
     dde:	b7 ff       	sbrs	r27, 7
     de0:	04 c0       	rjmp	.+8      	; 0xdea <Timebase_UpCounter_SS_Set_Value+0x36>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	89 ab       	std	Y+49, r24	; 0x31
     dec:	9a ab       	std	Y+50, r25	; 0x32
     dee:	ab ab       	std	Y+51, r26	; 0x33
     df0:	bc ab       	std	Y+52, r27	; 0x34
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	08 95       	ret

00000df8 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     df8:	e0 91 43 01 	lds	r30, 0x0143
     dfc:	f0 91 44 01 	lds	r31, 0x0144
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	29 e1       	ldi	r18, 0x19	; 25
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	ac 01       	movw	r20, r24
     e08:	42 9f       	mul	r20, r18
     e0a:	c0 01       	movw	r24, r0
     e0c:	43 9f       	mul	r20, r19
     e0e:	90 0d       	add	r25, r0
     e10:	52 9f       	mul	r21, r18
     e12:	90 0d       	add	r25, r0
     e14:	11 24       	eor	r1, r1
     e16:	e8 0f       	add	r30, r24
     e18:	f9 1f       	adc	r31, r25
     e1a:	df 01       	movw	r26, r30
     e1c:	91 96       	adiw	r26, 0x21	; 33
     e1e:	61 a1       	ldd	r22, Z+33	; 0x21
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	7c 91       	ld	r23, X
     e24:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     e26:	12 96       	adiw	r26, 0x02	; 2
     e28:	8c 91       	ld	r24, X
     e2a:	12 97       	sbiw	r26, 0x02	; 2
     e2c:	13 96       	adiw	r26, 0x03	; 3
     e2e:	9c 91       	ld	r25, X
     e30:	08 95       	ret

00000e32 <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     e32:	e0 91 43 01 	lds	r30, 0x0143
     e36:	f0 91 44 01 	lds	r31, 0x0144
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	29 e1       	ldi	r18, 0x19	; 25
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	ac 01       	movw	r20, r24
     e42:	42 9f       	mul	r20, r18
     e44:	c0 01       	movw	r24, r0
     e46:	43 9f       	mul	r20, r19
     e48:	90 0d       	add	r25, r0
     e4a:	52 9f       	mul	r21, r18
     e4c:	90 0d       	add	r25, r0
     e4e:	11 24       	eor	r1, r1
     e50:	e8 0f       	add	r30, r24
     e52:	f9 1f       	adc	r31, r25
     e54:	df 01       	movw	r26, r30
     e56:	95 96       	adiw	r26, 0x25	; 37
     e58:	65 a1       	ldd	r22, Z+37	; 0x25
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	7c 91       	ld	r23, X
     e5e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     e60:	12 96       	adiw	r26, 0x02	; 2
     e62:	8c 91       	ld	r24, X
     e64:	12 97       	sbiw	r26, 0x02	; 2
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	9c 91       	ld	r25, X
     e6a:	08 95       	ret

00000e6c <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     e6c:	e0 91 43 01 	lds	r30, 0x0143
     e70:	f0 91 44 01 	lds	r31, 0x0144
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	29 e1       	ldi	r18, 0x19	; 25
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	dc 01       	movw	r26, r24
     e7c:	a2 9f       	mul	r26, r18
     e7e:	c0 01       	movw	r24, r0
     e80:	a3 9f       	mul	r26, r19
     e82:	90 0d       	add	r25, r0
     e84:	b2 9f       	mul	r27, r18
     e86:	90 0d       	add	r25, r0
     e88:	11 24       	eor	r1, r1
     e8a:	e8 0f       	add	r30, r24
     e8c:	f9 1f       	adc	r31, r25
     e8e:	41 a3       	std	Z+33, r20	; 0x21
     e90:	52 a3       	std	Z+34, r21	; 0x22
     e92:	63 a3       	std	Z+35, r22	; 0x23
     e94:	74 a3       	std	Z+36, r23	; 0x24
}
     e96:	08 95       	ret

00000e98 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     e98:	e0 91 43 01 	lds	r30, 0x0143
     e9c:	f0 91 44 01 	lds	r31, 0x0144
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	29 e1       	ldi	r18, 0x19	; 25
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	dc 01       	movw	r26, r24
     ea8:	a2 9f       	mul	r26, r18
     eaa:	c0 01       	movw	r24, r0
     eac:	a3 9f       	mul	r26, r19
     eae:	90 0d       	add	r25, r0
     eb0:	b2 9f       	mul	r27, r18
     eb2:	90 0d       	add	r25, r0
     eb4:	11 24       	eor	r1, r1
     eb6:	e8 0f       	add	r30, r24
     eb8:	f9 1f       	adc	r31, r25
     eba:	45 a3       	std	Z+37, r20	; 0x25
     ebc:	56 a3       	std	Z+38, r21	; 0x26
     ebe:	67 a3       	std	Z+39, r22	; 0x27
     ec0:	70 a7       	std	Z+40, r23	; 0x28
}
     ec2:	08 95       	ret

00000ec4 <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     ec4:	e0 91 43 01 	lds	r30, 0x0143
     ec8:	f0 91 44 01 	lds	r31, 0x0144
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	29 e1       	ldi	r18, 0x19	; 25
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	ac 01       	movw	r20, r24
     ed4:	42 9f       	mul	r20, r18
     ed6:	c0 01       	movw	r24, r0
     ed8:	43 9f       	mul	r20, r19
     eda:	90 0d       	add	r25, r0
     edc:	52 9f       	mul	r21, r18
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	e8 0f       	add	r30, r24
     ee4:	f9 1f       	adc	r31, r25
     ee6:	df 01       	movw	r26, r30
     ee8:	99 96       	adiw	r26, 0x29	; 41
     eea:	61 a5       	ldd	r22, Z+41	; 0x29
     eec:	11 96       	adiw	r26, 0x01	; 1
     eee:	7c 91       	ld	r23, X
     ef0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	8c 91       	ld	r24, X
     ef6:	12 97       	sbiw	r26, 0x02	; 2
     ef8:	13 96       	adiw	r26, 0x03	; 3
     efa:	9c 91       	ld	r25, X
     efc:	08 95       	ret

00000efe <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     efe:	e0 91 43 01 	lds	r30, 0x0143
     f02:	f0 91 44 01 	lds	r31, 0x0144
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	29 e1       	ldi	r18, 0x19	; 25
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	dc 01       	movw	r26, r24
     f0e:	a2 9f       	mul	r26, r18
     f10:	c0 01       	movw	r24, r0
     f12:	a3 9f       	mul	r26, r19
     f14:	90 0d       	add	r25, r0
     f16:	b2 9f       	mul	r27, r18
     f18:	90 0d       	add	r25, r0
     f1a:	11 24       	eor	r1, r1
     f1c:	e8 0f       	add	r30, r24
     f1e:	f9 1f       	adc	r31, r25
     f20:	41 a7       	std	Z+41, r20	; 0x29
     f22:	52 a7       	std	Z+42, r21	; 0x2a
     f24:	63 a7       	std	Z+43, r22	; 0x2b
     f26:	74 a7       	std	Z+44, r23	; 0x2c
}
     f28:	08 95       	ret

00000f2a <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     f2a:	e0 91 43 01 	lds	r30, 0x0143
     f2e:	f0 91 44 01 	lds	r31, 0x0144
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	29 e1       	ldi	r18, 0x19	; 25
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	ac 01       	movw	r20, r24
     f3a:	42 9f       	mul	r20, r18
     f3c:	c0 01       	movw	r24, r0
     f3e:	43 9f       	mul	r20, r19
     f40:	90 0d       	add	r25, r0
     f42:	52 9f       	mul	r21, r18
     f44:	90 0d       	add	r25, r0
     f46:	11 24       	eor	r1, r1
     f48:	e8 0f       	add	r30, r24
     f4a:	f9 1f       	adc	r31, r25
     f4c:	df 01       	movw	r26, r30
     f4e:	9d 96       	adiw	r26, 0x2d	; 45
     f50:	65 a5       	ldd	r22, Z+45	; 0x2d
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	7c 91       	ld	r23, X
     f56:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     f58:	12 96       	adiw	r26, 0x02	; 2
     f5a:	8c 91       	ld	r24, X
     f5c:	12 97       	sbiw	r26, 0x02	; 2
     f5e:	13 96       	adiw	r26, 0x03	; 3
     f60:	9c 91       	ld	r25, X
     f62:	08 95       	ret

00000f64 <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     f68:	c0 91 43 01 	lds	r28, 0x0143
     f6c:	d0 91 44 01 	lds	r29, 0x0144
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	29 e1       	ldi	r18, 0x19	; 25
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	e2 9f       	mul	r30, r18
     f7a:	c0 01       	movw	r24, r0
     f7c:	e3 9f       	mul	r30, r19
     f7e:	90 0d       	add	r25, r0
     f80:	f2 9f       	mul	r31, r18
     f82:	90 0d       	add	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	c8 0f       	add	r28, r24
     f88:	d9 1f       	adc	r29, r25
     f8a:	ca 01       	movw	r24, r20
     f8c:	db 01       	movw	r26, r22
     f8e:	b7 ff       	sbrs	r27, 7
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a0 e0       	ldi	r26, 0x00	; 0
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	8d a7       	std	Y+45, r24	; 0x2d
     f9c:	9e a7       	std	Y+46, r25	; 0x2e
     f9e:	af a7       	std	Y+47, r26	; 0x2f
     fa0:	b8 ab       	std	Y+48, r27	; 0x30
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     fa8:	e0 91 43 01 	lds	r30, 0x0143
     fac:	f0 91 44 01 	lds	r31, 0x0144
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	29 e1       	ldi	r18, 0x19	; 25
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	ac 01       	movw	r20, r24
     fb8:	42 9f       	mul	r20, r18
     fba:	c0 01       	movw	r24, r0
     fbc:	43 9f       	mul	r20, r19
     fbe:	90 0d       	add	r25, r0
     fc0:	52 9f       	mul	r21, r18
     fc2:	90 0d       	add	r25, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	df 01       	movw	r26, r30
     fcc:	d5 96       	adiw	r26, 0x35	; 53
     fce:	65 a9       	ldd	r22, Z+53	; 0x35
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	7c 91       	ld	r23, X
     fd4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	8c 91       	ld	r24, X
     fda:	12 97       	sbiw	r26, 0x02	; 2
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	9c 91       	ld	r25, X
     fe0:	08 95       	ret

00000fe2 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     fe2:	e0 91 43 01 	lds	r30, 0x0143
     fe6:	f0 91 44 01 	lds	r31, 0x0144
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	29 e1       	ldi	r18, 0x19	; 25
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	dc 01       	movw	r26, r24
     ff2:	a2 9f       	mul	r26, r18
     ff4:	c0 01       	movw	r24, r0
     ff6:	a3 9f       	mul	r26, r19
     ff8:	90 0d       	add	r25, r0
     ffa:	b2 9f       	mul	r27, r18
     ffc:	90 0d       	add	r25, r0
     ffe:	11 24       	eor	r1, r1
    1000:	e8 0f       	add	r30, r24
    1002:	f9 1f       	adc	r31, r25
    1004:	45 ab       	std	Z+53, r20	; 0x35
    1006:	56 ab       	std	Z+54, r21	; 0x36
    1008:	67 ab       	std	Z+55, r22	; 0x37
    100a:	70 af       	std	Z+56, r23	; 0x38
}
    100c:	08 95       	ret

0000100e <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
    100e:	e0 91 43 01 	lds	r30, 0x0143
    1012:	f0 91 44 01 	lds	r31, 0x0144
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	29 e1       	ldi	r18, 0x19	; 25
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	ac 01       	movw	r20, r24
    101e:	42 9f       	mul	r20, r18
    1020:	c0 01       	movw	r24, r0
    1022:	43 9f       	mul	r20, r19
    1024:	90 0d       	add	r25, r0
    1026:	52 9f       	mul	r21, r18
    1028:	90 0d       	add	r25, r0
    102a:	11 24       	eor	r1, r1
    102c:	e8 0f       	add	r30, r24
    102e:	f9 1f       	adc	r31, r25
    1030:	80 a1       	ldd	r24, Z+32	; 0x20
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
    1032:	81 70       	andi	r24, 0x01	; 1
    1034:	08 95       	ret

00001036 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1036:	e0 91 43 01 	lds	r30, 0x0143
    103a:	f0 91 44 01 	lds	r31, 0x0144
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	29 e1       	ldi	r18, 0x19	; 25
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	ac 01       	movw	r20, r24
    1046:	42 9f       	mul	r20, r18
    1048:	c0 01       	movw	r24, r0
    104a:	43 9f       	mul	r20, r19
    104c:	90 0d       	add	r25, r0
    104e:	52 9f       	mul	r21, r18
    1050:	90 0d       	add	r25, r0
    1052:	11 24       	eor	r1, r1
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    1058:	80 a1       	ldd	r24, Z+32	; 0x20
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	80 a3       	std	Z+32, r24	; 0x20
}
    105e:	08 95       	ret

00001060 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1060:	e0 91 43 01 	lds	r30, 0x0143
    1064:	f0 91 44 01 	lds	r31, 0x0144
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	29 e1       	ldi	r18, 0x19	; 25
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	ac 01       	movw	r20, r24
    1070:	42 9f       	mul	r20, r18
    1072:	c0 01       	movw	r24, r0
    1074:	43 9f       	mul	r20, r19
    1076:	90 0d       	add	r25, r0
    1078:	52 9f       	mul	r21, r18
    107a:	90 0d       	add	r25, r0
    107c:	11 24       	eor	r1, r1
    107e:	e8 0f       	add	r30, r24
    1080:	f9 1f       	adc	r31, r25
    1082:	80 a1       	ldd	r24, Z+32	; 0x20
    1084:	8e 7f       	andi	r24, 0xFE	; 254
    1086:	80 a3       	std	Z+32, r24	; 0x20
}
    1088:	08 95       	ret

0000108a <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    108a:	e0 91 43 01 	lds	r30, 0x0143
    108e:	f0 91 44 01 	lds	r31, 0x0144
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	29 e1       	ldi	r18, 0x19	; 25
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	ac 01       	movw	r20, r24
    109a:	42 9f       	mul	r20, r18
    109c:	c0 01       	movw	r24, r0
    109e:	43 9f       	mul	r20, r19
    10a0:	90 0d       	add	r25, r0
    10a2:	52 9f       	mul	r21, r18
    10a4:	90 0d       	add	r25, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	e8 0f       	add	r30, r24
    10aa:	f9 1f       	adc	r31, r25
    10ac:	80 a1       	ldd	r24, Z+32	; 0x20

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    10ae:	11 aa       	std	Z+49, r1	; 0x31
    10b0:	12 aa       	std	Z+50, r1	; 0x32
    10b2:	13 aa       	std	Z+51, r1	; 0x33
    10b4:	14 aa       	std	Z+52, r1	; 0x34
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    10b6:	11 a2       	std	Z+33, r1	; 0x21
    10b8:	12 a2       	std	Z+34, r1	; 0x22
    10ba:	13 a2       	std	Z+35, r1	; 0x23
    10bc:	14 a2       	std	Z+36, r1	; 0x24
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    10be:	15 a2       	std	Z+37, r1	; 0x25
    10c0:	16 a2       	std	Z+38, r1	; 0x26
    10c2:	17 a2       	std	Z+39, r1	; 0x27
    10c4:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    10c6:	11 a6       	std	Z+41, r1	; 0x29
    10c8:	12 a6       	std	Z+42, r1	; 0x2a
    10ca:	13 a6       	std	Z+43, r1	; 0x2b
    10cc:	14 a6       	std	Z+44, r1	; 0x2c

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    10ce:	15 a6       	std	Z+45, r1	; 0x2d
    10d0:	16 a6       	std	Z+46, r1	; 0x2e
    10d2:	17 a6       	std	Z+47, r1	; 0x2f
    10d4:	10 aa       	std	Z+48, r1	; 0x30
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    10d6:	15 aa       	std	Z+53, r1	; 0x35
    10d8:	16 aa       	std	Z+54, r1	; 0x36
    10da:	17 aa       	std	Z+55, r1	; 0x37
    10dc:	10 ae       	std	Z+56, r1	; 0x38
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    10de:	80 7e       	andi	r24, 0xE0	; 224
    10e0:	80 a3       	std	Z+32, r24	; 0x20
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
    10e2:	08 95       	ret

000010e4 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    10e4:	0e 94 45 08 	call	0x108a	; 0x108a <Timebase_UpCounter_SS_Reset>
}
    10e8:	08 95       	ret

000010ea <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10ea:	e0 91 43 01 	lds	r30, 0x0143
    10ee:	f0 91 44 01 	lds	r31, 0x0144
    10f2:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    10f4:	29 e1       	ldi	r18, 0x19	; 25
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	ac 01       	movw	r20, r24
    10fa:	42 9f       	mul	r20, r18
    10fc:	c0 01       	movw	r24, r0
    10fe:	43 9f       	mul	r20, r19
    1100:	90 0d       	add	r25, r0
    1102:	52 9f       	mul	r21, r18
    1104:	90 0d       	add	r25, r0
    1106:	11 24       	eor	r1, r1
    1108:	e8 0f       	add	r30, r24
    110a:	f9 1f       	adc	r31, r25
    110c:	90 a1       	ldd	r25, Z+32	; 0x20
    110e:	89 2f       	mov	r24, r25
    1110:	86 95       	lsr	r24
    1112:	8f 70       	andi	r24, 0x0F	; 15
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	19 f0       	breq	.+6      	; 0x111e <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1118:	91 7e       	andi	r25, 0xE1	; 225
    111a:	92 60       	ori	r25, 0x02	; 2
    111c:	90 a3       	std	Z+32, r25	; 0x20
    111e:	08 95       	ret

00001120 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1120:	e0 91 43 01 	lds	r30, 0x0143
    1124:	f0 91 44 01 	lds	r31, 0x0144
    1128:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    112a:	29 e1       	ldi	r18, 0x19	; 25
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	ac 01       	movw	r20, r24
    1130:	42 9f       	mul	r20, r18
    1132:	c0 01       	movw	r24, r0
    1134:	43 9f       	mul	r20, r19
    1136:	90 0d       	add	r25, r0
    1138:	52 9f       	mul	r21, r18
    113a:	90 0d       	add	r25, r0
    113c:	11 24       	eor	r1, r1
    113e:	e8 0f       	add	r30, r24
    1140:	f9 1f       	adc	r31, r25
    1142:	90 a1       	ldd	r25, Z+32	; 0x20
    1144:	89 2f       	mov	r24, r25
    1146:	86 95       	lsr	r24
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	19 f0       	breq	.+6      	; 0x1154 <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    114e:	91 7e       	andi	r25, 0xE1	; 225
    1150:	94 60       	ori	r25, 0x04	; 4
    1152:	90 a3       	std	Z+32, r25	; 0x20
    1154:	08 95       	ret

00001156 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1156:	2f 92       	push	r2
    1158:	3f 92       	push	r3
    115a:	4f 92       	push	r4
    115c:	5f 92       	push	r5
    115e:	6f 92       	push	r6
    1160:	7f 92       	push	r7
    1162:	8f 92       	push	r8
    1164:	9f 92       	push	r9
    1166:	af 92       	push	r10
    1168:	bf 92       	push	r11
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <Timebase_UpCounter_SS_Set_Securely+0x26>
    117c:	00 d0       	rcall	.+0      	; 0x117e <Timebase_UpCounter_SS_Set_Securely+0x28>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	4a 01       	movw	r8, r20
    1184:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1186:	20 91 43 01 	lds	r18, 0x0143
    118a:	30 91 44 01 	lds	r19, 0x0144
    118e:	3c 83       	std	Y+4, r19	; 0x04
    1190:	2b 83       	std	Y+3, r18	; 0x03
    1192:	a8 2f       	mov	r26, r24
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ba 83       	std	Y+2, r27	; 0x02
    1198:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    119a:	89 e1       	ldi	r24, 0x19	; 25
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a8 9f       	mul	r26, r24
    11a0:	f0 01       	movw	r30, r0
    11a2:	a9 9f       	mul	r26, r25
    11a4:	f0 0d       	add	r31, r0
    11a6:	b8 9f       	mul	r27, r24
    11a8:	f0 0d       	add	r31, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	e2 0f       	add	r30, r18
    11ae:	f3 1f       	adc	r31, r19
    11b0:	80 a1       	ldd	r24, Z+32	; 0x20
    11b2:	86 95       	lsr	r24
    11b4:	8f 70       	andi	r24, 0x0F	; 15
    11b6:	09 f0       	breq	.+2      	; 0x11ba <Timebase_UpCounter_SS_Set_Securely+0x64>
    11b8:	75 c0       	rjmp	.+234    	; 0x12a4 <Timebase_UpCounter_SS_Set_Securely+0x14e>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    11ba:	11 aa       	std	Z+49, r1	; 0x31
    11bc:	12 aa       	std	Z+50, r1	; 0x32
    11be:	13 aa       	std	Z+51, r1	; 0x33
    11c0:	14 aa       	std	Z+52, r1	; 0x34

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    11c2:	15 a6       	std	Z+45, r1	; 0x2d
    11c4:	16 a6       	std	Z+46, r1	; 0x2e
    11c6:	17 a6       	std	Z+47, r1	; 0x2f
    11c8:	10 aa       	std	Z+48, r1	; 0x30
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    11ca:	41 a7       	std	Z+41, r20	; 0x29
    11cc:	52 a7       	std	Z+42, r21	; 0x2a
    11ce:	63 a7       	std	Z+43, r22	; 0x2b
    11d0:	74 a7       	std	Z+44, r23	; 0x2c
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    11d2:	f9 01       	movw	r30, r18
    11d4:	c0 84       	ldd	r12, Z+8	; 0x08
    11d6:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    11d8:	22 84       	ldd	r2, Z+10	; 0x0a
    11da:	33 84       	ldd	r3, Z+11	; 0x0b
    11dc:	44 84       	ldd	r4, Z+12	; 0x0c
    11de:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    11e0:	21 81       	ldd	r18, Z+1	; 0x01
    11e2:	32 81       	ldd	r19, Z+2	; 0x02
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	50 e0       	ldi	r21, 0x00	; 0
    11e8:	c5 01       	movw	r24, r10
    11ea:	b4 01       	movw	r22, r8
    11ec:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    11f0:	7b 01       	movw	r14, r22
    11f2:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    11f4:	ab 81       	ldd	r26, Y+3	; 0x03
    11f6:	bc 81       	ldd	r27, Y+4	; 0x04
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	2d 91       	ld	r18, X+
    11fc:	3c 91       	ld	r19, X
    11fe:	12 97       	sbiw	r26, 0x02	; 2
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	c5 01       	movw	r24, r10
    1206:	b4 01       	movw	r22, r8
    1208:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    120c:	c9 01       	movw	r24, r18
    120e:	da 01       	movw	r26, r20
    1210:	3c 01       	movw	r6, r24
    1212:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
    1214:	56 01       	movw	r10, r12
    1216:	cc 24       	eor	r12, r12
    1218:	dd 24       	eor	r13, r13
    121a:	ae 0c       	add	r10, r14
    121c:	bf 1c       	adc	r11, r15
    121e:	c0 1e       	adc	r12, r16
    1220:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1222:	eb 81       	ldd	r30, Y+3	; 0x03
    1224:	fc 81       	ldd	r31, Y+4	; 0x04
    1226:	81 81       	ldd	r24, Z+1	; 0x01
    1228:	92 81       	ldd	r25, Z+2	; 0x02
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	a8 16       	cp	r10, r24
    1230:	b9 06       	cpc	r11, r25
    1232:	ca 06       	cpc	r12, r26
    1234:	db 06       	cpc	r13, r27
    1236:	94 f0       	brlt	.+36     	; 0x125c <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
    1238:	08 94       	sec
    123a:	61 1c       	adc	r6, r1
    123c:	71 1c       	adc	r7, r1
    123e:	81 1c       	adc	r8, r1
    1240:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    1242:	21 81       	ldd	r18, Z+1	; 0x01
    1244:	32 81       	ldd	r19, Z+2	; 0x02
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	c6 01       	movw	r24, r12
    124c:	b5 01       	movw	r22, r10
    124e:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    1252:	ac 01       	movw	r20, r24
    1254:	cb 01       	movw	r24, r22
    1256:	da 01       	movw	r26, r20
    1258:	5c 01       	movw	r10, r24
    125a:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    125c:	89 e1       	ldi	r24, 0x19	; 25
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	29 81       	ldd	r18, Y+1	; 0x01
    1262:	3a 81       	ldd	r19, Y+2	; 0x02
    1264:	28 9f       	mul	r18, r24
    1266:	f0 01       	movw	r30, r0
    1268:	29 9f       	mul	r18, r25
    126a:	f0 0d       	add	r31, r0
    126c:	38 9f       	mul	r19, r24
    126e:	f0 0d       	add	r31, r0
    1270:	11 24       	eor	r1, r1
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	e8 0f       	add	r30, r24
    1278:	f9 1f       	adc	r31, r25
    127a:	26 0c       	add	r2, r6
    127c:	37 1c       	adc	r3, r7
    127e:	48 1c       	adc	r4, r8
    1280:	59 1c       	adc	r5, r9
    1282:	21 a2       	std	Z+33, r2	; 0x21
    1284:	32 a2       	std	Z+34, r3	; 0x22
    1286:	43 a2       	std	Z+35, r4	; 0x23
    1288:	54 a2       	std	Z+36, r5	; 0x24
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    128a:	a5 a2       	std	Z+37, r10	; 0x25
    128c:	b6 a2       	std	Z+38, r11	; 0x26
    128e:	c7 a2       	std	Z+39, r12	; 0x27
    1290:	d0 a6       	std	Z+40, r13	; 0x28
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1292:	90 a1       	ldd	r25, Z+32	; 0x20
    1294:	89 2f       	mov	r24, r25
    1296:	86 95       	lsr	r24
    1298:	8f 70       	andi	r24, 0x0F	; 15
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	19 f0       	breq	.+6      	; 0x12a4 <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    129e:	91 7e       	andi	r25, 0xE1	; 225
    12a0:	92 60       	ori	r25, 0x02	; 2
    12a2:	90 a3       	std	Z+32, r25	; 0x20
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	ff 90       	pop	r15
    12b6:	ef 90       	pop	r14
    12b8:	df 90       	pop	r13
    12ba:	cf 90       	pop	r12
    12bc:	bf 90       	pop	r11
    12be:	af 90       	pop	r10
    12c0:	9f 90       	pop	r9
    12c2:	8f 90       	pop	r8
    12c4:	7f 90       	pop	r7
    12c6:	6f 90       	pop	r6
    12c8:	5f 90       	pop	r5
    12ca:	4f 90       	pop	r4
    12cc:	3f 90       	pop	r3
    12ce:	2f 90       	pop	r2
    12d0:	08 95       	ret

000012d2 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	d8 2e       	mov	r13, r24
    12de:	7a 01       	movw	r14, r20
    12e0:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    12e2:	0e 94 45 08 	call	0x108a	; 0x108a <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    12e6:	8d 2d       	mov	r24, r13
    12e8:	b8 01       	movw	r22, r16
    12ea:	a7 01       	movw	r20, r14
    12ec:	0e 94 ab 08 	call	0x1156	; 0x1156 <Timebase_UpCounter_SS_Set_Securely>
} 
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	08 95       	ret

000012fc <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    12fc:	2f 92       	push	r2
    12fe:	3f 92       	push	r3
    1300:	4f 92       	push	r4
    1302:	5f 92       	push	r5
    1304:	6f 92       	push	r6
    1306:	7f 92       	push	r7
    1308:	8f 92       	push	r8
    130a:	9f 92       	push	r9
    130c:	af 92       	push	r10
    130e:	bf 92       	push	r11
    1310:	cf 92       	push	r12
    1312:	df 92       	push	r13
    1314:	ef 92       	push	r14
    1316:	ff 92       	push	r15
    1318:	0f 93       	push	r16
    131a:	1f 93       	push	r17
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <Timebase_UpCounter_SS_Update+0x26>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <Timebase_UpCounter_SS_Update+0x28>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <Timebase_UpCounter_SS_Update+0x2a>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    132a:	20 90 43 01 	lds	r2, 0x0143
    132e:	30 90 44 01 	lds	r3, 0x0144
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	3e 83       	std	Y+6, r19	; 0x06
    1338:	2d 83       	std	Y+5, r18	; 0x05
    133a:	89 e1       	ldi	r24, 0x19	; 25
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	28 9f       	mul	r18, r24
    1340:	b0 01       	movw	r22, r0
    1342:	29 9f       	mul	r18, r25
    1344:	70 0d       	add	r23, r0
    1346:	38 9f       	mul	r19, r24
    1348:	70 0d       	add	r23, r0
    134a:	11 24       	eor	r1, r1
    134c:	62 0d       	add	r22, r2
    134e:	73 1d       	adc	r23, r3
    1350:	db 01       	movw	r26, r22
    1352:	90 96       	adiw	r26, 0x20	; 32
    1354:	8c 91       	ld	r24, X
    1356:	90 97       	sbiw	r26, 0x20	; 32
    1358:	86 95       	lsr	r24
    135a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    135c:	81 30       	cpi	r24, 0x01	; 1
    135e:	09 f0       	breq	.+2      	; 0x1362 <Timebase_UpCounter_SS_Update+0x66>
    1360:	b3 c0       	rjmp	.+358    	; 0x14c8 <Timebase_UpCounter_SS_Update+0x1cc>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1362:	f1 01       	movw	r30, r2
    1364:	22 85       	ldd	r18, Z+10	; 0x0a
    1366:	33 85       	ldd	r19, Z+11	; 0x0b
    1368:	44 85       	ldd	r20, Z+12	; 0x0c
    136a:	55 85       	ldd	r21, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    136c:	80 85       	ldd	r24, Z+8	; 0x08
    136e:	91 85       	ldd	r25, Z+9	; 0x09

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
    1370:	2c 01       	movw	r4, r24
    1372:	66 24       	eor	r6, r6
    1374:	77 24       	eor	r7, r7
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
    1376:	91 96       	adiw	r26, 0x21	; 33
    1378:	ad 90       	ld	r10, X+
    137a:	bd 90       	ld	r11, X+
    137c:	cd 90       	ld	r12, X+
    137e:	dc 90       	ld	r13, X
    1380:	94 97       	sbiw	r26, 0x24	; 36
    1382:	a2 1a       	sub	r10, r18
    1384:	b3 0a       	sbc	r11, r19
    1386:	c4 0a       	sbc	r12, r20
    1388:	d5 0a       	sbc	r13, r21
    138a:	d7 fe       	sbrs	r13, 7
    138c:	03 c0       	rjmp	.+6      	; 0x1394 <Timebase_UpCounter_SS_Update+0x98>
    138e:	aa 24       	eor	r10, r10
    1390:	bb 24       	eor	r11, r11
    1392:	65 01       	movw	r12, r10
	if(curr_s < 0){
	  curr_s = 0;
	}
	curr_s *= Timebase->Config.UpdateRate;
    1394:	d1 01       	movw	r26, r2
    1396:	11 96       	adiw	r26, 0x01	; 1
    1398:	2d 91       	ld	r18, X+
    139a:	3c 91       	ld	r19, X
    139c:	12 97       	sbiw	r26, 0x02	; 2
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
    139e:	89 e1       	ldi	r24, 0x19	; 25
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	4d 81       	ldd	r20, Y+5	; 0x05
    13a4:	5e 81       	ldd	r21, Y+6	; 0x06
    13a6:	48 9f       	mul	r20, r24
    13a8:	f0 01       	movw	r30, r0
    13aa:	49 9f       	mul	r20, r25
    13ac:	f0 0d       	add	r31, r0
    13ae:	58 9f       	mul	r21, r24
    13b0:	f0 0d       	add	r31, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	e2 0d       	add	r30, r2
    13b6:	f3 1d       	adc	r31, r3
    13b8:	e5 a0       	ldd	r14, Z+37	; 0x25
    13ba:	f6 a0       	ldd	r15, Z+38	; 0x26
    13bc:	07 a1       	ldd	r16, Z+39	; 0x27
    13be:	10 a5       	ldd	r17, Z+40	; 0x28
    13c0:	e4 18       	sub	r14, r4
    13c2:	f5 08       	sbc	r15, r5
    13c4:	06 09       	sbc	r16, r6
    13c6:	17 09       	sbc	r17, r7
	curr_ss += curr_s;
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	c6 01       	movw	r24, r12
    13ce:	b5 01       	movw	r22, r10
    13d0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__mulsi3>
    13d4:	e6 0e       	add	r14, r22
    13d6:	f7 1e       	adc	r15, r23
    13d8:	08 1f       	adc	r16, r24
    13da:	19 1f       	adc	r17, r25
    13dc:	17 ff       	sbrs	r17, 7
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <Timebase_UpCounter_SS_Update+0xea>
    13e0:	ee 24       	eor	r14, r14
    13e2:	ff 24       	eor	r15, r15
    13e4:	87 01       	movw	r16, r14

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    13e6:	89 e1       	ldi	r24, 0x19	; 25
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	ad 81       	ldd	r26, Y+5	; 0x05
    13ec:	be 81       	ldd	r27, Y+6	; 0x06
    13ee:	a8 9f       	mul	r26, r24
    13f0:	f0 01       	movw	r30, r0
    13f2:	a9 9f       	mul	r26, r25
    13f4:	f0 0d       	add	r31, r0
    13f6:	b8 9f       	mul	r27, r24
    13f8:	f0 0d       	add	r31, r0
    13fa:	11 24       	eor	r1, r1
    13fc:	e2 0d       	add	r30, r2
    13fe:	f3 1d       	adc	r31, r3
    1400:	e5 a6       	std	Z+45, r14	; 0x2d
    1402:	f6 a6       	std	Z+46, r15	; 0x2e
    1404:	07 a7       	std	Z+47, r16	; 0x2f
    1406:	10 ab       	std	Z+48, r17	; 0x30
	}
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    1408:	81 a5       	ldd	r24, Z+41	; 0x29
    140a:	92 a5       	ldd	r25, Z+42	; 0x2a
    140c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    140e:	b4 a5       	ldd	r27, Z+44	; 0x2c

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    1410:	8e 19       	sub	r24, r14
    1412:	9f 09       	sbc	r25, r15
    1414:	a0 0b       	sbc	r26, r16
    1416:	b1 0b       	sbc	r27, r17
    1418:	b7 ff       	sbrs	r27, 7
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <Timebase_UpCounter_SS_Update+0x128>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e0       	ldi	r26, 0x00	; 0
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	81 ab       	std	Z+49, r24	; 0x31
    1426:	92 ab       	std	Z+50, r25	; 0x32
    1428:	a3 ab       	std	Z+51, r26	; 0x33
    142a:	b4 ab       	std	Z+52, r27	; 0x34
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    142c:	89 e1       	ldi	r24, 0x19	; 25
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	ed 81       	ldd	r30, Y+5	; 0x05
    1432:	fe 81       	ldd	r31, Y+6	; 0x06
    1434:	e8 9f       	mul	r30, r24
    1436:	b0 01       	movw	r22, r0
    1438:	e9 9f       	mul	r30, r25
    143a:	70 0d       	add	r23, r0
    143c:	f8 9f       	mul	r31, r24
    143e:	70 0d       	add	r23, r0
    1440:	11 24       	eor	r1, r1
    1442:	62 0d       	add	r22, r2
    1444:	73 1d       	adc	r23, r3
    1446:	fb 01       	movw	r30, r22
    1448:	85 a5       	ldd	r24, Z+45	; 0x2d
    144a:	96 a5       	ldd	r25, Z+46	; 0x2e
    144c:	a7 a5       	ldd	r26, Z+47	; 0x2f
    144e:	b0 a9       	ldd	r27, Z+48	; 0x30
    1450:	18 16       	cp	r1, r24
    1452:	19 06       	cpc	r1, r25
    1454:	1a 06       	cpc	r1, r26
    1456:	1b 06       	cpc	r1, r27
    1458:	0c f4       	brge	.+2      	; 0x145c <Timebase_UpCounter_SS_Update+0x160>
    145a:	c7 c0       	rjmp	.+398    	; 0x15ea <Timebase_UpCounter_SS_Update+0x2ee>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    145c:	db 01       	movw	r26, r22
    145e:	91 96       	adiw	r26, 0x21	; 33
    1460:	1d 92       	st	X+, r1
    1462:	1d 92       	st	X+, r1
    1464:	1d 92       	st	X+, r1
    1466:	1c 92       	st	X, r1
    1468:	94 97       	sbiw	r26, 0x24	; 36
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    146a:	15 a2       	std	Z+37, r1	; 0x25
    146c:	16 a2       	std	Z+38, r1	; 0x26
    146e:	17 a2       	std	Z+39, r1	; 0x27
    1470:	10 a6       	std	Z+40, r1	; 0x28

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    1472:	9d 96       	adiw	r26, 0x2d	; 45
    1474:	1d 92       	st	X+, r1
    1476:	1d 92       	st	X+, r1
    1478:	1d 92       	st	X+, r1
    147a:	1c 92       	st	X, r1
    147c:	d0 97       	sbiw	r26, 0x30	; 48
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
    147e:	b9 96       	adiw	r30, 0x29	; 41

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    1480:	99 96       	adiw	r26, 0x29	; 41
    1482:	2c 91       	ld	r18, X
    1484:	31 81       	ldd	r19, Z+1	; 0x01
    1486:	42 81       	ldd	r20, Z+2	; 0x02
    1488:	53 81       	ldd	r21, Z+3	; 0x03
    148a:	c9 01       	movw	r24, r18
    148c:	da 01       	movw	r26, r20
    148e:	b7 ff       	sbrs	r27, 7
    1490:	04 c0       	rjmp	.+8      	; 0x149a <Timebase_UpCounter_SS_Update+0x19e>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	a0 e0       	ldi	r26, 0x00	; 0
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	fb 01       	movw	r30, r22
    149c:	81 ab       	std	Z+49, r24	; 0x31
    149e:	92 ab       	std	Z+50, r25	; 0x32
    14a0:	a3 ab       	std	Z+51, r26	; 0x33
    14a2:	b4 ab       	std	Z+52, r27	; 0x34
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    14a4:	89 e1       	ldi	r24, 0x19	; 25
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2d 81       	ldd	r18, Y+5	; 0x05
    14aa:	3e 81       	ldd	r19, Y+6	; 0x06
    14ac:	28 9f       	mul	r18, r24
    14ae:	f0 01       	movw	r30, r0
    14b0:	29 9f       	mul	r18, r25
    14b2:	f0 0d       	add	r31, r0
    14b4:	38 9f       	mul	r19, r24
    14b6:	f0 0d       	add	r31, r0
    14b8:	11 24       	eor	r1, r1
    14ba:	e2 0d       	add	r30, r2
    14bc:	f3 1d       	adc	r31, r3
    14be:	80 a1       	ldd	r24, Z+32	; 0x20
    14c0:	81 7e       	andi	r24, 0xE1	; 225
    14c2:	88 60       	ori	r24, 0x08	; 8
    14c4:	80 a3       	std	Z+32, r24	; 0x20
    14c6:	91 c0       	rjmp	.+290    	; 0x15ea <Timebase_UpCounter_SS_Update+0x2ee>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    14c8:	82 30       	cpi	r24, 0x02	; 2
    14ca:	09 f0       	breq	.+2      	; 0x14ce <Timebase_UpCounter_SS_Update+0x1d2>
    14cc:	8e c0       	rjmp	.+284    	; 0x15ea <Timebase_UpCounter_SS_Update+0x2ee>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    14ce:	d1 01       	movw	r26, r2
    14d0:	1a 96       	adiw	r26, 0x0a	; 10
    14d2:	8d 91       	ld	r24, X+
    14d4:	9d 91       	ld	r25, X+
    14d6:	0d 90       	ld	r0, X+
    14d8:	bc 91       	ld	r27, X
    14da:	a0 2d       	mov	r26, r0
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	ab 83       	std	Y+3, r26	; 0x03
    14e2:	bc 83       	std	Y+4, r27	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    14e4:	f1 01       	movw	r30, r2
    14e6:	80 84       	ldd	r8, Z+8	; 0x08
    14e8:	91 84       	ldd	r9, Z+9	; 0x09
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
    14ea:	db 01       	movw	r26, r22
    14ec:	9d 96       	adiw	r26, 0x2d	; 45
    14ee:	ad 90       	ld	r10, X+
    14f0:	bd 90       	ld	r11, X+
    14f2:	cd 90       	ld	r12, X+
    14f4:	dc 90       	ld	r13, X
    14f6:	d0 97       	sbiw	r26, 0x30	; 48
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	int32_t value = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    14f8:	21 81       	ldd	r18, Z+1	; 0x01
    14fa:	32 81       	ldd	r19, Z+2	; 0x02
    14fc:	40 e0       	ldi	r20, 0x00	; 0
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	c6 01       	movw	r24, r12
    1502:	b5 01       	movw	r22, r10
    1504:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    1508:	7b 01       	movw	r14, r22
    150a:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    150c:	f1 01       	movw	r30, r2
    150e:	21 81       	ldd	r18, Z+1	; 0x01
    1510:	32 81       	ldd	r19, Z+2	; 0x02
    1512:	40 e0       	ldi	r20, 0x00	; 0
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	c6 01       	movw	r24, r12
    1518:	b5 01       	movw	r22, r10
    151a:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    151e:	c9 01       	movw	r24, r18
    1520:	da 01       	movw	r26, r20
    1522:	2c 01       	movw	r4, r24
    1524:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
    1526:	54 01       	movw	r10, r8
    1528:	cc 24       	eor	r12, r12
    152a:	dd 24       	eor	r13, r13
    152c:	ae 0c       	add	r10, r14
    152e:	bf 1c       	adc	r11, r15
    1530:	c0 1e       	adc	r12, r16
    1532:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1534:	d1 01       	movw	r26, r2
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	8d 91       	ld	r24, X+
    153a:	9c 91       	ld	r25, X
    153c:	12 97       	sbiw	r26, 0x02	; 2
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	a8 16       	cp	r10, r24
    1544:	b9 06       	cpc	r11, r25
    1546:	ca 06       	cpc	r12, r26
    1548:	db 06       	cpc	r13, r27
    154a:	9c f0       	brlt	.+38     	; 0x1572 <Timebase_UpCounter_SS_Update+0x276>
	  sec_val += 1;
    154c:	08 94       	sec
    154e:	41 1c       	adc	r4, r1
    1550:	51 1c       	adc	r5, r1
    1552:	61 1c       	adc	r6, r1
    1554:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    1556:	f1 01       	movw	r30, r2
    1558:	21 81       	ldd	r18, Z+1	; 0x01
    155a:	32 81       	ldd	r19, Z+2	; 0x02
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	c6 01       	movw	r24, r12
    1562:	b5 01       	movw	r22, r10
    1564:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    1568:	ac 01       	movw	r20, r24
    156a:	cb 01       	movw	r24, r22
    156c:	da 01       	movw	r26, r20
    156e:	5c 01       	movw	r10, r24
    1570:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1572:	89 e1       	ldi	r24, 0x19	; 25
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	2d 81       	ldd	r18, Y+5	; 0x05
    1578:	3e 81       	ldd	r19, Y+6	; 0x06
    157a:	28 9f       	mul	r18, r24
    157c:	80 01       	movw	r16, r0
    157e:	29 9f       	mul	r18, r25
    1580:	10 0d       	add	r17, r0
    1582:	38 9f       	mul	r19, r24
    1584:	10 0d       	add	r17, r0
    1586:	11 24       	eor	r1, r1
    1588:	02 0d       	add	r16, r2
    158a:	13 1d       	adc	r17, r3
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	ab 81       	ldd	r26, Y+3	; 0x03
    1592:	bc 81       	ldd	r27, Y+4	; 0x04
    1594:	84 0d       	add	r24, r4
    1596:	95 1d       	adc	r25, r5
    1598:	a6 1d       	adc	r26, r6
    159a:	b7 1d       	adc	r27, r7
    159c:	f8 01       	movw	r30, r16
    159e:	81 a3       	std	Z+33, r24	; 0x21
    15a0:	92 a3       	std	Z+34, r25	; 0x22
    15a2:	a3 a3       	std	Z+35, r26	; 0x23
    15a4:	b4 a3       	std	Z+36, r27	; 0x24
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    15a6:	d8 01       	movw	r26, r16
    15a8:	95 96       	adiw	r26, 0x25	; 37
    15aa:	ad 92       	st	X+, r10
    15ac:	bd 92       	st	X+, r11
    15ae:	cd 92       	st	X+, r12
    15b0:	dc 92       	st	X, r13
    15b2:	98 97       	sbiw	r26, 0x28	; 40
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
    15b4:	99 96       	adiw	r26, 0x29	; 41
    15b6:	2d 91       	ld	r18, X+
    15b8:	3d 91       	ld	r19, X+
    15ba:	4d 91       	ld	r20, X+
    15bc:	5c 91       	ld	r21, X
    15be:	9c 97       	sbiw	r26, 0x2c	; 44
    15c0:	9d 96       	adiw	r26, 0x2d	; 45
    15c2:	8d 91       	ld	r24, X+
    15c4:	9d 91       	ld	r25, X+
    15c6:	0d 90       	ld	r0, X+
    15c8:	bc 91       	ld	r27, X
    15ca:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    15cc:	28 1b       	sub	r18, r24
    15ce:	39 0b       	sbc	r19, r25
    15d0:	4a 0b       	sbc	r20, r26
    15d2:	5b 0b       	sbc	r21, r27
    15d4:	57 ff       	sbrs	r21, 7
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <Timebase_UpCounter_SS_Update+0x2e4>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	f8 01       	movw	r30, r16
    15e2:	21 ab       	std	Z+49, r18	; 0x31
    15e4:	32 ab       	std	Z+50, r19	; 0x32
    15e6:	43 ab       	std	Z+51, r20	; 0x33
    15e8:	54 ab       	std	Z+52, r21	; 0x34
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    15ea:	26 96       	adiw	r28, 0x06	; 6
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	1f 91       	pop	r17
    15fc:	0f 91       	pop	r16
    15fe:	ff 90       	pop	r15
    1600:	ef 90       	pop	r14
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	bf 90       	pop	r11
    1608:	af 90       	pop	r10
    160a:	9f 90       	pop	r9
    160c:	8f 90       	pop	r8
    160e:	7f 90       	pop	r7
    1610:	6f 90       	pop	r6
    1612:	5f 90       	pop	r5
    1614:	4f 90       	pop	r4
    1616:	3f 90       	pop	r3
    1618:	2f 90       	pop	r2
    161a:	08 95       	ret

0000161c <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	e0 91 43 01 	lds	r30, 0x0143
    1622:	f0 91 44 01 	lds	r31, 0x0144
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	29 e1       	ldi	r18, 0x19	; 25
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	bc 01       	movw	r22, r24
    162e:	62 9f       	mul	r22, r18
    1630:	c0 01       	movw	r24, r0
    1632:	63 9f       	mul	r22, r19
    1634:	90 0d       	add	r25, r0
    1636:	72 9f       	mul	r23, r18
    1638:	90 0d       	add	r25, r0
    163a:	11 24       	eor	r1, r1
    163c:	e8 0f       	add	r30, r24
    163e:	f9 1f       	adc	r31, r25
    1640:	80 a1       	ldd	r24, Z+32	; 0x20
    1642:	86 95       	lsr	r24
    1644:	8f 70       	andi	r24, 0x0F	; 15
    1646:	84 30       	cpi	r24, 0x04	; 4
    1648:	09 f4       	brne	.+2      	; 0x164c <Timebase_UpCounter_SS_Expired+0x30>
    164a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    164c:	84 2f       	mov	r24, r20
    164e:	08 95       	ret

00001650 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1650:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1652:	e0 91 43 01 	lds	r30, 0x0143
    1656:	f0 91 44 01 	lds	r31, 0x0144
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	89 e1       	ldi	r24, 0x19	; 25
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	bc 01       	movw	r22, r24
    1664:	26 9f       	mul	r18, r22
    1666:	c0 01       	movw	r24, r0
    1668:	27 9f       	mul	r18, r23
    166a:	90 0d       	add	r25, r0
    166c:	36 9f       	mul	r19, r22
    166e:	90 0d       	add	r25, r0
    1670:	11 24       	eor	r1, r1
    1672:	e8 0f       	add	r30, r24
    1674:	f9 1f       	adc	r31, r25
    1676:	80 a1       	ldd	r24, Z+32	; 0x20
    1678:	86 95       	lsr	r24
    167a:	8f 70       	andi	r24, 0x0F	; 15
    167c:	84 30       	cpi	r24, 0x04	; 4
    167e:	11 f0       	breq	.+4      	; 0x1684 <Timebase_UpCounter_SS_Expired_Event+0x34>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1684:	84 2f       	mov	r24, r20
    1686:	0e 94 45 08 	call	0x108a	; 0x108a <Timebase_UpCounter_SS_Reset>
    168a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    168c:	08 95       	ret

0000168e <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    168e:	e0 91 43 01 	lds	r30, 0x0143
    1692:	f0 91 44 01 	lds	r31, 0x0144
    1696:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1698:	29 e1       	ldi	r18, 0x19	; 25
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	dc 01       	movw	r26, r24
    169e:	a2 9f       	mul	r26, r18
    16a0:	c0 01       	movw	r24, r0
    16a2:	a3 9f       	mul	r26, r19
    16a4:	90 0d       	add	r25, r0
    16a6:	b2 9f       	mul	r27, r18
    16a8:	90 0d       	add	r25, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	e8 0f       	add	r30, r24
    16ae:	f9 1f       	adc	r31, r25
    16b0:	80 a1       	ldd	r24, Z+32	; 0x20
    16b2:	80 fd       	sbrc	r24, 0
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    16b6:	81 a9       	ldd	r24, Z+49	; 0x31
    16b8:	92 a9       	ldd	r25, Z+50	; 0x32
    16ba:	a3 a9       	ldd	r26, Z+51	; 0x33
    16bc:	b4 a9       	ldd	r27, Z+52	; 0x34
    16be:	84 0f       	add	r24, r20
    16c0:	95 1f       	adc	r25, r21
    16c2:	a6 1f       	adc	r26, r22
    16c4:	b7 1f       	adc	r27, r23
    16c6:	85 ab       	std	Z+53, r24	; 0x35
    16c8:	96 ab       	std	Z+54, r25	; 0x36
    16ca:	a7 ab       	std	Z+55, r26	; 0x37
    16cc:	b0 af       	std	Z+56, r27	; 0x38
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    16ce:	80 a1       	ldd	r24, Z+32	; 0x20
    16d0:	81 60       	ori	r24, 0x01	; 1
    16d2:	80 a3       	std	Z+32, r24	; 0x20
    16d4:	08 95       	ret

000016d6 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    16d6:	e0 91 43 01 	lds	r30, 0x0143
    16da:	f0 91 44 01 	lds	r31, 0x0144
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	29 e1       	ldi	r18, 0x19	; 25
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	ac 01       	movw	r20, r24
    16e6:	42 9f       	mul	r20, r18
    16e8:	c0 01       	movw	r24, r0
    16ea:	43 9f       	mul	r20, r19
    16ec:	90 0d       	add	r25, r0
    16ee:	52 9f       	mul	r21, r18
    16f0:	90 0d       	add	r25, r0
    16f2:	11 24       	eor	r1, r1
    16f4:	e8 0f       	add	r30, r24
    16f6:	f9 1f       	adc	r31, r25
    16f8:	25 a9       	ldd	r18, Z+53	; 0x35
    16fa:	36 a9       	ldd	r19, Z+54	; 0x36
    16fc:	47 a9       	ldd	r20, Z+55	; 0x37
    16fe:	50 ad       	ldd	r21, Z+56	; 0x38
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1700:	81 a9       	ldd	r24, Z+49	; 0x31
    1702:	92 a9       	ldd	r25, Z+50	; 0x32
    1704:	a3 a9       	ldd	r26, Z+51	; 0x33
    1706:	b4 a9       	ldd	r27, Z+52	; 0x34
    1708:	28 1b       	sub	r18, r24
    170a:	39 0b       	sbc	r19, r25
    170c:	4a 0b       	sbc	r20, r26
    170e:	5b 0b       	sbc	r21, r27
    1710:	57 ff       	sbrs	r21, 7
    1712:	04 c0       	rjmp	.+8      	; 0x171c <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    171c:	b9 01       	movw	r22, r18
    171e:	ca 01       	movw	r24, r20
    1720:	08 95       	ret

00001722 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1726:	c0 91 43 01 	lds	r28, 0x0143
    172a:	d0 91 44 01 	lds	r29, 0x0144
    172e:	68 2f       	mov	r22, r24
    1730:	70 e0       	ldi	r23, 0x00	; 0
    1732:	89 e1       	ldi	r24, 0x19	; 25
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	68 9f       	mul	r22, r24
    1738:	f0 01       	movw	r30, r0
    173a:	69 9f       	mul	r22, r25
    173c:	f0 0d       	add	r31, r0
    173e:	78 9f       	mul	r23, r24
    1740:	f0 0d       	add	r31, r0
    1742:	11 24       	eor	r1, r1
    1744:	ec 0f       	add	r30, r28
    1746:	fd 1f       	adc	r31, r29
    1748:	25 a9       	ldd	r18, Z+53	; 0x35
    174a:	36 a9       	ldd	r19, Z+54	; 0x36
    174c:	47 a9       	ldd	r20, Z+55	; 0x37
    174e:	50 ad       	ldd	r21, Z+56	; 0x38
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1750:	81 a9       	ldd	r24, Z+49	; 0x31
    1752:	92 a9       	ldd	r25, Z+50	; 0x32
    1754:	a3 a9       	ldd	r26, Z+51	; 0x33
    1756:	b4 a9       	ldd	r27, Z+52	; 0x34
    1758:	28 1b       	sub	r18, r24
    175a:	39 0b       	sbc	r19, r25
    175c:	4a 0b       	sbc	r20, r26
    175e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1760:	57 fd       	sbrc	r21, 7
    1762:	07 c0       	rjmp	.+14     	; 0x1772 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1764:	21 15       	cp	r18, r1
    1766:	31 05       	cpc	r19, r1
    1768:	41 05       	cpc	r20, r1
    176a:	51 05       	cpc	r21, r1
    176c:	11 f0       	breq	.+4      	; 0x1772 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	12 c0       	rjmp	.+36     	; 0x1796 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1772:	20 e0       	ldi	r18, 0x00	; 0
    1774:	89 e1       	ldi	r24, 0x19	; 25
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	ac 01       	movw	r20, r24
    177a:	64 9f       	mul	r22, r20
    177c:	c0 01       	movw	r24, r0
    177e:	65 9f       	mul	r22, r21
    1780:	90 0d       	add	r25, r0
    1782:	74 9f       	mul	r23, r20
    1784:	90 0d       	add	r25, r0
    1786:	11 24       	eor	r1, r1
    1788:	c8 0f       	add	r28, r24
    178a:	d9 1f       	adc	r29, r25
    178c:	88 a1       	ldd	r24, Y+32	; 0x20
    178e:	80 ff       	sbrs	r24, 0
    1790:	21 e0       	ldi	r18, 0x01	; 1
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1796:	82 2f       	mov	r24, r18
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    179e:	1f 93       	push	r17
    17a0:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    17a2:	0e 94 91 0b 	call	0x1722	; 0x1722 <Timebase_UpCounter_SS_Period_Value_Expired>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	11 f0       	breq	.+4      	; 0x17ae <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	16 c0       	rjmp	.+44     	; 0x17da <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17ae:	e0 91 43 01 	lds	r30, 0x0143
    17b2:	f0 91 44 01 	lds	r31, 0x0144
    17b6:	21 2f       	mov	r18, r17
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	89 e1       	ldi	r24, 0x19	; 25
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	ac 01       	movw	r20, r24
    17c0:	24 9f       	mul	r18, r20
    17c2:	c0 01       	movw	r24, r0
    17c4:	25 9f       	mul	r18, r21
    17c6:	90 0d       	add	r25, r0
    17c8:	34 9f       	mul	r19, r20
    17ca:	90 0d       	add	r25, r0
    17cc:	11 24       	eor	r1, r1
    17ce:	e8 0f       	add	r30, r24
    17d0:	f9 1f       	adc	r31, r25
    17d2:	80 a1       	ldd	r24, Z+32	; 0x20
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	80 a3       	std	Z+32, r24	; 0x20
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17da:	1f 91       	pop	r17
    17dc:	08 95       	ret

000017de <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <Timebase_UpCounter_SS_Update>
  }
}
    17e4:	08 95       	ret

000017e6 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	0e 94 45 08 	call	0x108a	; 0x108a <Timebase_UpCounter_SS_Reset>
  }
}
    17ec:	08 95       	ret

000017ee <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    17ee:	e0 91 43 01 	lds	r30, 0x0143
    17f2:	f0 91 44 01 	lds	r31, 0x0144
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	25 e1       	ldi	r18, 0x15	; 21
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	ac 01       	movw	r20, r24
    17fe:	42 9f       	mul	r20, r18
    1800:	c0 01       	movw	r24, r0
    1802:	43 9f       	mul	r20, r19
    1804:	90 0d       	add	r25, r0
    1806:	52 9f       	mul	r21, r18
    1808:	90 0d       	add	r25, r0
    180a:	11 24       	eor	r1, r1
    180c:	e8 0f       	add	r30, r24
    180e:	f9 1f       	adc	r31, r25
    1810:	81 ad       	ldd	r24, Z+57	; 0x39
    1812:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	08 95       	ret

00001818 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1818:	e0 91 43 01 	lds	r30, 0x0143
    181c:	f0 91 44 01 	lds	r31, 0x0144
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	25 e1       	ldi	r18, 0x15	; 21
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	ac 01       	movw	r20, r24
    1828:	42 9f       	mul	r20, r18
    182a:	c0 01       	movw	r24, r0
    182c:	43 9f       	mul	r20, r19
    182e:	90 0d       	add	r25, r0
    1830:	52 9f       	mul	r21, r18
    1832:	90 0d       	add	r25, r0
    1834:	11 24       	eor	r1, r1
    1836:	e8 0f       	add	r30, r24
    1838:	f9 1f       	adc	r31, r25
    183a:	6f 70       	andi	r22, 0x0F	; 15
    183c:	66 0f       	add	r22, r22
    183e:	81 ad       	ldd	r24, Z+57	; 0x39
    1840:	81 7e       	andi	r24, 0xE1	; 225
    1842:	86 2b       	or	r24, r22
    1844:	81 af       	std	Z+57, r24	; 0x39
}
    1846:	08 95       	ret

00001848 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1848:	e0 91 43 01 	lds	r30, 0x0143
    184c:	f0 91 44 01 	lds	r31, 0x0144
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	25 e1       	ldi	r18, 0x15	; 21
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	ac 01       	movw	r20, r24
    1858:	42 9f       	mul	r20, r18
    185a:	c0 01       	movw	r24, r0
    185c:	43 9f       	mul	r20, r19
    185e:	90 0d       	add	r25, r0
    1860:	52 9f       	mul	r21, r18
    1862:	90 0d       	add	r25, r0
    1864:	11 24       	eor	r1, r1
    1866:	e8 0f       	add	r30, r24
    1868:	f9 1f       	adc	r31, r25
    186a:	ea 5b       	subi	r30, 0xBA	; 186
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	60 81       	ld	r22, Z
    1870:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1872:	82 81       	ldd	r24, Z+2	; 0x02
    1874:	93 81       	ldd	r25, Z+3	; 0x03
    1876:	08 95       	ret

00001878 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    187c:	c0 91 43 01 	lds	r28, 0x0143
    1880:	d0 91 44 01 	lds	r29, 0x0144
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	25 e1       	ldi	r18, 0x15	; 21
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	fc 01       	movw	r30, r24
    188c:	e2 9f       	mul	r30, r18
    188e:	c0 01       	movw	r24, r0
    1890:	e3 9f       	mul	r30, r19
    1892:	90 0d       	add	r25, r0
    1894:	f2 9f       	mul	r31, r18
    1896:	90 0d       	add	r25, r0
    1898:	11 24       	eor	r1, r1
    189a:	c8 0f       	add	r28, r24
    189c:	d9 1f       	adc	r29, r25
    189e:	ca 5b       	subi	r28, 0xBA	; 186
    18a0:	df 4f       	sbci	r29, 0xFF	; 255
    18a2:	ca 01       	movw	r24, r20
    18a4:	db 01       	movw	r26, r22
    18a6:	b7 ff       	sbrs	r27, 7
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <Timebase_UpCounter_Set_Value+0x3a>
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a0 e0       	ldi	r26, 0x00	; 0
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	88 83       	st	Y, r24
    18b4:	99 83       	std	Y+1, r25	; 0x01
    18b6:	aa 83       	std	Y+2, r26	; 0x02
    18b8:	bb 83       	std	Y+3, r27	; 0x03
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    18c0:	e0 91 43 01 	lds	r30, 0x0143
    18c4:	f0 91 44 01 	lds	r31, 0x0144
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	25 e1       	ldi	r18, 0x15	; 21
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	ac 01       	movw	r20, r24
    18d0:	42 9f       	mul	r20, r18
    18d2:	c0 01       	movw	r24, r0
    18d4:	43 9f       	mul	r20, r19
    18d6:	90 0d       	add	r25, r0
    18d8:	52 9f       	mul	r21, r18
    18da:	90 0d       	add	r25, r0
    18dc:	11 24       	eor	r1, r1
    18de:	e8 0f       	add	r30, r24
    18e0:	f9 1f       	adc	r31, r25
    18e2:	df 01       	movw	r26, r30
    18e4:	da 96       	adiw	r26, 0x3a	; 58
    18e6:	62 ad       	ldd	r22, Z+58	; 0x3a
    18e8:	11 96       	adiw	r26, 0x01	; 1
    18ea:	7c 91       	ld	r23, X
    18ec:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    18ee:	12 96       	adiw	r26, 0x02	; 2
    18f0:	8c 91       	ld	r24, X
    18f2:	12 97       	sbiw	r26, 0x02	; 2
    18f4:	13 96       	adiw	r26, 0x03	; 3
    18f6:	9c 91       	ld	r25, X
    18f8:	08 95       	ret

000018fa <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    18fa:	e0 91 43 01 	lds	r30, 0x0143
    18fe:	f0 91 44 01 	lds	r31, 0x0144
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	25 e1       	ldi	r18, 0x15	; 21
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	ac 01       	movw	r20, r24
    190a:	42 9f       	mul	r20, r18
    190c:	c0 01       	movw	r24, r0
    190e:	43 9f       	mul	r20, r19
    1910:	90 0d       	add	r25, r0
    1912:	52 9f       	mul	r21, r18
    1914:	90 0d       	add	r25, r0
    1916:	11 24       	eor	r1, r1
    1918:	e8 0f       	add	r30, r24
    191a:	f9 1f       	adc	r31, r25
    191c:	df 01       	movw	r26, r30
    191e:	da 96       	adiw	r26, 0x3a	; 58
    1920:	62 ad       	ldd	r22, Z+58	; 0x3a
    1922:	11 96       	adiw	r26, 0x01	; 1
    1924:	7c 91       	ld	r23, X
    1926:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1928:	12 96       	adiw	r26, 0x02	; 2
    192a:	8c 91       	ld	r24, X
    192c:	12 97       	sbiw	r26, 0x02	; 2
    192e:	13 96       	adiw	r26, 0x03	; 3
    1930:	9c 91       	ld	r25, X
    1932:	08 95       	ret

00001934 <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1934:	e0 91 43 01 	lds	r30, 0x0143
    1938:	f0 91 44 01 	lds	r31, 0x0144
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	25 e1       	ldi	r18, 0x15	; 21
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	dc 01       	movw	r26, r24
    1944:	a2 9f       	mul	r26, r18
    1946:	c0 01       	movw	r24, r0
    1948:	a3 9f       	mul	r26, r19
    194a:	90 0d       	add	r25, r0
    194c:	b2 9f       	mul	r27, r18
    194e:	90 0d       	add	r25, r0
    1950:	11 24       	eor	r1, r1
    1952:	e8 0f       	add	r30, r24
    1954:	f9 1f       	adc	r31, r25
    1956:	42 af       	std	Z+58, r20	; 0x3a
    1958:	53 af       	std	Z+59, r21	; 0x3b
    195a:	64 af       	std	Z+60, r22	; 0x3c
    195c:	75 af       	std	Z+61, r23	; 0x3d
}
    195e:	08 95       	ret

00001960 <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1960:	e0 91 43 01 	lds	r30, 0x0143
    1964:	f0 91 44 01 	lds	r31, 0x0144
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	25 e1       	ldi	r18, 0x15	; 21
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	dc 01       	movw	r26, r24
    1970:	a2 9f       	mul	r26, r18
    1972:	c0 01       	movw	r24, r0
    1974:	a3 9f       	mul	r26, r19
    1976:	90 0d       	add	r25, r0
    1978:	b2 9f       	mul	r27, r18
    197a:	90 0d       	add	r25, r0
    197c:	11 24       	eor	r1, r1
    197e:	e8 0f       	add	r30, r24
    1980:	f9 1f       	adc	r31, r25
    1982:	42 af       	std	Z+58, r20	; 0x3a
    1984:	53 af       	std	Z+59, r21	; 0x3b
    1986:	64 af       	std	Z+60, r22	; 0x3c
    1988:	75 af       	std	Z+61, r23	; 0x3d
}
    198a:	08 95       	ret

0000198c <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    198c:	e0 91 43 01 	lds	r30, 0x0143
    1990:	f0 91 44 01 	lds	r31, 0x0144
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	25 e1       	ldi	r18, 0x15	; 21
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	ac 01       	movw	r20, r24
    199c:	42 9f       	mul	r20, r18
    199e:	c0 01       	movw	r24, r0
    19a0:	43 9f       	mul	r20, r19
    19a2:	90 0d       	add	r25, r0
    19a4:	52 9f       	mul	r21, r18
    19a6:	90 0d       	add	r25, r0
    19a8:	11 24       	eor	r1, r1
    19aa:	e8 0f       	add	r30, r24
    19ac:	f9 1f       	adc	r31, r25
    19ae:	fe 96       	adiw	r30, 0x3e	; 62
    19b0:	60 81       	ld	r22, Z
    19b2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Target;
}
    19b4:	82 81       	ldd	r24, Z+2	; 0x02
    19b6:	93 81       	ldd	r25, Z+3	; 0x03
    19b8:	08 95       	ret

000019ba <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    19ba:	e0 91 43 01 	lds	r30, 0x0143
    19be:	f0 91 44 01 	lds	r31, 0x0144
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	25 e1       	ldi	r18, 0x15	; 21
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	dc 01       	movw	r26, r24
    19ca:	a2 9f       	mul	r26, r18
    19cc:	c0 01       	movw	r24, r0
    19ce:	a3 9f       	mul	r26, r19
    19d0:	90 0d       	add	r25, r0
    19d2:	b2 9f       	mul	r27, r18
    19d4:	90 0d       	add	r25, r0
    19d6:	11 24       	eor	r1, r1
    19d8:	e8 0f       	add	r30, r24
    19da:	f9 1f       	adc	r31, r25
    19dc:	fe 96       	adiw	r30, 0x3e	; 62
    19de:	40 83       	st	Z, r20
    19e0:	51 83       	std	Z+1, r21	; 0x01
    19e2:	62 83       	std	Z+2, r22	; 0x02
    19e4:	73 83       	std	Z+3, r23	; 0x03
}
    19e6:	08 95       	ret

000019e8 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    19e8:	e0 91 43 01 	lds	r30, 0x0143
    19ec:	f0 91 44 01 	lds	r31, 0x0144
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	25 e1       	ldi	r18, 0x15	; 21
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	ac 01       	movw	r20, r24
    19f8:	42 9f       	mul	r20, r18
    19fa:	c0 01       	movw	r24, r0
    19fc:	43 9f       	mul	r20, r19
    19fe:	90 0d       	add	r25, r0
    1a00:	52 9f       	mul	r21, r18
    1a02:	90 0d       	add	r25, r0
    1a04:	11 24       	eor	r1, r1
    1a06:	e8 0f       	add	r30, r24
    1a08:	f9 1f       	adc	r31, r25
    1a0a:	ee 5b       	subi	r30, 0xBE	; 190
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	08 95       	ret

00001a18 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1a1c:	c0 91 43 01 	lds	r28, 0x0143
    1a20:	d0 91 44 01 	lds	r29, 0x0144
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	25 e1       	ldi	r18, 0x15	; 21
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	e2 9f       	mul	r30, r18
    1a2e:	c0 01       	movw	r24, r0
    1a30:	e3 9f       	mul	r30, r19
    1a32:	90 0d       	add	r25, r0
    1a34:	f2 9f       	mul	r31, r18
    1a36:	90 0d       	add	r25, r0
    1a38:	11 24       	eor	r1, r1
    1a3a:	c8 0f       	add	r28, r24
    1a3c:	d9 1f       	adc	r29, r25
    1a3e:	ce 5b       	subi	r28, 0xBE	; 190
    1a40:	df 4f       	sbci	r29, 0xFF	; 255
    1a42:	ca 01       	movw	r24, r20
    1a44:	db 01       	movw	r26, r22
    1a46:	b7 ff       	sbrs	r27, 7
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <Timebase_UpCounter_Set_TemporaryValue+0x3a>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	88 83       	st	Y, r24
    1a54:	99 83       	std	Y+1, r25	; 0x01
    1a56:	aa 83       	std	Y+2, r26	; 0x02
    1a58:	bb 83       	std	Y+3, r27	; 0x03
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1a60:	e0 91 43 01 	lds	r30, 0x0143
    1a64:	f0 91 44 01 	lds	r31, 0x0144
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	25 e1       	ldi	r18, 0x15	; 21
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	ac 01       	movw	r20, r24
    1a70:	42 9f       	mul	r20, r18
    1a72:	c0 01       	movw	r24, r0
    1a74:	43 9f       	mul	r20, r19
    1a76:	90 0d       	add	r25, r0
    1a78:	52 9f       	mul	r21, r18
    1a7a:	90 0d       	add	r25, r0
    1a7c:	11 24       	eor	r1, r1
    1a7e:	e8 0f       	add	r30, r24
    1a80:	f9 1f       	adc	r31, r25
    1a82:	e6 5b       	subi	r30, 0xB6	; 182
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	08 95       	ret

00001a90 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1a90:	e0 91 43 01 	lds	r30, 0x0143
    1a94:	f0 91 44 01 	lds	r31, 0x0144
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	25 e1       	ldi	r18, 0x15	; 21
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	a2 9f       	mul	r26, r18
    1aa2:	c0 01       	movw	r24, r0
    1aa4:	a3 9f       	mul	r26, r19
    1aa6:	90 0d       	add	r25, r0
    1aa8:	b2 9f       	mul	r27, r18
    1aaa:	90 0d       	add	r25, r0
    1aac:	11 24       	eor	r1, r1
    1aae:	e8 0f       	add	r30, r24
    1ab0:	f9 1f       	adc	r31, r25
    1ab2:	e6 5b       	subi	r30, 0xB6	; 182
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	40 83       	st	Z, r20
    1ab8:	51 83       	std	Z+1, r21	; 0x01
    1aba:	62 83       	std	Z+2, r22	; 0x02
    1abc:	73 83       	std	Z+3, r23	; 0x03
}
    1abe:	08 95       	ret

00001ac0 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    1ac0:	e0 91 43 01 	lds	r30, 0x0143
    1ac4:	f0 91 44 01 	lds	r31, 0x0144
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	25 e1       	ldi	r18, 0x15	; 21
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	ac 01       	movw	r20, r24
    1ad0:	42 9f       	mul	r20, r18
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	43 9f       	mul	r20, r19
    1ad6:	90 0d       	add	r25, r0
    1ad8:	52 9f       	mul	r21, r18
    1ada:	90 0d       	add	r25, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	e8 0f       	add	r30, r24
    1ae0:	f9 1f       	adc	r31, r25
    1ae2:	81 ad       	ldd	r24, Z+57	; 0x39
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    1ae4:	81 70       	andi	r24, 0x01	; 1
    1ae6:	08 95       	ret

00001ae8 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1ae8:	e0 91 43 01 	lds	r30, 0x0143
    1aec:	f0 91 44 01 	lds	r31, 0x0144
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	25 e1       	ldi	r18, 0x15	; 21
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	ac 01       	movw	r20, r24
    1af8:	42 9f       	mul	r20, r18
    1afa:	c0 01       	movw	r24, r0
    1afc:	43 9f       	mul	r20, r19
    1afe:	90 0d       	add	r25, r0
    1b00:	52 9f       	mul	r21, r18
    1b02:	90 0d       	add	r25, r0
    1b04:	11 24       	eor	r1, r1
    1b06:	e8 0f       	add	r30, r24
    1b08:	f9 1f       	adc	r31, r25
    1b0a:	81 ad       	ldd	r24, Z+57	; 0x39
    1b0c:	81 60       	ori	r24, 0x01	; 1
    1b0e:	81 af       	std	Z+57, r24	; 0x39
}
    1b10:	08 95       	ret

00001b12 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1b12:	e0 91 43 01 	lds	r30, 0x0143
    1b16:	f0 91 44 01 	lds	r31, 0x0144
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	25 e1       	ldi	r18, 0x15	; 21
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	ac 01       	movw	r20, r24
    1b22:	42 9f       	mul	r20, r18
    1b24:	c0 01       	movw	r24, r0
    1b26:	43 9f       	mul	r20, r19
    1b28:	90 0d       	add	r25, r0
    1b2a:	52 9f       	mul	r21, r18
    1b2c:	90 0d       	add	r25, r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	e8 0f       	add	r30, r24
    1b32:	f9 1f       	adc	r31, r25
    1b34:	81 ad       	ldd	r24, Z+57	; 0x39
    1b36:	8e 7f       	andi	r24, 0xFE	; 254
    1b38:	81 af       	std	Z+57, r24	; 0x39
}
    1b3a:	08 95       	ret

00001b3c <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1b3c:	e0 91 43 01 	lds	r30, 0x0143
    1b40:	f0 91 44 01 	lds	r31, 0x0144
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	25 e1       	ldi	r18, 0x15	; 21
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	42 9f       	mul	r20, r18
    1b4e:	c0 01       	movw	r24, r0
    1b50:	43 9f       	mul	r20, r19
    1b52:	90 0d       	add	r25, r0
    1b54:	52 9f       	mul	r21, r18
    1b56:	90 0d       	add	r25, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	e8 0f       	add	r30, r24
    1b5c:	f9 1f       	adc	r31, r25
    1b5e:	81 ad       	ldd	r24, Z+57	; 0x39

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1b60:	ea 5b       	subi	r30, 0xBA	; 186
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	10 82       	st	Z, r1
    1b66:	11 82       	std	Z+1, r1	; 0x01
    1b68:	12 82       	std	Z+2, r1	; 0x02
    1b6a:	13 82       	std	Z+3, r1	; 0x03
    1b6c:	e6 54       	subi	r30, 0x46	; 70
    1b6e:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1b70:	12 ae       	std	Z+58, r1	; 0x3a
    1b72:	13 ae       	std	Z+59, r1	; 0x3b
    1b74:	14 ae       	std	Z+60, r1	; 0x3c
    1b76:	15 ae       	std	Z+61, r1	; 0x3d
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1b78:	fe 96       	adiw	r30, 0x3e	; 62
    1b7a:	11 92       	st	Z+, r1
    1b7c:	11 92       	st	Z+, r1
    1b7e:	11 92       	st	Z+, r1
    1b80:	11 92       	st	Z+, r1

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1b82:	10 82       	st	Z, r1
    1b84:	11 82       	std	Z+1, r1	; 0x01
    1b86:	12 82       	std	Z+2, r1	; 0x02
    1b88:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1b8a:	38 96       	adiw	r30, 0x08	; 8
    1b8c:	10 82       	st	Z, r1
    1b8e:	11 82       	std	Z+1, r1	; 0x01
    1b90:	12 82       	std	Z+2, r1	; 0x02
    1b92:	13 82       	std	Z+3, r1	; 0x03
    1b94:	ea 54       	subi	r30, 0x4A	; 74
    1b96:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1b98:	80 7e       	andi	r24, 0xE0	; 224
    1b9a:	81 af       	std	Z+57, r24	; 0x39
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    1b9c:	08 95       	ret

00001b9e <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1b9e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Timebase_UpCounter_Reset>
}
    1ba2:	08 95       	ret

00001ba4 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1ba4:	e0 91 43 01 	lds	r30, 0x0143
    1ba8:	f0 91 44 01 	lds	r31, 0x0144
    1bac:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1bae:	25 e1       	ldi	r18, 0x15	; 21
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	ac 01       	movw	r20, r24
    1bb4:	42 9f       	mul	r20, r18
    1bb6:	c0 01       	movw	r24, r0
    1bb8:	43 9f       	mul	r20, r19
    1bba:	90 0d       	add	r25, r0
    1bbc:	52 9f       	mul	r21, r18
    1bbe:	90 0d       	add	r25, r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	e8 0f       	add	r30, r24
    1bc4:	f9 1f       	adc	r31, r25
    1bc6:	91 ad       	ldd	r25, Z+57	; 0x39
    1bc8:	89 2f       	mov	r24, r25
    1bca:	86 95       	lsr	r24
    1bcc:	8f 70       	andi	r24, 0x0F	; 15
    1bce:	81 30       	cpi	r24, 0x01	; 1
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1bd2:	91 7e       	andi	r25, 0xE1	; 225
    1bd4:	92 60       	ori	r25, 0x02	; 2
    1bd6:	91 af       	std	Z+57, r25	; 0x39
    1bd8:	08 95       	ret

00001bda <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1bda:	e0 91 43 01 	lds	r30, 0x0143
    1bde:	f0 91 44 01 	lds	r31, 0x0144
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1be4:	25 e1       	ldi	r18, 0x15	; 21
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	ac 01       	movw	r20, r24
    1bea:	42 9f       	mul	r20, r18
    1bec:	c0 01       	movw	r24, r0
    1bee:	43 9f       	mul	r20, r19
    1bf0:	90 0d       	add	r25, r0
    1bf2:	52 9f       	mul	r21, r18
    1bf4:	90 0d       	add	r25, r0
    1bf6:	11 24       	eor	r1, r1
    1bf8:	e8 0f       	add	r30, r24
    1bfa:	f9 1f       	adc	r31, r25
    1bfc:	91 ad       	ldd	r25, Z+57	; 0x39
    1bfe:	89 2f       	mov	r24, r25
    1c00:	86 95       	lsr	r24
    1c02:	8f 70       	andi	r24, 0x0F	; 15
    1c04:	82 30       	cpi	r24, 0x02	; 2
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1c08:	91 7e       	andi	r25, 0xE1	; 225
    1c0a:	94 60       	ori	r25, 0x04	; 4
    1c0c:	91 af       	std	Z+57, r25	; 0x39
    1c0e:	08 95       	ret

00001c10 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1c10:	a0 91 43 01 	lds	r26, 0x0143
    1c14:	b0 91 44 01 	lds	r27, 0x0144
    1c18:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1c1a:	25 e1       	ldi	r18, 0x15	; 21
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	82 9f       	mul	r24, r18
    1c20:	f0 01       	movw	r30, r0
    1c22:	83 9f       	mul	r24, r19
    1c24:	f0 0d       	add	r31, r0
    1c26:	92 9f       	mul	r25, r18
    1c28:	f0 0d       	add	r31, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	ea 0f       	add	r30, r26
    1c2e:	fb 1f       	adc	r31, r27
    1c30:	81 ad       	ldd	r24, Z+57	; 0x39
    1c32:	86 95       	lsr	r24
    1c34:	8f 70       	andi	r24, 0x0F	; 15
    1c36:	31 f5       	brne	.+76     	; 0x1c84 <Timebase_UpCounter_Set_Securely+0x74>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1c38:	ea 5b       	subi	r30, 0xBA	; 186
    1c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3c:	10 82       	st	Z, r1
    1c3e:	11 82       	std	Z+1, r1	; 0x01
    1c40:	12 82       	std	Z+2, r1	; 0x02
    1c42:	13 82       	std	Z+3, r1	; 0x03

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1c44:	12 92       	st	-Z, r1
    1c46:	12 92       	st	-Z, r1
    1c48:	12 92       	st	-Z, r1
    1c4a:	12 92       	st	-Z, r1
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1c4c:	72 93       	st	-Z, r23
    1c4e:	62 93       	st	-Z, r22
    1c50:	52 93       	st	-Z, r21
    1c52:	42 93       	st	-Z, r20
    1c54:	fe 97       	sbiw	r30, 0x3e	; 62
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1c56:	1a 96       	adiw	r26, 0x0a	; 10
    1c58:	8d 91       	ld	r24, X+
    1c5a:	9d 91       	ld	r25, X+
    1c5c:	0d 90       	ld	r0, X+
    1c5e:	bc 91       	ld	r27, X
    1c60:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1c62:	84 0f       	add	r24, r20
    1c64:	95 1f       	adc	r25, r21
    1c66:	a6 1f       	adc	r26, r22
    1c68:	b7 1f       	adc	r27, r23
    1c6a:	82 af       	std	Z+58, r24	; 0x3a
    1c6c:	93 af       	std	Z+59, r25	; 0x3b
    1c6e:	a4 af       	std	Z+60, r26	; 0x3c
    1c70:	b5 af       	std	Z+61, r27	; 0x3d
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1c72:	91 ad       	ldd	r25, Z+57	; 0x39
    1c74:	89 2f       	mov	r24, r25
    1c76:	86 95       	lsr	r24
    1c78:	8f 70       	andi	r24, 0x0F	; 15
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	19 f0       	breq	.+6      	; 0x1c84 <Timebase_UpCounter_Set_Securely+0x74>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1c7e:	91 7e       	andi	r25, 0xE1	; 225
    1c80:	92 60       	ori	r25, 0x02	; 2
    1c82:	91 af       	std	Z+57, r25	; 0x39
    1c84:	08 95       	ret

00001c86 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1c86:	df 92       	push	r13
    1c88:	ef 92       	push	r14
    1c8a:	ff 92       	push	r15
    1c8c:	0f 93       	push	r16
    1c8e:	1f 93       	push	r17
    1c90:	d8 2e       	mov	r13, r24
    1c92:	7a 01       	movw	r14, r20
    1c94:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    1c96:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    1c9a:	8d 2d       	mov	r24, r13
    1c9c:	b8 01       	movw	r22, r16
    1c9e:	a7 01       	movw	r20, r14
    1ca0:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <Timebase_UpCounter_Set_Securely>
} 
    1ca4:	1f 91       	pop	r17
    1ca6:	0f 91       	pop	r16
    1ca8:	ff 90       	pop	r15
    1caa:	ef 90       	pop	r14
    1cac:	df 90       	pop	r13
    1cae:	08 95       	ret

00001cb0 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    1cb0:	0f 93       	push	r16
    1cb2:	1f 93       	push	r17
    1cb4:	cf 93       	push	r28
    1cb6:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1cb8:	60 91 43 01 	lds	r22, 0x0143
    1cbc:	70 91 44 01 	lds	r23, 0x0144
    1cc0:	08 2f       	mov	r16, r24
    1cc2:	10 e0       	ldi	r17, 0x00	; 0
    1cc4:	85 e1       	ldi	r24, 0x15	; 21
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	08 9f       	mul	r16, r24
    1cca:	f0 01       	movw	r30, r0
    1ccc:	09 9f       	mul	r16, r25
    1cce:	f0 0d       	add	r31, r0
    1cd0:	18 9f       	mul	r17, r24
    1cd2:	f0 0d       	add	r31, r0
    1cd4:	11 24       	eor	r1, r1
    1cd6:	e6 0f       	add	r30, r22
    1cd8:	f7 1f       	adc	r31, r23
    1cda:	81 ad       	ldd	r24, Z+57	; 0x39
    1cdc:	86 95       	lsr	r24
    1cde:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <Timebase_UpCounter_Update+0x36>
    1ce4:	7b c0       	rjmp	.+246    	; 0x1ddc <Timebase_UpCounter_Update+0x12c>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1ce6:	eb 01       	movw	r28, r22
    1ce8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cec:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cee:	bd 85       	ldd	r27, Y+13	; 0x0d

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    1cf0:	22 ad       	ldd	r18, Z+58	; 0x3a
    1cf2:	33 ad       	ldd	r19, Z+59	; 0x3b
    1cf4:	44 ad       	ldd	r20, Z+60	; 0x3c
    1cf6:	55 ad       	ldd	r21, Z+61	; 0x3d
    1cf8:	28 1b       	sub	r18, r24
    1cfa:	39 0b       	sbc	r19, r25
    1cfc:	4a 0b       	sbc	r20, r26
    1cfe:	5b 0b       	sbc	r21, r27
    1d00:	57 ff       	sbrs	r21, 7
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <Timebase_UpCounter_Update+0x5c>
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1d0c:	85 e1       	ldi	r24, 0x15	; 21
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	08 9f       	mul	r16, r24
    1d12:	f0 01       	movw	r30, r0
    1d14:	09 9f       	mul	r16, r25
    1d16:	f0 0d       	add	r31, r0
    1d18:	18 9f       	mul	r17, r24
    1d1a:	f0 0d       	add	r31, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	e6 0f       	add	r30, r22
    1d20:	f7 1f       	adc	r31, r23
    1d22:	ee 5b       	subi	r30, 0xBE	; 190
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	20 83       	st	Z, r18
    1d28:	31 83       	std	Z+1, r19	; 0x01
    1d2a:	42 83       	std	Z+2, r20	; 0x02
    1d2c:	53 83       	std	Z+3, r21	; 0x03
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    1d2e:	b2 91       	ld	r27, -Z
    1d30:	a2 91       	ld	r26, -Z
    1d32:	92 91       	ld	r25, -Z
    1d34:	82 91       	ld	r24, -Z

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1d36:	38 96       	adiw	r30, 0x08	; 8
    1d38:	82 1b       	sub	r24, r18
    1d3a:	93 0b       	sbc	r25, r19
    1d3c:	a4 0b       	sbc	r26, r20
    1d3e:	b5 0b       	sbc	r27, r21
    1d40:	b7 ff       	sbrs	r27, 7
    1d42:	04 c0       	rjmp	.+8      	; 0x1d4c <Timebase_UpCounter_Update+0x9c>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1d54:	85 e1       	ldi	r24, 0x15	; 21
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	08 9f       	mul	r16, r24
    1d5a:	e0 01       	movw	r28, r0
    1d5c:	09 9f       	mul	r16, r25
    1d5e:	d0 0d       	add	r29, r0
    1d60:	18 9f       	mul	r17, r24
    1d62:	d0 0d       	add	r29, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	c6 0f       	add	r28, r22
    1d68:	d7 1f       	adc	r29, r23
    1d6a:	fe 01       	movw	r30, r28
    1d6c:	ee 5b       	subi	r30, 0xBE	; 190
    1d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d70:	80 81       	ld	r24, Z
    1d72:	91 81       	ldd	r25, Z+1	; 0x01
    1d74:	a2 81       	ldd	r26, Z+2	; 0x02
    1d76:	b3 81       	ldd	r27, Z+3	; 0x03
    1d78:	18 16       	cp	r1, r24
    1d7a:	19 06       	cpc	r1, r25
    1d7c:	1a 06       	cpc	r1, r26
    1d7e:	1b 06       	cpc	r1, r27
    1d80:	0c f4       	brge	.+2      	; 0x1d84 <Timebase_UpCounter_Update+0xd4>
    1d82:	57 c0       	rjmp	.+174    	; 0x1e32 <Timebase_UpCounter_Update+0x182>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1d84:	1a ae       	std	Y+58, r1	; 0x3a
    1d86:	1b ae       	std	Y+59, r1	; 0x3b
    1d88:	1c ae       	std	Y+60, r1	; 0x3c
    1d8a:	1d ae       	std	Y+61, r1	; 0x3d

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1d8c:	10 82       	st	Z, r1
    1d8e:	11 82       	std	Z+1, r1	; 0x01
    1d90:	12 82       	std	Z+2, r1	; 0x02
    1d92:	13 82       	std	Z+3, r1	; 0x03
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    1d94:	fe 01       	movw	r30, r28
    1d96:	fe 96       	adiw	r30, 0x3e	; 62

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1d98:	ca 5b       	subi	r28, 0xBA	; 186
    1d9a:	df 4f       	sbci	r29, 0xFF	; 255
    1d9c:	20 81       	ld	r18, Z
    1d9e:	31 81       	ldd	r19, Z+1	; 0x01
    1da0:	42 81       	ldd	r20, Z+2	; 0x02
    1da2:	53 81       	ldd	r21, Z+3	; 0x03
    1da4:	c9 01       	movw	r24, r18
    1da6:	da 01       	movw	r26, r20
    1da8:	b7 ff       	sbrs	r27, 7
    1daa:	04 c0       	rjmp	.+8      	; 0x1db4 <Timebase_UpCounter_Update+0x104>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e0       	ldi	r26, 0x00	; 0
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	88 83       	st	Y, r24
    1db6:	99 83       	std	Y+1, r25	; 0x01
    1db8:	aa 83       	std	Y+2, r26	; 0x02
    1dba:	bb 83       	std	Y+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1dbc:	85 e1       	ldi	r24, 0x15	; 21
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	08 9f       	mul	r16, r24
    1dc2:	f0 01       	movw	r30, r0
    1dc4:	09 9f       	mul	r16, r25
    1dc6:	f0 0d       	add	r31, r0
    1dc8:	18 9f       	mul	r17, r24
    1dca:	f0 0d       	add	r31, r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	e6 0f       	add	r30, r22
    1dd0:	f7 1f       	adc	r31, r23
    1dd2:	81 ad       	ldd	r24, Z+57	; 0x39
    1dd4:	81 7e       	andi	r24, 0xE1	; 225
    1dd6:	88 60       	ori	r24, 0x08	; 8
    1dd8:	81 af       	std	Z+57, r24	; 0x39
    1dda:	2b c0       	rjmp	.+86     	; 0x1e32 <Timebase_UpCounter_Update+0x182>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1ddc:	82 30       	cpi	r24, 0x02	; 2
    1dde:	49 f5       	brne	.+82     	; 0x1e32 <Timebase_UpCounter_Update+0x182>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1de0:	eb 01       	movw	r28, r22
    1de2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de6:	ac 85       	ldd	r26, Y+12	; 0x0c
    1de8:	bd 85       	ldd	r27, Y+13	; 0x0d
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1dea:	ee 5b       	subi	r30, 0xBE	; 190
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	20 81       	ld	r18, Z
    1df0:	31 81       	ldd	r19, Z+1	; 0x01
    1df2:	42 81       	ldd	r20, Z+2	; 0x02
    1df4:	53 81       	ldd	r21, Z+3	; 0x03
    1df6:	e2 54       	subi	r30, 0x42	; 66
    1df8:	f0 40       	sbci	r31, 0x00	; 0
    1dfa:	82 0f       	add	r24, r18
    1dfc:	93 1f       	adc	r25, r19
    1dfe:	a4 1f       	adc	r26, r20
    1e00:	b5 1f       	adc	r27, r21
    1e02:	82 af       	std	Z+58, r24	; 0x3a
    1e04:	93 af       	std	Z+59, r25	; 0x3b
    1e06:	a4 af       	std	Z+60, r26	; 0x3c
    1e08:	b5 af       	std	Z+61, r27	; 0x3d
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    1e0a:	fe 96       	adiw	r30, 0x3e	; 62
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	a2 81       	ldd	r26, Z+2	; 0x02
    1e12:	b3 81       	ldd	r27, Z+3	; 0x03

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1e14:	38 96       	adiw	r30, 0x08	; 8
    1e16:	82 1b       	sub	r24, r18
    1e18:	93 0b       	sbc	r25, r19
    1e1a:	a4 0b       	sbc	r26, r20
    1e1c:	b5 0b       	sbc	r27, r21
    1e1e:	b7 ff       	sbrs	r27, 7
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <Timebase_UpCounter_Update+0x17a>
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	a0 e0       	ldi	r26, 0x00	; 0
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	80 83       	st	Z, r24
    1e2c:	91 83       	std	Z+1, r25	; 0x01
    1e2e:	a2 83       	std	Z+2, r26	; 0x02
    1e30:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	0f 91       	pop	r16
    1e3a:	08 95       	ret

00001e3c <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	e0 91 43 01 	lds	r30, 0x0143
    1e42:	f0 91 44 01 	lds	r31, 0x0144
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	25 e1       	ldi	r18, 0x15	; 21
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	62 9f       	mul	r22, r18
    1e50:	c0 01       	movw	r24, r0
    1e52:	63 9f       	mul	r22, r19
    1e54:	90 0d       	add	r25, r0
    1e56:	72 9f       	mul	r23, r18
    1e58:	90 0d       	add	r25, r0
    1e5a:	11 24       	eor	r1, r1
    1e5c:	e8 0f       	add	r30, r24
    1e5e:	f9 1f       	adc	r31, r25
    1e60:	81 ad       	ldd	r24, Z+57	; 0x39
    1e62:	86 95       	lsr	r24
    1e64:	8f 70       	andi	r24, 0x0F	; 15
    1e66:	84 30       	cpi	r24, 0x04	; 4
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <Timebase_UpCounter_Expired+0x30>
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1e6c:	84 2f       	mov	r24, r20
    1e6e:	08 95       	ret

00001e70 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1e70:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1e72:	e0 91 43 01 	lds	r30, 0x0143
    1e76:	f0 91 44 01 	lds	r31, 0x0144
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	85 e1       	ldi	r24, 0x15	; 21
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	bc 01       	movw	r22, r24
    1e84:	26 9f       	mul	r18, r22
    1e86:	c0 01       	movw	r24, r0
    1e88:	27 9f       	mul	r18, r23
    1e8a:	90 0d       	add	r25, r0
    1e8c:	36 9f       	mul	r19, r22
    1e8e:	90 0d       	add	r25, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	e8 0f       	add	r30, r24
    1e94:	f9 1f       	adc	r31, r25
    1e96:	81 ad       	ldd	r24, Z+57	; 0x39
    1e98:	86 95       	lsr	r24
    1e9a:	8f 70       	andi	r24, 0x0F	; 15
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	11 f0       	breq	.+4      	; 0x1ea4 <Timebase_UpCounter_Expired_Event+0x34>
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1ea4:	84 2f       	mov	r24, r20
    1ea6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Timebase_UpCounter_Reset>
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1eac:	08 95       	ret

00001eae <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1eb2:	c0 91 43 01 	lds	r28, 0x0143
    1eb6:	d0 91 44 01 	lds	r29, 0x0144
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1ebc:	25 e1       	ldi	r18, 0x15	; 21
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	e2 9f       	mul	r30, r18
    1ec4:	c0 01       	movw	r24, r0
    1ec6:	e3 9f       	mul	r30, r19
    1ec8:	90 0d       	add	r25, r0
    1eca:	f2 9f       	mul	r31, r18
    1ecc:	90 0d       	add	r25, r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	c8 0f       	add	r28, r24
    1ed2:	d9 1f       	adc	r29, r25
    1ed4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ed6:	80 fd       	sbrc	r24, 0
    1ed8:	16 c0       	rjmp	.+44     	; 0x1f06 <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1eda:	fe 01       	movw	r30, r28
    1edc:	e6 5b       	subi	r30, 0xB6	; 182
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	ca 5b       	subi	r28, 0xBA	; 186
    1ee2:	df 4f       	sbci	r29, 0xFF	; 255
    1ee4:	88 81       	ld	r24, Y
    1ee6:	99 81       	ldd	r25, Y+1	; 0x01
    1ee8:	aa 81       	ldd	r26, Y+2	; 0x02
    1eea:	bb 81       	ldd	r27, Y+3	; 0x03
    1eec:	c6 54       	subi	r28, 0x46	; 70
    1eee:	d0 40       	sbci	r29, 0x00	; 0
    1ef0:	84 0f       	add	r24, r20
    1ef2:	95 1f       	adc	r25, r21
    1ef4:	a6 1f       	adc	r26, r22
    1ef6:	b7 1f       	adc	r27, r23
    1ef8:	80 83       	st	Z, r24
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	a2 83       	std	Z+2, r26	; 0x02
    1efe:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1f00:	89 ad       	ldd	r24, Y+57	; 0x39
    1f02:	81 60       	ori	r24, 0x01	; 1
    1f04:	89 af       	std	Y+57, r24	; 0x39
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	08 95       	ret

00001f0c <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1f0c:	e0 91 43 01 	lds	r30, 0x0143
    1f10:	f0 91 44 01 	lds	r31, 0x0144
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1f16:	25 e1       	ldi	r18, 0x15	; 21
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	ac 01       	movw	r20, r24
    1f1c:	42 9f       	mul	r20, r18
    1f1e:	c0 01       	movw	r24, r0
    1f20:	43 9f       	mul	r20, r19
    1f22:	90 0d       	add	r25, r0
    1f24:	52 9f       	mul	r21, r18
    1f26:	90 0d       	add	r25, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	e8 0f       	add	r30, r24
    1f2c:	f9 1f       	adc	r31, r25
    1f2e:	df 01       	movw	r26, r30
    1f30:	aa 5b       	subi	r26, 0xBA	; 186
    1f32:	bf 4f       	sbci	r27, 0xFF	; 255
    1f34:	e6 5b       	subi	r30, 0xB6	; 182
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	20 81       	ld	r18, Z
    1f3a:	31 81       	ldd	r19, Z+1	; 0x01
    1f3c:	42 81       	ldd	r20, Z+2	; 0x02
    1f3e:	53 81       	ldd	r21, Z+3	; 0x03
    1f40:	8d 91       	ld	r24, X+
    1f42:	9d 91       	ld	r25, X+
    1f44:	0d 90       	ld	r0, X+
    1f46:	bc 91       	ld	r27, X
    1f48:	a0 2d       	mov	r26, r0
    1f4a:	28 1b       	sub	r18, r24
    1f4c:	39 0b       	sbc	r19, r25
    1f4e:	4a 0b       	sbc	r20, r26
    1f50:	5b 0b       	sbc	r21, r27
    1f52:	57 ff       	sbrs	r21, 7
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1f5e:	b9 01       	movw	r22, r18
    1f60:	ca 01       	movw	r24, r20
    1f62:	08 95       	ret

00001f64 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1f68:	c0 91 43 01 	lds	r28, 0x0143
    1f6c:	d0 91 44 01 	lds	r29, 0x0144
    1f70:	68 2f       	mov	r22, r24
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1f74:	85 e1       	ldi	r24, 0x15	; 21
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	68 9f       	mul	r22, r24
    1f7a:	f0 01       	movw	r30, r0
    1f7c:	69 9f       	mul	r22, r25
    1f7e:	f0 0d       	add	r31, r0
    1f80:	78 9f       	mul	r23, r24
    1f82:	f0 0d       	add	r31, r0
    1f84:	11 24       	eor	r1, r1
    1f86:	ec 0f       	add	r30, r28
    1f88:	fd 1f       	adc	r31, r29
    1f8a:	df 01       	movw	r26, r30
    1f8c:	aa 5b       	subi	r26, 0xBA	; 186
    1f8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f90:	e6 5b       	subi	r30, 0xB6	; 182
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	20 81       	ld	r18, Z
    1f96:	31 81       	ldd	r19, Z+1	; 0x01
    1f98:	42 81       	ldd	r20, Z+2	; 0x02
    1f9a:	53 81       	ldd	r21, Z+3	; 0x03
    1f9c:	8d 91       	ld	r24, X+
    1f9e:	9d 91       	ld	r25, X+
    1fa0:	0d 90       	ld	r0, X+
    1fa2:	bc 91       	ld	r27, X
    1fa4:	a0 2d       	mov	r26, r0
    1fa6:	28 1b       	sub	r18, r24
    1fa8:	39 0b       	sbc	r19, r25
    1faa:	4a 0b       	sbc	r20, r26
    1fac:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1fae:	57 fd       	sbrc	r21, 7
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <Timebase_UpCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1fb2:	21 15       	cp	r18, r1
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	41 05       	cpc	r20, r1
    1fb8:	51 05       	cpc	r21, r1
    1fba:	11 f0       	breq	.+4      	; 0x1fc0 <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	12 c0       	rjmp	.+36     	; 0x1fe4 <Timebase_UpCounter_Period_Value_Expired+0x80>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	85 e1       	ldi	r24, 0x15	; 21
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	64 9f       	mul	r22, r20
    1fca:	c0 01       	movw	r24, r0
    1fcc:	65 9f       	mul	r22, r21
    1fce:	90 0d       	add	r25, r0
    1fd0:	74 9f       	mul	r23, r20
    1fd2:	90 0d       	add	r25, r0
    1fd4:	11 24       	eor	r1, r1
    1fd6:	c8 0f       	add	r28, r24
    1fd8:	d9 1f       	adc	r29, r25
    1fda:	89 ad       	ldd	r24, Y+57	; 0x39
    1fdc:	80 ff       	sbrs	r24, 0
    1fde:	21 e0       	ldi	r18, 0x01	; 1
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1fe4:	82 2f       	mov	r24, r18
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
    1fea:	08 95       	ret

00001fec <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1fec:	1f 93       	push	r17
    1fee:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1ff0:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <Timebase_UpCounter_Period_Value_Expired>
    1ff4:	81 30       	cpi	r24, 0x01	; 1
    1ff6:	11 f0       	breq	.+4      	; 0x1ffc <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	16 c0       	rjmp	.+44     	; 0x2028 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ffc:	e0 91 43 01 	lds	r30, 0x0143
    2000:	f0 91 44 01 	lds	r31, 0x0144
    2004:	21 2f       	mov	r18, r17
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	85 e1       	ldi	r24, 0x15	; 21
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	ac 01       	movw	r20, r24
    200e:	24 9f       	mul	r18, r20
    2010:	c0 01       	movw	r24, r0
    2012:	25 9f       	mul	r18, r21
    2014:	90 0d       	add	r25, r0
    2016:	34 9f       	mul	r19, r20
    2018:	90 0d       	add	r25, r0
    201a:	11 24       	eor	r1, r1
    201c:	e8 0f       	add	r30, r24
    201e:	f9 1f       	adc	r31, r25
    2020:	81 ad       	ldd	r24, Z+57	; 0x39
    2022:	8e 7f       	andi	r24, 0xFE	; 254
    2024:	81 af       	std	Z+57, r24	; 0x39
    2026:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2028:	1f 91       	pop	r17
    202a:	08 95       	ret

0000202c <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <Timebase_UpCounter_Update>
  }
}
    2032:	08 95       	ret

00002034 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Timebase_UpCounter_Reset>
  }
}
    203a:	08 95       	ret

0000203c <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    203c:	e0 91 43 01 	lds	r30, 0x0143
    2040:	f0 91 44 01 	lds	r31, 0x0144
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c 01       	movw	r18, r24
    2048:	44 e0       	ldi	r20, 0x04	; 4
    204a:	22 0f       	add	r18, r18
    204c:	33 1f       	adc	r19, r19
    204e:	4a 95       	dec	r20
    2050:	e1 f7       	brne	.-8      	; 0x204a <Timebase_DownCounter_SS_Get_Status+0xe>
    2052:	28 0f       	add	r18, r24
    2054:	39 1f       	adc	r19, r25
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	e2 5b       	subi	r30, 0xB2	; 178
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    2062:	8f 70       	andi	r24, 0x0F	; 15
    2064:	08 95       	ret

00002066 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2066:	e0 91 43 01 	lds	r30, 0x0143
    206a:	f0 91 44 01 	lds	r31, 0x0144
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9c 01       	movw	r18, r24
    2072:	54 e0       	ldi	r21, 0x04	; 4
    2074:	22 0f       	add	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	5a 95       	dec	r21
    207a:	e1 f7       	brne	.-8      	; 0x2074 <Timebase_DownCounter_SS_Set_Status+0xe>
    207c:	28 0f       	add	r18, r24
    207e:	39 1f       	adc	r19, r25
    2080:	e2 0f       	add	r30, r18
    2082:	f3 1f       	adc	r31, r19
    2084:	e2 5b       	subi	r30, 0xB2	; 178
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	6f 70       	andi	r22, 0x0F	; 15
    208a:	66 0f       	add	r22, r22
    208c:	80 81       	ld	r24, Z
    208e:	81 7e       	andi	r24, 0xE1	; 225
    2090:	86 2b       	or	r24, r22
    2092:	80 83       	st	Z, r24
}
    2094:	08 95       	ret

00002096 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    2096:	e0 91 43 01 	lds	r30, 0x0143
    209a:	f0 91 44 01 	lds	r31, 0x0144
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9c 01       	movw	r18, r24
    20a2:	64 e0       	ldi	r22, 0x04	; 4
    20a4:	22 0f       	add	r18, r18
    20a6:	33 1f       	adc	r19, r19
    20a8:	6a 95       	dec	r22
    20aa:	e1 f7       	brne	.-8      	; 0x20a4 <Timebase_DownCounter_SS_Get_Value+0xe>
    20ac:	28 0f       	add	r18, r24
    20ae:	39 1f       	adc	r19, r25
    20b0:	e2 0f       	add	r30, r18
    20b2:	f3 1f       	adc	r31, r19
    20b4:	e9 5a       	subi	r30, 0xA9	; 169
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	08 95       	ret

000020c2 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    20c2:	e0 91 43 01 	lds	r30, 0x0143
    20c6:	f0 91 44 01 	lds	r31, 0x0144
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 01       	movw	r18, r24
    20ce:	a4 e0       	ldi	r26, 0x04	; 4
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	aa 95       	dec	r26
    20d6:	e1 f7       	brne	.-8      	; 0x20d0 <Timebase_DownCounter_SS_Set_Value+0xe>
    20d8:	28 0f       	add	r18, r24
    20da:	39 1f       	adc	r19, r25
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	e9 5a       	subi	r30, 0xA9	; 169
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	40 83       	st	Z, r20
    20e6:	51 83       	std	Z+1, r21	; 0x01
    20e8:	62 83       	std	Z+2, r22	; 0x02
    20ea:	73 83       	std	Z+3, r23	; 0x03
}
    20ec:	08 95       	ret

000020ee <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    20ee:	e0 91 43 01 	lds	r30, 0x0143
    20f2:	f0 91 44 01 	lds	r31, 0x0144
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	9c 01       	movw	r18, r24
    20fa:	b4 e0       	ldi	r27, 0x04	; 4
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	ba 95       	dec	r27
    2102:	e1 f7       	brne	.-8      	; 0x20fc <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    2104:	28 0f       	add	r18, r24
    2106:	39 1f       	adc	r19, r25
    2108:	e2 0f       	add	r30, r18
    210a:	f3 1f       	adc	r31, r19
    210c:	e1 5b       	subi	r30, 0xB1	; 177
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	08 95       	ret

0000211a <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    211a:	e0 91 43 01 	lds	r30, 0x0143
    211e:	f0 91 44 01 	lds	r31, 0x0144
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9c 01       	movw	r18, r24
    2126:	44 e0       	ldi	r20, 0x04	; 4
    2128:	22 0f       	add	r18, r18
    212a:	33 1f       	adc	r19, r19
    212c:	4a 95       	dec	r20
    212e:	e1 f7       	brne	.-8      	; 0x2128 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    2130:	28 0f       	add	r18, r24
    2132:	39 1f       	adc	r19, r25
    2134:	e2 0f       	add	r30, r18
    2136:	f3 1f       	adc	r31, r19
    2138:	ed 5a       	subi	r30, 0xAD	; 173
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	08 95       	ret

00002146 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2146:	e0 91 43 01 	lds	r30, 0x0143
    214a:	f0 91 44 01 	lds	r31, 0x0144
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	9c 01       	movw	r18, r24
    2152:	a4 e0       	ldi	r26, 0x04	; 4
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	aa 95       	dec	r26
    215a:	e1 f7       	brne	.-8      	; 0x2154 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    215c:	28 0f       	add	r18, r24
    215e:	39 1f       	adc	r19, r25
    2160:	e2 0f       	add	r30, r18
    2162:	f3 1f       	adc	r31, r19
    2164:	e1 5b       	subi	r30, 0xB1	; 177
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	40 83       	st	Z, r20
    216a:	51 83       	std	Z+1, r21	; 0x01
    216c:	62 83       	std	Z+2, r22	; 0x02
    216e:	73 83       	std	Z+3, r23	; 0x03
}
    2170:	08 95       	ret

00002172 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2172:	e0 91 43 01 	lds	r30, 0x0143
    2176:	f0 91 44 01 	lds	r31, 0x0144
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9c 01       	movw	r18, r24
    217e:	b4 e0       	ldi	r27, 0x04	; 4
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	ba 95       	dec	r27
    2186:	e1 f7       	brne	.-8      	; 0x2180 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    2188:	28 0f       	add	r18, r24
    218a:	39 1f       	adc	r19, r25
    218c:	e2 0f       	add	r30, r18
    218e:	f3 1f       	adc	r31, r19
    2190:	ed 5a       	subi	r30, 0xAD	; 173
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	40 83       	st	Z, r20
    2196:	51 83       	std	Z+1, r21	; 0x01
    2198:	62 83       	std	Z+2, r22	; 0x02
    219a:	73 83       	std	Z+3, r23	; 0x03
}
    219c:	08 95       	ret

0000219e <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    219e:	e0 91 43 01 	lds	r30, 0x0143
    21a2:	f0 91 44 01 	lds	r31, 0x0144
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 01       	movw	r18, r24
    21aa:	44 e0       	ldi	r20, 0x04	; 4
    21ac:	22 0f       	add	r18, r18
    21ae:	33 1f       	adc	r19, r19
    21b0:	4a 95       	dec	r20
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    21b4:	28 0f       	add	r18, r24
    21b6:	39 1f       	adc	r19, r25
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	e5 5a       	subi	r30, 0xA5	; 165
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	08 95       	ret

000021ca <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    21ca:	e0 91 43 01 	lds	r30, 0x0143
    21ce:	f0 91 44 01 	lds	r31, 0x0144
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    21d6:	77 ff       	sbrs	r23, 7
    21d8:	11 c0       	rjmp	.+34     	; 0x21fc <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    21da:	c9 01       	movw	r24, r18
    21dc:	b4 e0       	ldi	r27, 0x04	; 4
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	ba 95       	dec	r27
    21e4:	e1 f7       	brne	.-8      	; 0x21de <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    21e6:	82 0f       	add	r24, r18
    21e8:	93 1f       	adc	r25, r19
    21ea:	e8 0f       	add	r30, r24
    21ec:	f9 1f       	adc	r31, r25
    21ee:	e5 5a       	subi	r30, 0xA5	; 165
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	10 82       	st	Z, r1
    21f4:	11 82       	std	Z+1, r1	; 0x01
    21f6:	12 82       	std	Z+2, r1	; 0x02
    21f8:	13 82       	std	Z+3, r1	; 0x03
    21fa:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    21fc:	c9 01       	movw	r24, r18
    21fe:	a4 e0       	ldi	r26, 0x04	; 4
    2200:	88 0f       	add	r24, r24
    2202:	99 1f       	adc	r25, r25
    2204:	aa 95       	dec	r26
    2206:	e1 f7       	brne	.-8      	; 0x2200 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    2208:	82 0f       	add	r24, r18
    220a:	93 1f       	adc	r25, r19
    220c:	e8 0f       	add	r30, r24
    220e:	f9 1f       	adc	r31, r25
    2210:	e5 5a       	subi	r30, 0xA5	; 165
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	40 83       	st	Z, r20
    2216:	51 83       	std	Z+1, r21	; 0x01
    2218:	62 83       	std	Z+2, r22	; 0x02
    221a:	73 83       	std	Z+3, r23	; 0x03
    221c:	08 95       	ret

0000221e <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    221e:	e0 91 43 01 	lds	r30, 0x0143
    2222:	f0 91 44 01 	lds	r31, 0x0144
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 01       	movw	r18, r24
    222a:	44 e0       	ldi	r20, 0x04	; 4
    222c:	22 0f       	add	r18, r18
    222e:	33 1f       	adc	r19, r19
    2230:	4a 95       	dec	r20
    2232:	e1 f7       	brne	.-8      	; 0x222c <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    2234:	28 0f       	add	r18, r24
    2236:	39 1f       	adc	r19, r25
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	e2 5b       	subi	r30, 0xB2	; 178
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    2242:	81 70       	andi	r24, 0x01	; 1
    2244:	08 95       	ret

00002246 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    2246:	e0 91 43 01 	lds	r30, 0x0143
    224a:	f0 91 44 01 	lds	r31, 0x0144
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c 01       	movw	r18, r24
    2252:	54 e0       	ldi	r21, 0x04	; 4
    2254:	22 0f       	add	r18, r18
    2256:	33 1f       	adc	r19, r19
    2258:	5a 95       	dec	r21
    225a:	e1 f7       	brne	.-8      	; 0x2254 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    225c:	28 0f       	add	r18, r24
    225e:	39 1f       	adc	r19, r25
    2260:	e2 0f       	add	r30, r18
    2262:	f3 1f       	adc	r31, r19
    2264:	e2 5b       	subi	r30, 0xB2	; 178
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	81 60       	ori	r24, 0x01	; 1
    226c:	80 83       	st	Z, r24
}
    226e:	08 95       	ret

00002270 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2270:	e0 91 43 01 	lds	r30, 0x0143
    2274:	f0 91 44 01 	lds	r31, 0x0144
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	9c 01       	movw	r18, r24
    227c:	64 e0       	ldi	r22, 0x04	; 4
    227e:	22 0f       	add	r18, r18
    2280:	33 1f       	adc	r19, r19
    2282:	6a 95       	dec	r22
    2284:	e1 f7       	brne	.-8      	; 0x227e <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    2286:	28 0f       	add	r18, r24
    2288:	39 1f       	adc	r19, r25
    228a:	e2 0f       	add	r30, r18
    228c:	f3 1f       	adc	r31, r19
    228e:	e2 5b       	subi	r30, 0xB2	; 178
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 81       	ld	r24, Z
    2294:	8e 7f       	andi	r24, 0xFE	; 254
    2296:	80 83       	st	Z, r24
}
    2298:	08 95       	ret

0000229a <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    229a:	e0 91 43 01 	lds	r30, 0x0143
    229e:	f0 91 44 01 	lds	r31, 0x0144
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	9c 01       	movw	r18, r24
    22a6:	74 e0       	ldi	r23, 0x04	; 4
    22a8:	22 0f       	add	r18, r18
    22aa:	33 1f       	adc	r19, r19
    22ac:	7a 95       	dec	r23
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <Timebase_DownCounter_SS_Reset+0xe>
    22b0:	28 0f       	add	r18, r24
    22b2:	39 1f       	adc	r19, r25
    22b4:	e2 0f       	add	r30, r18
    22b6:	f3 1f       	adc	r31, r19
    22b8:	ed 5a       	subi	r30, 0xAD	; 173
    22ba:	ff 4f       	sbci	r31, 0xFF	; 255
    22bc:	10 82       	st	Z, r1
    22be:	11 82       	std	Z+1, r1	; 0x01
    22c0:	12 82       	std	Z+2, r1	; 0x02
    22c2:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    22c4:	12 92       	st	-Z, r1
    22c6:	12 92       	st	-Z, r1
    22c8:	12 92       	st	-Z, r1
    22ca:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    22cc:	38 96       	adiw	r30, 0x08	; 8
    22ce:	10 82       	st	Z, r1
    22d0:	11 82       	std	Z+1, r1	; 0x01
    22d2:	12 82       	std	Z+2, r1	; 0x02
    22d4:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    22d6:	39 97       	sbiw	r30, 0x09	; 9
    22d8:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    22da:	80 7e       	andi	r24, 0xE0	; 224
    22dc:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    22de:	08 95       	ret

000022e0 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    22e0:	e0 91 43 01 	lds	r30, 0x0143
    22e4:	f0 91 44 01 	lds	r31, 0x0144
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c 01       	movw	r18, r24
    22ec:	a4 e0       	ldi	r26, 0x04	; 4
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	aa 95       	dec	r26
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    22f6:	28 0f       	add	r18, r24
    22f8:	39 1f       	adc	r19, r25
    22fa:	e2 0f       	add	r30, r18
    22fc:	f3 1f       	adc	r31, r19
    22fe:	ed 5a       	subi	r30, 0xAD	; 173
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	10 82       	st	Z, r1
    2304:	11 82       	std	Z+1, r1	; 0x01
    2306:	12 82       	std	Z+2, r1	; 0x02
    2308:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    230a:	12 92       	st	-Z, r1
    230c:	12 92       	st	-Z, r1
    230e:	12 92       	st	-Z, r1
    2310:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2312:	38 96       	adiw	r30, 0x08	; 8
    2314:	10 82       	st	Z, r1
    2316:	11 82       	std	Z+1, r1	; 0x01
    2318:	12 82       	std	Z+2, r1	; 0x02
    231a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    231c:	39 97       	sbiw	r30, 0x09	; 9
    231e:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2320:	80 7e       	andi	r24, 0xE0	; 224
    2322:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    2324:	08 95       	ret

00002326 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2326:	e0 91 43 01 	lds	r30, 0x0143
    232a:	f0 91 44 01 	lds	r31, 0x0144
    232e:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    2330:	9c 01       	movw	r18, r24
    2332:	b4 e0       	ldi	r27, 0x04	; 4
    2334:	22 0f       	add	r18, r18
    2336:	33 1f       	adc	r19, r19
    2338:	ba 95       	dec	r27
    233a:	e1 f7       	brne	.-8      	; 0x2334 <Timebase_DownCounter_SS_Start+0xe>
    233c:	28 0f       	add	r18, r24
    233e:	39 1f       	adc	r19, r25
    2340:	e2 0f       	add	r30, r18
    2342:	f3 1f       	adc	r31, r19
    2344:	e2 5b       	subi	r30, 0xB2	; 178
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	90 81       	ld	r25, Z
    234a:	89 2f       	mov	r24, r25
    234c:	86 95       	lsr	r24
    234e:	8f 70       	andi	r24, 0x0F	; 15
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	19 f0       	breq	.+6      	; 0x235a <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2354:	91 7e       	andi	r25, 0xE1	; 225
    2356:	92 60       	ori	r25, 0x02	; 2
    2358:	90 83       	st	Z, r25
    235a:	08 95       	ret

0000235c <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    235c:	e0 91 43 01 	lds	r30, 0x0143
    2360:	f0 91 44 01 	lds	r31, 0x0144
    2364:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    2366:	9c 01       	movw	r18, r24
    2368:	44 e0       	ldi	r20, 0x04	; 4
    236a:	22 0f       	add	r18, r18
    236c:	33 1f       	adc	r19, r19
    236e:	4a 95       	dec	r20
    2370:	e1 f7       	brne	.-8      	; 0x236a <Timebase_DownCounter_SS_Stop+0xe>
    2372:	28 0f       	add	r18, r24
    2374:	39 1f       	adc	r19, r25
    2376:	e2 0f       	add	r30, r18
    2378:	f3 1f       	adc	r31, r19
    237a:	e2 5b       	subi	r30, 0xB2	; 178
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	90 81       	ld	r25, Z
    2380:	89 2f       	mov	r24, r25
    2382:	86 95       	lsr	r24
    2384:	8f 70       	andi	r24, 0x0F	; 15
    2386:	82 30       	cpi	r24, 0x02	; 2
    2388:	19 f0       	breq	.+6      	; 0x2390 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    238a:	91 7e       	andi	r25, 0xE1	; 225
    238c:	94 60       	ori	r25, 0x04	; 4
    238e:	90 83       	st	Z, r25
    2390:	08 95       	ret

00002392 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    2392:	2f 92       	push	r2
    2394:	3f 92       	push	r3
    2396:	4f 92       	push	r4
    2398:	5f 92       	push	r5
    239a:	6f 92       	push	r6
    239c:	7f 92       	push	r7
    239e:	8f 92       	push	r8
    23a0:	9f 92       	push	r9
    23a2:	af 92       	push	r10
    23a4:	bf 92       	push	r11
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	df 93       	push	r29
    23b4:	cf 93       	push	r28
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <Timebase_DownCounter_SS_Set_Securely+0x26>
    23b8:	00 d0       	rcall	.+0      	; 0x23ba <Timebase_DownCounter_SS_Set_Securely+0x28>
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
    23be:	4a 01       	movw	r8, r20
    23c0:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    23c2:	20 91 43 01 	lds	r18, 0x0143
    23c6:	30 91 44 01 	lds	r19, 0x0144
    23ca:	3c 83       	std	Y+4, r19	; 0x04
    23cc:	2b 83       	std	Y+3, r18	; 0x03
    23ce:	a8 2f       	mov	r26, r24
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ba 83       	std	Y+2, r27	; 0x02
    23d4:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    23d6:	fd 01       	movw	r30, r26
    23d8:	64 e0       	ldi	r22, 0x04	; 4
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	6a 95       	dec	r22
    23e0:	e1 f7       	brne	.-8      	; 0x23da <Timebase_DownCounter_SS_Set_Securely+0x48>
    23e2:	ea 0f       	add	r30, r26
    23e4:	fb 1f       	adc	r31, r27
    23e6:	e2 0f       	add	r30, r18
    23e8:	f3 1f       	adc	r31, r19
    23ea:	e2 5b       	subi	r30, 0xB2	; 178
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	80 81       	ld	r24, Z
    23f0:	ee 54       	subi	r30, 0x4E	; 78
    23f2:	f0 40       	sbci	r31, 0x00	; 0
    23f4:	86 95       	lsr	r24
    23f6:	8f 70       	andi	r24, 0x0F	; 15
    23f8:	09 f0       	breq	.+2      	; 0x23fc <Timebase_DownCounter_SS_Set_Securely+0x6a>
    23fa:	72 c0       	rjmp	.+228    	; 0x24e0 <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    23fc:	e9 5a       	subi	r30, 0xA9	; 169
    23fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2400:	80 82       	st	Z, r8
    2402:	91 82       	std	Z+1, r9	; 0x01
    2404:	a2 82       	std	Z+2, r10	; 0x02
    2406:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2408:	f9 01       	movw	r30, r18
    240a:	c0 84       	ldd	r12, Z+8	; 0x08
    240c:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    240e:	22 84       	ldd	r2, Z+10	; 0x0a
    2410:	33 84       	ldd	r3, Z+11	; 0x0b
    2412:	44 84       	ldd	r4, Z+12	; 0x0c
    2414:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    2416:	21 81       	ldd	r18, Z+1	; 0x01
    2418:	32 81       	ldd	r19, Z+2	; 0x02
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	c5 01       	movw	r24, r10
    2420:	b4 01       	movw	r22, r8
    2422:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    2426:	7b 01       	movw	r14, r22
    2428:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    242a:	ab 81       	ldd	r26, Y+3	; 0x03
    242c:	bc 81       	ldd	r27, Y+4	; 0x04
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	2d 91       	ld	r18, X+
    2432:	3c 91       	ld	r19, X
    2434:	12 97       	sbiw	r26, 0x02	; 2
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	c5 01       	movw	r24, r10
    243c:	b4 01       	movw	r22, r8
    243e:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    2442:	c9 01       	movw	r24, r18
    2444:	da 01       	movw	r26, r20
    2446:	3c 01       	movw	r6, r24
    2448:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    244a:	56 01       	movw	r10, r12
    244c:	cc 24       	eor	r12, r12
    244e:	dd 24       	eor	r13, r13
    2450:	ae 0c       	add	r10, r14
    2452:	bf 1c       	adc	r11, r15
    2454:	c0 1e       	adc	r12, r16
    2456:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    2458:	eb 81       	ldd	r30, Y+3	; 0x03
    245a:	fc 81       	ldd	r31, Y+4	; 0x04
    245c:	81 81       	ldd	r24, Z+1	; 0x01
    245e:	92 81       	ldd	r25, Z+2	; 0x02
    2460:	a0 e0       	ldi	r26, 0x00	; 0
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	a8 16       	cp	r10, r24
    2466:	b9 06       	cpc	r11, r25
    2468:	ca 06       	cpc	r12, r26
    246a:	db 06       	cpc	r13, r27
    246c:	94 f0       	brlt	.+36     	; 0x2492 <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    246e:	08 94       	sec
    2470:	61 1c       	adc	r6, r1
    2472:	71 1c       	adc	r7, r1
    2474:	81 1c       	adc	r8, r1
    2476:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    2478:	21 81       	ldd	r18, Z+1	; 0x01
    247a:	32 81       	ldd	r19, Z+2	; 0x02
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	50 e0       	ldi	r21, 0x00	; 0
    2480:	c6 01       	movw	r24, r12
    2482:	b5 01       	movw	r22, r10
    2484:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    2488:	ac 01       	movw	r20, r24
    248a:	cb 01       	movw	r24, r22
    248c:	da 01       	movw	r26, r20
    248e:	5c 01       	movw	r10, r24
    2490:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2492:	e9 81       	ldd	r30, Y+1	; 0x01
    2494:	fa 81       	ldd	r31, Y+2	; 0x02
    2496:	54 e0       	ldi	r21, 0x04	; 4
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	5a 95       	dec	r21
    249e:	e1 f7       	brne	.-8      	; 0x2498 <Timebase_DownCounter_SS_Set_Securely+0x106>
    24a0:	29 81       	ldd	r18, Y+1	; 0x01
    24a2:	3a 81       	ldd	r19, Y+2	; 0x02
    24a4:	e2 0f       	add	r30, r18
    24a6:	f3 1f       	adc	r31, r19
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	e8 0f       	add	r30, r24
    24ae:	f9 1f       	adc	r31, r25
    24b0:	e1 5b       	subi	r30, 0xB1	; 177
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	26 0c       	add	r2, r6
    24b6:	37 1c       	adc	r3, r7
    24b8:	48 1c       	adc	r4, r8
    24ba:	59 1c       	adc	r5, r9
    24bc:	21 92       	st	Z+, r2
    24be:	31 92       	st	Z+, r3
    24c0:	41 92       	st	Z+, r4
    24c2:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    24c4:	a0 82       	st	Z, r10
    24c6:	b1 82       	std	Z+1, r11	; 0x01
    24c8:	c2 82       	std	Z+2, r12	; 0x02
    24ca:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    24cc:	35 97       	sbiw	r30, 0x05	; 5
    24ce:	90 81       	ld	r25, Z
    24d0:	89 2f       	mov	r24, r25
    24d2:	86 95       	lsr	r24
    24d4:	8f 70       	andi	r24, 0x0F	; 15
    24d6:	81 30       	cpi	r24, 0x01	; 1
    24d8:	19 f0       	breq	.+6      	; 0x24e0 <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    24da:	91 7e       	andi	r25, 0xE1	; 225
    24dc:	92 60       	ori	r25, 0x02	; 2
    24de:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	1f 91       	pop	r17
    24ee:	0f 91       	pop	r16
    24f0:	ff 90       	pop	r15
    24f2:	ef 90       	pop	r14
    24f4:	df 90       	pop	r13
    24f6:	cf 90       	pop	r12
    24f8:	bf 90       	pop	r11
    24fa:	af 90       	pop	r10
    24fc:	9f 90       	pop	r9
    24fe:	8f 90       	pop	r8
    2500:	7f 90       	pop	r7
    2502:	6f 90       	pop	r6
    2504:	5f 90       	pop	r5
    2506:	4f 90       	pop	r4
    2508:	3f 90       	pop	r3
    250a:	2f 90       	pop	r2
    250c:	08 95       	ret

0000250e <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    250e:	e0 91 43 01 	lds	r30, 0x0143
    2512:	f0 91 44 01 	lds	r31, 0x0144
    2516:	a8 2f       	mov	r26, r24
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	9d 01       	movw	r18, r26
    251c:	94 e0       	ldi	r25, 0x04	; 4
    251e:	22 0f       	add	r18, r18
    2520:	33 1f       	adc	r19, r19
    2522:	9a 95       	dec	r25
    2524:	e1 f7       	brne	.-8      	; 0x251e <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    2526:	2a 0f       	add	r18, r26
    2528:	3b 1f       	adc	r19, r27
    252a:	e2 0f       	add	r30, r18
    252c:	f3 1f       	adc	r31, r19
    252e:	ed 5a       	subi	r30, 0xAD	; 173
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	10 82       	st	Z, r1
    2534:	11 82       	std	Z+1, r1	; 0x01
    2536:	12 82       	std	Z+2, r1	; 0x02
    2538:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    253a:	12 92       	st	-Z, r1
    253c:	12 92       	st	-Z, r1
    253e:	12 92       	st	-Z, r1
    2540:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2542:	38 96       	adiw	r30, 0x08	; 8
    2544:	10 82       	st	Z, r1
    2546:	11 82       	std	Z+1, r1	; 0x01
    2548:	12 82       	std	Z+2, r1	; 0x02
    254a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    254c:	39 97       	sbiw	r30, 0x09	; 9
    254e:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2550:	90 7e       	andi	r25, 0xE0	; 224
    2552:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2554:	0e 94 c9 11 	call	0x2392	; 0x2392 <Timebase_DownCounter_SS_Set_Securely>
} 
    2558:	08 95       	ret

0000255a <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    255a:	2f 92       	push	r2
    255c:	3f 92       	push	r3
    255e:	4f 92       	push	r4
    2560:	5f 92       	push	r5
    2562:	6f 92       	push	r6
    2564:	7f 92       	push	r7
    2566:	8f 92       	push	r8
    2568:	9f 92       	push	r9
    256a:	af 92       	push	r10
    256c:	bf 92       	push	r11
    256e:	cf 92       	push	r12
    2570:	df 92       	push	r13
    2572:	ef 92       	push	r14
    2574:	ff 92       	push	r15
    2576:	0f 93       	push	r16
    2578:	1f 93       	push	r17
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    257e:	c0 90 43 01 	lds	r12, 0x0143
    2582:	d0 90 44 01 	lds	r13, 0x0144
    2586:	08 2f       	mov	r16, r24
    2588:	10 e0       	ldi	r17, 0x00	; 0
    258a:	e8 01       	movw	r28, r16
    258c:	34 e0       	ldi	r19, 0x04	; 4
    258e:	cc 0f       	add	r28, r28
    2590:	dd 1f       	adc	r29, r29
    2592:	3a 95       	dec	r19
    2594:	e1 f7       	brne	.-8      	; 0x258e <Timebase_DownCounter_SS_Update+0x34>
    2596:	c0 0f       	add	r28, r16
    2598:	d1 1f       	adc	r29, r17
    259a:	cc 0d       	add	r28, r12
    259c:	dd 1d       	adc	r29, r13
    259e:	c2 5b       	subi	r28, 0xB2	; 178
    25a0:	df 4f       	sbci	r29, 0xFF	; 255
    25a2:	88 81       	ld	r24, Y
    25a4:	ce 54       	subi	r28, 0x4E	; 78
    25a6:	d0 40       	sbci	r29, 0x00	; 0
    25a8:	86 95       	lsr	r24
    25aa:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    25ac:	81 30       	cpi	r24, 0x01	; 1
    25ae:	09 f0       	breq	.+2      	; 0x25b2 <Timebase_DownCounter_SS_Update+0x58>
    25b0:	5d c0       	rjmp	.+186    	; 0x266c <Timebase_DownCounter_SS_Update+0x112>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    25b2:	f6 01       	movw	r30, r12
    25b4:	80 85       	ldd	r24, Z+8	; 0x08
    25b6:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    25b8:	4c 01       	movw	r8, r24
    25ba:	aa 24       	eor	r10, r10
    25bc:	bb 24       	eor	r11, r11
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    25be:	82 85       	ldd	r24, Z+10	; 0x0a
    25c0:	93 85       	ldd	r25, Z+11	; 0x0b
    25c2:	a4 85       	ldd	r26, Z+12	; 0x0c
    25c4:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    25c6:	c1 5b       	subi	r28, 0xB1	; 177
    25c8:	df 4f       	sbci	r29, 0xFF	; 255
    25ca:	28 80       	ld	r2, Y
    25cc:	39 80       	ldd	r3, Y+1	; 0x01
    25ce:	4a 80       	ldd	r4, Y+2	; 0x02
    25d0:	5b 80       	ldd	r5, Y+3	; 0x03
    25d2:	28 1a       	sub	r2, r24
    25d4:	39 0a       	sbc	r3, r25
    25d6:	4a 0a       	sbc	r4, r26
    25d8:	5b 0a       	sbc	r5, r27
    25da:	57 fe       	sbrs	r5, 7
    25dc:	03 c0       	rjmp	.+6      	; 0x25e4 <Timebase_DownCounter_SS_Update+0x8a>
    25de:	22 24       	eor	r2, r2
    25e0:	33 24       	eor	r3, r3
    25e2:	21 01       	movw	r4, r2
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    25e4:	f6 01       	movw	r30, r12
    25e6:	21 81       	ldd	r18, Z+1	; 0x01
    25e8:	32 81       	ldd	r19, Z+2	; 0x02
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	50 e0       	ldi	r21, 0x00	; 0
    25ee:	c2 01       	movw	r24, r4
    25f0:	b1 01       	movw	r22, r2
    25f2:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <__mulsi3>
	temp_s += temp_ss;
    25f6:	f8 01       	movw	r30, r16
    25f8:	24 e0       	ldi	r18, 0x04	; 4
    25fa:	ee 0f       	add	r30, r30
    25fc:	ff 1f       	adc	r31, r31
    25fe:	2a 95       	dec	r18
    2600:	e1 f7       	brne	.-8      	; 0x25fa <Timebase_DownCounter_SS_Update+0xa0>
    2602:	e0 0f       	add	r30, r16
    2604:	f1 1f       	adc	r31, r17
    2606:	ec 0d       	add	r30, r12
    2608:	fd 1d       	adc	r31, r13
    260a:	ef 01       	movw	r28, r30
    260c:	cd 5a       	subi	r28, 0xAD	; 173
    260e:	df 4f       	sbci	r29, 0xFF	; 255
    2610:	28 81       	ld	r18, Y
    2612:	39 81       	ldd	r19, Y+1	; 0x01
    2614:	4a 81       	ldd	r20, Y+2	; 0x02
    2616:	5b 81       	ldd	r21, Y+3	; 0x03
    2618:	28 19       	sub	r18, r8
    261a:	39 09       	sbc	r19, r9
    261c:	4a 09       	sbc	r20, r10
    261e:	5b 09       	sbc	r21, r11
    2620:	26 0f       	add	r18, r22
    2622:	37 1f       	adc	r19, r23
    2624:	48 1f       	adc	r20, r24
    2626:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2628:	df 01       	movw	r26, r30
    262a:	a9 5a       	subi	r26, 0xA9	; 169
    262c:	bf 4f       	sbci	r27, 0xFF	; 255
    262e:	2d 93       	st	X+, r18
    2630:	3d 93       	st	X+, r19
    2632:	4d 93       	st	X+, r20
    2634:	5c 93       	st	X, r21
    2636:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    2638:	12 16       	cp	r1, r18
    263a:	13 06       	cpc	r1, r19
    263c:	14 06       	cpc	r1, r20
    263e:	15 06       	cpc	r1, r21
    2640:	0c f4       	brge	.+2      	; 0x2644 <Timebase_DownCounter_SS_Update+0xea>
    2642:	48 c0       	rjmp	.+144    	; 0x26d4 <Timebase_DownCounter_SS_Update+0x17a>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2644:	18 82       	st	Y, r1
    2646:	19 82       	std	Y+1, r1	; 0x01
    2648:	1a 82       	std	Y+2, r1	; 0x02
    264a:	1b 82       	std	Y+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    264c:	e1 5b       	subi	r30, 0xB1	; 177
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	10 82       	st	Z, r1
    2652:	11 82       	std	Z+1, r1	; 0x01
    2654:	12 82       	std	Z+2, r1	; 0x02
    2656:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2658:	1d 92       	st	X+, r1
    265a:	1d 92       	st	X+, r1
    265c:	1d 92       	st	X+, r1
    265e:	1c 92       	st	X, r1
    2660:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2662:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2664:	80 7e       	andi	r24, 0xE0	; 224
    2666:	88 60       	ori	r24, 0x08	; 8
    2668:	80 83       	st	Z, r24
    266a:	34 c0       	rjmp	.+104    	; 0x26d4 <Timebase_DownCounter_SS_Update+0x17a>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    266c:	82 30       	cpi	r24, 0x02	; 2
    266e:	91 f5       	brne	.+100    	; 0x26d4 <Timebase_DownCounter_SS_Update+0x17a>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2670:	f6 01       	movw	r30, r12
    2672:	60 84       	ldd	r6, Z+8	; 0x08
    2674:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2676:	e2 84       	ldd	r14, Z+10	; 0x0a
    2678:	f3 84       	ldd	r15, Z+11	; 0x0b
    267a:	04 85       	ldd	r16, Z+12	; 0x0c
    267c:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    267e:	c9 5a       	subi	r28, 0xA9	; 169
    2680:	df 4f       	sbci	r29, 0xFF	; 255
    2682:	28 80       	ld	r2, Y
    2684:	39 80       	ldd	r3, Y+1	; 0x01
    2686:	4a 80       	ldd	r4, Y+2	; 0x02
    2688:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    268a:	21 81       	ldd	r18, Z+1	; 0x01
    268c:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    268e:	a1 80       	ldd	r10, Z+1	; 0x01
    2690:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2692:	28 97       	sbiw	r28, 0x08	; 8
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	c2 01       	movw	r24, r4
    269a:	b1 01       	movw	r22, r2
    269c:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    26a0:	e2 0e       	add	r14, r18
    26a2:	f3 1e       	adc	r15, r19
    26a4:	04 1f       	adc	r16, r20
    26a6:	15 1f       	adc	r17, r21
    26a8:	e9 92       	st	Y+, r14
    26aa:	f9 92       	st	Y+, r15
    26ac:	09 93       	st	Y+, r16
    26ae:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    26b0:	cc 24       	eor	r12, r12
    26b2:	dd 24       	eor	r13, r13
    26b4:	c2 01       	movw	r24, r4
    26b6:	b1 01       	movw	r22, r2
    26b8:	a6 01       	movw	r20, r12
    26ba:	95 01       	movw	r18, r10
    26bc:	0e 94 31 19 	call	0x3262	; 0x3262 <__divmodsi4>
    26c0:	88 24       	eor	r8, r8
    26c2:	99 24       	eor	r9, r9
    26c4:	66 0e       	add	r6, r22
    26c6:	77 1e       	adc	r7, r23
    26c8:	88 1e       	adc	r8, r24
    26ca:	99 1e       	adc	r9, r25
    26cc:	68 82       	st	Y, r6
    26ce:	79 82       	std	Y+1, r7	; 0x01
    26d0:	8a 82       	std	Y+2, r8	; 0x02
    26d2:	9b 82       	std	Y+3, r9	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	bf 90       	pop	r11
    26e6:	af 90       	pop	r10
    26e8:	9f 90       	pop	r9
    26ea:	8f 90       	pop	r8
    26ec:	7f 90       	pop	r7
    26ee:	6f 90       	pop	r6
    26f0:	5f 90       	pop	r5
    26f2:	4f 90       	pop	r4
    26f4:	3f 90       	pop	r3
    26f6:	2f 90       	pop	r2
    26f8:	08 95       	ret

000026fa <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	e0 91 43 01 	lds	r30, 0x0143
    2700:	f0 91 44 01 	lds	r31, 0x0144
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 01       	movw	r18, r24
    2708:	54 e0       	ldi	r21, 0x04	; 4
    270a:	22 0f       	add	r18, r18
    270c:	33 1f       	adc	r19, r19
    270e:	5a 95       	dec	r21
    2710:	e1 f7       	brne	.-8      	; 0x270a <Timebase_DownCounter_SS_Expired+0x10>
    2712:	28 0f       	add	r18, r24
    2714:	39 1f       	adc	r19, r25
    2716:	e2 0f       	add	r30, r18
    2718:	f3 1f       	adc	r31, r19
    271a:	e2 5b       	subi	r30, 0xB2	; 178
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	80 81       	ld	r24, Z
    2720:	86 95       	lsr	r24
    2722:	8f 70       	andi	r24, 0x0F	; 15
    2724:	84 30       	cpi	r24, 0x04	; 4
    2726:	09 f4       	brne	.+2      	; 0x272a <Timebase_DownCounter_SS_Expired+0x30>
    2728:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    272a:	84 2f       	mov	r24, r20
    272c:	08 95       	ret

0000272e <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    272e:	e0 91 43 01 	lds	r30, 0x0143
    2732:	f0 91 44 01 	lds	r31, 0x0144
    2736:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2738:	9c 01       	movw	r18, r24
    273a:	64 e0       	ldi	r22, 0x04	; 4
    273c:	22 0f       	add	r18, r18
    273e:	33 1f       	adc	r19, r19
    2740:	6a 95       	dec	r22
    2742:	e1 f7       	brne	.-8      	; 0x273c <Timebase_DownCounter_SS_Expired_Event+0xe>
    2744:	28 0f       	add	r18, r24
    2746:	39 1f       	adc	r19, r25
    2748:	e2 0f       	add	r30, r18
    274a:	f3 1f       	adc	r31, r19
    274c:	df 01       	movw	r26, r30
    274e:	a2 5b       	subi	r26, 0xB2	; 178
    2750:	bf 4f       	sbci	r27, 0xFF	; 255
    2752:	8c 91       	ld	r24, X
    2754:	86 95       	lsr	r24
    2756:	8f 70       	andi	r24, 0x0F	; 15
    2758:	84 30       	cpi	r24, 0x04	; 4
    275a:	11 f0       	breq	.+4      	; 0x2760 <Timebase_DownCounter_SS_Expired_Event+0x32>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2760:	ed 5a       	subi	r30, 0xAD	; 173
    2762:	ff 4f       	sbci	r31, 0xFF	; 255
    2764:	10 82       	st	Z, r1
    2766:	11 82       	std	Z+1, r1	; 0x01
    2768:	12 82       	std	Z+2, r1	; 0x02
    276a:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    276c:	12 92       	st	-Z, r1
    276e:	12 92       	st	-Z, r1
    2770:	12 92       	st	-Z, r1
    2772:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2774:	38 96       	adiw	r30, 0x08	; 8
    2776:	10 82       	st	Z, r1
    2778:	11 82       	std	Z+1, r1	; 0x01
    277a:	12 82       	std	Z+2, r1	; 0x02
    277c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    277e:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2780:	80 7e       	andi	r24, 0xE0	; 224
    2782:	8c 93       	st	X, r24
    2784:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2786:	08 95       	ret

00002788 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    278c:	c0 91 43 01 	lds	r28, 0x0143
    2790:	d0 91 44 01 	lds	r29, 0x0144
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2798:	f9 01       	movw	r30, r18
    279a:	a4 e0       	ldi	r26, 0x04	; 4
    279c:	ee 0f       	add	r30, r30
    279e:	ff 1f       	adc	r31, r31
    27a0:	aa 95       	dec	r26
    27a2:	e1 f7       	brne	.-8      	; 0x279c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    27a4:	e2 0f       	add	r30, r18
    27a6:	f3 1f       	adc	r31, r19
    27a8:	ec 0f       	add	r30, r28
    27aa:	fd 1f       	adc	r31, r29
    27ac:	e2 5b       	subi	r30, 0xB2	; 178
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	ee 54       	subi	r30, 0x4E	; 78
    27b4:	f0 40       	sbci	r31, 0x00	; 0
    27b6:	80 fd       	sbrc	r24, 0
    27b8:	24 c0       	rjmp	.+72     	; 0x2802 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    27ba:	e9 5a       	subi	r30, 0xA9	; 169
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	81 91       	ld	r24, Z+
    27c0:	91 91       	ld	r25, Z+
    27c2:	a1 91       	ld	r26, Z+
    27c4:	b1 91       	ld	r27, Z+
    27c6:	84 1b       	sub	r24, r20
    27c8:	95 0b       	sbc	r25, r21
    27ca:	a6 0b       	sbc	r26, r22
    27cc:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    27ce:	b7 ff       	sbrs	r27, 7
    27d0:	05 c0       	rjmp	.+10     	; 0x27dc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    27d2:	10 82       	st	Z, r1
    27d4:	11 82       	std	Z+1, r1	; 0x01
    27d6:	12 82       	std	Z+2, r1	; 0x02
    27d8:	13 82       	std	Z+3, r1	; 0x03
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    27dc:	80 83       	st	Z, r24
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	a2 83       	std	Z+2, r26	; 0x02
    27e2:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    27e4:	f9 01       	movw	r30, r18
    27e6:	74 e0       	ldi	r23, 0x04	; 4
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	7a 95       	dec	r23
    27ee:	e1 f7       	brne	.-8      	; 0x27e8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    27f0:	e2 0f       	add	r30, r18
    27f2:	f3 1f       	adc	r31, r19
    27f4:	ec 0f       	add	r30, r28
    27f6:	fd 1f       	adc	r31, r29
    27f8:	e2 5b       	subi	r30, 0xB2	; 178
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	81 60       	ori	r24, 0x01	; 1
    2800:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	08 95       	ret

00002808 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2808:	e0 91 43 01 	lds	r30, 0x0143
    280c:	f0 91 44 01 	lds	r31, 0x0144
    2810:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2812:	9c 01       	movw	r18, r24
    2814:	b4 e0       	ldi	r27, 0x04	; 4
    2816:	22 0f       	add	r18, r18
    2818:	33 1f       	adc	r19, r19
    281a:	ba 95       	dec	r27
    281c:	e1 f7       	brne	.-8      	; 0x2816 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    281e:	28 0f       	add	r18, r24
    2820:	39 1f       	adc	r19, r25
    2822:	e2 0f       	add	r30, r18
    2824:	f3 1f       	adc	r31, r19
    2826:	df 01       	movw	r26, r30
    2828:	a5 5a       	subi	r26, 0xA5	; 165
    282a:	bf 4f       	sbci	r27, 0xFF	; 255
    282c:	e9 5a       	subi	r30, 0xA9	; 169
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	20 81       	ld	r18, Z
    2832:	31 81       	ldd	r19, Z+1	; 0x01
    2834:	42 81       	ldd	r20, Z+2	; 0x02
    2836:	53 81       	ldd	r21, Z+3	; 0x03
    2838:	8d 91       	ld	r24, X+
    283a:	9d 91       	ld	r25, X+
    283c:	0d 90       	ld	r0, X+
    283e:	bc 91       	ld	r27, X
    2840:	a0 2d       	mov	r26, r0
    2842:	28 1b       	sub	r18, r24
    2844:	39 0b       	sbc	r19, r25
    2846:	4a 0b       	sbc	r20, r26
    2848:	5b 0b       	sbc	r21, r27
    284a:	57 ff       	sbrs	r21, 7
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	40 e0       	ldi	r20, 0x00	; 0
    2854:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2856:	b9 01       	movw	r22, r18
    2858:	ca 01       	movw	r24, r20
    285a:	08 95       	ret

0000285c <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2860:	c0 91 43 01 	lds	r28, 0x0143
    2864:	d0 91 44 01 	lds	r29, 0x0144
    2868:	68 2f       	mov	r22, r24
    286a:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    286c:	fb 01       	movw	r30, r22
    286e:	44 e0       	ldi	r20, 0x04	; 4
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	4a 95       	dec	r20
    2876:	e1 f7       	brne	.-8      	; 0x2870 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    2878:	e6 0f       	add	r30, r22
    287a:	f7 1f       	adc	r31, r23
    287c:	ec 0f       	add	r30, r28
    287e:	fd 1f       	adc	r31, r29
    2880:	df 01       	movw	r26, r30
    2882:	a5 5a       	subi	r26, 0xA5	; 165
    2884:	bf 4f       	sbci	r27, 0xFF	; 255
    2886:	e9 5a       	subi	r30, 0xA9	; 169
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	20 81       	ld	r18, Z
    288c:	31 81       	ldd	r19, Z+1	; 0x01
    288e:	42 81       	ldd	r20, Z+2	; 0x02
    2890:	53 81       	ldd	r21, Z+3	; 0x03
    2892:	8d 91       	ld	r24, X+
    2894:	9d 91       	ld	r25, X+
    2896:	0d 90       	ld	r0, X+
    2898:	bc 91       	ld	r27, X
    289a:	a0 2d       	mov	r26, r0
    289c:	28 1b       	sub	r18, r24
    289e:	39 0b       	sbc	r19, r25
    28a0:	4a 0b       	sbc	r20, r26
    28a2:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    28a4:	57 fd       	sbrc	r21, 7
    28a6:	07 c0       	rjmp	.+14     	; 0x28b6 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    28a8:	21 15       	cp	r18, r1
    28aa:	31 05       	cpc	r19, r1
    28ac:	41 05       	cpc	r20, r1
    28ae:	51 05       	cpc	r21, r1
    28b0:	11 f0       	breq	.+4      	; 0x28b6 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	12 c0       	rjmp	.+36     	; 0x28da <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	cb 01       	movw	r24, r22
    28ba:	34 e0       	ldi	r19, 0x04	; 4
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	3a 95       	dec	r19
    28c2:	e1 f7       	brne	.-8      	; 0x28bc <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    28c4:	86 0f       	add	r24, r22
    28c6:	97 1f       	adc	r25, r23
    28c8:	c8 0f       	add	r28, r24
    28ca:	d9 1f       	adc	r29, r25
    28cc:	c2 5b       	subi	r28, 0xB2	; 178
    28ce:	df 4f       	sbci	r29, 0xFF	; 255
    28d0:	88 81       	ld	r24, Y
    28d2:	80 ff       	sbrs	r24, 0
    28d4:	21 e0       	ldi	r18, 0x01	; 1
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    28da:	82 2f       	mov	r24, r18
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	08 95       	ret

000028e2 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    28e2:	1f 93       	push	r17
    28e4:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    28e6:	0e 94 2e 14 	call	0x285c	; 0x285c <Timebase_DownCounter_SS_Period_Value_Expired>
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	11 f0       	breq	.+4      	; 0x28f2 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	16 c0       	rjmp	.+44     	; 0x291e <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28f2:	e0 91 43 01 	lds	r30, 0x0143
    28f6:	f0 91 44 01 	lds	r31, 0x0144
    28fa:	21 2f       	mov	r18, r17
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	c9 01       	movw	r24, r18
    2900:	54 e0       	ldi	r21, 0x04	; 4
    2902:	88 0f       	add	r24, r24
    2904:	99 1f       	adc	r25, r25
    2906:	5a 95       	dec	r21
    2908:	e1 f7       	brne	.-8      	; 0x2902 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    290a:	82 0f       	add	r24, r18
    290c:	93 1f       	adc	r25, r19
    290e:	e8 0f       	add	r30, r24
    2910:	f9 1f       	adc	r31, r25
    2912:	e2 5b       	subi	r30, 0xB2	; 178
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	8e 7f       	andi	r24, 0xFE	; 254
    291a:	80 83       	st	Z, r24
    291c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    291e:	1f 91       	pop	r17
    2920:	08 95       	ret

00002922 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	0e 94 ad 12 	call	0x255a	; 0x255a <Timebase_DownCounter_SS_Update>
  }
}
    2928:	08 95       	ret

0000292a <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    292a:	e0 91 43 01 	lds	r30, 0x0143
    292e:	f0 91 44 01 	lds	r31, 0x0144
    2932:	ed 5a       	subi	r30, 0xAD	; 173
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	10 82       	st	Z, r1
    2938:	11 82       	std	Z+1, r1	; 0x01
    293a:	12 82       	std	Z+2, r1	; 0x02
    293c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    293e:	12 92       	st	-Z, r1
    2940:	12 92       	st	-Z, r1
    2942:	12 92       	st	-Z, r1
    2944:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2946:	38 96       	adiw	r30, 0x08	; 8
    2948:	10 82       	st	Z, r1
    294a:	11 82       	std	Z+1, r1	; 0x01
    294c:	12 82       	std	Z+2, r1	; 0x02
    294e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2950:	39 97       	sbiw	r30, 0x09	; 9
    2952:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2954:	80 7e       	andi	r24, 0xE0	; 224
    2956:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    2958:	08 95       	ret

0000295a <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    295a:	e0 91 43 01 	lds	r30, 0x0143
    295e:	f0 91 44 01 	lds	r31, 0x0144
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	2d e0       	ldi	r18, 0x0D	; 13
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	ac 01       	movw	r20, r24
    296a:	42 9f       	mul	r20, r18
    296c:	c0 01       	movw	r24, r0
    296e:	43 9f       	mul	r20, r19
    2970:	90 0d       	add	r25, r0
    2972:	52 9f       	mul	r21, r18
    2974:	90 0d       	add	r25, r0
    2976:	11 24       	eor	r1, r1
    2978:	e8 0f       	add	r30, r24
    297a:	f9 1f       	adc	r31, r25
    297c:	e1 5a       	subi	r30, 0xA1	; 161
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2984:	8f 70       	andi	r24, 0x0F	; 15
    2986:	08 95       	ret

00002988 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2988:	e0 91 43 01 	lds	r30, 0x0143
    298c:	f0 91 44 01 	lds	r31, 0x0144
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	2d e0       	ldi	r18, 0x0D	; 13
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	ac 01       	movw	r20, r24
    2998:	42 9f       	mul	r20, r18
    299a:	c0 01       	movw	r24, r0
    299c:	43 9f       	mul	r20, r19
    299e:	90 0d       	add	r25, r0
    29a0:	52 9f       	mul	r21, r18
    29a2:	90 0d       	add	r25, r0
    29a4:	11 24       	eor	r1, r1
    29a6:	e8 0f       	add	r30, r24
    29a8:	f9 1f       	adc	r31, r25
    29aa:	e1 5a       	subi	r30, 0xA1	; 161
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	6f 70       	andi	r22, 0x0F	; 15
    29b0:	66 0f       	add	r22, r22
    29b2:	80 81       	ld	r24, Z
    29b4:	81 7e       	andi	r24, 0xE1	; 225
    29b6:	86 2b       	or	r24, r22
    29b8:	80 83       	st	Z, r24
}
    29ba:	08 95       	ret

000029bc <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    29bc:	e0 91 43 01 	lds	r30, 0x0143
    29c0:	f0 91 44 01 	lds	r31, 0x0144
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	2d e0       	ldi	r18, 0x0D	; 13
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	ac 01       	movw	r20, r24
    29cc:	42 9f       	mul	r20, r18
    29ce:	c0 01       	movw	r24, r0
    29d0:	43 9f       	mul	r20, r19
    29d2:	90 0d       	add	r25, r0
    29d4:	52 9f       	mul	r21, r18
    29d6:	90 0d       	add	r25, r0
    29d8:	11 24       	eor	r1, r1
    29da:	e8 0f       	add	r30, r24
    29dc:	f9 1f       	adc	r31, r25
    29de:	ec 59       	subi	r30, 0x9C	; 156
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	08 95       	ret

000029ec <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    29ec:	e0 91 43 01 	lds	r30, 0x0143
    29f0:	f0 91 44 01 	lds	r31, 0x0144
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	2d e0       	ldi	r18, 0x0D	; 13
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	dc 01       	movw	r26, r24
    29fc:	a2 9f       	mul	r26, r18
    29fe:	c0 01       	movw	r24, r0
    2a00:	a3 9f       	mul	r26, r19
    2a02:	90 0d       	add	r25, r0
    2a04:	b2 9f       	mul	r27, r18
    2a06:	90 0d       	add	r25, r0
    2a08:	11 24       	eor	r1, r1
    2a0a:	e8 0f       	add	r30, r24
    2a0c:	f9 1f       	adc	r31, r25
    2a0e:	ec 59       	subi	r30, 0x9C	; 156
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	40 83       	st	Z, r20
    2a14:	51 83       	std	Z+1, r21	; 0x01
    2a16:	62 83       	std	Z+2, r22	; 0x02
    2a18:	73 83       	std	Z+3, r23	; 0x03
}
    2a1a:	08 95       	ret

00002a1c <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    2a1c:	e0 91 43 01 	lds	r30, 0x0143
    2a20:	f0 91 44 01 	lds	r31, 0x0144
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	2d e0       	ldi	r18, 0x0D	; 13
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	ac 01       	movw	r20, r24
    2a2c:	42 9f       	mul	r20, r18
    2a2e:	c0 01       	movw	r24, r0
    2a30:	43 9f       	mul	r20, r19
    2a32:	90 0d       	add	r25, r0
    2a34:	52 9f       	mul	r21, r18
    2a36:	90 0d       	add	r25, r0
    2a38:	11 24       	eor	r1, r1
    2a3a:	e8 0f       	add	r30, r24
    2a3c:	f9 1f       	adc	r31, r25
    2a3e:	e0 5a       	subi	r30, 0xA0	; 160
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	60 81       	ld	r22, Z
    2a44:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	93 81       	ldd	r25, Z+3	; 0x03
    2a4a:	08 95       	ret

00002a4c <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a4c:	e0 91 43 01 	lds	r30, 0x0143
    2a50:	f0 91 44 01 	lds	r31, 0x0144
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	2d e0       	ldi	r18, 0x0D	; 13
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	a2 9f       	mul	r26, r18
    2a5e:	c0 01       	movw	r24, r0
    2a60:	a3 9f       	mul	r26, r19
    2a62:	90 0d       	add	r25, r0
    2a64:	b2 9f       	mul	r27, r18
    2a66:	90 0d       	add	r25, r0
    2a68:	11 24       	eor	r1, r1
    2a6a:	e8 0f       	add	r30, r24
    2a6c:	f9 1f       	adc	r31, r25
    2a6e:	e0 5a       	subi	r30, 0xA0	; 160
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	40 83       	st	Z, r20
    2a74:	51 83       	std	Z+1, r21	; 0x01
    2a76:	62 83       	std	Z+2, r22	; 0x02
    2a78:	73 83       	std	Z+3, r23	; 0x03
}
    2a7a:	08 95       	ret

00002a7c <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    2a7c:	e0 91 43 01 	lds	r30, 0x0143
    2a80:	f0 91 44 01 	lds	r31, 0x0144
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	2d e0       	ldi	r18, 0x0D	; 13
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	42 9f       	mul	r20, r18
    2a8e:	c0 01       	movw	r24, r0
    2a90:	43 9f       	mul	r20, r19
    2a92:	90 0d       	add	r25, r0
    2a94:	52 9f       	mul	r21, r18
    2a96:	90 0d       	add	r25, r0
    2a98:	11 24       	eor	r1, r1
    2a9a:	e8 0f       	add	r30, r24
    2a9c:	f9 1f       	adc	r31, r25
    2a9e:	e8 59       	subi	r30, 0x98	; 152
    2aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa2:	60 81       	ld	r22, Z
    2aa4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	08 95       	ret

00002aac <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2aac:	e0 91 43 01 	lds	r30, 0x0143
    2ab0:	f0 91 44 01 	lds	r31, 0x0144
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2ab8:	77 ff       	sbrs	r23, 7
    2aba:	13 c0       	rjmp	.+38     	; 0x2ae2 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    2abc:	8d e0       	ldi	r24, 0x0D	; 13
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	ac 01       	movw	r20, r24
    2ac2:	24 9f       	mul	r18, r20
    2ac4:	c0 01       	movw	r24, r0
    2ac6:	25 9f       	mul	r18, r21
    2ac8:	90 0d       	add	r25, r0
    2aca:	34 9f       	mul	r19, r20
    2acc:	90 0d       	add	r25, r0
    2ace:	11 24       	eor	r1, r1
    2ad0:	e8 0f       	add	r30, r24
    2ad2:	f9 1f       	adc	r31, r25
    2ad4:	e8 59       	subi	r30, 0x98	; 152
    2ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad8:	10 82       	st	Z, r1
    2ada:	11 82       	std	Z+1, r1	; 0x01
    2adc:	12 82       	std	Z+2, r1	; 0x02
    2ade:	13 82       	std	Z+3, r1	; 0x03
    2ae0:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2ae2:	8d e0       	ldi	r24, 0x0D	; 13
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	2a 9f       	mul	r18, r26
    2aea:	c0 01       	movw	r24, r0
    2aec:	2b 9f       	mul	r18, r27
    2aee:	90 0d       	add	r25, r0
    2af0:	3a 9f       	mul	r19, r26
    2af2:	90 0d       	add	r25, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	e8 0f       	add	r30, r24
    2af8:	f9 1f       	adc	r31, r25
    2afa:	e8 59       	subi	r30, 0x98	; 152
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	40 83       	st	Z, r20
    2b00:	51 83       	std	Z+1, r21	; 0x01
    2b02:	62 83       	std	Z+2, r22	; 0x02
    2b04:	73 83       	std	Z+3, r23	; 0x03
    2b06:	08 95       	ret

00002b08 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    2b08:	e0 91 43 01 	lds	r30, 0x0143
    2b0c:	f0 91 44 01 	lds	r31, 0x0144
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	2d e0       	ldi	r18, 0x0D	; 13
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	ac 01       	movw	r20, r24
    2b18:	42 9f       	mul	r20, r18
    2b1a:	c0 01       	movw	r24, r0
    2b1c:	43 9f       	mul	r20, r19
    2b1e:	90 0d       	add	r25, r0
    2b20:	52 9f       	mul	r21, r18
    2b22:	90 0d       	add	r25, r0
    2b24:	11 24       	eor	r1, r1
    2b26:	e8 0f       	add	r30, r24
    2b28:	f9 1f       	adc	r31, r25
    2b2a:	e1 5a       	subi	r30, 0xA1	; 161
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2b30:	81 70       	andi	r24, 0x01	; 1
    2b32:	08 95       	ret

00002b34 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2b34:	e0 91 43 01 	lds	r30, 0x0143
    2b38:	f0 91 44 01 	lds	r31, 0x0144
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	2d e0       	ldi	r18, 0x0D	; 13
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	ac 01       	movw	r20, r24
    2b44:	42 9f       	mul	r20, r18
    2b46:	c0 01       	movw	r24, r0
    2b48:	43 9f       	mul	r20, r19
    2b4a:	90 0d       	add	r25, r0
    2b4c:	52 9f       	mul	r21, r18
    2b4e:	90 0d       	add	r25, r0
    2b50:	11 24       	eor	r1, r1
    2b52:	e8 0f       	add	r30, r24
    2b54:	f9 1f       	adc	r31, r25
    2b56:	e1 5a       	subi	r30, 0xA1	; 161
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	81 60       	ori	r24, 0x01	; 1
    2b5e:	80 83       	st	Z, r24
}
    2b60:	08 95       	ret

00002b62 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b62:	e0 91 43 01 	lds	r30, 0x0143
    2b66:	f0 91 44 01 	lds	r31, 0x0144
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	2d e0       	ldi	r18, 0x0D	; 13
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	ac 01       	movw	r20, r24
    2b72:	42 9f       	mul	r20, r18
    2b74:	c0 01       	movw	r24, r0
    2b76:	43 9f       	mul	r20, r19
    2b78:	90 0d       	add	r25, r0
    2b7a:	52 9f       	mul	r21, r18
    2b7c:	90 0d       	add	r25, r0
    2b7e:	11 24       	eor	r1, r1
    2b80:	e8 0f       	add	r30, r24
    2b82:	f9 1f       	adc	r31, r25
    2b84:	e1 5a       	subi	r30, 0xA1	; 161
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	8e 7f       	andi	r24, 0xFE	; 254
    2b8c:	80 83       	st	Z, r24
}
    2b8e:	08 95       	ret

00002b90 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2b90:	e0 91 43 01 	lds	r30, 0x0143
    2b94:	f0 91 44 01 	lds	r31, 0x0144
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	2d e0       	ldi	r18, 0x0D	; 13
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	ac 01       	movw	r20, r24
    2ba0:	42 9f       	mul	r20, r18
    2ba2:	c0 01       	movw	r24, r0
    2ba4:	43 9f       	mul	r20, r19
    2ba6:	90 0d       	add	r25, r0
    2ba8:	52 9f       	mul	r21, r18
    2baa:	90 0d       	add	r25, r0
    2bac:	11 24       	eor	r1, r1
    2bae:	e8 0f       	add	r30, r24
    2bb0:	f9 1f       	adc	r31, r25
    2bb2:	e0 5a       	subi	r30, 0xA0	; 160
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	11 92       	st	Z+, r1
    2bb8:	11 92       	st	Z+, r1
    2bba:	11 92       	st	Z+, r1
    2bbc:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2bbe:	10 82       	st	Z, r1
    2bc0:	11 82       	std	Z+1, r1	; 0x01
    2bc2:	12 82       	std	Z+2, r1	; 0x02
    2bc4:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2bc6:	35 97       	sbiw	r30, 0x05	; 5
    2bc8:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2bca:	80 7e       	andi	r24, 0xE0	; 224
    2bcc:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2bce:	08 95       	ret

00002bd0 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2bd0:	e0 91 43 01 	lds	r30, 0x0143
    2bd4:	f0 91 44 01 	lds	r31, 0x0144
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	2d e0       	ldi	r18, 0x0D	; 13
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	ac 01       	movw	r20, r24
    2be0:	42 9f       	mul	r20, r18
    2be2:	c0 01       	movw	r24, r0
    2be4:	43 9f       	mul	r20, r19
    2be6:	90 0d       	add	r25, r0
    2be8:	52 9f       	mul	r21, r18
    2bea:	90 0d       	add	r25, r0
    2bec:	11 24       	eor	r1, r1
    2bee:	e8 0f       	add	r30, r24
    2bf0:	f9 1f       	adc	r31, r25
    2bf2:	e0 5a       	subi	r30, 0xA0	; 160
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	11 92       	st	Z+, r1
    2bf8:	11 92       	st	Z+, r1
    2bfa:	11 92       	st	Z+, r1
    2bfc:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2bfe:	10 82       	st	Z, r1
    2c00:	11 82       	std	Z+1, r1	; 0x01
    2c02:	12 82       	std	Z+2, r1	; 0x02
    2c04:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c06:	35 97       	sbiw	r30, 0x05	; 5
    2c08:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2c0a:	80 7e       	andi	r24, 0xE0	; 224
    2c0c:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2c0e:	08 95       	ret

00002c10 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2c10:	e0 91 43 01 	lds	r30, 0x0143
    2c14:	f0 91 44 01 	lds	r31, 0x0144
    2c18:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2c1a:	2d e0       	ldi	r18, 0x0D	; 13
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	ac 01       	movw	r20, r24
    2c20:	42 9f       	mul	r20, r18
    2c22:	c0 01       	movw	r24, r0
    2c24:	43 9f       	mul	r20, r19
    2c26:	90 0d       	add	r25, r0
    2c28:	52 9f       	mul	r21, r18
    2c2a:	90 0d       	add	r25, r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	e8 0f       	add	r30, r24
    2c30:	f9 1f       	adc	r31, r25
    2c32:	e1 5a       	subi	r30, 0xA1	; 161
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	90 81       	ld	r25, Z
    2c38:	89 2f       	mov	r24, r25
    2c3a:	86 95       	lsr	r24
    2c3c:	8f 70       	andi	r24, 0x0F	; 15
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	19 f0       	breq	.+6      	; 0x2c48 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c42:	91 7e       	andi	r25, 0xE1	; 225
    2c44:	92 60       	ori	r25, 0x02	; 2
    2c46:	90 83       	st	Z, r25
    2c48:	08 95       	ret

00002c4a <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2c4a:	e0 91 43 01 	lds	r30, 0x0143
    2c4e:	f0 91 44 01 	lds	r31, 0x0144
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2c54:	2d e0       	ldi	r18, 0x0D	; 13
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	ac 01       	movw	r20, r24
    2c5a:	42 9f       	mul	r20, r18
    2c5c:	c0 01       	movw	r24, r0
    2c5e:	43 9f       	mul	r20, r19
    2c60:	90 0d       	add	r25, r0
    2c62:	52 9f       	mul	r21, r18
    2c64:	90 0d       	add	r25, r0
    2c66:	11 24       	eor	r1, r1
    2c68:	e8 0f       	add	r30, r24
    2c6a:	f9 1f       	adc	r31, r25
    2c6c:	e1 5a       	subi	r30, 0xA1	; 161
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	90 81       	ld	r25, Z
    2c72:	89 2f       	mov	r24, r25
    2c74:	86 95       	lsr	r24
    2c76:	8f 70       	andi	r24, 0x0F	; 15
    2c78:	82 30       	cpi	r24, 0x02	; 2
    2c7a:	19 f0       	breq	.+6      	; 0x2c82 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c7c:	91 7e       	andi	r25, 0xE1	; 225
    2c7e:	94 60       	ori	r25, 0x04	; 4
    2c80:	90 83       	st	Z, r25
    2c82:	08 95       	ret

00002c84 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2c88:	a0 91 43 01 	lds	r26, 0x0143
    2c8c:	b0 91 44 01 	lds	r27, 0x0144
    2c90:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2c92:	2d e0       	ldi	r18, 0x0D	; 13
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	82 9f       	mul	r24, r18
    2c98:	f0 01       	movw	r30, r0
    2c9a:	83 9f       	mul	r24, r19
    2c9c:	f0 0d       	add	r31, r0
    2c9e:	92 9f       	mul	r25, r18
    2ca0:	f0 0d       	add	r31, r0
    2ca2:	11 24       	eor	r1, r1
    2ca4:	ea 0f       	add	r30, r26
    2ca6:	fb 1f       	adc	r31, r27
    2ca8:	ef 01       	movw	r28, r30
    2caa:	c1 5a       	subi	r28, 0xA1	; 161
    2cac:	df 4f       	sbci	r29, 0xFF	; 255
    2cae:	88 81       	ld	r24, Y
    2cb0:	86 95       	lsr	r24
    2cb2:	8f 70       	andi	r24, 0x0F	; 15
    2cb4:	e9 f4       	brne	.+58     	; 0x2cf0 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2cb6:	ec 59       	subi	r30, 0x9C	; 156
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	40 83       	st	Z, r20
    2cbc:	51 83       	std	Z+1, r21	; 0x01
    2cbe:	62 83       	std	Z+2, r22	; 0x02
    2cc0:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2cc2:	1a 96       	adiw	r26, 0x0a	; 10
    2cc4:	8d 91       	ld	r24, X+
    2cc6:	9d 91       	ld	r25, X+
    2cc8:	0d 90       	ld	r0, X+
    2cca:	bc 91       	ld	r27, X
    2ccc:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2cce:	84 0f       	add	r24, r20
    2cd0:	95 1f       	adc	r25, r21
    2cd2:	a6 1f       	adc	r26, r22
    2cd4:	b7 1f       	adc	r27, r23
    2cd6:	b2 93       	st	-Z, r27
    2cd8:	a2 93       	st	-Z, r26
    2cda:	92 93       	st	-Z, r25
    2cdc:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2cde:	98 81       	ld	r25, Y
    2ce0:	89 2f       	mov	r24, r25
    2ce2:	86 95       	lsr	r24
    2ce4:	8f 70       	andi	r24, 0x0F	; 15
    2ce6:	81 30       	cpi	r24, 0x01	; 1
    2ce8:	19 f0       	breq	.+6      	; 0x2cf0 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2cea:	91 7e       	andi	r25, 0xE1	; 225
    2cec:	92 60       	ori	r25, 0x02	; 2
    2cee:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    2cf0:	df 91       	pop	r29
    2cf2:	cf 91       	pop	r28
    2cf4:	08 95       	ret

00002cf6 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2cfa:	e0 91 43 01 	lds	r30, 0x0143
    2cfe:	f0 91 44 01 	lds	r31, 0x0144
    2d02:	a8 2f       	mov	r26, r24
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	2d e0       	ldi	r18, 0x0D	; 13
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	e9 01       	movw	r28, r18
    2d0c:	ac 9f       	mul	r26, r28
    2d0e:	90 01       	movw	r18, r0
    2d10:	ad 9f       	mul	r26, r29
    2d12:	30 0d       	add	r19, r0
    2d14:	bc 9f       	mul	r27, r28
    2d16:	30 0d       	add	r19, r0
    2d18:	11 24       	eor	r1, r1
    2d1a:	e2 0f       	add	r30, r18
    2d1c:	f3 1f       	adc	r31, r19
    2d1e:	e0 5a       	subi	r30, 0xA0	; 160
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	11 92       	st	Z+, r1
    2d24:	11 92       	st	Z+, r1
    2d26:	11 92       	st	Z+, r1
    2d28:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2d2a:	10 82       	st	Z, r1
    2d2c:	11 82       	std	Z+1, r1	; 0x01
    2d2e:	12 82       	std	Z+2, r1	; 0x02
    2d30:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2d32:	35 97       	sbiw	r30, 0x05	; 5
    2d34:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d36:	90 7e       	andi	r25, 0xE0	; 224
    2d38:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2d3a:	0e 94 42 16 	call	0x2c84	; 0x2c84 <Timebase_DownCounter_Set_Securely>
} 
    2d3e:	df 91       	pop	r29
    2d40:	cf 91       	pop	r28
    2d42:	08 95       	ret

00002d44 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    2d44:	0f 93       	push	r16
    2d46:	1f 93       	push	r17
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2d4c:	a0 91 43 01 	lds	r26, 0x0143
    2d50:	b0 91 44 01 	lds	r27, 0x0144
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	2d e0       	ldi	r18, 0x0D	; 13
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	82 9f       	mul	r24, r18
    2d5c:	f0 01       	movw	r30, r0
    2d5e:	83 9f       	mul	r24, r19
    2d60:	f0 0d       	add	r31, r0
    2d62:	92 9f       	mul	r25, r18
    2d64:	f0 0d       	add	r31, r0
    2d66:	11 24       	eor	r1, r1
    2d68:	ea 0f       	add	r30, r26
    2d6a:	fb 1f       	adc	r31, r27
    2d6c:	8f 01       	movw	r16, r30
    2d6e:	01 5a       	subi	r16, 0xA1	; 161
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	e8 01       	movw	r28, r16
    2d74:	88 81       	ld	r24, Y
    2d76:	86 95       	lsr	r24
    2d78:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	69 f5       	brne	.+90     	; 0x2dd8 <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2d7e:	1a 96       	adiw	r26, 0x0a	; 10
    2d80:	2d 91       	ld	r18, X+
    2d82:	3d 91       	ld	r19, X+
    2d84:	4d 91       	ld	r20, X+
    2d86:	5c 91       	ld	r21, X
    2d88:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    2d8a:	bf 01       	movw	r22, r30
    2d8c:	60 5a       	subi	r22, 0xA0	; 160
    2d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d90:	eb 01       	movw	r28, r22
    2d92:	88 81       	ld	r24, Y
    2d94:	99 81       	ldd	r25, Y+1	; 0x01
    2d96:	aa 81       	ldd	r26, Y+2	; 0x02
    2d98:	bb 81       	ldd	r27, Y+3	; 0x03
    2d9a:	82 1b       	sub	r24, r18
    2d9c:	93 0b       	sbc	r25, r19
    2d9e:	a4 0b       	sbc	r26, r20
    2da0:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2da2:	ec 59       	subi	r30, 0x9C	; 156
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2dae:	18 16       	cp	r1, r24
    2db0:	19 06       	cpc	r1, r25
    2db2:	1a 06       	cpc	r1, r26
    2db4:	1b 06       	cpc	r1, r27
    2db6:	34 f1       	brlt	.+76     	; 0x2e04 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2db8:	db 01       	movw	r26, r22
    2dba:	1d 92       	st	X+, r1
    2dbc:	1d 92       	st	X+, r1
    2dbe:	1d 92       	st	X+, r1
    2dc0:	1c 92       	st	X, r1
    2dc2:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2dc4:	10 82       	st	Z, r1
    2dc6:	11 82       	std	Z+1, r1	; 0x01
    2dc8:	12 82       	std	Z+2, r1	; 0x02
    2dca:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2dcc:	e8 01       	movw	r28, r16
    2dce:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2dd0:	80 7e       	andi	r24, 0xE0	; 224
    2dd2:	88 60       	ori	r24, 0x08	; 8
    2dd4:	88 83       	st	Y, r24
    2dd6:	16 c0       	rjmp	.+44     	; 0x2e04 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2dd8:	82 30       	cpi	r24, 0x02	; 2
    2dda:	a1 f4       	brne	.+40     	; 0x2e04 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2ddc:	1a 96       	adiw	r26, 0x0a	; 10
    2dde:	8d 91       	ld	r24, X+
    2de0:	9d 91       	ld	r25, X+
    2de2:	0d 90       	ld	r0, X+
    2de4:	bc 91       	ld	r27, X
    2de6:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2de8:	ec 59       	subi	r30, 0x9C	; 156
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	20 81       	ld	r18, Z
    2dee:	31 81       	ldd	r19, Z+1	; 0x01
    2df0:	42 81       	ldd	r20, Z+2	; 0x02
    2df2:	53 81       	ldd	r21, Z+3	; 0x03
    2df4:	82 0f       	add	r24, r18
    2df6:	93 1f       	adc	r25, r19
    2df8:	a4 1f       	adc	r26, r20
    2dfa:	b5 1f       	adc	r27, r21
    2dfc:	b2 93       	st	-Z, r27
    2dfe:	a2 93       	st	-Z, r26
    2e00:	92 93       	st	-Z, r25
    2e02:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2e0e:	40 e0       	ldi	r20, 0x00	; 0
    2e10:	e0 91 43 01 	lds	r30, 0x0143
    2e14:	f0 91 44 01 	lds	r31, 0x0144
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	2d e0       	ldi	r18, 0x0D	; 13
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	bc 01       	movw	r22, r24
    2e20:	62 9f       	mul	r22, r18
    2e22:	c0 01       	movw	r24, r0
    2e24:	63 9f       	mul	r22, r19
    2e26:	90 0d       	add	r25, r0
    2e28:	72 9f       	mul	r23, r18
    2e2a:	90 0d       	add	r25, r0
    2e2c:	11 24       	eor	r1, r1
    2e2e:	e8 0f       	add	r30, r24
    2e30:	f9 1f       	adc	r31, r25
    2e32:	e1 5a       	subi	r30, 0xA1	; 161
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	80 81       	ld	r24, Z
    2e38:	86 95       	lsr	r24
    2e3a:	8f 70       	andi	r24, 0x0F	; 15
    2e3c:	84 30       	cpi	r24, 0x04	; 4
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <Timebase_DownCounter_Expired+0x34>
    2e40:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2e42:	84 2f       	mov	r24, r20
    2e44:	08 95       	ret

00002e46 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2e46:	e0 91 43 01 	lds	r30, 0x0143
    2e4a:	f0 91 44 01 	lds	r31, 0x0144
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2e50:	2d e0       	ldi	r18, 0x0D	; 13
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	ac 01       	movw	r20, r24
    2e56:	42 9f       	mul	r20, r18
    2e58:	c0 01       	movw	r24, r0
    2e5a:	43 9f       	mul	r20, r19
    2e5c:	90 0d       	add	r25, r0
    2e5e:	52 9f       	mul	r21, r18
    2e60:	90 0d       	add	r25, r0
    2e62:	11 24       	eor	r1, r1
    2e64:	e8 0f       	add	r30, r24
    2e66:	f9 1f       	adc	r31, r25
    2e68:	df 01       	movw	r26, r30
    2e6a:	a1 5a       	subi	r26, 0xA1	; 161
    2e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e6e:	8c 91       	ld	r24, X
    2e70:	86 95       	lsr	r24
    2e72:	8f 70       	andi	r24, 0x0F	; 15
    2e74:	84 30       	cpi	r24, 0x04	; 4
    2e76:	11 f0       	breq	.+4      	; 0x2e7c <Timebase_DownCounter_Expired_Event+0x36>
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2e7c:	e0 5a       	subi	r30, 0xA0	; 160
    2e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e80:	11 92       	st	Z+, r1
    2e82:	11 92       	st	Z+, r1
    2e84:	11 92       	st	Z+, r1
    2e86:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2e88:	10 82       	st	Z, r1
    2e8a:	11 82       	std	Z+1, r1	; 0x01
    2e8c:	12 82       	std	Z+2, r1	; 0x02
    2e8e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2e90:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2e92:	80 7e       	andi	r24, 0xE0	; 224
    2e94:	8c 93       	st	X, r24
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2e98:	08 95       	ret

00002e9a <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2e9e:	c0 91 43 01 	lds	r28, 0x0143
    2ea2:	d0 91 44 01 	lds	r29, 0x0144
    2ea6:	28 2f       	mov	r18, r24
    2ea8:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2eaa:	8d e0       	ldi	r24, 0x0D	; 13
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	28 9f       	mul	r18, r24
    2eb0:	f0 01       	movw	r30, r0
    2eb2:	29 9f       	mul	r18, r25
    2eb4:	f0 0d       	add	r31, r0
    2eb6:	38 9f       	mul	r19, r24
    2eb8:	f0 0d       	add	r31, r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	ec 0f       	add	r30, r28
    2ebe:	fd 1f       	adc	r31, r29
    2ec0:	e1 5a       	subi	r30, 0xA1	; 161
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	80 81       	ld	r24, Z
    2ec6:	ef 55       	subi	r30, 0x5F	; 95
    2ec8:	f0 40       	sbci	r31, 0x00	; 0
    2eca:	80 fd       	sbrc	r24, 0
    2ecc:	25 c0       	rjmp	.+74     	; 0x2f18 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2ece:	ec 59       	subi	r30, 0x9C	; 156
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	81 91       	ld	r24, Z+
    2ed4:	91 91       	ld	r25, Z+
    2ed6:	a1 91       	ld	r26, Z+
    2ed8:	b1 91       	ld	r27, Z+
    2eda:	84 1b       	sub	r24, r20
    2edc:	95 0b       	sbc	r25, r21
    2ede:	a6 0b       	sbc	r26, r22
    2ee0:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2ee2:	b7 ff       	sbrs	r27, 7
    2ee4:	05 c0       	rjmp	.+10     	; 0x2ef0 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2ee6:	10 82       	st	Z, r1
    2ee8:	11 82       	std	Z+1, r1	; 0x01
    2eea:	12 82       	std	Z+2, r1	; 0x02
    2eec:	13 82       	std	Z+3, r1	; 0x03
    2eee:	04 c0       	rjmp	.+8      	; 0x2ef8 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2ef0:	80 83       	st	Z, r24
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	a2 83       	std	Z+2, r26	; 0x02
    2ef6:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2ef8:	8d e0       	ldi	r24, 0x0D	; 13
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	28 9f       	mul	r18, r24
    2efe:	f0 01       	movw	r30, r0
    2f00:	29 9f       	mul	r18, r25
    2f02:	f0 0d       	add	r31, r0
    2f04:	38 9f       	mul	r19, r24
    2f06:	f0 0d       	add	r31, r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	ec 0f       	add	r30, r28
    2f0c:	fd 1f       	adc	r31, r29
    2f0e:	e1 5a       	subi	r30, 0xA1	; 161
    2f10:	ff 4f       	sbci	r31, 0xFF	; 255
    2f12:	80 81       	ld	r24, Z
    2f14:	81 60       	ori	r24, 0x01	; 1
    2f16:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2f18:	df 91       	pop	r29
    2f1a:	cf 91       	pop	r28
    2f1c:	08 95       	ret

00002f1e <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2f1e:	e0 91 43 01 	lds	r30, 0x0143
    2f22:	f0 91 44 01 	lds	r31, 0x0144
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2f28:	2d e0       	ldi	r18, 0x0D	; 13
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	ac 01       	movw	r20, r24
    2f2e:	42 9f       	mul	r20, r18
    2f30:	c0 01       	movw	r24, r0
    2f32:	43 9f       	mul	r20, r19
    2f34:	90 0d       	add	r25, r0
    2f36:	52 9f       	mul	r21, r18
    2f38:	90 0d       	add	r25, r0
    2f3a:	11 24       	eor	r1, r1
    2f3c:	e8 0f       	add	r30, r24
    2f3e:	f9 1f       	adc	r31, r25
    2f40:	df 01       	movw	r26, r30
    2f42:	a8 59       	subi	r26, 0x98	; 152
    2f44:	bf 4f       	sbci	r27, 0xFF	; 255
    2f46:	ec 59       	subi	r30, 0x9C	; 156
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	20 81       	ld	r18, Z
    2f4c:	31 81       	ldd	r19, Z+1	; 0x01
    2f4e:	42 81       	ldd	r20, Z+2	; 0x02
    2f50:	53 81       	ldd	r21, Z+3	; 0x03
    2f52:	8d 91       	ld	r24, X+
    2f54:	9d 91       	ld	r25, X+
    2f56:	0d 90       	ld	r0, X+
    2f58:	bc 91       	ld	r27, X
    2f5a:	a0 2d       	mov	r26, r0
    2f5c:	28 1b       	sub	r18, r24
    2f5e:	39 0b       	sbc	r19, r25
    2f60:	4a 0b       	sbc	r20, r26
    2f62:	5b 0b       	sbc	r21, r27
    2f64:	57 ff       	sbrs	r21, 7
    2f66:	04 c0       	rjmp	.+8      	; 0x2f70 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 e0       	ldi	r20, 0x00	; 0
    2f6e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2f70:	b9 01       	movw	r22, r18
    2f72:	ca 01       	movw	r24, r20
    2f74:	08 95       	ret

00002f76 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2f7a:	c0 91 43 01 	lds	r28, 0x0143
    2f7e:	d0 91 44 01 	lds	r29, 0x0144
    2f82:	68 2f       	mov	r22, r24
    2f84:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2f86:	8d e0       	ldi	r24, 0x0D	; 13
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	68 9f       	mul	r22, r24
    2f8c:	f0 01       	movw	r30, r0
    2f8e:	69 9f       	mul	r22, r25
    2f90:	f0 0d       	add	r31, r0
    2f92:	78 9f       	mul	r23, r24
    2f94:	f0 0d       	add	r31, r0
    2f96:	11 24       	eor	r1, r1
    2f98:	ec 0f       	add	r30, r28
    2f9a:	fd 1f       	adc	r31, r29
    2f9c:	df 01       	movw	r26, r30
    2f9e:	a8 59       	subi	r26, 0x98	; 152
    2fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa2:	ec 59       	subi	r30, 0x9C	; 156
    2fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa6:	20 81       	ld	r18, Z
    2fa8:	31 81       	ldd	r19, Z+1	; 0x01
    2faa:	42 81       	ldd	r20, Z+2	; 0x02
    2fac:	53 81       	ldd	r21, Z+3	; 0x03
    2fae:	8d 91       	ld	r24, X+
    2fb0:	9d 91       	ld	r25, X+
    2fb2:	0d 90       	ld	r0, X+
    2fb4:	bc 91       	ld	r27, X
    2fb6:	a0 2d       	mov	r26, r0
    2fb8:	28 1b       	sub	r18, r24
    2fba:	39 0b       	sbc	r19, r25
    2fbc:	4a 0b       	sbc	r20, r26
    2fbe:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2fc0:	57 fd       	sbrc	r21, 7
    2fc2:	07 c0       	rjmp	.+14     	; 0x2fd2 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2fc4:	21 15       	cp	r18, r1
    2fc6:	31 05       	cpc	r19, r1
    2fc8:	41 05       	cpc	r20, r1
    2fca:	51 05       	cpc	r21, r1
    2fcc:	11 f0       	breq	.+4      	; 0x2fd2 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	14 c0       	rjmp	.+40     	; 0x2ffa <Timebase_DownCounter_Period_Value_Expired+0x84>
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	8d e0       	ldi	r24, 0x0D	; 13
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	ac 01       	movw	r20, r24
    2fda:	64 9f       	mul	r22, r20
    2fdc:	c0 01       	movw	r24, r0
    2fde:	65 9f       	mul	r22, r21
    2fe0:	90 0d       	add	r25, r0
    2fe2:	74 9f       	mul	r23, r20
    2fe4:	90 0d       	add	r25, r0
    2fe6:	11 24       	eor	r1, r1
    2fe8:	c8 0f       	add	r28, r24
    2fea:	d9 1f       	adc	r29, r25
    2fec:	c1 5a       	subi	r28, 0xA1	; 161
    2fee:	df 4f       	sbci	r29, 0xFF	; 255
    2ff0:	88 81       	ld	r24, Y
    2ff2:	80 ff       	sbrs	r24, 0
    2ff4:	21 e0       	ldi	r18, 0x01	; 1
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2ffa:	82 2f       	mov	r24, r18
    2ffc:	df 91       	pop	r29
    2ffe:	cf 91       	pop	r28
    3000:	08 95       	ret

00003002 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    3002:	1f 93       	push	r17
    3004:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    3006:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <Timebase_DownCounter_Period_Value_Expired>
    300a:	81 30       	cpi	r24, 0x01	; 1
    300c:	11 f0       	breq	.+4      	; 0x3012 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	18 c0       	rjmp	.+48     	; 0x3042 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3012:	e0 91 43 01 	lds	r30, 0x0143
    3016:	f0 91 44 01 	lds	r31, 0x0144
    301a:	21 2f       	mov	r18, r17
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	8d e0       	ldi	r24, 0x0D	; 13
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	ac 01       	movw	r20, r24
    3024:	24 9f       	mul	r18, r20
    3026:	c0 01       	movw	r24, r0
    3028:	25 9f       	mul	r18, r21
    302a:	90 0d       	add	r25, r0
    302c:	34 9f       	mul	r19, r20
    302e:	90 0d       	add	r25, r0
    3030:	11 24       	eor	r1, r1
    3032:	e8 0f       	add	r30, r24
    3034:	f9 1f       	adc	r31, r25
    3036:	e1 5a       	subi	r30, 0xA1	; 161
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	80 81       	ld	r24, Z
    303c:	8e 7f       	andi	r24, 0xFE	; 254
    303e:	80 83       	st	Z, r24
    3040:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3042:	1f 91       	pop	r17
    3044:	08 95       	ret

00003046 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <Timebase_DownCounter_Update>
  }
}
    304c:	08 95       	ret

0000304e <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    304e:	e0 91 43 01 	lds	r30, 0x0143
    3052:	f0 91 44 01 	lds	r31, 0x0144
    3056:	e0 5a       	subi	r30, 0xA0	; 160
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	11 92       	st	Z+, r1
    305c:	11 92       	st	Z+, r1
    305e:	11 92       	st	Z+, r1
    3060:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    3062:	10 82       	st	Z, r1
    3064:	11 82       	std	Z+1, r1	; 0x01
    3066:	12 82       	std	Z+2, r1	; 0x02
    3068:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    306a:	35 97       	sbiw	r30, 0x05	; 5
    306c:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    306e:	80 7e       	andi	r24, 0xE0	; 224
    3070:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    3072:	08 95       	ret

00003074 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    3074:	0e 94 1a 10 	call	0x2034	; 0x2034 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    3078:	0e 94 95 14 	call	0x292a	; 0x292a <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    307c:	0e 94 27 18 	call	0x304e	; 0x304e <Timebase_DownCounter_Reset_All>
  #endif
  
}
    3080:	08 95       	ret

00003082 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    3088:	0e 94 1c 03 	call	0x638	; 0x638 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    308c:	c8 01       	movw	r24, r16
    308e:	0e 94 07 04 	call	0x80e	; 0x80e <Timebase_Timer_Config>
  Timebase_Reset();
    3092:	0e 94 3a 18 	call	0x3074	; 0x3074 <Timebase_Reset>
}
    3096:	1f 91       	pop	r17
    3098:	0f 91       	pop	r16
    309a:	08 95       	ret

0000309c <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    309c:	e0 91 43 01 	lds	r30, 0x0143
    30a0:	f0 91 44 01 	lds	r31, 0x0144
    30a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    30a6:	82 ff       	sbrs	r24, 2
    30a8:	0b c0       	rjmp	.+22     	; 0x30c0 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    30aa:	0e 94 30 05 	call	0xa60	; 0xa60 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    30ae:	0e 94 ef 0b 	call	0x17de	; 0x17de <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    30b2:	e0 91 43 01 	lds	r30, 0x0143
    30b6:	f0 91 44 01 	lds	r31, 0x0144
    30ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    30bc:	8b 7f       	andi	r24, 0xFB	; 251
    30be:	86 8f       	std	Z+30, r24	; 0x1e
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    30c0:	e0 91 43 01 	lds	r30, 0x0143
    30c4:	f0 91 44 01 	lds	r31, 0x0144
    30c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    30ca:	80 ff       	sbrs	r24, 0
    30cc:	0b c0       	rjmp	.+22     	; 0x30e4 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    30ce:	0e 94 30 05 	call	0xa60	; 0xa60 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    30d2:	0e 94 16 10 	call	0x202c	; 0x202c <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    30d6:	e0 91 43 01 	lds	r30, 0x0143
    30da:	f0 91 44 01 	lds	r31, 0x0144
    30de:	86 8d       	ldd	r24, Z+30	; 0x1e
    30e0:	8e 7f       	andi	r24, 0xFE	; 254
    30e2:	86 8f       	std	Z+30, r24	; 0x1e
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    30e4:	e0 91 43 01 	lds	r30, 0x0143
    30e8:	f0 91 44 01 	lds	r31, 0x0144
    30ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    30ee:	83 ff       	sbrs	r24, 3
    30f0:	0b c0       	rjmp	.+22     	; 0x3108 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    30f2:	0e 94 30 05 	call	0xa60	; 0xa60 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    30f6:	0e 94 91 14 	call	0x2922	; 0x2922 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    30fa:	e0 91 43 01 	lds	r30, 0x0143
    30fe:	f0 91 44 01 	lds	r31, 0x0144
    3102:	86 8d       	ldd	r24, Z+30	; 0x1e
    3104:	87 7f       	andi	r24, 0xF7	; 247
    3106:	86 8f       	std	Z+30, r24	; 0x1e
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    3108:	e0 91 43 01 	lds	r30, 0x0143
    310c:	f0 91 44 01 	lds	r31, 0x0144
    3110:	86 8d       	ldd	r24, Z+30	; 0x1e
    3112:	81 ff       	sbrs	r24, 1
    3114:	0b c0       	rjmp	.+22     	; 0x312c <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3116:	0e 94 30 05 	call	0xa60	; 0xa60 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    311a:	0e 94 23 18 	call	0x3046	; 0x3046 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    311e:	e0 91 43 01 	lds	r30, 0x0143
    3122:	f0 91 44 01 	lds	r31, 0x0144
    3126:	86 8d       	ldd	r24, Z+30	; 0x1e
    3128:	8d 7f       	andi	r24, 0xFD	; 253
    312a:	86 8f       	std	Z+30, r24	; 0x1e
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    312c:	e0 91 43 01 	lds	r30, 0x0143
    3130:	f0 91 44 01 	lds	r31, 0x0144
    3134:	14 8a       	std	Z+20, r1	; 0x14
}
    3136:	08 95       	ret

00003138 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    3138:	e0 91 43 01 	lds	r30, 0x0143
    313c:	f0 91 44 01 	lds	r31, 0x0144
    3140:	86 85       	ldd	r24, Z+14	; 0x0e
    3142:	97 85       	ldd	r25, Z+15	; 0x0f
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	97 87       	std	Z+15, r25	; 0x0f
    3148:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    314a:	86 8d       	ldd	r24, Z+30	; 0x1e
    314c:	84 60       	ori	r24, 0x04	; 4
    314e:	86 8f       	std	Z+30, r24	; 0x1e
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    3150:	86 8d       	ldd	r24, Z+30	; 0x1e
    3152:	88 60       	ori	r24, 0x08	; 8
    3154:	86 8f       	std	Z+30, r24	; 0x1e
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    3156:	26 85       	ldd	r18, Z+14	; 0x0e
    3158:	37 85       	ldd	r19, Z+15	; 0x0f
    315a:	81 81       	ldd	r24, Z+1	; 0x01
    315c:	92 81       	ldd	r25, Z+2	; 0x02
    315e:	28 17       	cp	r18, r24
    3160:	39 07       	cpc	r19, r25
    3162:	98 f0       	brcs	.+38     	; 0x318a <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    3164:	80 89       	ldd	r24, Z+16	; 0x10
    3166:	91 89       	ldd	r25, Z+17	; 0x11
    3168:	a2 89       	ldd	r26, Z+18	; 0x12
    316a:	b3 89       	ldd	r27, Z+19	; 0x13
    316c:	01 96       	adiw	r24, 0x01	; 1
    316e:	a1 1d       	adc	r26, r1
    3170:	b1 1d       	adc	r27, r1
    3172:	80 8b       	std	Z+16, r24	; 0x10
    3174:	91 8b       	std	Z+17, r25	; 0x11
    3176:	a2 8b       	std	Z+18, r26	; 0x12
    3178:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    317a:	17 86       	std	Z+15, r1	; 0x0f
    317c:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    317e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3180:	81 60       	ori	r24, 0x01	; 1
    3182:	86 8f       	std	Z+30, r24	; 0x1e
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    3184:	86 8d       	ldd	r24, Z+30	; 0x1e
    3186:	82 60       	ori	r24, 0x02	; 2
    3188:	86 8f       	std	Z+30, r24	; 0x1e
    318a:	08 95       	ret

0000318c <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    318c:	1f 92       	push	r1
    318e:	0f 92       	push	r0
    3190:	0f b6       	in	r0, 0x3f	; 63
    3192:	0f 92       	push	r0
    3194:	11 24       	eor	r1, r1
    3196:	2f 93       	push	r18
    3198:	3f 93       	push	r19
    319a:	4f 93       	push	r20
    319c:	5f 93       	push	r21
    319e:	6f 93       	push	r22
    31a0:	7f 93       	push	r23
    31a2:	8f 93       	push	r24
    31a4:	9f 93       	push	r25
    31a6:	af 93       	push	r26
    31a8:	bf 93       	push	r27
    31aa:	ef 93       	push	r30
    31ac:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    31ae:	e0 91 43 01 	lds	r30, 0x0143
    31b2:	f0 91 44 01 	lds	r31, 0x0144
    31b6:	83 81       	ldd	r24, Z+3	; 0x03
    31b8:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    31ba:	0e 94 9c 18 	call	0x3138	; 0x3138 <Timebase_ISR_Executables>
}
    31be:	ff 91       	pop	r31
    31c0:	ef 91       	pop	r30
    31c2:	bf 91       	pop	r27
    31c4:	af 91       	pop	r26
    31c6:	9f 91       	pop	r25
    31c8:	8f 91       	pop	r24
    31ca:	7f 91       	pop	r23
    31cc:	6f 91       	pop	r22
    31ce:	5f 91       	pop	r21
    31d0:	4f 91       	pop	r20
    31d2:	3f 91       	pop	r19
    31d4:	2f 91       	pop	r18
    31d6:	0f 90       	pop	r0
    31d8:	0f be       	out	0x3f, r0	; 63
    31da:	0f 90       	pop	r0
    31dc:	1f 90       	pop	r1
    31de:	18 95       	reti

000031e0 <__mulsi3>:
    31e0:	62 9f       	mul	r22, r18
    31e2:	d0 01       	movw	r26, r0
    31e4:	73 9f       	mul	r23, r19
    31e6:	f0 01       	movw	r30, r0
    31e8:	82 9f       	mul	r24, r18
    31ea:	e0 0d       	add	r30, r0
    31ec:	f1 1d       	adc	r31, r1
    31ee:	64 9f       	mul	r22, r20
    31f0:	e0 0d       	add	r30, r0
    31f2:	f1 1d       	adc	r31, r1
    31f4:	92 9f       	mul	r25, r18
    31f6:	f0 0d       	add	r31, r0
    31f8:	83 9f       	mul	r24, r19
    31fa:	f0 0d       	add	r31, r0
    31fc:	74 9f       	mul	r23, r20
    31fe:	f0 0d       	add	r31, r0
    3200:	65 9f       	mul	r22, r21
    3202:	f0 0d       	add	r31, r0
    3204:	99 27       	eor	r25, r25
    3206:	72 9f       	mul	r23, r18
    3208:	b0 0d       	add	r27, r0
    320a:	e1 1d       	adc	r30, r1
    320c:	f9 1f       	adc	r31, r25
    320e:	63 9f       	mul	r22, r19
    3210:	b0 0d       	add	r27, r0
    3212:	e1 1d       	adc	r30, r1
    3214:	f9 1f       	adc	r31, r25
    3216:	bd 01       	movw	r22, r26
    3218:	cf 01       	movw	r24, r30
    321a:	11 24       	eor	r1, r1
    321c:	08 95       	ret

0000321e <__udivmodsi4>:
    321e:	a1 e2       	ldi	r26, 0x21	; 33
    3220:	1a 2e       	mov	r1, r26
    3222:	aa 1b       	sub	r26, r26
    3224:	bb 1b       	sub	r27, r27
    3226:	fd 01       	movw	r30, r26
    3228:	0d c0       	rjmp	.+26     	; 0x3244 <__udivmodsi4_ep>

0000322a <__udivmodsi4_loop>:
    322a:	aa 1f       	adc	r26, r26
    322c:	bb 1f       	adc	r27, r27
    322e:	ee 1f       	adc	r30, r30
    3230:	ff 1f       	adc	r31, r31
    3232:	a2 17       	cp	r26, r18
    3234:	b3 07       	cpc	r27, r19
    3236:	e4 07       	cpc	r30, r20
    3238:	f5 07       	cpc	r31, r21
    323a:	20 f0       	brcs	.+8      	; 0x3244 <__udivmodsi4_ep>
    323c:	a2 1b       	sub	r26, r18
    323e:	b3 0b       	sbc	r27, r19
    3240:	e4 0b       	sbc	r30, r20
    3242:	f5 0b       	sbc	r31, r21

00003244 <__udivmodsi4_ep>:
    3244:	66 1f       	adc	r22, r22
    3246:	77 1f       	adc	r23, r23
    3248:	88 1f       	adc	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	1a 94       	dec	r1
    324e:	69 f7       	brne	.-38     	; 0x322a <__udivmodsi4_loop>
    3250:	60 95       	com	r22
    3252:	70 95       	com	r23
    3254:	80 95       	com	r24
    3256:	90 95       	com	r25
    3258:	9b 01       	movw	r18, r22
    325a:	ac 01       	movw	r20, r24
    325c:	bd 01       	movw	r22, r26
    325e:	cf 01       	movw	r24, r30
    3260:	08 95       	ret

00003262 <__divmodsi4>:
    3262:	97 fb       	bst	r25, 7
    3264:	09 2e       	mov	r0, r25
    3266:	05 26       	eor	r0, r21
    3268:	0e d0       	rcall	.+28     	; 0x3286 <__divmodsi4_neg1>
    326a:	57 fd       	sbrc	r21, 7
    326c:	04 d0       	rcall	.+8      	; 0x3276 <__divmodsi4_neg2>
    326e:	d7 df       	rcall	.-82     	; 0x321e <__udivmodsi4>
    3270:	0a d0       	rcall	.+20     	; 0x3286 <__divmodsi4_neg1>
    3272:	00 1c       	adc	r0, r0
    3274:	38 f4       	brcc	.+14     	; 0x3284 <__divmodsi4_exit>

00003276 <__divmodsi4_neg2>:
    3276:	50 95       	com	r21
    3278:	40 95       	com	r20
    327a:	30 95       	com	r19
    327c:	21 95       	neg	r18
    327e:	3f 4f       	sbci	r19, 0xFF	; 255
    3280:	4f 4f       	sbci	r20, 0xFF	; 255
    3282:	5f 4f       	sbci	r21, 0xFF	; 255

00003284 <__divmodsi4_exit>:
    3284:	08 95       	ret

00003286 <__divmodsi4_neg1>:
    3286:	f6 f7       	brtc	.-4      	; 0x3284 <__divmodsi4_exit>
    3288:	90 95       	com	r25
    328a:	80 95       	com	r24
    328c:	70 95       	com	r23
    328e:	61 95       	neg	r22
    3290:	7f 4f       	sbci	r23, 0xFF	; 255
    3292:	8f 4f       	sbci	r24, 0xFF	; 255
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	08 95       	ret

00003298 <_exit>:
    3298:	f8 94       	cli

0000329a <__stop_program>:
    329a:	ff cf       	rjmp	.-2      	; 0x329a <__stop_program>
