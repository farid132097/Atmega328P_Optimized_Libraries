
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00002796  0000282a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002796  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010e  00800110  00800110  0000283a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000283a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000012b9  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003dc5  00000000  00000000  00003b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ee  00000000  00000000  00007918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e50  00000000  00000000  00007f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000890  00000000  00000000  00009d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001501  00000000  00000000  0000a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001624  00000000  00000000  0000bae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000d10d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 35 13 	jmp	0x266a	; 0x266a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e9       	ldi	r30, 0x96	; 150
      7c:	f7 e2       	ldi	r31, 0x27	; 39
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 31       	cpi	r26, 0x1E	; 30
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 c9 13 	jmp	0x2792	; 0x2792 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 c4 12 	call	0x2588	; 0x2588 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <Timebase_DownCounter_SS_Set_Securely>
	UART_Transmit_Space();
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSubSec(0));
	UART_Transmit_Space();*/
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	Timebase_Timer_Delay_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 04 05 	call	0xa08	; 0xa08 <Timebase_Timer_Delay_SubSeconds>
	
	//Add update req flag
	PORTD |= (1<<6);
     118:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     11a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     11e:	5e 98       	cbi	0x0b, 6	; 11
     120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x6a>

00000122 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     122:	10 92 10 01 	sts	0x0110, r1
     126:	e1 e1       	ldi	r30, 0x11	; 17
     128:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     12a:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	e9 31       	cpi	r30, 0x19	; 25
     130:	f8 07       	cpc	r31, r24
     132:	d9 f7       	brne	.-10     	; 0x12a <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     134:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     136:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     138:	80 e2       	ldi	r24, 0x20	; 32
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	93 a3       	std	Z+35, r25	; 0x23
     13e:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     140:	15 a2       	std	Z+37, r1	; 0x25
     142:	14 a2       	std	Z+36, r1	; 0x24
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	04 c0       	rjmp	.+8      	; 0x150 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     148:	e0 5f       	subi	r30, 0xF0	; 240
     14a:	fe 4f       	sbci	r31, 0xFE	; 254
     14c:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     14e:	2f 5f       	subi	r18, 0xFF	; 255
     150:	80 91 3b 01 	lds	r24, 0x013B
     154:	90 91 3c 01 	lds	r25, 0x013C
     158:	e2 2f       	mov	r30, r18
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	e8 17       	cp	r30, r24
     15e:	f9 07       	cpc	r31, r25
     160:	98 f3       	brcs	.-26     	; 0x148 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     162:	08 95       	ret

00000164 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     164:	08 95       	ret

00000166 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     166:	08 95       	ret

00000168 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     168:	9b 01       	movw	r18, r22
     16a:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     16c:	60 e6       	ldi	r22, 0x60	; 96
     16e:	73 ee       	ldi	r23, 0xE3	; 227
     170:	86 e1       	ldi	r24, 0x16	; 22
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	0e 94 8c 13 	call	0x2718	; 0x2718 <__udivmodsi4>
     178:	21 50       	subi	r18, 0x01	; 1
     17a:	30 40       	sbci	r19, 0x00	; 0
     17c:	40 40       	sbci	r20, 0x00	; 0
     17e:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     180:	e0 ec       	ldi	r30, 0xC0	; 192
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	82 60       	ori	r24, 0x02	; 2
     188:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     18a:	bb 27       	eor	r27, r27
     18c:	a5 2f       	mov	r26, r21
     18e:	94 2f       	mov	r25, r20
     190:	83 2f       	mov	r24, r19
     192:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     196:	20 93 c4 00 	sts	0x00C4, r18
}
     19a:	08 95       	ret

0000019c <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     19c:	e1 ec       	ldi	r30, 0xC1	; 193
     19e:	f0 e0       	ldi	r31, 0x00	; 0
     1a0:	80 81       	ld	r24, Z
     1a2:	88 60       	ori	r24, 0x08	; 8
     1a4:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1a6:	86 e0       	ldi	r24, 0x06	; 6
     1a8:	80 93 c2 00 	sts	0x00C2, r24
}
     1ac:	08 95       	ret

000001ae <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1ae:	e1 ec       	ldi	r30, 0xC1	; 193
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	80 81       	ld	r24, Z
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1b8:	86 e0       	ldi	r24, 0x06	; 6
     1ba:	80 93 c2 00 	sts	0x00C2, r24
}
     1be:	08 95       	ret

000001c0 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c0:	e1 ec       	ldi	r30, 0xC1	; 193
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	80 81       	ld	r24, Z
     1c6:	80 68       	ori	r24, 0x80	; 128
     1c8:	80 83       	st	Z, r24
  sei();
     1ca:	78 94       	sei
}
     1cc:	08 95       	ret

000001ce <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1ce:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d0:	80 91 c0 00 	lds	r24, 0x00C0
     1d4:	85 ff       	sbrs	r24, 5
     1d6:	fc cf       	rjmp	.-8      	; 0x1d0 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1d8:	90 93 c6 00 	sts	0x00C6, r25
}
     1dc:	08 95       	ret

000001de <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1de:	df 93       	push	r29
     1e0:	cf 93       	push	r28
     1e2:	0f 92       	push	r0
     1e4:	cd b7       	in	r28, 0x3d	; 61
     1e6:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1e8:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1ea:	80 91 c0 00 	lds	r24, 0x00C0
     1ee:	84 ff       	sbrs	r24, 4
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <UART_Receive_Byte+0x1e>
    val=UDR0;
     1f2:	80 91 c6 00 	lds	r24, 0x00C6
     1f6:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	08 c0       	rjmp	.+16     	; 0x20c <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1fc:	80 91 c0 00 	lds	r24, 0x00C0
     200:	83 ff       	sbrs	r24, 3
     202:	07 c0       	rjmp	.+14     	; 0x212 <UART_Receive_Byte+0x34>
    val=UDR0;
     204:	80 91 c6 00 	lds	r24, 0x00C6
     208:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     20a:	82 e0       	ldi	r24, 0x02	; 2
     20c:	80 93 10 01 	sts	0x0110, r24
     210:	05 c0       	rjmp	.+10     	; 0x21c <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     212:	80 91 c6 00 	lds	r24, 0x00C6
     216:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     218:	10 92 10 01 	sts	0x0110, r1
  }
  return val;
     21c:	89 81       	ldd	r24, Y+1	; 0x01
}
     21e:	0f 90       	pop	r0
     220:	cf 91       	pop	r28
     222:	df 91       	pop	r29
     224:	08 95       	ret

00000226 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     226:	80 91 1a 01 	lds	r24, 0x011A
}
     22a:	08 95       	ret

0000022c <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     22c:	10 92 1a 01 	sts	0x011A, r1
}
     230:	08 95       	ret

00000232 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	ab 01       	movw	r20, r22
     23a:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     23c:	4f 3f       	cpi	r20, 0xFF	; 255
     23e:	51 05       	cpc	r21, r1
     240:	61 05       	cpc	r22, r1
     242:	71 05       	cpc	r23, r1
     244:	09 f0       	breq	.+2      	; 0x248 <UART_Transmit_Byte_Hex+0x16>
     246:	28 f4       	brcc	.+10     	; 0x252 <UART_Transmit_Byte_Hex+0x20>
     248:	e8 e0       	ldi	r30, 0x08	; 8
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	c2 e0       	ldi	r28, 0x02	; 2
     24e:	d0 e0       	ldi	r29, 0x00	; 0
     250:	11 c0       	rjmp	.+34     	; 0x274 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     252:	40 30       	cpi	r20, 0x00	; 0
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	58 07       	cpc	r21, r24
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	68 07       	cpc	r22, r24
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	78 07       	cpc	r23, r24
     260:	28 f0       	brcs	.+10     	; 0x26c <UART_Transmit_Byte_Hex+0x3a>
     262:	e0 e2       	ldi	r30, 0x20	; 32
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	c8 e0       	ldi	r28, 0x08	; 8
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	04 c0       	rjmp	.+8      	; 0x274 <UART_Transmit_Byte_Hex+0x42>
     26c:	e0 e1       	ldi	r30, 0x10	; 16
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	c4 e0       	ldi	r28, 0x04	; 4
     272:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     274:	80 91 c0 00 	lds	r24, 0x00C0
     278:	85 ff       	sbrs	r24, 5
     27a:	fc cf       	rjmp	.-8      	; 0x274 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     27c:	80 e3       	ldi	r24, 0x30	; 48
     27e:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     282:	80 91 c0 00 	lds	r24, 0x00C0
     286:	85 ff       	sbrs	r24, 5
     288:	fc cf       	rjmp	.-8      	; 0x282 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     28a:	88 e7       	ldi	r24, 0x78	; 120
     28c:	80 93 c6 00 	sts	0x00C6, r24
     290:	10 e0       	ldi	r17, 0x00	; 0
     292:	1f c0       	rjmp	.+62     	; 0x2d2 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     294:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     296:	db 01       	movw	r26, r22
     298:	ca 01       	movw	r24, r20
     29a:	0e 2e       	mov	r0, r30
     29c:	04 c0       	rjmp	.+8      	; 0x2a6 <UART_Transmit_Byte_Hex+0x74>
     29e:	b6 95       	lsr	r27
     2a0:	a7 95       	ror	r26
     2a2:	97 95       	ror	r25
     2a4:	87 95       	ror	r24
     2a6:	0a 94       	dec	r0
     2a8:	d2 f7       	brpl	.-12     	; 0x29e <UART_Transmit_Byte_Hex+0x6c>
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	8f 70       	andi	r24, 0x0F	; 15
     2ae:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b0:	8a 30       	cpi	r24, 0x0A	; 10
     2b2:	91 05       	cpc	r25, r1
     2b4:	20 f0       	brcs	.+8      	; 0x2be <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2b6:	9c 01       	movw	r18, r24
     2b8:	29 5c       	subi	r18, 0xC9	; 201
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2be:	9c 01       	movw	r18, r24
     2c0:	20 5d       	subi	r18, 0xD0	; 208
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2c4:	80 91 c0 00 	lds	r24, 0x00C0
     2c8:	85 ff       	sbrs	r24, 5
     2ca:	fc cf       	rjmp	.-8      	; 0x2c4 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2cc:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d0:	1f 5f       	subi	r17, 0xFF	; 255
     2d2:	81 2f       	mov	r24, r17
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	8c 17       	cp	r24, r28
     2d8:	9d 07       	cpc	r25, r29
     2da:	e0 f2       	brcs	.-72     	; 0x294 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	08 95       	ret

000002e4 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	ab 01       	movw	r20, r22
     2f6:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2f8:	4f 3f       	cpi	r20, 0xFF	; 255
     2fa:	51 05       	cpc	r21, r1
     2fc:	61 05       	cpc	r22, r1
     2fe:	71 05       	cpc	r23, r1
     300:	09 f0       	breq	.+2      	; 0x304 <UART_Transmit_Byte_Bin+0x20>
     302:	10 f4       	brcc	.+4      	; 0x308 <UART_Transmit_Byte_Bin+0x24>
     304:	97 e0       	ldi	r25, 0x07	; 7
     306:	0b c0       	rjmp	.+22     	; 0x31e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     308:	40 30       	cpi	r20, 0x00	; 0
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	58 07       	cpc	r21, r24
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	68 07       	cpc	r22, r24
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	78 07       	cpc	r23, r24
     316:	10 f0       	brcs	.+4      	; 0x31c <UART_Transmit_Byte_Bin+0x38>
     318:	9f e1       	ldi	r25, 0x1F	; 31
     31a:	01 c0       	rjmp	.+2      	; 0x31e <UART_Transmit_Byte_Bin+0x3a>
     31c:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     31e:	80 91 c0 00 	lds	r24, 0x00C0
     322:	85 ff       	sbrs	r24, 5
     324:	fc cf       	rjmp	.-8      	; 0x31e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     326:	80 e3       	ldi	r24, 0x30	; 48
     328:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     32c:	80 91 c0 00 	lds	r24, 0x00C0
     330:	85 ff       	sbrs	r24, 5
     332:	fc cf       	rjmp	.-8      	; 0x32c <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     334:	82 e6       	ldi	r24, 0x62	; 98
     336:	80 93 c6 00 	sts	0x00C6, r24
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     33e:	e9 2f       	mov	r30, r25
     340:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     342:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     344:	11 e3       	ldi	r17, 0x31	; 49
     346:	ef 01       	movw	r28, r30
     348:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     34a:	cf 01       	movw	r24, r30
     34c:	82 1b       	sub	r24, r18
     34e:	93 0b       	sbc	r25, r19
     350:	6a 01       	movw	r12, r20
     352:	7b 01       	movw	r14, r22
     354:	04 c0       	rjmp	.+8      	; 0x35e <UART_Transmit_Byte_Bin+0x7a>
     356:	f6 94       	lsr	r15
     358:	e7 94       	ror	r14
     35a:	d7 94       	ror	r13
     35c:	c7 94       	ror	r12
     35e:	8a 95       	dec	r24
     360:	d2 f7       	brpl	.-12     	; 0x356 <UART_Transmit_Byte_Bin+0x72>
     362:	d7 01       	movw	r26, r14
     364:	c6 01       	movw	r24, r12
     366:	81 70       	andi	r24, 0x01	; 1
     368:	90 70       	andi	r25, 0x00	; 0
     36a:	89 2b       	or	r24, r25
     36c:	39 f0       	breq	.+14     	; 0x37c <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     36e:	80 91 c0 00 	lds	r24, 0x00C0
     372:	85 ff       	sbrs	r24, 5
     374:	fc cf       	rjmp	.-8      	; 0x36e <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     376:	10 93 c6 00 	sts	0x00C6, r17
     37a:	06 c0       	rjmp	.+12     	; 0x388 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     37c:	80 91 c0 00 	lds	r24, 0x00C0
     380:	85 ff       	sbrs	r24, 5
     382:	fc cf       	rjmp	.-8      	; 0x37c <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     384:	00 93 c6 00 	sts	0x00C6, r16
     388:	2f 5f       	subi	r18, 0xFF	; 255
     38a:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     38c:	2c 17       	cp	r18, r28
     38e:	3d 07       	cpc	r19, r29
     390:	e1 f6       	brne	.-72     	; 0x34a <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	08 95       	ret

000003a4 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3a4:	ac 01       	movw	r20, r24
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3aa:	80 91 c0 00 	lds	r24, 0x00C0
     3ae:	85 ff       	sbrs	r24, 5
     3b0:	fc cf       	rjmp	.-8      	; 0x3aa <UART_Transmit_Text+0x6>
  UDR0=val;
     3b2:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3b8:	fa 01       	movw	r30, r20
     3ba:	e2 0f       	add	r30, r18
     3bc:	f1 1d       	adc	r31, r1
     3be:	e0 81       	ld	r30, Z
     3c0:	ee 23       	and	r30, r30
     3c2:	99 f7       	brne	.-26     	; 0x3aa <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3c4:	08 95       	ret

000003c6 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <UART_Transmit_Text>
}
     3ce:	08 95       	ret

000003d0 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <UART_Transmit_Text>
}
     3d8:	08 95       	ret

000003da <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3da:	bf 92       	push	r11
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	6b 01       	movw	r12, r22
     3ea:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3ec:	61 15       	cp	r22, r1
     3ee:	71 05       	cpc	r23, r1
     3f0:	81 05       	cpc	r24, r1
     3f2:	91 05       	cpc	r25, r1
     3f4:	31 f4       	brne	.+12     	; 0x402 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3f6:	10 92 11 01 	sts	0x0111, r1
    UART.InputNumberDigits=1;
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 19 01 	sts	0x0119, r24
     400:	23 c0       	rjmp	.+70     	; 0x448 <UART_Determine_Digit_Numbers+0x6e>
     402:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     404:	0b 2d       	mov	r16, r11
     406:	10 e0       	ldi	r17, 0x00	; 0
     408:	00 5f       	subi	r16, 0xF0	; 240
     40a:	1e 4f       	sbci	r17, 0xFE	; 254
     40c:	c7 01       	movw	r24, r14
     40e:	b6 01       	movw	r22, r12
     410:	2a e0       	ldi	r18, 0x0A	; 10
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	0e 94 8c 13 	call	0x2718	; 0x2718 <__udivmodsi4>
     41c:	f8 01       	movw	r30, r16
     41e:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	2a e0       	ldi	r18, 0x0A	; 10
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	40 e0       	ldi	r20, 0x00	; 0
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	0e 94 8c 13 	call	0x2718	; 0x2718 <__udivmodsi4>
     430:	c9 01       	movw	r24, r18
     432:	da 01       	movw	r26, r20
     434:	6c 01       	movw	r12, r24
     436:	7d 01       	movw	r14, r26
      i++;
     438:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     43a:	c1 14       	cp	r12, r1
     43c:	d1 04       	cpc	r13, r1
     43e:	e1 04       	cpc	r14, r1
     440:	f1 04       	cpc	r15, r1
     442:	01 f7       	brne	.-64     	; 0x404 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     444:	b0 92 19 01 	sts	0x0119, r11
  }
}
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	08 95       	ret

00000458 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     458:	e0 91 19 01 	lds	r30, 0x0119
     45c:	0f c0       	rjmp	.+30     	; 0x47c <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     45e:	2e 2f       	mov	r18, r30
     460:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     462:	e2 2f       	mov	r30, r18
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	e0 5f       	subi	r30, 0xF0	; 240
     468:	fe 4f       	sbci	r31, 0xFE	; 254
     46a:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     46c:	80 91 c0 00 	lds	r24, 0x00C0
     470:	85 ff       	sbrs	r24, 5
     472:	fc cf       	rjmp	.-8      	; 0x46c <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     474:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     476:	90 93 c6 00 	sts	0x00C6, r25
     47a:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     47c:	ee 23       	and	r30, r30
     47e:	79 f7       	brne	.-34     	; 0x45e <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     480:	08 95       	ret

00000482 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     482:	9b 01       	movw	r18, r22
     484:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     486:	97 ff       	sbrs	r25, 7
     488:	0e c0       	rjmp	.+28     	; 0x4a6 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     48a:	80 91 c0 00 	lds	r24, 0x00C0
     48e:	85 ff       	sbrs	r24, 5
     490:	fc cf       	rjmp	.-8      	; 0x48a <UART_Transmit_Number+0x8>
  UDR0=val;
     492:	8d e2       	ldi	r24, 0x2D	; 45
     494:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     498:	50 95       	com	r21
     49a:	40 95       	com	r20
     49c:	30 95       	com	r19
     49e:	21 95       	neg	r18
     4a0:	3f 4f       	sbci	r19, 0xFF	; 255
     4a2:	4f 4f       	sbci	r20, 0xFF	; 255
     4a4:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4a6:	ca 01       	movw	r24, r20
     4a8:	b9 01       	movw	r22, r18
     4aa:	0e 94 ed 01 	call	0x3da	; 0x3da <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4ae:	0e 94 2c 02 	call	0x458	; 0x458 <UART_Transmit_Number_Digits>
}
     4b2:	08 95       	ret

000004b4 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4b4:	fc 01       	movw	r30, r24
     4b6:	e0 5f       	subi	r30, 0xF0	; 240
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4bc:	08 95       	ret

000004be <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4be:	20 91 3d 01 	lds	r18, 0x013D
     4c2:	30 91 3e 01 	lds	r19, 0x013E
}
     4c6:	c9 01       	movw	r24, r18
     4c8:	08 95       	ret

000004ca <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4ca:	10 92 10 01 	sts	0x0110, r1
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4d4:	f9 01       	movw	r30, r18
     4d6:	e0 5f       	subi	r30, 0xF0	; 240
     4d8:	fe 4f       	sbci	r31, 0xFE	; 254
     4da:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4dc:	2f 5f       	subi	r18, 0xFF	; 255
     4de:	3f 4f       	sbci	r19, 0xFF	; 255
     4e0:	80 91 3b 01 	lds	r24, 0x013B
     4e4:	90 91 3c 01 	lds	r25, 0x013C
     4e8:	28 17       	cp	r18, r24
     4ea:	39 07       	cpc	r19, r25
     4ec:	98 f3       	brcs	.-26     	; 0x4d4 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4ee:	10 92 3e 01 	sts	0x013E, r1
     4f2:	10 92 3d 01 	sts	0x013D, r1
  #endif
}
     4f6:	08 95       	ret

000004f8 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4f8:	df 93       	push	r29
     4fa:	cf 93       	push	r28
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     502:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     504:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_Receive_Byte>
     508:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     50a:	80 91 10 01 	lds	r24, 0x0110
     50e:	88 23       	and	r24, r24
     510:	19 f5       	brne	.+70     	; 0x558 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     512:	89 81       	ldd	r24, Y+1	; 0x01
     514:	80 93 1a 01 	sts	0x011A, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     518:	e0 91 3d 01 	lds	r30, 0x013D
     51c:	f0 91 3e 01 	lds	r31, 0x013E
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	e0 5f       	subi	r30, 0xF0	; 240
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     528:	80 91 3d 01 	lds	r24, 0x013D
     52c:	90 91 3e 01 	lds	r25, 0x013E
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	90 93 3e 01 	sts	0x013E, r25
     536:	80 93 3d 01 	sts	0x013D, r24

    if(UART.BufferIndex>=UART.BufferSize){
     53a:	20 91 3d 01 	lds	r18, 0x013D
     53e:	30 91 3e 01 	lds	r19, 0x013E
     542:	80 91 3b 01 	lds	r24, 0x013B
     546:	90 91 3c 01 	lds	r25, 0x013C
     54a:	28 17       	cp	r18, r24
     54c:	39 07       	cpc	r19, r25
     54e:	20 f0       	brcs	.+8      	; 0x558 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     550:	10 92 3e 01 	sts	0x013E, r1
     554:	10 92 3d 01 	sts	0x013D, r1
    }
  }
}
     558:	0f 90       	pop	r0
     55a:	cf 91       	pop	r28
     55c:	df 91       	pop	r29
     55e:	08 95       	ret

00000560 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	2f 93       	push	r18
     56c:	3f 93       	push	r19
     56e:	4f 93       	push	r20
     570:	5f 93       	push	r21
     572:	6f 93       	push	r22
     574:	7f 93       	push	r23
     576:	8f 93       	push	r24
     578:	9f 93       	push	r25
     57a:	af 93       	push	r26
     57c:	bf 93       	push	r27
     57e:	ef 93       	push	r30
     580:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     582:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <UART_Interrupt_Service_Routine>
}
     586:	ff 91       	pop	r31
     588:	ef 91       	pop	r30
     58a:	bf 91       	pop	r27
     58c:	af 91       	pop	r26
     58e:	9f 91       	pop	r25
     590:	8f 91       	pop	r24
     592:	7f 91       	pop	r23
     594:	6f 91       	pop	r22
     596:	5f 91       	pop	r21
     598:	4f 91       	pop	r20
     59a:	3f 91       	pop	r19
     59c:	2f 91       	pop	r18
     59e:	0f 90       	pop	r0
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	0f 90       	pop	r0
     5a4:	1f 90       	pop	r1
     5a6:	18 95       	reti

000005a8 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	7b 01       	movw	r14, r22
     5b2:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5b4:	0e 94 91 00 	call	0x122	; 0x122 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5b8:	c8 01       	movw	r24, r16
     5ba:	b7 01       	movw	r22, r14
     5bc:	0e 94 b4 00 	call	0x168	; 0x168 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c0:	e1 ec       	ldi	r30, 0xC1	; 193
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	88 60       	ori	r24, 0x08	; 8
     5c8:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ca:	a2 ec       	ldi	r26, 0xC2	; 194
     5cc:	b0 e0       	ldi	r27, 0x00	; 0
     5ce:	96 e0       	ldi	r25, 0x06	; 6
     5d0:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5d2:	80 81       	ld	r24, Z
     5d4:	80 61       	ori	r24, 0x10	; 16
     5d6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d8:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 68       	ori	r24, 0x80	; 128
     5de:	80 83       	st	Z, r24
  sei();
     5e0:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5e2:	0e 94 65 02 	call	0x4ca	; 0x4ca <UART_Flush_Buffer>
}
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	08 95       	ret

000005f0 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f0:	81 e4       	ldi	r24, 0x41	; 65
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	90 93 40 01 	sts	0x0140, r25
     5f8:	80 93 3f 01 	sts	0x013F, r24
  Timebase->Config.TimerType.Value = 0;
     5fc:	10 92 41 01 	sts	0x0141, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     600:	80 91 41 01 	lds	r24, 0x0141
     604:	84 60       	ori	r24, 0x04	; 4
     606:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     60a:	80 91 41 01 	lds	r24, 0x0141
     60e:	87 70       	andi	r24, 0x07	; 7
     610:	80 93 41 01 	sts	0x0141, r24
  Timebase->Config.UpdateRate = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	90 93 43 01 	sts	0x0143, r25
     61c:	80 93 42 01 	sts	0x0142, r24
  Timebase->Time.OVFUpdateValue=0;
     620:	10 92 44 01 	sts	0x0144, r1
  Timebase->Time.SubSeconds = 0;
     624:	10 92 4a 01 	sts	0x014A, r1
     628:	10 92 49 01 	sts	0x0149, r1
  Timebase->Time.Seconds = 0;
     62c:	10 92 4b 01 	sts	0x014B, r1
     630:	10 92 4c 01 	sts	0x014C, r1
     634:	10 92 4d 01 	sts	0x014D, r1
     638:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.LastSample = 0;
     63c:	10 92 45 01 	sts	0x0145, r1
     640:	10 92 46 01 	sts	0x0146, r1
     644:	10 92 47 01 	sts	0x0147, r1
     648:	10 92 48 01 	sts	0x0148, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     64c:	10 92 4f 01 	sts	0x014F, r1
     650:	10 92 50 01 	sts	0x0150, r1
     654:	10 92 51 01 	sts	0x0151, r1
     658:	10 92 52 01 	sts	0x0152, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     65c:	10 92 53 01 	sts	0x0153, r1
     660:	10 92 54 01 	sts	0x0154, r1
     664:	10 92 55 01 	sts	0x0155, r1
     668:	10 92 56 01 	sts	0x0156, r1
	Timebase->Time.Status = 0;
     66c:	10 92 57 01 	sts	0x0157, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     670:	10 92 58 01 	sts	0x0158, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     674:	10 92 59 01 	sts	0x0159, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     678:	10 92 73 01 	sts	0x0173, r1
    Timebase->UpCounter[i].EndValue = 0;
     67c:	10 92 74 01 	sts	0x0174, r1
     680:	10 92 75 01 	sts	0x0175, r1
     684:	10 92 76 01 	sts	0x0176, r1
     688:	10 92 77 01 	sts	0x0177, r1
    Timebase->UpCounter[i].Target = 0;
     68c:	10 92 78 01 	sts	0x0178, r1
     690:	10 92 79 01 	sts	0x0179, r1
     694:	10 92 7a 01 	sts	0x017A, r1
     698:	10 92 7b 01 	sts	0x017B, r1
    Timebase->UpCounter[i].Temporary = 0;    
     69c:	10 92 7c 01 	sts	0x017C, r1
     6a0:	10 92 7d 01 	sts	0x017D, r1
     6a4:	10 92 7e 01 	sts	0x017E, r1
     6a8:	10 92 7f 01 	sts	0x017F, r1
    Timebase->UpCounter[i].Value = 0;
     6ac:	10 92 80 01 	sts	0x0180, r1
     6b0:	10 92 81 01 	sts	0x0181, r1
     6b4:	10 92 82 01 	sts	0x0182, r1
     6b8:	10 92 83 01 	sts	0x0183, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6bc:	10 92 84 01 	sts	0x0184, r1
     6c0:	10 92 85 01 	sts	0x0185, r1
     6c4:	10 92 86 01 	sts	0x0186, r1
     6c8:	10 92 87 01 	sts	0x0187, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6cc:	10 92 5a 01 	sts	0x015A, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6d0:	10 92 5b 01 	sts	0x015B, r1
     6d4:	10 92 5c 01 	sts	0x015C, r1
     6d8:	10 92 5d 01 	sts	0x015D, r1
     6dc:	10 92 5e 01 	sts	0x015E, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     6e0:	10 92 5f 01 	sts	0x015F, r1
     6e4:	10 92 60 01 	sts	0x0160, r1
     6e8:	10 92 61 01 	sts	0x0161, r1
     6ec:	10 92 62 01 	sts	0x0162, r1
    Timebase->UpCounterSS[i].Target = 0;
     6f0:	10 92 63 01 	sts	0x0163, r1
     6f4:	10 92 64 01 	sts	0x0164, r1
     6f8:	10 92 65 01 	sts	0x0165, r1
     6fc:	10 92 66 01 	sts	0x0166, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     700:	10 92 67 01 	sts	0x0167, r1
     704:	10 92 68 01 	sts	0x0168, r1
     708:	10 92 69 01 	sts	0x0169, r1
     70c:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounterSS[i].Value = 0;
     710:	10 92 6b 01 	sts	0x016B, r1
     714:	10 92 6c 01 	sts	0x016C, r1
     718:	10 92 6d 01 	sts	0x016D, r1
     71c:	10 92 6e 01 	sts	0x016E, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     720:	10 92 6f 01 	sts	0x016F, r1
     724:	10 92 70 01 	sts	0x0170, r1
     728:	10 92 71 01 	sts	0x0171, r1
     72c:	10 92 72 01 	sts	0x0172, r1
     730:	ae ed       	ldi	r26, 0xDE	; 222
     732:	b1 e0       	ldi	r27, 0x01	; 1
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     738:	2d e0       	ldi	r18, 0x0D	; 13
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	82 9f       	mul	r24, r18
     73e:	f0 01       	movw	r30, r0
     740:	83 9f       	mul	r24, r19
     742:	f0 0d       	add	r31, r0
     744:	92 9f       	mul	r25, r18
     746:	f0 0d       	add	r31, r0
     748:	11 24       	eor	r1, r1
     74a:	e3 52       	subi	r30, 0x23	; 35
     74c:	fe 4f       	sbci	r31, 0xFE	; 254
     74e:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     750:	1d 92       	st	X+, r1
     752:	1d 92       	st	X+, r1
     754:	1d 92       	st	X+, r1
     756:	1c 92       	st	X, r1
     758:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     75a:	14 96       	adiw	r26, 0x04	; 4
     75c:	1d 92       	st	X+, r1
     75e:	1d 92       	st	X+, r1
     760:	1d 92       	st	X+, r1
     762:	1c 92       	st	X, r1
     764:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     766:	18 96       	adiw	r26, 0x08	; 8
     768:	1d 92       	st	X+, r1
     76a:	1d 92       	st	X+, r1
     76c:	1d 92       	st	X+, r1
     76e:	1c 92       	st	X, r1
     770:	1b 97       	sbiw	r26, 0x0b	; 11
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     776:	85 30       	cpi	r24, 0x05	; 5
     778:	91 05       	cpc	r25, r1
     77a:	01 f7       	brne	.-64     	; 0x73c <Timebase_Struct_Init+0x14c>
     77c:	a9 e8       	ldi	r26, 0x89	; 137
     77e:	b1 e0       	ldi	r27, 0x01	; 1
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     784:	fc 01       	movw	r30, r24
     786:	24 e0       	ldi	r18, 0x04	; 4
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	2a 95       	dec	r18
     78e:	e1 f7       	brne	.-8      	; 0x788 <Timebase_Struct_Init+0x198>
     790:	e8 0f       	add	r30, r24
     792:	f9 1f       	adc	r31, r25
     794:	e8 57       	subi	r30, 0x78	; 120
     796:	fe 4f       	sbci	r31, 0xFE	; 254
     798:	10 82       	st	Z, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     79a:	1d 92       	st	X+, r1
     79c:	1d 92       	st	X+, r1
     79e:	1d 92       	st	X+, r1
     7a0:	1c 92       	st	X, r1
     7a2:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     7a4:	14 96       	adiw	r26, 0x04	; 4
     7a6:	1d 92       	st	X+, r1
     7a8:	1d 92       	st	X+, r1
     7aa:	1d 92       	st	X+, r1
     7ac:	1c 92       	st	X, r1
     7ae:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     7b0:	18 96       	adiw	r26, 0x08	; 8
     7b2:	1d 92       	st	X+, r1
     7b4:	1d 92       	st	X+, r1
     7b6:	1d 92       	st	X+, r1
     7b8:	1c 92       	st	X, r1
     7ba:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7bc:	1c 96       	adiw	r26, 0x0c	; 12
     7be:	1d 92       	st	X+, r1
     7c0:	1d 92       	st	X+, r1
     7c2:	1d 92       	st	X+, r1
     7c4:	1c 92       	st	X, r1
     7c6:	1f 97       	sbiw	r26, 0x0f	; 15
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     7cc:	85 30       	cpi	r24, 0x05	; 5
     7ce:	91 05       	cpc	r25, r1
     7d0:	c9 f6       	brne	.-78     	; 0x784 <Timebase_Struct_Init+0x194>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     7d2:	08 95       	ret

000007d4 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	df 93       	push	r29
     7ec:	cf 93       	push	r28
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	2a 97       	sbiw	r28, 0x0a	; 10
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	f8 94       	cli
     7f8:	de bf       	out	0x3e, r29	; 62
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	cd bf       	out	0x3d, r28	; 61
     7fe:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     800:	c0 90 3f 01 	lds	r12, 0x013F
     804:	d0 90 40 01 	lds	r13, 0x0140
     808:	f6 01       	movw	r30, r12
     80a:	80 81       	ld	r24, Z
     80c:	80 ff       	sbrs	r24, 0
     80e:	31 c0       	rjmp	.+98     	; 0x872 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     810:	01 30       	cpi	r16, 0x01	; 1
     812:	11 05       	cpc	r17, r1
     814:	11 f4       	brne	.+4      	; 0x81a <Timebase_Timer_Config+0x46>
     816:	96 e0       	ldi	r25, 0x06	; 6
     818:	19 c0       	rjmp	.+50     	; 0x84c <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     81a:	02 30       	cpi	r16, 0x02	; 2
     81c:	11 05       	cpc	r17, r1
     81e:	11 f4       	brne	.+4      	; 0x824 <Timebase_Timer_Config+0x50>
     820:	95 e0       	ldi	r25, 0x05	; 5
     822:	14 c0       	rjmp	.+40     	; 0x84c <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     824:	04 30       	cpi	r16, 0x04	; 4
     826:	11 05       	cpc	r17, r1
     828:	11 f4       	brne	.+4      	; 0x82e <Timebase_Timer_Config+0x5a>
     82a:	94 e0       	ldi	r25, 0x04	; 4
     82c:	0f c0       	rjmp	.+30     	; 0x84c <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     82e:	08 30       	cpi	r16, 0x08	; 8
     830:	11 05       	cpc	r17, r1
     832:	11 f4       	brne	.+4      	; 0x838 <Timebase_Timer_Config+0x64>
     834:	93 e0       	ldi	r25, 0x03	; 3
     836:	0a c0       	rjmp	.+20     	; 0x84c <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     838:	00 31       	cpi	r16, 0x10	; 16
     83a:	11 05       	cpc	r17, r1
     83c:	11 f4       	brne	.+4      	; 0x842 <Timebase_Timer_Config+0x6e>
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	05 c0       	rjmp	.+10     	; 0x84c <Timebase_Timer_Config+0x78>
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	00 32       	cpi	r16, 0x20	; 32
     846:	11 05       	cpc	r17, r1
     848:	09 f4       	brne	.+2      	; 0x84c <Timebase_Timer_Config+0x78>
     84a:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     84c:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     84e:	84 b7       	in	r24, 0x34	; 52
     850:	87 7f       	andi	r24, 0xF7	; 247
     852:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     854:	80 91 60 00 	lds	r24, 0x0060
     858:	80 68       	ori	r24, 0x80	; 128
     85a:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     85e:	80 91 60 00 	lds	r24, 0x0060
     862:	88 61       	ori	r24, 0x18	; 24
     864:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     868:	90 64       	ori	r25, 0x40	; 64
     86a:	90 93 60 00 	sts	0x0060, r25
    sei();
     86e:	78 94       	sei
     870:	67 c0       	rjmp	.+206    	; 0x940 <__stack+0x41>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     872:	81 fd       	sbrc	r24, 1
     874:	65 c0       	rjmp	.+202    	; 0x940 <__stack+0x41>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     876:	82 ff       	sbrs	r24, 2
     878:	63 c0       	rjmp	.+198    	; 0x940 <__stack+0x41>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     87a:	de 01       	movw	r26, r28
     87c:	11 96       	adiw	r26, 0x01	; 1
     87e:	e5 e0       	ldi	r30, 0x05	; 5
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	8a e0       	ldi	r24, 0x0A	; 10
     884:	01 90       	ld	r0, Z+
     886:	0d 92       	st	X+, r0
     888:	81 50       	subi	r24, 0x01	; 1
     88a:	e1 f7       	brne	.-8      	; 0x884 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     88c:	98 01       	movw	r18, r16
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	7b e1       	ldi	r23, 0x1B	; 27
     896:	87 eb       	ldi	r24, 0xB7	; 183
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
     89e:	72 2e       	mov	r7, r18
     8a0:	83 2e       	mov	r8, r19
     8a2:	94 2e       	mov	r9, r20
     8a4:	e5 2e       	mov	r14, r21
     8a6:	5e 01       	movw	r10, r28
     8a8:	08 94       	sec
     8aa:	a1 1c       	adc	r10, r1
     8ac:	b1 1c       	adc	r11, r1
     8ae:	c9 01       	movw	r24, r18
     8b0:	da 01       	movw	r26, r20
     8b2:	9c 01       	movw	r18, r24
     8b4:	ad 01       	movw	r20, r26
     8b6:	ff 24       	eor	r15, r15
     8b8:	14 c0       	rjmp	.+40     	; 0x8e2 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     8ba:	f5 01       	movw	r30, r10
     8bc:	21 91       	ld	r18, Z+
     8be:	31 91       	ld	r19, Z+
     8c0:	5f 01       	movw	r10, r30
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	67 2d       	mov	r22, r7
     8c8:	78 2d       	mov	r23, r8
     8ca:	89 2d       	mov	r24, r9
     8cc:	9e 2d       	mov	r25, r14
     8ce:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
     8d2:	c9 01       	movw	r24, r18
     8d4:	da 01       	movw	r26, r20
     8d6:	9c 01       	movw	r18, r24
     8d8:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8da:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8dc:	f5 e0       	ldi	r31, 0x05	; 5
     8de:	ff 16       	cp	r15, r31
     8e0:	31 f0       	breq	.+12     	; 0x8ee <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8e2:	2f 3f       	cpi	r18, 0xFF	; 255
     8e4:	31 05       	cpc	r19, r1
     8e6:	41 05       	cpc	r20, r1
     8e8:	51 05       	cpc	r21, r1
     8ea:	09 f0       	breq	.+2      	; 0x8ee <Timebase_Timer_Config+0x11a>
     8ec:	34 f7       	brge	.-52     	; 0x8ba <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8ee:	8f 2d       	mov	r24, r15
     8f0:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8f2:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8f4:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8f6:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8fa:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8fc:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8fe:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     900:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     902:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     904:	88 23       	and	r24, r24
     906:	11 f4       	brne	.+4      	; 0x90c <__stack+0xd>
	  TCCR0B = (1<<CS00);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0f c0       	rjmp	.+30     	; 0x92a <__stack+0x2b>
	}else if(clock_div_index == 1){
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	11 f4       	brne	.+4      	; 0x914 <__stack+0x15>
	  TCCR0B = (1<<CS01);
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0x2b>
	}else if(clock_div_index == 2){
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	11 f4       	brne	.+4      	; 0x91c <__stack+0x1d>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	07 c0       	rjmp	.+14     	; 0x92a <__stack+0x2b>
	}else if(clock_div_index == 3){
     91c:	83 30       	cpi	r24, 0x03	; 3
     91e:	11 f4       	brne	.+4      	; 0x924 <__stack+0x25>
	  TCCR0B = (1<<CS02);
     920:	84 e0       	ldi	r24, 0x04	; 4
     922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
	}else if(clock_div_index == 4){
     924:	84 30       	cpi	r24, 0x04	; 4
     926:	11 f4       	brne	.+4      	; 0x92c <__stack+0x2d>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     928:	85 e0       	ldi	r24, 0x05	; 5
     92a:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     92c:	82 2f       	mov	r24, r18
     92e:	80 95       	com	r24
     930:	f6 01       	movw	r30, r12
     932:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     934:	83 81       	ldd	r24, Z+3	; 0x03
     936:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	80 93 6e 00 	sts	0x006E, r24
    sei();
     93e:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     940:	f6 01       	movw	r30, r12
     942:	12 83       	std	Z+2, r17	; 0x02
     944:	01 83       	std	Z+1, r16	; 0x01
}
     946:	2a 96       	adiw	r28, 0x0a	; 10
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	cf 91       	pop	r28
     954:	df 91       	pop	r29
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ff 90       	pop	r15
     95c:	ef 90       	pop	r14
     95e:	df 90       	pop	r13
     960:	cf 90       	pop	r12
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	7f 90       	pop	r7
     96c:	08 95       	ret

0000096e <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     96e:	f8 94       	cli
}
     970:	08 95       	ret

00000972 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     972:	78 94       	sei
}
     974:	08 95       	ret

00000976 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     976:	e0 91 3f 01 	lds	r30, 0x013F
     97a:	f0 91 40 01 	lds	r31, 0x0140
     97e:	80 8d       	ldd	r24, Z+24	; 0x18
}
     980:	08 95       	ret

00000982 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     982:	e0 91 3f 01 	lds	r30, 0x013F
     986:	f0 91 40 01 	lds	r31, 0x0140
     98a:	80 8d       	ldd	r24, Z+24	; 0x18
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     98c:	8f 33       	cpi	r24, 0x3F	; 63
     98e:	18 f4       	brcc	.+6      	; 0x996 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     990:	80 8d       	ldd	r24, Z+24	; 0x18
     992:	8f 5f       	subi	r24, 0xFF	; 255
     994:	80 8f       	std	Z+24, r24	; 0x18
     996:	08 95       	ret

00000998 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     998:	e0 91 3f 01 	lds	r30, 0x013F
     99c:	f0 91 40 01 	lds	r31, 0x0140
     9a0:	80 8d       	ldd	r24, Z+24	; 0x18
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     9a2:	88 23       	and	r24, r24
     9a4:	19 f0       	breq	.+6      	; 0x9ac <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     9a6:	80 8d       	ldd	r24, Z+24	; 0x18
     9a8:	81 50       	subi	r24, 0x01	; 1
     9aa:	80 8f       	std	Z+24, r24	; 0x18
     9ac:	08 95       	ret

000009ae <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     9ae:	e0 91 3f 01 	lds	r30, 0x013F
     9b2:	f0 91 40 01 	lds	r31, 0x0140
     9b6:	10 8e       	std	Z+24, r1	; 0x18
}
     9b8:	08 95       	ret

000009ba <Timebase_Timer_Get_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9ba:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     9bc:	e0 91 3f 01 	lds	r30, 0x013F
     9c0:	f0 91 40 01 	lds	r31, 0x0140
     9c4:	20 85       	ldd	r18, Z+8	; 0x08
     9c6:	31 85       	ldd	r19, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9c8:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_ss;
  #else
  return Timebase->Time.SubSeconds;
  #endif
}
     9ca:	c9 01       	movw	r24, r18
     9cc:	08 95       	ret

000009ce <Timebase_Timer_Get_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9ce:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9d0:	e0 91 3f 01 	lds	r30, 0x013F
     9d4:	f0 91 40 01 	lds	r31, 0x0140
     9d8:	22 85       	ldd	r18, Z+10	; 0x0a
     9da:	33 85       	ldd	r19, Z+11	; 0x0b
     9dc:	44 85       	ldd	r20, Z+12	; 0x0c
     9de:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9e0:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_s;
  #else
  Timebase->Time.Seconds;
  #endif
}
     9e2:	b9 01       	movw	r22, r18
     9e4:	ca 01       	movw	r24, r20
     9e6:	08 95       	ret

000009e8 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     9e8:	e0 91 3f 01 	lds	r30, 0x013F
     9ec:	f0 91 40 01 	lds	r31, 0x0140
     9f0:	91 87       	std	Z+9, r25	; 0x09
     9f2:	80 87       	std	Z+8, r24	; 0x08
}
     9f4:	08 95       	ret

000009f6 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     9f6:	e0 91 3f 01 	lds	r30, 0x013F
     9fa:	f0 91 40 01 	lds	r31, 0x0140
     9fe:	62 87       	std	Z+10, r22	; 0x0a
     a00:	73 87       	std	Z+11, r23	; 0x0b
     a02:	84 87       	std	Z+12, r24	; 0x0c
     a04:	95 87       	std	Z+13, r25	; 0x0d
}
     a06:	08 95       	ret

00000a08 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     a08:	6f 92       	push	r6
     a0a:	7f 92       	push	r7
     a0c:	8f 92       	push	r8
     a0e:	9f 92       	push	r9
     a10:	af 92       	push	r10
     a12:	bf 92       	push	r11
     a14:	cf 92       	push	r12
     a16:	df 92       	push	r13
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a26:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a28:	c0 91 3f 01 	lds	r28, 0x013F
     a2c:	d0 91 40 01 	lds	r29, 0x0140
     a30:	e8 84       	ldd	r14, Y+8	; 0x08
     a32:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a34:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a36:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a38:	2a 85       	ldd	r18, Y+10	; 0x0a
     a3a:	3b 85       	ldd	r19, Y+11	; 0x0b
     a3c:	4c 85       	ldd	r20, Y+12	; 0x0c
     a3e:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a40:	78 94       	sei
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a42:	69 81       	ldd	r22, Y+1	; 0x01
     a44:	7a 81       	ldd	r23, Y+2	; 0x02
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__mulsi3>
     a4e:	3b 01       	movw	r6, r22
     a50:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a52:	00 e0       	ldi	r16, 0x00	; 0
     a54:	10 e0       	ldi	r17, 0x00	; 0
     a56:	6e 0c       	add	r6, r14
     a58:	7f 1c       	adc	r7, r15
     a5a:	80 1e       	adc	r8, r16
     a5c:	91 1e       	adc	r9, r17
  smpl_val += value;
     a5e:	cc 24       	eor	r12, r12
     a60:	dd 24       	eor	r13, r13
     a62:	6a 0c       	add	r6, r10
     a64:	7b 1c       	adc	r7, r11
     a66:	8c 1c       	adc	r8, r12
     a68:	9d 1c       	adc	r9, r13
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	16 c0       	rjmp	.+44     	; 0xaa0 <Timebase_Timer_Delay_SubSeconds+0x98>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a74:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a76:	e8 84       	ldd	r14, Y+8	; 0x08
     a78:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a7a:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a7c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a7e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a80:	3b 85       	ldd	r19, Y+11	; 0x0b
     a82:	4c 85       	ldd	r20, Y+12	; 0x0c
     a84:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a86:	78 94       	sei
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     a88:	69 81       	ldd	r22, Y+1	; 0x01
     a8a:	7a 81       	ldd	r23, Y+2	; 0x02
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__mulsi3>
	curr_val += curr_ss;
     a94:	00 e0       	ldi	r16, 0x00	; 0
     a96:	10 e0       	ldi	r17, 0x00	; 0
     a98:	6e 0d       	add	r22, r14
     a9a:	7f 1d       	adc	r23, r15
     a9c:	80 1f       	adc	r24, r16
     a9e:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     aa0:	66 15       	cp	r22, r6
     aa2:	77 05       	cpc	r23, r7
     aa4:	88 05       	cpc	r24, r8
     aa6:	99 05       	cpc	r25, r9
     aa8:	2c f3       	brlt	.-54     	; 0xa74 <Timebase_Timer_Delay_SubSeconds+0x6c>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	9f 90       	pop	r9
     ac0:	8f 90       	pop	r8
     ac2:	7f 90       	pop	r7
     ac4:	6f 90       	pop	r6
     ac6:	08 95       	ret

00000ac8 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     ac8:	bc 01       	movw	r22, r24

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     aca:	e0 91 3f 01 	lds	r30, 0x013F
     ace:	f0 91 40 01 	lds	r31, 0x0140

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ad2:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ad4:	80 85       	ldd	r24, Z+8	; 0x08
     ad6:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ad8:	78 94       	sei
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     ada:	24 81       	ldd	r18, Z+4	; 0x04
     adc:	35 81       	ldd	r19, Z+5	; 0x05
     ade:	46 81       	ldd	r20, Z+6	; 0x06
     ae0:	57 81       	ldd	r21, Z+7	; 0x07
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	82 17       	cp	r24, r18
     ae8:	93 07       	cpc	r25, r19
     aea:	a4 07       	cpc	r26, r20
     aec:	b5 07       	cpc	r27, r21
     aee:	89 f7       	brne	.-30     	; 0xad2 <Timebase_Timer_Await_SubSeconds+0xa>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     af0:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     af2:	80 85       	ldd	r24, Z+8	; 0x08
     af4:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     af6:	78 94       	sei


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     af8:	86 0f       	add	r24, r22
     afa:	97 1f       	adc	r25, r23
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	84 83       	std	Z+4, r24	; 0x04
     b02:	95 83       	std	Z+5, r25	; 0x05
     b04:	a6 83       	std	Z+6, r26	; 0x06
     b06:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     b08:	24 81       	ldd	r18, Z+4	; 0x04
     b0a:	35 81       	ldd	r19, Z+5	; 0x05
     b0c:	46 81       	ldd	r20, Z+6	; 0x06
     b0e:	57 81       	ldd	r21, Z+7	; 0x07
     b10:	81 81       	ldd	r24, Z+1	; 0x01
     b12:	92 81       	ldd	r25, Z+2	; 0x02
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	28 17       	cp	r18, r24
     b1a:	39 07       	cpc	r19, r25
     b1c:	4a 07       	cpc	r20, r26
     b1e:	5b 07       	cpc	r21, r27
     b20:	84 f0       	brlt	.+32     	; 0xb42 <Timebase_Timer_Await_SubSeconds+0x7a>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b22:	24 81       	ldd	r18, Z+4	; 0x04
     b24:	35 81       	ldd	r19, Z+5	; 0x05
     b26:	46 81       	ldd	r20, Z+6	; 0x06
     b28:	57 81       	ldd	r21, Z+7	; 0x07
     b2a:	81 81       	ldd	r24, Z+1	; 0x01
     b2c:	92 81       	ldd	r25, Z+2	; 0x02
     b2e:	a0 e0       	ldi	r26, 0x00	; 0
     b30:	b0 e0       	ldi	r27, 0x00	; 0
     b32:	28 1b       	sub	r18, r24
     b34:	39 0b       	sbc	r19, r25
     b36:	4a 0b       	sbc	r20, r26
     b38:	5b 0b       	sbc	r21, r27
     b3a:	24 83       	std	Z+4, r18	; 0x04
     b3c:	35 83       	std	Z+5, r19	; 0x05
     b3e:	46 83       	std	Z+6, r20	; 0x06
     b40:	57 83       	std	Z+7, r21	; 0x07
     b42:	08 95       	ret

00000b44 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b44:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b46:	e0 91 3f 01 	lds	r30, 0x013F
     b4a:	f0 91 40 01 	lds	r31, 0x0140
     b4e:	22 85       	ldd	r18, Z+10	; 0x0a
     b50:	33 85       	ldd	r19, Z+11	; 0x0b
     b52:	44 85       	ldd	r20, Z+12	; 0x0c
     b54:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b56:	78 94       	sei


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     b58:	a0 e0       	ldi	r26, 0x00	; 0
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	82 0f       	add	r24, r18
     b5e:	93 1f       	adc	r25, r19
     b60:	a4 1f       	adc	r26, r20
     b62:	b5 1f       	adc	r27, r21
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	06 c0       	rjmp	.+12     	; 0xb7a <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b6e:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b70:	22 85       	ldd	r18, Z+10	; 0x0a
     b72:	33 85       	ldd	r19, Z+11	; 0x0b
     b74:	44 85       	ldd	r20, Z+12	; 0x0c
     b76:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b78:	78 94       	sei

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     b7a:	28 17       	cp	r18, r24
     b7c:	39 07       	cpc	r19, r25
     b7e:	4a 07       	cpc	r20, r26
     b80:	5b 07       	cpc	r21, r27
     b82:	ac f3       	brlt	.-22     	; 0xb6e <Timebase_Timer_Delay_Seconds+0x2a>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     b84:	08 95       	ret

00000b86 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b86:	e0 91 3f 01 	lds	r30, 0x013F
     b8a:	f0 91 40 01 	lds	r31, 0x0140
     b8e:	16 86       	std	Z+14, r1	; 0x0e
     b90:	17 86       	std	Z+15, r1	; 0x0f
     b92:	10 8a       	std	Z+16, r1	; 0x10
     b94:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     b96:	12 8a       	std	Z+18, r1	; 0x12
     b98:	13 8a       	std	Z+19, r1	; 0x13
     b9a:	14 8a       	std	Z+20, r1	; 0x14
     b9c:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b9e:	16 8a       	std	Z+22, r1	; 0x16
}
     ba0:	08 95       	ret

00000ba2 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     ba2:	e0 91 3f 01 	lds	r30, 0x013F
     ba6:	f0 91 40 01 	lds	r31, 0x0140
     baa:	86 89       	ldd	r24, Z+22	; 0x16
     bac:	88 23       	and	r24, r24
     bae:	b1 f4       	brne	.+44     	; 0xbdc <Timebase_Window_Timer_Start+0x3a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bb0:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     bb2:	82 85       	ldd	r24, Z+10	; 0x0a
     bb4:	93 85       	ldd	r25, Z+11	; 0x0b
     bb6:	a4 85       	ldd	r26, Z+12	; 0x0c
     bb8:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bba:	78 94       	sei
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     bbc:	86 87       	std	Z+14, r24	; 0x0e
     bbe:	97 87       	std	Z+15, r25	; 0x0f
     bc0:	a0 8b       	std	Z+16, r26	; 0x10
     bc2:	b1 8b       	std	Z+17, r27	; 0x11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bc4:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bc6:	80 85       	ldd	r24, Z+8	; 0x08
     bc8:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bca:	78 94       	sei
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	82 8b       	std	Z+18, r24	; 0x12
     bd2:	93 8b       	std	Z+19, r25	; 0x13
     bd4:	a4 8b       	std	Z+20, r26	; 0x14
     bd6:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	86 8b       	std	Z+22, r24	; 0x16
     bdc:	08 95       	ret

00000bde <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bea:	c0 91 3f 01 	lds	r28, 0x013F
     bee:	d0 91 40 01 	lds	r29, 0x0140
     bf2:	8e 89       	ldd	r24, Y+22	; 0x16
     bf4:	81 30       	cpi	r24, 0x01	; 1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <Timebase_Window_Timer_Get_Interval+0x22>
     bf8:	ee 24       	eor	r14, r14
     bfa:	ff 24       	eor	r15, r15
     bfc:	87 01       	movw	r16, r14
     bfe:	27 c0       	rjmp	.+78     	; 0xc4e <Timebase_Window_Timer_Get_Interval+0x70>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c00:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     c02:	2a 85       	ldd	r18, Y+10	; 0x0a
     c04:	3b 85       	ldd	r19, Y+11	; 0x0b
     c06:	4c 85       	ldd	r20, Y+12	; 0x0c
     c08:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     c0a:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     c0c:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     c0e:	88 85       	ldd	r24, Y+8	; 0x08
     c10:	99 85       	ldd	r25, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     c12:	78 94       	sei

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     c14:	7c 01       	movw	r14, r24
     c16:	00 e0       	ldi	r16, 0x00	; 0
     c18:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     c1a:	8e 85       	ldd	r24, Y+14	; 0x0e
     c1c:	9f 85       	ldd	r25, Y+15	; 0x0f
     c1e:	a8 89       	ldd	r26, Y+16	; 0x10
     c20:	b9 89       	ldd	r27, Y+17	; 0x11
     c22:	28 1b       	sub	r18, r24
     c24:	39 0b       	sbc	r19, r25
     c26:	4a 0b       	sbc	r20, r26
     c28:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c2a:	69 81       	ldd	r22, Y+1	; 0x01
     c2c:	7a 81       	ldd	r23, Y+2	; 0x02
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__mulsi3>
	curr_s += curr_ss;
     c36:	2a 89       	ldd	r18, Y+18	; 0x12
     c38:	3b 89       	ldd	r19, Y+19	; 0x13
     c3a:	4c 89       	ldd	r20, Y+20	; 0x14
     c3c:	5d 89       	ldd	r21, Y+21	; 0x15
     c3e:	e2 1a       	sub	r14, r18
     c40:	f3 0a       	sbc	r15, r19
     c42:	04 0b       	sbc	r16, r20
     c44:	15 0b       	sbc	r17, r21
     c46:	e6 0e       	add	r14, r22
     c48:	f7 1e       	adc	r15, r23
     c4a:	08 1f       	adc	r16, r24
     c4c:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     c4e:	b7 01       	movw	r22, r14
     c50:	c8 01       	movw	r24, r16
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	08 95       	ret

00000c60 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     c60:	0e 94 ef 05 	call	0xbde	; 0xbde <Timebase_Window_Timer_Get_Interval>
     c64:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c66:	e0 91 3f 01 	lds	r30, 0x013F
     c6a:	f0 91 40 01 	lds	r31, 0x0140
     c6e:	86 89       	ldd	r24, Z+22	; 0x16
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	49 f4       	brne	.+18     	; 0xc86 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c74:	16 86       	std	Z+14, r1	; 0x0e
     c76:	17 86       	std	Z+15, r1	; 0x0f
     c78:	10 8a       	std	Z+16, r1	; 0x10
     c7a:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     c7c:	12 8a       	std	Z+18, r1	; 0x12
     c7e:	13 8a       	std	Z+19, r1	; 0x13
     c80:	14 8a       	std	Z+20, r1	; 0x14
     c82:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c84:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     c86:	82 2f       	mov	r24, r18
     c88:	08 95       	ret

00000c8a <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
     c8a:	e0 91 3f 01 	lds	r30, 0x013F
     c8e:	f0 91 40 01 	lds	r31, 0x0140
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	25 e1       	ldi	r18, 0x15	; 21
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	ac 01       	movw	r20, r24
     c9a:	42 9f       	mul	r20, r18
     c9c:	c0 01       	movw	r24, r0
     c9e:	43 9f       	mul	r20, r19
     ca0:	90 0d       	add	r25, r0
     ca2:	52 9f       	mul	r21, r18
     ca4:	90 0d       	add	r25, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	e8 0f       	add	r30, r24
     caa:	f9 1f       	adc	r31, r25
     cac:	82 a9       	ldd	r24, Z+50	; 0x32
     cae:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	08 95       	ret

00000cb4 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     cb4:	e0 91 3f 01 	lds	r30, 0x013F
     cb8:	f0 91 40 01 	lds	r31, 0x0140
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	25 e1       	ldi	r18, 0x15	; 21
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	ac 01       	movw	r20, r24
     cc4:	42 9f       	mul	r20, r18
     cc6:	c0 01       	movw	r24, r0
     cc8:	43 9f       	mul	r20, r19
     cca:	90 0d       	add	r25, r0
     ccc:	52 9f       	mul	r21, r18
     cce:	90 0d       	add	r25, r0
     cd0:	11 24       	eor	r1, r1
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	6f 70       	andi	r22, 0x0F	; 15
     cd8:	66 0f       	add	r22, r22
     cda:	82 a9       	ldd	r24, Z+50	; 0x32
     cdc:	81 7e       	andi	r24, 0xE1	; 225
     cde:	86 2b       	or	r24, r22
     ce0:	82 ab       	std	Z+50, r24	; 0x32
}
     ce2:	08 95       	ret

00000ce4 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
     ce4:	e0 91 3f 01 	lds	r30, 0x013F
     ce8:	f0 91 40 01 	lds	r31, 0x0140
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	25 e1       	ldi	r18, 0x15	; 21
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	ac 01       	movw	r20, r24
     cf4:	42 9f       	mul	r20, r18
     cf6:	c0 01       	movw	r24, r0
     cf8:	43 9f       	mul	r20, r19
     cfa:	90 0d       	add	r25, r0
     cfc:	52 9f       	mul	r21, r18
     cfe:	90 0d       	add	r25, r0
     d00:	11 24       	eor	r1, r1
     d02:	e8 0f       	add	r30, r24
     d04:	f9 1f       	adc	r31, r25
     d06:	ff 96       	adiw	r30, 0x3f	; 63
     d08:	60 81       	ld	r22, Z
     d0a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
     d0c:	82 81       	ldd	r24, Z+2	; 0x02
     d0e:	93 81       	ldd	r25, Z+3	; 0x03
     d10:	08 95       	ret

00000d12 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     d12:	e0 91 3f 01 	lds	r30, 0x013F
     d16:	f0 91 40 01 	lds	r31, 0x0140
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	25 e1       	ldi	r18, 0x15	; 21
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	dc 01       	movw	r26, r24
     d22:	a2 9f       	mul	r26, r18
     d24:	c0 01       	movw	r24, r0
     d26:	a3 9f       	mul	r26, r19
     d28:	90 0d       	add	r25, r0
     d2a:	b2 9f       	mul	r27, r18
     d2c:	90 0d       	add	r25, r0
     d2e:	11 24       	eor	r1, r1
     d30:	e8 0f       	add	r30, r24
     d32:	f9 1f       	adc	r31, r25
     d34:	ff 96       	adiw	r30, 0x3f	; 63
     d36:	40 83       	st	Z, r20
     d38:	51 83       	std	Z+1, r21	; 0x01
     d3a:	62 83       	std	Z+2, r22	; 0x02
     d3c:	73 83       	std	Z+3, r23	; 0x03
}
     d3e:	08 95       	ret

00000d40 <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
     d40:	e0 91 3f 01 	lds	r30, 0x013F
     d44:	f0 91 40 01 	lds	r31, 0x0140
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	25 e1       	ldi	r18, 0x15	; 21
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	ac 01       	movw	r20, r24
     d50:	42 9f       	mul	r20, r18
     d52:	c0 01       	movw	r24, r0
     d54:	43 9f       	mul	r20, r19
     d56:	90 0d       	add	r25, r0
     d58:	52 9f       	mul	r21, r18
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	df 01       	movw	r26, r30
     d64:	d3 96       	adiw	r26, 0x33	; 51
     d66:	63 a9       	ldd	r22, Z+51	; 0x33
     d68:	11 96       	adiw	r26, 0x01	; 1
     d6a:	7c 91       	ld	r23, X
     d6c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	8c 91       	ld	r24, X
     d72:	12 97       	sbiw	r26, 0x02	; 2
     d74:	13 96       	adiw	r26, 0x03	; 3
     d76:	9c 91       	ld	r25, X
     d78:	08 95       	ret

00000d7a <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     d7a:	e0 91 3f 01 	lds	r30, 0x013F
     d7e:	f0 91 40 01 	lds	r31, 0x0140
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	25 e1       	ldi	r18, 0x15	; 21
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	dc 01       	movw	r26, r24
     d8a:	a2 9f       	mul	r26, r18
     d8c:	c0 01       	movw	r24, r0
     d8e:	a3 9f       	mul	r26, r19
     d90:	90 0d       	add	r25, r0
     d92:	b2 9f       	mul	r27, r18
     d94:	90 0d       	add	r25, r0
     d96:	11 24       	eor	r1, r1
     d98:	e8 0f       	add	r30, r24
     d9a:	f9 1f       	adc	r31, r25
     d9c:	43 ab       	std	Z+51, r20	; 0x33
     d9e:	54 ab       	std	Z+52, r21	; 0x34
     da0:	65 ab       	std	Z+53, r22	; 0x35
     da2:	76 ab       	std	Z+54, r23	; 0x36
}
     da4:	08 95       	ret

00000da6 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
     da6:	e0 91 3f 01 	lds	r30, 0x013F
     daa:	f0 91 40 01 	lds	r31, 0x0140
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	25 e1       	ldi	r18, 0x15	; 21
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	ac 01       	movw	r20, r24
     db6:	42 9f       	mul	r20, r18
     db8:	c0 01       	movw	r24, r0
     dba:	43 9f       	mul	r20, r19
     dbc:	90 0d       	add	r25, r0
     dbe:	52 9f       	mul	r21, r18
     dc0:	90 0d       	add	r25, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	df 01       	movw	r26, r30
     dca:	d7 96       	adiw	r26, 0x37	; 55
     dcc:	67 a9       	ldd	r22, Z+55	; 0x37
     dce:	11 96       	adiw	r26, 0x01	; 1
     dd0:	7c 91       	ld	r23, X
     dd2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
     dd4:	12 96       	adiw	r26, 0x02	; 2
     dd6:	8c 91       	ld	r24, X
     dd8:	12 97       	sbiw	r26, 0x02	; 2
     dda:	13 96       	adiw	r26, 0x03	; 3
     ddc:	9c 91       	ld	r25, X
     dde:	08 95       	ret

00000de0 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     de0:	e0 91 3f 01 	lds	r30, 0x013F
     de4:	f0 91 40 01 	lds	r31, 0x0140
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	25 e1       	ldi	r18, 0x15	; 21
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	dc 01       	movw	r26, r24
     df0:	a2 9f       	mul	r26, r18
     df2:	c0 01       	movw	r24, r0
     df4:	a3 9f       	mul	r26, r19
     df6:	90 0d       	add	r25, r0
     df8:	b2 9f       	mul	r27, r18
     dfa:	90 0d       	add	r25, r0
     dfc:	11 24       	eor	r1, r1
     dfe:	e8 0f       	add	r30, r24
     e00:	f9 1f       	adc	r31, r25
     e02:	47 ab       	std	Z+55, r20	; 0x37
     e04:	50 af       	std	Z+56, r21	; 0x38
     e06:	61 af       	std	Z+57, r22	; 0x39
     e08:	72 af       	std	Z+58, r23	; 0x3a
}
     e0a:	08 95       	ret

00000e0c <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
     e0c:	e0 91 3f 01 	lds	r30, 0x013F
     e10:	f0 91 40 01 	lds	r31, 0x0140
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	25 e1       	ldi	r18, 0x15	; 21
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	ac 01       	movw	r20, r24
     e1c:	42 9f       	mul	r20, r18
     e1e:	c0 01       	movw	r24, r0
     e20:	43 9f       	mul	r20, r19
     e22:	90 0d       	add	r25, r0
     e24:	52 9f       	mul	r21, r18
     e26:	90 0d       	add	r25, r0
     e28:	11 24       	eor	r1, r1
     e2a:	e8 0f       	add	r30, r24
     e2c:	f9 1f       	adc	r31, r25
     e2e:	df 01       	movw	r26, r30
     e30:	db 96       	adiw	r26, 0x3b	; 59
     e32:	63 ad       	ldd	r22, Z+59	; 0x3b
     e34:	11 96       	adiw	r26, 0x01	; 1
     e36:	7c 91       	ld	r23, X
     e38:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
     e3a:	12 96       	adiw	r26, 0x02	; 2
     e3c:	8c 91       	ld	r24, X
     e3e:	12 97       	sbiw	r26, 0x02	; 2
     e40:	13 96       	adiw	r26, 0x03	; 3
     e42:	9c 91       	ld	r25, X
     e44:	08 95       	ret

00000e46 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     e46:	e0 91 3f 01 	lds	r30, 0x013F
     e4a:	f0 91 40 01 	lds	r31, 0x0140
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	25 e1       	ldi	r18, 0x15	; 21
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	dc 01       	movw	r26, r24
     e56:	a2 9f       	mul	r26, r18
     e58:	c0 01       	movw	r24, r0
     e5a:	a3 9f       	mul	r26, r19
     e5c:	90 0d       	add	r25, r0
     e5e:	b2 9f       	mul	r27, r18
     e60:	90 0d       	add	r25, r0
     e62:	11 24       	eor	r1, r1
     e64:	e8 0f       	add	r30, r24
     e66:	f9 1f       	adc	r31, r25
     e68:	43 af       	std	Z+59, r20	; 0x3b
     e6a:	54 af       	std	Z+60, r21	; 0x3c
     e6c:	65 af       	std	Z+61, r22	; 0x3d
     e6e:	76 af       	std	Z+62, r23	; 0x3e
}
     e70:	08 95       	ret

00000e72 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
     e72:	e0 91 3f 01 	lds	r30, 0x013F
     e76:	f0 91 40 01 	lds	r31, 0x0140
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	25 e1       	ldi	r18, 0x15	; 21
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	ac 01       	movw	r20, r24
     e82:	42 9f       	mul	r20, r18
     e84:	c0 01       	movw	r24, r0
     e86:	43 9f       	mul	r20, r19
     e88:	90 0d       	add	r25, r0
     e8a:	52 9f       	mul	r21, r18
     e8c:	90 0d       	add	r25, r0
     e8e:	11 24       	eor	r1, r1
     e90:	e8 0f       	add	r30, r24
     e92:	f9 1f       	adc	r31, r25
     e94:	ed 5b       	subi	r30, 0xBD	; 189
     e96:	ff 4f       	sbci	r31, 0xFF	; 255
     e98:	60 81       	ld	r22, Z
     e9a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
     e9c:	82 81       	ldd	r24, Z+2	; 0x02
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	08 95       	ret

00000ea2 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     ea2:	e0 91 3f 01 	lds	r30, 0x013F
     ea6:	f0 91 40 01 	lds	r31, 0x0140
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	25 e1       	ldi	r18, 0x15	; 21
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	dc 01       	movw	r26, r24
     eb2:	a2 9f       	mul	r26, r18
     eb4:	c0 01       	movw	r24, r0
     eb6:	a3 9f       	mul	r26, r19
     eb8:	90 0d       	add	r25, r0
     eba:	b2 9f       	mul	r27, r18
     ebc:	90 0d       	add	r25, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	e8 0f       	add	r30, r24
     ec2:	f9 1f       	adc	r31, r25
     ec4:	ed 5b       	subi	r30, 0xBD	; 189
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	40 83       	st	Z, r20
     eca:	51 83       	std	Z+1, r21	; 0x01
     ecc:	62 83       	std	Z+2, r22	; 0x02
     ece:	73 83       	std	Z+3, r23	; 0x03
}
     ed0:	08 95       	ret

00000ed2 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
     ed2:	e0 91 3f 01 	lds	r30, 0x013F
     ed6:	f0 91 40 01 	lds	r31, 0x0140
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	25 e1       	ldi	r18, 0x15	; 21
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	ac 01       	movw	r20, r24
     ee2:	42 9f       	mul	r20, r18
     ee4:	c0 01       	movw	r24, r0
     ee6:	43 9f       	mul	r20, r19
     ee8:	90 0d       	add	r25, r0
     eea:	52 9f       	mul	r21, r18
     eec:	90 0d       	add	r25, r0
     eee:	11 24       	eor	r1, r1
     ef0:	e8 0f       	add	r30, r24
     ef2:	f9 1f       	adc	r31, r25
     ef4:	82 a9       	ldd	r24, Z+50	; 0x32
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	08 95       	ret

00000efa <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
     efa:	e0 91 3f 01 	lds	r30, 0x013F
     efe:	f0 91 40 01 	lds	r31, 0x0140
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	25 e1       	ldi	r18, 0x15	; 21
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	ac 01       	movw	r20, r24
     f0a:	42 9f       	mul	r20, r18
     f0c:	c0 01       	movw	r24, r0
     f0e:	43 9f       	mul	r20, r19
     f10:	90 0d       	add	r25, r0
     f12:	52 9f       	mul	r21, r18
     f14:	90 0d       	add	r25, r0
     f16:	11 24       	eor	r1, r1
     f18:	e8 0f       	add	r30, r24
     f1a:	f9 1f       	adc	r31, r25
     f1c:	82 a9       	ldd	r24, Z+50	; 0x32
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	82 ab       	std	Z+50, r24	; 0x32
}
     f22:	08 95       	ret

00000f24 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     f24:	e0 91 3f 01 	lds	r30, 0x013F
     f28:	f0 91 40 01 	lds	r31, 0x0140
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	25 e1       	ldi	r18, 0x15	; 21
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	ac 01       	movw	r20, r24
     f34:	42 9f       	mul	r20, r18
     f36:	c0 01       	movw	r24, r0
     f38:	43 9f       	mul	r20, r19
     f3a:	90 0d       	add	r25, r0
     f3c:	52 9f       	mul	r21, r18
     f3e:	90 0d       	add	r25, r0
     f40:	11 24       	eor	r1, r1
     f42:	e8 0f       	add	r30, r24
     f44:	f9 1f       	adc	r31, r25
     f46:	82 a9       	ldd	r24, Z+50	; 0x32
     f48:	8e 7f       	andi	r24, 0xFE	; 254
     f4a:	82 ab       	std	Z+50, r24	; 0x32
}
     f4c:	08 95       	ret

00000f4e <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     f4e:	e0 91 3f 01 	lds	r30, 0x013F
     f52:	f0 91 40 01 	lds	r31, 0x0140
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	25 e1       	ldi	r18, 0x15	; 21
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	ac 01       	movw	r20, r24
     f5e:	42 9f       	mul	r20, r18
     f60:	c0 01       	movw	r24, r0
     f62:	43 9f       	mul	r20, r19
     f64:	90 0d       	add	r25, r0
     f66:	52 9f       	mul	r21, r18
     f68:	90 0d       	add	r25, r0
     f6a:	11 24       	eor	r1, r1
     f6c:	e8 0f       	add	r30, r24
     f6e:	f9 1f       	adc	r31, r25
     f70:	82 a9       	ldd	r24, Z+50	; 0x32
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     f72:	ff 96       	adiw	r30, 0x3f	; 63
     f74:	10 82       	st	Z, r1
     f76:	11 82       	std	Z+1, r1	; 0x01
     f78:	12 82       	std	Z+2, r1	; 0x02
     f7a:	13 82       	std	Z+3, r1	; 0x03
     f7c:	ff 97       	sbiw	r30, 0x3f	; 63
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     f7e:	13 aa       	std	Z+51, r1	; 0x33
     f80:	14 aa       	std	Z+52, r1	; 0x34
     f82:	15 aa       	std	Z+53, r1	; 0x35
     f84:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     f86:	17 aa       	std	Z+55, r1	; 0x37
     f88:	10 ae       	std	Z+56, r1	; 0x38
     f8a:	11 ae       	std	Z+57, r1	; 0x39
     f8c:	12 ae       	std	Z+58, r1	; 0x3a
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     f8e:	13 ae       	std	Z+59, r1	; 0x3b
     f90:	14 ae       	std	Z+60, r1	; 0x3c
     f92:	15 ae       	std	Z+61, r1	; 0x3d
     f94:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     f96:	ed 5b       	subi	r30, 0xBD	; 189
     f98:	ff 4f       	sbci	r31, 0xFF	; 255
     f9a:	10 82       	st	Z, r1
     f9c:	11 82       	std	Z+1, r1	; 0x01
     f9e:	12 82       	std	Z+2, r1	; 0x02
     fa0:	13 82       	std	Z+3, r1	; 0x03
     fa2:	e3 54       	subi	r30, 0x43	; 67
     fa4:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     fa6:	80 7e       	andi	r24, 0xE0	; 224
     fa8:	82 ab       	std	Z+50, r24	; 0x32
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
     faa:	08 95       	ret

00000fac <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
     fac:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Timebase_UpCounter_Reset>
}
     fb0:	08 95       	ret

00000fb2 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     fb2:	e0 91 3f 01 	lds	r30, 0x013F
     fb6:	f0 91 40 01 	lds	r31, 0x0140
     fba:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     fbc:	25 e1       	ldi	r18, 0x15	; 21
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	ac 01       	movw	r20, r24
     fc2:	42 9f       	mul	r20, r18
     fc4:	c0 01       	movw	r24, r0
     fc6:	43 9f       	mul	r20, r19
     fc8:	90 0d       	add	r25, r0
     fca:	52 9f       	mul	r21, r18
     fcc:	90 0d       	add	r25, r0
     fce:	11 24       	eor	r1, r1
     fd0:	e8 0f       	add	r30, r24
     fd2:	f9 1f       	adc	r31, r25
     fd4:	92 a9       	ldd	r25, Z+50	; 0x32
     fd6:	89 2f       	mov	r24, r25
     fd8:	86 95       	lsr	r24
     fda:	8f 70       	andi	r24, 0x0F	; 15
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	19 f0       	breq	.+6      	; 0xfe6 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     fe0:	91 7e       	andi	r25, 0xE1	; 225
     fe2:	92 60       	ori	r25, 0x02	; 2
     fe4:	92 ab       	std	Z+50, r25	; 0x32
     fe6:	08 95       	ret

00000fe8 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     fe8:	e0 91 3f 01 	lds	r30, 0x013F
     fec:	f0 91 40 01 	lds	r31, 0x0140
     ff0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     ff2:	25 e1       	ldi	r18, 0x15	; 21
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	ac 01       	movw	r20, r24
     ff8:	42 9f       	mul	r20, r18
     ffa:	c0 01       	movw	r24, r0
     ffc:	43 9f       	mul	r20, r19
     ffe:	90 0d       	add	r25, r0
    1000:	52 9f       	mul	r21, r18
    1002:	90 0d       	add	r25, r0
    1004:	11 24       	eor	r1, r1
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	92 a9       	ldd	r25, Z+50	; 0x32
    100c:	89 2f       	mov	r24, r25
    100e:	86 95       	lsr	r24
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	82 30       	cpi	r24, 0x02	; 2
    1014:	19 f0       	breq	.+6      	; 0x101c <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1016:	91 7e       	andi	r25, 0xE1	; 225
    1018:	94 60       	ori	r25, 0x04	; 4
    101a:	92 ab       	std	Z+50, r25	; 0x32
    101c:	08 95       	ret

0000101e <Timebase_UpCounter_Set_Securely>:
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1026:	c0 91 3f 01 	lds	r28, 0x013F
    102a:	d0 91 40 01 	lds	r29, 0x0140
    102e:	08 2f       	mov	r16, r24
    1030:	10 e0       	ldi	r17, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1032:	85 e1       	ldi	r24, 0x15	; 21
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	08 9f       	mul	r16, r24
    1038:	f0 01       	movw	r30, r0
    103a:	09 9f       	mul	r16, r25
    103c:	f0 0d       	add	r31, r0
    103e:	18 9f       	mul	r17, r24
    1040:	f0 0d       	add	r31, r0
    1042:	11 24       	eor	r1, r1
    1044:	ec 0f       	add	r30, r28
    1046:	fd 1f       	adc	r31, r29
    1048:	82 a9       	ldd	r24, Z+50	; 0x32
    104a:	86 95       	lsr	r24
    104c:	8f 70       	andi	r24, 0x0F	; 15
    104e:	81 f5       	brne	.+96     	; 0x10b0 <Timebase_UpCounter_Set_Securely+0x92>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1050:	ff 96       	adiw	r30, 0x3f	; 63
    1052:	10 82       	st	Z, r1
    1054:	11 82       	std	Z+1, r1	; 0x01
    1056:	12 82       	std	Z+2, r1	; 0x02
    1058:	13 82       	std	Z+3, r1	; 0x03
    105a:	ff 97       	sbiw	r30, 0x3f	; 63
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    105c:	13 ae       	std	Z+59, r1	; 0x3b
    105e:	14 ae       	std	Z+60, r1	; 0x3c
    1060:	15 ae       	std	Z+61, r1	; 0x3d
    1062:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1064:	47 ab       	std	Z+55, r20	; 0x37
    1066:	50 af       	std	Z+56, r21	; 0x38
    1068:	61 af       	std	Z+57, r22	; 0x39
    106a:	72 af       	std	Z+58, r23	; 0x3a

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    106c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    106e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1070:	9b 85       	ldd	r25, Y+11	; 0x0b
    1072:	ac 85       	ldd	r26, Y+12	; 0x0c
    1074:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1076:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1078:	25 e1       	ldi	r18, 0x15	; 21
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	02 9f       	mul	r16, r18
    107e:	f0 01       	movw	r30, r0
    1080:	03 9f       	mul	r16, r19
    1082:	f0 0d       	add	r31, r0
    1084:	12 9f       	mul	r17, r18
    1086:	f0 0d       	add	r31, r0
    1088:	11 24       	eor	r1, r1
    108a:	ec 0f       	add	r30, r28
    108c:	fd 1f       	adc	r31, r29
    108e:	84 0f       	add	r24, r20
    1090:	95 1f       	adc	r25, r21
    1092:	a6 1f       	adc	r26, r22
    1094:	b7 1f       	adc	r27, r23
    1096:	83 ab       	std	Z+51, r24	; 0x33
    1098:	94 ab       	std	Z+52, r25	; 0x34
    109a:	a5 ab       	std	Z+53, r26	; 0x35
    109c:	b6 ab       	std	Z+54, r27	; 0x36
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    109e:	92 a9       	ldd	r25, Z+50	; 0x32
    10a0:	89 2f       	mov	r24, r25
    10a2:	86 95       	lsr	r24
    10a4:	8f 70       	andi	r24, 0x0F	; 15
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <Timebase_UpCounter_Set_Securely+0x92>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    10aa:	91 7e       	andi	r25, 0xE1	; 225
    10ac:	92 60       	ori	r25, 0x02	; 2
    10ae:	92 ab       	std	Z+50, r25	; 0x32
    Timebase_UpCounter_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_Start(window);
  }
}
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <Timebase_UpCounter_Set_Forcefully>:

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	d8 2e       	mov	r13, r24
    10c6:	7a 01       	movw	r14, r20
    10c8:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    10ca:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    10ce:	8d 2d       	mov	r24, r13
    10d0:	b8 01       	movw	r22, r16
    10d2:	a7 01       	movw	r20, r14
    10d4:	0e 94 0f 08 	call	0x101e	; 0x101e <Timebase_UpCounter_Set_Securely>
} 
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	df 90       	pop	r13
    10e2:	08 95       	ret

000010e4 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    10e4:	ef 92       	push	r14
    10e6:	ff 92       	push	r15
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    10f0:	c0 91 3f 01 	lds	r28, 0x013F
    10f4:	d0 91 40 01 	lds	r29, 0x0140
    10f8:	48 2f       	mov	r20, r24
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	85 e1       	ldi	r24, 0x15	; 21
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	48 9f       	mul	r20, r24
    1102:	f0 01       	movw	r30, r0
    1104:	49 9f       	mul	r20, r25
    1106:	f0 0d       	add	r31, r0
    1108:	58 9f       	mul	r21, r24
    110a:	f0 0d       	add	r31, r0
    110c:	11 24       	eor	r1, r1
    110e:	ec 0f       	add	r30, r28
    1110:	fd 1f       	adc	r31, r29
    1112:	82 a9       	ldd	r24, Z+50	; 0x32
    1114:	86 95       	lsr	r24
    1116:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	09 f0       	breq	.+2      	; 0x111e <Timebase_UpCounter_Update+0x3a>
    111c:	44 c0       	rjmp	.+136    	; 0x11a6 <Timebase_UpCounter_Update+0xc2>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    111e:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1120:	ea 84       	ldd	r14, Y+10	; 0x0a
    1122:	fb 84       	ldd	r15, Y+11	; 0x0b
    1124:	0c 85       	ldd	r16, Y+12	; 0x0c
    1126:	1d 85       	ldd	r17, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1128:	78 94       	sei

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    112a:	85 e1       	ldi	r24, 0x15	; 21
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	48 9f       	mul	r20, r24
    1130:	f0 01       	movw	r30, r0
    1132:	49 9f       	mul	r20, r25
    1134:	f0 0d       	add	r31, r0
    1136:	58 9f       	mul	r21, r24
    1138:	f0 0d       	add	r31, r0
    113a:	11 24       	eor	r1, r1
    113c:	ec 0f       	add	r30, r28
    113e:	fd 1f       	adc	r31, r29
    1140:	23 a9       	ldd	r18, Z+51	; 0x33
    1142:	34 a9       	ldd	r19, Z+52	; 0x34
    1144:	45 a9       	ldd	r20, Z+53	; 0x35
    1146:	56 a9       	ldd	r21, Z+54	; 0x36
    1148:	2e 19       	sub	r18, r14
    114a:	3f 09       	sbc	r19, r15
    114c:	40 0b       	sbc	r20, r16
    114e:	51 0b       	sbc	r21, r17
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1150:	23 af       	std	Z+59, r18	; 0x3b
    1152:	34 af       	std	Z+60, r19	; 0x3c
    1154:	45 af       	std	Z+61, r20	; 0x3d
    1156:	56 af       	std	Z+62, r21	; 0x3e
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1158:	ef 01       	movw	r28, r30
    115a:	ef 96       	adiw	r28, 0x3f	; 63
    115c:	e7 a8       	ldd	r14, Z+55	; 0x37
    115e:	f0 ac       	ldd	r15, Z+56	; 0x38
    1160:	01 ad       	ldd	r16, Z+57	; 0x39
    1162:	12 ad       	ldd	r17, Z+58	; 0x3a
    1164:	d8 01       	movw	r26, r16
    1166:	c7 01       	movw	r24, r14
    1168:	82 1b       	sub	r24, r18
    116a:	93 0b       	sbc	r25, r19
    116c:	a4 0b       	sbc	r26, r20
    116e:	b5 0b       	sbc	r27, r21
    1170:	88 83       	st	Y, r24
    1172:	99 83       	std	Y+1, r25	; 0x01
    1174:	aa 83       	std	Y+2, r26	; 0x02
    1176:	bb 83       	std	Y+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1178:	12 16       	cp	r1, r18
    117a:	13 06       	cpc	r1, r19
    117c:	14 06       	cpc	r1, r20
    117e:	15 06       	cpc	r1, r21
    1180:	0c f4       	brge	.+2      	; 0x1184 <Timebase_UpCounter_Update+0xa0>
    1182:	3d c0       	rjmp	.+122    	; 0x11fe <Timebase_UpCounter_Update+0x11a>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1184:	13 aa       	std	Z+51, r1	; 0x33
    1186:	14 aa       	std	Z+52, r1	; 0x34
    1188:	15 aa       	std	Z+53, r1	; 0x35
    118a:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    118c:	13 ae       	std	Z+59, r1	; 0x3b
    118e:	14 ae       	std	Z+60, r1	; 0x3c
    1190:	15 ae       	std	Z+61, r1	; 0x3d
    1192:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1194:	e8 82       	st	Y, r14
    1196:	f9 82       	std	Y+1, r15	; 0x01
    1198:	0a 83       	std	Y+2, r16	; 0x02
    119a:	1b 83       	std	Y+3, r17	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    119c:	82 a9       	ldd	r24, Z+50	; 0x32
    119e:	81 7e       	andi	r24, 0xE1	; 225
    11a0:	88 60       	ori	r24, 0x08	; 8
    11a2:	82 ab       	std	Z+50, r24	; 0x32
    11a4:	2c c0       	rjmp	.+88     	; 0x11fe <Timebase_UpCounter_Update+0x11a>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	51 f5       	brne	.+84     	; 0x11fe <Timebase_UpCounter_Update+0x11a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    11aa:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    11ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    11ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b0:	ac 85       	ldd	r26, Y+12	; 0x0c
    11b2:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    11b4:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    11b6:	25 e1       	ldi	r18, 0x15	; 21
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	42 9f       	mul	r20, r18
    11bc:	f0 01       	movw	r30, r0
    11be:	43 9f       	mul	r20, r19
    11c0:	f0 0d       	add	r31, r0
    11c2:	52 9f       	mul	r21, r18
    11c4:	f0 0d       	add	r31, r0
    11c6:	11 24       	eor	r1, r1
    11c8:	ec 0f       	add	r30, r28
    11ca:	fd 1f       	adc	r31, r29
    11cc:	23 ad       	ldd	r18, Z+59	; 0x3b
    11ce:	34 ad       	ldd	r19, Z+60	; 0x3c
    11d0:	45 ad       	ldd	r20, Z+61	; 0x3d
    11d2:	56 ad       	ldd	r21, Z+62	; 0x3e
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	a4 1f       	adc	r26, r20
    11da:	b5 1f       	adc	r27, r21
    11dc:	83 ab       	std	Z+51, r24	; 0x33
    11de:	94 ab       	std	Z+52, r25	; 0x34
    11e0:	a5 ab       	std	Z+53, r26	; 0x35
    11e2:	b6 ab       	std	Z+54, r27	; 0x36
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    11e4:	87 a9       	ldd	r24, Z+55	; 0x37
    11e6:	90 ad       	ldd	r25, Z+56	; 0x38
    11e8:	a1 ad       	ldd	r26, Z+57	; 0x39
    11ea:	b2 ad       	ldd	r27, Z+58	; 0x3a
    11ec:	82 1b       	sub	r24, r18
    11ee:	93 0b       	sbc	r25, r19
    11f0:	a4 0b       	sbc	r26, r20
    11f2:	b5 0b       	sbc	r27, r21
    11f4:	ff 96       	adiw	r30, 0x3f	; 63
    11f6:	80 83       	st	Z, r24
    11f8:	91 83       	std	Z+1, r25	; 0x01
    11fa:	a2 83       	std	Z+2, r26	; 0x02
    11fc:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	08 95       	ret

0000120c <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	e0 91 3f 01 	lds	r30, 0x013F
    1212:	f0 91 40 01 	lds	r31, 0x0140
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	25 e1       	ldi	r18, 0x15	; 21
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	bc 01       	movw	r22, r24
    121e:	62 9f       	mul	r22, r18
    1220:	c0 01       	movw	r24, r0
    1222:	63 9f       	mul	r22, r19
    1224:	90 0d       	add	r25, r0
    1226:	72 9f       	mul	r23, r18
    1228:	90 0d       	add	r25, r0
    122a:	11 24       	eor	r1, r1
    122c:	e8 0f       	add	r30, r24
    122e:	f9 1f       	adc	r31, r25
    1230:	82 a9       	ldd	r24, Z+50	; 0x32
    1232:	86 95       	lsr	r24
    1234:	8f 70       	andi	r24, 0x0F	; 15
    1236:	84 30       	cpi	r24, 0x04	; 4
    1238:	09 f4       	brne	.+2      	; 0x123c <Timebase_UpCounter_Expired+0x30>
    123a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    123c:	84 2f       	mov	r24, r20
    123e:	08 95       	ret

00001240 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1240:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1242:	e0 91 3f 01 	lds	r30, 0x013F
    1246:	f0 91 40 01 	lds	r31, 0x0140
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	85 e1       	ldi	r24, 0x15	; 21
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	bc 01       	movw	r22, r24
    1254:	26 9f       	mul	r18, r22
    1256:	c0 01       	movw	r24, r0
    1258:	27 9f       	mul	r18, r23
    125a:	90 0d       	add	r25, r0
    125c:	36 9f       	mul	r19, r22
    125e:	90 0d       	add	r25, r0
    1260:	11 24       	eor	r1, r1
    1262:	e8 0f       	add	r30, r24
    1264:	f9 1f       	adc	r31, r25
    1266:	82 a9       	ldd	r24, Z+50	; 0x32
    1268:	86 95       	lsr	r24
    126a:	8f 70       	andi	r24, 0x0F	; 15
    126c:	84 30       	cpi	r24, 0x04	; 4
    126e:	11 f0       	breq	.+4      	; 0x1274 <Timebase_UpCounter_Expired_Event+0x34>
    1270:	80 e0       	ldi	r24, 0x00	; 0
    1272:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1274:	84 2f       	mov	r24, r20
    1276:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Timebase_UpCounter_Reset>
    127a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    127c:	08 95       	ret

0000127e <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1282:	c0 91 3f 01 	lds	r28, 0x013F
    1286:	d0 91 40 01 	lds	r29, 0x0140
    128a:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    128c:	25 e1       	ldi	r18, 0x15	; 21
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	fc 01       	movw	r30, r24
    1292:	e2 9f       	mul	r30, r18
    1294:	c0 01       	movw	r24, r0
    1296:	e3 9f       	mul	r30, r19
    1298:	90 0d       	add	r25, r0
    129a:	f2 9f       	mul	r31, r18
    129c:	90 0d       	add	r25, r0
    129e:	11 24       	eor	r1, r1
    12a0:	c8 0f       	add	r28, r24
    12a2:	d9 1f       	adc	r29, r25
    12a4:	8a a9       	ldd	r24, Y+50	; 0x32
    12a6:	80 fd       	sbrc	r24, 0
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <Timebase_UpCounter_Set_Period_Value_Securely+0x54>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    12aa:	fe 01       	movw	r30, r28
    12ac:	ed 5b       	subi	r30, 0xBD	; 189
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	ef 96       	adiw	r28, 0x3f	; 63
    12b2:	88 81       	ld	r24, Y
    12b4:	99 81       	ldd	r25, Y+1	; 0x01
    12b6:	aa 81       	ldd	r26, Y+2	; 0x02
    12b8:	bb 81       	ldd	r27, Y+3	; 0x03
    12ba:	ef 97       	sbiw	r28, 0x3f	; 63
    12bc:	84 0f       	add	r24, r20
    12be:	95 1f       	adc	r25, r21
    12c0:	a6 1f       	adc	r26, r22
    12c2:	b7 1f       	adc	r27, r23
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	a2 83       	std	Z+2, r26	; 0x02
    12ca:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    12cc:	8a a9       	ldd	r24, Y+50	; 0x32
    12ce:	81 60       	ori	r24, 0x01	; 1
    12d0:	8a ab       	std	Y+50, r24	; 0x32
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	08 95       	ret

000012d8 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    12d8:	e0 91 3f 01 	lds	r30, 0x013F
    12dc:	f0 91 40 01 	lds	r31, 0x0140
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    12e2:	25 e1       	ldi	r18, 0x15	; 21
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	ac 01       	movw	r20, r24
    12e8:	42 9f       	mul	r20, r18
    12ea:	c0 01       	movw	r24, r0
    12ec:	43 9f       	mul	r20, r19
    12ee:	90 0d       	add	r25, r0
    12f0:	52 9f       	mul	r21, r18
    12f2:	90 0d       	add	r25, r0
    12f4:	11 24       	eor	r1, r1
    12f6:	e8 0f       	add	r30, r24
    12f8:	f9 1f       	adc	r31, r25
    12fa:	df 01       	movw	r26, r30
    12fc:	df 96       	adiw	r26, 0x3f	; 63
    12fe:	ed 5b       	subi	r30, 0xBD	; 189
    1300:	ff 4f       	sbci	r31, 0xFF	; 255
    1302:	20 81       	ld	r18, Z
    1304:	31 81       	ldd	r19, Z+1	; 0x01
    1306:	42 81       	ldd	r20, Z+2	; 0x02
    1308:	53 81       	ldd	r21, Z+3	; 0x03
    130a:	8d 91       	ld	r24, X+
    130c:	9d 91       	ld	r25, X+
    130e:	0d 90       	ld	r0, X+
    1310:	bc 91       	ld	r27, X
    1312:	a0 2d       	mov	r26, r0
    1314:	28 1b       	sub	r18, r24
    1316:	39 0b       	sbc	r19, r25
    1318:	4a 0b       	sbc	r20, r26
    131a:	5b 0b       	sbc	r21, r27
    131c:	57 ff       	sbrs	r21, 7
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <Timebase_UpCounter_Get_Remaining_Period_Value+0x50>
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1328:	b9 01       	movw	r22, r18
    132a:	ca 01       	movw	r24, r20
    132c:	08 95       	ret

0000132e <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1332:	c0 91 3f 01 	lds	r28, 0x013F
    1336:	d0 91 40 01 	lds	r29, 0x0140
    133a:	68 2f       	mov	r22, r24
    133c:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    133e:	85 e1       	ldi	r24, 0x15	; 21
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	68 9f       	mul	r22, r24
    1344:	f0 01       	movw	r30, r0
    1346:	69 9f       	mul	r22, r25
    1348:	f0 0d       	add	r31, r0
    134a:	78 9f       	mul	r23, r24
    134c:	f0 0d       	add	r31, r0
    134e:	11 24       	eor	r1, r1
    1350:	ec 0f       	add	r30, r28
    1352:	fd 1f       	adc	r31, r29
    1354:	df 01       	movw	r26, r30
    1356:	df 96       	adiw	r26, 0x3f	; 63
    1358:	ed 5b       	subi	r30, 0xBD	; 189
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	42 81       	ldd	r20, Z+2	; 0x02
    1362:	53 81       	ldd	r21, Z+3	; 0x03
    1364:	8d 91       	ld	r24, X+
    1366:	9d 91       	ld	r25, X+
    1368:	0d 90       	ld	r0, X+
    136a:	bc 91       	ld	r27, X
    136c:	a0 2d       	mov	r26, r0
    136e:	28 1b       	sub	r18, r24
    1370:	39 0b       	sbc	r19, r25
    1372:	4a 0b       	sbc	r20, r26
    1374:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1376:	57 fd       	sbrc	r21, 7
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <Timebase_UpCounter_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_UpCounter_Get_Period_Flag( window )){
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	41 05       	cpc	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	11 f0       	breq	.+4      	; 0x1388 <Timebase_UpCounter_Period_Value_Expired+0x5a>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	12 c0       	rjmp	.+36     	; 0x13ac <Timebase_UpCounter_Period_Value_Expired+0x7e>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	85 e1       	ldi	r24, 0x15	; 21
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	ac 01       	movw	r20, r24
    1390:	64 9f       	mul	r22, r20
    1392:	c0 01       	movw	r24, r0
    1394:	65 9f       	mul	r22, r21
    1396:	90 0d       	add	r25, r0
    1398:	74 9f       	mul	r23, r20
    139a:	90 0d       	add	r25, r0
    139c:	11 24       	eor	r1, r1
    139e:	c8 0f       	add	r28, r24
    13a0:	d9 1f       	adc	r29, r25
    13a2:	8a a9       	ldd	r24, Y+50	; 0x32
    13a4:	80 ff       	sbrs	r24, 0
    13a6:	21 e0       	ldi	r18, 0x01	; 1
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    13ac:	82 2f       	mov	r24, r18
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    13b4:	1f 93       	push	r17
    13b6:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == 1){
    13b8:	0e 94 97 09 	call	0x132e	; 0x132e <Timebase_UpCounter_Period_Value_Expired>
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	11 f0       	breq	.+4      	; 0x13c4 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	16 c0       	rjmp	.+44     	; 0x13f0 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    13c4:	e0 91 3f 01 	lds	r30, 0x013F
    13c8:	f0 91 40 01 	lds	r31, 0x0140
    13cc:	21 2f       	mov	r18, r17
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	85 e1       	ldi	r24, 0x15	; 21
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	ac 01       	movw	r20, r24
    13d6:	24 9f       	mul	r18, r20
    13d8:	c0 01       	movw	r24, r0
    13da:	25 9f       	mul	r18, r21
    13dc:	90 0d       	add	r25, r0
    13de:	34 9f       	mul	r19, r20
    13e0:	90 0d       	add	r25, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	e8 0f       	add	r30, r24
    13e6:	f9 1f       	adc	r31, r25
    13e8:	82 a9       	ldd	r24, Z+50	; 0x32
    13ea:	8e 7f       	andi	r24, 0xFE	; 254
    13ec:	82 ab       	std	Z+50, r24	; 0x32
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    13f0:	1f 91       	pop	r17
    13f2:	08 95       	ret

000013f4 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <Timebase_UpCounter_Update>
  }
}
    13fa:	08 95       	ret

000013fc <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Timebase_UpCounter_Reset>
  }
}
    1402:	08 95       	ret

00001404 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    1404:	e0 91 3f 01 	lds	r30, 0x013F
    1408:	f0 91 40 01 	lds	r31, 0x0140
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	2d e0       	ldi	r18, 0x0D	; 13
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	ac 01       	movw	r20, r24
    1414:	42 9f       	mul	r20, r18
    1416:	c0 01       	movw	r24, r0
    1418:	43 9f       	mul	r20, r19
    141a:	90 0d       	add	r25, r0
    141c:	52 9f       	mul	r21, r18
    141e:	90 0d       	add	r25, r0
    1420:	11 24       	eor	r1, r1
    1422:	e8 0f       	add	r30, r24
    1424:	f9 1f       	adc	r31, r25
    1426:	e4 56       	subi	r30, 0x64	; 100
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    142e:	8f 70       	andi	r24, 0x0F	; 15
    1430:	08 95       	ret

00001432 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1432:	e0 91 3f 01 	lds	r30, 0x013F
    1436:	f0 91 40 01 	lds	r31, 0x0140
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2d e0       	ldi	r18, 0x0D	; 13
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	ac 01       	movw	r20, r24
    1442:	42 9f       	mul	r20, r18
    1444:	c0 01       	movw	r24, r0
    1446:	43 9f       	mul	r20, r19
    1448:	90 0d       	add	r25, r0
    144a:	52 9f       	mul	r21, r18
    144c:	90 0d       	add	r25, r0
    144e:	11 24       	eor	r1, r1
    1450:	e8 0f       	add	r30, r24
    1452:	f9 1f       	adc	r31, r25
    1454:	e4 56       	subi	r30, 0x64	; 100
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	6f 70       	andi	r22, 0x0F	; 15
    145a:	66 0f       	add	r22, r22
    145c:	80 81       	ld	r24, Z
    145e:	81 7e       	andi	r24, 0xE1	; 225
    1460:	86 2b       	or	r24, r22
    1462:	80 83       	st	Z, r24
}
    1464:	08 95       	ret

00001466 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    1466:	e0 91 3f 01 	lds	r30, 0x013F
    146a:	f0 91 40 01 	lds	r31, 0x0140
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	2d e0       	ldi	r18, 0x0D	; 13
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	ac 01       	movw	r20, r24
    1476:	42 9f       	mul	r20, r18
    1478:	c0 01       	movw	r24, r0
    147a:	43 9f       	mul	r20, r19
    147c:	90 0d       	add	r25, r0
    147e:	52 9f       	mul	r21, r18
    1480:	90 0d       	add	r25, r0
    1482:	11 24       	eor	r1, r1
    1484:	e8 0f       	add	r30, r24
    1486:	f9 1f       	adc	r31, r25
    1488:	ef 55       	subi	r30, 0x5F	; 95
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	60 81       	ld	r22, Z
    148e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    1490:	82 81       	ldd	r24, Z+2	; 0x02
    1492:	93 81       	ldd	r25, Z+3	; 0x03
    1494:	08 95       	ret

00001496 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1496:	e0 91 3f 01 	lds	r30, 0x013F
    149a:	f0 91 40 01 	lds	r31, 0x0140
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	2d e0       	ldi	r18, 0x0D	; 13
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	dc 01       	movw	r26, r24
    14a6:	a2 9f       	mul	r26, r18
    14a8:	c0 01       	movw	r24, r0
    14aa:	a3 9f       	mul	r26, r19
    14ac:	90 0d       	add	r25, r0
    14ae:	b2 9f       	mul	r27, r18
    14b0:	90 0d       	add	r25, r0
    14b2:	11 24       	eor	r1, r1
    14b4:	e8 0f       	add	r30, r24
    14b6:	f9 1f       	adc	r31, r25
    14b8:	ef 55       	subi	r30, 0x5F	; 95
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	40 83       	st	Z, r20
    14be:	51 83       	std	Z+1, r21	; 0x01
    14c0:	62 83       	std	Z+2, r22	; 0x02
    14c2:	73 83       	std	Z+3, r23	; 0x03
}
    14c4:	08 95       	ret

000014c6 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    14c6:	e0 91 3f 01 	lds	r30, 0x013F
    14ca:	f0 91 40 01 	lds	r31, 0x0140
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	2d e0       	ldi	r18, 0x0D	; 13
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	ac 01       	movw	r20, r24
    14d6:	42 9f       	mul	r20, r18
    14d8:	c0 01       	movw	r24, r0
    14da:	43 9f       	mul	r20, r19
    14dc:	90 0d       	add	r25, r0
    14de:	52 9f       	mul	r21, r18
    14e0:	90 0d       	add	r25, r0
    14e2:	11 24       	eor	r1, r1
    14e4:	e8 0f       	add	r30, r24
    14e6:	f9 1f       	adc	r31, r25
    14e8:	e3 56       	subi	r30, 0x63	; 99
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    14f0:	82 81       	ldd	r24, Z+2	; 0x02
    14f2:	93 81       	ldd	r25, Z+3	; 0x03
    14f4:	08 95       	ret

000014f6 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    14f6:	e0 91 3f 01 	lds	r30, 0x013F
    14fa:	f0 91 40 01 	lds	r31, 0x0140
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	2d e0       	ldi	r18, 0x0D	; 13
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	dc 01       	movw	r26, r24
    1506:	a2 9f       	mul	r26, r18
    1508:	c0 01       	movw	r24, r0
    150a:	a3 9f       	mul	r26, r19
    150c:	90 0d       	add	r25, r0
    150e:	b2 9f       	mul	r27, r18
    1510:	90 0d       	add	r25, r0
    1512:	11 24       	eor	r1, r1
    1514:	e8 0f       	add	r30, r24
    1516:	f9 1f       	adc	r31, r25
    1518:	e3 56       	subi	r30, 0x63	; 99
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	40 83       	st	Z, r20
    151e:	51 83       	std	Z+1, r21	; 0x01
    1520:	62 83       	std	Z+2, r22	; 0x02
    1522:	73 83       	std	Z+3, r23	; 0x03
}
    1524:	08 95       	ret

00001526 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    1526:	e0 91 3f 01 	lds	r30, 0x013F
    152a:	f0 91 40 01 	lds	r31, 0x0140
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	2d e0       	ldi	r18, 0x0D	; 13
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	ac 01       	movw	r20, r24
    1536:	42 9f       	mul	r20, r18
    1538:	c0 01       	movw	r24, r0
    153a:	43 9f       	mul	r20, r19
    153c:	90 0d       	add	r25, r0
    153e:	52 9f       	mul	r21, r18
    1540:	90 0d       	add	r25, r0
    1542:	11 24       	eor	r1, r1
    1544:	e8 0f       	add	r30, r24
    1546:	f9 1f       	adc	r31, r25
    1548:	eb 55       	subi	r30, 0x5B	; 91
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	60 81       	ld	r22, Z
    154e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    1550:	82 81       	ldd	r24, Z+2	; 0x02
    1552:	93 81       	ldd	r25, Z+3	; 0x03
    1554:	08 95       	ret

00001556 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    1556:	e0 91 3f 01 	lds	r30, 0x013F
    155a:	f0 91 40 01 	lds	r31, 0x0140
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1562:	77 ff       	sbrs	r23, 7
    1564:	13 c0       	rjmp	.+38     	; 0x158c <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    1566:	8d e0       	ldi	r24, 0x0D	; 13
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	ac 01       	movw	r20, r24
    156c:	24 9f       	mul	r18, r20
    156e:	c0 01       	movw	r24, r0
    1570:	25 9f       	mul	r18, r21
    1572:	90 0d       	add	r25, r0
    1574:	34 9f       	mul	r19, r20
    1576:	90 0d       	add	r25, r0
    1578:	11 24       	eor	r1, r1
    157a:	e8 0f       	add	r30, r24
    157c:	f9 1f       	adc	r31, r25
    157e:	eb 55       	subi	r30, 0x5B	; 91
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	10 82       	st	Z, r1
    1584:	11 82       	std	Z+1, r1	; 0x01
    1586:	12 82       	std	Z+2, r1	; 0x02
    1588:	13 82       	std	Z+3, r1	; 0x03
    158a:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    158c:	8d e0       	ldi	r24, 0x0D	; 13
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	dc 01       	movw	r26, r24
    1592:	2a 9f       	mul	r18, r26
    1594:	c0 01       	movw	r24, r0
    1596:	2b 9f       	mul	r18, r27
    1598:	90 0d       	add	r25, r0
    159a:	3a 9f       	mul	r19, r26
    159c:	90 0d       	add	r25, r0
    159e:	11 24       	eor	r1, r1
    15a0:	e8 0f       	add	r30, r24
    15a2:	f9 1f       	adc	r31, r25
    15a4:	eb 55       	subi	r30, 0x5B	; 91
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	40 83       	st	Z, r20
    15aa:	51 83       	std	Z+1, r21	; 0x01
    15ac:	62 83       	std	Z+2, r22	; 0x02
    15ae:	73 83       	std	Z+3, r23	; 0x03
    15b0:	08 95       	ret

000015b2 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    15b2:	e0 91 3f 01 	lds	r30, 0x013F
    15b6:	f0 91 40 01 	lds	r31, 0x0140
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	2d e0       	ldi	r18, 0x0D	; 13
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	ac 01       	movw	r20, r24
    15c2:	42 9f       	mul	r20, r18
    15c4:	c0 01       	movw	r24, r0
    15c6:	43 9f       	mul	r20, r19
    15c8:	90 0d       	add	r25, r0
    15ca:	52 9f       	mul	r21, r18
    15cc:	90 0d       	add	r25, r0
    15ce:	11 24       	eor	r1, r1
    15d0:	e8 0f       	add	r30, r24
    15d2:	f9 1f       	adc	r31, r25
    15d4:	e4 56       	subi	r30, 0x64	; 100
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    15da:	81 70       	andi	r24, 0x01	; 1
    15dc:	08 95       	ret

000015de <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    15de:	e0 91 3f 01 	lds	r30, 0x013F
    15e2:	f0 91 40 01 	lds	r31, 0x0140
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	2d e0       	ldi	r18, 0x0D	; 13
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	ac 01       	movw	r20, r24
    15ee:	42 9f       	mul	r20, r18
    15f0:	c0 01       	movw	r24, r0
    15f2:	43 9f       	mul	r20, r19
    15f4:	90 0d       	add	r25, r0
    15f6:	52 9f       	mul	r21, r18
    15f8:	90 0d       	add	r25, r0
    15fa:	11 24       	eor	r1, r1
    15fc:	e8 0f       	add	r30, r24
    15fe:	f9 1f       	adc	r31, r25
    1600:	e4 56       	subi	r30, 0x64	; 100
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	80 81       	ld	r24, Z
    1606:	81 60       	ori	r24, 0x01	; 1
    1608:	80 83       	st	Z, r24
}
    160a:	08 95       	ret

0000160c <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    160c:	e0 91 3f 01 	lds	r30, 0x013F
    1610:	f0 91 40 01 	lds	r31, 0x0140
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	2d e0       	ldi	r18, 0x0D	; 13
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	ac 01       	movw	r20, r24
    161c:	42 9f       	mul	r20, r18
    161e:	c0 01       	movw	r24, r0
    1620:	43 9f       	mul	r20, r19
    1622:	90 0d       	add	r25, r0
    1624:	52 9f       	mul	r21, r18
    1626:	90 0d       	add	r25, r0
    1628:	11 24       	eor	r1, r1
    162a:	e8 0f       	add	r30, r24
    162c:	f9 1f       	adc	r31, r25
    162e:	e4 56       	subi	r30, 0x64	; 100
    1630:	ff 4f       	sbci	r31, 0xFF	; 255
    1632:	80 81       	ld	r24, Z
    1634:	8e 7f       	andi	r24, 0xFE	; 254
    1636:	80 83       	st	Z, r24
}
    1638:	08 95       	ret

0000163a <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    163a:	e0 91 3f 01 	lds	r30, 0x013F
    163e:	f0 91 40 01 	lds	r31, 0x0140
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	2d e0       	ldi	r18, 0x0D	; 13
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	ac 01       	movw	r20, r24
    164a:	42 9f       	mul	r20, r18
    164c:	c0 01       	movw	r24, r0
    164e:	43 9f       	mul	r20, r19
    1650:	90 0d       	add	r25, r0
    1652:	52 9f       	mul	r21, r18
    1654:	90 0d       	add	r25, r0
    1656:	11 24       	eor	r1, r1
    1658:	e8 0f       	add	r30, r24
    165a:	f9 1f       	adc	r31, r25
    165c:	e3 56       	subi	r30, 0x63	; 99
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	11 92       	st	Z+, r1
    1662:	11 92       	st	Z+, r1
    1664:	11 92       	st	Z+, r1
    1666:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1668:	10 82       	st	Z, r1
    166a:	11 82       	std	Z+1, r1	; 0x01
    166c:	12 82       	std	Z+2, r1	; 0x02
    166e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1670:	35 97       	sbiw	r30, 0x05	; 5
    1672:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1674:	80 7e       	andi	r24, 0xE0	; 224
    1676:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    1678:	08 95       	ret

0000167a <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    167a:	e0 91 3f 01 	lds	r30, 0x013F
    167e:	f0 91 40 01 	lds	r31, 0x0140
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	2d e0       	ldi	r18, 0x0D	; 13
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	ac 01       	movw	r20, r24
    168a:	42 9f       	mul	r20, r18
    168c:	c0 01       	movw	r24, r0
    168e:	43 9f       	mul	r20, r19
    1690:	90 0d       	add	r25, r0
    1692:	52 9f       	mul	r21, r18
    1694:	90 0d       	add	r25, r0
    1696:	11 24       	eor	r1, r1
    1698:	e8 0f       	add	r30, r24
    169a:	f9 1f       	adc	r31, r25
    169c:	e3 56       	subi	r30, 0x63	; 99
    169e:	ff 4f       	sbci	r31, 0xFF	; 255
    16a0:	11 92       	st	Z+, r1
    16a2:	11 92       	st	Z+, r1
    16a4:	11 92       	st	Z+, r1
    16a6:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    16a8:	10 82       	st	Z, r1
    16aa:	11 82       	std	Z+1, r1	; 0x01
    16ac:	12 82       	std	Z+2, r1	; 0x02
    16ae:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16b0:	35 97       	sbiw	r30, 0x05	; 5
    16b2:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    16b4:	80 7e       	andi	r24, 0xE0	; 224
    16b6:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    16b8:	08 95       	ret

000016ba <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    16ba:	e0 91 3f 01 	lds	r30, 0x013F
    16be:	f0 91 40 01 	lds	r31, 0x0140
    16c2:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    16c4:	2d e0       	ldi	r18, 0x0D	; 13
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	ac 01       	movw	r20, r24
    16ca:	42 9f       	mul	r20, r18
    16cc:	c0 01       	movw	r24, r0
    16ce:	43 9f       	mul	r20, r19
    16d0:	90 0d       	add	r25, r0
    16d2:	52 9f       	mul	r21, r18
    16d4:	90 0d       	add	r25, r0
    16d6:	11 24       	eor	r1, r1
    16d8:	e8 0f       	add	r30, r24
    16da:	f9 1f       	adc	r31, r25
    16dc:	e4 56       	subi	r30, 0x64	; 100
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	90 81       	ld	r25, Z
    16e2:	89 2f       	mov	r24, r25
    16e4:	86 95       	lsr	r24
    16e6:	8f 70       	andi	r24, 0x0F	; 15
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16ec:	91 7e       	andi	r25, 0xE1	; 225
    16ee:	92 60       	ori	r25, 0x02	; 2
    16f0:	90 83       	st	Z, r25
    16f2:	08 95       	ret

000016f4 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    16f4:	e0 91 3f 01 	lds	r30, 0x013F
    16f8:	f0 91 40 01 	lds	r31, 0x0140
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    16fe:	2d e0       	ldi	r18, 0x0D	; 13
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	ac 01       	movw	r20, r24
    1704:	42 9f       	mul	r20, r18
    1706:	c0 01       	movw	r24, r0
    1708:	43 9f       	mul	r20, r19
    170a:	90 0d       	add	r25, r0
    170c:	52 9f       	mul	r21, r18
    170e:	90 0d       	add	r25, r0
    1710:	11 24       	eor	r1, r1
    1712:	e8 0f       	add	r30, r24
    1714:	f9 1f       	adc	r31, r25
    1716:	e4 56       	subi	r30, 0x64	; 100
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	90 81       	ld	r25, Z
    171c:	89 2f       	mov	r24, r25
    171e:	86 95       	lsr	r24
    1720:	8f 70       	andi	r24, 0x0F	; 15
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	19 f0       	breq	.+6      	; 0x172c <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1726:	91 7e       	andi	r25, 0xE1	; 225
    1728:	94 60       	ori	r25, 0x04	; 4
    172a:	90 83       	st	Z, r25
    172c:	08 95       	ret

0000172e <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1736:	c0 91 3f 01 	lds	r28, 0x013F
    173a:	d0 91 40 01 	lds	r29, 0x0140
    173e:	08 2f       	mov	r16, r24
    1740:	10 e0       	ldi	r17, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1742:	8d e0       	ldi	r24, 0x0D	; 13
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	08 9f       	mul	r16, r24
    1748:	f0 01       	movw	r30, r0
    174a:	09 9f       	mul	r16, r25
    174c:	f0 0d       	add	r31, r0
    174e:	18 9f       	mul	r17, r24
    1750:	f0 0d       	add	r31, r0
    1752:	11 24       	eor	r1, r1
    1754:	ec 0f       	add	r30, r28
    1756:	fd 1f       	adc	r31, r29
    1758:	e4 56       	subi	r30, 0x64	; 100
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 81       	ld	r24, Z
    175e:	ec 59       	subi	r30, 0x9C	; 156
    1760:	f0 40       	sbci	r31, 0x00	; 0
    1762:	86 95       	lsr	r24
    1764:	8f 70       	andi	r24, 0x0F	; 15
    1766:	51 f5       	brne	.+84     	; 0x17bc <Timebase_DownCounter_Set_Securely+0x8e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1768:	ef 55       	subi	r30, 0x5F	; 95
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	40 83       	st	Z, r20
    176e:	51 83       	std	Z+1, r21	; 0x01
    1770:	62 83       	std	Z+2, r22	; 0x02
    1772:	73 83       	std	Z+3, r23	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1774:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1776:	8a 85       	ldd	r24, Y+10	; 0x0a
    1778:	9b 85       	ldd	r25, Y+11	; 0x0b
    177a:	ac 85       	ldd	r26, Y+12	; 0x0c
    177c:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    177e:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1780:	2d e0       	ldi	r18, 0x0D	; 13
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	02 9f       	mul	r16, r18
    1786:	f0 01       	movw	r30, r0
    1788:	03 9f       	mul	r16, r19
    178a:	f0 0d       	add	r31, r0
    178c:	12 9f       	mul	r17, r18
    178e:	f0 0d       	add	r31, r0
    1790:	11 24       	eor	r1, r1
    1792:	ec 0f       	add	r30, r28
    1794:	fd 1f       	adc	r31, r29
    1796:	e3 56       	subi	r30, 0x63	; 99
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	84 0f       	add	r24, r20
    179c:	95 1f       	adc	r25, r21
    179e:	a6 1f       	adc	r26, r22
    17a0:	b7 1f       	adc	r27, r23
    17a2:	80 83       	st	Z, r24
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	a2 83       	std	Z+2, r26	; 0x02
    17a8:	b3 83       	std	Z+3, r27	; 0x03
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    17aa:	92 91       	ld	r25, -Z
    17ac:	89 2f       	mov	r24, r25
    17ae:	86 95       	lsr	r24
    17b0:	8f 70       	andi	r24, 0x0F	; 15
    17b2:	81 30       	cpi	r24, 0x01	; 1
    17b4:	19 f0       	breq	.+6      	; 0x17bc <Timebase_DownCounter_Set_Securely+0x8e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    17b6:	91 7e       	andi	r25, 0xE1	; 225
    17b8:	92 60       	ori	r25, 0x02	; 2
    17ba:	90 83       	st	Z, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    17ca:	e0 91 3f 01 	lds	r30, 0x013F
    17ce:	f0 91 40 01 	lds	r31, 0x0140
    17d2:	a8 2f       	mov	r26, r24
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	2d e0       	ldi	r18, 0x0D	; 13
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	e9 01       	movw	r28, r18
    17dc:	ac 9f       	mul	r26, r28
    17de:	90 01       	movw	r18, r0
    17e0:	ad 9f       	mul	r26, r29
    17e2:	30 0d       	add	r19, r0
    17e4:	bc 9f       	mul	r27, r28
    17e6:	30 0d       	add	r19, r0
    17e8:	11 24       	eor	r1, r1
    17ea:	e2 0f       	add	r30, r18
    17ec:	f3 1f       	adc	r31, r19
    17ee:	e3 56       	subi	r30, 0x63	; 99
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	11 92       	st	Z+, r1
    17f4:	11 92       	st	Z+, r1
    17f6:	11 92       	st	Z+, r1
    17f8:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    17fa:	10 82       	st	Z, r1
    17fc:	11 82       	std	Z+1, r1	; 0x01
    17fe:	12 82       	std	Z+2, r1	; 0x02
    1800:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1802:	35 97       	sbiw	r30, 0x05	; 5
    1804:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1806:	90 7e       	andi	r25, 0xE0	; 224
    1808:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    180a:	0e 94 97 0b 	call	0x172e	; 0x172e <Timebase_DownCounter_Set_Securely>
} 
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1818:	c0 91 3f 01 	lds	r28, 0x013F
    181c:	d0 91 40 01 	lds	r29, 0x0140
    1820:	68 2f       	mov	r22, r24
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	8d e0       	ldi	r24, 0x0D	; 13
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	68 9f       	mul	r22, r24
    182a:	f0 01       	movw	r30, r0
    182c:	69 9f       	mul	r22, r25
    182e:	f0 0d       	add	r31, r0
    1830:	78 9f       	mul	r23, r24
    1832:	f0 0d       	add	r31, r0
    1834:	11 24       	eor	r1, r1
    1836:	ec 0f       	add	r30, r28
    1838:	fd 1f       	adc	r31, r29
    183a:	e4 56       	subi	r30, 0x64	; 100
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	e0 81       	ld	r30, Z
    1840:	e6 95       	lsr	r30
    1842:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    1844:	e1 30       	cpi	r30, 0x01	; 1
    1846:	d1 f5       	brne	.+116    	; 0x18bc <Timebase_DownCounter_Update+0xa8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1848:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    184a:	2a 85       	ldd	r18, Y+10	; 0x0a
    184c:	3b 85       	ldd	r19, Y+11	; 0x0b
    184e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1850:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1852:	78 94       	sei
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    1854:	8d e0       	ldi	r24, 0x0D	; 13
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	68 9f       	mul	r22, r24
    185a:	f0 01       	movw	r30, r0
    185c:	69 9f       	mul	r22, r25
    185e:	f0 0d       	add	r31, r0
    1860:	78 9f       	mul	r23, r24
    1862:	f0 0d       	add	r31, r0
    1864:	11 24       	eor	r1, r1
    1866:	ec 0f       	add	r30, r28
    1868:	fd 1f       	adc	r31, r29
    186a:	bf 01       	movw	r22, r30
    186c:	63 56       	subi	r22, 0x63	; 99
    186e:	7f 4f       	sbci	r23, 0xFF	; 255
    1870:	eb 01       	movw	r28, r22
    1872:	88 81       	ld	r24, Y
    1874:	99 81       	ldd	r25, Y+1	; 0x01
    1876:	aa 81       	ldd	r26, Y+2	; 0x02
    1878:	bb 81       	ldd	r27, Y+3	; 0x03
    187a:	82 1b       	sub	r24, r18
    187c:	93 0b       	sbc	r25, r19
    187e:	a4 0b       	sbc	r26, r20
    1880:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1882:	ef 01       	movw	r28, r30
    1884:	cf 55       	subi	r28, 0x5F	; 95
    1886:	df 4f       	sbci	r29, 0xFF	; 255
    1888:	88 83       	st	Y, r24
    188a:	99 83       	std	Y+1, r25	; 0x01
    188c:	aa 83       	std	Y+2, r26	; 0x02
    188e:	bb 83       	std	Y+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    1890:	18 16       	cp	r1, r24
    1892:	19 06       	cpc	r1, r25
    1894:	1a 06       	cpc	r1, r26
    1896:	1b 06       	cpc	r1, r27
    1898:	94 f1       	brlt	.+100    	; 0x18fe <Timebase_DownCounter_Update+0xea>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    189a:	db 01       	movw	r26, r22
    189c:	1d 92       	st	X+, r1
    189e:	1d 92       	st	X+, r1
    18a0:	1d 92       	st	X+, r1
    18a2:	1c 92       	st	X, r1
    18a4:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    18a6:	18 82       	st	Y, r1
    18a8:	19 82       	std	Y+1, r1	; 0x01
    18aa:	1a 82       	std	Y+2, r1	; 0x02
    18ac:	1b 82       	std	Y+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    18ae:	e4 56       	subi	r30, 0x64	; 100
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    18b4:	80 7e       	andi	r24, 0xE0	; 224
    18b6:	88 60       	ori	r24, 0x08	; 8
    18b8:	80 83       	st	Z, r24
    18ba:	21 c0       	rjmp	.+66     	; 0x18fe <Timebase_DownCounter_Update+0xea>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    18bc:	e2 30       	cpi	r30, 0x02	; 2
    18be:	f9 f4       	brne	.+62     	; 0x18fe <Timebase_DownCounter_Update+0xea>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    18c0:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    18c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    18c6:	ac 85       	ldd	r26, Y+12	; 0x0c
    18c8:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    18ca:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    18cc:	2d e0       	ldi	r18, 0x0D	; 13
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	62 9f       	mul	r22, r18
    18d2:	f0 01       	movw	r30, r0
    18d4:	63 9f       	mul	r22, r19
    18d6:	f0 0d       	add	r31, r0
    18d8:	72 9f       	mul	r23, r18
    18da:	f0 0d       	add	r31, r0
    18dc:	11 24       	eor	r1, r1
    18de:	ec 0f       	add	r30, r28
    18e0:	fd 1f       	adc	r31, r29
    18e2:	ef 55       	subi	r30, 0x5F	; 95
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	20 81       	ld	r18, Z
    18e8:	31 81       	ldd	r19, Z+1	; 0x01
    18ea:	42 81       	ldd	r20, Z+2	; 0x02
    18ec:	53 81       	ldd	r21, Z+3	; 0x03
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	a4 1f       	adc	r26, r20
    18f4:	b5 1f       	adc	r27, r21
    18f6:	b2 93       	st	-Z, r27
    18f8:	a2 93       	st	-Z, r26
    18fa:	92 93       	st	-Z, r25
    18fc:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	e0 91 3f 01 	lds	r30, 0x013F
    190a:	f0 91 40 01 	lds	r31, 0x0140
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	2d e0       	ldi	r18, 0x0D	; 13
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	bc 01       	movw	r22, r24
    1916:	62 9f       	mul	r22, r18
    1918:	c0 01       	movw	r24, r0
    191a:	63 9f       	mul	r22, r19
    191c:	90 0d       	add	r25, r0
    191e:	72 9f       	mul	r23, r18
    1920:	90 0d       	add	r25, r0
    1922:	11 24       	eor	r1, r1
    1924:	e8 0f       	add	r30, r24
    1926:	f9 1f       	adc	r31, r25
    1928:	e4 56       	subi	r30, 0x64	; 100
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	86 95       	lsr	r24
    1930:	8f 70       	andi	r24, 0x0F	; 15
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	09 f4       	brne	.+2      	; 0x1938 <Timebase_DownCounter_Expired+0x34>
    1936:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1938:	84 2f       	mov	r24, r20
    193a:	08 95       	ret

0000193c <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    193c:	e0 91 3f 01 	lds	r30, 0x013F
    1940:	f0 91 40 01 	lds	r31, 0x0140
    1944:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1946:	2d e0       	ldi	r18, 0x0D	; 13
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	ac 01       	movw	r20, r24
    194c:	42 9f       	mul	r20, r18
    194e:	c0 01       	movw	r24, r0
    1950:	43 9f       	mul	r20, r19
    1952:	90 0d       	add	r25, r0
    1954:	52 9f       	mul	r21, r18
    1956:	90 0d       	add	r25, r0
    1958:	11 24       	eor	r1, r1
    195a:	e8 0f       	add	r30, r24
    195c:	f9 1f       	adc	r31, r25
    195e:	df 01       	movw	r26, r30
    1960:	a4 56       	subi	r26, 0x64	; 100
    1962:	bf 4f       	sbci	r27, 0xFF	; 255
    1964:	8c 91       	ld	r24, X
    1966:	86 95       	lsr	r24
    1968:	8f 70       	andi	r24, 0x0F	; 15
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	11 f0       	breq	.+4      	; 0x1972 <Timebase_DownCounter_Expired_Event+0x36>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1972:	e3 56       	subi	r30, 0x63	; 99
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	11 92       	st	Z+, r1
    1978:	11 92       	st	Z+, r1
    197a:	11 92       	st	Z+, r1
    197c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    197e:	10 82       	st	Z, r1
    1980:	11 82       	std	Z+1, r1	; 0x01
    1982:	12 82       	std	Z+2, r1	; 0x02
    1984:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1986:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1988:	80 7e       	andi	r24, 0xE0	; 224
    198a:	8c 93       	st	X, r24
    198c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    198e:	08 95       	ret

00001990 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    1994:	c0 91 3f 01 	lds	r28, 0x013F
    1998:	d0 91 40 01 	lds	r29, 0x0140
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    19a0:	8d e0       	ldi	r24, 0x0D	; 13
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	28 9f       	mul	r18, r24
    19a6:	f0 01       	movw	r30, r0
    19a8:	29 9f       	mul	r18, r25
    19aa:	f0 0d       	add	r31, r0
    19ac:	38 9f       	mul	r19, r24
    19ae:	f0 0d       	add	r31, r0
    19b0:	11 24       	eor	r1, r1
    19b2:	ec 0f       	add	r30, r28
    19b4:	fd 1f       	adc	r31, r29
    19b6:	e4 56       	subi	r30, 0x64	; 100
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	ec 59       	subi	r30, 0x9C	; 156
    19be:	f0 40       	sbci	r31, 0x00	; 0
    19c0:	80 fd       	sbrc	r24, 0
    19c2:	25 c0       	rjmp	.+74     	; 0x1a0e <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    19c4:	ef 55       	subi	r30, 0x5F	; 95
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	81 91       	ld	r24, Z+
    19ca:	91 91       	ld	r25, Z+
    19cc:	a1 91       	ld	r26, Z+
    19ce:	b1 91       	ld	r27, Z+
    19d0:	84 1b       	sub	r24, r20
    19d2:	95 0b       	sbc	r25, r21
    19d4:	a6 0b       	sbc	r26, r22
    19d6:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    19d8:	b7 ff       	sbrs	r27, 7
    19da:	05 c0       	rjmp	.+10     	; 0x19e6 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    19dc:	10 82       	st	Z, r1
    19de:	11 82       	std	Z+1, r1	; 0x01
    19e0:	12 82       	std	Z+2, r1	; 0x02
    19e2:	13 82       	std	Z+3, r1	; 0x03
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    19e6:	80 83       	st	Z, r24
    19e8:	91 83       	std	Z+1, r25	; 0x01
    19ea:	a2 83       	std	Z+2, r26	; 0x02
    19ec:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    19ee:	8d e0       	ldi	r24, 0x0D	; 13
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	28 9f       	mul	r18, r24
    19f4:	f0 01       	movw	r30, r0
    19f6:	29 9f       	mul	r18, r25
    19f8:	f0 0d       	add	r31, r0
    19fa:	38 9f       	mul	r19, r24
    19fc:	f0 0d       	add	r31, r0
    19fe:	11 24       	eor	r1, r1
    1a00:	ec 0f       	add	r30, r28
    1a02:	fd 1f       	adc	r31, r29
    1a04:	e4 56       	subi	r30, 0x64	; 100
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	81 60       	ori	r24, 0x01	; 1
    1a0c:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	08 95       	ret

00001a14 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1a14:	e0 91 3f 01 	lds	r30, 0x013F
    1a18:	f0 91 40 01 	lds	r31, 0x0140
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1a1e:	2d e0       	ldi	r18, 0x0D	; 13
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	ac 01       	movw	r20, r24
    1a24:	42 9f       	mul	r20, r18
    1a26:	c0 01       	movw	r24, r0
    1a28:	43 9f       	mul	r20, r19
    1a2a:	90 0d       	add	r25, r0
    1a2c:	52 9f       	mul	r21, r18
    1a2e:	90 0d       	add	r25, r0
    1a30:	11 24       	eor	r1, r1
    1a32:	e8 0f       	add	r30, r24
    1a34:	f9 1f       	adc	r31, r25
    1a36:	df 01       	movw	r26, r30
    1a38:	ab 55       	subi	r26, 0x5B	; 91
    1a3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1a3c:	ef 55       	subi	r30, 0x5F	; 95
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	20 81       	ld	r18, Z
    1a42:	31 81       	ldd	r19, Z+1	; 0x01
    1a44:	42 81       	ldd	r20, Z+2	; 0x02
    1a46:	53 81       	ldd	r21, Z+3	; 0x03
    1a48:	8d 91       	ld	r24, X+
    1a4a:	9d 91       	ld	r25, X+
    1a4c:	0d 90       	ld	r0, X+
    1a4e:	bc 91       	ld	r27, X
    1a50:	a0 2d       	mov	r26, r0
    1a52:	28 1b       	sub	r18, r24
    1a54:	39 0b       	sbc	r19, r25
    1a56:	4a 0b       	sbc	r20, r26
    1a58:	5b 0b       	sbc	r21, r27
    1a5a:	57 ff       	sbrs	r21, 7
    1a5c:	04 c0       	rjmp	.+8      	; 0x1a66 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	40 e0       	ldi	r20, 0x00	; 0
    1a64:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1a66:	b9 01       	movw	r22, r18
    1a68:	ca 01       	movw	r24, r20
    1a6a:	08 95       	ret

00001a6c <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1a70:	c0 91 3f 01 	lds	r28, 0x013F
    1a74:	d0 91 40 01 	lds	r29, 0x0140
    1a78:	68 2f       	mov	r22, r24
    1a7a:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1a7c:	8d e0       	ldi	r24, 0x0D	; 13
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	68 9f       	mul	r22, r24
    1a82:	f0 01       	movw	r30, r0
    1a84:	69 9f       	mul	r22, r25
    1a86:	f0 0d       	add	r31, r0
    1a88:	78 9f       	mul	r23, r24
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	ec 0f       	add	r30, r28
    1a90:	fd 1f       	adc	r31, r29
    1a92:	df 01       	movw	r26, r30
    1a94:	ab 55       	subi	r26, 0x5B	; 91
    1a96:	bf 4f       	sbci	r27, 0xFF	; 255
    1a98:	ef 55       	subi	r30, 0x5F	; 95
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	20 81       	ld	r18, Z
    1a9e:	31 81       	ldd	r19, Z+1	; 0x01
    1aa0:	42 81       	ldd	r20, Z+2	; 0x02
    1aa2:	53 81       	ldd	r21, Z+3	; 0x03
    1aa4:	8d 91       	ld	r24, X+
    1aa6:	9d 91       	ld	r25, X+
    1aa8:	0d 90       	ld	r0, X+
    1aaa:	bc 91       	ld	r27, X
    1aac:	a0 2d       	mov	r26, r0
    1aae:	28 1b       	sub	r18, r24
    1ab0:	39 0b       	sbc	r19, r25
    1ab2:	4a 0b       	sbc	r20, r26
    1ab4:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1ab6:	57 fd       	sbrc	r21, 7
    1ab8:	07 c0       	rjmp	.+14     	; 0x1ac8 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	41 05       	cpc	r20, r1
    1ac0:	51 05       	cpc	r21, r1
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	14 c0       	rjmp	.+40     	; 0x1af0 <Timebase_DownCounter_Period_Value_Expired+0x84>
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	8d e0       	ldi	r24, 0x0D	; 13
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	ac 01       	movw	r20, r24
    1ad0:	64 9f       	mul	r22, r20
    1ad2:	c0 01       	movw	r24, r0
    1ad4:	65 9f       	mul	r22, r21
    1ad6:	90 0d       	add	r25, r0
    1ad8:	74 9f       	mul	r23, r20
    1ada:	90 0d       	add	r25, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	c8 0f       	add	r28, r24
    1ae0:	d9 1f       	adc	r29, r25
    1ae2:	c4 56       	subi	r28, 0x64	; 100
    1ae4:	df 4f       	sbci	r29, 0xFF	; 255
    1ae6:	88 81       	ld	r24, Y
    1ae8:	80 ff       	sbrs	r24, 0
    1aea:	21 e0       	ldi	r18, 0x01	; 1
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1af0:	82 2f       	mov	r24, r18
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	08 95       	ret

00001af8 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1af8:	1f 93       	push	r17
    1afa:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    1afc:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <Timebase_DownCounter_Period_Value_Expired>
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	18 c0       	rjmp	.+48     	; 0x1b38 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1b08:	e0 91 3f 01 	lds	r30, 0x013F
    1b0c:	f0 91 40 01 	lds	r31, 0x0140
    1b10:	21 2f       	mov	r18, r17
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	8d e0       	ldi	r24, 0x0D	; 13
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	ac 01       	movw	r20, r24
    1b1a:	24 9f       	mul	r18, r20
    1b1c:	c0 01       	movw	r24, r0
    1b1e:	25 9f       	mul	r18, r21
    1b20:	90 0d       	add	r25, r0
    1b22:	34 9f       	mul	r19, r20
    1b24:	90 0d       	add	r25, r0
    1b26:	11 24       	eor	r1, r1
    1b28:	e8 0f       	add	r30, r24
    1b2a:	f9 1f       	adc	r31, r25
    1b2c:	e4 56       	subi	r30, 0x64	; 100
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	80 81       	ld	r24, Z
    1b32:	8e 7f       	andi	r24, 0xFE	; 254
    1b34:	80 83       	st	Z, r24
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1b38:	1f 91       	pop	r17
    1b3a:	08 95       	ret

00001b3c <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    1b3c:	1f 93       	push	r17
    1b3e:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1b40:	81 2f       	mov	r24, r17
    1b42:	0e 94 0a 0c 	call	0x1814	; 0x1814 <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    1b46:	1f 5f       	subi	r17, 0xFF	; 255
    1b48:	15 30       	cpi	r17, 0x05	; 5
    1b4a:	d1 f7       	brne	.-12     	; 0x1b40 <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    1b4c:	1f 91       	pop	r17
    1b4e:	08 95       	ret

00001b50 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1b50:	40 91 3f 01 	lds	r20, 0x013F
    1b54:	50 91 40 01 	lds	r21, 0x0140
    1b58:	da 01       	movw	r26, r20
    1b5a:	a3 56       	subi	r26, 0x63	; 99
    1b5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1b62:	6d e0       	ldi	r22, 0x0D	; 13
    1b64:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1b66:	1d 92       	st	X+, r1
    1b68:	1d 92       	st	X+, r1
    1b6a:	1d 92       	st	X+, r1
    1b6c:	1c 92       	st	X, r1
    1b6e:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1b70:	14 96       	adiw	r26, 0x04	; 4
    1b72:	1d 92       	st	X+, r1
    1b74:	1d 92       	st	X+, r1
    1b76:	1d 92       	st	X+, r1
    1b78:	1c 92       	st	X, r1
    1b7a:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1b7c:	26 9f       	mul	r18, r22
    1b7e:	f0 01       	movw	r30, r0
    1b80:	27 9f       	mul	r18, r23
    1b82:	f0 0d       	add	r31, r0
    1b84:	36 9f       	mul	r19, r22
    1b86:	f0 0d       	add	r31, r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	e4 0f       	add	r30, r20
    1b8c:	f5 1f       	adc	r31, r21
    1b8e:	e4 56       	subi	r30, 0x64	; 100
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1b94:	80 7e       	andi	r24, 0xE0	; 224
    1b96:	80 83       	st	Z, r24
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    1b9e:	25 30       	cpi	r18, 0x05	; 5
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	09 f7       	brne	.-62     	; 0x1b66 <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    1ba4:	08 95       	ret

00001ba6 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1ba6:	e0 91 3f 01 	lds	r30, 0x013F
    1baa:	f0 91 40 01 	lds	r31, 0x0140
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9c 01       	movw	r18, r24
    1bb2:	44 e0       	ldi	r20, 0x04	; 4
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	4a 95       	dec	r20
    1bba:	e1 f7       	brne	.-8      	; 0x1bb4 <Timebase_DownCounter_SS_Get_Status+0xe>
    1bbc:	28 0f       	add	r18, r24
    1bbe:	39 1f       	adc	r19, r25
    1bc0:	e2 0f       	add	r30, r18
    1bc2:	f3 1f       	adc	r31, r19
    1bc4:	e9 5b       	subi	r30, 0xB9	; 185
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1bcc:	8f 70       	andi	r24, 0x0F	; 15
    1bce:	08 95       	ret

00001bd0 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1bd0:	e0 91 3f 01 	lds	r30, 0x013F
    1bd4:	f0 91 40 01 	lds	r31, 0x0140
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	9c 01       	movw	r18, r24
    1bdc:	54 e0       	ldi	r21, 0x04	; 4
    1bde:	22 0f       	add	r18, r18
    1be0:	33 1f       	adc	r19, r19
    1be2:	5a 95       	dec	r21
    1be4:	e1 f7       	brne	.-8      	; 0x1bde <Timebase_DownCounter_SS_Set_Status+0xe>
    1be6:	28 0f       	add	r18, r24
    1be8:	39 1f       	adc	r19, r25
    1bea:	e2 0f       	add	r30, r18
    1bec:	f3 1f       	adc	r31, r19
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	6f 70       	andi	r22, 0x0F	; 15
    1bf4:	66 0f       	add	r22, r22
    1bf6:	80 81       	ld	r24, Z
    1bf8:	81 7e       	andi	r24, 0xE1	; 225
    1bfa:	86 2b       	or	r24, r22
    1bfc:	80 83       	st	Z, r24
}
    1bfe:	08 95       	ret

00001c00 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1c00:	e0 91 3f 01 	lds	r30, 0x013F
    1c04:	f0 91 40 01 	lds	r31, 0x0140
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	64 e0       	ldi	r22, 0x04	; 4
    1c0e:	22 0f       	add	r18, r18
    1c10:	33 1f       	adc	r19, r19
    1c12:	6a 95       	dec	r22
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <Timebase_DownCounter_SS_Get_Value+0xe>
    1c16:	28 0f       	add	r18, r24
    1c18:	39 1f       	adc	r19, r25
    1c1a:	e2 0f       	add	r30, r18
    1c1c:	f3 1f       	adc	r31, r19
    1c1e:	e0 5b       	subi	r30, 0xB0	; 176
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	08 95       	ret

00001c2c <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c2c:	e0 91 3f 01 	lds	r30, 0x013F
    1c30:	f0 91 40 01 	lds	r31, 0x0140
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 01       	movw	r18, r24
    1c38:	a4 e0       	ldi	r26, 0x04	; 4
    1c3a:	22 0f       	add	r18, r18
    1c3c:	33 1f       	adc	r19, r19
    1c3e:	aa 95       	dec	r26
    1c40:	e1 f7       	brne	.-8      	; 0x1c3a <Timebase_DownCounter_SS_Set_Value+0xe>
    1c42:	28 0f       	add	r18, r24
    1c44:	39 1f       	adc	r19, r25
    1c46:	e2 0f       	add	r30, r18
    1c48:	f3 1f       	adc	r31, r19
    1c4a:	e0 5b       	subi	r30, 0xB0	; 176
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	40 83       	st	Z, r20
    1c50:	51 83       	std	Z+1, r21	; 0x01
    1c52:	62 83       	std	Z+2, r22	; 0x02
    1c54:	73 83       	std	Z+3, r23	; 0x03
}
    1c56:	08 95       	ret

00001c58 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1c58:	e0 91 3f 01 	lds	r30, 0x013F
    1c5c:	f0 91 40 01 	lds	r31, 0x0140
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	9c 01       	movw	r18, r24
    1c64:	b4 e0       	ldi	r27, 0x04	; 4
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	ba 95       	dec	r27
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1c6e:	28 0f       	add	r18, r24
    1c70:	39 1f       	adc	r19, r25
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	e8 5b       	subi	r30, 0xB8	; 184
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	60 81       	ld	r22, Z
    1c7c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1c7e:	82 81       	ldd	r24, Z+2	; 0x02
    1c80:	93 81       	ldd	r25, Z+3	; 0x03
    1c82:	08 95       	ret

00001c84 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1c84:	e0 91 3f 01 	lds	r30, 0x013F
    1c88:	f0 91 40 01 	lds	r31, 0x0140
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 01       	movw	r18, r24
    1c90:	44 e0       	ldi	r20, 0x04	; 4
    1c92:	22 0f       	add	r18, r18
    1c94:	33 1f       	adc	r19, r19
    1c96:	4a 95       	dec	r20
    1c98:	e1 f7       	brne	.-8      	; 0x1c92 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1c9a:	28 0f       	add	r18, r24
    1c9c:	39 1f       	adc	r19, r25
    1c9e:	e2 0f       	add	r30, r18
    1ca0:	f3 1f       	adc	r31, r19
    1ca2:	e4 5b       	subi	r30, 0xB4	; 180
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	60 81       	ld	r22, Z
    1ca8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	93 81       	ldd	r25, Z+3	; 0x03
    1cae:	08 95       	ret

00001cb0 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1cb0:	e0 91 3f 01 	lds	r30, 0x013F
    1cb4:	f0 91 40 01 	lds	r31, 0x0140
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9c 01       	movw	r18, r24
    1cbc:	a4 e0       	ldi	r26, 0x04	; 4
    1cbe:	22 0f       	add	r18, r18
    1cc0:	33 1f       	adc	r19, r19
    1cc2:	aa 95       	dec	r26
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1cc6:	28 0f       	add	r18, r24
    1cc8:	39 1f       	adc	r19, r25
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	e8 5b       	subi	r30, 0xB8	; 184
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	40 83       	st	Z, r20
    1cd4:	51 83       	std	Z+1, r21	; 0x01
    1cd6:	62 83       	std	Z+2, r22	; 0x02
    1cd8:	73 83       	std	Z+3, r23	; 0x03
}
    1cda:	08 95       	ret

00001cdc <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1cdc:	e0 91 3f 01 	lds	r30, 0x013F
    1ce0:	f0 91 40 01 	lds	r31, 0x0140
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	9c 01       	movw	r18, r24
    1ce8:	b4 e0       	ldi	r27, 0x04	; 4
    1cea:	22 0f       	add	r18, r18
    1cec:	33 1f       	adc	r19, r19
    1cee:	ba 95       	dec	r27
    1cf0:	e1 f7       	brne	.-8      	; 0x1cea <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1cf2:	28 0f       	add	r18, r24
    1cf4:	39 1f       	adc	r19, r25
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	e4 5b       	subi	r30, 0xB4	; 180
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	40 83       	st	Z, r20
    1d00:	51 83       	std	Z+1, r21	; 0x01
    1d02:	62 83       	std	Z+2, r22	; 0x02
    1d04:	73 83       	std	Z+3, r23	; 0x03
}
    1d06:	08 95       	ret

00001d08 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1d08:	e0 91 3f 01 	lds	r30, 0x013F
    1d0c:	f0 91 40 01 	lds	r31, 0x0140
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 01       	movw	r18, r24
    1d14:	44 e0       	ldi	r20, 0x04	; 4
    1d16:	22 0f       	add	r18, r18
    1d18:	33 1f       	adc	r19, r19
    1d1a:	4a 95       	dec	r20
    1d1c:	e1 f7       	brne	.-8      	; 0x1d16 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1d1e:	28 0f       	add	r18, r24
    1d20:	39 1f       	adc	r19, r25
    1d22:	e2 0f       	add	r30, r18
    1d24:	f3 1f       	adc	r31, r19
    1d26:	ec 5a       	subi	r30, 0xAC	; 172
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	08 95       	ret

00001d34 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1d34:	e0 91 3f 01 	lds	r30, 0x013F
    1d38:	f0 91 40 01 	lds	r31, 0x0140
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1d40:	77 ff       	sbrs	r23, 7
    1d42:	11 c0       	rjmp	.+34     	; 0x1d66 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1d44:	c9 01       	movw	r24, r18
    1d46:	b4 e0       	ldi	r27, 0x04	; 4
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	ba 95       	dec	r27
    1d4e:	e1 f7       	brne	.-8      	; 0x1d48 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1d50:	82 0f       	add	r24, r18
    1d52:	93 1f       	adc	r25, r19
    1d54:	e8 0f       	add	r30, r24
    1d56:	f9 1f       	adc	r31, r25
    1d58:	ec 5a       	subi	r30, 0xAC	; 172
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	10 82       	st	Z, r1
    1d5e:	11 82       	std	Z+1, r1	; 0x01
    1d60:	12 82       	std	Z+2, r1	; 0x02
    1d62:	13 82       	std	Z+3, r1	; 0x03
    1d64:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1d66:	c9 01       	movw	r24, r18
    1d68:	a4 e0       	ldi	r26, 0x04	; 4
    1d6a:	88 0f       	add	r24, r24
    1d6c:	99 1f       	adc	r25, r25
    1d6e:	aa 95       	dec	r26
    1d70:	e1 f7       	brne	.-8      	; 0x1d6a <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1d72:	82 0f       	add	r24, r18
    1d74:	93 1f       	adc	r25, r19
    1d76:	e8 0f       	add	r30, r24
    1d78:	f9 1f       	adc	r31, r25
    1d7a:	ec 5a       	subi	r30, 0xAC	; 172
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	40 83       	st	Z, r20
    1d80:	51 83       	std	Z+1, r21	; 0x01
    1d82:	62 83       	std	Z+2, r22	; 0x02
    1d84:	73 83       	std	Z+3, r23	; 0x03
    1d86:	08 95       	ret

00001d88 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1d88:	e0 91 3f 01 	lds	r30, 0x013F
    1d8c:	f0 91 40 01 	lds	r31, 0x0140
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 01       	movw	r18, r24
    1d94:	44 e0       	ldi	r20, 0x04	; 4
    1d96:	22 0f       	add	r18, r18
    1d98:	33 1f       	adc	r19, r19
    1d9a:	4a 95       	dec	r20
    1d9c:	e1 f7       	brne	.-8      	; 0x1d96 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	e2 0f       	add	r30, r18
    1da4:	f3 1f       	adc	r31, r19
    1da6:	e9 5b       	subi	r30, 0xB9	; 185
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1dac:	81 70       	andi	r24, 0x01	; 1
    1dae:	08 95       	ret

00001db0 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1db0:	e0 91 3f 01 	lds	r30, 0x013F
    1db4:	f0 91 40 01 	lds	r31, 0x0140
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9c 01       	movw	r18, r24
    1dbc:	54 e0       	ldi	r21, 0x04	; 4
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
    1dc2:	5a 95       	dec	r21
    1dc4:	e1 f7       	brne	.-8      	; 0x1dbe <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1dc6:	28 0f       	add	r18, r24
    1dc8:	39 1f       	adc	r19, r25
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	e9 5b       	subi	r30, 0xB9	; 185
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	81 60       	ori	r24, 0x01	; 1
    1dd6:	80 83       	st	Z, r24
}
    1dd8:	08 95       	ret

00001dda <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1dda:	e0 91 3f 01 	lds	r30, 0x013F
    1dde:	f0 91 40 01 	lds	r31, 0x0140
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9c 01       	movw	r18, r24
    1de6:	64 e0       	ldi	r22, 0x04	; 4
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	6a 95       	dec	r22
    1dee:	e1 f7       	brne	.-8      	; 0x1de8 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1df0:	28 0f       	add	r18, r24
    1df2:	39 1f       	adc	r19, r25
    1df4:	e2 0f       	add	r30, r18
    1df6:	f3 1f       	adc	r31, r19
    1df8:	e9 5b       	subi	r30, 0xB9	; 185
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 81       	ld	r24, Z
    1dfe:	8e 7f       	andi	r24, 0xFE	; 254
    1e00:	80 83       	st	Z, r24
}
    1e02:	08 95       	ret

00001e04 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e04:	e0 91 3f 01 	lds	r30, 0x013F
    1e08:	f0 91 40 01 	lds	r31, 0x0140
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9c 01       	movw	r18, r24
    1e10:	74 e0       	ldi	r23, 0x04	; 4
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	7a 95       	dec	r23
    1e18:	e1 f7       	brne	.-8      	; 0x1e12 <Timebase_DownCounter_SS_Reset+0xe>
    1e1a:	28 0f       	add	r18, r24
    1e1c:	39 1f       	adc	r19, r25
    1e1e:	e2 0f       	add	r30, r18
    1e20:	f3 1f       	adc	r31, r19
    1e22:	e4 5b       	subi	r30, 0xB4	; 180
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	10 82       	st	Z, r1
    1e28:	11 82       	std	Z+1, r1	; 0x01
    1e2a:	12 82       	std	Z+2, r1	; 0x02
    1e2c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e2e:	12 92       	st	-Z, r1
    1e30:	12 92       	st	-Z, r1
    1e32:	12 92       	st	-Z, r1
    1e34:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e36:	38 96       	adiw	r30, 0x08	; 8
    1e38:	10 82       	st	Z, r1
    1e3a:	11 82       	std	Z+1, r1	; 0x01
    1e3c:	12 82       	std	Z+2, r1	; 0x02
    1e3e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e40:	39 97       	sbiw	r30, 0x09	; 9
    1e42:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1e44:	80 7e       	andi	r24, 0xE0	; 224
    1e46:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1e48:	08 95       	ret

00001e4a <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e4a:	e0 91 3f 01 	lds	r30, 0x013F
    1e4e:	f0 91 40 01 	lds	r31, 0x0140
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 01       	movw	r18, r24
    1e56:	a4 e0       	ldi	r26, 0x04	; 4
    1e58:	22 0f       	add	r18, r18
    1e5a:	33 1f       	adc	r19, r19
    1e5c:	aa 95       	dec	r26
    1e5e:	e1 f7       	brne	.-8      	; 0x1e58 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1e60:	28 0f       	add	r18, r24
    1e62:	39 1f       	adc	r19, r25
    1e64:	e2 0f       	add	r30, r18
    1e66:	f3 1f       	adc	r31, r19
    1e68:	e4 5b       	subi	r30, 0xB4	; 180
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	10 82       	st	Z, r1
    1e6e:	11 82       	std	Z+1, r1	; 0x01
    1e70:	12 82       	std	Z+2, r1	; 0x02
    1e72:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e74:	12 92       	st	-Z, r1
    1e76:	12 92       	st	-Z, r1
    1e78:	12 92       	st	-Z, r1
    1e7a:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e7c:	38 96       	adiw	r30, 0x08	; 8
    1e7e:	10 82       	st	Z, r1
    1e80:	11 82       	std	Z+1, r1	; 0x01
    1e82:	12 82       	std	Z+2, r1	; 0x02
    1e84:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e86:	39 97       	sbiw	r30, 0x09	; 9
    1e88:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1e8a:	80 7e       	andi	r24, 0xE0	; 224
    1e8c:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1e8e:	08 95       	ret

00001e90 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e90:	e0 91 3f 01 	lds	r30, 0x013F
    1e94:	f0 91 40 01 	lds	r31, 0x0140
    1e98:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	b4 e0       	ldi	r27, 0x04	; 4
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	ba 95       	dec	r27
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <Timebase_DownCounter_SS_Start+0xe>
    1ea6:	28 0f       	add	r18, r24
    1ea8:	39 1f       	adc	r19, r25
    1eaa:	e2 0f       	add	r30, r18
    1eac:	f3 1f       	adc	r31, r19
    1eae:	e9 5b       	subi	r30, 0xB9	; 185
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	90 81       	ld	r25, Z
    1eb4:	89 2f       	mov	r24, r25
    1eb6:	86 95       	lsr	r24
    1eb8:	8f 70       	andi	r24, 0x0F	; 15
    1eba:	81 30       	cpi	r24, 0x01	; 1
    1ebc:	19 f0       	breq	.+6      	; 0x1ec4 <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ebe:	91 7e       	andi	r25, 0xE1	; 225
    1ec0:	92 60       	ori	r25, 0x02	; 2
    1ec2:	90 83       	st	Z, r25
    1ec4:	08 95       	ret

00001ec6 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ec6:	e0 91 3f 01 	lds	r30, 0x013F
    1eca:	f0 91 40 01 	lds	r31, 0x0140
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	44 e0       	ldi	r20, 0x04	; 4
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	4a 95       	dec	r20
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <Timebase_DownCounter_SS_Stop+0xe>
    1edc:	28 0f       	add	r18, r24
    1ede:	39 1f       	adc	r19, r25
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	e9 5b       	subi	r30, 0xB9	; 185
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	90 81       	ld	r25, Z
    1eea:	89 2f       	mov	r24, r25
    1eec:	86 95       	lsr	r24
    1eee:	8f 70       	andi	r24, 0x0F	; 15
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ef4:	91 7e       	andi	r25, 0xE1	; 225
    1ef6:	94 60       	ori	r25, 0x04	; 4
    1ef8:	90 83       	st	Z, r25
    1efa:	08 95       	ret

00001efc <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1efc:	2f 92       	push	r2
    1efe:	3f 92       	push	r3
    1f00:	4f 92       	push	r4
    1f02:	5f 92       	push	r5
    1f04:	6f 92       	push	r6
    1f06:	7f 92       	push	r7
    1f08:	8f 92       	push	r8
    1f0a:	9f 92       	push	r9
    1f0c:	af 92       	push	r10
    1f0e:	bf 92       	push	r11
    1f10:	cf 92       	push	r12
    1f12:	df 92       	push	r13
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	df 93       	push	r29
    1f1e:	cf 93       	push	r28
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	4a 01       	movw	r8, r20
    1f2a:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f2c:	20 91 3f 01 	lds	r18, 0x013F
    1f30:	30 91 40 01 	lds	r19, 0x0140
    1f34:	3c 83       	std	Y+4, r19	; 0x04
    1f36:	2b 83       	std	Y+3, r18	; 0x03
    1f38:	a8 2f       	mov	r26, r24
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ba 83       	std	Y+2, r27	; 0x02
    1f3e:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1f40:	fd 01       	movw	r30, r26
    1f42:	64 e0       	ldi	r22, 0x04	; 4
    1f44:	ee 0f       	add	r30, r30
    1f46:	ff 1f       	adc	r31, r31
    1f48:	6a 95       	dec	r22
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <Timebase_DownCounter_SS_Set_Securely+0x48>
    1f4c:	ea 0f       	add	r30, r26
    1f4e:	fb 1f       	adc	r31, r27
    1f50:	e2 0f       	add	r30, r18
    1f52:	f3 1f       	adc	r31, r19
    1f54:	e9 5b       	subi	r30, 0xB9	; 185
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	e7 54       	subi	r30, 0x47	; 71
    1f5c:	f0 40       	sbci	r31, 0x00	; 0
    1f5e:	86 95       	lsr	r24
    1f60:	8f 70       	andi	r24, 0x0F	; 15
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1f64:	76 c0       	rjmp	.+236    	; 0x2052 <Timebase_DownCounter_SS_Set_Securely+0x156>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f66:	e0 5b       	subi	r30, 0xB0	; 176
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 82       	st	Z, r8
    1f6c:	91 82       	std	Z+1, r9	; 0x01
    1f6e:	a2 82       	std	Z+2, r10	; 0x02
    1f70:	b3 82       	std	Z+3, r11	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1f72:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    1f74:	f9 01       	movw	r30, r18
    1f76:	c0 84       	ldd	r12, Z+8	; 0x08
    1f78:	d1 84       	ldd	r13, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1f7a:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1f7c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1f7e:	22 84       	ldd	r2, Z+10	; 0x0a
    1f80:	33 84       	ldd	r3, Z+11	; 0x0b
    1f82:	44 84       	ldd	r4, Z+12	; 0x0c
    1f84:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1f86:	78 94       	sei
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1f88:	21 81       	ldd	r18, Z+1	; 0x01
    1f8a:	32 81       	ldd	r19, Z+2	; 0x02
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	c5 01       	movw	r24, r10
    1f92:	b4 01       	movw	r22, r8
    1f94:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
    1f98:	7b 01       	movw	r14, r22
    1f9a:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1f9c:	ab 81       	ldd	r26, Y+3	; 0x03
    1f9e:	bc 81       	ldd	r27, Y+4	; 0x04
    1fa0:	11 96       	adiw	r26, 0x01	; 1
    1fa2:	2d 91       	ld	r18, X+
    1fa4:	3c 91       	ld	r19, X
    1fa6:	12 97       	sbiw	r26, 0x02	; 2
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	c5 01       	movw	r24, r10
    1fae:	b4 01       	movw	r22, r8
    1fb0:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
    1fb4:	c9 01       	movw	r24, r18
    1fb6:	da 01       	movw	r26, r20
    1fb8:	3c 01       	movw	r6, r24
    1fba:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1fbc:	56 01       	movw	r10, r12
    1fbe:	cc 24       	eor	r12, r12
    1fc0:	dd 24       	eor	r13, r13
    1fc2:	ae 0c       	add	r10, r14
    1fc4:	bf 1c       	adc	r11, r15
    1fc6:	c0 1e       	adc	r12, r16
    1fc8:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1fca:	eb 81       	ldd	r30, Y+3	; 0x03
    1fcc:	fc 81       	ldd	r31, Y+4	; 0x04
    1fce:	81 81       	ldd	r24, Z+1	; 0x01
    1fd0:	92 81       	ldd	r25, Z+2	; 0x02
    1fd2:	a0 e0       	ldi	r26, 0x00	; 0
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	a8 16       	cp	r10, r24
    1fd8:	b9 06       	cpc	r11, r25
    1fda:	ca 06       	cpc	r12, r26
    1fdc:	db 06       	cpc	r13, r27
    1fde:	94 f0       	brlt	.+36     	; 0x2004 <Timebase_DownCounter_SS_Set_Securely+0x108>
	  sec_val += 1;
    1fe0:	08 94       	sec
    1fe2:	61 1c       	adc	r6, r1
    1fe4:	71 1c       	adc	r7, r1
    1fe6:	81 1c       	adc	r8, r1
    1fe8:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1fea:	21 81       	ldd	r18, Z+1	; 0x01
    1fec:	32 81       	ldd	r19, Z+2	; 0x02
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	c6 01       	movw	r24, r12
    1ff4:	b5 01       	movw	r22, r10
    1ff6:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	da 01       	movw	r26, r20
    2000:	5c 01       	movw	r10, r24
    2002:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2004:	e9 81       	ldd	r30, Y+1	; 0x01
    2006:	fa 81       	ldd	r31, Y+2	; 0x02
    2008:	54 e0       	ldi	r21, 0x04	; 4
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	5a 95       	dec	r21
    2010:	e1 f7       	brne	.-8      	; 0x200a <Timebase_DownCounter_SS_Set_Securely+0x10e>
    2012:	29 81       	ldd	r18, Y+1	; 0x01
    2014:	3a 81       	ldd	r19, Y+2	; 0x02
    2016:	e2 0f       	add	r30, r18
    2018:	f3 1f       	adc	r31, r19
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	e8 0f       	add	r30, r24
    2020:	f9 1f       	adc	r31, r25
    2022:	e8 5b       	subi	r30, 0xB8	; 184
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	26 0c       	add	r2, r6
    2028:	37 1c       	adc	r3, r7
    202a:	48 1c       	adc	r4, r8
    202c:	59 1c       	adc	r5, r9
    202e:	21 92       	st	Z+, r2
    2030:	31 92       	st	Z+, r3
    2032:	41 92       	st	Z+, r4
    2034:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2036:	a0 82       	st	Z, r10
    2038:	b1 82       	std	Z+1, r11	; 0x01
    203a:	c2 82       	std	Z+2, r12	; 0x02
    203c:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    203e:	35 97       	sbiw	r30, 0x05	; 5
    2040:	90 81       	ld	r25, Z
    2042:	89 2f       	mov	r24, r25
    2044:	86 95       	lsr	r24
    2046:	8f 70       	andi	r24, 0x0F	; 15
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	19 f0       	breq	.+6      	; 0x2052 <Timebase_DownCounter_SS_Set_Securely+0x156>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    204c:	91 7e       	andi	r25, 0xE1	; 225
    204e:	92 60       	ori	r25, 0x02	; 2
    2050:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	bf 90       	pop	r11
    206c:	af 90       	pop	r10
    206e:	9f 90       	pop	r9
    2070:	8f 90       	pop	r8
    2072:	7f 90       	pop	r7
    2074:	6f 90       	pop	r6
    2076:	5f 90       	pop	r5
    2078:	4f 90       	pop	r4
    207a:	3f 90       	pop	r3
    207c:	2f 90       	pop	r2
    207e:	08 95       	ret

00002080 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2080:	e0 91 3f 01 	lds	r30, 0x013F
    2084:	f0 91 40 01 	lds	r31, 0x0140
    2088:	a8 2f       	mov	r26, r24
    208a:	b0 e0       	ldi	r27, 0x00	; 0
    208c:	9d 01       	movw	r18, r26
    208e:	94 e0       	ldi	r25, 0x04	; 4
    2090:	22 0f       	add	r18, r18
    2092:	33 1f       	adc	r19, r19
    2094:	9a 95       	dec	r25
    2096:	e1 f7       	brne	.-8      	; 0x2090 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    2098:	2a 0f       	add	r18, r26
    209a:	3b 1f       	adc	r19, r27
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	e4 5b       	subi	r30, 0xB4	; 180
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	10 82       	st	Z, r1
    20a6:	11 82       	std	Z+1, r1	; 0x01
    20a8:	12 82       	std	Z+2, r1	; 0x02
    20aa:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    20ac:	12 92       	st	-Z, r1
    20ae:	12 92       	st	-Z, r1
    20b0:	12 92       	st	-Z, r1
    20b2:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    20b4:	38 96       	adiw	r30, 0x08	; 8
    20b6:	10 82       	st	Z, r1
    20b8:	11 82       	std	Z+1, r1	; 0x01
    20ba:	12 82       	std	Z+2, r1	; 0x02
    20bc:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    20be:	39 97       	sbiw	r30, 0x09	; 9
    20c0:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    20c2:	90 7e       	andi	r25, 0xE0	; 224
    20c4:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    20c6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <Timebase_DownCounter_SS_Set_Securely>
} 
    20ca:	08 95       	ret

000020cc <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    20cc:	4f 92       	push	r4
    20ce:	5f 92       	push	r5
    20d0:	6f 92       	push	r6
    20d2:	7f 92       	push	r7
    20d4:	8f 92       	push	r8
    20d6:	9f 92       	push	r9
    20d8:	af 92       	push	r10
    20da:	bf 92       	push	r11
    20dc:	cf 92       	push	r12
    20de:	df 92       	push	r13
    20e0:	ef 92       	push	r14
    20e2:	ff 92       	push	r15
    20e4:	0f 93       	push	r16
    20e6:	1f 93       	push	r17
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <Timebase_DownCounter_SS_Update+0x22>
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <Timebase_DownCounter_SS_Update+0x24>
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    20f4:	60 90 3f 01 	lds	r6, 0x013F
    20f8:	70 90 40 01 	lds	r7, 0x0140
    20fc:	c8 2e       	mov	r12, r24
    20fe:	dd 24       	eor	r13, r13
    2100:	f6 01       	movw	r30, r12
    2102:	54 e0       	ldi	r21, 0x04	; 4
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	5a 95       	dec	r21
    210a:	e1 f7       	brne	.-8      	; 0x2104 <Timebase_DownCounter_SS_Update+0x38>
    210c:	ec 0d       	add	r30, r12
    210e:	fd 1d       	adc	r31, r13
    2110:	e6 0d       	add	r30, r6
    2112:	f7 1d       	adc	r31, r7
    2114:	e9 5b       	subi	r30, 0xB9	; 185
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	e0 81       	ld	r30, Z
    211a:	e6 95       	lsr	r30
    211c:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    211e:	e1 30       	cpi	r30, 0x01	; 1
    2120:	09 f0       	breq	.+2      	; 0x2124 <Timebase_DownCounter_SS_Update+0x58>
    2122:	75 c0       	rjmp	.+234    	; 0x220e <Timebase_DownCounter_SS_Update+0x142>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2124:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    2126:	d3 01       	movw	r26, r6
    2128:	18 96       	adiw	r26, 0x08	; 8
    212a:	8d 91       	ld	r24, X+
    212c:	9c 91       	ld	r25, X
    212e:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2130:	78 94       	sei
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    2132:	4c 01       	movw	r8, r24
    2134:	aa 24       	eor	r10, r10
    2136:	bb 24       	eor	r11, r11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2138:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    213a:	f3 01       	movw	r30, r6
    213c:	82 85       	ldd	r24, Z+10	; 0x0a
    213e:	93 85       	ldd	r25, Z+11	; 0x0b
    2140:	a4 85       	ldd	r26, Z+12	; 0x0c
    2142:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2144:	78 94       	sei
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    2146:	f6 01       	movw	r30, r12
    2148:	44 e0       	ldi	r20, 0x04	; 4
    214a:	ee 0f       	add	r30, r30
    214c:	ff 1f       	adc	r31, r31
    214e:	4a 95       	dec	r20
    2150:	e1 f7       	brne	.-8      	; 0x214a <Timebase_DownCounter_SS_Update+0x7e>
    2152:	ec 0d       	add	r30, r12
    2154:	fd 1d       	adc	r31, r13
    2156:	e6 0d       	add	r30, r6
    2158:	f7 1d       	adc	r31, r7
    215a:	e8 5b       	subi	r30, 0xB8	; 184
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	e0 80       	ld	r14, Z
    2160:	f1 80       	ldd	r15, Z+1	; 0x01
    2162:	02 81       	ldd	r16, Z+2	; 0x02
    2164:	13 81       	ldd	r17, Z+3	; 0x03
    2166:	e8 1a       	sub	r14, r24
    2168:	f9 0a       	sbc	r15, r25
    216a:	0a 0b       	sbc	r16, r26
    216c:	1b 0b       	sbc	r17, r27
    216e:	17 ff       	sbrs	r17, 7
    2170:	03 c0       	rjmp	.+6      	; 0x2178 <Timebase_DownCounter_SS_Update+0xac>
    2172:	ee 24       	eor	r14, r14
    2174:	ff 24       	eor	r15, r15
    2176:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    2178:	d3 01       	movw	r26, r6
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	2d 91       	ld	r18, X+
    217e:	3c 91       	ld	r19, X
    2180:	12 97       	sbiw	r26, 0x02	; 2
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	c8 01       	movw	r24, r16
    2188:	b7 01       	movw	r22, r14
    218a:	0e 94 59 13 	call	0x26b2	; 0x26b2 <__mulsi3>
	temp_s += temp_ss;
    218e:	f6 01       	movw	r30, r12
    2190:	34 e0       	ldi	r19, 0x04	; 4
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	3a 95       	dec	r19
    2198:	e1 f7       	brne	.-8      	; 0x2192 <Timebase_DownCounter_SS_Update+0xc6>
    219a:	ec 0d       	add	r30, r12
    219c:	fd 1d       	adc	r31, r13
    219e:	e6 0d       	add	r30, r6
    21a0:	f7 1d       	adc	r31, r7
    21a2:	8f 01       	movw	r16, r30
    21a4:	04 5b       	subi	r16, 0xB4	; 180
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	d8 01       	movw	r26, r16
    21aa:	2d 91       	ld	r18, X+
    21ac:	3d 91       	ld	r19, X+
    21ae:	4d 91       	ld	r20, X+
    21b0:	5c 91       	ld	r21, X
    21b2:	28 19       	sub	r18, r8
    21b4:	39 09       	sbc	r19, r9
    21b6:	4a 09       	sbc	r20, r10
    21b8:	5b 09       	sbc	r21, r11
    21ba:	26 0f       	add	r18, r22
    21bc:	37 1f       	adc	r19, r23
    21be:	48 1f       	adc	r20, r24
    21c0:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21c2:	cf 01       	movw	r24, r30
    21c4:	80 5b       	subi	r24, 0xB0	; 176
    21c6:	9f 4f       	sbci	r25, 0xFF	; 255
    21c8:	dc 01       	movw	r26, r24
    21ca:	2d 93       	st	X+, r18
    21cc:	3d 93       	st	X+, r19
    21ce:	4d 93       	st	X+, r20
    21d0:	5c 93       	st	X, r21
    21d2:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    21d4:	12 16       	cp	r1, r18
    21d6:	13 06       	cpc	r1, r19
    21d8:	14 06       	cpc	r1, r20
    21da:	15 06       	cpc	r1, r21
    21dc:	0c f4       	brge	.+2      	; 0x21e0 <Timebase_DownCounter_SS_Update+0x114>
    21de:	6a c0       	rjmp	.+212    	; 0x22b4 <Timebase_DownCounter_SS_Update+0x1e8>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    21e0:	d8 01       	movw	r26, r16
    21e2:	1d 92       	st	X+, r1
    21e4:	1d 92       	st	X+, r1
    21e6:	1d 92       	st	X+, r1
    21e8:	1c 92       	st	X, r1
    21ea:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    21ec:	e8 5b       	subi	r30, 0xB8	; 184
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	10 82       	st	Z, r1
    21f2:	11 82       	std	Z+1, r1	; 0x01
    21f4:	12 82       	std	Z+2, r1	; 0x02
    21f6:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21f8:	dc 01       	movw	r26, r24
    21fa:	1d 92       	st	X+, r1
    21fc:	1d 92       	st	X+, r1
    21fe:	1d 92       	st	X+, r1
    2200:	1c 92       	st	X, r1
    2202:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    2204:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2206:	80 7e       	andi	r24, 0xE0	; 224
    2208:	88 60       	ori	r24, 0x08	; 8
    220a:	80 83       	st	Z, r24
    220c:	53 c0       	rjmp	.+166    	; 0x22b4 <Timebase_DownCounter_SS_Update+0x1e8>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    220e:	e2 30       	cpi	r30, 0x02	; 2
    2210:	09 f0       	breq	.+2      	; 0x2214 <Timebase_DownCounter_SS_Update+0x148>
    2212:	50 c0       	rjmp	.+160    	; 0x22b4 <Timebase_DownCounter_SS_Update+0x1e8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2214:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    2216:	f3 01       	movw	r30, r6
    2218:	40 84       	ldd	r4, Z+8	; 0x08
    221a:	51 84       	ldd	r5, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    221c:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    221e:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2220:	d3 01       	movw	r26, r6
    2222:	1a 96       	adiw	r26, 0x0a	; 10
    2224:	8d 90       	ld	r8, X+
    2226:	9d 90       	ld	r9, X+
    2228:	ad 90       	ld	r10, X+
    222a:	bc 90       	ld	r11, X
    222c:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    222e:	78 94       	sei
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2230:	86 01       	movw	r16, r12
    2232:	24 e0       	ldi	r18, 0x04	; 4
    2234:	00 0f       	add	r16, r16
    2236:	11 1f       	adc	r17, r17
    2238:	2a 95       	dec	r18
    223a:	e1 f7       	brne	.-8      	; 0x2234 <Timebase_DownCounter_SS_Update+0x168>
    223c:	0c 0d       	add	r16, r12
    223e:	1d 1d       	adc	r17, r13
    2240:	06 0d       	add	r16, r6
    2242:	17 1d       	adc	r17, r7
    2244:	00 5b       	subi	r16, 0xB0	; 176
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	d8 01       	movw	r26, r16
    224a:	8d 91       	ld	r24, X+
    224c:	9d 91       	ld	r25, X+
    224e:	0d 90       	ld	r0, X+
    2250:	bc 91       	ld	r27, X
    2252:	a0 2d       	mov	r26, r0
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	9a 83       	std	Y+2, r25	; 0x02
    2258:	ab 83       	std	Y+3, r26	; 0x03
    225a:	bc 83       	std	Y+4, r27	; 0x04
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    225c:	f3 01       	movw	r30, r6
    225e:	21 81       	ldd	r18, Z+1	; 0x01
    2260:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    2262:	c1 80       	ldd	r12, Z+1	; 0x01
    2264:	d2 80       	ldd	r13, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2266:	08 50       	subi	r16, 0x08	; 8
    2268:	10 40       	sbci	r17, 0x00	; 0
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	50 e0       	ldi	r21, 0x00	; 0
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
    2276:	82 0e       	add	r8, r18
    2278:	93 1e       	adc	r9, r19
    227a:	a4 1e       	adc	r10, r20
    227c:	b5 1e       	adc	r11, r21
    227e:	d8 01       	movw	r26, r16
    2280:	8d 92       	st	X+, r8
    2282:	9d 92       	st	X+, r9
    2284:	ad 92       	st	X+, r10
    2286:	bd 92       	st	X+, r11
    2288:	8d 01       	movw	r16, r26
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    228a:	ee 24       	eor	r14, r14
    228c:	ff 24       	eor	r15, r15
    228e:	69 81       	ldd	r22, Y+1	; 0x01
    2290:	7a 81       	ldd	r23, Y+2	; 0x02
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	a7 01       	movw	r20, r14
    2298:	96 01       	movw	r18, r12
    229a:	0e 94 ae 13 	call	0x275c	; 0x275c <__divmodsi4>
    229e:	66 24       	eor	r6, r6
    22a0:	77 24       	eor	r7, r7
    22a2:	46 0e       	add	r4, r22
    22a4:	57 1e       	adc	r5, r23
    22a6:	68 1e       	adc	r6, r24
    22a8:	79 1e       	adc	r7, r25
    22aa:	f8 01       	movw	r30, r16
    22ac:	40 82       	st	Z, r4
    22ae:	51 82       	std	Z+1, r5	; 0x01
    22b0:	62 82       	std	Z+2, r6	; 0x02
    22b2:	73 82       	std	Z+3, r7	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	df 90       	pop	r13
    22ca:	cf 90       	pop	r12
    22cc:	bf 90       	pop	r11
    22ce:	af 90       	pop	r10
    22d0:	9f 90       	pop	r9
    22d2:	8f 90       	pop	r8
    22d4:	7f 90       	pop	r7
    22d6:	6f 90       	pop	r6
    22d8:	5f 90       	pop	r5
    22da:	4f 90       	pop	r4
    22dc:	08 95       	ret

000022de <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	e0 91 3f 01 	lds	r30, 0x013F
    22e4:	f0 91 40 01 	lds	r31, 0x0140
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c 01       	movw	r18, r24
    22ec:	64 e0       	ldi	r22, 0x04	; 4
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	6a 95       	dec	r22
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <Timebase_DownCounter_SS_Expired+0x10>
    22f6:	28 0f       	add	r18, r24
    22f8:	39 1f       	adc	r19, r25
    22fa:	e2 0f       	add	r30, r18
    22fc:	f3 1f       	adc	r31, r19
    22fe:	e9 5b       	subi	r30, 0xB9	; 185
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	86 95       	lsr	r24
    2306:	8f 70       	andi	r24, 0x0F	; 15
    2308:	84 30       	cpi	r24, 0x04	; 4
    230a:	09 f4       	brne	.+2      	; 0x230e <Timebase_DownCounter_SS_Expired+0x30>
    230c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    230e:	84 2f       	mov	r24, r20
    2310:	08 95       	ret

00002312 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2312:	e0 91 3f 01 	lds	r30, 0x013F
    2316:	f0 91 40 01 	lds	r31, 0x0140
    231a:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    231c:	9c 01       	movw	r18, r24
    231e:	74 e0       	ldi	r23, 0x04	; 4
    2320:	22 0f       	add	r18, r18
    2322:	33 1f       	adc	r19, r19
    2324:	7a 95       	dec	r23
    2326:	e1 f7       	brne	.-8      	; 0x2320 <Timebase_DownCounter_SS_Expired_Event+0xe>
    2328:	28 0f       	add	r18, r24
    232a:	39 1f       	adc	r19, r25
    232c:	e2 0f       	add	r30, r18
    232e:	f3 1f       	adc	r31, r19
    2330:	df 01       	movw	r26, r30
    2332:	a9 5b       	subi	r26, 0xB9	; 185
    2334:	bf 4f       	sbci	r27, 0xFF	; 255
    2336:	8c 91       	ld	r24, X
    2338:	86 95       	lsr	r24
    233a:	8f 70       	andi	r24, 0x0F	; 15
    233c:	84 30       	cpi	r24, 0x04	; 4
    233e:	11 f0       	breq	.+4      	; 0x2344 <Timebase_DownCounter_SS_Expired_Event+0x32>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2344:	e4 5b       	subi	r30, 0xB4	; 180
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	10 82       	st	Z, r1
    234a:	11 82       	std	Z+1, r1	; 0x01
    234c:	12 82       	std	Z+2, r1	; 0x02
    234e:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2350:	12 92       	st	-Z, r1
    2352:	12 92       	st	-Z, r1
    2354:	12 92       	st	-Z, r1
    2356:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2358:	38 96       	adiw	r30, 0x08	; 8
    235a:	10 82       	st	Z, r1
    235c:	11 82       	std	Z+1, r1	; 0x01
    235e:	12 82       	std	Z+2, r1	; 0x02
    2360:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2362:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    2364:	80 7e       	andi	r24, 0xE0	; 224
    2366:	8c 93       	st	X, r24
    2368:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    236a:	08 95       	ret

0000236c <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    2370:	c0 91 3f 01 	lds	r28, 0x013F
    2374:	d0 91 40 01 	lds	r29, 0x0140
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    237c:	f9 01       	movw	r30, r18
    237e:	b4 e0       	ldi	r27, 0x04	; 4
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ba 95       	dec	r27
    2386:	e1 f7       	brne	.-8      	; 0x2380 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	ec 0f       	add	r30, r28
    238e:	fd 1f       	adc	r31, r29
    2390:	e9 5b       	subi	r30, 0xB9	; 185
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	e7 54       	subi	r30, 0x47	; 71
    2398:	f0 40       	sbci	r31, 0x00	; 0
    239a:	80 fd       	sbrc	r24, 0
    239c:	24 c0       	rjmp	.+72     	; 0x23e6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    239e:	e0 5b       	subi	r30, 0xB0	; 176
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	81 91       	ld	r24, Z+
    23a4:	91 91       	ld	r25, Z+
    23a6:	a1 91       	ld	r26, Z+
    23a8:	b1 91       	ld	r27, Z+
    23aa:	84 1b       	sub	r24, r20
    23ac:	95 0b       	sbc	r25, r21
    23ae:	a6 0b       	sbc	r26, r22
    23b0:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    23b2:	b7 ff       	sbrs	r27, 7
    23b4:	05 c0       	rjmp	.+10     	; 0x23c0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    23b6:	10 82       	st	Z, r1
    23b8:	11 82       	std	Z+1, r1	; 0x01
    23ba:	12 82       	std	Z+2, r1	; 0x02
    23bc:	13 82       	std	Z+3, r1	; 0x03
    23be:	04 c0       	rjmp	.+8      	; 0x23c8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    23c8:	f9 01       	movw	r30, r18
    23ca:	a4 e0       	ldi	r26, 0x04	; 4
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	aa 95       	dec	r26
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	ec 0f       	add	r30, r28
    23da:	fd 1f       	adc	r31, r29
    23dc:	e9 5b       	subi	r30, 0xB9	; 185
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	81 60       	ori	r24, 0x01	; 1
    23e4:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	08 95       	ret

000023ec <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    23ec:	e0 91 3f 01 	lds	r30, 0x013F
    23f0:	f0 91 40 01 	lds	r31, 0x0140
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    23f6:	9c 01       	movw	r18, r24
    23f8:	44 e0       	ldi	r20, 0x04	; 4
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	4a 95       	dec	r20
    2400:	e1 f7       	brne	.-8      	; 0x23fa <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    2402:	28 0f       	add	r18, r24
    2404:	39 1f       	adc	r19, r25
    2406:	e2 0f       	add	r30, r18
    2408:	f3 1f       	adc	r31, r19
    240a:	df 01       	movw	r26, r30
    240c:	ac 5a       	subi	r26, 0xAC	; 172
    240e:	bf 4f       	sbci	r27, 0xFF	; 255
    2410:	e0 5b       	subi	r30, 0xB0	; 176
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	20 81       	ld	r18, Z
    2416:	31 81       	ldd	r19, Z+1	; 0x01
    2418:	42 81       	ldd	r20, Z+2	; 0x02
    241a:	53 81       	ldd	r21, Z+3	; 0x03
    241c:	8d 91       	ld	r24, X+
    241e:	9d 91       	ld	r25, X+
    2420:	0d 90       	ld	r0, X+
    2422:	bc 91       	ld	r27, X
    2424:	a0 2d       	mov	r26, r0
    2426:	28 1b       	sub	r18, r24
    2428:	39 0b       	sbc	r19, r25
    242a:	4a 0b       	sbc	r20, r26
    242c:	5b 0b       	sbc	r21, r27
    242e:	57 ff       	sbrs	r21, 7
    2430:	04 c0       	rjmp	.+8      	; 0x243a <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    243a:	b9 01       	movw	r22, r18
    243c:	ca 01       	movw	r24, r20
    243e:	08 95       	ret

00002440 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    2440:	cf 93       	push	r28
    2442:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2444:	c0 91 3f 01 	lds	r28, 0x013F
    2448:	d0 91 40 01 	lds	r29, 0x0140
    244c:	68 2f       	mov	r22, r24
    244e:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2450:	fb 01       	movw	r30, r22
    2452:	a4 e0       	ldi	r26, 0x04	; 4
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	aa 95       	dec	r26
    245a:	e1 f7       	brne	.-8      	; 0x2454 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    245c:	e6 0f       	add	r30, r22
    245e:	f7 1f       	adc	r31, r23
    2460:	ec 0f       	add	r30, r28
    2462:	fd 1f       	adc	r31, r29
    2464:	df 01       	movw	r26, r30
    2466:	ac 5a       	subi	r26, 0xAC	; 172
    2468:	bf 4f       	sbci	r27, 0xFF	; 255
    246a:	e0 5b       	subi	r30, 0xB0	; 176
    246c:	ff 4f       	sbci	r31, 0xFF	; 255
    246e:	20 81       	ld	r18, Z
    2470:	31 81       	ldd	r19, Z+1	; 0x01
    2472:	42 81       	ldd	r20, Z+2	; 0x02
    2474:	53 81       	ldd	r21, Z+3	; 0x03
    2476:	8d 91       	ld	r24, X+
    2478:	9d 91       	ld	r25, X+
    247a:	0d 90       	ld	r0, X+
    247c:	bc 91       	ld	r27, X
    247e:	a0 2d       	mov	r26, r0
    2480:	28 1b       	sub	r18, r24
    2482:	39 0b       	sbc	r19, r25
    2484:	4a 0b       	sbc	r20, r26
    2486:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2488:	57 fd       	sbrc	r21, 7
    248a:	07 c0       	rjmp	.+14     	; 0x249a <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    248c:	21 15       	cp	r18, r1
    248e:	31 05       	cpc	r19, r1
    2490:	41 05       	cpc	r20, r1
    2492:	51 05       	cpc	r21, r1
    2494:	11 f0       	breq	.+4      	; 0x249a <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	12 c0       	rjmp	.+36     	; 0x24be <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	cb 01       	movw	r24, r22
    249e:	54 e0       	ldi	r21, 0x04	; 4
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	5a 95       	dec	r21
    24a6:	e1 f7       	brne	.-8      	; 0x24a0 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    24a8:	86 0f       	add	r24, r22
    24aa:	97 1f       	adc	r25, r23
    24ac:	c8 0f       	add	r28, r24
    24ae:	d9 1f       	adc	r29, r25
    24b0:	c9 5b       	subi	r28, 0xB9	; 185
    24b2:	df 4f       	sbci	r29, 0xFF	; 255
    24b4:	88 81       	ld	r24, Y
    24b6:	80 ff       	sbrs	r24, 0
    24b8:	21 e0       	ldi	r18, 0x01	; 1
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    24be:	82 2f       	mov	r24, r18
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
    24c4:	08 95       	ret

000024c6 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    24c6:	1f 93       	push	r17
    24c8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    24ca:	0e 94 20 12 	call	0x2440	; 0x2440 <Timebase_DownCounter_SS_Period_Value_Expired>
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	16 c0       	rjmp	.+44     	; 0x2502 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    24d6:	e0 91 3f 01 	lds	r30, 0x013F
    24da:	f0 91 40 01 	lds	r31, 0x0140
    24de:	21 2f       	mov	r18, r17
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	c9 01       	movw	r24, r18
    24e4:	b4 e0       	ldi	r27, 0x04	; 4
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	ba 95       	dec	r27
    24ec:	e1 f7       	brne	.-8      	; 0x24e6 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    24ee:	82 0f       	add	r24, r18
    24f0:	93 1f       	adc	r25, r19
    24f2:	e8 0f       	add	r30, r24
    24f4:	f9 1f       	adc	r31, r25
    24f6:	e9 5b       	subi	r30, 0xB9	; 185
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	8e 7f       	andi	r24, 0xFE	; 254
    24fe:	80 83       	st	Z, r24
    2500:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    2502:	1f 91       	pop	r17
    2504:	08 95       	ret

00002506 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    2506:	1f 93       	push	r17
    2508:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    250a:	81 2f       	mov	r24, r17
    250c:	0e 94 66 10 	call	0x20cc	; 0x20cc <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    2510:	1f 5f       	subi	r17, 0xFF	; 255
    2512:	15 30       	cpi	r17, 0x05	; 5
    2514:	d1 f7       	brne	.-12     	; 0x250a <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    2516:	1f 91       	pop	r17
    2518:	08 95       	ret

0000251a <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    251a:	40 91 3f 01 	lds	r20, 0x013F
    251e:	50 91 40 01 	lds	r21, 0x0140
    2522:	da 01       	movw	r26, r20
    2524:	a8 5b       	subi	r26, 0xB8	; 184
    2526:	bf 4f       	sbci	r27, 0xFF	; 255
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	14 96       	adiw	r26, 0x04	; 4
    252e:	1d 92       	st	X+, r1
    2530:	1d 92       	st	X+, r1
    2532:	1d 92       	st	X+, r1
    2534:	1c 92       	st	X, r1
    2536:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2538:	1d 92       	st	X+, r1
    253a:	1d 92       	st	X+, r1
    253c:	1d 92       	st	X+, r1
    253e:	1c 92       	st	X, r1
    2540:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2542:	18 96       	adiw	r26, 0x08	; 8
    2544:	1d 92       	st	X+, r1
    2546:	1d 92       	st	X+, r1
    2548:	1d 92       	st	X+, r1
    254a:	1c 92       	st	X, r1
    254c:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    254e:	f9 01       	movw	r30, r18
    2550:	84 e0       	ldi	r24, 0x04	; 4
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	8a 95       	dec	r24
    2558:	e1 f7       	brne	.-8      	; 0x2552 <Timebase_DownCounter_SS_Reset_All+0x38>
    255a:	e2 0f       	add	r30, r18
    255c:	f3 1f       	adc	r31, r19
    255e:	e4 0f       	add	r30, r20
    2560:	f5 1f       	adc	r31, r21
    2562:	e9 5b       	subi	r30, 0xB9	; 185
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    2568:	80 7e       	andi	r24, 0xE0	; 224
    256a:	80 83       	st	Z, r24
    256c:	2f 5f       	subi	r18, 0xFF	; 255
    256e:	3f 4f       	sbci	r19, 0xFF	; 255
    2570:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    2572:	25 30       	cpi	r18, 0x05	; 5
    2574:	31 05       	cpc	r19, r1
    2576:	d1 f6       	brne	.-76     	; 0x252c <Timebase_DownCounter_SS_Reset_All+0x12>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    2578:	08 95       	ret

0000257a <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    257a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    257e:	0e 94 8d 12 	call	0x251a	; 0x251a <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2582:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2586:	08 95       	ret

00002588 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2588:	0f 93       	push	r16
    258a:	1f 93       	push	r17
    258c:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    258e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2592:	c8 01       	movw	r24, r16
    2594:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timebase_Timer_Config>
  Timebase_Reset();
    2598:	0e 94 bd 12 	call	0x257a	; 0x257a <Timebase_Reset>
}
    259c:	1f 91       	pop	r17
    259e:	0f 91       	pop	r16
    25a0:	08 95       	ret

000025a2 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    25a2:	e0 91 3f 01 	lds	r30, 0x013F
    25a6:	f0 91 40 01 	lds	r31, 0x0140
    25aa:	87 89       	ldd	r24, Z+23	; 0x17
    25ac:	82 ff       	sbrs	r24, 2
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <Timebase_Main_Loop_Executables+0x14>
    //add upcounter ss function
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    25b0:	87 89       	ldd	r24, Z+23	; 0x17
    25b2:	8b 7f       	andi	r24, 0xFB	; 251
    25b4:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    25b6:	87 89       	ldd	r24, Z+23	; 0x17
    25b8:	80 ff       	sbrs	r24, 0
    25ba:	09 c0       	rjmp	.+18     	; 0x25ce <Timebase_Main_Loop_Executables+0x2c>
    Timebase_UpCounter_Update_All();
    25bc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    25c0:	e0 91 3f 01 	lds	r30, 0x013F
    25c4:	f0 91 40 01 	lds	r31, 0x0140
    25c8:	87 89       	ldd	r24, Z+23	; 0x17
    25ca:	8e 7f       	andi	r24, 0xFE	; 254
    25cc:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    25ce:	e0 91 3f 01 	lds	r30, 0x013F
    25d2:	f0 91 40 01 	lds	r31, 0x0140
    25d6:	87 89       	ldd	r24, Z+23	; 0x17
    25d8:	83 ff       	sbrs	r24, 3
    25da:	09 c0       	rjmp	.+18     	; 0x25ee <Timebase_Main_Loop_Executables+0x4c>
    Timebase_DownCounter_SS_Update_All();
    25dc:	0e 94 83 12 	call	0x2506	; 0x2506 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    25e0:	e0 91 3f 01 	lds	r30, 0x013F
    25e4:	f0 91 40 01 	lds	r31, 0x0140
    25e8:	87 89       	ldd	r24, Z+23	; 0x17
    25ea:	87 7f       	andi	r24, 0xF7	; 247
    25ec:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    25ee:	e0 91 3f 01 	lds	r30, 0x013F
    25f2:	f0 91 40 01 	lds	r31, 0x0140
    25f6:	87 89       	ldd	r24, Z+23	; 0x17
    25f8:	81 ff       	sbrs	r24, 1
    25fa:	09 c0       	rjmp	.+18     	; 0x260e <Timebase_Main_Loop_Executables+0x6c>
    Timebase_DownCounter_Update_All();
    25fc:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2600:	e0 91 3f 01 	lds	r30, 0x013F
    2604:	f0 91 40 01 	lds	r31, 0x0140
    2608:	87 89       	ldd	r24, Z+23	; 0x17
    260a:	8d 7f       	andi	r24, 0xFD	; 253
    260c:	87 8b       	std	Z+23, r24	; 0x17
    260e:	08 95       	ret

00002610 <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    2610:	e0 91 3f 01 	lds	r30, 0x013F
    2614:	f0 91 40 01 	lds	r31, 0x0140
    2618:	80 85       	ldd	r24, Z+8	; 0x08
    261a:	91 85       	ldd	r25, Z+9	; 0x09
    261c:	01 96       	adiw	r24, 0x01	; 1
    261e:	91 87       	std	Z+9, r25	; 0x09
    2620:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2622:	83 81       	ldd	r24, Z+3	; 0x03
    2624:	86 bd       	out	0x26, r24	; 38
  
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2626:	87 89       	ldd	r24, Z+23	; 0x17
    2628:	84 60       	ori	r24, 0x04	; 4
    262a:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    262c:	87 89       	ldd	r24, Z+23	; 0x17
    262e:	88 60       	ori	r24, 0x08	; 8
    2630:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  
  
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    2632:	80 85       	ldd	r24, Z+8	; 0x08
    2634:	91 85       	ldd	r25, Z+9	; 0x09
    2636:	61 81       	ldd	r22, Z+1	; 0x01
    2638:	72 81       	ldd	r23, Z+2	; 0x02
    263a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__udivmodhi4>
    263e:	89 2b       	or	r24, r25
    2640:	99 f4       	brne	.+38     	; 0x2668 <Timebase_ISR_Executables+0x58>
    Timebase->Time.Seconds++;
    2642:	82 85       	ldd	r24, Z+10	; 0x0a
    2644:	93 85       	ldd	r25, Z+11	; 0x0b
    2646:	a4 85       	ldd	r26, Z+12	; 0x0c
    2648:	b5 85       	ldd	r27, Z+13	; 0x0d
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	a1 1d       	adc	r26, r1
    264e:	b1 1d       	adc	r27, r1
    2650:	82 87       	std	Z+10, r24	; 0x0a
    2652:	93 87       	std	Z+11, r25	; 0x0b
    2654:	a4 87       	std	Z+12, r26	; 0x0c
    2656:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    2658:	11 86       	std	Z+9, r1	; 0x09
    265a:	10 86       	std	Z+8, r1	; 0x08
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    265c:	87 89       	ldd	r24, Z+23	; 0x17
    265e:	81 60       	ori	r24, 0x01	; 1
    2660:	87 8b       	std	Z+23, r24	; 0x17
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2662:	87 89       	ldd	r24, Z+23	; 0x17
    2664:	82 60       	ori	r24, 0x02	; 2
    2666:	87 8b       	std	Z+23, r24	; 0x17
    2668:	08 95       	ret

0000266a <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    266a:	1f 92       	push	r1
    266c:	0f 92       	push	r0
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	0f 92       	push	r0
    2672:	11 24       	eor	r1, r1
    2674:	2f 93       	push	r18
    2676:	3f 93       	push	r19
    2678:	4f 93       	push	r20
    267a:	5f 93       	push	r21
    267c:	6f 93       	push	r22
    267e:	7f 93       	push	r23
    2680:	8f 93       	push	r24
    2682:	9f 93       	push	r25
    2684:	af 93       	push	r26
    2686:	bf 93       	push	r27
    2688:	ef 93       	push	r30
    268a:	ff 93       	push	r31
  Timebase_ISR_Executables();
    268c:	0e 94 08 13 	call	0x2610	; 0x2610 <Timebase_ISR_Executables>
}
    2690:	ff 91       	pop	r31
    2692:	ef 91       	pop	r30
    2694:	bf 91       	pop	r27
    2696:	af 91       	pop	r26
    2698:	9f 91       	pop	r25
    269a:	8f 91       	pop	r24
    269c:	7f 91       	pop	r23
    269e:	6f 91       	pop	r22
    26a0:	5f 91       	pop	r21
    26a2:	4f 91       	pop	r20
    26a4:	3f 91       	pop	r19
    26a6:	2f 91       	pop	r18
    26a8:	0f 90       	pop	r0
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	0f 90       	pop	r0
    26ae:	1f 90       	pop	r1
    26b0:	18 95       	reti

000026b2 <__mulsi3>:
    26b2:	62 9f       	mul	r22, r18
    26b4:	d0 01       	movw	r26, r0
    26b6:	73 9f       	mul	r23, r19
    26b8:	f0 01       	movw	r30, r0
    26ba:	82 9f       	mul	r24, r18
    26bc:	e0 0d       	add	r30, r0
    26be:	f1 1d       	adc	r31, r1
    26c0:	64 9f       	mul	r22, r20
    26c2:	e0 0d       	add	r30, r0
    26c4:	f1 1d       	adc	r31, r1
    26c6:	92 9f       	mul	r25, r18
    26c8:	f0 0d       	add	r31, r0
    26ca:	83 9f       	mul	r24, r19
    26cc:	f0 0d       	add	r31, r0
    26ce:	74 9f       	mul	r23, r20
    26d0:	f0 0d       	add	r31, r0
    26d2:	65 9f       	mul	r22, r21
    26d4:	f0 0d       	add	r31, r0
    26d6:	99 27       	eor	r25, r25
    26d8:	72 9f       	mul	r23, r18
    26da:	b0 0d       	add	r27, r0
    26dc:	e1 1d       	adc	r30, r1
    26de:	f9 1f       	adc	r31, r25
    26e0:	63 9f       	mul	r22, r19
    26e2:	b0 0d       	add	r27, r0
    26e4:	e1 1d       	adc	r30, r1
    26e6:	f9 1f       	adc	r31, r25
    26e8:	bd 01       	movw	r22, r26
    26ea:	cf 01       	movw	r24, r30
    26ec:	11 24       	eor	r1, r1
    26ee:	08 95       	ret

000026f0 <__udivmodhi4>:
    26f0:	aa 1b       	sub	r26, r26
    26f2:	bb 1b       	sub	r27, r27
    26f4:	51 e1       	ldi	r21, 0x11	; 17
    26f6:	07 c0       	rjmp	.+14     	; 0x2706 <__udivmodhi4_ep>

000026f8 <__udivmodhi4_loop>:
    26f8:	aa 1f       	adc	r26, r26
    26fa:	bb 1f       	adc	r27, r27
    26fc:	a6 17       	cp	r26, r22
    26fe:	b7 07       	cpc	r27, r23
    2700:	10 f0       	brcs	.+4      	; 0x2706 <__udivmodhi4_ep>
    2702:	a6 1b       	sub	r26, r22
    2704:	b7 0b       	sbc	r27, r23

00002706 <__udivmodhi4_ep>:
    2706:	88 1f       	adc	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	5a 95       	dec	r21
    270c:	a9 f7       	brne	.-22     	; 0x26f8 <__udivmodhi4_loop>
    270e:	80 95       	com	r24
    2710:	90 95       	com	r25
    2712:	bc 01       	movw	r22, r24
    2714:	cd 01       	movw	r24, r26
    2716:	08 95       	ret

00002718 <__udivmodsi4>:
    2718:	a1 e2       	ldi	r26, 0x21	; 33
    271a:	1a 2e       	mov	r1, r26
    271c:	aa 1b       	sub	r26, r26
    271e:	bb 1b       	sub	r27, r27
    2720:	fd 01       	movw	r30, r26
    2722:	0d c0       	rjmp	.+26     	; 0x273e <__udivmodsi4_ep>

00002724 <__udivmodsi4_loop>:
    2724:	aa 1f       	adc	r26, r26
    2726:	bb 1f       	adc	r27, r27
    2728:	ee 1f       	adc	r30, r30
    272a:	ff 1f       	adc	r31, r31
    272c:	a2 17       	cp	r26, r18
    272e:	b3 07       	cpc	r27, r19
    2730:	e4 07       	cpc	r30, r20
    2732:	f5 07       	cpc	r31, r21
    2734:	20 f0       	brcs	.+8      	; 0x273e <__udivmodsi4_ep>
    2736:	a2 1b       	sub	r26, r18
    2738:	b3 0b       	sbc	r27, r19
    273a:	e4 0b       	sbc	r30, r20
    273c:	f5 0b       	sbc	r31, r21

0000273e <__udivmodsi4_ep>:
    273e:	66 1f       	adc	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	1a 94       	dec	r1
    2748:	69 f7       	brne	.-38     	; 0x2724 <__udivmodsi4_loop>
    274a:	60 95       	com	r22
    274c:	70 95       	com	r23
    274e:	80 95       	com	r24
    2750:	90 95       	com	r25
    2752:	9b 01       	movw	r18, r22
    2754:	ac 01       	movw	r20, r24
    2756:	bd 01       	movw	r22, r26
    2758:	cf 01       	movw	r24, r30
    275a:	08 95       	ret

0000275c <__divmodsi4>:
    275c:	97 fb       	bst	r25, 7
    275e:	09 2e       	mov	r0, r25
    2760:	05 26       	eor	r0, r21
    2762:	0e d0       	rcall	.+28     	; 0x2780 <__divmodsi4_neg1>
    2764:	57 fd       	sbrc	r21, 7
    2766:	04 d0       	rcall	.+8      	; 0x2770 <__divmodsi4_neg2>
    2768:	d7 df       	rcall	.-82     	; 0x2718 <__udivmodsi4>
    276a:	0a d0       	rcall	.+20     	; 0x2780 <__divmodsi4_neg1>
    276c:	00 1c       	adc	r0, r0
    276e:	38 f4       	brcc	.+14     	; 0x277e <__divmodsi4_exit>

00002770 <__divmodsi4_neg2>:
    2770:	50 95       	com	r21
    2772:	40 95       	com	r20
    2774:	30 95       	com	r19
    2776:	21 95       	neg	r18
    2778:	3f 4f       	sbci	r19, 0xFF	; 255
    277a:	4f 4f       	sbci	r20, 0xFF	; 255
    277c:	5f 4f       	sbci	r21, 0xFF	; 255

0000277e <__divmodsi4_exit>:
    277e:	08 95       	ret

00002780 <__divmodsi4_neg1>:
    2780:	f6 f7       	brtc	.-4      	; 0x277e <__divmodsi4_exit>
    2782:	90 95       	com	r25
    2784:	80 95       	com	r24
    2786:	70 95       	com	r23
    2788:	61 95       	neg	r22
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	8f 4f       	sbci	r24, 0xFF	; 255
    278e:	9f 4f       	sbci	r25, 0xFF	; 255
    2790:	08 95       	ret

00002792 <_exit>:
    2792:	f8 94       	cli

00002794 <__stop_program>:
    2794:	ff cf       	rjmp	.-2      	; 0x2794 <__stop_program>
