
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000031e6  0000327a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a3  00800114  00800114  0000328e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000328e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017d5  00000000  00000000  000032ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004617  00000000  00000000  00004ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058e  00000000  00000000  000090da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002208  00000000  00000000  00009668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a80  00000000  00000000  0000b870  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001990  00000000  00000000  0000c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001af3  00000000  00000000  0000dc80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f773  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 4d 18 	jmp	0x309a	; 0x309a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	f1 e3       	ldi	r31, 0x31	; 49
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 3b       	cpi	r26, 0xB7	; 183
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 71 18 	call	0x30e2	; 0x30e2 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 56 15 	call	0x2aac	; 0x2aac <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e2       	ldi	r20, 0x20	; 32
      dc:	5e e4       	ldi	r21, 0x4E	; 78
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	42 e1       	ldi	r20, 0x12	; 18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 35 0b 	call	0x166a	; 0x166a <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	51 e7       	ldi	r21, 0x71	; 113
      fa:	62 e0       	ldi	r22, 0x02	; 2
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	4e e0       	ldi	r20, 0x0E	; 14
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 57 13 	call	0x26ae	; 0x26ae <Timebase_DownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(50);
     110:	82 e3       	ldi	r24, 0x32	; 50
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 01 03 	call	0x602	; 0x602 <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
     118:	0e 94 72 02 	call	0x4e4	; 0x4e4 <Timebase_Timer_Get_Seconds>
     11c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <UART_Transmit_Number>
	UART_Transmit_Text(",");
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
     128:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <Timebase_Timer_Get_SubSeconds>
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	bc 01       	movw	r22, r24
     132:	cd 01       	movw	r24, r26
     134:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <UART_Transmit_Number>
	UART_Transmit_Text(",");
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 9e 03 	call	0x73c	; 0x73c <Timebase_UpCounter_SS_Get_Value>
     146:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <UART_Transmit_Number>
	UART_Transmit_Text(",");
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 4d 09 	call	0x129a	; 0x129a <Timebase_UpCounter_Get_Value>
     158:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <UART_Transmit_Number>
	UART_Transmit_Text(",");
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <Timebase_DownCounter_SS_Get_Value>
     16a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <UART_Transmit_Number>
	UART_Transmit_Text(",");
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <Timebase_DownCounter_Get_Value>
     17c:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     188:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     18a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     18e:	5e 98       	cbi	0x0b, 6	; 11
     190:	bf cf       	rjmp	.-130    	; 0x110 <main+0x6a>

00000192 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     192:	85 e4       	ldi	r24, 0x45	; 69
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	90 93 44 01 	sts	0x0144, r25
     19a:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.UpdateRate = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	90 93 46 01 	sts	0x0146, r25
     1a6:	80 93 45 01 	sts	0x0145, r24
  Timebase->Time.OVFUpdateValue=0;
     1aa:	10 92 47 01 	sts	0x0147, r1
  Timebase->Time.SubSecondsShadow = 0;
     1ae:	10 92 53 01 	sts	0x0153, r1
     1b2:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.SecondsShadow = 0;
     1b6:	10 92 54 01 	sts	0x0154, r1
     1ba:	10 92 55 01 	sts	0x0155, r1
     1be:	10 92 56 01 	sts	0x0156, r1
     1c2:	10 92 57 01 	sts	0x0157, r1
  Timebase->Time.SubSeconds = 0;
     1c6:	10 92 4d 01 	sts	0x014D, r1
     1ca:	10 92 4c 01 	sts	0x014C, r1
  Timebase->Time.Seconds = 0;
     1ce:	10 92 4e 01 	sts	0x014E, r1
     1d2:	10 92 4f 01 	sts	0x014F, r1
     1d6:	10 92 50 01 	sts	0x0150, r1
     1da:	10 92 51 01 	sts	0x0151, r1
  Timebase->Time.VariablesSync = 0;
     1de:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     1e2:	10 92 48 01 	sts	0x0148, r1
     1e6:	10 92 49 01 	sts	0x0149, r1
     1ea:	10 92 4a 01 	sts	0x014A, r1
     1ee:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase->Time.LPTimerSeconds = 0;
     1f2:	10 92 59 01 	sts	0x0159, r1
     1f6:	10 92 5a 01 	sts	0x015A, r1
     1fa:	10 92 5b 01 	sts	0x015B, r1
     1fe:	10 92 5c 01 	sts	0x015C, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     202:	10 92 5d 01 	sts	0x015D, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     206:	10 92 77 01 	sts	0x0177, r1
    Timebase->UpCounter[i].EndValue = 0;
     20a:	10 92 78 01 	sts	0x0178, r1
     20e:	10 92 79 01 	sts	0x0179, r1
     212:	10 92 7a 01 	sts	0x017A, r1
     216:	10 92 7b 01 	sts	0x017B, r1
    Timebase->UpCounter[i].Target = 0;
     21a:	10 92 7c 01 	sts	0x017C, r1
     21e:	10 92 7d 01 	sts	0x017D, r1
     222:	10 92 7e 01 	sts	0x017E, r1
     226:	10 92 7f 01 	sts	0x017F, r1
    Timebase->UpCounter[i].Temporary = 0;    
     22a:	10 92 80 01 	sts	0x0180, r1
     22e:	10 92 81 01 	sts	0x0181, r1
     232:	10 92 82 01 	sts	0x0182, r1
     236:	10 92 83 01 	sts	0x0183, r1
    Timebase->UpCounter[i].Value = 0;
     23a:	10 92 84 01 	sts	0x0184, r1
     23e:	10 92 85 01 	sts	0x0185, r1
     242:	10 92 86 01 	sts	0x0186, r1
     246:	10 92 87 01 	sts	0x0187, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     24a:	10 92 88 01 	sts	0x0188, r1
     24e:	10 92 89 01 	sts	0x0189, r1
     252:	10 92 8a 01 	sts	0x018A, r1
     256:	10 92 8b 01 	sts	0x018B, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     25a:	10 92 5e 01 	sts	0x015E, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     25e:	10 92 5f 01 	sts	0x015F, r1
     262:	10 92 60 01 	sts	0x0160, r1
     266:	10 92 61 01 	sts	0x0161, r1
     26a:	10 92 62 01 	sts	0x0162, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     26e:	10 92 63 01 	sts	0x0163, r1
     272:	10 92 64 01 	sts	0x0164, r1
     276:	10 92 65 01 	sts	0x0165, r1
     27a:	10 92 66 01 	sts	0x0166, r1
    Timebase->UpCounterSS[i].Target = 0;
     27e:	10 92 67 01 	sts	0x0167, r1
     282:	10 92 68 01 	sts	0x0168, r1
     286:	10 92 69 01 	sts	0x0169, r1
     28a:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     28e:	10 92 6b 01 	sts	0x016B, r1
     292:	10 92 6c 01 	sts	0x016C, r1
     296:	10 92 6d 01 	sts	0x016D, r1
     29a:	10 92 6e 01 	sts	0x016E, r1
    Timebase->UpCounterSS[i].Value = 0;
     29e:	10 92 6f 01 	sts	0x016F, r1
     2a2:	10 92 70 01 	sts	0x0170, r1
     2a6:	10 92 71 01 	sts	0x0171, r1
     2aa:	10 92 72 01 	sts	0x0172, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     2ae:	10 92 73 01 	sts	0x0173, r1
     2b2:	10 92 74 01 	sts	0x0174, r1
     2b6:	10 92 75 01 	sts	0x0175, r1
     2ba:	10 92 76 01 	sts	0x0176, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     2be:	10 92 9d 01 	sts	0x019D, r1
    Timebase->DownCounter[i].EndValue = 0;
     2c2:	10 92 9e 01 	sts	0x019E, r1
     2c6:	10 92 9f 01 	sts	0x019F, r1
     2ca:	10 92 a0 01 	sts	0x01A0, r1
     2ce:	10 92 a1 01 	sts	0x01A1, r1
    Timebase->DownCounter[i].Value = 0;
     2d2:	10 92 a2 01 	sts	0x01A2, r1
     2d6:	10 92 a3 01 	sts	0x01A3, r1
     2da:	10 92 a4 01 	sts	0x01A4, r1
     2de:	10 92 a5 01 	sts	0x01A5, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     2e2:	10 92 a6 01 	sts	0x01A6, r1
     2e6:	10 92 a7 01 	sts	0x01A7, r1
     2ea:	10 92 a8 01 	sts	0x01A8, r1
     2ee:	10 92 a9 01 	sts	0x01A9, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     2f2:	10 92 8c 01 	sts	0x018C, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     2f6:	10 92 8d 01 	sts	0x018D, r1
     2fa:	10 92 8e 01 	sts	0x018E, r1
     2fe:	10 92 8f 01 	sts	0x018F, r1
     302:	10 92 90 01 	sts	0x0190, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     306:	10 92 91 01 	sts	0x0191, r1
     30a:	10 92 92 01 	sts	0x0192, r1
     30e:	10 92 93 01 	sts	0x0193, r1
     312:	10 92 94 01 	sts	0x0194, r1
    Timebase->DownCounterSS[i].Value = 0;
     316:	10 92 95 01 	sts	0x0195, r1
     31a:	10 92 96 01 	sts	0x0196, r1
     31e:	10 92 97 01 	sts	0x0197, r1
     322:	10 92 98 01 	sts	0x0198, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     326:	10 92 99 01 	sts	0x0199, r1
     32a:	10 92 9a 01 	sts	0x019A, r1
     32e:	10 92 9b 01 	sts	0x019B, r1
     332:	10 92 9c 01 	sts	0x019C, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     336:	10 92 aa 01 	sts	0x01AA, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     33a:	10 92 ab 01 	sts	0x01AB, r1
     33e:	10 92 ac 01 	sts	0x01AC, r1
     342:	10 92 ad 01 	sts	0x01AD, r1
     346:	10 92 ae 01 	sts	0x01AE, r1
    Timebase->LPDownCounter[i].Value = 0;
     34a:	10 92 af 01 	sts	0x01AF, r1
     34e:	10 92 b0 01 	sts	0x01B0, r1
     352:	10 92 b1 01 	sts	0x01B1, r1
     356:	10 92 b2 01 	sts	0x01B2, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     35a:	10 92 b3 01 	sts	0x01B3, r1
     35e:	10 92 b4 01 	sts	0x01B4, r1
     362:	10 92 b5 01 	sts	0x01B5, r1
     366:	10 92 b6 01 	sts	0x01B6, r1
  }
  #endif
  
}
     36a:	08 95       	ret

0000036c <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     36c:	8f 92       	push	r8
     36e:	9f 92       	push	r9
     370:	bf 92       	push	r11
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
     386:	2a 97       	sbiw	r28, 0x0a	; 10
     388:	0f b6       	in	r0, 0x3f	; 63
     38a:	f8 94       	cli
     38c:	de bf       	out	0x3e, r29	; 62
     38e:	0f be       	out	0x3f, r0	; 63
     390:	cd bf       	out	0x3d, r28	; 61
     392:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     394:	de 01       	movw	r26, r28
     396:	11 96       	adiw	r26, 0x01	; 1
     398:	e5 e0       	ldi	r30, 0x05	; 5
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	8a e0       	ldi	r24, 0x0A	; 10
     39e:	01 90       	ld	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	81 50       	subi	r24, 0x01	; 1
     3a4:	e1 f7       	brne	.-8      	; 0x39e <Timebase_Timer_Config+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     3a6:	94 01       	movw	r18, r8
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	7b e1       	ldi	r23, 0x1B	; 27
     3b0:	87 eb       	ldi	r24, 0xB7	; 183
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     3b8:	b2 2e       	mov	r11, r18
     3ba:	c3 2e       	mov	r12, r19
     3bc:	d4 2e       	mov	r13, r20
     3be:	05 2f       	mov	r16, r21
     3c0:	7e 01       	movw	r14, r28
     3c2:	08 94       	sec
     3c4:	e1 1c       	adc	r14, r1
     3c6:	f1 1c       	adc	r15, r1
     3c8:	c9 01       	movw	r24, r18
     3ca:	da 01       	movw	r26, r20
     3cc:	9c 01       	movw	r18, r24
     3ce:	ad 01       	movw	r20, r26
     3d0:	10 e0       	ldi	r17, 0x00	; 0
     3d2:	13 c0       	rjmp	.+38     	; 0x3fa <Timebase_Timer_Config+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     3d4:	f7 01       	movw	r30, r14
     3d6:	21 91       	ld	r18, Z+
     3d8:	31 91       	ld	r19, Z+
     3da:	7f 01       	movw	r14, r30
     3dc:	40 e0       	ldi	r20, 0x00	; 0
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	6b 2d       	mov	r22, r11
     3e2:	7c 2d       	mov	r23, r12
     3e4:	8d 2d       	mov	r24, r13
     3e6:	90 2f       	mov	r25, r16
     3e8:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     3ec:	c9 01       	movw	r24, r18
     3ee:	da 01       	movw	r26, r20
     3f0:	9c 01       	movw	r18, r24
     3f2:	ad 01       	movw	r20, r26
	clock_div_index++;
     3f4:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     3f6:	15 30       	cpi	r17, 0x05	; 5
     3f8:	31 f0       	breq	.+12     	; 0x406 <Timebase_Timer_Config+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     3fa:	2f 3f       	cpi	r18, 0xFF	; 255
     3fc:	31 05       	cpc	r19, r1
     3fe:	41 05       	cpc	r20, r1
     400:	51 05       	cpc	r21, r1
     402:	09 f0       	breq	.+2      	; 0x406 <Timebase_Timer_Config+0x9a>
     404:	3c f7       	brge	.-50     	; 0x3d4 <Timebase_Timer_Config+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     406:	81 2f       	mov	r24, r17
     408:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     40a:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     40c:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     40e:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     412:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     414:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     416:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     418:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     41a:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     41c:	88 23       	and	r24, r24
     41e:	11 f4       	brne	.+4      	; 0x424 <Timebase_Timer_Config+0xb8>
	TCCR0B = (1<<CS00);
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	0f c0       	rjmp	.+30     	; 0x442 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 1){
     424:	81 30       	cpi	r24, 0x01	; 1
     426:	11 f4       	brne	.+4      	; 0x42c <Timebase_Timer_Config+0xc0>
	TCCR0B = (1<<CS01);
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0b c0       	rjmp	.+22     	; 0x442 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 2){
     42c:	82 30       	cpi	r24, 0x02	; 2
     42e:	11 f4       	brne	.+4      	; 0x434 <Timebase_Timer_Config+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	07 c0       	rjmp	.+14     	; 0x442 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 3){
     434:	83 30       	cpi	r24, 0x03	; 3
     436:	11 f4       	brne	.+4      	; 0x43c <Timebase_Timer_Config+0xd0>
	TCCR0B = (1<<CS02);
     438:	84 e0       	ldi	r24, 0x04	; 4
     43a:	03 c0       	rjmp	.+6      	; 0x442 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 4){
     43c:	84 30       	cpi	r24, 0x04	; 4
     43e:	11 f4       	brne	.+4      	; 0x444 <Timebase_Timer_Config+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     440:	85 e0       	ldi	r24, 0x05	; 5
     442:	85 bd       	out	0x25, r24	; 37
  }
	
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     444:	e0 91 43 01 	lds	r30, 0x0143
     448:	f0 91 44 01 	lds	r31, 0x0144
     44c:	82 2f       	mov	r24, r18
     44e:	80 95       	com	r24
     450:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     452:	82 81       	ldd	r24, Z+2	; 0x02
     454:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 6e 00 	sts	0x006E, r24
  sei();
     45c:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     45e:	91 82       	std	Z+1, r9	; 0x01
     460:	80 82       	st	Z, r8
}
     462:	2a 96       	adiw	r28, 0x0a	; 10
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	1f 91       	pop	r17
     474:	0f 91       	pop	r16
     476:	ff 90       	pop	r15
     478:	ef 90       	pop	r14
     47a:	df 90       	pop	r13
     47c:	cf 90       	pop	r12
     47e:	bf 90       	pop	r11
     480:	9f 90       	pop	r9
     482:	8f 90       	pop	r8
     484:	08 95       	ret

00000486 <Timebase_LPTimer_Config>:
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }*/
    cli();
     486:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     488:	84 b7       	in	r24, 0x34	; 52
     48a:	87 7f       	andi	r24, 0xF7	; 247
     48c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     48e:	e0 e6       	ldi	r30, 0x60	; 96
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	80 68       	ori	r24, 0x80	; 128
     496:	80 83       	st	Z, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     498:	80 81       	ld	r24, Z
     49a:	88 61       	ori	r24, 0x18	; 24
     49c:	80 83       	st	Z, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     49e:	86 e4       	ldi	r24, 0x46	; 70
     4a0:	80 83       	st	Z, r24
    sei();
     4a2:	78 94       	sei
}
     4a4:	08 95       	ret

000004a6 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     4a6:	f8 94       	cli
}
     4a8:	08 95       	ret

000004aa <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     4aa:	78 94       	sei
}
     4ac:	08 95       	ret

000004ae <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     4ae:	e0 91 43 01 	lds	r30, 0x0143
     4b2:	f0 91 44 01 	lds	r31, 0x0144
     4b6:	25 85       	ldd	r18, Z+13	; 0x0d
     4b8:	36 85       	ldd	r19, Z+14	; 0x0e
}
     4ba:	c9 01       	movw	r24, r18
     4bc:	08 95       	ret

000004be <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     4be:	e0 91 43 01 	lds	r30, 0x0143
     4c2:	f0 91 44 01 	lds	r31, 0x0144
     4c6:	27 85       	ldd	r18, Z+15	; 0x0f
     4c8:	30 89       	ldd	r19, Z+16	; 0x10
     4ca:	41 89       	ldd	r20, Z+17	; 0x11
     4cc:	52 89       	ldd	r21, Z+18	; 0x12
}
     4ce:	b9 01       	movw	r22, r18
     4d0:	ca 01       	movw	r24, r20
     4d2:	08 95       	ret

000004d4 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     4d4:	e0 91 43 01 	lds	r30, 0x0143
     4d8:	f0 91 44 01 	lds	r31, 0x0144
     4dc:	27 81       	ldd	r18, Z+7	; 0x07
     4de:	30 85       	ldd	r19, Z+8	; 0x08
}
     4e0:	c9 01       	movw	r24, r18
     4e2:	08 95       	ret

000004e4 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     4e4:	e0 91 43 01 	lds	r30, 0x0143
     4e8:	f0 91 44 01 	lds	r31, 0x0144
     4ec:	21 85       	ldd	r18, Z+9	; 0x09
     4ee:	32 85       	ldd	r19, Z+10	; 0x0a
     4f0:	43 85       	ldd	r20, Z+11	; 0x0b
     4f2:	54 85       	ldd	r21, Z+12	; 0x0c
}
     4f4:	b9 01       	movw	r22, r18
     4f6:	ca 01       	movw	r24, r20
     4f8:	08 95       	ret

000004fa <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     4fa:	e0 91 43 01 	lds	r30, 0x0143
     4fe:	f0 91 44 01 	lds	r31, 0x0144
     502:	90 87       	std	Z+8, r25	; 0x08
     504:	87 83       	std	Z+7, r24	; 0x07
}
     506:	08 95       	ret

00000508 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     508:	e0 91 43 01 	lds	r30, 0x0143
     50c:	f0 91 44 01 	lds	r31, 0x0144
     510:	61 87       	std	Z+9, r22	; 0x09
     512:	72 87       	std	Z+10, r23	; 0x0a
     514:	83 87       	std	Z+11, r24	; 0x0b
     516:	94 87       	std	Z+12, r25	; 0x0c
}
     518:	08 95       	ret

0000051a <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     51a:	e0 91 43 01 	lds	r30, 0x0143
     51e:	f0 91 44 01 	lds	r31, 0x0144
     522:	83 89       	ldd	r24, Z+19	; 0x13
     524:	88 23       	and	r24, r24
     526:	81 f4       	brne	.+32     	; 0x548 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     528:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     52a:	85 85       	ldd	r24, Z+13	; 0x0d
     52c:	96 85       	ldd	r25, Z+14	; 0x0e
     52e:	90 87       	std	Z+8, r25	; 0x08
     530:	87 83       	std	Z+7, r24	; 0x07
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     532:	87 85       	ldd	r24, Z+15	; 0x0f
     534:	90 89       	ldd	r25, Z+16	; 0x10
     536:	a1 89       	ldd	r26, Z+17	; 0x11
     538:	b2 89       	ldd	r27, Z+18	; 0x12
     53a:	81 87       	std	Z+9, r24	; 0x09
     53c:	92 87       	std	Z+10, r25	; 0x0a
     53e:	a3 87       	std	Z+11, r26	; 0x0b
     540:	b4 87       	std	Z+12, r27	; 0x0c
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     542:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	83 8b       	std	Z+19, r24	; 0x13
     548:	08 95       	ret

0000054a <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     54a:	6f 92       	push	r6
     54c:	7f 92       	push	r7
     54e:	8f 92       	push	r8
     550:	9f 92       	push	r9
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     568:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     56a:	c0 91 43 01 	lds	r28, 0x0143
     56e:	d0 91 44 01 	lds	r29, 0x0144
     572:	ed 84       	ldd	r14, Y+13	; 0x0d
     574:	fe 84       	ldd	r15, Y+14	; 0x0e
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     576:	2f 85       	ldd	r18, Y+15	; 0x0f
     578:	38 89       	ldd	r19, Y+16	; 0x10
     57a:	49 89       	ldd	r20, Y+17	; 0x11
     57c:	5a 89       	ldd	r21, Y+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     57e:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     580:	68 81       	ld	r22, Y
     582:	79 81       	ldd	r23, Y+1	; 0x01
     584:	80 e0       	ldi	r24, 0x00	; 0
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 95 18 	call	0x312a	; 0x312a <__mulsi3>
     58c:	3b 01       	movw	r6, r22
     58e:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     590:	00 e0       	ldi	r16, 0x00	; 0
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	6e 0c       	add	r6, r14
     596:	7f 1c       	adc	r7, r15
     598:	80 1e       	adc	r8, r16
     59a:	91 1e       	adc	r9, r17
  smpl_val += value;
     59c:	cc 24       	eor	r12, r12
     59e:	dd 24       	eor	r13, r13
     5a0:	6a 0c       	add	r6, r10
     5a2:	7b 1c       	adc	r7, r11
     5a4:	8c 1c       	adc	r8, r12
     5a6:	9d 1c       	adc	r9, r13
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	14 c0       	rjmp	.+40     	; 0x5da <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5b2:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5b4:	ed 84       	ldd	r14, Y+13	; 0x0d
     5b6:	fe 84       	ldd	r15, Y+14	; 0x0e
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     5b8:	2f 85       	ldd	r18, Y+15	; 0x0f
     5ba:	38 89       	ldd	r19, Y+16	; 0x10
     5bc:	49 89       	ldd	r20, Y+17	; 0x11
     5be:	5a 89       	ldd	r21, Y+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     5c0:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     5c2:	68 81       	ld	r22, Y
     5c4:	79 81       	ldd	r23, Y+1	; 0x01
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 95 18 	call	0x312a	; 0x312a <__mulsi3>
	curr_val += curr_ss;
     5ce:	00 e0       	ldi	r16, 0x00	; 0
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	6e 0d       	add	r22, r14
     5d4:	7f 1d       	adc	r23, r15
     5d6:	80 1f       	adc	r24, r16
     5d8:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5da:	66 15       	cp	r22, r6
     5dc:	77 05       	cpc	r23, r7
     5de:	88 05       	cpc	r24, r8
     5e0:	99 05       	cpc	r25, r9
     5e2:	3c f3       	brlt	.-50     	; 0x5b2 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	08 95       	ret

00000602 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     602:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     604:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     606:	e0 91 43 01 	lds	r30, 0x0143
     60a:	f0 91 44 01 	lds	r31, 0x0144
     60e:	01 c0       	rjmp	.+2      	; 0x612 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     610:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     612:	85 85       	ldd	r24, Z+13	; 0x0d
     614:	96 85       	ldd	r25, Z+14	; 0x0e
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     616:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     618:	23 81       	ldd	r18, Z+3	; 0x03
     61a:	34 81       	ldd	r19, Z+4	; 0x04
     61c:	45 81       	ldd	r20, Z+5	; 0x05
     61e:	56 81       	ldd	r21, Z+6	; 0x06
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	82 17       	cp	r24, r18
     626:	93 07       	cpc	r25, r19
     628:	a4 07       	cpc	r26, r20
     62a:	b5 07       	cpc	r27, r21
     62c:	89 f7       	brne	.-30     	; 0x610 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     62e:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     630:	85 85       	ldd	r24, Z+13	; 0x0d
     632:	96 85       	ldd	r25, Z+14	; 0x0e
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     634:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     636:	a0 e0       	ldi	r26, 0x00	; 0
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	83 83       	std	Z+3, r24	; 0x03
     63c:	94 83       	std	Z+4, r25	; 0x04
     63e:	a5 83       	std	Z+5, r26	; 0x05
     640:	b6 83       	std	Z+6, r27	; 0x06
  Timebase->Time.LastSample += value;
     642:	23 81       	ldd	r18, Z+3	; 0x03
     644:	34 81       	ldd	r19, Z+4	; 0x04
     646:	45 81       	ldd	r20, Z+5	; 0x05
     648:	56 81       	ldd	r21, Z+6	; 0x06
     64a:	cb 01       	movw	r24, r22
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	82 0f       	add	r24, r18
     652:	93 1f       	adc	r25, r19
     654:	a4 1f       	adc	r26, r20
     656:	b5 1f       	adc	r27, r21
     658:	83 83       	std	Z+3, r24	; 0x03
     65a:	94 83       	std	Z+4, r25	; 0x04
     65c:	a5 83       	std	Z+5, r26	; 0x05
     65e:	b6 83       	std	Z+6, r27	; 0x06
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     660:	23 81       	ldd	r18, Z+3	; 0x03
     662:	34 81       	ldd	r19, Z+4	; 0x04
     664:	45 81       	ldd	r20, Z+5	; 0x05
     666:	56 81       	ldd	r21, Z+6	; 0x06
     668:	80 81       	ld	r24, Z
     66a:	91 81       	ldd	r25, Z+1	; 0x01
     66c:	a0 e0       	ldi	r26, 0x00	; 0
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	4a 07       	cpc	r20, r26
     676:	5b 07       	cpc	r21, r27
     678:	84 f0       	brlt	.+32     	; 0x69a <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     67a:	23 81       	ldd	r18, Z+3	; 0x03
     67c:	34 81       	ldd	r19, Z+4	; 0x04
     67e:	45 81       	ldd	r20, Z+5	; 0x05
     680:	56 81       	ldd	r21, Z+6	; 0x06
     682:	80 81       	ld	r24, Z
     684:	91 81       	ldd	r25, Z+1	; 0x01
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b0 e0       	ldi	r27, 0x00	; 0
     68a:	28 1b       	sub	r18, r24
     68c:	39 0b       	sbc	r19, r25
     68e:	4a 0b       	sbc	r20, r26
     690:	5b 0b       	sbc	r21, r27
     692:	23 83       	std	Z+3, r18	; 0x03
     694:	34 83       	std	Z+4, r19	; 0x04
     696:	45 83       	std	Z+5, r20	; 0x05
     698:	56 83       	std	Z+6, r21	; 0x06
     69a:	08 95       	ret

0000069c <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     69c:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     69e:	e0 91 43 01 	lds	r30, 0x0143
     6a2:	f0 91 44 01 	lds	r31, 0x0144
     6a6:	27 85       	ldd	r18, Z+15	; 0x0f
     6a8:	30 89       	ldd	r19, Z+16	; 0x10
     6aa:	41 89       	ldd	r20, Z+17	; 0x11
     6ac:	52 89       	ldd	r21, Z+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     6ae:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     6b0:	a0 e0       	ldi	r26, 0x00	; 0
     6b2:	b0 e0       	ldi	r27, 0x00	; 0
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	a4 1f       	adc	r26, r20
     6ba:	b5 1f       	adc	r27, r21
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	06 c0       	rjmp	.+12     	; 0x6d2 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6c6:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     6c8:	27 85       	ldd	r18, Z+15	; 0x0f
     6ca:	30 89       	ldd	r19, Z+16	; 0x10
     6cc:	41 89       	ldd	r20, Z+17	; 0x11
     6ce:	52 89       	ldd	r21, Z+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     6d0:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     6d2:	28 17       	cp	r18, r24
     6d4:	39 07       	cpc	r19, r25
     6d6:	4a 07       	cpc	r20, r26
     6d8:	5b 07       	cpc	r21, r27
     6da:	ac f3       	brlt	.-22     	; 0x6c6 <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     6dc:	08 95       	ret

000006de <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     6de:	e0 91 43 01 	lds	r30, 0x0143
     6e2:	f0 91 44 01 	lds	r31, 0x0144
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	29 e1       	ldi	r18, 0x19	; 25
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	ac 01       	movw	r20, r24
     6f0:	42 9f       	mul	r20, r18
     6f2:	c0 01       	movw	r24, r0
     6f4:	43 9f       	mul	r20, r19
     6f6:	90 0d       	add	r25, r0
     6f8:	52 9f       	mul	r21, r18
     6fa:	90 0d       	add	r25, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	e8 0f       	add	r30, r24
     700:	f9 1f       	adc	r31, r25
     702:	80 81       	ld	r24, Z
     704:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     706:	8f 70       	andi	r24, 0x0F	; 15
     708:	08 95       	ret

0000070a <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     70a:	e0 91 43 01 	lds	r30, 0x0143
     70e:	f0 91 44 01 	lds	r31, 0x0144
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	29 e1       	ldi	r18, 0x19	; 25
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	ac 01       	movw	r20, r24
     71c:	42 9f       	mul	r20, r18
     71e:	c0 01       	movw	r24, r0
     720:	43 9f       	mul	r20, r19
     722:	90 0d       	add	r25, r0
     724:	52 9f       	mul	r21, r18
     726:	90 0d       	add	r25, r0
     728:	11 24       	eor	r1, r1
     72a:	e8 0f       	add	r30, r24
     72c:	f9 1f       	adc	r31, r25
     72e:	6f 70       	andi	r22, 0x0F	; 15
     730:	66 0f       	add	r22, r22
     732:	80 81       	ld	r24, Z
     734:	81 7e       	andi	r24, 0xE1	; 225
     736:	86 2b       	or	r24, r22
     738:	80 83       	st	Z, r24
}
     73a:	08 95       	ret

0000073c <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     73c:	e0 91 43 01 	lds	r30, 0x0143
     740:	f0 91 44 01 	lds	r31, 0x0144
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	29 e1       	ldi	r18, 0x19	; 25
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	ac 01       	movw	r20, r24
     74c:	42 9f       	mul	r20, r18
     74e:	c0 01       	movw	r24, r0
     750:	43 9f       	mul	r20, r19
     752:	90 0d       	add	r25, r0
     754:	52 9f       	mul	r21, r18
     756:	90 0d       	add	r25, r0
     758:	11 24       	eor	r1, r1
     75a:	e8 0f       	add	r30, r24
     75c:	f9 1f       	adc	r31, r25
     75e:	df 01       	movw	r26, r30
     760:	9a 96       	adiw	r26, 0x2a	; 42
     762:	62 a5       	ldd	r22, Z+42	; 0x2a
     764:	11 96       	adiw	r26, 0x01	; 1
     766:	7c 91       	ld	r23, X
     768:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     76a:	12 96       	adiw	r26, 0x02	; 2
     76c:	8c 91       	ld	r24, X
     76e:	12 97       	sbiw	r26, 0x02	; 2
     770:	13 96       	adiw	r26, 0x03	; 3
     772:	9c 91       	ld	r25, X
     774:	08 95       	ret

00000776 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     77a:	c0 91 43 01 	lds	r28, 0x0143
     77e:	d0 91 44 01 	lds	r29, 0x0144
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	29 e1       	ldi	r18, 0x19	; 25
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	fc 01       	movw	r30, r24
     78a:	e2 9f       	mul	r30, r18
     78c:	c0 01       	movw	r24, r0
     78e:	e3 9f       	mul	r30, r19
     790:	90 0d       	add	r25, r0
     792:	f2 9f       	mul	r31, r18
     794:	90 0d       	add	r25, r0
     796:	11 24       	eor	r1, r1
     798:	c8 0f       	add	r28, r24
     79a:	d9 1f       	adc	r29, r25
     79c:	ca 01       	movw	r24, r20
     79e:	db 01       	movw	r26, r22
     7a0:	b7 ff       	sbrs	r27, 7
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <Timebase_UpCounter_SS_Set_Value+0x36>
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	a0 e0       	ldi	r26, 0x00	; 0
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	8a a7       	std	Y+42, r24	; 0x2a
     7ae:	9b a7       	std	Y+43, r25	; 0x2b
     7b0:	ac a7       	std	Y+44, r26	; 0x2c
     7b2:	bd a7       	std	Y+45, r27	; 0x2d
}
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     7ba:	e0 91 43 01 	lds	r30, 0x0143
     7be:	f0 91 44 01 	lds	r31, 0x0144
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	29 e1       	ldi	r18, 0x19	; 25
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	ac 01       	movw	r20, r24
     7ca:	42 9f       	mul	r20, r18
     7cc:	c0 01       	movw	r24, r0
     7ce:	43 9f       	mul	r20, r19
     7d0:	90 0d       	add	r25, r0
     7d2:	52 9f       	mul	r21, r18
     7d4:	90 0d       	add	r25, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	e8 0f       	add	r30, r24
     7da:	f9 1f       	adc	r31, r25
     7dc:	df 01       	movw	r26, r30
     7de:	5a 96       	adiw	r26, 0x1a	; 26
     7e0:	62 8d       	ldd	r22, Z+26	; 0x1a
     7e2:	11 96       	adiw	r26, 0x01	; 1
     7e4:	7c 91       	ld	r23, X
     7e6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     7e8:	12 96       	adiw	r26, 0x02	; 2
     7ea:	8c 91       	ld	r24, X
     7ec:	12 97       	sbiw	r26, 0x02	; 2
     7ee:	13 96       	adiw	r26, 0x03	; 3
     7f0:	9c 91       	ld	r25, X
     7f2:	08 95       	ret

000007f4 <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     7f4:	e0 91 43 01 	lds	r30, 0x0143
     7f8:	f0 91 44 01 	lds	r31, 0x0144
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	29 e1       	ldi	r18, 0x19	; 25
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	ac 01       	movw	r20, r24
     804:	42 9f       	mul	r20, r18
     806:	c0 01       	movw	r24, r0
     808:	43 9f       	mul	r20, r19
     80a:	90 0d       	add	r25, r0
     80c:	52 9f       	mul	r21, r18
     80e:	90 0d       	add	r25, r0
     810:	11 24       	eor	r1, r1
     812:	e8 0f       	add	r30, r24
     814:	f9 1f       	adc	r31, r25
     816:	df 01       	movw	r26, r30
     818:	5e 96       	adiw	r26, 0x1e	; 30
     81a:	66 8d       	ldd	r22, Z+30	; 0x1e
     81c:	11 96       	adiw	r26, 0x01	; 1
     81e:	7c 91       	ld	r23, X
     820:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     822:	12 96       	adiw	r26, 0x02	; 2
     824:	8c 91       	ld	r24, X
     826:	12 97       	sbiw	r26, 0x02	; 2
     828:	13 96       	adiw	r26, 0x03	; 3
     82a:	9c 91       	ld	r25, X
     82c:	08 95       	ret

0000082e <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     82e:	e0 91 43 01 	lds	r30, 0x0143
     832:	f0 91 44 01 	lds	r31, 0x0144
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	29 e1       	ldi	r18, 0x19	; 25
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	dc 01       	movw	r26, r24
     83e:	a2 9f       	mul	r26, r18
     840:	c0 01       	movw	r24, r0
     842:	a3 9f       	mul	r26, r19
     844:	90 0d       	add	r25, r0
     846:	b2 9f       	mul	r27, r18
     848:	90 0d       	add	r25, r0
     84a:	11 24       	eor	r1, r1
     84c:	e8 0f       	add	r30, r24
     84e:	f9 1f       	adc	r31, r25
     850:	42 8f       	std	Z+26, r20	; 0x1a
     852:	53 8f       	std	Z+27, r21	; 0x1b
     854:	64 8f       	std	Z+28, r22	; 0x1c
     856:	75 8f       	std	Z+29, r23	; 0x1d
}
     858:	08 95       	ret

0000085a <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     85a:	e0 91 43 01 	lds	r30, 0x0143
     85e:	f0 91 44 01 	lds	r31, 0x0144
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	29 e1       	ldi	r18, 0x19	; 25
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	dc 01       	movw	r26, r24
     86a:	a2 9f       	mul	r26, r18
     86c:	c0 01       	movw	r24, r0
     86e:	a3 9f       	mul	r26, r19
     870:	90 0d       	add	r25, r0
     872:	b2 9f       	mul	r27, r18
     874:	90 0d       	add	r25, r0
     876:	11 24       	eor	r1, r1
     878:	e8 0f       	add	r30, r24
     87a:	f9 1f       	adc	r31, r25
     87c:	46 8f       	std	Z+30, r20	; 0x1e
     87e:	57 8f       	std	Z+31, r21	; 0x1f
     880:	60 a3       	std	Z+32, r22	; 0x20
     882:	71 a3       	std	Z+33, r23	; 0x21
}
     884:	08 95       	ret

00000886 <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     886:	e0 91 43 01 	lds	r30, 0x0143
     88a:	f0 91 44 01 	lds	r31, 0x0144
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	29 e1       	ldi	r18, 0x19	; 25
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	ac 01       	movw	r20, r24
     896:	42 9f       	mul	r20, r18
     898:	c0 01       	movw	r24, r0
     89a:	43 9f       	mul	r20, r19
     89c:	90 0d       	add	r25, r0
     89e:	52 9f       	mul	r21, r18
     8a0:	90 0d       	add	r25, r0
     8a2:	11 24       	eor	r1, r1
     8a4:	e8 0f       	add	r30, r24
     8a6:	f9 1f       	adc	r31, r25
     8a8:	df 01       	movw	r26, r30
     8aa:	92 96       	adiw	r26, 0x22	; 34
     8ac:	62 a1       	ldd	r22, Z+34	; 0x22
     8ae:	11 96       	adiw	r26, 0x01	; 1
     8b0:	7c 91       	ld	r23, X
     8b2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     8b4:	12 96       	adiw	r26, 0x02	; 2
     8b6:	8c 91       	ld	r24, X
     8b8:	12 97       	sbiw	r26, 0x02	; 2
     8ba:	13 96       	adiw	r26, 0x03	; 3
     8bc:	9c 91       	ld	r25, X
     8be:	08 95       	ret

000008c0 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     8c0:	e0 91 43 01 	lds	r30, 0x0143
     8c4:	f0 91 44 01 	lds	r31, 0x0144
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	29 e1       	ldi	r18, 0x19	; 25
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	dc 01       	movw	r26, r24
     8d0:	a2 9f       	mul	r26, r18
     8d2:	c0 01       	movw	r24, r0
     8d4:	a3 9f       	mul	r26, r19
     8d6:	90 0d       	add	r25, r0
     8d8:	b2 9f       	mul	r27, r18
     8da:	90 0d       	add	r25, r0
     8dc:	11 24       	eor	r1, r1
     8de:	e8 0f       	add	r30, r24
     8e0:	f9 1f       	adc	r31, r25
     8e2:	42 a3       	std	Z+34, r20	; 0x22
     8e4:	53 a3       	std	Z+35, r21	; 0x23
     8e6:	64 a3       	std	Z+36, r22	; 0x24
     8e8:	75 a3       	std	Z+37, r23	; 0x25
}
     8ea:	08 95       	ret

000008ec <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     8ec:	e0 91 43 01 	lds	r30, 0x0143
     8f0:	f0 91 44 01 	lds	r31, 0x0144
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	29 e1       	ldi	r18, 0x19	; 25
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	ac 01       	movw	r20, r24
     8fc:	42 9f       	mul	r20, r18
     8fe:	c0 01       	movw	r24, r0
     900:	43 9f       	mul	r20, r19
     902:	90 0d       	add	r25, r0
     904:	52 9f       	mul	r21, r18
     906:	90 0d       	add	r25, r0
     908:	11 24       	eor	r1, r1
     90a:	e8 0f       	add	r30, r24
     90c:	f9 1f       	adc	r31, r25
     90e:	df 01       	movw	r26, r30
     910:	96 96       	adiw	r26, 0x26	; 38
     912:	66 a1       	ldd	r22, Z+38	; 0x26
     914:	11 96       	adiw	r26, 0x01	; 1
     916:	7c 91       	ld	r23, X
     918:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	8c 91       	ld	r24, X
     91e:	12 97       	sbiw	r26, 0x02	; 2
     920:	13 96       	adiw	r26, 0x03	; 3
     922:	9c 91       	ld	r25, X
     924:	08 95       	ret

00000926 <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     92a:	c0 91 43 01 	lds	r28, 0x0143
     92e:	d0 91 44 01 	lds	r29, 0x0144
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	29 e1       	ldi	r18, 0x19	; 25
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	fc 01       	movw	r30, r24
     93a:	e2 9f       	mul	r30, r18
     93c:	c0 01       	movw	r24, r0
     93e:	e3 9f       	mul	r30, r19
     940:	90 0d       	add	r25, r0
     942:	f2 9f       	mul	r31, r18
     944:	90 0d       	add	r25, r0
     946:	11 24       	eor	r1, r1
     948:	c8 0f       	add	r28, r24
     94a:	d9 1f       	adc	r29, r25
     94c:	ca 01       	movw	r24, r20
     94e:	db 01       	movw	r26, r22
     950:	b7 ff       	sbrs	r27, 7
     952:	04 c0       	rjmp	.+8      	; 0x95c <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
     95c:	8e a3       	std	Y+38, r24	; 0x26
     95e:	9f a3       	std	Y+39, r25	; 0x27
     960:	a8 a7       	std	Y+40, r26	; 0x28
     962:	b9 a7       	std	Y+41, r27	; 0x29
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     96a:	e0 91 43 01 	lds	r30, 0x0143
     96e:	f0 91 44 01 	lds	r31, 0x0144
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	29 e1       	ldi	r18, 0x19	; 25
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	ac 01       	movw	r20, r24
     97a:	42 9f       	mul	r20, r18
     97c:	c0 01       	movw	r24, r0
     97e:	43 9f       	mul	r20, r19
     980:	90 0d       	add	r25, r0
     982:	52 9f       	mul	r21, r18
     984:	90 0d       	add	r25, r0
     986:	11 24       	eor	r1, r1
     988:	e8 0f       	add	r30, r24
     98a:	f9 1f       	adc	r31, r25
     98c:	df 01       	movw	r26, r30
     98e:	9e 96       	adiw	r26, 0x2e	; 46
     990:	66 a5       	ldd	r22, Z+46	; 0x2e
     992:	11 96       	adiw	r26, 0x01	; 1
     994:	7c 91       	ld	r23, X
     996:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     998:	12 96       	adiw	r26, 0x02	; 2
     99a:	8c 91       	ld	r24, X
     99c:	12 97       	sbiw	r26, 0x02	; 2
     99e:	13 96       	adiw	r26, 0x03	; 3
     9a0:	9c 91       	ld	r25, X
     9a2:	08 95       	ret

000009a4 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     9a4:	e0 91 43 01 	lds	r30, 0x0143
     9a8:	f0 91 44 01 	lds	r31, 0x0144
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	29 e1       	ldi	r18, 0x19	; 25
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	dc 01       	movw	r26, r24
     9b4:	a2 9f       	mul	r26, r18
     9b6:	c0 01       	movw	r24, r0
     9b8:	a3 9f       	mul	r26, r19
     9ba:	90 0d       	add	r25, r0
     9bc:	b2 9f       	mul	r27, r18
     9be:	90 0d       	add	r25, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	e8 0f       	add	r30, r24
     9c4:	f9 1f       	adc	r31, r25
     9c6:	46 a7       	std	Z+46, r20	; 0x2e
     9c8:	57 a7       	std	Z+47, r21	; 0x2f
     9ca:	60 ab       	std	Z+48, r22	; 0x30
     9cc:	71 ab       	std	Z+49, r23	; 0x31
}
     9ce:	08 95       	ret

000009d0 <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     9d0:	e0 91 43 01 	lds	r30, 0x0143
     9d4:	f0 91 44 01 	lds	r31, 0x0144
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	01 96       	adiw	r24, 0x01	; 1
     9dc:	29 e1       	ldi	r18, 0x19	; 25
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	ac 01       	movw	r20, r24
     9e2:	42 9f       	mul	r20, r18
     9e4:	c0 01       	movw	r24, r0
     9e6:	43 9f       	mul	r20, r19
     9e8:	90 0d       	add	r25, r0
     9ea:	52 9f       	mul	r21, r18
     9ec:	90 0d       	add	r25, r0
     9ee:	11 24       	eor	r1, r1
     9f0:	e8 0f       	add	r30, r24
     9f2:	f9 1f       	adc	r31, r25
     9f4:	80 81       	ld	r24, Z
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     9f6:	81 70       	andi	r24, 0x01	; 1
     9f8:	08 95       	ret

000009fa <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     9fa:	e0 91 43 01 	lds	r30, 0x0143
     9fe:	f0 91 44 01 	lds	r31, 0x0144
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	29 e1       	ldi	r18, 0x19	; 25
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	ac 01       	movw	r20, r24
     a0c:	42 9f       	mul	r20, r18
     a0e:	c0 01       	movw	r24, r0
     a10:	43 9f       	mul	r20, r19
     a12:	90 0d       	add	r25, r0
     a14:	52 9f       	mul	r21, r18
     a16:	90 0d       	add	r25, r0
     a18:	11 24       	eor	r1, r1
     a1a:	e8 0f       	add	r30, r24
     a1c:	f9 1f       	adc	r31, r25
     a1e:	80 81       	ld	r24, Z
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	80 83       	st	Z, r24
}
     a24:	08 95       	ret

00000a26 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a26:	e0 91 43 01 	lds	r30, 0x0143
     a2a:	f0 91 44 01 	lds	r31, 0x0144
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	29 e1       	ldi	r18, 0x19	; 25
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	ac 01       	movw	r20, r24
     a38:	42 9f       	mul	r20, r18
     a3a:	c0 01       	movw	r24, r0
     a3c:	43 9f       	mul	r20, r19
     a3e:	90 0d       	add	r25, r0
     a40:	52 9f       	mul	r21, r18
     a42:	90 0d       	add	r25, r0
     a44:	11 24       	eor	r1, r1
     a46:	e8 0f       	add	r30, r24
     a48:	f9 1f       	adc	r31, r25
     a4a:	80 81       	ld	r24, Z
     a4c:	8e 7f       	andi	r24, 0xFE	; 254
     a4e:	80 83       	st	Z, r24
}
     a50:	08 95       	ret

00000a52 <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     a52:	60 91 43 01 	lds	r22, 0x0143
     a56:	70 91 44 01 	lds	r23, 0x0144
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	49 e1       	ldi	r20, 0x19	; 25
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	84 9f       	mul	r24, r20
     a64:	d0 01       	movw	r26, r0
     a66:	85 9f       	mul	r24, r21
     a68:	b0 0d       	add	r27, r0
     a6a:	94 9f       	mul	r25, r20
     a6c:	b0 0d       	add	r27, r0
     a6e:	11 24       	eor	r1, r1
     a70:	01 97       	sbiw	r24, 0x01	; 1
     a72:	a6 0f       	add	r26, r22
     a74:	b7 1f       	adc	r27, r23
     a76:	2c 91       	ld	r18, X
     a78:	21 7e       	andi	r18, 0xE1	; 225
     a7a:	2c 93       	st	X, r18

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     a7c:	84 9f       	mul	r24, r20
     a7e:	f0 01       	movw	r30, r0
     a80:	85 9f       	mul	r24, r21
     a82:	f0 0d       	add	r31, r0
     a84:	94 9f       	mul	r25, r20
     a86:	f0 0d       	add	r31, r0
     a88:	11 24       	eor	r1, r1
     a8a:	e6 0f       	add	r30, r22
     a8c:	f7 1f       	adc	r31, r23
     a8e:	12 a6       	std	Z+42, r1	; 0x2a
     a90:	13 a6       	std	Z+43, r1	; 0x2b
     a92:	14 a6       	std	Z+44, r1	; 0x2c
     a94:	15 a6       	std	Z+45, r1	; 0x2d
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     a96:	12 8e       	std	Z+26, r1	; 0x1a
     a98:	13 8e       	std	Z+27, r1	; 0x1b
     a9a:	14 8e       	std	Z+28, r1	; 0x1c
     a9c:	15 8e       	std	Z+29, r1	; 0x1d
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     a9e:	16 8e       	std	Z+30, r1	; 0x1e
     aa0:	17 8e       	std	Z+31, r1	; 0x1f
     aa2:	10 a2       	std	Z+32, r1	; 0x20
     aa4:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     aa6:	12 a2       	std	Z+34, r1	; 0x22
     aa8:	13 a2       	std	Z+35, r1	; 0x23
     aaa:	14 a2       	std	Z+36, r1	; 0x24
     aac:	15 a2       	std	Z+37, r1	; 0x25

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     aae:	16 a2       	std	Z+38, r1	; 0x26
     ab0:	17 a2       	std	Z+39, r1	; 0x27
     ab2:	10 a6       	std	Z+40, r1	; 0x28
     ab4:	11 a6       	std	Z+41, r1	; 0x29
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     ab6:	16 a6       	std	Z+46, r1	; 0x2e
     ab8:	17 a6       	std	Z+47, r1	; 0x2f
     aba:	10 aa       	std	Z+48, r1	; 0x30
     abc:	11 aa       	std	Z+49, r1	; 0x31
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     abe:	8c 91       	ld	r24, X
     ac0:	8e 7f       	andi	r24, 0xFE	; 254
     ac2:	8c 93       	st	X, r24
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
     ac4:	08 95       	ret

00000ac6 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     ac6:	0e 94 29 05 	call	0xa52	; 0xa52 <Timebase_UpCounter_SS_Reset>
}
     aca:	08 95       	ret

00000acc <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     acc:	e0 91 43 01 	lds	r30, 0x0143
     ad0:	f0 91 44 01 	lds	r31, 0x0144
     ad4:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	29 e1       	ldi	r18, 0x19	; 25
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	ac 01       	movw	r20, r24
     ade:	42 9f       	mul	r20, r18
     ae0:	c0 01       	movw	r24, r0
     ae2:	43 9f       	mul	r20, r19
     ae4:	90 0d       	add	r25, r0
     ae6:	52 9f       	mul	r21, r18
     ae8:	90 0d       	add	r25, r0
     aea:	11 24       	eor	r1, r1
     aec:	e8 0f       	add	r30, r24
     aee:	f9 1f       	adc	r31, r25
     af0:	90 81       	ld	r25, Z
     af2:	89 2f       	mov	r24, r25
     af4:	86 95       	lsr	r24
     af6:	8f 70       	andi	r24, 0x0F	; 15
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	19 f0       	breq	.+6      	; 0xb02 <Timebase_UpCounter_SS_Start+0x36>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     afc:	91 7e       	andi	r25, 0xE1	; 225
     afe:	92 60       	ori	r25, 0x02	; 2
     b00:	90 83       	st	Z, r25
     b02:	08 95       	ret

00000b04 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     b04:	e0 91 43 01 	lds	r30, 0x0143
     b08:	f0 91 44 01 	lds	r31, 0x0144
     b0c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	29 e1       	ldi	r18, 0x19	; 25
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	ac 01       	movw	r20, r24
     b16:	42 9f       	mul	r20, r18
     b18:	c0 01       	movw	r24, r0
     b1a:	43 9f       	mul	r20, r19
     b1c:	90 0d       	add	r25, r0
     b1e:	52 9f       	mul	r21, r18
     b20:	90 0d       	add	r25, r0
     b22:	11 24       	eor	r1, r1
     b24:	e8 0f       	add	r30, r24
     b26:	f9 1f       	adc	r31, r25
     b28:	90 81       	ld	r25, Z
     b2a:	89 2f       	mov	r24, r25
     b2c:	86 95       	lsr	r24
     b2e:	8f 70       	andi	r24, 0x0F	; 15
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	19 f0       	breq	.+6      	; 0xb3a <Timebase_UpCounter_SS_Stop+0x36>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     b34:	91 7e       	andi	r25, 0xE1	; 225
     b36:	94 60       	ori	r25, 0x04	; 4
     b38:	90 83       	st	Z, r25
     b3a:	08 95       	ret

00000b3c <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
     b3c:	2f 92       	push	r2
     b3e:	3f 92       	push	r3
     b40:	4f 92       	push	r4
     b42:	5f 92       	push	r5
     b44:	6f 92       	push	r6
     b46:	7f 92       	push	r7
     b48:	8f 92       	push	r8
     b4a:	9f 92       	push	r9
     b4c:	af 92       	push	r10
     b4e:	bf 92       	push	r11
     b50:	cf 92       	push	r12
     b52:	df 92       	push	r13
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	00 d0       	rcall	.+0      	; 0xb62 <Timebase_UpCounter_SS_Set_Securely+0x26>
     b62:	00 d0       	rcall	.+0      	; 0xb64 <Timebase_UpCounter_SS_Set_Securely+0x28>
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	4a 01       	movw	r8, r20
     b6a:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     b6c:	20 90 43 01 	lds	r2, 0x0143
     b70:	30 90 44 01 	lds	r3, 0x0144
     b74:	48 2e       	mov	r4, r24
     b76:	55 24       	eor	r5, r5
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     b78:	08 94       	sec
     b7a:	41 1c       	adc	r4, r1
     b7c:	51 1c       	adc	r5, r1
     b7e:	29 e1       	ldi	r18, 0x19	; 25
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	42 9e       	mul	r4, r18
     b84:	f0 01       	movw	r30, r0
     b86:	43 9e       	mul	r4, r19
     b88:	f0 0d       	add	r31, r0
     b8a:	52 9e       	mul	r5, r18
     b8c:	f0 0d       	add	r31, r0
     b8e:	11 24       	eor	r1, r1
     b90:	08 94       	sec
     b92:	41 08       	sbc	r4, r1
     b94:	51 08       	sbc	r5, r1
     b96:	e2 0d       	add	r30, r2
     b98:	f3 1d       	adc	r31, r3
     b9a:	80 81       	ld	r24, Z
     b9c:	86 95       	lsr	r24
     b9e:	8f 70       	andi	r24, 0x0F	; 15
     ba0:	09 f0       	breq	.+2      	; 0xba4 <Timebase_UpCounter_SS_Set_Securely+0x68>
     ba2:	8f c0       	rjmp	.+286    	; 0xcc2 <Timebase_UpCounter_SS_Set_Securely+0x186>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     ba4:	42 9e       	mul	r4, r18
     ba6:	f0 01       	movw	r30, r0
     ba8:	43 9e       	mul	r4, r19
     baa:	f0 0d       	add	r31, r0
     bac:	52 9e       	mul	r5, r18
     bae:	f0 0d       	add	r31, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	e2 0d       	add	r30, r2
     bb4:	f3 1d       	adc	r31, r3
     bb6:	12 a6       	std	Z+42, r1	; 0x2a
     bb8:	13 a6       	std	Z+43, r1	; 0x2b
     bba:	14 a6       	std	Z+44, r1	; 0x2c
     bbc:	15 a6       	std	Z+45, r1	; 0x2d

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     bbe:	16 a2       	std	Z+38, r1	; 0x26
     bc0:	17 a2       	std	Z+39, r1	; 0x27
     bc2:	10 a6       	std	Z+40, r1	; 0x28
     bc4:	11 a6       	std	Z+41, r1	; 0x29
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     bc6:	42 a3       	std	Z+34, r20	; 0x22
     bc8:	53 a3       	std	Z+35, r21	; 0x23
     bca:	64 a3       	std	Z+36, r22	; 0x24
     bcc:	75 a3       	std	Z+37, r23	; 0x25
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     bce:	d1 01       	movw	r26, r2
     bd0:	17 96       	adiw	r26, 0x07	; 7
     bd2:	cd 90       	ld	r12, X+
     bd4:	dc 90       	ld	r13, X
     bd6:	18 97       	sbiw	r26, 0x08	; 8
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     bd8:	19 96       	adiw	r26, 0x09	; 9
     bda:	2d 91       	ld	r18, X+
     bdc:	3d 91       	ld	r19, X+
     bde:	4d 91       	ld	r20, X+
     be0:	5c 91       	ld	r21, X
     be2:	1c 97       	sbiw	r26, 0x0c	; 12
     be4:	29 83       	std	Y+1, r18	; 0x01
     be6:	3a 83       	std	Y+2, r19	; 0x02
     be8:	4b 83       	std	Y+3, r20	; 0x03
     bea:	5c 83       	std	Y+4, r21	; 0x04
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	subsec_val = value % Timebase->Config.UpdateRate;
     bec:	2d 91       	ld	r18, X+
     bee:	3c 91       	ld	r19, X
     bf0:	40 e0       	ldi	r20, 0x00	; 0
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	c5 01       	movw	r24, r10
     bf6:	b4 01       	movw	r22, r8
     bf8:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     bfc:	7b 01       	movw	r14, r22
     bfe:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     c00:	f1 01       	movw	r30, r2
     c02:	20 81       	ld	r18, Z
     c04:	31 81       	ldd	r19, Z+1	; 0x01
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     c12:	c9 01       	movw	r24, r18
     c14:	da 01       	movw	r26, r20
     c16:	3c 01       	movw	r6, r24
     c18:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
     c1a:	56 01       	movw	r10, r12
     c1c:	cc 24       	eor	r12, r12
     c1e:	dd 24       	eor	r13, r13
     c20:	ae 0c       	add	r10, r14
     c22:	bf 1c       	adc	r11, r15
     c24:	c0 1e       	adc	r12, r16
     c26:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     c28:	d1 01       	movw	r26, r2
     c2a:	8d 91       	ld	r24, X+
     c2c:	9c 91       	ld	r25, X
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	a8 16       	cp	r10, r24
     c34:	b9 06       	cpc	r11, r25
     c36:	ca 06       	cpc	r12, r26
     c38:	db 06       	cpc	r13, r27
     c3a:	9c f0       	brlt	.+38     	; 0xc62 <Timebase_UpCounter_SS_Set_Securely+0x126>
	  sec_val += 1;
     c3c:	08 94       	sec
     c3e:	61 1c       	adc	r6, r1
     c40:	71 1c       	adc	r7, r1
     c42:	81 1c       	adc	r8, r1
     c44:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     c46:	f1 01       	movw	r30, r2
     c48:	20 81       	ld	r18, Z
     c4a:	31 81       	ldd	r19, Z+1	; 0x01
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	c6 01       	movw	r24, r12
     c52:	b5 01       	movw	r22, r10
     c54:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     c58:	ac 01       	movw	r20, r24
     c5a:	cb 01       	movw	r24, r22
     c5c:	da 01       	movw	r26, r20
     c5e:	5c 01       	movw	r10, r24
     c60:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     c62:	89 e1       	ldi	r24, 0x19	; 25
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	48 9e       	mul	r4, r24
     c68:	f0 01       	movw	r30, r0
     c6a:	49 9e       	mul	r4, r25
     c6c:	f0 0d       	add	r31, r0
     c6e:	58 9e       	mul	r5, r24
     c70:	f0 0d       	add	r31, r0
     c72:	11 24       	eor	r1, r1
     c74:	e2 0d       	add	r30, r2
     c76:	f3 1d       	adc	r31, r3
     c78:	29 81       	ldd	r18, Y+1	; 0x01
     c7a:	3a 81       	ldd	r19, Y+2	; 0x02
     c7c:	4b 81       	ldd	r20, Y+3	; 0x03
     c7e:	5c 81       	ldd	r21, Y+4	; 0x04
     c80:	26 0d       	add	r18, r6
     c82:	37 1d       	adc	r19, r7
     c84:	48 1d       	adc	r20, r8
     c86:	59 1d       	adc	r21, r9
     c88:	22 8f       	std	Z+26, r18	; 0x1a
     c8a:	33 8f       	std	Z+27, r19	; 0x1b
     c8c:	44 8f       	std	Z+28, r20	; 0x1c
     c8e:	55 8f       	std	Z+29, r21	; 0x1d
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     c90:	a6 8e       	std	Z+30, r10	; 0x1e
     c92:	b7 8e       	std	Z+31, r11	; 0x1f
     c94:	c0 a2       	std	Z+32, r12	; 0x20
     c96:	d1 a2       	std	Z+33, r13	; 0x21
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     c98:	08 94       	sec
     c9a:	41 1c       	adc	r4, r1
     c9c:	51 1c       	adc	r5, r1
     c9e:	48 9e       	mul	r4, r24
     ca0:	f0 01       	movw	r30, r0
     ca2:	49 9e       	mul	r4, r25
     ca4:	f0 0d       	add	r31, r0
     ca6:	58 9e       	mul	r5, r24
     ca8:	f0 0d       	add	r31, r0
     caa:	11 24       	eor	r1, r1
     cac:	e2 0d       	add	r30, r2
     cae:	f3 1d       	adc	r31, r3
     cb0:	90 81       	ld	r25, Z
     cb2:	89 2f       	mov	r24, r25
     cb4:	86 95       	lsr	r24
     cb6:	8f 70       	andi	r24, 0x0F	; 15
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	19 f0       	breq	.+6      	; 0xcc2 <Timebase_UpCounter_SS_Set_Securely+0x186>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     cbc:	91 7e       	andi	r25, 0xE1	; 225
     cbe:	92 60       	ori	r25, 0x02	; 2
     cc0:	90 83       	st	Z, r25
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	1f 91       	pop	r17
     cd0:	0f 91       	pop	r16
     cd2:	ff 90       	pop	r15
     cd4:	ef 90       	pop	r14
     cd6:	df 90       	pop	r13
     cd8:	cf 90       	pop	r12
     cda:	bf 90       	pop	r11
     cdc:	af 90       	pop	r10
     cde:	9f 90       	pop	r9
     ce0:	8f 90       	pop	r8
     ce2:	7f 90       	pop	r7
     ce4:	6f 90       	pop	r6
     ce6:	5f 90       	pop	r5
     ce8:	4f 90       	pop	r4
     cea:	3f 90       	pop	r3
     cec:	2f 90       	pop	r2
     cee:	08 95       	ret

00000cf0 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	d8 2e       	mov	r13, r24
     cfc:	7a 01       	movw	r14, r20
     cfe:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
     d00:	0e 94 29 05 	call	0xa52	; 0xa52 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
     d04:	8d 2d       	mov	r24, r13
     d06:	b8 01       	movw	r22, r16
     d08:	a7 01       	movw	r20, r14
     d0a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <Timebase_UpCounter_SS_Set_Securely>
} 
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	08 95       	ret

00000d1a <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
     d1a:	2f 92       	push	r2
     d1c:	3f 92       	push	r3
     d1e:	4f 92       	push	r4
     d20:	5f 92       	push	r5
     d22:	6f 92       	push	r6
     d24:	7f 92       	push	r7
     d26:	8f 92       	push	r8
     d28:	9f 92       	push	r9
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <Timebase_UpCounter_SS_Update+0x26>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <Timebase_UpCounter_SS_Update+0x28>
     d42:	00 d0       	rcall	.+0      	; 0xd44 <Timebase_UpCounter_SS_Update+0x2a>
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     d48:	20 90 43 01 	lds	r2, 0x0143
     d4c:	30 90 44 01 	lds	r3, 0x0144
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	2f 5f       	subi	r18, 0xFF	; 255
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	3e 83       	std	Y+6, r19	; 0x06
     d5a:	2d 83       	std	Y+5, r18	; 0x05
     d5c:	29 e1       	ldi	r18, 0x19	; 25
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4d 81       	ldd	r20, Y+5	; 0x05
     d62:	5e 81       	ldd	r21, Y+6	; 0x06
     d64:	42 9f       	mul	r20, r18
     d66:	f0 01       	movw	r30, r0
     d68:	43 9f       	mul	r20, r19
     d6a:	f0 0d       	add	r31, r0
     d6c:	52 9f       	mul	r21, r18
     d6e:	f0 0d       	add	r31, r0
     d70:	11 24       	eor	r1, r1
     d72:	41 50       	subi	r20, 0x01	; 1
     d74:	50 40       	sbci	r21, 0x00	; 0
     d76:	5e 83       	std	Y+6, r21	; 0x06
     d78:	4d 83       	std	Y+5, r20	; 0x05
     d7a:	e2 0d       	add	r30, r2
     d7c:	f3 1d       	adc	r31, r3
     d7e:	e0 81       	ld	r30, Z
     d80:	e6 95       	lsr	r30
     d82:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     d84:	e1 30       	cpi	r30, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <Timebase_UpCounter_SS_Update+0x70>
     d88:	aa c0       	rjmp	.+340    	; 0xede <Timebase_UpCounter_SS_Update+0x1c4>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d8a:	f1 01       	movw	r30, r2
     d8c:	81 85       	ldd	r24, Z+9	; 0x09
     d8e:	92 85       	ldd	r25, Z+10	; 0x0a
     d90:	a3 85       	ldd	r26, Z+11	; 0x0b
     d92:	b4 85       	ldd	r27, Z+12	; 0x0c
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d94:	e7 80       	ldd	r14, Z+7	; 0x07
     d96:	f0 84       	ldd	r15, Z+8	; 0x08

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
     d98:	00 e0       	ldi	r16, 0x00	; 0
     d9a:	10 e0       	ldi	r17, 0x00	; 0
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
     d9c:	42 9f       	mul	r20, r18
     d9e:	60 01       	movw	r12, r0
     da0:	43 9f       	mul	r20, r19
     da2:	d0 0c       	add	r13, r0
     da4:	52 9f       	mul	r21, r18
     da6:	d0 0c       	add	r13, r0
     da8:	11 24       	eor	r1, r1
     daa:	c2 0c       	add	r12, r2
     dac:	d3 1c       	adc	r13, r3
     dae:	f6 01       	movw	r30, r12
     db0:	22 8d       	ldd	r18, Z+26	; 0x1a
     db2:	33 8d       	ldd	r19, Z+27	; 0x1b
     db4:	44 8d       	ldd	r20, Z+28	; 0x1c
     db6:	55 8d       	ldd	r21, Z+29	; 0x1d
     db8:	28 1b       	sub	r18, r24
     dba:	39 0b       	sbc	r19, r25
     dbc:	4a 0b       	sbc	r20, r26
     dbe:	5b 0b       	sbc	r21, r27
	curr_s *= Timebase->Config.UpdateRate;
     dc0:	d1 01       	movw	r26, r2
     dc2:	6d 91       	ld	r22, X+
     dc4:	7c 91       	ld	r23, X
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 95 18 	call	0x312a	; 0x312a <__mulsi3>
     dce:	9b 01       	movw	r18, r22
     dd0:	ac 01       	movw	r20, r24
     dd2:	2e 19       	sub	r18, r14
     dd4:	3f 09       	sbc	r19, r15
     dd6:	40 0b       	sbc	r20, r16
     dd8:	51 0b       	sbc	r21, r17
	curr_ss += curr_s;
     dda:	f6 01       	movw	r30, r12
     ddc:	86 8d       	ldd	r24, Z+30	; 0x1e
     dde:	97 8d       	ldd	r25, Z+31	; 0x1f
     de0:	a0 a1       	ldd	r26, Z+32	; 0x20
     de2:	b1 a1       	ldd	r27, Z+33	; 0x21
     de4:	28 0f       	add	r18, r24
     de6:	39 1f       	adc	r19, r25
     de8:	4a 1f       	adc	r20, r26
     dea:	5b 1f       	adc	r21, r27
     dec:	57 ff       	sbrs	r21, 7
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <Timebase_UpCounter_SS_Update+0xde>
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     df8:	89 e1       	ldi	r24, 0x19	; 25
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	6d 81       	ldd	r22, Y+5	; 0x05
     dfe:	7e 81       	ldd	r23, Y+6	; 0x06
     e00:	68 9f       	mul	r22, r24
     e02:	f0 01       	movw	r30, r0
     e04:	69 9f       	mul	r22, r25
     e06:	f0 0d       	add	r31, r0
     e08:	78 9f       	mul	r23, r24
     e0a:	f0 0d       	add	r31, r0
     e0c:	11 24       	eor	r1, r1
     e0e:	e2 0d       	add	r30, r2
     e10:	f3 1d       	adc	r31, r3
     e12:	26 a3       	std	Z+38, r18	; 0x26
     e14:	37 a3       	std	Z+39, r19	; 0x27
     e16:	40 a7       	std	Z+40, r20	; 0x28
     e18:	51 a7       	std	Z+41, r21	; 0x29
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
     e1a:	82 a1       	ldd	r24, Z+34	; 0x22
     e1c:	93 a1       	ldd	r25, Z+35	; 0x23
     e1e:	a4 a1       	ldd	r26, Z+36	; 0x24
     e20:	b5 a1       	ldd	r27, Z+37	; 0x25

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     e22:	82 1b       	sub	r24, r18
     e24:	93 0b       	sbc	r25, r19
     e26:	a4 0b       	sbc	r26, r20
     e28:	b5 0b       	sbc	r27, r21
     e2a:	b7 ff       	sbrs	r27, 7
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <Timebase_UpCounter_SS_Update+0x11c>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 e0       	ldi	r26, 0x00	; 0
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	82 a7       	std	Z+42, r24	; 0x2a
     e38:	93 a7       	std	Z+43, r25	; 0x2b
     e3a:	a4 a7       	std	Z+44, r26	; 0x2c
     e3c:	b5 a7       	std	Z+45, r27	; 0x2d
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
     e3e:	89 e1       	ldi	r24, 0x19	; 25
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	ad 81       	ldd	r26, Y+5	; 0x05
     e44:	be 81       	ldd	r27, Y+6	; 0x06
     e46:	a8 9f       	mul	r26, r24
     e48:	b0 01       	movw	r22, r0
     e4a:	a9 9f       	mul	r26, r25
     e4c:	70 0d       	add	r23, r0
     e4e:	b8 9f       	mul	r27, r24
     e50:	70 0d       	add	r23, r0
     e52:	11 24       	eor	r1, r1
     e54:	62 0d       	add	r22, r2
     e56:	73 1d       	adc	r23, r3
     e58:	fb 01       	movw	r30, r22
     e5a:	86 a1       	ldd	r24, Z+38	; 0x26
     e5c:	97 a1       	ldd	r25, Z+39	; 0x27
     e5e:	a0 a5       	ldd	r26, Z+40	; 0x28
     e60:	b1 a5       	ldd	r27, Z+41	; 0x29
     e62:	18 16       	cp	r1, r24
     e64:	19 06       	cpc	r1, r25
     e66:	1a 06       	cpc	r1, r26
     e68:	1b 06       	cpc	r1, r27
     e6a:	0c f4       	brge	.+2      	; 0xe6e <Timebase_UpCounter_SS_Update+0x154>
     e6c:	ce c0       	rjmp	.+412    	; 0x100a <Timebase_UpCounter_SS_Update+0x2f0>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     e6e:	db 01       	movw	r26, r22
     e70:	5a 96       	adiw	r26, 0x1a	; 26
     e72:	1d 92       	st	X+, r1
     e74:	1d 92       	st	X+, r1
     e76:	1d 92       	st	X+, r1
     e78:	1c 92       	st	X, r1
     e7a:	5d 97       	sbiw	r26, 0x1d	; 29
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     e7c:	16 8e       	std	Z+30, r1	; 0x1e
     e7e:	17 8e       	std	Z+31, r1	; 0x1f
     e80:	10 a2       	std	Z+32, r1	; 0x20
     e82:	11 a2       	std	Z+33, r1	; 0x21

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     e84:	96 96       	adiw	r26, 0x26	; 38
     e86:	1d 92       	st	X+, r1
     e88:	1d 92       	st	X+, r1
     e8a:	1d 92       	st	X+, r1
     e8c:	1c 92       	st	X, r1
     e8e:	99 97       	sbiw	r26, 0x29	; 41
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
     e90:	b2 96       	adiw	r30, 0x22	; 34

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     e92:	92 96       	adiw	r26, 0x22	; 34
     e94:	2c 91       	ld	r18, X
     e96:	31 81       	ldd	r19, Z+1	; 0x01
     e98:	42 81       	ldd	r20, Z+2	; 0x02
     e9a:	53 81       	ldd	r21, Z+3	; 0x03
     e9c:	c9 01       	movw	r24, r18
     e9e:	da 01       	movw	r26, r20
     ea0:	b7 ff       	sbrs	r27, 7
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <Timebase_UpCounter_SS_Update+0x192>
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	fb 01       	movw	r30, r22
     eae:	82 a7       	std	Z+42, r24	; 0x2a
     eb0:	93 a7       	std	Z+43, r25	; 0x2b
     eb2:	a4 a7       	std	Z+44, r26	; 0x2c
     eb4:	b5 a7       	std	Z+45, r27	; 0x2d
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     eb6:	2d 81       	ldd	r18, Y+5	; 0x05
     eb8:	3e 81       	ldd	r19, Y+6	; 0x06
     eba:	2f 5f       	subi	r18, 0xFF	; 255
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	89 e1       	ldi	r24, 0x19	; 25
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	28 9f       	mul	r18, r24
     ec4:	f0 01       	movw	r30, r0
     ec6:	29 9f       	mul	r18, r25
     ec8:	f0 0d       	add	r31, r0
     eca:	38 9f       	mul	r19, r24
     ecc:	f0 0d       	add	r31, r0
     ece:	11 24       	eor	r1, r1
     ed0:	e2 0d       	add	r30, r2
     ed2:	f3 1d       	adc	r31, r3
     ed4:	80 81       	ld	r24, Z
     ed6:	81 7e       	andi	r24, 0xE1	; 225
     ed8:	88 60       	ori	r24, 0x08	; 8
     eda:	80 83       	st	Z, r24
     edc:	96 c0       	rjmp	.+300    	; 0x100a <Timebase_UpCounter_SS_Update+0x2f0>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     ede:	e2 30       	cpi	r30, 0x02	; 2
     ee0:	09 f0       	breq	.+2      	; 0xee4 <Timebase_UpCounter_SS_Update+0x1ca>
     ee2:	93 c0       	rjmp	.+294    	; 0x100a <Timebase_UpCounter_SS_Update+0x2f0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ee4:	d1 01       	movw	r26, r2
     ee6:	19 96       	adiw	r26, 0x09	; 9
     ee8:	4d 91       	ld	r20, X+
     eea:	5d 91       	ld	r21, X+
     eec:	6d 91       	ld	r22, X+
     eee:	7c 91       	ld	r23, X
     ef0:	1c 97       	sbiw	r26, 0x0c	; 12
     ef2:	49 83       	std	Y+1, r20	; 0x01
     ef4:	5a 83       	std	Y+2, r21	; 0x02
     ef6:	6b 83       	std	Y+3, r22	; 0x03
     ef8:	7c 83       	std	Y+4, r23	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     efa:	17 96       	adiw	r26, 0x07	; 7
     efc:	8d 90       	ld	r8, X+
     efe:	9c 90       	ld	r9, X
     f00:	18 97       	sbiw	r26, 0x08	; 8
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
     f02:	4d 81       	ldd	r20, Y+5	; 0x05
     f04:	5e 81       	ldd	r21, Y+6	; 0x06
     f06:	42 9f       	mul	r20, r18
     f08:	f0 01       	movw	r30, r0
     f0a:	43 9f       	mul	r20, r19
     f0c:	f0 0d       	add	r31, r0
     f0e:	52 9f       	mul	r21, r18
     f10:	f0 0d       	add	r31, r0
     f12:	11 24       	eor	r1, r1
     f14:	e2 0d       	add	r30, r2
     f16:	f3 1d       	adc	r31, r3
     f18:	a6 a0       	ldd	r10, Z+38	; 0x26
     f1a:	b7 a0       	ldd	r11, Z+39	; 0x27
     f1c:	c0 a4       	ldd	r12, Z+40	; 0x28
     f1e:	d1 a4       	ldd	r13, Z+41	; 0x29
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	value      = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	subsec_val = value % Timebase->Config.UpdateRate;
     f20:	2d 91       	ld	r18, X+
     f22:	3c 91       	ld	r19, X
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	c6 01       	movw	r24, r12
     f2a:	b5 01       	movw	r22, r10
     f2c:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     f30:	7b 01       	movw	r14, r22
     f32:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     f34:	d1 01       	movw	r26, r2
     f36:	2d 91       	ld	r18, X+
     f38:	3c 91       	ld	r19, X
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	c6 01       	movw	r24, r12
     f40:	b5 01       	movw	r22, r10
     f42:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     f46:	c9 01       	movw	r24, r18
     f48:	da 01       	movw	r26, r20
     f4a:	2c 01       	movw	r4, r24
     f4c:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
     f4e:	aa 24       	eor	r10, r10
     f50:	bb 24       	eor	r11, r11
     f52:	8e 0c       	add	r8, r14
     f54:	9f 1c       	adc	r9, r15
     f56:	a0 1e       	adc	r10, r16
     f58:	b1 1e       	adc	r11, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     f5a:	f1 01       	movw	r30, r2
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	88 16       	cp	r8, r24
     f66:	99 06       	cpc	r9, r25
     f68:	aa 06       	cpc	r10, r26
     f6a:	bb 06       	cpc	r11, r27
     f6c:	94 f0       	brlt	.+36     	; 0xf92 <Timebase_UpCounter_SS_Update+0x278>
	  sec_val += 1;
     f6e:	08 94       	sec
     f70:	41 1c       	adc	r4, r1
     f72:	51 1c       	adc	r5, r1
     f74:	61 1c       	adc	r6, r1
     f76:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	c5 01       	movw	r24, r10
     f82:	b4 01       	movw	r22, r8
     f84:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
     f88:	ac 01       	movw	r20, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	da 01       	movw	r26, r20
     f8e:	4c 01       	movw	r8, r24
     f90:	5d 01       	movw	r10, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     f92:	89 e1       	ldi	r24, 0x19	; 25
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	2d 81       	ldd	r18, Y+5	; 0x05
     f98:	3e 81       	ldd	r19, Y+6	; 0x06
     f9a:	28 9f       	mul	r18, r24
     f9c:	b0 01       	movw	r22, r0
     f9e:	29 9f       	mul	r18, r25
     fa0:	70 0d       	add	r23, r0
     fa2:	38 9f       	mul	r19, r24
     fa4:	70 0d       	add	r23, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	62 0d       	add	r22, r2
     faa:	73 1d       	adc	r23, r3
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	ab 81       	ldd	r26, Y+3	; 0x03
     fb2:	bc 81       	ldd	r27, Y+4	; 0x04
     fb4:	84 0d       	add	r24, r4
     fb6:	95 1d       	adc	r25, r5
     fb8:	a6 1d       	adc	r26, r6
     fba:	b7 1d       	adc	r27, r7
     fbc:	fb 01       	movw	r30, r22
     fbe:	82 8f       	std	Z+26, r24	; 0x1a
     fc0:	93 8f       	std	Z+27, r25	; 0x1b
     fc2:	a4 8f       	std	Z+28, r26	; 0x1c
     fc4:	b5 8f       	std	Z+29, r27	; 0x1d
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     fc6:	db 01       	movw	r26, r22
     fc8:	5e 96       	adiw	r26, 0x1e	; 30
     fca:	8d 92       	st	X+, r8
     fcc:	9d 92       	st	X+, r9
     fce:	ad 92       	st	X+, r10
     fd0:	bc 92       	st	X, r11
     fd2:	91 97       	sbiw	r26, 0x21	; 33
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
     fd4:	92 96       	adiw	r26, 0x22	; 34
     fd6:	2d 91       	ld	r18, X+
     fd8:	3d 91       	ld	r19, X+
     fda:	4d 91       	ld	r20, X+
     fdc:	5c 91       	ld	r21, X
     fde:	95 97       	sbiw	r26, 0x25	; 37
     fe0:	96 96       	adiw	r26, 0x26	; 38
     fe2:	8d 91       	ld	r24, X+
     fe4:	9d 91       	ld	r25, X+
     fe6:	0d 90       	ld	r0, X+
     fe8:	bc 91       	ld	r27, X
     fea:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     fec:	28 1b       	sub	r18, r24
     fee:	39 0b       	sbc	r19, r25
     ff0:	4a 0b       	sbc	r20, r26
     ff2:	5b 0b       	sbc	r21, r27
     ff4:	57 ff       	sbrs	r21, 7
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <Timebase_UpCounter_SS_Update+0x2e6>
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	fb 01       	movw	r30, r22
    1002:	22 a7       	std	Z+42, r18	; 0x2a
    1004:	33 a7       	std	Z+43, r19	; 0x2b
    1006:	44 a7       	std	Z+44, r20	; 0x2c
    1008:	55 a7       	std	Z+45, r21	; 0x2d
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    100a:	26 96       	adiw	r28, 0x06	; 6
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	df 90       	pop	r13
    1024:	cf 90       	pop	r12
    1026:	bf 90       	pop	r11
    1028:	af 90       	pop	r10
    102a:	9f 90       	pop	r9
    102c:	8f 90       	pop	r8
    102e:	7f 90       	pop	r7
    1030:	6f 90       	pop	r6
    1032:	5f 90       	pop	r5
    1034:	4f 90       	pop	r4
    1036:	3f 90       	pop	r3
    1038:	2f 90       	pop	r2
    103a:	08 95       	ret

0000103c <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	e0 91 43 01 	lds	r30, 0x0143
    1042:	f0 91 44 01 	lds	r31, 0x0144
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	29 e1       	ldi	r18, 0x19	; 25
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	bc 01       	movw	r22, r24
    1050:	62 9f       	mul	r22, r18
    1052:	c0 01       	movw	r24, r0
    1054:	63 9f       	mul	r22, r19
    1056:	90 0d       	add	r25, r0
    1058:	72 9f       	mul	r23, r18
    105a:	90 0d       	add	r25, r0
    105c:	11 24       	eor	r1, r1
    105e:	e8 0f       	add	r30, r24
    1060:	f9 1f       	adc	r31, r25
    1062:	80 81       	ld	r24, Z
    1064:	86 95       	lsr	r24
    1066:	8f 70       	andi	r24, 0x0F	; 15
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	09 f4       	brne	.+2      	; 0x106e <Timebase_UpCounter_SS_Expired+0x32>
    106c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    106e:	84 2f       	mov	r24, r20
    1070:	08 95       	ret

00001072 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1072:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1074:	e0 91 43 01 	lds	r30, 0x0143
    1078:	f0 91 44 01 	lds	r31, 0x0144
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	29 e1       	ldi	r18, 0x19	; 25
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	bc 01       	movw	r22, r24
    1086:	62 9f       	mul	r22, r18
    1088:	c0 01       	movw	r24, r0
    108a:	63 9f       	mul	r22, r19
    108c:	90 0d       	add	r25, r0
    108e:	72 9f       	mul	r23, r18
    1090:	90 0d       	add	r25, r0
    1092:	11 24       	eor	r1, r1
    1094:	e8 0f       	add	r30, r24
    1096:	f9 1f       	adc	r31, r25
    1098:	80 81       	ld	r24, Z
    109a:	86 95       	lsr	r24
    109c:	8f 70       	andi	r24, 0x0F	; 15
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <Timebase_UpCounter_SS_Expired_Event+0x34>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    10a6:	84 2f       	mov	r24, r20
    10a8:	0e 94 29 05 	call	0xa52	; 0xa52 <Timebase_UpCounter_SS_Reset>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    10ae:	08 95       	ret

000010b0 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    10b8:	a0 91 43 01 	lds	r26, 0x0143
    10bc:	b0 91 44 01 	lds	r27, 0x0144
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	09 e1       	ldi	r16, 0x19	; 25
    10ca:	10 e0       	ldi	r17, 0x00	; 0
    10cc:	20 9f       	mul	r18, r16
    10ce:	e0 01       	movw	r28, r0
    10d0:	21 9f       	mul	r18, r17
    10d2:	d0 0d       	add	r29, r0
    10d4:	30 9f       	mul	r19, r16
    10d6:	d0 0d       	add	r29, r0
    10d8:	11 24       	eor	r1, r1
    10da:	21 50       	subi	r18, 0x01	; 1
    10dc:	30 40       	sbci	r19, 0x00	; 0
    10de:	ca 0f       	add	r28, r26
    10e0:	db 1f       	adc	r29, r27
    10e2:	88 81       	ld	r24, Y
    10e4:	80 fd       	sbrc	r24, 0
    10e6:	18 c0       	rjmp	.+48     	; 0x1118 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x68>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    10e8:	20 9f       	mul	r18, r16
    10ea:	f0 01       	movw	r30, r0
    10ec:	21 9f       	mul	r18, r17
    10ee:	f0 0d       	add	r31, r0
    10f0:	30 9f       	mul	r19, r16
    10f2:	f0 0d       	add	r31, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	ea 0f       	add	r30, r26
    10f8:	fb 1f       	adc	r31, r27
    10fa:	82 a5       	ldd	r24, Z+42	; 0x2a
    10fc:	93 a5       	ldd	r25, Z+43	; 0x2b
    10fe:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1100:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1102:	84 0f       	add	r24, r20
    1104:	95 1f       	adc	r25, r21
    1106:	a6 1f       	adc	r26, r22
    1108:	b7 1f       	adc	r27, r23
    110a:	86 a7       	std	Z+46, r24	; 0x2e
    110c:	97 a7       	std	Z+47, r25	; 0x2f
    110e:	a0 ab       	std	Z+48, r26	; 0x30
    1110:	b1 ab       	std	Z+49, r27	; 0x31
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1112:	88 81       	ld	r24, Y
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	88 83       	st	Y, r24
void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_SS_Set_PeriodValue( window, Timebase_UpCounter_SS_Get_Value( window ) + value);
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	1f 91       	pop	r17
    111e:	0f 91       	pop	r16
    1120:	08 95       	ret

00001122 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1122:	e0 91 43 01 	lds	r30, 0x0143
    1126:	f0 91 44 01 	lds	r31, 0x0144
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	29 e1       	ldi	r18, 0x19	; 25
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	ac 01       	movw	r20, r24
    1132:	42 9f       	mul	r20, r18
    1134:	c0 01       	movw	r24, r0
    1136:	43 9f       	mul	r20, r19
    1138:	90 0d       	add	r25, r0
    113a:	52 9f       	mul	r21, r18
    113c:	90 0d       	add	r25, r0
    113e:	11 24       	eor	r1, r1
    1140:	e8 0f       	add	r30, r24
    1142:	f9 1f       	adc	r31, r25
    1144:	26 a5       	ldd	r18, Z+46	; 0x2e
    1146:	37 a5       	ldd	r19, Z+47	; 0x2f
    1148:	40 a9       	ldd	r20, Z+48	; 0x30
    114a:	51 a9       	ldd	r21, Z+49	; 0x31
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    114c:	82 a5       	ldd	r24, Z+42	; 0x2a
    114e:	93 a5       	ldd	r25, Z+43	; 0x2b
    1150:	a4 a5       	ldd	r26, Z+44	; 0x2c
    1152:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1154:	28 1b       	sub	r18, r24
    1156:	39 0b       	sbc	r19, r25
    1158:	4a 0b       	sbc	r20, r26
    115a:	5b 0b       	sbc	r21, r27
    115c:	57 ff       	sbrs	r21, 7
    115e:	04 c0       	rjmp	.+8      	; 0x1168 <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1168:	b9 01       	movw	r22, r18
    116a:	ca 01       	movw	r24, r20
    116c:	08 95       	ret

0000116e <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1172:	c0 91 43 01 	lds	r28, 0x0143
    1176:	d0 91 44 01 	lds	r29, 0x0144
    117a:	68 2f       	mov	r22, r24
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	89 e1       	ldi	r24, 0x19	; 25
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	68 9f       	mul	r22, r24
    1184:	f0 01       	movw	r30, r0
    1186:	69 9f       	mul	r22, r25
    1188:	f0 0d       	add	r31, r0
    118a:	78 9f       	mul	r23, r24
    118c:	f0 0d       	add	r31, r0
    118e:	11 24       	eor	r1, r1
    1190:	ec 0f       	add	r30, r28
    1192:	fd 1f       	adc	r31, r29
    1194:	26 a5       	ldd	r18, Z+46	; 0x2e
    1196:	37 a5       	ldd	r19, Z+47	; 0x2f
    1198:	40 a9       	ldd	r20, Z+48	; 0x30
    119a:	51 a9       	ldd	r21, Z+49	; 0x31
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    119c:	82 a5       	ldd	r24, Z+42	; 0x2a
    119e:	93 a5       	ldd	r25, Z+43	; 0x2b
    11a0:	a4 a5       	ldd	r26, Z+44	; 0x2c
    11a2:	b5 a5       	ldd	r27, Z+45	; 0x2d
    11a4:	28 1b       	sub	r18, r24
    11a6:	39 0b       	sbc	r19, r25
    11a8:	4a 0b       	sbc	r20, r26
    11aa:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    11ac:	57 fd       	sbrc	r21, 7
    11ae:	07 c0       	rjmp	.+14     	; 0x11be <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    11b0:	21 15       	cp	r18, r1
    11b2:	31 05       	cpc	r19, r1
    11b4:	41 05       	cpc	r20, r1
    11b6:	51 05       	cpc	r21, r1
    11b8:	11 f0       	breq	.+4      	; 0x11be <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	14 c0       	rjmp	.+40     	; 0x11e6 <Timebase_UpCounter_SS_Period_Value_Expired+0x78>
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	6f 5f       	subi	r22, 0xFF	; 255
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	89 e1       	ldi	r24, 0x19	; 25
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	ac 01       	movw	r20, r24
    11ca:	64 9f       	mul	r22, r20
    11cc:	c0 01       	movw	r24, r0
    11ce:	65 9f       	mul	r22, r21
    11d0:	90 0d       	add	r25, r0
    11d2:	74 9f       	mul	r23, r20
    11d4:	90 0d       	add	r25, r0
    11d6:	11 24       	eor	r1, r1
    11d8:	c8 0f       	add	r28, r24
    11da:	d9 1f       	adc	r29, r25
    11dc:	88 81       	ld	r24, Y
    11de:	80 ff       	sbrs	r24, 0
    11e0:	21 e0       	ldi	r18, 0x01	; 1
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11e6:	82 2f       	mov	r24, r18
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    11ee:	1f 93       	push	r17
    11f0:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    11f2:	0e 94 b7 08 	call	0x116e	; 0x116e <Timebase_UpCounter_SS_Period_Value_Expired>
    11f6:	81 30       	cpi	r24, 0x01	; 1
    11f8:	11 f0       	breq	.+4      	; 0x11fe <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
    11fc:	17 c0       	rjmp	.+46     	; 0x122c <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3e>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    11fe:	e0 91 43 01 	lds	r30, 0x0143
    1202:	f0 91 44 01 	lds	r31, 0x0144
    1206:	81 2f       	mov	r24, r17
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	29 e1       	ldi	r18, 0x19	; 25
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	ac 01       	movw	r20, r24
    1212:	42 9f       	mul	r20, r18
    1214:	c0 01       	movw	r24, r0
    1216:	43 9f       	mul	r20, r19
    1218:	90 0d       	add	r25, r0
    121a:	52 9f       	mul	r21, r18
    121c:	90 0d       	add	r25, r0
    121e:	11 24       	eor	r1, r1
    1220:	e8 0f       	add	r30, r24
    1222:	f9 1f       	adc	r31, r25
    1224:	80 81       	ld	r24, Z
    1226:	8e 7f       	andi	r24, 0xFE	; 254
    1228:	80 83       	st	Z, r24
    122a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    122c:	1f 91       	pop	r17
    122e:	08 95       	ret

00001230 <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	0e 94 8d 06 	call	0xd1a	; 0xd1a <Timebase_UpCounter_SS_Update>
  }
}
    1236:	08 95       	ret

00001238 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 29 05 	call	0xa52	; 0xa52 <Timebase_UpCounter_SS_Reset>
  }
}
    123e:	08 95       	ret

00001240 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    1240:	e0 91 43 01 	lds	r30, 0x0143
    1244:	f0 91 44 01 	lds	r31, 0x0144
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	25 e1       	ldi	r18, 0x15	; 21
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	ac 01       	movw	r20, r24
    1250:	42 9f       	mul	r20, r18
    1252:	c0 01       	movw	r24, r0
    1254:	43 9f       	mul	r20, r19
    1256:	90 0d       	add	r25, r0
    1258:	52 9f       	mul	r21, r18
    125a:	90 0d       	add	r25, r0
    125c:	11 24       	eor	r1, r1
    125e:	e8 0f       	add	r30, r24
    1260:	f9 1f       	adc	r31, r25
    1262:	82 a9       	ldd	r24, Z+50	; 0x32
    1264:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    1266:	8f 70       	andi	r24, 0x0F	; 15
    1268:	08 95       	ret

0000126a <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    126a:	e0 91 43 01 	lds	r30, 0x0143
    126e:	f0 91 44 01 	lds	r31, 0x0144
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	25 e1       	ldi	r18, 0x15	; 21
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	ac 01       	movw	r20, r24
    127a:	42 9f       	mul	r20, r18
    127c:	c0 01       	movw	r24, r0
    127e:	43 9f       	mul	r20, r19
    1280:	90 0d       	add	r25, r0
    1282:	52 9f       	mul	r21, r18
    1284:	90 0d       	add	r25, r0
    1286:	11 24       	eor	r1, r1
    1288:	e8 0f       	add	r30, r24
    128a:	f9 1f       	adc	r31, r25
    128c:	6f 70       	andi	r22, 0x0F	; 15
    128e:	66 0f       	add	r22, r22
    1290:	82 a9       	ldd	r24, Z+50	; 0x32
    1292:	81 7e       	andi	r24, 0xE1	; 225
    1294:	86 2b       	or	r24, r22
    1296:	82 ab       	std	Z+50, r24	; 0x32
}
    1298:	08 95       	ret

0000129a <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    129a:	e0 91 43 01 	lds	r30, 0x0143
    129e:	f0 91 44 01 	lds	r31, 0x0144
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	25 e1       	ldi	r18, 0x15	; 21
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	ac 01       	movw	r20, r24
    12aa:	42 9f       	mul	r20, r18
    12ac:	c0 01       	movw	r24, r0
    12ae:	43 9f       	mul	r20, r19
    12b0:	90 0d       	add	r25, r0
    12b2:	52 9f       	mul	r21, r18
    12b4:	90 0d       	add	r25, r0
    12b6:	11 24       	eor	r1, r1
    12b8:	e8 0f       	add	r30, r24
    12ba:	f9 1f       	adc	r31, r25
    12bc:	ff 96       	adiw	r30, 0x3f	; 63
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	93 81       	ldd	r25, Z+3	; 0x03
    12c6:	08 95       	ret

000012c8 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    12cc:	c0 91 43 01 	lds	r28, 0x0143
    12d0:	d0 91 44 01 	lds	r29, 0x0144
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	25 e1       	ldi	r18, 0x15	; 21
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	fc 01       	movw	r30, r24
    12dc:	e2 9f       	mul	r30, r18
    12de:	c0 01       	movw	r24, r0
    12e0:	e3 9f       	mul	r30, r19
    12e2:	90 0d       	add	r25, r0
    12e4:	f2 9f       	mul	r31, r18
    12e6:	90 0d       	add	r25, r0
    12e8:	11 24       	eor	r1, r1
    12ea:	c8 0f       	add	r28, r24
    12ec:	d9 1f       	adc	r29, r25
    12ee:	ef 96       	adiw	r28, 0x3f	; 63
    12f0:	ca 01       	movw	r24, r20
    12f2:	db 01       	movw	r26, r22
    12f4:	b7 ff       	sbrs	r27, 7
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <Timebase_UpCounter_Set_Value+0x38>
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a0 e0       	ldi	r26, 0x00	; 0
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	88 83       	st	Y, r24
    1302:	99 83       	std	Y+1, r25	; 0x01
    1304:	aa 83       	std	Y+2, r26	; 0x02
    1306:	bb 83       	std	Y+3, r27	; 0x03
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	08 95       	ret

0000130e <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    130e:	e0 91 43 01 	lds	r30, 0x0143
    1312:	f0 91 44 01 	lds	r31, 0x0144
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	25 e1       	ldi	r18, 0x15	; 21
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	ac 01       	movw	r20, r24
    131e:	42 9f       	mul	r20, r18
    1320:	c0 01       	movw	r24, r0
    1322:	43 9f       	mul	r20, r19
    1324:	90 0d       	add	r25, r0
    1326:	52 9f       	mul	r21, r18
    1328:	90 0d       	add	r25, r0
    132a:	11 24       	eor	r1, r1
    132c:	e8 0f       	add	r30, r24
    132e:	f9 1f       	adc	r31, r25
    1330:	df 01       	movw	r26, r30
    1332:	d3 96       	adiw	r26, 0x33	; 51
    1334:	63 a9       	ldd	r22, Z+51	; 0x33
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	7c 91       	ld	r23, X
    133a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	8c 91       	ld	r24, X
    1340:	12 97       	sbiw	r26, 0x02	; 2
    1342:	13 96       	adiw	r26, 0x03	; 3
    1344:	9c 91       	ld	r25, X
    1346:	08 95       	ret

00001348 <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    1348:	e0 91 43 01 	lds	r30, 0x0143
    134c:	f0 91 44 01 	lds	r31, 0x0144
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	25 e1       	ldi	r18, 0x15	; 21
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	ac 01       	movw	r20, r24
    1358:	42 9f       	mul	r20, r18
    135a:	c0 01       	movw	r24, r0
    135c:	43 9f       	mul	r20, r19
    135e:	90 0d       	add	r25, r0
    1360:	52 9f       	mul	r21, r18
    1362:	90 0d       	add	r25, r0
    1364:	11 24       	eor	r1, r1
    1366:	e8 0f       	add	r30, r24
    1368:	f9 1f       	adc	r31, r25
    136a:	df 01       	movw	r26, r30
    136c:	d3 96       	adiw	r26, 0x33	; 51
    136e:	63 a9       	ldd	r22, Z+51	; 0x33
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	7c 91       	ld	r23, X
    1374:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1376:	12 96       	adiw	r26, 0x02	; 2
    1378:	8c 91       	ld	r24, X
    137a:	12 97       	sbiw	r26, 0x02	; 2
    137c:	13 96       	adiw	r26, 0x03	; 3
    137e:	9c 91       	ld	r25, X
    1380:	08 95       	ret

00001382 <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1382:	e0 91 43 01 	lds	r30, 0x0143
    1386:	f0 91 44 01 	lds	r31, 0x0144
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	25 e1       	ldi	r18, 0x15	; 21
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	dc 01       	movw	r26, r24
    1392:	a2 9f       	mul	r26, r18
    1394:	c0 01       	movw	r24, r0
    1396:	a3 9f       	mul	r26, r19
    1398:	90 0d       	add	r25, r0
    139a:	b2 9f       	mul	r27, r18
    139c:	90 0d       	add	r25, r0
    139e:	11 24       	eor	r1, r1
    13a0:	e8 0f       	add	r30, r24
    13a2:	f9 1f       	adc	r31, r25
    13a4:	43 ab       	std	Z+51, r20	; 0x33
    13a6:	54 ab       	std	Z+52, r21	; 0x34
    13a8:	65 ab       	std	Z+53, r22	; 0x35
    13aa:	76 ab       	std	Z+54, r23	; 0x36
}
    13ac:	08 95       	ret

000013ae <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    13ae:	e0 91 43 01 	lds	r30, 0x0143
    13b2:	f0 91 44 01 	lds	r31, 0x0144
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	25 e1       	ldi	r18, 0x15	; 21
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	dc 01       	movw	r26, r24
    13be:	a2 9f       	mul	r26, r18
    13c0:	c0 01       	movw	r24, r0
    13c2:	a3 9f       	mul	r26, r19
    13c4:	90 0d       	add	r25, r0
    13c6:	b2 9f       	mul	r27, r18
    13c8:	90 0d       	add	r25, r0
    13ca:	11 24       	eor	r1, r1
    13cc:	e8 0f       	add	r30, r24
    13ce:	f9 1f       	adc	r31, r25
    13d0:	43 ab       	std	Z+51, r20	; 0x33
    13d2:	54 ab       	std	Z+52, r21	; 0x34
    13d4:	65 ab       	std	Z+53, r22	; 0x35
    13d6:	76 ab       	std	Z+54, r23	; 0x36
}
    13d8:	08 95       	ret

000013da <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    13da:	e0 91 43 01 	lds	r30, 0x0143
    13de:	f0 91 44 01 	lds	r31, 0x0144
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	25 e1       	ldi	r18, 0x15	; 21
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	ac 01       	movw	r20, r24
    13ea:	42 9f       	mul	r20, r18
    13ec:	c0 01       	movw	r24, r0
    13ee:	43 9f       	mul	r20, r19
    13f0:	90 0d       	add	r25, r0
    13f2:	52 9f       	mul	r21, r18
    13f4:	90 0d       	add	r25, r0
    13f6:	11 24       	eor	r1, r1
    13f8:	e8 0f       	add	r30, r24
    13fa:	f9 1f       	adc	r31, r25
    13fc:	df 01       	movw	r26, r30
    13fe:	d7 96       	adiw	r26, 0x37	; 55
    1400:	67 a9       	ldd	r22, Z+55	; 0x37
    1402:	11 96       	adiw	r26, 0x01	; 1
    1404:	7c 91       	ld	r23, X
    1406:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    1408:	12 96       	adiw	r26, 0x02	; 2
    140a:	8c 91       	ld	r24, X
    140c:	12 97       	sbiw	r26, 0x02	; 2
    140e:	13 96       	adiw	r26, 0x03	; 3
    1410:	9c 91       	ld	r25, X
    1412:	08 95       	ret

00001414 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1414:	e0 91 43 01 	lds	r30, 0x0143
    1418:	f0 91 44 01 	lds	r31, 0x0144
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	25 e1       	ldi	r18, 0x15	; 21
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	dc 01       	movw	r26, r24
    1424:	a2 9f       	mul	r26, r18
    1426:	c0 01       	movw	r24, r0
    1428:	a3 9f       	mul	r26, r19
    142a:	90 0d       	add	r25, r0
    142c:	b2 9f       	mul	r27, r18
    142e:	90 0d       	add	r25, r0
    1430:	11 24       	eor	r1, r1
    1432:	e8 0f       	add	r30, r24
    1434:	f9 1f       	adc	r31, r25
    1436:	47 ab       	std	Z+55, r20	; 0x37
    1438:	50 af       	std	Z+56, r21	; 0x38
    143a:	61 af       	std	Z+57, r22	; 0x39
    143c:	72 af       	std	Z+58, r23	; 0x3a
}
    143e:	08 95       	ret

00001440 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    1440:	e0 91 43 01 	lds	r30, 0x0143
    1444:	f0 91 44 01 	lds	r31, 0x0144
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	25 e1       	ldi	r18, 0x15	; 21
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	ac 01       	movw	r20, r24
    1450:	42 9f       	mul	r20, r18
    1452:	c0 01       	movw	r24, r0
    1454:	43 9f       	mul	r20, r19
    1456:	90 0d       	add	r25, r0
    1458:	52 9f       	mul	r21, r18
    145a:	90 0d       	add	r25, r0
    145c:	11 24       	eor	r1, r1
    145e:	e8 0f       	add	r30, r24
    1460:	f9 1f       	adc	r31, r25
    1462:	df 01       	movw	r26, r30
    1464:	db 96       	adiw	r26, 0x3b	; 59
    1466:	63 ad       	ldd	r22, Z+59	; 0x3b
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	7c 91       	ld	r23, X
    146c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
    146e:	12 96       	adiw	r26, 0x02	; 2
    1470:	8c 91       	ld	r24, X
    1472:	12 97       	sbiw	r26, 0x02	; 2
    1474:	13 96       	adiw	r26, 0x03	; 3
    1476:	9c 91       	ld	r25, X
    1478:	08 95       	ret

0000147a <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    147e:	c0 91 43 01 	lds	r28, 0x0143
    1482:	d0 91 44 01 	lds	r29, 0x0144
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	25 e1       	ldi	r18, 0x15	; 21
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	fc 01       	movw	r30, r24
    148e:	e2 9f       	mul	r30, r18
    1490:	c0 01       	movw	r24, r0
    1492:	e3 9f       	mul	r30, r19
    1494:	90 0d       	add	r25, r0
    1496:	f2 9f       	mul	r31, r18
    1498:	90 0d       	add	r25, r0
    149a:	11 24       	eor	r1, r1
    149c:	c8 0f       	add	r28, r24
    149e:	d9 1f       	adc	r29, r25
    14a0:	ca 01       	movw	r24, r20
    14a2:	db 01       	movw	r26, r22
    14a4:	b7 ff       	sbrs	r27, 7
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <Timebase_UpCounter_Set_TemporaryValue+0x36>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	8b af       	std	Y+59, r24	; 0x3b
    14b2:	9c af       	std	Y+60, r25	; 0x3c
    14b4:	ad af       	std	Y+61, r26	; 0x3d
    14b6:	be af       	std	Y+62, r27	; 0x3e
}
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    14be:	e0 91 43 01 	lds	r30, 0x0143
    14c2:	f0 91 44 01 	lds	r31, 0x0144
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	25 e1       	ldi	r18, 0x15	; 21
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	ac 01       	movw	r20, r24
    14ce:	42 9f       	mul	r20, r18
    14d0:	c0 01       	movw	r24, r0
    14d2:	43 9f       	mul	r20, r19
    14d4:	90 0d       	add	r25, r0
    14d6:	52 9f       	mul	r21, r18
    14d8:	90 0d       	add	r25, r0
    14da:	11 24       	eor	r1, r1
    14dc:	e8 0f       	add	r30, r24
    14de:	f9 1f       	adc	r31, r25
    14e0:	ed 5b       	subi	r30, 0xBD	; 189
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	60 81       	ld	r22, Z
    14e6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    14e8:	82 81       	ldd	r24, Z+2	; 0x02
    14ea:	93 81       	ldd	r25, Z+3	; 0x03
    14ec:	08 95       	ret

000014ee <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    14ee:	e0 91 43 01 	lds	r30, 0x0143
    14f2:	f0 91 44 01 	lds	r31, 0x0144
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	25 e1       	ldi	r18, 0x15	; 21
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	dc 01       	movw	r26, r24
    14fe:	a2 9f       	mul	r26, r18
    1500:	c0 01       	movw	r24, r0
    1502:	a3 9f       	mul	r26, r19
    1504:	90 0d       	add	r25, r0
    1506:	b2 9f       	mul	r27, r18
    1508:	90 0d       	add	r25, r0
    150a:	11 24       	eor	r1, r1
    150c:	e8 0f       	add	r30, r24
    150e:	f9 1f       	adc	r31, r25
    1510:	ed 5b       	subi	r30, 0xBD	; 189
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	40 83       	st	Z, r20
    1516:	51 83       	std	Z+1, r21	; 0x01
    1518:	62 83       	std	Z+2, r22	; 0x02
    151a:	73 83       	std	Z+3, r23	; 0x03
}
    151c:	08 95       	ret

0000151e <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    151e:	e0 91 43 01 	lds	r30, 0x0143
    1522:	f0 91 44 01 	lds	r31, 0x0144
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	25 e1       	ldi	r18, 0x15	; 21
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	ac 01       	movw	r20, r24
    152e:	42 9f       	mul	r20, r18
    1530:	c0 01       	movw	r24, r0
    1532:	43 9f       	mul	r20, r19
    1534:	90 0d       	add	r25, r0
    1536:	52 9f       	mul	r21, r18
    1538:	90 0d       	add	r25, r0
    153a:	11 24       	eor	r1, r1
    153c:	e8 0f       	add	r30, r24
    153e:	f9 1f       	adc	r31, r25
    1540:	82 a9       	ldd	r24, Z+50	; 0x32
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	08 95       	ret

00001546 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1546:	e0 91 43 01 	lds	r30, 0x0143
    154a:	f0 91 44 01 	lds	r31, 0x0144
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	25 e1       	ldi	r18, 0x15	; 21
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	ac 01       	movw	r20, r24
    1556:	42 9f       	mul	r20, r18
    1558:	c0 01       	movw	r24, r0
    155a:	43 9f       	mul	r20, r19
    155c:	90 0d       	add	r25, r0
    155e:	52 9f       	mul	r21, r18
    1560:	90 0d       	add	r25, r0
    1562:	11 24       	eor	r1, r1
    1564:	e8 0f       	add	r30, r24
    1566:	f9 1f       	adc	r31, r25
    1568:	82 a9       	ldd	r24, Z+50	; 0x32
    156a:	81 60       	ori	r24, 0x01	; 1
    156c:	82 ab       	std	Z+50, r24	; 0x32
}
    156e:	08 95       	ret

00001570 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1570:	e0 91 43 01 	lds	r30, 0x0143
    1574:	f0 91 44 01 	lds	r31, 0x0144
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	25 e1       	ldi	r18, 0x15	; 21
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	ac 01       	movw	r20, r24
    1580:	42 9f       	mul	r20, r18
    1582:	c0 01       	movw	r24, r0
    1584:	43 9f       	mul	r20, r19
    1586:	90 0d       	add	r25, r0
    1588:	52 9f       	mul	r21, r18
    158a:	90 0d       	add	r25, r0
    158c:	11 24       	eor	r1, r1
    158e:	e8 0f       	add	r30, r24
    1590:	f9 1f       	adc	r31, r25
    1592:	82 a9       	ldd	r24, Z+50	; 0x32
    1594:	8e 7f       	andi	r24, 0xFE	; 254
    1596:	82 ab       	std	Z+50, r24	; 0x32
}
    1598:	08 95       	ret

0000159a <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    159a:	e0 91 43 01 	lds	r30, 0x0143
    159e:	f0 91 44 01 	lds	r31, 0x0144
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	25 e1       	ldi	r18, 0x15	; 21
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	ac 01       	movw	r20, r24
    15aa:	42 9f       	mul	r20, r18
    15ac:	c0 01       	movw	r24, r0
    15ae:	43 9f       	mul	r20, r19
    15b0:	90 0d       	add	r25, r0
    15b2:	52 9f       	mul	r21, r18
    15b4:	90 0d       	add	r25, r0
    15b6:	11 24       	eor	r1, r1
    15b8:	e8 0f       	add	r30, r24
    15ba:	f9 1f       	adc	r31, r25
    15bc:	82 a9       	ldd	r24, Z+50	; 0x32

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    15be:	ff 96       	adiw	r30, 0x3f	; 63
    15c0:	10 82       	st	Z, r1
    15c2:	11 82       	std	Z+1, r1	; 0x01
    15c4:	12 82       	std	Z+2, r1	; 0x02
    15c6:	13 82       	std	Z+3, r1	; 0x03
    15c8:	ff 97       	sbiw	r30, 0x3f	; 63
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    15ca:	13 aa       	std	Z+51, r1	; 0x33
    15cc:	14 aa       	std	Z+52, r1	; 0x34
    15ce:	15 aa       	std	Z+53, r1	; 0x35
    15d0:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    15d2:	17 aa       	std	Z+55, r1	; 0x37
    15d4:	10 ae       	std	Z+56, r1	; 0x38
    15d6:	11 ae       	std	Z+57, r1	; 0x39
    15d8:	12 ae       	std	Z+58, r1	; 0x3a

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    15da:	13 ae       	std	Z+59, r1	; 0x3b
    15dc:	14 ae       	std	Z+60, r1	; 0x3c
    15de:	15 ae       	std	Z+61, r1	; 0x3d
    15e0:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    15e2:	ed 5b       	subi	r30, 0xBD	; 189
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	10 82       	st	Z, r1
    15e8:	11 82       	std	Z+1, r1	; 0x01
    15ea:	12 82       	std	Z+2, r1	; 0x02
    15ec:	13 82       	std	Z+3, r1	; 0x03
    15ee:	e3 54       	subi	r30, 0x43	; 67
    15f0:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    15f2:	80 7e       	andi	r24, 0xE0	; 224
    15f4:	82 ab       	std	Z+50, r24	; 0x32
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    15f6:	08 95       	ret

000015f8 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    15f8:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timebase_UpCounter_Reset>
}
    15fc:	08 95       	ret

000015fe <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    15fe:	e0 91 43 01 	lds	r30, 0x0143
    1602:	f0 91 44 01 	lds	r31, 0x0144
    1606:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1608:	25 e1       	ldi	r18, 0x15	; 21
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	ac 01       	movw	r20, r24
    160e:	42 9f       	mul	r20, r18
    1610:	c0 01       	movw	r24, r0
    1612:	43 9f       	mul	r20, r19
    1614:	90 0d       	add	r25, r0
    1616:	52 9f       	mul	r21, r18
    1618:	90 0d       	add	r25, r0
    161a:	11 24       	eor	r1, r1
    161c:	e8 0f       	add	r30, r24
    161e:	f9 1f       	adc	r31, r25
    1620:	92 a9       	ldd	r25, Z+50	; 0x32
    1622:	89 2f       	mov	r24, r25
    1624:	86 95       	lsr	r24
    1626:	8f 70       	andi	r24, 0x0F	; 15
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	19 f0       	breq	.+6      	; 0x1632 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    162c:	91 7e       	andi	r25, 0xE1	; 225
    162e:	92 60       	ori	r25, 0x02	; 2
    1630:	92 ab       	std	Z+50, r25	; 0x32
    1632:	08 95       	ret

00001634 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1634:	e0 91 43 01 	lds	r30, 0x0143
    1638:	f0 91 44 01 	lds	r31, 0x0144
    163c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    163e:	25 e1       	ldi	r18, 0x15	; 21
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	ac 01       	movw	r20, r24
    1644:	42 9f       	mul	r20, r18
    1646:	c0 01       	movw	r24, r0
    1648:	43 9f       	mul	r20, r19
    164a:	90 0d       	add	r25, r0
    164c:	52 9f       	mul	r21, r18
    164e:	90 0d       	add	r25, r0
    1650:	11 24       	eor	r1, r1
    1652:	e8 0f       	add	r30, r24
    1654:	f9 1f       	adc	r31, r25
    1656:	92 a9       	ldd	r25, Z+50	; 0x32
    1658:	89 2f       	mov	r24, r25
    165a:	86 95       	lsr	r24
    165c:	8f 70       	andi	r24, 0x0F	; 15
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	19 f0       	breq	.+6      	; 0x1668 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1662:	91 7e       	andi	r25, 0xE1	; 225
    1664:	94 60       	ori	r25, 0x04	; 4
    1666:	92 ab       	std	Z+50, r25	; 0x32
    1668:	08 95       	ret

0000166a <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    166a:	a0 91 43 01 	lds	r26, 0x0143
    166e:	b0 91 44 01 	lds	r27, 0x0144
    1672:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1674:	25 e1       	ldi	r18, 0x15	; 21
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	82 9f       	mul	r24, r18
    167a:	f0 01       	movw	r30, r0
    167c:	83 9f       	mul	r24, r19
    167e:	f0 0d       	add	r31, r0
    1680:	92 9f       	mul	r25, r18
    1682:	f0 0d       	add	r31, r0
    1684:	11 24       	eor	r1, r1
    1686:	ea 0f       	add	r30, r26
    1688:	fb 1f       	adc	r31, r27
    168a:	82 a9       	ldd	r24, Z+50	; 0x32
    168c:	86 95       	lsr	r24
    168e:	8f 70       	andi	r24, 0x0F	; 15
    1690:	29 f5       	brne	.+74     	; 0x16dc <Timebase_UpCounter_Set_Securely+0x72>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1692:	ff 96       	adiw	r30, 0x3f	; 63
    1694:	10 82       	st	Z, r1
    1696:	11 82       	std	Z+1, r1	; 0x01
    1698:	12 82       	std	Z+2, r1	; 0x02
    169a:	13 82       	std	Z+3, r1	; 0x03
    169c:	ff 97       	sbiw	r30, 0x3f	; 63

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    169e:	13 ae       	std	Z+59, r1	; 0x3b
    16a0:	14 ae       	std	Z+60, r1	; 0x3c
    16a2:	15 ae       	std	Z+61, r1	; 0x3d
    16a4:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    16a6:	47 ab       	std	Z+55, r20	; 0x37
    16a8:	50 af       	std	Z+56, r21	; 0x38
    16aa:	61 af       	std	Z+57, r22	; 0x39
    16ac:	72 af       	std	Z+58, r23	; 0x3a
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16ae:	19 96       	adiw	r26, 0x09	; 9
    16b0:	8d 91       	ld	r24, X+
    16b2:	9d 91       	ld	r25, X+
    16b4:	0d 90       	ld	r0, X+
    16b6:	bc 91       	ld	r27, X
    16b8:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    16ba:	84 0f       	add	r24, r20
    16bc:	95 1f       	adc	r25, r21
    16be:	a6 1f       	adc	r26, r22
    16c0:	b7 1f       	adc	r27, r23
    16c2:	83 ab       	std	Z+51, r24	; 0x33
    16c4:	94 ab       	std	Z+52, r25	; 0x34
    16c6:	a5 ab       	std	Z+53, r26	; 0x35
    16c8:	b6 ab       	std	Z+54, r27	; 0x36
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    16ca:	92 a9       	ldd	r25, Z+50	; 0x32
    16cc:	89 2f       	mov	r24, r25
    16ce:	86 95       	lsr	r24
    16d0:	8f 70       	andi	r24, 0x0F	; 15
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	19 f0       	breq	.+6      	; 0x16dc <Timebase_UpCounter_Set_Securely+0x72>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    16d6:	91 7e       	andi	r25, 0xE1	; 225
    16d8:	92 60       	ori	r25, 0x02	; 2
    16da:	92 ab       	std	Z+50, r25	; 0x32
    16dc:	08 95       	ret

000016de <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	d8 2e       	mov	r13, r24
    16ea:	7a 01       	movw	r14, r20
    16ec:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    16ee:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    16f2:	8d 2d       	mov	r24, r13
    16f4:	b8 01       	movw	r22, r16
    16f6:	a7 01       	movw	r20, r14
    16f8:	0e 94 35 0b 	call	0x166a	; 0x166a <Timebase_UpCounter_Set_Securely>
} 
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	ff 90       	pop	r15
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	08 95       	ret

00001708 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    1708:	ef 92       	push	r14
    170a:	ff 92       	push	r15
    170c:	0f 93       	push	r16
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1714:	60 91 43 01 	lds	r22, 0x0143
    1718:	70 91 44 01 	lds	r23, 0x0144
    171c:	08 2f       	mov	r16, r24
    171e:	10 e0       	ldi	r17, 0x00	; 0
    1720:	85 e1       	ldi	r24, 0x15	; 21
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	08 9f       	mul	r16, r24
    1726:	f0 01       	movw	r30, r0
    1728:	09 9f       	mul	r16, r25
    172a:	f0 0d       	add	r31, r0
    172c:	18 9f       	mul	r17, r24
    172e:	f0 0d       	add	r31, r0
    1730:	11 24       	eor	r1, r1
    1732:	e6 0f       	add	r30, r22
    1734:	f7 1f       	adc	r31, r23
    1736:	82 a9       	ldd	r24, Z+50	; 0x32
    1738:	86 95       	lsr	r24
    173a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	09 f0       	breq	.+2      	; 0x1742 <Timebase_UpCounter_Update+0x3a>
    1740:	7a c0       	rjmp	.+244    	; 0x1836 <Timebase_UpCounter_Update+0x12e>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1742:	eb 01       	movw	r28, r22
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	ab 85       	ldd	r26, Y+11	; 0x0b
    174a:	bc 85       	ldd	r27, Y+12	; 0x0c

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    174c:	23 a9       	ldd	r18, Z+51	; 0x33
    174e:	34 a9       	ldd	r19, Z+52	; 0x34
    1750:	45 a9       	ldd	r20, Z+53	; 0x35
    1752:	56 a9       	ldd	r21, Z+54	; 0x36
    1754:	28 1b       	sub	r18, r24
    1756:	39 0b       	sbc	r19, r25
    1758:	4a 0b       	sbc	r20, r26
    175a:	5b 0b       	sbc	r21, r27
    175c:	57 ff       	sbrs	r21, 7
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <Timebase_UpCounter_Update+0x60>
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1768:	85 e1       	ldi	r24, 0x15	; 21
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	08 9f       	mul	r16, r24
    176e:	f0 01       	movw	r30, r0
    1770:	09 9f       	mul	r16, r25
    1772:	f0 0d       	add	r31, r0
    1774:	18 9f       	mul	r17, r24
    1776:	f0 0d       	add	r31, r0
    1778:	11 24       	eor	r1, r1
    177a:	e6 0f       	add	r30, r22
    177c:	f7 1f       	adc	r31, r23
    177e:	23 af       	std	Z+59, r18	; 0x3b
    1780:	34 af       	std	Z+60, r19	; 0x3c
    1782:	45 af       	std	Z+61, r20	; 0x3d
    1784:	56 af       	std	Z+62, r21	; 0x3e
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    1786:	87 a9       	ldd	r24, Z+55	; 0x37
    1788:	90 ad       	ldd	r25, Z+56	; 0x38
    178a:	a1 ad       	ldd	r26, Z+57	; 0x39
    178c:	b2 ad       	ldd	r27, Z+58	; 0x3a

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    178e:	ff 96       	adiw	r30, 0x3f	; 63
    1790:	82 1b       	sub	r24, r18
    1792:	93 0b       	sbc	r25, r19
    1794:	a4 0b       	sbc	r26, r20
    1796:	b5 0b       	sbc	r27, r21
    1798:	b7 ff       	sbrs	r27, 7
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <Timebase_UpCounter_Update+0x9c>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	a0 e0       	ldi	r26, 0x00	; 0
    17a2:	b0 e0       	ldi	r27, 0x00	; 0
    17a4:	80 83       	st	Z, r24
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	a2 83       	std	Z+2, r26	; 0x02
    17aa:	b3 83       	std	Z+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    17ac:	85 e1       	ldi	r24, 0x15	; 21
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	08 9f       	mul	r16, r24
    17b2:	e0 01       	movw	r28, r0
    17b4:	09 9f       	mul	r16, r25
    17b6:	d0 0d       	add	r29, r0
    17b8:	18 9f       	mul	r17, r24
    17ba:	d0 0d       	add	r29, r0
    17bc:	11 24       	eor	r1, r1
    17be:	c6 0f       	add	r28, r22
    17c0:	d7 1f       	adc	r29, r23
    17c2:	8b ad       	ldd	r24, Y+59	; 0x3b
    17c4:	9c ad       	ldd	r25, Y+60	; 0x3c
    17c6:	ad ad       	ldd	r26, Y+61	; 0x3d
    17c8:	be ad       	ldd	r27, Y+62	; 0x3e
    17ca:	18 16       	cp	r1, r24
    17cc:	19 06       	cpc	r1, r25
    17ce:	1a 06       	cpc	r1, r26
    17d0:	1b 06       	cpc	r1, r27
    17d2:	0c f4       	brge	.+2      	; 0x17d6 <Timebase_UpCounter_Update+0xce>
    17d4:	56 c0       	rjmp	.+172    	; 0x1882 <Timebase_UpCounter_Update+0x17a>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    17d6:	1b aa       	std	Y+51, r1	; 0x33
    17d8:	1c aa       	std	Y+52, r1	; 0x34
    17da:	1d aa       	std	Y+53, r1	; 0x35
    17dc:	1e aa       	std	Y+54, r1	; 0x36

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    17de:	1b ae       	std	Y+59, r1	; 0x3b
    17e0:	1c ae       	std	Y+60, r1	; 0x3c
    17e2:	1d ae       	std	Y+61, r1	; 0x3d
    17e4:	1e ae       	std	Y+62, r1	; 0x3e
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    17e6:	fe 01       	movw	r30, r28
    17e8:	f7 96       	adiw	r30, 0x37	; 55

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    17ea:	8f e3       	ldi	r24, 0x3F	; 63
    17ec:	e8 2e       	mov	r14, r24
    17ee:	f1 2c       	mov	r15, r1
    17f0:	ec 0e       	add	r14, r28
    17f2:	fd 1e       	adc	r15, r29
    17f4:	2f a9       	ldd	r18, Y+55	; 0x37
    17f6:	31 81       	ldd	r19, Z+1	; 0x01
    17f8:	42 81       	ldd	r20, Z+2	; 0x02
    17fa:	53 81       	ldd	r21, Z+3	; 0x03
    17fc:	c9 01       	movw	r24, r18
    17fe:	da 01       	movw	r26, r20
    1800:	b7 ff       	sbrs	r27, 7
    1802:	04 c0       	rjmp	.+8      	; 0x180c <Timebase_UpCounter_Update+0x104>
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	f7 01       	movw	r30, r14
    180e:	80 83       	st	Z, r24
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	a2 83       	std	Z+2, r26	; 0x02
    1814:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1816:	85 e1       	ldi	r24, 0x15	; 21
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	08 9f       	mul	r16, r24
    181c:	f0 01       	movw	r30, r0
    181e:	09 9f       	mul	r16, r25
    1820:	f0 0d       	add	r31, r0
    1822:	18 9f       	mul	r17, r24
    1824:	f0 0d       	add	r31, r0
    1826:	11 24       	eor	r1, r1
    1828:	e6 0f       	add	r30, r22
    182a:	f7 1f       	adc	r31, r23
    182c:	82 a9       	ldd	r24, Z+50	; 0x32
    182e:	81 7e       	andi	r24, 0xE1	; 225
    1830:	88 60       	ori	r24, 0x08	; 8
    1832:	82 ab       	std	Z+50, r24	; 0x32
    1834:	26 c0       	rjmp	.+76     	; 0x1882 <Timebase_UpCounter_Update+0x17a>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	21 f5       	brne	.+72     	; 0x1882 <Timebase_UpCounter_Update+0x17a>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    183a:	eb 01       	movw	r28, r22
    183c:	89 85       	ldd	r24, Y+9	; 0x09
    183e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1840:	ab 85       	ldd	r26, Y+11	; 0x0b
    1842:	bc 85       	ldd	r27, Y+12	; 0x0c
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1844:	23 ad       	ldd	r18, Z+59	; 0x3b
    1846:	34 ad       	ldd	r19, Z+60	; 0x3c
    1848:	45 ad       	ldd	r20, Z+61	; 0x3d
    184a:	56 ad       	ldd	r21, Z+62	; 0x3e
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	a4 1f       	adc	r26, r20
    1852:	b5 1f       	adc	r27, r21
    1854:	83 ab       	std	Z+51, r24	; 0x33
    1856:	94 ab       	std	Z+52, r25	; 0x34
    1858:	a5 ab       	std	Z+53, r26	; 0x35
    185a:	b6 ab       	std	Z+54, r27	; 0x36
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    185c:	87 a9       	ldd	r24, Z+55	; 0x37
    185e:	90 ad       	ldd	r25, Z+56	; 0x38
    1860:	a1 ad       	ldd	r26, Z+57	; 0x39
    1862:	b2 ad       	ldd	r27, Z+58	; 0x3a

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1864:	ff 96       	adiw	r30, 0x3f	; 63
    1866:	82 1b       	sub	r24, r18
    1868:	93 0b       	sbc	r25, r19
    186a:	a4 0b       	sbc	r26, r20
    186c:	b5 0b       	sbc	r27, r21
    186e:	b7 ff       	sbrs	r27, 7
    1870:	04 c0       	rjmp	.+8      	; 0x187a <Timebase_UpCounter_Update+0x172>
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	a0 e0       	ldi	r26, 0x00	; 0
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	80 83       	st	Z, r24
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	08 95       	ret

00001890 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	e0 91 43 01 	lds	r30, 0x0143
    1896:	f0 91 44 01 	lds	r31, 0x0144
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	25 e1       	ldi	r18, 0x15	; 21
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	bc 01       	movw	r22, r24
    18a2:	62 9f       	mul	r22, r18
    18a4:	c0 01       	movw	r24, r0
    18a6:	63 9f       	mul	r22, r19
    18a8:	90 0d       	add	r25, r0
    18aa:	72 9f       	mul	r23, r18
    18ac:	90 0d       	add	r25, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	e8 0f       	add	r30, r24
    18b2:	f9 1f       	adc	r31, r25
    18b4:	82 a9       	ldd	r24, Z+50	; 0x32
    18b6:	86 95       	lsr	r24
    18b8:	8f 70       	andi	r24, 0x0F	; 15
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <Timebase_UpCounter_Expired+0x30>
    18be:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    18c0:	84 2f       	mov	r24, r20
    18c2:	08 95       	ret

000018c4 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    18c4:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    18c6:	e0 91 43 01 	lds	r30, 0x0143
    18ca:	f0 91 44 01 	lds	r31, 0x0144
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	85 e1       	ldi	r24, 0x15	; 21
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	bc 01       	movw	r22, r24
    18d8:	26 9f       	mul	r18, r22
    18da:	c0 01       	movw	r24, r0
    18dc:	27 9f       	mul	r18, r23
    18de:	90 0d       	add	r25, r0
    18e0:	36 9f       	mul	r19, r22
    18e2:	90 0d       	add	r25, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	e8 0f       	add	r30, r24
    18e8:	f9 1f       	adc	r31, r25
    18ea:	82 a9       	ldd	r24, Z+50	; 0x32
    18ec:	86 95       	lsr	r24
    18ee:	8f 70       	andi	r24, 0x0F	; 15
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	11 f0       	breq	.+4      	; 0x18f8 <Timebase_UpCounter_Expired_Event+0x34>
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    18f8:	84 2f       	mov	r24, r20
    18fa:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timebase_UpCounter_Reset>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1900:	08 95       	ret

00001902 <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1906:	c0 91 43 01 	lds	r28, 0x0143
    190a:	d0 91 44 01 	lds	r29, 0x0144
    190e:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1910:	25 e1       	ldi	r18, 0x15	; 21
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	e2 9f       	mul	r30, r18
    1918:	c0 01       	movw	r24, r0
    191a:	e3 9f       	mul	r30, r19
    191c:	90 0d       	add	r25, r0
    191e:	f2 9f       	mul	r31, r18
    1920:	90 0d       	add	r25, r0
    1922:	11 24       	eor	r1, r1
    1924:	c8 0f       	add	r28, r24
    1926:	d9 1f       	adc	r29, r25
    1928:	8a a9       	ldd	r24, Y+50	; 0x32
    192a:	80 fd       	sbrc	r24, 0
    192c:	14 c0       	rjmp	.+40     	; 0x1956 <Timebase_UpCounter_Set_Period_Value_Securely+0x54>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    192e:	fe 01       	movw	r30, r28
    1930:	ed 5b       	subi	r30, 0xBD	; 189
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	ef 96       	adiw	r28, 0x3f	; 63
    1936:	88 81       	ld	r24, Y
    1938:	99 81       	ldd	r25, Y+1	; 0x01
    193a:	aa 81       	ldd	r26, Y+2	; 0x02
    193c:	bb 81       	ldd	r27, Y+3	; 0x03
    193e:	ef 97       	sbiw	r28, 0x3f	; 63
    1940:	84 0f       	add	r24, r20
    1942:	95 1f       	adc	r25, r21
    1944:	a6 1f       	adc	r26, r22
    1946:	b7 1f       	adc	r27, r23
    1948:	80 83       	st	Z, r24
    194a:	91 83       	std	Z+1, r25	; 0x01
    194c:	a2 83       	std	Z+2, r26	; 0x02
    194e:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1950:	8a a9       	ldd	r24, Y+50	; 0x32
    1952:	81 60       	ori	r24, 0x01	; 1
    1954:	8a ab       	std	Y+50, r24	; 0x32
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    195c:	e0 91 43 01 	lds	r30, 0x0143
    1960:	f0 91 44 01 	lds	r31, 0x0144
    1964:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1966:	25 e1       	ldi	r18, 0x15	; 21
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	ac 01       	movw	r20, r24
    196c:	42 9f       	mul	r20, r18
    196e:	c0 01       	movw	r24, r0
    1970:	43 9f       	mul	r20, r19
    1972:	90 0d       	add	r25, r0
    1974:	52 9f       	mul	r21, r18
    1976:	90 0d       	add	r25, r0
    1978:	11 24       	eor	r1, r1
    197a:	e8 0f       	add	r30, r24
    197c:	f9 1f       	adc	r31, r25
    197e:	df 01       	movw	r26, r30
    1980:	df 96       	adiw	r26, 0x3f	; 63
    1982:	ed 5b       	subi	r30, 0xBD	; 189
    1984:	ff 4f       	sbci	r31, 0xFF	; 255
    1986:	20 81       	ld	r18, Z
    1988:	31 81       	ldd	r19, Z+1	; 0x01
    198a:	42 81       	ldd	r20, Z+2	; 0x02
    198c:	53 81       	ldd	r21, Z+3	; 0x03
    198e:	8d 91       	ld	r24, X+
    1990:	9d 91       	ld	r25, X+
    1992:	0d 90       	ld	r0, X+
    1994:	bc 91       	ld	r27, X
    1996:	a0 2d       	mov	r26, r0
    1998:	28 1b       	sub	r18, r24
    199a:	39 0b       	sbc	r19, r25
    199c:	4a 0b       	sbc	r20, r26
    199e:	5b 0b       	sbc	r21, r27
    19a0:	57 ff       	sbrs	r21, 7
    19a2:	04 c0       	rjmp	.+8      	; 0x19ac <Timebase_UpCounter_Get_Remaining_Period_Value+0x50>
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e0       	ldi	r20, 0x00	; 0
    19aa:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    19ac:	b9 01       	movw	r22, r18
    19ae:	ca 01       	movw	r24, r20
    19b0:	08 95       	ret

000019b2 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    19b6:	c0 91 43 01 	lds	r28, 0x0143
    19ba:	d0 91 44 01 	lds	r29, 0x0144
    19be:	68 2f       	mov	r22, r24
    19c0:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    19c2:	85 e1       	ldi	r24, 0x15	; 21
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	68 9f       	mul	r22, r24
    19c8:	f0 01       	movw	r30, r0
    19ca:	69 9f       	mul	r22, r25
    19cc:	f0 0d       	add	r31, r0
    19ce:	78 9f       	mul	r23, r24
    19d0:	f0 0d       	add	r31, r0
    19d2:	11 24       	eor	r1, r1
    19d4:	ec 0f       	add	r30, r28
    19d6:	fd 1f       	adc	r31, r29
    19d8:	df 01       	movw	r26, r30
    19da:	df 96       	adiw	r26, 0x3f	; 63
    19dc:	ed 5b       	subi	r30, 0xBD	; 189
    19de:	ff 4f       	sbci	r31, 0xFF	; 255
    19e0:	20 81       	ld	r18, Z
    19e2:	31 81       	ldd	r19, Z+1	; 0x01
    19e4:	42 81       	ldd	r20, Z+2	; 0x02
    19e6:	53 81       	ldd	r21, Z+3	; 0x03
    19e8:	8d 91       	ld	r24, X+
    19ea:	9d 91       	ld	r25, X+
    19ec:	0d 90       	ld	r0, X+
    19ee:	bc 91       	ld	r27, X
    19f0:	a0 2d       	mov	r26, r0
    19f2:	28 1b       	sub	r18, r24
    19f4:	39 0b       	sbc	r19, r25
    19f6:	4a 0b       	sbc	r20, r26
    19f8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    19fa:	57 fd       	sbrc	r21, 7
    19fc:	07 c0       	rjmp	.+14     	; 0x1a0c <Timebase_UpCounter_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    19fe:	21 15       	cp	r18, r1
    1a00:	31 05       	cpc	r19, r1
    1a02:	41 05       	cpc	r20, r1
    1a04:	51 05       	cpc	r21, r1
    1a06:	11 f0       	breq	.+4      	; 0x1a0c <Timebase_UpCounter_Period_Value_Expired+0x5a>
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	12 c0       	rjmp	.+36     	; 0x1a30 <Timebase_UpCounter_Period_Value_Expired+0x7e>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	85 e1       	ldi	r24, 0x15	; 21
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	ac 01       	movw	r20, r24
    1a14:	64 9f       	mul	r22, r20
    1a16:	c0 01       	movw	r24, r0
    1a18:	65 9f       	mul	r22, r21
    1a1a:	90 0d       	add	r25, r0
    1a1c:	74 9f       	mul	r23, r20
    1a1e:	90 0d       	add	r25, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	c8 0f       	add	r28, r24
    1a24:	d9 1f       	adc	r29, r25
    1a26:	8a a9       	ldd	r24, Y+50	; 0x32
    1a28:	80 ff       	sbrs	r24, 0
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a30:	82 2f       	mov	r24, r18
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	08 95       	ret

00001a38 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1a38:	1f 93       	push	r17
    1a3a:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1a3c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Timebase_UpCounter_Period_Value_Expired>
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1a44:	80 e0       	ldi	r24, 0x00	; 0
    1a46:	16 c0       	rjmp	.+44     	; 0x1a74 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a48:	e0 91 43 01 	lds	r30, 0x0143
    1a4c:	f0 91 44 01 	lds	r31, 0x0144
    1a50:	21 2f       	mov	r18, r17
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	85 e1       	ldi	r24, 0x15	; 21
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	ac 01       	movw	r20, r24
    1a5a:	24 9f       	mul	r18, r20
    1a5c:	c0 01       	movw	r24, r0
    1a5e:	25 9f       	mul	r18, r21
    1a60:	90 0d       	add	r25, r0
    1a62:	34 9f       	mul	r19, r20
    1a64:	90 0d       	add	r25, r0
    1a66:	11 24       	eor	r1, r1
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	82 a9       	ldd	r24, Z+50	; 0x32
    1a6e:	8e 7f       	andi	r24, 0xFE	; 254
    1a70:	82 ab       	std	Z+50, r24	; 0x32
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a74:	1f 91       	pop	r17
    1a76:	08 95       	ret

00001a78 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	0e 94 84 0b 	call	0x1708	; 0x1708 <Timebase_UpCounter_Update>
  }
}
    1a7e:	08 95       	ret

00001a80 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timebase_UpCounter_Reset>
  }
}
    1a86:	08 95       	ret

00001a88 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1a88:	e0 91 43 01 	lds	r30, 0x0143
    1a8c:	f0 91 44 01 	lds	r31, 0x0144
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9c 01       	movw	r18, r24
    1a94:	44 e0       	ldi	r20, 0x04	; 4
    1a96:	22 0f       	add	r18, r18
    1a98:	33 1f       	adc	r19, r19
    1a9a:	4a 95       	dec	r20
    1a9c:	e1 f7       	brne	.-8      	; 0x1a96 <Timebase_DownCounter_SS_Get_Status+0xe>
    1a9e:	28 0f       	add	r18, r24
    1aa0:	39 1f       	adc	r19, r25
    1aa2:	e2 0f       	add	r30, r18
    1aa4:	f3 1f       	adc	r31, r19
    1aa6:	e9 5b       	subi	r30, 0xB9	; 185
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	80 81       	ld	r24, Z
    1aac:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1aae:	8f 70       	andi	r24, 0x0F	; 15
    1ab0:	08 95       	ret

00001ab2 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ab2:	e0 91 43 01 	lds	r30, 0x0143
    1ab6:	f0 91 44 01 	lds	r31, 0x0144
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	9c 01       	movw	r18, r24
    1abe:	54 e0       	ldi	r21, 0x04	; 4
    1ac0:	22 0f       	add	r18, r18
    1ac2:	33 1f       	adc	r19, r19
    1ac4:	5a 95       	dec	r21
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <Timebase_DownCounter_SS_Set_Status+0xe>
    1ac8:	28 0f       	add	r18, r24
    1aca:	39 1f       	adc	r19, r25
    1acc:	e2 0f       	add	r30, r18
    1ace:	f3 1f       	adc	r31, r19
    1ad0:	e9 5b       	subi	r30, 0xB9	; 185
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	6f 70       	andi	r22, 0x0F	; 15
    1ad6:	66 0f       	add	r22, r22
    1ad8:	80 81       	ld	r24, Z
    1ada:	81 7e       	andi	r24, 0xE1	; 225
    1adc:	86 2b       	or	r24, r22
    1ade:	80 83       	st	Z, r24
}
    1ae0:	08 95       	ret

00001ae2 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1ae2:	e0 91 43 01 	lds	r30, 0x0143
    1ae6:	f0 91 44 01 	lds	r31, 0x0144
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c 01       	movw	r18, r24
    1aee:	64 e0       	ldi	r22, 0x04	; 4
    1af0:	22 0f       	add	r18, r18
    1af2:	33 1f       	adc	r19, r19
    1af4:	6a 95       	dec	r22
    1af6:	e1 f7       	brne	.-8      	; 0x1af0 <Timebase_DownCounter_SS_Get_Value+0xe>
    1af8:	28 0f       	add	r18, r24
    1afa:	39 1f       	adc	r19, r25
    1afc:	e2 0f       	add	r30, r18
    1afe:	f3 1f       	adc	r31, r19
    1b00:	e0 5b       	subi	r30, 0xB0	; 176
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	60 81       	ld	r22, Z
    1b06:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	08 95       	ret

00001b0e <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1b0e:	e0 91 43 01 	lds	r30, 0x0143
    1b12:	f0 91 44 01 	lds	r31, 0x0144
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 01       	movw	r18, r24
    1b1a:	a4 e0       	ldi	r26, 0x04	; 4
    1b1c:	22 0f       	add	r18, r18
    1b1e:	33 1f       	adc	r19, r19
    1b20:	aa 95       	dec	r26
    1b22:	e1 f7       	brne	.-8      	; 0x1b1c <Timebase_DownCounter_SS_Set_Value+0xe>
    1b24:	28 0f       	add	r18, r24
    1b26:	39 1f       	adc	r19, r25
    1b28:	e2 0f       	add	r30, r18
    1b2a:	f3 1f       	adc	r31, r19
    1b2c:	e0 5b       	subi	r30, 0xB0	; 176
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	40 83       	st	Z, r20
    1b32:	51 83       	std	Z+1, r21	; 0x01
    1b34:	62 83       	std	Z+2, r22	; 0x02
    1b36:	73 83       	std	Z+3, r23	; 0x03
}
    1b38:	08 95       	ret

00001b3a <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1b3a:	e0 91 43 01 	lds	r30, 0x0143
    1b3e:	f0 91 44 01 	lds	r31, 0x0144
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	9c 01       	movw	r18, r24
    1b46:	b4 e0       	ldi	r27, 0x04	; 4
    1b48:	22 0f       	add	r18, r18
    1b4a:	33 1f       	adc	r19, r19
    1b4c:	ba 95       	dec	r27
    1b4e:	e1 f7       	brne	.-8      	; 0x1b48 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1b50:	28 0f       	add	r18, r24
    1b52:	39 1f       	adc	r19, r25
    1b54:	e2 0f       	add	r30, r18
    1b56:	f3 1f       	adc	r31, r19
    1b58:	e8 5b       	subi	r30, 0xB8	; 184
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	08 95       	ret

00001b66 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1b66:	e0 91 43 01 	lds	r30, 0x0143
    1b6a:	f0 91 44 01 	lds	r31, 0x0144
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	9c 01       	movw	r18, r24
    1b72:	44 e0       	ldi	r20, 0x04	; 4
    1b74:	22 0f       	add	r18, r18
    1b76:	33 1f       	adc	r19, r19
    1b78:	4a 95       	dec	r20
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1b7c:	28 0f       	add	r18, r24
    1b7e:	39 1f       	adc	r19, r25
    1b80:	e2 0f       	add	r30, r18
    1b82:	f3 1f       	adc	r31, r19
    1b84:	e4 5b       	subi	r30, 0xB4	; 180
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	08 95       	ret

00001b92 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1b92:	e0 91 43 01 	lds	r30, 0x0143
    1b96:	f0 91 44 01 	lds	r31, 0x0144
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 01       	movw	r18, r24
    1b9e:	a4 e0       	ldi	r26, 0x04	; 4
    1ba0:	22 0f       	add	r18, r18
    1ba2:	33 1f       	adc	r19, r19
    1ba4:	aa 95       	dec	r26
    1ba6:	e1 f7       	brne	.-8      	; 0x1ba0 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1ba8:	28 0f       	add	r18, r24
    1baa:	39 1f       	adc	r19, r25
    1bac:	e2 0f       	add	r30, r18
    1bae:	f3 1f       	adc	r31, r19
    1bb0:	e8 5b       	subi	r30, 0xB8	; 184
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	40 83       	st	Z, r20
    1bb6:	51 83       	std	Z+1, r21	; 0x01
    1bb8:	62 83       	std	Z+2, r22	; 0x02
    1bba:	73 83       	std	Z+3, r23	; 0x03
}
    1bbc:	08 95       	ret

00001bbe <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1bbe:	e0 91 43 01 	lds	r30, 0x0143
    1bc2:	f0 91 44 01 	lds	r31, 0x0144
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 01       	movw	r18, r24
    1bca:	b4 e0       	ldi	r27, 0x04	; 4
    1bcc:	22 0f       	add	r18, r18
    1bce:	33 1f       	adc	r19, r19
    1bd0:	ba 95       	dec	r27
    1bd2:	e1 f7       	brne	.-8      	; 0x1bcc <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1bd4:	28 0f       	add	r18, r24
    1bd6:	39 1f       	adc	r19, r25
    1bd8:	e2 0f       	add	r30, r18
    1bda:	f3 1f       	adc	r31, r19
    1bdc:	e4 5b       	subi	r30, 0xB4	; 180
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	40 83       	st	Z, r20
    1be2:	51 83       	std	Z+1, r21	; 0x01
    1be4:	62 83       	std	Z+2, r22	; 0x02
    1be6:	73 83       	std	Z+3, r23	; 0x03
}
    1be8:	08 95       	ret

00001bea <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1bea:	e0 91 43 01 	lds	r30, 0x0143
    1bee:	f0 91 44 01 	lds	r31, 0x0144
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	9c 01       	movw	r18, r24
    1bf6:	44 e0       	ldi	r20, 0x04	; 4
    1bf8:	22 0f       	add	r18, r18
    1bfa:	33 1f       	adc	r19, r19
    1bfc:	4a 95       	dec	r20
    1bfe:	e1 f7       	brne	.-8      	; 0x1bf8 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1c00:	28 0f       	add	r18, r24
    1c02:	39 1f       	adc	r19, r25
    1c04:	e2 0f       	add	r30, r18
    1c06:	f3 1f       	adc	r31, r19
    1c08:	ec 5a       	subi	r30, 0xAC	; 172
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	60 81       	ld	r22, Z
    1c0e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	93 81       	ldd	r25, Z+3	; 0x03
    1c14:	08 95       	ret

00001c16 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1c16:	e0 91 43 01 	lds	r30, 0x0143
    1c1a:	f0 91 44 01 	lds	r31, 0x0144
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1c22:	77 ff       	sbrs	r23, 7
    1c24:	11 c0       	rjmp	.+34     	; 0x1c48 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1c26:	c9 01       	movw	r24, r18
    1c28:	b4 e0       	ldi	r27, 0x04	; 4
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	ba 95       	dec	r27
    1c30:	e1 f7       	brne	.-8      	; 0x1c2a <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1c32:	82 0f       	add	r24, r18
    1c34:	93 1f       	adc	r25, r19
    1c36:	e8 0f       	add	r30, r24
    1c38:	f9 1f       	adc	r31, r25
    1c3a:	ec 5a       	subi	r30, 0xAC	; 172
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	10 82       	st	Z, r1
    1c40:	11 82       	std	Z+1, r1	; 0x01
    1c42:	12 82       	std	Z+2, r1	; 0x02
    1c44:	13 82       	std	Z+3, r1	; 0x03
    1c46:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1c48:	c9 01       	movw	r24, r18
    1c4a:	a4 e0       	ldi	r26, 0x04	; 4
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	aa 95       	dec	r26
    1c52:	e1 f7       	brne	.-8      	; 0x1c4c <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1c54:	82 0f       	add	r24, r18
    1c56:	93 1f       	adc	r25, r19
    1c58:	e8 0f       	add	r30, r24
    1c5a:	f9 1f       	adc	r31, r25
    1c5c:	ec 5a       	subi	r30, 0xAC	; 172
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	40 83       	st	Z, r20
    1c62:	51 83       	std	Z+1, r21	; 0x01
    1c64:	62 83       	std	Z+2, r22	; 0x02
    1c66:	73 83       	std	Z+3, r23	; 0x03
    1c68:	08 95       	ret

00001c6a <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1c6a:	e0 91 43 01 	lds	r30, 0x0143
    1c6e:	f0 91 44 01 	lds	r31, 0x0144
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9c 01       	movw	r18, r24
    1c76:	44 e0       	ldi	r20, 0x04	; 4
    1c78:	22 0f       	add	r18, r18
    1c7a:	33 1f       	adc	r19, r19
    1c7c:	4a 95       	dec	r20
    1c7e:	e1 f7       	brne	.-8      	; 0x1c78 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1c80:	28 0f       	add	r18, r24
    1c82:	39 1f       	adc	r19, r25
    1c84:	e2 0f       	add	r30, r18
    1c86:	f3 1f       	adc	r31, r19
    1c88:	e9 5b       	subi	r30, 0xB9	; 185
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1c8e:	81 70       	andi	r24, 0x01	; 1
    1c90:	08 95       	ret

00001c92 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1c92:	e0 91 43 01 	lds	r30, 0x0143
    1c96:	f0 91 44 01 	lds	r31, 0x0144
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9c 01       	movw	r18, r24
    1c9e:	54 e0       	ldi	r21, 0x04	; 4
    1ca0:	22 0f       	add	r18, r18
    1ca2:	33 1f       	adc	r19, r19
    1ca4:	5a 95       	dec	r21
    1ca6:	e1 f7       	brne	.-8      	; 0x1ca0 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1ca8:	28 0f       	add	r18, r24
    1caa:	39 1f       	adc	r19, r25
    1cac:	e2 0f       	add	r30, r18
    1cae:	f3 1f       	adc	r31, r19
    1cb0:	e9 5b       	subi	r30, 0xB9	; 185
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	81 60       	ori	r24, 0x01	; 1
    1cb8:	80 83       	st	Z, r24
}
    1cba:	08 95       	ret

00001cbc <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1cbc:	e0 91 43 01 	lds	r30, 0x0143
    1cc0:	f0 91 44 01 	lds	r31, 0x0144
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 01       	movw	r18, r24
    1cc8:	64 e0       	ldi	r22, 0x04	; 4
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	6a 95       	dec	r22
    1cd0:	e1 f7       	brne	.-8      	; 0x1cca <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1cd2:	28 0f       	add	r18, r24
    1cd4:	39 1f       	adc	r19, r25
    1cd6:	e2 0f       	add	r30, r18
    1cd8:	f3 1f       	adc	r31, r19
    1cda:	e9 5b       	subi	r30, 0xB9	; 185
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 81       	ld	r24, Z
    1ce0:	8e 7f       	andi	r24, 0xFE	; 254
    1ce2:	80 83       	st	Z, r24
}
    1ce4:	08 95       	ret

00001ce6 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1ce6:	e0 91 43 01 	lds	r30, 0x0143
    1cea:	f0 91 44 01 	lds	r31, 0x0144
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	74 e0       	ldi	r23, 0x04	; 4
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	7a 95       	dec	r23
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <Timebase_DownCounter_SS_Reset+0xe>
    1cfc:	28 0f       	add	r18, r24
    1cfe:	39 1f       	adc	r19, r25
    1d00:	e2 0f       	add	r30, r18
    1d02:	f3 1f       	adc	r31, r19
    1d04:	e4 5b       	subi	r30, 0xB4	; 180
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	10 82       	st	Z, r1
    1d0a:	11 82       	std	Z+1, r1	; 0x01
    1d0c:	12 82       	std	Z+2, r1	; 0x02
    1d0e:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1d10:	12 92       	st	-Z, r1
    1d12:	12 92       	st	-Z, r1
    1d14:	12 92       	st	-Z, r1
    1d16:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1d18:	38 96       	adiw	r30, 0x08	; 8
    1d1a:	10 82       	st	Z, r1
    1d1c:	11 82       	std	Z+1, r1	; 0x01
    1d1e:	12 82       	std	Z+2, r1	; 0x02
    1d20:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1d22:	39 97       	sbiw	r30, 0x09	; 9
    1d24:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1d26:	80 7e       	andi	r24, 0xE0	; 224
    1d28:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1d2a:	08 95       	ret

00001d2c <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1d2c:	e0 91 43 01 	lds	r30, 0x0143
    1d30:	f0 91 44 01 	lds	r31, 0x0144
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9c 01       	movw	r18, r24
    1d38:	a4 e0       	ldi	r26, 0x04	; 4
    1d3a:	22 0f       	add	r18, r18
    1d3c:	33 1f       	adc	r19, r19
    1d3e:	aa 95       	dec	r26
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1d42:	28 0f       	add	r18, r24
    1d44:	39 1f       	adc	r19, r25
    1d46:	e2 0f       	add	r30, r18
    1d48:	f3 1f       	adc	r31, r19
    1d4a:	e4 5b       	subi	r30, 0xB4	; 180
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	10 82       	st	Z, r1
    1d50:	11 82       	std	Z+1, r1	; 0x01
    1d52:	12 82       	std	Z+2, r1	; 0x02
    1d54:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1d56:	12 92       	st	-Z, r1
    1d58:	12 92       	st	-Z, r1
    1d5a:	12 92       	st	-Z, r1
    1d5c:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1d5e:	38 96       	adiw	r30, 0x08	; 8
    1d60:	10 82       	st	Z, r1
    1d62:	11 82       	std	Z+1, r1	; 0x01
    1d64:	12 82       	std	Z+2, r1	; 0x02
    1d66:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1d68:	39 97       	sbiw	r30, 0x09	; 9
    1d6a:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1d6c:	80 7e       	andi	r24, 0xE0	; 224
    1d6e:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1d70:	08 95       	ret

00001d72 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1d72:	e0 91 43 01 	lds	r30, 0x0143
    1d76:	f0 91 44 01 	lds	r31, 0x0144
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1d7c:	9c 01       	movw	r18, r24
    1d7e:	b4 e0       	ldi	r27, 0x04	; 4
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	ba 95       	dec	r27
    1d86:	e1 f7       	brne	.-8      	; 0x1d80 <Timebase_DownCounter_SS_Start+0xe>
    1d88:	28 0f       	add	r18, r24
    1d8a:	39 1f       	adc	r19, r25
    1d8c:	e2 0f       	add	r30, r18
    1d8e:	f3 1f       	adc	r31, r19
    1d90:	e9 5b       	subi	r30, 0xB9	; 185
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	90 81       	ld	r25, Z
    1d96:	89 2f       	mov	r24, r25
    1d98:	86 95       	lsr	r24
    1d9a:	8f 70       	andi	r24, 0x0F	; 15
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1da0:	91 7e       	andi	r25, 0xE1	; 225
    1da2:	92 60       	ori	r25, 0x02	; 2
    1da4:	90 83       	st	Z, r25
    1da6:	08 95       	ret

00001da8 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1da8:	e0 91 43 01 	lds	r30, 0x0143
    1dac:	f0 91 44 01 	lds	r31, 0x0144
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1db2:	9c 01       	movw	r18, r24
    1db4:	44 e0       	ldi	r20, 0x04	; 4
    1db6:	22 0f       	add	r18, r18
    1db8:	33 1f       	adc	r19, r19
    1dba:	4a 95       	dec	r20
    1dbc:	e1 f7       	brne	.-8      	; 0x1db6 <Timebase_DownCounter_SS_Stop+0xe>
    1dbe:	28 0f       	add	r18, r24
    1dc0:	39 1f       	adc	r19, r25
    1dc2:	e2 0f       	add	r30, r18
    1dc4:	f3 1f       	adc	r31, r19
    1dc6:	e9 5b       	subi	r30, 0xB9	; 185
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	90 81       	ld	r25, Z
    1dcc:	89 2f       	mov	r24, r25
    1dce:	86 95       	lsr	r24
    1dd0:	8f 70       	andi	r24, 0x0F	; 15
    1dd2:	82 30       	cpi	r24, 0x02	; 2
    1dd4:	19 f0       	breq	.+6      	; 0x1ddc <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1dd6:	91 7e       	andi	r25, 0xE1	; 225
    1dd8:	94 60       	ori	r25, 0x04	; 4
    1dda:	90 83       	st	Z, r25
    1ddc:	08 95       	ret

00001dde <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1dde:	2f 92       	push	r2
    1de0:	3f 92       	push	r3
    1de2:	4f 92       	push	r4
    1de4:	5f 92       	push	r5
    1de6:	6f 92       	push	r6
    1de8:	7f 92       	push	r7
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	4a 01       	movw	r8, r20
    1e0c:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e0e:	20 91 43 01 	lds	r18, 0x0143
    1e12:	30 91 44 01 	lds	r19, 0x0144
    1e16:	3c 83       	std	Y+4, r19	; 0x04
    1e18:	2b 83       	std	Y+3, r18	; 0x03
    1e1a:	a8 2f       	mov	r26, r24
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ba 83       	std	Y+2, r27	; 0x02
    1e20:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1e22:	fd 01       	movw	r30, r26
    1e24:	64 e0       	ldi	r22, 0x04	; 4
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	6a 95       	dec	r22
    1e2c:	e1 f7       	brne	.-8      	; 0x1e26 <Timebase_DownCounter_SS_Set_Securely+0x48>
    1e2e:	ea 0f       	add	r30, r26
    1e30:	fb 1f       	adc	r31, r27
    1e32:	e2 0f       	add	r30, r18
    1e34:	f3 1f       	adc	r31, r19
    1e36:	e9 5b       	subi	r30, 0xB9	; 185
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	e7 54       	subi	r30, 0x47	; 71
    1e3e:	f0 40       	sbci	r31, 0x00	; 0
    1e40:	86 95       	lsr	r24
    1e42:	8f 70       	andi	r24, 0x0F	; 15
    1e44:	09 f0       	breq	.+2      	; 0x1e48 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1e46:	70 c0       	rjmp	.+224    	; 0x1f28 <Timebase_DownCounter_SS_Set_Securely+0x14a>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e48:	e0 5b       	subi	r30, 0xB0	; 176
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	80 82       	st	Z, r8
    1e4e:	91 82       	std	Z+1, r9	; 0x01
    1e50:	a2 82       	std	Z+2, r10	; 0x02
    1e52:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1e54:	f9 01       	movw	r30, r18
    1e56:	c7 80       	ldd	r12, Z+7	; 0x07
    1e58:	d0 84       	ldd	r13, Z+8	; 0x08
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1e5a:	21 84       	ldd	r2, Z+9	; 0x09
    1e5c:	32 84       	ldd	r3, Z+10	; 0x0a
    1e5e:	43 84       	ldd	r4, Z+11	; 0x0b
    1e60:	54 84       	ldd	r5, Z+12	; 0x0c
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
    1e62:	20 81       	ld	r18, Z
    1e64:	31 81       	ldd	r19, Z+1	; 0x01
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	c5 01       	movw	r24, r10
    1e6c:	b4 01       	movw	r22, r8
    1e6e:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
    1e72:	7b 01       	movw	r14, r22
    1e74:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
    1e76:	ab 81       	ldd	r26, Y+3	; 0x03
    1e78:	bc 81       	ldd	r27, Y+4	; 0x04
    1e7a:	2d 91       	ld	r18, X+
    1e7c:	3c 91       	ld	r19, X
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	50 e0       	ldi	r21, 0x00	; 0
    1e82:	c5 01       	movw	r24, r10
    1e84:	b4 01       	movw	r22, r8
    1e86:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
    1e8a:	c9 01       	movw	r24, r18
    1e8c:	da 01       	movw	r26, r20
    1e8e:	3c 01       	movw	r6, r24
    1e90:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1e92:	56 01       	movw	r10, r12
    1e94:	cc 24       	eor	r12, r12
    1e96:	dd 24       	eor	r13, r13
    1e98:	ae 0c       	add	r10, r14
    1e9a:	bf 1c       	adc	r11, r15
    1e9c:	c0 1e       	adc	r12, r16
    1e9e:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1ea0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ea2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	a0 e0       	ldi	r26, 0x00	; 0
    1eaa:	b0 e0       	ldi	r27, 0x00	; 0
    1eac:	a8 16       	cp	r10, r24
    1eae:	b9 06       	cpc	r11, r25
    1eb0:	ca 06       	cpc	r12, r26
    1eb2:	db 06       	cpc	r13, r27
    1eb4:	94 f0       	brlt	.+36     	; 0x1eda <Timebase_DownCounter_SS_Set_Securely+0xfc>
	  sec_val += 1;
    1eb6:	08 94       	sec
    1eb8:	61 1c       	adc	r6, r1
    1eba:	71 1c       	adc	r7, r1
    1ebc:	81 1c       	adc	r8, r1
    1ebe:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	50 e0       	ldi	r21, 0x00	; 0
    1ec8:	c6 01       	movw	r24, r12
    1eca:	b5 01       	movw	r22, r10
    1ecc:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	da 01       	movw	r26, r20
    1ed6:	5c 01       	movw	r10, r24
    1ed8:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	54 e0       	ldi	r21, 0x04	; 4
    1ee0:	ee 0f       	add	r30, r30
    1ee2:	ff 1f       	adc	r31, r31
    1ee4:	5a 95       	dec	r21
    1ee6:	e1 f7       	brne	.-8      	; 0x1ee0 <Timebase_DownCounter_SS_Set_Securely+0x102>
    1ee8:	29 81       	ldd	r18, Y+1	; 0x01
    1eea:	3a 81       	ldd	r19, Y+2	; 0x02
    1eec:	e2 0f       	add	r30, r18
    1eee:	f3 1f       	adc	r31, r19
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	e8 0f       	add	r30, r24
    1ef6:	f9 1f       	adc	r31, r25
    1ef8:	e8 5b       	subi	r30, 0xB8	; 184
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	26 0c       	add	r2, r6
    1efe:	37 1c       	adc	r3, r7
    1f00:	48 1c       	adc	r4, r8
    1f02:	59 1c       	adc	r5, r9
    1f04:	21 92       	st	Z+, r2
    1f06:	31 92       	st	Z+, r3
    1f08:	41 92       	st	Z+, r4
    1f0a:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1f0c:	a0 82       	st	Z, r10
    1f0e:	b1 82       	std	Z+1, r11	; 0x01
    1f10:	c2 82       	std	Z+2, r12	; 0x02
    1f12:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1f14:	35 97       	sbiw	r30, 0x05	; 5
    1f16:	90 81       	ld	r25, Z
    1f18:	89 2f       	mov	r24, r25
    1f1a:	86 95       	lsr	r24
    1f1c:	8f 70       	andi	r24, 0x0F	; 15
    1f1e:	81 30       	cpi	r24, 0x01	; 1
    1f20:	19 f0       	breq	.+6      	; 0x1f28 <Timebase_DownCounter_SS_Set_Securely+0x14a>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f22:	91 7e       	andi	r25, 0xE1	; 225
    1f24:	92 60       	ori	r25, 0x02	; 2
    1f26:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1f28:	0f 90       	pop	r0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	cf 91       	pop	r28
    1f32:	df 91       	pop	r29
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	bf 90       	pop	r11
    1f42:	af 90       	pop	r10
    1f44:	9f 90       	pop	r9
    1f46:	8f 90       	pop	r8
    1f48:	7f 90       	pop	r7
    1f4a:	6f 90       	pop	r6
    1f4c:	5f 90       	pop	r5
    1f4e:	4f 90       	pop	r4
    1f50:	3f 90       	pop	r3
    1f52:	2f 90       	pop	r2
    1f54:	08 95       	ret

00001f56 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1f56:	e0 91 43 01 	lds	r30, 0x0143
    1f5a:	f0 91 44 01 	lds	r31, 0x0144
    1f5e:	a8 2f       	mov	r26, r24
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	9d 01       	movw	r18, r26
    1f64:	94 e0       	ldi	r25, 0x04	; 4
    1f66:	22 0f       	add	r18, r18
    1f68:	33 1f       	adc	r19, r19
    1f6a:	9a 95       	dec	r25
    1f6c:	e1 f7       	brne	.-8      	; 0x1f66 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    1f6e:	2a 0f       	add	r18, r26
    1f70:	3b 1f       	adc	r19, r27
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	e4 5b       	subi	r30, 0xB4	; 180
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	10 82       	st	Z, r1
    1f7c:	11 82       	std	Z+1, r1	; 0x01
    1f7e:	12 82       	std	Z+2, r1	; 0x02
    1f80:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1f82:	12 92       	st	-Z, r1
    1f84:	12 92       	st	-Z, r1
    1f86:	12 92       	st	-Z, r1
    1f88:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f8a:	38 96       	adiw	r30, 0x08	; 8
    1f8c:	10 82       	st	Z, r1
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	12 82       	std	Z+2, r1	; 0x02
    1f92:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f94:	39 97       	sbiw	r30, 0x09	; 9
    1f96:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1f98:	90 7e       	andi	r25, 0xE0	; 224
    1f9a:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1f9c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <Timebase_DownCounter_SS_Set_Securely>
} 
    1fa0:	08 95       	ret

00001fa2 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1fa2:	2f 92       	push	r2
    1fa4:	3f 92       	push	r3
    1fa6:	4f 92       	push	r4
    1fa8:	5f 92       	push	r5
    1faa:	6f 92       	push	r6
    1fac:	7f 92       	push	r7
    1fae:	8f 92       	push	r8
    1fb0:	9f 92       	push	r9
    1fb2:	af 92       	push	r10
    1fb4:	bf 92       	push	r11
    1fb6:	cf 92       	push	r12
    1fb8:	df 92       	push	r13
    1fba:	ef 92       	push	r14
    1fbc:	ff 92       	push	r15
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1fc6:	e0 91 43 01 	lds	r30, 0x0143
    1fca:	f0 91 44 01 	lds	r31, 0x0144
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	44 e0       	ldi	r20, 0x04	; 4
    1fd4:	cc 0f       	add	r28, r28
    1fd6:	dd 1f       	adc	r29, r29
    1fd8:	4a 95       	dec	r20
    1fda:	e1 f7       	brne	.-8      	; 0x1fd4 <Timebase_DownCounter_SS_Update+0x32>
    1fdc:	c8 0f       	add	r28, r24
    1fde:	d9 1f       	adc	r29, r25
    1fe0:	ce 0f       	add	r28, r30
    1fe2:	df 1f       	adc	r29, r31
    1fe4:	37 e4       	ldi	r19, 0x47	; 71
    1fe6:	c3 2e       	mov	r12, r19
    1fe8:	d1 2c       	mov	r13, r1
    1fea:	cc 0e       	add	r12, r28
    1fec:	dd 1e       	adc	r13, r29
    1fee:	d6 01       	movw	r26, r12
    1ff0:	8c 91       	ld	r24, X
    1ff2:	86 95       	lsr	r24
    1ff4:	8f 70       	andi	r24, 0x0F	; 15
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1ff6:	81 30       	cpi	r24, 0x01	; 1
    1ff8:	09 f0       	breq	.+2      	; 0x1ffc <Timebase_DownCounter_SS_Update+0x5a>
    1ffa:	4e c0       	rjmp	.+156    	; 0x2098 <Timebase_DownCounter_SS_Update+0xf6>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1ffc:	e7 80       	ldd	r14, Z+7	; 0x07
    1ffe:	f0 84       	ldd	r15, Z+8	; 0x08

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
    2000:	00 e0       	ldi	r16, 0x00	; 0
    2002:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2004:	61 84       	ldd	r6, Z+9	; 0x09
    2006:	72 84       	ldd	r7, Z+10	; 0x0a
    2008:	83 84       	ldd	r8, Z+11	; 0x0b
    200a:	94 84       	ldd	r9, Z+12	; 0x0c
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    200c:	28 e4       	ldi	r18, 0x48	; 72
    200e:	a2 2e       	mov	r10, r18
    2010:	b1 2c       	mov	r11, r1
    2012:	ac 0e       	add	r10, r28
    2014:	bd 1e       	adc	r11, r29
    2016:	d5 01       	movw	r26, r10
    2018:	2d 91       	ld	r18, X+
    201a:	3d 91       	ld	r19, X+
    201c:	4d 91       	ld	r20, X+
    201e:	5c 91       	ld	r21, X
    2020:	26 19       	sub	r18, r6
    2022:	37 09       	sbc	r19, r7
    2024:	48 09       	sbc	r20, r8
    2026:	59 09       	sbc	r21, r9
	temp_s *= Timebase->Config.UpdateRate;
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 95 18 	call	0x312a	; 0x312a <__mulsi3>
    2034:	6e 19       	sub	r22, r14
    2036:	7f 09       	sbc	r23, r15
    2038:	80 0b       	sbc	r24, r16
    203a:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
    203c:	de 01       	movw	r26, r28
    203e:	a4 5b       	subi	r26, 0xB4	; 180
    2040:	bf 4f       	sbci	r27, 0xFF	; 255
    2042:	2d 91       	ld	r18, X+
    2044:	3d 91       	ld	r19, X+
    2046:	4d 91       	ld	r20, X+
    2048:	5c 91       	ld	r21, X
    204a:	13 97       	sbiw	r26, 0x03	; 3
    204c:	62 0f       	add	r22, r18
    204e:	73 1f       	adc	r23, r19
    2050:	84 1f       	adc	r24, r20
    2052:	95 1f       	adc	r25, r21
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2054:	fe 01       	movw	r30, r28
    2056:	e0 5b       	subi	r30, 0xB0	; 176
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 83       	st	Z, r22
    205c:	71 83       	std	Z+1, r23	; 0x01
    205e:	82 83       	std	Z+2, r24	; 0x02
    2060:	93 83       	std	Z+3, r25	; 0x03
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    2062:	16 16       	cp	r1, r22
    2064:	17 06       	cpc	r1, r23
    2066:	18 06       	cpc	r1, r24
    2068:	19 06       	cpc	r1, r25
    206a:	0c f4       	brge	.+2      	; 0x206e <Timebase_DownCounter_SS_Update+0xcc>
    206c:	48 c0       	rjmp	.+144    	; 0x20fe <Timebase_DownCounter_SS_Update+0x15c>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    206e:	1d 92       	st	X+, r1
    2070:	1d 92       	st	X+, r1
    2072:	1d 92       	st	X+, r1
    2074:	1c 92       	st	X, r1
    2076:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2078:	d5 01       	movw	r26, r10
    207a:	1d 92       	st	X+, r1
    207c:	1d 92       	st	X+, r1
    207e:	1d 92       	st	X+, r1
    2080:	1c 92       	st	X, r1
    2082:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2084:	10 82       	st	Z, r1
    2086:	11 82       	std	Z+1, r1	; 0x01
    2088:	12 82       	std	Z+2, r1	; 0x02
    208a:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    208c:	f6 01       	movw	r30, r12
    208e:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2090:	80 7e       	andi	r24, 0xE0	; 224
    2092:	88 60       	ori	r24, 0x08	; 8
    2094:	80 83       	st	Z, r24
    2096:	33 c0       	rjmp	.+102    	; 0x20fe <Timebase_DownCounter_SS_Update+0x15c>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	89 f5       	brne	.+98     	; 0x20fe <Timebase_DownCounter_SS_Update+0x15c>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    209c:	67 80       	ldd	r6, Z+7	; 0x07
    209e:	70 84       	ldd	r7, Z+8	; 0x08
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    20a0:	e1 84       	ldd	r14, Z+9	; 0x09
    20a2:	f2 84       	ldd	r15, Z+10	; 0x0a
    20a4:	03 85       	ldd	r16, Z+11	; 0x0b
    20a6:	14 85       	ldd	r17, Z+12	; 0x0c
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    20a8:	c0 5b       	subi	r28, 0xB0	; 176
    20aa:	df 4f       	sbci	r29, 0xFF	; 255
    20ac:	28 80       	ld	r2, Y
    20ae:	39 80       	ldd	r3, Y+1	; 0x01
    20b0:	4a 80       	ldd	r4, Y+2	; 0x02
    20b2:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
    20b4:	20 81       	ld	r18, Z
    20b6:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
    20b8:	a0 80       	ld	r10, Z
    20ba:	b1 80       	ldd	r11, Z+1	; 0x01
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    20bc:	28 97       	sbiw	r28, 0x08	; 8
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	c2 01       	movw	r24, r4
    20c4:	b1 01       	movw	r22, r2
    20c6:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
    20ca:	e2 0e       	add	r14, r18
    20cc:	f3 1e       	adc	r15, r19
    20ce:	04 1f       	adc	r16, r20
    20d0:	15 1f       	adc	r17, r21
    20d2:	e9 92       	st	Y+, r14
    20d4:	f9 92       	st	Y+, r15
    20d6:	09 93       	st	Y+, r16
    20d8:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    20da:	cc 24       	eor	r12, r12
    20dc:	dd 24       	eor	r13, r13
    20de:	c2 01       	movw	r24, r4
    20e0:	b1 01       	movw	r22, r2
    20e2:	a6 01       	movw	r20, r12
    20e4:	95 01       	movw	r18, r10
    20e6:	0e 94 d6 18 	call	0x31ac	; 0x31ac <__divmodsi4>
    20ea:	88 24       	eor	r8, r8
    20ec:	99 24       	eor	r9, r9
    20ee:	66 0e       	add	r6, r22
    20f0:	77 1e       	adc	r7, r23
    20f2:	88 1e       	adc	r8, r24
    20f4:	99 1e       	adc	r9, r25
    20f6:	68 82       	st	Y, r6
    20f8:	79 82       	std	Y+1, r7	; 0x01
    20fa:	8a 82       	std	Y+2, r8	; 0x02
    20fc:	9b 82       	std	Y+3, r9	; 0x03
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	bf 90       	pop	r11
    2110:	af 90       	pop	r10
    2112:	9f 90       	pop	r9
    2114:	8f 90       	pop	r8
    2116:	7f 90       	pop	r7
    2118:	6f 90       	pop	r6
    211a:	5f 90       	pop	r5
    211c:	4f 90       	pop	r4
    211e:	3f 90       	pop	r3
    2120:	2f 90       	pop	r2
    2122:	08 95       	ret

00002124 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	e0 91 43 01 	lds	r30, 0x0143
    212a:	f0 91 44 01 	lds	r31, 0x0144
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	9c 01       	movw	r18, r24
    2132:	54 e0       	ldi	r21, 0x04	; 4
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	5a 95       	dec	r21
    213a:	e1 f7       	brne	.-8      	; 0x2134 <Timebase_DownCounter_SS_Expired+0x10>
    213c:	28 0f       	add	r18, r24
    213e:	39 1f       	adc	r19, r25
    2140:	e2 0f       	add	r30, r18
    2142:	f3 1f       	adc	r31, r19
    2144:	e9 5b       	subi	r30, 0xB9	; 185
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	86 95       	lsr	r24
    214c:	8f 70       	andi	r24, 0x0F	; 15
    214e:	84 30       	cpi	r24, 0x04	; 4
    2150:	09 f4       	brne	.+2      	; 0x2154 <Timebase_DownCounter_SS_Expired+0x30>
    2152:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2154:	84 2f       	mov	r24, r20
    2156:	08 95       	ret

00002158 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2158:	e0 91 43 01 	lds	r30, 0x0143
    215c:	f0 91 44 01 	lds	r31, 0x0144
    2160:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2162:	9c 01       	movw	r18, r24
    2164:	64 e0       	ldi	r22, 0x04	; 4
    2166:	22 0f       	add	r18, r18
    2168:	33 1f       	adc	r19, r19
    216a:	6a 95       	dec	r22
    216c:	e1 f7       	brne	.-8      	; 0x2166 <Timebase_DownCounter_SS_Expired_Event+0xe>
    216e:	28 0f       	add	r18, r24
    2170:	39 1f       	adc	r19, r25
    2172:	e2 0f       	add	r30, r18
    2174:	f3 1f       	adc	r31, r19
    2176:	df 01       	movw	r26, r30
    2178:	a9 5b       	subi	r26, 0xB9	; 185
    217a:	bf 4f       	sbci	r27, 0xFF	; 255
    217c:	8c 91       	ld	r24, X
    217e:	86 95       	lsr	r24
    2180:	8f 70       	andi	r24, 0x0F	; 15
    2182:	84 30       	cpi	r24, 0x04	; 4
    2184:	11 f0       	breq	.+4      	; 0x218a <Timebase_DownCounter_SS_Expired_Event+0x32>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    218a:	e4 5b       	subi	r30, 0xB4	; 180
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	10 82       	st	Z, r1
    2190:	11 82       	std	Z+1, r1	; 0x01
    2192:	12 82       	std	Z+2, r1	; 0x02
    2194:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2196:	12 92       	st	-Z, r1
    2198:	12 92       	st	-Z, r1
    219a:	12 92       	st	-Z, r1
    219c:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    219e:	38 96       	adiw	r30, 0x08	; 8
    21a0:	10 82       	st	Z, r1
    21a2:	11 82       	std	Z+1, r1	; 0x01
    21a4:	12 82       	std	Z+2, r1	; 0x02
    21a6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    21a8:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    21aa:	80 7e       	andi	r24, 0xE0	; 224
    21ac:	8c 93       	st	X, r24
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    21b0:	08 95       	ret

000021b2 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    21b6:	c0 91 43 01 	lds	r28, 0x0143
    21ba:	d0 91 44 01 	lds	r29, 0x0144
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    21c2:	f9 01       	movw	r30, r18
    21c4:	a4 e0       	ldi	r26, 0x04	; 4
    21c6:	ee 0f       	add	r30, r30
    21c8:	ff 1f       	adc	r31, r31
    21ca:	aa 95       	dec	r26
    21cc:	e1 f7       	brne	.-8      	; 0x21c6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	ec 0f       	add	r30, r28
    21d4:	fd 1f       	adc	r31, r29
    21d6:	e9 5b       	subi	r30, 0xB9	; 185
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	e7 54       	subi	r30, 0x47	; 71
    21de:	f0 40       	sbci	r31, 0x00	; 0
    21e0:	80 fd       	sbrc	r24, 0
    21e2:	24 c0       	rjmp	.+72     	; 0x222c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    21e4:	e0 5b       	subi	r30, 0xB0	; 176
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	81 91       	ld	r24, Z+
    21ea:	91 91       	ld	r25, Z+
    21ec:	a1 91       	ld	r26, Z+
    21ee:	b1 91       	ld	r27, Z+
    21f0:	84 1b       	sub	r24, r20
    21f2:	95 0b       	sbc	r25, r21
    21f4:	a6 0b       	sbc	r26, r22
    21f6:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    21f8:	b7 ff       	sbrs	r27, 7
    21fa:	05 c0       	rjmp	.+10     	; 0x2206 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    21fc:	10 82       	st	Z, r1
    21fe:	11 82       	std	Z+1, r1	; 0x01
    2200:	12 82       	std	Z+2, r1	; 0x02
    2202:	13 82       	std	Z+3, r1	; 0x03
    2204:	04 c0       	rjmp	.+8      	; 0x220e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    220e:	f9 01       	movw	r30, r18
    2210:	74 e0       	ldi	r23, 0x04	; 4
    2212:	ee 0f       	add	r30, r30
    2214:	ff 1f       	adc	r31, r31
    2216:	7a 95       	dec	r23
    2218:	e1 f7       	brne	.-8      	; 0x2212 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    221a:	e2 0f       	add	r30, r18
    221c:	f3 1f       	adc	r31, r19
    221e:	ec 0f       	add	r30, r28
    2220:	fd 1f       	adc	r31, r29
    2222:	e9 5b       	subi	r30, 0xB9	; 185
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	81 60       	ori	r24, 0x01	; 1
    222a:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    222c:	df 91       	pop	r29
    222e:	cf 91       	pop	r28
    2230:	08 95       	ret

00002232 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2232:	e0 91 43 01 	lds	r30, 0x0143
    2236:	f0 91 44 01 	lds	r31, 0x0144
    223a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    223c:	9c 01       	movw	r18, r24
    223e:	b4 e0       	ldi	r27, 0x04	; 4
    2240:	22 0f       	add	r18, r18
    2242:	33 1f       	adc	r19, r19
    2244:	ba 95       	dec	r27
    2246:	e1 f7       	brne	.-8      	; 0x2240 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    2248:	28 0f       	add	r18, r24
    224a:	39 1f       	adc	r19, r25
    224c:	e2 0f       	add	r30, r18
    224e:	f3 1f       	adc	r31, r19
    2250:	df 01       	movw	r26, r30
    2252:	ac 5a       	subi	r26, 0xAC	; 172
    2254:	bf 4f       	sbci	r27, 0xFF	; 255
    2256:	e0 5b       	subi	r30, 0xB0	; 176
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	20 81       	ld	r18, Z
    225c:	31 81       	ldd	r19, Z+1	; 0x01
    225e:	42 81       	ldd	r20, Z+2	; 0x02
    2260:	53 81       	ldd	r21, Z+3	; 0x03
    2262:	8d 91       	ld	r24, X+
    2264:	9d 91       	ld	r25, X+
    2266:	0d 90       	ld	r0, X+
    2268:	bc 91       	ld	r27, X
    226a:	a0 2d       	mov	r26, r0
    226c:	28 1b       	sub	r18, r24
    226e:	39 0b       	sbc	r19, r25
    2270:	4a 0b       	sbc	r20, r26
    2272:	5b 0b       	sbc	r21, r27
    2274:	57 ff       	sbrs	r21, 7
    2276:	04 c0       	rjmp	.+8      	; 0x2280 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2280:	b9 01       	movw	r22, r18
    2282:	ca 01       	movw	r24, r20
    2284:	08 95       	ret

00002286 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    228a:	c0 91 43 01 	lds	r28, 0x0143
    228e:	d0 91 44 01 	lds	r29, 0x0144
    2292:	68 2f       	mov	r22, r24
    2294:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2296:	fb 01       	movw	r30, r22
    2298:	44 e0       	ldi	r20, 0x04	; 4
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	4a 95       	dec	r20
    22a0:	e1 f7       	brne	.-8      	; 0x229a <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    22a2:	e6 0f       	add	r30, r22
    22a4:	f7 1f       	adc	r31, r23
    22a6:	ec 0f       	add	r30, r28
    22a8:	fd 1f       	adc	r31, r29
    22aa:	df 01       	movw	r26, r30
    22ac:	ac 5a       	subi	r26, 0xAC	; 172
    22ae:	bf 4f       	sbci	r27, 0xFF	; 255
    22b0:	e0 5b       	subi	r30, 0xB0	; 176
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	20 81       	ld	r18, Z
    22b6:	31 81       	ldd	r19, Z+1	; 0x01
    22b8:	42 81       	ldd	r20, Z+2	; 0x02
    22ba:	53 81       	ldd	r21, Z+3	; 0x03
    22bc:	8d 91       	ld	r24, X+
    22be:	9d 91       	ld	r25, X+
    22c0:	0d 90       	ld	r0, X+
    22c2:	bc 91       	ld	r27, X
    22c4:	a0 2d       	mov	r26, r0
    22c6:	28 1b       	sub	r18, r24
    22c8:	39 0b       	sbc	r19, r25
    22ca:	4a 0b       	sbc	r20, r26
    22cc:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    22ce:	57 fd       	sbrc	r21, 7
    22d0:	07 c0       	rjmp	.+14     	; 0x22e0 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    22d2:	21 15       	cp	r18, r1
    22d4:	31 05       	cpc	r19, r1
    22d6:	41 05       	cpc	r20, r1
    22d8:	51 05       	cpc	r21, r1
    22da:	11 f0       	breq	.+4      	; 0x22e0 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	12 c0       	rjmp	.+36     	; 0x2304 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	cb 01       	movw	r24, r22
    22e4:	34 e0       	ldi	r19, 0x04	; 4
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	3a 95       	dec	r19
    22ec:	e1 f7       	brne	.-8      	; 0x22e6 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    22ee:	86 0f       	add	r24, r22
    22f0:	97 1f       	adc	r25, r23
    22f2:	c8 0f       	add	r28, r24
    22f4:	d9 1f       	adc	r29, r25
    22f6:	c9 5b       	subi	r28, 0xB9	; 185
    22f8:	df 4f       	sbci	r29, 0xFF	; 255
    22fa:	88 81       	ld	r24, Y
    22fc:	80 ff       	sbrs	r24, 0
    22fe:	21 e0       	ldi	r18, 0x01	; 1
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2304:	82 2f       	mov	r24, r18
    2306:	df 91       	pop	r29
    2308:	cf 91       	pop	r28
    230a:	08 95       	ret

0000230c <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    230c:	1f 93       	push	r17
    230e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2310:	0e 94 43 11 	call	0x2286	; 0x2286 <Timebase_DownCounter_SS_Period_Value_Expired>
    2314:	81 30       	cpi	r24, 0x01	; 1
    2316:	11 f0       	breq	.+4      	; 0x231c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	16 c0       	rjmp	.+44     	; 0x2348 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    231c:	e0 91 43 01 	lds	r30, 0x0143
    2320:	f0 91 44 01 	lds	r31, 0x0144
    2324:	21 2f       	mov	r18, r17
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	c9 01       	movw	r24, r18
    232a:	54 e0       	ldi	r21, 0x04	; 4
    232c:	88 0f       	add	r24, r24
    232e:	99 1f       	adc	r25, r25
    2330:	5a 95       	dec	r21
    2332:	e1 f7       	brne	.-8      	; 0x232c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    2334:	82 0f       	add	r24, r18
    2336:	93 1f       	adc	r25, r19
    2338:	e8 0f       	add	r30, r24
    233a:	f9 1f       	adc	r31, r25
    233c:	e9 5b       	subi	r30, 0xB9	; 185
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	8e 7f       	andi	r24, 0xFE	; 254
    2344:	80 83       	st	Z, r24
    2346:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2348:	1f 91       	pop	r17
    234a:	08 95       	ret

0000234c <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <Timebase_DownCounter_SS_Update>
  }
}
    2352:	08 95       	ret

00002354 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2354:	e0 91 43 01 	lds	r30, 0x0143
    2358:	f0 91 44 01 	lds	r31, 0x0144
    235c:	e4 5b       	subi	r30, 0xB4	; 180
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	10 82       	st	Z, r1
    2362:	11 82       	std	Z+1, r1	; 0x01
    2364:	12 82       	std	Z+2, r1	; 0x02
    2366:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2368:	12 92       	st	-Z, r1
    236a:	12 92       	st	-Z, r1
    236c:	12 92       	st	-Z, r1
    236e:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2370:	38 96       	adiw	r30, 0x08	; 8
    2372:	10 82       	st	Z, r1
    2374:	11 82       	std	Z+1, r1	; 0x01
    2376:	12 82       	std	Z+2, r1	; 0x02
    2378:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    237a:	39 97       	sbiw	r30, 0x09	; 9
    237c:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    237e:	80 7e       	andi	r24, 0xE0	; 224
    2380:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    2382:	08 95       	ret

00002384 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    2384:	e0 91 43 01 	lds	r30, 0x0143
    2388:	f0 91 44 01 	lds	r31, 0x0144
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	2d e0       	ldi	r18, 0x0D	; 13
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	ac 01       	movw	r20, r24
    2394:	42 9f       	mul	r20, r18
    2396:	c0 01       	movw	r24, r0
    2398:	43 9f       	mul	r20, r19
    239a:	90 0d       	add	r25, r0
    239c:	52 9f       	mul	r21, r18
    239e:	90 0d       	add	r25, r0
    23a0:	11 24       	eor	r1, r1
    23a2:	e8 0f       	add	r30, r24
    23a4:	f9 1f       	adc	r31, r25
    23a6:	e8 5a       	subi	r30, 0xA8	; 168
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 81       	ld	r24, Z
    23ac:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    23ae:	8f 70       	andi	r24, 0x0F	; 15
    23b0:	08 95       	ret

000023b2 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    23b2:	e0 91 43 01 	lds	r30, 0x0143
    23b6:	f0 91 44 01 	lds	r31, 0x0144
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	2d e0       	ldi	r18, 0x0D	; 13
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	ac 01       	movw	r20, r24
    23c2:	42 9f       	mul	r20, r18
    23c4:	c0 01       	movw	r24, r0
    23c6:	43 9f       	mul	r20, r19
    23c8:	90 0d       	add	r25, r0
    23ca:	52 9f       	mul	r21, r18
    23cc:	90 0d       	add	r25, r0
    23ce:	11 24       	eor	r1, r1
    23d0:	e8 0f       	add	r30, r24
    23d2:	f9 1f       	adc	r31, r25
    23d4:	e8 5a       	subi	r30, 0xA8	; 168
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	6f 70       	andi	r22, 0x0F	; 15
    23da:	66 0f       	add	r22, r22
    23dc:	80 81       	ld	r24, Z
    23de:	81 7e       	andi	r24, 0xE1	; 225
    23e0:	86 2b       	or	r24, r22
    23e2:	80 83       	st	Z, r24
}
    23e4:	08 95       	ret

000023e6 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    23e6:	e0 91 43 01 	lds	r30, 0x0143
    23ea:	f0 91 44 01 	lds	r31, 0x0144
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	2d e0       	ldi	r18, 0x0D	; 13
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	ac 01       	movw	r20, r24
    23f6:	42 9f       	mul	r20, r18
    23f8:	c0 01       	movw	r24, r0
    23fa:	43 9f       	mul	r20, r19
    23fc:	90 0d       	add	r25, r0
    23fe:	52 9f       	mul	r21, r18
    2400:	90 0d       	add	r25, r0
    2402:	11 24       	eor	r1, r1
    2404:	e8 0f       	add	r30, r24
    2406:	f9 1f       	adc	r31, r25
    2408:	e3 5a       	subi	r30, 0xA3	; 163
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	08 95       	ret

00002416 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2416:	e0 91 43 01 	lds	r30, 0x0143
    241a:	f0 91 44 01 	lds	r31, 0x0144
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	2d e0       	ldi	r18, 0x0D	; 13
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	dc 01       	movw	r26, r24
    2426:	a2 9f       	mul	r26, r18
    2428:	c0 01       	movw	r24, r0
    242a:	a3 9f       	mul	r26, r19
    242c:	90 0d       	add	r25, r0
    242e:	b2 9f       	mul	r27, r18
    2430:	90 0d       	add	r25, r0
    2432:	11 24       	eor	r1, r1
    2434:	e8 0f       	add	r30, r24
    2436:	f9 1f       	adc	r31, r25
    2438:	e3 5a       	subi	r30, 0xA3	; 163
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	40 83       	st	Z, r20
    243e:	51 83       	std	Z+1, r21	; 0x01
    2440:	62 83       	std	Z+2, r22	; 0x02
    2442:	73 83       	std	Z+3, r23	; 0x03
}
    2444:	08 95       	ret

00002446 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    2446:	e0 91 43 01 	lds	r30, 0x0143
    244a:	f0 91 44 01 	lds	r31, 0x0144
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	2d e0       	ldi	r18, 0x0D	; 13
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	ac 01       	movw	r20, r24
    2456:	42 9f       	mul	r20, r18
    2458:	c0 01       	movw	r24, r0
    245a:	43 9f       	mul	r20, r19
    245c:	90 0d       	add	r25, r0
    245e:	52 9f       	mul	r21, r18
    2460:	90 0d       	add	r25, r0
    2462:	11 24       	eor	r1, r1
    2464:	e8 0f       	add	r30, r24
    2466:	f9 1f       	adc	r31, r25
    2468:	e7 5a       	subi	r30, 0xA7	; 167
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	60 81       	ld	r22, Z
    246e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    2470:	82 81       	ldd	r24, Z+2	; 0x02
    2472:	93 81       	ldd	r25, Z+3	; 0x03
    2474:	08 95       	ret

00002476 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2476:	e0 91 43 01 	lds	r30, 0x0143
    247a:	f0 91 44 01 	lds	r31, 0x0144
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	2d e0       	ldi	r18, 0x0D	; 13
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	dc 01       	movw	r26, r24
    2486:	a2 9f       	mul	r26, r18
    2488:	c0 01       	movw	r24, r0
    248a:	a3 9f       	mul	r26, r19
    248c:	90 0d       	add	r25, r0
    248e:	b2 9f       	mul	r27, r18
    2490:	90 0d       	add	r25, r0
    2492:	11 24       	eor	r1, r1
    2494:	e8 0f       	add	r30, r24
    2496:	f9 1f       	adc	r31, r25
    2498:	e7 5a       	subi	r30, 0xA7	; 167
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	40 83       	st	Z, r20
    249e:	51 83       	std	Z+1, r21	; 0x01
    24a0:	62 83       	std	Z+2, r22	; 0x02
    24a2:	73 83       	std	Z+3, r23	; 0x03
}
    24a4:	08 95       	ret

000024a6 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    24a6:	e0 91 43 01 	lds	r30, 0x0143
    24aa:	f0 91 44 01 	lds	r31, 0x0144
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	2d e0       	ldi	r18, 0x0D	; 13
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	ac 01       	movw	r20, r24
    24b6:	42 9f       	mul	r20, r18
    24b8:	c0 01       	movw	r24, r0
    24ba:	43 9f       	mul	r20, r19
    24bc:	90 0d       	add	r25, r0
    24be:	52 9f       	mul	r21, r18
    24c0:	90 0d       	add	r25, r0
    24c2:	11 24       	eor	r1, r1
    24c4:	e8 0f       	add	r30, r24
    24c6:	f9 1f       	adc	r31, r25
    24c8:	ef 59       	subi	r30, 0x9F	; 159
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	60 81       	ld	r22, Z
    24ce:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    24d0:	82 81       	ldd	r24, Z+2	; 0x02
    24d2:	93 81       	ldd	r25, Z+3	; 0x03
    24d4:	08 95       	ret

000024d6 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    24d6:	e0 91 43 01 	lds	r30, 0x0143
    24da:	f0 91 44 01 	lds	r31, 0x0144
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    24e2:	77 ff       	sbrs	r23, 7
    24e4:	13 c0       	rjmp	.+38     	; 0x250c <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    24e6:	8d e0       	ldi	r24, 0x0D	; 13
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	ac 01       	movw	r20, r24
    24ec:	24 9f       	mul	r18, r20
    24ee:	c0 01       	movw	r24, r0
    24f0:	25 9f       	mul	r18, r21
    24f2:	90 0d       	add	r25, r0
    24f4:	34 9f       	mul	r19, r20
    24f6:	90 0d       	add	r25, r0
    24f8:	11 24       	eor	r1, r1
    24fa:	e8 0f       	add	r30, r24
    24fc:	f9 1f       	adc	r31, r25
    24fe:	ef 59       	subi	r30, 0x9F	; 159
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	10 82       	st	Z, r1
    2504:	11 82       	std	Z+1, r1	; 0x01
    2506:	12 82       	std	Z+2, r1	; 0x02
    2508:	13 82       	std	Z+3, r1	; 0x03
    250a:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    250c:	8d e0       	ldi	r24, 0x0D	; 13
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	dc 01       	movw	r26, r24
    2512:	2a 9f       	mul	r18, r26
    2514:	c0 01       	movw	r24, r0
    2516:	2b 9f       	mul	r18, r27
    2518:	90 0d       	add	r25, r0
    251a:	3a 9f       	mul	r19, r26
    251c:	90 0d       	add	r25, r0
    251e:	11 24       	eor	r1, r1
    2520:	e8 0f       	add	r30, r24
    2522:	f9 1f       	adc	r31, r25
    2524:	ef 59       	subi	r30, 0x9F	; 159
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	40 83       	st	Z, r20
    252a:	51 83       	std	Z+1, r21	; 0x01
    252c:	62 83       	std	Z+2, r22	; 0x02
    252e:	73 83       	std	Z+3, r23	; 0x03
    2530:	08 95       	ret

00002532 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    2532:	e0 91 43 01 	lds	r30, 0x0143
    2536:	f0 91 44 01 	lds	r31, 0x0144
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	2d e0       	ldi	r18, 0x0D	; 13
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	ac 01       	movw	r20, r24
    2542:	42 9f       	mul	r20, r18
    2544:	c0 01       	movw	r24, r0
    2546:	43 9f       	mul	r20, r19
    2548:	90 0d       	add	r25, r0
    254a:	52 9f       	mul	r21, r18
    254c:	90 0d       	add	r25, r0
    254e:	11 24       	eor	r1, r1
    2550:	e8 0f       	add	r30, r24
    2552:	f9 1f       	adc	r31, r25
    2554:	e8 5a       	subi	r30, 0xA8	; 168
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    255a:	81 70       	andi	r24, 0x01	; 1
    255c:	08 95       	ret

0000255e <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    255e:	e0 91 43 01 	lds	r30, 0x0143
    2562:	f0 91 44 01 	lds	r31, 0x0144
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	2d e0       	ldi	r18, 0x0D	; 13
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	ac 01       	movw	r20, r24
    256e:	42 9f       	mul	r20, r18
    2570:	c0 01       	movw	r24, r0
    2572:	43 9f       	mul	r20, r19
    2574:	90 0d       	add	r25, r0
    2576:	52 9f       	mul	r21, r18
    2578:	90 0d       	add	r25, r0
    257a:	11 24       	eor	r1, r1
    257c:	e8 0f       	add	r30, r24
    257e:	f9 1f       	adc	r31, r25
    2580:	e8 5a       	subi	r30, 0xA8	; 168
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	80 81       	ld	r24, Z
    2586:	81 60       	ori	r24, 0x01	; 1
    2588:	80 83       	st	Z, r24
}
    258a:	08 95       	ret

0000258c <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    258c:	e0 91 43 01 	lds	r30, 0x0143
    2590:	f0 91 44 01 	lds	r31, 0x0144
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	2d e0       	ldi	r18, 0x0D	; 13
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	ac 01       	movw	r20, r24
    259c:	42 9f       	mul	r20, r18
    259e:	c0 01       	movw	r24, r0
    25a0:	43 9f       	mul	r20, r19
    25a2:	90 0d       	add	r25, r0
    25a4:	52 9f       	mul	r21, r18
    25a6:	90 0d       	add	r25, r0
    25a8:	11 24       	eor	r1, r1
    25aa:	e8 0f       	add	r30, r24
    25ac:	f9 1f       	adc	r31, r25
    25ae:	e8 5a       	subi	r30, 0xA8	; 168
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	8e 7f       	andi	r24, 0xFE	; 254
    25b6:	80 83       	st	Z, r24
}
    25b8:	08 95       	ret

000025ba <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    25ba:	e0 91 43 01 	lds	r30, 0x0143
    25be:	f0 91 44 01 	lds	r31, 0x0144
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	2d e0       	ldi	r18, 0x0D	; 13
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	ac 01       	movw	r20, r24
    25ca:	42 9f       	mul	r20, r18
    25cc:	c0 01       	movw	r24, r0
    25ce:	43 9f       	mul	r20, r19
    25d0:	90 0d       	add	r25, r0
    25d2:	52 9f       	mul	r21, r18
    25d4:	90 0d       	add	r25, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	e8 0f       	add	r30, r24
    25da:	f9 1f       	adc	r31, r25
    25dc:	e7 5a       	subi	r30, 0xA7	; 167
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	11 92       	st	Z+, r1
    25e2:	11 92       	st	Z+, r1
    25e4:	11 92       	st	Z+, r1
    25e6:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    25e8:	10 82       	st	Z, r1
    25ea:	11 82       	std	Z+1, r1	; 0x01
    25ec:	12 82       	std	Z+2, r1	; 0x02
    25ee:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25f0:	35 97       	sbiw	r30, 0x05	; 5
    25f2:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    25f4:	80 7e       	andi	r24, 0xE0	; 224
    25f6:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    25f8:	08 95       	ret

000025fa <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    25fa:	e0 91 43 01 	lds	r30, 0x0143
    25fe:	f0 91 44 01 	lds	r31, 0x0144
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	2d e0       	ldi	r18, 0x0D	; 13
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	ac 01       	movw	r20, r24
    260a:	42 9f       	mul	r20, r18
    260c:	c0 01       	movw	r24, r0
    260e:	43 9f       	mul	r20, r19
    2610:	90 0d       	add	r25, r0
    2612:	52 9f       	mul	r21, r18
    2614:	90 0d       	add	r25, r0
    2616:	11 24       	eor	r1, r1
    2618:	e8 0f       	add	r30, r24
    261a:	f9 1f       	adc	r31, r25
    261c:	e7 5a       	subi	r30, 0xA7	; 167
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	11 92       	st	Z+, r1
    2622:	11 92       	st	Z+, r1
    2624:	11 92       	st	Z+, r1
    2626:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2628:	10 82       	st	Z, r1
    262a:	11 82       	std	Z+1, r1	; 0x01
    262c:	12 82       	std	Z+2, r1	; 0x02
    262e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2630:	35 97       	sbiw	r30, 0x05	; 5
    2632:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2634:	80 7e       	andi	r24, 0xE0	; 224
    2636:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2638:	08 95       	ret

0000263a <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    263a:	e0 91 43 01 	lds	r30, 0x0143
    263e:	f0 91 44 01 	lds	r31, 0x0144
    2642:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2644:	2d e0       	ldi	r18, 0x0D	; 13
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	ac 01       	movw	r20, r24
    264a:	42 9f       	mul	r20, r18
    264c:	c0 01       	movw	r24, r0
    264e:	43 9f       	mul	r20, r19
    2650:	90 0d       	add	r25, r0
    2652:	52 9f       	mul	r21, r18
    2654:	90 0d       	add	r25, r0
    2656:	11 24       	eor	r1, r1
    2658:	e8 0f       	add	r30, r24
    265a:	f9 1f       	adc	r31, r25
    265c:	e8 5a       	subi	r30, 0xA8	; 168
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	90 81       	ld	r25, Z
    2662:	89 2f       	mov	r24, r25
    2664:	86 95       	lsr	r24
    2666:	8f 70       	andi	r24, 0x0F	; 15
    2668:	81 30       	cpi	r24, 0x01	; 1
    266a:	19 f0       	breq	.+6      	; 0x2672 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    266c:	91 7e       	andi	r25, 0xE1	; 225
    266e:	92 60       	ori	r25, 0x02	; 2
    2670:	90 83       	st	Z, r25
    2672:	08 95       	ret

00002674 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2674:	e0 91 43 01 	lds	r30, 0x0143
    2678:	f0 91 44 01 	lds	r31, 0x0144
    267c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    267e:	2d e0       	ldi	r18, 0x0D	; 13
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	ac 01       	movw	r20, r24
    2684:	42 9f       	mul	r20, r18
    2686:	c0 01       	movw	r24, r0
    2688:	43 9f       	mul	r20, r19
    268a:	90 0d       	add	r25, r0
    268c:	52 9f       	mul	r21, r18
    268e:	90 0d       	add	r25, r0
    2690:	11 24       	eor	r1, r1
    2692:	e8 0f       	add	r30, r24
    2694:	f9 1f       	adc	r31, r25
    2696:	e8 5a       	subi	r30, 0xA8	; 168
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	90 81       	ld	r25, Z
    269c:	89 2f       	mov	r24, r25
    269e:	86 95       	lsr	r24
    26a0:	8f 70       	andi	r24, 0x0F	; 15
    26a2:	82 30       	cpi	r24, 0x02	; 2
    26a4:	19 f0       	breq	.+6      	; 0x26ac <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    26a6:	91 7e       	andi	r25, 0xE1	; 225
    26a8:	94 60       	ori	r25, 0x04	; 4
    26aa:	90 83       	st	Z, r25
    26ac:	08 95       	ret

000026ae <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    26b2:	a0 91 43 01 	lds	r26, 0x0143
    26b6:	b0 91 44 01 	lds	r27, 0x0144
    26ba:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    26bc:	2d e0       	ldi	r18, 0x0D	; 13
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	82 9f       	mul	r24, r18
    26c2:	f0 01       	movw	r30, r0
    26c4:	83 9f       	mul	r24, r19
    26c6:	f0 0d       	add	r31, r0
    26c8:	92 9f       	mul	r25, r18
    26ca:	f0 0d       	add	r31, r0
    26cc:	11 24       	eor	r1, r1
    26ce:	ea 0f       	add	r30, r26
    26d0:	fb 1f       	adc	r31, r27
    26d2:	ef 01       	movw	r28, r30
    26d4:	c8 5a       	subi	r28, 0xA8	; 168
    26d6:	df 4f       	sbci	r29, 0xFF	; 255
    26d8:	88 81       	ld	r24, Y
    26da:	86 95       	lsr	r24
    26dc:	8f 70       	andi	r24, 0x0F	; 15
    26de:	e9 f4       	brne	.+58     	; 0x271a <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    26e0:	e3 5a       	subi	r30, 0xA3	; 163
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	40 83       	st	Z, r20
    26e6:	51 83       	std	Z+1, r21	; 0x01
    26e8:	62 83       	std	Z+2, r22	; 0x02
    26ea:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    26ec:	19 96       	adiw	r26, 0x09	; 9
    26ee:	8d 91       	ld	r24, X+
    26f0:	9d 91       	ld	r25, X+
    26f2:	0d 90       	ld	r0, X+
    26f4:	bc 91       	ld	r27, X
    26f6:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    26f8:	84 0f       	add	r24, r20
    26fa:	95 1f       	adc	r25, r21
    26fc:	a6 1f       	adc	r26, r22
    26fe:	b7 1f       	adc	r27, r23
    2700:	b2 93       	st	-Z, r27
    2702:	a2 93       	st	-Z, r26
    2704:	92 93       	st	-Z, r25
    2706:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2708:	98 81       	ld	r25, Y
    270a:	89 2f       	mov	r24, r25
    270c:	86 95       	lsr	r24
    270e:	8f 70       	andi	r24, 0x0F	; 15
    2710:	81 30       	cpi	r24, 0x01	; 1
    2712:	19 f0       	breq	.+6      	; 0x271a <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2714:	91 7e       	andi	r25, 0xE1	; 225
    2716:	92 60       	ori	r25, 0x02	; 2
    2718:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    271a:	df 91       	pop	r29
    271c:	cf 91       	pop	r28
    271e:	08 95       	ret

00002720 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2724:	e0 91 43 01 	lds	r30, 0x0143
    2728:	f0 91 44 01 	lds	r31, 0x0144
    272c:	a8 2f       	mov	r26, r24
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	2d e0       	ldi	r18, 0x0D	; 13
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	e9 01       	movw	r28, r18
    2736:	ac 9f       	mul	r26, r28
    2738:	90 01       	movw	r18, r0
    273a:	ad 9f       	mul	r26, r29
    273c:	30 0d       	add	r19, r0
    273e:	bc 9f       	mul	r27, r28
    2740:	30 0d       	add	r19, r0
    2742:	11 24       	eor	r1, r1
    2744:	e2 0f       	add	r30, r18
    2746:	f3 1f       	adc	r31, r19
    2748:	e7 5a       	subi	r30, 0xA7	; 167
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	11 92       	st	Z+, r1
    274e:	11 92       	st	Z+, r1
    2750:	11 92       	st	Z+, r1
    2752:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2754:	10 82       	st	Z, r1
    2756:	11 82       	std	Z+1, r1	; 0x01
    2758:	12 82       	std	Z+2, r1	; 0x02
    275a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    275c:	35 97       	sbiw	r30, 0x05	; 5
    275e:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2760:	90 7e       	andi	r25, 0xE0	; 224
    2762:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2764:	0e 94 57 13 	call	0x26ae	; 0x26ae <Timebase_DownCounter_Set_Securely>
} 
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	08 95       	ret

0000276e <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    276e:	0f 93       	push	r16
    2770:	1f 93       	push	r17
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2776:	a0 91 43 01 	lds	r26, 0x0143
    277a:	b0 91 44 01 	lds	r27, 0x0144
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	2d e0       	ldi	r18, 0x0D	; 13
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	82 9f       	mul	r24, r18
    2786:	f0 01       	movw	r30, r0
    2788:	83 9f       	mul	r24, r19
    278a:	f0 0d       	add	r31, r0
    278c:	92 9f       	mul	r25, r18
    278e:	f0 0d       	add	r31, r0
    2790:	11 24       	eor	r1, r1
    2792:	ea 0f       	add	r30, r26
    2794:	fb 1f       	adc	r31, r27
    2796:	8f 01       	movw	r16, r30
    2798:	08 5a       	subi	r16, 0xA8	; 168
    279a:	1f 4f       	sbci	r17, 0xFF	; 255
    279c:	e8 01       	movw	r28, r16
    279e:	88 81       	ld	r24, Y
    27a0:	86 95       	lsr	r24
    27a2:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    27a4:	81 30       	cpi	r24, 0x01	; 1
    27a6:	69 f5       	brne	.+90     	; 0x2802 <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    27a8:	19 96       	adiw	r26, 0x09	; 9
    27aa:	2d 91       	ld	r18, X+
    27ac:	3d 91       	ld	r19, X+
    27ae:	4d 91       	ld	r20, X+
    27b0:	5c 91       	ld	r21, X
    27b2:	1c 97       	sbiw	r26, 0x0c	; 12
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    27b4:	bf 01       	movw	r22, r30
    27b6:	67 5a       	subi	r22, 0xA7	; 167
    27b8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ba:	eb 01       	movw	r28, r22
    27bc:	88 81       	ld	r24, Y
    27be:	99 81       	ldd	r25, Y+1	; 0x01
    27c0:	aa 81       	ldd	r26, Y+2	; 0x02
    27c2:	bb 81       	ldd	r27, Y+3	; 0x03
    27c4:	82 1b       	sub	r24, r18
    27c6:	93 0b       	sbc	r25, r19
    27c8:	a4 0b       	sbc	r26, r20
    27ca:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    27cc:	e3 5a       	subi	r30, 0xA3	; 163
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 83       	st	Z, r24
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	a2 83       	std	Z+2, r26	; 0x02
    27d6:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    27d8:	18 16       	cp	r1, r24
    27da:	19 06       	cpc	r1, r25
    27dc:	1a 06       	cpc	r1, r26
    27de:	1b 06       	cpc	r1, r27
    27e0:	34 f1       	brlt	.+76     	; 0x282e <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    27e2:	db 01       	movw	r26, r22
    27e4:	1d 92       	st	X+, r1
    27e6:	1d 92       	st	X+, r1
    27e8:	1d 92       	st	X+, r1
    27ea:	1c 92       	st	X, r1
    27ec:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    27ee:	10 82       	st	Z, r1
    27f0:	11 82       	std	Z+1, r1	; 0x01
    27f2:	12 82       	std	Z+2, r1	; 0x02
    27f4:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    27f6:	e8 01       	movw	r28, r16
    27f8:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    27fa:	80 7e       	andi	r24, 0xE0	; 224
    27fc:	88 60       	ori	r24, 0x08	; 8
    27fe:	88 83       	st	Y, r24
    2800:	16 c0       	rjmp	.+44     	; 0x282e <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2802:	82 30       	cpi	r24, 0x02	; 2
    2804:	a1 f4       	brne	.+40     	; 0x282e <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2806:	19 96       	adiw	r26, 0x09	; 9
    2808:	8d 91       	ld	r24, X+
    280a:	9d 91       	ld	r25, X+
    280c:	0d 90       	ld	r0, X+
    280e:	bc 91       	ld	r27, X
    2810:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2812:	e3 5a       	subi	r30, 0xA3	; 163
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	20 81       	ld	r18, Z
    2818:	31 81       	ldd	r19, Z+1	; 0x01
    281a:	42 81       	ldd	r20, Z+2	; 0x02
    281c:	53 81       	ldd	r21, Z+3	; 0x03
    281e:	82 0f       	add	r24, r18
    2820:	93 1f       	adc	r25, r19
    2822:	a4 1f       	adc	r26, r20
    2824:	b5 1f       	adc	r27, r21
    2826:	b2 93       	st	-Z, r27
    2828:	a2 93       	st	-Z, r26
    282a:	92 93       	st	-Z, r25
    282c:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	08 95       	ret

00002838 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	e0 91 43 01 	lds	r30, 0x0143
    283e:	f0 91 44 01 	lds	r31, 0x0144
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	2d e0       	ldi	r18, 0x0D	; 13
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	bc 01       	movw	r22, r24
    284a:	62 9f       	mul	r22, r18
    284c:	c0 01       	movw	r24, r0
    284e:	63 9f       	mul	r22, r19
    2850:	90 0d       	add	r25, r0
    2852:	72 9f       	mul	r23, r18
    2854:	90 0d       	add	r25, r0
    2856:	11 24       	eor	r1, r1
    2858:	e8 0f       	add	r30, r24
    285a:	f9 1f       	adc	r31, r25
    285c:	e8 5a       	subi	r30, 0xA8	; 168
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	86 95       	lsr	r24
    2864:	8f 70       	andi	r24, 0x0F	; 15
    2866:	84 30       	cpi	r24, 0x04	; 4
    2868:	09 f4       	brne	.+2      	; 0x286c <Timebase_DownCounter_Expired+0x34>
    286a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    286c:	84 2f       	mov	r24, r20
    286e:	08 95       	ret

00002870 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2870:	e0 91 43 01 	lds	r30, 0x0143
    2874:	f0 91 44 01 	lds	r31, 0x0144
    2878:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    287a:	2d e0       	ldi	r18, 0x0D	; 13
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	ac 01       	movw	r20, r24
    2880:	42 9f       	mul	r20, r18
    2882:	c0 01       	movw	r24, r0
    2884:	43 9f       	mul	r20, r19
    2886:	90 0d       	add	r25, r0
    2888:	52 9f       	mul	r21, r18
    288a:	90 0d       	add	r25, r0
    288c:	11 24       	eor	r1, r1
    288e:	e8 0f       	add	r30, r24
    2890:	f9 1f       	adc	r31, r25
    2892:	df 01       	movw	r26, r30
    2894:	a8 5a       	subi	r26, 0xA8	; 168
    2896:	bf 4f       	sbci	r27, 0xFF	; 255
    2898:	8c 91       	ld	r24, X
    289a:	86 95       	lsr	r24
    289c:	8f 70       	andi	r24, 0x0F	; 15
    289e:	84 30       	cpi	r24, 0x04	; 4
    28a0:	11 f0       	breq	.+4      	; 0x28a6 <Timebase_DownCounter_Expired_Event+0x36>
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    28a6:	e7 5a       	subi	r30, 0xA7	; 167
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	11 92       	st	Z+, r1
    28ac:	11 92       	st	Z+, r1
    28ae:	11 92       	st	Z+, r1
    28b0:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28b2:	10 82       	st	Z, r1
    28b4:	11 82       	std	Z+1, r1	; 0x01
    28b6:	12 82       	std	Z+2, r1	; 0x02
    28b8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    28ba:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28bc:	80 7e       	andi	r24, 0xE0	; 224
    28be:	8c 93       	st	X, r24
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    28c2:	08 95       	ret

000028c4 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    28c8:	c0 91 43 01 	lds	r28, 0x0143
    28cc:	d0 91 44 01 	lds	r29, 0x0144
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    28d4:	8d e0       	ldi	r24, 0x0D	; 13
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	28 9f       	mul	r18, r24
    28da:	f0 01       	movw	r30, r0
    28dc:	29 9f       	mul	r18, r25
    28de:	f0 0d       	add	r31, r0
    28e0:	38 9f       	mul	r19, r24
    28e2:	f0 0d       	add	r31, r0
    28e4:	11 24       	eor	r1, r1
    28e6:	ec 0f       	add	r30, r28
    28e8:	fd 1f       	adc	r31, r29
    28ea:	e8 5a       	subi	r30, 0xA8	; 168
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	e8 55       	subi	r30, 0x58	; 88
    28f2:	f0 40       	sbci	r31, 0x00	; 0
    28f4:	80 fd       	sbrc	r24, 0
    28f6:	25 c0       	rjmp	.+74     	; 0x2942 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    28f8:	e3 5a       	subi	r30, 0xA3	; 163
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	81 91       	ld	r24, Z+
    28fe:	91 91       	ld	r25, Z+
    2900:	a1 91       	ld	r26, Z+
    2902:	b1 91       	ld	r27, Z+
    2904:	84 1b       	sub	r24, r20
    2906:	95 0b       	sbc	r25, r21
    2908:	a6 0b       	sbc	r26, r22
    290a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    290c:	b7 ff       	sbrs	r27, 7
    290e:	05 c0       	rjmp	.+10     	; 0x291a <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2910:	10 82       	st	Z, r1
    2912:	11 82       	std	Z+1, r1	; 0x01
    2914:	12 82       	std	Z+2, r1	; 0x02
    2916:	13 82       	std	Z+3, r1	; 0x03
    2918:	04 c0       	rjmp	.+8      	; 0x2922 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    291a:	80 83       	st	Z, r24
    291c:	91 83       	std	Z+1, r25	; 0x01
    291e:	a2 83       	std	Z+2, r26	; 0x02
    2920:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2922:	8d e0       	ldi	r24, 0x0D	; 13
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	28 9f       	mul	r18, r24
    2928:	f0 01       	movw	r30, r0
    292a:	29 9f       	mul	r18, r25
    292c:	f0 0d       	add	r31, r0
    292e:	38 9f       	mul	r19, r24
    2930:	f0 0d       	add	r31, r0
    2932:	11 24       	eor	r1, r1
    2934:	ec 0f       	add	r30, r28
    2936:	fd 1f       	adc	r31, r29
    2938:	e8 5a       	subi	r30, 0xA8	; 168
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	80 81       	ld	r24, Z
    293e:	81 60       	ori	r24, 0x01	; 1
    2940:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2942:	df 91       	pop	r29
    2944:	cf 91       	pop	r28
    2946:	08 95       	ret

00002948 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2948:	e0 91 43 01 	lds	r30, 0x0143
    294c:	f0 91 44 01 	lds	r31, 0x0144
    2950:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2952:	2d e0       	ldi	r18, 0x0D	; 13
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	ac 01       	movw	r20, r24
    2958:	42 9f       	mul	r20, r18
    295a:	c0 01       	movw	r24, r0
    295c:	43 9f       	mul	r20, r19
    295e:	90 0d       	add	r25, r0
    2960:	52 9f       	mul	r21, r18
    2962:	90 0d       	add	r25, r0
    2964:	11 24       	eor	r1, r1
    2966:	e8 0f       	add	r30, r24
    2968:	f9 1f       	adc	r31, r25
    296a:	df 01       	movw	r26, r30
    296c:	af 59       	subi	r26, 0x9F	; 159
    296e:	bf 4f       	sbci	r27, 0xFF	; 255
    2970:	e3 5a       	subi	r30, 0xA3	; 163
    2972:	ff 4f       	sbci	r31, 0xFF	; 255
    2974:	20 81       	ld	r18, Z
    2976:	31 81       	ldd	r19, Z+1	; 0x01
    2978:	42 81       	ldd	r20, Z+2	; 0x02
    297a:	53 81       	ldd	r21, Z+3	; 0x03
    297c:	8d 91       	ld	r24, X+
    297e:	9d 91       	ld	r25, X+
    2980:	0d 90       	ld	r0, X+
    2982:	bc 91       	ld	r27, X
    2984:	a0 2d       	mov	r26, r0
    2986:	28 1b       	sub	r18, r24
    2988:	39 0b       	sbc	r19, r25
    298a:	4a 0b       	sbc	r20, r26
    298c:	5b 0b       	sbc	r21, r27
    298e:	57 ff       	sbrs	r21, 7
    2990:	04 c0       	rjmp	.+8      	; 0x299a <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e0       	ldi	r20, 0x00	; 0
    2998:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    299a:	b9 01       	movw	r22, r18
    299c:	ca 01       	movw	r24, r20
    299e:	08 95       	ret

000029a0 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    29a0:	cf 93       	push	r28
    29a2:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    29a4:	c0 91 43 01 	lds	r28, 0x0143
    29a8:	d0 91 44 01 	lds	r29, 0x0144
    29ac:	68 2f       	mov	r22, r24
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    29b0:	8d e0       	ldi	r24, 0x0D	; 13
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	68 9f       	mul	r22, r24
    29b6:	f0 01       	movw	r30, r0
    29b8:	69 9f       	mul	r22, r25
    29ba:	f0 0d       	add	r31, r0
    29bc:	78 9f       	mul	r23, r24
    29be:	f0 0d       	add	r31, r0
    29c0:	11 24       	eor	r1, r1
    29c2:	ec 0f       	add	r30, r28
    29c4:	fd 1f       	adc	r31, r29
    29c6:	df 01       	movw	r26, r30
    29c8:	af 59       	subi	r26, 0x9F	; 159
    29ca:	bf 4f       	sbci	r27, 0xFF	; 255
    29cc:	e3 5a       	subi	r30, 0xA3	; 163
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	20 81       	ld	r18, Z
    29d2:	31 81       	ldd	r19, Z+1	; 0x01
    29d4:	42 81       	ldd	r20, Z+2	; 0x02
    29d6:	53 81       	ldd	r21, Z+3	; 0x03
    29d8:	8d 91       	ld	r24, X+
    29da:	9d 91       	ld	r25, X+
    29dc:	0d 90       	ld	r0, X+
    29de:	bc 91       	ld	r27, X
    29e0:	a0 2d       	mov	r26, r0
    29e2:	28 1b       	sub	r18, r24
    29e4:	39 0b       	sbc	r19, r25
    29e6:	4a 0b       	sbc	r20, r26
    29e8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    29ea:	57 fd       	sbrc	r21, 7
    29ec:	07 c0       	rjmp	.+14     	; 0x29fc <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    29ee:	21 15       	cp	r18, r1
    29f0:	31 05       	cpc	r19, r1
    29f2:	41 05       	cpc	r20, r1
    29f4:	51 05       	cpc	r21, r1
    29f6:	11 f0       	breq	.+4      	; 0x29fc <Timebase_DownCounter_Period_Value_Expired+0x5c>
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	14 c0       	rjmp	.+40     	; 0x2a24 <Timebase_DownCounter_Period_Value_Expired+0x84>
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	8d e0       	ldi	r24, 0x0D	; 13
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	ac 01       	movw	r20, r24
    2a04:	64 9f       	mul	r22, r20
    2a06:	c0 01       	movw	r24, r0
    2a08:	65 9f       	mul	r22, r21
    2a0a:	90 0d       	add	r25, r0
    2a0c:	74 9f       	mul	r23, r20
    2a0e:	90 0d       	add	r25, r0
    2a10:	11 24       	eor	r1, r1
    2a12:	c8 0f       	add	r28, r24
    2a14:	d9 1f       	adc	r29, r25
    2a16:	c8 5a       	subi	r28, 0xA8	; 168
    2a18:	df 4f       	sbci	r29, 0xFF	; 255
    2a1a:	88 81       	ld	r24, Y
    2a1c:	80 ff       	sbrs	r24, 0
    2a1e:	21 e0       	ldi	r18, 0x01	; 1
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2a24:	82 2f       	mov	r24, r18
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	08 95       	ret

00002a2c <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2a2c:	1f 93       	push	r17
    2a2e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2a30:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <Timebase_DownCounter_Period_Value_Expired>
    2a34:	81 30       	cpi	r24, 0x01	; 1
    2a36:	11 f0       	breq	.+4      	; 0x2a3c <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	18 c0       	rjmp	.+48     	; 0x2a6c <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a3c:	e0 91 43 01 	lds	r30, 0x0143
    2a40:	f0 91 44 01 	lds	r31, 0x0144
    2a44:	21 2f       	mov	r18, r17
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8d e0       	ldi	r24, 0x0D	; 13
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	ac 01       	movw	r20, r24
    2a4e:	24 9f       	mul	r18, r20
    2a50:	c0 01       	movw	r24, r0
    2a52:	25 9f       	mul	r18, r21
    2a54:	90 0d       	add	r25, r0
    2a56:	34 9f       	mul	r19, r20
    2a58:	90 0d       	add	r25, r0
    2a5a:	11 24       	eor	r1, r1
    2a5c:	e8 0f       	add	r30, r24
    2a5e:	f9 1f       	adc	r31, r25
    2a60:	e8 5a       	subi	r30, 0xA8	; 168
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	8e 7f       	andi	r24, 0xFE	; 254
    2a68:	80 83       	st	Z, r24
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2a6c:	1f 91       	pop	r17
    2a6e:	08 95       	ret

00002a70 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2a70:	80 e0       	ldi	r24, 0x00	; 0
    2a72:	0e 94 b7 13 	call	0x276e	; 0x276e <Timebase_DownCounter_Update>
  }
}
    2a76:	08 95       	ret

00002a78 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a78:	e0 91 43 01 	lds	r30, 0x0143
    2a7c:	f0 91 44 01 	lds	r31, 0x0144
    2a80:	e7 5a       	subi	r30, 0xA7	; 167
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	11 92       	st	Z+, r1
    2a86:	11 92       	st	Z+, r1
    2a88:	11 92       	st	Z+, r1
    2a8a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a8c:	10 82       	st	Z, r1
    2a8e:	11 82       	std	Z+1, r1	; 0x01
    2a90:	12 82       	std	Z+2, r1	; 0x02
    2a92:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2a94:	35 97       	sbiw	r30, 0x05	; 5
    2a96:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a98:	80 7e       	andi	r24, 0xE0	; 224
    2a9a:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2a9c:	08 95       	ret

00002a9e <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2a9e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    2aa2:	0e 94 aa 11 	call	0x2354	; 0x2354 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2aa6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2aaa:	08 95       	ret

00002aac <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2aac:	0f 93       	push	r16
    2aae:	1f 93       	push	r17
    2ab0:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2ab2:	0e 94 c9 00 	call	0x192	; 0x192 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	0e 94 b6 01 	call	0x36c	; 0x36c <Timebase_Timer_Config>
  Timebase_Reset();
    2abc:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <Timebase_Reset>
}
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	08 95       	ret

00002ac6 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2ac6:	e0 91 43 01 	lds	r30, 0x0143
    2aca:	f0 91 44 01 	lds	r31, 0x0144
    2ace:	80 8d       	ldd	r24, Z+24	; 0x18
    2ad0:	82 ff       	sbrs	r24, 2
    2ad2:	0b c0       	rjmp	.+22     	; 0x2aea <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2ad4:	0e 94 8d 02 	call	0x51a	; 0x51a <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    2ad8:	0e 94 18 09 	call	0x1230	; 0x1230 <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2adc:	e0 91 43 01 	lds	r30, 0x0143
    2ae0:	f0 91 44 01 	lds	r31, 0x0144
    2ae4:	80 8d       	ldd	r24, Z+24	; 0x18
    2ae6:	8b 7f       	andi	r24, 0xFB	; 251
    2ae8:	80 8f       	std	Z+24, r24	; 0x18
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2aea:	e0 91 43 01 	lds	r30, 0x0143
    2aee:	f0 91 44 01 	lds	r31, 0x0144
    2af2:	80 8d       	ldd	r24, Z+24	; 0x18
    2af4:	80 ff       	sbrs	r24, 0
    2af6:	0b c0       	rjmp	.+22     	; 0x2b0e <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2af8:	0e 94 8d 02 	call	0x51a	; 0x51a <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    2afc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2b00:	e0 91 43 01 	lds	r30, 0x0143
    2b04:	f0 91 44 01 	lds	r31, 0x0144
    2b08:	80 8d       	ldd	r24, Z+24	; 0x18
    2b0a:	8e 7f       	andi	r24, 0xFE	; 254
    2b0c:	80 8f       	std	Z+24, r24	; 0x18
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2b0e:	e0 91 43 01 	lds	r30, 0x0143
    2b12:	f0 91 44 01 	lds	r31, 0x0144
    2b16:	80 8d       	ldd	r24, Z+24	; 0x18
    2b18:	83 ff       	sbrs	r24, 3
    2b1a:	0b c0       	rjmp	.+22     	; 0x2b32 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2b1c:	0e 94 8d 02 	call	0x51a	; 0x51a <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    2b20:	0e 94 a6 11 	call	0x234c	; 0x234c <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2b24:	e0 91 43 01 	lds	r30, 0x0143
    2b28:	f0 91 44 01 	lds	r31, 0x0144
    2b2c:	80 8d       	ldd	r24, Z+24	; 0x18
    2b2e:	87 7f       	andi	r24, 0xF7	; 247
    2b30:	80 8f       	std	Z+24, r24	; 0x18
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2b32:	e0 91 43 01 	lds	r30, 0x0143
    2b36:	f0 91 44 01 	lds	r31, 0x0144
    2b3a:	80 8d       	ldd	r24, Z+24	; 0x18
    2b3c:	81 ff       	sbrs	r24, 1
    2b3e:	0b c0       	rjmp	.+22     	; 0x2b56 <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2b40:	0e 94 8d 02 	call	0x51a	; 0x51a <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    2b44:	0e 94 38 15 	call	0x2a70	; 0x2a70 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2b48:	e0 91 43 01 	lds	r30, 0x0143
    2b4c:	f0 91 44 01 	lds	r31, 0x0144
    2b50:	80 8d       	ldd	r24, Z+24	; 0x18
    2b52:	8d 7f       	andi	r24, 0xFD	; 253
    2b54:	80 8f       	std	Z+24, r24	; 0x18
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    2b56:	e0 91 43 01 	lds	r30, 0x0143
    2b5a:	f0 91 44 01 	lds	r31, 0x0144
    2b5e:	13 8a       	std	Z+19, r1	; 0x13
}
    2b60:	08 95       	ret

00002b62 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    2b62:	e0 91 43 01 	lds	r30, 0x0143
    2b66:	f0 91 44 01 	lds	r31, 0x0144
    2b6a:	85 85       	ldd	r24, Z+13	; 0x0d
    2b6c:	96 85       	ldd	r25, Z+14	; 0x0e
    2b6e:	01 96       	adiw	r24, 0x01	; 1
    2b70:	96 87       	std	Z+14, r25	; 0x0e
    2b72:	85 87       	std	Z+13, r24	; 0x0d
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2b74:	80 8d       	ldd	r24, Z+24	; 0x18
    2b76:	84 60       	ori	r24, 0x04	; 4
    2b78:	80 8f       	std	Z+24, r24	; 0x18
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2b7a:	80 8d       	ldd	r24, Z+24	; 0x18
    2b7c:	88 60       	ori	r24, 0x08	; 8
    2b7e:	80 8f       	std	Z+24, r24	; 0x18
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    2b80:	25 85       	ldd	r18, Z+13	; 0x0d
    2b82:	36 85       	ldd	r19, Z+14	; 0x0e
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	28 17       	cp	r18, r24
    2b8a:	39 07       	cpc	r19, r25
    2b8c:	98 f0       	brcs	.+38     	; 0x2bb4 <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    2b8e:	87 85       	ldd	r24, Z+15	; 0x0f
    2b90:	90 89       	ldd	r25, Z+16	; 0x10
    2b92:	a1 89       	ldd	r26, Z+17	; 0x11
    2b94:	b2 89       	ldd	r27, Z+18	; 0x12
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	a1 1d       	adc	r26, r1
    2b9a:	b1 1d       	adc	r27, r1
    2b9c:	87 87       	std	Z+15, r24	; 0x0f
    2b9e:	90 8b       	std	Z+16, r25	; 0x10
    2ba0:	a1 8b       	std	Z+17, r26	; 0x11
    2ba2:	b2 8b       	std	Z+18, r27	; 0x12
    Timebase->Time.SubSecondsShadow = 0;
    2ba4:	16 86       	std	Z+14, r1	; 0x0e
    2ba6:	15 86       	std	Z+13, r1	; 0x0d
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2ba8:	80 8d       	ldd	r24, Z+24	; 0x18
    2baa:	81 60       	ori	r24, 0x01	; 1
    2bac:	80 8f       	std	Z+24, r24	; 0x18
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2bae:	80 8d       	ldd	r24, Z+24	; 0x18
    2bb0:	82 60       	ori	r24, 0x02	; 2
    2bb2:	80 8f       	std	Z+24, r24	; 0x18
    2bb4:	08 95       	ret

00002bb6 <__vector_6>:



/**********************************LPTimer ISR Start*********************************/

ISR(WDT_vect){
    2bb6:	1f 92       	push	r1
    2bb8:	0f 92       	push	r0
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	0f 92       	push	r0
    2bbe:	11 24       	eor	r1, r1
    2bc0:	2f 93       	push	r18
    2bc2:	3f 93       	push	r19
    2bc4:	4f 93       	push	r20
    2bc6:	5f 93       	push	r21
    2bc8:	6f 93       	push	r22
    2bca:	7f 93       	push	r23
    2bcc:	8f 93       	push	r24
    2bce:	9f 93       	push	r25
    2bd0:	af 93       	push	r26
    2bd2:	bf 93       	push	r27
    2bd4:	ef 93       	push	r30
    2bd6:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
    2bd8:	e0 e6       	ldi	r30, 0x60	; 96
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
    2bde:	80 64       	ori	r24, 0x40	; 64
    2be0:	80 83       	st	Z, r24
  Timebase_ISR_Executables();
    2be2:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Timebase_ISR_Executables>
}
    2be6:	ff 91       	pop	r31
    2be8:	ef 91       	pop	r30
    2bea:	bf 91       	pop	r27
    2bec:	af 91       	pop	r26
    2bee:	9f 91       	pop	r25
    2bf0:	8f 91       	pop	r24
    2bf2:	7f 91       	pop	r23
    2bf4:	6f 91       	pop	r22
    2bf6:	5f 91       	pop	r21
    2bf8:	4f 91       	pop	r20
    2bfa:	3f 91       	pop	r19
    2bfc:	2f 91       	pop	r18
    2bfe:	0f 90       	pop	r0
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	0f 90       	pop	r0
    2c04:	1f 90       	pop	r1
    2c06:	18 95       	reti

00002c08 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	2f 93       	push	r18
    2c14:	3f 93       	push	r19
    2c16:	4f 93       	push	r20
    2c18:	5f 93       	push	r21
    2c1a:	6f 93       	push	r22
    2c1c:	7f 93       	push	r23
    2c1e:	8f 93       	push	r24
    2c20:	9f 93       	push	r25
    2c22:	af 93       	push	r26
    2c24:	bf 93       	push	r27
    2c26:	ef 93       	push	r30
    2c28:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2c2a:	e0 91 43 01 	lds	r30, 0x0143
    2c2e:	f0 91 44 01 	lds	r31, 0x0144
    2c32:	82 81       	ldd	r24, Z+2	; 0x02
    2c34:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2c36:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Timebase_ISR_Executables>
}
    2c3a:	ff 91       	pop	r31
    2c3c:	ef 91       	pop	r30
    2c3e:	bf 91       	pop	r27
    2c40:	af 91       	pop	r26
    2c42:	9f 91       	pop	r25
    2c44:	8f 91       	pop	r24
    2c46:	7f 91       	pop	r23
    2c48:	6f 91       	pop	r22
    2c4a:	5f 91       	pop	r21
    2c4c:	4f 91       	pop	r20
    2c4e:	3f 91       	pop	r19
    2c50:	2f 91       	pop	r18
    2c52:	0f 90       	pop	r0
    2c54:	0f be       	out	0x3f, r0	; 63
    2c56:	0f 90       	pop	r0
    2c58:	1f 90       	pop	r1
    2c5a:	18 95       	reti

00002c5c <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    2c5c:	10 92 14 01 	sts	0x0114, r1
    2c60:	e5 e1       	ldi	r30, 0x15	; 21
    2c62:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    2c64:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	ed 31       	cpi	r30, 0x1D	; 29
    2c6a:	f8 07       	cpc	r31, r24
    2c6c:	d9 f7       	brne	.-10     	; 0x2c64 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    2c6e:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
    2c70:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
    2c72:	80 e2       	ldi	r24, 0x20	; 32
    2c74:	90 e0       	ldi	r25, 0x00	; 0
    2c76:	93 a3       	std	Z+35, r25	; 0x23
    2c78:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
    2c7a:	15 a2       	std	Z+37, r1	; 0x25
    2c7c:	14 a2       	std	Z+36, r1	; 0x24
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	04 c0       	rjmp	.+8      	; 0x2c8a <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
    2c82:	ec 5e       	subi	r30, 0xEC	; 236
    2c84:	fe 4f       	sbci	r31, 0xFE	; 254
    2c86:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
    2c88:	2f 5f       	subi	r18, 0xFF	; 255
    2c8a:	80 91 3f 01 	lds	r24, 0x013F
    2c8e:	90 91 40 01 	lds	r25, 0x0140
    2c92:	e2 2f       	mov	r30, r18
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	e8 17       	cp	r30, r24
    2c98:	f9 07       	cpc	r31, r25
    2c9a:	98 f3       	brcs	.-26     	; 0x2c82 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
    2c9c:	08 95       	ret

00002c9e <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    2c9e:	08 95       	ret

00002ca0 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    2ca0:	08 95       	ret

00002ca2 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    2ca2:	9b 01       	movw	r18, r22
    2ca4:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    2ca6:	60 e6       	ldi	r22, 0x60	; 96
    2ca8:	73 ee       	ldi	r23, 0xE3	; 227
    2caa:	86 e1       	ldi	r24, 0x16	; 22
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodsi4>
    2cb2:	21 50       	subi	r18, 0x01	; 1
    2cb4:	30 40       	sbci	r19, 0x00	; 0
    2cb6:	40 40       	sbci	r20, 0x00	; 0
    2cb8:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    2cba:	e0 ec       	ldi	r30, 0xC0	; 192
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	82 60       	ori	r24, 0x02	; 2
    2cc2:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    2cc4:	bb 27       	eor	r27, r27
    2cc6:	a5 2f       	mov	r26, r21
    2cc8:	94 2f       	mov	r25, r20
    2cca:	83 2f       	mov	r24, r19
    2ccc:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    2cd0:	20 93 c4 00 	sts	0x00C4, r18
}
    2cd4:	08 95       	ret

00002cd6 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    2cd6:	e1 ec       	ldi	r30, 0xC1	; 193
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	88 60       	ori	r24, 0x08	; 8
    2cde:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2ce0:	86 e0       	ldi	r24, 0x06	; 6
    2ce2:	80 93 c2 00 	sts	0x00C2, r24
}
    2ce6:	08 95       	ret

00002ce8 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    2ce8:	e1 ec       	ldi	r30, 0xC1	; 193
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	80 61       	ori	r24, 0x10	; 16
    2cf0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2cf2:	86 e0       	ldi	r24, 0x06	; 6
    2cf4:	80 93 c2 00 	sts	0x00C2, r24
}
    2cf8:	08 95       	ret

00002cfa <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    2cfa:	e1 ec       	ldi	r30, 0xC1	; 193
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 68       	ori	r24, 0x80	; 128
    2d02:	80 83       	st	Z, r24
  sei();
    2d04:	78 94       	sei
}
    2d06:	08 95       	ret

00002d08 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    2d08:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    2d0a:	80 91 c0 00 	lds	r24, 0x00C0
    2d0e:	85 ff       	sbrs	r24, 5
    2d10:	fc cf       	rjmp	.-8      	; 0x2d0a <UART_Transmit_Byte+0x2>
  UDR0=val;
    2d12:	90 93 c6 00 	sts	0x00C6, r25
}
    2d16:	08 95       	ret

00002d18 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    2d18:	df 93       	push	r29
    2d1a:	cf 93       	push	r28
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    2d22:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    2d24:	80 91 c0 00 	lds	r24, 0x00C0
    2d28:	84 ff       	sbrs	r24, 4
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <UART_Receive_Byte+0x1e>
    val=UDR0;
    2d2c:	80 91 c6 00 	lds	r24, 0x00C6
    2d30:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	08 c0       	rjmp	.+16     	; 0x2d46 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    2d36:	80 91 c0 00 	lds	r24, 0x00C0
    2d3a:	83 ff       	sbrs	r24, 3
    2d3c:	07 c0       	rjmp	.+14     	; 0x2d4c <UART_Receive_Byte+0x34>
    val=UDR0;
    2d3e:	80 91 c6 00 	lds	r24, 0x00C6
    2d42:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	80 93 14 01 	sts	0x0114, r24
    2d4a:	05 c0       	rjmp	.+10     	; 0x2d56 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    2d4c:	80 91 c6 00 	lds	r24, 0x00C6
    2d50:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    2d52:	10 92 14 01 	sts	0x0114, r1
  }
  return val;
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d58:	0f 90       	pop	r0
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
    2d60:	80 91 1e 01 	lds	r24, 0x011E
}
    2d64:	08 95       	ret

00002d66 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
    2d66:	10 92 1e 01 	sts	0x011E, r1
}
    2d6a:	08 95       	ret

00002d6c <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	ab 01       	movw	r20, r22
    2d74:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    2d76:	4f 3f       	cpi	r20, 0xFF	; 255
    2d78:	51 05       	cpc	r21, r1
    2d7a:	61 05       	cpc	r22, r1
    2d7c:	71 05       	cpc	r23, r1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <UART_Transmit_Byte_Hex+0x16>
    2d80:	28 f4       	brcc	.+10     	; 0x2d8c <UART_Transmit_Byte_Hex+0x20>
    2d82:	e8 e0       	ldi	r30, 0x08	; 8
    2d84:	f0 e0       	ldi	r31, 0x00	; 0
    2d86:	c2 e0       	ldi	r28, 0x02	; 2
    2d88:	d0 e0       	ldi	r29, 0x00	; 0
    2d8a:	11 c0       	rjmp	.+34     	; 0x2dae <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    2d8c:	40 30       	cpi	r20, 0x00	; 0
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	58 07       	cpc	r21, r24
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	68 07       	cpc	r22, r24
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	78 07       	cpc	r23, r24
    2d9a:	28 f0       	brcs	.+10     	; 0x2da6 <UART_Transmit_Byte_Hex+0x3a>
    2d9c:	e0 e2       	ldi	r30, 0x20	; 32
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	c8 e0       	ldi	r28, 0x08	; 8
    2da2:	d0 e0       	ldi	r29, 0x00	; 0
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <UART_Transmit_Byte_Hex+0x42>
    2da6:	e0 e1       	ldi	r30, 0x10	; 16
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	c4 e0       	ldi	r28, 0x04	; 4
    2dac:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dae:	80 91 c0 00 	lds	r24, 0x00C0
    2db2:	85 ff       	sbrs	r24, 5
    2db4:	fc cf       	rjmp	.-8      	; 0x2dae <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    2db6:	80 e3       	ldi	r24, 0x30	; 48
    2db8:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dbc:	80 91 c0 00 	lds	r24, 0x00C0
    2dc0:	85 ff       	sbrs	r24, 5
    2dc2:	fc cf       	rjmp	.-8      	; 0x2dbc <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    2dc4:	88 e7       	ldi	r24, 0x78	; 120
    2dc6:	80 93 c6 00 	sts	0x00C6, r24
    2dca:	10 e0       	ldi	r17, 0x00	; 0
    2dcc:	1f c0       	rjmp	.+62     	; 0x2e0c <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    2dce:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    2dd0:	db 01       	movw	r26, r22
    2dd2:	ca 01       	movw	r24, r20
    2dd4:	0e 2e       	mov	r0, r30
    2dd6:	04 c0       	rjmp	.+8      	; 0x2de0 <UART_Transmit_Byte_Hex+0x74>
    2dd8:	b6 95       	lsr	r27
    2dda:	a7 95       	ror	r26
    2ddc:	97 95       	ror	r25
    2dde:	87 95       	ror	r24
    2de0:	0a 94       	dec	r0
    2de2:	d2 f7       	brpl	.-12     	; 0x2dd8 <UART_Transmit_Byte_Hex+0x6c>
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	8f 70       	andi	r24, 0x0F	; 15
    2de8:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    2dea:	8a 30       	cpi	r24, 0x0A	; 10
    2dec:	91 05       	cpc	r25, r1
    2dee:	20 f0       	brcs	.+8      	; 0x2df8 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    2df0:	9c 01       	movw	r18, r24
    2df2:	29 5c       	subi	r18, 0xC9	; 201
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	03 c0       	rjmp	.+6      	; 0x2dfe <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    2df8:	9c 01       	movw	r18, r24
    2dfa:	20 5d       	subi	r18, 0xD0	; 208
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dfe:	80 91 c0 00 	lds	r24, 0x00C0
    2e02:	85 ff       	sbrs	r24, 5
    2e04:	fc cf       	rjmp	.-8      	; 0x2dfe <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    2e06:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    2e0a:	1f 5f       	subi	r17, 0xFF	; 255
    2e0c:	81 2f       	mov	r24, r17
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	8c 17       	cp	r24, r28
    2e12:	9d 07       	cpc	r25, r29
    2e14:	e0 f2       	brcs	.-72     	; 0x2dce <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    2e16:	df 91       	pop	r29
    2e18:	cf 91       	pop	r28
    2e1a:	1f 91       	pop	r17
    2e1c:	08 95       	ret

00002e1e <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    2e1e:	cf 92       	push	r12
    2e20:	df 92       	push	r13
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	ab 01       	movw	r20, r22
    2e30:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    2e32:	4f 3f       	cpi	r20, 0xFF	; 255
    2e34:	51 05       	cpc	r21, r1
    2e36:	61 05       	cpc	r22, r1
    2e38:	71 05       	cpc	r23, r1
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <UART_Transmit_Byte_Bin+0x20>
    2e3c:	10 f4       	brcc	.+4      	; 0x2e42 <UART_Transmit_Byte_Bin+0x24>
    2e3e:	97 e0       	ldi	r25, 0x07	; 7
    2e40:	0b c0       	rjmp	.+22     	; 0x2e58 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    2e42:	40 30       	cpi	r20, 0x00	; 0
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	58 07       	cpc	r21, r24
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	68 07       	cpc	r22, r24
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	78 07       	cpc	r23, r24
    2e50:	10 f0       	brcs	.+4      	; 0x2e56 <UART_Transmit_Byte_Bin+0x38>
    2e52:	9f e1       	ldi	r25, 0x1F	; 31
    2e54:	01 c0       	rjmp	.+2      	; 0x2e58 <UART_Transmit_Byte_Bin+0x3a>
    2e56:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2e58:	80 91 c0 00 	lds	r24, 0x00C0
    2e5c:	85 ff       	sbrs	r24, 5
    2e5e:	fc cf       	rjmp	.-8      	; 0x2e58 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    2e60:	80 e3       	ldi	r24, 0x30	; 48
    2e62:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2e66:	80 91 c0 00 	lds	r24, 0x00C0
    2e6a:	85 ff       	sbrs	r24, 5
    2e6c:	fc cf       	rjmp	.-8      	; 0x2e66 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    2e6e:	82 e6       	ldi	r24, 0x62	; 98
    2e70:	80 93 c6 00 	sts	0x00C6, r24
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    2e78:	e9 2f       	mov	r30, r25
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2e7c:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2e7e:	11 e3       	ldi	r17, 0x31	; 49
    2e80:	ef 01       	movw	r28, r30
    2e82:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    2e84:	cf 01       	movw	r24, r30
    2e86:	82 1b       	sub	r24, r18
    2e88:	93 0b       	sbc	r25, r19
    2e8a:	6a 01       	movw	r12, r20
    2e8c:	7b 01       	movw	r14, r22
    2e8e:	04 c0       	rjmp	.+8      	; 0x2e98 <UART_Transmit_Byte_Bin+0x7a>
    2e90:	f6 94       	lsr	r15
    2e92:	e7 94       	ror	r14
    2e94:	d7 94       	ror	r13
    2e96:	c7 94       	ror	r12
    2e98:	8a 95       	dec	r24
    2e9a:	d2 f7       	brpl	.-12     	; 0x2e90 <UART_Transmit_Byte_Bin+0x72>
    2e9c:	d7 01       	movw	r26, r14
    2e9e:	c6 01       	movw	r24, r12
    2ea0:	81 70       	andi	r24, 0x01	; 1
    2ea2:	90 70       	andi	r25, 0x00	; 0
    2ea4:	89 2b       	or	r24, r25
    2ea6:	39 f0       	breq	.+14     	; 0x2eb6 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2ea8:	80 91 c0 00 	lds	r24, 0x00C0
    2eac:	85 ff       	sbrs	r24, 5
    2eae:	fc cf       	rjmp	.-8      	; 0x2ea8 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    2eb0:	10 93 c6 00 	sts	0x00C6, r17
    2eb4:	06 c0       	rjmp	.+12     	; 0x2ec2 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2eb6:	80 91 c0 00 	lds	r24, 0x00C0
    2eba:	85 ff       	sbrs	r24, 5
    2ebc:	fc cf       	rjmp	.-8      	; 0x2eb6 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    2ebe:	00 93 c6 00 	sts	0x00C6, r16
    2ec2:	2f 5f       	subi	r18, 0xFF	; 255
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2ec6:	2c 17       	cp	r18, r28
    2ec8:	3d 07       	cpc	r19, r29
    2eca:	e1 f6       	brne	.-72     	; 0x2e84 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	df 90       	pop	r13
    2eda:	cf 90       	pop	r12
    2edc:	08 95       	ret

00002ede <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    2ede:	ac 01       	movw	r20, r24
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	07 c0       	rjmp	.+14     	; 0x2ef2 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2ee4:	80 91 c0 00 	lds	r24, 0x00C0
    2ee8:	85 ff       	sbrs	r24, 5
    2eea:	fc cf       	rjmp	.-8      	; 0x2ee4 <UART_Transmit_Text+0x6>
  UDR0=val;
    2eec:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    2ef0:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    2ef2:	fa 01       	movw	r30, r20
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f1 1d       	adc	r31, r1
    2ef8:	e0 81       	ld	r30, Z
    2efa:	ee 23       	and	r30, r30
    2efc:	99 f7       	brne	.-26     	; 0x2ee4 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    2efe:	08 95       	ret

00002f00 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    2f00:	8f e0       	ldi	r24, 0x0F	; 15
    2f02:	91 e0       	ldi	r25, 0x01	; 1
    2f04:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
}
    2f08:	08 95       	ret

00002f0a <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    2f0a:	82 e1       	ldi	r24, 0x12	; 18
    2f0c:	91 e0       	ldi	r25, 0x01	; 1
    2f0e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <UART_Transmit_Text>
}
    2f12:	08 95       	ret

00002f14 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    2f14:	bf 92       	push	r11
    2f16:	cf 92       	push	r12
    2f18:	df 92       	push	r13
    2f1a:	ef 92       	push	r14
    2f1c:	ff 92       	push	r15
    2f1e:	0f 93       	push	r16
    2f20:	1f 93       	push	r17
    2f22:	6b 01       	movw	r12, r22
    2f24:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    2f26:	61 15       	cp	r22, r1
    2f28:	71 05       	cpc	r23, r1
    2f2a:	81 05       	cpc	r24, r1
    2f2c:	91 05       	cpc	r25, r1
    2f2e:	31 f4       	brne	.+12     	; 0x2f3c <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    2f30:	10 92 15 01 	sts	0x0115, r1
    UART.InputNumberDigits=1;
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 1d 01 	sts	0x011D, r24
    2f3a:	23 c0       	rjmp	.+70     	; 0x2f82 <UART_Determine_Digit_Numbers+0x6e>
    2f3c:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    2f3e:	0b 2d       	mov	r16, r11
    2f40:	10 e0       	ldi	r17, 0x00	; 0
    2f42:	0c 5e       	subi	r16, 0xEC	; 236
    2f44:	1e 4f       	sbci	r17, 0xFE	; 254
    2f46:	c7 01       	movw	r24, r14
    2f48:	b6 01       	movw	r22, r12
    2f4a:	2a e0       	ldi	r18, 0x0A	; 10
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	40 e0       	ldi	r20, 0x00	; 0
    2f50:	50 e0       	ldi	r21, 0x00	; 0
    2f52:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodsi4>
    2f56:	f8 01       	movw	r30, r16
    2f58:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    2f5a:	c7 01       	movw	r24, r14
    2f5c:	b6 01       	movw	r22, r12
    2f5e:	2a e0       	ldi	r18, 0x0A	; 10
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e0       	ldi	r20, 0x00	; 0
    2f64:	50 e0       	ldi	r21, 0x00	; 0
    2f66:	0e 94 b4 18 	call	0x3168	; 0x3168 <__udivmodsi4>
    2f6a:	c9 01       	movw	r24, r18
    2f6c:	da 01       	movw	r26, r20
    2f6e:	6c 01       	movw	r12, r24
    2f70:	7d 01       	movw	r14, r26
      i++;
    2f72:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    2f74:	c1 14       	cp	r12, r1
    2f76:	d1 04       	cpc	r13, r1
    2f78:	e1 04       	cpc	r14, r1
    2f7a:	f1 04       	cpc	r15, r1
    2f7c:	01 f7       	brne	.-64     	; 0x2f3e <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    2f7e:	b0 92 1d 01 	sts	0x011D, r11
  }
}
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	df 90       	pop	r13
    2f8c:	cf 90       	pop	r12
    2f8e:	bf 90       	pop	r11
    2f90:	08 95       	ret

00002f92 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2f92:	e0 91 1d 01 	lds	r30, 0x011D
    2f96:	0f c0       	rjmp	.+30     	; 0x2fb6 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    2f98:	2e 2f       	mov	r18, r30
    2f9a:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    2f9c:	e2 2f       	mov	r30, r18
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	ec 5e       	subi	r30, 0xEC	; 236
    2fa2:	fe 4f       	sbci	r31, 0xFE	; 254
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2fa6:	80 91 c0 00 	lds	r24, 0x00C0
    2faa:	85 ff       	sbrs	r24, 5
    2fac:	fc cf       	rjmp	.-8      	; 0x2fa6 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    2fae:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2fb0:	90 93 c6 00 	sts	0x00C6, r25
    2fb4:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2fb6:	ee 23       	and	r30, r30
    2fb8:	79 f7       	brne	.-34     	; 0x2f98 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    2fba:	08 95       	ret

00002fbc <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    2fbc:	9b 01       	movw	r18, r22
    2fbe:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2fc0:	97 ff       	sbrs	r25, 7
    2fc2:	0e c0       	rjmp	.+28     	; 0x2fe0 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2fc4:	80 91 c0 00 	lds	r24, 0x00C0
    2fc8:	85 ff       	sbrs	r24, 5
    2fca:	fc cf       	rjmp	.-8      	; 0x2fc4 <UART_Transmit_Number+0x8>
  UDR0=val;
    2fcc:	8d e2       	ldi	r24, 0x2D	; 45
    2fce:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2fd2:	50 95       	com	r21
    2fd4:	40 95       	com	r20
    2fd6:	30 95       	com	r19
    2fd8:	21 95       	neg	r18
    2fda:	3f 4f       	sbci	r19, 0xFF	; 255
    2fdc:	4f 4f       	sbci	r20, 0xFF	; 255
    2fde:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    2fe0:	ca 01       	movw	r24, r20
    2fe2:	b9 01       	movw	r22, r18
    2fe4:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    2fe8:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <UART_Transmit_Number_Digits>
}
    2fec:	08 95       	ret

00002fee <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
    2fee:	fc 01       	movw	r30, r24
    2ff0:	ec 5e       	subi	r30, 0xEC	; 236
    2ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff4:	83 85       	ldd	r24, Z+11	; 0x0b
}
    2ff6:	08 95       	ret

00002ff8 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
    2ff8:	20 91 41 01 	lds	r18, 0x0141
    2ffc:	30 91 42 01 	lds	r19, 0x0142
}
    3000:	c9 01       	movw	r24, r18
    3002:	08 95       	ret

00003004 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
    3004:	10 92 14 01 	sts	0x0114, r1
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	06 c0       	rjmp	.+12     	; 0x301a <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
    300e:	f9 01       	movw	r30, r18
    3010:	ec 5e       	subi	r30, 0xEC	; 236
    3012:	fe 4f       	sbci	r31, 0xFE	; 254
    3014:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
    3016:	2f 5f       	subi	r18, 0xFF	; 255
    3018:	3f 4f       	sbci	r19, 0xFF	; 255
    301a:	80 91 3f 01 	lds	r24, 0x013F
    301e:	90 91 40 01 	lds	r25, 0x0140
    3022:	28 17       	cp	r18, r24
    3024:	39 07       	cpc	r19, r25
    3026:	98 f3       	brcs	.-26     	; 0x300e <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
    3028:	10 92 42 01 	sts	0x0142, r1
    302c:	10 92 41 01 	sts	0x0141, r1
  #endif
}
    3030:	08 95       	ret

00003032 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	0f 92       	push	r0
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
    303c:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
    303e:	0e 94 8c 16 	call	0x2d18	; 0x2d18 <UART_Receive_Byte>
    3042:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
    3044:	80 91 14 01 	lds	r24, 0x0114
    3048:	88 23       	and	r24, r24
    304a:	19 f5       	brne	.+70     	; 0x3092 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	80 93 1e 01 	sts	0x011E, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
    3052:	e0 91 41 01 	lds	r30, 0x0141
    3056:	f0 91 42 01 	lds	r31, 0x0142
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	ec 5e       	subi	r30, 0xEC	; 236
    305e:	fe 4f       	sbci	r31, 0xFE	; 254
    3060:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
    3062:	80 91 41 01 	lds	r24, 0x0141
    3066:	90 91 42 01 	lds	r25, 0x0142
    306a:	01 96       	adiw	r24, 0x01	; 1
    306c:	90 93 42 01 	sts	0x0142, r25
    3070:	80 93 41 01 	sts	0x0141, r24

    if(UART.BufferIndex>=UART.BufferSize){
    3074:	20 91 41 01 	lds	r18, 0x0141
    3078:	30 91 42 01 	lds	r19, 0x0142
    307c:	80 91 3f 01 	lds	r24, 0x013F
    3080:	90 91 40 01 	lds	r25, 0x0140
    3084:	28 17       	cp	r18, r24
    3086:	39 07       	cpc	r19, r25
    3088:	20 f0       	brcs	.+8      	; 0x3092 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
    308a:	10 92 42 01 	sts	0x0142, r1
    308e:	10 92 41 01 	sts	0x0141, r1
    }
  }
}
    3092:	0f 90       	pop	r0
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
    309a:	1f 92       	push	r1
    309c:	0f 92       	push	r0
    309e:	0f b6       	in	r0, 0x3f	; 63
    30a0:	0f 92       	push	r0
    30a2:	11 24       	eor	r1, r1
    30a4:	2f 93       	push	r18
    30a6:	3f 93       	push	r19
    30a8:	4f 93       	push	r20
    30aa:	5f 93       	push	r21
    30ac:	6f 93       	push	r22
    30ae:	7f 93       	push	r23
    30b0:	8f 93       	push	r24
    30b2:	9f 93       	push	r25
    30b4:	af 93       	push	r26
    30b6:	bf 93       	push	r27
    30b8:	ef 93       	push	r30
    30ba:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
    30bc:	0e 94 19 18 	call	0x3032	; 0x3032 <UART_Interrupt_Service_Routine>
}
    30c0:	ff 91       	pop	r31
    30c2:	ef 91       	pop	r30
    30c4:	bf 91       	pop	r27
    30c6:	af 91       	pop	r26
    30c8:	9f 91       	pop	r25
    30ca:	8f 91       	pop	r24
    30cc:	7f 91       	pop	r23
    30ce:	6f 91       	pop	r22
    30d0:	5f 91       	pop	r21
    30d2:	4f 91       	pop	r20
    30d4:	3f 91       	pop	r19
    30d6:	2f 91       	pop	r18
    30d8:	0f 90       	pop	r0
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	0f 90       	pop	r0
    30de:	1f 90       	pop	r1
    30e0:	18 95       	reti

000030e2 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
    30e2:	ef 92       	push	r14
    30e4:	ff 92       	push	r15
    30e6:	0f 93       	push	r16
    30e8:	1f 93       	push	r17
    30ea:	7b 01       	movw	r14, r22
    30ec:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    30ee:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    30f2:	c8 01       	movw	r24, r16
    30f4:	b7 01       	movw	r22, r14
    30f6:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    30fa:	e1 ec       	ldi	r30, 0xC1	; 193
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	80 81       	ld	r24, Z
    3100:	88 60       	ori	r24, 0x08	; 8
    3102:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    3104:	a2 ec       	ldi	r26, 0xC2	; 194
    3106:	b0 e0       	ldi	r27, 0x00	; 0
    3108:	96 e0       	ldi	r25, 0x06	; 6
    310a:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    310c:	80 81       	ld	r24, Z
    310e:	80 61       	ori	r24, 0x10	; 16
    3110:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    3112:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    3114:	80 81       	ld	r24, Z
    3116:	80 68       	ori	r24, 0x80	; 128
    3118:	80 83       	st	Z, r24
  sei();
    311a:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
    311c:	0e 94 02 18 	call	0x3004	; 0x3004 <UART_Flush_Buffer>
}
    3120:	1f 91       	pop	r17
    3122:	0f 91       	pop	r16
    3124:	ff 90       	pop	r15
    3126:	ef 90       	pop	r14
    3128:	08 95       	ret

0000312a <__mulsi3>:
    312a:	62 9f       	mul	r22, r18
    312c:	d0 01       	movw	r26, r0
    312e:	73 9f       	mul	r23, r19
    3130:	f0 01       	movw	r30, r0
    3132:	82 9f       	mul	r24, r18
    3134:	e0 0d       	add	r30, r0
    3136:	f1 1d       	adc	r31, r1
    3138:	64 9f       	mul	r22, r20
    313a:	e0 0d       	add	r30, r0
    313c:	f1 1d       	adc	r31, r1
    313e:	92 9f       	mul	r25, r18
    3140:	f0 0d       	add	r31, r0
    3142:	83 9f       	mul	r24, r19
    3144:	f0 0d       	add	r31, r0
    3146:	74 9f       	mul	r23, r20
    3148:	f0 0d       	add	r31, r0
    314a:	65 9f       	mul	r22, r21
    314c:	f0 0d       	add	r31, r0
    314e:	99 27       	eor	r25, r25
    3150:	72 9f       	mul	r23, r18
    3152:	b0 0d       	add	r27, r0
    3154:	e1 1d       	adc	r30, r1
    3156:	f9 1f       	adc	r31, r25
    3158:	63 9f       	mul	r22, r19
    315a:	b0 0d       	add	r27, r0
    315c:	e1 1d       	adc	r30, r1
    315e:	f9 1f       	adc	r31, r25
    3160:	bd 01       	movw	r22, r26
    3162:	cf 01       	movw	r24, r30
    3164:	11 24       	eor	r1, r1
    3166:	08 95       	ret

00003168 <__udivmodsi4>:
    3168:	a1 e2       	ldi	r26, 0x21	; 33
    316a:	1a 2e       	mov	r1, r26
    316c:	aa 1b       	sub	r26, r26
    316e:	bb 1b       	sub	r27, r27
    3170:	fd 01       	movw	r30, r26
    3172:	0d c0       	rjmp	.+26     	; 0x318e <__udivmodsi4_ep>

00003174 <__udivmodsi4_loop>:
    3174:	aa 1f       	adc	r26, r26
    3176:	bb 1f       	adc	r27, r27
    3178:	ee 1f       	adc	r30, r30
    317a:	ff 1f       	adc	r31, r31
    317c:	a2 17       	cp	r26, r18
    317e:	b3 07       	cpc	r27, r19
    3180:	e4 07       	cpc	r30, r20
    3182:	f5 07       	cpc	r31, r21
    3184:	20 f0       	brcs	.+8      	; 0x318e <__udivmodsi4_ep>
    3186:	a2 1b       	sub	r26, r18
    3188:	b3 0b       	sbc	r27, r19
    318a:	e4 0b       	sbc	r30, r20
    318c:	f5 0b       	sbc	r31, r21

0000318e <__udivmodsi4_ep>:
    318e:	66 1f       	adc	r22, r22
    3190:	77 1f       	adc	r23, r23
    3192:	88 1f       	adc	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	1a 94       	dec	r1
    3198:	69 f7       	brne	.-38     	; 0x3174 <__udivmodsi4_loop>
    319a:	60 95       	com	r22
    319c:	70 95       	com	r23
    319e:	80 95       	com	r24
    31a0:	90 95       	com	r25
    31a2:	9b 01       	movw	r18, r22
    31a4:	ac 01       	movw	r20, r24
    31a6:	bd 01       	movw	r22, r26
    31a8:	cf 01       	movw	r24, r30
    31aa:	08 95       	ret

000031ac <__divmodsi4>:
    31ac:	97 fb       	bst	r25, 7
    31ae:	09 2e       	mov	r0, r25
    31b0:	05 26       	eor	r0, r21
    31b2:	0e d0       	rcall	.+28     	; 0x31d0 <__divmodsi4_neg1>
    31b4:	57 fd       	sbrc	r21, 7
    31b6:	04 d0       	rcall	.+8      	; 0x31c0 <__divmodsi4_neg2>
    31b8:	d7 df       	rcall	.-82     	; 0x3168 <__udivmodsi4>
    31ba:	0a d0       	rcall	.+20     	; 0x31d0 <__divmodsi4_neg1>
    31bc:	00 1c       	adc	r0, r0
    31be:	38 f4       	brcc	.+14     	; 0x31ce <__divmodsi4_exit>

000031c0 <__divmodsi4_neg2>:
    31c0:	50 95       	com	r21
    31c2:	40 95       	com	r20
    31c4:	30 95       	com	r19
    31c6:	21 95       	neg	r18
    31c8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ca:	4f 4f       	sbci	r20, 0xFF	; 255
    31cc:	5f 4f       	sbci	r21, 0xFF	; 255

000031ce <__divmodsi4_exit>:
    31ce:	08 95       	ret

000031d0 <__divmodsi4_neg1>:
    31d0:	f6 f7       	brtc	.-4      	; 0x31ce <__divmodsi4_exit>
    31d2:	90 95       	com	r25
    31d4:	80 95       	com	r24
    31d6:	70 95       	com	r23
    31d8:	61 95       	neg	r22
    31da:	7f 4f       	sbci	r23, 0xFF	; 255
    31dc:	8f 4f       	sbci	r24, 0xFF	; 255
    31de:	9f 4f       	sbci	r25, 0xFF	; 255
    31e0:	08 95       	ret

000031e2 <_exit>:
    31e2:	f8 94       	cli

000031e4 <__stop_program>:
    31e4:	ff cf       	rjmp	.-2      	; 0x31e4 <__stop_program>
