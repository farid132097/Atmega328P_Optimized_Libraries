
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002fb2  00003046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  0080011a  0080011a  00003060  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017d5  00000000  00000000  000030c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004bb0  00000000  00000000  00004895  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d0  00000000  00000000  00009445  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002337  00000000  00000000  00009a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a90  00000000  00000000  0000bd4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a35  00000000  00000000  0000c7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b38  00000000  00000000  0000e211  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000fd49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 3d 17 	jmp	0x2e7a	; 0x2e7a <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 eb       	ldi	r30, 0xB2	; 178
      7c:	ff e2       	ldi	r31, 0x2F	; 47
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <Timebase_Init>
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Timebase_DownCounter_SS_Set_Securely>
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Timebase_DownCounter_SS_Set_Securely>
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Timebase_DownCounter_SS_Set_Securely>
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Timebase_DownCounter_SS_Set_Securely>
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 57 05 	call	0xaae	; 0xaae <Timebase_Timer_Await_SubSeconds>
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
     120:	5e 9a       	sbi	0x0b, 6	; 11
     122:	0e 94 db 16 	call	0x2db6	; 0x2db6 <Timebase_Main_Loop_Executables>
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
     132:	11 92       	st	Z+, r1
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
     13c:	10 82       	st	Z, r1
     13e:	11 82       	std	Z+1, r1	; 0x01
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
     19e:	20 93 c4 00 	sts	0x00C4, r18
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
     1d2:	78 94       	sei
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:
     1d6:	98 2f       	mov	r25, r24
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
     1e0:	90 93 c6 00 	sts	0x00C6, r25
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	19 82       	std	Y+1, r1	; 0x01
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
     220:	10 92 1a 01 	sts	0x011A, r1
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:
     22e:	80 91 24 01 	lds	r24, 0x0124
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:
     234:	10 92 24 01 	sts	0x0124, r1
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
     29c:	34 97       	sbiw	r30, 0x04	; 4
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
     2d4:	20 93 c6 00 	sts	0x00C6, r18
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	00 e3       	ldi	r16, 0x30	; 48
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
     3ba:	e0 93 c6 00 	sts	0x00C6, r30
     3be:	2f 5f       	subi	r18, 0xFF	; 255
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
     3fe:	10 92 1b 01 	sts	0x011B, r1
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
     440:	b3 94       	inc	r11
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
     44c:	b0 92 23 01 	sts	0x0123, r11
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
     47c:	90 5d       	subi	r25, 0xD0	; 208
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
     50a:	19 82       	std	Y+1, r1	; 0x01
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
     5e0:	9c 93       	st	X, r25
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
     5e8:	78 94       	sei
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSeconds = 0;
     62c:	10 92 54 01 	sts	0x0154, r1
     630:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     634:	10 92 55 01 	sts	0x0155, r1
     638:	10 92 56 01 	sts	0x0156, r1
     63c:	10 92 57 01 	sts	0x0157, r1
     640:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     644:	10 92 4f 01 	sts	0x014F, r1
     648:	10 92 50 01 	sts	0x0150, r1
     64c:	10 92 51 01 	sts	0x0151, r1
     650:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     654:	10 92 5f 01 	sts	0x015F, r1
     658:	10 92 60 01 	sts	0x0160, r1
     65c:	10 92 61 01 	sts	0x0161, r1
     660:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     664:	10 92 63 01 	sts	0x0163, r1
     668:	10 92 64 01 	sts	0x0164, r1
     66c:	10 92 65 01 	sts	0x0165, r1
     670:	10 92 66 01 	sts	0x0166, r1
	Timebase->Time.Status = 0;
     674:	10 92 67 01 	sts	0x0167, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     678:	10 92 68 01 	sts	0x0168, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     67c:	10 92 69 01 	sts	0x0169, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     680:	10 92 83 01 	sts	0x0183, r1
    Timebase->UpCounter[i].EndValue = 0;
     684:	10 92 84 01 	sts	0x0184, r1
     688:	10 92 85 01 	sts	0x0185, r1
     68c:	10 92 86 01 	sts	0x0186, r1
     690:	10 92 87 01 	sts	0x0187, r1
    Timebase->UpCounter[i].Target = 0;
     694:	10 92 88 01 	sts	0x0188, r1
     698:	10 92 89 01 	sts	0x0189, r1
     69c:	10 92 8a 01 	sts	0x018A, r1
     6a0:	10 92 8b 01 	sts	0x018B, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6a4:	10 92 8c 01 	sts	0x018C, r1
     6a8:	10 92 8d 01 	sts	0x018D, r1
     6ac:	10 92 8e 01 	sts	0x018E, r1
     6b0:	10 92 8f 01 	sts	0x018F, r1
    Timebase->UpCounter[i].Value = 0;
     6b4:	10 92 90 01 	sts	0x0190, r1
     6b8:	10 92 91 01 	sts	0x0191, r1
     6bc:	10 92 92 01 	sts	0x0192, r1
     6c0:	10 92 93 01 	sts	0x0193, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6c4:	10 92 94 01 	sts	0x0194, r1
     6c8:	10 92 95 01 	sts	0x0195, r1
     6cc:	10 92 96 01 	sts	0x0196, r1
     6d0:	10 92 97 01 	sts	0x0197, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6d4:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6d8:	10 92 6b 01 	sts	0x016B, r1
     6dc:	10 92 6c 01 	sts	0x016C, r1
     6e0:	10 92 6d 01 	sts	0x016D, r1
     6e4:	10 92 6e 01 	sts	0x016E, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     6e8:	10 92 6f 01 	sts	0x016F, r1
     6ec:	10 92 70 01 	sts	0x0170, r1
     6f0:	10 92 71 01 	sts	0x0171, r1
     6f4:	10 92 72 01 	sts	0x0172, r1
    Timebase->UpCounterSS[i].Target = 0;
     6f8:	10 92 73 01 	sts	0x0173, r1
     6fc:	10 92 74 01 	sts	0x0174, r1
     700:	10 92 75 01 	sts	0x0175, r1
     704:	10 92 76 01 	sts	0x0176, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     708:	10 92 77 01 	sts	0x0177, r1
     70c:	10 92 78 01 	sts	0x0178, r1
     710:	10 92 79 01 	sts	0x0179, r1
     714:	10 92 7a 01 	sts	0x017A, r1
    Timebase->UpCounterSS[i].Value = 0;
     718:	10 92 7b 01 	sts	0x017B, r1
     71c:	10 92 7c 01 	sts	0x017C, r1
     720:	10 92 7d 01 	sts	0x017D, r1
     724:	10 92 7e 01 	sts	0x017E, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     728:	10 92 7f 01 	sts	0x017F, r1
     72c:	10 92 80 01 	sts	0x0180, r1
     730:	10 92 81 01 	sts	0x0181, r1
     734:	10 92 82 01 	sts	0x0182, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     738:	10 92 a9 01 	sts	0x01A9, r1
    Timebase->DownCounter[i].EndValue = 0;
     73c:	10 92 aa 01 	sts	0x01AA, r1
     740:	10 92 ab 01 	sts	0x01AB, r1
     744:	10 92 ac 01 	sts	0x01AC, r1
     748:	10 92 ad 01 	sts	0x01AD, r1
    Timebase->DownCounter[i].Value = 0;
     74c:	10 92 ae 01 	sts	0x01AE, r1
     750:	10 92 af 01 	sts	0x01AF, r1
     754:	10 92 b0 01 	sts	0x01B0, r1
     758:	10 92 b1 01 	sts	0x01B1, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     75c:	10 92 b2 01 	sts	0x01B2, r1
     760:	10 92 b3 01 	sts	0x01B3, r1
     764:	10 92 b4 01 	sts	0x01B4, r1
     768:	10 92 b5 01 	sts	0x01B5, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     76c:	10 92 98 01 	sts	0x0198, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     770:	10 92 99 01 	sts	0x0199, r1
     774:	10 92 9a 01 	sts	0x019A, r1
     778:	10 92 9b 01 	sts	0x019B, r1
     77c:	10 92 9c 01 	sts	0x019C, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     780:	10 92 9d 01 	sts	0x019D, r1
     784:	10 92 9e 01 	sts	0x019E, r1
     788:	10 92 9f 01 	sts	0x019F, r1
     78c:	10 92 a0 01 	sts	0x01A0, r1
    Timebase->DownCounterSS[i].Value = 0;
     790:	10 92 a1 01 	sts	0x01A1, r1
     794:	10 92 a2 01 	sts	0x01A2, r1
     798:	10 92 a3 01 	sts	0x01A3, r1
     79c:	10 92 a4 01 	sts	0x01A4, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7a0:	10 92 a5 01 	sts	0x01A5, r1
     7a4:	10 92 a6 01 	sts	0x01A6, r1
     7a8:	10 92 a7 01 	sts	0x01A7, r1
     7ac:	10 92 a8 01 	sts	0x01A8, r1
  }
  #endif
  
}
     7b0:	08 95       	ret

000007b2 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7b2:	7f 92       	push	r7
     7b4:	8f 92       	push	r8
     7b6:	9f 92       	push	r9
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	2a 97       	sbiw	r28, 0x0a	; 10
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     7de:	c0 90 49 01 	lds	r12, 0x0149
     7e2:	d0 90 4a 01 	lds	r13, 0x014A
     7e6:	f6 01       	movw	r30, r12
     7e8:	80 81       	ld	r24, Z
     7ea:	80 ff       	sbrs	r24, 0
     7ec:	31 c0       	rjmp	.+98     	; 0x850 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     7ee:	01 30       	cpi	r16, 0x01	; 1
     7f0:	11 05       	cpc	r17, r1
     7f2:	11 f4       	brne	.+4      	; 0x7f8 <Timebase_Timer_Config+0x46>
     7f4:	96 e0       	ldi	r25, 0x06	; 6
     7f6:	19 c0       	rjmp	.+50     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     7f8:	02 30       	cpi	r16, 0x02	; 2
     7fa:	11 05       	cpc	r17, r1
     7fc:	11 f4       	brne	.+4      	; 0x802 <Timebase_Timer_Config+0x50>
     7fe:	95 e0       	ldi	r25, 0x05	; 5
     800:	14 c0       	rjmp	.+40     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     802:	04 30       	cpi	r16, 0x04	; 4
     804:	11 05       	cpc	r17, r1
     806:	11 f4       	brne	.+4      	; 0x80c <Timebase_Timer_Config+0x5a>
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	0f c0       	rjmp	.+30     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     80c:	08 30       	cpi	r16, 0x08	; 8
     80e:	11 05       	cpc	r17, r1
     810:	11 f4       	brne	.+4      	; 0x816 <Timebase_Timer_Config+0x64>
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0a c0       	rjmp	.+20     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     816:	00 31       	cpi	r16, 0x10	; 16
     818:	11 05       	cpc	r17, r1
     81a:	11 f4       	brne	.+4      	; 0x820 <Timebase_Timer_Config+0x6e>
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	05 c0       	rjmp	.+10     	; 0x82a <Timebase_Timer_Config+0x78>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	00 32       	cpi	r16, 0x20	; 32
     824:	11 05       	cpc	r17, r1
     826:	09 f4       	brne	.+2      	; 0x82a <Timebase_Timer_Config+0x78>
     828:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     82a:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     82c:	84 b7       	in	r24, 0x34	; 52
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     832:	80 91 60 00 	lds	r24, 0x0060
     836:	80 68       	ori	r24, 0x80	; 128
     838:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     83c:	80 91 60 00 	lds	r24, 0x0060
     840:	88 61       	ori	r24, 0x18	; 24
     842:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     846:	90 64       	ori	r25, 0x40	; 64
     848:	90 93 60 00 	sts	0x0060, r25
    sei();
     84c:	78 94       	sei
     84e:	67 c0       	rjmp	.+206    	; 0x91e <__stack+0x1f>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     850:	81 fd       	sbrc	r24, 1
     852:	65 c0       	rjmp	.+202    	; 0x91e <__stack+0x1f>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     854:	82 ff       	sbrs	r24, 2
     856:	63 c0       	rjmp	.+198    	; 0x91e <__stack+0x1f>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     858:	de 01       	movw	r26, r28
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	e0 e1       	ldi	r30, 0x10	; 16
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	81 50       	subi	r24, 0x01	; 1
     868:	e1 f7       	brne	.-8      	; 0x862 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     86a:	98 01       	movw	r18, r16
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	7b e1       	ldi	r23, 0x1B	; 27
     874:	87 eb       	ldi	r24, 0xB7	; 183
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
     87c:	72 2e       	mov	r7, r18
     87e:	83 2e       	mov	r8, r19
     880:	94 2e       	mov	r9, r20
     882:	e5 2e       	mov	r14, r21
     884:	5e 01       	movw	r10, r28
     886:	08 94       	sec
     888:	a1 1c       	adc	r10, r1
     88a:	b1 1c       	adc	r11, r1
     88c:	c9 01       	movw	r24, r18
     88e:	da 01       	movw	r26, r20
     890:	9c 01       	movw	r18, r24
     892:	ad 01       	movw	r20, r26
     894:	ff 24       	eor	r15, r15
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     898:	f5 01       	movw	r30, r10
     89a:	21 91       	ld	r18, Z+
     89c:	31 91       	ld	r19, Z+
     89e:	5f 01       	movw	r10, r30
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	67 2d       	mov	r22, r7
     8a6:	78 2d       	mov	r23, r8
     8a8:	89 2d       	mov	r24, r9
     8aa:	9e 2d       	mov	r25, r14
     8ac:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
     8b0:	c9 01       	movw	r24, r18
     8b2:	da 01       	movw	r26, r20
     8b4:	9c 01       	movw	r18, r24
     8b6:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8b8:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8ba:	f5 e0       	ldi	r31, 0x05	; 5
     8bc:	ff 16       	cp	r15, r31
     8be:	31 f0       	breq	.+12     	; 0x8cc <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8c0:	2f 3f       	cpi	r18, 0xFF	; 255
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <Timebase_Timer_Config+0x11a>
     8ca:	34 f7       	brge	.-52     	; 0x898 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8cc:	8f 2d       	mov	r24, r15
     8ce:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8d0:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8d2:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8d4:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8d8:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8da:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8dc:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     8de:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     8e0:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     8e2:	88 23       	and	r24, r24
     8e4:	11 f4       	brne	.+4      	; 0x8ea <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 1){
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0b c0       	rjmp	.+22     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 2){
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	11 f4       	brne	.+4      	; 0x8fa <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 3){
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
	  TCCR0B = (1<<CS02);
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 4){
     902:	84 30       	cpi	r24, 0x04	; 4
     904:	11 f4       	brne	.+4      	; 0x90a <__stack+0xb>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     90a:	82 2f       	mov	r24, r18
     90c:	80 95       	com	r24
     90e:	f6 01       	movw	r30, r12
     910:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     912:	83 81       	ldd	r24, Z+3	; 0x03
     914:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 6e 00 	sts	0x006E, r24
    sei();
     91c:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     91e:	f6 01       	movw	r30, r12
     920:	12 83       	std	Z+2, r17	; 0x02
     922:	01 83       	std	Z+1, r16	; 0x01
}
     924:	2a 96       	adiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	08 95       	ret

0000094c <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     94c:	f8 94       	cli
}
     94e:	08 95       	ret

00000950 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     950:	78 94       	sei
}
     952:	08 95       	ret

00000954 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     954:	e0 91 49 01 	lds	r30, 0x0149
     958:	f0 91 4a 01 	lds	r31, 0x014A
     95c:	86 8d       	ldd	r24, Z+30	; 0x1e
}
     95e:	08 95       	ret

00000960 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     960:	e0 91 49 01 	lds	r30, 0x0149
     964:	f0 91 4a 01 	lds	r31, 0x014A
     968:	86 8d       	ldd	r24, Z+30	; 0x1e
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     96a:	8f 33       	cpi	r24, 0x3F	; 63
     96c:	18 f4       	brcc	.+6      	; 0x974 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     96e:	86 8d       	ldd	r24, Z+30	; 0x1e
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	86 8f       	std	Z+30, r24	; 0x1e
     974:	08 95       	ret

00000976 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     976:	e0 91 49 01 	lds	r30, 0x0149
     97a:	f0 91 4a 01 	lds	r31, 0x014A
     97e:	86 8d       	ldd	r24, Z+30	; 0x1e
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     980:	88 23       	and	r24, r24
     982:	19 f0       	breq	.+6      	; 0x98a <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     984:	86 8d       	ldd	r24, Z+30	; 0x1e
     986:	81 50       	subi	r24, 0x01	; 1
     988:	86 8f       	std	Z+30, r24	; 0x1e
     98a:	08 95       	ret

0000098c <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     98c:	e0 91 49 01 	lds	r30, 0x0149
     990:	f0 91 4a 01 	lds	r31, 0x014A
     994:	16 8e       	std	Z+30, r1	; 0x1e
}
     996:	08 95       	ret

00000998 <Timebase_Timer_Get_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     998:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     99a:	e0 91 49 01 	lds	r30, 0x0149
     99e:	f0 91 4a 01 	lds	r31, 0x014A
     9a2:	20 85       	ldd	r18, Z+8	; 0x08
     9a4:	31 85       	ldd	r19, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9a6:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_ss;
  #else
  return Timebase->Time.SubSeconds;
  #endif
}
     9a8:	c9 01       	movw	r24, r18
     9aa:	08 95       	ret

000009ac <Timebase_Timer_Get_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9ac:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9ae:	e0 91 49 01 	lds	r30, 0x0149
     9b2:	f0 91 4a 01 	lds	r31, 0x014A
     9b6:	22 85       	ldd	r18, Z+10	; 0x0a
     9b8:	33 85       	ldd	r19, Z+11	; 0x0b
     9ba:	44 85       	ldd	r20, Z+12	; 0x0c
     9bc:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9be:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_s;
  #else
  Timebase->Time.Seconds;
  #endif
}
     9c0:	b9 01       	movw	r22, r18
     9c2:	ca 01       	movw	r24, r20
     9c4:	08 95       	ret

000009c6 <Timebase_Timer_Set_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9c6:	f8 94       	cli
}

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.SubSeconds = value;
     9c8:	e0 91 49 01 	lds	r30, 0x0149
     9cc:	f0 91 4a 01 	lds	r31, 0x014A
     9d0:	91 87       	std	Z+9, r25	; 0x09
     9d2:	80 87       	std	Z+8, r24	; 0x08
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9d4:	78 94       	sei
  Timebase->Time.SubSeconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.SubSeconds = value;
  #endif
}
     9d6:	08 95       	ret

000009d8 <Timebase_Timer_Set_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9d8:	f8 94       	cli
}

void Timebase_Timer_Set_Seconds(int32_t value){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.Seconds = value;
     9da:	e0 91 49 01 	lds	r30, 0x0149
     9de:	f0 91 4a 01 	lds	r31, 0x014A
     9e2:	62 87       	std	Z+10, r22	; 0x0a
     9e4:	73 87       	std	Z+11, r23	; 0x0b
     9e6:	84 87       	std	Z+12, r24	; 0x0c
     9e8:	95 87       	std	Z+13, r25	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9ea:	78 94       	sei
  Timebase->Time.Seconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.Seconds = value;
  #endif
}
     9ec:	08 95       	ret

000009ee <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     9ee:	6f 92       	push	r6
     9f0:	7f 92       	push	r7
     9f2:	8f 92       	push	r8
     9f4:	9f 92       	push	r9
     9f6:	af 92       	push	r10
     9f8:	bf 92       	push	r11
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a0c:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a0e:	c0 91 49 01 	lds	r28, 0x0149
     a12:	d0 91 4a 01 	lds	r29, 0x014A
     a16:	e8 84       	ldd	r14, Y+8	; 0x08
     a18:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a1a:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a1c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a1e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a20:	3b 85       	ldd	r19, Y+11	; 0x0b
     a22:	4c 85       	ldd	r20, Y+12	; 0x0c
     a24:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a26:	78 94       	sei
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	7a 81       	ldd	r23, Y+2	; 0x02
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 67 17 	call	0x2ece	; 0x2ece <__mulsi3>
     a34:	3b 01       	movw	r6, r22
     a36:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	6e 0c       	add	r6, r14
     a3e:	7f 1c       	adc	r7, r15
     a40:	80 1e       	adc	r8, r16
     a42:	91 1e       	adc	r9, r17
  smpl_val += value;
     a44:	cc 24       	eor	r12, r12
     a46:	dd 24       	eor	r13, r13
     a48:	6a 0c       	add	r6, r10
     a4a:	7b 1c       	adc	r7, r11
     a4c:	8c 1c       	adc	r8, r12
     a4e:	9d 1c       	adc	r9, r13
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <Timebase_Timer_Delay_SubSeconds+0x98>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a5a:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a5c:	e8 84       	ldd	r14, Y+8	; 0x08
     a5e:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a60:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a62:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a64:	2a 85       	ldd	r18, Y+10	; 0x0a
     a66:	3b 85       	ldd	r19, Y+11	; 0x0b
     a68:	4c 85       	ldd	r20, Y+12	; 0x0c
     a6a:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a6c:	78 94       	sei
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     a6e:	69 81       	ldd	r22, Y+1	; 0x01
     a70:	7a 81       	ldd	r23, Y+2	; 0x02
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 67 17 	call	0x2ece	; 0x2ece <__mulsi3>
	curr_val += curr_ss;
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	6e 0d       	add	r22, r14
     a80:	7f 1d       	adc	r23, r15
     a82:	80 1f       	adc	r24, r16
     a84:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     a86:	66 15       	cp	r22, r6
     a88:	77 05       	cpc	r23, r7
     a8a:	88 05       	cpc	r24, r8
     a8c:	99 05       	cpc	r25, r9
     a8e:	2c f3       	brlt	.-54     	; 0xa5a <Timebase_Timer_Delay_SubSeconds+0x6c>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	af 90       	pop	r10
     aa4:	9f 90       	pop	r9
     aa6:	8f 90       	pop	r8
     aa8:	7f 90       	pop	r7
     aaa:	6f 90       	pop	r6
     aac:	08 95       	ret

00000aae <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     aae:	bc 01       	movw	r22, r24

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ab0:	e0 91 49 01 	lds	r30, 0x0149
     ab4:	f0 91 4a 01 	lds	r31, 0x014A

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ab8:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     aba:	80 85       	ldd	r24, Z+8	; 0x08
     abc:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     abe:	78 94       	sei
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     ac0:	24 81       	ldd	r18, Z+4	; 0x04
     ac2:	35 81       	ldd	r19, Z+5	; 0x05
     ac4:	46 81       	ldd	r20, Z+6	; 0x06
     ac6:	57 81       	ldd	r21, Z+7	; 0x07
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	a4 07       	cpc	r26, r20
     ad2:	b5 07       	cpc	r27, r21
     ad4:	89 f7       	brne	.-30     	; 0xab8 <Timebase_Timer_Await_SubSeconds+0xa>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ad6:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ad8:	80 85       	ldd	r24, Z+8	; 0x08
     ada:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     adc:	78 94       	sei


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     ade:	86 0f       	add	r24, r22
     ae0:	97 1f       	adc	r25, r23
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	84 83       	std	Z+4, r24	; 0x04
     ae8:	95 83       	std	Z+5, r25	; 0x05
     aea:	a6 83       	std	Z+6, r26	; 0x06
     aec:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     aee:	24 81       	ldd	r18, Z+4	; 0x04
     af0:	35 81       	ldd	r19, Z+5	; 0x05
     af2:	46 81       	ldd	r20, Z+6	; 0x06
     af4:	57 81       	ldd	r21, Z+7	; 0x07
     af6:	81 81       	ldd	r24, Z+1	; 0x01
     af8:	92 81       	ldd	r25, Z+2	; 0x02
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	4a 07       	cpc	r20, r26
     b04:	5b 07       	cpc	r21, r27
     b06:	84 f0       	brlt	.+32     	; 0xb28 <Timebase_Timer_Await_SubSeconds+0x7a>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b08:	24 81       	ldd	r18, Z+4	; 0x04
     b0a:	35 81       	ldd	r19, Z+5	; 0x05
     b0c:	46 81       	ldd	r20, Z+6	; 0x06
     b0e:	57 81       	ldd	r21, Z+7	; 0x07
     b10:	81 81       	ldd	r24, Z+1	; 0x01
     b12:	92 81       	ldd	r25, Z+2	; 0x02
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	28 1b       	sub	r18, r24
     b1a:	39 0b       	sbc	r19, r25
     b1c:	4a 0b       	sbc	r20, r26
     b1e:	5b 0b       	sbc	r21, r27
     b20:	24 83       	std	Z+4, r18	; 0x04
     b22:	35 83       	std	Z+5, r19	; 0x05
     b24:	46 83       	std	Z+6, r20	; 0x06
     b26:	57 83       	std	Z+7, r21	; 0x07
     b28:	08 95       	ret

00000b2a <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b2a:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b2c:	e0 91 49 01 	lds	r30, 0x0149
     b30:	f0 91 4a 01 	lds	r31, 0x014A
     b34:	22 85       	ldd	r18, Z+10	; 0x0a
     b36:	33 85       	ldd	r19, Z+11	; 0x0b
     b38:	44 85       	ldd	r20, Z+12	; 0x0c
     b3a:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b3c:	78 94       	sei


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	a4 1f       	adc	r26, r20
     b48:	b5 1f       	adc	r27, r21
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b54:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b56:	22 85       	ldd	r18, Z+10	; 0x0a
     b58:	33 85       	ldd	r19, Z+11	; 0x0b
     b5a:	44 85       	ldd	r20, Z+12	; 0x0c
     b5c:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b5e:	78 94       	sei

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	4a 07       	cpc	r20, r26
     b66:	5b 07       	cpc	r21, r27
     b68:	ac f3       	brlt	.-22     	; 0xb54 <Timebase_Timer_Delay_Seconds+0x2a>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     b6a:	08 95       	ret

00000b6c <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b6c:	e0 91 49 01 	lds	r30, 0x0149
     b70:	f0 91 4a 01 	lds	r31, 0x014A
     b74:	14 8a       	std	Z+20, r1	; 0x14
     b76:	15 8a       	std	Z+21, r1	; 0x15
     b78:	16 8a       	std	Z+22, r1	; 0x16
     b7a:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.StartTimeSubSeconds = 0;
     b7c:	10 8e       	std	Z+24, r1	; 0x18
     b7e:	11 8e       	std	Z+25, r1	; 0x19
     b80:	12 8e       	std	Z+26, r1	; 0x1a
     b82:	13 8e       	std	Z+27, r1	; 0x1b
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b84:	14 8e       	std	Z+28, r1	; 0x1c
}
     b86:	08 95       	ret

00000b88 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     b88:	e0 91 49 01 	lds	r30, 0x0149
     b8c:	f0 91 4a 01 	lds	r31, 0x014A
     b90:	84 8d       	ldd	r24, Z+28	; 0x1c
     b92:	88 23       	and	r24, r24
     b94:	b1 f4       	brne	.+44     	; 0xbc2 <Timebase_Window_Timer_Start+0x3a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b96:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b98:	82 85       	ldd	r24, Z+10	; 0x0a
     b9a:	93 85       	ldd	r25, Z+11	; 0x0b
     b9c:	a4 85       	ldd	r26, Z+12	; 0x0c
     b9e:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ba0:	78 94       	sei
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     ba2:	84 8b       	std	Z+20, r24	; 0x14
     ba4:	95 8b       	std	Z+21, r25	; 0x15
     ba6:	a6 8b       	std	Z+22, r26	; 0x16
     ba8:	b7 8b       	std	Z+23, r27	; 0x17

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     baa:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bac:	80 85       	ldd	r24, Z+8	; 0x08
     bae:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bb0:	78 94       	sei
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	80 8f       	std	Z+24, r24	; 0x18
     bb8:	91 8f       	std	Z+25, r25	; 0x19
     bba:	a2 8f       	std	Z+26, r26	; 0x1a
     bbc:	b3 8f       	std	Z+27, r27	; 0x1b
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	84 8f       	std	Z+28, r24	; 0x1c
     bc2:	08 95       	ret

00000bc4 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bd0:	c0 91 49 01 	lds	r28, 0x0149
     bd4:	d0 91 4a 01 	lds	r29, 0x014A
     bd8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <Timebase_Window_Timer_Get_Interval+0x22>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <Timebase_Window_Timer_Get_Interval+0x70>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     be6:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     be8:	2a 85       	ldd	r18, Y+10	; 0x0a
     bea:	3b 85       	ldd	r19, Y+11	; 0x0b
     bec:	4c 85       	ldd	r20, Y+12	; 0x0c
     bee:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf0:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bf2:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bf4:	88 85       	ldd	r24, Y+8	; 0x08
     bf6:	99 85       	ldd	r25, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf8:	78 94       	sei

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     bfa:	7c 01       	movw	r14, r24
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     c00:	8c 89       	ldd	r24, Y+20	; 0x14
     c02:	9d 89       	ldd	r25, Y+21	; 0x15
     c04:	ae 89       	ldd	r26, Y+22	; 0x16
     c06:	bf 89       	ldd	r27, Y+23	; 0x17
     c08:	28 1b       	sub	r18, r24
     c0a:	39 0b       	sbc	r19, r25
     c0c:	4a 0b       	sbc	r20, r26
     c0e:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c10:	69 81       	ldd	r22, Y+1	; 0x01
     c12:	7a 81       	ldd	r23, Y+2	; 0x02
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 67 17 	call	0x2ece	; 0x2ece <__mulsi3>
	curr_s += curr_ss;
     c1c:	28 8d       	ldd	r18, Y+24	; 0x18
     c1e:	39 8d       	ldd	r19, Y+25	; 0x19
     c20:	4a 8d       	ldd	r20, Y+26	; 0x1a
     c22:	5b 8d       	ldd	r21, Y+27	; 0x1b
     c24:	e2 1a       	sub	r14, r18
     c26:	f3 0a       	sbc	r15, r19
     c28:	04 0b       	sbc	r16, r20
     c2a:	15 0b       	sbc	r17, r21
     c2c:	e6 0e       	add	r14, r22
     c2e:	f7 1e       	adc	r15, r23
     c30:	08 1f       	adc	r16, r24
     c32:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     c34:	b7 01       	movw	r22, r14
     c36:	c8 01       	movw	r24, r16
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     c46:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Timebase_Window_Timer_Get_Interval>
     c4a:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c4c:	e0 91 49 01 	lds	r30, 0x0149
     c50:	f0 91 4a 01 	lds	r31, 0x014A
     c54:	84 8d       	ldd	r24, Z+28	; 0x1c
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	49 f4       	brne	.+18     	; 0xc6c <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c5a:	14 8a       	std	Z+20, r1	; 0x14
     c5c:	15 8a       	std	Z+21, r1	; 0x15
     c5e:	16 8a       	std	Z+22, r1	; 0x16
     c60:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.StartTimeSubSeconds = 0;
     c62:	10 8e       	std	Z+24, r1	; 0x18
     c64:	11 8e       	std	Z+25, r1	; 0x19
     c66:	12 8e       	std	Z+26, r1	; 0x1a
     c68:	13 8e       	std	Z+27, r1	; 0x1b
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c6a:	14 8e       	std	Z+28, r1	; 0x1c
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     c6c:	82 2f       	mov	r24, r18
     c6e:	08 95       	ret

00000c70 <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     c70:	e0 91 49 01 	lds	r30, 0x0149
     c74:	f0 91 4a 01 	lds	r31, 0x014A
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	29 e1       	ldi	r18, 0x19	; 25
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	ac 01       	movw	r20, r24
     c80:	42 9f       	mul	r20, r18
     c82:	c0 01       	movw	r24, r0
     c84:	43 9f       	mul	r20, r19
     c86:	90 0d       	add	r25, r0
     c88:	52 9f       	mul	r21, r18
     c8a:	90 0d       	add	r25, r0
     c8c:	11 24       	eor	r1, r1
     c8e:	e8 0f       	add	r30, r24
     c90:	f9 1f       	adc	r31, r25
     c92:	87 8d       	ldd	r24, Z+31	; 0x1f
     c94:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     c96:	8f 70       	andi	r24, 0x0F	; 15
     c98:	08 95       	ret

00000c9a <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c9a:	e0 91 49 01 	lds	r30, 0x0149
     c9e:	f0 91 4a 01 	lds	r31, 0x014A
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	29 e1       	ldi	r18, 0x19	; 25
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	ac 01       	movw	r20, r24
     caa:	42 9f       	mul	r20, r18
     cac:	c0 01       	movw	r24, r0
     cae:	43 9f       	mul	r20, r19
     cb0:	90 0d       	add	r25, r0
     cb2:	52 9f       	mul	r21, r18
     cb4:	90 0d       	add	r25, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	e8 0f       	add	r30, r24
     cba:	f9 1f       	adc	r31, r25
     cbc:	6f 70       	andi	r22, 0x0F	; 15
     cbe:	66 0f       	add	r22, r22
     cc0:	87 8d       	ldd	r24, Z+31	; 0x1f
     cc2:	81 7e       	andi	r24, 0xE1	; 225
     cc4:	86 2b       	or	r24, r22
     cc6:	87 8f       	std	Z+31, r24	; 0x1f
}
     cc8:	08 95       	ret

00000cca <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     cca:	e0 91 49 01 	lds	r30, 0x0149
     cce:	f0 91 4a 01 	lds	r31, 0x014A
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	29 e1       	ldi	r18, 0x19	; 25
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	ac 01       	movw	r20, r24
     cda:	42 9f       	mul	r20, r18
     cdc:	c0 01       	movw	r24, r0
     cde:	43 9f       	mul	r20, r19
     ce0:	90 0d       	add	r25, r0
     ce2:	52 9f       	mul	r21, r18
     ce4:	90 0d       	add	r25, r0
     ce6:	11 24       	eor	r1, r1
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	df 01       	movw	r26, r30
     cee:	d0 96       	adiw	r26, 0x30	; 48
     cf0:	60 a9       	ldd	r22, Z+48	; 0x30
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	7c 91       	ld	r23, X
     cf6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	8c 91       	ld	r24, X
     cfc:	12 97       	sbiw	r26, 0x02	; 2
     cfe:	13 96       	adiw	r26, 0x03	; 3
     d00:	9c 91       	ld	r25, X
     d02:	08 95       	ret

00000d04 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     d04:	e0 91 49 01 	lds	r30, 0x0149
     d08:	f0 91 4a 01 	lds	r31, 0x014A
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	29 e1       	ldi	r18, 0x19	; 25
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	dc 01       	movw	r26, r24
     d14:	a2 9f       	mul	r26, r18
     d16:	c0 01       	movw	r24, r0
     d18:	a3 9f       	mul	r26, r19
     d1a:	90 0d       	add	r25, r0
     d1c:	b2 9f       	mul	r27, r18
     d1e:	90 0d       	add	r25, r0
     d20:	11 24       	eor	r1, r1
     d22:	e8 0f       	add	r30, r24
     d24:	f9 1f       	adc	r31, r25
     d26:	40 ab       	std	Z+48, r20	; 0x30
     d28:	51 ab       	std	Z+49, r21	; 0x31
     d2a:	62 ab       	std	Z+50, r22	; 0x32
     d2c:	73 ab       	std	Z+51, r23	; 0x33
}
     d2e:	08 95       	ret

00000d30 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     d30:	e0 91 49 01 	lds	r30, 0x0149
     d34:	f0 91 4a 01 	lds	r31, 0x014A
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	29 e1       	ldi	r18, 0x19	; 25
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	ac 01       	movw	r20, r24
     d40:	42 9f       	mul	r20, r18
     d42:	c0 01       	movw	r24, r0
     d44:	43 9f       	mul	r20, r19
     d46:	90 0d       	add	r25, r0
     d48:	52 9f       	mul	r21, r18
     d4a:	90 0d       	add	r25, r0
     d4c:	11 24       	eor	r1, r1
     d4e:	e8 0f       	add	r30, r24
     d50:	f9 1f       	adc	r31, r25
     d52:	df 01       	movw	r26, r30
     d54:	90 96       	adiw	r26, 0x20	; 32
     d56:	60 a1       	ldd	r22, Z+32	; 0x20
     d58:	11 96       	adiw	r26, 0x01	; 1
     d5a:	7c 91       	ld	r23, X
     d5c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     d5e:	12 96       	adiw	r26, 0x02	; 2
     d60:	8c 91       	ld	r24, X
     d62:	12 97       	sbiw	r26, 0x02	; 2
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 91       	ld	r25, X
     d68:	08 95       	ret

00000d6a <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     d6a:	e0 91 49 01 	lds	r30, 0x0149
     d6e:	f0 91 4a 01 	lds	r31, 0x014A
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	29 e1       	ldi	r18, 0x19	; 25
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	ac 01       	movw	r20, r24
     d7a:	42 9f       	mul	r20, r18
     d7c:	c0 01       	movw	r24, r0
     d7e:	43 9f       	mul	r20, r19
     d80:	90 0d       	add	r25, r0
     d82:	52 9f       	mul	r21, r18
     d84:	90 0d       	add	r25, r0
     d86:	11 24       	eor	r1, r1
     d88:	e8 0f       	add	r30, r24
     d8a:	f9 1f       	adc	r31, r25
     d8c:	df 01       	movw	r26, r30
     d8e:	94 96       	adiw	r26, 0x24	; 36
     d90:	64 a1       	ldd	r22, Z+36	; 0x24
     d92:	11 96       	adiw	r26, 0x01	; 1
     d94:	7c 91       	ld	r23, X
     d96:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	8c 91       	ld	r24, X
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	13 96       	adiw	r26, 0x03	; 3
     da0:	9c 91       	ld	r25, X
     da2:	08 95       	ret

00000da4 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     da4:	e0 91 49 01 	lds	r30, 0x0149
     da8:	f0 91 4a 01 	lds	r31, 0x014A
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	29 e1       	ldi	r18, 0x19	; 25
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	dc 01       	movw	r26, r24
     db4:	a2 9f       	mul	r26, r18
     db6:	c0 01       	movw	r24, r0
     db8:	a3 9f       	mul	r26, r19
     dba:	90 0d       	add	r25, r0
     dbc:	b2 9f       	mul	r27, r18
     dbe:	90 0d       	add	r25, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	e8 0f       	add	r30, r24
     dc4:	f9 1f       	adc	r31, r25
     dc6:	40 a3       	std	Z+32, r20	; 0x20
     dc8:	51 a3       	std	Z+33, r21	; 0x21
     dca:	62 a3       	std	Z+34, r22	; 0x22
     dcc:	73 a3       	std	Z+35, r23	; 0x23
}
     dce:	08 95       	ret

00000dd0 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     dd0:	e0 91 49 01 	lds	r30, 0x0149
     dd4:	f0 91 4a 01 	lds	r31, 0x014A
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	29 e1       	ldi	r18, 0x19	; 25
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	dc 01       	movw	r26, r24
     de0:	a2 9f       	mul	r26, r18
     de2:	c0 01       	movw	r24, r0
     de4:	a3 9f       	mul	r26, r19
     de6:	90 0d       	add	r25, r0
     de8:	b2 9f       	mul	r27, r18
     dea:	90 0d       	add	r25, r0
     dec:	11 24       	eor	r1, r1
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	44 a3       	std	Z+36, r20	; 0x24
     df4:	55 a3       	std	Z+37, r21	; 0x25
     df6:	66 a3       	std	Z+38, r22	; 0x26
     df8:	77 a3       	std	Z+39, r23	; 0x27
}
     dfa:	08 95       	ret

00000dfc <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     dfc:	e0 91 49 01 	lds	r30, 0x0149
     e00:	f0 91 4a 01 	lds	r31, 0x014A
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	29 e1       	ldi	r18, 0x19	; 25
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	ac 01       	movw	r20, r24
     e0c:	42 9f       	mul	r20, r18
     e0e:	c0 01       	movw	r24, r0
     e10:	43 9f       	mul	r20, r19
     e12:	90 0d       	add	r25, r0
     e14:	52 9f       	mul	r21, r18
     e16:	90 0d       	add	r25, r0
     e18:	11 24       	eor	r1, r1
     e1a:	e8 0f       	add	r30, r24
     e1c:	f9 1f       	adc	r31, r25
     e1e:	df 01       	movw	r26, r30
     e20:	98 96       	adiw	r26, 0x28	; 40
     e22:	60 a5       	ldd	r22, Z+40	; 0x28
     e24:	11 96       	adiw	r26, 0x01	; 1
     e26:	7c 91       	ld	r23, X
     e28:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     e2a:	12 96       	adiw	r26, 0x02	; 2
     e2c:	8c 91       	ld	r24, X
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	13 96       	adiw	r26, 0x03	; 3
     e32:	9c 91       	ld	r25, X
     e34:	08 95       	ret

00000e36 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     e36:	e0 91 49 01 	lds	r30, 0x0149
     e3a:	f0 91 4a 01 	lds	r31, 0x014A
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	29 e1       	ldi	r18, 0x19	; 25
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	dc 01       	movw	r26, r24
     e46:	a2 9f       	mul	r26, r18
     e48:	c0 01       	movw	r24, r0
     e4a:	a3 9f       	mul	r26, r19
     e4c:	90 0d       	add	r25, r0
     e4e:	b2 9f       	mul	r27, r18
     e50:	90 0d       	add	r25, r0
     e52:	11 24       	eor	r1, r1
     e54:	e8 0f       	add	r30, r24
     e56:	f9 1f       	adc	r31, r25
     e58:	40 a7       	std	Z+40, r20	; 0x28
     e5a:	51 a7       	std	Z+41, r21	; 0x29
     e5c:	62 a7       	std	Z+42, r22	; 0x2a
     e5e:	73 a7       	std	Z+43, r23	; 0x2b
}
     e60:	08 95       	ret

00000e62 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     e62:	e0 91 49 01 	lds	r30, 0x0149
     e66:	f0 91 4a 01 	lds	r31, 0x014A
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	29 e1       	ldi	r18, 0x19	; 25
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	ac 01       	movw	r20, r24
     e72:	42 9f       	mul	r20, r18
     e74:	c0 01       	movw	r24, r0
     e76:	43 9f       	mul	r20, r19
     e78:	90 0d       	add	r25, r0
     e7a:	52 9f       	mul	r21, r18
     e7c:	90 0d       	add	r25, r0
     e7e:	11 24       	eor	r1, r1
     e80:	e8 0f       	add	r30, r24
     e82:	f9 1f       	adc	r31, r25
     e84:	df 01       	movw	r26, r30
     e86:	9c 96       	adiw	r26, 0x2c	; 44
     e88:	64 a5       	ldd	r22, Z+44	; 0x2c
     e8a:	11 96       	adiw	r26, 0x01	; 1
     e8c:	7c 91       	ld	r23, X
     e8e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     e90:	12 96       	adiw	r26, 0x02	; 2
     e92:	8c 91       	ld	r24, X
     e94:	12 97       	sbiw	r26, 0x02	; 2
     e96:	13 96       	adiw	r26, 0x03	; 3
     e98:	9c 91       	ld	r25, X
     e9a:	08 95       	ret

00000e9c <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
     e9c:	e0 91 49 01 	lds	r30, 0x0149
     ea0:	f0 91 4a 01 	lds	r31, 0x014A
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	29 e1       	ldi	r18, 0x19	; 25
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	dc 01       	movw	r26, r24
     eac:	a2 9f       	mul	r26, r18
     eae:	c0 01       	movw	r24, r0
     eb0:	a3 9f       	mul	r26, r19
     eb2:	90 0d       	add	r25, r0
     eb4:	b2 9f       	mul	r27, r18
     eb6:	90 0d       	add	r25, r0
     eb8:	11 24       	eor	r1, r1
     eba:	e8 0f       	add	r30, r24
     ebc:	f9 1f       	adc	r31, r25
     ebe:	44 a7       	std	Z+44, r20	; 0x2c
     ec0:	55 a7       	std	Z+45, r21	; 0x2d
     ec2:	66 a7       	std	Z+46, r22	; 0x2e
     ec4:	77 a7       	std	Z+47, r23	; 0x2f
}
     ec6:	08 95       	ret

00000ec8 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     ec8:	e0 91 49 01 	lds	r30, 0x0149
     ecc:	f0 91 4a 01 	lds	r31, 0x014A
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	29 e1       	ldi	r18, 0x19	; 25
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	ac 01       	movw	r20, r24
     ed8:	42 9f       	mul	r20, r18
     eda:	c0 01       	movw	r24, r0
     edc:	43 9f       	mul	r20, r19
     ede:	90 0d       	add	r25, r0
     ee0:	52 9f       	mul	r21, r18
     ee2:	90 0d       	add	r25, r0
     ee4:	11 24       	eor	r1, r1
     ee6:	e8 0f       	add	r30, r24
     ee8:	f9 1f       	adc	r31, r25
     eea:	df 01       	movw	r26, r30
     eec:	d4 96       	adiw	r26, 0x34	; 52
     eee:	64 a9       	ldd	r22, Z+52	; 0x34
     ef0:	11 96       	adiw	r26, 0x01	; 1
     ef2:	7c 91       	ld	r23, X
     ef4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     ef6:	12 96       	adiw	r26, 0x02	; 2
     ef8:	8c 91       	ld	r24, X
     efa:	12 97       	sbiw	r26, 0x02	; 2
     efc:	13 96       	adiw	r26, 0x03	; 3
     efe:	9c 91       	ld	r25, X
     f00:	08 95       	ret

00000f02 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     f02:	e0 91 49 01 	lds	r30, 0x0149
     f06:	f0 91 4a 01 	lds	r31, 0x014A
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	29 e1       	ldi	r18, 0x19	; 25
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	dc 01       	movw	r26, r24
     f12:	a2 9f       	mul	r26, r18
     f14:	c0 01       	movw	r24, r0
     f16:	a3 9f       	mul	r26, r19
     f18:	90 0d       	add	r25, r0
     f1a:	b2 9f       	mul	r27, r18
     f1c:	90 0d       	add	r25, r0
     f1e:	11 24       	eor	r1, r1
     f20:	e8 0f       	add	r30, r24
     f22:	f9 1f       	adc	r31, r25
     f24:	44 ab       	std	Z+52, r20	; 0x34
     f26:	55 ab       	std	Z+53, r21	; 0x35
     f28:	66 ab       	std	Z+54, r22	; 0x36
     f2a:	77 ab       	std	Z+55, r23	; 0x37
}
     f2c:	08 95       	ret

00000f2e <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     f2e:	e0 91 49 01 	lds	r30, 0x0149
     f32:	f0 91 4a 01 	lds	r31, 0x014A
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	29 e1       	ldi	r18, 0x19	; 25
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	ac 01       	movw	r20, r24
     f3e:	42 9f       	mul	r20, r18
     f40:	c0 01       	movw	r24, r0
     f42:	43 9f       	mul	r20, r19
     f44:	90 0d       	add	r25, r0
     f46:	52 9f       	mul	r21, r18
     f48:	90 0d       	add	r25, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	e8 0f       	add	r30, r24
     f4e:	f9 1f       	adc	r31, r25
     f50:	87 8d       	ldd	r24, Z+31	; 0x1f
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	08 95       	ret

00000f56 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     f56:	e0 91 49 01 	lds	r30, 0x0149
     f5a:	f0 91 4a 01 	lds	r31, 0x014A
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	29 e1       	ldi	r18, 0x19	; 25
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	ac 01       	movw	r20, r24
     f66:	42 9f       	mul	r20, r18
     f68:	c0 01       	movw	r24, r0
     f6a:	43 9f       	mul	r20, r19
     f6c:	90 0d       	add	r25, r0
     f6e:	52 9f       	mul	r21, r18
     f70:	90 0d       	add	r25, r0
     f72:	11 24       	eor	r1, r1
     f74:	e8 0f       	add	r30, r24
     f76:	f9 1f       	adc	r31, r25
     f78:	87 8d       	ldd	r24, Z+31	; 0x1f
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	87 8f       	std	Z+31, r24	; 0x1f
}
     f7e:	08 95       	ret

00000f80 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f80:	e0 91 49 01 	lds	r30, 0x0149
     f84:	f0 91 4a 01 	lds	r31, 0x014A
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	29 e1       	ldi	r18, 0x19	; 25
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	ac 01       	movw	r20, r24
     f90:	42 9f       	mul	r20, r18
     f92:	c0 01       	movw	r24, r0
     f94:	43 9f       	mul	r20, r19
     f96:	90 0d       	add	r25, r0
     f98:	52 9f       	mul	r21, r18
     f9a:	90 0d       	add	r25, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	e8 0f       	add	r30, r24
     fa0:	f9 1f       	adc	r31, r25
     fa2:	87 8d       	ldd	r24, Z+31	; 0x1f
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	87 8f       	std	Z+31, r24	; 0x1f
}
     fa8:	08 95       	ret

00000faa <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     faa:	e0 91 49 01 	lds	r30, 0x0149
     fae:	f0 91 4a 01 	lds	r31, 0x014A
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	29 e1       	ldi	r18, 0x19	; 25
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	ac 01       	movw	r20, r24
     fba:	42 9f       	mul	r20, r18
     fbc:	c0 01       	movw	r24, r0
     fbe:	43 9f       	mul	r20, r19
     fc0:	90 0d       	add	r25, r0
     fc2:	52 9f       	mul	r21, r18
     fc4:	90 0d       	add	r25, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	e8 0f       	add	r30, r24
     fca:	f9 1f       	adc	r31, r25
     fcc:	87 8d       	ldd	r24, Z+31	; 0x1f
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     fce:	10 aa       	std	Z+48, r1	; 0x30
     fd0:	11 aa       	std	Z+49, r1	; 0x31
     fd2:	12 aa       	std	Z+50, r1	; 0x32
     fd4:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     fd6:	10 a2       	std	Z+32, r1	; 0x20
     fd8:	11 a2       	std	Z+33, r1	; 0x21
     fda:	12 a2       	std	Z+34, r1	; 0x22
     fdc:	13 a2       	std	Z+35, r1	; 0x23
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     fde:	14 a2       	std	Z+36, r1	; 0x24
     fe0:	15 a2       	std	Z+37, r1	; 0x25
     fe2:	16 a2       	std	Z+38, r1	; 0x26
     fe4:	17 a2       	std	Z+39, r1	; 0x27
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     fe6:	10 a6       	std	Z+40, r1	; 0x28
     fe8:	11 a6       	std	Z+41, r1	; 0x29
     fea:	12 a6       	std	Z+42, r1	; 0x2a
     fec:	13 a6       	std	Z+43, r1	; 0x2b
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
     fee:	14 a6       	std	Z+44, r1	; 0x2c
     ff0:	15 a6       	std	Z+45, r1	; 0x2d
     ff2:	16 a6       	std	Z+46, r1	; 0x2e
     ff4:	17 a6       	std	Z+47, r1	; 0x2f
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     ff6:	14 aa       	std	Z+52, r1	; 0x34
     ff8:	15 aa       	std	Z+53, r1	; 0x35
     ffa:	16 aa       	std	Z+54, r1	; 0x36
     ffc:	17 aa       	std	Z+55, r1	; 0x37
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ffe:	80 7e       	andi	r24, 0xE0	; 224
    1000:	87 8f       	std	Z+31, r24	; 0x1f
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
    1002:	08 95       	ret

00001004 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1004:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Timebase_UpCounter_SS_Reset>
}
    1008:	08 95       	ret

0000100a <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    100a:	e0 91 49 01 	lds	r30, 0x0149
    100e:	f0 91 4a 01 	lds	r31, 0x014A
    1012:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1014:	29 e1       	ldi	r18, 0x19	; 25
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	ac 01       	movw	r20, r24
    101a:	42 9f       	mul	r20, r18
    101c:	c0 01       	movw	r24, r0
    101e:	43 9f       	mul	r20, r19
    1020:	90 0d       	add	r25, r0
    1022:	52 9f       	mul	r21, r18
    1024:	90 0d       	add	r25, r0
    1026:	11 24       	eor	r1, r1
    1028:	e8 0f       	add	r30, r24
    102a:	f9 1f       	adc	r31, r25
    102c:	97 8d       	ldd	r25, Z+31	; 0x1f
    102e:	89 2f       	mov	r24, r25
    1030:	86 95       	lsr	r24
    1032:	8f 70       	andi	r24, 0x0F	; 15
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	19 f0       	breq	.+6      	; 0x103e <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1038:	91 7e       	andi	r25, 0xE1	; 225
    103a:	92 60       	ori	r25, 0x02	; 2
    103c:	97 8f       	std	Z+31, r25	; 0x1f
    103e:	08 95       	ret

00001040 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1040:	e0 91 49 01 	lds	r30, 0x0149
    1044:	f0 91 4a 01 	lds	r31, 0x014A
    1048:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    104a:	29 e1       	ldi	r18, 0x19	; 25
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	ac 01       	movw	r20, r24
    1050:	42 9f       	mul	r20, r18
    1052:	c0 01       	movw	r24, r0
    1054:	43 9f       	mul	r20, r19
    1056:	90 0d       	add	r25, r0
    1058:	52 9f       	mul	r21, r18
    105a:	90 0d       	add	r25, r0
    105c:	11 24       	eor	r1, r1
    105e:	e8 0f       	add	r30, r24
    1060:	f9 1f       	adc	r31, r25
    1062:	97 8d       	ldd	r25, Z+31	; 0x1f
    1064:	89 2f       	mov	r24, r25
    1066:	86 95       	lsr	r24
    1068:	8f 70       	andi	r24, 0x0F	; 15
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	19 f0       	breq	.+6      	; 0x1074 <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    106e:	91 7e       	andi	r25, 0xE1	; 225
    1070:	94 60       	ori	r25, 0x04	; 4
    1072:	97 8f       	std	Z+31, r25	; 0x1f
    1074:	08 95       	ret

00001076 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1076:	2f 92       	push	r2
    1078:	3f 92       	push	r3
    107a:	4f 92       	push	r4
    107c:	5f 92       	push	r5
    107e:	6f 92       	push	r6
    1080:	7f 92       	push	r7
    1082:	8f 92       	push	r8
    1084:	9f 92       	push	r9
    1086:	af 92       	push	r10
    1088:	bf 92       	push	r11
    108a:	cf 92       	push	r12
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <Timebase_UpCounter_SS_Set_Securely+0x26>
    109c:	00 d0       	rcall	.+0      	; 0x109e <Timebase_UpCounter_SS_Set_Securely+0x28>
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	4a 01       	movw	r8, r20
    10a4:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10a6:	20 91 49 01 	lds	r18, 0x0149
    10aa:	30 91 4a 01 	lds	r19, 0x014A
    10ae:	3c 83       	std	Y+4, r19	; 0x04
    10b0:	2b 83       	std	Y+3, r18	; 0x03
    10b2:	a8 2f       	mov	r26, r24
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ba 83       	std	Y+2, r27	; 0x02
    10b8:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    10ba:	89 e1       	ldi	r24, 0x19	; 25
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a8 9f       	mul	r26, r24
    10c0:	f0 01       	movw	r30, r0
    10c2:	a9 9f       	mul	r26, r25
    10c4:	f0 0d       	add	r31, r0
    10c6:	b8 9f       	mul	r27, r24
    10c8:	f0 0d       	add	r31, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    10d2:	86 95       	lsr	r24
    10d4:	8f 70       	andi	r24, 0x0F	; 15
    10d6:	09 f0       	breq	.+2      	; 0x10da <Timebase_UpCounter_SS_Set_Securely+0x64>
    10d8:	7b c0       	rjmp	.+246    	; 0x11d0 <Timebase_UpCounter_SS_Set_Securely+0x15a>
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    10da:	10 aa       	std	Z+48, r1	; 0x30
    10dc:	11 aa       	std	Z+49, r1	; 0x31
    10de:	12 aa       	std	Z+50, r1	; 0x32
    10e0:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    10e2:	14 a6       	std	Z+44, r1	; 0x2c
    10e4:	15 a6       	std	Z+45, r1	; 0x2d
    10e6:	16 a6       	std	Z+46, r1	; 0x2e
    10e8:	17 a6       	std	Z+47, r1	; 0x2f

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    10ea:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    10ec:	f9 01       	movw	r30, r18
    10ee:	82 85       	ldd	r24, Z+10	; 0x0a
    10f0:	93 85       	ldd	r25, Z+11	; 0x0b
    10f2:	a4 85       	ldd	r26, Z+12	; 0x0c
    10f4:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    10f6:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    10f8:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    10fa:	c0 84       	ldd	r12, Z+8	; 0x08
    10fc:	d1 84       	ldd	r13, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    10fe:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1100:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1102:	22 84       	ldd	r2, Z+10	; 0x0a
    1104:	33 84       	ldd	r3, Z+11	; 0x0b
    1106:	44 84       	ldd	r4, Z+12	; 0x0c
    1108:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    110a:	78 94       	sei
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    //Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    110c:	21 81       	ldd	r18, Z+1	; 0x01
    110e:	32 81       	ldd	r19, Z+2	; 0x02
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	c5 01       	movw	r24, r10
    1116:	b4 01       	movw	r22, r8
    1118:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    111c:	7b 01       	movw	r14, r22
    111e:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1120:	ab 81       	ldd	r26, Y+3	; 0x03
    1122:	bc 81       	ldd	r27, Y+4	; 0x04
    1124:	11 96       	adiw	r26, 0x01	; 1
    1126:	2d 91       	ld	r18, X+
    1128:	3c 91       	ld	r19, X
    112a:	12 97       	sbiw	r26, 0x02	; 2
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	c5 01       	movw	r24, r10
    1132:	b4 01       	movw	r22, r8
    1134:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    1138:	c9 01       	movw	r24, r18
    113a:	da 01       	movw	r26, r20
    113c:	3c 01       	movw	r6, r24
    113e:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1140:	56 01       	movw	r10, r12
    1142:	cc 24       	eor	r12, r12
    1144:	dd 24       	eor	r13, r13
    1146:	ae 0c       	add	r10, r14
    1148:	bf 1c       	adc	r11, r15
    114a:	c0 1e       	adc	r12, r16
    114c:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    114e:	eb 81       	ldd	r30, Y+3	; 0x03
    1150:	fc 81       	ldd	r31, Y+4	; 0x04
    1152:	81 81       	ldd	r24, Z+1	; 0x01
    1154:	92 81       	ldd	r25, Z+2	; 0x02
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	a8 16       	cp	r10, r24
    115c:	b9 06       	cpc	r11, r25
    115e:	ca 06       	cpc	r12, r26
    1160:	db 06       	cpc	r13, r27
    1162:	94 f0       	brlt	.+36     	; 0x1188 <Timebase_UpCounter_SS_Set_Securely+0x112>
	  sec_val += 1;
    1164:	08 94       	sec
    1166:	61 1c       	adc	r6, r1
    1168:	71 1c       	adc	r7, r1
    116a:	81 1c       	adc	r8, r1
    116c:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    116e:	21 81       	ldd	r18, Z+1	; 0x01
    1170:	32 81       	ldd	r19, Z+2	; 0x02
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	50 e0       	ldi	r21, 0x00	; 0
    1176:	c6 01       	movw	r24, r12
    1178:	b5 01       	movw	r22, r10
    117a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    117e:	ac 01       	movw	r20, r24
    1180:	cb 01       	movw	r24, r22
    1182:	da 01       	movw	r26, r20
    1184:	5c 01       	movw	r10, r24
    1186:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1188:	89 e1       	ldi	r24, 0x19	; 25
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	29 81       	ldd	r18, Y+1	; 0x01
    118e:	3a 81       	ldd	r19, Y+2	; 0x02
    1190:	28 9f       	mul	r18, r24
    1192:	f0 01       	movw	r30, r0
    1194:	29 9f       	mul	r18, r25
    1196:	f0 0d       	add	r31, r0
    1198:	38 9f       	mul	r19, r24
    119a:	f0 0d       	add	r31, r0
    119c:	11 24       	eor	r1, r1
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	9c 81       	ldd	r25, Y+4	; 0x04
    11a2:	e8 0f       	add	r30, r24
    11a4:	f9 1f       	adc	r31, r25
    11a6:	26 0c       	add	r2, r6
    11a8:	37 1c       	adc	r3, r7
    11aa:	48 1c       	adc	r4, r8
    11ac:	59 1c       	adc	r5, r9
    11ae:	20 a2       	std	Z+32, r2	; 0x20
    11b0:	31 a2       	std	Z+33, r3	; 0x21
    11b2:	42 a2       	std	Z+34, r4	; 0x22
    11b4:	53 a2       	std	Z+35, r5	; 0x23
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    11b6:	a4 a2       	std	Z+36, r10	; 0x24
    11b8:	b5 a2       	std	Z+37, r11	; 0x25
    11ba:	c6 a2       	std	Z+38, r12	; 0x26
    11bc:	d7 a2       	std	Z+39, r13	; 0x27
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    11be:	97 8d       	ldd	r25, Z+31	; 0x1f
    11c0:	89 2f       	mov	r24, r25
    11c2:	86 95       	lsr	r24
    11c4:	8f 70       	andi	r24, 0x0F	; 15
    11c6:	81 30       	cpi	r24, 0x01	; 1
    11c8:	19 f0       	breq	.+6      	; 0x11d0 <Timebase_UpCounter_SS_Set_Securely+0x15a>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    11ca:	91 7e       	andi	r25, 0xE1	; 225
    11cc:	92 60       	ori	r25, 0x02	; 2
    11ce:	97 8f       	std	Z+31, r25	; 0x1f
	sec_val += temp_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	cf 91       	pop	r28
    11da:	df 91       	pop	r29
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	bf 90       	pop	r11
    11ea:	af 90       	pop	r10
    11ec:	9f 90       	pop	r9
    11ee:	8f 90       	pop	r8
    11f0:	7f 90       	pop	r7
    11f2:	6f 90       	pop	r6
    11f4:	5f 90       	pop	r5
    11f6:	4f 90       	pop	r4
    11f8:	3f 90       	pop	r3
    11fa:	2f 90       	pop	r2
    11fc:	08 95       	ret

000011fe <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	d8 2e       	mov	r13, r24
    120a:	7a 01       	movw	r14, r20
    120c:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    120e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    1212:	8d 2d       	mov	r24, r13
    1214:	b8 01       	movw	r22, r16
    1216:	a7 01       	movw	r20, r14
    1218:	0e 94 3b 08 	call	0x1076	; 0x1076 <Timebase_UpCounter_SS_Set_Securely>
} 
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	08 95       	ret

00001228 <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    1228:	ef 92       	push	r14
    122a:	ff 92       	push	r15
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1230:	a0 91 49 01 	lds	r26, 0x0149
    1234:	b0 91 4a 01 	lds	r27, 0x014A
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	28 9f       	mul	r18, r24
    1242:	f0 01       	movw	r30, r0
    1244:	29 9f       	mul	r18, r25
    1246:	f0 0d       	add	r31, r0
    1248:	38 9f       	mul	r19, r24
    124a:	f0 0d       	add	r31, r0
    124c:	11 24       	eor	r1, r1
    124e:	ea 0f       	add	r30, r26
    1250:	fb 1f       	adc	r31, r27
    1252:	87 8d       	ldd	r24, Z+31	; 0x1f
    1254:	86 95       	lsr	r24
    1256:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	b9 f5       	brne	.+110    	; 0x12ca <Timebase_UpCounter_SS_Update+0xa2>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    125c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    125e:	1a 96       	adiw	r26, 0x0a	; 10
    1260:	4d 91       	ld	r20, X+
    1262:	5d 91       	ld	r21, X+
    1264:	6d 91       	ld	r22, X+
    1266:	7c 91       	ld	r23, X
    1268:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    126a:	78 94       	sei
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    126c:	89 e1       	ldi	r24, 0x19	; 25
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	28 9f       	mul	r18, r24
    1272:	f0 01       	movw	r30, r0
    1274:	29 9f       	mul	r18, r25
    1276:	f0 0d       	add	r31, r0
    1278:	38 9f       	mul	r19, r24
    127a:	f0 0d       	add	r31, r0
    127c:	11 24       	eor	r1, r1
    127e:	ea 0f       	add	r30, r26
    1280:	fb 1f       	adc	r31, r27
    1282:	e0 a4       	ldd	r14, Z+40	; 0x28
    1284:	f1 a4       	ldd	r15, Z+41	; 0x29
    1286:	02 a5       	ldd	r16, Z+42	; 0x2a
    1288:	13 a5       	ldd	r17, Z+43	; 0x2b
    128a:	24 a5       	ldd	r18, Z+44	; 0x2c
    128c:	35 a5       	ldd	r19, Z+45	; 0x2d
    128e:	46 a5       	ldd	r20, Z+46	; 0x2e
    1290:	57 a5       	ldd	r21, Z+47	; 0x2f
    1292:	d8 01       	movw	r26, r16
    1294:	c7 01       	movw	r24, r14
    1296:	82 1b       	sub	r24, r18
    1298:	93 0b       	sbc	r25, r19
    129a:	a4 0b       	sbc	r26, r20
    129c:	b5 0b       	sbc	r27, r21
    129e:	80 ab       	std	Z+48, r24	; 0x30
    12a0:	91 ab       	std	Z+49, r25	; 0x31
    12a2:	a2 ab       	std	Z+50, r26	; 0x32
    12a4:	b3 ab       	std	Z+51, r27	; 0x33
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_TemporaryValue(window, Timebase_UpCounter_SS_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    12a6:	12 16       	cp	r1, r18
    12a8:	13 06       	cpc	r1, r19
    12aa:	14 06       	cpc	r1, r20
    12ac:	15 06       	cpc	r1, r21
    12ae:	94 f1       	brlt	.+100    	; 0x1314 <Timebase_UpCounter_SS_Update+0xec>
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    12b0:	14 a6       	std	Z+44, r1	; 0x2c
    12b2:	15 a6       	std	Z+45, r1	; 0x2d
    12b4:	16 a6       	std	Z+46, r1	; 0x2e
    12b6:	17 a6       	std	Z+47, r1	; 0x2f
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    12b8:	e0 aa       	std	Z+48, r14	; 0x30
    12ba:	f1 aa       	std	Z+49, r15	; 0x31
    12bc:	02 ab       	std	Z+50, r16	; 0x32
    12be:	13 ab       	std	Z+51, r17	; 0x33
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    12c0:	87 8d       	ldd	r24, Z+31	; 0x1f
    12c2:	81 7e       	andi	r24, 0xE1	; 225
    12c4:	88 60       	ori	r24, 0x08	; 8
    12c6:	87 8f       	std	Z+31, r24	; 0x1f
    12c8:	25 c0       	rjmp	.+74     	; 0x1314 <Timebase_UpCounter_SS_Update+0xec>
      //Timebase_UpCounter_SS_Set_EndValue(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	19 f5       	brne	.+70     	; 0x1314 <Timebase_UpCounter_SS_Update+0xec>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    12ce:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    12d0:	1a 96       	adiw	r26, 0x0a	; 10
    12d2:	4d 91       	ld	r20, X+
    12d4:	5d 91       	ld	r21, X+
    12d6:	6d 91       	ld	r22, X+
    12d8:	7c 91       	ld	r23, X
    12da:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    12dc:	78 94       	sei
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	28 9f       	mul	r18, r24
    12e4:	f0 01       	movw	r30, r0
    12e6:	29 9f       	mul	r18, r25
    12e8:	f0 0d       	add	r31, r0
    12ea:	38 9f       	mul	r19, r24
    12ec:	f0 0d       	add	r31, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	ea 0f       	add	r30, r26
    12f2:	fb 1f       	adc	r31, r27
    12f4:	80 a5       	ldd	r24, Z+40	; 0x28
    12f6:	91 a5       	ldd	r25, Z+41	; 0x29
    12f8:	a2 a5       	ldd	r26, Z+42	; 0x2a
    12fa:	b3 a5       	ldd	r27, Z+43	; 0x2b
    12fc:	24 a5       	ldd	r18, Z+44	; 0x2c
    12fe:	35 a5       	ldd	r19, Z+45	; 0x2d
    1300:	46 a5       	ldd	r20, Z+46	; 0x2e
    1302:	57 a5       	ldd	r21, Z+47	; 0x2f
    1304:	82 1b       	sub	r24, r18
    1306:	93 0b       	sbc	r25, r19
    1308:	a4 0b       	sbc	r26, r20
    130a:	b5 0b       	sbc	r27, r21
    130c:	80 ab       	std	Z+48, r24	; 0x30
    130e:	91 ab       	std	Z+49, r25	; 0x31
    1310:	a2 ab       	std	Z+50, r26	; 0x32
    1312:	b3 ab       	std	Z+51, r27	; 0x33
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_EndValue(window, Timebase_UpCounter_SS_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	08 95       	ret

0000131e <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	e0 91 49 01 	lds	r30, 0x0149
    1324:	f0 91 4a 01 	lds	r31, 0x014A
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	29 e1       	ldi	r18, 0x19	; 25
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	bc 01       	movw	r22, r24
    1330:	62 9f       	mul	r22, r18
    1332:	c0 01       	movw	r24, r0
    1334:	63 9f       	mul	r22, r19
    1336:	90 0d       	add	r25, r0
    1338:	72 9f       	mul	r23, r18
    133a:	90 0d       	add	r25, r0
    133c:	11 24       	eor	r1, r1
    133e:	e8 0f       	add	r30, r24
    1340:	f9 1f       	adc	r31, r25
    1342:	87 8d       	ldd	r24, Z+31	; 0x1f
    1344:	86 95       	lsr	r24
    1346:	8f 70       	andi	r24, 0x0F	; 15
    1348:	84 30       	cpi	r24, 0x04	; 4
    134a:	09 f4       	brne	.+2      	; 0x134e <Timebase_UpCounter_SS_Expired+0x30>
    134c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    134e:	84 2f       	mov	r24, r20
    1350:	08 95       	ret

00001352 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1352:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1354:	e0 91 49 01 	lds	r30, 0x0149
    1358:	f0 91 4a 01 	lds	r31, 0x014A
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	89 e1       	ldi	r24, 0x19	; 25
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	bc 01       	movw	r22, r24
    1366:	26 9f       	mul	r18, r22
    1368:	c0 01       	movw	r24, r0
    136a:	27 9f       	mul	r18, r23
    136c:	90 0d       	add	r25, r0
    136e:	36 9f       	mul	r19, r22
    1370:	90 0d       	add	r25, r0
    1372:	11 24       	eor	r1, r1
    1374:	e8 0f       	add	r30, r24
    1376:	f9 1f       	adc	r31, r25
    1378:	87 8d       	ldd	r24, Z+31	; 0x1f
    137a:	86 95       	lsr	r24
    137c:	8f 70       	andi	r24, 0x0F	; 15
    137e:	84 30       	cpi	r24, 0x04	; 4
    1380:	11 f0       	breq	.+4      	; 0x1386 <Timebase_UpCounter_SS_Expired_Event+0x34>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1386:	84 2f       	mov	r24, r20
    1388:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Timebase_UpCounter_SS_Reset>
    138c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    138e:	08 95       	ret

00001390 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    1390:	e0 91 49 01 	lds	r30, 0x0149
    1394:	f0 91 4a 01 	lds	r31, 0x014A
    1398:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    139a:	29 e1       	ldi	r18, 0x19	; 25
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	dc 01       	movw	r26, r24
    13a0:	a2 9f       	mul	r26, r18
    13a2:	c0 01       	movw	r24, r0
    13a4:	a3 9f       	mul	r26, r19
    13a6:	90 0d       	add	r25, r0
    13a8:	b2 9f       	mul	r27, r18
    13aa:	90 0d       	add	r25, r0
    13ac:	11 24       	eor	r1, r1
    13ae:	e8 0f       	add	r30, r24
    13b0:	f9 1f       	adc	r31, r25
    13b2:	87 8d       	ldd	r24, Z+31	; 0x1f
    13b4:	80 fd       	sbrc	r24, 0
    13b6:	0f c0       	rjmp	.+30     	; 0x13d6 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    13b8:	80 a9       	ldd	r24, Z+48	; 0x30
    13ba:	91 a9       	ldd	r25, Z+49	; 0x31
    13bc:	a2 a9       	ldd	r26, Z+50	; 0x32
    13be:	b3 a9       	ldd	r27, Z+51	; 0x33
    13c0:	84 0f       	add	r24, r20
    13c2:	95 1f       	adc	r25, r21
    13c4:	a6 1f       	adc	r26, r22
    13c6:	b7 1f       	adc	r27, r23
    13c8:	84 ab       	std	Z+52, r24	; 0x34
    13ca:	95 ab       	std	Z+53, r25	; 0x35
    13cc:	a6 ab       	std	Z+54, r26	; 0x36
    13ce:	b7 ab       	std	Z+55, r27	; 0x37
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    13d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    13d2:	81 60       	ori	r24, 0x01	; 1
    13d4:	87 8f       	std	Z+31, r24	; 0x1f
    13d6:	08 95       	ret

000013d8 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    13d8:	e0 91 49 01 	lds	r30, 0x0149
    13dc:	f0 91 4a 01 	lds	r31, 0x014A
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    13e2:	29 e1       	ldi	r18, 0x19	; 25
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	ac 01       	movw	r20, r24
    13e8:	42 9f       	mul	r20, r18
    13ea:	c0 01       	movw	r24, r0
    13ec:	43 9f       	mul	r20, r19
    13ee:	90 0d       	add	r25, r0
    13f0:	52 9f       	mul	r21, r18
    13f2:	90 0d       	add	r25, r0
    13f4:	11 24       	eor	r1, r1
    13f6:	e8 0f       	add	r30, r24
    13f8:	f9 1f       	adc	r31, r25
    13fa:	24 a9       	ldd	r18, Z+52	; 0x34
    13fc:	35 a9       	ldd	r19, Z+53	; 0x35
    13fe:	46 a9       	ldd	r20, Z+54	; 0x36
    1400:	57 a9       	ldd	r21, Z+55	; 0x37
    1402:	80 a9       	ldd	r24, Z+48	; 0x30
    1404:	91 a9       	ldd	r25, Z+49	; 0x31
    1406:	a2 a9       	ldd	r26, Z+50	; 0x32
    1408:	b3 a9       	ldd	r27, Z+51	; 0x33
    140a:	28 1b       	sub	r18, r24
    140c:	39 0b       	sbc	r19, r25
    140e:	4a 0b       	sbc	r20, r26
    1410:	5b 0b       	sbc	r21, r27
    1412:	57 ff       	sbrs	r21, 7
    1414:	04 c0       	rjmp	.+8      	; 0x141e <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    141e:	b9 01       	movw	r22, r18
    1420:	ca 01       	movw	r24, r20
    1422:	08 95       	ret

00001424 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1428:	c0 91 49 01 	lds	r28, 0x0149
    142c:	d0 91 4a 01 	lds	r29, 0x014A
    1430:	68 2f       	mov	r22, r24
    1432:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    1434:	89 e1       	ldi	r24, 0x19	; 25
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	68 9f       	mul	r22, r24
    143a:	f0 01       	movw	r30, r0
    143c:	69 9f       	mul	r22, r25
    143e:	f0 0d       	add	r31, r0
    1440:	78 9f       	mul	r23, r24
    1442:	f0 0d       	add	r31, r0
    1444:	11 24       	eor	r1, r1
    1446:	ec 0f       	add	r30, r28
    1448:	fd 1f       	adc	r31, r29
    144a:	24 a9       	ldd	r18, Z+52	; 0x34
    144c:	35 a9       	ldd	r19, Z+53	; 0x35
    144e:	46 a9       	ldd	r20, Z+54	; 0x36
    1450:	57 a9       	ldd	r21, Z+55	; 0x37
    1452:	80 a9       	ldd	r24, Z+48	; 0x30
    1454:	91 a9       	ldd	r25, Z+49	; 0x31
    1456:	a2 a9       	ldd	r26, Z+50	; 0x32
    1458:	b3 a9       	ldd	r27, Z+51	; 0x33
    145a:	28 1b       	sub	r18, r24
    145c:	39 0b       	sbc	r19, r25
    145e:	4a 0b       	sbc	r20, r26
    1460:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1462:	57 fd       	sbrc	r21, 7
    1464:	07 c0       	rjmp	.+14     	; 0x1474 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	41 05       	cpc	r20, r1
    146c:	51 05       	cpc	r21, r1
    146e:	11 f0       	breq	.+4      	; 0x1474 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1470:	20 e0       	ldi	r18, 0x00	; 0
    1472:	12 c0       	rjmp	.+36     	; 0x1498 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	89 e1       	ldi	r24, 0x19	; 25
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	ac 01       	movw	r20, r24
    147c:	64 9f       	mul	r22, r20
    147e:	c0 01       	movw	r24, r0
    1480:	65 9f       	mul	r22, r21
    1482:	90 0d       	add	r25, r0
    1484:	74 9f       	mul	r23, r20
    1486:	90 0d       	add	r25, r0
    1488:	11 24       	eor	r1, r1
    148a:	c8 0f       	add	r28, r24
    148c:	d9 1f       	adc	r29, r25
    148e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1490:	80 ff       	sbrs	r24, 0
    1492:	21 e0       	ldi	r18, 0x01	; 1
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1498:	82 2f       	mov	r24, r18
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    14a0:	1f 93       	push	r17
    14a2:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    14a4:	0e 94 12 0a 	call	0x1424	; 0x1424 <Timebase_UpCounter_SS_Period_Value_Expired>
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	16 c0       	rjmp	.+44     	; 0x14dc <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14b0:	e0 91 49 01 	lds	r30, 0x0149
    14b4:	f0 91 4a 01 	lds	r31, 0x014A
    14b8:	21 2f       	mov	r18, r17
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	89 e1       	ldi	r24, 0x19	; 25
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	ac 01       	movw	r20, r24
    14c2:	24 9f       	mul	r18, r20
    14c4:	c0 01       	movw	r24, r0
    14c6:	25 9f       	mul	r18, r21
    14c8:	90 0d       	add	r25, r0
    14ca:	34 9f       	mul	r19, r20
    14cc:	90 0d       	add	r25, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	e8 0f       	add	r30, r24
    14d2:	f9 1f       	adc	r31, r25
    14d4:	87 8d       	ldd	r24, Z+31	; 0x1f
    14d6:	8e 7f       	andi	r24, 0xFE	; 254
    14d8:	87 8f       	std	Z+31, r24	; 0x1f
    14da:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    14dc:	1f 91       	pop	r17
    14de:	08 95       	ret

000014e0 <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	0e 94 14 09 	call	0x1228	; 0x1228 <Timebase_UpCounter_SS_Update>
  }
}
    14e6:	08 95       	ret

000014e8 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 d5 07 	call	0xfaa	; 0xfaa <Timebase_UpCounter_SS_Reset>
  }
}
    14ee:	08 95       	ret

000014f0 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    14f0:	e0 91 49 01 	lds	r30, 0x0149
    14f4:	f0 91 4a 01 	lds	r31, 0x014A
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	25 e1       	ldi	r18, 0x15	; 21
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	ac 01       	movw	r20, r24
    1500:	42 9f       	mul	r20, r18
    1502:	c0 01       	movw	r24, r0
    1504:	43 9f       	mul	r20, r19
    1506:	90 0d       	add	r25, r0
    1508:	52 9f       	mul	r21, r18
    150a:	90 0d       	add	r25, r0
    150c:	11 24       	eor	r1, r1
    150e:	e8 0f       	add	r30, r24
    1510:	f9 1f       	adc	r31, r25
    1512:	80 ad       	ldd	r24, Z+56	; 0x38
    1514:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    1516:	8f 70       	andi	r24, 0x0F	; 15
    1518:	08 95       	ret

0000151a <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    151a:	e0 91 49 01 	lds	r30, 0x0149
    151e:	f0 91 4a 01 	lds	r31, 0x014A
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	25 e1       	ldi	r18, 0x15	; 21
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	ac 01       	movw	r20, r24
    152a:	42 9f       	mul	r20, r18
    152c:	c0 01       	movw	r24, r0
    152e:	43 9f       	mul	r20, r19
    1530:	90 0d       	add	r25, r0
    1532:	52 9f       	mul	r21, r18
    1534:	90 0d       	add	r25, r0
    1536:	11 24       	eor	r1, r1
    1538:	e8 0f       	add	r30, r24
    153a:	f9 1f       	adc	r31, r25
    153c:	6f 70       	andi	r22, 0x0F	; 15
    153e:	66 0f       	add	r22, r22
    1540:	80 ad       	ldd	r24, Z+56	; 0x38
    1542:	81 7e       	andi	r24, 0xE1	; 225
    1544:	86 2b       	or	r24, r22
    1546:	80 af       	std	Z+56, r24	; 0x38
}
    1548:	08 95       	ret

0000154a <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    154a:	e0 91 49 01 	lds	r30, 0x0149
    154e:	f0 91 4a 01 	lds	r31, 0x014A
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	25 e1       	ldi	r18, 0x15	; 21
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	ac 01       	movw	r20, r24
    155a:	42 9f       	mul	r20, r18
    155c:	c0 01       	movw	r24, r0
    155e:	43 9f       	mul	r20, r19
    1560:	90 0d       	add	r25, r0
    1562:	52 9f       	mul	r21, r18
    1564:	90 0d       	add	r25, r0
    1566:	11 24       	eor	r1, r1
    1568:	e8 0f       	add	r30, r24
    156a:	f9 1f       	adc	r31, r25
    156c:	eb 5b       	subi	r30, 0xBB	; 187
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	60 81       	ld	r22, Z
    1572:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	08 95       	ret

0000157a <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    157a:	e0 91 49 01 	lds	r30, 0x0149
    157e:	f0 91 4a 01 	lds	r31, 0x014A
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	25 e1       	ldi	r18, 0x15	; 21
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	dc 01       	movw	r26, r24
    158a:	a2 9f       	mul	r26, r18
    158c:	c0 01       	movw	r24, r0
    158e:	a3 9f       	mul	r26, r19
    1590:	90 0d       	add	r25, r0
    1592:	b2 9f       	mul	r27, r18
    1594:	90 0d       	add	r25, r0
    1596:	11 24       	eor	r1, r1
    1598:	e8 0f       	add	r30, r24
    159a:	f9 1f       	adc	r31, r25
    159c:	eb 5b       	subi	r30, 0xBB	; 187
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	40 83       	st	Z, r20
    15a2:	51 83       	std	Z+1, r21	; 0x01
    15a4:	62 83       	std	Z+2, r22	; 0x02
    15a6:	73 83       	std	Z+3, r23	; 0x03
}
    15a8:	08 95       	ret

000015aa <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
    15aa:	e0 91 49 01 	lds	r30, 0x0149
    15ae:	f0 91 4a 01 	lds	r31, 0x014A
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	25 e1       	ldi	r18, 0x15	; 21
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	ac 01       	movw	r20, r24
    15ba:	42 9f       	mul	r20, r18
    15bc:	c0 01       	movw	r24, r0
    15be:	43 9f       	mul	r20, r19
    15c0:	90 0d       	add	r25, r0
    15c2:	52 9f       	mul	r21, r18
    15c4:	90 0d       	add	r25, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	e8 0f       	add	r30, r24
    15ca:	f9 1f       	adc	r31, r25
    15cc:	df 01       	movw	r26, r30
    15ce:	d9 96       	adiw	r26, 0x39	; 57
    15d0:	61 ad       	ldd	r22, Z+57	; 0x39
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	7c 91       	ld	r23, X
    15d6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	8c 91       	ld	r24, X
    15dc:	12 97       	sbiw	r26, 0x02	; 2
    15de:	13 96       	adiw	r26, 0x03	; 3
    15e0:	9c 91       	ld	r25, X
    15e2:	08 95       	ret

000015e4 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    15e4:	e0 91 49 01 	lds	r30, 0x0149
    15e8:	f0 91 4a 01 	lds	r31, 0x014A
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	25 e1       	ldi	r18, 0x15	; 21
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	dc 01       	movw	r26, r24
    15f4:	a2 9f       	mul	r26, r18
    15f6:	c0 01       	movw	r24, r0
    15f8:	a3 9f       	mul	r26, r19
    15fa:	90 0d       	add	r25, r0
    15fc:	b2 9f       	mul	r27, r18
    15fe:	90 0d       	add	r25, r0
    1600:	11 24       	eor	r1, r1
    1602:	e8 0f       	add	r30, r24
    1604:	f9 1f       	adc	r31, r25
    1606:	41 af       	std	Z+57, r20	; 0x39
    1608:	52 af       	std	Z+58, r21	; 0x3a
    160a:	63 af       	std	Z+59, r22	; 0x3b
    160c:	74 af       	std	Z+60, r23	; 0x3c
}
    160e:	08 95       	ret

00001610 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    1610:	e0 91 49 01 	lds	r30, 0x0149
    1614:	f0 91 4a 01 	lds	r31, 0x014A
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	25 e1       	ldi	r18, 0x15	; 21
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	ac 01       	movw	r20, r24
    1620:	42 9f       	mul	r20, r18
    1622:	c0 01       	movw	r24, r0
    1624:	43 9f       	mul	r20, r19
    1626:	90 0d       	add	r25, r0
    1628:	52 9f       	mul	r21, r18
    162a:	90 0d       	add	r25, r0
    162c:	11 24       	eor	r1, r1
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	fd 96       	adiw	r30, 0x3d	; 61
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Target;
}
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	08 95       	ret

0000163e <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    163e:	e0 91 49 01 	lds	r30, 0x0149
    1642:	f0 91 4a 01 	lds	r31, 0x014A
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	25 e1       	ldi	r18, 0x15	; 21
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	dc 01       	movw	r26, r24
    164e:	a2 9f       	mul	r26, r18
    1650:	c0 01       	movw	r24, r0
    1652:	a3 9f       	mul	r26, r19
    1654:	90 0d       	add	r25, r0
    1656:	b2 9f       	mul	r27, r18
    1658:	90 0d       	add	r25, r0
    165a:	11 24       	eor	r1, r1
    165c:	e8 0f       	add	r30, r24
    165e:	f9 1f       	adc	r31, r25
    1660:	fd 96       	adiw	r30, 0x3d	; 61
    1662:	40 83       	st	Z, r20
    1664:	51 83       	std	Z+1, r21	; 0x01
    1666:	62 83       	std	Z+2, r22	; 0x02
    1668:	73 83       	std	Z+3, r23	; 0x03
}
    166a:	08 95       	ret

0000166c <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    166c:	e0 91 49 01 	lds	r30, 0x0149
    1670:	f0 91 4a 01 	lds	r31, 0x014A
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	25 e1       	ldi	r18, 0x15	; 21
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	ac 01       	movw	r20, r24
    167c:	42 9f       	mul	r20, r18
    167e:	c0 01       	movw	r24, r0
    1680:	43 9f       	mul	r20, r19
    1682:	90 0d       	add	r25, r0
    1684:	52 9f       	mul	r21, r18
    1686:	90 0d       	add	r25, r0
    1688:	11 24       	eor	r1, r1
    168a:	e8 0f       	add	r30, r24
    168c:	f9 1f       	adc	r31, r25
    168e:	ef 5b       	subi	r30, 0xBF	; 191
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	08 95       	ret

0000169c <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    169c:	e0 91 49 01 	lds	r30, 0x0149
    16a0:	f0 91 4a 01 	lds	r31, 0x014A
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	25 e1       	ldi	r18, 0x15	; 21
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	dc 01       	movw	r26, r24
    16ac:	a2 9f       	mul	r26, r18
    16ae:	c0 01       	movw	r24, r0
    16b0:	a3 9f       	mul	r26, r19
    16b2:	90 0d       	add	r25, r0
    16b4:	b2 9f       	mul	r27, r18
    16b6:	90 0d       	add	r25, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	e8 0f       	add	r30, r24
    16bc:	f9 1f       	adc	r31, r25
    16be:	ef 5b       	subi	r30, 0xBF	; 191
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	40 83       	st	Z, r20
    16c4:	51 83       	std	Z+1, r21	; 0x01
    16c6:	62 83       	std	Z+2, r22	; 0x02
    16c8:	73 83       	std	Z+3, r23	; 0x03
}
    16ca:	08 95       	ret

000016cc <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    16cc:	e0 91 49 01 	lds	r30, 0x0149
    16d0:	f0 91 4a 01 	lds	r31, 0x014A
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	25 e1       	ldi	r18, 0x15	; 21
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	ac 01       	movw	r20, r24
    16dc:	42 9f       	mul	r20, r18
    16de:	c0 01       	movw	r24, r0
    16e0:	43 9f       	mul	r20, r19
    16e2:	90 0d       	add	r25, r0
    16e4:	52 9f       	mul	r21, r18
    16e6:	90 0d       	add	r25, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	e8 0f       	add	r30, r24
    16ec:	f9 1f       	adc	r31, r25
    16ee:	e7 5b       	subi	r30, 0xB7	; 183
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	08 95       	ret

000016fc <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    16fc:	e0 91 49 01 	lds	r30, 0x0149
    1700:	f0 91 4a 01 	lds	r31, 0x014A
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	25 e1       	ldi	r18, 0x15	; 21
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	dc 01       	movw	r26, r24
    170c:	a2 9f       	mul	r26, r18
    170e:	c0 01       	movw	r24, r0
    1710:	a3 9f       	mul	r26, r19
    1712:	90 0d       	add	r25, r0
    1714:	b2 9f       	mul	r27, r18
    1716:	90 0d       	add	r25, r0
    1718:	11 24       	eor	r1, r1
    171a:	e8 0f       	add	r30, r24
    171c:	f9 1f       	adc	r31, r25
    171e:	e7 5b       	subi	r30, 0xB7	; 183
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	40 83       	st	Z, r20
    1724:	51 83       	std	Z+1, r21	; 0x01
    1726:	62 83       	std	Z+2, r22	; 0x02
    1728:	73 83       	std	Z+3, r23	; 0x03
}
    172a:	08 95       	ret

0000172c <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    172c:	e0 91 49 01 	lds	r30, 0x0149
    1730:	f0 91 4a 01 	lds	r31, 0x014A
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	25 e1       	ldi	r18, 0x15	; 21
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	ac 01       	movw	r20, r24
    173c:	42 9f       	mul	r20, r18
    173e:	c0 01       	movw	r24, r0
    1740:	43 9f       	mul	r20, r19
    1742:	90 0d       	add	r25, r0
    1744:	52 9f       	mul	r21, r18
    1746:	90 0d       	add	r25, r0
    1748:	11 24       	eor	r1, r1
    174a:	e8 0f       	add	r30, r24
    174c:	f9 1f       	adc	r31, r25
    174e:	80 ad       	ldd	r24, Z+56	; 0x38
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	08 95       	ret

00001754 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1754:	e0 91 49 01 	lds	r30, 0x0149
    1758:	f0 91 4a 01 	lds	r31, 0x014A
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	25 e1       	ldi	r18, 0x15	; 21
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	ac 01       	movw	r20, r24
    1764:	42 9f       	mul	r20, r18
    1766:	c0 01       	movw	r24, r0
    1768:	43 9f       	mul	r20, r19
    176a:	90 0d       	add	r25, r0
    176c:	52 9f       	mul	r21, r18
    176e:	90 0d       	add	r25, r0
    1770:	11 24       	eor	r1, r1
    1772:	e8 0f       	add	r30, r24
    1774:	f9 1f       	adc	r31, r25
    1776:	80 ad       	ldd	r24, Z+56	; 0x38
    1778:	81 60       	ori	r24, 0x01	; 1
    177a:	80 af       	std	Z+56, r24	; 0x38
}
    177c:	08 95       	ret

0000177e <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    177e:	e0 91 49 01 	lds	r30, 0x0149
    1782:	f0 91 4a 01 	lds	r31, 0x014A
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	25 e1       	ldi	r18, 0x15	; 21
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	ac 01       	movw	r20, r24
    178e:	42 9f       	mul	r20, r18
    1790:	c0 01       	movw	r24, r0
    1792:	43 9f       	mul	r20, r19
    1794:	90 0d       	add	r25, r0
    1796:	52 9f       	mul	r21, r18
    1798:	90 0d       	add	r25, r0
    179a:	11 24       	eor	r1, r1
    179c:	e8 0f       	add	r30, r24
    179e:	f9 1f       	adc	r31, r25
    17a0:	80 ad       	ldd	r24, Z+56	; 0x38
    17a2:	8e 7f       	andi	r24, 0xFE	; 254
    17a4:	80 af       	std	Z+56, r24	; 0x38
}
    17a6:	08 95       	ret

000017a8 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    17a8:	e0 91 49 01 	lds	r30, 0x0149
    17ac:	f0 91 4a 01 	lds	r31, 0x014A
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	25 e1       	ldi	r18, 0x15	; 21
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	ac 01       	movw	r20, r24
    17b8:	42 9f       	mul	r20, r18
    17ba:	c0 01       	movw	r24, r0
    17bc:	43 9f       	mul	r20, r19
    17be:	90 0d       	add	r25, r0
    17c0:	52 9f       	mul	r21, r18
    17c2:	90 0d       	add	r25, r0
    17c4:	11 24       	eor	r1, r1
    17c6:	e8 0f       	add	r30, r24
    17c8:	f9 1f       	adc	r31, r25
    17ca:	80 ad       	ldd	r24, Z+56	; 0x38
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    17cc:	eb 5b       	subi	r30, 0xBB	; 187
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	10 82       	st	Z, r1
    17d2:	11 82       	std	Z+1, r1	; 0x01
    17d4:	12 82       	std	Z+2, r1	; 0x02
    17d6:	13 82       	std	Z+3, r1	; 0x03
    17d8:	e5 54       	subi	r30, 0x45	; 69
    17da:	f0 40       	sbci	r31, 0x00	; 0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    17dc:	11 ae       	std	Z+57, r1	; 0x39
    17de:	12 ae       	std	Z+58, r1	; 0x3a
    17e0:	13 ae       	std	Z+59, r1	; 0x3b
    17e2:	14 ae       	std	Z+60, r1	; 0x3c
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    17e4:	fd 96       	adiw	r30, 0x3d	; 61
    17e6:	11 92       	st	Z+, r1
    17e8:	11 92       	st	Z+, r1
    17ea:	11 92       	st	Z+, r1
    17ec:	11 92       	st	Z+, r1
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    17ee:	10 82       	st	Z, r1
    17f0:	11 82       	std	Z+1, r1	; 0x01
    17f2:	12 82       	std	Z+2, r1	; 0x02
    17f4:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    17f6:	38 96       	adiw	r30, 0x08	; 8
    17f8:	10 82       	st	Z, r1
    17fa:	11 82       	std	Z+1, r1	; 0x01
    17fc:	12 82       	std	Z+2, r1	; 0x02
    17fe:	13 82       	std	Z+3, r1	; 0x03
    1800:	e9 54       	subi	r30, 0x49	; 73
    1802:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1804:	80 7e       	andi	r24, 0xE0	; 224
    1806:	80 af       	std	Z+56, r24	; 0x38
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    1808:	08 95       	ret

0000180a <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    180a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <Timebase_UpCounter_Reset>
}
    180e:	08 95       	ret

00001810 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1810:	e0 91 49 01 	lds	r30, 0x0149
    1814:	f0 91 4a 01 	lds	r31, 0x014A
    1818:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    181a:	25 e1       	ldi	r18, 0x15	; 21
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	ac 01       	movw	r20, r24
    1820:	42 9f       	mul	r20, r18
    1822:	c0 01       	movw	r24, r0
    1824:	43 9f       	mul	r20, r19
    1826:	90 0d       	add	r25, r0
    1828:	52 9f       	mul	r21, r18
    182a:	90 0d       	add	r25, r0
    182c:	11 24       	eor	r1, r1
    182e:	e8 0f       	add	r30, r24
    1830:	f9 1f       	adc	r31, r25
    1832:	90 ad       	ldd	r25, Z+56	; 0x38
    1834:	89 2f       	mov	r24, r25
    1836:	86 95       	lsr	r24
    1838:	8f 70       	andi	r24, 0x0F	; 15
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	19 f0       	breq	.+6      	; 0x1844 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    183e:	91 7e       	andi	r25, 0xE1	; 225
    1840:	92 60       	ori	r25, 0x02	; 2
    1842:	90 af       	std	Z+56, r25	; 0x38
    1844:	08 95       	ret

00001846 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1846:	e0 91 49 01 	lds	r30, 0x0149
    184a:	f0 91 4a 01 	lds	r31, 0x014A
    184e:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1850:	25 e1       	ldi	r18, 0x15	; 21
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	ac 01       	movw	r20, r24
    1856:	42 9f       	mul	r20, r18
    1858:	c0 01       	movw	r24, r0
    185a:	43 9f       	mul	r20, r19
    185c:	90 0d       	add	r25, r0
    185e:	52 9f       	mul	r21, r18
    1860:	90 0d       	add	r25, r0
    1862:	11 24       	eor	r1, r1
    1864:	e8 0f       	add	r30, r24
    1866:	f9 1f       	adc	r31, r25
    1868:	90 ad       	ldd	r25, Z+56	; 0x38
    186a:	89 2f       	mov	r24, r25
    186c:	86 95       	lsr	r24
    186e:	8f 70       	andi	r24, 0x0F	; 15
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	19 f0       	breq	.+6      	; 0x187a <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1874:	91 7e       	andi	r25, 0xE1	; 225
    1876:	94 60       	ori	r25, 0x04	; 4
    1878:	90 af       	std	Z+56, r25	; 0x38
    187a:	08 95       	ret

0000187c <Timebase_UpCounter_Set_Securely>:
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
    187c:	0f 93       	push	r16
    187e:	1f 93       	push	r17
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1884:	c0 91 49 01 	lds	r28, 0x0149
    1888:	d0 91 4a 01 	lds	r29, 0x014A
    188c:	08 2f       	mov	r16, r24
    188e:	10 e0       	ldi	r17, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1890:	85 e1       	ldi	r24, 0x15	; 21
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	08 9f       	mul	r16, r24
    1896:	f0 01       	movw	r30, r0
    1898:	09 9f       	mul	r16, r25
    189a:	f0 0d       	add	r31, r0
    189c:	18 9f       	mul	r17, r24
    189e:	f0 0d       	add	r31, r0
    18a0:	11 24       	eor	r1, r1
    18a2:	ec 0f       	add	r30, r28
    18a4:	fd 1f       	adc	r31, r29
    18a6:	80 ad       	ldd	r24, Z+56	; 0x38
    18a8:	86 95       	lsr	r24
    18aa:	8f 70       	andi	r24, 0x0F	; 15
    18ac:	81 f5       	brne	.+96     	; 0x190e <Timebase_UpCounter_Set_Securely+0x92>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    18ae:	eb 5b       	subi	r30, 0xBB	; 187
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	10 82       	st	Z, r1
    18b4:	11 82       	std	Z+1, r1	; 0x01
    18b6:	12 82       	std	Z+2, r1	; 0x02
    18b8:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    18ba:	12 92       	st	-Z, r1
    18bc:	12 92       	st	-Z, r1
    18be:	12 92       	st	-Z, r1
    18c0:	12 92       	st	-Z, r1
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    18c2:	72 93       	st	-Z, r23
    18c4:	62 93       	st	-Z, r22
    18c6:	52 93       	st	-Z, r21
    18c8:	42 93       	st	-Z, r20

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    18ca:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    18cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    18d0:	ac 85       	ldd	r26, Y+12	; 0x0c
    18d2:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    18d4:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    18d6:	25 e1       	ldi	r18, 0x15	; 21
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	02 9f       	mul	r16, r18
    18dc:	f0 01       	movw	r30, r0
    18de:	03 9f       	mul	r16, r19
    18e0:	f0 0d       	add	r31, r0
    18e2:	12 9f       	mul	r17, r18
    18e4:	f0 0d       	add	r31, r0
    18e6:	11 24       	eor	r1, r1
    18e8:	ec 0f       	add	r30, r28
    18ea:	fd 1f       	adc	r31, r29
    18ec:	84 0f       	add	r24, r20
    18ee:	95 1f       	adc	r25, r21
    18f0:	a6 1f       	adc	r26, r22
    18f2:	b7 1f       	adc	r27, r23
    18f4:	81 af       	std	Z+57, r24	; 0x39
    18f6:	92 af       	std	Z+58, r25	; 0x3a
    18f8:	a3 af       	std	Z+59, r26	; 0x3b
    18fa:	b4 af       	std	Z+60, r27	; 0x3c
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    18fc:	90 ad       	ldd	r25, Z+56	; 0x38
    18fe:	89 2f       	mov	r24, r25
    1900:	86 95       	lsr	r24
    1902:	8f 70       	andi	r24, 0x0F	; 15
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	19 f0       	breq	.+6      	; 0x190e <Timebase_UpCounter_Set_Securely+0x92>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1908:	91 7e       	andi	r25, 0xE1	; 225
    190a:	92 60       	ori	r25, 0x02	; 2
    190c:	90 af       	std	Z+56, r25	; 0x38
    Timebase_UpCounter_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_Start(window);
  }
}
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	08 95       	ret

00001918 <Timebase_UpCounter_Set_Forcefully>:

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1918:	df 92       	push	r13
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	d8 2e       	mov	r13, r24
    1924:	7a 01       	movw	r14, r20
    1926:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    1928:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    192c:	8d 2d       	mov	r24, r13
    192e:	b8 01       	movw	r22, r16
    1930:	a7 01       	movw	r20, r14
    1932:	0e 94 3e 0c 	call	0x187c	; 0x187c <Timebase_UpCounter_Set_Securely>
} 
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	08 95       	ret

00001942 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    1942:	ef 92       	push	r14
    1944:	ff 92       	push	r15
    1946:	0f 93       	push	r16
    1948:	1f 93       	push	r17
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    194e:	a0 91 49 01 	lds	r26, 0x0149
    1952:	b0 91 4a 01 	lds	r27, 0x014A
    1956:	68 2f       	mov	r22, r24
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	85 e1       	ldi	r24, 0x15	; 21
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	68 9f       	mul	r22, r24
    1960:	f0 01       	movw	r30, r0
    1962:	69 9f       	mul	r22, r25
    1964:	f0 0d       	add	r31, r0
    1966:	78 9f       	mul	r23, r24
    1968:	f0 0d       	add	r31, r0
    196a:	11 24       	eor	r1, r1
    196c:	ea 0f       	add	r30, r26
    196e:	fb 1f       	adc	r31, r27
    1970:	80 ad       	ldd	r24, Z+56	; 0x38
    1972:	86 95       	lsr	r24
    1974:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1976:	81 30       	cpi	r24, 0x01	; 1
    1978:	09 f0       	breq	.+2      	; 0x197c <Timebase_UpCounter_Update+0x3a>
    197a:	50 c0       	rjmp	.+160    	; 0x1a1c <Timebase_UpCounter_Update+0xda>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    197c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    197e:	1a 96       	adiw	r26, 0x0a	; 10
    1980:	ed 90       	ld	r14, X+
    1982:	fd 90       	ld	r15, X+
    1984:	0d 91       	ld	r16, X+
    1986:	1c 91       	ld	r17, X
    1988:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    198a:	78 94       	sei

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    198c:	85 e1       	ldi	r24, 0x15	; 21
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	68 9f       	mul	r22, r24
    1992:	f0 01       	movw	r30, r0
    1994:	69 9f       	mul	r22, r25
    1996:	f0 0d       	add	r31, r0
    1998:	78 9f       	mul	r23, r24
    199a:	f0 0d       	add	r31, r0
    199c:	11 24       	eor	r1, r1
    199e:	ea 0f       	add	r30, r26
    19a0:	fb 1f       	adc	r31, r27
    19a2:	21 ad       	ldd	r18, Z+57	; 0x39
    19a4:	32 ad       	ldd	r19, Z+58	; 0x3a
    19a6:	43 ad       	ldd	r20, Z+59	; 0x3b
    19a8:	54 ad       	ldd	r21, Z+60	; 0x3c
    19aa:	2e 19       	sub	r18, r14
    19ac:	3f 09       	sbc	r19, r15
    19ae:	40 0b       	sbc	r20, r16
    19b0:	51 0b       	sbc	r21, r17
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    19b2:	bf 01       	movw	r22, r30
    19b4:	6f 5b       	subi	r22, 0xBF	; 191
    19b6:	7f 4f       	sbci	r23, 0xFF	; 255
    19b8:	db 01       	movw	r26, r22
    19ba:	2d 93       	st	X+, r18
    19bc:	3d 93       	st	X+, r19
    19be:	4d 93       	st	X+, r20
    19c0:	5c 93       	st	X, r21
    19c2:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    19c4:	ef 01       	movw	r28, r30
    19c6:	cb 5b       	subi	r28, 0xBB	; 187
    19c8:	df 4f       	sbci	r29, 0xFF	; 255
    19ca:	fd 96       	adiw	r30, 0x3d	; 61
    19cc:	e0 80       	ld	r14, Z
    19ce:	f1 80       	ldd	r15, Z+1	; 0x01
    19d0:	02 81       	ldd	r16, Z+2	; 0x02
    19d2:	13 81       	ldd	r17, Z+3	; 0x03
    19d4:	fd 97       	sbiw	r30, 0x3d	; 61
    19d6:	d8 01       	movw	r26, r16
    19d8:	c7 01       	movw	r24, r14
    19da:	82 1b       	sub	r24, r18
    19dc:	93 0b       	sbc	r25, r19
    19de:	a4 0b       	sbc	r26, r20
    19e0:	b5 0b       	sbc	r27, r21
    19e2:	88 83       	st	Y, r24
    19e4:	99 83       	std	Y+1, r25	; 0x01
    19e6:	aa 83       	std	Y+2, r26	; 0x02
    19e8:	bb 83       	std	Y+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    19ea:	12 16       	cp	r1, r18
    19ec:	13 06       	cpc	r1, r19
    19ee:	14 06       	cpc	r1, r20
    19f0:	15 06       	cpc	r1, r21
    19f2:	0c f4       	brge	.+2      	; 0x19f6 <Timebase_UpCounter_Update+0xb4>
    19f4:	46 c0       	rjmp	.+140    	; 0x1a82 <Timebase_UpCounter_Update+0x140>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    19f6:	11 ae       	std	Z+57, r1	; 0x39
    19f8:	12 ae       	std	Z+58, r1	; 0x3a
    19fa:	13 ae       	std	Z+59, r1	; 0x3b
    19fc:	14 ae       	std	Z+60, r1	; 0x3c
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    19fe:	db 01       	movw	r26, r22
    1a00:	1d 92       	st	X+, r1
    1a02:	1d 92       	st	X+, r1
    1a04:	1d 92       	st	X+, r1
    1a06:	1c 92       	st	X, r1
    1a08:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1a0a:	e8 82       	st	Y, r14
    1a0c:	f9 82       	std	Y+1, r15	; 0x01
    1a0e:	0a 83       	std	Y+2, r16	; 0x02
    1a10:	1b 83       	std	Y+3, r17	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1a12:	80 ad       	ldd	r24, Z+56	; 0x38
    1a14:	81 7e       	andi	r24, 0xE1	; 225
    1a16:	88 60       	ori	r24, 0x08	; 8
    1a18:	80 af       	std	Z+56, r24	; 0x38
    1a1a:	33 c0       	rjmp	.+102    	; 0x1a82 <Timebase_UpCounter_Update+0x140>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	89 f5       	brne	.+98     	; 0x1a82 <Timebase_UpCounter_Update+0x140>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1a20:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1a22:	1a 96       	adiw	r26, 0x0a	; 10
    1a24:	2d 91       	ld	r18, X+
    1a26:	3d 91       	ld	r19, X+
    1a28:	4d 91       	ld	r20, X+
    1a2a:	5c 91       	ld	r21, X
    1a2c:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1a2e:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1a30:	85 e1       	ldi	r24, 0x15	; 21
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	68 9f       	mul	r22, r24
    1a36:	f0 01       	movw	r30, r0
    1a38:	69 9f       	mul	r22, r25
    1a3a:	f0 0d       	add	r31, r0
    1a3c:	78 9f       	mul	r23, r24
    1a3e:	f0 0d       	add	r31, r0
    1a40:	11 24       	eor	r1, r1
    1a42:	ea 0f       	add	r30, r26
    1a44:	fb 1f       	adc	r31, r27
    1a46:	ef 5b       	subi	r30, 0xBF	; 191
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	e0 80       	ld	r14, Z
    1a4c:	f1 80       	ldd	r15, Z+1	; 0x01
    1a4e:	02 81       	ldd	r16, Z+2	; 0x02
    1a50:	13 81       	ldd	r17, Z+3	; 0x03
    1a52:	e1 54       	subi	r30, 0x41	; 65
    1a54:	f0 40       	sbci	r31, 0x00	; 0
    1a56:	2e 0d       	add	r18, r14
    1a58:	3f 1d       	adc	r19, r15
    1a5a:	40 1f       	adc	r20, r16
    1a5c:	51 1f       	adc	r21, r17
    1a5e:	21 af       	std	Z+57, r18	; 0x39
    1a60:	32 af       	std	Z+58, r19	; 0x3a
    1a62:	43 af       	std	Z+59, r20	; 0x3b
    1a64:	54 af       	std	Z+60, r21	; 0x3c
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1a66:	fd 96       	adiw	r30, 0x3d	; 61
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a6e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a70:	8e 19       	sub	r24, r14
    1a72:	9f 09       	sbc	r25, r15
    1a74:	a0 0b       	sbc	r26, r16
    1a76:	b1 0b       	sbc	r27, r17
    1a78:	38 96       	adiw	r30, 0x08	; 8
    1a7a:	80 83       	st	Z, r24
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	a2 83       	std	Z+2, r26	; 0x02
    1a80:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	1f 91       	pop	r17
    1a88:	0f 91       	pop	r16
    1a8a:	ff 90       	pop	r15
    1a8c:	ef 90       	pop	r14
    1a8e:	08 95       	ret

00001a90 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	e0 91 49 01 	lds	r30, 0x0149
    1a96:	f0 91 4a 01 	lds	r31, 0x014A
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	25 e1       	ldi	r18, 0x15	; 21
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	bc 01       	movw	r22, r24
    1aa2:	62 9f       	mul	r22, r18
    1aa4:	c0 01       	movw	r24, r0
    1aa6:	63 9f       	mul	r22, r19
    1aa8:	90 0d       	add	r25, r0
    1aaa:	72 9f       	mul	r23, r18
    1aac:	90 0d       	add	r25, r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	e8 0f       	add	r30, r24
    1ab2:	f9 1f       	adc	r31, r25
    1ab4:	80 ad       	ldd	r24, Z+56	; 0x38
    1ab6:	86 95       	lsr	r24
    1ab8:	8f 70       	andi	r24, 0x0F	; 15
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	09 f4       	brne	.+2      	; 0x1ac0 <Timebase_UpCounter_Expired+0x30>
    1abe:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1ac0:	84 2f       	mov	r24, r20
    1ac2:	08 95       	ret

00001ac4 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1ac4:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1ac6:	e0 91 49 01 	lds	r30, 0x0149
    1aca:	f0 91 4a 01 	lds	r31, 0x014A
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	85 e1       	ldi	r24, 0x15	; 21
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	26 9f       	mul	r18, r22
    1ada:	c0 01       	movw	r24, r0
    1adc:	27 9f       	mul	r18, r23
    1ade:	90 0d       	add	r25, r0
    1ae0:	36 9f       	mul	r19, r22
    1ae2:	90 0d       	add	r25, r0
    1ae4:	11 24       	eor	r1, r1
    1ae6:	e8 0f       	add	r30, r24
    1ae8:	f9 1f       	adc	r31, r25
    1aea:	80 ad       	ldd	r24, Z+56	; 0x38
    1aec:	86 95       	lsr	r24
    1aee:	8f 70       	andi	r24, 0x0F	; 15
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	11 f0       	breq	.+4      	; 0x1af8 <Timebase_UpCounter_Expired_Event+0x34>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1af8:	84 2f       	mov	r24, r20
    1afa:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <Timebase_UpCounter_Reset>
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1b00:	08 95       	ret

00001b02 <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1b02:	cf 93       	push	r28
    1b04:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1b06:	c0 91 49 01 	lds	r28, 0x0149
    1b0a:	d0 91 4a 01 	lds	r29, 0x014A
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1b10:	25 e1       	ldi	r18, 0x15	; 21
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	fc 01       	movw	r30, r24
    1b16:	e2 9f       	mul	r30, r18
    1b18:	c0 01       	movw	r24, r0
    1b1a:	e3 9f       	mul	r30, r19
    1b1c:	90 0d       	add	r25, r0
    1b1e:	f2 9f       	mul	r31, r18
    1b20:	90 0d       	add	r25, r0
    1b22:	11 24       	eor	r1, r1
    1b24:	c8 0f       	add	r28, r24
    1b26:	d9 1f       	adc	r29, r25
    1b28:	88 ad       	ldd	r24, Y+56	; 0x38
    1b2a:	80 fd       	sbrc	r24, 0
    1b2c:	16 c0       	rjmp	.+44     	; 0x1b5a <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e7 5b       	subi	r30, 0xB7	; 183
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	cb 5b       	subi	r28, 0xBB	; 187
    1b36:	df 4f       	sbci	r29, 0xFF	; 255
    1b38:	88 81       	ld	r24, Y
    1b3a:	99 81       	ldd	r25, Y+1	; 0x01
    1b3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b3e:	bb 81       	ldd	r27, Y+3	; 0x03
    1b40:	c5 54       	subi	r28, 0x45	; 69
    1b42:	d0 40       	sbci	r29, 0x00	; 0
    1b44:	84 0f       	add	r24, r20
    1b46:	95 1f       	adc	r25, r21
    1b48:	a6 1f       	adc	r26, r22
    1b4a:	b7 1f       	adc	r27, r23
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	a2 83       	std	Z+2, r26	; 0x02
    1b52:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1b54:	88 ad       	ldd	r24, Y+56	; 0x38
    1b56:	81 60       	ori	r24, 0x01	; 1
    1b58:	88 af       	std	Y+56, r24	; 0x38
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	08 95       	ret

00001b60 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1b60:	e0 91 49 01 	lds	r30, 0x0149
    1b64:	f0 91 4a 01 	lds	r31, 0x014A
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1b6a:	25 e1       	ldi	r18, 0x15	; 21
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	ac 01       	movw	r20, r24
    1b70:	42 9f       	mul	r20, r18
    1b72:	c0 01       	movw	r24, r0
    1b74:	43 9f       	mul	r20, r19
    1b76:	90 0d       	add	r25, r0
    1b78:	52 9f       	mul	r21, r18
    1b7a:	90 0d       	add	r25, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	e8 0f       	add	r30, r24
    1b80:	f9 1f       	adc	r31, r25
    1b82:	df 01       	movw	r26, r30
    1b84:	ab 5b       	subi	r26, 0xBB	; 187
    1b86:	bf 4f       	sbci	r27, 0xFF	; 255
    1b88:	e7 5b       	subi	r30, 0xB7	; 183
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	20 81       	ld	r18, Z
    1b8e:	31 81       	ldd	r19, Z+1	; 0x01
    1b90:	42 81       	ldd	r20, Z+2	; 0x02
    1b92:	53 81       	ldd	r21, Z+3	; 0x03
    1b94:	8d 91       	ld	r24, X+
    1b96:	9d 91       	ld	r25, X+
    1b98:	0d 90       	ld	r0, X+
    1b9a:	bc 91       	ld	r27, X
    1b9c:	a0 2d       	mov	r26, r0
    1b9e:	28 1b       	sub	r18, r24
    1ba0:	39 0b       	sbc	r19, r25
    1ba2:	4a 0b       	sbc	r20, r26
    1ba4:	5b 0b       	sbc	r21, r27
    1ba6:	57 ff       	sbrs	r21, 7
    1ba8:	04 c0       	rjmp	.+8      	; 0x1bb2 <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1bb2:	b9 01       	movw	r22, r18
    1bb4:	ca 01       	movw	r24, r20
    1bb6:	08 95       	ret

00001bb8 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1bbc:	c0 91 49 01 	lds	r28, 0x0149
    1bc0:	d0 91 4a 01 	lds	r29, 0x014A
    1bc4:	68 2f       	mov	r22, r24
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1bc8:	85 e1       	ldi	r24, 0x15	; 21
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	68 9f       	mul	r22, r24
    1bce:	f0 01       	movw	r30, r0
    1bd0:	69 9f       	mul	r22, r25
    1bd2:	f0 0d       	add	r31, r0
    1bd4:	78 9f       	mul	r23, r24
    1bd6:	f0 0d       	add	r31, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	ec 0f       	add	r30, r28
    1bdc:	fd 1f       	adc	r31, r29
    1bde:	df 01       	movw	r26, r30
    1be0:	ab 5b       	subi	r26, 0xBB	; 187
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	e7 5b       	subi	r30, 0xB7	; 183
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	20 81       	ld	r18, Z
    1bea:	31 81       	ldd	r19, Z+1	; 0x01
    1bec:	42 81       	ldd	r20, Z+2	; 0x02
    1bee:	53 81       	ldd	r21, Z+3	; 0x03
    1bf0:	8d 91       	ld	r24, X+
    1bf2:	9d 91       	ld	r25, X+
    1bf4:	0d 90       	ld	r0, X+
    1bf6:	bc 91       	ld	r27, X
    1bf8:	a0 2d       	mov	r26, r0
    1bfa:	28 1b       	sub	r18, r24
    1bfc:	39 0b       	sbc	r19, r25
    1bfe:	4a 0b       	sbc	r20, r26
    1c00:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1c02:	57 fd       	sbrc	r21, 7
    1c04:	07 c0       	rjmp	.+14     	; 0x1c14 <Timebase_UpCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1c06:	21 15       	cp	r18, r1
    1c08:	31 05       	cpc	r19, r1
    1c0a:	41 05       	cpc	r20, r1
    1c0c:	51 05       	cpc	r21, r1
    1c0e:	11 f0       	breq	.+4      	; 0x1c14 <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	12 c0       	rjmp	.+36     	; 0x1c38 <Timebase_UpCounter_Period_Value_Expired+0x80>
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	85 e1       	ldi	r24, 0x15	; 21
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	ac 01       	movw	r20, r24
    1c1c:	64 9f       	mul	r22, r20
    1c1e:	c0 01       	movw	r24, r0
    1c20:	65 9f       	mul	r22, r21
    1c22:	90 0d       	add	r25, r0
    1c24:	74 9f       	mul	r23, r20
    1c26:	90 0d       	add	r25, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	c8 0f       	add	r28, r24
    1c2c:	d9 1f       	adc	r29, r25
    1c2e:	88 ad       	ldd	r24, Y+56	; 0x38
    1c30:	80 ff       	sbrs	r24, 0
    1c32:	21 e0       	ldi	r18, 0x01	; 1
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1c38:	82 2f       	mov	r24, r18
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	08 95       	ret

00001c40 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1c40:	1f 93       	push	r17
    1c42:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1c44:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <Timebase_UpCounter_Period_Value_Expired>
    1c48:	81 30       	cpi	r24, 0x01	; 1
    1c4a:	11 f0       	breq	.+4      	; 0x1c50 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	16 c0       	rjmp	.+44     	; 0x1c7c <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1c50:	e0 91 49 01 	lds	r30, 0x0149
    1c54:	f0 91 4a 01 	lds	r31, 0x014A
    1c58:	21 2f       	mov	r18, r17
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	85 e1       	ldi	r24, 0x15	; 21
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	ac 01       	movw	r20, r24
    1c62:	24 9f       	mul	r18, r20
    1c64:	c0 01       	movw	r24, r0
    1c66:	25 9f       	mul	r18, r21
    1c68:	90 0d       	add	r25, r0
    1c6a:	34 9f       	mul	r19, r20
    1c6c:	90 0d       	add	r25, r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	e8 0f       	add	r30, r24
    1c72:	f9 1f       	adc	r31, r25
    1c74:	80 ad       	ldd	r24, Z+56	; 0x38
    1c76:	8e 7f       	andi	r24, 0xFE	; 254
    1c78:	80 af       	std	Z+56, r24	; 0x38
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1c7c:	1f 91       	pop	r17
    1c7e:	08 95       	ret

00001c80 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	0e 94 a1 0c 	call	0x1942	; 0x1942 <Timebase_UpCounter_Update>
  }
}
    1c86:	08 95       	ret

00001c88 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <Timebase_UpCounter_Reset>
  }
}
    1c8e:	08 95       	ret

00001c90 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1c90:	e0 91 49 01 	lds	r30, 0x0149
    1c94:	f0 91 4a 01 	lds	r31, 0x014A
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	44 e0       	ldi	r20, 0x04	; 4
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	4a 95       	dec	r20
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <Timebase_DownCounter_SS_Get_Status+0xe>
    1ca6:	28 0f       	add	r18, r24
    1ca8:	39 1f       	adc	r19, r25
    1caa:	e2 0f       	add	r30, r18
    1cac:	f3 1f       	adc	r31, r19
    1cae:	e3 5b       	subi	r30, 0xB3	; 179
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1cb6:	8f 70       	andi	r24, 0x0F	; 15
    1cb8:	08 95       	ret

00001cba <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1cba:	e0 91 49 01 	lds	r30, 0x0149
    1cbe:	f0 91 4a 01 	lds	r31, 0x014A
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	54 e0       	ldi	r21, 0x04	; 4
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	5a 95       	dec	r21
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <Timebase_DownCounter_SS_Set_Status+0xe>
    1cd0:	28 0f       	add	r18, r24
    1cd2:	39 1f       	adc	r19, r25
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	e3 5b       	subi	r30, 0xB3	; 179
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	6f 70       	andi	r22, 0x0F	; 15
    1cde:	66 0f       	add	r22, r22
    1ce0:	80 81       	ld	r24, Z
    1ce2:	81 7e       	andi	r24, 0xE1	; 225
    1ce4:	86 2b       	or	r24, r22
    1ce6:	80 83       	st	Z, r24
}
    1ce8:	08 95       	ret

00001cea <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1cea:	e0 91 49 01 	lds	r30, 0x0149
    1cee:	f0 91 4a 01 	lds	r31, 0x014A
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	9c 01       	movw	r18, r24
    1cf6:	64 e0       	ldi	r22, 0x04	; 4
    1cf8:	22 0f       	add	r18, r18
    1cfa:	33 1f       	adc	r19, r19
    1cfc:	6a 95       	dec	r22
    1cfe:	e1 f7       	brne	.-8      	; 0x1cf8 <Timebase_DownCounter_SS_Get_Value+0xe>
    1d00:	28 0f       	add	r18, r24
    1d02:	39 1f       	adc	r19, r25
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	ea 5a       	subi	r30, 0xAA	; 170
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	08 95       	ret

00001d16 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1d16:	e0 91 49 01 	lds	r30, 0x0149
    1d1a:	f0 91 4a 01 	lds	r31, 0x014A
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	9c 01       	movw	r18, r24
    1d22:	a4 e0       	ldi	r26, 0x04	; 4
    1d24:	22 0f       	add	r18, r18
    1d26:	33 1f       	adc	r19, r19
    1d28:	aa 95       	dec	r26
    1d2a:	e1 f7       	brne	.-8      	; 0x1d24 <Timebase_DownCounter_SS_Set_Value+0xe>
    1d2c:	28 0f       	add	r18, r24
    1d2e:	39 1f       	adc	r19, r25
    1d30:	e2 0f       	add	r30, r18
    1d32:	f3 1f       	adc	r31, r19
    1d34:	ea 5a       	subi	r30, 0xAA	; 170
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	40 83       	st	Z, r20
    1d3a:	51 83       	std	Z+1, r21	; 0x01
    1d3c:	62 83       	std	Z+2, r22	; 0x02
    1d3e:	73 83       	std	Z+3, r23	; 0x03
}
    1d40:	08 95       	ret

00001d42 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1d42:	e0 91 49 01 	lds	r30, 0x0149
    1d46:	f0 91 4a 01 	lds	r31, 0x014A
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	9c 01       	movw	r18, r24
    1d4e:	b4 e0       	ldi	r27, 0x04	; 4
    1d50:	22 0f       	add	r18, r18
    1d52:	33 1f       	adc	r19, r19
    1d54:	ba 95       	dec	r27
    1d56:	e1 f7       	brne	.-8      	; 0x1d50 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1d58:	28 0f       	add	r18, r24
    1d5a:	39 1f       	adc	r19, r25
    1d5c:	e2 0f       	add	r30, r18
    1d5e:	f3 1f       	adc	r31, r19
    1d60:	e2 5b       	subi	r30, 0xB2	; 178
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	08 95       	ret

00001d6e <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1d6e:	e0 91 49 01 	lds	r30, 0x0149
    1d72:	f0 91 4a 01 	lds	r31, 0x014A
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 01       	movw	r18, r24
    1d7a:	44 e0       	ldi	r20, 0x04	; 4
    1d7c:	22 0f       	add	r18, r18
    1d7e:	33 1f       	adc	r19, r19
    1d80:	4a 95       	dec	r20
    1d82:	e1 f7       	brne	.-8      	; 0x1d7c <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1d84:	28 0f       	add	r18, r24
    1d86:	39 1f       	adc	r19, r25
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	ee 5a       	subi	r30, 0xAE	; 174
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	08 95       	ret

00001d9a <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1d9a:	e0 91 49 01 	lds	r30, 0x0149
    1d9e:	f0 91 4a 01 	lds	r31, 0x014A
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	9c 01       	movw	r18, r24
    1da6:	a4 e0       	ldi	r26, 0x04	; 4
    1da8:	22 0f       	add	r18, r18
    1daa:	33 1f       	adc	r19, r19
    1dac:	aa 95       	dec	r26
    1dae:	e1 f7       	brne	.-8      	; 0x1da8 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1db0:	28 0f       	add	r18, r24
    1db2:	39 1f       	adc	r19, r25
    1db4:	e2 0f       	add	r30, r18
    1db6:	f3 1f       	adc	r31, r19
    1db8:	e2 5b       	subi	r30, 0xB2	; 178
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	40 83       	st	Z, r20
    1dbe:	51 83       	std	Z+1, r21	; 0x01
    1dc0:	62 83       	std	Z+2, r22	; 0x02
    1dc2:	73 83       	std	Z+3, r23	; 0x03
}
    1dc4:	08 95       	ret

00001dc6 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1dc6:	e0 91 49 01 	lds	r30, 0x0149
    1dca:	f0 91 4a 01 	lds	r31, 0x014A
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 01       	movw	r18, r24
    1dd2:	b4 e0       	ldi	r27, 0x04	; 4
    1dd4:	22 0f       	add	r18, r18
    1dd6:	33 1f       	adc	r19, r19
    1dd8:	ba 95       	dec	r27
    1dda:	e1 f7       	brne	.-8      	; 0x1dd4 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1ddc:	28 0f       	add	r18, r24
    1dde:	39 1f       	adc	r19, r25
    1de0:	e2 0f       	add	r30, r18
    1de2:	f3 1f       	adc	r31, r19
    1de4:	ee 5a       	subi	r30, 0xAE	; 174
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	40 83       	st	Z, r20
    1dea:	51 83       	std	Z+1, r21	; 0x01
    1dec:	62 83       	std	Z+2, r22	; 0x02
    1dee:	73 83       	std	Z+3, r23	; 0x03
}
    1df0:	08 95       	ret

00001df2 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1df2:	e0 91 49 01 	lds	r30, 0x0149
    1df6:	f0 91 4a 01 	lds	r31, 0x014A
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	44 e0       	ldi	r20, 0x04	; 4
    1e00:	22 0f       	add	r18, r18
    1e02:	33 1f       	adc	r19, r19
    1e04:	4a 95       	dec	r20
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1e08:	28 0f       	add	r18, r24
    1e0a:	39 1f       	adc	r19, r25
    1e0c:	e2 0f       	add	r30, r18
    1e0e:	f3 1f       	adc	r31, r19
    1e10:	e6 5a       	subi	r30, 0xA6	; 166
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	60 81       	ld	r22, Z
    1e16:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	08 95       	ret

00001e1e <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1e1e:	e0 91 49 01 	lds	r30, 0x0149
    1e22:	f0 91 4a 01 	lds	r31, 0x014A
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1e2a:	77 ff       	sbrs	r23, 7
    1e2c:	11 c0       	rjmp	.+34     	; 0x1e50 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1e2e:	c9 01       	movw	r24, r18
    1e30:	b4 e0       	ldi	r27, 0x04	; 4
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	ba 95       	dec	r27
    1e38:	e1 f7       	brne	.-8      	; 0x1e32 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1e3a:	82 0f       	add	r24, r18
    1e3c:	93 1f       	adc	r25, r19
    1e3e:	e8 0f       	add	r30, r24
    1e40:	f9 1f       	adc	r31, r25
    1e42:	e6 5a       	subi	r30, 0xA6	; 166
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	10 82       	st	Z, r1
    1e48:	11 82       	std	Z+1, r1	; 0x01
    1e4a:	12 82       	std	Z+2, r1	; 0x02
    1e4c:	13 82       	std	Z+3, r1	; 0x03
    1e4e:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1e50:	c9 01       	movw	r24, r18
    1e52:	a4 e0       	ldi	r26, 0x04	; 4
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	aa 95       	dec	r26
    1e5a:	e1 f7       	brne	.-8      	; 0x1e54 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1e5c:	82 0f       	add	r24, r18
    1e5e:	93 1f       	adc	r25, r19
    1e60:	e8 0f       	add	r30, r24
    1e62:	f9 1f       	adc	r31, r25
    1e64:	e6 5a       	subi	r30, 0xA6	; 166
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	40 83       	st	Z, r20
    1e6a:	51 83       	std	Z+1, r21	; 0x01
    1e6c:	62 83       	std	Z+2, r22	; 0x02
    1e6e:	73 83       	std	Z+3, r23	; 0x03
    1e70:	08 95       	ret

00001e72 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1e72:	e0 91 49 01 	lds	r30, 0x0149
    1e76:	f0 91 4a 01 	lds	r31, 0x014A
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	44 e0       	ldi	r20, 0x04	; 4
    1e80:	22 0f       	add	r18, r18
    1e82:	33 1f       	adc	r19, r19
    1e84:	4a 95       	dec	r20
    1e86:	e1 f7       	brne	.-8      	; 0x1e80 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1e88:	28 0f       	add	r18, r24
    1e8a:	39 1f       	adc	r19, r25
    1e8c:	e2 0f       	add	r30, r18
    1e8e:	f3 1f       	adc	r31, r19
    1e90:	e3 5b       	subi	r30, 0xB3	; 179
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	08 95       	ret

00001e9a <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1e9a:	e0 91 49 01 	lds	r30, 0x0149
    1e9e:	f0 91 4a 01 	lds	r31, 0x014A
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 01       	movw	r18, r24
    1ea6:	54 e0       	ldi	r21, 0x04	; 4
    1ea8:	22 0f       	add	r18, r18
    1eaa:	33 1f       	adc	r19, r19
    1eac:	5a 95       	dec	r21
    1eae:	e1 f7       	brne	.-8      	; 0x1ea8 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1eb0:	28 0f       	add	r18, r24
    1eb2:	39 1f       	adc	r19, r25
    1eb4:	e2 0f       	add	r30, r18
    1eb6:	f3 1f       	adc	r31, r19
    1eb8:	e3 5b       	subi	r30, 0xB3	; 179
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 81       	ld	r24, Z
    1ebe:	81 60       	ori	r24, 0x01	; 1
    1ec0:	80 83       	st	Z, r24
}
    1ec2:	08 95       	ret

00001ec4 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ec4:	e0 91 49 01 	lds	r30, 0x0149
    1ec8:	f0 91 4a 01 	lds	r31, 0x014A
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	9c 01       	movw	r18, r24
    1ed0:	64 e0       	ldi	r22, 0x04	; 4
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	6a 95       	dec	r22
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1eda:	28 0f       	add	r18, r24
    1edc:	39 1f       	adc	r19, r25
    1ede:	e2 0f       	add	r30, r18
    1ee0:	f3 1f       	adc	r31, r19
    1ee2:	e3 5b       	subi	r30, 0xB3	; 179
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8e 7f       	andi	r24, 0xFE	; 254
    1eea:	80 83       	st	Z, r24
}
    1eec:	08 95       	ret

00001eee <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1eee:	e0 91 49 01 	lds	r30, 0x0149
    1ef2:	f0 91 4a 01 	lds	r31, 0x014A
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 01       	movw	r18, r24
    1efa:	74 e0       	ldi	r23, 0x04	; 4
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	7a 95       	dec	r23
    1f02:	e1 f7       	brne	.-8      	; 0x1efc <Timebase_DownCounter_SS_Reset+0xe>
    1f04:	28 0f       	add	r18, r24
    1f06:	39 1f       	adc	r19, r25
    1f08:	e2 0f       	add	r30, r18
    1f0a:	f3 1f       	adc	r31, r19
    1f0c:	ee 5a       	subi	r30, 0xAE	; 174
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	10 82       	st	Z, r1
    1f12:	11 82       	std	Z+1, r1	; 0x01
    1f14:	12 82       	std	Z+2, r1	; 0x02
    1f16:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1f18:	12 92       	st	-Z, r1
    1f1a:	12 92       	st	-Z, r1
    1f1c:	12 92       	st	-Z, r1
    1f1e:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f20:	38 96       	adiw	r30, 0x08	; 8
    1f22:	10 82       	st	Z, r1
    1f24:	11 82       	std	Z+1, r1	; 0x01
    1f26:	12 82       	std	Z+2, r1	; 0x02
    1f28:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f2a:	39 97       	sbiw	r30, 0x09	; 9
    1f2c:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1f2e:	80 7e       	andi	r24, 0xE0	; 224
    1f30:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1f32:	08 95       	ret

00001f34 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1f34:	e0 91 49 01 	lds	r30, 0x0149
    1f38:	f0 91 4a 01 	lds	r31, 0x014A
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9c 01       	movw	r18, r24
    1f40:	a4 e0       	ldi	r26, 0x04	; 4
    1f42:	22 0f       	add	r18, r18
    1f44:	33 1f       	adc	r19, r19
    1f46:	aa 95       	dec	r26
    1f48:	e1 f7       	brne	.-8      	; 0x1f42 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1f4a:	28 0f       	add	r18, r24
    1f4c:	39 1f       	adc	r19, r25
    1f4e:	e2 0f       	add	r30, r18
    1f50:	f3 1f       	adc	r31, r19
    1f52:	ee 5a       	subi	r30, 0xAE	; 174
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	10 82       	st	Z, r1
    1f58:	11 82       	std	Z+1, r1	; 0x01
    1f5a:	12 82       	std	Z+2, r1	; 0x02
    1f5c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1f5e:	12 92       	st	-Z, r1
    1f60:	12 92       	st	-Z, r1
    1f62:	12 92       	st	-Z, r1
    1f64:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f66:	38 96       	adiw	r30, 0x08	; 8
    1f68:	10 82       	st	Z, r1
    1f6a:	11 82       	std	Z+1, r1	; 0x01
    1f6c:	12 82       	std	Z+2, r1	; 0x02
    1f6e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f70:	39 97       	sbiw	r30, 0x09	; 9
    1f72:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1f74:	80 7e       	andi	r24, 0xE0	; 224
    1f76:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1f78:	08 95       	ret

00001f7a <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f7a:	e0 91 49 01 	lds	r30, 0x0149
    1f7e:	f0 91 4a 01 	lds	r31, 0x014A
    1f82:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1f84:	9c 01       	movw	r18, r24
    1f86:	b4 e0       	ldi	r27, 0x04	; 4
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	ba 95       	dec	r27
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <Timebase_DownCounter_SS_Start+0xe>
    1f90:	28 0f       	add	r18, r24
    1f92:	39 1f       	adc	r19, r25
    1f94:	e2 0f       	add	r30, r18
    1f96:	f3 1f       	adc	r31, r19
    1f98:	e3 5b       	subi	r30, 0xB3	; 179
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	90 81       	ld	r25, Z
    1f9e:	89 2f       	mov	r24, r25
    1fa0:	86 95       	lsr	r24
    1fa2:	8f 70       	andi	r24, 0x0F	; 15
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	19 f0       	breq	.+6      	; 0x1fae <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1fa8:	91 7e       	andi	r25, 0xE1	; 225
    1faa:	92 60       	ori	r25, 0x02	; 2
    1fac:	90 83       	st	Z, r25
    1fae:	08 95       	ret

00001fb0 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1fb0:	e0 91 49 01 	lds	r30, 0x0149
    1fb4:	f0 91 4a 01 	lds	r31, 0x014A
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1fba:	9c 01       	movw	r18, r24
    1fbc:	44 e0       	ldi	r20, 0x04	; 4
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	4a 95       	dec	r20
    1fc4:	e1 f7       	brne	.-8      	; 0x1fbe <Timebase_DownCounter_SS_Stop+0xe>
    1fc6:	28 0f       	add	r18, r24
    1fc8:	39 1f       	adc	r19, r25
    1fca:	e2 0f       	add	r30, r18
    1fcc:	f3 1f       	adc	r31, r19
    1fce:	e3 5b       	subi	r30, 0xB3	; 179
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	90 81       	ld	r25, Z
    1fd4:	89 2f       	mov	r24, r25
    1fd6:	86 95       	lsr	r24
    1fd8:	8f 70       	andi	r24, 0x0F	; 15
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1fde:	91 7e       	andi	r25, 0xE1	; 225
    1fe0:	94 60       	ori	r25, 0x04	; 4
    1fe2:	90 83       	st	Z, r25
    1fe4:	08 95       	ret

00001fe6 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1fe6:	2f 92       	push	r2
    1fe8:	3f 92       	push	r3
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <Timebase_DownCounter_SS_Set_Securely+0x26>
    200c:	00 d0       	rcall	.+0      	; 0x200e <Timebase_DownCounter_SS_Set_Securely+0x28>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	4a 01       	movw	r8, r20
    2014:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2016:	20 91 49 01 	lds	r18, 0x0149
    201a:	30 91 4a 01 	lds	r19, 0x014A
    201e:	3c 83       	std	Y+4, r19	; 0x04
    2020:	2b 83       	std	Y+3, r18	; 0x03
    2022:	a8 2f       	mov	r26, r24
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	ba 83       	std	Y+2, r27	; 0x02
    2028:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    202a:	fd 01       	movw	r30, r26
    202c:	64 e0       	ldi	r22, 0x04	; 4
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	6a 95       	dec	r22
    2034:	e1 f7       	brne	.-8      	; 0x202e <Timebase_DownCounter_SS_Set_Securely+0x48>
    2036:	ea 0f       	add	r30, r26
    2038:	fb 1f       	adc	r31, r27
    203a:	e2 0f       	add	r30, r18
    203c:	f3 1f       	adc	r31, r19
    203e:	e3 5b       	subi	r30, 0xB3	; 179
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	ed 54       	subi	r30, 0x4D	; 77
    2046:	f0 40       	sbci	r31, 0x00	; 0
    2048:	86 95       	lsr	r24
    204a:	8f 70       	andi	r24, 0x0F	; 15
    204c:	09 f0       	breq	.+2      	; 0x2050 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    204e:	76 c0       	rjmp	.+236    	; 0x213c <Timebase_DownCounter_SS_Set_Securely+0x156>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2050:	ea 5a       	subi	r30, 0xAA	; 170
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	80 82       	st	Z, r8
    2056:	91 82       	std	Z+1, r9	; 0x01
    2058:	a2 82       	std	Z+2, r10	; 0x02
    205a:	b3 82       	std	Z+3, r11	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    205c:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    205e:	f9 01       	movw	r30, r18
    2060:	c0 84       	ldd	r12, Z+8	; 0x08
    2062:	d1 84       	ldd	r13, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2064:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2066:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2068:	22 84       	ldd	r2, Z+10	; 0x0a
    206a:	33 84       	ldd	r3, Z+11	; 0x0b
    206c:	44 84       	ldd	r4, Z+12	; 0x0c
    206e:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2070:	78 94       	sei
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    2072:	21 81       	ldd	r18, Z+1	; 0x01
    2074:	32 81       	ldd	r19, Z+2	; 0x02
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	c5 01       	movw	r24, r10
    207c:	b4 01       	movw	r22, r8
    207e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    2082:	7b 01       	movw	r14, r22
    2084:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    2086:	ab 81       	ldd	r26, Y+3	; 0x03
    2088:	bc 81       	ldd	r27, Y+4	; 0x04
    208a:	11 96       	adiw	r26, 0x01	; 1
    208c:	2d 91       	ld	r18, X+
    208e:	3c 91       	ld	r19, X
    2090:	12 97       	sbiw	r26, 0x02	; 2
    2092:	40 e0       	ldi	r20, 0x00	; 0
    2094:	50 e0       	ldi	r21, 0x00	; 0
    2096:	c5 01       	movw	r24, r10
    2098:	b4 01       	movw	r22, r8
    209a:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    209e:	c9 01       	movw	r24, r18
    20a0:	da 01       	movw	r26, r20
    20a2:	3c 01       	movw	r6, r24
    20a4:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    20a6:	56 01       	movw	r10, r12
    20a8:	cc 24       	eor	r12, r12
    20aa:	dd 24       	eor	r13, r13
    20ac:	ae 0c       	add	r10, r14
    20ae:	bf 1c       	adc	r11, r15
    20b0:	c0 1e       	adc	r12, r16
    20b2:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    20b4:	eb 81       	ldd	r30, Y+3	; 0x03
    20b6:	fc 81       	ldd	r31, Y+4	; 0x04
    20b8:	81 81       	ldd	r24, Z+1	; 0x01
    20ba:	92 81       	ldd	r25, Z+2	; 0x02
    20bc:	a0 e0       	ldi	r26, 0x00	; 0
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	a8 16       	cp	r10, r24
    20c2:	b9 06       	cpc	r11, r25
    20c4:	ca 06       	cpc	r12, r26
    20c6:	db 06       	cpc	r13, r27
    20c8:	94 f0       	brlt	.+36     	; 0x20ee <Timebase_DownCounter_SS_Set_Securely+0x108>
	  sec_val += 1;
    20ca:	08 94       	sec
    20cc:	61 1c       	adc	r6, r1
    20ce:	71 1c       	adc	r7, r1
    20d0:	81 1c       	adc	r8, r1
    20d2:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    20d4:	21 81       	ldd	r18, Z+1	; 0x01
    20d6:	32 81       	ldd	r19, Z+2	; 0x02
    20d8:	40 e0       	ldi	r20, 0x00	; 0
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	c6 01       	movw	r24, r12
    20de:	b5 01       	movw	r22, r10
    20e0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    20e4:	ac 01       	movw	r20, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	da 01       	movw	r26, r20
    20ea:	5c 01       	movw	r10, r24
    20ec:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	54 e0       	ldi	r21, 0x04	; 4
    20f4:	ee 0f       	add	r30, r30
    20f6:	ff 1f       	adc	r31, r31
    20f8:	5a 95       	dec	r21
    20fa:	e1 f7       	brne	.-8      	; 0x20f4 <Timebase_DownCounter_SS_Set_Securely+0x10e>
    20fc:	29 81       	ldd	r18, Y+1	; 0x01
    20fe:	3a 81       	ldd	r19, Y+2	; 0x02
    2100:	e2 0f       	add	r30, r18
    2102:	f3 1f       	adc	r31, r19
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	e8 0f       	add	r30, r24
    210a:	f9 1f       	adc	r31, r25
    210c:	e2 5b       	subi	r30, 0xB2	; 178
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	26 0c       	add	r2, r6
    2112:	37 1c       	adc	r3, r7
    2114:	48 1c       	adc	r4, r8
    2116:	59 1c       	adc	r5, r9
    2118:	21 92       	st	Z+, r2
    211a:	31 92       	st	Z+, r3
    211c:	41 92       	st	Z+, r4
    211e:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2120:	a0 82       	st	Z, r10
    2122:	b1 82       	std	Z+1, r11	; 0x01
    2124:	c2 82       	std	Z+2, r12	; 0x02
    2126:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    2128:	35 97       	sbiw	r30, 0x05	; 5
    212a:	90 81       	ld	r25, Z
    212c:	89 2f       	mov	r24, r25
    212e:	86 95       	lsr	r24
    2130:	8f 70       	andi	r24, 0x0F	; 15
    2132:	81 30       	cpi	r24, 0x01	; 1
    2134:	19 f0       	breq	.+6      	; 0x213c <Timebase_DownCounter_SS_Set_Securely+0x156>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2136:	91 7e       	andi	r25, 0xE1	; 225
    2138:	92 60       	ori	r25, 0x02	; 2
    213a:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	1f 91       	pop	r17
    214a:	0f 91       	pop	r16
    214c:	ff 90       	pop	r15
    214e:	ef 90       	pop	r14
    2150:	df 90       	pop	r13
    2152:	cf 90       	pop	r12
    2154:	bf 90       	pop	r11
    2156:	af 90       	pop	r10
    2158:	9f 90       	pop	r9
    215a:	8f 90       	pop	r8
    215c:	7f 90       	pop	r7
    215e:	6f 90       	pop	r6
    2160:	5f 90       	pop	r5
    2162:	4f 90       	pop	r4
    2164:	3f 90       	pop	r3
    2166:	2f 90       	pop	r2
    2168:	08 95       	ret

0000216a <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    216a:	e0 91 49 01 	lds	r30, 0x0149
    216e:	f0 91 4a 01 	lds	r31, 0x014A
    2172:	a8 2f       	mov	r26, r24
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	9d 01       	movw	r18, r26
    2178:	94 e0       	ldi	r25, 0x04	; 4
    217a:	22 0f       	add	r18, r18
    217c:	33 1f       	adc	r19, r19
    217e:	9a 95       	dec	r25
    2180:	e1 f7       	brne	.-8      	; 0x217a <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    2182:	2a 0f       	add	r18, r26
    2184:	3b 1f       	adc	r19, r27
    2186:	e2 0f       	add	r30, r18
    2188:	f3 1f       	adc	r31, r19
    218a:	ee 5a       	subi	r30, 0xAE	; 174
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	10 82       	st	Z, r1
    2190:	11 82       	std	Z+1, r1	; 0x01
    2192:	12 82       	std	Z+2, r1	; 0x02
    2194:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2196:	12 92       	st	-Z, r1
    2198:	12 92       	st	-Z, r1
    219a:	12 92       	st	-Z, r1
    219c:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    219e:	38 96       	adiw	r30, 0x08	; 8
    21a0:	10 82       	st	Z, r1
    21a2:	11 82       	std	Z+1, r1	; 0x01
    21a4:	12 82       	std	Z+2, r1	; 0x02
    21a6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    21a8:	39 97       	sbiw	r30, 0x09	; 9
    21aa:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    21ac:	90 7e       	andi	r25, 0xE0	; 224
    21ae:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    21b0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <Timebase_DownCounter_SS_Set_Securely>
} 
    21b4:	08 95       	ret

000021b6 <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    21b6:	4f 92       	push	r4
    21b8:	5f 92       	push	r5
    21ba:	6f 92       	push	r6
    21bc:	7f 92       	push	r7
    21be:	8f 92       	push	r8
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <Timebase_DownCounter_SS_Update+0x22>
    21d8:	00 d0       	rcall	.+0      	; 0x21da <Timebase_DownCounter_SS_Update+0x24>
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    21de:	60 90 49 01 	lds	r6, 0x0149
    21e2:	70 90 4a 01 	lds	r7, 0x014A
    21e6:	c8 2e       	mov	r12, r24
    21e8:	dd 24       	eor	r13, r13
    21ea:	f6 01       	movw	r30, r12
    21ec:	54 e0       	ldi	r21, 0x04	; 4
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	5a 95       	dec	r21
    21f4:	e1 f7       	brne	.-8      	; 0x21ee <Timebase_DownCounter_SS_Update+0x38>
    21f6:	ec 0d       	add	r30, r12
    21f8:	fd 1d       	adc	r31, r13
    21fa:	e6 0d       	add	r30, r6
    21fc:	f7 1d       	adc	r31, r7
    21fe:	e3 5b       	subi	r30, 0xB3	; 179
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	e0 81       	ld	r30, Z
    2204:	e6 95       	lsr	r30
    2206:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    2208:	e1 30       	cpi	r30, 0x01	; 1
    220a:	09 f0       	breq	.+2      	; 0x220e <Timebase_DownCounter_SS_Update+0x58>
    220c:	75 c0       	rjmp	.+234    	; 0x22f8 <Timebase_DownCounter_SS_Update+0x142>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    220e:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    2210:	d3 01       	movw	r26, r6
    2212:	18 96       	adiw	r26, 0x08	; 8
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    221a:	78 94       	sei
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    221c:	4c 01       	movw	r8, r24
    221e:	aa 24       	eor	r10, r10
    2220:	bb 24       	eor	r11, r11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2222:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2224:	f3 01       	movw	r30, r6
    2226:	82 85       	ldd	r24, Z+10	; 0x0a
    2228:	93 85       	ldd	r25, Z+11	; 0x0b
    222a:	a4 85       	ldd	r26, Z+12	; 0x0c
    222c:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    222e:	78 94       	sei
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    2230:	f6 01       	movw	r30, r12
    2232:	44 e0       	ldi	r20, 0x04	; 4
    2234:	ee 0f       	add	r30, r30
    2236:	ff 1f       	adc	r31, r31
    2238:	4a 95       	dec	r20
    223a:	e1 f7       	brne	.-8      	; 0x2234 <Timebase_DownCounter_SS_Update+0x7e>
    223c:	ec 0d       	add	r30, r12
    223e:	fd 1d       	adc	r31, r13
    2240:	e6 0d       	add	r30, r6
    2242:	f7 1d       	adc	r31, r7
    2244:	e2 5b       	subi	r30, 0xB2	; 178
    2246:	ff 4f       	sbci	r31, 0xFF	; 255
    2248:	e0 80       	ld	r14, Z
    224a:	f1 80       	ldd	r15, Z+1	; 0x01
    224c:	02 81       	ldd	r16, Z+2	; 0x02
    224e:	13 81       	ldd	r17, Z+3	; 0x03
    2250:	e8 1a       	sub	r14, r24
    2252:	f9 0a       	sbc	r15, r25
    2254:	0a 0b       	sbc	r16, r26
    2256:	1b 0b       	sbc	r17, r27
    2258:	17 ff       	sbrs	r17, 7
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <Timebase_DownCounter_SS_Update+0xac>
    225c:	ee 24       	eor	r14, r14
    225e:	ff 24       	eor	r15, r15
    2260:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    2262:	d3 01       	movw	r26, r6
    2264:	11 96       	adiw	r26, 0x01	; 1
    2266:	2d 91       	ld	r18, X+
    2268:	3c 91       	ld	r19, X
    226a:	12 97       	sbiw	r26, 0x02	; 2
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	c8 01       	movw	r24, r16
    2272:	b7 01       	movw	r22, r14
    2274:	0e 94 67 17 	call	0x2ece	; 0x2ece <__mulsi3>
	temp_s += temp_ss;
    2278:	f6 01       	movw	r30, r12
    227a:	34 e0       	ldi	r19, 0x04	; 4
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	3a 95       	dec	r19
    2282:	e1 f7       	brne	.-8      	; 0x227c <Timebase_DownCounter_SS_Update+0xc6>
    2284:	ec 0d       	add	r30, r12
    2286:	fd 1d       	adc	r31, r13
    2288:	e6 0d       	add	r30, r6
    228a:	f7 1d       	adc	r31, r7
    228c:	8f 01       	movw	r16, r30
    228e:	0e 5a       	subi	r16, 0xAE	; 174
    2290:	1f 4f       	sbci	r17, 0xFF	; 255
    2292:	d8 01       	movw	r26, r16
    2294:	2d 91       	ld	r18, X+
    2296:	3d 91       	ld	r19, X+
    2298:	4d 91       	ld	r20, X+
    229a:	5c 91       	ld	r21, X
    229c:	28 19       	sub	r18, r8
    229e:	39 09       	sbc	r19, r9
    22a0:	4a 09       	sbc	r20, r10
    22a2:	5b 09       	sbc	r21, r11
    22a4:	26 0f       	add	r18, r22
    22a6:	37 1f       	adc	r19, r23
    22a8:	48 1f       	adc	r20, r24
    22aa:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    22ac:	cf 01       	movw	r24, r30
    22ae:	8a 5a       	subi	r24, 0xAA	; 170
    22b0:	9f 4f       	sbci	r25, 0xFF	; 255
    22b2:	dc 01       	movw	r26, r24
    22b4:	2d 93       	st	X+, r18
    22b6:	3d 93       	st	X+, r19
    22b8:	4d 93       	st	X+, r20
    22ba:	5c 93       	st	X, r21
    22bc:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    22be:	12 16       	cp	r1, r18
    22c0:	13 06       	cpc	r1, r19
    22c2:	14 06       	cpc	r1, r20
    22c4:	15 06       	cpc	r1, r21
    22c6:	0c f4       	brge	.+2      	; 0x22ca <Timebase_DownCounter_SS_Update+0x114>
    22c8:	6a c0       	rjmp	.+212    	; 0x239e <Timebase_DownCounter_SS_Update+0x1e8>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    22ca:	d8 01       	movw	r26, r16
    22cc:	1d 92       	st	X+, r1
    22ce:	1d 92       	st	X+, r1
    22d0:	1d 92       	st	X+, r1
    22d2:	1c 92       	st	X, r1
    22d4:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    22d6:	e2 5b       	subi	r30, 0xB2	; 178
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	10 82       	st	Z, r1
    22dc:	11 82       	std	Z+1, r1	; 0x01
    22de:	12 82       	std	Z+2, r1	; 0x02
    22e0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    22e2:	dc 01       	movw	r26, r24
    22e4:	1d 92       	st	X+, r1
    22e6:	1d 92       	st	X+, r1
    22e8:	1d 92       	st	X+, r1
    22ea:	1c 92       	st	X, r1
    22ec:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    22ee:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    22f0:	80 7e       	andi	r24, 0xE0	; 224
    22f2:	88 60       	ori	r24, 0x08	; 8
    22f4:	80 83       	st	Z, r24
    22f6:	53 c0       	rjmp	.+166    	; 0x239e <Timebase_DownCounter_SS_Update+0x1e8>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    22f8:	e2 30       	cpi	r30, 0x02	; 2
    22fa:	09 f0       	breq	.+2      	; 0x22fe <Timebase_DownCounter_SS_Update+0x148>
    22fc:	50 c0       	rjmp	.+160    	; 0x239e <Timebase_DownCounter_SS_Update+0x1e8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    22fe:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    2300:	f3 01       	movw	r30, r6
    2302:	40 84       	ldd	r4, Z+8	; 0x08
    2304:	51 84       	ldd	r5, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2306:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2308:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    230a:	d3 01       	movw	r26, r6
    230c:	1a 96       	adiw	r26, 0x0a	; 10
    230e:	8d 90       	ld	r8, X+
    2310:	9d 90       	ld	r9, X+
    2312:	ad 90       	ld	r10, X+
    2314:	bc 90       	ld	r11, X
    2316:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2318:	78 94       	sei
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    231a:	86 01       	movw	r16, r12
    231c:	24 e0       	ldi	r18, 0x04	; 4
    231e:	00 0f       	add	r16, r16
    2320:	11 1f       	adc	r17, r17
    2322:	2a 95       	dec	r18
    2324:	e1 f7       	brne	.-8      	; 0x231e <Timebase_DownCounter_SS_Update+0x168>
    2326:	0c 0d       	add	r16, r12
    2328:	1d 1d       	adc	r17, r13
    232a:	06 0d       	add	r16, r6
    232c:	17 1d       	adc	r17, r7
    232e:	0a 5a       	subi	r16, 0xAA	; 170
    2330:	1f 4f       	sbci	r17, 0xFF	; 255
    2332:	d8 01       	movw	r26, r16
    2334:	8d 91       	ld	r24, X+
    2336:	9d 91       	ld	r25, X+
    2338:	0d 90       	ld	r0, X+
    233a:	bc 91       	ld	r27, X
    233c:	a0 2d       	mov	r26, r0
    233e:	89 83       	std	Y+1, r24	; 0x01
    2340:	9a 83       	std	Y+2, r25	; 0x02
    2342:	ab 83       	std	Y+3, r26	; 0x03
    2344:	bc 83       	std	Y+4, r27	; 0x04
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    2346:	f3 01       	movw	r30, r6
    2348:	21 81       	ldd	r18, Z+1	; 0x01
    234a:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    234c:	c1 80       	ldd	r12, Z+1	; 0x01
    234e:	d2 80       	ldd	r13, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2350:	08 50       	subi	r16, 0x08	; 8
    2352:	10 40       	sbci	r17, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    2360:	82 0e       	add	r8, r18
    2362:	93 1e       	adc	r9, r19
    2364:	a4 1e       	adc	r10, r20
    2366:	b5 1e       	adc	r11, r21
    2368:	d8 01       	movw	r26, r16
    236a:	8d 92       	st	X+, r8
    236c:	9d 92       	st	X+, r9
    236e:	ad 92       	st	X+, r10
    2370:	bd 92       	st	X+, r11
    2372:	8d 01       	movw	r16, r26
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2374:	ee 24       	eor	r14, r14
    2376:	ff 24       	eor	r15, r15
    2378:	69 81       	ldd	r22, Y+1	; 0x01
    237a:	7a 81       	ldd	r23, Y+2	; 0x02
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	9c 81       	ldd	r25, Y+4	; 0x04
    2380:	a7 01       	movw	r20, r14
    2382:	96 01       	movw	r18, r12
    2384:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <__divmodsi4>
    2388:	66 24       	eor	r6, r6
    238a:	77 24       	eor	r7, r7
    238c:	46 0e       	add	r4, r22
    238e:	57 1e       	adc	r5, r23
    2390:	68 1e       	adc	r6, r24
    2392:	79 1e       	adc	r7, r25
    2394:	f8 01       	movw	r30, r16
    2396:	40 82       	st	Z, r4
    2398:	51 82       	std	Z+1, r5	; 0x01
    239a:	62 82       	std	Z+2, r6	; 0x02
    239c:	73 82       	std	Z+3, r7	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	9f 90       	pop	r9
    23bc:	8f 90       	pop	r8
    23be:	7f 90       	pop	r7
    23c0:	6f 90       	pop	r6
    23c2:	5f 90       	pop	r5
    23c4:	4f 90       	pop	r4
    23c6:	08 95       	ret

000023c8 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	e0 91 49 01 	lds	r30, 0x0149
    23ce:	f0 91 4a 01 	lds	r31, 0x014A
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9c 01       	movw	r18, r24
    23d6:	64 e0       	ldi	r22, 0x04	; 4
    23d8:	22 0f       	add	r18, r18
    23da:	33 1f       	adc	r19, r19
    23dc:	6a 95       	dec	r22
    23de:	e1 f7       	brne	.-8      	; 0x23d8 <Timebase_DownCounter_SS_Expired+0x10>
    23e0:	28 0f       	add	r18, r24
    23e2:	39 1f       	adc	r19, r25
    23e4:	e2 0f       	add	r30, r18
    23e6:	f3 1f       	adc	r31, r19
    23e8:	e3 5b       	subi	r30, 0xB3	; 179
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	86 95       	lsr	r24
    23f0:	8f 70       	andi	r24, 0x0F	; 15
    23f2:	84 30       	cpi	r24, 0x04	; 4
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <Timebase_DownCounter_SS_Expired+0x30>
    23f6:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    23f8:	84 2f       	mov	r24, r20
    23fa:	08 95       	ret

000023fc <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    23fc:	e0 91 49 01 	lds	r30, 0x0149
    2400:	f0 91 4a 01 	lds	r31, 0x014A
    2404:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2406:	9c 01       	movw	r18, r24
    2408:	74 e0       	ldi	r23, 0x04	; 4
    240a:	22 0f       	add	r18, r18
    240c:	33 1f       	adc	r19, r19
    240e:	7a 95       	dec	r23
    2410:	e1 f7       	brne	.-8      	; 0x240a <Timebase_DownCounter_SS_Expired_Event+0xe>
    2412:	28 0f       	add	r18, r24
    2414:	39 1f       	adc	r19, r25
    2416:	e2 0f       	add	r30, r18
    2418:	f3 1f       	adc	r31, r19
    241a:	df 01       	movw	r26, r30
    241c:	a3 5b       	subi	r26, 0xB3	; 179
    241e:	bf 4f       	sbci	r27, 0xFF	; 255
    2420:	8c 91       	ld	r24, X
    2422:	86 95       	lsr	r24
    2424:	8f 70       	andi	r24, 0x0F	; 15
    2426:	84 30       	cpi	r24, 0x04	; 4
    2428:	11 f0       	breq	.+4      	; 0x242e <Timebase_DownCounter_SS_Expired_Event+0x32>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    242e:	ee 5a       	subi	r30, 0xAE	; 174
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	10 82       	st	Z, r1
    2434:	11 82       	std	Z+1, r1	; 0x01
    2436:	12 82       	std	Z+2, r1	; 0x02
    2438:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    243a:	12 92       	st	-Z, r1
    243c:	12 92       	st	-Z, r1
    243e:	12 92       	st	-Z, r1
    2440:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2442:	38 96       	adiw	r30, 0x08	; 8
    2444:	10 82       	st	Z, r1
    2446:	11 82       	std	Z+1, r1	; 0x01
    2448:	12 82       	std	Z+2, r1	; 0x02
    244a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    244c:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    244e:	80 7e       	andi	r24, 0xE0	; 224
    2450:	8c 93       	st	X, r24
    2452:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2454:	08 95       	ret

00002456 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    245a:	c0 91 49 01 	lds	r28, 0x0149
    245e:	d0 91 4a 01 	lds	r29, 0x014A
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2466:	f9 01       	movw	r30, r18
    2468:	b4 e0       	ldi	r27, 0x04	; 4
    246a:	ee 0f       	add	r30, r30
    246c:	ff 1f       	adc	r31, r31
    246e:	ba 95       	dec	r27
    2470:	e1 f7       	brne	.-8      	; 0x246a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2472:	e2 0f       	add	r30, r18
    2474:	f3 1f       	adc	r31, r19
    2476:	ec 0f       	add	r30, r28
    2478:	fd 1f       	adc	r31, r29
    247a:	e3 5b       	subi	r30, 0xB3	; 179
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	80 81       	ld	r24, Z
    2480:	ed 54       	subi	r30, 0x4D	; 77
    2482:	f0 40       	sbci	r31, 0x00	; 0
    2484:	80 fd       	sbrc	r24, 0
    2486:	24 c0       	rjmp	.+72     	; 0x24d0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    2488:	ea 5a       	subi	r30, 0xAA	; 170
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	81 91       	ld	r24, Z+
    248e:	91 91       	ld	r25, Z+
    2490:	a1 91       	ld	r26, Z+
    2492:	b1 91       	ld	r27, Z+
    2494:	84 1b       	sub	r24, r20
    2496:	95 0b       	sbc	r25, r21
    2498:	a6 0b       	sbc	r26, r22
    249a:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    249c:	b7 ff       	sbrs	r27, 7
    249e:	05 c0       	rjmp	.+10     	; 0x24aa <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    24a0:	10 82       	st	Z, r1
    24a2:	11 82       	std	Z+1, r1	; 0x01
    24a4:	12 82       	std	Z+2, r1	; 0x02
    24a6:	13 82       	std	Z+3, r1	; 0x03
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    24aa:	80 83       	st	Z, r24
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	a2 83       	std	Z+2, r26	; 0x02
    24b0:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    24b2:	f9 01       	movw	r30, r18
    24b4:	a4 e0       	ldi	r26, 0x04	; 4
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	aa 95       	dec	r26
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    24be:	e2 0f       	add	r30, r18
    24c0:	f3 1f       	adc	r31, r19
    24c2:	ec 0f       	add	r30, r28
    24c4:	fd 1f       	adc	r31, r29
    24c6:	e3 5b       	subi	r30, 0xB3	; 179
    24c8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ca:	80 81       	ld	r24, Z
    24cc:	81 60       	ori	r24, 0x01	; 1
    24ce:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    24d0:	df 91       	pop	r29
    24d2:	cf 91       	pop	r28
    24d4:	08 95       	ret

000024d6 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    24d6:	e0 91 49 01 	lds	r30, 0x0149
    24da:	f0 91 4a 01 	lds	r31, 0x014A
    24de:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    24e0:	9c 01       	movw	r18, r24
    24e2:	44 e0       	ldi	r20, 0x04	; 4
    24e4:	22 0f       	add	r18, r18
    24e6:	33 1f       	adc	r19, r19
    24e8:	4a 95       	dec	r20
    24ea:	e1 f7       	brne	.-8      	; 0x24e4 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    24ec:	28 0f       	add	r18, r24
    24ee:	39 1f       	adc	r19, r25
    24f0:	e2 0f       	add	r30, r18
    24f2:	f3 1f       	adc	r31, r19
    24f4:	df 01       	movw	r26, r30
    24f6:	a6 5a       	subi	r26, 0xA6	; 166
    24f8:	bf 4f       	sbci	r27, 0xFF	; 255
    24fa:	ea 5a       	subi	r30, 0xAA	; 170
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	20 81       	ld	r18, Z
    2500:	31 81       	ldd	r19, Z+1	; 0x01
    2502:	42 81       	ldd	r20, Z+2	; 0x02
    2504:	53 81       	ldd	r21, Z+3	; 0x03
    2506:	8d 91       	ld	r24, X+
    2508:	9d 91       	ld	r25, X+
    250a:	0d 90       	ld	r0, X+
    250c:	bc 91       	ld	r27, X
    250e:	a0 2d       	mov	r26, r0
    2510:	28 1b       	sub	r18, r24
    2512:	39 0b       	sbc	r19, r25
    2514:	4a 0b       	sbc	r20, r26
    2516:	5b 0b       	sbc	r21, r27
    2518:	57 ff       	sbrs	r21, 7
    251a:	04 c0       	rjmp	.+8      	; 0x2524 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e0       	ldi	r20, 0x00	; 0
    2522:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2524:	b9 01       	movw	r22, r18
    2526:	ca 01       	movw	r24, r20
    2528:	08 95       	ret

0000252a <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    252e:	c0 91 49 01 	lds	r28, 0x0149
    2532:	d0 91 4a 01 	lds	r29, 0x014A
    2536:	68 2f       	mov	r22, r24
    2538:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    253a:	fb 01       	movw	r30, r22
    253c:	a4 e0       	ldi	r26, 0x04	; 4
    253e:	ee 0f       	add	r30, r30
    2540:	ff 1f       	adc	r31, r31
    2542:	aa 95       	dec	r26
    2544:	e1 f7       	brne	.-8      	; 0x253e <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    2546:	e6 0f       	add	r30, r22
    2548:	f7 1f       	adc	r31, r23
    254a:	ec 0f       	add	r30, r28
    254c:	fd 1f       	adc	r31, r29
    254e:	df 01       	movw	r26, r30
    2550:	a6 5a       	subi	r26, 0xA6	; 166
    2552:	bf 4f       	sbci	r27, 0xFF	; 255
    2554:	ea 5a       	subi	r30, 0xAA	; 170
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	20 81       	ld	r18, Z
    255a:	31 81       	ldd	r19, Z+1	; 0x01
    255c:	42 81       	ldd	r20, Z+2	; 0x02
    255e:	53 81       	ldd	r21, Z+3	; 0x03
    2560:	8d 91       	ld	r24, X+
    2562:	9d 91       	ld	r25, X+
    2564:	0d 90       	ld	r0, X+
    2566:	bc 91       	ld	r27, X
    2568:	a0 2d       	mov	r26, r0
    256a:	28 1b       	sub	r18, r24
    256c:	39 0b       	sbc	r19, r25
    256e:	4a 0b       	sbc	r20, r26
    2570:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2572:	57 fd       	sbrc	r21, 7
    2574:	07 c0       	rjmp	.+14     	; 0x2584 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2576:	21 15       	cp	r18, r1
    2578:	31 05       	cpc	r19, r1
    257a:	41 05       	cpc	r20, r1
    257c:	51 05       	cpc	r21, r1
    257e:	11 f0       	breq	.+4      	; 0x2584 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	12 c0       	rjmp	.+36     	; 0x25a8 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	cb 01       	movw	r24, r22
    2588:	54 e0       	ldi	r21, 0x04	; 4
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	5a 95       	dec	r21
    2590:	e1 f7       	brne	.-8      	; 0x258a <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2592:	86 0f       	add	r24, r22
    2594:	97 1f       	adc	r25, r23
    2596:	c8 0f       	add	r28, r24
    2598:	d9 1f       	adc	r29, r25
    259a:	c3 5b       	subi	r28, 0xB3	; 179
    259c:	df 4f       	sbci	r29, 0xFF	; 255
    259e:	88 81       	ld	r24, Y
    25a0:	80 ff       	sbrs	r24, 0
    25a2:	21 e0       	ldi	r18, 0x01	; 1
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    25a8:	82 2f       	mov	r24, r18
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    25b0:	1f 93       	push	r17
    25b2:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    25b4:	0e 94 95 12 	call	0x252a	; 0x252a <Timebase_DownCounter_SS_Period_Value_Expired>
    25b8:	81 30       	cpi	r24, 0x01	; 1
    25ba:	11 f0       	breq	.+4      	; 0x25c0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	16 c0       	rjmp	.+44     	; 0x25ec <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    25c0:	e0 91 49 01 	lds	r30, 0x0149
    25c4:	f0 91 4a 01 	lds	r31, 0x014A
    25c8:	21 2f       	mov	r18, r17
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	c9 01       	movw	r24, r18
    25ce:	b4 e0       	ldi	r27, 0x04	; 4
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	ba 95       	dec	r27
    25d6:	e1 f7       	brne	.-8      	; 0x25d0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    25d8:	82 0f       	add	r24, r18
    25da:	93 1f       	adc	r25, r19
    25dc:	e8 0f       	add	r30, r24
    25de:	f9 1f       	adc	r31, r25
    25e0:	e3 5b       	subi	r30, 0xB3	; 179
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	8e 7f       	andi	r24, 0xFE	; 254
    25e8:	80 83       	st	Z, r24
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    25ec:	1f 91       	pop	r17
    25ee:	08 95       	ret

000025f0 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 db 10 	call	0x21b6	; 0x21b6 <Timebase_DownCounter_SS_Update>
  }
}
    25f6:	08 95       	ret

000025f8 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    25f8:	e0 91 49 01 	lds	r30, 0x0149
    25fc:	f0 91 4a 01 	lds	r31, 0x014A
    2600:	ee 5a       	subi	r30, 0xAE	; 174
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	10 82       	st	Z, r1
    2606:	11 82       	std	Z+1, r1	; 0x01
    2608:	12 82       	std	Z+2, r1	; 0x02
    260a:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    260c:	12 92       	st	-Z, r1
    260e:	12 92       	st	-Z, r1
    2610:	12 92       	st	-Z, r1
    2612:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2614:	38 96       	adiw	r30, 0x08	; 8
    2616:	10 82       	st	Z, r1
    2618:	11 82       	std	Z+1, r1	; 0x01
    261a:	12 82       	std	Z+2, r1	; 0x02
    261c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    261e:	39 97       	sbiw	r30, 0x09	; 9
    2620:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2622:	80 7e       	andi	r24, 0xE0	; 224
    2624:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    2626:	08 95       	ret

00002628 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    2628:	e0 91 49 01 	lds	r30, 0x0149
    262c:	f0 91 4a 01 	lds	r31, 0x014A
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	2d e0       	ldi	r18, 0x0D	; 13
    2634:	30 e0       	ldi	r19, 0x00	; 0
    2636:	ac 01       	movw	r20, r24
    2638:	42 9f       	mul	r20, r18
    263a:	c0 01       	movw	r24, r0
    263c:	43 9f       	mul	r20, r19
    263e:	90 0d       	add	r25, r0
    2640:	52 9f       	mul	r21, r18
    2642:	90 0d       	add	r25, r0
    2644:	11 24       	eor	r1, r1
    2646:	e8 0f       	add	r30, r24
    2648:	f9 1f       	adc	r31, r25
    264a:	e2 5a       	subi	r30, 0xA2	; 162
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	80 81       	ld	r24, Z
    2650:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2652:	8f 70       	andi	r24, 0x0F	; 15
    2654:	08 95       	ret

00002656 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2656:	e0 91 49 01 	lds	r30, 0x0149
    265a:	f0 91 4a 01 	lds	r31, 0x014A
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	2d e0       	ldi	r18, 0x0D	; 13
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	ac 01       	movw	r20, r24
    2666:	42 9f       	mul	r20, r18
    2668:	c0 01       	movw	r24, r0
    266a:	43 9f       	mul	r20, r19
    266c:	90 0d       	add	r25, r0
    266e:	52 9f       	mul	r21, r18
    2670:	90 0d       	add	r25, r0
    2672:	11 24       	eor	r1, r1
    2674:	e8 0f       	add	r30, r24
    2676:	f9 1f       	adc	r31, r25
    2678:	e2 5a       	subi	r30, 0xA2	; 162
    267a:	ff 4f       	sbci	r31, 0xFF	; 255
    267c:	6f 70       	andi	r22, 0x0F	; 15
    267e:	66 0f       	add	r22, r22
    2680:	80 81       	ld	r24, Z
    2682:	81 7e       	andi	r24, 0xE1	; 225
    2684:	86 2b       	or	r24, r22
    2686:	80 83       	st	Z, r24
}
    2688:	08 95       	ret

0000268a <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    268a:	e0 91 49 01 	lds	r30, 0x0149
    268e:	f0 91 4a 01 	lds	r31, 0x014A
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	2d e0       	ldi	r18, 0x0D	; 13
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	ac 01       	movw	r20, r24
    269a:	42 9f       	mul	r20, r18
    269c:	c0 01       	movw	r24, r0
    269e:	43 9f       	mul	r20, r19
    26a0:	90 0d       	add	r25, r0
    26a2:	52 9f       	mul	r21, r18
    26a4:	90 0d       	add	r25, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	e8 0f       	add	r30, r24
    26aa:	f9 1f       	adc	r31, r25
    26ac:	ed 59       	subi	r30, 0x9D	; 157
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	60 81       	ld	r22, Z
    26b2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	93 81       	ldd	r25, Z+3	; 0x03
    26b8:	08 95       	ret

000026ba <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    26ba:	e0 91 49 01 	lds	r30, 0x0149
    26be:	f0 91 4a 01 	lds	r31, 0x014A
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	2d e0       	ldi	r18, 0x0D	; 13
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	dc 01       	movw	r26, r24
    26ca:	a2 9f       	mul	r26, r18
    26cc:	c0 01       	movw	r24, r0
    26ce:	a3 9f       	mul	r26, r19
    26d0:	90 0d       	add	r25, r0
    26d2:	b2 9f       	mul	r27, r18
    26d4:	90 0d       	add	r25, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	e8 0f       	add	r30, r24
    26da:	f9 1f       	adc	r31, r25
    26dc:	ed 59       	subi	r30, 0x9D	; 157
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	40 83       	st	Z, r20
    26e2:	51 83       	std	Z+1, r21	; 0x01
    26e4:	62 83       	std	Z+2, r22	; 0x02
    26e6:	73 83       	std	Z+3, r23	; 0x03
}
    26e8:	08 95       	ret

000026ea <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    26ea:	e0 91 49 01 	lds	r30, 0x0149
    26ee:	f0 91 4a 01 	lds	r31, 0x014A
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	2d e0       	ldi	r18, 0x0D	; 13
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	ac 01       	movw	r20, r24
    26fa:	42 9f       	mul	r20, r18
    26fc:	c0 01       	movw	r24, r0
    26fe:	43 9f       	mul	r20, r19
    2700:	90 0d       	add	r25, r0
    2702:	52 9f       	mul	r21, r18
    2704:	90 0d       	add	r25, r0
    2706:	11 24       	eor	r1, r1
    2708:	e8 0f       	add	r30, r24
    270a:	f9 1f       	adc	r31, r25
    270c:	e1 5a       	subi	r30, 0xA1	; 161
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	60 81       	ld	r22, Z
    2712:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	08 95       	ret

0000271a <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    271a:	e0 91 49 01 	lds	r30, 0x0149
    271e:	f0 91 4a 01 	lds	r31, 0x014A
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	2d e0       	ldi	r18, 0x0D	; 13
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	dc 01       	movw	r26, r24
    272a:	a2 9f       	mul	r26, r18
    272c:	c0 01       	movw	r24, r0
    272e:	a3 9f       	mul	r26, r19
    2730:	90 0d       	add	r25, r0
    2732:	b2 9f       	mul	r27, r18
    2734:	90 0d       	add	r25, r0
    2736:	11 24       	eor	r1, r1
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	e1 5a       	subi	r30, 0xA1	; 161
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	40 83       	st	Z, r20
    2742:	51 83       	std	Z+1, r21	; 0x01
    2744:	62 83       	std	Z+2, r22	; 0x02
    2746:	73 83       	std	Z+3, r23	; 0x03
}
    2748:	08 95       	ret

0000274a <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    274a:	e0 91 49 01 	lds	r30, 0x0149
    274e:	f0 91 4a 01 	lds	r31, 0x014A
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	2d e0       	ldi	r18, 0x0D	; 13
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	ac 01       	movw	r20, r24
    275a:	42 9f       	mul	r20, r18
    275c:	c0 01       	movw	r24, r0
    275e:	43 9f       	mul	r20, r19
    2760:	90 0d       	add	r25, r0
    2762:	52 9f       	mul	r21, r18
    2764:	90 0d       	add	r25, r0
    2766:	11 24       	eor	r1, r1
    2768:	e8 0f       	add	r30, r24
    276a:	f9 1f       	adc	r31, r25
    276c:	e9 59       	subi	r30, 0x99	; 153
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	60 81       	ld	r22, Z
    2772:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2774:	82 81       	ldd	r24, Z+2	; 0x02
    2776:	93 81       	ldd	r25, Z+3	; 0x03
    2778:	08 95       	ret

0000277a <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    277a:	e0 91 49 01 	lds	r30, 0x0149
    277e:	f0 91 4a 01 	lds	r31, 0x014A
    2782:	28 2f       	mov	r18, r24
    2784:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2786:	77 ff       	sbrs	r23, 7
    2788:	13 c0       	rjmp	.+38     	; 0x27b0 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    278a:	8d e0       	ldi	r24, 0x0D	; 13
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	ac 01       	movw	r20, r24
    2790:	24 9f       	mul	r18, r20
    2792:	c0 01       	movw	r24, r0
    2794:	25 9f       	mul	r18, r21
    2796:	90 0d       	add	r25, r0
    2798:	34 9f       	mul	r19, r20
    279a:	90 0d       	add	r25, r0
    279c:	11 24       	eor	r1, r1
    279e:	e8 0f       	add	r30, r24
    27a0:	f9 1f       	adc	r31, r25
    27a2:	e9 59       	subi	r30, 0x99	; 153
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	10 82       	st	Z, r1
    27a8:	11 82       	std	Z+1, r1	; 0x01
    27aa:	12 82       	std	Z+2, r1	; 0x02
    27ac:	13 82       	std	Z+3, r1	; 0x03
    27ae:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    27b0:	8d e0       	ldi	r24, 0x0D	; 13
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	dc 01       	movw	r26, r24
    27b6:	2a 9f       	mul	r18, r26
    27b8:	c0 01       	movw	r24, r0
    27ba:	2b 9f       	mul	r18, r27
    27bc:	90 0d       	add	r25, r0
    27be:	3a 9f       	mul	r19, r26
    27c0:	90 0d       	add	r25, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	e8 0f       	add	r30, r24
    27c6:	f9 1f       	adc	r31, r25
    27c8:	e9 59       	subi	r30, 0x99	; 153
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	40 83       	st	Z, r20
    27ce:	51 83       	std	Z+1, r21	; 0x01
    27d0:	62 83       	std	Z+2, r22	; 0x02
    27d2:	73 83       	std	Z+3, r23	; 0x03
    27d4:	08 95       	ret

000027d6 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    27d6:	e0 91 49 01 	lds	r30, 0x0149
    27da:	f0 91 4a 01 	lds	r31, 0x014A
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	2d e0       	ldi	r18, 0x0D	; 13
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	ac 01       	movw	r20, r24
    27e6:	42 9f       	mul	r20, r18
    27e8:	c0 01       	movw	r24, r0
    27ea:	43 9f       	mul	r20, r19
    27ec:	90 0d       	add	r25, r0
    27ee:	52 9f       	mul	r21, r18
    27f0:	90 0d       	add	r25, r0
    27f2:	11 24       	eor	r1, r1
    27f4:	e8 0f       	add	r30, r24
    27f6:	f9 1f       	adc	r31, r25
    27f8:	e2 5a       	subi	r30, 0xA2	; 162
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    27fe:	81 70       	andi	r24, 0x01	; 1
    2800:	08 95       	ret

00002802 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2802:	e0 91 49 01 	lds	r30, 0x0149
    2806:	f0 91 4a 01 	lds	r31, 0x014A
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	2d e0       	ldi	r18, 0x0D	; 13
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	ac 01       	movw	r20, r24
    2812:	42 9f       	mul	r20, r18
    2814:	c0 01       	movw	r24, r0
    2816:	43 9f       	mul	r20, r19
    2818:	90 0d       	add	r25, r0
    281a:	52 9f       	mul	r21, r18
    281c:	90 0d       	add	r25, r0
    281e:	11 24       	eor	r1, r1
    2820:	e8 0f       	add	r30, r24
    2822:	f9 1f       	adc	r31, r25
    2824:	e2 5a       	subi	r30, 0xA2	; 162
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	81 60       	ori	r24, 0x01	; 1
    282c:	80 83       	st	Z, r24
}
    282e:	08 95       	ret

00002830 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2830:	e0 91 49 01 	lds	r30, 0x0149
    2834:	f0 91 4a 01 	lds	r31, 0x014A
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	2d e0       	ldi	r18, 0x0D	; 13
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	ac 01       	movw	r20, r24
    2840:	42 9f       	mul	r20, r18
    2842:	c0 01       	movw	r24, r0
    2844:	43 9f       	mul	r20, r19
    2846:	90 0d       	add	r25, r0
    2848:	52 9f       	mul	r21, r18
    284a:	90 0d       	add	r25, r0
    284c:	11 24       	eor	r1, r1
    284e:	e8 0f       	add	r30, r24
    2850:	f9 1f       	adc	r31, r25
    2852:	e2 5a       	subi	r30, 0xA2	; 162
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	80 81       	ld	r24, Z
    2858:	8e 7f       	andi	r24, 0xFE	; 254
    285a:	80 83       	st	Z, r24
}
    285c:	08 95       	ret

0000285e <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    285e:	e0 91 49 01 	lds	r30, 0x0149
    2862:	f0 91 4a 01 	lds	r31, 0x014A
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	2d e0       	ldi	r18, 0x0D	; 13
    286a:	30 e0       	ldi	r19, 0x00	; 0
    286c:	ac 01       	movw	r20, r24
    286e:	42 9f       	mul	r20, r18
    2870:	c0 01       	movw	r24, r0
    2872:	43 9f       	mul	r20, r19
    2874:	90 0d       	add	r25, r0
    2876:	52 9f       	mul	r21, r18
    2878:	90 0d       	add	r25, r0
    287a:	11 24       	eor	r1, r1
    287c:	e8 0f       	add	r30, r24
    287e:	f9 1f       	adc	r31, r25
    2880:	e1 5a       	subi	r30, 0xA1	; 161
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	11 92       	st	Z+, r1
    2886:	11 92       	st	Z+, r1
    2888:	11 92       	st	Z+, r1
    288a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    288c:	10 82       	st	Z, r1
    288e:	11 82       	std	Z+1, r1	; 0x01
    2890:	12 82       	std	Z+2, r1	; 0x02
    2892:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2894:	35 97       	sbiw	r30, 0x05	; 5
    2896:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2898:	80 7e       	andi	r24, 0xE0	; 224
    289a:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    289c:	08 95       	ret

0000289e <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    289e:	e0 91 49 01 	lds	r30, 0x0149
    28a2:	f0 91 4a 01 	lds	r31, 0x014A
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	2d e0       	ldi	r18, 0x0D	; 13
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	ac 01       	movw	r20, r24
    28ae:	42 9f       	mul	r20, r18
    28b0:	c0 01       	movw	r24, r0
    28b2:	43 9f       	mul	r20, r19
    28b4:	90 0d       	add	r25, r0
    28b6:	52 9f       	mul	r21, r18
    28b8:	90 0d       	add	r25, r0
    28ba:	11 24       	eor	r1, r1
    28bc:	e8 0f       	add	r30, r24
    28be:	f9 1f       	adc	r31, r25
    28c0:	e1 5a       	subi	r30, 0xA1	; 161
    28c2:	ff 4f       	sbci	r31, 0xFF	; 255
    28c4:	11 92       	st	Z+, r1
    28c6:	11 92       	st	Z+, r1
    28c8:	11 92       	st	Z+, r1
    28ca:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28cc:	10 82       	st	Z, r1
    28ce:	11 82       	std	Z+1, r1	; 0x01
    28d0:	12 82       	std	Z+2, r1	; 0x02
    28d2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    28d4:	35 97       	sbiw	r30, 0x05	; 5
    28d6:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28d8:	80 7e       	andi	r24, 0xE0	; 224
    28da:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    28dc:	08 95       	ret

000028de <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    28de:	e0 91 49 01 	lds	r30, 0x0149
    28e2:	f0 91 4a 01 	lds	r31, 0x014A
    28e6:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    28e8:	2d e0       	ldi	r18, 0x0D	; 13
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	ac 01       	movw	r20, r24
    28ee:	42 9f       	mul	r20, r18
    28f0:	c0 01       	movw	r24, r0
    28f2:	43 9f       	mul	r20, r19
    28f4:	90 0d       	add	r25, r0
    28f6:	52 9f       	mul	r21, r18
    28f8:	90 0d       	add	r25, r0
    28fa:	11 24       	eor	r1, r1
    28fc:	e8 0f       	add	r30, r24
    28fe:	f9 1f       	adc	r31, r25
    2900:	e2 5a       	subi	r30, 0xA2	; 162
    2902:	ff 4f       	sbci	r31, 0xFF	; 255
    2904:	90 81       	ld	r25, Z
    2906:	89 2f       	mov	r24, r25
    2908:	86 95       	lsr	r24
    290a:	8f 70       	andi	r24, 0x0F	; 15
    290c:	81 30       	cpi	r24, 0x01	; 1
    290e:	19 f0       	breq	.+6      	; 0x2916 <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2910:	91 7e       	andi	r25, 0xE1	; 225
    2912:	92 60       	ori	r25, 0x02	; 2
    2914:	90 83       	st	Z, r25
    2916:	08 95       	ret

00002918 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2918:	e0 91 49 01 	lds	r30, 0x0149
    291c:	f0 91 4a 01 	lds	r31, 0x014A
    2920:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2922:	2d e0       	ldi	r18, 0x0D	; 13
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	ac 01       	movw	r20, r24
    2928:	42 9f       	mul	r20, r18
    292a:	c0 01       	movw	r24, r0
    292c:	43 9f       	mul	r20, r19
    292e:	90 0d       	add	r25, r0
    2930:	52 9f       	mul	r21, r18
    2932:	90 0d       	add	r25, r0
    2934:	11 24       	eor	r1, r1
    2936:	e8 0f       	add	r30, r24
    2938:	f9 1f       	adc	r31, r25
    293a:	e2 5a       	subi	r30, 0xA2	; 162
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	90 81       	ld	r25, Z
    2940:	89 2f       	mov	r24, r25
    2942:	86 95       	lsr	r24
    2944:	8f 70       	andi	r24, 0x0F	; 15
    2946:	82 30       	cpi	r24, 0x02	; 2
    2948:	19 f0       	breq	.+6      	; 0x2950 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    294a:	91 7e       	andi	r25, 0xE1	; 225
    294c:	94 60       	ori	r25, 0x04	; 4
    294e:	90 83       	st	Z, r25
    2950:	08 95       	ret

00002952 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    295a:	c0 91 49 01 	lds	r28, 0x0149
    295e:	d0 91 4a 01 	lds	r29, 0x014A
    2962:	08 2f       	mov	r16, r24
    2964:	10 e0       	ldi	r17, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2966:	8d e0       	ldi	r24, 0x0D	; 13
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	08 9f       	mul	r16, r24
    296c:	f0 01       	movw	r30, r0
    296e:	09 9f       	mul	r16, r25
    2970:	f0 0d       	add	r31, r0
    2972:	18 9f       	mul	r17, r24
    2974:	f0 0d       	add	r31, r0
    2976:	11 24       	eor	r1, r1
    2978:	ec 0f       	add	r30, r28
    297a:	fd 1f       	adc	r31, r29
    297c:	e2 5a       	subi	r30, 0xA2	; 162
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	ee 55       	subi	r30, 0x5E	; 94
    2984:	f0 40       	sbci	r31, 0x00	; 0
    2986:	86 95       	lsr	r24
    2988:	8f 70       	andi	r24, 0x0F	; 15
    298a:	51 f5       	brne	.+84     	; 0x29e0 <Timebase_DownCounter_Set_Securely+0x8e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    298c:	ed 59       	subi	r30, 0x9D	; 157
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	40 83       	st	Z, r20
    2992:	51 83       	std	Z+1, r21	; 0x01
    2994:	62 83       	std	Z+2, r22	; 0x02
    2996:	73 83       	std	Z+3, r23	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2998:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    299a:	8a 85       	ldd	r24, Y+10	; 0x0a
    299c:	9b 85       	ldd	r25, Y+11	; 0x0b
    299e:	ac 85       	ldd	r26, Y+12	; 0x0c
    29a0:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    29a2:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    29a4:	2d e0       	ldi	r18, 0x0D	; 13
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	02 9f       	mul	r16, r18
    29aa:	f0 01       	movw	r30, r0
    29ac:	03 9f       	mul	r16, r19
    29ae:	f0 0d       	add	r31, r0
    29b0:	12 9f       	mul	r17, r18
    29b2:	f0 0d       	add	r31, r0
    29b4:	11 24       	eor	r1, r1
    29b6:	ec 0f       	add	r30, r28
    29b8:	fd 1f       	adc	r31, r29
    29ba:	e1 5a       	subi	r30, 0xA1	; 161
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	84 0f       	add	r24, r20
    29c0:	95 1f       	adc	r25, r21
    29c2:	a6 1f       	adc	r26, r22
    29c4:	b7 1f       	adc	r27, r23
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    29ce:	92 91       	ld	r25, -Z
    29d0:	89 2f       	mov	r24, r25
    29d2:	86 95       	lsr	r24
    29d4:	8f 70       	andi	r24, 0x0F	; 15
    29d6:	81 30       	cpi	r24, 0x01	; 1
    29d8:	19 f0       	breq	.+6      	; 0x29e0 <Timebase_DownCounter_Set_Securely+0x8e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    29da:	91 7e       	andi	r25, 0xE1	; 225
    29dc:	92 60       	ori	r25, 0x02	; 2
    29de:	90 83       	st	Z, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	1f 91       	pop	r17
    29e6:	0f 91       	pop	r16
    29e8:	08 95       	ret

000029ea <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    29ee:	e0 91 49 01 	lds	r30, 0x0149
    29f2:	f0 91 4a 01 	lds	r31, 0x014A
    29f6:	a8 2f       	mov	r26, r24
    29f8:	b0 e0       	ldi	r27, 0x00	; 0
    29fa:	2d e0       	ldi	r18, 0x0D	; 13
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	e9 01       	movw	r28, r18
    2a00:	ac 9f       	mul	r26, r28
    2a02:	90 01       	movw	r18, r0
    2a04:	ad 9f       	mul	r26, r29
    2a06:	30 0d       	add	r19, r0
    2a08:	bc 9f       	mul	r27, r28
    2a0a:	30 0d       	add	r19, r0
    2a0c:	11 24       	eor	r1, r1
    2a0e:	e2 0f       	add	r30, r18
    2a10:	f3 1f       	adc	r31, r19
    2a12:	e1 5a       	subi	r30, 0xA1	; 161
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	11 92       	st	Z+, r1
    2a18:	11 92       	st	Z+, r1
    2a1a:	11 92       	st	Z+, r1
    2a1c:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a1e:	10 82       	st	Z, r1
    2a20:	11 82       	std	Z+1, r1	; 0x01
    2a22:	12 82       	std	Z+2, r1	; 0x02
    2a24:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2a26:	35 97       	sbiw	r30, 0x05	; 5
    2a28:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a2a:	90 7e       	andi	r25, 0xE0	; 224
    2a2c:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2a2e:	0e 94 a9 14 	call	0x2952	; 0x2952 <Timebase_DownCounter_Set_Securely>
} 
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	08 95       	ret

00002a38 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2a3c:	c0 91 49 01 	lds	r28, 0x0149
    2a40:	d0 91 4a 01 	lds	r29, 0x014A
    2a44:	68 2f       	mov	r22, r24
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	8d e0       	ldi	r24, 0x0D	; 13
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	68 9f       	mul	r22, r24
    2a4e:	f0 01       	movw	r30, r0
    2a50:	69 9f       	mul	r22, r25
    2a52:	f0 0d       	add	r31, r0
    2a54:	78 9f       	mul	r23, r24
    2a56:	f0 0d       	add	r31, r0
    2a58:	11 24       	eor	r1, r1
    2a5a:	ec 0f       	add	r30, r28
    2a5c:	fd 1f       	adc	r31, r29
    2a5e:	e2 5a       	subi	r30, 0xA2	; 162
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	e0 81       	ld	r30, Z
    2a64:	e6 95       	lsr	r30
    2a66:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    2a68:	e1 30       	cpi	r30, 0x01	; 1
    2a6a:	d1 f5       	brne	.+116    	; 0x2ae0 <Timebase_DownCounter_Update+0xa8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2a6c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2a6e:	2a 85       	ldd	r18, Y+10	; 0x0a
    2a70:	3b 85       	ldd	r19, Y+11	; 0x0b
    2a72:	4c 85       	ldd	r20, Y+12	; 0x0c
    2a74:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2a76:	78 94       	sei
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    2a78:	8d e0       	ldi	r24, 0x0D	; 13
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	68 9f       	mul	r22, r24
    2a7e:	f0 01       	movw	r30, r0
    2a80:	69 9f       	mul	r22, r25
    2a82:	f0 0d       	add	r31, r0
    2a84:	78 9f       	mul	r23, r24
    2a86:	f0 0d       	add	r31, r0
    2a88:	11 24       	eor	r1, r1
    2a8a:	ec 0f       	add	r30, r28
    2a8c:	fd 1f       	adc	r31, r29
    2a8e:	bf 01       	movw	r22, r30
    2a90:	61 5a       	subi	r22, 0xA1	; 161
    2a92:	7f 4f       	sbci	r23, 0xFF	; 255
    2a94:	eb 01       	movw	r28, r22
    2a96:	88 81       	ld	r24, Y
    2a98:	99 81       	ldd	r25, Y+1	; 0x01
    2a9a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a9c:	bb 81       	ldd	r27, Y+3	; 0x03
    2a9e:	82 1b       	sub	r24, r18
    2aa0:	93 0b       	sbc	r25, r19
    2aa2:	a4 0b       	sbc	r26, r20
    2aa4:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2aa6:	ef 01       	movw	r28, r30
    2aa8:	cd 59       	subi	r28, 0x9D	; 157
    2aaa:	df 4f       	sbci	r29, 0xFF	; 255
    2aac:	88 83       	st	Y, r24
    2aae:	99 83       	std	Y+1, r25	; 0x01
    2ab0:	aa 83       	std	Y+2, r26	; 0x02
    2ab2:	bb 83       	std	Y+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2ab4:	18 16       	cp	r1, r24
    2ab6:	19 06       	cpc	r1, r25
    2ab8:	1a 06       	cpc	r1, r26
    2aba:	1b 06       	cpc	r1, r27
    2abc:	94 f1       	brlt	.+100    	; 0x2b22 <Timebase_DownCounter_Update+0xea>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2abe:	db 01       	movw	r26, r22
    2ac0:	1d 92       	st	X+, r1
    2ac2:	1d 92       	st	X+, r1
    2ac4:	1d 92       	st	X+, r1
    2ac6:	1c 92       	st	X, r1
    2ac8:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2aca:	18 82       	st	Y, r1
    2acc:	19 82       	std	Y+1, r1	; 0x01
    2ace:	1a 82       	std	Y+2, r1	; 0x02
    2ad0:	1b 82       	std	Y+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2ad2:	e2 5a       	subi	r30, 0xA2	; 162
    2ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad6:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2ad8:	80 7e       	andi	r24, 0xE0	; 224
    2ada:	88 60       	ori	r24, 0x08	; 8
    2adc:	80 83       	st	Z, r24
    2ade:	21 c0       	rjmp	.+66     	; 0x2b22 <Timebase_DownCounter_Update+0xea>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2ae0:	e2 30       	cpi	r30, 0x02	; 2
    2ae2:	f9 f4       	brne	.+62     	; 0x2b22 <Timebase_DownCounter_Update+0xea>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2ae4:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2ae6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ae8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aea:	ac 85       	ldd	r26, Y+12	; 0x0c
    2aec:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2aee:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2af0:	2d e0       	ldi	r18, 0x0D	; 13
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	62 9f       	mul	r22, r18
    2af6:	f0 01       	movw	r30, r0
    2af8:	63 9f       	mul	r22, r19
    2afa:	f0 0d       	add	r31, r0
    2afc:	72 9f       	mul	r23, r18
    2afe:	f0 0d       	add	r31, r0
    2b00:	11 24       	eor	r1, r1
    2b02:	ec 0f       	add	r30, r28
    2b04:	fd 1f       	adc	r31, r29
    2b06:	ed 59       	subi	r30, 0x9D	; 157
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	20 81       	ld	r18, Z
    2b0c:	31 81       	ldd	r19, Z+1	; 0x01
    2b0e:	42 81       	ldd	r20, Z+2	; 0x02
    2b10:	53 81       	ldd	r21, Z+3	; 0x03
    2b12:	82 0f       	add	r24, r18
    2b14:	93 1f       	adc	r25, r19
    2b16:	a4 1f       	adc	r26, r20
    2b18:	b5 1f       	adc	r27, r21
    2b1a:	b2 93       	st	-Z, r27
    2b1c:	a2 93       	st	-Z, r26
    2b1e:	92 93       	st	-Z, r25
    2b20:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	08 95       	ret

00002b28 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	e0 91 49 01 	lds	r30, 0x0149
    2b2e:	f0 91 4a 01 	lds	r31, 0x014A
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	2d e0       	ldi	r18, 0x0D	; 13
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	bc 01       	movw	r22, r24
    2b3a:	62 9f       	mul	r22, r18
    2b3c:	c0 01       	movw	r24, r0
    2b3e:	63 9f       	mul	r22, r19
    2b40:	90 0d       	add	r25, r0
    2b42:	72 9f       	mul	r23, r18
    2b44:	90 0d       	add	r25, r0
    2b46:	11 24       	eor	r1, r1
    2b48:	e8 0f       	add	r30, r24
    2b4a:	f9 1f       	adc	r31, r25
    2b4c:	e2 5a       	subi	r30, 0xA2	; 162
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	86 95       	lsr	r24
    2b54:	8f 70       	andi	r24, 0x0F	; 15
    2b56:	84 30       	cpi	r24, 0x04	; 4
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <Timebase_DownCounter_Expired+0x34>
    2b5a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2b5c:	84 2f       	mov	r24, r20
    2b5e:	08 95       	ret

00002b60 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2b60:	e0 91 49 01 	lds	r30, 0x0149
    2b64:	f0 91 4a 01 	lds	r31, 0x014A
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2b6a:	2d e0       	ldi	r18, 0x0D	; 13
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	ac 01       	movw	r20, r24
    2b70:	42 9f       	mul	r20, r18
    2b72:	c0 01       	movw	r24, r0
    2b74:	43 9f       	mul	r20, r19
    2b76:	90 0d       	add	r25, r0
    2b78:	52 9f       	mul	r21, r18
    2b7a:	90 0d       	add	r25, r0
    2b7c:	11 24       	eor	r1, r1
    2b7e:	e8 0f       	add	r30, r24
    2b80:	f9 1f       	adc	r31, r25
    2b82:	df 01       	movw	r26, r30
    2b84:	a2 5a       	subi	r26, 0xA2	; 162
    2b86:	bf 4f       	sbci	r27, 0xFF	; 255
    2b88:	8c 91       	ld	r24, X
    2b8a:	86 95       	lsr	r24
    2b8c:	8f 70       	andi	r24, 0x0F	; 15
    2b8e:	84 30       	cpi	r24, 0x04	; 4
    2b90:	11 f0       	breq	.+4      	; 0x2b96 <Timebase_DownCounter_Expired_Event+0x36>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2b96:	e1 5a       	subi	r30, 0xA1	; 161
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	11 92       	st	Z+, r1
    2b9c:	11 92       	st	Z+, r1
    2b9e:	11 92       	st	Z+, r1
    2ba0:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2ba2:	10 82       	st	Z, r1
    2ba4:	11 82       	std	Z+1, r1	; 0x01
    2ba6:	12 82       	std	Z+2, r1	; 0x02
    2ba8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2baa:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2bac:	80 7e       	andi	r24, 0xE0	; 224
    2bae:	8c 93       	st	X, r24
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2bb2:	08 95       	ret

00002bb4 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2bb8:	c0 91 49 01 	lds	r28, 0x0149
    2bbc:	d0 91 4a 01 	lds	r29, 0x014A
    2bc0:	28 2f       	mov	r18, r24
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2bc4:	8d e0       	ldi	r24, 0x0D	; 13
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	28 9f       	mul	r18, r24
    2bca:	f0 01       	movw	r30, r0
    2bcc:	29 9f       	mul	r18, r25
    2bce:	f0 0d       	add	r31, r0
    2bd0:	38 9f       	mul	r19, r24
    2bd2:	f0 0d       	add	r31, r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	ec 0f       	add	r30, r28
    2bd8:	fd 1f       	adc	r31, r29
    2bda:	e2 5a       	subi	r30, 0xA2	; 162
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	ee 55       	subi	r30, 0x5E	; 94
    2be2:	f0 40       	sbci	r31, 0x00	; 0
    2be4:	80 fd       	sbrc	r24, 0
    2be6:	25 c0       	rjmp	.+74     	; 0x2c32 <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2be8:	ed 59       	subi	r30, 0x9D	; 157
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	81 91       	ld	r24, Z+
    2bee:	91 91       	ld	r25, Z+
    2bf0:	a1 91       	ld	r26, Z+
    2bf2:	b1 91       	ld	r27, Z+
    2bf4:	84 1b       	sub	r24, r20
    2bf6:	95 0b       	sbc	r25, r21
    2bf8:	a6 0b       	sbc	r26, r22
    2bfa:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2bfc:	b7 ff       	sbrs	r27, 7
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2c00:	10 82       	st	Z, r1
    2c02:	11 82       	std	Z+1, r1	; 0x01
    2c04:	12 82       	std	Z+2, r1	; 0x02
    2c06:	13 82       	std	Z+3, r1	; 0x03
    2c08:	04 c0       	rjmp	.+8      	; 0x2c12 <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2c0a:	80 83       	st	Z, r24
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	a2 83       	std	Z+2, r26	; 0x02
    2c10:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2c12:	8d e0       	ldi	r24, 0x0D	; 13
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	28 9f       	mul	r18, r24
    2c18:	f0 01       	movw	r30, r0
    2c1a:	29 9f       	mul	r18, r25
    2c1c:	f0 0d       	add	r31, r0
    2c1e:	38 9f       	mul	r19, r24
    2c20:	f0 0d       	add	r31, r0
    2c22:	11 24       	eor	r1, r1
    2c24:	ec 0f       	add	r30, r28
    2c26:	fd 1f       	adc	r31, r29
    2c28:	e2 5a       	subi	r30, 0xA2	; 162
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	81 60       	ori	r24, 0x01	; 1
    2c30:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	08 95       	ret

00002c38 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2c38:	e0 91 49 01 	lds	r30, 0x0149
    2c3c:	f0 91 4a 01 	lds	r31, 0x014A
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2c42:	2d e0       	ldi	r18, 0x0D	; 13
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	ac 01       	movw	r20, r24
    2c48:	42 9f       	mul	r20, r18
    2c4a:	c0 01       	movw	r24, r0
    2c4c:	43 9f       	mul	r20, r19
    2c4e:	90 0d       	add	r25, r0
    2c50:	52 9f       	mul	r21, r18
    2c52:	90 0d       	add	r25, r0
    2c54:	11 24       	eor	r1, r1
    2c56:	e8 0f       	add	r30, r24
    2c58:	f9 1f       	adc	r31, r25
    2c5a:	df 01       	movw	r26, r30
    2c5c:	a9 59       	subi	r26, 0x99	; 153
    2c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c60:	ed 59       	subi	r30, 0x9D	; 157
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	20 81       	ld	r18, Z
    2c66:	31 81       	ldd	r19, Z+1	; 0x01
    2c68:	42 81       	ldd	r20, Z+2	; 0x02
    2c6a:	53 81       	ldd	r21, Z+3	; 0x03
    2c6c:	8d 91       	ld	r24, X+
    2c6e:	9d 91       	ld	r25, X+
    2c70:	0d 90       	ld	r0, X+
    2c72:	bc 91       	ld	r27, X
    2c74:	a0 2d       	mov	r26, r0
    2c76:	28 1b       	sub	r18, r24
    2c78:	39 0b       	sbc	r19, r25
    2c7a:	4a 0b       	sbc	r20, r26
    2c7c:	5b 0b       	sbc	r21, r27
    2c7e:	57 ff       	sbrs	r21, 7
    2c80:	04 c0       	rjmp	.+8      	; 0x2c8a <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	ca 01       	movw	r24, r20
    2c8e:	08 95       	ret

00002c90 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2c90:	cf 93       	push	r28
    2c92:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2c94:	c0 91 49 01 	lds	r28, 0x0149
    2c98:	d0 91 4a 01 	lds	r29, 0x014A
    2c9c:	68 2f       	mov	r22, r24
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2ca0:	8d e0       	ldi	r24, 0x0D	; 13
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	68 9f       	mul	r22, r24
    2ca6:	f0 01       	movw	r30, r0
    2ca8:	69 9f       	mul	r22, r25
    2caa:	f0 0d       	add	r31, r0
    2cac:	78 9f       	mul	r23, r24
    2cae:	f0 0d       	add	r31, r0
    2cb0:	11 24       	eor	r1, r1
    2cb2:	ec 0f       	add	r30, r28
    2cb4:	fd 1f       	adc	r31, r29
    2cb6:	df 01       	movw	r26, r30
    2cb8:	a9 59       	subi	r26, 0x99	; 153
    2cba:	bf 4f       	sbci	r27, 0xFF	; 255
    2cbc:	ed 59       	subi	r30, 0x9D	; 157
    2cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc0:	20 81       	ld	r18, Z
    2cc2:	31 81       	ldd	r19, Z+1	; 0x01
    2cc4:	42 81       	ldd	r20, Z+2	; 0x02
    2cc6:	53 81       	ldd	r21, Z+3	; 0x03
    2cc8:	8d 91       	ld	r24, X+
    2cca:	9d 91       	ld	r25, X+
    2ccc:	0d 90       	ld	r0, X+
    2cce:	bc 91       	ld	r27, X
    2cd0:	a0 2d       	mov	r26, r0
    2cd2:	28 1b       	sub	r18, r24
    2cd4:	39 0b       	sbc	r19, r25
    2cd6:	4a 0b       	sbc	r20, r26
    2cd8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2cda:	57 fd       	sbrc	r21, 7
    2cdc:	07 c0       	rjmp	.+14     	; 0x2cec <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2cde:	21 15       	cp	r18, r1
    2ce0:	31 05       	cpc	r19, r1
    2ce2:	41 05       	cpc	r20, r1
    2ce4:	51 05       	cpc	r21, r1
    2ce6:	11 f0       	breq	.+4      	; 0x2cec <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	14 c0       	rjmp	.+40     	; 0x2d14 <Timebase_DownCounter_Period_Value_Expired+0x84>
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	8d e0       	ldi	r24, 0x0D	; 13
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	ac 01       	movw	r20, r24
    2cf4:	64 9f       	mul	r22, r20
    2cf6:	c0 01       	movw	r24, r0
    2cf8:	65 9f       	mul	r22, r21
    2cfa:	90 0d       	add	r25, r0
    2cfc:	74 9f       	mul	r23, r20
    2cfe:	90 0d       	add	r25, r0
    2d00:	11 24       	eor	r1, r1
    2d02:	c8 0f       	add	r28, r24
    2d04:	d9 1f       	adc	r29, r25
    2d06:	c2 5a       	subi	r28, 0xA2	; 162
    2d08:	df 4f       	sbci	r29, 0xFF	; 255
    2d0a:	88 81       	ld	r24, Y
    2d0c:	80 ff       	sbrs	r24, 0
    2d0e:	21 e0       	ldi	r18, 0x01	; 1
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2d14:	82 2f       	mov	r24, r18
    2d16:	df 91       	pop	r29
    2d18:	cf 91       	pop	r28
    2d1a:	08 95       	ret

00002d1c <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2d1c:	1f 93       	push	r17
    2d1e:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2d20:	0e 94 48 16 	call	0x2c90	; 0x2c90 <Timebase_DownCounter_Period_Value_Expired>
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	11 f0       	breq	.+4      	; 0x2d2c <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	18 c0       	rjmp	.+48     	; 0x2d5c <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d2c:	e0 91 49 01 	lds	r30, 0x0149
    2d30:	f0 91 4a 01 	lds	r31, 0x014A
    2d34:	21 2f       	mov	r18, r17
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	8d e0       	ldi	r24, 0x0D	; 13
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	ac 01       	movw	r20, r24
    2d3e:	24 9f       	mul	r18, r20
    2d40:	c0 01       	movw	r24, r0
    2d42:	25 9f       	mul	r18, r21
    2d44:	90 0d       	add	r25, r0
    2d46:	34 9f       	mul	r19, r20
    2d48:	90 0d       	add	r25, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	e8 0f       	add	r30, r24
    2d4e:	f9 1f       	adc	r31, r25
    2d50:	e2 5a       	subi	r30, 0xA2	; 162
    2d52:	ff 4f       	sbci	r31, 0xFF	; 255
    2d54:	80 81       	ld	r24, Z
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	80 83       	st	Z, r24
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2d5c:	1f 91       	pop	r17
    2d5e:	08 95       	ret

00002d60 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2d60:	80 e0       	ldi	r24, 0x00	; 0
    2d62:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Timebase_DownCounter_Update>
  }
}
    2d66:	08 95       	ret

00002d68 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2d68:	e0 91 49 01 	lds	r30, 0x0149
    2d6c:	f0 91 4a 01 	lds	r31, 0x014A
    2d70:	e1 5a       	subi	r30, 0xA1	; 161
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	11 92       	st	Z+, r1
    2d76:	11 92       	st	Z+, r1
    2d78:	11 92       	st	Z+, r1
    2d7a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2d7c:	10 82       	st	Z, r1
    2d7e:	11 82       	std	Z+1, r1	; 0x01
    2d80:	12 82       	std	Z+2, r1	; 0x02
    2d82:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2d84:	35 97       	sbiw	r30, 0x05	; 5
    2d86:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d88:	80 7e       	andi	r24, 0xE0	; 224
    2d8a:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2d8c:	08 95       	ret

00002d8e <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2d8e:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    2d92:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2d96:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2d9a:	08 95       	ret

00002d9c <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2d9c:	0f 93       	push	r16
    2d9e:	1f 93       	push	r17
    2da0:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2da2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2da6:	c8 01       	movw	r24, r16
    2da8:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Timebase_Timer_Config>
  Timebase_Reset();
    2dac:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <Timebase_Reset>
}
    2db0:	1f 91       	pop	r17
    2db2:	0f 91       	pop	r16
    2db4:	08 95       	ret

00002db6 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2db6:	e0 91 49 01 	lds	r30, 0x0149
    2dba:	f0 91 4a 01 	lds	r31, 0x014A
    2dbe:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dc0:	82 ff       	sbrs	r24, 2
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <Timebase_Main_Loop_Executables+0x14>
    //add upcounter ss function
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2dc4:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dc6:	8b 7f       	andi	r24, 0xFB	; 251
    2dc8:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2dca:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dcc:	80 ff       	sbrs	r24, 0
    2dce:	09 c0       	rjmp	.+18     	; 0x2de2 <Timebase_Main_Loop_Executables+0x2c>
    Timebase_UpCounter_Update_All();
    2dd0:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2dd4:	e0 91 49 01 	lds	r30, 0x0149
    2dd8:	f0 91 4a 01 	lds	r31, 0x014A
    2ddc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dde:	8e 7f       	andi	r24, 0xFE	; 254
    2de0:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2de2:	e0 91 49 01 	lds	r30, 0x0149
    2de6:	f0 91 4a 01 	lds	r31, 0x014A
    2dea:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dec:	83 ff       	sbrs	r24, 3
    2dee:	09 c0       	rjmp	.+18     	; 0x2e02 <Timebase_Main_Loop_Executables+0x4c>
    Timebase_DownCounter_SS_Update_All();
    2df0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2df4:	e0 91 49 01 	lds	r30, 0x0149
    2df8:	f0 91 4a 01 	lds	r31, 0x014A
    2dfc:	85 8d       	ldd	r24, Z+29	; 0x1d
    2dfe:	87 7f       	andi	r24, 0xF7	; 247
    2e00:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2e02:	e0 91 49 01 	lds	r30, 0x0149
    2e06:	f0 91 4a 01 	lds	r31, 0x014A
    2e0a:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e0c:	81 ff       	sbrs	r24, 1
    2e0e:	09 c0       	rjmp	.+18     	; 0x2e22 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_DownCounter_Update_All();
    2e10:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2e14:	e0 91 49 01 	lds	r30, 0x0149
    2e18:	f0 91 4a 01 	lds	r31, 0x014A
    2e1c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e1e:	8d 7f       	andi	r24, 0xFD	; 253
    2e20:	85 8f       	std	Z+29, r24	; 0x1d
    2e22:	08 95       	ret

00002e24 <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    2e24:	e0 91 49 01 	lds	r30, 0x0149
    2e28:	f0 91 4a 01 	lds	r31, 0x014A
    2e2c:	80 85       	ldd	r24, Z+8	; 0x08
    2e2e:	91 85       	ldd	r25, Z+9	; 0x09
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	91 87       	std	Z+9, r25	; 0x09
    2e34:	80 87       	std	Z+8, r24	; 0x08
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2e36:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e38:	84 60       	ori	r24, 0x04	; 4
    2e3a:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2e3c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e3e:	88 60       	ori	r24, 0x08	; 8
    2e40:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    2e42:	80 85       	ldd	r24, Z+8	; 0x08
    2e44:	91 85       	ldd	r25, Z+9	; 0x09
    2e46:	61 81       	ldd	r22, Z+1	; 0x01
    2e48:	72 81       	ldd	r23, Z+2	; 0x02
    2e4a:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <__udivmodhi4>
    2e4e:	89 2b       	or	r24, r25
    2e50:	99 f4       	brne	.+38     	; 0x2e78 <Timebase_ISR_Executables+0x54>
    Timebase->Time.Seconds++;
    2e52:	82 85       	ldd	r24, Z+10	; 0x0a
    2e54:	93 85       	ldd	r25, Z+11	; 0x0b
    2e56:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e58:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e5a:	01 96       	adiw	r24, 0x01	; 1
    2e5c:	a1 1d       	adc	r26, r1
    2e5e:	b1 1d       	adc	r27, r1
    2e60:	82 87       	std	Z+10, r24	; 0x0a
    2e62:	93 87       	std	Z+11, r25	; 0x0b
    2e64:	a4 87       	std	Z+12, r26	; 0x0c
    2e66:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    2e68:	11 86       	std	Z+9, r1	; 0x09
    2e6a:	10 86       	std	Z+8, r1	; 0x08
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2e6c:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e6e:	81 60       	ori	r24, 0x01	; 1
    2e70:	85 8f       	std	Z+29, r24	; 0x1d
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2e72:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e74:	82 60       	ori	r24, 0x02	; 2
    2e76:	85 8f       	std	Z+29, r24	; 0x1d
    2e78:	08 95       	ret

00002e7a <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2e7a:	1f 92       	push	r1
    2e7c:	0f 92       	push	r0
    2e7e:	0f b6       	in	r0, 0x3f	; 63
    2e80:	0f 92       	push	r0
    2e82:	11 24       	eor	r1, r1
    2e84:	2f 93       	push	r18
    2e86:	3f 93       	push	r19
    2e88:	4f 93       	push	r20
    2e8a:	5f 93       	push	r21
    2e8c:	6f 93       	push	r22
    2e8e:	7f 93       	push	r23
    2e90:	8f 93       	push	r24
    2e92:	9f 93       	push	r25
    2e94:	af 93       	push	r26
    2e96:	bf 93       	push	r27
    2e98:	ef 93       	push	r30
    2e9a:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2e9c:	e0 91 49 01 	lds	r30, 0x0149
    2ea0:	f0 91 4a 01 	lds	r31, 0x014A
    2ea4:	83 81       	ldd	r24, Z+3	; 0x03
    2ea6:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2ea8:	0e 94 12 17 	call	0x2e24	; 0x2e24 <Timebase_ISR_Executables>
}
    2eac:	ff 91       	pop	r31
    2eae:	ef 91       	pop	r30
    2eb0:	bf 91       	pop	r27
    2eb2:	af 91       	pop	r26
    2eb4:	9f 91       	pop	r25
    2eb6:	8f 91       	pop	r24
    2eb8:	7f 91       	pop	r23
    2eba:	6f 91       	pop	r22
    2ebc:	5f 91       	pop	r21
    2ebe:	4f 91       	pop	r20
    2ec0:	3f 91       	pop	r19
    2ec2:	2f 91       	pop	r18
    2ec4:	0f 90       	pop	r0
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	0f 90       	pop	r0
    2eca:	1f 90       	pop	r1
    2ecc:	18 95       	reti

00002ece <__mulsi3>:
    2ece:	62 9f       	mul	r22, r18
    2ed0:	d0 01       	movw	r26, r0
    2ed2:	73 9f       	mul	r23, r19
    2ed4:	f0 01       	movw	r30, r0
    2ed6:	82 9f       	mul	r24, r18
    2ed8:	e0 0d       	add	r30, r0
    2eda:	f1 1d       	adc	r31, r1
    2edc:	64 9f       	mul	r22, r20
    2ede:	e0 0d       	add	r30, r0
    2ee0:	f1 1d       	adc	r31, r1
    2ee2:	92 9f       	mul	r25, r18
    2ee4:	f0 0d       	add	r31, r0
    2ee6:	83 9f       	mul	r24, r19
    2ee8:	f0 0d       	add	r31, r0
    2eea:	74 9f       	mul	r23, r20
    2eec:	f0 0d       	add	r31, r0
    2eee:	65 9f       	mul	r22, r21
    2ef0:	f0 0d       	add	r31, r0
    2ef2:	99 27       	eor	r25, r25
    2ef4:	72 9f       	mul	r23, r18
    2ef6:	b0 0d       	add	r27, r0
    2ef8:	e1 1d       	adc	r30, r1
    2efa:	f9 1f       	adc	r31, r25
    2efc:	63 9f       	mul	r22, r19
    2efe:	b0 0d       	add	r27, r0
    2f00:	e1 1d       	adc	r30, r1
    2f02:	f9 1f       	adc	r31, r25
    2f04:	bd 01       	movw	r22, r26
    2f06:	cf 01       	movw	r24, r30
    2f08:	11 24       	eor	r1, r1
    2f0a:	08 95       	ret

00002f0c <__udivmodhi4>:
    2f0c:	aa 1b       	sub	r26, r26
    2f0e:	bb 1b       	sub	r27, r27
    2f10:	51 e1       	ldi	r21, 0x11	; 17
    2f12:	07 c0       	rjmp	.+14     	; 0x2f22 <__udivmodhi4_ep>

00002f14 <__udivmodhi4_loop>:
    2f14:	aa 1f       	adc	r26, r26
    2f16:	bb 1f       	adc	r27, r27
    2f18:	a6 17       	cp	r26, r22
    2f1a:	b7 07       	cpc	r27, r23
    2f1c:	10 f0       	brcs	.+4      	; 0x2f22 <__udivmodhi4_ep>
    2f1e:	a6 1b       	sub	r26, r22
    2f20:	b7 0b       	sbc	r27, r23

00002f22 <__udivmodhi4_ep>:
    2f22:	88 1f       	adc	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	5a 95       	dec	r21
    2f28:	a9 f7       	brne	.-22     	; 0x2f14 <__udivmodhi4_loop>
    2f2a:	80 95       	com	r24
    2f2c:	90 95       	com	r25
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	08 95       	ret

00002f34 <__udivmodsi4>:
    2f34:	a1 e2       	ldi	r26, 0x21	; 33
    2f36:	1a 2e       	mov	r1, r26
    2f38:	aa 1b       	sub	r26, r26
    2f3a:	bb 1b       	sub	r27, r27
    2f3c:	fd 01       	movw	r30, r26
    2f3e:	0d c0       	rjmp	.+26     	; 0x2f5a <__udivmodsi4_ep>

00002f40 <__udivmodsi4_loop>:
    2f40:	aa 1f       	adc	r26, r26
    2f42:	bb 1f       	adc	r27, r27
    2f44:	ee 1f       	adc	r30, r30
    2f46:	ff 1f       	adc	r31, r31
    2f48:	a2 17       	cp	r26, r18
    2f4a:	b3 07       	cpc	r27, r19
    2f4c:	e4 07       	cpc	r30, r20
    2f4e:	f5 07       	cpc	r31, r21
    2f50:	20 f0       	brcs	.+8      	; 0x2f5a <__udivmodsi4_ep>
    2f52:	a2 1b       	sub	r26, r18
    2f54:	b3 0b       	sbc	r27, r19
    2f56:	e4 0b       	sbc	r30, r20
    2f58:	f5 0b       	sbc	r31, r21

00002f5a <__udivmodsi4_ep>:
    2f5a:	66 1f       	adc	r22, r22
    2f5c:	77 1f       	adc	r23, r23
    2f5e:	88 1f       	adc	r24, r24
    2f60:	99 1f       	adc	r25, r25
    2f62:	1a 94       	dec	r1
    2f64:	69 f7       	brne	.-38     	; 0x2f40 <__udivmodsi4_loop>
    2f66:	60 95       	com	r22
    2f68:	70 95       	com	r23
    2f6a:	80 95       	com	r24
    2f6c:	90 95       	com	r25
    2f6e:	9b 01       	movw	r18, r22
    2f70:	ac 01       	movw	r20, r24
    2f72:	bd 01       	movw	r22, r26
    2f74:	cf 01       	movw	r24, r30
    2f76:	08 95       	ret

00002f78 <__divmodsi4>:
    2f78:	97 fb       	bst	r25, 7
    2f7a:	09 2e       	mov	r0, r25
    2f7c:	05 26       	eor	r0, r21
    2f7e:	0e d0       	rcall	.+28     	; 0x2f9c <__divmodsi4_neg1>
    2f80:	57 fd       	sbrc	r21, 7
    2f82:	04 d0       	rcall	.+8      	; 0x2f8c <__divmodsi4_neg2>
    2f84:	d7 df       	rcall	.-82     	; 0x2f34 <__udivmodsi4>
    2f86:	0a d0       	rcall	.+20     	; 0x2f9c <__divmodsi4_neg1>
    2f88:	00 1c       	adc	r0, r0
    2f8a:	38 f4       	brcc	.+14     	; 0x2f9a <__divmodsi4_exit>

00002f8c <__divmodsi4_neg2>:
    2f8c:	50 95       	com	r21
    2f8e:	40 95       	com	r20
    2f90:	30 95       	com	r19
    2f92:	21 95       	neg	r18
    2f94:	3f 4f       	sbci	r19, 0xFF	; 255
    2f96:	4f 4f       	sbci	r20, 0xFF	; 255
    2f98:	5f 4f       	sbci	r21, 0xFF	; 255

00002f9a <__divmodsi4_exit>:
    2f9a:	08 95       	ret

00002f9c <__divmodsi4_neg1>:
    2f9c:	f6 f7       	brtc	.-4      	; 0x2f9a <__divmodsi4_exit>
    2f9e:	90 95       	com	r25
    2fa0:	80 95       	com	r24
    2fa2:	70 95       	com	r23
    2fa4:	61 95       	neg	r22
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	08 95       	ret

00002fae <_exit>:
    2fae:	f8 94       	cli

00002fb0 <__stop_program>:
    2fb0:	ff cf       	rjmp	.-2      	; 0x2fb0 <__stop_program>
