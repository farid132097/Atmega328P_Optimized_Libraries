
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00002be6  00002c7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002be6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800184  00800184  00002cfe  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  00002cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001746  00000000  00000000  00002d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004b37  00000000  00000000  000044e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000828  00000000  00000000  0000901b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000026a6  00000000  00000000  00009843  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c40  00000000  00000000  0000beec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001aa0  00000000  00000000  0000cb2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b45  00000000  00000000  0000e5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00010111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 71 0d 	jmp	0x1ae2	; 0x1ae2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a4 11 	jmp	0x2348	; 0x2348 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ee       	ldi	r30, 0xE6	; 230
      7c:	fb e2       	ldi	r31, 0x2B	; 43
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 38       	cpi	r26, 0x84	; 132
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a4 e8       	ldi	r26, 0x84	; 132
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 32       	cpi	r26, 0x20	; 32
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <Timebase_Init>
  App_Setup();
      ae:	0e 94 62 00 	call	0xc4	; 0xc4 <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:
}


void App_Main_Loop(void){

  if(Timebase_DownCounter_SS_Continuous_Expired_Event(0)){
      bc:	80 e0       	ldi	r24, 0x00	; 0
      be:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <Timebase_DownCounter_SS_Continuous_Expired_Event>
    //UART_Transmit_Number(Timebase_LPTimer_Get_Seconds());
	//UART_Transmit_Text("\r\n");
  }
  
}
      c2:	08 95       	ret

000000c4 <App_Setup>:



void App_Setup(void){

  UART_Init(57600);
      c4:	60 e0       	ldi	r22, 0x00	; 0
      c6:	71 ee       	ldi	r23, 0xE1	; 225
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <UART_Init>
  
  DDRD  |=  (1<<0);
      d0:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
      d2:	58 98       	cbi	0x0b, 0	; 11
  
  Timebase_DownCounter_SS_Set_Securely(0, 50);
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	42 e3       	ldi	r20, 0x32	; 50
      d8:	50 e0       	ldi	r21, 0x00	; 0
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	70 e0       	ldi	r23, 0x00	; 0
      de:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Timebase_DownCounter_SS_Set_Securely>
  Timebase_LPDownCounter_Set_Securely(0, 5);
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	45 e0       	ldi	r20, 0x05	; 5
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	60 e0       	ldi	r22, 0x00	; 0
      ea:	70 e0       	ldi	r23, 0x00	; 0
      ec:	0e 94 a3 0a 	call	0x1546	; 0x1546 <Timebase_LPDownCounter_Set_Securely>
  
  
}
      f0:	08 95       	ret

000000f2 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
      f2:	8c ed       	ldi	r24, 0xDC	; 220
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	90 93 db 01 	sts	0x01DB, r25
      fa:	80 93 da 01 	sts	0x01DA, r24
  Timebase->Config.UpdateRate = 1;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	90 93 dd 01 	sts	0x01DD, r25
     106:	80 93 dc 01 	sts	0x01DC, r24
  Timebase->Time.OVFUpdateValue=0;
     10a:	10 92 e1 01 	sts	0x01E1, r1
     10e:	10 92 e0 01 	sts	0x01E0, r1
  Timebase->Time.SubSecondsShadow = 0;
     112:	10 92 ed 01 	sts	0x01ED, r1
     116:	10 92 ec 01 	sts	0x01EC, r1
  Timebase->Time.SecondsShadow = 0;
     11a:	10 92 ee 01 	sts	0x01EE, r1
     11e:	10 92 ef 01 	sts	0x01EF, r1
     122:	10 92 f0 01 	sts	0x01F0, r1
     126:	10 92 f1 01 	sts	0x01F1, r1
  Timebase->Time.SubSeconds = 0;
     12a:	10 92 e7 01 	sts	0x01E7, r1
     12e:	10 92 e6 01 	sts	0x01E6, r1
  Timebase->Time.Seconds = 0;
     132:	10 92 e8 01 	sts	0x01E8, r1
     136:	10 92 e9 01 	sts	0x01E9, r1
     13a:	10 92 ea 01 	sts	0x01EA, r1
     13e:	10 92 eb 01 	sts	0x01EB, r1
  Timebase->Time.VariablesSync = 0;
     142:	10 92 f2 01 	sts	0x01F2, r1
  Timebase->Time.LastSample = 0;
     146:	10 92 e2 01 	sts	0x01E2, r1
     14a:	10 92 e3 01 	sts	0x01E3, r1
     14e:	10 92 e4 01 	sts	0x01E4, r1
     152:	10 92 e5 01 	sts	0x01E5, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds = 0;
     156:	10 92 f4 01 	sts	0x01F4, r1
     15a:	10 92 f3 01 	sts	0x01F3, r1
  Timebase->Time.LPTimerSeconds = 0;
     15e:	10 92 f5 01 	sts	0x01F5, r1
     162:	10 92 f6 01 	sts	0x01F6, r1
     166:	10 92 f7 01 	sts	0x01F7, r1
     16a:	10 92 f8 01 	sts	0x01F8, r1
  Timebase->Config.LPUpdateRate = 1;
     16e:	90 93 df 01 	sts	0x01DF, r25
     172:	80 93 de 01 	sts	0x01DE, r24
  #endif
  
  Timebase->UpdateRequest = 0;
     176:	10 92 f9 01 	sts	0x01F9, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     17a:	10 92 fa 01 	sts	0x01FA, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     17e:	10 92 fb 01 	sts	0x01FB, r1
     182:	10 92 fc 01 	sts	0x01FC, r1
     186:	10 92 fd 01 	sts	0x01FD, r1
     18a:	10 92 fe 01 	sts	0x01FE, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     18e:	10 92 ff 01 	sts	0x01FF, r1
     192:	10 92 00 02 	sts	0x0200, r1
     196:	10 92 01 02 	sts	0x0201, r1
     19a:	10 92 02 02 	sts	0x0202, r1
    Timebase->DownCounterSS[i].Value = 0;
     19e:	10 92 03 02 	sts	0x0203, r1
     1a2:	10 92 04 02 	sts	0x0204, r1
     1a6:	10 92 05 02 	sts	0x0205, r1
     1aa:	10 92 06 02 	sts	0x0206, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     1ae:	10 92 07 02 	sts	0x0207, r1
     1b2:	10 92 08 02 	sts	0x0208, r1
     1b6:	10 92 09 02 	sts	0x0209, r1
     1ba:	10 92 0a 02 	sts	0x020A, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     1be:	10 92 0b 02 	sts	0x020B, r1
     1c2:	10 92 0c 02 	sts	0x020C, r1
     1c6:	10 92 0d 02 	sts	0x020D, r1
     1ca:	10 92 0e 02 	sts	0x020E, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     1ce:	10 92 0f 02 	sts	0x020F, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     1d2:	10 92 10 02 	sts	0x0210, r1
     1d6:	10 92 11 02 	sts	0x0211, r1
     1da:	10 92 12 02 	sts	0x0212, r1
     1de:	10 92 13 02 	sts	0x0213, r1
    Timebase->LPDownCounter[i].Value = 0;
     1e2:	10 92 14 02 	sts	0x0214, r1
     1e6:	10 92 15 02 	sts	0x0215, r1
     1ea:	10 92 16 02 	sts	0x0216, r1
     1ee:	10 92 17 02 	sts	0x0217, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     1f2:	10 92 18 02 	sts	0x0218, r1
     1f6:	10 92 19 02 	sts	0x0219, r1
     1fa:	10 92 1a 02 	sts	0x021A, r1
     1fe:	10 92 1b 02 	sts	0x021B, r1
	Timebase->LPDownCounter[i].ReloadValue = 0;
     202:	10 92 1c 02 	sts	0x021C, r1
     206:	10 92 1d 02 	sts	0x021D, r1
     20a:	10 92 1e 02 	sts	0x021E, r1
     20e:	10 92 1f 02 	sts	0x021F, r1
  }
  #endif
  
}
     212:	08 95       	ret

00000214 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     214:	8f 92       	push	r8
     216:	9f 92       	push	r9
     218:	bf 92       	push	r11
     21a:	cf 92       	push	r12
     21c:	df 92       	push	r13
     21e:	ef 92       	push	r14
     220:	ff 92       	push	r15
     222:	0f 93       	push	r16
     224:	1f 93       	push	r17
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	2a 97       	sbiw	r28, 0x0a	; 10
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	f8 94       	cli
     234:	de bf       	out	0x3e, r29	; 62
     236:	0f be       	out	0x3f, r0	; 63
     238:	cd bf       	out	0x3d, r28	; 61
     23a:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     23c:	de 01       	movw	r26, r28
     23e:	11 96       	adiw	r26, 0x01	; 1
     240:	e0 e0       	ldi	r30, 0x00	; 0
     242:	f1 e0       	ldi	r31, 0x01	; 1
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	01 90       	ld	r0, Z+
     248:	0d 92       	st	X+, r0
     24a:	81 50       	subi	r24, 0x01	; 1
     24c:	e1 f7       	brne	.-8      	; 0x246 <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     24e:	94 01       	movw	r18, r8
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	7b e1       	ldi	r23, 0x1B	; 27
     258:	87 eb       	ldi	r24, 0xB7	; 183
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     260:	b2 2e       	mov	r11, r18
     262:	c3 2e       	mov	r12, r19
     264:	d4 2e       	mov	r13, r20
     266:	05 2f       	mov	r16, r21
     268:	7e 01       	movw	r14, r28
     26a:	08 94       	sec
     26c:	e1 1c       	adc	r14, r1
     26e:	f1 1c       	adc	r15, r1
     270:	c9 01       	movw	r24, r18
     272:	da 01       	movw	r26, r20
     274:	9c 01       	movw	r18, r24
     276:	ad 01       	movw	r20, r26
     278:	10 e0       	ldi	r17, 0x00	; 0
     27a:	13 c0       	rjmp	.+38     	; 0x2a2 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     27c:	f7 01       	movw	r30, r14
     27e:	21 91       	ld	r18, Z+
     280:	31 91       	ld	r19, Z+
     282:	7f 01       	movw	r14, r30
     284:	40 e0       	ldi	r20, 0x00	; 0
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	6b 2d       	mov	r22, r11
     28a:	7c 2d       	mov	r23, r12
     28c:	8d 2d       	mov	r24, r13
     28e:	90 2f       	mov	r25, r16
     290:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     294:	c9 01       	movw	r24, r18
     296:	da 01       	movw	r26, r20
     298:	9c 01       	movw	r18, r24
     29a:	ad 01       	movw	r20, r26
	clock_div_index++;
     29c:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     29e:	15 30       	cpi	r17, 0x05	; 5
     2a0:	31 f0       	breq	.+12     	; 0x2ae <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     2a2:	2f 3f       	cpi	r18, 0xFF	; 255
     2a4:	31 05       	cpc	r19, r1
     2a6:	41 05       	cpc	r20, r1
     2a8:	51 05       	cpc	r21, r1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <Timebase_Timer_Enable+0x9a>
     2ac:	3c f7       	brge	.-50     	; 0x27c <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     2ae:	81 2f       	mov	r24, r17
     2b0:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     2b2:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2b4:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     2b6:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     2ba:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     2bc:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     2be:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     2c0:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     2c2:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     2c4:	88 23       	and	r24, r24
     2c6:	11 f4       	brne	.+4      	; 0x2cc <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0f c0       	rjmp	.+30     	; 0x2ea <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     2cc:	81 30       	cpi	r24, 0x01	; 1
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	0b c0       	rjmp	.+22     	; 0x2ea <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     2d4:	82 30       	cpi	r24, 0x02	; 2
     2d6:	11 f4       	brne	.+4      	; 0x2dc <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	07 c0       	rjmp	.+14     	; 0x2ea <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     2dc:	83 30       	cpi	r24, 0x03	; 3
     2de:	11 f4       	brne	.+4      	; 0x2e4 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     2e0:	84 e0       	ldi	r24, 0x04	; 4
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     2e4:	84 30       	cpi	r24, 0x04	; 4
     2e6:	11 f4       	brne	.+4      	; 0x2ec <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     2e8:	85 e0       	ldi	r24, 0x05	; 5
     2ea:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     2ec:	e0 91 da 01 	lds	r30, 0x01DA
     2f0:	f0 91 db 01 	lds	r31, 0x01DB
     2f4:	8f ef       	ldi	r24, 0xFF	; 255
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	82 1b       	sub	r24, r18
     2fa:	93 0b       	sbc	r25, r19
     2fc:	95 83       	std	Z+5, r25	; 0x05
     2fe:	84 83       	std	Z+4, r24	; 0x04
  TCNT0  = Timebase->Time.OVFUpdateValue;
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	95 81       	ldd	r25, Z+5	; 0x05
     304:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     306:	81 e0       	ldi	r24, 0x01	; 1
     308:	80 93 6e 00 	sts	0x006E, r24
  sei();
     30c:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     30e:	91 82       	std	Z+1, r9	; 0x01
     310:	80 82       	st	Z, r8
}
     312:	2a 96       	adiw	r28, 0x0a	; 10
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	f8 94       	cli
     318:	de bf       	out	0x3e, r29	; 62
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	cd bf       	out	0x3d, r28	; 61
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	1f 91       	pop	r17
     324:	0f 91       	pop	r16
     326:	ff 90       	pop	r15
     328:	ef 90       	pop	r14
     32a:	df 90       	pop	r13
     32c:	cf 90       	pop	r12
     32e:	bf 90       	pop	r11
     330:	9f 90       	pop	r9
     332:	8f 90       	pop	r8
     334:	08 95       	ret

00000336 <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     336:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     338:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     33a:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     33e:	87 e0       	ldi	r24, 0x07	; 7
     340:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     342:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     344:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     346:	16 bc       	out	0x26, r1	; 38
}
     348:	08 95       	ret

0000034a <Timebase_LPTimer_Enable>:



#ifdef TIMEBASE_LP_TIMER_ENABLE

void Timebase_LPTimer_Enable(uint16_t UpdateRateHz){
     34a:	9c 01       	movw	r18, r24
    uint8_t  Prescaler_val;
	
    if(UpdateRateHz == 1){
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	91 05       	cpc	r25, r1
     350:	11 f4       	brne	.+4      	; 0x356 <Timebase_LPTimer_Enable+0xc>
     352:	96 e0       	ldi	r25, 0x06	; 6
     354:	19 c0       	rjmp	.+50     	; 0x388 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	91 05       	cpc	r25, r1
     35a:	11 f4       	brne	.+4      	; 0x360 <Timebase_LPTimer_Enable+0x16>
     35c:	95 e0       	ldi	r25, 0x05	; 5
     35e:	14 c0       	rjmp	.+40     	; 0x388 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	91 05       	cpc	r25, r1
     364:	11 f4       	brne	.+4      	; 0x36a <Timebase_LPTimer_Enable+0x20>
     366:	94 e0       	ldi	r25, 0x04	; 4
     368:	0f c0       	rjmp	.+30     	; 0x388 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     36a:	88 30       	cpi	r24, 0x08	; 8
     36c:	91 05       	cpc	r25, r1
     36e:	11 f4       	brne	.+4      	; 0x374 <Timebase_LPTimer_Enable+0x2a>
     370:	93 e0       	ldi	r25, 0x03	; 3
     372:	0a c0       	rjmp	.+20     	; 0x388 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     374:	80 31       	cpi	r24, 0x10	; 16
     376:	91 05       	cpc	r25, r1
     378:	11 f4       	brne	.+4      	; 0x37e <Timebase_LPTimer_Enable+0x34>
     37a:	92 e0       	ldi	r25, 0x02	; 2
     37c:	05 c0       	rjmp	.+10     	; 0x388 <Timebase_LPTimer_Enable+0x3e>
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	20 32       	cpi	r18, 0x20	; 32
     382:	31 05       	cpc	r19, r1
     384:	09 f4       	brne	.+2      	; 0x388 <Timebase_LPTimer_Enable+0x3e>
     386:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     388:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     38a:	84 b7       	in	r24, 0x34	; 52
     38c:	87 7f       	andi	r24, 0xF7	; 247
     38e:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     390:	80 91 60 00 	lds	r24, 0x0060
     394:	80 68       	ori	r24, 0x80	; 128
     396:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     39a:	80 91 60 00 	lds	r24, 0x0060
     39e:	88 61       	ori	r24, 0x18	; 24
     3a0:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     3a4:	90 64       	ori	r25, 0x40	; 64
     3a6:	90 93 60 00 	sts	0x0060, r25
    sei();
     3aa:	78 94       	sei
	Timebase->Config.LPUpdateRate = UpdateRateHz;
     3ac:	e0 91 da 01 	lds	r30, 0x01DA
     3b0:	f0 91 db 01 	lds	r31, 0x01DB
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
}
     3b8:	08 95       	ret

000003ba <Timebase_LPTimer_Disable>:


void Timebase_LPTimer_Disable(void){
    cli();
     3ba:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     3bc:	84 b7       	in	r24, 0x34	; 52
     3be:	87 7f       	andi	r24, 0xF7	; 247
     3c0:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     3c2:	e0 e6       	ldi	r30, 0x60	; 96
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	80 68       	ori	r24, 0x80	; 128
     3ca:	80 83       	st	Z, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     3cc:	80 81       	ld	r24, Z
     3ce:	88 61       	ori	r24, 0x18	; 24
     3d0:	80 83       	st	Z, r24
    WDTCSR  = 0x00;
     3d2:	10 82       	st	Z, r1
    sei();
     3d4:	78 94       	sei
}
     3d6:	08 95       	ret

000003d8 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     3d8:	f8 94       	cli
}
     3da:	08 95       	ret

000003dc <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     3dc:	78 94       	sei
}
     3de:	08 95       	ret

000003e0 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     3e0:	e0 91 da 01 	lds	r30, 0x01DA
     3e4:	f0 91 db 01 	lds	r31, 0x01DB
     3e8:	20 89       	ldd	r18, Z+16	; 0x10
     3ea:	31 89       	ldd	r19, Z+17	; 0x11
}
     3ec:	c9 01       	movw	r24, r18
     3ee:	08 95       	ret

000003f0 <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     3f0:	e0 91 da 01 	lds	r30, 0x01DA
     3f4:	f0 91 db 01 	lds	r31, 0x01DB
     3f8:	22 89       	ldd	r18, Z+18	; 0x12
     3fa:	33 89       	ldd	r19, Z+19	; 0x13
     3fc:	44 89       	ldd	r20, Z+20	; 0x14
     3fe:	55 89       	ldd	r21, Z+21	; 0x15
}
     400:	b9 01       	movw	r22, r18
     402:	ca 01       	movw	r24, r20
     404:	08 95       	ret

00000406 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     406:	e0 91 da 01 	lds	r30, 0x01DA
     40a:	f0 91 db 01 	lds	r31, 0x01DB
     40e:	22 85       	ldd	r18, Z+10	; 0x0a
     410:	33 85       	ldd	r19, Z+11	; 0x0b
}
     412:	c9 01       	movw	r24, r18
     414:	08 95       	ret

00000416 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     416:	e0 91 da 01 	lds	r30, 0x01DA
     41a:	f0 91 db 01 	lds	r31, 0x01DB
     41e:	24 85       	ldd	r18, Z+12	; 0x0c
     420:	35 85       	ldd	r19, Z+13	; 0x0d
     422:	46 85       	ldd	r20, Z+14	; 0x0e
     424:	57 85       	ldd	r21, Z+15	; 0x0f
}
     426:	b9 01       	movw	r22, r18
     428:	ca 01       	movw	r24, r20
     42a:	08 95       	ret

0000042c <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     42c:	e0 91 da 01 	lds	r30, 0x01DA
     430:	f0 91 db 01 	lds	r31, 0x01DB
     434:	93 87       	std	Z+11, r25	; 0x0b
     436:	82 87       	std	Z+10, r24	; 0x0a
}
     438:	08 95       	ret

0000043a <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     43a:	e0 91 da 01 	lds	r30, 0x01DA
     43e:	f0 91 db 01 	lds	r31, 0x01DB
     442:	64 87       	std	Z+12, r22	; 0x0c
     444:	75 87       	std	Z+13, r23	; 0x0d
     446:	86 87       	std	Z+14, r24	; 0x0e
     448:	97 87       	std	Z+15, r25	; 0x0f
}
     44a:	08 95       	ret

0000044c <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     44c:	e0 91 da 01 	lds	r30, 0x01DA
     450:	f0 91 db 01 	lds	r31, 0x01DB
     454:	20 89       	ldd	r18, Z+16	; 0x10
     456:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     458:	80 89       	ldd	r24, Z+16	; 0x10
     45a:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     45c:	28 17       	cp	r18, r24
     45e:	39 07       	cpc	r19, r25
     460:	c9 f7       	brne	.-14     	; 0x454 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     462:	c9 01       	movw	r24, r18
     464:	08 95       	ret

00000466 <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     466:	e0 91 da 01 	lds	r30, 0x01DA
     46a:	f0 91 db 01 	lds	r31, 0x01DB
     46e:	22 89       	ldd	r18, Z+18	; 0x12
     470:	33 89       	ldd	r19, Z+19	; 0x13
     472:	44 89       	ldd	r20, Z+20	; 0x14
     474:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     476:	82 89       	ldd	r24, Z+18	; 0x12
     478:	93 89       	ldd	r25, Z+19	; 0x13
     47a:	a4 89       	ldd	r26, Z+20	; 0x14
     47c:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     47e:	28 17       	cp	r18, r24
     480:	39 07       	cpc	r19, r25
     482:	4a 07       	cpc	r20, r26
     484:	5b 07       	cpc	r21, r27
     486:	99 f7       	brne	.-26     	; 0x46e <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     488:	b9 01       	movw	r22, r18
     48a:	ca 01       	movw	r24, r20
     48c:	08 95       	ret

0000048e <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     48e:	e0 91 da 01 	lds	r30, 0x01DA
     492:	f0 91 db 01 	lds	r31, 0x01DB
     496:	86 89       	ldd	r24, Z+22	; 0x16
     498:	88 23       	and	r24, r24
     49a:	e1 f4       	brne	.+56     	; 0x4d4 <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     49c:	20 89       	ldd	r18, Z+16	; 0x10
     49e:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     4a0:	80 89       	ldd	r24, Z+16	; 0x10
     4a2:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     4a4:	28 17       	cp	r18, r24
     4a6:	39 07       	cpc	r19, r25
     4a8:	c9 f7       	brne	.-14     	; 0x49c <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     4aa:	33 87       	std	Z+11, r19	; 0x0b
     4ac:	22 87       	std	Z+10, r18	; 0x0a
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4ae:	22 89       	ldd	r18, Z+18	; 0x12
     4b0:	33 89       	ldd	r19, Z+19	; 0x13
     4b2:	44 89       	ldd	r20, Z+20	; 0x14
     4b4:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     4b6:	82 89       	ldd	r24, Z+18	; 0x12
     4b8:	93 89       	ldd	r25, Z+19	; 0x13
     4ba:	a4 89       	ldd	r26, Z+20	; 0x14
     4bc:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	4a 07       	cpc	r20, r26
     4c4:	5b 07       	cpc	r21, r27
     4c6:	99 f7       	brne	.-26     	; 0x4ae <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     4c8:	24 87       	std	Z+12, r18	; 0x0c
     4ca:	35 87       	std	Z+13, r19	; 0x0d
     4cc:	46 87       	std	Z+14, r20	; 0x0e
     4ce:	57 87       	std	Z+15, r21	; 0x0f
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	86 8b       	std	Z+22, r24	; 0x16
     4d4:	08 95       	ret

000004d6 <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     4d6:	8f 92       	push	r8
     4d8:	9f 92       	push	r9
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4f0:	c0 91 da 01 	lds	r28, 0x01DA
     4f4:	d0 91 db 01 	lds	r29, 0x01DB
     4f8:	c8 88       	ldd	r12, Y+16	; 0x10
     4fa:	d9 88       	ldd	r13, Y+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     4fc:	88 89       	ldd	r24, Y+16	; 0x10
     4fe:	99 89       	ldd	r25, Y+17	; 0x11
	if(tmp0 == tmp1){
     500:	c8 16       	cp	r12, r24
     502:	d9 06       	cpc	r13, r25
     504:	c9 f7       	brne	.-14     	; 0x4f8 <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     506:	ea 88       	ldd	r14, Y+18	; 0x12
     508:	fb 88       	ldd	r15, Y+19	; 0x13
     50a:	0c 89       	ldd	r16, Y+20	; 0x14
     50c:	1d 89       	ldd	r17, Y+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     50e:	8a 89       	ldd	r24, Y+18	; 0x12
     510:	9b 89       	ldd	r25, Y+19	; 0x13
     512:	ac 89       	ldd	r26, Y+20	; 0x14
     514:	bd 89       	ldd	r27, Y+21	; 0x15
	if(tmp0 == tmp1){
     516:	e8 16       	cp	r14, r24
     518:	f9 06       	cpc	r15, r25
     51a:	0a 07       	cpc	r16, r26
     51c:	1b 07       	cpc	r17, r27
     51e:	99 f7       	brne	.-26     	; 0x506 <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     520:	28 81       	ld	r18, Y
     522:	39 81       	ldd	r19, Y+1	; 0x01
     524:	40 e0       	ldi	r20, 0x00	; 0
     526:	50 e0       	ldi	r21, 0x00	; 0
     528:	c8 01       	movw	r24, r16
     52a:	b7 01       	movw	r22, r14
     52c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsi3>
  smpl_val += smpl_ss;
     530:	76 01       	movw	r14, r12
     532:	00 e0       	ldi	r16, 0x00	; 0
     534:	10 e0       	ldi	r17, 0x00	; 0
     536:	95 01       	movw	r18, r10
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	e2 0e       	add	r14, r18
     53e:	f3 1e       	adc	r15, r19
     540:	04 1f       	adc	r16, r20
     542:	15 1f       	adc	r17, r21
  smpl_val += value;
     544:	e6 0e       	add	r14, r22
     546:	f7 1e       	adc	r15, r23
     548:	08 1f       	adc	r16, r24
     54a:	19 1f       	adc	r17, r25
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	25 c0       	rjmp	.+74     	; 0x5a0 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     556:	88 88       	ldd	r8, Y+16	; 0x10
     558:	99 88       	ldd	r9, Y+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     55a:	88 89       	ldd	r24, Y+16	; 0x10
     55c:	99 89       	ldd	r25, Y+17	; 0x11
	if(tmp0 == tmp1){
     55e:	88 16       	cp	r8, r24
     560:	99 06       	cpc	r9, r25
     562:	c9 f7       	brne	.-14     	; 0x556 <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     564:	aa 88       	ldd	r10, Y+18	; 0x12
     566:	bb 88       	ldd	r11, Y+19	; 0x13
     568:	cc 88       	ldd	r12, Y+20	; 0x14
     56a:	dd 88       	ldd	r13, Y+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     56c:	8a 89       	ldd	r24, Y+18	; 0x12
     56e:	9b 89       	ldd	r25, Y+19	; 0x13
     570:	ac 89       	ldd	r26, Y+20	; 0x14
     572:	bd 89       	ldd	r27, Y+21	; 0x15
	if(tmp0 == tmp1){
     574:	a8 16       	cp	r10, r24
     576:	b9 06       	cpc	r11, r25
     578:	ca 06       	cpc	r12, r26
     57a:	db 06       	cpc	r13, r27
     57c:	99 f7       	brne	.-26     	; 0x564 <Timebase_Timer_Delay_SubSeconds+0x8e>
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     57e:	28 81       	ld	r18, Y
     580:	39 81       	ldd	r19, Y+1	; 0x01
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	c6 01       	movw	r24, r12
     588:	b5 01       	movw	r22, r10
     58a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsi3>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
	curr_val += curr_ss;
     592:	c4 01       	movw	r24, r8
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e0       	ldi	r27, 0x00	; 0
     598:	28 0f       	add	r18, r24
     59a:	39 1f       	adc	r19, r25
     59c:	4a 1f       	adc	r20, r26
     59e:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5a0:	2e 15       	cp	r18, r14
     5a2:	3f 05       	cpc	r19, r15
     5a4:	40 07       	cpc	r20, r16
     5a6:	51 07       	cpc	r21, r17
     5a8:	b4 f2       	brlt	.-84     	; 0x556 <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	bf 90       	pop	r11
     5bc:	af 90       	pop	r10
     5be:	9f 90       	pop	r9
     5c0:	8f 90       	pop	r8
     5c2:	08 95       	ret

000005c4 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5ca:	e0 91 da 01 	lds	r30, 0x01DA
     5ce:	f0 91 db 01 	lds	r31, 0x01DB
     5d2:	60 89       	ldd	r22, Z+16	; 0x10
     5d4:	71 89       	ldd	r23, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     5d6:	80 89       	ldd	r24, Z+16	; 0x10
     5d8:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     5da:	68 17       	cp	r22, r24
     5dc:	79 07       	cpc	r23, r25
     5de:	c9 f7       	brne	.-14     	; 0x5d2 <Timebase_Timer_Await_SubSeconds+0xe>
     5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5e2:	60 89       	ldd	r22, Z+16	; 0x10
     5e4:	71 89       	ldd	r23, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     5e6:	80 89       	ldd	r24, Z+16	; 0x10
     5e8:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     5ea:	68 17       	cp	r22, r24
     5ec:	79 07       	cpc	r23, r25
     5ee:	c9 f7       	brne	.-14     	; 0x5e2 <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     5f0:	26 81       	ldd	r18, Z+6	; 0x06
     5f2:	37 81       	ldd	r19, Z+7	; 0x07
     5f4:	40 85       	ldd	r20, Z+8	; 0x08
     5f6:	51 85       	ldd	r21, Z+9	; 0x09
     5f8:	cb 01       	movw	r24, r22
     5fa:	a0 e0       	ldi	r26, 0x00	; 0
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	82 17       	cp	r24, r18
     600:	93 07       	cpc	r25, r19
     602:	a4 07       	cpc	r26, r20
     604:	b5 07       	cpc	r27, r21
     606:	69 f7       	brne	.-38     	; 0x5e2 <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     608:	20 89       	ldd	r18, Z+16	; 0x10
     60a:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     60c:	80 89       	ldd	r24, Z+16	; 0x10
     60e:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	c9 f7       	brne	.-14     	; 0x608 <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     616:	c9 01       	movw	r24, r18
     618:	a0 e0       	ldi	r26, 0x00	; 0
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	86 83       	std	Z+6, r24	; 0x06
     61e:	97 83       	std	Z+7, r25	; 0x07
     620:	a0 87       	std	Z+8, r26	; 0x08
     622:	b1 87       	std	Z+9, r27	; 0x09
  Timebase->Time.LastSample += value;
     624:	26 81       	ldd	r18, Z+6	; 0x06
     626:	37 81       	ldd	r19, Z+7	; 0x07
     628:	40 85       	ldd	r20, Z+8	; 0x08
     62a:	51 85       	ldd	r21, Z+9	; 0x09
     62c:	ce 01       	movw	r24, r28
     62e:	a0 e0       	ldi	r26, 0x00	; 0
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	a4 1f       	adc	r26, r20
     638:	b5 1f       	adc	r27, r21
     63a:	86 83       	std	Z+6, r24	; 0x06
     63c:	97 83       	std	Z+7, r25	; 0x07
     63e:	a0 87       	std	Z+8, r26	; 0x08
     640:	b1 87       	std	Z+9, r27	; 0x09
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     642:	26 81       	ldd	r18, Z+6	; 0x06
     644:	37 81       	ldd	r19, Z+7	; 0x07
     646:	40 85       	ldd	r20, Z+8	; 0x08
     648:	51 85       	ldd	r21, Z+9	; 0x09
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	a0 e0       	ldi	r26, 0x00	; 0
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	28 17       	cp	r18, r24
     654:	39 07       	cpc	r19, r25
     656:	4a 07       	cpc	r20, r26
     658:	5b 07       	cpc	r21, r27
     65a:	84 f0       	brlt	.+32     	; 0x67c <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     65c:	26 81       	ldd	r18, Z+6	; 0x06
     65e:	37 81       	ldd	r19, Z+7	; 0x07
     660:	40 85       	ldd	r20, Z+8	; 0x08
     662:	51 85       	ldd	r21, Z+9	; 0x09
     664:	80 81       	ld	r24, Z
     666:	91 81       	ldd	r25, Z+1	; 0x01
     668:	a0 e0       	ldi	r26, 0x00	; 0
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	28 1b       	sub	r18, r24
     66e:	39 0b       	sbc	r19, r25
     670:	4a 0b       	sbc	r20, r26
     672:	5b 0b       	sbc	r21, r27
     674:	26 83       	std	Z+6, r18	; 0x06
     676:	37 83       	std	Z+7, r19	; 0x07
     678:	40 87       	std	Z+8, r20	; 0x08
     67a:	51 87       	std	Z+9, r21	; 0x09
  }
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     68c:	e0 91 da 01 	lds	r30, 0x01DA
     690:	f0 91 db 01 	lds	r31, 0x01DB
     694:	22 89       	ldd	r18, Z+18	; 0x12
     696:	33 89       	ldd	r19, Z+19	; 0x13
     698:	44 89       	ldd	r20, Z+20	; 0x14
     69a:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     69c:	82 89       	ldd	r24, Z+18	; 0x12
     69e:	93 89       	ldd	r25, Z+19	; 0x13
     6a0:	a4 89       	ldd	r26, Z+20	; 0x14
     6a2:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     6a4:	28 17       	cp	r18, r24
     6a6:	39 07       	cpc	r19, r25
     6a8:	4a 07       	cpc	r20, r26
     6aa:	5b 07       	cpc	r21, r27
     6ac:	99 f7       	brne	.-26     	; 0x694 <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     6ae:	7b 01       	movw	r14, r22
     6b0:	00 e0       	ldi	r16, 0x00	; 0
     6b2:	10 e0       	ldi	r17, 0x00	; 0
     6b4:	e2 0e       	add	r14, r18
     6b6:	f3 1e       	adc	r15, r19
     6b8:	04 1f       	adc	r16, r20
     6ba:	15 1f       	adc	r17, r21
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     6c6:	22 89       	ldd	r18, Z+18	; 0x12
     6c8:	33 89       	ldd	r19, Z+19	; 0x13
     6ca:	44 89       	ldd	r20, Z+20	; 0x14
     6cc:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     6ce:	82 89       	ldd	r24, Z+18	; 0x12
     6d0:	93 89       	ldd	r25, Z+19	; 0x13
     6d2:	a4 89       	ldd	r26, Z+20	; 0x14
     6d4:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     6d6:	28 17       	cp	r18, r24
     6d8:	39 07       	cpc	r19, r25
     6da:	4a 07       	cpc	r20, r26
     6dc:	5b 07       	cpc	r21, r27
     6de:	99 f7       	brne	.-26     	; 0x6c6 <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     6e0:	2e 15       	cp	r18, r14
     6e2:	3f 05       	cpc	r19, r15
     6e4:	40 07       	cpc	r20, r16
     6e6:	51 07       	cpc	r21, r17
     6e8:	74 f3       	brlt	.-36     	; 0x6c6 <Timebase_Timer_Delay_Seconds+0x44>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	08 95       	ret

000006f4 <Timebase_LPTimer_Get_SubSeconds>:
#ifdef TIMEBASE_LP_TIMER_ENABLE

uint16_t Timebase_LPTimer_Get_SubSeconds(void){
  uint16_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSubSeconds;
     6f4:	e0 91 da 01 	lds	r30, 0x01DA
     6f8:	f0 91 db 01 	lds	r31, 0x01DB
     6fc:	27 89       	ldd	r18, Z+23	; 0x17
     6fe:	30 8d       	ldd	r19, Z+24	; 0x18
    temp1 = Timebase->Time.LPTimerSubSeconds;
     700:	87 89       	ldd	r24, Z+23	; 0x17
     702:	90 8d       	ldd	r25, Z+24	; 0x18
    if(temp0 == temp1){
     704:	28 17       	cp	r18, r24
     706:	39 07       	cpc	r19, r25
     708:	c9 f7       	brne	.-14     	; 0x6fc <Timebase_LPTimer_Get_SubSeconds+0x8>
	  break;
    }
  }
  return temp0;
}
     70a:	c9 01       	movw	r24, r18
     70c:	08 95       	ret

0000070e <Timebase_LPTimer_Get_Seconds>:


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     70e:	e0 91 da 01 	lds	r30, 0x01DA
     712:	f0 91 db 01 	lds	r31, 0x01DB
     716:	21 8d       	ldd	r18, Z+25	; 0x19
     718:	32 8d       	ldd	r19, Z+26	; 0x1a
     71a:	43 8d       	ldd	r20, Z+27	; 0x1b
     71c:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     71e:	81 8d       	ldd	r24, Z+25	; 0x19
     720:	92 8d       	ldd	r25, Z+26	; 0x1a
     722:	a3 8d       	ldd	r26, Z+27	; 0x1b
     724:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     726:	28 17       	cp	r18, r24
     728:	39 07       	cpc	r19, r25
     72a:	4a 07       	cpc	r20, r26
     72c:	5b 07       	cpc	r21, r27
     72e:	99 f7       	brne	.-26     	; 0x716 <Timebase_LPTimer_Get_Seconds+0x8>
	  break;
    }
  }
  return temp0;
}
     730:	b9 01       	movw	r22, r18
     732:	ca 01       	movw	r24, r20
     734:	08 95       	ret

00000736 <Timebase_LPTimer_Set_SubSeconds>:


void Timebase_LPTimer_Set_SubSeconds(uint16_t value){
  Timebase->Time.LPTimerSubSeconds = value;
     736:	e0 91 da 01 	lds	r30, 0x01DA
     73a:	f0 91 db 01 	lds	r31, 0x01DB
     73e:	90 8f       	std	Z+24, r25	; 0x18
     740:	87 8b       	std	Z+23, r24	; 0x17
}
     742:	08 95       	ret

00000744 <Timebase_LPTimer_Set_Seconds>:


void Timebase_LPTimer_Set_Seconds(int32_t value){
  Timebase->Time.LPTimerSeconds = value;
     744:	e0 91 da 01 	lds	r30, 0x01DA
     748:	f0 91 db 01 	lds	r31, 0x01DB
     74c:	61 8f       	std	Z+25, r22	; 0x19
     74e:	72 8f       	std	Z+26, r23	; 0x1a
     750:	83 8f       	std	Z+27, r24	; 0x1b
     752:	94 8f       	std	Z+28, r25	; 0x1c
}
     754:	08 95       	ret

00000756 <Timebase_LPTimer_Delay_Seconds>:

void Timebase_LPTimer_Delay_Seconds(uint16_t value){
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
     75e:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     760:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     762:	e0 91 da 01 	lds	r30, 0x01DA
     766:	f0 91 db 01 	lds	r31, 0x01DB
     76a:	21 8d       	ldd	r18, Z+25	; 0x19
     76c:	32 8d       	ldd	r19, Z+26	; 0x1a
     76e:	43 8d       	ldd	r20, Z+27	; 0x1b
     770:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     772:	81 8d       	ldd	r24, Z+25	; 0x19
     774:	92 8d       	ldd	r25, Z+26	; 0x1a
     776:	a3 8d       	ldd	r26, Z+27	; 0x1b
     778:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     77a:	28 17       	cp	r18, r24
     77c:	39 07       	cpc	r19, r25
     77e:	4a 07       	cpc	r20, r26
     780:	5b 07       	cpc	r21, r27
     782:	99 f7       	brne	.-26     	; 0x76a <Timebase_LPTimer_Delay_Seconds+0x14>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     784:	78 94       	sei
void Timebase_LPTimer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
     786:	7b 01       	movw	r14, r22
     788:	00 e0       	ldi	r16, 0x00	; 0
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	e2 0e       	add	r14, r18
     78e:	f3 1e       	adc	r15, r19
     790:	04 1f       	adc	r16, r20
     792:	15 1f       	adc	r17, r21
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	0f c0       	rjmp	.+30     	; 0x7bc <Timebase_LPTimer_Delay_Seconds+0x66>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     79e:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     7a0:	21 8d       	ldd	r18, Z+25	; 0x19
     7a2:	32 8d       	ldd	r19, Z+26	; 0x1a
     7a4:	43 8d       	ldd	r20, Z+27	; 0x1b
     7a6:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     7a8:	81 8d       	ldd	r24, Z+25	; 0x19
     7aa:	92 8d       	ldd	r25, Z+26	; 0x1a
     7ac:	a3 8d       	ldd	r26, Z+27	; 0x1b
     7ae:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	4a 07       	cpc	r20, r26
     7b6:	5b 07       	cpc	r21, r27
     7b8:	99 f7       	brne	.-26     	; 0x7a0 <Timebase_LPTimer_Delay_Seconds+0x4a>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7ba:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     7bc:	2e 15       	cp	r18, r14
     7be:	3f 05       	cpc	r19, r15
     7c0:	40 07       	cpc	r20, r16
     7c2:	51 07       	cpc	r21, r17
     7c4:	64 f3       	brlt	.-40     	; 0x79e <Timebase_LPTimer_Delay_Seconds+0x48>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_LPTimer_Get_Seconds();
	Timebase_Atomic_Operation_End();
  }
}
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	08 95       	ret

000007d0 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     7d0:	e0 91 da 01 	lds	r30, 0x01DA
     7d4:	f0 91 db 01 	lds	r31, 0x01DB
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	25 e1       	ldi	r18, 0x15	; 21
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	ac 01       	movw	r20, r24
     7e0:	42 9f       	mul	r20, r18
     7e2:	c0 01       	movw	r24, r0
     7e4:	43 9f       	mul	r20, r19
     7e6:	90 0d       	add	r25, r0
     7e8:	52 9f       	mul	r21, r18
     7ea:	90 0d       	add	r25, r0
     7ec:	11 24       	eor	r1, r1
     7ee:	e8 0f       	add	r30, r24
     7f0:	f9 1f       	adc	r31, r25
     7f2:	86 8d       	ldd	r24, Z+30	; 0x1e
     7f4:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     7f6:	8f 70       	andi	r24, 0x0F	; 15
     7f8:	08 95       	ret

000007fa <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     7fa:	e0 91 da 01 	lds	r30, 0x01DA
     7fe:	f0 91 db 01 	lds	r31, 0x01DB
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	25 e1       	ldi	r18, 0x15	; 21
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	ac 01       	movw	r20, r24
     80a:	42 9f       	mul	r20, r18
     80c:	c0 01       	movw	r24, r0
     80e:	43 9f       	mul	r20, r19
     810:	90 0d       	add	r25, r0
     812:	52 9f       	mul	r21, r18
     814:	90 0d       	add	r25, r0
     816:	11 24       	eor	r1, r1
     818:	e8 0f       	add	r30, r24
     81a:	f9 1f       	adc	r31, r25
     81c:	6f 70       	andi	r22, 0x0F	; 15
     81e:	66 0f       	add	r22, r22
     820:	86 8d       	ldd	r24, Z+30	; 0x1e
     822:	81 7e       	andi	r24, 0xE1	; 225
     824:	86 2b       	or	r24, r22
     826:	86 8f       	std	Z+30, r24	; 0x1e
}
     828:	08 95       	ret

0000082a <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     82a:	e0 91 da 01 	lds	r30, 0x01DA
     82e:	f0 91 db 01 	lds	r31, 0x01DB
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	25 e1       	ldi	r18, 0x15	; 21
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	ac 01       	movw	r20, r24
     83a:	42 9f       	mul	r20, r18
     83c:	c0 01       	movw	r24, r0
     83e:	43 9f       	mul	r20, r19
     840:	90 0d       	add	r25, r0
     842:	52 9f       	mul	r21, r18
     844:	90 0d       	add	r25, r0
     846:	11 24       	eor	r1, r1
     848:	e8 0f       	add	r30, r24
     84a:	f9 1f       	adc	r31, r25
     84c:	df 01       	movw	r26, r30
     84e:	97 96       	adiw	r26, 0x27	; 39
     850:	67 a1       	ldd	r22, Z+39	; 0x27
     852:	11 96       	adiw	r26, 0x01	; 1
     854:	7c 91       	ld	r23, X
     856:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     858:	12 96       	adiw	r26, 0x02	; 2
     85a:	8c 91       	ld	r24, X
     85c:	12 97       	sbiw	r26, 0x02	; 2
     85e:	13 96       	adiw	r26, 0x03	; 3
     860:	9c 91       	ld	r25, X
     862:	08 95       	ret

00000864 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     864:	e0 91 da 01 	lds	r30, 0x01DA
     868:	f0 91 db 01 	lds	r31, 0x01DB
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	25 e1       	ldi	r18, 0x15	; 21
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	dc 01       	movw	r26, r24
     874:	a2 9f       	mul	r26, r18
     876:	c0 01       	movw	r24, r0
     878:	a3 9f       	mul	r26, r19
     87a:	90 0d       	add	r25, r0
     87c:	b2 9f       	mul	r27, r18
     87e:	90 0d       	add	r25, r0
     880:	11 24       	eor	r1, r1
     882:	e8 0f       	add	r30, r24
     884:	f9 1f       	adc	r31, r25
     886:	47 a3       	std	Z+39, r20	; 0x27
     888:	50 a7       	std	Z+40, r21	; 0x28
     88a:	61 a7       	std	Z+41, r22	; 0x29
     88c:	72 a7       	std	Z+42, r23	; 0x2a
}
     88e:	08 95       	ret

00000890 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     890:	e0 91 da 01 	lds	r30, 0x01DA
     894:	f0 91 db 01 	lds	r31, 0x01DB
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	25 e1       	ldi	r18, 0x15	; 21
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	ac 01       	movw	r20, r24
     8a0:	42 9f       	mul	r20, r18
     8a2:	c0 01       	movw	r24, r0
     8a4:	43 9f       	mul	r20, r19
     8a6:	90 0d       	add	r25, r0
     8a8:	52 9f       	mul	r21, r18
     8aa:	90 0d       	add	r25, r0
     8ac:	11 24       	eor	r1, r1
     8ae:	e8 0f       	add	r30, r24
     8b0:	f9 1f       	adc	r31, r25
     8b2:	df 01       	movw	r26, r30
     8b4:	5f 96       	adiw	r26, 0x1f	; 31
     8b6:	67 8d       	ldd	r22, Z+31	; 0x1f
     8b8:	11 96       	adiw	r26, 0x01	; 1
     8ba:	7c 91       	ld	r23, X
     8bc:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     8be:	12 96       	adiw	r26, 0x02	; 2
     8c0:	8c 91       	ld	r24, X
     8c2:	12 97       	sbiw	r26, 0x02	; 2
     8c4:	13 96       	adiw	r26, 0x03	; 3
     8c6:	9c 91       	ld	r25, X
     8c8:	08 95       	ret

000008ca <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     8ca:	e0 91 da 01 	lds	r30, 0x01DA
     8ce:	f0 91 db 01 	lds	r31, 0x01DB
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	25 e1       	ldi	r18, 0x15	; 21
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	ac 01       	movw	r20, r24
     8da:	42 9f       	mul	r20, r18
     8dc:	c0 01       	movw	r24, r0
     8de:	43 9f       	mul	r20, r19
     8e0:	90 0d       	add	r25, r0
     8e2:	52 9f       	mul	r21, r18
     8e4:	90 0d       	add	r25, r0
     8e6:	11 24       	eor	r1, r1
     8e8:	e8 0f       	add	r30, r24
     8ea:	f9 1f       	adc	r31, r25
     8ec:	df 01       	movw	r26, r30
     8ee:	93 96       	adiw	r26, 0x23	; 35
     8f0:	63 a1       	ldd	r22, Z+35	; 0x23
     8f2:	11 96       	adiw	r26, 0x01	; 1
     8f4:	7c 91       	ld	r23, X
     8f6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     8f8:	12 96       	adiw	r26, 0x02	; 2
     8fa:	8c 91       	ld	r24, X
     8fc:	12 97       	sbiw	r26, 0x02	; 2
     8fe:	13 96       	adiw	r26, 0x03	; 3
     900:	9c 91       	ld	r25, X
     902:	08 95       	ret

00000904 <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     904:	e0 91 da 01 	lds	r30, 0x01DA
     908:	f0 91 db 01 	lds	r31, 0x01DB
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	25 e1       	ldi	r18, 0x15	; 21
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	dc 01       	movw	r26, r24
     914:	a2 9f       	mul	r26, r18
     916:	c0 01       	movw	r24, r0
     918:	a3 9f       	mul	r26, r19
     91a:	90 0d       	add	r25, r0
     91c:	b2 9f       	mul	r27, r18
     91e:	90 0d       	add	r25, r0
     920:	11 24       	eor	r1, r1
     922:	e8 0f       	add	r30, r24
     924:	f9 1f       	adc	r31, r25
     926:	47 8f       	std	Z+31, r20	; 0x1f
     928:	50 a3       	std	Z+32, r21	; 0x20
     92a:	61 a3       	std	Z+33, r22	; 0x21
     92c:	72 a3       	std	Z+34, r23	; 0x22
}
     92e:	08 95       	ret

00000930 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     930:	e0 91 da 01 	lds	r30, 0x01DA
     934:	f0 91 db 01 	lds	r31, 0x01DB
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	25 e1       	ldi	r18, 0x15	; 21
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	dc 01       	movw	r26, r24
     940:	a2 9f       	mul	r26, r18
     942:	c0 01       	movw	r24, r0
     944:	a3 9f       	mul	r26, r19
     946:	90 0d       	add	r25, r0
     948:	b2 9f       	mul	r27, r18
     94a:	90 0d       	add	r25, r0
     94c:	11 24       	eor	r1, r1
     94e:	e8 0f       	add	r30, r24
     950:	f9 1f       	adc	r31, r25
     952:	43 a3       	std	Z+35, r20	; 0x23
     954:	54 a3       	std	Z+36, r21	; 0x24
     956:	65 a3       	std	Z+37, r22	; 0x25
     958:	76 a3       	std	Z+38, r23	; 0x26
}
     95a:	08 95       	ret

0000095c <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     95c:	e0 91 da 01 	lds	r30, 0x01DA
     960:	f0 91 db 01 	lds	r31, 0x01DB
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	25 e1       	ldi	r18, 0x15	; 21
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	ac 01       	movw	r20, r24
     96c:	42 9f       	mul	r20, r18
     96e:	c0 01       	movw	r24, r0
     970:	43 9f       	mul	r20, r19
     972:	90 0d       	add	r25, r0
     974:	52 9f       	mul	r21, r18
     976:	90 0d       	add	r25, r0
     978:	11 24       	eor	r1, r1
     97a:	e8 0f       	add	r30, r24
     97c:	f9 1f       	adc	r31, r25
     97e:	df 01       	movw	r26, r30
     980:	9b 96       	adiw	r26, 0x2b	; 43
     982:	63 a5       	ldd	r22, Z+43	; 0x2b
     984:	11 96       	adiw	r26, 0x01	; 1
     986:	7c 91       	ld	r23, X
     988:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     98a:	12 96       	adiw	r26, 0x02	; 2
     98c:	8c 91       	ld	r24, X
     98e:	12 97       	sbiw	r26, 0x02	; 2
     990:	13 96       	adiw	r26, 0x03	; 3
     992:	9c 91       	ld	r25, X
     994:	08 95       	ret

00000996 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     996:	e0 91 da 01 	lds	r30, 0x01DA
     99a:	f0 91 db 01 	lds	r31, 0x01DB
     99e:	28 2f       	mov	r18, r24
     9a0:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     9a2:	77 ff       	sbrs	r23, 7
     9a4:	11 c0       	rjmp	.+34     	; 0x9c8 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     9a6:	85 e1       	ldi	r24, 0x15	; 21
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	ac 01       	movw	r20, r24
     9ac:	24 9f       	mul	r18, r20
     9ae:	c0 01       	movw	r24, r0
     9b0:	25 9f       	mul	r18, r21
     9b2:	90 0d       	add	r25, r0
     9b4:	34 9f       	mul	r19, r20
     9b6:	90 0d       	add	r25, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	e8 0f       	add	r30, r24
     9bc:	f9 1f       	adc	r31, r25
     9be:	13 a6       	std	Z+43, r1	; 0x2b
     9c0:	14 a6       	std	Z+44, r1	; 0x2c
     9c2:	15 a6       	std	Z+45, r1	; 0x2d
     9c4:	16 a6       	std	Z+46, r1	; 0x2e
     9c6:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     9c8:	85 e1       	ldi	r24, 0x15	; 21
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	dc 01       	movw	r26, r24
     9ce:	2a 9f       	mul	r18, r26
     9d0:	c0 01       	movw	r24, r0
     9d2:	2b 9f       	mul	r18, r27
     9d4:	90 0d       	add	r25, r0
     9d6:	3a 9f       	mul	r19, r26
     9d8:	90 0d       	add	r25, r0
     9da:	11 24       	eor	r1, r1
     9dc:	e8 0f       	add	r30, r24
     9de:	f9 1f       	adc	r31, r25
     9e0:	43 a7       	std	Z+43, r20	; 0x2b
     9e2:	54 a7       	std	Z+44, r21	; 0x2c
     9e4:	65 a7       	std	Z+45, r22	; 0x2d
     9e6:	76 a7       	std	Z+46, r23	; 0x2e
     9e8:	08 95       	ret

000009ea <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     9ea:	e0 91 da 01 	lds	r30, 0x01DA
     9ee:	f0 91 db 01 	lds	r31, 0x01DB
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	25 e1       	ldi	r18, 0x15	; 21
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	ac 01       	movw	r20, r24
     9fa:	42 9f       	mul	r20, r18
     9fc:	c0 01       	movw	r24, r0
     9fe:	43 9f       	mul	r20, r19
     a00:	90 0d       	add	r25, r0
     a02:	52 9f       	mul	r21, r18
     a04:	90 0d       	add	r25, r0
     a06:	11 24       	eor	r1, r1
     a08:	e8 0f       	add	r30, r24
     a0a:	f9 1f       	adc	r31, r25
     a0c:	86 8d       	ldd	r24, Z+30	; 0x1e
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     a0e:	81 70       	andi	r24, 0x01	; 1
     a10:	08 95       	ret

00000a12 <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a12:	e0 91 da 01 	lds	r30, 0x01DA
     a16:	f0 91 db 01 	lds	r31, 0x01DB
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	25 e1       	ldi	r18, 0x15	; 21
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	ac 01       	movw	r20, r24
     a22:	42 9f       	mul	r20, r18
     a24:	c0 01       	movw	r24, r0
     a26:	43 9f       	mul	r20, r19
     a28:	90 0d       	add	r25, r0
     a2a:	52 9f       	mul	r21, r18
     a2c:	90 0d       	add	r25, r0
     a2e:	11 24       	eor	r1, r1
     a30:	e8 0f       	add	r30, r24
     a32:	f9 1f       	adc	r31, r25
     a34:	86 8d       	ldd	r24, Z+30	; 0x1e
     a36:	81 60       	ori	r24, 0x01	; 1
     a38:	86 8f       	std	Z+30, r24	; 0x1e
}
     a3a:	08 95       	ret

00000a3c <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a3c:	e0 91 da 01 	lds	r30, 0x01DA
     a40:	f0 91 db 01 	lds	r31, 0x01DB
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	25 e1       	ldi	r18, 0x15	; 21
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	ac 01       	movw	r20, r24
     a4c:	42 9f       	mul	r20, r18
     a4e:	c0 01       	movw	r24, r0
     a50:	43 9f       	mul	r20, r19
     a52:	90 0d       	add	r25, r0
     a54:	52 9f       	mul	r21, r18
     a56:	90 0d       	add	r25, r0
     a58:	11 24       	eor	r1, r1
     a5a:	e8 0f       	add	r30, r24
     a5c:	f9 1f       	adc	r31, r25
     a5e:	86 8d       	ldd	r24, Z+30	; 0x1e
     a60:	8e 7f       	andi	r24, 0xFE	; 254
     a62:	86 8f       	std	Z+30, r24	; 0x1e
}
     a64:	08 95       	ret

00000a66 <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     a66:	e0 91 da 01 	lds	r30, 0x01DA
     a6a:	f0 91 db 01 	lds	r31, 0x01DB
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	25 e1       	ldi	r18, 0x15	; 21
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	ac 01       	movw	r20, r24
     a76:	42 9f       	mul	r20, r18
     a78:	c0 01       	movw	r24, r0
     a7a:	43 9f       	mul	r20, r19
     a7c:	90 0d       	add	r25, r0
     a7e:	52 9f       	mul	r21, r18
     a80:	90 0d       	add	r25, r0
     a82:	11 24       	eor	r1, r1
     a84:	e8 0f       	add	r30, r24
     a86:	f9 1f       	adc	r31, r25
     a88:	df 01       	movw	r26, r30
     a8a:	9f 96       	adiw	r26, 0x2f	; 47
     a8c:	67 a5       	ldd	r22, Z+47	; 0x2f
     a8e:	11 96       	adiw	r26, 0x01	; 1
     a90:	7c 91       	ld	r23, X
     a92:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	8c 91       	ld	r24, X
     a98:	12 97       	sbiw	r26, 0x02	; 2
     a9a:	13 96       	adiw	r26, 0x03	; 3
     a9c:	9c 91       	ld	r25, X
     a9e:	08 95       	ret

00000aa0 <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     aa0:	e0 91 da 01 	lds	r30, 0x01DA
     aa4:	f0 91 db 01 	lds	r31, 0x01DB
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	25 e1       	ldi	r18, 0x15	; 21
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	dc 01       	movw	r26, r24
     ab0:	a2 9f       	mul	r26, r18
     ab2:	c0 01       	movw	r24, r0
     ab4:	a3 9f       	mul	r26, r19
     ab6:	90 0d       	add	r25, r0
     ab8:	b2 9f       	mul	r27, r18
     aba:	90 0d       	add	r25, r0
     abc:	11 24       	eor	r1, r1
     abe:	e8 0f       	add	r30, r24
     ac0:	f9 1f       	adc	r31, r25
     ac2:	47 a7       	std	Z+47, r20	; 0x2f
     ac4:	50 ab       	std	Z+48, r21	; 0x30
     ac6:	61 ab       	std	Z+49, r22	; 0x31
     ac8:	72 ab       	std	Z+50, r23	; 0x32
}
     aca:	08 95       	ret

00000acc <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     acc:	e0 91 da 01 	lds	r30, 0x01DA
     ad0:	f0 91 db 01 	lds	r31, 0x01DB
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	25 e1       	ldi	r18, 0x15	; 21
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	ac 01       	movw	r20, r24
     adc:	42 9f       	mul	r20, r18
     ade:	c0 01       	movw	r24, r0
     ae0:	43 9f       	mul	r20, r19
     ae2:	90 0d       	add	r25, r0
     ae4:	52 9f       	mul	r21, r18
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	e8 0f       	add	r30, r24
     aec:	f9 1f       	adc	r31, r25
     aee:	13 a2       	std	Z+35, r1	; 0x23
     af0:	14 a2       	std	Z+36, r1	; 0x24
     af2:	15 a2       	std	Z+37, r1	; 0x25
     af4:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     af6:	17 8e       	std	Z+31, r1	; 0x1f
     af8:	10 a2       	std	Z+32, r1	; 0x20
     afa:	11 a2       	std	Z+33, r1	; 0x21
     afc:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     afe:	17 a2       	std	Z+39, r1	; 0x27
     b00:	10 a6       	std	Z+40, r1	; 0x28
     b02:	11 a6       	std	Z+41, r1	; 0x29
     b04:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b06:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b08:	80 7e       	andi	r24, 0xE0	; 224
     b0a:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b0c:	17 a6       	std	Z+47, r1	; 0x2f
     b0e:	10 aa       	std	Z+48, r1	; 0x30
     b10:	11 aa       	std	Z+49, r1	; 0x31
     b12:	12 aa       	std	Z+50, r1	; 0x32
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     b14:	08 95       	ret

00000b16 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b16:	e0 91 da 01 	lds	r30, 0x01DA
     b1a:	f0 91 db 01 	lds	r31, 0x01DB
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	25 e1       	ldi	r18, 0x15	; 21
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	ac 01       	movw	r20, r24
     b26:	42 9f       	mul	r20, r18
     b28:	c0 01       	movw	r24, r0
     b2a:	43 9f       	mul	r20, r19
     b2c:	90 0d       	add	r25, r0
     b2e:	52 9f       	mul	r21, r18
     b30:	90 0d       	add	r25, r0
     b32:	11 24       	eor	r1, r1
     b34:	e8 0f       	add	r30, r24
     b36:	f9 1f       	adc	r31, r25
     b38:	13 a2       	std	Z+35, r1	; 0x23
     b3a:	14 a2       	std	Z+36, r1	; 0x24
     b3c:	15 a2       	std	Z+37, r1	; 0x25
     b3e:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b40:	17 8e       	std	Z+31, r1	; 0x1f
     b42:	10 a2       	std	Z+32, r1	; 0x20
     b44:	11 a2       	std	Z+33, r1	; 0x21
     b46:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b48:	17 a2       	std	Z+39, r1	; 0x27
     b4a:	10 a6       	std	Z+40, r1	; 0x28
     b4c:	11 a6       	std	Z+41, r1	; 0x29
     b4e:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b50:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b52:	80 7e       	andi	r24, 0xE0	; 224
     b54:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b56:	17 a6       	std	Z+47, r1	; 0x2f
     b58:	10 aa       	std	Z+48, r1	; 0x30
     b5a:	11 aa       	std	Z+49, r1	; 0x31
     b5c:	12 aa       	std	Z+50, r1	; 0x32
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     b5e:	08 95       	ret

00000b60 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     b60:	e0 91 da 01 	lds	r30, 0x01DA
     b64:	f0 91 db 01 	lds	r31, 0x01DB
     b68:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     b6a:	25 e1       	ldi	r18, 0x15	; 21
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	ac 01       	movw	r20, r24
     b70:	42 9f       	mul	r20, r18
     b72:	c0 01       	movw	r24, r0
     b74:	43 9f       	mul	r20, r19
     b76:	90 0d       	add	r25, r0
     b78:	52 9f       	mul	r21, r18
     b7a:	90 0d       	add	r25, r0
     b7c:	11 24       	eor	r1, r1
     b7e:	e8 0f       	add	r30, r24
     b80:	f9 1f       	adc	r31, r25
     b82:	96 8d       	ldd	r25, Z+30	; 0x1e
     b84:	89 2f       	mov	r24, r25
     b86:	86 95       	lsr	r24
     b88:	8f 70       	andi	r24, 0x0F	; 15
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	19 f0       	breq	.+6      	; 0xb94 <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b8e:	91 7e       	andi	r25, 0xE1	; 225
     b90:	92 60       	ori	r25, 0x02	; 2
     b92:	96 8f       	std	Z+30, r25	; 0x1e
     b94:	08 95       	ret

00000b96 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     b96:	e0 91 da 01 	lds	r30, 0x01DA
     b9a:	f0 91 db 01 	lds	r31, 0x01DB
     b9e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     ba0:	25 e1       	ldi	r18, 0x15	; 21
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	ac 01       	movw	r20, r24
     ba6:	42 9f       	mul	r20, r18
     ba8:	c0 01       	movw	r24, r0
     baa:	43 9f       	mul	r20, r19
     bac:	90 0d       	add	r25, r0
     bae:	52 9f       	mul	r21, r18
     bb0:	90 0d       	add	r25, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	e8 0f       	add	r30, r24
     bb6:	f9 1f       	adc	r31, r25
     bb8:	96 8d       	ldd	r25, Z+30	; 0x1e
     bba:	89 2f       	mov	r24, r25
     bbc:	86 95       	lsr	r24
     bbe:	8f 70       	andi	r24, 0x0F	; 15
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	19 f0       	breq	.+6      	; 0xbca <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bc4:	91 7e       	andi	r25, 0xE1	; 225
     bc6:	94 60       	ori	r25, 0x04	; 4
     bc8:	96 8f       	std	Z+30, r25	; 0x1e
     bca:	08 95       	ret

00000bcc <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     bcc:	2f 92       	push	r2
     bce:	3f 92       	push	r3
     bd0:	4f 92       	push	r4
     bd2:	5f 92       	push	r5
     bd4:	6f 92       	push	r6
     bd6:	7f 92       	push	r7
     bd8:	8f 92       	push	r8
     bda:	9f 92       	push	r9
     bdc:	af 92       	push	r10
     bde:	bf 92       	push	r11
     be0:	cf 92       	push	r12
     be2:	df 92       	push	r13
     be4:	ef 92       	push	r14
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	df 93       	push	r29
     bee:	cf 93       	push	r28
     bf0:	cd b7       	in	r28, 0x3d	; 61
     bf2:	de b7       	in	r29, 0x3e	; 62
     bf4:	28 97       	sbiw	r28, 0x08	; 8
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	de bf       	out	0x3e, r29	; 62
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	cd bf       	out	0x3d, r28	; 61
     c00:	1a 01       	movw	r2, r20
     c02:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c04:	20 91 da 01 	lds	r18, 0x01DA
     c08:	30 91 db 01 	lds	r19, 0x01DB
     c0c:	38 87       	std	Y+8, r19	; 0x08
     c0e:	2f 83       	std	Y+7, r18	; 0x07
     c10:	a8 2f       	mov	r26, r24
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ba 83       	std	Y+2, r27	; 0x02
     c16:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     c18:	85 e1       	ldi	r24, 0x15	; 21
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a8 9f       	mul	r26, r24
     c1e:	f0 01       	movw	r30, r0
     c20:	a9 9f       	mul	r26, r25
     c22:	f0 0d       	add	r31, r0
     c24:	b8 9f       	mul	r27, r24
     c26:	f0 0d       	add	r31, r0
     c28:	11 24       	eor	r1, r1
     c2a:	e2 0f       	add	r30, r18
     c2c:	f3 1f       	adc	r31, r19
     c2e:	86 8d       	ldd	r24, Z+30	; 0x1e
     c30:	86 95       	lsr	r24
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	09 f0       	breq	.+2      	; 0xc38 <Timebase_DownCounter_SS_Set_Securely+0x6c>
     c36:	80 c0       	rjmp	.+256    	; 0xd38 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     c38:	47 a3       	std	Z+39, r20	; 0x27
     c3a:	50 a7       	std	Z+40, r21	; 0x28
     c3c:	61 a7       	std	Z+41, r22	; 0x29
     c3e:	72 a7       	std	Z+42, r23	; 0x2a
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c40:	f9 01       	movw	r30, r18
     c42:	c2 84       	ldd	r12, Z+10	; 0x0a
     c44:	d3 84       	ldd	r13, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c46:	d9 01       	movw	r26, r18
     c48:	1c 96       	adiw	r26, 0x0c	; 12
     c4a:	8d 91       	ld	r24, X+
     c4c:	9d 91       	ld	r25, X+
     c4e:	0d 90       	ld	r0, X+
     c50:	bc 91       	ld	r27, X
     c52:	a0 2d       	mov	r26, r0
     c54:	8b 83       	std	Y+3, r24	; 0x03
     c56:	9c 83       	std	Y+4, r25	; 0x04
     c58:	ad 83       	std	Y+5, r26	; 0x05
     c5a:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     c5c:	20 81       	ld	r18, Z
     c5e:	31 81       	ldd	r19, Z+1	; 0x01
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	c2 01       	movw	r24, r4
     c66:	b1 01       	movw	r22, r2
     c68:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     c6c:	7b 01       	movw	r14, r22
     c6e:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     c70:	ef 81       	ldd	r30, Y+7	; 0x07
     c72:	f8 85       	ldd	r31, Y+8	; 0x08
     c74:	20 81       	ld	r18, Z
     c76:	31 81       	ldd	r19, Z+1	; 0x01
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	c2 01       	movw	r24, r4
     c7e:	b1 01       	movw	r22, r2
     c80:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     c84:	c9 01       	movw	r24, r18
     c86:	da 01       	movw	r26, r20
     c88:	3c 01       	movw	r6, r24
     c8a:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     c8c:	56 01       	movw	r10, r12
     c8e:	cc 24       	eor	r12, r12
     c90:	dd 24       	eor	r13, r13
     c92:	ae 0c       	add	r10, r14
     c94:	bf 1c       	adc	r11, r15
     c96:	c0 1e       	adc	r12, r16
     c98:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     c9a:	af 81       	ldd	r26, Y+7	; 0x07
     c9c:	b8 85       	ldd	r27, Y+8	; 0x08
     c9e:	8d 91       	ld	r24, X+
     ca0:	9c 91       	ld	r25, X
     ca2:	a0 e0       	ldi	r26, 0x00	; 0
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	a8 16       	cp	r10, r24
     ca8:	b9 06       	cpc	r11, r25
     caa:	ca 06       	cpc	r12, r26
     cac:	db 06       	cpc	r13, r27
     cae:	a4 f0       	brlt	.+40     	; 0xcd8 <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     cb0:	08 94       	sec
     cb2:	61 1c       	adc	r6, r1
     cb4:	71 1c       	adc	r7, r1
     cb6:	81 1c       	adc	r8, r1
     cb8:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     cba:	ef 81       	ldd	r30, Y+7	; 0x07
     cbc:	f8 85       	ldd	r31, Y+8	; 0x08
     cbe:	20 81       	ld	r18, Z
     cc0:	31 81       	ldd	r19, Z+1	; 0x01
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	c6 01       	movw	r24, r12
     cc8:	b5 01       	movw	r22, r10
     cca:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     cce:	ac 01       	movw	r20, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	da 01       	movw	r26, r20
     cd4:	5c 01       	movw	r10, r24
     cd6:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     cd8:	85 e1       	ldi	r24, 0x15	; 21
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	29 81       	ldd	r18, Y+1	; 0x01
     cde:	3a 81       	ldd	r19, Y+2	; 0x02
     ce0:	28 9f       	mul	r18, r24
     ce2:	a0 01       	movw	r20, r0
     ce4:	29 9f       	mul	r18, r25
     ce6:	50 0d       	add	r21, r0
     ce8:	38 9f       	mul	r19, r24
     cea:	50 0d       	add	r21, r0
     cec:	11 24       	eor	r1, r1
     cee:	8f 81       	ldd	r24, Y+7	; 0x07
     cf0:	98 85       	ldd	r25, Y+8	; 0x08
     cf2:	48 0f       	add	r20, r24
     cf4:	59 1f       	adc	r21, r25
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	9c 81       	ldd	r25, Y+4	; 0x04
     cfa:	ad 81       	ldd	r26, Y+5	; 0x05
     cfc:	be 81       	ldd	r27, Y+6	; 0x06
     cfe:	86 0d       	add	r24, r6
     d00:	97 1d       	adc	r25, r7
     d02:	a8 1d       	adc	r26, r8
     d04:	b9 1d       	adc	r27, r9
     d06:	fa 01       	movw	r30, r20
     d08:	87 8f       	std	Z+31, r24	; 0x1f
     d0a:	90 a3       	std	Z+32, r25	; 0x20
     d0c:	a1 a3       	std	Z+33, r26	; 0x21
     d0e:	b2 a3       	std	Z+34, r27	; 0x22
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d10:	da 01       	movw	r26, r20
     d12:	93 96       	adiw	r26, 0x23	; 35
     d14:	ad 92       	st	X+, r10
     d16:	bd 92       	st	X+, r11
     d18:	cd 92       	st	X+, r12
     d1a:	dc 92       	st	X, r13
     d1c:	96 97       	sbiw	r26, 0x26	; 38
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d1e:	27 a6       	std	Z+47, r2	; 0x2f
     d20:	30 aa       	std	Z+48, r3	; 0x30
     d22:	41 aa       	std	Z+49, r4	; 0x31
     d24:	52 aa       	std	Z+50, r5	; 0x32
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     d26:	96 8d       	ldd	r25, Z+30	; 0x1e
     d28:	89 2f       	mov	r24, r25
     d2a:	86 95       	lsr	r24
     d2c:	8f 70       	andi	r24, 0x0F	; 15
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	19 f0       	breq	.+6      	; 0xd38 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d32:	91 7e       	andi	r25, 0xE1	; 225
     d34:	92 60       	ori	r25, 0x02	; 2
     d36:	96 8f       	std	Z+30, r25	; 0x1e
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     d38:	28 96       	adiw	r28, 0x08	; 8
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	9f 90       	pop	r9
     d5a:	8f 90       	pop	r8
     d5c:	7f 90       	pop	r7
     d5e:	6f 90       	pop	r6
     d60:	5f 90       	pop	r5
     d62:	4f 90       	pop	r4
     d64:	3f 90       	pop	r3
     d66:	2f 90       	pop	r2
     d68:	08 95       	ret

00000d6a <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	7a 01       	movw	r14, r20
     d78:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d7a:	e0 91 da 01 	lds	r30, 0x01DA
     d7e:	f0 91 db 01 	lds	r31, 0x01DB
     d82:	48 2f       	mov	r20, r24
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	25 e1       	ldi	r18, 0x15	; 21
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	42 9f       	mul	r20, r18
     d8c:	60 01       	movw	r12, r0
     d8e:	43 9f       	mul	r20, r19
     d90:	d0 0c       	add	r13, r0
     d92:	52 9f       	mul	r21, r18
     d94:	d0 0c       	add	r13, r0
     d96:	11 24       	eor	r1, r1
     d98:	ec 0d       	add	r30, r12
     d9a:	fd 1d       	adc	r31, r13
     d9c:	13 a2       	std	Z+35, r1	; 0x23
     d9e:	14 a2       	std	Z+36, r1	; 0x24
     da0:	15 a2       	std	Z+37, r1	; 0x25
     da2:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     da4:	17 8e       	std	Z+31, r1	; 0x1f
     da6:	10 a2       	std	Z+32, r1	; 0x20
     da8:	11 a2       	std	Z+33, r1	; 0x21
     daa:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     dac:	17 a2       	std	Z+39, r1	; 0x27
     dae:	10 a6       	std	Z+40, r1	; 0x28
     db0:	11 a6       	std	Z+41, r1	; 0x29
     db2:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     db4:	96 8d       	ldd	r25, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     db6:	90 7e       	andi	r25, 0xE0	; 224
     db8:	96 8f       	std	Z+30, r25	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dba:	17 a6       	std	Z+47, r1	; 0x2f
     dbc:	10 aa       	std	Z+48, r1	; 0x30
     dbe:	11 aa       	std	Z+49, r1	; 0x31
     dc0:	12 aa       	std	Z+50, r1	; 0x32
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     dc2:	b8 01       	movw	r22, r16
     dc4:	a7 01       	movw	r20, r14
     dc6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dca:	e0 91 da 01 	lds	r30, 0x01DA
     dce:	f0 91 db 01 	lds	r31, 0x01DB
     dd2:	ec 0d       	add	r30, r12
     dd4:	fd 1d       	adc	r31, r13
     dd6:	e7 a6       	std	Z+47, r14	; 0x2f
     dd8:	f0 aa       	std	Z+48, r15	; 0x30
     dda:	01 ab       	std	Z+49, r16	; 0x31
     ddc:	12 ab       	std	Z+50, r17	; 0x32

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     dde:	1f 91       	pop	r17
     de0:	0f 91       	pop	r16
     de2:	ff 90       	pop	r15
     de4:	ef 90       	pop	r14
     de6:	df 90       	pop	r13
     de8:	cf 90       	pop	r12
     dea:	08 95       	ret

00000dec <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     dec:	2f 92       	push	r2
     dee:	3f 92       	push	r3
     df0:	4f 92       	push	r4
     df2:	5f 92       	push	r5
     df4:	6f 92       	push	r6
     df6:	7f 92       	push	r7
     df8:	8f 92       	push	r8
     dfa:	9f 92       	push	r9
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e10:	e0 91 da 01 	lds	r30, 0x01DA
     e14:	f0 91 db 01 	lds	r31, 0x01DB
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	25 e1       	ldi	r18, 0x15	; 21
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	82 9f       	mul	r24, r18
     e20:	e0 01       	movw	r28, r0
     e22:	83 9f       	mul	r24, r19
     e24:	d0 0d       	add	r29, r0
     e26:	92 9f       	mul	r25, r18
     e28:	d0 0d       	add	r29, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	ce 0f       	add	r28, r30
     e2e:	df 1f       	adc	r29, r31
     e30:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e32:	86 95       	lsr	r24
     e34:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	09 f0       	breq	.+2      	; 0xe3c <Timebase_DownCounter_SS_Update+0x50>
     e3a:	48 c0       	rjmp	.+144    	; 0xecc <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e3c:	e2 84       	ldd	r14, Z+10	; 0x0a
     e3e:	f3 84       	ldd	r15, Z+11	; 0x0b

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     e40:	00 e0       	ldi	r16, 0x00	; 0
     e42:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e44:	84 85       	ldd	r24, Z+12	; 0x0c
     e46:	95 85       	ldd	r25, Z+13	; 0x0d
     e48:	a6 85       	ldd	r26, Z+14	; 0x0e
     e4a:	b7 85       	ldd	r27, Z+15	; 0x0f
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     e4c:	2f 8d       	ldd	r18, Y+31	; 0x1f
     e4e:	38 a1       	ldd	r19, Y+32	; 0x20
     e50:	49 a1       	ldd	r20, Y+33	; 0x21
     e52:	5a a1       	ldd	r21, Y+34	; 0x22
     e54:	28 1b       	sub	r18, r24
     e56:	39 0b       	sbc	r19, r25
     e58:	4a 0b       	sbc	r20, r26
     e5a:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsi3>
     e68:	6e 19       	sub	r22, r14
     e6a:	7f 09       	sbc	r23, r15
     e6c:	80 0b       	sbc	r24, r16
     e6e:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     e70:	2b a1       	ldd	r18, Y+35	; 0x23
     e72:	3c a1       	ldd	r19, Y+36	; 0x24
     e74:	4d a1       	ldd	r20, Y+37	; 0x25
     e76:	5e a1       	ldd	r21, Y+38	; 0x26
     e78:	62 0f       	add	r22, r18
     e7a:	73 1f       	adc	r23, r19
     e7c:	84 1f       	adc	r24, r20
     e7e:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e80:	6f a3       	std	Y+39, r22	; 0x27
     e82:	78 a7       	std	Y+40, r23	; 0x28
     e84:	89 a7       	std	Y+41, r24	; 0x29
     e86:	9a a7       	std	Y+42, r25	; 0x2a
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     e88:	16 16       	cp	r1, r22
     e8a:	17 06       	cpc	r1, r23
     e8c:	18 06       	cpc	r1, r24
     e8e:	19 06       	cpc	r1, r25
     e90:	0c f4       	brge	.+2      	; 0xe94 <Timebase_DownCounter_SS_Update+0xa8>
     e92:	4c c0       	rjmp	.+152    	; 0xf2c <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     e94:	8f a5       	ldd	r24, Y+47	; 0x2f
     e96:	98 a9       	ldd	r25, Y+48	; 0x30
     e98:	a9 a9       	ldd	r26, Y+49	; 0x31
     e9a:	ba a9       	ldd	r27, Y+50	; 0x32
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e9c:	1b a2       	std	Y+35, r1	; 0x23
     e9e:	1c a2       	std	Y+36, r1	; 0x24
     ea0:	1d a2       	std	Y+37, r1	; 0x25
     ea2:	1e a2       	std	Y+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     ea4:	1f 8e       	std	Y+31, r1	; 0x1f
     ea6:	18 a2       	std	Y+32, r1	; 0x20
     ea8:	19 a2       	std	Y+33, r1	; 0x21
     eaa:	1a a2       	std	Y+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     eac:	1f a2       	std	Y+39, r1	; 0x27
     eae:	18 a6       	std	Y+40, r1	; 0x28
     eb0:	19 a6       	std	Y+41, r1	; 0x29
     eb2:	1a a6       	std	Y+42, r1	; 0x2a
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     eb4:	2e 8d       	ldd	r18, Y+30	; 0x1e
     eb6:	2e 7f       	andi	r18, 0xFE	; 254
     eb8:	2e 8f       	std	Y+30, r18	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     eba:	8f a7       	std	Y+47, r24	; 0x2f
     ebc:	98 ab       	std	Y+48, r25	; 0x30
     ebe:	a9 ab       	std	Y+49, r26	; 0x31
     ec0:	ba ab       	std	Y+50, r27	; 0x32
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ec2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ec4:	81 7e       	andi	r24, 0xE1	; 225
     ec6:	88 60       	ori	r24, 0x08	; 8
     ec8:	8e 8f       	std	Y+30, r24	; 0x1e
     eca:	30 c0       	rjmp	.+96     	; 0xf2c <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     ecc:	82 30       	cpi	r24, 0x02	; 2
     ece:	71 f5       	brne	.+92     	; 0xf2c <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ed0:	62 84       	ldd	r6, Z+10	; 0x0a
     ed2:	73 84       	ldd	r7, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ed4:	e4 84       	ldd	r14, Z+12	; 0x0c
     ed6:	f5 84       	ldd	r15, Z+13	; 0x0d
     ed8:	06 85       	ldd	r16, Z+14	; 0x0e
     eda:	17 85       	ldd	r17, Z+15	; 0x0f
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     edc:	2f a0       	ldd	r2, Y+39	; 0x27
     ede:	38 a4       	ldd	r3, Y+40	; 0x28
     ee0:	49 a4       	ldd	r4, Y+41	; 0x29
     ee2:	5a a4       	ldd	r5, Y+42	; 0x2a
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     ee4:	20 81       	ld	r18, Z
     ee6:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     ee8:	a0 80       	ld	r10, Z
     eea:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	50 e0       	ldi	r21, 0x00	; 0
     ef0:	c2 01       	movw	r24, r4
     ef2:	b1 01       	movw	r22, r2
     ef4:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     ef8:	e2 0e       	add	r14, r18
     efa:	f3 1e       	adc	r15, r19
     efc:	04 1f       	adc	r16, r20
     efe:	15 1f       	adc	r17, r21
     f00:	ef 8e       	std	Y+31, r14	; 0x1f
     f02:	f8 a2       	std	Y+32, r15	; 0x20
     f04:	09 a3       	std	Y+33, r16	; 0x21
     f06:	1a a3       	std	Y+34, r17	; 0x22
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     f08:	cc 24       	eor	r12, r12
     f0a:	dd 24       	eor	r13, r13
     f0c:	c2 01       	movw	r24, r4
     f0e:	b1 01       	movw	r22, r2
     f10:	a6 01       	movw	r20, r12
     f12:	95 01       	movw	r18, r10
     f14:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
     f18:	88 24       	eor	r8, r8
     f1a:	99 24       	eor	r9, r9
     f1c:	66 0e       	add	r6, r22
     f1e:	77 1e       	adc	r7, r23
     f20:	88 1e       	adc	r8, r24
     f22:	99 1e       	adc	r9, r25
     f24:	6b a2       	std	Y+35, r6	; 0x23
     f26:	7c a2       	std	Y+36, r7	; 0x24
     f28:	8d a2       	std	Y+37, r8	; 0x25
     f2a:	9e a2       	std	Y+38, r9	; 0x26
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret

00000f52 <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	e0 91 da 01 	lds	r30, 0x01DA
     f58:	f0 91 db 01 	lds	r31, 0x01DB
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	25 e1       	ldi	r18, 0x15	; 21
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	bc 01       	movw	r22, r24
     f64:	62 9f       	mul	r22, r18
     f66:	c0 01       	movw	r24, r0
     f68:	63 9f       	mul	r22, r19
     f6a:	90 0d       	add	r25, r0
     f6c:	72 9f       	mul	r23, r18
     f6e:	90 0d       	add	r25, r0
     f70:	11 24       	eor	r1, r1
     f72:	e8 0f       	add	r30, r24
     f74:	f9 1f       	adc	r31, r25
     f76:	86 8d       	ldd	r24, Z+30	; 0x1e
     f78:	86 95       	lsr	r24
     f7a:	8f 70       	andi	r24, 0x0F	; 15
     f7c:	84 30       	cpi	r24, 0x04	; 4
     f7e:	09 f4       	brne	.+2      	; 0xf82 <Timebase_DownCounter_SS_Expired+0x30>
     f80:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     f82:	84 2f       	mov	r24, r20
     f84:	08 95       	ret

00000f86 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     f86:	e0 91 da 01 	lds	r30, 0x01DA
     f8a:	f0 91 db 01 	lds	r31, 0x01DB
     f8e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     f90:	25 e1       	ldi	r18, 0x15	; 21
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	ac 01       	movw	r20, r24
     f96:	42 9f       	mul	r20, r18
     f98:	c0 01       	movw	r24, r0
     f9a:	43 9f       	mul	r20, r19
     f9c:	90 0d       	add	r25, r0
     f9e:	52 9f       	mul	r21, r18
     fa0:	90 0d       	add	r25, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	e8 0f       	add	r30, r24
     fa6:	f9 1f       	adc	r31, r25
     fa8:	86 8d       	ldd	r24, Z+30	; 0x1e
     faa:	86 95       	lsr	r24
     fac:	8f 70       	andi	r24, 0x0F	; 15
     fae:	84 30       	cpi	r24, 0x04	; 4
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <Timebase_DownCounter_SS_Expired_Event+0x30>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     fb6:	13 a2       	std	Z+35, r1	; 0x23
     fb8:	14 a2       	std	Z+36, r1	; 0x24
     fba:	15 a2       	std	Z+37, r1	; 0x25
     fbc:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     fbe:	17 8e       	std	Z+31, r1	; 0x1f
     fc0:	10 a2       	std	Z+32, r1	; 0x20
     fc2:	11 a2       	std	Z+33, r1	; 0x21
     fc4:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     fc6:	17 a2       	std	Z+39, r1	; 0x27
     fc8:	10 a6       	std	Z+40, r1	; 0x28
     fca:	11 a6       	std	Z+41, r1	; 0x29
     fcc:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     fce:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     fd0:	80 7e       	andi	r24, 0xE0	; 224
     fd2:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     fd4:	17 a6       	std	Z+47, r1	; 0x2f
     fd6:	10 aa       	std	Z+48, r1	; 0x30
     fd8:	11 aa       	std	Z+49, r1	; 0x31
     fda:	12 aa       	std	Z+50, r1	; 0x32
     fdc:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fde:	08 95       	ret

00000fe0 <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
     fe0:	0e 94 c3 07 	call	0xf86	; 0xf86 <Timebase_DownCounter_SS_Expired_Event>
}
     fe4:	08 95       	ret

00000fe6 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
     fe6:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     fe8:	e0 91 da 01 	lds	r30, 0x01DA
     fec:	f0 91 db 01 	lds	r31, 0x01DB
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     ff4:	85 e1       	ldi	r24, 0x15	; 21
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	ac 01       	movw	r20, r24
     ffa:	24 9f       	mul	r18, r20
     ffc:	c0 01       	movw	r24, r0
     ffe:	25 9f       	mul	r18, r21
    1000:	90 0d       	add	r25, r0
    1002:	34 9f       	mul	r19, r20
    1004:	90 0d       	add	r25, r0
    1006:	11 24       	eor	r1, r1
    1008:	e8 0f       	add	r30, r24
    100a:	f9 1f       	adc	r31, r25
    100c:	86 8d       	ldd	r24, Z+30	; 0x1e
    100e:	86 95       	lsr	r24
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	11 f0       	breq	.+4      	; 0x101a <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    101a:	47 a5       	ldd	r20, Z+47	; 0x2f
    101c:	50 a9       	ldd	r21, Z+48	; 0x30
    101e:	61 a9       	ldd	r22, Z+49	; 0x31
    1020:	72 a9       	ldd	r23, Z+50	; 0x32
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1022:	13 a2       	std	Z+35, r1	; 0x23
    1024:	14 a2       	std	Z+36, r1	; 0x24
    1026:	15 a2       	std	Z+37, r1	; 0x25
    1028:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    102a:	17 8e       	std	Z+31, r1	; 0x1f
    102c:	10 a2       	std	Z+32, r1	; 0x20
    102e:	11 a2       	std	Z+33, r1	; 0x21
    1030:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1032:	17 a2       	std	Z+39, r1	; 0x27
    1034:	10 a6       	std	Z+40, r1	; 0x28
    1036:	11 a6       	std	Z+41, r1	; 0x29
    1038:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    103a:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    103c:	80 7e       	andi	r24, 0xE0	; 224
    103e:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1040:	17 a6       	std	Z+47, r1	; 0x2f
    1042:	10 aa       	std	Z+48, r1	; 0x30
    1044:	11 aa       	std	Z+49, r1	; 0x31
    1046:	12 aa       	std	Z+50, r1	; 0x32

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    1048:	8a 2f       	mov	r24, r26
    104a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <Timebase_DownCounter_SS_Set_Securely>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1050:	08 95       	ret

00001052 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1056:	c0 91 da 01 	lds	r28, 0x01DA
    105a:	d0 91 db 01 	lds	r29, 0x01DB
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1062:	85 e1       	ldi	r24, 0x15	; 21
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	28 9f       	mul	r18, r24
    1068:	f0 01       	movw	r30, r0
    106a:	29 9f       	mul	r18, r25
    106c:	f0 0d       	add	r31, r0
    106e:	38 9f       	mul	r19, r24
    1070:	f0 0d       	add	r31, r0
    1072:	11 24       	eor	r1, r1
    1074:	ec 0f       	add	r30, r28
    1076:	fd 1f       	adc	r31, r29
    1078:	86 8d       	ldd	r24, Z+30	; 0x1e
    107a:	80 fd       	sbrc	r24, 0
    107c:	21 c0       	rjmp	.+66     	; 0x10c0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    107e:	87 a1       	ldd	r24, Z+39	; 0x27
    1080:	90 a5       	ldd	r25, Z+40	; 0x28
    1082:	a1 a5       	ldd	r26, Z+41	; 0x29
    1084:	b2 a5       	ldd	r27, Z+42	; 0x2a
    1086:	84 1b       	sub	r24, r20
    1088:	95 0b       	sbc	r25, r21
    108a:	a6 0b       	sbc	r26, r22
    108c:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    108e:	b7 ff       	sbrs	r27, 7
    1090:	05 c0       	rjmp	.+10     	; 0x109c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1092:	13 a6       	std	Z+43, r1	; 0x2b
    1094:	14 a6       	std	Z+44, r1	; 0x2c
    1096:	15 a6       	std	Z+45, r1	; 0x2d
    1098:	16 a6       	std	Z+46, r1	; 0x2e
    109a:	04 c0       	rjmp	.+8      	; 0x10a4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    109c:	83 a7       	std	Z+43, r24	; 0x2b
    109e:	94 a7       	std	Z+44, r25	; 0x2c
    10a0:	a5 a7       	std	Z+45, r26	; 0x2d
    10a2:	b6 a7       	std	Z+46, r27	; 0x2e
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    10a4:	85 e1       	ldi	r24, 0x15	; 21
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	28 9f       	mul	r18, r24
    10aa:	f0 01       	movw	r30, r0
    10ac:	29 9f       	mul	r18, r25
    10ae:	f0 0d       	add	r31, r0
    10b0:	38 9f       	mul	r19, r24
    10b2:	f0 0d       	add	r31, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	ec 0f       	add	r30, r28
    10b8:	fd 1f       	adc	r31, r29
    10ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    10bc:	81 60       	ori	r24, 0x01	; 1
    10be:	86 8f       	std	Z+30, r24	; 0x1e
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    10c6:	e0 91 da 01 	lds	r30, 0x01DA
    10ca:	f0 91 db 01 	lds	r31, 0x01DB
    10ce:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    10d0:	25 e1       	ldi	r18, 0x15	; 21
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	ac 01       	movw	r20, r24
    10d6:	42 9f       	mul	r20, r18
    10d8:	c0 01       	movw	r24, r0
    10da:	43 9f       	mul	r20, r19
    10dc:	90 0d       	add	r25, r0
    10de:	52 9f       	mul	r21, r18
    10e0:	90 0d       	add	r25, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	e8 0f       	add	r30, r24
    10e6:	f9 1f       	adc	r31, r25
    10e8:	27 a1       	ldd	r18, Z+39	; 0x27
    10ea:	30 a5       	ldd	r19, Z+40	; 0x28
    10ec:	41 a5       	ldd	r20, Z+41	; 0x29
    10ee:	52 a5       	ldd	r21, Z+42	; 0x2a
    10f0:	83 a5       	ldd	r24, Z+43	; 0x2b
    10f2:	94 a5       	ldd	r25, Z+44	; 0x2c
    10f4:	a5 a5       	ldd	r26, Z+45	; 0x2d
    10f6:	b6 a5       	ldd	r27, Z+46	; 0x2e
    10f8:	28 1b       	sub	r18, r24
    10fa:	39 0b       	sbc	r19, r25
    10fc:	4a 0b       	sbc	r20, r26
    10fe:	5b 0b       	sbc	r21, r27
    1100:	57 ff       	sbrs	r21, 7
    1102:	04 c0       	rjmp	.+8      	; 0x110c <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    110c:	b9 01       	movw	r22, r18
    110e:	ca 01       	movw	r24, r20
    1110:	08 95       	ret

00001112 <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1116:	c0 91 da 01 	lds	r28, 0x01DA
    111a:	d0 91 db 01 	lds	r29, 0x01DB
    111e:	68 2f       	mov	r22, r24
    1120:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1122:	85 e1       	ldi	r24, 0x15	; 21
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	68 9f       	mul	r22, r24
    1128:	f0 01       	movw	r30, r0
    112a:	69 9f       	mul	r22, r25
    112c:	f0 0d       	add	r31, r0
    112e:	78 9f       	mul	r23, r24
    1130:	f0 0d       	add	r31, r0
    1132:	11 24       	eor	r1, r1
    1134:	ec 0f       	add	r30, r28
    1136:	fd 1f       	adc	r31, r29
    1138:	27 a1       	ldd	r18, Z+39	; 0x27
    113a:	30 a5       	ldd	r19, Z+40	; 0x28
    113c:	41 a5       	ldd	r20, Z+41	; 0x29
    113e:	52 a5       	ldd	r21, Z+42	; 0x2a
    1140:	83 a5       	ldd	r24, Z+43	; 0x2b
    1142:	94 a5       	ldd	r25, Z+44	; 0x2c
    1144:	a5 a5       	ldd	r26, Z+45	; 0x2d
    1146:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1148:	28 1b       	sub	r18, r24
    114a:	39 0b       	sbc	r19, r25
    114c:	4a 0b       	sbc	r20, r26
    114e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1150:	57 fd       	sbrc	r21, 7
    1152:	07 c0       	rjmp	.+14     	; 0x1162 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1154:	21 15       	cp	r18, r1
    1156:	31 05       	cpc	r19, r1
    1158:	41 05       	cpc	r20, r1
    115a:	51 05       	cpc	r21, r1
    115c:	11 f0       	breq	.+4      	; 0x1162 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	12 c0       	rjmp	.+36     	; 0x1186 <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	85 e1       	ldi	r24, 0x15	; 21
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	ac 01       	movw	r20, r24
    116a:	64 9f       	mul	r22, r20
    116c:	c0 01       	movw	r24, r0
    116e:	65 9f       	mul	r22, r21
    1170:	90 0d       	add	r25, r0
    1172:	74 9f       	mul	r23, r20
    1174:	90 0d       	add	r25, r0
    1176:	11 24       	eor	r1, r1
    1178:	c8 0f       	add	r28, r24
    117a:	d9 1f       	adc	r29, r25
    117c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    117e:	80 ff       	sbrs	r24, 0
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1186:	82 2f       	mov	r24, r18
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    118e:	1f 93       	push	r17
    1190:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1192:	0e 94 89 08 	call	0x1112	; 0x1112 <Timebase_DownCounter_SS_Period_Value_Expired>
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	11 f0       	breq	.+4      	; 0x119e <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	16 c0       	rjmp	.+44     	; 0x11ca <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    119e:	e0 91 da 01 	lds	r30, 0x01DA
    11a2:	f0 91 db 01 	lds	r31, 0x01DB
    11a6:	21 2f       	mov	r18, r17
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	85 e1       	ldi	r24, 0x15	; 21
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	ac 01       	movw	r20, r24
    11b0:	24 9f       	mul	r18, r20
    11b2:	c0 01       	movw	r24, r0
    11b4:	25 9f       	mul	r18, r21
    11b6:	90 0d       	add	r25, r0
    11b8:	34 9f       	mul	r19, r20
    11ba:	90 0d       	add	r25, r0
    11bc:	11 24       	eor	r1, r1
    11be:	e8 0f       	add	r30, r24
    11c0:	f9 1f       	adc	r31, r25
    11c2:	86 8d       	ldd	r24, Z+30	; 0x1e
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	86 8f       	std	Z+30, r24	; 0x1e
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11ca:	1f 91       	pop	r17
    11cc:	08 95       	ret

000011ce <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 f6 06 	call	0xdec	; 0xdec <Timebase_DownCounter_SS_Update>
  }
}
    11d4:	08 95       	ret

000011d6 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    11d6:	e0 91 da 01 	lds	r30, 0x01DA
    11da:	f0 91 db 01 	lds	r31, 0x01DB
    11de:	13 a2       	std	Z+35, r1	; 0x23
    11e0:	14 a2       	std	Z+36, r1	; 0x24
    11e2:	15 a2       	std	Z+37, r1	; 0x25
    11e4:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    11e6:	17 8e       	std	Z+31, r1	; 0x1f
    11e8:	10 a2       	std	Z+32, r1	; 0x20
    11ea:	11 a2       	std	Z+33, r1	; 0x21
    11ec:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    11ee:	17 a2       	std	Z+39, r1	; 0x27
    11f0:	10 a6       	std	Z+40, r1	; 0x28
    11f2:	11 a6       	std	Z+41, r1	; 0x29
    11f4:	12 a6       	std	Z+42, r1	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    11f6:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    11f8:	80 7e       	andi	r24, 0xE0	; 224
    11fa:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    11fc:	17 a6       	std	Z+47, r1	; 0x2f
    11fe:	10 aa       	std	Z+48, r1	; 0x30
    1200:	11 aa       	std	Z+49, r1	; 0x31
    1202:	12 aa       	std	Z+50, r1	; 0x32

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1204:	08 95       	ret

00001206 <Timebase_LPDownCounter_Get_Status>:


/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
    1206:	e0 91 da 01 	lds	r30, 0x01DA
    120a:	f0 91 db 01 	lds	r31, 0x01DB
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	9c 01       	movw	r18, r24
    1212:	44 e0       	ldi	r20, 0x04	; 4
    1214:	22 0f       	add	r18, r18
    1216:	33 1f       	adc	r19, r19
    1218:	4a 95       	dec	r20
    121a:	e1 f7       	brne	.-8      	; 0x1214 <Timebase_LPDownCounter_Get_Status+0xe>
    121c:	28 0f       	add	r18, r24
    121e:	39 1f       	adc	r19, r25
    1220:	e2 0f       	add	r30, r18
    1222:	f3 1f       	adc	r31, r19
    1224:	83 a9       	ldd	r24, Z+51	; 0x33
    1226:	86 95       	lsr	r24
  return Timebase->LPDownCounter[window].Status.Value;
}
    1228:	8f 70       	andi	r24, 0x0F	; 15
    122a:	08 95       	ret

0000122c <Timebase_LPDownCounter_Set_Status>:


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    122c:	e0 91 da 01 	lds	r30, 0x01DA
    1230:	f0 91 db 01 	lds	r31, 0x01DB
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 01       	movw	r18, r24
    1238:	54 e0       	ldi	r21, 0x04	; 4
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	5a 95       	dec	r21
    1240:	e1 f7       	brne	.-8      	; 0x123a <Timebase_LPDownCounter_Set_Status+0xe>
    1242:	28 0f       	add	r18, r24
    1244:	39 1f       	adc	r19, r25
    1246:	e2 0f       	add	r30, r18
    1248:	f3 1f       	adc	r31, r19
    124a:	6f 70       	andi	r22, 0x0F	; 15
    124c:	66 0f       	add	r22, r22
    124e:	83 a9       	ldd	r24, Z+51	; 0x33
    1250:	81 7e       	andi	r24, 0xE1	; 225
    1252:	86 2b       	or	r24, r22
    1254:	83 ab       	std	Z+51, r24	; 0x33
}
    1256:	08 95       	ret

00001258 <Timebase_LPDownCounter_Get_Value>:


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
    1258:	e0 91 da 01 	lds	r30, 0x01DA
    125c:	f0 91 db 01 	lds	r31, 0x01DB
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9c 01       	movw	r18, r24
    1264:	64 e0       	ldi	r22, 0x04	; 4
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	6a 95       	dec	r22
    126c:	e1 f7       	brne	.-8      	; 0x1266 <Timebase_LPDownCounter_Get_Value+0xe>
    126e:	28 0f       	add	r18, r24
    1270:	39 1f       	adc	r19, r25
    1272:	e2 0f       	add	r30, r18
    1274:	f3 1f       	adc	r31, r19
    1276:	df 01       	movw	r26, r30
    1278:	d8 96       	adiw	r26, 0x38	; 56
    127a:	60 ad       	ldd	r22, Z+56	; 0x38
    127c:	11 96       	adiw	r26, 0x01	; 1
    127e:	7c 91       	ld	r23, X
    1280:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].Value;
}
    1282:	12 96       	adiw	r26, 0x02	; 2
    1284:	8c 91       	ld	r24, X
    1286:	12 97       	sbiw	r26, 0x02	; 2
    1288:	13 96       	adiw	r26, 0x03	; 3
    128a:	9c 91       	ld	r25, X
    128c:	08 95       	ret

0000128e <Timebase_LPDownCounter_Set_Value>:


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    128e:	e0 91 da 01 	lds	r30, 0x01DA
    1292:	f0 91 db 01 	lds	r31, 0x01DB
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	9c 01       	movw	r18, r24
    129a:	a4 e0       	ldi	r26, 0x04	; 4
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	aa 95       	dec	r26
    12a2:	e1 f7       	brne	.-8      	; 0x129c <Timebase_LPDownCounter_Set_Value+0xe>
    12a4:	28 0f       	add	r18, r24
    12a6:	39 1f       	adc	r19, r25
    12a8:	e2 0f       	add	r30, r18
    12aa:	f3 1f       	adc	r31, r19
    12ac:	40 af       	std	Z+56, r20	; 0x38
    12ae:	51 af       	std	Z+57, r21	; 0x39
    12b0:	62 af       	std	Z+58, r22	; 0x3a
    12b2:	73 af       	std	Z+59, r23	; 0x3b
}
    12b4:	08 95       	ret

000012b6 <Timebase_LPDownCounter_Get_EndValue>:


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
    12b6:	e0 91 da 01 	lds	r30, 0x01DA
    12ba:	f0 91 db 01 	lds	r31, 0x01DB
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9c 01       	movw	r18, r24
    12c2:	b4 e0       	ldi	r27, 0x04	; 4
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	ba 95       	dec	r27
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <Timebase_LPDownCounter_Get_EndValue+0xe>
    12cc:	28 0f       	add	r18, r24
    12ce:	39 1f       	adc	r19, r25
    12d0:	e2 0f       	add	r30, r18
    12d2:	f3 1f       	adc	r31, r19
    12d4:	df 01       	movw	r26, r30
    12d6:	d4 96       	adiw	r26, 0x34	; 52
    12d8:	64 a9       	ldd	r22, Z+52	; 0x34
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	7c 91       	ld	r23, X
    12de:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].EndValue;
}
    12e0:	12 96       	adiw	r26, 0x02	; 2
    12e2:	8c 91       	ld	r24, X
    12e4:	12 97       	sbiw	r26, 0x02	; 2
    12e6:	13 96       	adiw	r26, 0x03	; 3
    12e8:	9c 91       	ld	r25, X
    12ea:	08 95       	ret

000012ec <Timebase_LPDownCounter_Set_EndValue>:


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    12ec:	e0 91 da 01 	lds	r30, 0x01DA
    12f0:	f0 91 db 01 	lds	r31, 0x01DB
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9c 01       	movw	r18, r24
    12f8:	a4 e0       	ldi	r26, 0x04	; 4
    12fa:	22 0f       	add	r18, r18
    12fc:	33 1f       	adc	r19, r19
    12fe:	aa 95       	dec	r26
    1300:	e1 f7       	brne	.-8      	; 0x12fa <Timebase_LPDownCounter_Set_EndValue+0xe>
    1302:	28 0f       	add	r18, r24
    1304:	39 1f       	adc	r19, r25
    1306:	e2 0f       	add	r30, r18
    1308:	f3 1f       	adc	r31, r19
    130a:	44 ab       	std	Z+52, r20	; 0x34
    130c:	55 ab       	std	Z+53, r21	; 0x35
    130e:	66 ab       	std	Z+54, r22	; 0x36
    1310:	77 ab       	std	Z+55, r23	; 0x37
}
    1312:	08 95       	ret

00001314 <Timebase_LPDownCounter_Get_PeriodValue>:


int32_t Timebase_LPDownCounter_Get_PeriodValue(uint8_t window){
    1314:	e0 91 da 01 	lds	r30, 0x01DA
    1318:	f0 91 db 01 	lds	r31, 0x01DB
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	9c 01       	movw	r18, r24
    1320:	b4 e0       	ldi	r27, 0x04	; 4
    1322:	22 0f       	add	r18, r18
    1324:	33 1f       	adc	r19, r19
    1326:	ba 95       	dec	r27
    1328:	e1 f7       	brne	.-8      	; 0x1322 <Timebase_LPDownCounter_Get_PeriodValue+0xe>
    132a:	28 0f       	add	r18, r24
    132c:	39 1f       	adc	r19, r25
    132e:	e2 0f       	add	r30, r18
    1330:	f3 1f       	adc	r31, r19
    1332:	df 01       	movw	r26, r30
    1334:	dc 96       	adiw	r26, 0x3c	; 60
    1336:	64 ad       	ldd	r22, Z+60	; 0x3c
    1338:	11 96       	adiw	r26, 0x01	; 1
    133a:	7c 91       	ld	r23, X
    133c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].PeriodValue;
}
    133e:	12 96       	adiw	r26, 0x02	; 2
    1340:	8c 91       	ld	r24, X
    1342:	12 97       	sbiw	r26, 0x02	; 2
    1344:	13 96       	adiw	r26, 0x03	; 3
    1346:	9c 91       	ld	r25, X
    1348:	08 95       	ret

0000134a <Timebase_LPDownCounter_Set_PeriodValue>:


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    134a:	e0 91 da 01 	lds	r30, 0x01DA
    134e:	f0 91 db 01 	lds	r31, 0x01DB
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1356:	77 ff       	sbrs	r23, 7
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <Timebase_LPDownCounter_Set_PeriodValue+0x2e>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    135a:	c9 01       	movw	r24, r18
    135c:	b4 e0       	ldi	r27, 0x04	; 4
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	ba 95       	dec	r27
    1364:	e1 f7       	brne	.-8      	; 0x135e <Timebase_LPDownCounter_Set_PeriodValue+0x14>
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	e8 0f       	add	r30, r24
    136c:	f9 1f       	adc	r31, r25
    136e:	14 ae       	std	Z+60, r1	; 0x3c
    1370:	15 ae       	std	Z+61, r1	; 0x3d
    1372:	16 ae       	std	Z+62, r1	; 0x3e
    1374:	17 ae       	std	Z+63, r1	; 0x3f
    1376:	08 95       	ret
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    1378:	c9 01       	movw	r24, r18
    137a:	a4 e0       	ldi	r26, 0x04	; 4
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	aa 95       	dec	r26
    1382:	e1 f7       	brne	.-8      	; 0x137c <Timebase_LPDownCounter_Set_PeriodValue+0x32>
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	e8 0f       	add	r30, r24
    138a:	f9 1f       	adc	r31, r25
    138c:	44 af       	std	Z+60, r20	; 0x3c
    138e:	55 af       	std	Z+61, r21	; 0x3d
    1390:	66 af       	std	Z+62, r22	; 0x3e
    1392:	77 af       	std	Z+63, r23	; 0x3f
    1394:	08 95       	ret

00001396 <Timebase_LPDownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
    1396:	e0 91 da 01 	lds	r30, 0x01DA
    139a:	f0 91 db 01 	lds	r31, 0x01DB
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9c 01       	movw	r18, r24
    13a2:	44 e0       	ldi	r20, 0x04	; 4
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	4a 95       	dec	r20
    13aa:	e1 f7       	brne	.-8      	; 0x13a4 <Timebase_LPDownCounter_Get_Period_Flag+0xe>
    13ac:	28 0f       	add	r18, r24
    13ae:	39 1f       	adc	r19, r25
    13b0:	e2 0f       	add	r30, r18
    13b2:	f3 1f       	adc	r31, r19
    13b4:	83 a9       	ldd	r24, Z+51	; 0x33
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}
    13b6:	81 70       	andi	r24, 0x01	; 1
    13b8:	08 95       	ret

000013ba <Timebase_LPDownCounter_Set_Period_Flag>:


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    13ba:	e0 91 da 01 	lds	r30, 0x01DA
    13be:	f0 91 db 01 	lds	r31, 0x01DB
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	9c 01       	movw	r18, r24
    13c6:	54 e0       	ldi	r21, 0x04	; 4
    13c8:	22 0f       	add	r18, r18
    13ca:	33 1f       	adc	r19, r19
    13cc:	5a 95       	dec	r21
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <Timebase_LPDownCounter_Set_Period_Flag+0xe>
    13d0:	28 0f       	add	r18, r24
    13d2:	39 1f       	adc	r19, r25
    13d4:	e2 0f       	add	r30, r18
    13d6:	f3 1f       	adc	r31, r19
    13d8:	83 a9       	ldd	r24, Z+51	; 0x33
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	83 ab       	std	Z+51, r24	; 0x33
}
    13de:	08 95       	ret

000013e0 <Timebase_LPDownCounter_Clear_Period_Flag>:


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    13e0:	e0 91 da 01 	lds	r30, 0x01DA
    13e4:	f0 91 db 01 	lds	r31, 0x01DB
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 01       	movw	r18, r24
    13ec:	64 e0       	ldi	r22, 0x04	; 4
    13ee:	22 0f       	add	r18, r18
    13f0:	33 1f       	adc	r19, r19
    13f2:	6a 95       	dec	r22
    13f4:	e1 f7       	brne	.-8      	; 0x13ee <Timebase_LPDownCounter_Clear_Period_Flag+0xe>
    13f6:	28 0f       	add	r18, r24
    13f8:	39 1f       	adc	r19, r25
    13fa:	e2 0f       	add	r30, r18
    13fc:	f3 1f       	adc	r31, r19
    13fe:	83 a9       	ldd	r24, Z+51	; 0x33
    1400:	8e 7f       	andi	r24, 0xFE	; 254
    1402:	83 ab       	std	Z+51, r24	; 0x33
}
    1404:	08 95       	ret

00001406 <Timebase_LPDownCounter_Get_ReloadValue>:

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
    1406:	e0 91 da 01 	lds	r30, 0x01DA
    140a:	f0 91 db 01 	lds	r31, 0x01DB
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	9c 01       	movw	r18, r24
    1412:	74 e0       	ldi	r23, 0x04	; 4
    1414:	22 0f       	add	r18, r18
    1416:	33 1f       	adc	r19, r19
    1418:	7a 95       	dec	r23
    141a:	e1 f7       	brne	.-8      	; 0x1414 <Timebase_LPDownCounter_Get_ReloadValue+0xe>
    141c:	28 0f       	add	r18, r24
    141e:	39 1f       	adc	r19, r25
    1420:	e2 0f       	add	r30, r18
    1422:	f3 1f       	adc	r31, r19
    1424:	e0 5c       	subi	r30, 0xC0	; 192
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	60 81       	ld	r22, Z
    142a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].ReloadValue;
}
    142c:	82 81       	ldd	r24, Z+2	; 0x02
    142e:	93 81       	ldd	r25, Z+3	; 0x03
    1430:	08 95       	ret

00001432 <Timebase_LPDownCounter_Set_ReloadValue>:

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1432:	e0 91 da 01 	lds	r30, 0x01DA
    1436:	f0 91 db 01 	lds	r31, 0x01DB
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 01       	movw	r18, r24
    143e:	a4 e0       	ldi	r26, 0x04	; 4
    1440:	22 0f       	add	r18, r18
    1442:	33 1f       	adc	r19, r19
    1444:	aa 95       	dec	r26
    1446:	e1 f7       	brne	.-8      	; 0x1440 <Timebase_LPDownCounter_Set_ReloadValue+0xe>
    1448:	28 0f       	add	r18, r24
    144a:	39 1f       	adc	r19, r25
    144c:	e2 0f       	add	r30, r18
    144e:	f3 1f       	adc	r31, r19
    1450:	e0 5c       	subi	r30, 0xC0	; 192
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	40 83       	st	Z, r20
    1456:	51 83       	std	Z+1, r21	; 0x01
    1458:	62 83       	std	Z+2, r22	; 0x02
    145a:	73 83       	std	Z+3, r23	; 0x03
}
    145c:	08 95       	ret

0000145e <Timebase_LPDownCounter_Reset>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    145e:	e0 91 da 01 	lds	r30, 0x01DA
    1462:	f0 91 db 01 	lds	r31, 0x01DB
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 01       	movw	r18, r24
    146a:	b4 e0       	ldi	r27, 0x04	; 4
    146c:	22 0f       	add	r18, r18
    146e:	33 1f       	adc	r19, r19
    1470:	ba 95       	dec	r27
    1472:	e1 f7       	brne	.-8      	; 0x146c <Timebase_LPDownCounter_Reset+0xe>
    1474:	28 0f       	add	r18, r24
    1476:	39 1f       	adc	r19, r25
    1478:	e2 0f       	add	r30, r18
    147a:	f3 1f       	adc	r31, r19
    147c:	14 aa       	std	Z+52, r1	; 0x34
    147e:	15 aa       	std	Z+53, r1	; 0x35
    1480:	16 aa       	std	Z+54, r1	; 0x36
    1482:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1484:	10 ae       	std	Z+56, r1	; 0x38
    1486:	11 ae       	std	Z+57, r1	; 0x39
    1488:	12 ae       	std	Z+58, r1	; 0x3a
    148a:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    148c:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    148e:	80 7e       	andi	r24, 0xE0	; 224
    1490:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1492:	e0 5c       	subi	r30, 0xC0	; 192
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	10 82       	st	Z, r1
    1498:	11 82       	std	Z+1, r1	; 0x01
    149a:	12 82       	std	Z+2, r1	; 0x02
    149c:	13 82       	std	Z+3, r1	; 0x03
  Timebase_LPDownCounter_Set_EndValue(window, 0);
  Timebase_LPDownCounter_Set_Value(window, 0);
  Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_LPDownCounter_Clear_Period_Flag(window);
  Timebase_LPDownCounter_Set_ReloadValue(window, 0);
} 
    149e:	08 95       	ret

000014a0 <Timebase_LPDownCounter_Clear_All_Flags>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    14a0:	e0 91 da 01 	lds	r30, 0x01DA
    14a4:	f0 91 db 01 	lds	r31, 0x01DB
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	9c 01       	movw	r18, r24
    14ac:	44 e0       	ldi	r20, 0x04	; 4
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	4a 95       	dec	r20
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <Timebase_LPDownCounter_Clear_All_Flags+0xe>
    14b6:	28 0f       	add	r18, r24
    14b8:	39 1f       	adc	r19, r25
    14ba:	e2 0f       	add	r30, r18
    14bc:	f3 1f       	adc	r31, r19
    14be:	14 aa       	std	Z+52, r1	; 0x34
    14c0:	15 aa       	std	Z+53, r1	; 0x35
    14c2:	16 aa       	std	Z+54, r1	; 0x36
    14c4:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    14c6:	10 ae       	std	Z+56, r1	; 0x38
    14c8:	11 ae       	std	Z+57, r1	; 0x39
    14ca:	12 ae       	std	Z+58, r1	; 0x3a
    14cc:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    14ce:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14d0:	80 7e       	andi	r24, 0xE0	; 224
    14d2:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    14d4:	e0 5c       	subi	r30, 0xC0	; 192
    14d6:	ff 4f       	sbci	r31, 0xFF	; 255
    14d8:	10 82       	st	Z, r1
    14da:	11 82       	std	Z+1, r1	; 0x01
    14dc:	12 82       	std	Z+2, r1	; 0x02
    14de:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_LPDownCounter_Clear_All_Flags(uint8_t window){
  Timebase_LPDownCounter_Reset( window );
}
    14e0:	08 95       	ret

000014e2 <Timebase_LPDownCounter_Start>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    14e2:	e0 91 da 01 	lds	r30, 0x01DA
    14e6:	f0 91 db 01 	lds	r31, 0x01DB
    14ea:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    14ec:	9c 01       	movw	r18, r24
    14ee:	54 e0       	ldi	r21, 0x04	; 4
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	5a 95       	dec	r21
    14f6:	e1 f7       	brne	.-8      	; 0x14f0 <Timebase_LPDownCounter_Start+0xe>
    14f8:	28 0f       	add	r18, r24
    14fa:	39 1f       	adc	r19, r25
    14fc:	e2 0f       	add	r30, r18
    14fe:	f3 1f       	adc	r31, r19
    1500:	93 a9       	ldd	r25, Z+51	; 0x33
    1502:	89 2f       	mov	r24, r25
    1504:	86 95       	lsr	r24
    1506:	8f 70       	andi	r24, 0x0F	; 15
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	19 f0       	breq	.+6      	; 0x1512 <Timebase_LPDownCounter_Start+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    150c:	91 7e       	andi	r25, 0xE1	; 225
    150e:	92 60       	ori	r25, 0x02	; 2
    1510:	93 ab       	std	Z+51, r25	; 0x33
    1512:	08 95       	ret

00001514 <Timebase_LPDownCounter_Stop>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1514:	e0 91 da 01 	lds	r30, 0x01DA
    1518:	f0 91 db 01 	lds	r31, 0x01DB
    151c:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Stop(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    151e:	9c 01       	movw	r18, r24
    1520:	64 e0       	ldi	r22, 0x04	; 4
    1522:	22 0f       	add	r18, r18
    1524:	33 1f       	adc	r19, r19
    1526:	6a 95       	dec	r22
    1528:	e1 f7       	brne	.-8      	; 0x1522 <Timebase_LPDownCounter_Stop+0xe>
    152a:	28 0f       	add	r18, r24
    152c:	39 1f       	adc	r19, r25
    152e:	e2 0f       	add	r30, r18
    1530:	f3 1f       	adc	r31, r19
    1532:	93 a9       	ldd	r25, Z+51	; 0x33
    1534:	89 2f       	mov	r24, r25
    1536:	86 95       	lsr	r24
    1538:	8f 70       	andi	r24, 0x0F	; 15
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	19 f0       	breq	.+6      	; 0x1544 <Timebase_LPDownCounter_Stop+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    153e:	91 7e       	andi	r25, 0xE1	; 225
    1540:	94 60       	ori	r25, 0x04	; 4
    1542:	93 ab       	std	Z+51, r25	; 0x33
    1544:	08 95       	ret

00001546 <Timebase_LPDownCounter_Set_Securely>:
    Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	7a 01       	movw	r14, r20
    1554:	8b 01       	movw	r16, r22

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1556:	c0 91 da 01 	lds	r28, 0x01DA
    155a:	d0 91 db 01 	lds	r29, 0x01DB
    155e:	68 2f       	mov	r22, r24
    1560:	70 e0       	ldi	r23, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1562:	fb 01       	movw	r30, r22
    1564:	b4 e0       	ldi	r27, 0x04	; 4
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	ba 95       	dec	r27
    156c:	e1 f7       	brne	.-8      	; 0x1566 <Timebase_LPDownCounter_Set_Securely+0x20>
    156e:	e6 0f       	add	r30, r22
    1570:	f7 1f       	adc	r31, r23
    1572:	ec 0f       	add	r30, r28
    1574:	fd 1f       	adc	r31, r29
    1576:	83 a9       	ldd	r24, Z+51	; 0x33
    1578:	86 95       	lsr	r24
    157a:	8f 70       	andi	r24, 0x0F	; 15
    157c:	a1 f5       	brne	.+104    	; 0x15e6 <Timebase_LPDownCounter_Set_Securely+0xa0>
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    157e:	e0 ae       	std	Z+56, r14	; 0x38
    1580:	f1 ae       	std	Z+57, r15	; 0x39
    1582:	02 af       	std	Z+58, r16	; 0x3a
    1584:	13 af       	std	Z+59, r17	; 0x3b


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    1586:	29 8d       	ldd	r18, Y+25	; 0x19
    1588:	3a 8d       	ldd	r19, Y+26	; 0x1a
    158a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    158c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    158e:	89 8d       	ldd	r24, Y+25	; 0x19
    1590:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1592:	ab 8d       	ldd	r26, Y+27	; 0x1b
    1594:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
    1596:	28 17       	cp	r18, r24
    1598:	39 07       	cpc	r19, r25
    159a:	4a 07       	cpc	r20, r26
    159c:	5b 07       	cpc	r21, r27
    159e:	99 f7       	brne	.-26     	; 0x1586 <Timebase_LPDownCounter_Set_Securely+0x40>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    15a0:	fb 01       	movw	r30, r22
    15a2:	a4 e0       	ldi	r26, 0x04	; 4
    15a4:	ee 0f       	add	r30, r30
    15a6:	ff 1f       	adc	r31, r31
    15a8:	aa 95       	dec	r26
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <Timebase_LPDownCounter_Set_Securely+0x5e>
    15ac:	e6 0f       	add	r30, r22
    15ae:	f7 1f       	adc	r31, r23
    15b0:	ec 0f       	add	r30, r28
    15b2:	fd 1f       	adc	r31, r29
    15b4:	2e 0d       	add	r18, r14
    15b6:	3f 1d       	adc	r19, r15
    15b8:	40 1f       	adc	r20, r16
    15ba:	51 1f       	adc	r21, r17
    15bc:	24 ab       	std	Z+52, r18	; 0x34
    15be:	35 ab       	std	Z+53, r19	; 0x35
    15c0:	46 ab       	std	Z+54, r20	; 0x36
    15c2:	57 ab       	std	Z+55, r21	; 0x37
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    15c4:	e0 5c       	subi	r30, 0xC0	; 192
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	e0 82       	st	Z, r14
    15ca:	f1 82       	std	Z+1, r15	; 0x01
    15cc:	02 83       	std	Z+2, r16	; 0x02
    15ce:	13 83       	std	Z+3, r17	; 0x03
    15d0:	e0 54       	subi	r30, 0x40	; 64
    15d2:	f0 40       	sbci	r31, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    15d4:	93 a9       	ldd	r25, Z+51	; 0x33
    15d6:	89 2f       	mov	r24, r25
    15d8:	86 95       	lsr	r24
    15da:	8f 70       	andi	r24, 0x0F	; 15
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	19 f0       	breq	.+6      	; 0x15e6 <Timebase_LPDownCounter_Set_Securely+0xa0>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    15e0:	91 7e       	andi	r25, 0xE1	; 225
    15e2:	92 60       	ori	r25, 0x02	; 2
    15e4:	93 ab       	std	Z+51, r25	; 0x33
    Timebase_LPDownCounter_Set_Value(window, value);
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPTimer_Get_Seconds() + value);
	Timebase_LPDownCounter_Set_ReloadValue(window, value);
    Timebase_LPDownCounter_Start(window);
  }
}
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	ff 90       	pop	r15
    15f0:	ef 90       	pop	r14
    15f2:	08 95       	ret

000015f4 <Timebase_LPDownCounter_Set_Forcefully>:


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
    15f4:	cf 92       	push	r12
    15f6:	df 92       	push	r13
    15f8:	ef 92       	push	r14
    15fa:	ff 92       	push	r15
    15fc:	0f 93       	push	r16
    15fe:	1f 93       	push	r17
    1600:	6a 01       	movw	r12, r20
    1602:	7b 01       	movw	r14, r22
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1604:	e0 91 da 01 	lds	r30, 0x01DA
    1608:	f0 91 db 01 	lds	r31, 0x01DB
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	89 01       	movw	r16, r18
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	00 0f       	add	r16, r16
    1616:	11 1f       	adc	r17, r17
    1618:	9a 95       	dec	r25
    161a:	e1 f7       	brne	.-8      	; 0x1614 <Timebase_LPDownCounter_Set_Forcefully+0x20>
    161c:	02 0f       	add	r16, r18
    161e:	13 1f       	adc	r17, r19
    1620:	e0 0f       	add	r30, r16
    1622:	f1 1f       	adc	r31, r17
    1624:	14 aa       	std	Z+52, r1	; 0x34
    1626:	15 aa       	std	Z+53, r1	; 0x35
    1628:	16 aa       	std	Z+54, r1	; 0x36
    162a:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    162c:	10 ae       	std	Z+56, r1	; 0x38
    162e:	11 ae       	std	Z+57, r1	; 0x39
    1630:	12 ae       	std	Z+58, r1	; 0x3a
    1632:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1634:	93 a9       	ldd	r25, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1636:	90 7e       	andi	r25, 0xE0	; 224
    1638:	93 ab       	std	Z+51, r25	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    163a:	e0 5c       	subi	r30, 0xC0	; 192
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	10 82       	st	Z, r1
    1640:	11 82       	std	Z+1, r1	; 0x01
    1642:	12 82       	std	Z+2, r1	; 0x02
    1644:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
    1646:	0e 94 a3 0a 	call	0x1546	; 0x1546 <Timebase_LPDownCounter_Set_Securely>
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    164a:	e0 91 da 01 	lds	r30, 0x01DA
    164e:	f0 91 db 01 	lds	r31, 0x01DB
    1652:	e0 0f       	add	r30, r16
    1654:	f1 1f       	adc	r31, r17
    1656:	e0 5c       	subi	r30, 0xC0	; 192
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	c0 82       	st	Z, r12
    165c:	d1 82       	std	Z+1, r13	; 0x01
    165e:	e2 82       	std	Z+2, r14	; 0x02
    1660:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	df 90       	pop	r13
    166c:	cf 90       	pop	r12
    166e:	08 95       	ret

00001670 <Timebase_LPDownCounter_Update>:


void Timebase_LPDownCounter_Update(uint8_t window){
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1680:	60 91 da 01 	lds	r22, 0x01DA
    1684:	70 91 db 01 	lds	r23, 0x01DB
    1688:	c8 2e       	mov	r12, r24
    168a:	dd 24       	eor	r13, r13
    168c:	f6 01       	movw	r30, r12
    168e:	a4 e0       	ldi	r26, 0x04	; 4
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	aa 95       	dec	r26
    1696:	e1 f7       	brne	.-8      	; 0x1690 <Timebase_LPDownCounter_Update+0x20>
    1698:	ec 0d       	add	r30, r12
    169a:	fd 1d       	adc	r31, r13
    169c:	e6 0f       	add	r30, r22
    169e:	f7 1f       	adc	r31, r23
    16a0:	83 a9       	ldd	r24, Z+51	; 0x33
    16a2:	86 95       	lsr	r24
    16a4:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	c1 f5       	brne	.+112    	; 0x171a <Timebase_LPDownCounter_Update+0xaa>
  Timebase->LPDownCounter[window].Value = value;
}


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
  return Timebase->LPDownCounter[window].EndValue;
    16aa:	e4 a8       	ldd	r14, Z+52	; 0x34
    16ac:	f5 a8       	ldd	r15, Z+53	; 0x35
    16ae:	06 a9       	ldd	r16, Z+54	; 0x36
    16b0:	17 a9       	ldd	r17, Z+55	; 0x37


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    16b2:	fb 01       	movw	r30, r22
    16b4:	21 8d       	ldd	r18, Z+25	; 0x19
    16b6:	32 8d       	ldd	r19, Z+26	; 0x1a
    16b8:	43 8d       	ldd	r20, Z+27	; 0x1b
    16ba:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    16bc:	81 8d       	ldd	r24, Z+25	; 0x19
    16be:	92 8d       	ldd	r25, Z+26	; 0x1a
    16c0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    16c2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    16c4:	28 17       	cp	r18, r24
    16c6:	39 07       	cpc	r19, r25
    16c8:	4a 07       	cpc	r20, r26
    16ca:	5b 07       	cpc	r21, r27
    16cc:	91 f7       	brne	.-28     	; 0x16b2 <Timebase_LPDownCounter_Update+0x42>
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    16ce:	d8 01       	movw	r26, r16
    16d0:	c7 01       	movw	r24, r14
    16d2:	82 1b       	sub	r24, r18
    16d4:	93 0b       	sbc	r25, r19
    16d6:	a4 0b       	sbc	r26, r20
    16d8:	b5 0b       	sbc	r27, r21
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    16da:	e6 01       	movw	r28, r12
    16dc:	f4 e0       	ldi	r31, 0x04	; 4
    16de:	cc 0f       	add	r28, r28
    16e0:	dd 1f       	adc	r29, r29
    16e2:	fa 95       	dec	r31
    16e4:	e1 f7       	brne	.-8      	; 0x16de <Timebase_LPDownCounter_Update+0x6e>
    16e6:	cc 0d       	add	r28, r12
    16e8:	dd 1d       	adc	r29, r13
    16ea:	c6 0f       	add	r28, r22
    16ec:	d7 1f       	adc	r29, r23
    16ee:	88 af       	std	Y+56, r24	; 0x38
    16f0:	99 af       	std	Y+57, r25	; 0x39
    16f2:	aa af       	std	Y+58, r26	; 0x3a
    16f4:	bb af       	std	Y+59, r27	; 0x3b


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
    16f6:	18 16       	cp	r1, r24
    16f8:	19 06       	cpc	r1, r25
    16fa:	1a 06       	cpc	r1, r26
    16fc:	1b 06       	cpc	r1, r27
    16fe:	a4 f1       	brlt	.+104    	; 0x1768 <Timebase_LPDownCounter_Update+0xf8>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1700:	1c aa       	std	Y+52, r1	; 0x34
    1702:	1d aa       	std	Y+53, r1	; 0x35
    1704:	1e aa       	std	Y+54, r1	; 0x36
    1706:	1f aa       	std	Y+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1708:	18 ae       	std	Y+56, r1	; 0x38
    170a:	19 ae       	std	Y+57, r1	; 0x39
    170c:	1a ae       	std	Y+58, r1	; 0x3a
    170e:	1b ae       	std	Y+59, r1	; 0x3b
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1710:	8b a9       	ldd	r24, Y+51	; 0x33
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1712:	80 7e       	andi	r24, 0xE0	; 224
    1714:	88 60       	ori	r24, 0x08	; 8
    1716:	8b ab       	std	Y+51, r24	; 0x33
    1718:	27 c0       	rjmp	.+78     	; 0x1768 <Timebase_LPDownCounter_Update+0xf8>
	  int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
      Timebase_LPDownCounter_Reset(window);
	  Timebase_LPDownCounter_Set_ReloadValue(window, temp);
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	29 f5       	brne	.+74     	; 0x1768 <Timebase_LPDownCounter_Update+0xf8>
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    171e:	e0 ac       	ldd	r14, Z+56	; 0x38
    1720:	f1 ac       	ldd	r15, Z+57	; 0x39
    1722:	02 ad       	ldd	r16, Z+58	; 0x3a
    1724:	13 ad       	ldd	r17, Z+59	; 0x3b


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    1726:	fb 01       	movw	r30, r22
    1728:	21 8d       	ldd	r18, Z+25	; 0x19
    172a:	32 8d       	ldd	r19, Z+26	; 0x1a
    172c:	43 8d       	ldd	r20, Z+27	; 0x1b
    172e:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    1730:	81 8d       	ldd	r24, Z+25	; 0x19
    1732:	92 8d       	ldd	r25, Z+26	; 0x1a
    1734:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1736:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    1738:	28 17       	cp	r18, r24
    173a:	39 07       	cpc	r19, r25
    173c:	4a 07       	cpc	r20, r26
    173e:	5b 07       	cpc	r21, r27
    1740:	91 f7       	brne	.-28     	; 0x1726 <Timebase_LPDownCounter_Update+0xb6>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1742:	c6 01       	movw	r24, r12
    1744:	e4 e0       	ldi	r30, 0x04	; 4
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	ea 95       	dec	r30
    174c:	e1 f7       	brne	.-8      	; 0x1746 <Timebase_LPDownCounter_Update+0xd6>
    174e:	8c 0d       	add	r24, r12
    1750:	9d 1d       	adc	r25, r13
    1752:	68 0f       	add	r22, r24
    1754:	79 1f       	adc	r23, r25
    1756:	2e 0d       	add	r18, r14
    1758:	3f 1d       	adc	r19, r15
    175a:	40 1f       	adc	r20, r16
    175c:	51 1f       	adc	r21, r17
    175e:	fb 01       	movw	r30, r22
    1760:	24 ab       	std	Z+52, r18	; 0x34
    1762:	35 ab       	std	Z+53, r19	; 0x35
    1764:	46 ab       	std	Z+54, r20	; 0x36
    1766:	57 ab       	std	Z+55, r21	; 0x37
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPDownCounter_Get_Value(window) + Timebase_LPTimer_Get_Seconds());
  }
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	08 95       	ret

0000177a <Timebase_LPDownCounter_Expired>:


uint8_t Timebase_LPDownCounter_Expired(uint8_t window){
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	e0 91 da 01 	lds	r30, 0x01DA
    1780:	f0 91 db 01 	lds	r31, 0x01DB
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	9c 01       	movw	r18, r24
    1788:	b4 e0       	ldi	r27, 0x04	; 4
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	ba 95       	dec	r27
    1790:	e1 f7       	brne	.-8      	; 0x178a <Timebase_LPDownCounter_Expired+0x10>
    1792:	28 0f       	add	r18, r24
    1794:	39 1f       	adc	r19, r25
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	83 a9       	ldd	r24, Z+51	; 0x33
    179c:	86 95       	lsr	r24
    179e:	8f 70       	andi	r24, 0x0F	; 15
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <Timebase_LPDownCounter_Expired+0x2c>
    17a4:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17a6:	84 2f       	mov	r24, r20
    17a8:	08 95       	ret

000017aa <Timebase_LPDownCounter_Expired_Event>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    17aa:	e0 91 da 01 	lds	r30, 0x01DA
    17ae:	f0 91 db 01 	lds	r31, 0x01DB
    17b2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_LPDownCounter_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    17b4:	9c 01       	movw	r18, r24
    17b6:	44 e0       	ldi	r20, 0x04	; 4
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	4a 95       	dec	r20
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <Timebase_LPDownCounter_Expired_Event+0xe>
    17c0:	28 0f       	add	r18, r24
    17c2:	39 1f       	adc	r19, r25
    17c4:	e2 0f       	add	r30, r18
    17c6:	f3 1f       	adc	r31, r19
    17c8:	83 a9       	ldd	r24, Z+51	; 0x33
    17ca:	86 95       	lsr	r24
    17cc:	8f 70       	andi	r24, 0x0F	; 15
    17ce:	84 30       	cpi	r24, 0x04	; 4
    17d0:	11 f0       	breq	.+4      	; 0x17d6 <Timebase_LPDownCounter_Expired_Event+0x2c>
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	08 95       	ret
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    17d6:	14 aa       	std	Z+52, r1	; 0x34
    17d8:	15 aa       	std	Z+53, r1	; 0x35
    17da:	16 aa       	std	Z+54, r1	; 0x36
    17dc:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    17de:	10 ae       	std	Z+56, r1	; 0x38
    17e0:	11 ae       	std	Z+57, r1	; 0x39
    17e2:	12 ae       	std	Z+58, r1	; 0x3a
    17e4:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    17e6:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17e8:	80 7e       	andi	r24, 0xE0	; 224
    17ea:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    17ec:	e0 5c       	subi	r30, 0xC0	; 192
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	10 82       	st	Z, r1
    17f2:	11 82       	std	Z+1, r1	; 0x01
    17f4:	12 82       	std	Z+2, r1	; 0x02
    17f6:	13 82       	std	Z+3, r1	; 0x03
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17fa:	08 95       	ret

000017fc <Timebase_LPDownCounter_Oneshot_Expired_Event>:

uint8_t Timebase_LPDownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_LPDownCounter_Expired_Event(window);
    17fc:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <Timebase_LPDownCounter_Expired_Event>
}
    1800:	08 95       	ret

00001802 <Timebase_LPDownCounter_Continuous_Expired_Event>:


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
    1802:	1f 93       	push	r17
    1804:	18 2f       	mov	r17, r24

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    1806:	a0 91 da 01 	lds	r26, 0x01DA
    180a:	b0 91 db 01 	lds	r27, 0x01DB
    180e:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_LPDownCounter_Expired_Event(window);
}


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1810:	9c 01       	movw	r18, r24
    1812:	54 e0       	ldi	r21, 0x04	; 4
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	5a 95       	dec	r21
    181a:	e1 f7       	brne	.-8      	; 0x1814 <Timebase_LPDownCounter_Continuous_Expired_Event+0x12>
    181c:	28 0f       	add	r18, r24
    181e:	39 1f       	adc	r19, r25
    1820:	a2 0f       	add	r26, r18
    1822:	b3 1f       	adc	r27, r19
    1824:	d3 96       	adiw	r26, 0x33	; 51
    1826:	8c 91       	ld	r24, X
    1828:	d3 97       	sbiw	r26, 0x33	; 51
    182a:	86 95       	lsr	r24
    182c:	8f 70       	andi	r24, 0x0F	; 15
    182e:	84 30       	cpi	r24, 0x04	; 4
    1830:	11 f0       	breq	.+4      	; 0x1836 <Timebase_LPDownCounter_Continuous_Expired_Event+0x34>
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	21 c0       	rjmp	.+66     	; 0x1878 <Timebase_LPDownCounter_Continuous_Expired_Event+0x76>
void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
    1836:	fd 01       	movw	r30, r26
    1838:	e0 5c       	subi	r30, 0xC0	; 192
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	40 81       	ld	r20, Z
    183e:	51 81       	ldd	r21, Z+1	; 0x01
    1840:	62 81       	ldd	r22, Z+2	; 0x02
    1842:	73 81       	ldd	r23, Z+3	; 0x03
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    1844:	d4 96       	adiw	r26, 0x34	; 52
    1846:	1d 92       	st	X+, r1
    1848:	1d 92       	st	X+, r1
    184a:	1d 92       	st	X+, r1
    184c:	1c 92       	st	X, r1
    184e:	d7 97       	sbiw	r26, 0x37	; 55
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    1850:	d8 96       	adiw	r26, 0x38	; 56
    1852:	1d 92       	st	X+, r1
    1854:	1d 92       	st	X+, r1
    1856:	1d 92       	st	X+, r1
    1858:	1c 92       	st	X, r1
    185a:	db 97       	sbiw	r26, 0x3b	; 59
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    185c:	d3 96       	adiw	r26, 0x33	; 51
    185e:	8c 91       	ld	r24, X
    1860:	d3 97       	sbiw	r26, 0x33	; 51
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1862:	80 7e       	andi	r24, 0xE0	; 224
    1864:	d3 96       	adiw	r26, 0x33	; 51
    1866:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1868:	10 82       	st	Z, r1
    186a:	11 82       	std	Z+1, r1	; 0x01
    186c:	12 82       	std	Z+2, r1	; 0x02
    186e:	13 82       	std	Z+3, r1	; 0x03

uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
    Timebase_LPDownCounter_Clear_All_Flags( window );
	Timebase_LPDownCounter_Set_Securely(window, temp);
    1870:	81 2f       	mov	r24, r17
    1872:	0e 94 a3 0a 	call	0x1546	; 0x1546 <Timebase_LPDownCounter_Set_Securely>
    1876:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1878:	1f 91       	pop	r17
    187a:	08 95       	ret

0000187c <Timebase_LPDownCounter_Set_Period_Value_Securely>:


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
    1880:	c0 91 da 01 	lds	r28, 0x01DA
    1884:	d0 91 db 01 	lds	r29, 0x01DB
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    188c:	f9 01       	movw	r30, r18
    188e:	a4 e0       	ldi	r26, 0x04	; 4
    1890:	ee 0f       	add	r30, r30
    1892:	ff 1f       	adc	r31, r31
    1894:	aa 95       	dec	r26
    1896:	e1 f7       	brne	.-8      	; 0x1890 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x14>
    1898:	e2 0f       	add	r30, r18
    189a:	f3 1f       	adc	r31, r19
    189c:	ec 0f       	add	r30, r28
    189e:	fd 1f       	adc	r31, r29
    18a0:	83 a9       	ldd	r24, Z+51	; 0x33
    18a2:	80 fd       	sbrc	r24, 0
    18a4:	20 c0       	rjmp	.+64     	; 0x18e6 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x6a>
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    18a6:	80 ad       	ldd	r24, Z+56	; 0x38
    18a8:	91 ad       	ldd	r25, Z+57	; 0x39
    18aa:	a2 ad       	ldd	r26, Z+58	; 0x3a
    18ac:	b3 ad       	ldd	r27, Z+59	; 0x3b
    18ae:	84 1b       	sub	r24, r20
    18b0:	95 0b       	sbc	r25, r21
    18b2:	a6 0b       	sbc	r26, r22
    18b4:	b7 0b       	sbc	r27, r23
  return Timebase->LPDownCounter[window].PeriodValue;
}


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    18b6:	b7 ff       	sbrs	r27, 7
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x48>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    18ba:	14 ae       	std	Z+60, r1	; 0x3c
    18bc:	15 ae       	std	Z+61, r1	; 0x3d
    18be:	16 ae       	std	Z+62, r1	; 0x3e
    18c0:	17 ae       	std	Z+63, r1	; 0x3f
    18c2:	04 c0       	rjmp	.+8      	; 0x18cc <Timebase_LPDownCounter_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    18c4:	84 af       	std	Z+60, r24	; 0x3c
    18c6:	95 af       	std	Z+61, r25	; 0x3d
    18c8:	a6 af       	std	Z+62, r26	; 0x3e
    18ca:	b7 af       	std	Z+63, r27	; 0x3f
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    18cc:	f9 01       	movw	r30, r18
    18ce:	64 e0       	ldi	r22, 0x04	; 4
    18d0:	ee 0f       	add	r30, r30
    18d2:	ff 1f       	adc	r31, r31
    18d4:	6a 95       	dec	r22
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x54>
    18d8:	e2 0f       	add	r30, r18
    18da:	f3 1f       	adc	r31, r19
    18dc:	ec 0f       	add	r30, r28
    18de:	fd 1f       	adc	r31, r29
    18e0:	83 a9       	ldd	r24, Z+51	; 0x33
    18e2:	81 60       	ori	r24, 0x01	; 1
    18e4:	83 ab       	std	Z+51, r24	; 0x33
void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    Timebase_LPDownCounter_Set_Period_Flag(window);
  }
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <Timebase_LPDownCounter_Get_Remaining_Period_Value>:
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    18ec:	e0 91 da 01 	lds	r30, 0x01DA
    18f0:	f0 91 db 01 	lds	r31, 0x01DB
    18f4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    18f6:	9c 01       	movw	r18, r24
    18f8:	b4 e0       	ldi	r27, 0x04	; 4
    18fa:	22 0f       	add	r18, r18
    18fc:	33 1f       	adc	r19, r19
    18fe:	ba 95       	dec	r27
    1900:	e1 f7       	brne	.-8      	; 0x18fa <Timebase_LPDownCounter_Get_Remaining_Period_Value+0xe>
    1902:	28 0f       	add	r18, r24
    1904:	39 1f       	adc	r19, r25
    1906:	e2 0f       	add	r30, r18
    1908:	f3 1f       	adc	r31, r19
    190a:	20 ad       	ldd	r18, Z+56	; 0x38
    190c:	31 ad       	ldd	r19, Z+57	; 0x39
    190e:	42 ad       	ldd	r20, Z+58	; 0x3a
    1910:	53 ad       	ldd	r21, Z+59	; 0x3b
    1912:	84 ad       	ldd	r24, Z+60	; 0x3c
    1914:	95 ad       	ldd	r25, Z+61	; 0x3d
    1916:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1918:	b7 ad       	ldd	r27, Z+63	; 0x3f
    191a:	28 1b       	sub	r18, r24
    191c:	39 0b       	sbc	r19, r25
    191e:	4a 0b       	sbc	r20, r26
    1920:	5b 0b       	sbc	r21, r27
    1922:	57 ff       	sbrs	r21, 7
    1924:	04 c0       	rjmp	.+8      	; 0x192e <Timebase_LPDownCounter_Get_Remaining_Period_Value+0x42>
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    192e:	b9 01       	movw	r22, r18
    1930:	ca 01       	movw	r24, r20
    1932:	08 95       	ret

00001934 <Timebase_LPDownCounter_Period_Value_Expired>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    1938:	c0 91 da 01 	lds	r28, 0x01DA
    193c:	d0 91 db 01 	lds	r29, 0x01DB
    1940:	68 2f       	mov	r22, r24
    1942:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    1944:	fb 01       	movw	r30, r22
    1946:	44 e0       	ldi	r20, 0x04	; 4
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	4a 95       	dec	r20
    194e:	e1 f7       	brne	.-8      	; 0x1948 <Timebase_LPDownCounter_Period_Value_Expired+0x14>
    1950:	e6 0f       	add	r30, r22
    1952:	f7 1f       	adc	r31, r23
    1954:	ec 0f       	add	r30, r28
    1956:	fd 1f       	adc	r31, r29
    1958:	20 ad       	ldd	r18, Z+56	; 0x38
    195a:	31 ad       	ldd	r19, Z+57	; 0x39
    195c:	42 ad       	ldd	r20, Z+58	; 0x3a
    195e:	53 ad       	ldd	r21, Z+59	; 0x3b
    1960:	84 ad       	ldd	r24, Z+60	; 0x3c
    1962:	95 ad       	ldd	r25, Z+61	; 0x3d
    1964:	a6 ad       	ldd	r26, Z+62	; 0x3e
    1966:	b7 ad       	ldd	r27, Z+63	; 0x3f
    1968:	28 1b       	sub	r18, r24
    196a:	39 0b       	sbc	r19, r25
    196c:	4a 0b       	sbc	r20, r26
    196e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1970:	57 fd       	sbrc	r21, 7
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
  return temp;
}


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_LPDownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	41 05       	cpc	r20, r1
    197a:	51 05       	cpc	r21, r1
    197c:	11 f0       	breq	.+4      	; 0x1982 <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	10 c0       	rjmp	.+32     	; 0x19a2 <Timebase_LPDownCounter_Period_Value_Expired+0x6e>
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	cb 01       	movw	r24, r22
    1986:	34 e0       	ldi	r19, 0x04	; 4
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	3a 95       	dec	r19
    198e:	e1 f7       	brne	.-8      	; 0x1988 <Timebase_LPDownCounter_Period_Value_Expired+0x54>
    1990:	86 0f       	add	r24, r22
    1992:	97 1f       	adc	r25, r23
    1994:	c8 0f       	add	r28, r24
    1996:	d9 1f       	adc	r29, r25
    1998:	8b a9       	ldd	r24, Y+51	; 0x33
    199a:	80 ff       	sbrs	r24, 0
    199c:	21 e0       	ldi	r18, 0x01	; 1
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19a2:	82 2f       	mov	r24, r18
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	08 95       	ret

000019aa <Timebase_LPDownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired_Event(uint8_t window){
    19aa:	1f 93       	push	r17
    19ac:	18 2f       	mov	r17, r24
  if(Timebase_LPDownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    19ae:	0e 94 9a 0c 	call	0x1934	; 0x1934 <Timebase_LPDownCounter_Period_Value_Expired>
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	11 f0       	breq	.+4      	; 0x19ba <Timebase_LPDownCounter_Period_Value_Expired_Event+0x10>
    19b6:	80 e0       	ldi	r24, 0x00	; 0
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x38>
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    19ba:	e0 91 da 01 	lds	r30, 0x01DA
    19be:	f0 91 db 01 	lds	r31, 0x01DB
    19c2:	21 2f       	mov	r18, r17
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	c9 01       	movw	r24, r18
    19c8:	54 e0       	ldi	r21, 0x04	; 4
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	5a 95       	dec	r21
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <Timebase_LPDownCounter_Period_Value_Expired_Event+0x20>
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	e8 0f       	add	r30, r24
    19d8:	f9 1f       	adc	r31, r25
    19da:	83 a9       	ldd	r24, Z+51	; 0x33
    19dc:	8e 7f       	andi	r24, 0xFE	; 254
    19de:	83 ab       	std	Z+51, r24	; 0x33
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19e2:	1f 91       	pop	r17
    19e4:	08 95       	ret

000019e6 <Timebase_LPDownCounter_Update_All>:


void Timebase_LPDownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Update(i);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	0e 94 38 0b 	call	0x1670	; 0x1670 <Timebase_LPDownCounter_Update>
  }
}
    19ec:	08 95       	ret

000019ee <Timebase_LPDownCounter_Reset_All>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    19ee:	e0 91 da 01 	lds	r30, 0x01DA
    19f2:	f0 91 db 01 	lds	r31, 0x01DB
    19f6:	14 aa       	std	Z+52, r1	; 0x34
    19f8:	15 aa       	std	Z+53, r1	; 0x35
    19fa:	16 aa       	std	Z+54, r1	; 0x36
    19fc:	17 aa       	std	Z+55, r1	; 0x37
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    19fe:	10 ae       	std	Z+56, r1	; 0x38
    1a00:	11 ae       	std	Z+57, r1	; 0x39
    1a02:	12 ae       	std	Z+58, r1	; 0x3a
    1a04:	13 ae       	std	Z+59, r1	; 0x3b
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    1a06:	83 a9       	ldd	r24, Z+51	; 0x33
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a08:	80 7e       	andi	r24, 0xE0	; 224
    1a0a:	83 ab       	std	Z+51, r24	; 0x33
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    1a0c:	e0 5c       	subi	r30, 0xC0	; 192
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	10 82       	st	Z, r1
    1a12:	11 82       	std	Z+1, r1	; 0x01
    1a14:	12 82       	std	Z+2, r1	; 0x02
    1a16:	13 82       	std	Z+3, r1	; 0x03

void Timebase_LPDownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Reset(i);
  }
}
    1a18:	08 95       	ret

00001a1a <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    1a1a:	e0 91 da 01 	lds	r30, 0x01DA
    1a1e:	f0 91 db 01 	lds	r31, 0x01DB
    1a22:	85 8d       	ldd	r24, Z+29	; 0x1d
}
    1a24:	08 95       	ret

00001a26 <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a26:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    1a2a:	08 95       	ret

00001a2c <Timebase_LP_Reset>:


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    1a2c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Timebase_LPDownCounter_Reset_All>
  #endif
}
    1a30:	08 95       	ret

00001a32 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1a38:	0e 94 79 00 	call	0xf2	; 0xf2 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    1a3c:	c8 01       	movw	r24, r16
    1a3e:	0e 94 0a 01 	call	0x214	; 0x214 <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a42:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <Timebase_DownCounter_SS_Reset_All>
  Timebase_Timer_Enable(UpdateRateHz);
  Timebase_Reset();
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	0e 94 a5 01 	call	0x34a	; 0x34a <Timebase_LPTimer_Enable>
}


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    1a4e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <Timebase_LPDownCounter_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1a58:	e0 91 da 01 	lds	r30, 0x01DA
    1a5c:	f0 91 db 01 	lds	r31, 0x01DB
    1a60:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a62:	83 ff       	sbrs	r24, 3
    1a64:	0b c0       	rjmp	.+22     	; 0x1a7c <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1a66:	0e 94 47 02 	call	0x48e	; 0x48e <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1a6a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1a6e:	e0 91 da 01 	lds	r30, 0x01DA
    1a72:	f0 91 db 01 	lds	r31, 0x01DB
    1a76:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a78:	87 7f       	andi	r24, 0xF7	; 247
    1a7a:	85 8f       	std	Z+29, r24	; 0x1d
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    1a7c:	e0 91 da 01 	lds	r30, 0x01DA
    1a80:	f0 91 db 01 	lds	r31, 0x01DB
    1a84:	16 8a       	std	Z+22, r1	; 0x16
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    1a86:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a88:	85 ff       	sbrs	r24, 5
    1a8a:	09 c0       	rjmp	.+18     	; 0x1a9e <Timebase_Main_Loop_Executables+0x46>
    Timebase_LPDownCounter_Update_All();
    1a8c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Timebase_LPDownCounter_Update_All>
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
    1a90:	e0 91 da 01 	lds	r30, 0x01DA
    1a94:	f0 91 db 01 	lds	r31, 0x01DB
    1a98:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a9a:	8f 7d       	andi	r24, 0xDF	; 223
    1a9c:	85 8f       	std	Z+29, r24	; 0x1d
    1a9e:	08 95       	ret

00001aa0 <Timebase_ISR_Executables>:
  #endif
}


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    1aa0:	e0 91 da 01 	lds	r30, 0x01DA
    1aa4:	f0 91 db 01 	lds	r31, 0x01DB
    1aa8:	80 89       	ldd	r24, Z+16	; 0x10
    1aaa:	91 89       	ldd	r25, Z+17	; 0x11
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	91 8b       	std	Z+17, r25	; 0x11
    1ab0:	80 8b       	std	Z+16, r24	; 0x10
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1ab2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ab4:	88 60       	ori	r24, 0x08	; 8
    1ab6:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    1ab8:	20 89       	ldd	r18, Z+16	; 0x10
    1aba:	31 89       	ldd	r19, Z+17	; 0x11
    1abc:	80 81       	ld	r24, Z
    1abe:	91 81       	ldd	r25, Z+1	; 0x01
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	68 f0       	brcs	.+26     	; 0x1ae0 <Timebase_ISR_Executables+0x40>
    Timebase->Time.SubSecondsShadow = 0;
    1ac6:	11 8a       	std	Z+17, r1	; 0x11
    1ac8:	10 8a       	std	Z+16, r1	; 0x10
    Timebase->Time.SecondsShadow++;
    1aca:	82 89       	ldd	r24, Z+18	; 0x12
    1acc:	93 89       	ldd	r25, Z+19	; 0x13
    1ace:	a4 89       	ldd	r26, Z+20	; 0x14
    1ad0:	b5 89       	ldd	r27, Z+21	; 0x15
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	a1 1d       	adc	r26, r1
    1ad6:	b1 1d       	adc	r27, r1
    1ad8:	82 8b       	std	Z+18, r24	; 0x12
    1ada:	93 8b       	std	Z+19, r25	; 0x13
    1adc:	a4 8b       	std	Z+20, r26	; 0x14
    1ade:	b5 8b       	std	Z+21, r27	; 0x15
    1ae0:	08 95       	ret

00001ae2 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    1ae2:	1f 92       	push	r1
    1ae4:	0f 92       	push	r0
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	0f 92       	push	r0
    1aea:	11 24       	eor	r1, r1
    1aec:	2f 93       	push	r18
    1aee:	3f 93       	push	r19
    1af0:	4f 93       	push	r20
    1af2:	5f 93       	push	r21
    1af4:	6f 93       	push	r22
    1af6:	7f 93       	push	r23
    1af8:	8f 93       	push	r24
    1afa:	9f 93       	push	r25
    1afc:	af 93       	push	r26
    1afe:	bf 93       	push	r27
    1b00:	ef 93       	push	r30
    1b02:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b04:	e0 91 da 01 	lds	r30, 0x01DA
    1b08:	f0 91 db 01 	lds	r31, 0x01DB
    1b0c:	84 81       	ldd	r24, Z+4	; 0x04
    1b0e:	95 81       	ldd	r25, Z+5	; 0x05
    1b10:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1b12:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <Timebase_ISR_Executables>
}
    1b16:	ff 91       	pop	r31
    1b18:	ef 91       	pop	r30
    1b1a:	bf 91       	pop	r27
    1b1c:	af 91       	pop	r26
    1b1e:	9f 91       	pop	r25
    1b20:	8f 91       	pop	r24
    1b22:	7f 91       	pop	r23
    1b24:	6f 91       	pop	r22
    1b26:	5f 91       	pop	r21
    1b28:	4f 91       	pop	r20
    1b2a:	3f 91       	pop	r19
    1b2c:	2f 91       	pop	r18
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <Timebase_LP_ISR_Executables>:
}


void Timebase_LP_ISR_Executables(void){
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds++;
    1b38:	e0 91 da 01 	lds	r30, 0x01DA
    1b3c:	f0 91 db 01 	lds	r31, 0x01DB
    1b40:	87 89       	ldd	r24, Z+23	; 0x17
    1b42:	90 8d       	ldd	r25, Z+24	; 0x18
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	90 8f       	std	Z+24, r25	; 0x18
    1b48:	87 8b       	std	Z+23, r24	; 0x17
  if(Timebase->Time.LPTimerSubSeconds >= Timebase->Config.LPUpdateRate){
    1b4a:	27 89       	ldd	r18, Z+23	; 0x17
    1b4c:	30 8d       	ldd	r19, Z+24	; 0x18
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	28 17       	cp	r18, r24
    1b54:	39 07       	cpc	r19, r25
    1b56:	68 f0       	brcs	.+26     	; 0x1b72 <Timebase_LP_ISR_Executables+0x3a>
    Timebase->Time.LPTimerSubSeconds = 0;
    1b58:	10 8e       	std	Z+24, r1	; 0x18
    1b5a:	17 8a       	std	Z+23, r1	; 0x17
    Timebase->Time.LPTimerSeconds++;
    1b5c:	81 8d       	ldd	r24, Z+25	; 0x19
    1b5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b60:	a3 8d       	ldd	r26, Z+27	; 0x1b
    1b62:	b4 8d       	ldd	r27, Z+28	; 0x1c
    1b64:	01 96       	adiw	r24, 0x01	; 1
    1b66:	a1 1d       	adc	r26, r1
    1b68:	b1 1d       	adc	r27, r1
    1b6a:	81 8f       	std	Z+25, r24	; 0x19
    1b6c:	92 8f       	std	Z+26, r25	; 0x1a
    1b6e:	a3 8f       	std	Z+27, r26	; 0x1b
    1b70:	b4 8f       	std	Z+28, r27	; 0x1c
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
    1b72:	85 8d       	ldd	r24, Z+29	; 0x1d
    1b74:	80 62       	ori	r24, 0x20	; 32
    1b76:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
}
    1b78:	08 95       	ret

00001b7a <__vector_6>:

/**********************************LPTimer ISR Start*********************************/

#ifdef TIMEBASE_LP_TIMER_ENABLE

ISR(WDT_vect){
    1b7a:	1f 92       	push	r1
    1b7c:	0f 92       	push	r0
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	0f 92       	push	r0
    1b82:	11 24       	eor	r1, r1
    1b84:	2f 93       	push	r18
    1b86:	3f 93       	push	r19
    1b88:	4f 93       	push	r20
    1b8a:	5f 93       	push	r21
    1b8c:	6f 93       	push	r22
    1b8e:	7f 93       	push	r23
    1b90:	8f 93       	push	r24
    1b92:	9f 93       	push	r25
    1b94:	af 93       	push	r26
    1b96:	bf 93       	push	r27
    1b98:	ef 93       	push	r30
    1b9a:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
    1b9c:	e0 e6       	ldi	r30, 0x60	; 96
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	80 64       	ori	r24, 0x40	; 64
    1ba4:	80 83       	st	Z, r24
  Timebase_LP_ISR_Executables();
    1ba6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <Timebase_LP_ISR_Executables>
}
    1baa:	ff 91       	pop	r31
    1bac:	ef 91       	pop	r30
    1bae:	bf 91       	pop	r27
    1bb0:	af 91       	pop	r26
    1bb2:	9f 91       	pop	r25
    1bb4:	8f 91       	pop	r24
    1bb6:	7f 91       	pop	r23
    1bb8:	6f 91       	pop	r22
    1bba:	5f 91       	pop	r21
    1bbc:	4f 91       	pop	r20
    1bbe:	3f 91       	pop	r19
    1bc0:	2f 91       	pop	r18
    1bc2:	0f 90       	pop	r0
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	0f 90       	pop	r0
    1bc8:	1f 90       	pop	r1
    1bca:	18 95       	reti

00001bcc <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    1bcc:	10 92 84 01 	sts	0x0184, r1
    1bd0:	e5 e8       	ldi	r30, 0x85	; 133
    1bd2:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    1bd4:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	ed 38       	cpi	r30, 0x8D	; 141
    1bda:	f8 07       	cpc	r31, r24
    1bdc:	d9 f7       	brne	.-10     	; 0x1bd4 <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    1bde:	10 82       	st	Z, r1
    
  UART.LastRxByte = UART_NULL;
    1be0:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    1be2:	80 e2       	ldi	r24, 0x20	; 32
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	93 a3       	std	Z+35, r25	; 0x23
    1be8:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufIndex = 0;
    1bea:	15 a2       	std	Z+37, r1	; 0x25
    1bec:	14 a2       	std	Z+36, r1	; 0x24
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <UART_Struct_Init+0x2e>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    1bf2:	ec 57       	subi	r30, 0x7C	; 124
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	13 86       	std	Z+11, r1	; 0x0b
  UART.InputNumDigits = UART_NULL;
    
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    1bf8:	2f 5f       	subi	r18, 0xFF	; 255
    1bfa:	80 91 af 01 	lds	r24, 0x01AF
    1bfe:	90 91 b0 01 	lds	r25, 0x01B0
    1c02:	e2 2f       	mov	r30, r18
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	e8 17       	cp	r30, r24
    1c08:	f9 07       	cpc	r31, r25
    1c0a:	98 f3       	brcs	.-26     	; 0x1bf2 <UART_Struct_Init+0x26>
    UART.Buf[i] = UART_NULL;
  }
  
}
    1c0c:	08 95       	ret

00001c0e <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    1c0e:	08 95       	ret

00001c10 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    1c10:	08 95       	ret

00001c12 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    1c12:	9b 01       	movw	r18, r22
    1c14:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1c16:	60 e6       	ldi	r22, 0x60	; 96
    1c18:	73 ee       	ldi	r23, 0xE3	; 227
    1c1a:	86 e1       	ldi	r24, 0x16	; 22
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__udivmodsi4>
    1c22:	21 50       	subi	r18, 0x01	; 1
    1c24:	30 40       	sbci	r19, 0x00	; 0
    1c26:	40 40       	sbci	r20, 0x00	; 0
    1c28:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    1c2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	82 60       	ori	r24, 0x02	; 2
    1c32:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    1c34:	bb 27       	eor	r27, r27
    1c36:	a5 2f       	mov	r26, r21
    1c38:	94 2f       	mov	r25, r20
    1c3a:	83 2f       	mov	r24, r19
    1c3c:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    1c40:	20 93 c4 00 	sts	0x00C4, r18
}
    1c44:	08 95       	ret

00001c46 <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1c46:	e1 ec       	ldi	r30, 0xC1	; 193
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 60       	ori	r24, 0x08	; 8
    1c4e:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	80 93 c2 00 	sts	0x00C2, r24
}
    1c56:	08 95       	ret

00001c58 <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1c58:	e1 ec       	ldi	r30, 0xC1	; 193
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 61       	ori	r24, 0x10	; 16
    1c60:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c62:	86 e0       	ldi	r24, 0x06	; 6
    1c64:	80 93 c2 00 	sts	0x00C2, r24
}
    1c68:	08 95       	ret

00001c6a <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1c6a:	e1 ec       	ldi	r30, 0xC1	; 193
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 68       	ori	r24, 0x80	; 128
    1c72:	80 83       	st	Z, r24
  sei();
    1c74:	78 94       	sei
}
    1c76:	08 95       	ret

00001c78 <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    1c78:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1c7a:	80 91 c0 00 	lds	r24, 0x00C0
    1c7e:	85 ff       	sbrs	r24, 5
    1c80:	fc cf       	rjmp	.-8      	; 0x1c7a <UART_Tx_Byte+0x2>
  UDR0 = val;
    1c82:	90 93 c6 00 	sts	0x00C6, r25
}
    1c86:	08 95       	ret

00001c88 <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    1c92:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    1c94:	80 91 c0 00 	lds	r24, 0x00C0
    1c98:	84 ff       	sbrs	r24, 4
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <UART_Rx_Byte+0x1e>
    val = UDR0;
    1c9c:	80 91 c6 00 	lds	r24, 0x00C6
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = 0x01;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	08 c0       	rjmp	.+16     	; 0x1cb6 <UART_Rx_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    1ca6:	80 91 c0 00 	lds	r24, 0x00C0
    1caa:	83 ff       	sbrs	r24, 3
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <UART_Rx_Byte+0x34>
    val = UDR0;
    1cae:	80 91 c6 00 	lds	r24, 0x00C6
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = 0x02;
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	80 93 84 01 	sts	0x0184, r24
    1cba:	05 c0       	rjmp	.+10     	; 0x1cc6 <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    1cbc:	80 91 c6 00 	lds	r24, 0x00C6
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = 0x00;
    1cc2:	10 92 84 01 	sts	0x0184, r1
  }
  return val;
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1cd0:	10 92 b3 01 	sts	0x01B3, r1
}
    1cd4:	08 95       	ret

00001cd6 <UART_Timer_Init>:

void UART_Timer_Init(void){
  
}
    1cd6:	08 95       	ret

00001cd8 <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  
}
    1cd8:	08 95       	ret

00001cda <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  
}
    1cda:	08 95       	ret

00001cdc <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    1cdc:	80 91 b3 01 	lds	r24, 0x01B3
}
    1ce0:	08 95       	ret

00001ce2 <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return 0;
}
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	08 95       	ret

00001ce8 <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  
}
    1ce8:	08 95       	ret

00001cea <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    1cea:	ac 01       	movw	r20, r24
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	0c c0       	rjmp	.+24     	; 0x1d0c <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    1cf4:	fa 01       	movw	r30, r20
    1cf6:	e2 0f       	add	r30, r18
    1cf8:	f3 1f       	adc	r31, r19
    1cfa:	e0 81       	ld	r30, Z
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1cfc:	80 91 c0 00 	lds	r24, 0x00C0
    1d00:	85 ff       	sbrs	r24, 5
    1d02:	fc cf       	rjmp	.-8      	; 0x1cfc <UART_Tx_Buf+0x12>
  UDR0 = val;
    1d04:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    1d08:	2f 5f       	subi	r18, 0xFF	; 255
    1d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0c:	26 17       	cp	r18, r22
    1d0e:	37 07       	cpc	r19, r23
    1d10:	88 f3       	brcs	.-30     	; 0x1cf4 <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    1d12:	08 95       	ret

00001d14 <UART_Tx_NL>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d14:	80 91 c0 00 	lds	r24, 0x00C0
    1d18:	85 ff       	sbrs	r24, 5
    1d1a:	fc cf       	rjmp	.-8      	; 0x1d14 <UART_Tx_NL>
  UDR0 = val;
    1d1c:	8d e0       	ldi	r24, 0x0D	; 13
    1d1e:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d22:	80 91 c0 00 	lds	r24, 0x00C0
    1d26:	85 ff       	sbrs	r24, 5
    1d28:	fc cf       	rjmp	.-8      	; 0x1d22 <UART_Tx_NL+0xe>
  UDR0 = val;
    1d2a:	8a e0       	ldi	r24, 0x0A	; 10
    1d2c:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    1d30:	08 95       	ret

00001d32 <UART_Tx_SP>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d32:	80 91 c0 00 	lds	r24, 0x00C0
    1d36:	85 ff       	sbrs	r24, 5
    1d38:	fc cf       	rjmp	.-8      	; 0x1d32 <UART_Tx_SP>
  UDR0 = val;
    1d3a:	80 e2       	ldi	r24, 0x20	; 32
    1d3c:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    1d40:	08 95       	ret

00001d42 <UART_Tx_CM>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d42:	80 91 c0 00 	lds	r24, 0x00C0
    1d46:	85 ff       	sbrs	r24, 5
    1d48:	fc cf       	rjmp	.-8      	; 0x1d42 <UART_Tx_CM>
  UDR0 = val;
    1d4a:	8c e2       	ldi	r24, 0x2C	; 44
    1d4c:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    1d50:	08 95       	ret

00001d52 <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    1d52:	ac 01       	movw	r20, r24
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	07 c0       	rjmp	.+14     	; 0x1d66 <UART_Tx_Text+0x14>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d58:	80 91 c0 00 	lds	r24, 0x00C0
    1d5c:	85 ff       	sbrs	r24, 5
    1d5e:	fc cf       	rjmp	.-8      	; 0x1d58 <UART_Tx_Text+0x6>
  UDR0 = val;
    1d60:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    1d64:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    1d66:	fa 01       	movw	r30, r20
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f1 1d       	adc	r31, r1
    1d6c:	e0 81       	ld	r30, Z
    1d6e:	ee 23       	and	r30, r30
    1d70:	99 f7       	brne	.-26     	; 0x1d58 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    1d72:	08 95       	ret

00001d74 <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    1d74:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UART_Tx_NL();
    1d78:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <UART_Tx_NL>
}
    1d7c:	08 95       	ret

00001d7e <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    1d7e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d82:	80 91 c0 00 	lds	r24, 0x00C0
    1d86:	85 ff       	sbrs	r24, 5
    1d88:	fc cf       	rjmp	.-8      	; 0x1d82 <UART_Tx_Text_SP+0x4>
  UDR0 = val;
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    1d90:	08 95       	ret

00001d92 <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    1d92:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d96:	80 91 c0 00 	lds	r24, 0x00C0
    1d9a:	85 ff       	sbrs	r24, 5
    1d9c:	fc cf       	rjmp	.-8      	; 0x1d96 <UART_Tx_Text_CM+0x4>
  UDR0 = val;
    1d9e:	8c e2       	ldi	r24, 0x2C	; 44
    1da0:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    1da4:	08 95       	ret

00001da6 <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    1da6:	bf 92       	push	r11
    1da8:	cf 92       	push	r12
    1daa:	df 92       	push	r13
    1dac:	ef 92       	push	r14
    1dae:	ff 92       	push	r15
    1db0:	0f 93       	push	r16
    1db2:	1f 93       	push	r17
    1db4:	6b 01       	movw	r12, r22
    1db6:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    1db8:	61 15       	cp	r22, r1
    1dba:	71 05       	cpc	r23, r1
    1dbc:	81 05       	cpc	r24, r1
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	31 f4       	brne	.+12     	; 0x1dce <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    1dc2:	10 92 85 01 	sts	0x0185, r1
    UART.InputNumDigits = 1;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	80 93 8d 01 	sts	0x018D, r24
    1dcc:	23 c0       	rjmp	.+70     	; 0x1e14 <UART_Determine_Digit_Numbers+0x6e>
    1dce:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    1dd0:	0b 2d       	mov	r16, r11
    1dd2:	10 e0       	ldi	r17, 0x00	; 0
    1dd4:	0c 57       	subi	r16, 0x7C	; 124
    1dd6:	1e 4f       	sbci	r17, 0xFE	; 254
    1dd8:	c7 01       	movw	r24, r14
    1dda:	b6 01       	movw	r22, r12
    1ddc:	2a e0       	ldi	r18, 0x0A	; 10
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__udivmodsi4>
    1de8:	f8 01       	movw	r30, r16
    1dea:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    1dec:	c7 01       	movw	r24, r14
    1dee:	b6 01       	movw	r22, r12
    1df0:	2a e0       	ldi	r18, 0x0A	; 10
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	50 e0       	ldi	r21, 0x00	; 0
    1df8:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__udivmodsi4>
    1dfc:	c9 01       	movw	r24, r18
    1dfe:	da 01       	movw	r26, r20
    1e00:	6c 01       	movw	r12, r24
    1e02:	7d 01       	movw	r14, r26
      i++;
    1e04:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    1e06:	c1 14       	cp	r12, r1
    1e08:	d1 04       	cpc	r13, r1
    1e0a:	e1 04       	cpc	r14, r1
    1e0c:	f1 04       	cpc	r15, r1
    1e0e:	01 f7       	brne	.-64     	; 0x1dd0 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    1e10:	b0 92 8d 01 	sts	0x018D, r11
  }
}
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	08 95       	ret

00001e24 <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1e24:	e0 91 8d 01 	lds	r30, 0x018D
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1e2a:	2e 2f       	mov	r18, r30
    1e2c:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    1e2e:	e2 2f       	mov	r30, r18
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	ec 57       	subi	r30, 0x7C	; 124
    1e34:	fe 4f       	sbci	r31, 0xFE	; 254
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e38:	80 91 c0 00 	lds	r24, 0x00C0
    1e3c:	85 ff       	sbrs	r24, 5
    1e3e:	fc cf       	rjmp	.-8      	; 0x1e38 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    1e40:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    1e42:	90 93 c6 00 	sts	0x00C6, r25
    1e46:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1e48:	ee 23       	and	r30, r30
    1e4a:	79 f7       	brne	.-34     	; 0x1e2a <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    1e4c:	08 95       	ret

00001e4e <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    1e4e:	9b 01       	movw	r18, r22
    1e50:	ac 01       	movw	r20, r24
  if(num < 0){
    1e52:	97 ff       	sbrs	r25, 7
    1e54:	0e c0       	rjmp	.+28     	; 0x1e72 <UART_Tx_Number+0x24>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e56:	80 91 c0 00 	lds	r24, 0x00C0
    1e5a:	85 ff       	sbrs	r24, 5
    1e5c:	fc cf       	rjmp	.-8      	; 0x1e56 <UART_Tx_Number+0x8>
  UDR0 = val;
    1e5e:	8d e2       	ldi	r24, 0x2D	; 45
    1e60:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    1e64:	50 95       	com	r21
    1e66:	40 95       	com	r20
    1e68:	30 95       	com	r19
    1e6a:	21 95       	neg	r18
    1e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e70:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    1e72:	ca 01       	movw	r24, r20
    1e74:	b9 01       	movw	r22, r18
    1e76:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    1e7a:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <UART_Tx_Number_Digits>
}
    1e7e:	08 95       	ret

00001e80 <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    1e80:	1f 93       	push	r17
    1e82:	cf 93       	push	r28
    1e84:	df 93       	push	r29
    1e86:	ab 01       	movw	r20, r22
    1e88:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    1e8a:	4f 3f       	cpi	r20, 0xFF	; 255
    1e8c:	51 05       	cpc	r21, r1
    1e8e:	61 05       	cpc	r22, r1
    1e90:	71 05       	cpc	r23, r1
    1e92:	09 f0       	breq	.+2      	; 0x1e96 <UART_Tx_Number_Hex+0x16>
    1e94:	28 f4       	brcc	.+10     	; 0x1ea0 <UART_Tx_Number_Hex+0x20>
    1e96:	e8 e0       	ldi	r30, 0x08	; 8
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	c2 e0       	ldi	r28, 0x02	; 2
    1e9c:	d0 e0       	ldi	r29, 0x00	; 0
    1e9e:	11 c0       	rjmp	.+34     	; 0x1ec2 <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    1ea0:	40 30       	cpi	r20, 0x00	; 0
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	58 07       	cpc	r21, r24
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	68 07       	cpc	r22, r24
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	78 07       	cpc	r23, r24
    1eae:	28 f0       	brcs	.+10     	; 0x1eba <UART_Tx_Number_Hex+0x3a>
    1eb0:	e0 e2       	ldi	r30, 0x20	; 32
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	c8 e0       	ldi	r28, 0x08	; 8
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	04 c0       	rjmp	.+8      	; 0x1ec2 <UART_Tx_Number_Hex+0x42>
    1eba:	e0 e1       	ldi	r30, 0x10	; 16
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	c4 e0       	ldi	r28, 0x04	; 4
    1ec0:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ec2:	80 91 c0 00 	lds	r24, 0x00C0
    1ec6:	85 ff       	sbrs	r24, 5
    1ec8:	fc cf       	rjmp	.-8      	; 0x1ec2 <UART_Tx_Number_Hex+0x42>
  UDR0 = val;
    1eca:	80 e3       	ldi	r24, 0x30	; 48
    1ecc:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ed0:	80 91 c0 00 	lds	r24, 0x00C0
    1ed4:	85 ff       	sbrs	r24, 5
    1ed6:	fc cf       	rjmp	.-8      	; 0x1ed0 <UART_Tx_Number_Hex+0x50>
  UDR0 = val;
    1ed8:	88 e7       	ldi	r24, 0x78	; 120
    1eda:	80 93 c6 00 	sts	0x00C6, r24
    1ede:	10 e0       	ldi	r17, 0x00	; 0
    1ee0:	1f c0       	rjmp	.+62     	; 0x1f20 <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    1ee2:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    1ee4:	db 01       	movw	r26, r22
    1ee6:	ca 01       	movw	r24, r20
    1ee8:	0e 2e       	mov	r0, r30
    1eea:	04 c0       	rjmp	.+8      	; 0x1ef4 <UART_Tx_Number_Hex+0x74>
    1eec:	b6 95       	lsr	r27
    1eee:	a7 95       	ror	r26
    1ef0:	97 95       	ror	r25
    1ef2:	87 95       	ror	r24
    1ef4:	0a 94       	dec	r0
    1ef6:	d2 f7       	brpl	.-12     	; 0x1eec <UART_Tx_Number_Hex+0x6c>
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	8f 70       	andi	r24, 0x0F	; 15
    1efc:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    1efe:	8a 30       	cpi	r24, 0x0A	; 10
    1f00:	91 05       	cpc	r25, r1
    1f02:	20 f0       	brcs	.+8      	; 0x1f0c <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    1f04:	9c 01       	movw	r18, r24
    1f06:	29 5c       	subi	r18, 0xC9	; 201
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    1f0c:	9c 01       	movw	r18, r24
    1f0e:	20 5d       	subi	r18, 0xD0	; 208
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f12:	80 91 c0 00 	lds	r24, 0x00C0
    1f16:	85 ff       	sbrs	r24, 5
    1f18:	fc cf       	rjmp	.-8      	; 0x1f12 <UART_Tx_Number_Hex+0x92>
  UDR0 = val;
    1f1a:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    1f1e:	1f 5f       	subi	r17, 0xFF	; 255
    1f20:	81 2f       	mov	r24, r17
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	8c 17       	cp	r24, r28
    1f26:	9d 07       	cpc	r25, r29
    1f28:	e0 f2       	brcs	.-72     	; 0x1ee2 <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1f2a:	df 91       	pop	r29
    1f2c:	cf 91       	pop	r28
    1f2e:	1f 91       	pop	r17
    1f30:	08 95       	ret

00001f32 <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    1f32:	cf 92       	push	r12
    1f34:	df 92       	push	r13
    1f36:	ef 92       	push	r14
    1f38:	ff 92       	push	r15
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	ab 01       	movw	r20, r22
    1f44:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    1f46:	4f 3f       	cpi	r20, 0xFF	; 255
    1f48:	51 05       	cpc	r21, r1
    1f4a:	61 05       	cpc	r22, r1
    1f4c:	71 05       	cpc	r23, r1
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <UART_Tx_Number_Bin+0x20>
    1f50:	10 f4       	brcc	.+4      	; 0x1f56 <UART_Tx_Number_Bin+0x24>
    1f52:	97 e0       	ldi	r25, 0x07	; 7
    1f54:	0b c0       	rjmp	.+22     	; 0x1f6c <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    1f56:	40 30       	cpi	r20, 0x00	; 0
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	58 07       	cpc	r21, r24
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	68 07       	cpc	r22, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	78 07       	cpc	r23, r24
    1f64:	10 f0       	brcs	.+4      	; 0x1f6a <UART_Tx_Number_Bin+0x38>
    1f66:	9f e1       	ldi	r25, 0x1F	; 31
    1f68:	01 c0       	rjmp	.+2      	; 0x1f6c <UART_Tx_Number_Bin+0x3a>
    1f6a:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f6c:	80 91 c0 00 	lds	r24, 0x00C0
    1f70:	85 ff       	sbrs	r24, 5
    1f72:	fc cf       	rjmp	.-8      	; 0x1f6c <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;
    1f74:	80 e3       	ldi	r24, 0x30	; 48
    1f76:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f7a:	80 91 c0 00 	lds	r24, 0x00C0
    1f7e:	85 ff       	sbrs	r24, 5
    1f80:	fc cf       	rjmp	.-8      	; 0x1f7a <UART_Tx_Number_Bin+0x48>
  UDR0 = val;
    1f82:	82 e6       	ldi	r24, 0x62	; 98
    1f84:	80 93 c6 00 	sts	0x00C6, r24
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    1f8c:	e9 2f       	mov	r30, r25
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    1f90:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1f92:	11 e3       	ldi	r17, 0x31	; 49
    1f94:	ef 01       	movw	r28, r30
    1f96:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1f98:	cf 01       	movw	r24, r30
    1f9a:	82 1b       	sub	r24, r18
    1f9c:	93 0b       	sbc	r25, r19
    1f9e:	6a 01       	movw	r12, r20
    1fa0:	7b 01       	movw	r14, r22
    1fa2:	04 c0       	rjmp	.+8      	; 0x1fac <UART_Tx_Number_Bin+0x7a>
    1fa4:	f6 94       	lsr	r15
    1fa6:	e7 94       	ror	r14
    1fa8:	d7 94       	ror	r13
    1faa:	c7 94       	ror	r12
    1fac:	8a 95       	dec	r24
    1fae:	d2 f7       	brpl	.-12     	; 0x1fa4 <UART_Tx_Number_Bin+0x72>
    1fb0:	d7 01       	movw	r26, r14
    1fb2:	c6 01       	movw	r24, r12
    1fb4:	81 70       	andi	r24, 0x01	; 1
    1fb6:	90 70       	andi	r25, 0x00	; 0
    1fb8:	89 2b       	or	r24, r25
    1fba:	39 f0       	breq	.+14     	; 0x1fca <UART_Tx_Number_Bin+0x98>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1fbc:	80 91 c0 00 	lds	r24, 0x00C0
    1fc0:	85 ff       	sbrs	r24, 5
    1fc2:	fc cf       	rjmp	.-8      	; 0x1fbc <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;
    1fc4:	10 93 c6 00 	sts	0x00C6, r17
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <UART_Tx_Number_Bin+0xa4>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1fca:	80 91 c0 00 	lds	r24, 0x00C0
    1fce:	85 ff       	sbrs	r24, 5
    1fd0:	fc cf       	rjmp	.-8      	; 0x1fca <UART_Tx_Number_Bin+0x98>
  UDR0 = val;
    1fd2:	00 93 c6 00 	sts	0x00C6, r16
    1fd6:	2f 5f       	subi	r18, 0xFF	; 255
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1fda:	2c 17       	cp	r18, r28
    1fdc:	3d 07       	cpc	r19, r29
    1fde:	e1 f6       	brne	.-72     	; 0x1f98 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	ff 90       	pop	r15
    1fea:	ef 90       	pop	r14
    1fec:	df 90       	pop	r13
    1fee:	cf 90       	pop	r12
    1ff0:	08 95       	ret

00001ff2 <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    1ff2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <UART_Tx_Number>
  UART_Tx_NL();
    1ff6:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <UART_Tx_NL>
}
    1ffa:	08 95       	ret

00001ffc <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    1ffc:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2000:	80 91 c0 00 	lds	r24, 0x00C0
    2004:	85 ff       	sbrs	r24, 5
    2006:	fc cf       	rjmp	.-8      	; 0x2000 <UART_Tx_Number_SP+0x4>
  UDR0 = val;
    2008:	80 e2       	ldi	r24, 0x20	; 32
    200a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    200e:	08 95       	ret

00002010 <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    2010:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2014:	80 91 c0 00 	lds	r24, 0x00C0
    2018:	85 ff       	sbrs	r24, 5
    201a:	fc cf       	rjmp	.-8      	; 0x2014 <UART_Tx_Number_CM+0x4>
  UDR0 = val;
    201c:	8c e2       	ldi	r24, 0x2C	; 44
    201e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    2022:	08 95       	ret

00002024 <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    2024:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <UART_Tx_Number_Hex>
  UART_Tx_NL();
    2028:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <UART_Tx_NL>
}
    202c:	08 95       	ret

0000202e <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    202e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2032:	80 91 c0 00 	lds	r24, 0x00C0
    2036:	85 ff       	sbrs	r24, 5
    2038:	fc cf       	rjmp	.-8      	; 0x2032 <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;
    203a:	80 e2       	ldi	r24, 0x20	; 32
    203c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    2040:	08 95       	ret

00002042 <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    2042:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2046:	80 91 c0 00 	lds	r24, 0x00C0
    204a:	85 ff       	sbrs	r24, 5
    204c:	fc cf       	rjmp	.-8      	; 0x2046 <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;
    204e:	8c e2       	ldi	r24, 0x2C	; 44
    2050:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    2054:	08 95       	ret

00002056 <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    2056:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <UART_Tx_Number_Bin>
  UART_Tx_NL();
    205a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <UART_Tx_NL>
}
    205e:	08 95       	ret

00002060 <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    2060:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2064:	80 91 c0 00 	lds	r24, 0x00C0
    2068:	85 ff       	sbrs	r24, 5
    206a:	fc cf       	rjmp	.-8      	; 0x2064 <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;
    206c:	80 e2       	ldi	r24, 0x20	; 32
    206e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    2072:	08 95       	ret

00002074 <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    2074:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2078:	80 91 c0 00 	lds	r24, 0x00C0
    207c:	85 ff       	sbrs	r24, 5
    207e:	fc cf       	rjmp	.-8      	; 0x2078 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;
    2080:	8c e2       	ldi	r24, 0x2C	; 44
    2082:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    2086:	08 95       	ret

00002088 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    2088:	ef 92       	push	r14
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	7a 01       	movw	r14, r20
    2092:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2094:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2098:	80 91 c0 00 	lds	r24, 0x00C0
    209c:	85 ff       	sbrs	r24, 5
    209e:	fc cf       	rjmp	.-8      	; 0x2098 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;
    20a0:	80 e2       	ldi	r24, 0x20	; 32
    20a2:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    20a6:	c8 01       	movw	r24, r16
    20a8:	b7 01       	movw	r22, r14
    20aa:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <UART_Tx_Number_NL>
}
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	08 95       	ret

000020b8 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	0f 93       	push	r16
    20be:	1f 93       	push	r17
    20c0:	7a 01       	movw	r14, r20
    20c2:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    20c4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    20c8:	80 91 c0 00 	lds	r24, 0x00C0
    20cc:	85 ff       	sbrs	r24, 5
    20ce:	fc cf       	rjmp	.-8      	; 0x20c8 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;
    20d0:	80 e2       	ldi	r24, 0x20	; 32
    20d2:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    20d6:	c8 01       	movw	r24, r16
    20d8:	b7 01       	movw	r22, r14
    20da:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <UART_Tx_Number_SP>
}
    20de:	1f 91       	pop	r17
    20e0:	0f 91       	pop	r16
    20e2:	ff 90       	pop	r15
    20e4:	ef 90       	pop	r14
    20e6:	08 95       	ret

000020e8 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    20e8:	ef 92       	push	r14
    20ea:	ff 92       	push	r15
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	7a 01       	movw	r14, r20
    20f2:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    20f4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    20f8:	80 91 c0 00 	lds	r24, 0x00C0
    20fc:	85 ff       	sbrs	r24, 5
    20fe:	fc cf       	rjmp	.-8      	; 0x20f8 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;
    2100:	80 e2       	ldi	r24, 0x20	; 32
    2102:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    2106:	c8 01       	movw	r24, r16
    2108:	b7 01       	movw	r22, r14
    210a:	0e 94 08 10 	call	0x2010	; 0x2010 <UART_Tx_Number_CM>
}
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	08 95       	ret

00002118 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    2118:	ef 92       	push	r14
    211a:	ff 92       	push	r15
    211c:	0f 93       	push	r16
    211e:	1f 93       	push	r17
    2120:	7a 01       	movw	r14, r20
    2122:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2124:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2128:	80 91 c0 00 	lds	r24, 0x00C0
    212c:	85 ff       	sbrs	r24, 5
    212e:	fc cf       	rjmp	.-8      	; 0x2128 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;
    2130:	80 e2       	ldi	r24, 0x20	; 32
    2132:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    2136:	c8 01       	movw	r24, r16
    2138:	b7 01       	movw	r22, r14
    213a:	0e 94 12 10 	call	0x2024	; 0x2024 <UART_Tx_Number_Hex_NL>
}
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	08 95       	ret

00002148 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	7a 01       	movw	r14, r20
    2152:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2154:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2158:	80 91 c0 00 	lds	r24, 0x00C0
    215c:	85 ff       	sbrs	r24, 5
    215e:	fc cf       	rjmp	.-8      	; 0x2158 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;
    2160:	80 e2       	ldi	r24, 0x20	; 32
    2162:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    2166:	c8 01       	movw	r24, r16
    2168:	b7 01       	movw	r22, r14
    216a:	0e 94 17 10 	call	0x202e	; 0x202e <UART_Tx_Number_Hex_SP>
}
    216e:	1f 91       	pop	r17
    2170:	0f 91       	pop	r16
    2172:	ff 90       	pop	r15
    2174:	ef 90       	pop	r14
    2176:	08 95       	ret

00002178 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	7a 01       	movw	r14, r20
    2182:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2184:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2188:	80 91 c0 00 	lds	r24, 0x00C0
    218c:	85 ff       	sbrs	r24, 5
    218e:	fc cf       	rjmp	.-8      	; 0x2188 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;
    2190:	80 e2       	ldi	r24, 0x20	; 32
    2192:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    2196:	c8 01       	movw	r24, r16
    2198:	b7 01       	movw	r22, r14
    219a:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_Tx_Number_Hex_CM>
}
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	08 95       	ret

000021a8 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    21a8:	ef 92       	push	r14
    21aa:	ff 92       	push	r15
    21ac:	0f 93       	push	r16
    21ae:	1f 93       	push	r17
    21b0:	7a 01       	movw	r14, r20
    21b2:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    21b4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    21b8:	80 91 c0 00 	lds	r24, 0x00C0
    21bc:	85 ff       	sbrs	r24, 5
    21be:	fc cf       	rjmp	.-8      	; 0x21b8 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;
    21c0:	80 e2       	ldi	r24, 0x20	; 32
    21c2:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    21c6:	c8 01       	movw	r24, r16
    21c8:	b7 01       	movw	r22, r14
    21ca:	0e 94 2b 10 	call	0x2056	; 0x2056 <UART_Tx_Number_Bin_NL>
}
    21ce:	1f 91       	pop	r17
    21d0:	0f 91       	pop	r16
    21d2:	ff 90       	pop	r15
    21d4:	ef 90       	pop	r14
    21d6:	08 95       	ret

000021d8 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    21d8:	ef 92       	push	r14
    21da:	ff 92       	push	r15
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	7a 01       	movw	r14, r20
    21e2:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    21e4:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    21e8:	80 91 c0 00 	lds	r24, 0x00C0
    21ec:	85 ff       	sbrs	r24, 5
    21ee:	fc cf       	rjmp	.-8      	; 0x21e8 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;
    21f0:	80 e2       	ldi	r24, 0x20	; 32
    21f2:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    21f6:	c8 01       	movw	r24, r16
    21f8:	b7 01       	movw	r22, r14
    21fa:	0e 94 30 10 	call	0x2060	; 0x2060 <UART_Tx_Number_Bin_SP>
}
    21fe:	1f 91       	pop	r17
    2200:	0f 91       	pop	r16
    2202:	ff 90       	pop	r15
    2204:	ef 90       	pop	r14
    2206:	08 95       	ret

00002208 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    2208:	ef 92       	push	r14
    220a:	ff 92       	push	r15
    220c:	0f 93       	push	r16
    220e:	1f 93       	push	r17
    2210:	7a 01       	movw	r14, r20
    2212:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2214:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2218:	80 91 c0 00 	lds	r24, 0x00C0
    221c:	85 ff       	sbrs	r24, 5
    221e:	fc cf       	rjmp	.-8      	; 0x2218 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;
    2220:	80 e2       	ldi	r24, 0x20	; 32
    2222:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    2226:	c8 01       	movw	r24, r16
    2228:	b7 01       	movw	r22, r14
    222a:	0e 94 3a 10 	call	0x2074	; 0x2074 <UART_Tx_Number_Bin_CM>
}
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	ff 90       	pop	r15
    2234:	ef 90       	pop	r14
    2236:	08 95       	ret

00002238 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    223c:	fc 01       	movw	r30, r24
    223e:	ec 57       	subi	r30, 0x7C	; 124
    2240:	fe 4f       	sbci	r31, 0xFE	; 254
    2242:	13 86       	std	Z+11, r1	; 0x0b
    2244:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    2246:	80 32       	cpi	r24, 0x20	; 32
    2248:	91 05       	cpc	r25, r1
    224a:	c1 f7       	brne	.-16     	; 0x223c <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    224c:	10 92 b2 01 	sts	0x01B2, r1
    2250:	10 92 b1 01 	sts	0x01B1, r1
}
    2254:	08 95       	ret

00002256 <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2256:	fc 01       	movw	r30, r24
    2258:	ec 57       	subi	r30, 0x7C	; 124
    225a:	fe 4f       	sbci	r31, 0xFE	; 254
    225c:	83 85       	ldd	r24, Z+11	; 0x0b
}
    225e:	08 95       	ret

00002260 <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2260:	80 91 b1 01 	lds	r24, 0x01B1
    2264:	90 91 b2 01 	lds	r25, 0x01B2
}
    2268:	08 95       	ret

0000226a <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
	return UART.Timer.DataAvailable;
    226a:	80 91 b4 01 	lds	r24, 0x01B4
}
    226e:	08 95       	ret

00002270 <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
	UART.Timer.DataAvailable = 0;
    2270:	10 92 b4 01 	sts	0x01B4, r1
}
    2274:	08 95       	ret

00002276 <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2276:	80 91 b1 01 	lds	r24, 0x01B1
    227a:	90 91 b2 01 	lds	r25, 0x01B2
}


uint8_t UART_Data_Len_Get(void){
	return UART_Buf_Get_Index();
}
    227e:	08 95       	ret

00002280 <UART_Data_Copy_Buf>:



void UART_Data_Copy_Buf(uint8_t *buf){
    2280:	ac 01       	movw	r20, r24
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	0a c0       	rjmp	.+20     	; 0x229c <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2288:	f9 01       	movw	r30, r18
    228a:	ec 57       	subi	r30, 0x7C	; 124
    228c:	fe 4f       	sbci	r31, 0xFE	; 254
    228e:	83 85       	ldd	r24, Z+11	; 0x0b



void UART_Data_Copy_Buf(uint8_t *buf){
	for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
		buf[i] = UART_Buf_Get(i);
    2290:	fa 01       	movw	r30, r20
    2292:	e2 0f       	add	r30, r18
    2294:	f3 1f       	adc	r31, r19
    2296:	80 83       	st	Z, r24
}



void UART_Data_Copy_Buf(uint8_t *buf){
	for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    229c:	80 91 b1 01 	lds	r24, 0x01B1
    22a0:	90 91 b2 01 	lds	r25, 0x01B2
}



void UART_Data_Copy_Buf(uint8_t *buf){
	for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	70 f3       	brcs	.-36     	; 0x2288 <UART_Data_Copy_Buf+0x8>
		buf[i] = UART_Buf_Get(i);
	}
}
    22ac:	08 95       	ret

000022ae <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    22ae:	cf 93       	push	r28
    22b0:	df 93       	push	r29


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
	return UART.Timer.DataAvailable;
    22b2:	80 91 b4 01 	lds	r24, 0x01B4
	}
}


void UART_Data_Print_Buf(void){
	if(UART_Data_Available()){
    22b6:	88 23       	and	r24, r24
    22b8:	a9 f0       	breq	.+42     	; 0x22e4 <UART_Data_Print_Buf+0x36>
    22ba:	c0 e0       	ldi	r28, 0x00	; 0
    22bc:	d0 e0       	ldi	r29, 0x00	; 0
    22be:	0a c0       	rjmp	.+20     	; 0x22d4 <UART_Data_Print_Buf+0x26>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    22c0:	fe 01       	movw	r30, r28
    22c2:	ec 57       	subi	r30, 0x7C	; 124
    22c4:	fe 4f       	sbci	r31, 0xFE	; 254
    22c6:	63 85       	ldd	r22, Z+11	; 0x0b


void UART_Data_Print_Buf(void){
	if(UART_Data_Available()){
	  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
		  UART_Tx_Number_Hex( UART_Buf_Get(i) );
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <UART_Tx_Number_Hex>
}


void UART_Data_Print_Buf(void){
	if(UART_Data_Available()){
	  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    22d2:	21 96       	adiw	r28, 0x01	; 1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    22d4:	80 91 b1 01 	lds	r24, 0x01B1
    22d8:	90 91 b2 01 	lds	r25, 0x01B2
}


void UART_Data_Print_Buf(void){
	if(UART_Data_Available()){
	  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	c8 17       	cp	r28, r24
    22e0:	d9 07       	cpc	r29, r25
    22e2:	70 f3       	brcs	.-36     	; 0x22c0 <UART_Data_Print_Buf+0x12>
		  UART_Tx_Number_Hex( UART_Buf_Get(i) );
	  }
  }
	UART_Tx_NL();
    22e4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <UART_Tx_NL>
}
    22e8:	df 91       	pop	r29
    22ea:	cf 91       	pop	r28
    22ec:	08 95       	ret

000022ee <UART_ISR_Handler>:


/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    22ee:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <UART_Rx_Byte>
    22f2:	80 93 8e 01 	sts	0x018E, r24
  if(UART.Error == 0x00){
    22f6:	80 91 84 01 	lds	r24, 0x0184
    22fa:	88 23       	and	r24, r24
    22fc:	11 f5       	brne	.+68     	; 0x2342 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    22fe:	e0 91 b1 01 	lds	r30, 0x01B1
    2302:	f0 91 b2 01 	lds	r31, 0x01B2
    2306:	80 91 8e 01 	lds	r24, 0x018E
    230a:	ec 57       	subi	r30, 0x7C	; 124
    230c:	fe 4f       	sbci	r31, 0xFE	; 254
    230e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    2310:	80 91 b1 01 	lds	r24, 0x01B1
    2314:	90 91 b2 01 	lds	r25, 0x01B2
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	90 93 b2 01 	sts	0x01B2, r25
    231e:	80 93 b1 01 	sts	0x01B1, r24

    if(UART.BufIndex >= UART.BufSize){
    2322:	20 91 b1 01 	lds	r18, 0x01B1
    2326:	30 91 b2 01 	lds	r19, 0x01B2
    232a:	80 91 af 01 	lds	r24, 0x01AF
    232e:	90 91 b0 01 	lds	r25, 0x01B0
    2332:	28 17       	cp	r18, r24
    2334:	39 07       	cpc	r19, r25
    2336:	38 f0       	brcs	.+14     	; 0x2346 <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    2338:	10 92 b2 01 	sts	0x01B2, r1
    233c:	10 92 b1 01 	sts	0x01B1, r1
    2340:	08 95       	ret
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    2342:	10 92 8e 01 	sts	0x018E, r1
    2346:	08 95       	ret

00002348 <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    2348:	1f 92       	push	r1
    234a:	0f 92       	push	r0
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	0f 92       	push	r0
    2350:	11 24       	eor	r1, r1
    2352:	2f 93       	push	r18
    2354:	3f 93       	push	r19
    2356:	4f 93       	push	r20
    2358:	5f 93       	push	r21
    235a:	6f 93       	push	r22
    235c:	7f 93       	push	r23
    235e:	8f 93       	push	r24
    2360:	9f 93       	push	r25
    2362:	af 93       	push	r26
    2364:	bf 93       	push	r27
    2366:	ef 93       	push	r30
    2368:	ff 93       	push	r31
  UART_ISR_Handler();
    236a:	0e 94 77 11 	call	0x22ee	; 0x22ee <UART_ISR_Handler>
}
    236e:	ff 91       	pop	r31
    2370:	ef 91       	pop	r30
    2372:	bf 91       	pop	r27
    2374:	af 91       	pop	r26
    2376:	9f 91       	pop	r25
    2378:	8f 91       	pop	r24
    237a:	7f 91       	pop	r23
    237c:	6f 91       	pop	r22
    237e:	5f 91       	pop	r21
    2380:	4f 91       	pop	r20
    2382:	3f 91       	pop	r19
    2384:	2f 91       	pop	r18
    2386:	0f 90       	pop	r0
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	0f 90       	pop	r0
    238c:	1f 90       	pop	r1
    238e:	18 95       	reti

00002390 <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    2390:	36 2f       	mov	r19, r22
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	28 27       	eor	r18, r24
    2396:	39 27       	eor	r19, r25
    2398:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    239a:	61 e2       	ldi	r22, 0x21	; 33
    239c:	70 e1       	ldi	r23, 0x10	; 16
    239e:	c9 01       	movw	r24, r18
    23a0:	88 0f       	add	r24, r24
    23a2:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    23a4:	37 ff       	sbrs	r19, 7
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    23a8:	9c 01       	movw	r18, r24
    23aa:	26 27       	eor	r18, r22
    23ac:	37 27       	eor	r19, r23
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    23b0:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    23b2:	4f 5f       	subi	r20, 0xFF	; 255
    23b4:	48 30       	cpi	r20, 0x08	; 8
    23b6:	99 f7       	brne	.-26     	; 0x239e <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    23b8:	c9 01       	movw	r24, r18
    23ba:	08 95       	ret

000023bc <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    23bc:	0f 93       	push	r16
    23be:	1f 93       	push	r17
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	06 2f       	mov	r16, r22
    23c6:	ec 01       	movw	r28, r24
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	10 e0       	ldi	r17, 0x00	; 0
    23ce:	06 c0       	rjmp	.+12     	; 0x23dc <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    23d0:	c9 01       	movw	r24, r18
    23d2:	69 91       	ld	r22, Y+
    23d4:	0e 94 c8 11 	call	0x2390	; 0x2390 <UART_CRC_Calculate_Byte>
    23d8:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    23da:	1f 5f       	subi	r17, 0xFF	; 255
    23dc:	10 17       	cp	r17, r16
    23de:	c0 f3       	brcs	.-16     	; 0x23d0 <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    23e0:	c9 01       	movw	r24, r18
    23e2:	df 91       	pop	r29
    23e4:	cf 91       	pop	r28
    23e6:	1f 91       	pop	r17
    23e8:	0f 91       	pop	r16
    23ea:	08 95       	ret

000023ec <UART_RX_Packet_CRC_Check>:
/*******************UART CRC Functions End*****************/




void UART_RX_Packet_CRC_Check(void){
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    23f0:	01 eb       	ldi	r16, 0xB1	; 177
    23f2:	11 e0       	ldi	r17, 0x01	; 1
    23f4:	60 91 b1 01 	lds	r22, 0x01B1
    23f8:	70 91 b2 01 	lds	r23, 0x01B2



void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
    23fc:	62 50       	subi	r22, 0x02	; 2
    23fe:	c8 01       	movw	r24, r16
    2400:	82 97       	sbiw	r24, 0x22	; 34
    2402:	0e 94 de 11 	call	0x23bc	; 0x23bc <UART_CRC_Calculate_Block>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2406:	e0 91 b1 01 	lds	r30, 0x01B1
    240a:	f0 91 b2 01 	lds	r31, 0x01B2


void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	32 97       	sbiw	r30, 0x02	; 2
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2412:	0d 52       	subi	r16, 0x2D	; 45
    2414:	10 40       	sbci	r17, 0x00	; 0
    2416:	e0 0f       	add	r30, r16
    2418:	f1 1f       	adc	r31, r17
    241a:	23 85       	ldd	r18, Z+11	; 0x0b

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
    241c:	52 2f       	mov	r21, r18
    241e:	40 e0       	ldi	r20, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2420:	20 91 b1 01 	lds	r18, 0x01B1
    2424:	30 91 b2 01 	lds	r19, 0x01B2
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	21 50       	subi	r18, 0x01	; 1
    242c:	30 40       	sbci	r19, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    242e:	02 0f       	add	r16, r18
    2430:	13 1f       	adc	r17, r19
    2432:	f8 01       	movw	r30, r16
    2434:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block(UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	42 2b       	or	r20, r18
    243a:	53 2b       	or	r21, r19
  UART.RxPacket.CalculatedCRC = crc_calc;
    243c:	90 93 d7 01 	sts	0x01D7, r25
    2440:	80 93 d6 01 	sts	0x01D6, r24
  UART.RxPacket.ReceivedCRC = crc_recv;
    2444:	50 93 d9 01 	sts	0x01D9, r21
    2448:	40 93 d8 01 	sts	0x01D8, r20
}
    244c:	1f 91       	pop	r17
    244e:	0f 91       	pop	r16
    2450:	08 95       	ret

00002452 <UART_Timer_ISR_Handler>:
    UART.LastRxByte = UART_NULL;
  }
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    2452:	80 91 b3 01 	lds	r24, 0x01B3
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2456:	80 91 b1 01 	lds	r24, 0x01B1
    245a:	90 91 b2 01 	lds	r25, 0x01B2
void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    245e:	88 23       	and	r24, r24
    2460:	31 f0       	breq	.+12     	; 0x246e <UART_Timer_ISR_Handler+0x1c>
    UART.Timer.DataAvailable = UART_TRUE;
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	80 93 b4 01 	sts	0x01B4, r24
	UART_RX_Packet_CRC_Check();
    2468:	0e 94 f6 11 	call	0x23ec	; 0x23ec <UART_RX_Packet_CRC_Check>
    246c:	08 95       	ret
  }
  else{
	UART.Timer.DataAvailable = UART_FALSE;
    246e:	10 92 b4 01 	sts	0x01B4, r1
    2472:	08 95       	ret

00002474 <__vector_9>:
  
}



ISR(TIMER2_OVF_vect){
    2474:	1f 92       	push	r1
    2476:	0f 92       	push	r0
    2478:	0f b6       	in	r0, 0x3f	; 63
    247a:	0f 92       	push	r0
    247c:	11 24       	eor	r1, r1
    247e:	2f 93       	push	r18
    2480:	3f 93       	push	r19
    2482:	4f 93       	push	r20
    2484:	5f 93       	push	r21
    2486:	6f 93       	push	r22
    2488:	7f 93       	push	r23
    248a:	8f 93       	push	r24
    248c:	9f 93       	push	r25
    248e:	af 93       	push	r26
    2490:	bf 93       	push	r27
    2492:	ef 93       	push	r30
    2494:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    2496:	0e 94 29 12 	call	0x2452	; 0x2452 <UART_Timer_ISR_Handler>
}
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    24bc:	ef 92       	push	r14
    24be:	ff 92       	push	r15
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	7b 01       	movw	r14, r22
    24c6:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    24c8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    24cc:	c8 01       	movw	r24, r16
    24ce:	b7 01       	movw	r22, r14
    24d0:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    24d4:	80 91 c1 00 	lds	r24, 0x00C1
    24d8:	88 60       	ori	r24, 0x08	; 8
    24da:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    24de:	96 e0       	ldi	r25, 0x06	; 6
    24e0:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    24e4:	80 91 c1 00 	lds	r24, 0x00C1
    24e8:	80 61       	ori	r24, 0x10	; 16
    24ea:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    24ee:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    24f2:	80 91 c1 00 	lds	r24, 0x00C1
    24f6:	80 68       	ori	r24, 0x80	; 128
    24f8:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    24fc:	78 94       	sei
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    2502:	fc 01       	movw	r30, r24
    2504:	ec 57       	subi	r30, 0x7C	; 124
    2506:	fe 4f       	sbci	r31, 0xFE	; 254
    2508:	13 86       	std	Z+11, r1	; 0x0b
    250a:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    250c:	80 32       	cpi	r24, 0x20	; 32
    250e:	91 05       	cpc	r25, r1
    2510:	c1 f7       	brne	.-16     	; 0x2502 <UART_Init+0x46>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    2512:	10 92 b2 01 	sts	0x01B2, r1
    2516:	10 92 b1 01 	sts	0x01B1, r1
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Buf_Flush();
}
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	08 95       	ret

00002524 <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    2524:	10 92 0a 01 	sts	0x010A, r1
    2528:	10 92 0b 01 	sts	0x010B, r1
    252c:	10 92 0c 01 	sts	0x010C, r1
    2530:	10 92 0d 01 	sts	0x010D, r1
  PID.Input.Ki = 0;
    2534:	10 92 0e 01 	sts	0x010E, r1
    2538:	10 92 0f 01 	sts	0x010F, r1
    253c:	10 92 10 01 	sts	0x0110, r1
    2540:	10 92 11 01 	sts	0x0111, r1
  PID.Input.Kd = 0;
    2544:	10 92 12 01 	sts	0x0112, r1
    2548:	10 92 13 01 	sts	0x0113, r1
    254c:	10 92 14 01 	sts	0x0114, r1
    2550:	10 92 15 01 	sts	0x0115, r1
  PID.Input.SetPoint = 0;
    2554:	10 92 16 01 	sts	0x0116, r1
    2558:	10 92 17 01 	sts	0x0117, r1
    255c:	10 92 18 01 	sts	0x0118, r1
    2560:	10 92 19 01 	sts	0x0119, r1
  PID.Input.ProcessValue = 0;
    2564:	10 92 1a 01 	sts	0x011A, r1
    2568:	10 92 1b 01 	sts	0x011B, r1
    256c:	10 92 1c 01 	sts	0x011C, r1
    2570:	10 92 1d 01 	sts	0x011D, r1
  PID.Error.PError = 0;
    2574:	10 92 1e 01 	sts	0x011E, r1
    2578:	10 92 1f 01 	sts	0x011F, r1
    257c:	10 92 20 01 	sts	0x0120, r1
    2580:	10 92 21 01 	sts	0x0121, r1
  PID.Error.DError = 0;
    2584:	10 92 22 01 	sts	0x0122, r1
    2588:	10 92 23 01 	sts	0x0123, r1
    258c:	10 92 24 01 	sts	0x0124, r1
    2590:	10 92 25 01 	sts	0x0125, r1
  PID.Error.IError = 0;
    2594:	10 92 26 01 	sts	0x0126, r1
    2598:	10 92 27 01 	sts	0x0127, r1
    259c:	10 92 28 01 	sts	0x0128, r1
    25a0:	10 92 29 01 	sts	0x0129, r1
  PID.Error.IErrorLimit = 0;
    25a4:	10 92 2a 01 	sts	0x012A, r1
    25a8:	10 92 2b 01 	sts	0x012B, r1
    25ac:	10 92 2c 01 	sts	0x012C, r1
    25b0:	10 92 2d 01 	sts	0x012D, r1
  PID.Error.LastError = 0;
    25b4:	10 92 2e 01 	sts	0x012E, r1
    25b8:	10 92 2f 01 	sts	0x012F, r1
    25bc:	10 92 30 01 	sts	0x0130, r1
    25c0:	10 92 31 01 	sts	0x0131, r1
  PID.Products.PError = 0;
    25c4:	10 92 32 01 	sts	0x0132, r1
    25c8:	10 92 33 01 	sts	0x0133, r1
    25cc:	10 92 34 01 	sts	0x0134, r1
    25d0:	10 92 35 01 	sts	0x0135, r1
  PID.Products.IError = 0;
    25d4:	10 92 36 01 	sts	0x0136, r1
    25d8:	10 92 37 01 	sts	0x0137, r1
    25dc:	10 92 38 01 	sts	0x0138, r1
    25e0:	10 92 39 01 	sts	0x0139, r1
  PID.Products.DError = 0;
    25e4:	10 92 3a 01 	sts	0x013A, r1
    25e8:	10 92 3b 01 	sts	0x013B, r1
    25ec:	10 92 3c 01 	sts	0x013C, r1
    25f0:	10 92 3d 01 	sts	0x013D, r1
  PID.Products.ScaleFact = 0;
    25f4:	10 92 3e 01 	sts	0x013E, r1
    25f8:	10 92 3f 01 	sts	0x013F, r1
    25fc:	10 92 40 01 	sts	0x0140, r1
    2600:	10 92 41 01 	sts	0x0141, r1
  PID.Output = 0;
    2604:	10 92 42 01 	sts	0x0142, r1
    2608:	10 92 43 01 	sts	0x0143, r1
    260c:	10 92 44 01 	sts	0x0144, r1
    2610:	10 92 45 01 	sts	0x0145, r1
  PID.OutputNonNegative = 0;
    2614:	10 92 46 01 	sts	0x0146, r1
    2618:	10 92 47 01 	sts	0x0147, r1
    261c:	10 92 48 01 	sts	0x0148, r1
    2620:	10 92 49 01 	sts	0x0149, r1
}
    2624:	08 95       	ret

00002626 <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2626:	60 93 0a 01 	sts	0x010A, r22
    262a:	70 93 0b 01 	sts	0x010B, r23
    262e:	80 93 0c 01 	sts	0x010C, r24
    2632:	90 93 0d 01 	sts	0x010D, r25
}
    2636:	08 95       	ret

00002638 <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2638:	60 93 0e 01 	sts	0x010E, r22
    263c:	70 93 0f 01 	sts	0x010F, r23
    2640:	80 93 10 01 	sts	0x0110, r24
    2644:	90 93 11 01 	sts	0x0111, r25
}
    2648:	08 95       	ret

0000264a <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    264a:	60 93 12 01 	sts	0x0112, r22
    264e:	70 93 13 01 	sts	0x0113, r23
    2652:	80 93 14 01 	sts	0x0114, r24
    2656:	90 93 15 01 	sts	0x0115, r25
}
    265a:	08 95       	ret

0000265c <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    265c:	ef 92       	push	r14
    265e:	ff 92       	push	r15
    2660:	0f 93       	push	r16
    2662:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2664:	60 93 0a 01 	sts	0x010A, r22
    2668:	70 93 0b 01 	sts	0x010B, r23
    266c:	80 93 0c 01 	sts	0x010C, r24
    2670:	90 93 0d 01 	sts	0x010D, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2674:	20 93 0e 01 	sts	0x010E, r18
    2678:	30 93 0f 01 	sts	0x010F, r19
    267c:	40 93 10 01 	sts	0x0110, r20
    2680:	50 93 11 01 	sts	0x0111, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2684:	e0 92 12 01 	sts	0x0112, r14
    2688:	f0 92 13 01 	sts	0x0113, r15
    268c:	00 93 14 01 	sts	0x0114, r16
    2690:	10 93 15 01 	sts	0x0115, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	ef 90       	pop	r14
    269c:	08 95       	ret

0000269e <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    269e:	60 93 16 01 	sts	0x0116, r22
    26a2:	70 93 17 01 	sts	0x0117, r23
    26a6:	80 93 18 01 	sts	0x0118, r24
    26aa:	90 93 19 01 	sts	0x0119, r25
}
    26ae:	08 95       	ret

000026b0 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    26b0:	60 93 1a 01 	sts	0x011A, r22
    26b4:	70 93 1b 01 	sts	0x011B, r23
    26b8:	80 93 1c 01 	sts	0x011C, r24
    26bc:	90 93 1d 01 	sts	0x011D, r25
}
    26c0:	08 95       	ret

000026c2 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    26c2:	60 93 2a 01 	sts	0x012A, r22
    26c6:	70 93 2b 01 	sts	0x012B, r23
    26ca:	80 93 2c 01 	sts	0x012C, r24
    26ce:	90 93 2d 01 	sts	0x012D, r25
}
    26d2:	08 95       	ret

000026d4 <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    26d4:	60 93 3e 01 	sts	0x013E, r22
    26d8:	70 93 3f 01 	sts	0x013F, r23
    26dc:	80 93 40 01 	sts	0x0140, r24
    26e0:	90 93 41 01 	sts	0x0141, r25
}
    26e4:	08 95       	ret

000026e6 <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    26e6:	10 92 26 01 	sts	0x0126, r1
    26ea:	10 92 27 01 	sts	0x0127, r1
    26ee:	10 92 28 01 	sts	0x0128, r1
    26f2:	10 92 29 01 	sts	0x0129, r1
}
    26f6:	08 95       	ret

000026f8 <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    2700:	20 91 16 01 	lds	r18, 0x0116
    2704:	30 91 17 01 	lds	r19, 0x0117
    2708:	40 91 18 01 	lds	r20, 0x0118
    270c:	50 91 19 01 	lds	r21, 0x0119
    2710:	80 91 1a 01 	lds	r24, 0x011A
    2714:	90 91 1b 01 	lds	r25, 0x011B
    2718:	a0 91 1c 01 	lds	r26, 0x011C
    271c:	b0 91 1d 01 	lds	r27, 0x011D
    2720:	28 1b       	sub	r18, r24
    2722:	39 0b       	sbc	r19, r25
    2724:	4a 0b       	sbc	r20, r26
    2726:	5b 0b       	sbc	r21, r27
    2728:	20 93 1e 01 	sts	0x011E, r18
    272c:	30 93 1f 01 	sts	0x011F, r19
    2730:	40 93 20 01 	sts	0x0120, r20
    2734:	50 93 21 01 	sts	0x0121, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    2738:	80 91 2e 01 	lds	r24, 0x012E
    273c:	90 91 2f 01 	lds	r25, 0x012F
    2740:	a0 91 30 01 	lds	r26, 0x0130
    2744:	b0 91 31 01 	lds	r27, 0x0131
    2748:	79 01       	movw	r14, r18
    274a:	8a 01       	movw	r16, r20
    274c:	e8 1a       	sub	r14, r24
    274e:	f9 0a       	sbc	r15, r25
    2750:	0a 0b       	sbc	r16, r26
    2752:	1b 0b       	sbc	r17, r27
    2754:	e0 92 22 01 	sts	0x0122, r14
    2758:	f0 92 23 01 	sts	0x0123, r15
    275c:	00 93 24 01 	sts	0x0124, r16
    2760:	10 93 25 01 	sts	0x0125, r17
  PID.Error.LastError = PID.Error.PError;
    2764:	20 93 2e 01 	sts	0x012E, r18
    2768:	30 93 2f 01 	sts	0x012F, r19
    276c:	40 93 30 01 	sts	0x0130, r20
    2770:	50 93 31 01 	sts	0x0131, r21
  PID.Error.IError += PID.Error.PError;
    2774:	e0 90 26 01 	lds	r14, 0x0126
    2778:	f0 90 27 01 	lds	r15, 0x0127
    277c:	00 91 28 01 	lds	r16, 0x0128
    2780:	10 91 29 01 	lds	r17, 0x0129
    2784:	e2 0e       	add	r14, r18
    2786:	f3 1e       	adc	r15, r19
    2788:	04 1f       	adc	r16, r20
    278a:	15 1f       	adc	r17, r21
    278c:	e0 92 26 01 	sts	0x0126, r14
    2790:	f0 92 27 01 	sts	0x0127, r15
    2794:	00 93 28 01 	sts	0x0128, r16
    2798:	10 93 29 01 	sts	0x0129, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    279c:	80 91 2a 01 	lds	r24, 0x012A
    27a0:	90 91 2b 01 	lds	r25, 0x012B
    27a4:	a0 91 2c 01 	lds	r26, 0x012C
    27a8:	b0 91 2d 01 	lds	r27, 0x012D
    27ac:	8e 15       	cp	r24, r14
    27ae:	9f 05       	cpc	r25, r15
    27b0:	a0 07       	cpc	r26, r16
    27b2:	b1 07       	cpc	r27, r17
    27b4:	4c f4       	brge	.+18     	; 0x27c8 <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    27b6:	80 93 26 01 	sts	0x0126, r24
    27ba:	90 93 27 01 	sts	0x0127, r25
    27be:	a0 93 28 01 	sts	0x0128, r26
    27c2:	b0 93 29 01 	sts	0x0129, r27
    27c6:	14 c0       	rjmp	.+40     	; 0x27f0 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    27c8:	22 27       	eor	r18, r18
    27ca:	33 27       	eor	r19, r19
    27cc:	a9 01       	movw	r20, r18
    27ce:	28 1b       	sub	r18, r24
    27d0:	39 0b       	sbc	r19, r25
    27d2:	4a 0b       	sbc	r20, r26
    27d4:	5b 0b       	sbc	r21, r27
    27d6:	e2 16       	cp	r14, r18
    27d8:	f3 06       	cpc	r15, r19
    27da:	04 07       	cpc	r16, r20
    27dc:	15 07       	cpc	r17, r21
    27de:	44 f4       	brge	.+16     	; 0x27f0 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    27e0:	20 93 26 01 	sts	0x0126, r18
    27e4:	30 93 27 01 	sts	0x0127, r19
    27e8:	40 93 28 01 	sts	0x0128, r20
    27ec:	50 93 29 01 	sts	0x0129, r21
  }
}
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	ef 90       	pop	r14
    27f8:	08 95       	ret

000027fa <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    27fa:	6f 92       	push	r6
    27fc:	7f 92       	push	r7
    27fe:	8f 92       	push	r8
    2800:	9f 92       	push	r9
    2802:	af 92       	push	r10
    2804:	bf 92       	push	r11
    2806:	cf 92       	push	r12
    2808:	df 92       	push	r13
    280a:	ef 92       	push	r14
    280c:	ff 92       	push	r15
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    2812:	60 91 0e 01 	lds	r22, 0x010E
    2816:	70 91 0f 01 	lds	r23, 0x010F
    281a:	80 91 10 01 	lds	r24, 0x0110
    281e:	90 91 11 01 	lds	r25, 0x0111
    2822:	20 91 26 01 	lds	r18, 0x0126
    2826:	30 91 27 01 	lds	r19, 0x0127
    282a:	40 91 28 01 	lds	r20, 0x0128
    282e:	50 91 29 01 	lds	r21, 0x0129
    2832:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsi3>
    2836:	3b 01       	movw	r6, r22
    2838:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    283a:	60 91 12 01 	lds	r22, 0x0112
    283e:	70 91 13 01 	lds	r23, 0x0113
    2842:	80 91 14 01 	lds	r24, 0x0114
    2846:	90 91 15 01 	lds	r25, 0x0115
    284a:	20 91 22 01 	lds	r18, 0x0122
    284e:	30 91 23 01 	lds	r19, 0x0123
    2852:	40 91 24 01 	lds	r20, 0x0124
    2856:	50 91 25 01 	lds	r21, 0x0125
    285a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsi3>
    285e:	5b 01       	movw	r10, r22
    2860:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    2862:	e0 90 3e 01 	lds	r14, 0x013E
    2866:	f0 90 3f 01 	lds	r15, 0x013F
    286a:	00 91 40 01 	lds	r16, 0x0140
    286e:	10 91 41 01 	lds	r17, 0x0141
    2872:	60 91 0a 01 	lds	r22, 0x010A
    2876:	70 91 0b 01 	lds	r23, 0x010B
    287a:	80 91 0c 01 	lds	r24, 0x010C
    287e:	90 91 0d 01 	lds	r25, 0x010D
    2882:	20 91 1e 01 	lds	r18, 0x011E
    2886:	30 91 1f 01 	lds	r19, 0x011F
    288a:	40 91 20 01 	lds	r20, 0x0120
    288e:	50 91 21 01 	lds	r21, 0x0121
    2892:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__mulsi3>
    2896:	a8 01       	movw	r20, r16
    2898:	97 01       	movw	r18, r14
    289a:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    289e:	20 93 32 01 	sts	0x0132, r18
    28a2:	30 93 33 01 	sts	0x0133, r19
    28a6:	40 93 34 01 	sts	0x0134, r20
    28aa:	50 93 35 01 	sts	0x0135, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    28ae:	c4 01       	movw	r24, r8
    28b0:	b3 01       	movw	r22, r6
    28b2:	a8 01       	movw	r20, r16
    28b4:	97 01       	movw	r18, r14
    28b6:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    28ba:	20 93 36 01 	sts	0x0136, r18
    28be:	30 93 37 01 	sts	0x0137, r19
    28c2:	40 93 38 01 	sts	0x0138, r20
    28c6:	50 93 39 01 	sts	0x0139, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    28ca:	c6 01       	movw	r24, r12
    28cc:	b5 01       	movw	r22, r10
    28ce:	a8 01       	movw	r20, r16
    28d0:	97 01       	movw	r18, r14
    28d2:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__divmodsi4>
    28d6:	20 93 3a 01 	sts	0x013A, r18
    28da:	30 93 3b 01 	sts	0x013B, r19
    28de:	40 93 3c 01 	sts	0x013C, r20
    28e2:	50 93 3d 01 	sts	0x013D, r21
}
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
    28f2:	bf 90       	pop	r11
    28f4:	af 90       	pop	r10
    28f6:	9f 90       	pop	r9
    28f8:	8f 90       	pop	r8
    28fa:	7f 90       	pop	r7
    28fc:	6f 90       	pop	r6
    28fe:	08 95       	ret

00002900 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    2900:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    2904:	0e 94 fd 13 	call	0x27fa	; 0x27fa <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    2908:	20 91 32 01 	lds	r18, 0x0132
    290c:	30 91 33 01 	lds	r19, 0x0133
    2910:	40 91 34 01 	lds	r20, 0x0134
    2914:	50 91 35 01 	lds	r21, 0x0135
  control_value += PID.Products.IError;
    2918:	80 91 36 01 	lds	r24, 0x0136
    291c:	90 91 37 01 	lds	r25, 0x0137
    2920:	a0 91 38 01 	lds	r26, 0x0138
    2924:	b0 91 39 01 	lds	r27, 0x0139
    2928:	28 0f       	add	r18, r24
    292a:	39 1f       	adc	r19, r25
    292c:	4a 1f       	adc	r20, r26
    292e:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    2930:	80 91 3a 01 	lds	r24, 0x013A
    2934:	90 91 3b 01 	lds	r25, 0x013B
    2938:	a0 91 3c 01 	lds	r26, 0x013C
    293c:	b0 91 3d 01 	lds	r27, 0x013D
    2940:	28 0f       	add	r18, r24
    2942:	39 1f       	adc	r19, r25
    2944:	4a 1f       	adc	r20, r26
    2946:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    2948:	20 93 42 01 	sts	0x0142, r18
    294c:	30 93 43 01 	sts	0x0143, r19
    2950:	40 93 44 01 	sts	0x0144, r20
    2954:	50 93 45 01 	sts	0x0145, r21
  if(control_value < 0){
    2958:	57 ff       	sbrs	r21, 7
    295a:	09 c0       	rjmp	.+18     	; 0x296e <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    295c:	10 92 46 01 	sts	0x0146, r1
    2960:	10 92 47 01 	sts	0x0147, r1
    2964:	10 92 48 01 	sts	0x0148, r1
    2968:	10 92 49 01 	sts	0x0149, r1
    296c:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    296e:	20 93 46 01 	sts	0x0146, r18
    2972:	30 93 47 01 	sts	0x0147, r19
    2976:	40 93 48 01 	sts	0x0148, r20
    297a:	50 93 49 01 	sts	0x0149, r21
    297e:	08 95       	ret

00002980 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    2980:	60 91 0a 01 	lds	r22, 0x010A
    2984:	70 91 0b 01 	lds	r23, 0x010B
  return PID.Input.Kp;
}
    2988:	80 91 0c 01 	lds	r24, 0x010C
    298c:	90 91 0d 01 	lds	r25, 0x010D
    2990:	08 95       	ret

00002992 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2992:	60 91 0e 01 	lds	r22, 0x010E
    2996:	70 91 0f 01 	lds	r23, 0x010F
  return PID.Input.Ki;
}
    299a:	80 91 10 01 	lds	r24, 0x0110
    299e:	90 91 11 01 	lds	r25, 0x0111
    29a2:	08 95       	ret

000029a4 <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    29a4:	60 91 12 01 	lds	r22, 0x0112
    29a8:	70 91 13 01 	lds	r23, 0x0113
  return PID.Input.Kd;
}
    29ac:	80 91 14 01 	lds	r24, 0x0114
    29b0:	90 91 15 01 	lds	r25, 0x0115
    29b4:	08 95       	ret

000029b6 <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    29b6:	60 91 16 01 	lds	r22, 0x0116
    29ba:	70 91 17 01 	lds	r23, 0x0117
  return PID.Input.SetPoint;
}
    29be:	80 91 18 01 	lds	r24, 0x0118
    29c2:	90 91 19 01 	lds	r25, 0x0119
    29c6:	08 95       	ret

000029c8 <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    29c8:	60 91 1a 01 	lds	r22, 0x011A
    29cc:	70 91 1b 01 	lds	r23, 0x011B
  return PID.Input.ProcessValue;
}
    29d0:	80 91 1c 01 	lds	r24, 0x011C
    29d4:	90 91 1d 01 	lds	r25, 0x011D
    29d8:	08 95       	ret

000029da <PID_Get_PError>:

signed long PID_Get_PError(void){
    29da:	60 91 1e 01 	lds	r22, 0x011E
    29de:	70 91 1f 01 	lds	r23, 0x011F
  return PID.Error.PError;
}
    29e2:	80 91 20 01 	lds	r24, 0x0120
    29e6:	90 91 21 01 	lds	r25, 0x0121
    29ea:	08 95       	ret

000029ec <PID_Get_IError>:

signed long PID_Get_IError(void){
    29ec:	60 91 26 01 	lds	r22, 0x0126
    29f0:	70 91 27 01 	lds	r23, 0x0127
  return PID.Error.IError;
}
    29f4:	80 91 28 01 	lds	r24, 0x0128
    29f8:	90 91 29 01 	lds	r25, 0x0129
    29fc:	08 95       	ret

000029fe <PID_Get_DError>:

signed long PID_Get_DError(void){
    29fe:	60 91 22 01 	lds	r22, 0x0122
    2a02:	70 91 23 01 	lds	r23, 0x0123
  return PID.Error.DError;
}
    2a06:	80 91 24 01 	lds	r24, 0x0124
    2a0a:	90 91 25 01 	lds	r25, 0x0125
    2a0e:	08 95       	ret

00002a10 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    2a10:	60 91 2a 01 	lds	r22, 0x012A
    2a14:	70 91 2b 01 	lds	r23, 0x012B
  return PID.Error.IErrorLimit;
}
    2a18:	80 91 2c 01 	lds	r24, 0x012C
    2a1c:	90 91 2d 01 	lds	r25, 0x012D
    2a20:	08 95       	ret

00002a22 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    2a22:	60 91 32 01 	lds	r22, 0x0132
    2a26:	70 91 33 01 	lds	r23, 0x0133
  return PID.Products.PError;
}
    2a2a:	80 91 34 01 	lds	r24, 0x0134
    2a2e:	90 91 35 01 	lds	r25, 0x0135
    2a32:	08 95       	ret

00002a34 <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    2a34:	60 91 36 01 	lds	r22, 0x0136
    2a38:	70 91 37 01 	lds	r23, 0x0137
  return PID.Products.IError;
}
    2a3c:	80 91 38 01 	lds	r24, 0x0138
    2a40:	90 91 39 01 	lds	r25, 0x0139
    2a44:	08 95       	ret

00002a46 <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    2a46:	60 91 3a 01 	lds	r22, 0x013A
    2a4a:	70 91 3b 01 	lds	r23, 0x013B
  return PID.Products.DError;
}
    2a4e:	80 91 3c 01 	lds	r24, 0x013C
    2a52:	90 91 3d 01 	lds	r25, 0x013D
    2a56:	08 95       	ret

00002a58 <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    2a58:	60 91 3e 01 	lds	r22, 0x013E
    2a5c:	70 91 3f 01 	lds	r23, 0x013F
  return PID.Products.ScaleFact;
}
    2a60:	80 91 40 01 	lds	r24, 0x0140
    2a64:	90 91 41 01 	lds	r25, 0x0141
    2a68:	08 95       	ret

00002a6a <PID_Get_Output>:


signed long PID_Get_Output(void){
    2a6a:	60 91 42 01 	lds	r22, 0x0142
    2a6e:	70 91 43 01 	lds	r23, 0x0143
  return PID.Output;
}
    2a72:	80 91 44 01 	lds	r24, 0x0144
    2a76:	90 91 45 01 	lds	r25, 0x0145
    2a7a:	08 95       	ret

00002a7c <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    2a7c:	60 91 46 01 	lds	r22, 0x0146
    2a80:	70 91 47 01 	lds	r23, 0x0147
  return PID.OutputNonNegative;
}
    2a84:	80 91 48 01 	lds	r24, 0x0148
    2a88:	90 91 49 01 	lds	r25, 0x0149
    2a8c:	08 95       	ret

00002a8e <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    2a8e:	0e 94 92 12 	call	0x2524	; 0x2524 <PID_Struct_Init>
}
    2a92:	08 95       	ret

00002a94 <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    2a94:	af 92       	push	r10
    2a96:	bf 92       	push	r11
    2a98:	cf 92       	push	r12
    2a9a:	df 92       	push	r13
    2a9c:	ef 92       	push	r14
    2a9e:	ff 92       	push	r15
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2aac:	60 93 0a 01 	sts	0x010A, r22
    2ab0:	70 93 0b 01 	sts	0x010B, r23
    2ab4:	80 93 0c 01 	sts	0x010C, r24
    2ab8:	90 93 0d 01 	sts	0x010D, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2abc:	20 93 0e 01 	sts	0x010E, r18
    2ac0:	30 93 0f 01 	sts	0x010F, r19
    2ac4:	40 93 10 01 	sts	0x0110, r20
    2ac8:	50 93 11 01 	sts	0x0111, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2acc:	e0 92 12 01 	sts	0x0112, r14
    2ad0:	f0 92 13 01 	sts	0x0113, r15
    2ad4:	00 93 14 01 	sts	0x0114, r16
    2ad8:	10 93 15 01 	sts	0x0115, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    2adc:	a0 92 2a 01 	sts	0x012A, r10
    2ae0:	b0 92 2b 01 	sts	0x012B, r11
    2ae4:	c0 92 2c 01 	sts	0x012C, r12
    2ae8:	d0 92 2d 01 	sts	0x012D, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    2aec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af0:	af 85       	ldd	r26, Y+15	; 0x0f
    2af2:	b8 89       	ldd	r27, Y+16	; 0x10
    2af4:	80 93 3e 01 	sts	0x013E, r24
    2af8:	90 93 3f 01 	sts	0x013F, r25
    2afc:	a0 93 40 01 	sts	0x0140, r26
    2b00:	b0 93 41 01 	sts	0x0141, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    2b04:	10 92 26 01 	sts	0x0126, r1
    2b08:	10 92 27 01 	sts	0x0127, r1
    2b0c:	10 92 28 01 	sts	0x0128, r1
    2b10:	10 92 29 01 	sts	0x0129, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	ff 90       	pop	r15
    2b1e:	ef 90       	pop	r14
    2b20:	df 90       	pop	r13
    2b22:	cf 90       	pop	r12
    2b24:	bf 90       	pop	r11
    2b26:	af 90       	pop	r10
    2b28:	08 95       	ret

00002b2a <__mulsi3>:
    2b2a:	62 9f       	mul	r22, r18
    2b2c:	d0 01       	movw	r26, r0
    2b2e:	73 9f       	mul	r23, r19
    2b30:	f0 01       	movw	r30, r0
    2b32:	82 9f       	mul	r24, r18
    2b34:	e0 0d       	add	r30, r0
    2b36:	f1 1d       	adc	r31, r1
    2b38:	64 9f       	mul	r22, r20
    2b3a:	e0 0d       	add	r30, r0
    2b3c:	f1 1d       	adc	r31, r1
    2b3e:	92 9f       	mul	r25, r18
    2b40:	f0 0d       	add	r31, r0
    2b42:	83 9f       	mul	r24, r19
    2b44:	f0 0d       	add	r31, r0
    2b46:	74 9f       	mul	r23, r20
    2b48:	f0 0d       	add	r31, r0
    2b4a:	65 9f       	mul	r22, r21
    2b4c:	f0 0d       	add	r31, r0
    2b4e:	99 27       	eor	r25, r25
    2b50:	72 9f       	mul	r23, r18
    2b52:	b0 0d       	add	r27, r0
    2b54:	e1 1d       	adc	r30, r1
    2b56:	f9 1f       	adc	r31, r25
    2b58:	63 9f       	mul	r22, r19
    2b5a:	b0 0d       	add	r27, r0
    2b5c:	e1 1d       	adc	r30, r1
    2b5e:	f9 1f       	adc	r31, r25
    2b60:	bd 01       	movw	r22, r26
    2b62:	cf 01       	movw	r24, r30
    2b64:	11 24       	eor	r1, r1
    2b66:	08 95       	ret

00002b68 <__udivmodsi4>:
    2b68:	a1 e2       	ldi	r26, 0x21	; 33
    2b6a:	1a 2e       	mov	r1, r26
    2b6c:	aa 1b       	sub	r26, r26
    2b6e:	bb 1b       	sub	r27, r27
    2b70:	fd 01       	movw	r30, r26
    2b72:	0d c0       	rjmp	.+26     	; 0x2b8e <__udivmodsi4_ep>

00002b74 <__udivmodsi4_loop>:
    2b74:	aa 1f       	adc	r26, r26
    2b76:	bb 1f       	adc	r27, r27
    2b78:	ee 1f       	adc	r30, r30
    2b7a:	ff 1f       	adc	r31, r31
    2b7c:	a2 17       	cp	r26, r18
    2b7e:	b3 07       	cpc	r27, r19
    2b80:	e4 07       	cpc	r30, r20
    2b82:	f5 07       	cpc	r31, r21
    2b84:	20 f0       	brcs	.+8      	; 0x2b8e <__udivmodsi4_ep>
    2b86:	a2 1b       	sub	r26, r18
    2b88:	b3 0b       	sbc	r27, r19
    2b8a:	e4 0b       	sbc	r30, r20
    2b8c:	f5 0b       	sbc	r31, r21

00002b8e <__udivmodsi4_ep>:
    2b8e:	66 1f       	adc	r22, r22
    2b90:	77 1f       	adc	r23, r23
    2b92:	88 1f       	adc	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	1a 94       	dec	r1
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <__udivmodsi4_loop>
    2b9a:	60 95       	com	r22
    2b9c:	70 95       	com	r23
    2b9e:	80 95       	com	r24
    2ba0:	90 95       	com	r25
    2ba2:	9b 01       	movw	r18, r22
    2ba4:	ac 01       	movw	r20, r24
    2ba6:	bd 01       	movw	r22, r26
    2ba8:	cf 01       	movw	r24, r30
    2baa:	08 95       	ret

00002bac <__divmodsi4>:
    2bac:	97 fb       	bst	r25, 7
    2bae:	09 2e       	mov	r0, r25
    2bb0:	05 26       	eor	r0, r21
    2bb2:	0e d0       	rcall	.+28     	; 0x2bd0 <__divmodsi4_neg1>
    2bb4:	57 fd       	sbrc	r21, 7
    2bb6:	04 d0       	rcall	.+8      	; 0x2bc0 <__divmodsi4_neg2>
    2bb8:	d7 df       	rcall	.-82     	; 0x2b68 <__udivmodsi4>
    2bba:	0a d0       	rcall	.+20     	; 0x2bd0 <__divmodsi4_neg1>
    2bbc:	00 1c       	adc	r0, r0
    2bbe:	38 f4       	brcc	.+14     	; 0x2bce <__divmodsi4_exit>

00002bc0 <__divmodsi4_neg2>:
    2bc0:	50 95       	com	r21
    2bc2:	40 95       	com	r20
    2bc4:	30 95       	com	r19
    2bc6:	21 95       	neg	r18
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	4f 4f       	sbci	r20, 0xFF	; 255
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255

00002bce <__divmodsi4_exit>:
    2bce:	08 95       	ret

00002bd0 <__divmodsi4_neg1>:
    2bd0:	f6 f7       	brtc	.-4      	; 0x2bce <__divmodsi4_exit>
    2bd2:	90 95       	com	r25
    2bd4:	80 95       	com	r24
    2bd6:	70 95       	com	r23
    2bd8:	61 95       	neg	r22
    2bda:	7f 4f       	sbci	r23, 0xFF	; 255
    2bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    2bde:	9f 4f       	sbci	r25, 0xFF	; 255
    2be0:	08 95       	ret

00002be2 <_exit>:
    2be2:	f8 94       	cli

00002be4 <__stop_program>:
    2be4:	ff cf       	rjmp	.-2      	; 0x2be4 <__stop_program>
