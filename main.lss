
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002e66  00002efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  0080011a  0080011a  00002f14  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001822  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004535  00000000  00000000  00004796  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00008ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002114  00000000  00000000  0000929d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  0000b3b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a1f  00000000  00000000  0000be64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001906  00000000  00000000  0000d883  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 97 16 	jmp	0x2d2e	; 0x2d2e <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e6       	ldi	r30, 0x66	; 102
      7c:	fe e2       	ldi	r31, 0x2E	; 46
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3b       	cpi	r26, 0xB6	; 182
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 31 17 	jmp	0x2e62	; 0x2e62 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Timebase_DownCounter_SS_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 66 05 	call	0xacc	; 0xacc <Timebase_Timer_Await_SubSeconds>
	UART_Transmit_Text("Timebase\r\n");
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     120:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     122:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     132:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     13c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     13e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     19e:	20 93 c4 00 	sts	0x00C4, r18
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
}
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
}
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
  sei();
     1d2:	78 94       	sei
}
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1d6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1e0:	90 93 c6 00 	sts	0x00C6, r25
}
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1f0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
    val=UDR0;
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     220:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     22e:	80 91 24 01 	lds	r24, 0x0124
}
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     234:	10 92 24 01 	sts	0x0124, r1
}
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     29c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2d4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     34a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3ba:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3be:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3fe:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
      i++;
     440:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     44c:	b0 92 23 01 	sts	0x0123, r11
  }
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     47c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
  UDR0=val;
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
}
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
}
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     50a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5e0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
  sei();
     5e8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSecondsShadow = 0;
     62c:	10 92 5a 01 	sts	0x015A, r1
     630:	10 92 59 01 	sts	0x0159, r1
  Timebase->Time.SecondsShadow = 0;
     634:	10 92 5b 01 	sts	0x015B, r1
     638:	10 92 5c 01 	sts	0x015C, r1
     63c:	10 92 5d 01 	sts	0x015D, r1
     640:	10 92 5e 01 	sts	0x015E, r1
  Timebase->Time.SubSeconds = 0;
     644:	10 92 54 01 	sts	0x0154, r1
     648:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     64c:	10 92 55 01 	sts	0x0155, r1
     650:	10 92 56 01 	sts	0x0156, r1
     654:	10 92 57 01 	sts	0x0157, r1
     658:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     65c:	10 92 4f 01 	sts	0x014F, r1
     660:	10 92 50 01 	sts	0x0150, r1
     664:	10 92 51 01 	sts	0x0151, r1
     668:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     66c:	10 92 5f 01 	sts	0x015F, r1
     670:	10 92 60 01 	sts	0x0160, r1
     674:	10 92 61 01 	sts	0x0161, r1
     678:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     67c:	10 92 63 01 	sts	0x0163, r1
     680:	10 92 64 01 	sts	0x0164, r1
     684:	10 92 65 01 	sts	0x0165, r1
     688:	10 92 66 01 	sts	0x0166, r1
	Timebase->Time.Status = 0;
     68c:	10 92 67 01 	sts	0x0167, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     690:	10 92 68 01 	sts	0x0168, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     694:	10 92 69 01 	sts	0x0169, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     698:	10 92 83 01 	sts	0x0183, r1
    Timebase->UpCounter[i].EndValue = 0;
     69c:	10 92 84 01 	sts	0x0184, r1
     6a0:	10 92 85 01 	sts	0x0185, r1
     6a4:	10 92 86 01 	sts	0x0186, r1
     6a8:	10 92 87 01 	sts	0x0187, r1
    Timebase->UpCounter[i].Target = 0;
     6ac:	10 92 88 01 	sts	0x0188, r1
     6b0:	10 92 89 01 	sts	0x0189, r1
     6b4:	10 92 8a 01 	sts	0x018A, r1
     6b8:	10 92 8b 01 	sts	0x018B, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6bc:	10 92 8c 01 	sts	0x018C, r1
     6c0:	10 92 8d 01 	sts	0x018D, r1
     6c4:	10 92 8e 01 	sts	0x018E, r1
     6c8:	10 92 8f 01 	sts	0x018F, r1
    Timebase->UpCounter[i].Value = 0;
     6cc:	10 92 90 01 	sts	0x0190, r1
     6d0:	10 92 91 01 	sts	0x0191, r1
     6d4:	10 92 92 01 	sts	0x0192, r1
     6d8:	10 92 93 01 	sts	0x0193, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6dc:	10 92 94 01 	sts	0x0194, r1
     6e0:	10 92 95 01 	sts	0x0195, r1
     6e4:	10 92 96 01 	sts	0x0196, r1
     6e8:	10 92 97 01 	sts	0x0197, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6ec:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6f0:	10 92 6b 01 	sts	0x016B, r1
     6f4:	10 92 6c 01 	sts	0x016C, r1
     6f8:	10 92 6d 01 	sts	0x016D, r1
     6fc:	10 92 6e 01 	sts	0x016E, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     700:	10 92 6f 01 	sts	0x016F, r1
     704:	10 92 70 01 	sts	0x0170, r1
     708:	10 92 71 01 	sts	0x0171, r1
     70c:	10 92 72 01 	sts	0x0172, r1
    Timebase->UpCounterSS[i].Target = 0;
     710:	10 92 73 01 	sts	0x0173, r1
     714:	10 92 74 01 	sts	0x0174, r1
     718:	10 92 75 01 	sts	0x0175, r1
     71c:	10 92 76 01 	sts	0x0176, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     720:	10 92 77 01 	sts	0x0177, r1
     724:	10 92 78 01 	sts	0x0178, r1
     728:	10 92 79 01 	sts	0x0179, r1
     72c:	10 92 7a 01 	sts	0x017A, r1
    Timebase->UpCounterSS[i].Value = 0;
     730:	10 92 7b 01 	sts	0x017B, r1
     734:	10 92 7c 01 	sts	0x017C, r1
     738:	10 92 7d 01 	sts	0x017D, r1
     73c:	10 92 7e 01 	sts	0x017E, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     740:	10 92 7f 01 	sts	0x017F, r1
     744:	10 92 80 01 	sts	0x0180, r1
     748:	10 92 81 01 	sts	0x0181, r1
     74c:	10 92 82 01 	sts	0x0182, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     750:	10 92 a9 01 	sts	0x01A9, r1
    Timebase->DownCounter[i].EndValue = 0;
     754:	10 92 aa 01 	sts	0x01AA, r1
     758:	10 92 ab 01 	sts	0x01AB, r1
     75c:	10 92 ac 01 	sts	0x01AC, r1
     760:	10 92 ad 01 	sts	0x01AD, r1
    Timebase->DownCounter[i].Value = 0;
     764:	10 92 ae 01 	sts	0x01AE, r1
     768:	10 92 af 01 	sts	0x01AF, r1
     76c:	10 92 b0 01 	sts	0x01B0, r1
     770:	10 92 b1 01 	sts	0x01B1, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     774:	10 92 b2 01 	sts	0x01B2, r1
     778:	10 92 b3 01 	sts	0x01B3, r1
     77c:	10 92 b4 01 	sts	0x01B4, r1
     780:	10 92 b5 01 	sts	0x01B5, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     784:	10 92 98 01 	sts	0x0198, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     788:	10 92 99 01 	sts	0x0199, r1
     78c:	10 92 9a 01 	sts	0x019A, r1
     790:	10 92 9b 01 	sts	0x019B, r1
     794:	10 92 9c 01 	sts	0x019C, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     798:	10 92 9d 01 	sts	0x019D, r1
     79c:	10 92 9e 01 	sts	0x019E, r1
     7a0:	10 92 9f 01 	sts	0x019F, r1
     7a4:	10 92 a0 01 	sts	0x01A0, r1
    Timebase->DownCounterSS[i].Value = 0;
     7a8:	10 92 a1 01 	sts	0x01A1, r1
     7ac:	10 92 a2 01 	sts	0x01A2, r1
     7b0:	10 92 a3 01 	sts	0x01A3, r1
     7b4:	10 92 a4 01 	sts	0x01A4, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7b8:	10 92 a5 01 	sts	0x01A5, r1
     7bc:	10 92 a6 01 	sts	0x01A6, r1
     7c0:	10 92 a7 01 	sts	0x01A7, r1
     7c4:	10 92 a8 01 	sts	0x01A8, r1
  }
  #endif
  
}
     7c8:	08 95       	ret

000007ca <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7ca:	7f 92       	push	r7
     7cc:	8f 92       	push	r8
     7ce:	9f 92       	push	r9
     7d0:	af 92       	push	r10
     7d2:	bf 92       	push	r11
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	2a 97       	sbiw	r28, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     7f6:	c0 90 49 01 	lds	r12, 0x0149
     7fa:	d0 90 4a 01 	lds	r13, 0x014A
     7fe:	f6 01       	movw	r30, r12
     800:	80 81       	ld	r24, Z
     802:	80 ff       	sbrs	r24, 0
     804:	31 c0       	rjmp	.+98     	; 0x868 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     806:	01 30       	cpi	r16, 0x01	; 1
     808:	11 05       	cpc	r17, r1
     80a:	11 f4       	brne	.+4      	; 0x810 <Timebase_Timer_Config+0x46>
     80c:	96 e0       	ldi	r25, 0x06	; 6
     80e:	19 c0       	rjmp	.+50     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     810:	02 30       	cpi	r16, 0x02	; 2
     812:	11 05       	cpc	r17, r1
     814:	11 f4       	brne	.+4      	; 0x81a <Timebase_Timer_Config+0x50>
     816:	95 e0       	ldi	r25, 0x05	; 5
     818:	14 c0       	rjmp	.+40     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     81a:	04 30       	cpi	r16, 0x04	; 4
     81c:	11 05       	cpc	r17, r1
     81e:	11 f4       	brne	.+4      	; 0x824 <Timebase_Timer_Config+0x5a>
     820:	94 e0       	ldi	r25, 0x04	; 4
     822:	0f c0       	rjmp	.+30     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     824:	08 30       	cpi	r16, 0x08	; 8
     826:	11 05       	cpc	r17, r1
     828:	11 f4       	brne	.+4      	; 0x82e <Timebase_Timer_Config+0x64>
     82a:	93 e0       	ldi	r25, 0x03	; 3
     82c:	0a c0       	rjmp	.+20     	; 0x842 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     82e:	00 31       	cpi	r16, 0x10	; 16
     830:	11 05       	cpc	r17, r1
     832:	11 f4       	brne	.+4      	; 0x838 <Timebase_Timer_Config+0x6e>
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	05 c0       	rjmp	.+10     	; 0x842 <Timebase_Timer_Config+0x78>
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	00 32       	cpi	r16, 0x20	; 32
     83c:	11 05       	cpc	r17, r1
     83e:	09 f4       	brne	.+2      	; 0x842 <Timebase_Timer_Config+0x78>
     840:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     842:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     844:	84 b7       	in	r24, 0x34	; 52
     846:	87 7f       	andi	r24, 0xF7	; 247
     848:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     84a:	80 91 60 00 	lds	r24, 0x0060
     84e:	80 68       	ori	r24, 0x80	; 128
     850:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     854:	80 91 60 00 	lds	r24, 0x0060
     858:	88 61       	ori	r24, 0x18	; 24
     85a:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     85e:	90 64       	ori	r25, 0x40	; 64
     860:	90 93 60 00 	sts	0x0060, r25
    sei();
     864:	78 94       	sei
     866:	67 c0       	rjmp	.+206    	; 0x936 <__stack+0x37>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     868:	81 fd       	sbrc	r24, 1
     86a:	65 c0       	rjmp	.+202    	; 0x936 <__stack+0x37>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     86c:	82 ff       	sbrs	r24, 2
     86e:	63 c0       	rjmp	.+198    	; 0x936 <__stack+0x37>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     870:	de 01       	movw	r26, r28
     872:	11 96       	adiw	r26, 0x01	; 1
     874:	e0 e1       	ldi	r30, 0x10	; 16
     876:	f1 e0       	ldi	r31, 0x01	; 1
     878:	8a e0       	ldi	r24, 0x0A	; 10
     87a:	01 90       	ld	r0, Z+
     87c:	0d 92       	st	X+, r0
     87e:	81 50       	subi	r24, 0x01	; 1
     880:	e1 f7       	brne	.-8      	; 0x87a <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     882:	98 01       	movw	r18, r16
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	7b e1       	ldi	r23, 0x1B	; 27
     88c:	87 eb       	ldi	r24, 0xB7	; 183
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
     894:	72 2e       	mov	r7, r18
     896:	83 2e       	mov	r8, r19
     898:	94 2e       	mov	r9, r20
     89a:	e5 2e       	mov	r14, r21
     89c:	5e 01       	movw	r10, r28
     89e:	08 94       	sec
     8a0:	a1 1c       	adc	r10, r1
     8a2:	b1 1c       	adc	r11, r1
     8a4:	c9 01       	movw	r24, r18
     8a6:	da 01       	movw	r26, r20
     8a8:	9c 01       	movw	r18, r24
     8aa:	ad 01       	movw	r20, r26
     8ac:	ff 24       	eor	r15, r15
     8ae:	14 c0       	rjmp	.+40     	; 0x8d8 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     8b0:	f5 01       	movw	r30, r10
     8b2:	21 91       	ld	r18, Z+
     8b4:	31 91       	ld	r19, Z+
     8b6:	5f 01       	movw	r10, r30
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	67 2d       	mov	r22, r7
     8be:	78 2d       	mov	r23, r8
     8c0:	89 2d       	mov	r24, r9
     8c2:	9e 2d       	mov	r25, r14
     8c4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
     8c8:	c9 01       	movw	r24, r18
     8ca:	da 01       	movw	r26, r20
     8cc:	9c 01       	movw	r18, r24
     8ce:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8d0:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8d2:	f5 e0       	ldi	r31, 0x05	; 5
     8d4:	ff 16       	cp	r15, r31
     8d6:	31 f0       	breq	.+12     	; 0x8e4 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8d8:	2f 3f       	cpi	r18, 0xFF	; 255
     8da:	31 05       	cpc	r19, r1
     8dc:	41 05       	cpc	r20, r1
     8de:	51 05       	cpc	r21, r1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <Timebase_Timer_Config+0x11a>
     8e2:	34 f7       	brge	.-52     	; 0x8b0 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8e4:	8f 2d       	mov	r24, r15
     8e6:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8e8:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8ea:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8ec:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8f0:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8f2:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8f4:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     8f6:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     8f8:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     8fa:	88 23       	and	r24, r24
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
	  TCCR0B = (1<<CS00);
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	0f c0       	rjmp	.+30     	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 1){
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	11 f4       	brne	.+4      	; 0x90a <__stack+0xb>
	  TCCR0B = (1<<CS01);
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	0b c0       	rjmp	.+22     	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 2){
     90a:	82 30       	cpi	r24, 0x02	; 2
     90c:	11 f4       	brne	.+4      	; 0x912 <__stack+0x13>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     90e:	83 e0       	ldi	r24, 0x03	; 3
     910:	07 c0       	rjmp	.+14     	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 3){
     912:	83 30       	cpi	r24, 0x03	; 3
     914:	11 f4       	brne	.+4      	; 0x91a <__stack+0x1b>
	  TCCR0B = (1<<CS02);
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
	}else if(clock_div_index == 4){
     91a:	84 30       	cpi	r24, 0x04	; 4
     91c:	11 f4       	brne	.+4      	; 0x922 <__stack+0x23>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     922:	82 2f       	mov	r24, r18
     924:	80 95       	com	r24
     926:	f6 01       	movw	r30, r12
     928:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 6e 00 	sts	0x006E, r24
    sei();
     934:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     936:	f6 01       	movw	r30, r12
     938:	12 83       	std	Z+2, r17	; 0x02
     93a:	01 83       	std	Z+1, r16	; 0x01
}
     93c:	2a 96       	adiw	r28, 0x0a	; 10
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	1f 91       	pop	r17
     94e:	0f 91       	pop	r16
     950:	ff 90       	pop	r15
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	9f 90       	pop	r9
     95e:	8f 90       	pop	r8
     960:	7f 90       	pop	r7
     962:	08 95       	ret

00000964 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     964:	f8 94       	cli
}
     966:	08 95       	ret

00000968 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     968:	78 94       	sei
}
     96a:	08 95       	ret

0000096c <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     96c:	e0 91 49 01 	lds	r30, 0x0149
     970:	f0 91 4a 01 	lds	r31, 0x014A
     974:	86 8d       	ldd	r24, Z+30	; 0x1e
}
     976:	08 95       	ret

00000978 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     978:	e0 91 49 01 	lds	r30, 0x0149
     97c:	f0 91 4a 01 	lds	r31, 0x014A
     980:	86 8d       	ldd	r24, Z+30	; 0x1e
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     982:	8f 33       	cpi	r24, 0x3F	; 63
     984:	18 f4       	brcc	.+6      	; 0x98c <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     986:	86 8d       	ldd	r24, Z+30	; 0x1e
     988:	8f 5f       	subi	r24, 0xFF	; 255
     98a:	86 8f       	std	Z+30, r24	; 0x1e
     98c:	08 95       	ret

0000098e <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     98e:	e0 91 49 01 	lds	r30, 0x0149
     992:	f0 91 4a 01 	lds	r31, 0x014A
     996:	86 8d       	ldd	r24, Z+30	; 0x1e
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     998:	88 23       	and	r24, r24
     99a:	19 f0       	breq	.+6      	; 0x9a2 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     99c:	86 8d       	ldd	r24, Z+30	; 0x1e
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	86 8f       	std	Z+30, r24	; 0x1e
     9a2:	08 95       	ret

000009a4 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     9a4:	e0 91 49 01 	lds	r30, 0x0149
     9a8:	f0 91 4a 01 	lds	r31, 0x014A
     9ac:	16 8e       	std	Z+30, r1	; 0x1e
}
     9ae:	08 95       	ret

000009b0 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     9b0:	e0 91 49 01 	lds	r30, 0x0149
     9b4:	f0 91 4a 01 	lds	r31, 0x014A
     9b8:	26 85       	ldd	r18, Z+14	; 0x0e
     9ba:	37 85       	ldd	r19, Z+15	; 0x0f
}
     9bc:	c9 01       	movw	r24, r18
     9be:	08 95       	ret

000009c0 <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     9c0:	e0 91 49 01 	lds	r30, 0x0149
     9c4:	f0 91 4a 01 	lds	r31, 0x014A
     9c8:	20 89       	ldd	r18, Z+16	; 0x10
     9ca:	31 89       	ldd	r19, Z+17	; 0x11
     9cc:	42 89       	ldd	r20, Z+18	; 0x12
     9ce:	53 89       	ldd	r21, Z+19	; 0x13
}
     9d0:	b9 01       	movw	r22, r18
     9d2:	ca 01       	movw	r24, r20
     9d4:	08 95       	ret

000009d6 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     9d6:	e0 91 49 01 	lds	r30, 0x0149
     9da:	f0 91 4a 01 	lds	r31, 0x014A
     9de:	20 85       	ldd	r18, Z+8	; 0x08
     9e0:	31 85       	ldd	r19, Z+9	; 0x09
}
     9e2:	c9 01       	movw	r24, r18
     9e4:	08 95       	ret

000009e6 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9e6:	e0 91 49 01 	lds	r30, 0x0149
     9ea:	f0 91 4a 01 	lds	r31, 0x014A
     9ee:	22 85       	ldd	r18, Z+10	; 0x0a
     9f0:	33 85       	ldd	r19, Z+11	; 0x0b
     9f2:	44 85       	ldd	r20, Z+12	; 0x0c
     9f4:	55 85       	ldd	r21, Z+13	; 0x0d
}
     9f6:	b9 01       	movw	r22, r18
     9f8:	ca 01       	movw	r24, r20
     9fa:	08 95       	ret

000009fc <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     9fc:	e0 91 49 01 	lds	r30, 0x0149
     a00:	f0 91 4a 01 	lds	r31, 0x014A
     a04:	91 87       	std	Z+9, r25	; 0x09
     a06:	80 87       	std	Z+8, r24	; 0x08
}
     a08:	08 95       	ret

00000a0a <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     a0a:	e0 91 49 01 	lds	r30, 0x0149
     a0e:	f0 91 4a 01 	lds	r31, 0x014A
     a12:	62 87       	std	Z+10, r22	; 0x0a
     a14:	73 87       	std	Z+11, r23	; 0x0b
     a16:	84 87       	std	Z+12, r24	; 0x0c
     a18:	95 87       	std	Z+13, r25	; 0x0d
}
     a1a:	08 95       	ret

00000a1c <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     a1c:	6f 92       	push	r6
     a1e:	7f 92       	push	r7
     a20:	8f 92       	push	r8
     a22:	9f 92       	push	r9
     a24:	af 92       	push	r10
     a26:	bf 92       	push	r11
     a28:	cf 92       	push	r12
     a2a:	df 92       	push	r13
     a2c:	ef 92       	push	r14
     a2e:	ff 92       	push	r15
     a30:	0f 93       	push	r16
     a32:	1f 93       	push	r17
     a34:	cf 93       	push	r28
     a36:	df 93       	push	r29
     a38:	5c 01       	movw	r10, r24
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a3a:	c0 91 49 01 	lds	r28, 0x0149
     a3e:	d0 91 4a 01 	lds	r29, 0x014A
     a42:	e8 84       	ldd	r14, Y+8	; 0x08
     a44:	f9 84       	ldd	r15, Y+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a46:	2a 85       	ldd	r18, Y+10	; 0x0a
     a48:	3b 85       	ldd	r19, Y+11	; 0x0b
     a4a:	4c 85       	ldd	r20, Y+12	; 0x0c
     a4c:	5d 85       	ldd	r21, Y+13	; 0x0d
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a4e:	69 81       	ldd	r22, Y+1	; 0x01
     a50:	7a 81       	ldd	r23, Y+2	; 0x02
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__mulsi3>
     a5a:	3b 01       	movw	r6, r22
     a5c:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a5e:	00 e0       	ldi	r16, 0x00	; 0
     a60:	10 e0       	ldi	r17, 0x00	; 0
     a62:	6e 0c       	add	r6, r14
     a64:	7f 1c       	adc	r7, r15
     a66:	80 1e       	adc	r8, r16
     a68:	91 1e       	adc	r9, r17
  smpl_val += value;
     a6a:	cc 24       	eor	r12, r12
     a6c:	dd 24       	eor	r13, r13
     a6e:	6a 0c       	add	r6, r10
     a70:	7b 1c       	adc	r7, r11
     a72:	8c 1c       	adc	r8, r12
     a74:	9d 1c       	adc	r9, r13
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	12 c0       	rjmp	.+36     	; 0xaa4 <Timebase_Timer_Delay_SubSeconds+0x88>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a80:	e8 84       	ldd	r14, Y+8	; 0x08
     a82:	f9 84       	ldd	r15, Y+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a84:	2a 85       	ldd	r18, Y+10	; 0x0a
     a86:	3b 85       	ldd	r19, Y+11	; 0x0b
     a88:	4c 85       	ldd	r20, Y+12	; 0x0c
     a8a:	5d 85       	ldd	r21, Y+13	; 0x0d
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     a8c:	69 81       	ldd	r22, Y+1	; 0x01
     a8e:	7a 81       	ldd	r23, Y+2	; 0x02
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__mulsi3>
	curr_val += curr_ss;
     a98:	00 e0       	ldi	r16, 0x00	; 0
     a9a:	10 e0       	ldi	r17, 0x00	; 0
     a9c:	6e 0d       	add	r22, r14
     a9e:	7f 1d       	adc	r23, r15
     aa0:	80 1f       	adc	r24, r16
     aa2:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     aa4:	66 15       	cp	r22, r6
     aa6:	77 05       	cpc	r23, r7
     aa8:	88 05       	cpc	r24, r8
     aaa:	99 05       	cpc	r25, r9
     aac:	4c f3       	brlt	.-46     	; 0xa80 <Timebase_Timer_Delay_SubSeconds+0x64>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	7f 90       	pop	r7
     ac8:	6f 90       	pop	r6
     aca:	08 95       	ret

00000acc <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     acc:	bc 01       	movw	r22, r24
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ace:	e0 91 49 01 	lds	r30, 0x0149
     ad2:	f0 91 4a 01 	lds	r31, 0x014A
     ad6:	80 85       	ldd	r24, Z+8	; 0x08
     ad8:	91 85       	ldd	r25, Z+9	; 0x09
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     ada:	24 81       	ldd	r18, Z+4	; 0x04
     adc:	35 81       	ldd	r19, Z+5	; 0x05
     ade:	46 81       	ldd	r20, Z+6	; 0x06
     ae0:	57 81       	ldd	r21, Z+7	; 0x07
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	82 17       	cp	r24, r18
     ae8:	93 07       	cpc	r25, r19
     aea:	a4 07       	cpc	r26, r20
     aec:	b5 07       	cpc	r27, r21
     aee:	99 f7       	brne	.-26     	; 0xad6 <Timebase_Timer_Await_SubSeconds+0xa>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     af0:	80 85       	ldd	r24, Z+8	; 0x08
     af2:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     af4:	86 0f       	add	r24, r22
     af6:	97 1f       	adc	r25, r23
     af8:	a0 e0       	ldi	r26, 0x00	; 0
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	84 83       	std	Z+4, r24	; 0x04
     afe:	95 83       	std	Z+5, r25	; 0x05
     b00:	a6 83       	std	Z+6, r26	; 0x06
     b02:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     b04:	24 81       	ldd	r18, Z+4	; 0x04
     b06:	35 81       	ldd	r19, Z+5	; 0x05
     b08:	46 81       	ldd	r20, Z+6	; 0x06
     b0a:	57 81       	ldd	r21, Z+7	; 0x07
     b0c:	81 81       	ldd	r24, Z+1	; 0x01
     b0e:	92 81       	ldd	r25, Z+2	; 0x02
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	28 17       	cp	r18, r24
     b16:	39 07       	cpc	r19, r25
     b18:	4a 07       	cpc	r20, r26
     b1a:	5b 07       	cpc	r21, r27
     b1c:	84 f0       	brlt	.+32     	; 0xb3e <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b1e:	24 81       	ldd	r18, Z+4	; 0x04
     b20:	35 81       	ldd	r19, Z+5	; 0x05
     b22:	46 81       	ldd	r20, Z+6	; 0x06
     b24:	57 81       	ldd	r21, Z+7	; 0x07
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	92 81       	ldd	r25, Z+2	; 0x02
     b2a:	a0 e0       	ldi	r26, 0x00	; 0
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	28 1b       	sub	r18, r24
     b30:	39 0b       	sbc	r19, r25
     b32:	4a 0b       	sbc	r20, r26
     b34:	5b 0b       	sbc	r21, r27
     b36:	24 83       	std	Z+4, r18	; 0x04
     b38:	35 83       	std	Z+5, r19	; 0x05
     b3a:	46 83       	std	Z+6, r20	; 0x06
     b3c:	57 83       	std	Z+7, r21	; 0x07
     b3e:	08 95       	ret

00000b40 <Timebase_Timer_Delay_Seconds>:
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b40:	e0 91 49 01 	lds	r30, 0x0149
     b44:	f0 91 4a 01 	lds	r31, 0x014A
     b48:	22 85       	ldd	r18, Z+10	; 0x0a
     b4a:	33 85       	ldd	r19, Z+11	; 0x0b
     b4c:	44 85       	ldd	r20, Z+12	; 0x0c
     b4e:	55 85       	ldd	r21, Z+13	; 0x0d


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	82 0f       	add	r24, r18
     b56:	93 1f       	adc	r25, r19
     b58:	a4 1f       	adc	r26, r20
     b5a:	b5 1f       	adc	r27, r21
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <Timebase_Timer_Delay_Seconds+0x2e>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b66:	22 85       	ldd	r18, Z+10	; 0x0a
     b68:	33 85       	ldd	r19, Z+11	; 0x0b
     b6a:	44 85       	ldd	r20, Z+12	; 0x0c
     b6c:	55 85       	ldd	r21, Z+13	; 0x0d

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     b6e:	28 17       	cp	r18, r24
     b70:	39 07       	cpc	r19, r25
     b72:	4a 07       	cpc	r20, r26
     b74:	5b 07       	cpc	r21, r27
     b76:	bc f3       	brlt	.-18     	; 0xb66 <Timebase_Timer_Delay_Seconds+0x26>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     b78:	08 95       	ret

00000b7a <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b7a:	e0 91 49 01 	lds	r30, 0x0149
     b7e:	f0 91 4a 01 	lds	r31, 0x014A
     b82:	14 8a       	std	Z+20, r1	; 0x14
     b84:	15 8a       	std	Z+21, r1	; 0x15
     b86:	16 8a       	std	Z+22, r1	; 0x16
     b88:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.StartTimeSubSeconds = 0;
     b8a:	10 8e       	std	Z+24, r1	; 0x18
     b8c:	11 8e       	std	Z+25, r1	; 0x19
     b8e:	12 8e       	std	Z+26, r1	; 0x1a
     b90:	13 8e       	std	Z+27, r1	; 0x1b
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b92:	14 8e       	std	Z+28, r1	; 0x1c
}
     b94:	08 95       	ret

00000b96 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     b96:	e0 91 49 01 	lds	r30, 0x0149
     b9a:	f0 91 4a 01 	lds	r31, 0x014A
     b9e:	84 8d       	ldd	r24, Z+28	; 0x1c
     ba0:	88 23       	and	r24, r24
     ba2:	91 f4       	brne	.+36     	; 0xbc8 <Timebase_Window_Timer_Start+0x32>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ba4:	82 85       	ldd	r24, Z+10	; 0x0a
     ba6:	93 85       	ldd	r25, Z+11	; 0x0b
     ba8:	a4 85       	ldd	r26, Z+12	; 0x0c
     baa:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     bac:	84 8b       	std	Z+20, r24	; 0x14
     bae:	95 8b       	std	Z+21, r25	; 0x15
     bb0:	a6 8b       	std	Z+22, r26	; 0x16
     bb2:	b7 8b       	std	Z+23, r27	; 0x17
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     bb4:	80 85       	ldd	r24, Z+8	; 0x08
     bb6:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	80 8f       	std	Z+24, r24	; 0x18
     bbe:	91 8f       	std	Z+25, r25	; 0x19
     bc0:	a2 8f       	std	Z+26, r26	; 0x1a
     bc2:	b3 8f       	std	Z+27, r27	; 0x1b
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	84 8f       	std	Z+28, r24	; 0x1c
     bc8:	08 95       	ret

00000bca <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bd6:	c0 91 49 01 	lds	r28, 0x0149
     bda:	d0 91 4a 01 	lds	r29, 0x014A
     bde:	8c 8d       	ldd	r24, Y+28	; 0x1c
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	21 f0       	breq	.+8      	; 0xbec <Timebase_Window_Timer_Get_Interval+0x22>
     be4:	ee 24       	eor	r14, r14
     be6:	ff 24       	eor	r15, r15
     be8:	87 01       	movw	r16, r14
     bea:	23 c0       	rjmp	.+70     	; 0xc32 <Timebase_Window_Timer_Get_Interval+0x68>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     bec:	2a 85       	ldd	r18, Y+10	; 0x0a
     bee:	3b 85       	ldd	r19, Y+11	; 0x0b
     bf0:	4c 85       	ldd	r20, Y+12	; 0x0c
     bf2:	5d 85       	ldd	r21, Y+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     bf4:	88 85       	ldd	r24, Y+8	; 0x08
     bf6:	99 85       	ldd	r25, Y+9	; 0x09

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     bf8:	7c 01       	movw	r14, r24
     bfa:	00 e0       	ldi	r16, 0x00	; 0
     bfc:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     bfe:	8c 89       	ldd	r24, Y+20	; 0x14
     c00:	9d 89       	ldd	r25, Y+21	; 0x15
     c02:	ae 89       	ldd	r26, Y+22	; 0x16
     c04:	bf 89       	ldd	r27, Y+23	; 0x17
     c06:	28 1b       	sub	r18, r24
     c08:	39 0b       	sbc	r19, r25
     c0a:	4a 0b       	sbc	r20, r26
     c0c:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c0e:	69 81       	ldd	r22, Y+1	; 0x01
     c10:	7a 81       	ldd	r23, Y+2	; 0x02
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__mulsi3>
	curr_s += curr_ss;
     c1a:	28 8d       	ldd	r18, Y+24	; 0x18
     c1c:	39 8d       	ldd	r19, Y+25	; 0x19
     c1e:	4a 8d       	ldd	r20, Y+26	; 0x1a
     c20:	5b 8d       	ldd	r21, Y+27	; 0x1b
     c22:	e2 1a       	sub	r14, r18
     c24:	f3 0a       	sbc	r15, r19
     c26:	04 0b       	sbc	r16, r20
     c28:	15 0b       	sbc	r17, r21
     c2a:	e6 0e       	add	r14, r22
     c2c:	f7 1e       	adc	r15, r23
     c2e:	08 1f       	adc	r16, r24
     c30:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     c32:	b7 01       	movw	r22, r14
     c34:	c8 01       	movw	r24, r16
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	08 95       	ret

00000c44 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     c44:	0e 94 e5 05 	call	0xbca	; 0xbca <Timebase_Window_Timer_Get_Interval>
     c48:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c4a:	e0 91 49 01 	lds	r30, 0x0149
     c4e:	f0 91 4a 01 	lds	r31, 0x014A
     c52:	84 8d       	ldd	r24, Z+28	; 0x1c
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	49 f4       	brne	.+18     	; 0xc6a <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c58:	14 8a       	std	Z+20, r1	; 0x14
     c5a:	15 8a       	std	Z+21, r1	; 0x15
     c5c:	16 8a       	std	Z+22, r1	; 0x16
     c5e:	17 8a       	std	Z+23, r1	; 0x17
  Timebase->Time.StartTimeSubSeconds = 0;
     c60:	10 8e       	std	Z+24, r1	; 0x18
     c62:	11 8e       	std	Z+25, r1	; 0x19
     c64:	12 8e       	std	Z+26, r1	; 0x1a
     c66:	13 8e       	std	Z+27, r1	; 0x1b
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c68:	14 8e       	std	Z+28, r1	; 0x1c
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     c6a:	82 2f       	mov	r24, r18
     c6c:	08 95       	ret

00000c6e <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     c6e:	e0 91 49 01 	lds	r30, 0x0149
     c72:	f0 91 4a 01 	lds	r31, 0x014A
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	29 e1       	ldi	r18, 0x19	; 25
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	ac 01       	movw	r20, r24
     c7e:	42 9f       	mul	r20, r18
     c80:	c0 01       	movw	r24, r0
     c82:	43 9f       	mul	r20, r19
     c84:	90 0d       	add	r25, r0
     c86:	52 9f       	mul	r21, r18
     c88:	90 0d       	add	r25, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	e8 0f       	add	r30, r24
     c8e:	f9 1f       	adc	r31, r25
     c90:	87 8d       	ldd	r24, Z+31	; 0x1f
     c92:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     c94:	8f 70       	andi	r24, 0x0F	; 15
     c96:	08 95       	ret

00000c98 <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c98:	e0 91 49 01 	lds	r30, 0x0149
     c9c:	f0 91 4a 01 	lds	r31, 0x014A
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	29 e1       	ldi	r18, 0x19	; 25
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	ac 01       	movw	r20, r24
     ca8:	42 9f       	mul	r20, r18
     caa:	c0 01       	movw	r24, r0
     cac:	43 9f       	mul	r20, r19
     cae:	90 0d       	add	r25, r0
     cb0:	52 9f       	mul	r21, r18
     cb2:	90 0d       	add	r25, r0
     cb4:	11 24       	eor	r1, r1
     cb6:	e8 0f       	add	r30, r24
     cb8:	f9 1f       	adc	r31, r25
     cba:	6f 70       	andi	r22, 0x0F	; 15
     cbc:	66 0f       	add	r22, r22
     cbe:	87 8d       	ldd	r24, Z+31	; 0x1f
     cc0:	81 7e       	andi	r24, 0xE1	; 225
     cc2:	86 2b       	or	r24, r22
     cc4:	87 8f       	std	Z+31, r24	; 0x1f
}
     cc6:	08 95       	ret

00000cc8 <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     cc8:	e0 91 49 01 	lds	r30, 0x0149
     ccc:	f0 91 4a 01 	lds	r31, 0x014A
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	29 e1       	ldi	r18, 0x19	; 25
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	ac 01       	movw	r20, r24
     cd8:	42 9f       	mul	r20, r18
     cda:	c0 01       	movw	r24, r0
     cdc:	43 9f       	mul	r20, r19
     cde:	90 0d       	add	r25, r0
     ce0:	52 9f       	mul	r21, r18
     ce2:	90 0d       	add	r25, r0
     ce4:	11 24       	eor	r1, r1
     ce6:	e8 0f       	add	r30, r24
     ce8:	f9 1f       	adc	r31, r25
     cea:	df 01       	movw	r26, r30
     cec:	d0 96       	adiw	r26, 0x30	; 48
     cee:	60 a9       	ldd	r22, Z+48	; 0x30
     cf0:	11 96       	adiw	r26, 0x01	; 1
     cf2:	7c 91       	ld	r23, X
     cf4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8c 91       	ld	r24, X
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	13 96       	adiw	r26, 0x03	; 3
     cfe:	9c 91       	ld	r25, X
     d00:	08 95       	ret

00000d02 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     d02:	e0 91 49 01 	lds	r30, 0x0149
     d06:	f0 91 4a 01 	lds	r31, 0x014A
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	29 e1       	ldi	r18, 0x19	; 25
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	dc 01       	movw	r26, r24
     d12:	a2 9f       	mul	r26, r18
     d14:	c0 01       	movw	r24, r0
     d16:	a3 9f       	mul	r26, r19
     d18:	90 0d       	add	r25, r0
     d1a:	b2 9f       	mul	r27, r18
     d1c:	90 0d       	add	r25, r0
     d1e:	11 24       	eor	r1, r1
     d20:	e8 0f       	add	r30, r24
     d22:	f9 1f       	adc	r31, r25
     d24:	40 ab       	std	Z+48, r20	; 0x30
     d26:	51 ab       	std	Z+49, r21	; 0x31
     d28:	62 ab       	std	Z+50, r22	; 0x32
     d2a:	73 ab       	std	Z+51, r23	; 0x33
}
     d2c:	08 95       	ret

00000d2e <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     d2e:	e0 91 49 01 	lds	r30, 0x0149
     d32:	f0 91 4a 01 	lds	r31, 0x014A
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	29 e1       	ldi	r18, 0x19	; 25
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	ac 01       	movw	r20, r24
     d3e:	42 9f       	mul	r20, r18
     d40:	c0 01       	movw	r24, r0
     d42:	43 9f       	mul	r20, r19
     d44:	90 0d       	add	r25, r0
     d46:	52 9f       	mul	r21, r18
     d48:	90 0d       	add	r25, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	e8 0f       	add	r30, r24
     d4e:	f9 1f       	adc	r31, r25
     d50:	df 01       	movw	r26, r30
     d52:	90 96       	adiw	r26, 0x20	; 32
     d54:	60 a1       	ldd	r22, Z+32	; 0x20
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	7c 91       	ld	r23, X
     d5a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	8c 91       	ld	r24, X
     d60:	12 97       	sbiw	r26, 0x02	; 2
     d62:	13 96       	adiw	r26, 0x03	; 3
     d64:	9c 91       	ld	r25, X
     d66:	08 95       	ret

00000d68 <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     d68:	e0 91 49 01 	lds	r30, 0x0149
     d6c:	f0 91 4a 01 	lds	r31, 0x014A
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	29 e1       	ldi	r18, 0x19	; 25
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	ac 01       	movw	r20, r24
     d78:	42 9f       	mul	r20, r18
     d7a:	c0 01       	movw	r24, r0
     d7c:	43 9f       	mul	r20, r19
     d7e:	90 0d       	add	r25, r0
     d80:	52 9f       	mul	r21, r18
     d82:	90 0d       	add	r25, r0
     d84:	11 24       	eor	r1, r1
     d86:	e8 0f       	add	r30, r24
     d88:	f9 1f       	adc	r31, r25
     d8a:	df 01       	movw	r26, r30
     d8c:	94 96       	adiw	r26, 0x24	; 36
     d8e:	64 a1       	ldd	r22, Z+36	; 0x24
     d90:	11 96       	adiw	r26, 0x01	; 1
     d92:	7c 91       	ld	r23, X
     d94:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8c 91       	ld	r24, X
     d9a:	12 97       	sbiw	r26, 0x02	; 2
     d9c:	13 96       	adiw	r26, 0x03	; 3
     d9e:	9c 91       	ld	r25, X
     da0:	08 95       	ret

00000da2 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     da2:	e0 91 49 01 	lds	r30, 0x0149
     da6:	f0 91 4a 01 	lds	r31, 0x014A
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	29 e1       	ldi	r18, 0x19	; 25
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	dc 01       	movw	r26, r24
     db2:	a2 9f       	mul	r26, r18
     db4:	c0 01       	movw	r24, r0
     db6:	a3 9f       	mul	r26, r19
     db8:	90 0d       	add	r25, r0
     dba:	b2 9f       	mul	r27, r18
     dbc:	90 0d       	add	r25, r0
     dbe:	11 24       	eor	r1, r1
     dc0:	e8 0f       	add	r30, r24
     dc2:	f9 1f       	adc	r31, r25
     dc4:	40 a3       	std	Z+32, r20	; 0x20
     dc6:	51 a3       	std	Z+33, r21	; 0x21
     dc8:	62 a3       	std	Z+34, r22	; 0x22
     dca:	73 a3       	std	Z+35, r23	; 0x23
}
     dcc:	08 95       	ret

00000dce <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     dce:	e0 91 49 01 	lds	r30, 0x0149
     dd2:	f0 91 4a 01 	lds	r31, 0x014A
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	29 e1       	ldi	r18, 0x19	; 25
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	dc 01       	movw	r26, r24
     dde:	a2 9f       	mul	r26, r18
     de0:	c0 01       	movw	r24, r0
     de2:	a3 9f       	mul	r26, r19
     de4:	90 0d       	add	r25, r0
     de6:	b2 9f       	mul	r27, r18
     de8:	90 0d       	add	r25, r0
     dea:	11 24       	eor	r1, r1
     dec:	e8 0f       	add	r30, r24
     dee:	f9 1f       	adc	r31, r25
     df0:	44 a3       	std	Z+36, r20	; 0x24
     df2:	55 a3       	std	Z+37, r21	; 0x25
     df4:	66 a3       	std	Z+38, r22	; 0x26
     df6:	77 a3       	std	Z+39, r23	; 0x27
}
     df8:	08 95       	ret

00000dfa <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     dfa:	e0 91 49 01 	lds	r30, 0x0149
     dfe:	f0 91 4a 01 	lds	r31, 0x014A
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	29 e1       	ldi	r18, 0x19	; 25
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	ac 01       	movw	r20, r24
     e0a:	42 9f       	mul	r20, r18
     e0c:	c0 01       	movw	r24, r0
     e0e:	43 9f       	mul	r20, r19
     e10:	90 0d       	add	r25, r0
     e12:	52 9f       	mul	r21, r18
     e14:	90 0d       	add	r25, r0
     e16:	11 24       	eor	r1, r1
     e18:	e8 0f       	add	r30, r24
     e1a:	f9 1f       	adc	r31, r25
     e1c:	df 01       	movw	r26, r30
     e1e:	98 96       	adiw	r26, 0x28	; 40
     e20:	60 a5       	ldd	r22, Z+40	; 0x28
     e22:	11 96       	adiw	r26, 0x01	; 1
     e24:	7c 91       	ld	r23, X
     e26:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     e28:	12 96       	adiw	r26, 0x02	; 2
     e2a:	8c 91       	ld	r24, X
     e2c:	12 97       	sbiw	r26, 0x02	; 2
     e2e:	13 96       	adiw	r26, 0x03	; 3
     e30:	9c 91       	ld	r25, X
     e32:	08 95       	ret

00000e34 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     e34:	e0 91 49 01 	lds	r30, 0x0149
     e38:	f0 91 4a 01 	lds	r31, 0x014A
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	29 e1       	ldi	r18, 0x19	; 25
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	dc 01       	movw	r26, r24
     e44:	a2 9f       	mul	r26, r18
     e46:	c0 01       	movw	r24, r0
     e48:	a3 9f       	mul	r26, r19
     e4a:	90 0d       	add	r25, r0
     e4c:	b2 9f       	mul	r27, r18
     e4e:	90 0d       	add	r25, r0
     e50:	11 24       	eor	r1, r1
     e52:	e8 0f       	add	r30, r24
     e54:	f9 1f       	adc	r31, r25
     e56:	40 a7       	std	Z+40, r20	; 0x28
     e58:	51 a7       	std	Z+41, r21	; 0x29
     e5a:	62 a7       	std	Z+42, r22	; 0x2a
     e5c:	73 a7       	std	Z+43, r23	; 0x2b
}
     e5e:	08 95       	ret

00000e60 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     e60:	e0 91 49 01 	lds	r30, 0x0149
     e64:	f0 91 4a 01 	lds	r31, 0x014A
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	29 e1       	ldi	r18, 0x19	; 25
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	ac 01       	movw	r20, r24
     e70:	42 9f       	mul	r20, r18
     e72:	c0 01       	movw	r24, r0
     e74:	43 9f       	mul	r20, r19
     e76:	90 0d       	add	r25, r0
     e78:	52 9f       	mul	r21, r18
     e7a:	90 0d       	add	r25, r0
     e7c:	11 24       	eor	r1, r1
     e7e:	e8 0f       	add	r30, r24
     e80:	f9 1f       	adc	r31, r25
     e82:	df 01       	movw	r26, r30
     e84:	9c 96       	adiw	r26, 0x2c	; 44
     e86:	64 a5       	ldd	r22, Z+44	; 0x2c
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	7c 91       	ld	r23, X
     e8c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	8c 91       	ld	r24, X
     e92:	12 97       	sbiw	r26, 0x02	; 2
     e94:	13 96       	adiw	r26, 0x03	; 3
     e96:	9c 91       	ld	r25, X
     e98:	08 95       	ret

00000e9a <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
     e9a:	e0 91 49 01 	lds	r30, 0x0149
     e9e:	f0 91 4a 01 	lds	r31, 0x014A
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	29 e1       	ldi	r18, 0x19	; 25
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	dc 01       	movw	r26, r24
     eaa:	a2 9f       	mul	r26, r18
     eac:	c0 01       	movw	r24, r0
     eae:	a3 9f       	mul	r26, r19
     eb0:	90 0d       	add	r25, r0
     eb2:	b2 9f       	mul	r27, r18
     eb4:	90 0d       	add	r25, r0
     eb6:	11 24       	eor	r1, r1
     eb8:	e8 0f       	add	r30, r24
     eba:	f9 1f       	adc	r31, r25
     ebc:	44 a7       	std	Z+44, r20	; 0x2c
     ebe:	55 a7       	std	Z+45, r21	; 0x2d
     ec0:	66 a7       	std	Z+46, r22	; 0x2e
     ec2:	77 a7       	std	Z+47, r23	; 0x2f
}
     ec4:	08 95       	ret

00000ec6 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     ec6:	e0 91 49 01 	lds	r30, 0x0149
     eca:	f0 91 4a 01 	lds	r31, 0x014A
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	29 e1       	ldi	r18, 0x19	; 25
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	ac 01       	movw	r20, r24
     ed6:	42 9f       	mul	r20, r18
     ed8:	c0 01       	movw	r24, r0
     eda:	43 9f       	mul	r20, r19
     edc:	90 0d       	add	r25, r0
     ede:	52 9f       	mul	r21, r18
     ee0:	90 0d       	add	r25, r0
     ee2:	11 24       	eor	r1, r1
     ee4:	e8 0f       	add	r30, r24
     ee6:	f9 1f       	adc	r31, r25
     ee8:	df 01       	movw	r26, r30
     eea:	d4 96       	adiw	r26, 0x34	; 52
     eec:	64 a9       	ldd	r22, Z+52	; 0x34
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	7c 91       	ld	r23, X
     ef2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8c 91       	ld	r24, X
     ef8:	12 97       	sbiw	r26, 0x02	; 2
     efa:	13 96       	adiw	r26, 0x03	; 3
     efc:	9c 91       	ld	r25, X
     efe:	08 95       	ret

00000f00 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     f00:	e0 91 49 01 	lds	r30, 0x0149
     f04:	f0 91 4a 01 	lds	r31, 0x014A
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	29 e1       	ldi	r18, 0x19	; 25
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	dc 01       	movw	r26, r24
     f10:	a2 9f       	mul	r26, r18
     f12:	c0 01       	movw	r24, r0
     f14:	a3 9f       	mul	r26, r19
     f16:	90 0d       	add	r25, r0
     f18:	b2 9f       	mul	r27, r18
     f1a:	90 0d       	add	r25, r0
     f1c:	11 24       	eor	r1, r1
     f1e:	e8 0f       	add	r30, r24
     f20:	f9 1f       	adc	r31, r25
     f22:	44 ab       	std	Z+52, r20	; 0x34
     f24:	55 ab       	std	Z+53, r21	; 0x35
     f26:	66 ab       	std	Z+54, r22	; 0x36
     f28:	77 ab       	std	Z+55, r23	; 0x37
}
     f2a:	08 95       	ret

00000f2c <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     f2c:	e0 91 49 01 	lds	r30, 0x0149
     f30:	f0 91 4a 01 	lds	r31, 0x014A
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	29 e1       	ldi	r18, 0x19	; 25
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	ac 01       	movw	r20, r24
     f3c:	42 9f       	mul	r20, r18
     f3e:	c0 01       	movw	r24, r0
     f40:	43 9f       	mul	r20, r19
     f42:	90 0d       	add	r25, r0
     f44:	52 9f       	mul	r21, r18
     f46:	90 0d       	add	r25, r0
     f48:	11 24       	eor	r1, r1
     f4a:	e8 0f       	add	r30, r24
     f4c:	f9 1f       	adc	r31, r25
     f4e:	87 8d       	ldd	r24, Z+31	; 0x1f
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	08 95       	ret

00000f54 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     f54:	e0 91 49 01 	lds	r30, 0x0149
     f58:	f0 91 4a 01 	lds	r31, 0x014A
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	29 e1       	ldi	r18, 0x19	; 25
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	ac 01       	movw	r20, r24
     f64:	42 9f       	mul	r20, r18
     f66:	c0 01       	movw	r24, r0
     f68:	43 9f       	mul	r20, r19
     f6a:	90 0d       	add	r25, r0
     f6c:	52 9f       	mul	r21, r18
     f6e:	90 0d       	add	r25, r0
     f70:	11 24       	eor	r1, r1
     f72:	e8 0f       	add	r30, r24
     f74:	f9 1f       	adc	r31, r25
     f76:	87 8d       	ldd	r24, Z+31	; 0x1f
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	87 8f       	std	Z+31, r24	; 0x1f
}
     f7c:	08 95       	ret

00000f7e <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f7e:	e0 91 49 01 	lds	r30, 0x0149
     f82:	f0 91 4a 01 	lds	r31, 0x014A
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	29 e1       	ldi	r18, 0x19	; 25
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	ac 01       	movw	r20, r24
     f8e:	42 9f       	mul	r20, r18
     f90:	c0 01       	movw	r24, r0
     f92:	43 9f       	mul	r20, r19
     f94:	90 0d       	add	r25, r0
     f96:	52 9f       	mul	r21, r18
     f98:	90 0d       	add	r25, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
     fa0:	87 8d       	ldd	r24, Z+31	; 0x1f
     fa2:	8e 7f       	andi	r24, 0xFE	; 254
     fa4:	87 8f       	std	Z+31, r24	; 0x1f
}
     fa6:	08 95       	ret

00000fa8 <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     fa8:	e0 91 49 01 	lds	r30, 0x0149
     fac:	f0 91 4a 01 	lds	r31, 0x014A
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	29 e1       	ldi	r18, 0x19	; 25
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	ac 01       	movw	r20, r24
     fb8:	42 9f       	mul	r20, r18
     fba:	c0 01       	movw	r24, r0
     fbc:	43 9f       	mul	r20, r19
     fbe:	90 0d       	add	r25, r0
     fc0:	52 9f       	mul	r21, r18
     fc2:	90 0d       	add	r25, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	87 8d       	ldd	r24, Z+31	; 0x1f
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     fcc:	10 aa       	std	Z+48, r1	; 0x30
     fce:	11 aa       	std	Z+49, r1	; 0x31
     fd0:	12 aa       	std	Z+50, r1	; 0x32
     fd2:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     fd4:	10 a2       	std	Z+32, r1	; 0x20
     fd6:	11 a2       	std	Z+33, r1	; 0x21
     fd8:	12 a2       	std	Z+34, r1	; 0x22
     fda:	13 a2       	std	Z+35, r1	; 0x23
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     fdc:	14 a2       	std	Z+36, r1	; 0x24
     fde:	15 a2       	std	Z+37, r1	; 0x25
     fe0:	16 a2       	std	Z+38, r1	; 0x26
     fe2:	17 a2       	std	Z+39, r1	; 0x27
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     fe4:	10 a6       	std	Z+40, r1	; 0x28
     fe6:	11 a6       	std	Z+41, r1	; 0x29
     fe8:	12 a6       	std	Z+42, r1	; 0x2a
     fea:	13 a6       	std	Z+43, r1	; 0x2b
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
     fec:	14 a6       	std	Z+44, r1	; 0x2c
     fee:	15 a6       	std	Z+45, r1	; 0x2d
     ff0:	16 a6       	std	Z+46, r1	; 0x2e
     ff2:	17 a6       	std	Z+47, r1	; 0x2f
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     ff4:	14 aa       	std	Z+52, r1	; 0x34
     ff6:	15 aa       	std	Z+53, r1	; 0x35
     ff8:	16 aa       	std	Z+54, r1	; 0x36
     ffa:	17 aa       	std	Z+55, r1	; 0x37
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ffc:	80 7e       	andi	r24, 0xE0	; 224
     ffe:	87 8f       	std	Z+31, r24	; 0x1f
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
    1000:	08 95       	ret

00001002 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1002:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Timebase_UpCounter_SS_Reset>
}
    1006:	08 95       	ret

00001008 <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1008:	e0 91 49 01 	lds	r30, 0x0149
    100c:	f0 91 4a 01 	lds	r31, 0x014A
    1010:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1012:	29 e1       	ldi	r18, 0x19	; 25
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	ac 01       	movw	r20, r24
    1018:	42 9f       	mul	r20, r18
    101a:	c0 01       	movw	r24, r0
    101c:	43 9f       	mul	r20, r19
    101e:	90 0d       	add	r25, r0
    1020:	52 9f       	mul	r21, r18
    1022:	90 0d       	add	r25, r0
    1024:	11 24       	eor	r1, r1
    1026:	e8 0f       	add	r30, r24
    1028:	f9 1f       	adc	r31, r25
    102a:	97 8d       	ldd	r25, Z+31	; 0x1f
    102c:	89 2f       	mov	r24, r25
    102e:	86 95       	lsr	r24
    1030:	8f 70       	andi	r24, 0x0F	; 15
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	19 f0       	breq	.+6      	; 0x103c <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1036:	91 7e       	andi	r25, 0xE1	; 225
    1038:	92 60       	ori	r25, 0x02	; 2
    103a:	97 8f       	std	Z+31, r25	; 0x1f
    103c:	08 95       	ret

0000103e <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    103e:	e0 91 49 01 	lds	r30, 0x0149
    1042:	f0 91 4a 01 	lds	r31, 0x014A
    1046:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1048:	29 e1       	ldi	r18, 0x19	; 25
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	ac 01       	movw	r20, r24
    104e:	42 9f       	mul	r20, r18
    1050:	c0 01       	movw	r24, r0
    1052:	43 9f       	mul	r20, r19
    1054:	90 0d       	add	r25, r0
    1056:	52 9f       	mul	r21, r18
    1058:	90 0d       	add	r25, r0
    105a:	11 24       	eor	r1, r1
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	97 8d       	ldd	r25, Z+31	; 0x1f
    1062:	89 2f       	mov	r24, r25
    1064:	86 95       	lsr	r24
    1066:	8f 70       	andi	r24, 0x0F	; 15
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	19 f0       	breq	.+6      	; 0x1072 <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    106c:	91 7e       	andi	r25, 0xE1	; 225
    106e:	94 60       	ori	r25, 0x04	; 4
    1070:	97 8f       	std	Z+31, r25	; 0x1f
    1072:	08 95       	ret

00001074 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1074:	2f 92       	push	r2
    1076:	3f 92       	push	r3
    1078:	4f 92       	push	r4
    107a:	5f 92       	push	r5
    107c:	6f 92       	push	r6
    107e:	7f 92       	push	r7
    1080:	8f 92       	push	r8
    1082:	9f 92       	push	r9
    1084:	af 92       	push	r10
    1086:	bf 92       	push	r11
    1088:	cf 92       	push	r12
    108a:	df 92       	push	r13
    108c:	ef 92       	push	r14
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <Timebase_UpCounter_SS_Set_Securely+0x26>
    109a:	00 d0       	rcall	.+0      	; 0x109c <Timebase_UpCounter_SS_Set_Securely+0x28>
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	4a 01       	movw	r8, r20
    10a2:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10a4:	20 91 49 01 	lds	r18, 0x0149
    10a8:	30 91 4a 01 	lds	r19, 0x014A
    10ac:	3c 83       	std	Y+4, r19	; 0x04
    10ae:	2b 83       	std	Y+3, r18	; 0x03
    10b0:	a8 2f       	mov	r26, r24
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ba 83       	std	Y+2, r27	; 0x02
    10b6:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    10b8:	89 e1       	ldi	r24, 0x19	; 25
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a8 9f       	mul	r26, r24
    10be:	f0 01       	movw	r30, r0
    10c0:	a9 9f       	mul	r26, r25
    10c2:	f0 0d       	add	r31, r0
    10c4:	b8 9f       	mul	r27, r24
    10c6:	f0 0d       	add	r31, r0
    10c8:	11 24       	eor	r1, r1
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	87 8d       	ldd	r24, Z+31	; 0x1f
    10d0:	86 95       	lsr	r24
    10d2:	8f 70       	andi	r24, 0x0F	; 15
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <Timebase_UpCounter_SS_Set_Securely+0x64>
    10d6:	75 c0       	rjmp	.+234    	; 0x11c2 <Timebase_UpCounter_SS_Set_Securely+0x14e>
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    10d8:	10 aa       	std	Z+48, r1	; 0x30
    10da:	11 aa       	std	Z+49, r1	; 0x31
    10dc:	12 aa       	std	Z+50, r1	; 0x32
    10de:	13 aa       	std	Z+51, r1	; 0x33
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    10e0:	14 a6       	std	Z+44, r1	; 0x2c
    10e2:	15 a6       	std	Z+45, r1	; 0x2d
    10e4:	16 a6       	std	Z+46, r1	; 0x2e
    10e6:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    10e8:	f9 01       	movw	r30, r18
    10ea:	82 85       	ldd	r24, Z+10	; 0x0a
    10ec:	93 85       	ldd	r25, Z+11	; 0x0b
    10ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    10f0:	b5 85       	ldd	r27, Z+13	; 0x0d
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    10f2:	c0 84       	ldd	r12, Z+8	; 0x08
    10f4:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    10f6:	22 84       	ldd	r2, Z+10	; 0x0a
    10f8:	33 84       	ldd	r3, Z+11	; 0x0b
    10fa:	44 84       	ldd	r4, Z+12	; 0x0c
    10fc:	55 84       	ldd	r5, Z+13	; 0x0d
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    //Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    10fe:	21 81       	ldd	r18, Z+1	; 0x01
    1100:	32 81       	ldd	r19, Z+2	; 0x02
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	c5 01       	movw	r24, r10
    1108:	b4 01       	movw	r22, r8
    110a:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    110e:	7b 01       	movw	r14, r22
    1110:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1112:	ab 81       	ldd	r26, Y+3	; 0x03
    1114:	bc 81       	ldd	r27, Y+4	; 0x04
    1116:	11 96       	adiw	r26, 0x01	; 1
    1118:	2d 91       	ld	r18, X+
    111a:	3c 91       	ld	r19, X
    111c:	12 97       	sbiw	r26, 0x02	; 2
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	c5 01       	movw	r24, r10
    1124:	b4 01       	movw	r22, r8
    1126:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    112a:	c9 01       	movw	r24, r18
    112c:	da 01       	movw	r26, r20
    112e:	3c 01       	movw	r6, r24
    1130:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1132:	56 01       	movw	r10, r12
    1134:	cc 24       	eor	r12, r12
    1136:	dd 24       	eor	r13, r13
    1138:	ae 0c       	add	r10, r14
    113a:	bf 1c       	adc	r11, r15
    113c:	c0 1e       	adc	r12, r16
    113e:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1140:	eb 81       	ldd	r30, Y+3	; 0x03
    1142:	fc 81       	ldd	r31, Y+4	; 0x04
    1144:	81 81       	ldd	r24, Z+1	; 0x01
    1146:	92 81       	ldd	r25, Z+2	; 0x02
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	a8 16       	cp	r10, r24
    114e:	b9 06       	cpc	r11, r25
    1150:	ca 06       	cpc	r12, r26
    1152:	db 06       	cpc	r13, r27
    1154:	94 f0       	brlt	.+36     	; 0x117a <Timebase_UpCounter_SS_Set_Securely+0x106>
	  sec_val += 1;
    1156:	08 94       	sec
    1158:	61 1c       	adc	r6, r1
    115a:	71 1c       	adc	r7, r1
    115c:	81 1c       	adc	r8, r1
    115e:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1160:	21 81       	ldd	r18, Z+1	; 0x01
    1162:	32 81       	ldd	r19, Z+2	; 0x02
    1164:	40 e0       	ldi	r20, 0x00	; 0
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	c6 01       	movw	r24, r12
    116a:	b5 01       	movw	r22, r10
    116c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    1170:	ac 01       	movw	r20, r24
    1172:	cb 01       	movw	r24, r22
    1174:	da 01       	movw	r26, r20
    1176:	5c 01       	movw	r10, r24
    1178:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    117a:	89 e1       	ldi	r24, 0x19	; 25
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	29 81       	ldd	r18, Y+1	; 0x01
    1180:	3a 81       	ldd	r19, Y+2	; 0x02
    1182:	28 9f       	mul	r18, r24
    1184:	f0 01       	movw	r30, r0
    1186:	29 9f       	mul	r18, r25
    1188:	f0 0d       	add	r31, r0
    118a:	38 9f       	mul	r19, r24
    118c:	f0 0d       	add	r31, r0
    118e:	11 24       	eor	r1, r1
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	e8 0f       	add	r30, r24
    1196:	f9 1f       	adc	r31, r25
    1198:	26 0c       	add	r2, r6
    119a:	37 1c       	adc	r3, r7
    119c:	48 1c       	adc	r4, r8
    119e:	59 1c       	adc	r5, r9
    11a0:	20 a2       	std	Z+32, r2	; 0x20
    11a2:	31 a2       	std	Z+33, r3	; 0x21
    11a4:	42 a2       	std	Z+34, r4	; 0x22
    11a6:	53 a2       	std	Z+35, r5	; 0x23
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    11a8:	a4 a2       	std	Z+36, r10	; 0x24
    11aa:	b5 a2       	std	Z+37, r11	; 0x25
    11ac:	c6 a2       	std	Z+38, r12	; 0x26
    11ae:	d7 a2       	std	Z+39, r13	; 0x27
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    11b0:	97 8d       	ldd	r25, Z+31	; 0x1f
    11b2:	89 2f       	mov	r24, r25
    11b4:	86 95       	lsr	r24
    11b6:	8f 70       	andi	r24, 0x0F	; 15
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	19 f0       	breq	.+6      	; 0x11c2 <Timebase_UpCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    11bc:	91 7e       	andi	r25, 0xE1	; 225
    11be:	92 60       	ori	r25, 0x02	; 2
    11c0:	97 8f       	std	Z+31, r25	; 0x1f
	sec_val += temp_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	df 90       	pop	r13
    11d8:	cf 90       	pop	r12
    11da:	bf 90       	pop	r11
    11dc:	af 90       	pop	r10
    11de:	9f 90       	pop	r9
    11e0:	8f 90       	pop	r8
    11e2:	7f 90       	pop	r7
    11e4:	6f 90       	pop	r6
    11e6:	5f 90       	pop	r5
    11e8:	4f 90       	pop	r4
    11ea:	3f 90       	pop	r3
    11ec:	2f 90       	pop	r2
    11ee:	08 95       	ret

000011f0 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	d8 2e       	mov	r13, r24
    11fc:	7a 01       	movw	r14, r20
    11fe:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    1200:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    1204:	8d 2d       	mov	r24, r13
    1206:	b8 01       	movw	r22, r16
    1208:	a7 01       	movw	r20, r14
    120a:	0e 94 3a 08 	call	0x1074	; 0x1074 <Timebase_UpCounter_SS_Set_Securely>
} 
    120e:	1f 91       	pop	r17
    1210:	0f 91       	pop	r16
    1212:	ff 90       	pop	r15
    1214:	ef 90       	pop	r14
    1216:	df 90       	pop	r13
    1218:	08 95       	ret

0000121a <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1222:	a0 91 49 01 	lds	r26, 0x0149
    1226:	b0 91 4a 01 	lds	r27, 0x014A
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	29 e1       	ldi	r18, 0x19	; 25
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	82 9f       	mul	r24, r18
    1232:	f0 01       	movw	r30, r0
    1234:	83 9f       	mul	r24, r19
    1236:	f0 0d       	add	r31, r0
    1238:	92 9f       	mul	r25, r18
    123a:	f0 0d       	add	r31, r0
    123c:	11 24       	eor	r1, r1
    123e:	ea 0f       	add	r30, r26
    1240:	fb 1f       	adc	r31, r27
    1242:	87 8d       	ldd	r24, Z+31	; 0x1f
    1244:	86 95       	lsr	r24
    1246:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	51 f5       	brne	.+84     	; 0x12a0 <Timebase_UpCounter_SS_Update+0x86>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    124c:	1a 96       	adiw	r26, 0x0a	; 10
    124e:	8d 91       	ld	r24, X+
    1250:	9d 91       	ld	r25, X+
    1252:	0d 90       	ld	r0, X+
    1254:	bc 91       	ld	r27, X
    1256:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    1258:	e0 a4       	ldd	r14, Z+40	; 0x28
    125a:	f1 a4       	ldd	r15, Z+41	; 0x29
    125c:	02 a5       	ldd	r16, Z+42	; 0x2a
    125e:	13 a5       	ldd	r17, Z+43	; 0x2b
    1260:	24 a5       	ldd	r18, Z+44	; 0x2c
    1262:	35 a5       	ldd	r19, Z+45	; 0x2d
    1264:	46 a5       	ldd	r20, Z+46	; 0x2e
    1266:	57 a5       	ldd	r21, Z+47	; 0x2f
    1268:	d8 01       	movw	r26, r16
    126a:	c7 01       	movw	r24, r14
    126c:	82 1b       	sub	r24, r18
    126e:	93 0b       	sbc	r25, r19
    1270:	a4 0b       	sbc	r26, r20
    1272:	b5 0b       	sbc	r27, r21
    1274:	80 ab       	std	Z+48, r24	; 0x30
    1276:	91 ab       	std	Z+49, r25	; 0x31
    1278:	a2 ab       	std	Z+50, r26	; 0x32
    127a:	b3 ab       	std	Z+51, r27	; 0x33
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_TemporaryValue(window, Timebase_UpCounter_SS_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    127c:	12 16       	cp	r1, r18
    127e:	13 06       	cpc	r1, r19
    1280:	14 06       	cpc	r1, r20
    1282:	15 06       	cpc	r1, r21
    1284:	2c f1       	brlt	.+74     	; 0x12d0 <Timebase_UpCounter_SS_Update+0xb6>
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    1286:	14 a6       	std	Z+44, r1	; 0x2c
    1288:	15 a6       	std	Z+45, r1	; 0x2d
    128a:	16 a6       	std	Z+46, r1	; 0x2e
    128c:	17 a6       	std	Z+47, r1	; 0x2f
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    128e:	e0 aa       	std	Z+48, r14	; 0x30
    1290:	f1 aa       	std	Z+49, r15	; 0x31
    1292:	02 ab       	std	Z+50, r16	; 0x32
    1294:	13 ab       	std	Z+51, r17	; 0x33
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1296:	87 8d       	ldd	r24, Z+31	; 0x1f
    1298:	81 7e       	andi	r24, 0xE1	; 225
    129a:	88 60       	ori	r24, 0x08	; 8
    129c:	87 8f       	std	Z+31, r24	; 0x1f
    129e:	18 c0       	rjmp	.+48     	; 0x12d0 <Timebase_UpCounter_SS_Update+0xb6>
      //Timebase_UpCounter_SS_Set_EndValue(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	b1 f4       	brne	.+44     	; 0x12d0 <Timebase_UpCounter_SS_Update+0xb6>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    12a4:	1a 96       	adiw	r26, 0x0a	; 10
    12a6:	8d 91       	ld	r24, X+
    12a8:	9d 91       	ld	r25, X+
    12aa:	0d 90       	ld	r0, X+
    12ac:	bc 91       	ld	r27, X
    12ae:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    12b0:	80 a5       	ldd	r24, Z+40	; 0x28
    12b2:	91 a5       	ldd	r25, Z+41	; 0x29
    12b4:	a2 a5       	ldd	r26, Z+42	; 0x2a
    12b6:	b3 a5       	ldd	r27, Z+43	; 0x2b
    12b8:	24 a5       	ldd	r18, Z+44	; 0x2c
    12ba:	35 a5       	ldd	r19, Z+45	; 0x2d
    12bc:	46 a5       	ldd	r20, Z+46	; 0x2e
    12be:	57 a5       	ldd	r21, Z+47	; 0x2f
    12c0:	82 1b       	sub	r24, r18
    12c2:	93 0b       	sbc	r25, r19
    12c4:	a4 0b       	sbc	r26, r20
    12c6:	b5 0b       	sbc	r27, r21
    12c8:	80 ab       	std	Z+48, r24	; 0x30
    12ca:	91 ab       	std	Z+49, r25	; 0x31
    12cc:	a2 ab       	std	Z+50, r26	; 0x32
    12ce:	b3 ab       	std	Z+51, r27	; 0x33
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_EndValue(window, Timebase_UpCounter_SS_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    12d0:	1f 91       	pop	r17
    12d2:	0f 91       	pop	r16
    12d4:	ff 90       	pop	r15
    12d6:	ef 90       	pop	r14
    12d8:	08 95       	ret

000012da <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	e0 91 49 01 	lds	r30, 0x0149
    12e0:	f0 91 4a 01 	lds	r31, 0x014A
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	29 e1       	ldi	r18, 0x19	; 25
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	bc 01       	movw	r22, r24
    12ec:	62 9f       	mul	r22, r18
    12ee:	c0 01       	movw	r24, r0
    12f0:	63 9f       	mul	r22, r19
    12f2:	90 0d       	add	r25, r0
    12f4:	72 9f       	mul	r23, r18
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	e8 0f       	add	r30, r24
    12fc:	f9 1f       	adc	r31, r25
    12fe:	87 8d       	ldd	r24, Z+31	; 0x1f
    1300:	86 95       	lsr	r24
    1302:	8f 70       	andi	r24, 0x0F	; 15
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	09 f4       	brne	.+2      	; 0x130a <Timebase_UpCounter_SS_Expired+0x30>
    1308:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    130a:	84 2f       	mov	r24, r20
    130c:	08 95       	ret

0000130e <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    130e:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1310:	e0 91 49 01 	lds	r30, 0x0149
    1314:	f0 91 4a 01 	lds	r31, 0x014A
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	89 e1       	ldi	r24, 0x19	; 25
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	bc 01       	movw	r22, r24
    1322:	26 9f       	mul	r18, r22
    1324:	c0 01       	movw	r24, r0
    1326:	27 9f       	mul	r18, r23
    1328:	90 0d       	add	r25, r0
    132a:	36 9f       	mul	r19, r22
    132c:	90 0d       	add	r25, r0
    132e:	11 24       	eor	r1, r1
    1330:	e8 0f       	add	r30, r24
    1332:	f9 1f       	adc	r31, r25
    1334:	87 8d       	ldd	r24, Z+31	; 0x1f
    1336:	86 95       	lsr	r24
    1338:	8f 70       	andi	r24, 0x0F	; 15
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	11 f0       	breq	.+4      	; 0x1342 <Timebase_UpCounter_SS_Expired_Event+0x34>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1342:	84 2f       	mov	r24, r20
    1344:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Timebase_UpCounter_SS_Reset>
    1348:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    134a:	08 95       	ret

0000134c <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    134c:	e0 91 49 01 	lds	r30, 0x0149
    1350:	f0 91 4a 01 	lds	r31, 0x014A
    1354:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1356:	29 e1       	ldi	r18, 0x19	; 25
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	dc 01       	movw	r26, r24
    135c:	a2 9f       	mul	r26, r18
    135e:	c0 01       	movw	r24, r0
    1360:	a3 9f       	mul	r26, r19
    1362:	90 0d       	add	r25, r0
    1364:	b2 9f       	mul	r27, r18
    1366:	90 0d       	add	r25, r0
    1368:	11 24       	eor	r1, r1
    136a:	e8 0f       	add	r30, r24
    136c:	f9 1f       	adc	r31, r25
    136e:	87 8d       	ldd	r24, Z+31	; 0x1f
    1370:	80 fd       	sbrc	r24, 0
    1372:	0f c0       	rjmp	.+30     	; 0x1392 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1374:	80 a9       	ldd	r24, Z+48	; 0x30
    1376:	91 a9       	ldd	r25, Z+49	; 0x31
    1378:	a2 a9       	ldd	r26, Z+50	; 0x32
    137a:	b3 a9       	ldd	r27, Z+51	; 0x33
    137c:	84 0f       	add	r24, r20
    137e:	95 1f       	adc	r25, r21
    1380:	a6 1f       	adc	r26, r22
    1382:	b7 1f       	adc	r27, r23
    1384:	84 ab       	std	Z+52, r24	; 0x34
    1386:	95 ab       	std	Z+53, r25	; 0x35
    1388:	a6 ab       	std	Z+54, r26	; 0x36
    138a:	b7 ab       	std	Z+55, r27	; 0x37
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    138c:	87 8d       	ldd	r24, Z+31	; 0x1f
    138e:	81 60       	ori	r24, 0x01	; 1
    1390:	87 8f       	std	Z+31, r24	; 0x1f
    1392:	08 95       	ret

00001394 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1394:	e0 91 49 01 	lds	r30, 0x0149
    1398:	f0 91 4a 01 	lds	r31, 0x014A
    139c:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    139e:	29 e1       	ldi	r18, 0x19	; 25
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	ac 01       	movw	r20, r24
    13a4:	42 9f       	mul	r20, r18
    13a6:	c0 01       	movw	r24, r0
    13a8:	43 9f       	mul	r20, r19
    13aa:	90 0d       	add	r25, r0
    13ac:	52 9f       	mul	r21, r18
    13ae:	90 0d       	add	r25, r0
    13b0:	11 24       	eor	r1, r1
    13b2:	e8 0f       	add	r30, r24
    13b4:	f9 1f       	adc	r31, r25
    13b6:	24 a9       	ldd	r18, Z+52	; 0x34
    13b8:	35 a9       	ldd	r19, Z+53	; 0x35
    13ba:	46 a9       	ldd	r20, Z+54	; 0x36
    13bc:	57 a9       	ldd	r21, Z+55	; 0x37
    13be:	80 a9       	ldd	r24, Z+48	; 0x30
    13c0:	91 a9       	ldd	r25, Z+49	; 0x31
    13c2:	a2 a9       	ldd	r26, Z+50	; 0x32
    13c4:	b3 a9       	ldd	r27, Z+51	; 0x33
    13c6:	28 1b       	sub	r18, r24
    13c8:	39 0b       	sbc	r19, r25
    13ca:	4a 0b       	sbc	r20, r26
    13cc:	5b 0b       	sbc	r21, r27
    13ce:	57 ff       	sbrs	r21, 7
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    13da:	b9 01       	movw	r22, r18
    13dc:	ca 01       	movw	r24, r20
    13de:	08 95       	ret

000013e0 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    13e4:	c0 91 49 01 	lds	r28, 0x0149
    13e8:	d0 91 4a 01 	lds	r29, 0x014A
    13ec:	68 2f       	mov	r22, r24
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    13f0:	89 e1       	ldi	r24, 0x19	; 25
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	68 9f       	mul	r22, r24
    13f6:	f0 01       	movw	r30, r0
    13f8:	69 9f       	mul	r22, r25
    13fa:	f0 0d       	add	r31, r0
    13fc:	78 9f       	mul	r23, r24
    13fe:	f0 0d       	add	r31, r0
    1400:	11 24       	eor	r1, r1
    1402:	ec 0f       	add	r30, r28
    1404:	fd 1f       	adc	r31, r29
    1406:	24 a9       	ldd	r18, Z+52	; 0x34
    1408:	35 a9       	ldd	r19, Z+53	; 0x35
    140a:	46 a9       	ldd	r20, Z+54	; 0x36
    140c:	57 a9       	ldd	r21, Z+55	; 0x37
    140e:	80 a9       	ldd	r24, Z+48	; 0x30
    1410:	91 a9       	ldd	r25, Z+49	; 0x31
    1412:	a2 a9       	ldd	r26, Z+50	; 0x32
    1414:	b3 a9       	ldd	r27, Z+51	; 0x33
    1416:	28 1b       	sub	r18, r24
    1418:	39 0b       	sbc	r19, r25
    141a:	4a 0b       	sbc	r20, r26
    141c:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    141e:	57 fd       	sbrc	r21, 7
    1420:	07 c0       	rjmp	.+14     	; 0x1430 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1422:	21 15       	cp	r18, r1
    1424:	31 05       	cpc	r19, r1
    1426:	41 05       	cpc	r20, r1
    1428:	51 05       	cpc	r21, r1
    142a:	11 f0       	breq	.+4      	; 0x1430 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	12 c0       	rjmp	.+36     	; 0x1454 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	89 e1       	ldi	r24, 0x19	; 25
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	ac 01       	movw	r20, r24
    1438:	64 9f       	mul	r22, r20
    143a:	c0 01       	movw	r24, r0
    143c:	65 9f       	mul	r22, r21
    143e:	90 0d       	add	r25, r0
    1440:	74 9f       	mul	r23, r20
    1442:	90 0d       	add	r25, r0
    1444:	11 24       	eor	r1, r1
    1446:	c8 0f       	add	r28, r24
    1448:	d9 1f       	adc	r29, r25
    144a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    144c:	80 ff       	sbrs	r24, 0
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1454:	82 2f       	mov	r24, r18
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    145c:	1f 93       	push	r17
    145e:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1460:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Timebase_UpCounter_SS_Period_Value_Expired>
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	11 f0       	breq	.+4      	; 0x146c <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	16 c0       	rjmp	.+44     	; 0x1498 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    146c:	e0 91 49 01 	lds	r30, 0x0149
    1470:	f0 91 4a 01 	lds	r31, 0x014A
    1474:	21 2f       	mov	r18, r17
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	89 e1       	ldi	r24, 0x19	; 25
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	ac 01       	movw	r20, r24
    147e:	24 9f       	mul	r18, r20
    1480:	c0 01       	movw	r24, r0
    1482:	25 9f       	mul	r18, r21
    1484:	90 0d       	add	r25, r0
    1486:	34 9f       	mul	r19, r20
    1488:	90 0d       	add	r25, r0
    148a:	11 24       	eor	r1, r1
    148c:	e8 0f       	add	r30, r24
    148e:	f9 1f       	adc	r31, r25
    1490:	87 8d       	ldd	r24, Z+31	; 0x1f
    1492:	8e 7f       	andi	r24, 0xFE	; 254
    1494:	87 8f       	std	Z+31, r24	; 0x1f
    1496:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1498:	1f 91       	pop	r17
    149a:	08 95       	ret

0000149c <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	0e 94 0d 09 	call	0x121a	; 0x121a <Timebase_UpCounter_SS_Update>
  }
}
    14a2:	08 95       	ret

000014a4 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <Timebase_UpCounter_SS_Reset>
  }
}
    14aa:	08 95       	ret

000014ac <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    14ac:	e0 91 49 01 	lds	r30, 0x0149
    14b0:	f0 91 4a 01 	lds	r31, 0x014A
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	25 e1       	ldi	r18, 0x15	; 21
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	ac 01       	movw	r20, r24
    14bc:	42 9f       	mul	r20, r18
    14be:	c0 01       	movw	r24, r0
    14c0:	43 9f       	mul	r20, r19
    14c2:	90 0d       	add	r25, r0
    14c4:	52 9f       	mul	r21, r18
    14c6:	90 0d       	add	r25, r0
    14c8:	11 24       	eor	r1, r1
    14ca:	e8 0f       	add	r30, r24
    14cc:	f9 1f       	adc	r31, r25
    14ce:	80 ad       	ldd	r24, Z+56	; 0x38
    14d0:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    14d2:	8f 70       	andi	r24, 0x0F	; 15
    14d4:	08 95       	ret

000014d6 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    14d6:	e0 91 49 01 	lds	r30, 0x0149
    14da:	f0 91 4a 01 	lds	r31, 0x014A
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	25 e1       	ldi	r18, 0x15	; 21
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	ac 01       	movw	r20, r24
    14e6:	42 9f       	mul	r20, r18
    14e8:	c0 01       	movw	r24, r0
    14ea:	43 9f       	mul	r20, r19
    14ec:	90 0d       	add	r25, r0
    14ee:	52 9f       	mul	r21, r18
    14f0:	90 0d       	add	r25, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	e8 0f       	add	r30, r24
    14f6:	f9 1f       	adc	r31, r25
    14f8:	6f 70       	andi	r22, 0x0F	; 15
    14fa:	66 0f       	add	r22, r22
    14fc:	80 ad       	ldd	r24, Z+56	; 0x38
    14fe:	81 7e       	andi	r24, 0xE1	; 225
    1500:	86 2b       	or	r24, r22
    1502:	80 af       	std	Z+56, r24	; 0x38
}
    1504:	08 95       	ret

00001506 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1506:	e0 91 49 01 	lds	r30, 0x0149
    150a:	f0 91 4a 01 	lds	r31, 0x014A
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	25 e1       	ldi	r18, 0x15	; 21
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	ac 01       	movw	r20, r24
    1516:	42 9f       	mul	r20, r18
    1518:	c0 01       	movw	r24, r0
    151a:	43 9f       	mul	r20, r19
    151c:	90 0d       	add	r25, r0
    151e:	52 9f       	mul	r21, r18
    1520:	90 0d       	add	r25, r0
    1522:	11 24       	eor	r1, r1
    1524:	e8 0f       	add	r30, r24
    1526:	f9 1f       	adc	r31, r25
    1528:	eb 5b       	subi	r30, 0xBB	; 187
    152a:	ff 4f       	sbci	r31, 0xFF	; 255
    152c:	60 81       	ld	r22, Z
    152e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1530:	82 81       	ldd	r24, Z+2	; 0x02
    1532:	93 81       	ldd	r25, Z+3	; 0x03
    1534:	08 95       	ret

00001536 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1536:	e0 91 49 01 	lds	r30, 0x0149
    153a:	f0 91 4a 01 	lds	r31, 0x014A
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	25 e1       	ldi	r18, 0x15	; 21
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	dc 01       	movw	r26, r24
    1546:	a2 9f       	mul	r26, r18
    1548:	c0 01       	movw	r24, r0
    154a:	a3 9f       	mul	r26, r19
    154c:	90 0d       	add	r25, r0
    154e:	b2 9f       	mul	r27, r18
    1550:	90 0d       	add	r25, r0
    1552:	11 24       	eor	r1, r1
    1554:	e8 0f       	add	r30, r24
    1556:	f9 1f       	adc	r31, r25
    1558:	eb 5b       	subi	r30, 0xBB	; 187
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	40 83       	st	Z, r20
    155e:	51 83       	std	Z+1, r21	; 0x01
    1560:	62 83       	std	Z+2, r22	; 0x02
    1562:	73 83       	std	Z+3, r23	; 0x03
}
    1564:	08 95       	ret

00001566 <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
    1566:	e0 91 49 01 	lds	r30, 0x0149
    156a:	f0 91 4a 01 	lds	r31, 0x014A
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	25 e1       	ldi	r18, 0x15	; 21
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	ac 01       	movw	r20, r24
    1576:	42 9f       	mul	r20, r18
    1578:	c0 01       	movw	r24, r0
    157a:	43 9f       	mul	r20, r19
    157c:	90 0d       	add	r25, r0
    157e:	52 9f       	mul	r21, r18
    1580:	90 0d       	add	r25, r0
    1582:	11 24       	eor	r1, r1
    1584:	e8 0f       	add	r30, r24
    1586:	f9 1f       	adc	r31, r25
    1588:	df 01       	movw	r26, r30
    158a:	d9 96       	adiw	r26, 0x39	; 57
    158c:	61 ad       	ldd	r22, Z+57	; 0x39
    158e:	11 96       	adiw	r26, 0x01	; 1
    1590:	7c 91       	ld	r23, X
    1592:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1594:	12 96       	adiw	r26, 0x02	; 2
    1596:	8c 91       	ld	r24, X
    1598:	12 97       	sbiw	r26, 0x02	; 2
    159a:	13 96       	adiw	r26, 0x03	; 3
    159c:	9c 91       	ld	r25, X
    159e:	08 95       	ret

000015a0 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    15a0:	e0 91 49 01 	lds	r30, 0x0149
    15a4:	f0 91 4a 01 	lds	r31, 0x014A
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	25 e1       	ldi	r18, 0x15	; 21
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	dc 01       	movw	r26, r24
    15b0:	a2 9f       	mul	r26, r18
    15b2:	c0 01       	movw	r24, r0
    15b4:	a3 9f       	mul	r26, r19
    15b6:	90 0d       	add	r25, r0
    15b8:	b2 9f       	mul	r27, r18
    15ba:	90 0d       	add	r25, r0
    15bc:	11 24       	eor	r1, r1
    15be:	e8 0f       	add	r30, r24
    15c0:	f9 1f       	adc	r31, r25
    15c2:	41 af       	std	Z+57, r20	; 0x39
    15c4:	52 af       	std	Z+58, r21	; 0x3a
    15c6:	63 af       	std	Z+59, r22	; 0x3b
    15c8:	74 af       	std	Z+60, r23	; 0x3c
}
    15ca:	08 95       	ret

000015cc <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    15cc:	e0 91 49 01 	lds	r30, 0x0149
    15d0:	f0 91 4a 01 	lds	r31, 0x014A
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	25 e1       	ldi	r18, 0x15	; 21
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	ac 01       	movw	r20, r24
    15dc:	42 9f       	mul	r20, r18
    15de:	c0 01       	movw	r24, r0
    15e0:	43 9f       	mul	r20, r19
    15e2:	90 0d       	add	r25, r0
    15e4:	52 9f       	mul	r21, r18
    15e6:	90 0d       	add	r25, r0
    15e8:	11 24       	eor	r1, r1
    15ea:	e8 0f       	add	r30, r24
    15ec:	f9 1f       	adc	r31, r25
    15ee:	fd 96       	adiw	r30, 0x3d	; 61
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Target;
}
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	08 95       	ret

000015fa <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    15fa:	e0 91 49 01 	lds	r30, 0x0149
    15fe:	f0 91 4a 01 	lds	r31, 0x014A
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	25 e1       	ldi	r18, 0x15	; 21
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	dc 01       	movw	r26, r24
    160a:	a2 9f       	mul	r26, r18
    160c:	c0 01       	movw	r24, r0
    160e:	a3 9f       	mul	r26, r19
    1610:	90 0d       	add	r25, r0
    1612:	b2 9f       	mul	r27, r18
    1614:	90 0d       	add	r25, r0
    1616:	11 24       	eor	r1, r1
    1618:	e8 0f       	add	r30, r24
    161a:	f9 1f       	adc	r31, r25
    161c:	fd 96       	adiw	r30, 0x3d	; 61
    161e:	40 83       	st	Z, r20
    1620:	51 83       	std	Z+1, r21	; 0x01
    1622:	62 83       	std	Z+2, r22	; 0x02
    1624:	73 83       	std	Z+3, r23	; 0x03
}
    1626:	08 95       	ret

00001628 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    1628:	e0 91 49 01 	lds	r30, 0x0149
    162c:	f0 91 4a 01 	lds	r31, 0x014A
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	25 e1       	ldi	r18, 0x15	; 21
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	ac 01       	movw	r20, r24
    1638:	42 9f       	mul	r20, r18
    163a:	c0 01       	movw	r24, r0
    163c:	43 9f       	mul	r20, r19
    163e:	90 0d       	add	r25, r0
    1640:	52 9f       	mul	r21, r18
    1642:	90 0d       	add	r25, r0
    1644:	11 24       	eor	r1, r1
    1646:	e8 0f       	add	r30, r24
    1648:	f9 1f       	adc	r31, r25
    164a:	ef 5b       	subi	r30, 0xBF	; 191
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	60 81       	ld	r22, Z
    1650:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    1652:	82 81       	ldd	r24, Z+2	; 0x02
    1654:	93 81       	ldd	r25, Z+3	; 0x03
    1656:	08 95       	ret

00001658 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1658:	e0 91 49 01 	lds	r30, 0x0149
    165c:	f0 91 4a 01 	lds	r31, 0x014A
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	25 e1       	ldi	r18, 0x15	; 21
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	dc 01       	movw	r26, r24
    1668:	a2 9f       	mul	r26, r18
    166a:	c0 01       	movw	r24, r0
    166c:	a3 9f       	mul	r26, r19
    166e:	90 0d       	add	r25, r0
    1670:	b2 9f       	mul	r27, r18
    1672:	90 0d       	add	r25, r0
    1674:	11 24       	eor	r1, r1
    1676:	e8 0f       	add	r30, r24
    1678:	f9 1f       	adc	r31, r25
    167a:	ef 5b       	subi	r30, 0xBF	; 191
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	40 83       	st	Z, r20
    1680:	51 83       	std	Z+1, r21	; 0x01
    1682:	62 83       	std	Z+2, r22	; 0x02
    1684:	73 83       	std	Z+3, r23	; 0x03
}
    1686:	08 95       	ret

00001688 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1688:	e0 91 49 01 	lds	r30, 0x0149
    168c:	f0 91 4a 01 	lds	r31, 0x014A
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	25 e1       	ldi	r18, 0x15	; 21
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	ac 01       	movw	r20, r24
    1698:	42 9f       	mul	r20, r18
    169a:	c0 01       	movw	r24, r0
    169c:	43 9f       	mul	r20, r19
    169e:	90 0d       	add	r25, r0
    16a0:	52 9f       	mul	r21, r18
    16a2:	90 0d       	add	r25, r0
    16a4:	11 24       	eor	r1, r1
    16a6:	e8 0f       	add	r30, r24
    16a8:	f9 1f       	adc	r31, r25
    16aa:	e7 5b       	subi	r30, 0xB7	; 183
    16ac:	ff 4f       	sbci	r31, 0xFF	; 255
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    16b2:	82 81       	ldd	r24, Z+2	; 0x02
    16b4:	93 81       	ldd	r25, Z+3	; 0x03
    16b6:	08 95       	ret

000016b8 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    16b8:	e0 91 49 01 	lds	r30, 0x0149
    16bc:	f0 91 4a 01 	lds	r31, 0x014A
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	25 e1       	ldi	r18, 0x15	; 21
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	dc 01       	movw	r26, r24
    16c8:	a2 9f       	mul	r26, r18
    16ca:	c0 01       	movw	r24, r0
    16cc:	a3 9f       	mul	r26, r19
    16ce:	90 0d       	add	r25, r0
    16d0:	b2 9f       	mul	r27, r18
    16d2:	90 0d       	add	r25, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	e8 0f       	add	r30, r24
    16d8:	f9 1f       	adc	r31, r25
    16da:	e7 5b       	subi	r30, 0xB7	; 183
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	40 83       	st	Z, r20
    16e0:	51 83       	std	Z+1, r21	; 0x01
    16e2:	62 83       	std	Z+2, r22	; 0x02
    16e4:	73 83       	std	Z+3, r23	; 0x03
}
    16e6:	08 95       	ret

000016e8 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    16e8:	e0 91 49 01 	lds	r30, 0x0149
    16ec:	f0 91 4a 01 	lds	r31, 0x014A
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	25 e1       	ldi	r18, 0x15	; 21
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	ac 01       	movw	r20, r24
    16f8:	42 9f       	mul	r20, r18
    16fa:	c0 01       	movw	r24, r0
    16fc:	43 9f       	mul	r20, r19
    16fe:	90 0d       	add	r25, r0
    1700:	52 9f       	mul	r21, r18
    1702:	90 0d       	add	r25, r0
    1704:	11 24       	eor	r1, r1
    1706:	e8 0f       	add	r30, r24
    1708:	f9 1f       	adc	r31, r25
    170a:	80 ad       	ldd	r24, Z+56	; 0x38
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	08 95       	ret

00001710 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1710:	e0 91 49 01 	lds	r30, 0x0149
    1714:	f0 91 4a 01 	lds	r31, 0x014A
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	25 e1       	ldi	r18, 0x15	; 21
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	ac 01       	movw	r20, r24
    1720:	42 9f       	mul	r20, r18
    1722:	c0 01       	movw	r24, r0
    1724:	43 9f       	mul	r20, r19
    1726:	90 0d       	add	r25, r0
    1728:	52 9f       	mul	r21, r18
    172a:	90 0d       	add	r25, r0
    172c:	11 24       	eor	r1, r1
    172e:	e8 0f       	add	r30, r24
    1730:	f9 1f       	adc	r31, r25
    1732:	80 ad       	ldd	r24, Z+56	; 0x38
    1734:	81 60       	ori	r24, 0x01	; 1
    1736:	80 af       	std	Z+56, r24	; 0x38
}
    1738:	08 95       	ret

0000173a <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    173a:	e0 91 49 01 	lds	r30, 0x0149
    173e:	f0 91 4a 01 	lds	r31, 0x014A
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	25 e1       	ldi	r18, 0x15	; 21
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	ac 01       	movw	r20, r24
    174a:	42 9f       	mul	r20, r18
    174c:	c0 01       	movw	r24, r0
    174e:	43 9f       	mul	r20, r19
    1750:	90 0d       	add	r25, r0
    1752:	52 9f       	mul	r21, r18
    1754:	90 0d       	add	r25, r0
    1756:	11 24       	eor	r1, r1
    1758:	e8 0f       	add	r30, r24
    175a:	f9 1f       	adc	r31, r25
    175c:	80 ad       	ldd	r24, Z+56	; 0x38
    175e:	8e 7f       	andi	r24, 0xFE	; 254
    1760:	80 af       	std	Z+56, r24	; 0x38
}
    1762:	08 95       	ret

00001764 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1764:	e0 91 49 01 	lds	r30, 0x0149
    1768:	f0 91 4a 01 	lds	r31, 0x014A
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	25 e1       	ldi	r18, 0x15	; 21
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	ac 01       	movw	r20, r24
    1774:	42 9f       	mul	r20, r18
    1776:	c0 01       	movw	r24, r0
    1778:	43 9f       	mul	r20, r19
    177a:	90 0d       	add	r25, r0
    177c:	52 9f       	mul	r21, r18
    177e:	90 0d       	add	r25, r0
    1780:	11 24       	eor	r1, r1
    1782:	e8 0f       	add	r30, r24
    1784:	f9 1f       	adc	r31, r25
    1786:	80 ad       	ldd	r24, Z+56	; 0x38
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1788:	eb 5b       	subi	r30, 0xBB	; 187
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	10 82       	st	Z, r1
    178e:	11 82       	std	Z+1, r1	; 0x01
    1790:	12 82       	std	Z+2, r1	; 0x02
    1792:	13 82       	std	Z+3, r1	; 0x03
    1794:	e5 54       	subi	r30, 0x45	; 69
    1796:	f0 40       	sbci	r31, 0x00	; 0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1798:	11 ae       	std	Z+57, r1	; 0x39
    179a:	12 ae       	std	Z+58, r1	; 0x3a
    179c:	13 ae       	std	Z+59, r1	; 0x3b
    179e:	14 ae       	std	Z+60, r1	; 0x3c
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    17a0:	fd 96       	adiw	r30, 0x3d	; 61
    17a2:	11 92       	st	Z+, r1
    17a4:	11 92       	st	Z+, r1
    17a6:	11 92       	st	Z+, r1
    17a8:	11 92       	st	Z+, r1
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    17aa:	10 82       	st	Z, r1
    17ac:	11 82       	std	Z+1, r1	; 0x01
    17ae:	12 82       	std	Z+2, r1	; 0x02
    17b0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    17b2:	38 96       	adiw	r30, 0x08	; 8
    17b4:	10 82       	st	Z, r1
    17b6:	11 82       	std	Z+1, r1	; 0x01
    17b8:	12 82       	std	Z+2, r1	; 0x02
    17ba:	13 82       	std	Z+3, r1	; 0x03
    17bc:	e9 54       	subi	r30, 0x49	; 73
    17be:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17c0:	80 7e       	andi	r24, 0xE0	; 224
    17c2:	80 af       	std	Z+56, r24	; 0x38
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    17c4:	08 95       	ret

000017c6 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    17c6:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Timebase_UpCounter_Reset>
}
    17ca:	08 95       	ret

000017cc <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    17cc:	e0 91 49 01 	lds	r30, 0x0149
    17d0:	f0 91 4a 01 	lds	r31, 0x014A
    17d4:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    17d6:	25 e1       	ldi	r18, 0x15	; 21
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	ac 01       	movw	r20, r24
    17dc:	42 9f       	mul	r20, r18
    17de:	c0 01       	movw	r24, r0
    17e0:	43 9f       	mul	r20, r19
    17e2:	90 0d       	add	r25, r0
    17e4:	52 9f       	mul	r21, r18
    17e6:	90 0d       	add	r25, r0
    17e8:	11 24       	eor	r1, r1
    17ea:	e8 0f       	add	r30, r24
    17ec:	f9 1f       	adc	r31, r25
    17ee:	90 ad       	ldd	r25, Z+56	; 0x38
    17f0:	89 2f       	mov	r24, r25
    17f2:	86 95       	lsr	r24
    17f4:	8f 70       	andi	r24, 0x0F	; 15
    17f6:	81 30       	cpi	r24, 0x01	; 1
    17f8:	19 f0       	breq	.+6      	; 0x1800 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    17fa:	91 7e       	andi	r25, 0xE1	; 225
    17fc:	92 60       	ori	r25, 0x02	; 2
    17fe:	90 af       	std	Z+56, r25	; 0x38
    1800:	08 95       	ret

00001802 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1802:	e0 91 49 01 	lds	r30, 0x0149
    1806:	f0 91 4a 01 	lds	r31, 0x014A
    180a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    180c:	25 e1       	ldi	r18, 0x15	; 21
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	ac 01       	movw	r20, r24
    1812:	42 9f       	mul	r20, r18
    1814:	c0 01       	movw	r24, r0
    1816:	43 9f       	mul	r20, r19
    1818:	90 0d       	add	r25, r0
    181a:	52 9f       	mul	r21, r18
    181c:	90 0d       	add	r25, r0
    181e:	11 24       	eor	r1, r1
    1820:	e8 0f       	add	r30, r24
    1822:	f9 1f       	adc	r31, r25
    1824:	90 ad       	ldd	r25, Z+56	; 0x38
    1826:	89 2f       	mov	r24, r25
    1828:	86 95       	lsr	r24
    182a:	8f 70       	andi	r24, 0x0F	; 15
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	19 f0       	breq	.+6      	; 0x1836 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1830:	91 7e       	andi	r25, 0xE1	; 225
    1832:	94 60       	ori	r25, 0x04	; 4
    1834:	90 af       	std	Z+56, r25	; 0x38
    1836:	08 95       	ret

00001838 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1838:	a0 91 49 01 	lds	r26, 0x0149
    183c:	b0 91 4a 01 	lds	r27, 0x014A
    1840:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1842:	25 e1       	ldi	r18, 0x15	; 21
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	82 9f       	mul	r24, r18
    1848:	f0 01       	movw	r30, r0
    184a:	83 9f       	mul	r24, r19
    184c:	f0 0d       	add	r31, r0
    184e:	92 9f       	mul	r25, r18
    1850:	f0 0d       	add	r31, r0
    1852:	11 24       	eor	r1, r1
    1854:	ea 0f       	add	r30, r26
    1856:	fb 1f       	adc	r31, r27
    1858:	80 ad       	ldd	r24, Z+56	; 0x38
    185a:	86 95       	lsr	r24
    185c:	8f 70       	andi	r24, 0x0F	; 15
    185e:	31 f5       	brne	.+76     	; 0x18ac <Timebase_UpCounter_Set_Securely+0x74>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1860:	eb 5b       	subi	r30, 0xBB	; 187
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	10 82       	st	Z, r1
    1866:	11 82       	std	Z+1, r1	; 0x01
    1868:	12 82       	std	Z+2, r1	; 0x02
    186a:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    186c:	12 92       	st	-Z, r1
    186e:	12 92       	st	-Z, r1
    1870:	12 92       	st	-Z, r1
    1872:	12 92       	st	-Z, r1
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1874:	72 93       	st	-Z, r23
    1876:	62 93       	st	-Z, r22
    1878:	52 93       	st	-Z, r21
    187a:	42 93       	st	-Z, r20
    187c:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    187e:	1a 96       	adiw	r26, 0x0a	; 10
    1880:	8d 91       	ld	r24, X+
    1882:	9d 91       	ld	r25, X+
    1884:	0d 90       	ld	r0, X+
    1886:	bc 91       	ld	r27, X
    1888:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    188a:	84 0f       	add	r24, r20
    188c:	95 1f       	adc	r25, r21
    188e:	a6 1f       	adc	r26, r22
    1890:	b7 1f       	adc	r27, r23
    1892:	81 af       	std	Z+57, r24	; 0x39
    1894:	92 af       	std	Z+58, r25	; 0x3a
    1896:	a3 af       	std	Z+59, r26	; 0x3b
    1898:	b4 af       	std	Z+60, r27	; 0x3c
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    189a:	90 ad       	ldd	r25, Z+56	; 0x38
    189c:	89 2f       	mov	r24, r25
    189e:	86 95       	lsr	r24
    18a0:	8f 70       	andi	r24, 0x0F	; 15
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	19 f0       	breq	.+6      	; 0x18ac <Timebase_UpCounter_Set_Securely+0x74>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    18a6:	91 7e       	andi	r25, 0xE1	; 225
    18a8:	92 60       	ori	r25, 0x02	; 2
    18aa:	90 af       	std	Z+56, r25	; 0x38
    18ac:	08 95       	ret

000018ae <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	d8 2e       	mov	r13, r24
    18ba:	7a 01       	movw	r14, r20
    18bc:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    18be:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    18c2:	8d 2d       	mov	r24, r13
    18c4:	b8 01       	movw	r22, r16
    18c6:	a7 01       	movw	r20, r14
    18c8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Timebase_UpCounter_Set_Securely>
} 
    18cc:	1f 91       	pop	r17
    18ce:	0f 91       	pop	r16
    18d0:	ff 90       	pop	r15
    18d2:	ef 90       	pop	r14
    18d4:	df 90       	pop	r13
    18d6:	08 95       	ret

000018d8 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    18d8:	ef 92       	push	r14
    18da:	ff 92       	push	r15
    18dc:	0f 93       	push	r16
    18de:	1f 93       	push	r17
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    18e4:	a0 91 49 01 	lds	r26, 0x0149
    18e8:	b0 91 4a 01 	lds	r27, 0x014A
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	25 e1       	ldi	r18, 0x15	; 21
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	82 9f       	mul	r24, r18
    18f4:	f0 01       	movw	r30, r0
    18f6:	83 9f       	mul	r24, r19
    18f8:	f0 0d       	add	r31, r0
    18fa:	92 9f       	mul	r25, r18
    18fc:	f0 0d       	add	r31, r0
    18fe:	11 24       	eor	r1, r1
    1900:	ea 0f       	add	r30, r26
    1902:	fb 1f       	adc	r31, r27
    1904:	80 ad       	ldd	r24, Z+56	; 0x38
    1906:	86 95       	lsr	r24
    1908:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    190a:	81 30       	cpi	r24, 0x01	; 1
    190c:	09 f0       	breq	.+2      	; 0x1910 <Timebase_UpCounter_Update+0x38>
    190e:	42 c0       	rjmp	.+132    	; 0x1994 <Timebase_UpCounter_Update+0xbc>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1910:	1a 96       	adiw	r26, 0x0a	; 10
    1912:	8d 91       	ld	r24, X+
    1914:	9d 91       	ld	r25, X+
    1916:	0d 90       	ld	r0, X+
    1918:	bc 91       	ld	r27, X
    191a:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    191c:	21 ad       	ldd	r18, Z+57	; 0x39
    191e:	32 ad       	ldd	r19, Z+58	; 0x3a
    1920:	43 ad       	ldd	r20, Z+59	; 0x3b
    1922:	54 ad       	ldd	r21, Z+60	; 0x3c
    1924:	28 1b       	sub	r18, r24
    1926:	39 0b       	sbc	r19, r25
    1928:	4a 0b       	sbc	r20, r26
    192a:	5b 0b       	sbc	r21, r27
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    192c:	bf 01       	movw	r22, r30
    192e:	6f 5b       	subi	r22, 0xBF	; 191
    1930:	7f 4f       	sbci	r23, 0xFF	; 255
    1932:	db 01       	movw	r26, r22
    1934:	2d 93       	st	X+, r18
    1936:	3d 93       	st	X+, r19
    1938:	4d 93       	st	X+, r20
    193a:	5c 93       	st	X, r21
    193c:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    193e:	ef 01       	movw	r28, r30
    1940:	cb 5b       	subi	r28, 0xBB	; 187
    1942:	df 4f       	sbci	r29, 0xFF	; 255
    1944:	fd 96       	adiw	r30, 0x3d	; 61
    1946:	e0 80       	ld	r14, Z
    1948:	f1 80       	ldd	r15, Z+1	; 0x01
    194a:	02 81       	ldd	r16, Z+2	; 0x02
    194c:	13 81       	ldd	r17, Z+3	; 0x03
    194e:	fd 97       	sbiw	r30, 0x3d	; 61
    1950:	d8 01       	movw	r26, r16
    1952:	c7 01       	movw	r24, r14
    1954:	82 1b       	sub	r24, r18
    1956:	93 0b       	sbc	r25, r19
    1958:	a4 0b       	sbc	r26, r20
    195a:	b5 0b       	sbc	r27, r21
    195c:	88 83       	st	Y, r24
    195e:	99 83       	std	Y+1, r25	; 0x01
    1960:	aa 83       	std	Y+2, r26	; 0x02
    1962:	bb 83       	std	Y+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1964:	12 16       	cp	r1, r18
    1966:	13 06       	cpc	r1, r19
    1968:	14 06       	cpc	r1, r20
    196a:	15 06       	cpc	r1, r21
    196c:	cc f1       	brlt	.+114    	; 0x19e0 <Timebase_UpCounter_Update+0x108>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    196e:	11 ae       	std	Z+57, r1	; 0x39
    1970:	12 ae       	std	Z+58, r1	; 0x3a
    1972:	13 ae       	std	Z+59, r1	; 0x3b
    1974:	14 ae       	std	Z+60, r1	; 0x3c
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1976:	db 01       	movw	r26, r22
    1978:	1d 92       	st	X+, r1
    197a:	1d 92       	st	X+, r1
    197c:	1d 92       	st	X+, r1
    197e:	1c 92       	st	X, r1
    1980:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1982:	e8 82       	st	Y, r14
    1984:	f9 82       	std	Y+1, r15	; 0x01
    1986:	0a 83       	std	Y+2, r16	; 0x02
    1988:	1b 83       	std	Y+3, r17	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    198a:	80 ad       	ldd	r24, Z+56	; 0x38
    198c:	81 7e       	andi	r24, 0xE1	; 225
    198e:	88 60       	ori	r24, 0x08	; 8
    1990:	80 af       	std	Z+56, r24	; 0x38
    1992:	26 c0       	rjmp	.+76     	; 0x19e0 <Timebase_UpCounter_Update+0x108>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	21 f5       	brne	.+72     	; 0x19e0 <Timebase_UpCounter_Update+0x108>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1998:	1a 96       	adiw	r26, 0x0a	; 10
    199a:	8d 91       	ld	r24, X+
    199c:	9d 91       	ld	r25, X+
    199e:	0d 90       	ld	r0, X+
    19a0:	bc 91       	ld	r27, X
    19a2:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    19a4:	ef 5b       	subi	r30, 0xBF	; 191
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	20 81       	ld	r18, Z
    19aa:	31 81       	ldd	r19, Z+1	; 0x01
    19ac:	42 81       	ldd	r20, Z+2	; 0x02
    19ae:	53 81       	ldd	r21, Z+3	; 0x03
    19b0:	e1 54       	subi	r30, 0x41	; 65
    19b2:	f0 40       	sbci	r31, 0x00	; 0
    19b4:	82 0f       	add	r24, r18
    19b6:	93 1f       	adc	r25, r19
    19b8:	a4 1f       	adc	r26, r20
    19ba:	b5 1f       	adc	r27, r21
    19bc:	81 af       	std	Z+57, r24	; 0x39
    19be:	92 af       	std	Z+58, r25	; 0x3a
    19c0:	a3 af       	std	Z+59, r26	; 0x3b
    19c2:	b4 af       	std	Z+60, r27	; 0x3c
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    19c4:	fd 96       	adiw	r30, 0x3d	; 61
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	a2 81       	ldd	r26, Z+2	; 0x02
    19cc:	b3 81       	ldd	r27, Z+3	; 0x03
    19ce:	82 1b       	sub	r24, r18
    19d0:	93 0b       	sbc	r25, r19
    19d2:	a4 0b       	sbc	r26, r20
    19d4:	b5 0b       	sbc	r27, r21
    19d6:	38 96       	adiw	r30, 0x08	; 8
    19d8:	80 83       	st	Z, r24
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	a2 83       	std	Z+2, r26	; 0x02
    19de:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	08 95       	ret

000019ee <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    19ee:	40 e0       	ldi	r20, 0x00	; 0
    19f0:	e0 91 49 01 	lds	r30, 0x0149
    19f4:	f0 91 4a 01 	lds	r31, 0x014A
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	25 e1       	ldi	r18, 0x15	; 21
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	bc 01       	movw	r22, r24
    1a00:	62 9f       	mul	r22, r18
    1a02:	c0 01       	movw	r24, r0
    1a04:	63 9f       	mul	r22, r19
    1a06:	90 0d       	add	r25, r0
    1a08:	72 9f       	mul	r23, r18
    1a0a:	90 0d       	add	r25, r0
    1a0c:	11 24       	eor	r1, r1
    1a0e:	e8 0f       	add	r30, r24
    1a10:	f9 1f       	adc	r31, r25
    1a12:	80 ad       	ldd	r24, Z+56	; 0x38
    1a14:	86 95       	lsr	r24
    1a16:	8f 70       	andi	r24, 0x0F	; 15
    1a18:	84 30       	cpi	r24, 0x04	; 4
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <Timebase_UpCounter_Expired+0x30>
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a1e:	84 2f       	mov	r24, r20
    1a20:	08 95       	ret

00001a22 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1a22:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1a24:	e0 91 49 01 	lds	r30, 0x0149
    1a28:	f0 91 4a 01 	lds	r31, 0x014A
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	85 e1       	ldi	r24, 0x15	; 21
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	bc 01       	movw	r22, r24
    1a36:	26 9f       	mul	r18, r22
    1a38:	c0 01       	movw	r24, r0
    1a3a:	27 9f       	mul	r18, r23
    1a3c:	90 0d       	add	r25, r0
    1a3e:	36 9f       	mul	r19, r22
    1a40:	90 0d       	add	r25, r0
    1a42:	11 24       	eor	r1, r1
    1a44:	e8 0f       	add	r30, r24
    1a46:	f9 1f       	adc	r31, r25
    1a48:	80 ad       	ldd	r24, Z+56	; 0x38
    1a4a:	86 95       	lsr	r24
    1a4c:	8f 70       	andi	r24, 0x0F	; 15
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	11 f0       	breq	.+4      	; 0x1a56 <Timebase_UpCounter_Expired_Event+0x34>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1a56:	84 2f       	mov	r24, r20
    1a58:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Timebase_UpCounter_Reset>
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a5e:	08 95       	ret

00001a60 <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1a64:	c0 91 49 01 	lds	r28, 0x0149
    1a68:	d0 91 4a 01 	lds	r29, 0x014A
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1a6e:	25 e1       	ldi	r18, 0x15	; 21
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	fc 01       	movw	r30, r24
    1a74:	e2 9f       	mul	r30, r18
    1a76:	c0 01       	movw	r24, r0
    1a78:	e3 9f       	mul	r30, r19
    1a7a:	90 0d       	add	r25, r0
    1a7c:	f2 9f       	mul	r31, r18
    1a7e:	90 0d       	add	r25, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	c8 0f       	add	r28, r24
    1a84:	d9 1f       	adc	r29, r25
    1a86:	88 ad       	ldd	r24, Y+56	; 0x38
    1a88:	80 fd       	sbrc	r24, 0
    1a8a:	16 c0       	rjmp	.+44     	; 0x1ab8 <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e7 5b       	subi	r30, 0xB7	; 183
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	cb 5b       	subi	r28, 0xBB	; 187
    1a94:	df 4f       	sbci	r29, 0xFF	; 255
    1a96:	88 81       	ld	r24, Y
    1a98:	99 81       	ldd	r25, Y+1	; 0x01
    1a9a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a9c:	bb 81       	ldd	r27, Y+3	; 0x03
    1a9e:	c5 54       	subi	r28, 0x45	; 69
    1aa0:	d0 40       	sbci	r29, 0x00	; 0
    1aa2:	84 0f       	add	r24, r20
    1aa4:	95 1f       	adc	r25, r21
    1aa6:	a6 1f       	adc	r26, r22
    1aa8:	b7 1f       	adc	r27, r23
    1aaa:	80 83       	st	Z, r24
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	a2 83       	std	Z+2, r26	; 0x02
    1ab0:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1ab2:	88 ad       	ldd	r24, Y+56	; 0x38
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	88 af       	std	Y+56, r24	; 0x38
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1abe:	e0 91 49 01 	lds	r30, 0x0149
    1ac2:	f0 91 4a 01 	lds	r31, 0x014A
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1ac8:	25 e1       	ldi	r18, 0x15	; 21
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	ac 01       	movw	r20, r24
    1ace:	42 9f       	mul	r20, r18
    1ad0:	c0 01       	movw	r24, r0
    1ad2:	43 9f       	mul	r20, r19
    1ad4:	90 0d       	add	r25, r0
    1ad6:	52 9f       	mul	r21, r18
    1ad8:	90 0d       	add	r25, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	e8 0f       	add	r30, r24
    1ade:	f9 1f       	adc	r31, r25
    1ae0:	df 01       	movw	r26, r30
    1ae2:	ab 5b       	subi	r26, 0xBB	; 187
    1ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae6:	e7 5b       	subi	r30, 0xB7	; 183
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	20 81       	ld	r18, Z
    1aec:	31 81       	ldd	r19, Z+1	; 0x01
    1aee:	42 81       	ldd	r20, Z+2	; 0x02
    1af0:	53 81       	ldd	r21, Z+3	; 0x03
    1af2:	8d 91       	ld	r24, X+
    1af4:	9d 91       	ld	r25, X+
    1af6:	0d 90       	ld	r0, X+
    1af8:	bc 91       	ld	r27, X
    1afa:	a0 2d       	mov	r26, r0
    1afc:	28 1b       	sub	r18, r24
    1afe:	39 0b       	sbc	r19, r25
    1b00:	4a 0b       	sbc	r20, r26
    1b02:	5b 0b       	sbc	r21, r27
    1b04:	57 ff       	sbrs	r21, 7
    1b06:	04 c0       	rjmp	.+8      	; 0x1b10 <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1b10:	b9 01       	movw	r22, r18
    1b12:	ca 01       	movw	r24, r20
    1b14:	08 95       	ret

00001b16 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1b1a:	c0 91 49 01 	lds	r28, 0x0149
    1b1e:	d0 91 4a 01 	lds	r29, 0x014A
    1b22:	68 2f       	mov	r22, r24
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1b26:	85 e1       	ldi	r24, 0x15	; 21
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	68 9f       	mul	r22, r24
    1b2c:	f0 01       	movw	r30, r0
    1b2e:	69 9f       	mul	r22, r25
    1b30:	f0 0d       	add	r31, r0
    1b32:	78 9f       	mul	r23, r24
    1b34:	f0 0d       	add	r31, r0
    1b36:	11 24       	eor	r1, r1
    1b38:	ec 0f       	add	r30, r28
    1b3a:	fd 1f       	adc	r31, r29
    1b3c:	df 01       	movw	r26, r30
    1b3e:	ab 5b       	subi	r26, 0xBB	; 187
    1b40:	bf 4f       	sbci	r27, 0xFF	; 255
    1b42:	e7 5b       	subi	r30, 0xB7	; 183
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	20 81       	ld	r18, Z
    1b48:	31 81       	ldd	r19, Z+1	; 0x01
    1b4a:	42 81       	ldd	r20, Z+2	; 0x02
    1b4c:	53 81       	ldd	r21, Z+3	; 0x03
    1b4e:	8d 91       	ld	r24, X+
    1b50:	9d 91       	ld	r25, X+
    1b52:	0d 90       	ld	r0, X+
    1b54:	bc 91       	ld	r27, X
    1b56:	a0 2d       	mov	r26, r0
    1b58:	28 1b       	sub	r18, r24
    1b5a:	39 0b       	sbc	r19, r25
    1b5c:	4a 0b       	sbc	r20, r26
    1b5e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1b60:	57 fd       	sbrc	r21, 7
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <Timebase_UpCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1b64:	21 15       	cp	r18, r1
    1b66:	31 05       	cpc	r19, r1
    1b68:	41 05       	cpc	r20, r1
    1b6a:	51 05       	cpc	r21, r1
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1b6e:	20 e0       	ldi	r18, 0x00	; 0
    1b70:	12 c0       	rjmp	.+36     	; 0x1b96 <Timebase_UpCounter_Period_Value_Expired+0x80>
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	85 e1       	ldi	r24, 0x15	; 21
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	ac 01       	movw	r20, r24
    1b7a:	64 9f       	mul	r22, r20
    1b7c:	c0 01       	movw	r24, r0
    1b7e:	65 9f       	mul	r22, r21
    1b80:	90 0d       	add	r25, r0
    1b82:	74 9f       	mul	r23, r20
    1b84:	90 0d       	add	r25, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	c8 0f       	add	r28, r24
    1b8a:	d9 1f       	adc	r29, r25
    1b8c:	88 ad       	ldd	r24, Y+56	; 0x38
    1b8e:	80 ff       	sbrs	r24, 0
    1b90:	21 e0       	ldi	r18, 0x01	; 1
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1b96:	82 2f       	mov	r24, r18
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1b9e:	1f 93       	push	r17
    1ba0:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1ba2:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <Timebase_UpCounter_Period_Value_Expired>
    1ba6:	81 30       	cpi	r24, 0x01	; 1
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	16 c0       	rjmp	.+44     	; 0x1bda <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1bae:	e0 91 49 01 	lds	r30, 0x0149
    1bb2:	f0 91 4a 01 	lds	r31, 0x014A
    1bb6:	21 2f       	mov	r18, r17
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	85 e1       	ldi	r24, 0x15	; 21
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	ac 01       	movw	r20, r24
    1bc0:	24 9f       	mul	r18, r20
    1bc2:	c0 01       	movw	r24, r0
    1bc4:	25 9f       	mul	r18, r21
    1bc6:	90 0d       	add	r25, r0
    1bc8:	34 9f       	mul	r19, r20
    1bca:	90 0d       	add	r25, r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	e8 0f       	add	r30, r24
    1bd0:	f9 1f       	adc	r31, r25
    1bd2:	80 ad       	ldd	r24, Z+56	; 0x38
    1bd4:	8e 7f       	andi	r24, 0xFE	; 254
    1bd6:	80 af       	std	Z+56, r24	; 0x38
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1bda:	1f 91       	pop	r17
    1bdc:	08 95       	ret

00001bde <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <Timebase_UpCounter_Update>
  }
}
    1be4:	08 95       	ret

00001be6 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	0e 94 b2 0b 	call	0x1764	; 0x1764 <Timebase_UpCounter_Reset>
  }
}
    1bec:	08 95       	ret

00001bee <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1bee:	e0 91 49 01 	lds	r30, 0x0149
    1bf2:	f0 91 4a 01 	lds	r31, 0x014A
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 01       	movw	r18, r24
    1bfa:	44 e0       	ldi	r20, 0x04	; 4
    1bfc:	22 0f       	add	r18, r18
    1bfe:	33 1f       	adc	r19, r19
    1c00:	4a 95       	dec	r20
    1c02:	e1 f7       	brne	.-8      	; 0x1bfc <Timebase_DownCounter_SS_Get_Status+0xe>
    1c04:	28 0f       	add	r18, r24
    1c06:	39 1f       	adc	r19, r25
    1c08:	e2 0f       	add	r30, r18
    1c0a:	f3 1f       	adc	r31, r19
    1c0c:	e3 5b       	subi	r30, 0xB3	; 179
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1c14:	8f 70       	andi	r24, 0x0F	; 15
    1c16:	08 95       	ret

00001c18 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c18:	e0 91 49 01 	lds	r30, 0x0149
    1c1c:	f0 91 4a 01 	lds	r31, 0x014A
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 01       	movw	r18, r24
    1c24:	54 e0       	ldi	r21, 0x04	; 4
    1c26:	22 0f       	add	r18, r18
    1c28:	33 1f       	adc	r19, r19
    1c2a:	5a 95       	dec	r21
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <Timebase_DownCounter_SS_Set_Status+0xe>
    1c2e:	28 0f       	add	r18, r24
    1c30:	39 1f       	adc	r19, r25
    1c32:	e2 0f       	add	r30, r18
    1c34:	f3 1f       	adc	r31, r19
    1c36:	e3 5b       	subi	r30, 0xB3	; 179
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	6f 70       	andi	r22, 0x0F	; 15
    1c3c:	66 0f       	add	r22, r22
    1c3e:	80 81       	ld	r24, Z
    1c40:	81 7e       	andi	r24, 0xE1	; 225
    1c42:	86 2b       	or	r24, r22
    1c44:	80 83       	st	Z, r24
}
    1c46:	08 95       	ret

00001c48 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1c48:	e0 91 49 01 	lds	r30, 0x0149
    1c4c:	f0 91 4a 01 	lds	r31, 0x014A
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 01       	movw	r18, r24
    1c54:	64 e0       	ldi	r22, 0x04	; 4
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	6a 95       	dec	r22
    1c5c:	e1 f7       	brne	.-8      	; 0x1c56 <Timebase_DownCounter_SS_Get_Value+0xe>
    1c5e:	28 0f       	add	r18, r24
    1c60:	39 1f       	adc	r19, r25
    1c62:	e2 0f       	add	r30, r18
    1c64:	f3 1f       	adc	r31, r19
    1c66:	ea 5a       	subi	r30, 0xAA	; 170
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	08 95       	ret

00001c74 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c74:	e0 91 49 01 	lds	r30, 0x0149
    1c78:	f0 91 4a 01 	lds	r31, 0x014A
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9c 01       	movw	r18, r24
    1c80:	a4 e0       	ldi	r26, 0x04	; 4
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	aa 95       	dec	r26
    1c88:	e1 f7       	brne	.-8      	; 0x1c82 <Timebase_DownCounter_SS_Set_Value+0xe>
    1c8a:	28 0f       	add	r18, r24
    1c8c:	39 1f       	adc	r19, r25
    1c8e:	e2 0f       	add	r30, r18
    1c90:	f3 1f       	adc	r31, r19
    1c92:	ea 5a       	subi	r30, 0xAA	; 170
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	40 83       	st	Z, r20
    1c98:	51 83       	std	Z+1, r21	; 0x01
    1c9a:	62 83       	std	Z+2, r22	; 0x02
    1c9c:	73 83       	std	Z+3, r23	; 0x03
}
    1c9e:	08 95       	ret

00001ca0 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1ca0:	e0 91 49 01 	lds	r30, 0x0149
    1ca4:	f0 91 4a 01 	lds	r31, 0x014A
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9c 01       	movw	r18, r24
    1cac:	b4 e0       	ldi	r27, 0x04	; 4
    1cae:	22 0f       	add	r18, r18
    1cb0:	33 1f       	adc	r19, r19
    1cb2:	ba 95       	dec	r27
    1cb4:	e1 f7       	brne	.-8      	; 0x1cae <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1cb6:	28 0f       	add	r18, r24
    1cb8:	39 1f       	adc	r19, r25
    1cba:	e2 0f       	add	r30, r18
    1cbc:	f3 1f       	adc	r31, r19
    1cbe:	e2 5b       	subi	r30, 0xB2	; 178
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	08 95       	ret

00001ccc <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1ccc:	e0 91 49 01 	lds	r30, 0x0149
    1cd0:	f0 91 4a 01 	lds	r31, 0x014A
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	9c 01       	movw	r18, r24
    1cd8:	44 e0       	ldi	r20, 0x04	; 4
    1cda:	22 0f       	add	r18, r18
    1cdc:	33 1f       	adc	r19, r19
    1cde:	4a 95       	dec	r20
    1ce0:	e1 f7       	brne	.-8      	; 0x1cda <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1ce2:	28 0f       	add	r18, r24
    1ce4:	39 1f       	adc	r19, r25
    1ce6:	e2 0f       	add	r30, r18
    1ce8:	f3 1f       	adc	r31, r19
    1cea:	ee 5a       	subi	r30, 0xAE	; 174
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	60 81       	ld	r22, Z
    1cf0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	08 95       	ret

00001cf8 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1cf8:	e0 91 49 01 	lds	r30, 0x0149
    1cfc:	f0 91 4a 01 	lds	r31, 0x014A
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 01       	movw	r18, r24
    1d04:	a4 e0       	ldi	r26, 0x04	; 4
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	aa 95       	dec	r26
    1d0c:	e1 f7       	brne	.-8      	; 0x1d06 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1d0e:	28 0f       	add	r18, r24
    1d10:	39 1f       	adc	r19, r25
    1d12:	e2 0f       	add	r30, r18
    1d14:	f3 1f       	adc	r31, r19
    1d16:	e2 5b       	subi	r30, 0xB2	; 178
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	40 83       	st	Z, r20
    1d1c:	51 83       	std	Z+1, r21	; 0x01
    1d1e:	62 83       	std	Z+2, r22	; 0x02
    1d20:	73 83       	std	Z+3, r23	; 0x03
}
    1d22:	08 95       	ret

00001d24 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1d24:	e0 91 49 01 	lds	r30, 0x0149
    1d28:	f0 91 4a 01 	lds	r31, 0x014A
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 01       	movw	r18, r24
    1d30:	b4 e0       	ldi	r27, 0x04	; 4
    1d32:	22 0f       	add	r18, r18
    1d34:	33 1f       	adc	r19, r19
    1d36:	ba 95       	dec	r27
    1d38:	e1 f7       	brne	.-8      	; 0x1d32 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1d3a:	28 0f       	add	r18, r24
    1d3c:	39 1f       	adc	r19, r25
    1d3e:	e2 0f       	add	r30, r18
    1d40:	f3 1f       	adc	r31, r19
    1d42:	ee 5a       	subi	r30, 0xAE	; 174
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	40 83       	st	Z, r20
    1d48:	51 83       	std	Z+1, r21	; 0x01
    1d4a:	62 83       	std	Z+2, r22	; 0x02
    1d4c:	73 83       	std	Z+3, r23	; 0x03
}
    1d4e:	08 95       	ret

00001d50 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1d50:	e0 91 49 01 	lds	r30, 0x0149
    1d54:	f0 91 4a 01 	lds	r31, 0x014A
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 01       	movw	r18, r24
    1d5c:	44 e0       	ldi	r20, 0x04	; 4
    1d5e:	22 0f       	add	r18, r18
    1d60:	33 1f       	adc	r19, r19
    1d62:	4a 95       	dec	r20
    1d64:	e1 f7       	brne	.-8      	; 0x1d5e <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1d66:	28 0f       	add	r18, r24
    1d68:	39 1f       	adc	r19, r25
    1d6a:	e2 0f       	add	r30, r18
    1d6c:	f3 1f       	adc	r31, r19
    1d6e:	e6 5a       	subi	r30, 0xA6	; 166
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	08 95       	ret

00001d7c <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1d7c:	e0 91 49 01 	lds	r30, 0x0149
    1d80:	f0 91 4a 01 	lds	r31, 0x014A
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1d88:	77 ff       	sbrs	r23, 7
    1d8a:	11 c0       	rjmp	.+34     	; 0x1dae <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1d8c:	c9 01       	movw	r24, r18
    1d8e:	b4 e0       	ldi	r27, 0x04	; 4
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	ba 95       	dec	r27
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1d98:	82 0f       	add	r24, r18
    1d9a:	93 1f       	adc	r25, r19
    1d9c:	e8 0f       	add	r30, r24
    1d9e:	f9 1f       	adc	r31, r25
    1da0:	e6 5a       	subi	r30, 0xA6	; 166
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	10 82       	st	Z, r1
    1da6:	11 82       	std	Z+1, r1	; 0x01
    1da8:	12 82       	std	Z+2, r1	; 0x02
    1daa:	13 82       	std	Z+3, r1	; 0x03
    1dac:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1dae:	c9 01       	movw	r24, r18
    1db0:	a4 e0       	ldi	r26, 0x04	; 4
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	aa 95       	dec	r26
    1db8:	e1 f7       	brne	.-8      	; 0x1db2 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1dba:	82 0f       	add	r24, r18
    1dbc:	93 1f       	adc	r25, r19
    1dbe:	e8 0f       	add	r30, r24
    1dc0:	f9 1f       	adc	r31, r25
    1dc2:	e6 5a       	subi	r30, 0xA6	; 166
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	40 83       	st	Z, r20
    1dc8:	51 83       	std	Z+1, r21	; 0x01
    1dca:	62 83       	std	Z+2, r22	; 0x02
    1dcc:	73 83       	std	Z+3, r23	; 0x03
    1dce:	08 95       	ret

00001dd0 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1dd0:	e0 91 49 01 	lds	r30, 0x0149
    1dd4:	f0 91 4a 01 	lds	r31, 0x014A
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 01       	movw	r18, r24
    1ddc:	44 e0       	ldi	r20, 0x04	; 4
    1dde:	22 0f       	add	r18, r18
    1de0:	33 1f       	adc	r19, r19
    1de2:	4a 95       	dec	r20
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1de6:	28 0f       	add	r18, r24
    1de8:	39 1f       	adc	r19, r25
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	e3 5b       	subi	r30, 0xB3	; 179
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1df4:	81 70       	andi	r24, 0x01	; 1
    1df6:	08 95       	ret

00001df8 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1df8:	e0 91 49 01 	lds	r30, 0x0149
    1dfc:	f0 91 4a 01 	lds	r31, 0x014A
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	9c 01       	movw	r18, r24
    1e04:	54 e0       	ldi	r21, 0x04	; 4
    1e06:	22 0f       	add	r18, r18
    1e08:	33 1f       	adc	r19, r19
    1e0a:	5a 95       	dec	r21
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1e0e:	28 0f       	add	r18, r24
    1e10:	39 1f       	adc	r19, r25
    1e12:	e2 0f       	add	r30, r18
    1e14:	f3 1f       	adc	r31, r19
    1e16:	e3 5b       	subi	r30, 0xB3	; 179
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	81 60       	ori	r24, 0x01	; 1
    1e1e:	80 83       	st	Z, r24
}
    1e20:	08 95       	ret

00001e22 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e22:	e0 91 49 01 	lds	r30, 0x0149
    1e26:	f0 91 4a 01 	lds	r31, 0x014A
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	64 e0       	ldi	r22, 0x04	; 4
    1e30:	22 0f       	add	r18, r18
    1e32:	33 1f       	adc	r19, r19
    1e34:	6a 95       	dec	r22
    1e36:	e1 f7       	brne	.-8      	; 0x1e30 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1e38:	28 0f       	add	r18, r24
    1e3a:	39 1f       	adc	r19, r25
    1e3c:	e2 0f       	add	r30, r18
    1e3e:	f3 1f       	adc	r31, r19
    1e40:	e3 5b       	subi	r30, 0xB3	; 179
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	8e 7f       	andi	r24, 0xFE	; 254
    1e48:	80 83       	st	Z, r24
}
    1e4a:	08 95       	ret

00001e4c <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e4c:	e0 91 49 01 	lds	r30, 0x0149
    1e50:	f0 91 4a 01 	lds	r31, 0x014A
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 01       	movw	r18, r24
    1e58:	74 e0       	ldi	r23, 0x04	; 4
    1e5a:	22 0f       	add	r18, r18
    1e5c:	33 1f       	adc	r19, r19
    1e5e:	7a 95       	dec	r23
    1e60:	e1 f7       	brne	.-8      	; 0x1e5a <Timebase_DownCounter_SS_Reset+0xe>
    1e62:	28 0f       	add	r18, r24
    1e64:	39 1f       	adc	r19, r25
    1e66:	e2 0f       	add	r30, r18
    1e68:	f3 1f       	adc	r31, r19
    1e6a:	ee 5a       	subi	r30, 0xAE	; 174
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	10 82       	st	Z, r1
    1e70:	11 82       	std	Z+1, r1	; 0x01
    1e72:	12 82       	std	Z+2, r1	; 0x02
    1e74:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e76:	12 92       	st	-Z, r1
    1e78:	12 92       	st	-Z, r1
    1e7a:	12 92       	st	-Z, r1
    1e7c:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e7e:	38 96       	adiw	r30, 0x08	; 8
    1e80:	10 82       	st	Z, r1
    1e82:	11 82       	std	Z+1, r1	; 0x01
    1e84:	12 82       	std	Z+2, r1	; 0x02
    1e86:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e88:	39 97       	sbiw	r30, 0x09	; 9
    1e8a:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e8c:	80 7e       	andi	r24, 0xE0	; 224
    1e8e:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1e90:	08 95       	ret

00001e92 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e92:	e0 91 49 01 	lds	r30, 0x0149
    1e96:	f0 91 4a 01 	lds	r31, 0x014A
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	a4 e0       	ldi	r26, 0x04	; 4
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	aa 95       	dec	r26
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1ea8:	28 0f       	add	r18, r24
    1eaa:	39 1f       	adc	r19, r25
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	ee 5a       	subi	r30, 0xAE	; 174
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	10 82       	st	Z, r1
    1eb6:	11 82       	std	Z+1, r1	; 0x01
    1eb8:	12 82       	std	Z+2, r1	; 0x02
    1eba:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ebc:	12 92       	st	-Z, r1
    1ebe:	12 92       	st	-Z, r1
    1ec0:	12 92       	st	-Z, r1
    1ec2:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ec4:	38 96       	adiw	r30, 0x08	; 8
    1ec6:	10 82       	st	Z, r1
    1ec8:	11 82       	std	Z+1, r1	; 0x01
    1eca:	12 82       	std	Z+2, r1	; 0x02
    1ecc:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ece:	39 97       	sbiw	r30, 0x09	; 9
    1ed0:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ed2:	80 7e       	andi	r24, 0xE0	; 224
    1ed4:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1ed6:	08 95       	ret

00001ed8 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ed8:	e0 91 49 01 	lds	r30, 0x0149
    1edc:	f0 91 4a 01 	lds	r31, 0x014A
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	b4 e0       	ldi	r27, 0x04	; 4
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	ba 95       	dec	r27
    1eec:	e1 f7       	brne	.-8      	; 0x1ee6 <Timebase_DownCounter_SS_Start+0xe>
    1eee:	28 0f       	add	r18, r24
    1ef0:	39 1f       	adc	r19, r25
    1ef2:	e2 0f       	add	r30, r18
    1ef4:	f3 1f       	adc	r31, r19
    1ef6:	e3 5b       	subi	r30, 0xB3	; 179
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	90 81       	ld	r25, Z
    1efc:	89 2f       	mov	r24, r25
    1efe:	86 95       	lsr	r24
    1f00:	8f 70       	andi	r24, 0x0F	; 15
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	19 f0       	breq	.+6      	; 0x1f0c <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f06:	91 7e       	andi	r25, 0xE1	; 225
    1f08:	92 60       	ori	r25, 0x02	; 2
    1f0a:	90 83       	st	Z, r25
    1f0c:	08 95       	ret

00001f0e <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f0e:	e0 91 49 01 	lds	r30, 0x0149
    1f12:	f0 91 4a 01 	lds	r31, 0x014A
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1f18:	9c 01       	movw	r18, r24
    1f1a:	44 e0       	ldi	r20, 0x04	; 4
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	4a 95       	dec	r20
    1f22:	e1 f7       	brne	.-8      	; 0x1f1c <Timebase_DownCounter_SS_Stop+0xe>
    1f24:	28 0f       	add	r18, r24
    1f26:	39 1f       	adc	r19, r25
    1f28:	e2 0f       	add	r30, r18
    1f2a:	f3 1f       	adc	r31, r19
    1f2c:	e3 5b       	subi	r30, 0xB3	; 179
    1f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f30:	90 81       	ld	r25, Z
    1f32:	89 2f       	mov	r24, r25
    1f34:	86 95       	lsr	r24
    1f36:	8f 70       	andi	r24, 0x0F	; 15
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f3c:	91 7e       	andi	r25, 0xE1	; 225
    1f3e:	94 60       	ori	r25, 0x04	; 4
    1f40:	90 83       	st	Z, r25
    1f42:	08 95       	ret

00001f44 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1f44:	2f 92       	push	r2
    1f46:	3f 92       	push	r3
    1f48:	4f 92       	push	r4
    1f4a:	5f 92       	push	r5
    1f4c:	6f 92       	push	r6
    1f4e:	7f 92       	push	r7
    1f50:	8f 92       	push	r8
    1f52:	9f 92       	push	r9
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <Timebase_DownCounter_SS_Set_Securely+0x26>
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <Timebase_DownCounter_SS_Set_Securely+0x28>
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    1f70:	4a 01       	movw	r8, r20
    1f72:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f74:	20 91 49 01 	lds	r18, 0x0149
    1f78:	30 91 4a 01 	lds	r19, 0x014A
    1f7c:	3c 83       	std	Y+4, r19	; 0x04
    1f7e:	2b 83       	std	Y+3, r18	; 0x03
    1f80:	a8 2f       	mov	r26, r24
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	ba 83       	std	Y+2, r27	; 0x02
    1f86:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1f88:	fd 01       	movw	r30, r26
    1f8a:	64 e0       	ldi	r22, 0x04	; 4
    1f8c:	ee 0f       	add	r30, r30
    1f8e:	ff 1f       	adc	r31, r31
    1f90:	6a 95       	dec	r22
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <Timebase_DownCounter_SS_Set_Securely+0x48>
    1f94:	ea 0f       	add	r30, r26
    1f96:	fb 1f       	adc	r31, r27
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	e3 5b       	subi	r30, 0xB3	; 179
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	ed 54       	subi	r30, 0x4D	; 77
    1fa4:	f0 40       	sbci	r31, 0x00	; 0
    1fa6:	86 95       	lsr	r24
    1fa8:	8f 70       	andi	r24, 0x0F	; 15
    1faa:	09 f0       	breq	.+2      	; 0x1fae <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1fac:	72 c0       	rjmp	.+228    	; 0x2092 <Timebase_DownCounter_SS_Set_Securely+0x14e>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1fae:	ea 5a       	subi	r30, 0xAA	; 170
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 82       	st	Z, r8
    1fb4:	91 82       	std	Z+1, r9	; 0x01
    1fb6:	a2 82       	std	Z+2, r10	; 0x02
    1fb8:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1fba:	f9 01       	movw	r30, r18
    1fbc:	c0 84       	ldd	r12, Z+8	; 0x08
    1fbe:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1fc0:	22 84       	ldd	r2, Z+10	; 0x0a
    1fc2:	33 84       	ldd	r3, Z+11	; 0x0b
    1fc4:	44 84       	ldd	r4, Z+12	; 0x0c
    1fc6:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1fc8:	21 81       	ldd	r18, Z+1	; 0x01
    1fca:	32 81       	ldd	r19, Z+2	; 0x02
    1fcc:	40 e0       	ldi	r20, 0x00	; 0
    1fce:	50 e0       	ldi	r21, 0x00	; 0
    1fd0:	c5 01       	movw	r24, r10
    1fd2:	b4 01       	movw	r22, r8
    1fd4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    1fd8:	7b 01       	movw	r14, r22
    1fda:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1fdc:	ab 81       	ldd	r26, Y+3	; 0x03
    1fde:	bc 81       	ldd	r27, Y+4	; 0x04
    1fe0:	11 96       	adiw	r26, 0x01	; 1
    1fe2:	2d 91       	ld	r18, X+
    1fe4:	3c 91       	ld	r19, X
    1fe6:	12 97       	sbiw	r26, 0x02	; 2
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	50 e0       	ldi	r21, 0x00	; 0
    1fec:	c5 01       	movw	r24, r10
    1fee:	b4 01       	movw	r22, r8
    1ff0:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	da 01       	movw	r26, r20
    1ff8:	3c 01       	movw	r6, r24
    1ffa:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1ffc:	56 01       	movw	r10, r12
    1ffe:	cc 24       	eor	r12, r12
    2000:	dd 24       	eor	r13, r13
    2002:	ae 0c       	add	r10, r14
    2004:	bf 1c       	adc	r11, r15
    2006:	c0 1e       	adc	r12, r16
    2008:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    200a:	eb 81       	ldd	r30, Y+3	; 0x03
    200c:	fc 81       	ldd	r31, Y+4	; 0x04
    200e:	81 81       	ldd	r24, Z+1	; 0x01
    2010:	92 81       	ldd	r25, Z+2	; 0x02
    2012:	a0 e0       	ldi	r26, 0x00	; 0
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	a8 16       	cp	r10, r24
    2018:	b9 06       	cpc	r11, r25
    201a:	ca 06       	cpc	r12, r26
    201c:	db 06       	cpc	r13, r27
    201e:	94 f0       	brlt	.+36     	; 0x2044 <Timebase_DownCounter_SS_Set_Securely+0x100>
	  sec_val += 1;
    2020:	08 94       	sec
    2022:	61 1c       	adc	r6, r1
    2024:	71 1c       	adc	r7, r1
    2026:	81 1c       	adc	r8, r1
    2028:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    202a:	21 81       	ldd	r18, Z+1	; 0x01
    202c:	32 81       	ldd	r19, Z+2	; 0x02
    202e:	40 e0       	ldi	r20, 0x00	; 0
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	c6 01       	movw	r24, r12
    2034:	b5 01       	movw	r22, r10
    2036:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    203a:	ac 01       	movw	r20, r24
    203c:	cb 01       	movw	r24, r22
    203e:	da 01       	movw	r26, r20
    2040:	5c 01       	movw	r10, r24
    2042:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2044:	e9 81       	ldd	r30, Y+1	; 0x01
    2046:	fa 81       	ldd	r31, Y+2	; 0x02
    2048:	54 e0       	ldi	r21, 0x04	; 4
    204a:	ee 0f       	add	r30, r30
    204c:	ff 1f       	adc	r31, r31
    204e:	5a 95       	dec	r21
    2050:	e1 f7       	brne	.-8      	; 0x204a <Timebase_DownCounter_SS_Set_Securely+0x106>
    2052:	29 81       	ldd	r18, Y+1	; 0x01
    2054:	3a 81       	ldd	r19, Y+2	; 0x02
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	e8 0f       	add	r30, r24
    2060:	f9 1f       	adc	r31, r25
    2062:	e2 5b       	subi	r30, 0xB2	; 178
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	26 0c       	add	r2, r6
    2068:	37 1c       	adc	r3, r7
    206a:	48 1c       	adc	r4, r8
    206c:	59 1c       	adc	r5, r9
    206e:	21 92       	st	Z+, r2
    2070:	31 92       	st	Z+, r3
    2072:	41 92       	st	Z+, r4
    2074:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2076:	a0 82       	st	Z, r10
    2078:	b1 82       	std	Z+1, r11	; 0x01
    207a:	c2 82       	std	Z+2, r12	; 0x02
    207c:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    207e:	35 97       	sbiw	r30, 0x05	; 5
    2080:	90 81       	ld	r25, Z
    2082:	89 2f       	mov	r24, r25
    2084:	86 95       	lsr	r24
    2086:	8f 70       	andi	r24, 0x0F	; 15
    2088:	81 30       	cpi	r24, 0x01	; 1
    208a:	19 f0       	breq	.+6      	; 0x2092 <Timebase_DownCounter_SS_Set_Securely+0x14e>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    208c:	91 7e       	andi	r25, 0xE1	; 225
    208e:	92 60       	ori	r25, 0x02	; 2
    2090:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	df 90       	pop	r13
    20a8:	cf 90       	pop	r12
    20aa:	bf 90       	pop	r11
    20ac:	af 90       	pop	r10
    20ae:	9f 90       	pop	r9
    20b0:	8f 90       	pop	r8
    20b2:	7f 90       	pop	r7
    20b4:	6f 90       	pop	r6
    20b6:	5f 90       	pop	r5
    20b8:	4f 90       	pop	r4
    20ba:	3f 90       	pop	r3
    20bc:	2f 90       	pop	r2
    20be:	08 95       	ret

000020c0 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    20c0:	e0 91 49 01 	lds	r30, 0x0149
    20c4:	f0 91 4a 01 	lds	r31, 0x014A
    20c8:	a8 2f       	mov	r26, r24
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	9d 01       	movw	r18, r26
    20ce:	94 e0       	ldi	r25, 0x04	; 4
    20d0:	22 0f       	add	r18, r18
    20d2:	33 1f       	adc	r19, r19
    20d4:	9a 95       	dec	r25
    20d6:	e1 f7       	brne	.-8      	; 0x20d0 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    20d8:	2a 0f       	add	r18, r26
    20da:	3b 1f       	adc	r19, r27
    20dc:	e2 0f       	add	r30, r18
    20de:	f3 1f       	adc	r31, r19
    20e0:	ee 5a       	subi	r30, 0xAE	; 174
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	10 82       	st	Z, r1
    20e6:	11 82       	std	Z+1, r1	; 0x01
    20e8:	12 82       	std	Z+2, r1	; 0x02
    20ea:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    20ec:	12 92       	st	-Z, r1
    20ee:	12 92       	st	-Z, r1
    20f0:	12 92       	st	-Z, r1
    20f2:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    20f4:	38 96       	adiw	r30, 0x08	; 8
    20f6:	10 82       	st	Z, r1
    20f8:	11 82       	std	Z+1, r1	; 0x01
    20fa:	12 82       	std	Z+2, r1	; 0x02
    20fc:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    20fe:	39 97       	sbiw	r30, 0x09	; 9
    2100:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2102:	90 7e       	andi	r25, 0xE0	; 224
    2104:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2106:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <Timebase_DownCounter_SS_Set_Securely>
} 
    210a:	08 95       	ret

0000210c <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    210c:	2f 92       	push	r2
    210e:	3f 92       	push	r3
    2110:	4f 92       	push	r4
    2112:	5f 92       	push	r5
    2114:	6f 92       	push	r6
    2116:	7f 92       	push	r7
    2118:	8f 92       	push	r8
    211a:	9f 92       	push	r9
    211c:	af 92       	push	r10
    211e:	bf 92       	push	r11
    2120:	cf 92       	push	r12
    2122:	df 92       	push	r13
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2130:	c0 90 49 01 	lds	r12, 0x0149
    2134:	d0 90 4a 01 	lds	r13, 0x014A
    2138:	08 2f       	mov	r16, r24
    213a:	10 e0       	ldi	r17, 0x00	; 0
    213c:	e8 01       	movw	r28, r16
    213e:	34 e0       	ldi	r19, 0x04	; 4
    2140:	cc 0f       	add	r28, r28
    2142:	dd 1f       	adc	r29, r29
    2144:	3a 95       	dec	r19
    2146:	e1 f7       	brne	.-8      	; 0x2140 <Timebase_DownCounter_SS_Update+0x34>
    2148:	c0 0f       	add	r28, r16
    214a:	d1 1f       	adc	r29, r17
    214c:	cc 0d       	add	r28, r12
    214e:	dd 1d       	adc	r29, r13
    2150:	c3 5b       	subi	r28, 0xB3	; 179
    2152:	df 4f       	sbci	r29, 0xFF	; 255
    2154:	88 81       	ld	r24, Y
    2156:	cd 54       	subi	r28, 0x4D	; 77
    2158:	d0 40       	sbci	r29, 0x00	; 0
    215a:	86 95       	lsr	r24
    215c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	09 f0       	breq	.+2      	; 0x2164 <Timebase_DownCounter_SS_Update+0x58>
    2162:	5d c0       	rjmp	.+186    	; 0x221e <Timebase_DownCounter_SS_Update+0x112>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2164:	f6 01       	movw	r30, r12
    2166:	80 85       	ldd	r24, Z+8	; 0x08
    2168:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    216a:	4c 01       	movw	r8, r24
    216c:	aa 24       	eor	r10, r10
    216e:	bb 24       	eor	r11, r11
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2170:	82 85       	ldd	r24, Z+10	; 0x0a
    2172:	93 85       	ldd	r25, Z+11	; 0x0b
    2174:	a4 85       	ldd	r26, Z+12	; 0x0c
    2176:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    2178:	c2 5b       	subi	r28, 0xB2	; 178
    217a:	df 4f       	sbci	r29, 0xFF	; 255
    217c:	28 80       	ld	r2, Y
    217e:	39 80       	ldd	r3, Y+1	; 0x01
    2180:	4a 80       	ldd	r4, Y+2	; 0x02
    2182:	5b 80       	ldd	r5, Y+3	; 0x03
    2184:	28 1a       	sub	r2, r24
    2186:	39 0a       	sbc	r3, r25
    2188:	4a 0a       	sbc	r4, r26
    218a:	5b 0a       	sbc	r5, r27
    218c:	57 fe       	sbrs	r5, 7
    218e:	03 c0       	rjmp	.+6      	; 0x2196 <Timebase_DownCounter_SS_Update+0x8a>
    2190:	22 24       	eor	r2, r2
    2192:	33 24       	eor	r3, r3
    2194:	21 01       	movw	r4, r2
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    2196:	f6 01       	movw	r30, r12
    2198:	21 81       	ldd	r18, Z+1	; 0x01
    219a:	32 81       	ldd	r19, Z+2	; 0x02
    219c:	40 e0       	ldi	r20, 0x00	; 0
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	c2 01       	movw	r24, r4
    21a2:	b1 01       	movw	r22, r2
    21a4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__mulsi3>
	temp_s += temp_ss;
    21a8:	f8 01       	movw	r30, r16
    21aa:	24 e0       	ldi	r18, 0x04	; 4
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	2a 95       	dec	r18
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <Timebase_DownCounter_SS_Update+0xa0>
    21b4:	e0 0f       	add	r30, r16
    21b6:	f1 1f       	adc	r31, r17
    21b8:	ec 0d       	add	r30, r12
    21ba:	fd 1d       	adc	r31, r13
    21bc:	ef 01       	movw	r28, r30
    21be:	ce 5a       	subi	r28, 0xAE	; 174
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	28 81       	ld	r18, Y
    21c4:	39 81       	ldd	r19, Y+1	; 0x01
    21c6:	4a 81       	ldd	r20, Y+2	; 0x02
    21c8:	5b 81       	ldd	r21, Y+3	; 0x03
    21ca:	28 19       	sub	r18, r8
    21cc:	39 09       	sbc	r19, r9
    21ce:	4a 09       	sbc	r20, r10
    21d0:	5b 09       	sbc	r21, r11
    21d2:	26 0f       	add	r18, r22
    21d4:	37 1f       	adc	r19, r23
    21d6:	48 1f       	adc	r20, r24
    21d8:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21da:	df 01       	movw	r26, r30
    21dc:	aa 5a       	subi	r26, 0xAA	; 170
    21de:	bf 4f       	sbci	r27, 0xFF	; 255
    21e0:	2d 93       	st	X+, r18
    21e2:	3d 93       	st	X+, r19
    21e4:	4d 93       	st	X+, r20
    21e6:	5c 93       	st	X, r21
    21e8:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    21ea:	12 16       	cp	r1, r18
    21ec:	13 06       	cpc	r1, r19
    21ee:	14 06       	cpc	r1, r20
    21f0:	15 06       	cpc	r1, r21
    21f2:	0c f4       	brge	.+2      	; 0x21f6 <Timebase_DownCounter_SS_Update+0xea>
    21f4:	48 c0       	rjmp	.+144    	; 0x2286 <Timebase_DownCounter_SS_Update+0x17a>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    21f6:	18 82       	st	Y, r1
    21f8:	19 82       	std	Y+1, r1	; 0x01
    21fa:	1a 82       	std	Y+2, r1	; 0x02
    21fc:	1b 82       	std	Y+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    21fe:	e2 5b       	subi	r30, 0xB2	; 178
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	10 82       	st	Z, r1
    2204:	11 82       	std	Z+1, r1	; 0x01
    2206:	12 82       	std	Z+2, r1	; 0x02
    2208:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    220a:	1d 92       	st	X+, r1
    220c:	1d 92       	st	X+, r1
    220e:	1d 92       	st	X+, r1
    2210:	1c 92       	st	X, r1
    2212:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2214:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2216:	80 7e       	andi	r24, 0xE0	; 224
    2218:	88 60       	ori	r24, 0x08	; 8
    221a:	80 83       	st	Z, r24
    221c:	34 c0       	rjmp	.+104    	; 0x2286 <Timebase_DownCounter_SS_Update+0x17a>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    221e:	82 30       	cpi	r24, 0x02	; 2
    2220:	91 f5       	brne	.+100    	; 0x2286 <Timebase_DownCounter_SS_Update+0x17a>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2222:	f6 01       	movw	r30, r12
    2224:	60 84       	ldd	r6, Z+8	; 0x08
    2226:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2228:	e2 84       	ldd	r14, Z+10	; 0x0a
    222a:	f3 84       	ldd	r15, Z+11	; 0x0b
    222c:	04 85       	ldd	r16, Z+12	; 0x0c
    222e:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2230:	ca 5a       	subi	r28, 0xAA	; 170
    2232:	df 4f       	sbci	r29, 0xFF	; 255
    2234:	28 80       	ld	r2, Y
    2236:	39 80       	ldd	r3, Y+1	; 0x01
    2238:	4a 80       	ldd	r4, Y+2	; 0x02
    223a:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    223c:	21 81       	ldd	r18, Z+1	; 0x01
    223e:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    2240:	a1 80       	ldd	r10, Z+1	; 0x01
    2242:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2244:	28 97       	sbiw	r28, 0x08	; 8
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	c2 01       	movw	r24, r4
    224c:	b1 01       	movw	r22, r2
    224e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    2252:	e2 0e       	add	r14, r18
    2254:	f3 1e       	adc	r15, r19
    2256:	04 1f       	adc	r16, r20
    2258:	15 1f       	adc	r17, r21
    225a:	e9 92       	st	Y+, r14
    225c:	f9 92       	st	Y+, r15
    225e:	09 93       	st	Y+, r16
    2260:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2262:	cc 24       	eor	r12, r12
    2264:	dd 24       	eor	r13, r13
    2266:	c2 01       	movw	r24, r4
    2268:	b1 01       	movw	r22, r2
    226a:	a6 01       	movw	r20, r12
    226c:	95 01       	movw	r18, r10
    226e:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <__divmodsi4>
    2272:	88 24       	eor	r8, r8
    2274:	99 24       	eor	r9, r9
    2276:	66 0e       	add	r6, r22
    2278:	77 1e       	adc	r7, r23
    227a:	88 1e       	adc	r8, r24
    227c:	99 1e       	adc	r9, r25
    227e:	68 82       	st	Y, r6
    2280:	79 82       	std	Y+1, r7	; 0x01
    2282:	8a 82       	std	Y+2, r8	; 0x02
    2284:	9b 82       	std	Y+3, r9	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	7f 90       	pop	r7
    22a0:	6f 90       	pop	r6
    22a2:	5f 90       	pop	r5
    22a4:	4f 90       	pop	r4
    22a6:	3f 90       	pop	r3
    22a8:	2f 90       	pop	r2
    22aa:	08 95       	ret

000022ac <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    22ac:	40 e0       	ldi	r20, 0x00	; 0
    22ae:	e0 91 49 01 	lds	r30, 0x0149
    22b2:	f0 91 4a 01 	lds	r31, 0x014A
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 01       	movw	r18, r24
    22ba:	54 e0       	ldi	r21, 0x04	; 4
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	5a 95       	dec	r21
    22c2:	e1 f7       	brne	.-8      	; 0x22bc <Timebase_DownCounter_SS_Expired+0x10>
    22c4:	28 0f       	add	r18, r24
    22c6:	39 1f       	adc	r19, r25
    22c8:	e2 0f       	add	r30, r18
    22ca:	f3 1f       	adc	r31, r19
    22cc:	e3 5b       	subi	r30, 0xB3	; 179
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	86 95       	lsr	r24
    22d4:	8f 70       	andi	r24, 0x0F	; 15
    22d6:	84 30       	cpi	r24, 0x04	; 4
    22d8:	09 f4       	brne	.+2      	; 0x22dc <Timebase_DownCounter_SS_Expired+0x30>
    22da:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    22dc:	84 2f       	mov	r24, r20
    22de:	08 95       	ret

000022e0 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    22e0:	e0 91 49 01 	lds	r30, 0x0149
    22e4:	f0 91 4a 01 	lds	r31, 0x014A
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    22ea:	9c 01       	movw	r18, r24
    22ec:	64 e0       	ldi	r22, 0x04	; 4
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	6a 95       	dec	r22
    22f4:	e1 f7       	brne	.-8      	; 0x22ee <Timebase_DownCounter_SS_Expired_Event+0xe>
    22f6:	28 0f       	add	r18, r24
    22f8:	39 1f       	adc	r19, r25
    22fa:	e2 0f       	add	r30, r18
    22fc:	f3 1f       	adc	r31, r19
    22fe:	df 01       	movw	r26, r30
    2300:	a3 5b       	subi	r26, 0xB3	; 179
    2302:	bf 4f       	sbci	r27, 0xFF	; 255
    2304:	8c 91       	ld	r24, X
    2306:	86 95       	lsr	r24
    2308:	8f 70       	andi	r24, 0x0F	; 15
    230a:	84 30       	cpi	r24, 0x04	; 4
    230c:	11 f0       	breq	.+4      	; 0x2312 <Timebase_DownCounter_SS_Expired_Event+0x32>
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2312:	ee 5a       	subi	r30, 0xAE	; 174
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	10 82       	st	Z, r1
    2318:	11 82       	std	Z+1, r1	; 0x01
    231a:	12 82       	std	Z+2, r1	; 0x02
    231c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    231e:	12 92       	st	-Z, r1
    2320:	12 92       	st	-Z, r1
    2322:	12 92       	st	-Z, r1
    2324:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2326:	38 96       	adiw	r30, 0x08	; 8
    2328:	10 82       	st	Z, r1
    232a:	11 82       	std	Z+1, r1	; 0x01
    232c:	12 82       	std	Z+2, r1	; 0x02
    232e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2330:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2332:	80 7e       	andi	r24, 0xE0	; 224
    2334:	8c 93       	st	X, r24
    2336:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2338:	08 95       	ret

0000233a <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    233e:	c0 91 49 01 	lds	r28, 0x0149
    2342:	d0 91 4a 01 	lds	r29, 0x014A
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    234a:	f9 01       	movw	r30, r18
    234c:	a4 e0       	ldi	r26, 0x04	; 4
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	aa 95       	dec	r26
    2354:	e1 f7       	brne	.-8      	; 0x234e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2356:	e2 0f       	add	r30, r18
    2358:	f3 1f       	adc	r31, r19
    235a:	ec 0f       	add	r30, r28
    235c:	fd 1f       	adc	r31, r29
    235e:	e3 5b       	subi	r30, 0xB3	; 179
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 81       	ld	r24, Z
    2364:	ed 54       	subi	r30, 0x4D	; 77
    2366:	f0 40       	sbci	r31, 0x00	; 0
    2368:	80 fd       	sbrc	r24, 0
    236a:	24 c0       	rjmp	.+72     	; 0x23b4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    236c:	ea 5a       	subi	r30, 0xAA	; 170
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	81 91       	ld	r24, Z+
    2372:	91 91       	ld	r25, Z+
    2374:	a1 91       	ld	r26, Z+
    2376:	b1 91       	ld	r27, Z+
    2378:	84 1b       	sub	r24, r20
    237a:	95 0b       	sbc	r25, r21
    237c:	a6 0b       	sbc	r26, r22
    237e:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2380:	b7 ff       	sbrs	r27, 7
    2382:	05 c0       	rjmp	.+10     	; 0x238e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2384:	10 82       	st	Z, r1
    2386:	11 82       	std	Z+1, r1	; 0x01
    2388:	12 82       	std	Z+2, r1	; 0x02
    238a:	13 82       	std	Z+3, r1	; 0x03
    238c:	04 c0       	rjmp	.+8      	; 0x2396 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    238e:	80 83       	st	Z, r24
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	a2 83       	std	Z+2, r26	; 0x02
    2394:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    2396:	f9 01       	movw	r30, r18
    2398:	74 e0       	ldi	r23, 0x04	; 4
    239a:	ee 0f       	add	r30, r30
    239c:	ff 1f       	adc	r31, r31
    239e:	7a 95       	dec	r23
    23a0:	e1 f7       	brne	.-8      	; 0x239a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    23a2:	e2 0f       	add	r30, r18
    23a4:	f3 1f       	adc	r31, r19
    23a6:	ec 0f       	add	r30, r28
    23a8:	fd 1f       	adc	r31, r29
    23aa:	e3 5b       	subi	r30, 0xB3	; 179
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 81       	ld	r24, Z
    23b0:	81 60       	ori	r24, 0x01	; 1
    23b2:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    23b4:	df 91       	pop	r29
    23b6:	cf 91       	pop	r28
    23b8:	08 95       	ret

000023ba <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    23ba:	e0 91 49 01 	lds	r30, 0x0149
    23be:	f0 91 4a 01 	lds	r31, 0x014A
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    23c4:	9c 01       	movw	r18, r24
    23c6:	b4 e0       	ldi	r27, 0x04	; 4
    23c8:	22 0f       	add	r18, r18
    23ca:	33 1f       	adc	r19, r19
    23cc:	ba 95       	dec	r27
    23ce:	e1 f7       	brne	.-8      	; 0x23c8 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    23d0:	28 0f       	add	r18, r24
    23d2:	39 1f       	adc	r19, r25
    23d4:	e2 0f       	add	r30, r18
    23d6:	f3 1f       	adc	r31, r19
    23d8:	df 01       	movw	r26, r30
    23da:	a6 5a       	subi	r26, 0xA6	; 166
    23dc:	bf 4f       	sbci	r27, 0xFF	; 255
    23de:	ea 5a       	subi	r30, 0xAA	; 170
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	20 81       	ld	r18, Z
    23e4:	31 81       	ldd	r19, Z+1	; 0x01
    23e6:	42 81       	ldd	r20, Z+2	; 0x02
    23e8:	53 81       	ldd	r21, Z+3	; 0x03
    23ea:	8d 91       	ld	r24, X+
    23ec:	9d 91       	ld	r25, X+
    23ee:	0d 90       	ld	r0, X+
    23f0:	bc 91       	ld	r27, X
    23f2:	a0 2d       	mov	r26, r0
    23f4:	28 1b       	sub	r18, r24
    23f6:	39 0b       	sbc	r19, r25
    23f8:	4a 0b       	sbc	r20, r26
    23fa:	5b 0b       	sbc	r21, r27
    23fc:	57 ff       	sbrs	r21, 7
    23fe:	04 c0       	rjmp	.+8      	; 0x2408 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e0       	ldi	r20, 0x00	; 0
    2406:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2408:	b9 01       	movw	r22, r18
    240a:	ca 01       	movw	r24, r20
    240c:	08 95       	ret

0000240e <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2412:	c0 91 49 01 	lds	r28, 0x0149
    2416:	d0 91 4a 01 	lds	r29, 0x014A
    241a:	68 2f       	mov	r22, r24
    241c:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    241e:	fb 01       	movw	r30, r22
    2420:	44 e0       	ldi	r20, 0x04	; 4
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	4a 95       	dec	r20
    2428:	e1 f7       	brne	.-8      	; 0x2422 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    242a:	e6 0f       	add	r30, r22
    242c:	f7 1f       	adc	r31, r23
    242e:	ec 0f       	add	r30, r28
    2430:	fd 1f       	adc	r31, r29
    2432:	df 01       	movw	r26, r30
    2434:	a6 5a       	subi	r26, 0xA6	; 166
    2436:	bf 4f       	sbci	r27, 0xFF	; 255
    2438:	ea 5a       	subi	r30, 0xAA	; 170
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	20 81       	ld	r18, Z
    243e:	31 81       	ldd	r19, Z+1	; 0x01
    2440:	42 81       	ldd	r20, Z+2	; 0x02
    2442:	53 81       	ldd	r21, Z+3	; 0x03
    2444:	8d 91       	ld	r24, X+
    2446:	9d 91       	ld	r25, X+
    2448:	0d 90       	ld	r0, X+
    244a:	bc 91       	ld	r27, X
    244c:	a0 2d       	mov	r26, r0
    244e:	28 1b       	sub	r18, r24
    2450:	39 0b       	sbc	r19, r25
    2452:	4a 0b       	sbc	r20, r26
    2454:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2456:	57 fd       	sbrc	r21, 7
    2458:	07 c0       	rjmp	.+14     	; 0x2468 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    245a:	21 15       	cp	r18, r1
    245c:	31 05       	cpc	r19, r1
    245e:	41 05       	cpc	r20, r1
    2460:	51 05       	cpc	r21, r1
    2462:	11 f0       	breq	.+4      	; 0x2468 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	12 c0       	rjmp	.+36     	; 0x248c <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	cb 01       	movw	r24, r22
    246c:	34 e0       	ldi	r19, 0x04	; 4
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	3a 95       	dec	r19
    2474:	e1 f7       	brne	.-8      	; 0x246e <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2476:	86 0f       	add	r24, r22
    2478:	97 1f       	adc	r25, r23
    247a:	c8 0f       	add	r28, r24
    247c:	d9 1f       	adc	r29, r25
    247e:	c3 5b       	subi	r28, 0xB3	; 179
    2480:	df 4f       	sbci	r29, 0xFF	; 255
    2482:	88 81       	ld	r24, Y
    2484:	80 ff       	sbrs	r24, 0
    2486:	21 e0       	ldi	r18, 0x01	; 1
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    248c:	82 2f       	mov	r24, r18
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	08 95       	ret

00002494 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    2494:	1f 93       	push	r17
    2496:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2498:	0e 94 07 12 	call	0x240e	; 0x240e <Timebase_DownCounter_SS_Period_Value_Expired>
    249c:	81 30       	cpi	r24, 0x01	; 1
    249e:	11 f0       	breq	.+4      	; 0x24a4 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	16 c0       	rjmp	.+44     	; 0x24d0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24a4:	e0 91 49 01 	lds	r30, 0x0149
    24a8:	f0 91 4a 01 	lds	r31, 0x014A
    24ac:	21 2f       	mov	r18, r17
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	c9 01       	movw	r24, r18
    24b2:	54 e0       	ldi	r21, 0x04	; 4
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	5a 95       	dec	r21
    24ba:	e1 f7       	brne	.-8      	; 0x24b4 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    24bc:	82 0f       	add	r24, r18
    24be:	93 1f       	adc	r25, r19
    24c0:	e8 0f       	add	r30, r24
    24c2:	f9 1f       	adc	r31, r25
    24c4:	e3 5b       	subi	r30, 0xB3	; 179
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	8e 7f       	andi	r24, 0xFE	; 254
    24cc:	80 83       	st	Z, r24
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    24d0:	1f 91       	pop	r17
    24d2:	08 95       	ret

000024d4 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0e 94 86 10 	call	0x210c	; 0x210c <Timebase_DownCounter_SS_Update>
  }
}
    24da:	08 95       	ret

000024dc <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    24dc:	e0 91 49 01 	lds	r30, 0x0149
    24e0:	f0 91 4a 01 	lds	r31, 0x014A
    24e4:	ee 5a       	subi	r30, 0xAE	; 174
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	10 82       	st	Z, r1
    24ea:	11 82       	std	Z+1, r1	; 0x01
    24ec:	12 82       	std	Z+2, r1	; 0x02
    24ee:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    24f0:	12 92       	st	-Z, r1
    24f2:	12 92       	st	-Z, r1
    24f4:	12 92       	st	-Z, r1
    24f6:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    24f8:	38 96       	adiw	r30, 0x08	; 8
    24fa:	10 82       	st	Z, r1
    24fc:	11 82       	std	Z+1, r1	; 0x01
    24fe:	12 82       	std	Z+2, r1	; 0x02
    2500:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2502:	39 97       	sbiw	r30, 0x09	; 9
    2504:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2506:	80 7e       	andi	r24, 0xE0	; 224
    2508:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    250a:	08 95       	ret

0000250c <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    250c:	e0 91 49 01 	lds	r30, 0x0149
    2510:	f0 91 4a 01 	lds	r31, 0x014A
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	2d e0       	ldi	r18, 0x0D	; 13
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	ac 01       	movw	r20, r24
    251c:	42 9f       	mul	r20, r18
    251e:	c0 01       	movw	r24, r0
    2520:	43 9f       	mul	r20, r19
    2522:	90 0d       	add	r25, r0
    2524:	52 9f       	mul	r21, r18
    2526:	90 0d       	add	r25, r0
    2528:	11 24       	eor	r1, r1
    252a:	e8 0f       	add	r30, r24
    252c:	f9 1f       	adc	r31, r25
    252e:	e2 5a       	subi	r30, 0xA2	; 162
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	80 81       	ld	r24, Z
    2534:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2536:	8f 70       	andi	r24, 0x0F	; 15
    2538:	08 95       	ret

0000253a <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    253a:	e0 91 49 01 	lds	r30, 0x0149
    253e:	f0 91 4a 01 	lds	r31, 0x014A
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	2d e0       	ldi	r18, 0x0D	; 13
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	ac 01       	movw	r20, r24
    254a:	42 9f       	mul	r20, r18
    254c:	c0 01       	movw	r24, r0
    254e:	43 9f       	mul	r20, r19
    2550:	90 0d       	add	r25, r0
    2552:	52 9f       	mul	r21, r18
    2554:	90 0d       	add	r25, r0
    2556:	11 24       	eor	r1, r1
    2558:	e8 0f       	add	r30, r24
    255a:	f9 1f       	adc	r31, r25
    255c:	e2 5a       	subi	r30, 0xA2	; 162
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	6f 70       	andi	r22, 0x0F	; 15
    2562:	66 0f       	add	r22, r22
    2564:	80 81       	ld	r24, Z
    2566:	81 7e       	andi	r24, 0xE1	; 225
    2568:	86 2b       	or	r24, r22
    256a:	80 83       	st	Z, r24
}
    256c:	08 95       	ret

0000256e <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    256e:	e0 91 49 01 	lds	r30, 0x0149
    2572:	f0 91 4a 01 	lds	r31, 0x014A
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	2d e0       	ldi	r18, 0x0D	; 13
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	ac 01       	movw	r20, r24
    257e:	42 9f       	mul	r20, r18
    2580:	c0 01       	movw	r24, r0
    2582:	43 9f       	mul	r20, r19
    2584:	90 0d       	add	r25, r0
    2586:	52 9f       	mul	r21, r18
    2588:	90 0d       	add	r25, r0
    258a:	11 24       	eor	r1, r1
    258c:	e8 0f       	add	r30, r24
    258e:	f9 1f       	adc	r31, r25
    2590:	ed 59       	subi	r30, 0x9D	; 157
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	08 95       	ret

0000259e <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    259e:	e0 91 49 01 	lds	r30, 0x0149
    25a2:	f0 91 4a 01 	lds	r31, 0x014A
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	2d e0       	ldi	r18, 0x0D	; 13
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	dc 01       	movw	r26, r24
    25ae:	a2 9f       	mul	r26, r18
    25b0:	c0 01       	movw	r24, r0
    25b2:	a3 9f       	mul	r26, r19
    25b4:	90 0d       	add	r25, r0
    25b6:	b2 9f       	mul	r27, r18
    25b8:	90 0d       	add	r25, r0
    25ba:	11 24       	eor	r1, r1
    25bc:	e8 0f       	add	r30, r24
    25be:	f9 1f       	adc	r31, r25
    25c0:	ed 59       	subi	r30, 0x9D	; 157
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	40 83       	st	Z, r20
    25c6:	51 83       	std	Z+1, r21	; 0x01
    25c8:	62 83       	std	Z+2, r22	; 0x02
    25ca:	73 83       	std	Z+3, r23	; 0x03
}
    25cc:	08 95       	ret

000025ce <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    25ce:	e0 91 49 01 	lds	r30, 0x0149
    25d2:	f0 91 4a 01 	lds	r31, 0x014A
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2d e0       	ldi	r18, 0x0D	; 13
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	ac 01       	movw	r20, r24
    25de:	42 9f       	mul	r20, r18
    25e0:	c0 01       	movw	r24, r0
    25e2:	43 9f       	mul	r20, r19
    25e4:	90 0d       	add	r25, r0
    25e6:	52 9f       	mul	r21, r18
    25e8:	90 0d       	add	r25, r0
    25ea:	11 24       	eor	r1, r1
    25ec:	e8 0f       	add	r30, r24
    25ee:	f9 1f       	adc	r31, r25
    25f0:	e1 5a       	subi	r30, 0xA1	; 161
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	08 95       	ret

000025fe <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    25fe:	e0 91 49 01 	lds	r30, 0x0149
    2602:	f0 91 4a 01 	lds	r31, 0x014A
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	2d e0       	ldi	r18, 0x0D	; 13
    260a:	30 e0       	ldi	r19, 0x00	; 0
    260c:	dc 01       	movw	r26, r24
    260e:	a2 9f       	mul	r26, r18
    2610:	c0 01       	movw	r24, r0
    2612:	a3 9f       	mul	r26, r19
    2614:	90 0d       	add	r25, r0
    2616:	b2 9f       	mul	r27, r18
    2618:	90 0d       	add	r25, r0
    261a:	11 24       	eor	r1, r1
    261c:	e8 0f       	add	r30, r24
    261e:	f9 1f       	adc	r31, r25
    2620:	e1 5a       	subi	r30, 0xA1	; 161
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	40 83       	st	Z, r20
    2626:	51 83       	std	Z+1, r21	; 0x01
    2628:	62 83       	std	Z+2, r22	; 0x02
    262a:	73 83       	std	Z+3, r23	; 0x03
}
    262c:	08 95       	ret

0000262e <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    262e:	e0 91 49 01 	lds	r30, 0x0149
    2632:	f0 91 4a 01 	lds	r31, 0x014A
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	2d e0       	ldi	r18, 0x0D	; 13
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	ac 01       	movw	r20, r24
    263e:	42 9f       	mul	r20, r18
    2640:	c0 01       	movw	r24, r0
    2642:	43 9f       	mul	r20, r19
    2644:	90 0d       	add	r25, r0
    2646:	52 9f       	mul	r21, r18
    2648:	90 0d       	add	r25, r0
    264a:	11 24       	eor	r1, r1
    264c:	e8 0f       	add	r30, r24
    264e:	f9 1f       	adc	r31, r25
    2650:	e9 59       	subi	r30, 0x99	; 153
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	60 81       	ld	r22, Z
    2656:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2658:	82 81       	ldd	r24, Z+2	; 0x02
    265a:	93 81       	ldd	r25, Z+3	; 0x03
    265c:	08 95       	ret

0000265e <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    265e:	e0 91 49 01 	lds	r30, 0x0149
    2662:	f0 91 4a 01 	lds	r31, 0x014A
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    266a:	77 ff       	sbrs	r23, 7
    266c:	13 c0       	rjmp	.+38     	; 0x2694 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    266e:	8d e0       	ldi	r24, 0x0D	; 13
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	ac 01       	movw	r20, r24
    2674:	24 9f       	mul	r18, r20
    2676:	c0 01       	movw	r24, r0
    2678:	25 9f       	mul	r18, r21
    267a:	90 0d       	add	r25, r0
    267c:	34 9f       	mul	r19, r20
    267e:	90 0d       	add	r25, r0
    2680:	11 24       	eor	r1, r1
    2682:	e8 0f       	add	r30, r24
    2684:	f9 1f       	adc	r31, r25
    2686:	e9 59       	subi	r30, 0x99	; 153
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	10 82       	st	Z, r1
    268c:	11 82       	std	Z+1, r1	; 0x01
    268e:	12 82       	std	Z+2, r1	; 0x02
    2690:	13 82       	std	Z+3, r1	; 0x03
    2692:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2694:	8d e0       	ldi	r24, 0x0D	; 13
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	dc 01       	movw	r26, r24
    269a:	2a 9f       	mul	r18, r26
    269c:	c0 01       	movw	r24, r0
    269e:	2b 9f       	mul	r18, r27
    26a0:	90 0d       	add	r25, r0
    26a2:	3a 9f       	mul	r19, r26
    26a4:	90 0d       	add	r25, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	e8 0f       	add	r30, r24
    26aa:	f9 1f       	adc	r31, r25
    26ac:	e9 59       	subi	r30, 0x99	; 153
    26ae:	ff 4f       	sbci	r31, 0xFF	; 255
    26b0:	40 83       	st	Z, r20
    26b2:	51 83       	std	Z+1, r21	; 0x01
    26b4:	62 83       	std	Z+2, r22	; 0x02
    26b6:	73 83       	std	Z+3, r23	; 0x03
    26b8:	08 95       	ret

000026ba <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    26ba:	e0 91 49 01 	lds	r30, 0x0149
    26be:	f0 91 4a 01 	lds	r31, 0x014A
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	2d e0       	ldi	r18, 0x0D	; 13
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	ac 01       	movw	r20, r24
    26ca:	42 9f       	mul	r20, r18
    26cc:	c0 01       	movw	r24, r0
    26ce:	43 9f       	mul	r20, r19
    26d0:	90 0d       	add	r25, r0
    26d2:	52 9f       	mul	r21, r18
    26d4:	90 0d       	add	r25, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	e8 0f       	add	r30, r24
    26da:	f9 1f       	adc	r31, r25
    26dc:	e2 5a       	subi	r30, 0xA2	; 162
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    26e2:	81 70       	andi	r24, 0x01	; 1
    26e4:	08 95       	ret

000026e6 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    26e6:	e0 91 49 01 	lds	r30, 0x0149
    26ea:	f0 91 4a 01 	lds	r31, 0x014A
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	2d e0       	ldi	r18, 0x0D	; 13
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	ac 01       	movw	r20, r24
    26f6:	42 9f       	mul	r20, r18
    26f8:	c0 01       	movw	r24, r0
    26fa:	43 9f       	mul	r20, r19
    26fc:	90 0d       	add	r25, r0
    26fe:	52 9f       	mul	r21, r18
    2700:	90 0d       	add	r25, r0
    2702:	11 24       	eor	r1, r1
    2704:	e8 0f       	add	r30, r24
    2706:	f9 1f       	adc	r31, r25
    2708:	e2 5a       	subi	r30, 0xA2	; 162
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	80 81       	ld	r24, Z
    270e:	81 60       	ori	r24, 0x01	; 1
    2710:	80 83       	st	Z, r24
}
    2712:	08 95       	ret

00002714 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2714:	e0 91 49 01 	lds	r30, 0x0149
    2718:	f0 91 4a 01 	lds	r31, 0x014A
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	2d e0       	ldi	r18, 0x0D	; 13
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	ac 01       	movw	r20, r24
    2724:	42 9f       	mul	r20, r18
    2726:	c0 01       	movw	r24, r0
    2728:	43 9f       	mul	r20, r19
    272a:	90 0d       	add	r25, r0
    272c:	52 9f       	mul	r21, r18
    272e:	90 0d       	add	r25, r0
    2730:	11 24       	eor	r1, r1
    2732:	e8 0f       	add	r30, r24
    2734:	f9 1f       	adc	r31, r25
    2736:	e2 5a       	subi	r30, 0xA2	; 162
    2738:	ff 4f       	sbci	r31, 0xFF	; 255
    273a:	80 81       	ld	r24, Z
    273c:	8e 7f       	andi	r24, 0xFE	; 254
    273e:	80 83       	st	Z, r24
}
    2740:	08 95       	ret

00002742 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2742:	e0 91 49 01 	lds	r30, 0x0149
    2746:	f0 91 4a 01 	lds	r31, 0x014A
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	2d e0       	ldi	r18, 0x0D	; 13
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	ac 01       	movw	r20, r24
    2752:	42 9f       	mul	r20, r18
    2754:	c0 01       	movw	r24, r0
    2756:	43 9f       	mul	r20, r19
    2758:	90 0d       	add	r25, r0
    275a:	52 9f       	mul	r21, r18
    275c:	90 0d       	add	r25, r0
    275e:	11 24       	eor	r1, r1
    2760:	e8 0f       	add	r30, r24
    2762:	f9 1f       	adc	r31, r25
    2764:	e1 5a       	subi	r30, 0xA1	; 161
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	11 92       	st	Z+, r1
    276a:	11 92       	st	Z+, r1
    276c:	11 92       	st	Z+, r1
    276e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2770:	10 82       	st	Z, r1
    2772:	11 82       	std	Z+1, r1	; 0x01
    2774:	12 82       	std	Z+2, r1	; 0x02
    2776:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2778:	35 97       	sbiw	r30, 0x05	; 5
    277a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    277c:	80 7e       	andi	r24, 0xE0	; 224
    277e:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2780:	08 95       	ret

00002782 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2782:	e0 91 49 01 	lds	r30, 0x0149
    2786:	f0 91 4a 01 	lds	r31, 0x014A
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	2d e0       	ldi	r18, 0x0D	; 13
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	ac 01       	movw	r20, r24
    2792:	42 9f       	mul	r20, r18
    2794:	c0 01       	movw	r24, r0
    2796:	43 9f       	mul	r20, r19
    2798:	90 0d       	add	r25, r0
    279a:	52 9f       	mul	r21, r18
    279c:	90 0d       	add	r25, r0
    279e:	11 24       	eor	r1, r1
    27a0:	e8 0f       	add	r30, r24
    27a2:	f9 1f       	adc	r31, r25
    27a4:	e1 5a       	subi	r30, 0xA1	; 161
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	11 92       	st	Z+, r1
    27aa:	11 92       	st	Z+, r1
    27ac:	11 92       	st	Z+, r1
    27ae:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    27b0:	10 82       	st	Z, r1
    27b2:	11 82       	std	Z+1, r1	; 0x01
    27b4:	12 82       	std	Z+2, r1	; 0x02
    27b6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    27b8:	35 97       	sbiw	r30, 0x05	; 5
    27ba:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    27bc:	80 7e       	andi	r24, 0xE0	; 224
    27be:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    27c0:	08 95       	ret

000027c2 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    27c2:	e0 91 49 01 	lds	r30, 0x0149
    27c6:	f0 91 4a 01 	lds	r31, 0x014A
    27ca:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    27cc:	2d e0       	ldi	r18, 0x0D	; 13
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	ac 01       	movw	r20, r24
    27d2:	42 9f       	mul	r20, r18
    27d4:	c0 01       	movw	r24, r0
    27d6:	43 9f       	mul	r20, r19
    27d8:	90 0d       	add	r25, r0
    27da:	52 9f       	mul	r21, r18
    27dc:	90 0d       	add	r25, r0
    27de:	11 24       	eor	r1, r1
    27e0:	e8 0f       	add	r30, r24
    27e2:	f9 1f       	adc	r31, r25
    27e4:	e2 5a       	subi	r30, 0xA2	; 162
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	90 81       	ld	r25, Z
    27ea:	89 2f       	mov	r24, r25
    27ec:	86 95       	lsr	r24
    27ee:	8f 70       	andi	r24, 0x0F	; 15
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	19 f0       	breq	.+6      	; 0x27fa <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    27f4:	91 7e       	andi	r25, 0xE1	; 225
    27f6:	92 60       	ori	r25, 0x02	; 2
    27f8:	90 83       	st	Z, r25
    27fa:	08 95       	ret

000027fc <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    27fc:	e0 91 49 01 	lds	r30, 0x0149
    2800:	f0 91 4a 01 	lds	r31, 0x014A
    2804:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2806:	2d e0       	ldi	r18, 0x0D	; 13
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	ac 01       	movw	r20, r24
    280c:	42 9f       	mul	r20, r18
    280e:	c0 01       	movw	r24, r0
    2810:	43 9f       	mul	r20, r19
    2812:	90 0d       	add	r25, r0
    2814:	52 9f       	mul	r21, r18
    2816:	90 0d       	add	r25, r0
    2818:	11 24       	eor	r1, r1
    281a:	e8 0f       	add	r30, r24
    281c:	f9 1f       	adc	r31, r25
    281e:	e2 5a       	subi	r30, 0xA2	; 162
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	90 81       	ld	r25, Z
    2824:	89 2f       	mov	r24, r25
    2826:	86 95       	lsr	r24
    2828:	8f 70       	andi	r24, 0x0F	; 15
    282a:	82 30       	cpi	r24, 0x02	; 2
    282c:	19 f0       	breq	.+6      	; 0x2834 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    282e:	91 7e       	andi	r25, 0xE1	; 225
    2830:	94 60       	ori	r25, 0x04	; 4
    2832:	90 83       	st	Z, r25
    2834:	08 95       	ret

00002836 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    283a:	a0 91 49 01 	lds	r26, 0x0149
    283e:	b0 91 4a 01 	lds	r27, 0x014A
    2842:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2844:	2d e0       	ldi	r18, 0x0D	; 13
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	82 9f       	mul	r24, r18
    284a:	f0 01       	movw	r30, r0
    284c:	83 9f       	mul	r24, r19
    284e:	f0 0d       	add	r31, r0
    2850:	92 9f       	mul	r25, r18
    2852:	f0 0d       	add	r31, r0
    2854:	11 24       	eor	r1, r1
    2856:	ea 0f       	add	r30, r26
    2858:	fb 1f       	adc	r31, r27
    285a:	ef 01       	movw	r28, r30
    285c:	c2 5a       	subi	r28, 0xA2	; 162
    285e:	df 4f       	sbci	r29, 0xFF	; 255
    2860:	88 81       	ld	r24, Y
    2862:	86 95       	lsr	r24
    2864:	8f 70       	andi	r24, 0x0F	; 15
    2866:	e9 f4       	brne	.+58     	; 0x28a2 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2868:	ed 59       	subi	r30, 0x9D	; 157
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	40 83       	st	Z, r20
    286e:	51 83       	std	Z+1, r21	; 0x01
    2870:	62 83       	std	Z+2, r22	; 0x02
    2872:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2874:	1a 96       	adiw	r26, 0x0a	; 10
    2876:	8d 91       	ld	r24, X+
    2878:	9d 91       	ld	r25, X+
    287a:	0d 90       	ld	r0, X+
    287c:	bc 91       	ld	r27, X
    287e:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2880:	84 0f       	add	r24, r20
    2882:	95 1f       	adc	r25, r21
    2884:	a6 1f       	adc	r26, r22
    2886:	b7 1f       	adc	r27, r23
    2888:	b2 93       	st	-Z, r27
    288a:	a2 93       	st	-Z, r26
    288c:	92 93       	st	-Z, r25
    288e:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2890:	98 81       	ld	r25, Y
    2892:	89 2f       	mov	r24, r25
    2894:	86 95       	lsr	r24
    2896:	8f 70       	andi	r24, 0x0F	; 15
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	19 f0       	breq	.+6      	; 0x28a2 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    289c:	91 7e       	andi	r25, 0xE1	; 225
    289e:	92 60       	ori	r25, 0x02	; 2
    28a0:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	08 95       	ret

000028a8 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    28ac:	e0 91 49 01 	lds	r30, 0x0149
    28b0:	f0 91 4a 01 	lds	r31, 0x014A
    28b4:	a8 2f       	mov	r26, r24
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	2d e0       	ldi	r18, 0x0D	; 13
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	e9 01       	movw	r28, r18
    28be:	ac 9f       	mul	r26, r28
    28c0:	90 01       	movw	r18, r0
    28c2:	ad 9f       	mul	r26, r29
    28c4:	30 0d       	add	r19, r0
    28c6:	bc 9f       	mul	r27, r28
    28c8:	30 0d       	add	r19, r0
    28ca:	11 24       	eor	r1, r1
    28cc:	e2 0f       	add	r30, r18
    28ce:	f3 1f       	adc	r31, r19
    28d0:	e1 5a       	subi	r30, 0xA1	; 161
    28d2:	ff 4f       	sbci	r31, 0xFF	; 255
    28d4:	11 92       	st	Z+, r1
    28d6:	11 92       	st	Z+, r1
    28d8:	11 92       	st	Z+, r1
    28da:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28dc:	10 82       	st	Z, r1
    28de:	11 82       	std	Z+1, r1	; 0x01
    28e0:	12 82       	std	Z+2, r1	; 0x02
    28e2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    28e4:	35 97       	sbiw	r30, 0x05	; 5
    28e6:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28e8:	90 7e       	andi	r25, 0xE0	; 224
    28ea:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    28ec:	0e 94 1b 14 	call	0x2836	; 0x2836 <Timebase_DownCounter_Set_Securely>
} 
    28f0:	df 91       	pop	r29
    28f2:	cf 91       	pop	r28
    28f4:	08 95       	ret

000028f6 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    28fe:	a0 91 49 01 	lds	r26, 0x0149
    2902:	b0 91 4a 01 	lds	r27, 0x014A
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	2d e0       	ldi	r18, 0x0D	; 13
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	82 9f       	mul	r24, r18
    290e:	f0 01       	movw	r30, r0
    2910:	83 9f       	mul	r24, r19
    2912:	f0 0d       	add	r31, r0
    2914:	92 9f       	mul	r25, r18
    2916:	f0 0d       	add	r31, r0
    2918:	11 24       	eor	r1, r1
    291a:	ea 0f       	add	r30, r26
    291c:	fb 1f       	adc	r31, r27
    291e:	8f 01       	movw	r16, r30
    2920:	02 5a       	subi	r16, 0xA2	; 162
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	e8 01       	movw	r28, r16
    2926:	88 81       	ld	r24, Y
    2928:	86 95       	lsr	r24
    292a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    292c:	81 30       	cpi	r24, 0x01	; 1
    292e:	69 f5       	brne	.+90     	; 0x298a <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2930:	1a 96       	adiw	r26, 0x0a	; 10
    2932:	2d 91       	ld	r18, X+
    2934:	3d 91       	ld	r19, X+
    2936:	4d 91       	ld	r20, X+
    2938:	5c 91       	ld	r21, X
    293a:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    293c:	bf 01       	movw	r22, r30
    293e:	61 5a       	subi	r22, 0xA1	; 161
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	eb 01       	movw	r28, r22
    2944:	88 81       	ld	r24, Y
    2946:	99 81       	ldd	r25, Y+1	; 0x01
    2948:	aa 81       	ldd	r26, Y+2	; 0x02
    294a:	bb 81       	ldd	r27, Y+3	; 0x03
    294c:	82 1b       	sub	r24, r18
    294e:	93 0b       	sbc	r25, r19
    2950:	a4 0b       	sbc	r26, r20
    2952:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2954:	ed 59       	subi	r30, 0x9D	; 157
    2956:	ff 4f       	sbci	r31, 0xFF	; 255
    2958:	80 83       	st	Z, r24
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	a2 83       	std	Z+2, r26	; 0x02
    295e:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2960:	18 16       	cp	r1, r24
    2962:	19 06       	cpc	r1, r25
    2964:	1a 06       	cpc	r1, r26
    2966:	1b 06       	cpc	r1, r27
    2968:	34 f1       	brlt	.+76     	; 0x29b6 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    296a:	db 01       	movw	r26, r22
    296c:	1d 92       	st	X+, r1
    296e:	1d 92       	st	X+, r1
    2970:	1d 92       	st	X+, r1
    2972:	1c 92       	st	X, r1
    2974:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2976:	10 82       	st	Z, r1
    2978:	11 82       	std	Z+1, r1	; 0x01
    297a:	12 82       	std	Z+2, r1	; 0x02
    297c:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    297e:	e8 01       	movw	r28, r16
    2980:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2982:	80 7e       	andi	r24, 0xE0	; 224
    2984:	88 60       	ori	r24, 0x08	; 8
    2986:	88 83       	st	Y, r24
    2988:	16 c0       	rjmp	.+44     	; 0x29b6 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	a1 f4       	brne	.+40     	; 0x29b6 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    298e:	1a 96       	adiw	r26, 0x0a	; 10
    2990:	8d 91       	ld	r24, X+
    2992:	9d 91       	ld	r25, X+
    2994:	0d 90       	ld	r0, X+
    2996:	bc 91       	ld	r27, X
    2998:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    299a:	ed 59       	subi	r30, 0x9D	; 157
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	20 81       	ld	r18, Z
    29a0:	31 81       	ldd	r19, Z+1	; 0x01
    29a2:	42 81       	ldd	r20, Z+2	; 0x02
    29a4:	53 81       	ldd	r21, Z+3	; 0x03
    29a6:	82 0f       	add	r24, r18
    29a8:	93 1f       	adc	r25, r19
    29aa:	a4 1f       	adc	r26, r20
    29ac:	b5 1f       	adc	r27, r21
    29ae:	b2 93       	st	-Z, r27
    29b0:	a2 93       	st	-Z, r26
    29b2:	92 93       	st	-Z, r25
    29b4:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	08 95       	ret

000029c0 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	e0 91 49 01 	lds	r30, 0x0149
    29c6:	f0 91 4a 01 	lds	r31, 0x014A
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	2d e0       	ldi	r18, 0x0D	; 13
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	bc 01       	movw	r22, r24
    29d2:	62 9f       	mul	r22, r18
    29d4:	c0 01       	movw	r24, r0
    29d6:	63 9f       	mul	r22, r19
    29d8:	90 0d       	add	r25, r0
    29da:	72 9f       	mul	r23, r18
    29dc:	90 0d       	add	r25, r0
    29de:	11 24       	eor	r1, r1
    29e0:	e8 0f       	add	r30, r24
    29e2:	f9 1f       	adc	r31, r25
    29e4:	e2 5a       	subi	r30, 0xA2	; 162
    29e6:	ff 4f       	sbci	r31, 0xFF	; 255
    29e8:	80 81       	ld	r24, Z
    29ea:	86 95       	lsr	r24
    29ec:	8f 70       	andi	r24, 0x0F	; 15
    29ee:	84 30       	cpi	r24, 0x04	; 4
    29f0:	09 f4       	brne	.+2      	; 0x29f4 <Timebase_DownCounter_Expired+0x34>
    29f2:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    29f4:	84 2f       	mov	r24, r20
    29f6:	08 95       	ret

000029f8 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    29f8:	e0 91 49 01 	lds	r30, 0x0149
    29fc:	f0 91 4a 01 	lds	r31, 0x014A
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2a02:	2d e0       	ldi	r18, 0x0D	; 13
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	ac 01       	movw	r20, r24
    2a08:	42 9f       	mul	r20, r18
    2a0a:	c0 01       	movw	r24, r0
    2a0c:	43 9f       	mul	r20, r19
    2a0e:	90 0d       	add	r25, r0
    2a10:	52 9f       	mul	r21, r18
    2a12:	90 0d       	add	r25, r0
    2a14:	11 24       	eor	r1, r1
    2a16:	e8 0f       	add	r30, r24
    2a18:	f9 1f       	adc	r31, r25
    2a1a:	df 01       	movw	r26, r30
    2a1c:	a2 5a       	subi	r26, 0xA2	; 162
    2a1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a20:	8c 91       	ld	r24, X
    2a22:	86 95       	lsr	r24
    2a24:	8f 70       	andi	r24, 0x0F	; 15
    2a26:	84 30       	cpi	r24, 0x04	; 4
    2a28:	11 f0       	breq	.+4      	; 0x2a2e <Timebase_DownCounter_Expired_Event+0x36>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a2e:	e1 5a       	subi	r30, 0xA1	; 161
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	11 92       	st	Z+, r1
    2a34:	11 92       	st	Z+, r1
    2a36:	11 92       	st	Z+, r1
    2a38:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a3a:	10 82       	st	Z, r1
    2a3c:	11 82       	std	Z+1, r1	; 0x01
    2a3e:	12 82       	std	Z+2, r1	; 0x02
    2a40:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2a42:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a44:	80 7e       	andi	r24, 0xE0	; 224
    2a46:	8c 93       	st	X, r24
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2a4a:	08 95       	ret

00002a4c <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2a4c:	cf 93       	push	r28
    2a4e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2a50:	c0 91 49 01 	lds	r28, 0x0149
    2a54:	d0 91 4a 01 	lds	r29, 0x014A
    2a58:	28 2f       	mov	r18, r24
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2a5c:	8d e0       	ldi	r24, 0x0D	; 13
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	28 9f       	mul	r18, r24
    2a62:	f0 01       	movw	r30, r0
    2a64:	29 9f       	mul	r18, r25
    2a66:	f0 0d       	add	r31, r0
    2a68:	38 9f       	mul	r19, r24
    2a6a:	f0 0d       	add	r31, r0
    2a6c:	11 24       	eor	r1, r1
    2a6e:	ec 0f       	add	r30, r28
    2a70:	fd 1f       	adc	r31, r29
    2a72:	e2 5a       	subi	r30, 0xA2	; 162
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	ee 55       	subi	r30, 0x5E	; 94
    2a7a:	f0 40       	sbci	r31, 0x00	; 0
    2a7c:	80 fd       	sbrc	r24, 0
    2a7e:	25 c0       	rjmp	.+74     	; 0x2aca <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2a80:	ed 59       	subi	r30, 0x9D	; 157
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	81 91       	ld	r24, Z+
    2a86:	91 91       	ld	r25, Z+
    2a88:	a1 91       	ld	r26, Z+
    2a8a:	b1 91       	ld	r27, Z+
    2a8c:	84 1b       	sub	r24, r20
    2a8e:	95 0b       	sbc	r25, r21
    2a90:	a6 0b       	sbc	r26, r22
    2a92:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2a94:	b7 ff       	sbrs	r27, 7
    2a96:	05 c0       	rjmp	.+10     	; 0x2aa2 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2a98:	10 82       	st	Z, r1
    2a9a:	11 82       	std	Z+1, r1	; 0x01
    2a9c:	12 82       	std	Z+2, r1	; 0x02
    2a9e:	13 82       	std	Z+3, r1	; 0x03
    2aa0:	04 c0       	rjmp	.+8      	; 0x2aaa <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2aa2:	80 83       	st	Z, r24
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	a2 83       	std	Z+2, r26	; 0x02
    2aa8:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2aaa:	8d e0       	ldi	r24, 0x0D	; 13
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	28 9f       	mul	r18, r24
    2ab0:	f0 01       	movw	r30, r0
    2ab2:	29 9f       	mul	r18, r25
    2ab4:	f0 0d       	add	r31, r0
    2ab6:	38 9f       	mul	r19, r24
    2ab8:	f0 0d       	add	r31, r0
    2aba:	11 24       	eor	r1, r1
    2abc:	ec 0f       	add	r30, r28
    2abe:	fd 1f       	adc	r31, r29
    2ac0:	e2 5a       	subi	r30, 0xA2	; 162
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	80 81       	ld	r24, Z
    2ac6:	81 60       	ori	r24, 0x01	; 1
    2ac8:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2ad0:	e0 91 49 01 	lds	r30, 0x0149
    2ad4:	f0 91 4a 01 	lds	r31, 0x014A
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2ada:	2d e0       	ldi	r18, 0x0D	; 13
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	ac 01       	movw	r20, r24
    2ae0:	42 9f       	mul	r20, r18
    2ae2:	c0 01       	movw	r24, r0
    2ae4:	43 9f       	mul	r20, r19
    2ae6:	90 0d       	add	r25, r0
    2ae8:	52 9f       	mul	r21, r18
    2aea:	90 0d       	add	r25, r0
    2aec:	11 24       	eor	r1, r1
    2aee:	e8 0f       	add	r30, r24
    2af0:	f9 1f       	adc	r31, r25
    2af2:	df 01       	movw	r26, r30
    2af4:	a9 59       	subi	r26, 0x99	; 153
    2af6:	bf 4f       	sbci	r27, 0xFF	; 255
    2af8:	ed 59       	subi	r30, 0x9D	; 157
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	20 81       	ld	r18, Z
    2afe:	31 81       	ldd	r19, Z+1	; 0x01
    2b00:	42 81       	ldd	r20, Z+2	; 0x02
    2b02:	53 81       	ldd	r21, Z+3	; 0x03
    2b04:	8d 91       	ld	r24, X+
    2b06:	9d 91       	ld	r25, X+
    2b08:	0d 90       	ld	r0, X+
    2b0a:	bc 91       	ld	r27, X
    2b0c:	a0 2d       	mov	r26, r0
    2b0e:	28 1b       	sub	r18, r24
    2b10:	39 0b       	sbc	r19, r25
    2b12:	4a 0b       	sbc	r20, r26
    2b14:	5b 0b       	sbc	r21, r27
    2b16:	57 ff       	sbrs	r21, 7
    2b18:	04 c0       	rjmp	.+8      	; 0x2b22 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2b22:	b9 01       	movw	r22, r18
    2b24:	ca 01       	movw	r24, r20
    2b26:	08 95       	ret

00002b28 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2b2c:	c0 91 49 01 	lds	r28, 0x0149
    2b30:	d0 91 4a 01 	lds	r29, 0x014A
    2b34:	68 2f       	mov	r22, r24
    2b36:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2b38:	8d e0       	ldi	r24, 0x0D	; 13
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	68 9f       	mul	r22, r24
    2b3e:	f0 01       	movw	r30, r0
    2b40:	69 9f       	mul	r22, r25
    2b42:	f0 0d       	add	r31, r0
    2b44:	78 9f       	mul	r23, r24
    2b46:	f0 0d       	add	r31, r0
    2b48:	11 24       	eor	r1, r1
    2b4a:	ec 0f       	add	r30, r28
    2b4c:	fd 1f       	adc	r31, r29
    2b4e:	df 01       	movw	r26, r30
    2b50:	a9 59       	subi	r26, 0x99	; 153
    2b52:	bf 4f       	sbci	r27, 0xFF	; 255
    2b54:	ed 59       	subi	r30, 0x9D	; 157
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	20 81       	ld	r18, Z
    2b5a:	31 81       	ldd	r19, Z+1	; 0x01
    2b5c:	42 81       	ldd	r20, Z+2	; 0x02
    2b5e:	53 81       	ldd	r21, Z+3	; 0x03
    2b60:	8d 91       	ld	r24, X+
    2b62:	9d 91       	ld	r25, X+
    2b64:	0d 90       	ld	r0, X+
    2b66:	bc 91       	ld	r27, X
    2b68:	a0 2d       	mov	r26, r0
    2b6a:	28 1b       	sub	r18, r24
    2b6c:	39 0b       	sbc	r19, r25
    2b6e:	4a 0b       	sbc	r20, r26
    2b70:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2b72:	57 fd       	sbrc	r21, 7
    2b74:	07 c0       	rjmp	.+14     	; 0x2b84 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2b76:	21 15       	cp	r18, r1
    2b78:	31 05       	cpc	r19, r1
    2b7a:	41 05       	cpc	r20, r1
    2b7c:	51 05       	cpc	r21, r1
    2b7e:	11 f0       	breq	.+4      	; 0x2b84 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	14 c0       	rjmp	.+40     	; 0x2bac <Timebase_DownCounter_Period_Value_Expired+0x84>
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	8d e0       	ldi	r24, 0x0D	; 13
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	ac 01       	movw	r20, r24
    2b8c:	64 9f       	mul	r22, r20
    2b8e:	c0 01       	movw	r24, r0
    2b90:	65 9f       	mul	r22, r21
    2b92:	90 0d       	add	r25, r0
    2b94:	74 9f       	mul	r23, r20
    2b96:	90 0d       	add	r25, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	c8 0f       	add	r28, r24
    2b9c:	d9 1f       	adc	r29, r25
    2b9e:	c2 5a       	subi	r28, 0xA2	; 162
    2ba0:	df 4f       	sbci	r29, 0xFF	; 255
    2ba2:	88 81       	ld	r24, Y
    2ba4:	80 ff       	sbrs	r24, 0
    2ba6:	21 e0       	ldi	r18, 0x01	; 1
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2bac:	82 2f       	mov	r24, r18
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	08 95       	ret

00002bb4 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2bb4:	1f 93       	push	r17
    2bb6:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2bb8:	0e 94 94 15 	call	0x2b28	; 0x2b28 <Timebase_DownCounter_Period_Value_Expired>
    2bbc:	81 30       	cpi	r24, 0x01	; 1
    2bbe:	11 f0       	breq	.+4      	; 0x2bc4 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	18 c0       	rjmp	.+48     	; 0x2bf4 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2bc4:	e0 91 49 01 	lds	r30, 0x0149
    2bc8:	f0 91 4a 01 	lds	r31, 0x014A
    2bcc:	21 2f       	mov	r18, r17
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	8d e0       	ldi	r24, 0x0D	; 13
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	ac 01       	movw	r20, r24
    2bd6:	24 9f       	mul	r18, r20
    2bd8:	c0 01       	movw	r24, r0
    2bda:	25 9f       	mul	r18, r21
    2bdc:	90 0d       	add	r25, r0
    2bde:	34 9f       	mul	r19, r20
    2be0:	90 0d       	add	r25, r0
    2be2:	11 24       	eor	r1, r1
    2be4:	e8 0f       	add	r30, r24
    2be6:	f9 1f       	adc	r31, r25
    2be8:	e2 5a       	subi	r30, 0xA2	; 162
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	8e 7f       	andi	r24, 0xFE	; 254
    2bf0:	80 83       	st	Z, r24
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2bf4:	1f 91       	pop	r17
    2bf6:	08 95       	ret

00002bf8 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <Timebase_DownCounter_Update>
  }
}
    2bfe:	08 95       	ret

00002c00 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2c00:	e0 91 49 01 	lds	r30, 0x0149
    2c04:	f0 91 4a 01 	lds	r31, 0x014A
    2c08:	e1 5a       	subi	r30, 0xA1	; 161
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	11 92       	st	Z+, r1
    2c0e:	11 92       	st	Z+, r1
    2c10:	11 92       	st	Z+, r1
    2c12:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c14:	10 82       	st	Z, r1
    2c16:	11 82       	std	Z+1, r1	; 0x01
    2c18:	12 82       	std	Z+2, r1	; 0x02
    2c1a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c1c:	35 97       	sbiw	r30, 0x05	; 5
    2c1e:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2c20:	80 7e       	andi	r24, 0xE0	; 224
    2c22:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2c24:	08 95       	ret

00002c26 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2c26:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    2c2a:	0e 94 6e 12 	call	0x24dc	; 0x24dc <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2c2e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2c32:	08 95       	ret

00002c34 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2c34:	0f 93       	push	r16
    2c36:	1f 93       	push	r17
    2c38:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2c3a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2c3e:	c8 01       	movw	r24, r16
    2c40:	0e 94 e5 03 	call	0x7ca	; 0x7ca <Timebase_Timer_Config>
  Timebase_Reset();
    2c44:	0e 94 13 16 	call	0x2c26	; 0x2c26 <Timebase_Reset>
}
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	08 95       	ret

00002c4e <Timebase_Main_Loop_Executables>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2c4e:	f8 94       	cli

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    2c50:	e0 91 49 01 	lds	r30, 0x0149
    2c54:	f0 91 4a 01 	lds	r31, 0x014A
    2c58:	86 85       	ldd	r24, Z+14	; 0x0e
    2c5a:	97 85       	ldd	r25, Z+15	; 0x0f
    2c5c:	91 87       	std	Z+9, r25	; 0x09
    2c5e:	80 87       	std	Z+8, r24	; 0x08
  Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    2c60:	80 89       	ldd	r24, Z+16	; 0x10
    2c62:	91 89       	ldd	r25, Z+17	; 0x11
    2c64:	a2 89       	ldd	r26, Z+18	; 0x12
    2c66:	b3 89       	ldd	r27, Z+19	; 0x13
    2c68:	82 87       	std	Z+10, r24	; 0x0a
    2c6a:	93 87       	std	Z+11, r25	; 0x0b
    2c6c:	a4 87       	std	Z+12, r26	; 0x0c
    2c6e:	b5 87       	std	Z+13, r27	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2c70:	78 94       	sei
  Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
  #endif
  
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2c72:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c74:	82 ff       	sbrs	r24, 2
    2c76:	03 c0       	rjmp	.+6      	; 0x2c7e <Timebase_Main_Loop_Executables+0x30>
    //add upcounter ss function
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2c78:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c7a:	8b 7f       	andi	r24, 0xFB	; 251
    2c7c:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2c7e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c80:	80 ff       	sbrs	r24, 0
    2c82:	09 c0       	rjmp	.+18     	; 0x2c96 <Timebase_Main_Loop_Executables+0x48>
    Timebase_UpCounter_Update_All();
    2c84:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2c88:	e0 91 49 01 	lds	r30, 0x0149
    2c8c:	f0 91 4a 01 	lds	r31, 0x014A
    2c90:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c92:	8e 7f       	andi	r24, 0xFE	; 254
    2c94:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2c96:	e0 91 49 01 	lds	r30, 0x0149
    2c9a:	f0 91 4a 01 	lds	r31, 0x014A
    2c9e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2ca0:	83 ff       	sbrs	r24, 3
    2ca2:	09 c0       	rjmp	.+18     	; 0x2cb6 <Timebase_Main_Loop_Executables+0x68>
    Timebase_DownCounter_SS_Update_All();
    2ca4:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2ca8:	e0 91 49 01 	lds	r30, 0x0149
    2cac:	f0 91 4a 01 	lds	r31, 0x014A
    2cb0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cb2:	87 7f       	andi	r24, 0xF7	; 247
    2cb4:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2cb6:	e0 91 49 01 	lds	r30, 0x0149
    2cba:	f0 91 4a 01 	lds	r31, 0x014A
    2cbe:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cc0:	81 ff       	sbrs	r24, 1
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <Timebase_Main_Loop_Executables+0x88>
    Timebase_DownCounter_Update_All();
    2cc4:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2cc8:	e0 91 49 01 	lds	r30, 0x0149
    2ccc:	f0 91 4a 01 	lds	r31, 0x014A
    2cd0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cd2:	8d 7f       	andi	r24, 0xFD	; 253
    2cd4:	85 8f       	std	Z+29, r24	; 0x1d
    2cd6:	08 95       	ret

00002cd8 <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    2cd8:	e0 91 49 01 	lds	r30, 0x0149
    2cdc:	f0 91 4a 01 	lds	r31, 0x014A
    2ce0:	86 85       	ldd	r24, Z+14	; 0x0e
    2ce2:	97 85       	ldd	r25, Z+15	; 0x0f
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	97 87       	std	Z+15, r25	; 0x0f
    2ce8:	86 87       	std	Z+14, r24	; 0x0e
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2cea:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cec:	84 60       	ori	r24, 0x04	; 4
    2cee:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2cf0:	85 8d       	ldd	r24, Z+29	; 0x1d
    2cf2:	88 60       	ori	r24, 0x08	; 8
    2cf4:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if((Timebase->Time.SubSecondsShadow % Timebase->Config.UpdateRate) == 0){
    2cf6:	86 85       	ldd	r24, Z+14	; 0x0e
    2cf8:	97 85       	ldd	r25, Z+15	; 0x0f
    2cfa:	61 81       	ldd	r22, Z+1	; 0x01
    2cfc:	72 81       	ldd	r23, Z+2	; 0x02
    2cfe:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__udivmodhi4>
    2d02:	89 2b       	or	r24, r25
    2d04:	99 f4       	brne	.+38     	; 0x2d2c <Timebase_ISR_Executables+0x54>
    Timebase->Time.SecondsShadow++;
    2d06:	80 89       	ldd	r24, Z+16	; 0x10
    2d08:	91 89       	ldd	r25, Z+17	; 0x11
    2d0a:	a2 89       	ldd	r26, Z+18	; 0x12
    2d0c:	b3 89       	ldd	r27, Z+19	; 0x13
    2d0e:	01 96       	adiw	r24, 0x01	; 1
    2d10:	a1 1d       	adc	r26, r1
    2d12:	b1 1d       	adc	r27, r1
    2d14:	80 8b       	std	Z+16, r24	; 0x10
    2d16:	91 8b       	std	Z+17, r25	; 0x11
    2d18:	a2 8b       	std	Z+18, r26	; 0x12
    2d1a:	b3 8b       	std	Z+19, r27	; 0x13
    Timebase->Time.SubSecondsShadow = 0;
    2d1c:	17 86       	std	Z+15, r1	; 0x0f
    2d1e:	16 86       	std	Z+14, r1	; 0x0e
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2d20:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d22:	81 60       	ori	r24, 0x01	; 1
    2d24:	85 8f       	std	Z+29, r24	; 0x1d
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2d26:	85 8d       	ldd	r24, Z+29	; 0x1d
    2d28:	82 60       	ori	r24, 0x02	; 2
    2d2a:	85 8f       	std	Z+29, r24	; 0x1d
    2d2c:	08 95       	ret

00002d2e <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2d2e:	1f 92       	push	r1
    2d30:	0f 92       	push	r0
    2d32:	0f b6       	in	r0, 0x3f	; 63
    2d34:	0f 92       	push	r0
    2d36:	11 24       	eor	r1, r1
    2d38:	2f 93       	push	r18
    2d3a:	3f 93       	push	r19
    2d3c:	4f 93       	push	r20
    2d3e:	5f 93       	push	r21
    2d40:	6f 93       	push	r22
    2d42:	7f 93       	push	r23
    2d44:	8f 93       	push	r24
    2d46:	9f 93       	push	r25
    2d48:	af 93       	push	r26
    2d4a:	bf 93       	push	r27
    2d4c:	ef 93       	push	r30
    2d4e:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2d50:	e0 91 49 01 	lds	r30, 0x0149
    2d54:	f0 91 4a 01 	lds	r31, 0x014A
    2d58:	83 81       	ldd	r24, Z+3	; 0x03
    2d5a:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2d5c:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <Timebase_ISR_Executables>
}
    2d60:	ff 91       	pop	r31
    2d62:	ef 91       	pop	r30
    2d64:	bf 91       	pop	r27
    2d66:	af 91       	pop	r26
    2d68:	9f 91       	pop	r25
    2d6a:	8f 91       	pop	r24
    2d6c:	7f 91       	pop	r23
    2d6e:	6f 91       	pop	r22
    2d70:	5f 91       	pop	r21
    2d72:	4f 91       	pop	r20
    2d74:	3f 91       	pop	r19
    2d76:	2f 91       	pop	r18
    2d78:	0f 90       	pop	r0
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	0f 90       	pop	r0
    2d7e:	1f 90       	pop	r1
    2d80:	18 95       	reti

00002d82 <__mulsi3>:
    2d82:	62 9f       	mul	r22, r18
    2d84:	d0 01       	movw	r26, r0
    2d86:	73 9f       	mul	r23, r19
    2d88:	f0 01       	movw	r30, r0
    2d8a:	82 9f       	mul	r24, r18
    2d8c:	e0 0d       	add	r30, r0
    2d8e:	f1 1d       	adc	r31, r1
    2d90:	64 9f       	mul	r22, r20
    2d92:	e0 0d       	add	r30, r0
    2d94:	f1 1d       	adc	r31, r1
    2d96:	92 9f       	mul	r25, r18
    2d98:	f0 0d       	add	r31, r0
    2d9a:	83 9f       	mul	r24, r19
    2d9c:	f0 0d       	add	r31, r0
    2d9e:	74 9f       	mul	r23, r20
    2da0:	f0 0d       	add	r31, r0
    2da2:	65 9f       	mul	r22, r21
    2da4:	f0 0d       	add	r31, r0
    2da6:	99 27       	eor	r25, r25
    2da8:	72 9f       	mul	r23, r18
    2daa:	b0 0d       	add	r27, r0
    2dac:	e1 1d       	adc	r30, r1
    2dae:	f9 1f       	adc	r31, r25
    2db0:	63 9f       	mul	r22, r19
    2db2:	b0 0d       	add	r27, r0
    2db4:	e1 1d       	adc	r30, r1
    2db6:	f9 1f       	adc	r31, r25
    2db8:	bd 01       	movw	r22, r26
    2dba:	cf 01       	movw	r24, r30
    2dbc:	11 24       	eor	r1, r1
    2dbe:	08 95       	ret

00002dc0 <__udivmodhi4>:
    2dc0:	aa 1b       	sub	r26, r26
    2dc2:	bb 1b       	sub	r27, r27
    2dc4:	51 e1       	ldi	r21, 0x11	; 17
    2dc6:	07 c0       	rjmp	.+14     	; 0x2dd6 <__udivmodhi4_ep>

00002dc8 <__udivmodhi4_loop>:
    2dc8:	aa 1f       	adc	r26, r26
    2dca:	bb 1f       	adc	r27, r27
    2dcc:	a6 17       	cp	r26, r22
    2dce:	b7 07       	cpc	r27, r23
    2dd0:	10 f0       	brcs	.+4      	; 0x2dd6 <__udivmodhi4_ep>
    2dd2:	a6 1b       	sub	r26, r22
    2dd4:	b7 0b       	sbc	r27, r23

00002dd6 <__udivmodhi4_ep>:
    2dd6:	88 1f       	adc	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	5a 95       	dec	r21
    2ddc:	a9 f7       	brne	.-22     	; 0x2dc8 <__udivmodhi4_loop>
    2dde:	80 95       	com	r24
    2de0:	90 95       	com	r25
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	08 95       	ret

00002de8 <__udivmodsi4>:
    2de8:	a1 e2       	ldi	r26, 0x21	; 33
    2dea:	1a 2e       	mov	r1, r26
    2dec:	aa 1b       	sub	r26, r26
    2dee:	bb 1b       	sub	r27, r27
    2df0:	fd 01       	movw	r30, r26
    2df2:	0d c0       	rjmp	.+26     	; 0x2e0e <__udivmodsi4_ep>

00002df4 <__udivmodsi4_loop>:
    2df4:	aa 1f       	adc	r26, r26
    2df6:	bb 1f       	adc	r27, r27
    2df8:	ee 1f       	adc	r30, r30
    2dfa:	ff 1f       	adc	r31, r31
    2dfc:	a2 17       	cp	r26, r18
    2dfe:	b3 07       	cpc	r27, r19
    2e00:	e4 07       	cpc	r30, r20
    2e02:	f5 07       	cpc	r31, r21
    2e04:	20 f0       	brcs	.+8      	; 0x2e0e <__udivmodsi4_ep>
    2e06:	a2 1b       	sub	r26, r18
    2e08:	b3 0b       	sbc	r27, r19
    2e0a:	e4 0b       	sbc	r30, r20
    2e0c:	f5 0b       	sbc	r31, r21

00002e0e <__udivmodsi4_ep>:
    2e0e:	66 1f       	adc	r22, r22
    2e10:	77 1f       	adc	r23, r23
    2e12:	88 1f       	adc	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	1a 94       	dec	r1
    2e18:	69 f7       	brne	.-38     	; 0x2df4 <__udivmodsi4_loop>
    2e1a:	60 95       	com	r22
    2e1c:	70 95       	com	r23
    2e1e:	80 95       	com	r24
    2e20:	90 95       	com	r25
    2e22:	9b 01       	movw	r18, r22
    2e24:	ac 01       	movw	r20, r24
    2e26:	bd 01       	movw	r22, r26
    2e28:	cf 01       	movw	r24, r30
    2e2a:	08 95       	ret

00002e2c <__divmodsi4>:
    2e2c:	97 fb       	bst	r25, 7
    2e2e:	09 2e       	mov	r0, r25
    2e30:	05 26       	eor	r0, r21
    2e32:	0e d0       	rcall	.+28     	; 0x2e50 <__divmodsi4_neg1>
    2e34:	57 fd       	sbrc	r21, 7
    2e36:	04 d0       	rcall	.+8      	; 0x2e40 <__divmodsi4_neg2>
    2e38:	d7 df       	rcall	.-82     	; 0x2de8 <__udivmodsi4>
    2e3a:	0a d0       	rcall	.+20     	; 0x2e50 <__divmodsi4_neg1>
    2e3c:	00 1c       	adc	r0, r0
    2e3e:	38 f4       	brcc	.+14     	; 0x2e4e <__divmodsi4_exit>

00002e40 <__divmodsi4_neg2>:
    2e40:	50 95       	com	r21
    2e42:	40 95       	com	r20
    2e44:	30 95       	com	r19
    2e46:	21 95       	neg	r18
    2e48:	3f 4f       	sbci	r19, 0xFF	; 255
    2e4a:	4f 4f       	sbci	r20, 0xFF	; 255
    2e4c:	5f 4f       	sbci	r21, 0xFF	; 255

00002e4e <__divmodsi4_exit>:
    2e4e:	08 95       	ret

00002e50 <__divmodsi4_neg1>:
    2e50:	f6 f7       	brtc	.-4      	; 0x2e4e <__divmodsi4_exit>
    2e52:	90 95       	com	r25
    2e54:	80 95       	com	r24
    2e56:	70 95       	com	r23
    2e58:	61 95       	neg	r22
    2e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e60:	08 95       	ret

00002e62 <_exit>:
    2e62:	f8 94       	cli

00002e64 <__stop_program>:
    2e64:	ff cf       	rjmp	.-2      	; 0x2e64 <__stop_program>
