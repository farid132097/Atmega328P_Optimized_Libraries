
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000145c  000014f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000145c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800110  00800110  00001500  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000b37  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002140  00000000  00000000  00002097  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000557  00000000  00000000  000041d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001349  00000000  00000000  0000472e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000560  00000000  00000000  00005a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d91  00000000  00000000  00005fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cf6  00000000  00000000  00006d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00007a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 e0 07 	jmp	0xfc0	; 0xfc0 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e5       	ldi	r30, 0x5C	; 92
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 34       	cpi	r26, 0x4B	; 75
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 b7 09 	call	0x136e	; 0x136e <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 53 07 	call	0xea6	; 0xea6 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<0);
      ba:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
      bc:	58 98       	cbi	0x0b, 0	; 11
      be:	88 e8       	ldi	r24, 0x88	; 136
      c0:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	2c e2       	ldi	r18, 0x2C	; 44
      c4:	31 e0       	ldi	r19, 0x01	; 1
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
      d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x2a>

000000d2 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
      d2:	8c e1       	ldi	r24, 0x1C	; 28
      d4:	91 e0       	ldi	r25, 0x01	; 1
      d6:	90 93 1b 01 	sts	0x011B, r25
      da:	80 93 1a 01 	sts	0x011A, r24
  Timebase->Config.UpdateRate = 1;
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	90 93 1d 01 	sts	0x011D, r25
      e6:	80 93 1c 01 	sts	0x011C, r24
  Timebase->Time.OVFUpdateValue=0;
      ea:	10 92 21 01 	sts	0x0121, r1
      ee:	10 92 20 01 	sts	0x0120, r1
  Timebase->Time.SubSecondsShadow = 0;
      f2:	10 92 2d 01 	sts	0x012D, r1
      f6:	10 92 2c 01 	sts	0x012C, r1
  Timebase->Time.SecondsShadow = 0;
      fa:	10 92 2e 01 	sts	0x012E, r1
      fe:	10 92 2f 01 	sts	0x012F, r1
     102:	10 92 30 01 	sts	0x0130, r1
     106:	10 92 31 01 	sts	0x0131, r1
  Timebase->Time.SubSeconds = 0;
     10a:	10 92 27 01 	sts	0x0127, r1
     10e:	10 92 26 01 	sts	0x0126, r1
  Timebase->Time.Seconds = 0;
     112:	10 92 28 01 	sts	0x0128, r1
     116:	10 92 29 01 	sts	0x0129, r1
     11a:	10 92 2a 01 	sts	0x012A, r1
     11e:	10 92 2b 01 	sts	0x012B, r1
  Timebase->Time.VariablesSync = 0;
     122:	10 92 32 01 	sts	0x0132, r1
  Timebase->Time.LastSample = 0;
     126:	10 92 22 01 	sts	0x0122, r1
     12a:	10 92 23 01 	sts	0x0123, r1
     12e:	10 92 24 01 	sts	0x0124, r1
     132:	10 92 25 01 	sts	0x0125, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds = 0;
     136:	10 92 34 01 	sts	0x0134, r1
     13a:	10 92 33 01 	sts	0x0133, r1
  Timebase->Time.LPTimerSeconds = 0;
     13e:	10 92 35 01 	sts	0x0135, r1
     142:	10 92 36 01 	sts	0x0136, r1
     146:	10 92 37 01 	sts	0x0137, r1
     14a:	10 92 38 01 	sts	0x0138, r1
  Timebase->Config.LPUpdateRate = 1;
     14e:	90 93 1f 01 	sts	0x011F, r25
     152:	80 93 1e 01 	sts	0x011E, r24
  #endif
  
  Timebase->UpdateRequest = 0;
     156:	10 92 39 01 	sts	0x0139, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     15a:	10 92 3a 01 	sts	0x013A, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     15e:	10 92 3b 01 	sts	0x013B, r1
     162:	10 92 3c 01 	sts	0x013C, r1
     166:	10 92 3d 01 	sts	0x013D, r1
     16a:	10 92 3e 01 	sts	0x013E, r1
    Timebase->LPDownCounter[i].Value = 0;
     16e:	10 92 3f 01 	sts	0x013F, r1
     172:	10 92 40 01 	sts	0x0140, r1
     176:	10 92 41 01 	sts	0x0141, r1
     17a:	10 92 42 01 	sts	0x0142, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     17e:	10 92 43 01 	sts	0x0143, r1
     182:	10 92 44 01 	sts	0x0144, r1
     186:	10 92 45 01 	sts	0x0145, r1
     18a:	10 92 46 01 	sts	0x0146, r1
	Timebase->LPDownCounter[i].ReloadValue = 0;
     18e:	10 92 47 01 	sts	0x0147, r1
     192:	10 92 48 01 	sts	0x0148, r1
     196:	10 92 49 01 	sts	0x0149, r1
     19a:	10 92 4a 01 	sts	0x014A, r1
  }
  #endif
  
}
     19e:	08 95       	ret

000001a0 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     1a0:	8f 92       	push	r8
     1a2:	9f 92       	push	r9
     1a4:	bf 92       	push	r11
     1a6:	cf 92       	push	r12
     1a8:	df 92       	push	r13
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	2a 97       	sbiw	r28, 0x0a	; 10
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     1c8:	de 01       	movw	r26, r28
     1ca:	11 96       	adiw	r26, 0x01	; 1
     1cc:	e0 e0       	ldi	r30, 0x00	; 0
     1ce:	f1 e0       	ldi	r31, 0x01	; 1
     1d0:	8a e0       	ldi	r24, 0x0A	; 10
     1d2:	01 90       	ld	r0, Z+
     1d4:	0d 92       	st	X+, r0
     1d6:	81 50       	subi	r24, 0x01	; 1
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     1da:	94 01       	movw	r18, r8
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	50 e0       	ldi	r21, 0x00	; 0
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	7b e1       	ldi	r23, 0x1B	; 27
     1e4:	87 eb       	ldi	r24, 0xB7	; 183
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divmodsi4>
     1ec:	b2 2e       	mov	r11, r18
     1ee:	c3 2e       	mov	r12, r19
     1f0:	d4 2e       	mov	r13, r20
     1f2:	05 2f       	mov	r16, r21
     1f4:	7e 01       	movw	r14, r28
     1f6:	08 94       	sec
     1f8:	e1 1c       	adc	r14, r1
     1fa:	f1 1c       	adc	r15, r1
     1fc:	c9 01       	movw	r24, r18
     1fe:	da 01       	movw	r26, r20
     200:	9c 01       	movw	r18, r24
     202:	ad 01       	movw	r20, r26
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	13 c0       	rjmp	.+38     	; 0x22e <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     208:	f7 01       	movw	r30, r14
     20a:	21 91       	ld	r18, Z+
     20c:	31 91       	ld	r19, Z+
     20e:	7f 01       	movw	r14, r30
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	6b 2d       	mov	r22, r11
     216:	7c 2d       	mov	r23, r12
     218:	8d 2d       	mov	r24, r13
     21a:	90 2f       	mov	r25, r16
     21c:	0e 94 11 0a 	call	0x1422	; 0x1422 <__divmodsi4>
     220:	c9 01       	movw	r24, r18
     222:	da 01       	movw	r26, r20
     224:	9c 01       	movw	r18, r24
     226:	ad 01       	movw	r20, r26
	clock_div_index++;
     228:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     22a:	15 30       	cpi	r17, 0x05	; 5
     22c:	31 f0       	breq	.+12     	; 0x23a <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     22e:	2f 3f       	cpi	r18, 0xFF	; 255
     230:	31 05       	cpc	r19, r1
     232:	41 05       	cpc	r20, r1
     234:	51 05       	cpc	r21, r1
     236:	09 f0       	breq	.+2      	; 0x23a <Timebase_Timer_Enable+0x9a>
     238:	3c f7       	brge	.-50     	; 0x208 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     23a:	81 2f       	mov	r24, r17
     23c:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     23e:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     240:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     242:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     246:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     248:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     24a:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     24c:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     24e:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     250:	88 23       	and	r24, r24
     252:	11 f4       	brne	.+4      	; 0x258 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     254:	81 e0       	ldi	r24, 0x01	; 1
     256:	0f c0       	rjmp	.+30     	; 0x276 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	11 f4       	brne	.+4      	; 0x260 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	0b c0       	rjmp	.+22     	; 0x276 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     260:	82 30       	cpi	r24, 0x02	; 2
     262:	11 f4       	brne	.+4      	; 0x268 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	07 c0       	rjmp	.+14     	; 0x276 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     268:	83 30       	cpi	r24, 0x03	; 3
     26a:	11 f4       	brne	.+4      	; 0x270 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     26c:	84 e0       	ldi	r24, 0x04	; 4
     26e:	03 c0       	rjmp	.+6      	; 0x276 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     270:	84 30       	cpi	r24, 0x04	; 4
     272:	11 f4       	brne	.+4      	; 0x278 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     274:	85 e0       	ldi	r24, 0x05	; 5
     276:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     278:	e0 91 1a 01 	lds	r30, 0x011A
     27c:	f0 91 1b 01 	lds	r31, 0x011B
     280:	8f ef       	ldi	r24, 0xFF	; 255
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	82 1b       	sub	r24, r18
     286:	93 0b       	sbc	r25, r19
     288:	95 83       	std	Z+5, r25	; 0x05
     28a:	84 83       	std	Z+4, r24	; 0x04
  TCNT0  = Timebase->Time.OVFUpdateValue;
     28c:	84 81       	ldd	r24, Z+4	; 0x04
     28e:	95 81       	ldd	r25, Z+5	; 0x05
     290:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 6e 00 	sts	0x006E, r24
  sei();
     298:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     29a:	91 82       	std	Z+1, r9	; 0x01
     29c:	80 82       	st	Z, r8
}
     29e:	2a 96       	adiw	r28, 0x0a	; 10
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
     2bc:	9f 90       	pop	r9
     2be:	8f 90       	pop	r8
     2c0:	08 95       	ret

000002c2 <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     2c2:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2c4:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     2c6:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     2ce:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     2d0:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     2d2:	16 bc       	out	0x26, r1	; 38
}
     2d4:	08 95       	ret

000002d6 <Timebase_LPTimer_Enable>:



#ifdef TIMEBASE_LP_TIMER_ENABLE

void Timebase_LPTimer_Enable(uint16_t UpdateRateHz){
     2d6:	9c 01       	movw	r18, r24
    uint8_t  Prescaler_val;
	
    if(UpdateRateHz == 1){
     2d8:	81 30       	cpi	r24, 0x01	; 1
     2da:	91 05       	cpc	r25, r1
     2dc:	11 f4       	brne	.+4      	; 0x2e2 <Timebase_LPTimer_Enable+0xc>
     2de:	96 e0       	ldi	r25, 0x06	; 6
     2e0:	19 c0       	rjmp	.+50     	; 0x314 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     2e2:	82 30       	cpi	r24, 0x02	; 2
     2e4:	91 05       	cpc	r25, r1
     2e6:	11 f4       	brne	.+4      	; 0x2ec <Timebase_LPTimer_Enable+0x16>
     2e8:	95 e0       	ldi	r25, 0x05	; 5
     2ea:	14 c0       	rjmp	.+40     	; 0x314 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     2ec:	84 30       	cpi	r24, 0x04	; 4
     2ee:	91 05       	cpc	r25, r1
     2f0:	11 f4       	brne	.+4      	; 0x2f6 <Timebase_LPTimer_Enable+0x20>
     2f2:	94 e0       	ldi	r25, 0x04	; 4
     2f4:	0f c0       	rjmp	.+30     	; 0x314 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     2f6:	88 30       	cpi	r24, 0x08	; 8
     2f8:	91 05       	cpc	r25, r1
     2fa:	11 f4       	brne	.+4      	; 0x300 <Timebase_LPTimer_Enable+0x2a>
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	0a c0       	rjmp	.+20     	; 0x314 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     300:	80 31       	cpi	r24, 0x10	; 16
     302:	91 05       	cpc	r25, r1
     304:	11 f4       	brne	.+4      	; 0x30a <Timebase_LPTimer_Enable+0x34>
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	05 c0       	rjmp	.+10     	; 0x314 <Timebase_LPTimer_Enable+0x3e>
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	20 32       	cpi	r18, 0x20	; 32
     30e:	31 05       	cpc	r19, r1
     310:	09 f4       	brne	.+2      	; 0x314 <Timebase_LPTimer_Enable+0x3e>
     312:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     314:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     316:	84 b7       	in	r24, 0x34	; 52
     318:	87 7f       	andi	r24, 0xF7	; 247
     31a:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     31c:	80 91 60 00 	lds	r24, 0x0060
     320:	80 68       	ori	r24, 0x80	; 128
     322:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     326:	80 91 60 00 	lds	r24, 0x0060
     32a:	88 61       	ori	r24, 0x18	; 24
     32c:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     330:	90 64       	ori	r25, 0x40	; 64
     332:	90 93 60 00 	sts	0x0060, r25
    sei();
     336:	78 94       	sei
	Timebase->Config.LPUpdateRate = UpdateRateHz;
     338:	e0 91 1a 01 	lds	r30, 0x011A
     33c:	f0 91 1b 01 	lds	r31, 0x011B
     340:	33 83       	std	Z+3, r19	; 0x03
     342:	22 83       	std	Z+2, r18	; 0x02
}
     344:	08 95       	ret

00000346 <Timebase_LPTimer_Disable>:


void Timebase_LPTimer_Disable(void){
    cli();
     346:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     348:	84 b7       	in	r24, 0x34	; 52
     34a:	87 7f       	andi	r24, 0xF7	; 247
     34c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     34e:	e0 e6       	ldi	r30, 0x60	; 96
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	80 68       	ori	r24, 0x80	; 128
     356:	80 83       	st	Z, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     358:	80 81       	ld	r24, Z
     35a:	88 61       	ori	r24, 0x18	; 24
     35c:	80 83       	st	Z, r24
    WDTCSR  = 0x00;
     35e:	10 82       	st	Z, r1
    sei();
     360:	78 94       	sei
}
     362:	08 95       	ret

00000364 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     364:	f8 94       	cli
}
     366:	08 95       	ret

00000368 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     368:	78 94       	sei
}
     36a:	08 95       	ret

0000036c <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     36c:	e0 91 1a 01 	lds	r30, 0x011A
     370:	f0 91 1b 01 	lds	r31, 0x011B
     374:	20 89       	ldd	r18, Z+16	; 0x10
     376:	31 89       	ldd	r19, Z+17	; 0x11
}
     378:	c9 01       	movw	r24, r18
     37a:	08 95       	ret

0000037c <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     37c:	e0 91 1a 01 	lds	r30, 0x011A
     380:	f0 91 1b 01 	lds	r31, 0x011B
     384:	22 89       	ldd	r18, Z+18	; 0x12
     386:	33 89       	ldd	r19, Z+19	; 0x13
     388:	44 89       	ldd	r20, Z+20	; 0x14
     38a:	55 89       	ldd	r21, Z+21	; 0x15
}
     38c:	b9 01       	movw	r22, r18
     38e:	ca 01       	movw	r24, r20
     390:	08 95       	ret

00000392 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     392:	e0 91 1a 01 	lds	r30, 0x011A
     396:	f0 91 1b 01 	lds	r31, 0x011B
     39a:	22 85       	ldd	r18, Z+10	; 0x0a
     39c:	33 85       	ldd	r19, Z+11	; 0x0b
}
     39e:	c9 01       	movw	r24, r18
     3a0:	08 95       	ret

000003a2 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     3a2:	e0 91 1a 01 	lds	r30, 0x011A
     3a6:	f0 91 1b 01 	lds	r31, 0x011B
     3aa:	24 85       	ldd	r18, Z+12	; 0x0c
     3ac:	35 85       	ldd	r19, Z+13	; 0x0d
     3ae:	46 85       	ldd	r20, Z+14	; 0x0e
     3b0:	57 85       	ldd	r21, Z+15	; 0x0f
}
     3b2:	b9 01       	movw	r22, r18
     3b4:	ca 01       	movw	r24, r20
     3b6:	08 95       	ret

000003b8 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     3b8:	e0 91 1a 01 	lds	r30, 0x011A
     3bc:	f0 91 1b 01 	lds	r31, 0x011B
     3c0:	93 87       	std	Z+11, r25	; 0x0b
     3c2:	82 87       	std	Z+10, r24	; 0x0a
}
     3c4:	08 95       	ret

000003c6 <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     3c6:	e0 91 1a 01 	lds	r30, 0x011A
     3ca:	f0 91 1b 01 	lds	r31, 0x011B
     3ce:	64 87       	std	Z+12, r22	; 0x0c
     3d0:	75 87       	std	Z+13, r23	; 0x0d
     3d2:	86 87       	std	Z+14, r24	; 0x0e
     3d4:	97 87       	std	Z+15, r25	; 0x0f
}
     3d6:	08 95       	ret

000003d8 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     3d8:	e0 91 1a 01 	lds	r30, 0x011A
     3dc:	f0 91 1b 01 	lds	r31, 0x011B
     3e0:	20 89       	ldd	r18, Z+16	; 0x10
     3e2:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     3e4:	80 89       	ldd	r24, Z+16	; 0x10
     3e6:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     3e8:	28 17       	cp	r18, r24
     3ea:	39 07       	cpc	r19, r25
     3ec:	c9 f7       	brne	.-14     	; 0x3e0 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     3ee:	c9 01       	movw	r24, r18
     3f0:	08 95       	ret

000003f2 <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     3f2:	e0 91 1a 01 	lds	r30, 0x011A
     3f6:	f0 91 1b 01 	lds	r31, 0x011B
     3fa:	22 89       	ldd	r18, Z+18	; 0x12
     3fc:	33 89       	ldd	r19, Z+19	; 0x13
     3fe:	44 89       	ldd	r20, Z+20	; 0x14
     400:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     402:	82 89       	ldd	r24, Z+18	; 0x12
     404:	93 89       	ldd	r25, Z+19	; 0x13
     406:	a4 89       	ldd	r26, Z+20	; 0x14
     408:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     40a:	28 17       	cp	r18, r24
     40c:	39 07       	cpc	r19, r25
     40e:	4a 07       	cpc	r20, r26
     410:	5b 07       	cpc	r21, r27
     412:	99 f7       	brne	.-26     	; 0x3fa <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     414:	b9 01       	movw	r22, r18
     416:	ca 01       	movw	r24, r20
     418:	08 95       	ret

0000041a <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     41a:	e0 91 1a 01 	lds	r30, 0x011A
     41e:	f0 91 1b 01 	lds	r31, 0x011B
     422:	86 89       	ldd	r24, Z+22	; 0x16
     424:	88 23       	and	r24, r24
     426:	81 f4       	brne	.+32     	; 0x448 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     428:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     42a:	80 89       	ldd	r24, Z+16	; 0x10
     42c:	91 89       	ldd	r25, Z+17	; 0x11
     42e:	93 87       	std	Z+11, r25	; 0x0b
     430:	82 87       	std	Z+10, r24	; 0x0a
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     432:	82 89       	ldd	r24, Z+18	; 0x12
     434:	93 89       	ldd	r25, Z+19	; 0x13
     436:	a4 89       	ldd	r26, Z+20	; 0x14
     438:	b5 89       	ldd	r27, Z+21	; 0x15
     43a:	84 87       	std	Z+12, r24	; 0x0c
     43c:	95 87       	std	Z+13, r25	; 0x0d
     43e:	a6 87       	std	Z+14, r26	; 0x0e
     440:	b7 87       	std	Z+15, r27	; 0x0f
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     442:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	86 8b       	std	Z+22, r24	; 0x16
     448:	08 95       	ret

0000044a <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     44a:	6f 92       	push	r6
     44c:	7f 92       	push	r7
     44e:	8f 92       	push	r8
     450:	9f 92       	push	r9
     452:	af 92       	push	r10
     454:	bf 92       	push	r11
     456:	cf 92       	push	r12
     458:	df 92       	push	r13
     45a:	ef 92       	push	r14
     45c:	ff 92       	push	r15
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     468:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     46a:	c0 91 1a 01 	lds	r28, 0x011A
     46e:	d0 91 1b 01 	lds	r29, 0x011B
     472:	e8 88       	ldd	r14, Y+16	; 0x10
     474:	f9 88       	ldd	r15, Y+17	; 0x11
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     476:	2a 89       	ldd	r18, Y+18	; 0x12
     478:	3b 89       	ldd	r19, Y+19	; 0x13
     47a:	4c 89       	ldd	r20, Y+20	; 0x14
     47c:	5d 89       	ldd	r21, Y+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     47e:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     480:	68 81       	ld	r22, Y
     482:	79 81       	ldd	r23, Y+1	; 0x01
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__mulsi3>
     48c:	3b 01       	movw	r6, r22
     48e:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     490:	00 e0       	ldi	r16, 0x00	; 0
     492:	10 e0       	ldi	r17, 0x00	; 0
     494:	6e 0c       	add	r6, r14
     496:	7f 1c       	adc	r7, r15
     498:	80 1e       	adc	r8, r16
     49a:	91 1e       	adc	r9, r17
  smpl_val += value;
     49c:	cc 24       	eor	r12, r12
     49e:	dd 24       	eor	r13, r13
     4a0:	6a 0c       	add	r6, r10
     4a2:	7b 1c       	adc	r7, r11
     4a4:	8c 1c       	adc	r8, r12
     4a6:	9d 1c       	adc	r9, r13
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	14 c0       	rjmp	.+40     	; 0x4da <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     4b2:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     4b4:	e8 88       	ldd	r14, Y+16	; 0x10
     4b6:	f9 88       	ldd	r15, Y+17	; 0x11
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     4b8:	2a 89       	ldd	r18, Y+18	; 0x12
     4ba:	3b 89       	ldd	r19, Y+19	; 0x13
     4bc:	4c 89       	ldd	r20, Y+20	; 0x14
     4be:	5d 89       	ldd	r21, Y+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     4c0:	78 94       	sei
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     4c2:	68 81       	ld	r22, Y
     4c4:	79 81       	ldd	r23, Y+1	; 0x01
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__mulsi3>
	curr_val += curr_ss;
     4ce:	00 e0       	ldi	r16, 0x00	; 0
     4d0:	10 e0       	ldi	r17, 0x00	; 0
     4d2:	6e 0d       	add	r22, r14
     4d4:	7f 1d       	adc	r23, r15
     4d6:	80 1f       	adc	r24, r16
     4d8:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     4da:	66 15       	cp	r22, r6
     4dc:	77 05       	cpc	r23, r7
     4de:	88 05       	cpc	r24, r8
     4e0:	99 05       	cpc	r25, r9
     4e2:	3c f3       	brlt	.-50     	; 0x4b2 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	ff 90       	pop	r15
     4ee:	ef 90       	pop	r14
     4f0:	df 90       	pop	r13
     4f2:	cf 90       	pop	r12
     4f4:	bf 90       	pop	r11
     4f6:	af 90       	pop	r10
     4f8:	9f 90       	pop	r9
     4fa:	8f 90       	pop	r8
     4fc:	7f 90       	pop	r7
     4fe:	6f 90       	pop	r6
     500:	08 95       	ret

00000502 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     502:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     504:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     506:	e0 91 1a 01 	lds	r30, 0x011A
     50a:	f0 91 1b 01 	lds	r31, 0x011B
     50e:	01 c0       	rjmp	.+2      	; 0x512 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     510:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     512:	80 89       	ldd	r24, Z+16	; 0x10
     514:	91 89       	ldd	r25, Z+17	; 0x11
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     516:	78 94       	sei
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     518:	26 81       	ldd	r18, Z+6	; 0x06
     51a:	37 81       	ldd	r19, Z+7	; 0x07
     51c:	40 85       	ldd	r20, Z+8	; 0x08
     51e:	51 85       	ldd	r21, Z+9	; 0x09
     520:	a0 e0       	ldi	r26, 0x00	; 0
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	82 17       	cp	r24, r18
     526:	93 07       	cpc	r25, r19
     528:	a4 07       	cpc	r26, r20
     52a:	b5 07       	cpc	r27, r21
     52c:	89 f7       	brne	.-30     	; 0x510 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     52e:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     530:	80 89       	ldd	r24, Z+16	; 0x10
     532:	91 89       	ldd	r25, Z+17	; 0x11
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     534:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     536:	a0 e0       	ldi	r26, 0x00	; 0
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	86 83       	std	Z+6, r24	; 0x06
     53c:	97 83       	std	Z+7, r25	; 0x07
     53e:	a0 87       	std	Z+8, r26	; 0x08
     540:	b1 87       	std	Z+9, r27	; 0x09
  Timebase->Time.LastSample += value;
     542:	26 81       	ldd	r18, Z+6	; 0x06
     544:	37 81       	ldd	r19, Z+7	; 0x07
     546:	40 85       	ldd	r20, Z+8	; 0x08
     548:	51 85       	ldd	r21, Z+9	; 0x09
     54a:	cb 01       	movw	r24, r22
     54c:	a0 e0       	ldi	r26, 0x00	; 0
     54e:	b0 e0       	ldi	r27, 0x00	; 0
     550:	82 0f       	add	r24, r18
     552:	93 1f       	adc	r25, r19
     554:	a4 1f       	adc	r26, r20
     556:	b5 1f       	adc	r27, r21
     558:	86 83       	std	Z+6, r24	; 0x06
     55a:	97 83       	std	Z+7, r25	; 0x07
     55c:	a0 87       	std	Z+8, r26	; 0x08
     55e:	b1 87       	std	Z+9, r27	; 0x09
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     560:	26 81       	ldd	r18, Z+6	; 0x06
     562:	37 81       	ldd	r19, Z+7	; 0x07
     564:	40 85       	ldd	r20, Z+8	; 0x08
     566:	51 85       	ldd	r21, Z+9	; 0x09
     568:	80 81       	ld	r24, Z
     56a:	91 81       	ldd	r25, Z+1	; 0x01
     56c:	a0 e0       	ldi	r26, 0x00	; 0
     56e:	b0 e0       	ldi	r27, 0x00	; 0
     570:	28 17       	cp	r18, r24
     572:	39 07       	cpc	r19, r25
     574:	4a 07       	cpc	r20, r26
     576:	5b 07       	cpc	r21, r27
     578:	84 f0       	brlt	.+32     	; 0x59a <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     57a:	26 81       	ldd	r18, Z+6	; 0x06
     57c:	37 81       	ldd	r19, Z+7	; 0x07
     57e:	40 85       	ldd	r20, Z+8	; 0x08
     580:	51 85       	ldd	r21, Z+9	; 0x09
     582:	80 81       	ld	r24, Z
     584:	91 81       	ldd	r25, Z+1	; 0x01
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	28 1b       	sub	r18, r24
     58c:	39 0b       	sbc	r19, r25
     58e:	4a 0b       	sbc	r20, r26
     590:	5b 0b       	sbc	r21, r27
     592:	26 83       	std	Z+6, r18	; 0x06
     594:	37 83       	std	Z+7, r19	; 0x07
     596:	40 87       	std	Z+8, r20	; 0x08
     598:	51 87       	std	Z+9, r21	; 0x09
     59a:	08 95       	ret

0000059c <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     59c:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     59e:	e0 91 1a 01 	lds	r30, 0x011A
     5a2:	f0 91 1b 01 	lds	r31, 0x011B
     5a6:	22 89       	ldd	r18, Z+18	; 0x12
     5a8:	33 89       	ldd	r19, Z+19	; 0x13
     5aa:	44 89       	ldd	r20, Z+20	; 0x14
     5ac:	55 89       	ldd	r21, Z+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     5ae:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     5b0:	a0 e0       	ldi	r26, 0x00	; 0
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	82 0f       	add	r24, r18
     5b6:	93 1f       	adc	r25, r19
     5b8:	a4 1f       	adc	r26, r20
     5ba:	b5 1f       	adc	r27, r21
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e0       	ldi	r20, 0x00	; 0
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5c6:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     5c8:	22 89       	ldd	r18, Z+18	; 0x12
     5ca:	33 89       	ldd	r19, Z+19	; 0x13
     5cc:	44 89       	ldd	r20, Z+20	; 0x14
     5ce:	55 89       	ldd	r21, Z+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     5d0:	78 94       	sei
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     5d2:	28 17       	cp	r18, r24
     5d4:	39 07       	cpc	r19, r25
     5d6:	4a 07       	cpc	r20, r26
     5d8:	5b 07       	cpc	r21, r27
     5da:	ac f3       	brlt	.-22     	; 0x5c6 <Timebase_Timer_Delay_Seconds+0x2a>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     5dc:	08 95       	ret

000005de <Timebase_LPTimer_Get_SubSeconds>:
#ifdef TIMEBASE_LP_TIMER_ENABLE

uint16_t Timebase_LPTimer_Get_SubSeconds(void){
  uint16_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSubSeconds;
     5de:	e0 91 1a 01 	lds	r30, 0x011A
     5e2:	f0 91 1b 01 	lds	r31, 0x011B
     5e6:	27 89       	ldd	r18, Z+23	; 0x17
     5e8:	30 8d       	ldd	r19, Z+24	; 0x18
    temp1 = Timebase->Time.LPTimerSubSeconds;
     5ea:	87 89       	ldd	r24, Z+23	; 0x17
     5ec:	90 8d       	ldd	r25, Z+24	; 0x18
    if(temp0 == temp1){
     5ee:	28 17       	cp	r18, r24
     5f0:	39 07       	cpc	r19, r25
     5f2:	c9 f7       	brne	.-14     	; 0x5e6 <Timebase_LPTimer_Get_SubSeconds+0x8>
	  break;
    }
  }
  return temp0;
}
     5f4:	c9 01       	movw	r24, r18
     5f6:	08 95       	ret

000005f8 <Timebase_LPTimer_Get_Seconds>:


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     5f8:	e0 91 1a 01 	lds	r30, 0x011A
     5fc:	f0 91 1b 01 	lds	r31, 0x011B
     600:	21 8d       	ldd	r18, Z+25	; 0x19
     602:	32 8d       	ldd	r19, Z+26	; 0x1a
     604:	43 8d       	ldd	r20, Z+27	; 0x1b
     606:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     608:	81 8d       	ldd	r24, Z+25	; 0x19
     60a:	92 8d       	ldd	r25, Z+26	; 0x1a
     60c:	a3 8d       	ldd	r26, Z+27	; 0x1b
     60e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     610:	28 17       	cp	r18, r24
     612:	39 07       	cpc	r19, r25
     614:	4a 07       	cpc	r20, r26
     616:	5b 07       	cpc	r21, r27
     618:	99 f7       	brne	.-26     	; 0x600 <Timebase_LPTimer_Get_Seconds+0x8>
	  break;
    }
  }
  return temp0;
}
     61a:	b9 01       	movw	r22, r18
     61c:	ca 01       	movw	r24, r20
     61e:	08 95       	ret

00000620 <Timebase_LPTimer_Set_SubSeconds>:


void Timebase_LPTimer_Set_SubSeconds(uint16_t value){
  Timebase->Time.LPTimerSubSeconds = value;
     620:	e0 91 1a 01 	lds	r30, 0x011A
     624:	f0 91 1b 01 	lds	r31, 0x011B
     628:	90 8f       	std	Z+24, r25	; 0x18
     62a:	87 8b       	std	Z+23, r24	; 0x17
}
     62c:	08 95       	ret

0000062e <Timebase_LPTimer_Set_Seconds>:


void Timebase_LPTimer_Set_Seconds(int32_t value){
  Timebase->Time.LPTimerSeconds = value;
     62e:	e0 91 1a 01 	lds	r30, 0x011A
     632:	f0 91 1b 01 	lds	r31, 0x011B
     636:	61 8f       	std	Z+25, r22	; 0x19
     638:	72 8f       	std	Z+26, r23	; 0x1a
     63a:	83 8f       	std	Z+27, r24	; 0x1b
     63c:	94 8f       	std	Z+28, r25	; 0x1c
}
     63e:	08 95       	ret

00000640 <Timebase_LPTimer_Delay_Seconds>:

void Timebase_LPTimer_Delay_Seconds(uint16_t value){
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     64a:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     64c:	e0 91 1a 01 	lds	r30, 0x011A
     650:	f0 91 1b 01 	lds	r31, 0x011B
     654:	21 8d       	ldd	r18, Z+25	; 0x19
     656:	32 8d       	ldd	r19, Z+26	; 0x1a
     658:	43 8d       	ldd	r20, Z+27	; 0x1b
     65a:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     65c:	81 8d       	ldd	r24, Z+25	; 0x19
     65e:	92 8d       	ldd	r25, Z+26	; 0x1a
     660:	a3 8d       	ldd	r26, Z+27	; 0x1b
     662:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     664:	28 17       	cp	r18, r24
     666:	39 07       	cpc	r19, r25
     668:	4a 07       	cpc	r20, r26
     66a:	5b 07       	cpc	r21, r27
     66c:	99 f7       	brne	.-26     	; 0x654 <Timebase_LPTimer_Delay_Seconds+0x14>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     66e:	78 94       	sei
void Timebase_LPTimer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
     670:	7b 01       	movw	r14, r22
     672:	00 e0       	ldi	r16, 0x00	; 0
     674:	10 e0       	ldi	r17, 0x00	; 0
     676:	e2 0e       	add	r14, r18
     678:	f3 1e       	adc	r15, r19
     67a:	04 1f       	adc	r16, r20
     67c:	15 1f       	adc	r17, r21
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	0f c0       	rjmp	.+30     	; 0x6a6 <Timebase_LPTimer_Delay_Seconds+0x66>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     688:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     68a:	21 8d       	ldd	r18, Z+25	; 0x19
     68c:	32 8d       	ldd	r19, Z+26	; 0x1a
     68e:	43 8d       	ldd	r20, Z+27	; 0x1b
     690:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     692:	81 8d       	ldd	r24, Z+25	; 0x19
     694:	92 8d       	ldd	r25, Z+26	; 0x1a
     696:	a3 8d       	ldd	r26, Z+27	; 0x1b
     698:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     69a:	28 17       	cp	r18, r24
     69c:	39 07       	cpc	r19, r25
     69e:	4a 07       	cpc	r20, r26
     6a0:	5b 07       	cpc	r21, r27
     6a2:	99 f7       	brne	.-26     	; 0x68a <Timebase_LPTimer_Delay_Seconds+0x4a>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     6a4:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     6a6:	2e 15       	cp	r18, r14
     6a8:	3f 05       	cpc	r19, r15
     6aa:	40 07       	cpc	r20, r16
     6ac:	51 07       	cpc	r21, r17
     6ae:	64 f3       	brlt	.-40     	; 0x688 <Timebase_LPTimer_Delay_Seconds+0x48>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_LPTimer_Get_Seconds();
	Timebase_Atomic_Operation_End();
  }
}
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <Timebase_LPDownCounter_Get_Status>:


/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
     6ba:	e0 91 1a 01 	lds	r30, 0x011A
     6be:	f0 91 1b 01 	lds	r31, 0x011B
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9c 01       	movw	r18, r24
     6c6:	44 e0       	ldi	r20, 0x04	; 4
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	4a 95       	dec	r20
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <Timebase_LPDownCounter_Get_Status+0xe>
     6d0:	28 0f       	add	r18, r24
     6d2:	39 1f       	adc	r19, r25
     6d4:	e2 0f       	add	r30, r18
     6d6:	f3 1f       	adc	r31, r19
     6d8:	86 8d       	ldd	r24, Z+30	; 0x1e
     6da:	86 95       	lsr	r24
  return Timebase->LPDownCounter[window].Status.Value;
}
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	08 95       	ret

000006e0 <Timebase_LPDownCounter_Set_Status>:


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     6e0:	e0 91 1a 01 	lds	r30, 0x011A
     6e4:	f0 91 1b 01 	lds	r31, 0x011B
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	9c 01       	movw	r18, r24
     6ec:	54 e0       	ldi	r21, 0x04	; 4
     6ee:	22 0f       	add	r18, r18
     6f0:	33 1f       	adc	r19, r19
     6f2:	5a 95       	dec	r21
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <Timebase_LPDownCounter_Set_Status+0xe>
     6f6:	28 0f       	add	r18, r24
     6f8:	39 1f       	adc	r19, r25
     6fa:	e2 0f       	add	r30, r18
     6fc:	f3 1f       	adc	r31, r19
     6fe:	6f 70       	andi	r22, 0x0F	; 15
     700:	66 0f       	add	r22, r22
     702:	86 8d       	ldd	r24, Z+30	; 0x1e
     704:	81 7e       	andi	r24, 0xE1	; 225
     706:	86 2b       	or	r24, r22
     708:	86 8f       	std	Z+30, r24	; 0x1e
}
     70a:	08 95       	ret

0000070c <Timebase_LPDownCounter_Get_Value>:


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
     70c:	e0 91 1a 01 	lds	r30, 0x011A
     710:	f0 91 1b 01 	lds	r31, 0x011B
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	9c 01       	movw	r18, r24
     718:	64 e0       	ldi	r22, 0x04	; 4
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	6a 95       	dec	r22
     720:	e1 f7       	brne	.-8      	; 0x71a <Timebase_LPDownCounter_Get_Value+0xe>
     722:	28 0f       	add	r18, r24
     724:	39 1f       	adc	r19, r25
     726:	e2 0f       	add	r30, r18
     728:	f3 1f       	adc	r31, r19
     72a:	df 01       	movw	r26, r30
     72c:	93 96       	adiw	r26, 0x23	; 35
     72e:	63 a1       	ldd	r22, Z+35	; 0x23
     730:	11 96       	adiw	r26, 0x01	; 1
     732:	7c 91       	ld	r23, X
     734:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].Value;
}
     736:	12 96       	adiw	r26, 0x02	; 2
     738:	8c 91       	ld	r24, X
     73a:	12 97       	sbiw	r26, 0x02	; 2
     73c:	13 96       	adiw	r26, 0x03	; 3
     73e:	9c 91       	ld	r25, X
     740:	08 95       	ret

00000742 <Timebase_LPDownCounter_Set_Value>:


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     742:	e0 91 1a 01 	lds	r30, 0x011A
     746:	f0 91 1b 01 	lds	r31, 0x011B
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	9c 01       	movw	r18, r24
     74e:	a4 e0       	ldi	r26, 0x04	; 4
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	aa 95       	dec	r26
     756:	e1 f7       	brne	.-8      	; 0x750 <Timebase_LPDownCounter_Set_Value+0xe>
     758:	28 0f       	add	r18, r24
     75a:	39 1f       	adc	r19, r25
     75c:	e2 0f       	add	r30, r18
     75e:	f3 1f       	adc	r31, r19
     760:	43 a3       	std	Z+35, r20	; 0x23
     762:	54 a3       	std	Z+36, r21	; 0x24
     764:	65 a3       	std	Z+37, r22	; 0x25
     766:	76 a3       	std	Z+38, r23	; 0x26
}
     768:	08 95       	ret

0000076a <Timebase_LPDownCounter_Get_EndValue>:


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
     76a:	e0 91 1a 01 	lds	r30, 0x011A
     76e:	f0 91 1b 01 	lds	r31, 0x011B
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9c 01       	movw	r18, r24
     776:	b4 e0       	ldi	r27, 0x04	; 4
     778:	22 0f       	add	r18, r18
     77a:	33 1f       	adc	r19, r19
     77c:	ba 95       	dec	r27
     77e:	e1 f7       	brne	.-8      	; 0x778 <Timebase_LPDownCounter_Get_EndValue+0xe>
     780:	28 0f       	add	r18, r24
     782:	39 1f       	adc	r19, r25
     784:	e2 0f       	add	r30, r18
     786:	f3 1f       	adc	r31, r19
     788:	df 01       	movw	r26, r30
     78a:	5f 96       	adiw	r26, 0x1f	; 31
     78c:	67 8d       	ldd	r22, Z+31	; 0x1f
     78e:	11 96       	adiw	r26, 0x01	; 1
     790:	7c 91       	ld	r23, X
     792:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].EndValue;
}
     794:	12 96       	adiw	r26, 0x02	; 2
     796:	8c 91       	ld	r24, X
     798:	12 97       	sbiw	r26, 0x02	; 2
     79a:	13 96       	adiw	r26, 0x03	; 3
     79c:	9c 91       	ld	r25, X
     79e:	08 95       	ret

000007a0 <Timebase_LPDownCounter_Set_EndValue>:


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     7a0:	e0 91 1a 01 	lds	r30, 0x011A
     7a4:	f0 91 1b 01 	lds	r31, 0x011B
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	9c 01       	movw	r18, r24
     7ac:	a4 e0       	ldi	r26, 0x04	; 4
     7ae:	22 0f       	add	r18, r18
     7b0:	33 1f       	adc	r19, r19
     7b2:	aa 95       	dec	r26
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <Timebase_LPDownCounter_Set_EndValue+0xe>
     7b6:	28 0f       	add	r18, r24
     7b8:	39 1f       	adc	r19, r25
     7ba:	e2 0f       	add	r30, r18
     7bc:	f3 1f       	adc	r31, r19
     7be:	47 8f       	std	Z+31, r20	; 0x1f
     7c0:	50 a3       	std	Z+32, r21	; 0x20
     7c2:	61 a3       	std	Z+33, r22	; 0x21
     7c4:	72 a3       	std	Z+34, r23	; 0x22
}
     7c6:	08 95       	ret

000007c8 <Timebase_LPDownCounter_Get_PeriodValue>:


int32_t Timebase_LPDownCounter_Get_PeriodValue(uint8_t window){
     7c8:	e0 91 1a 01 	lds	r30, 0x011A
     7cc:	f0 91 1b 01 	lds	r31, 0x011B
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9c 01       	movw	r18, r24
     7d4:	b4 e0       	ldi	r27, 0x04	; 4
     7d6:	22 0f       	add	r18, r18
     7d8:	33 1f       	adc	r19, r19
     7da:	ba 95       	dec	r27
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <Timebase_LPDownCounter_Get_PeriodValue+0xe>
     7de:	28 0f       	add	r18, r24
     7e0:	39 1f       	adc	r19, r25
     7e2:	e2 0f       	add	r30, r18
     7e4:	f3 1f       	adc	r31, r19
     7e6:	df 01       	movw	r26, r30
     7e8:	97 96       	adiw	r26, 0x27	; 39
     7ea:	67 a1       	ldd	r22, Z+39	; 0x27
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	7c 91       	ld	r23, X
     7f0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].PeriodValue;
}
     7f2:	12 96       	adiw	r26, 0x02	; 2
     7f4:	8c 91       	ld	r24, X
     7f6:	12 97       	sbiw	r26, 0x02	; 2
     7f8:	13 96       	adiw	r26, 0x03	; 3
     7fa:	9c 91       	ld	r25, X
     7fc:	08 95       	ret

000007fe <Timebase_LPDownCounter_Set_PeriodValue>:


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     7fe:	e0 91 1a 01 	lds	r30, 0x011A
     802:	f0 91 1b 01 	lds	r31, 0x011B
     806:	28 2f       	mov	r18, r24
     808:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     80a:	77 ff       	sbrs	r23, 7
     80c:	0f c0       	rjmp	.+30     	; 0x82c <Timebase_LPDownCounter_Set_PeriodValue+0x2e>
    Timebase->LPDownCounter[window].PeriodValue = 0;
     80e:	c9 01       	movw	r24, r18
     810:	b4 e0       	ldi	r27, 0x04	; 4
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	ba 95       	dec	r27
     818:	e1 f7       	brne	.-8      	; 0x812 <Timebase_LPDownCounter_Set_PeriodValue+0x14>
     81a:	82 0f       	add	r24, r18
     81c:	93 1f       	adc	r25, r19
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
     822:	17 a2       	std	Z+39, r1	; 0x27
     824:	10 a6       	std	Z+40, r1	; 0x28
     826:	11 a6       	std	Z+41, r1	; 0x29
     828:	12 a6       	std	Z+42, r1	; 0x2a
     82a:	08 95       	ret
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
     82c:	c9 01       	movw	r24, r18
     82e:	a4 e0       	ldi	r26, 0x04	; 4
     830:	88 0f       	add	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	aa 95       	dec	r26
     836:	e1 f7       	brne	.-8      	; 0x830 <Timebase_LPDownCounter_Set_PeriodValue+0x32>
     838:	82 0f       	add	r24, r18
     83a:	93 1f       	adc	r25, r19
     83c:	e8 0f       	add	r30, r24
     83e:	f9 1f       	adc	r31, r25
     840:	47 a3       	std	Z+39, r20	; 0x27
     842:	50 a7       	std	Z+40, r21	; 0x28
     844:	61 a7       	std	Z+41, r22	; 0x29
     846:	72 a7       	std	Z+42, r23	; 0x2a
     848:	08 95       	ret

0000084a <Timebase_LPDownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
     84a:	e0 91 1a 01 	lds	r30, 0x011A
     84e:	f0 91 1b 01 	lds	r31, 0x011B
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	9c 01       	movw	r18, r24
     856:	44 e0       	ldi	r20, 0x04	; 4
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
     85c:	4a 95       	dec	r20
     85e:	e1 f7       	brne	.-8      	; 0x858 <Timebase_LPDownCounter_Get_Period_Flag+0xe>
     860:	28 0f       	add	r18, r24
     862:	39 1f       	adc	r19, r25
     864:	e2 0f       	add	r30, r18
     866:	f3 1f       	adc	r31, r19
     868:	86 8d       	ldd	r24, Z+30	; 0x1e
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}
     86a:	81 70       	andi	r24, 0x01	; 1
     86c:	08 95       	ret

0000086e <Timebase_LPDownCounter_Set_Period_Flag>:


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
     86e:	e0 91 1a 01 	lds	r30, 0x011A
     872:	f0 91 1b 01 	lds	r31, 0x011B
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	9c 01       	movw	r18, r24
     87a:	54 e0       	ldi	r21, 0x04	; 4
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	5a 95       	dec	r21
     882:	e1 f7       	brne	.-8      	; 0x87c <Timebase_LPDownCounter_Set_Period_Flag+0xe>
     884:	28 0f       	add	r18, r24
     886:	39 1f       	adc	r19, r25
     888:	e2 0f       	add	r30, r18
     88a:	f3 1f       	adc	r31, r19
     88c:	86 8d       	ldd	r24, Z+30	; 0x1e
     88e:	81 60       	ori	r24, 0x01	; 1
     890:	86 8f       	std	Z+30, r24	; 0x1e
}
     892:	08 95       	ret

00000894 <Timebase_LPDownCounter_Clear_Period_Flag>:


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     894:	e0 91 1a 01 	lds	r30, 0x011A
     898:	f0 91 1b 01 	lds	r31, 0x011B
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9c 01       	movw	r18, r24
     8a0:	64 e0       	ldi	r22, 0x04	; 4
     8a2:	22 0f       	add	r18, r18
     8a4:	33 1f       	adc	r19, r19
     8a6:	6a 95       	dec	r22
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <Timebase_LPDownCounter_Clear_Period_Flag+0xe>
     8aa:	28 0f       	add	r18, r24
     8ac:	39 1f       	adc	r19, r25
     8ae:	e2 0f       	add	r30, r18
     8b0:	f3 1f       	adc	r31, r19
     8b2:	86 8d       	ldd	r24, Z+30	; 0x1e
     8b4:	8e 7f       	andi	r24, 0xFE	; 254
     8b6:	86 8f       	std	Z+30, r24	; 0x1e
}
     8b8:	08 95       	ret

000008ba <Timebase_LPDownCounter_Get_ReloadValue>:

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
     8ba:	e0 91 1a 01 	lds	r30, 0x011A
     8be:	f0 91 1b 01 	lds	r31, 0x011B
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	9c 01       	movw	r18, r24
     8c6:	74 e0       	ldi	r23, 0x04	; 4
     8c8:	22 0f       	add	r18, r18
     8ca:	33 1f       	adc	r19, r19
     8cc:	7a 95       	dec	r23
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <Timebase_LPDownCounter_Get_ReloadValue+0xe>
     8d0:	28 0f       	add	r18, r24
     8d2:	39 1f       	adc	r19, r25
     8d4:	e2 0f       	add	r30, r18
     8d6:	f3 1f       	adc	r31, r19
     8d8:	df 01       	movw	r26, r30
     8da:	9b 96       	adiw	r26, 0x2b	; 43
     8dc:	63 a5       	ldd	r22, Z+43	; 0x2b
     8de:	11 96       	adiw	r26, 0x01	; 1
     8e0:	7c 91       	ld	r23, X
     8e2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->LPDownCounter[window].ReloadValue;
}
     8e4:	12 96       	adiw	r26, 0x02	; 2
     8e6:	8c 91       	ld	r24, X
     8e8:	12 97       	sbiw	r26, 0x02	; 2
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	9c 91       	ld	r25, X
     8ee:	08 95       	ret

000008f0 <Timebase_LPDownCounter_Set_ReloadValue>:

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     8f0:	e0 91 1a 01 	lds	r30, 0x011A
     8f4:	f0 91 1b 01 	lds	r31, 0x011B
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9c 01       	movw	r18, r24
     8fc:	a4 e0       	ldi	r26, 0x04	; 4
     8fe:	22 0f       	add	r18, r18
     900:	33 1f       	adc	r19, r19
     902:	aa 95       	dec	r26
     904:	e1 f7       	brne	.-8      	; 0x8fe <Timebase_LPDownCounter_Set_ReloadValue+0xe>
     906:	28 0f       	add	r18, r24
     908:	39 1f       	adc	r19, r25
     90a:	e2 0f       	add	r30, r18
     90c:	f3 1f       	adc	r31, r19
     90e:	43 a7       	std	Z+43, r20	; 0x2b
     910:	54 a7       	std	Z+44, r21	; 0x2c
     912:	65 a7       	std	Z+45, r22	; 0x2d
     914:	76 a7       	std	Z+46, r23	; 0x2e
}
     916:	08 95       	ret

00000918 <Timebase_LPDownCounter_Reset>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     918:	e0 91 1a 01 	lds	r30, 0x011A
     91c:	f0 91 1b 01 	lds	r31, 0x011B
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	9c 01       	movw	r18, r24
     924:	b4 e0       	ldi	r27, 0x04	; 4
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	ba 95       	dec	r27
     92c:	e1 f7       	brne	.-8      	; 0x926 <Timebase_LPDownCounter_Reset+0xe>
     92e:	28 0f       	add	r18, r24
     930:	39 1f       	adc	r19, r25
     932:	e2 0f       	add	r30, r18
     934:	f3 1f       	adc	r31, r19
     936:	17 8e       	std	Z+31, r1	; 0x1f
     938:	10 a2       	std	Z+32, r1	; 0x20
     93a:	11 a2       	std	Z+33, r1	; 0x21
     93c:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     93e:	13 a2       	std	Z+35, r1	; 0x23
     940:	14 a2       	std	Z+36, r1	; 0x24
     942:	15 a2       	std	Z+37, r1	; 0x25
     944:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     946:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     948:	80 7e       	andi	r24, 0xE0	; 224
     94a:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     94c:	13 a6       	std	Z+43, r1	; 0x2b
     94e:	14 a6       	std	Z+44, r1	; 0x2c
     950:	15 a6       	std	Z+45, r1	; 0x2d
     952:	16 a6       	std	Z+46, r1	; 0x2e
  Timebase_LPDownCounter_Set_EndValue(window, 0);
  Timebase_LPDownCounter_Set_Value(window, 0);
  Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_LPDownCounter_Clear_Period_Flag(window);
  Timebase_LPDownCounter_Set_ReloadValue(window, 0);
} 
     954:	08 95       	ret

00000956 <Timebase_LPDownCounter_Clear_All_Flags>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     956:	e0 91 1a 01 	lds	r30, 0x011A
     95a:	f0 91 1b 01 	lds	r31, 0x011B
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	9c 01       	movw	r18, r24
     962:	44 e0       	ldi	r20, 0x04	; 4
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	4a 95       	dec	r20
     96a:	e1 f7       	brne	.-8      	; 0x964 <Timebase_LPDownCounter_Clear_All_Flags+0xe>
     96c:	28 0f       	add	r18, r24
     96e:	39 1f       	adc	r19, r25
     970:	e2 0f       	add	r30, r18
     972:	f3 1f       	adc	r31, r19
     974:	17 8e       	std	Z+31, r1	; 0x1f
     976:	10 a2       	std	Z+32, r1	; 0x20
     978:	11 a2       	std	Z+33, r1	; 0x21
     97a:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     97c:	13 a2       	std	Z+35, r1	; 0x23
     97e:	14 a2       	std	Z+36, r1	; 0x24
     980:	15 a2       	std	Z+37, r1	; 0x25
     982:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     984:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     986:	80 7e       	andi	r24, 0xE0	; 224
     988:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     98a:	13 a6       	std	Z+43, r1	; 0x2b
     98c:	14 a6       	std	Z+44, r1	; 0x2c
     98e:	15 a6       	std	Z+45, r1	; 0x2d
     990:	16 a6       	std	Z+46, r1	; 0x2e
} 


void Timebase_LPDownCounter_Clear_All_Flags(uint8_t window){
  Timebase_LPDownCounter_Reset( window );
}
     992:	08 95       	ret

00000994 <Timebase_LPDownCounter_Start>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
     994:	e0 91 1a 01 	lds	r30, 0x011A
     998:	f0 91 1b 01 	lds	r31, 0x011B
     99c:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     99e:	9c 01       	movw	r18, r24
     9a0:	54 e0       	ldi	r21, 0x04	; 4
     9a2:	22 0f       	add	r18, r18
     9a4:	33 1f       	adc	r19, r19
     9a6:	5a 95       	dec	r21
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <Timebase_LPDownCounter_Start+0xe>
     9aa:	28 0f       	add	r18, r24
     9ac:	39 1f       	adc	r19, r25
     9ae:	e2 0f       	add	r30, r18
     9b0:	f3 1f       	adc	r31, r19
     9b2:	96 8d       	ldd	r25, Z+30	; 0x1e
     9b4:	89 2f       	mov	r24, r25
     9b6:	86 95       	lsr	r24
     9b8:	8f 70       	andi	r24, 0x0F	; 15
     9ba:	81 30       	cpi	r24, 0x01	; 1
     9bc:	19 f0       	breq	.+6      	; 0x9c4 <Timebase_LPDownCounter_Start+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     9be:	91 7e       	andi	r25, 0xE1	; 225
     9c0:	92 60       	ori	r25, 0x02	; 2
     9c2:	96 8f       	std	Z+30, r25	; 0x1e
     9c4:	08 95       	ret

000009c6 <Timebase_LPDownCounter_Stop>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
     9c6:	e0 91 1a 01 	lds	r30, 0x011A
     9ca:	f0 91 1b 01 	lds	r31, 0x011B
     9ce:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Stop(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     9d0:	9c 01       	movw	r18, r24
     9d2:	64 e0       	ldi	r22, 0x04	; 4
     9d4:	22 0f       	add	r18, r18
     9d6:	33 1f       	adc	r19, r19
     9d8:	6a 95       	dec	r22
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <Timebase_LPDownCounter_Stop+0xe>
     9dc:	28 0f       	add	r18, r24
     9de:	39 1f       	adc	r19, r25
     9e0:	e2 0f       	add	r30, r18
     9e2:	f3 1f       	adc	r31, r19
     9e4:	96 8d       	ldd	r25, Z+30	; 0x1e
     9e6:	89 2f       	mov	r24, r25
     9e8:	86 95       	lsr	r24
     9ea:	8f 70       	andi	r24, 0x0F	; 15
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	19 f0       	breq	.+6      	; 0x9f6 <Timebase_LPDownCounter_Stop+0x30>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     9f0:	91 7e       	andi	r25, 0xE1	; 225
     9f2:	94 60       	ori	r25, 0x04	; 4
     9f4:	96 8f       	std	Z+30, r25	; 0x1e
     9f6:	08 95       	ret

000009f8 <Timebase_LPDownCounter_Set_Securely>:
    Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	7a 01       	movw	r14, r20
     a06:	8b 01       	movw	r16, r22

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
     a08:	c0 91 1a 01 	lds	r28, 0x011A
     a0c:	d0 91 1b 01 	lds	r29, 0x011B
     a10:	68 2f       	mov	r22, r24
     a12:	70 e0       	ldi	r23, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     a14:	fb 01       	movw	r30, r22
     a16:	b4 e0       	ldi	r27, 0x04	; 4
     a18:	ee 0f       	add	r30, r30
     a1a:	ff 1f       	adc	r31, r31
     a1c:	ba 95       	dec	r27
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <Timebase_LPDownCounter_Set_Securely+0x20>
     a20:	e6 0f       	add	r30, r22
     a22:	f7 1f       	adc	r31, r23
     a24:	ec 0f       	add	r30, r28
     a26:	fd 1f       	adc	r31, r29
     a28:	86 8d       	ldd	r24, Z+30	; 0x1e
     a2a:	86 95       	lsr	r24
     a2c:	8f 70       	andi	r24, 0x0F	; 15
     a2e:	81 f5       	brne	.+96     	; 0xa90 <Timebase_LPDownCounter_Set_Securely+0x98>
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     a30:	e3 a2       	std	Z+35, r14	; 0x23
     a32:	f4 a2       	std	Z+36, r15	; 0x24
     a34:	05 a3       	std	Z+37, r16	; 0x25
     a36:	16 a3       	std	Z+38, r17	; 0x26


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     a38:	29 8d       	ldd	r18, Y+25	; 0x19
     a3a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     a3c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     a3e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     a40:	89 8d       	ldd	r24, Y+25	; 0x19
     a42:	9a 8d       	ldd	r25, Y+26	; 0x1a
     a44:	ab 8d       	ldd	r26, Y+27	; 0x1b
     a46:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
     a48:	28 17       	cp	r18, r24
     a4a:	39 07       	cpc	r19, r25
     a4c:	4a 07       	cpc	r20, r26
     a4e:	5b 07       	cpc	r21, r27
     a50:	99 f7       	brne	.-26     	; 0xa38 <Timebase_LPDownCounter_Set_Securely+0x40>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     a52:	fb 01       	movw	r30, r22
     a54:	a4 e0       	ldi	r26, 0x04	; 4
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	aa 95       	dec	r26
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <Timebase_LPDownCounter_Set_Securely+0x5e>
     a5e:	e6 0f       	add	r30, r22
     a60:	f7 1f       	adc	r31, r23
     a62:	ec 0f       	add	r30, r28
     a64:	fd 1f       	adc	r31, r29
     a66:	2e 0d       	add	r18, r14
     a68:	3f 1d       	adc	r19, r15
     a6a:	40 1f       	adc	r20, r16
     a6c:	51 1f       	adc	r21, r17
     a6e:	27 8f       	std	Z+31, r18	; 0x1f
     a70:	30 a3       	std	Z+32, r19	; 0x20
     a72:	41 a3       	std	Z+33, r20	; 0x21
     a74:	52 a3       	std	Z+34, r21	; 0x22
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     a76:	e3 a6       	std	Z+43, r14	; 0x2b
     a78:	f4 a6       	std	Z+44, r15	; 0x2c
     a7a:	05 a7       	std	Z+45, r16	; 0x2d
     a7c:	16 a7       	std	Z+46, r17	; 0x2e
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     a7e:	96 8d       	ldd	r25, Z+30	; 0x1e
     a80:	89 2f       	mov	r24, r25
     a82:	86 95       	lsr	r24
     a84:	8f 70       	andi	r24, 0x0F	; 15
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	19 f0       	breq	.+6      	; 0xa90 <Timebase_LPDownCounter_Set_Securely+0x98>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     a8a:	91 7e       	andi	r25, 0xE1	; 225
     a8c:	92 60       	ori	r25, 0x02	; 2
     a8e:	96 8f       	std	Z+30, r25	; 0x1e
    Timebase_LPDownCounter_Set_Value(window, value);
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPTimer_Get_Seconds() + value);
	Timebase_LPDownCounter_Set_ReloadValue(window, value);
    Timebase_LPDownCounter_Start(window);
  }
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	08 95       	ret

00000a9e <Timebase_LPDownCounter_Set_Forcefully>:


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	6a 01       	movw	r12, r20
     aac:	7b 01       	movw	r14, r22
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     aae:	e0 91 1a 01 	lds	r30, 0x011A
     ab2:	f0 91 1b 01 	lds	r31, 0x011B
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	89 01       	movw	r16, r18
     abc:	94 e0       	ldi	r25, 0x04	; 4
     abe:	00 0f       	add	r16, r16
     ac0:	11 1f       	adc	r17, r17
     ac2:	9a 95       	dec	r25
     ac4:	e1 f7       	brne	.-8      	; 0xabe <Timebase_LPDownCounter_Set_Forcefully+0x20>
     ac6:	02 0f       	add	r16, r18
     ac8:	13 1f       	adc	r17, r19
     aca:	e0 0f       	add	r30, r16
     acc:	f1 1f       	adc	r31, r17
     ace:	17 8e       	std	Z+31, r1	; 0x1f
     ad0:	10 a2       	std	Z+32, r1	; 0x20
     ad2:	11 a2       	std	Z+33, r1	; 0x21
     ad4:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     ad6:	13 a2       	std	Z+35, r1	; 0x23
     ad8:	14 a2       	std	Z+36, r1	; 0x24
     ada:	15 a2       	std	Z+37, r1	; 0x25
     adc:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     ade:	96 8d       	ldd	r25, Z+30	; 0x1e
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ae0:	90 7e       	andi	r25, 0xE0	; 224
     ae2:	96 8f       	std	Z+30, r25	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     ae4:	13 a6       	std	Z+43, r1	; 0x2b
     ae6:	14 a6       	std	Z+44, r1	; 0x2c
     ae8:	15 a6       	std	Z+45, r1	; 0x2d
     aea:	16 a6       	std	Z+46, r1	; 0x2e
}


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
     aec:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Timebase_LPDownCounter_Set_Securely>
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     af0:	e0 91 1a 01 	lds	r30, 0x011A
     af4:	f0 91 1b 01 	lds	r31, 0x011B
     af8:	e0 0f       	add	r30, r16
     afa:	f1 1f       	adc	r31, r17
     afc:	c3 a6       	std	Z+43, r12	; 0x2b
     afe:	d4 a6       	std	Z+44, r13	; 0x2c
     b00:	e5 a6       	std	Z+45, r14	; 0x2d
     b02:	f6 a6       	std	Z+46, r15	; 0x2e

void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 
     b04:	1f 91       	pop	r17
     b06:	0f 91       	pop	r16
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <Timebase_LPDownCounter_Update>:


void Timebase_LPDownCounter_Update(uint8_t window){
     b12:	ef 92       	push	r14
     b14:	ff 92       	push	r15
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
     b1e:	c0 91 1a 01 	lds	r28, 0x011A
     b22:	d0 91 1b 01 	lds	r29, 0x011B
     b26:	68 2f       	mov	r22, r24
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	fb 01       	movw	r30, r22
     b2c:	04 e0       	ldi	r16, 0x04	; 4
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	0a 95       	dec	r16
     b34:	e1 f7       	brne	.-8      	; 0xb2e <Timebase_LPDownCounter_Update+0x1c>
     b36:	e6 0f       	add	r30, r22
     b38:	f7 1f       	adc	r31, r23
     b3a:	ec 0f       	add	r30, r28
     b3c:	fd 1f       	adc	r31, r29
     b3e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b40:	86 95       	lsr	r24
     b42:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	d9 f5       	brne	.+118    	; 0xbbe <Timebase_LPDownCounter_Update+0xac>
  Timebase->LPDownCounter[window].Value = value;
}


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
  return Timebase->LPDownCounter[window].EndValue;
     b48:	e7 8c       	ldd	r14, Z+31	; 0x1f
     b4a:	f0 a0       	ldd	r15, Z+32	; 0x20
     b4c:	01 a1       	ldd	r16, Z+33	; 0x21
     b4e:	12 a1       	ldd	r17, Z+34	; 0x22


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     b50:	29 8d       	ldd	r18, Y+25	; 0x19
     b52:	3a 8d       	ldd	r19, Y+26	; 0x1a
     b54:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b56:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     b58:	89 8d       	ldd	r24, Y+25	; 0x19
     b5a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b5c:	ab 8d       	ldd	r26, Y+27	; 0x1b
     b5e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	4a 07       	cpc	r20, r26
     b66:	5b 07       	cpc	r21, r27
     b68:	99 f7       	brne	.-26     	; 0xb50 <Timebase_LPDownCounter_Update+0x3e>
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
     b6a:	d8 01       	movw	r26, r16
     b6c:	c7 01       	movw	r24, r14
     b6e:	82 1b       	sub	r24, r18
     b70:	93 0b       	sbc	r25, r19
     b72:	a4 0b       	sbc	r26, r20
     b74:	b5 0b       	sbc	r27, r21
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     b76:	fb 01       	movw	r30, r22
     b78:	14 e0       	ldi	r17, 0x04	; 4
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	1a 95       	dec	r17
     b80:	e1 f7       	brne	.-8      	; 0xb7a <Timebase_LPDownCounter_Update+0x68>
     b82:	e6 0f       	add	r30, r22
     b84:	f7 1f       	adc	r31, r23
     b86:	ec 0f       	add	r30, r28
     b88:	fd 1f       	adc	r31, r29
     b8a:	83 a3       	std	Z+35, r24	; 0x23
     b8c:	94 a3       	std	Z+36, r25	; 0x24
     b8e:	a5 a3       	std	Z+37, r26	; 0x25
     b90:	b6 a3       	std	Z+38, r27	; 0x26


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
     b92:	18 16       	cp	r1, r24
     b94:	19 06       	cpc	r1, r25
     b96:	1a 06       	cpc	r1, r26
     b98:	1b 06       	cpc	r1, r27
     b9a:	b4 f1       	brlt	.+108    	; 0xc08 <Timebase_LPDownCounter_Update+0xf6>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     b9c:	17 8e       	std	Z+31, r1	; 0x1f
     b9e:	10 a2       	std	Z+32, r1	; 0x20
     ba0:	11 a2       	std	Z+33, r1	; 0x21
     ba2:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     ba4:	13 a2       	std	Z+35, r1	; 0x23
     ba6:	14 a2       	std	Z+36, r1	; 0x24
     ba8:	15 a2       	std	Z+37, r1	; 0x25
     baa:	16 a2       	std	Z+38, r1	; 0x26
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     bac:	86 8d       	ldd	r24, Z+30	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     bae:	13 a6       	std	Z+43, r1	; 0x2b
     bb0:	14 a6       	std	Z+44, r1	; 0x2c
     bb2:	15 a6       	std	Z+45, r1	; 0x2d
     bb4:	16 a6       	std	Z+46, r1	; 0x2e
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     bb6:	80 7e       	andi	r24, 0xE0	; 224
     bb8:	88 60       	ori	r24, 0x08	; 8
     bba:	86 8f       	std	Z+30, r24	; 0x1e
     bbc:	25 c0       	rjmp	.+74     	; 0xc08 <Timebase_LPDownCounter_Update+0xf6>
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
      Timebase_LPDownCounter_Reset(window);
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
     bbe:	82 30       	cpi	r24, 0x02	; 2
     bc0:	19 f5       	brne	.+70     	; 0xc08 <Timebase_LPDownCounter_Update+0xf6>
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
     bc2:	e3 a0       	ldd	r14, Z+35	; 0x23
     bc4:	f4 a0       	ldd	r15, Z+36	; 0x24
     bc6:	05 a1       	ldd	r16, Z+37	; 0x25
     bc8:	16 a1       	ldd	r17, Z+38	; 0x26


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     bca:	29 8d       	ldd	r18, Y+25	; 0x19
     bcc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     bce:	4b 8d       	ldd	r20, Y+27	; 0x1b
     bd0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     bd2:	89 8d       	ldd	r24, Y+25	; 0x19
     bd4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bd6:	ab 8d       	ldd	r26, Y+27	; 0x1b
     bd8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
     bda:	28 17       	cp	r18, r24
     bdc:	39 07       	cpc	r19, r25
     bde:	4a 07       	cpc	r20, r26
     be0:	5b 07       	cpc	r21, r27
     be2:	99 f7       	brne	.-26     	; 0xbca <Timebase_LPDownCounter_Update+0xb8>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     be4:	cb 01       	movw	r24, r22
     be6:	e4 e0       	ldi	r30, 0x04	; 4
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	ea 95       	dec	r30
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <Timebase_LPDownCounter_Update+0xd6>
     bf0:	86 0f       	add	r24, r22
     bf2:	97 1f       	adc	r25, r23
     bf4:	c8 0f       	add	r28, r24
     bf6:	d9 1f       	adc	r29, r25
     bf8:	2e 0d       	add	r18, r14
     bfa:	3f 1d       	adc	r19, r15
     bfc:	40 1f       	adc	r20, r16
     bfe:	51 1f       	adc	r21, r17
     c00:	2f 8f       	std	Y+31, r18	; 0x1f
     c02:	38 a3       	std	Y+32, r19	; 0x20
     c04:	49 a3       	std	Y+33, r20	; 0x21
     c06:	5a a3       	std	Y+34, r21	; 0x22
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPDownCounter_Get_Value(window) + Timebase_LPTimer_Get_Seconds());
  }
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	08 95       	ret

00000c16 <Timebase_LPDownCounter_Expired>:


uint8_t Timebase_LPDownCounter_Expired(uint8_t window){
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	e0 91 1a 01 	lds	r30, 0x011A
     c1c:	f0 91 1b 01 	lds	r31, 0x011B
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9c 01       	movw	r18, r24
     c24:	54 e0       	ldi	r21, 0x04	; 4
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	5a 95       	dec	r21
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <Timebase_LPDownCounter_Expired+0x10>
     c2e:	28 0f       	add	r18, r24
     c30:	39 1f       	adc	r19, r25
     c32:	e2 0f       	add	r30, r18
     c34:	f3 1f       	adc	r31, r19
     c36:	86 8d       	ldd	r24, Z+30	; 0x1e
     c38:	86 95       	lsr	r24
     c3a:	8f 70       	andi	r24, 0x0F	; 15
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	09 f4       	brne	.+2      	; 0xc42 <Timebase_LPDownCounter_Expired+0x2c>
     c40:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     c42:	84 2f       	mov	r24, r20
     c44:	08 95       	ret

00000c46 <Timebase_LPDownCounter_Expired_Event>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
     c46:	e0 91 1a 01 	lds	r30, 0x011A
     c4a:	f0 91 1b 01 	lds	r31, 0x011B
     c4e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_LPDownCounter_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     c50:	9c 01       	movw	r18, r24
     c52:	64 e0       	ldi	r22, 0x04	; 4
     c54:	22 0f       	add	r18, r18
     c56:	33 1f       	adc	r19, r19
     c58:	6a 95       	dec	r22
     c5a:	e1 f7       	brne	.-8      	; 0xc54 <Timebase_LPDownCounter_Expired_Event+0xe>
     c5c:	28 0f       	add	r18, r24
     c5e:	39 1f       	adc	r19, r25
     c60:	e2 0f       	add	r30, r18
     c62:	f3 1f       	adc	r31, r19
     c64:	86 8d       	ldd	r24, Z+30	; 0x1e
     c66:	86 95       	lsr	r24
     c68:	8f 70       	andi	r24, 0x0F	; 15
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	11 f0       	breq	.+4      	; 0xc72 <Timebase_LPDownCounter_Expired_Event+0x2c>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	08 95       	ret
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     c72:	17 8e       	std	Z+31, r1	; 0x1f
     c74:	10 a2       	std	Z+32, r1	; 0x20
     c76:	11 a2       	std	Z+33, r1	; 0x21
     c78:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     c7a:	13 a2       	std	Z+35, r1	; 0x23
     c7c:	14 a2       	std	Z+36, r1	; 0x24
     c7e:	15 a2       	std	Z+37, r1	; 0x25
     c80:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     c82:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     c84:	80 7e       	andi	r24, 0xE0	; 224
     c86:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     c88:	13 a6       	std	Z+43, r1	; 0x2b
     c8a:	14 a6       	std	Z+44, r1	; 0x2c
     c8c:	15 a6       	std	Z+45, r1	; 0x2d
     c8e:	16 a6       	std	Z+46, r1	; 0x2e
     c90:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     c92:	08 95       	ret

00000c94 <Timebase_LPDownCounter_Oneshot_Expired_Event>:

uint8_t Timebase_LPDownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_LPDownCounter_Expired_Event(window);
     c94:	0e 94 23 06 	call	0xc46	; 0xc46 <Timebase_LPDownCounter_Expired_Event>
}
     c98:	08 95       	ret

00000c9a <Timebase_LPDownCounter_Continuous_Expired_Event>:


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
     c9a:	a8 2f       	mov	r26, r24

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
     c9c:	e0 91 1a 01 	lds	r30, 0x011A
     ca0:	f0 91 1b 01 	lds	r31, 0x011B
     ca4:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_LPDownCounter_Expired_Event(window);
}


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     ca6:	9c 01       	movw	r18, r24
     ca8:	74 e0       	ldi	r23, 0x04	; 4
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	7a 95       	dec	r23
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <Timebase_LPDownCounter_Continuous_Expired_Event+0x10>
     cb2:	28 0f       	add	r18, r24
     cb4:	39 1f       	adc	r19, r25
     cb6:	e2 0f       	add	r30, r18
     cb8:	f3 1f       	adc	r31, r19
     cba:	86 8d       	ldd	r24, Z+30	; 0x1e
     cbc:	86 95       	lsr	r24
     cbe:	8f 70       	andi	r24, 0x0F	; 15
     cc0:	84 30       	cpi	r24, 0x04	; 4
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <Timebase_LPDownCounter_Continuous_Expired_Event+0x2e>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	08 95       	ret
void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
     cc8:	43 a5       	ldd	r20, Z+43	; 0x2b
     cca:	54 a5       	ldd	r21, Z+44	; 0x2c
     ccc:	65 a5       	ldd	r22, Z+45	; 0x2d
     cce:	76 a5       	ldd	r23, Z+46	; 0x2e
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     cd0:	17 8e       	std	Z+31, r1	; 0x1f
     cd2:	10 a2       	std	Z+32, r1	; 0x20
     cd4:	11 a2       	std	Z+33, r1	; 0x21
     cd6:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     cd8:	13 a2       	std	Z+35, r1	; 0x23
     cda:	14 a2       	std	Z+36, r1	; 0x24
     cdc:	15 a2       	std	Z+37, r1	; 0x25
     cde:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     ce0:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ce2:	80 7e       	andi	r24, 0xE0	; 224
     ce4:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     ce6:	13 a6       	std	Z+43, r1	; 0x2b
     ce8:	14 a6       	std	Z+44, r1	; 0x2c
     cea:	15 a6       	std	Z+45, r1	; 0x2d
     cec:	16 a6       	std	Z+46, r1	; 0x2e

uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
    Timebase_LPDownCounter_Clear_All_Flags( window );
	Timebase_LPDownCounter_Set_Securely(window, temp);
     cee:	8a 2f       	mov	r24, r26
     cf0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <Timebase_LPDownCounter_Set_Securely>
     cf4:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     cf6:	08 95       	ret

00000cf8 <Timebase_LPDownCounter_Set_Period_Value_Securely>:


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
     cfc:	c0 91 1a 01 	lds	r28, 0x011A
     d00:	d0 91 1b 01 	lds	r29, 0x011B
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
     d08:	f9 01       	movw	r30, r18
     d0a:	b4 e0       	ldi	r27, 0x04	; 4
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ba 95       	dec	r27
     d12:	e1 f7       	brne	.-8      	; 0xd0c <Timebase_LPDownCounter_Set_Period_Value_Securely+0x14>
     d14:	e2 0f       	add	r30, r18
     d16:	f3 1f       	adc	r31, r19
     d18:	ec 0f       	add	r30, r28
     d1a:	fd 1f       	adc	r31, r29
     d1c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d1e:	80 fd       	sbrc	r24, 0
     d20:	20 c0       	rjmp	.+64     	; 0xd62 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x6a>
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
     d22:	83 a1       	ldd	r24, Z+35	; 0x23
     d24:	94 a1       	ldd	r25, Z+36	; 0x24
     d26:	a5 a1       	ldd	r26, Z+37	; 0x25
     d28:	b6 a1       	ldd	r27, Z+38	; 0x26
     d2a:	84 1b       	sub	r24, r20
     d2c:	95 0b       	sbc	r25, r21
     d2e:	a6 0b       	sbc	r26, r22
     d30:	b7 0b       	sbc	r27, r23
  return Timebase->LPDownCounter[window].PeriodValue;
}


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
     d32:	b7 ff       	sbrs	r27, 7
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x48>
    Timebase->LPDownCounter[window].PeriodValue = 0;
     d36:	17 a2       	std	Z+39, r1	; 0x27
     d38:	10 a6       	std	Z+40, r1	; 0x28
     d3a:	11 a6       	std	Z+41, r1	; 0x29
     d3c:	12 a6       	std	Z+42, r1	; 0x2a
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
     d40:	87 a3       	std	Z+39, r24	; 0x27
     d42:	90 a7       	std	Z+40, r25	; 0x28
     d44:	a1 a7       	std	Z+41, r26	; 0x29
     d46:	b2 a7       	std	Z+42, r27	; 0x2a
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
     d48:	f9 01       	movw	r30, r18
     d4a:	a4 e0       	ldi	r26, 0x04	; 4
     d4c:	ee 0f       	add	r30, r30
     d4e:	ff 1f       	adc	r31, r31
     d50:	aa 95       	dec	r26
     d52:	e1 f7       	brne	.-8      	; 0xd4c <Timebase_LPDownCounter_Set_Period_Value_Securely+0x54>
     d54:	e2 0f       	add	r30, r18
     d56:	f3 1f       	adc	r31, r19
     d58:	ec 0f       	add	r30, r28
     d5a:	fd 1f       	adc	r31, r29
     d5c:	86 8d       	ldd	r24, Z+30	; 0x1e
     d5e:	81 60       	ori	r24, 0x01	; 1
     d60:	86 8f       	std	Z+30, r24	; 0x1e
void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    Timebase_LPDownCounter_Set_Period_Flag(window);
  }
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <Timebase_LPDownCounter_Get_Remaining_Period_Value>:
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
     d68:	e0 91 1a 01 	lds	r30, 0x011A
     d6c:	f0 91 1b 01 	lds	r31, 0x011B
     d70:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
     d72:	9c 01       	movw	r18, r24
     d74:	44 e0       	ldi	r20, 0x04	; 4
     d76:	22 0f       	add	r18, r18
     d78:	33 1f       	adc	r19, r19
     d7a:	4a 95       	dec	r20
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <Timebase_LPDownCounter_Get_Remaining_Period_Value+0xe>
     d7e:	28 0f       	add	r18, r24
     d80:	39 1f       	adc	r19, r25
     d82:	e2 0f       	add	r30, r18
     d84:	f3 1f       	adc	r31, r19
     d86:	23 a1       	ldd	r18, Z+35	; 0x23
     d88:	34 a1       	ldd	r19, Z+36	; 0x24
     d8a:	45 a1       	ldd	r20, Z+37	; 0x25
     d8c:	56 a1       	ldd	r21, Z+38	; 0x26
     d8e:	87 a1       	ldd	r24, Z+39	; 0x27
     d90:	90 a5       	ldd	r25, Z+40	; 0x28
     d92:	a1 a5       	ldd	r26, Z+41	; 0x29
     d94:	b2 a5       	ldd	r27, Z+42	; 0x2a
     d96:	28 1b       	sub	r18, r24
     d98:	39 0b       	sbc	r19, r25
     d9a:	4a 0b       	sbc	r20, r26
     d9c:	5b 0b       	sbc	r21, r27
     d9e:	57 ff       	sbrs	r21, 7
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <Timebase_LPDownCounter_Get_Remaining_Period_Value+0x42>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
     daa:	b9 01       	movw	r22, r18
     dac:	ca 01       	movw	r24, r20
     dae:	08 95       	ret

00000db0 <Timebase_LPDownCounter_Period_Value_Expired>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
     db4:	c0 91 1a 01 	lds	r28, 0x011A
     db8:	d0 91 1b 01 	lds	r29, 0x011B
     dbc:	68 2f       	mov	r22, r24
     dbe:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
     dc0:	fb 01       	movw	r30, r22
     dc2:	a4 e0       	ldi	r26, 0x04	; 4
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	aa 95       	dec	r26
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <Timebase_LPDownCounter_Period_Value_Expired+0x14>
     dcc:	e6 0f       	add	r30, r22
     dce:	f7 1f       	adc	r31, r23
     dd0:	ec 0f       	add	r30, r28
     dd2:	fd 1f       	adc	r31, r29
     dd4:	23 a1       	ldd	r18, Z+35	; 0x23
     dd6:	34 a1       	ldd	r19, Z+36	; 0x24
     dd8:	45 a1       	ldd	r20, Z+37	; 0x25
     dda:	56 a1       	ldd	r21, Z+38	; 0x26
     ddc:	87 a1       	ldd	r24, Z+39	; 0x27
     dde:	90 a5       	ldd	r25, Z+40	; 0x28
     de0:	a1 a5       	ldd	r26, Z+41	; 0x29
     de2:	b2 a5       	ldd	r27, Z+42	; 0x2a
     de4:	28 1b       	sub	r18, r24
     de6:	39 0b       	sbc	r19, r25
     de8:	4a 0b       	sbc	r20, r26
     dea:	5b 0b       	sbc	r21, r27
  if(temp < 0){
     dec:	57 fd       	sbrc	r21, 7
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
  return temp;
}


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_LPDownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	41 05       	cpc	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	11 f0       	breq	.+4      	; 0xdfe <Timebase_LPDownCounter_Period_Value_Expired+0x4e>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	10 c0       	rjmp	.+32     	; 0xe1e <Timebase_LPDownCounter_Period_Value_Expired+0x6e>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	cb 01       	movw	r24, r22
     e02:	54 e0       	ldi	r21, 0x04	; 4
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	5a 95       	dec	r21
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <Timebase_LPDownCounter_Period_Value_Expired+0x54>
     e0c:	86 0f       	add	r24, r22
     e0e:	97 1f       	adc	r25, r23
     e10:	c8 0f       	add	r28, r24
     e12:	d9 1f       	adc	r29, r25
     e14:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e16:	80 ff       	sbrs	r24, 0
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e1e:	82 2f       	mov	r24, r18
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	08 95       	ret

00000e26 <Timebase_LPDownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired_Event(uint8_t window){
     e26:	1f 93       	push	r17
     e28:	18 2f       	mov	r17, r24
  if(Timebase_LPDownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
     e2a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Timebase_LPDownCounter_Period_Value_Expired>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	11 f0       	breq	.+4      	; 0xe36 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x10>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	14 c0       	rjmp	.+40     	; 0xe5e <Timebase_LPDownCounter_Period_Value_Expired_Event+0x38>
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e36:	e0 91 1a 01 	lds	r30, 0x011A
     e3a:	f0 91 1b 01 	lds	r31, 0x011B
     e3e:	21 2f       	mov	r18, r17
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	c9 01       	movw	r24, r18
     e44:	b4 e0       	ldi	r27, 0x04	; 4
     e46:	88 0f       	add	r24, r24
     e48:	99 1f       	adc	r25, r25
     e4a:	ba 95       	dec	r27
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x20>
     e4e:	82 0f       	add	r24, r18
     e50:	93 1f       	adc	r25, r19
     e52:	e8 0f       	add	r30, r24
     e54:	f9 1f       	adc	r31, r25
     e56:	86 8d       	ldd	r24, Z+30	; 0x1e
     e58:	8e 7f       	andi	r24, 0xFE	; 254
     e5a:	86 8f       	std	Z+30, r24	; 0x1e
     e5c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e5e:	1f 91       	pop	r17
     e60:	08 95       	ret

00000e62 <Timebase_LPDownCounter_Update_All>:


void Timebase_LPDownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Update(i);
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	0e 94 89 05 	call	0xb12	; 0xb12 <Timebase_LPDownCounter_Update>
  }
}
     e68:	08 95       	ret

00000e6a <Timebase_LPDownCounter_Reset_All>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
     e6a:	e0 91 1a 01 	lds	r30, 0x011A
     e6e:	f0 91 1b 01 	lds	r31, 0x011B
     e72:	17 8e       	std	Z+31, r1	; 0x1f
     e74:	10 a2       	std	Z+32, r1	; 0x20
     e76:	11 a2       	std	Z+33, r1	; 0x21
     e78:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
     e7a:	13 a2       	std	Z+35, r1	; 0x23
     e7c:	14 a2       	std	Z+36, r1	; 0x24
     e7e:	15 a2       	std	Z+37, r1	; 0x25
     e80:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
     e82:	86 8d       	ldd	r24, Z+30	; 0x1e
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
     e88:	13 a6       	std	Z+43, r1	; 0x2b
     e8a:	14 a6       	std	Z+44, r1	; 0x2c
     e8c:	15 a6       	std	Z+45, r1	; 0x2d
     e8e:	16 a6       	std	Z+46, r1	; 0x2e

void Timebase_LPDownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Reset(i);
  }
}
     e90:	08 95       	ret

00000e92 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
     e92:	e0 91 1a 01 	lds	r30, 0x011A
     e96:	f0 91 1b 01 	lds	r31, 0x011B
     e9a:	85 8d       	ldd	r24, Z+29	; 0x1d
}
     e9c:	08 95       	ret

00000e9e <Timebase_Reset>:
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
     e9e:	08 95       	ret

00000ea0 <Timebase_LP_Reset>:


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
     ea0:	0e 94 35 07 	call	0xe6a	; 0xe6a <Timebase_LPDownCounter_Reset_All>
  #endif
}
     ea4:	08 95       	ret

00000ea6 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
     eac:	0e 94 69 00 	call	0xd2	; 0xd2 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
     eb0:	c8 01       	movw	r24, r16
     eb2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <Timebase_Timer_Enable>
  Timebase_Reset();
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Timebase_LPTimer_Enable>
}


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
     ebe:	0e 94 35 07 	call	0xe6a	; 0xe6a <Timebase_LPDownCounter_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <Timebase_Main_Loop_Executables>:
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
     ec8:	e0 91 1a 01 	lds	r30, 0x011A
     ecc:	f0 91 1b 01 	lds	r31, 0x011B
     ed0:	16 8a       	std	Z+22, r1	; 0x16
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
     ed2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ed4:	85 ff       	sbrs	r24, 5
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <Timebase_Main_Loop_Executables+0x22>
    Timebase_LPDownCounter_Update_All();
     ed8:	0e 94 31 07 	call	0xe62	; 0xe62 <Timebase_LPDownCounter_Update_All>
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
     edc:	e0 91 1a 01 	lds	r30, 0x011A
     ee0:	f0 91 1b 01 	lds	r31, 0x011B
     ee4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ee6:	8f 7d       	andi	r24, 0xDF	; 223
     ee8:	85 8f       	std	Z+29, r24	; 0x1d
     eea:	08 95       	ret

00000eec <Timebase_ISR_Executables>:
  #endif
}


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
     eec:	e0 91 1a 01 	lds	r30, 0x011A
     ef0:	f0 91 1b 01 	lds	r31, 0x011B
     ef4:	80 89       	ldd	r24, Z+16	; 0x10
     ef6:	91 89       	ldd	r25, Z+17	; 0x11
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	91 8b       	std	Z+17, r25	; 0x11
     efc:	80 8b       	std	Z+16, r24	; 0x10
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
     efe:	20 89       	ldd	r18, Z+16	; 0x10
     f00:	31 89       	ldd	r19, Z+17	; 0x11
     f02:	80 81       	ld	r24, Z
     f04:	91 81       	ldd	r25, Z+1	; 0x01
     f06:	28 17       	cp	r18, r24
     f08:	39 07       	cpc	r19, r25
     f0a:	68 f0       	brcs	.+26     	; 0xf26 <Timebase_ISR_Executables+0x3a>
    Timebase->Time.SubSecondsShadow = 0;
     f0c:	11 8a       	std	Z+17, r1	; 0x11
     f0e:	10 8a       	std	Z+16, r1	; 0x10
    Timebase->Time.SecondsShadow++;
     f10:	82 89       	ldd	r24, Z+18	; 0x12
     f12:	93 89       	ldd	r25, Z+19	; 0x13
     f14:	a4 89       	ldd	r26, Z+20	; 0x14
     f16:	b5 89       	ldd	r27, Z+21	; 0x15
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	a1 1d       	adc	r26, r1
     f1c:	b1 1d       	adc	r27, r1
     f1e:	82 8b       	std	Z+18, r24	; 0x12
     f20:	93 8b       	std	Z+19, r25	; 0x13
     f22:	a4 8b       	std	Z+20, r26	; 0x14
     f24:	b5 8b       	std	Z+21, r27	; 0x15
     f26:	08 95       	ret

00000f28 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	ef 93       	push	r30
     f48:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
     f4a:	e0 91 1a 01 	lds	r30, 0x011A
     f4e:	f0 91 1b 01 	lds	r31, 0x011B
     f52:	84 81       	ldd	r24, Z+4	; 0x04
     f54:	95 81       	ldd	r25, Z+5	; 0x05
     f56:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
     f58:	0e 94 76 07 	call	0xeec	; 0xeec <Timebase_ISR_Executables>
}
     f5c:	ff 91       	pop	r31
     f5e:	ef 91       	pop	r30
     f60:	bf 91       	pop	r27
     f62:	af 91       	pop	r26
     f64:	9f 91       	pop	r25
     f66:	8f 91       	pop	r24
     f68:	7f 91       	pop	r23
     f6a:	6f 91       	pop	r22
     f6c:	5f 91       	pop	r21
     f6e:	4f 91       	pop	r20
     f70:	3f 91       	pop	r19
     f72:	2f 91       	pop	r18
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <Timebase_LP_ISR_Executables>:
}


void Timebase_LP_ISR_Executables(void){
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds++;
     f7e:	e0 91 1a 01 	lds	r30, 0x011A
     f82:	f0 91 1b 01 	lds	r31, 0x011B
     f86:	87 89       	ldd	r24, Z+23	; 0x17
     f88:	90 8d       	ldd	r25, Z+24	; 0x18
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	90 8f       	std	Z+24, r25	; 0x18
     f8e:	87 8b       	std	Z+23, r24	; 0x17
  if(Timebase->Time.LPTimerSubSeconds >= Timebase->Config.LPUpdateRate){
     f90:	27 89       	ldd	r18, Z+23	; 0x17
     f92:	30 8d       	ldd	r19, Z+24	; 0x18
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	28 17       	cp	r18, r24
     f9a:	39 07       	cpc	r19, r25
     f9c:	68 f0       	brcs	.+26     	; 0xfb8 <Timebase_LP_ISR_Executables+0x3a>
    Timebase->Time.LPTimerSubSeconds = 0;
     f9e:	10 8e       	std	Z+24, r1	; 0x18
     fa0:	17 8a       	std	Z+23, r1	; 0x17
    Timebase->Time.LPTimerSeconds++;
     fa2:	81 8d       	ldd	r24, Z+25	; 0x19
     fa4:	92 8d       	ldd	r25, Z+26	; 0x1a
     fa6:	a3 8d       	ldd	r26, Z+27	; 0x1b
     fa8:	b4 8d       	ldd	r27, Z+28	; 0x1c
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	a1 1d       	adc	r26, r1
     fae:	b1 1d       	adc	r27, r1
     fb0:	81 8f       	std	Z+25, r24	; 0x19
     fb2:	92 8f       	std	Z+26, r25	; 0x1a
     fb4:	a3 8f       	std	Z+27, r26	; 0x1b
     fb6:	b4 8f       	std	Z+28, r27	; 0x1c
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
     fb8:	85 8d       	ldd	r24, Z+29	; 0x1d
     fba:	80 62       	ori	r24, 0x20	; 32
     fbc:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
}
     fbe:	08 95       	ret

00000fc0 <__vector_6>:

/**********************************LPTimer ISR Start*********************************/

#ifdef TIMEBASE_LP_TIMER_ENABLE

ISR(WDT_vect){
     fc0:	1f 92       	push	r1
     fc2:	0f 92       	push	r0
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	0f 92       	push	r0
     fc8:	11 24       	eor	r1, r1
     fca:	2f 93       	push	r18
     fcc:	3f 93       	push	r19
     fce:	4f 93       	push	r20
     fd0:	5f 93       	push	r21
     fd2:	6f 93       	push	r22
     fd4:	7f 93       	push	r23
     fd6:	8f 93       	push	r24
     fd8:	9f 93       	push	r25
     fda:	af 93       	push	r26
     fdc:	bf 93       	push	r27
     fde:	ef 93       	push	r30
     fe0:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
     fe2:	e0 e6       	ldi	r30, 0x60	; 96
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	80 64       	ori	r24, 0x40	; 64
     fea:	80 83       	st	Z, r24
  Timebase_LP_ISR_Executables();
     fec:	0e 94 bf 07 	call	0xf7e	; 0xf7e <Timebase_LP_ISR_Executables>
}
     ff0:	ff 91       	pop	r31
     ff2:	ef 91       	pop	r30
     ff4:	bf 91       	pop	r27
     ff6:	af 91       	pop	r26
     ff8:	9f 91       	pop	r25
     ffa:	8f 91       	pop	r24
     ffc:	7f 91       	pop	r23
     ffe:	6f 91       	pop	r22
    1000:	5f 91       	pop	r21
    1002:	4f 91       	pop	r20
    1004:	3f 91       	pop	r19
    1006:	2f 91       	pop	r18
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	0f 90       	pop	r0
    100e:	1f 90       	pop	r1
    1010:	18 95       	reti

00001012 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    1012:	10 92 10 01 	sts	0x0110, r1
    1016:	e1 e1       	ldi	r30, 0x11	; 17
    1018:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    101a:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	e9 31       	cpi	r30, 0x19	; 25
    1020:	f8 07       	cpc	r31, r24
    1022:	d9 f7       	brne	.-10     	; 0x101a <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    1024:	10 82       	st	Z, r1
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
  }
  #endif
  
}
    1026:	08 95       	ret

00001028 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    1028:	08 95       	ret

0000102a <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    102a:	08 95       	ret

0000102c <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1030:	60 e6       	ldi	r22, 0x60	; 96
    1032:	73 ee       	ldi	r23, 0xE3	; 227
    1034:	86 e1       	ldi	r24, 0x16	; 22
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 ef 09 	call	0x13de	; 0x13de <__udivmodsi4>
    103c:	21 50       	subi	r18, 0x01	; 1
    103e:	30 40       	sbci	r19, 0x00	; 0
    1040:	40 40       	sbci	r20, 0x00	; 0
    1042:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    1044:	e0 ec       	ldi	r30, 0xC0	; 192
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    104e:	bb 27       	eor	r27, r27
    1050:	a5 2f       	mov	r26, r21
    1052:	94 2f       	mov	r25, r20
    1054:	83 2f       	mov	r24, r19
    1056:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    105a:	20 93 c4 00 	sts	0x00C4, r18
}
    105e:	08 95       	ret

00001060 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    1060:	e1 ec       	ldi	r30, 0xC1	; 193
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	88 60       	ori	r24, 0x08	; 8
    1068:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    106a:	86 e0       	ldi	r24, 0x06	; 6
    106c:	80 93 c2 00 	sts	0x00C2, r24
}
    1070:	08 95       	ret

00001072 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    1072:	e1 ec       	ldi	r30, 0xC1	; 193
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	80 61       	ori	r24, 0x10	; 16
    107a:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    107c:	86 e0       	ldi	r24, 0x06	; 6
    107e:	80 93 c2 00 	sts	0x00C2, r24
}
    1082:	08 95       	ret

00001084 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    1084:	e1 ec       	ldi	r30, 0xC1	; 193
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 68       	ori	r24, 0x80	; 128
    108c:	80 83       	st	Z, r24
  sei();
    108e:	78 94       	sei
}
    1090:	08 95       	ret

00001092 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    1092:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1094:	80 91 c0 00 	lds	r24, 0x00C0
    1098:	85 ff       	sbrs	r24, 5
    109a:	fc cf       	rjmp	.-8      	; 0x1094 <UART_Transmit_Byte+0x2>
  UDR0=val;
    109c:	90 93 c6 00 	sts	0x00C6, r25
}
    10a0:	08 95       	ret

000010a2 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    10ac:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    10ae:	80 91 c0 00 	lds	r24, 0x00C0
    10b2:	84 ff       	sbrs	r24, 4
    10b4:	05 c0       	rjmp	.+10     	; 0x10c0 <UART_Receive_Byte+0x1e>
    val=UDR0;
    10b6:	80 91 c6 00 	lds	r24, 0x00C6
    10ba:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    10c0:	80 91 c0 00 	lds	r24, 0x00C0
    10c4:	83 ff       	sbrs	r24, 3
    10c6:	07 c0       	rjmp	.+14     	; 0x10d6 <UART_Receive_Byte+0x34>
    val=UDR0;
    10c8:	80 91 c6 00 	lds	r24, 0x00C6
    10cc:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    10ce:	82 e0       	ldi	r24, 0x02	; 2
    10d0:	80 93 10 01 	sts	0x0110, r24
    10d4:	05 c0       	rjmp	.+10     	; 0x10e0 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    10d6:	80 91 c6 00 	lds	r24, 0x00C6
    10da:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    10dc:	10 92 10 01 	sts	0x0110, r1
  }
  return val;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e2:	0f 90       	pop	r0
    10e4:	cf 91       	pop	r28
    10e6:	df 91       	pop	r29
    10e8:	08 95       	ret

000010ea <UART_Transmit_Byte_Hex>:
}
#endif



void UART_Transmit_Byte_Hex(uint32_t val){
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ab 01       	movw	r20, r22
    10f2:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    10f4:	4f 3f       	cpi	r20, 0xFF	; 255
    10f6:	51 05       	cpc	r21, r1
    10f8:	61 05       	cpc	r22, r1
    10fa:	71 05       	cpc	r23, r1
    10fc:	09 f0       	breq	.+2      	; 0x1100 <UART_Transmit_Byte_Hex+0x16>
    10fe:	28 f4       	brcc	.+10     	; 0x110a <UART_Transmit_Byte_Hex+0x20>
    1100:	e8 e0       	ldi	r30, 0x08	; 8
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	c2 e0       	ldi	r28, 0x02	; 2
    1106:	d0 e0       	ldi	r29, 0x00	; 0
    1108:	11 c0       	rjmp	.+34     	; 0x112c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    110a:	40 30       	cpi	r20, 0x00	; 0
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	58 07       	cpc	r21, r24
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	68 07       	cpc	r22, r24
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	78 07       	cpc	r23, r24
    1118:	28 f0       	brcs	.+10     	; 0x1124 <UART_Transmit_Byte_Hex+0x3a>
    111a:	e0 e2       	ldi	r30, 0x20	; 32
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	c8 e0       	ldi	r28, 0x08	; 8
    1120:	d0 e0       	ldi	r29, 0x00	; 0
    1122:	04 c0       	rjmp	.+8      	; 0x112c <UART_Transmit_Byte_Hex+0x42>
    1124:	e0 e1       	ldi	r30, 0x10	; 16
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	c4 e0       	ldi	r28, 0x04	; 4
    112a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    112c:	80 91 c0 00 	lds	r24, 0x00C0
    1130:	85 ff       	sbrs	r24, 5
    1132:	fc cf       	rjmp	.-8      	; 0x112c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    1134:	80 e3       	ldi	r24, 0x30	; 48
    1136:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    113a:	80 91 c0 00 	lds	r24, 0x00C0
    113e:	85 ff       	sbrs	r24, 5
    1140:	fc cf       	rjmp	.-8      	; 0x113a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    1142:	88 e7       	ldi	r24, 0x78	; 120
    1144:	80 93 c6 00 	sts	0x00C6, r24
    1148:	10 e0       	ldi	r17, 0x00	; 0
    114a:	1f c0       	rjmp	.+62     	; 0x118a <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    114c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    114e:	db 01       	movw	r26, r22
    1150:	ca 01       	movw	r24, r20
    1152:	0e 2e       	mov	r0, r30
    1154:	04 c0       	rjmp	.+8      	; 0x115e <UART_Transmit_Byte_Hex+0x74>
    1156:	b6 95       	lsr	r27
    1158:	a7 95       	ror	r26
    115a:	97 95       	ror	r25
    115c:	87 95       	ror	r24
    115e:	0a 94       	dec	r0
    1160:	d2 f7       	brpl	.-12     	; 0x1156 <UART_Transmit_Byte_Hex+0x6c>
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	8f 70       	andi	r24, 0x0F	; 15
    1166:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    1168:	8a 30       	cpi	r24, 0x0A	; 10
    116a:	91 05       	cpc	r25, r1
    116c:	20 f0       	brcs	.+8      	; 0x1176 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    116e:	9c 01       	movw	r18, r24
    1170:	29 5c       	subi	r18, 0xC9	; 201
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	03 c0       	rjmp	.+6      	; 0x117c <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    1176:	9c 01       	movw	r18, r24
    1178:	20 5d       	subi	r18, 0xD0	; 208
    117a:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    117c:	80 91 c0 00 	lds	r24, 0x00C0
    1180:	85 ff       	sbrs	r24, 5
    1182:	fc cf       	rjmp	.-8      	; 0x117c <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    1184:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    1188:	1f 5f       	subi	r17, 0xFF	; 255
    118a:	81 2f       	mov	r24, r17
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	8c 17       	cp	r24, r28
    1190:	9d 07       	cpc	r25, r29
    1192:	e0 f2       	brcs	.-72     	; 0x114c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	08 95       	ret

0000119c <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    119c:	cf 92       	push	r12
    119e:	df 92       	push	r13
    11a0:	ef 92       	push	r14
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ab 01       	movw	r20, r22
    11ae:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    11b0:	4f 3f       	cpi	r20, 0xFF	; 255
    11b2:	51 05       	cpc	r21, r1
    11b4:	61 05       	cpc	r22, r1
    11b6:	71 05       	cpc	r23, r1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <UART_Transmit_Byte_Bin+0x20>
    11ba:	10 f4       	brcc	.+4      	; 0x11c0 <UART_Transmit_Byte_Bin+0x24>
    11bc:	97 e0       	ldi	r25, 0x07	; 7
    11be:	0b c0       	rjmp	.+22     	; 0x11d6 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    11c0:	40 30       	cpi	r20, 0x00	; 0
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	58 07       	cpc	r21, r24
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	68 07       	cpc	r22, r24
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	78 07       	cpc	r23, r24
    11ce:	10 f0       	brcs	.+4      	; 0x11d4 <UART_Transmit_Byte_Bin+0x38>
    11d0:	9f e1       	ldi	r25, 0x1F	; 31
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <UART_Transmit_Byte_Bin+0x3a>
    11d4:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    11d6:	80 91 c0 00 	lds	r24, 0x00C0
    11da:	85 ff       	sbrs	r24, 5
    11dc:	fc cf       	rjmp	.-8      	; 0x11d6 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    11de:	80 e3       	ldi	r24, 0x30	; 48
    11e0:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    11e4:	80 91 c0 00 	lds	r24, 0x00C0
    11e8:	85 ff       	sbrs	r24, 5
    11ea:	fc cf       	rjmp	.-8      	; 0x11e4 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    11ec:	82 e6       	ldi	r24, 0x62	; 98
    11ee:	80 93 c6 00 	sts	0x00C6, r24
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    11f6:	e9 2f       	mov	r30, r25
    11f8:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    11fa:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    11fc:	11 e3       	ldi	r17, 0x31	; 49
    11fe:	ef 01       	movw	r28, r30
    1200:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1202:	cf 01       	movw	r24, r30
    1204:	82 1b       	sub	r24, r18
    1206:	93 0b       	sbc	r25, r19
    1208:	6a 01       	movw	r12, r20
    120a:	7b 01       	movw	r14, r22
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <UART_Transmit_Byte_Bin+0x7a>
    120e:	f6 94       	lsr	r15
    1210:	e7 94       	ror	r14
    1212:	d7 94       	ror	r13
    1214:	c7 94       	ror	r12
    1216:	8a 95       	dec	r24
    1218:	d2 f7       	brpl	.-12     	; 0x120e <UART_Transmit_Byte_Bin+0x72>
    121a:	d7 01       	movw	r26, r14
    121c:	c6 01       	movw	r24, r12
    121e:	81 70       	andi	r24, 0x01	; 1
    1220:	90 70       	andi	r25, 0x00	; 0
    1222:	89 2b       	or	r24, r25
    1224:	39 f0       	breq	.+14     	; 0x1234 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1226:	80 91 c0 00 	lds	r24, 0x00C0
    122a:	85 ff       	sbrs	r24, 5
    122c:	fc cf       	rjmp	.-8      	; 0x1226 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    122e:	10 93 c6 00 	sts	0x00C6, r17
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1234:	80 91 c0 00 	lds	r24, 0x00C0
    1238:	85 ff       	sbrs	r24, 5
    123a:	fc cf       	rjmp	.-8      	; 0x1234 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    123c:	00 93 c6 00 	sts	0x00C6, r16
    1240:	2f 5f       	subi	r18, 0xFF	; 255
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    1244:	2c 17       	cp	r18, r28
    1246:	3d 07       	cpc	r19, r29
    1248:	e1 f6       	brne	.-72     	; 0x1202 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    124a:	df 91       	pop	r29
    124c:	cf 91       	pop	r28
    124e:	1f 91       	pop	r17
    1250:	0f 91       	pop	r16
    1252:	ff 90       	pop	r15
    1254:	ef 90       	pop	r14
    1256:	df 90       	pop	r13
    1258:	cf 90       	pop	r12
    125a:	08 95       	ret

0000125c <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    125c:	ac 01       	movw	r20, r24
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1262:	80 91 c0 00 	lds	r24, 0x00C0
    1266:	85 ff       	sbrs	r24, 5
    1268:	fc cf       	rjmp	.-8      	; 0x1262 <UART_Transmit_Text+0x6>
  UDR0=val;
    126a:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    126e:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    1270:	fa 01       	movw	r30, r20
    1272:	e2 0f       	add	r30, r18
    1274:	f1 1d       	adc	r31, r1
    1276:	e0 81       	ld	r30, Z
    1278:	ee 23       	and	r30, r30
    127a:	99 f7       	brne	.-26     	; 0x1262 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    127c:	08 95       	ret

0000127e <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    127e:	8a e0       	ldi	r24, 0x0A	; 10
    1280:	91 e0       	ldi	r25, 0x01	; 1
    1282:	0e 94 2e 09 	call	0x125c	; 0x125c <UART_Transmit_Text>
}
    1286:	08 95       	ret

00001288 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    1288:	8d e0       	ldi	r24, 0x0D	; 13
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 2e 09 	call	0x125c	; 0x125c <UART_Transmit_Text>
}
    1290:	08 95       	ret

00001292 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	6b 01       	movw	r12, r22
    12a2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    12a4:	61 15       	cp	r22, r1
    12a6:	71 05       	cpc	r23, r1
    12a8:	81 05       	cpc	r24, r1
    12aa:	91 05       	cpc	r25, r1
    12ac:	31 f4       	brne	.+12     	; 0x12ba <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    12ae:	10 92 11 01 	sts	0x0111, r1
    UART.InputNumberDigits=1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 93 19 01 	sts	0x0119, r24
    12b8:	23 c0       	rjmp	.+70     	; 0x1300 <UART_Determine_Digit_Numbers+0x6e>
    12ba:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    12bc:	0b 2d       	mov	r16, r11
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	00 5f       	subi	r16, 0xF0	; 240
    12c2:	1e 4f       	sbci	r17, 0xFE	; 254
    12c4:	c7 01       	movw	r24, r14
    12c6:	b6 01       	movw	r22, r12
    12c8:	2a e0       	ldi	r18, 0x0A	; 10
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0e 94 ef 09 	call	0x13de	; 0x13de <__udivmodsi4>
    12d4:	f8 01       	movw	r30, r16
    12d6:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	0e 94 ef 09 	call	0x13de	; 0x13de <__udivmodsi4>
    12e8:	c9 01       	movw	r24, r18
    12ea:	da 01       	movw	r26, r20
    12ec:	6c 01       	movw	r12, r24
    12ee:	7d 01       	movw	r14, r26
      i++;
    12f0:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    12f2:	c1 14       	cp	r12, r1
    12f4:	d1 04       	cpc	r13, r1
    12f6:	e1 04       	cpc	r14, r1
    12f8:	f1 04       	cpc	r15, r1
    12fa:	01 f7       	brne	.-64     	; 0x12bc <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    12fc:	b0 92 19 01 	sts	0x0119, r11
  }
}
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	df 90       	pop	r13
    130a:	cf 90       	pop	r12
    130c:	bf 90       	pop	r11
    130e:	08 95       	ret

00001310 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    1310:	e0 91 19 01 	lds	r30, 0x0119
    1314:	0f c0       	rjmp	.+30     	; 0x1334 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    1316:	2e 2f       	mov	r18, r30
    1318:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    131a:	e2 2f       	mov	r30, r18
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	e0 5f       	subi	r30, 0xF0	; 240
    1320:	fe 4f       	sbci	r31, 0xFE	; 254
    1322:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1324:	80 91 c0 00 	lds	r24, 0x00C0
    1328:	85 ff       	sbrs	r24, 5
    132a:	fc cf       	rjmp	.-8      	; 0x1324 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    132c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    132e:	90 93 c6 00 	sts	0x00C6, r25
    1332:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    1334:	ee 23       	and	r30, r30
    1336:	79 f7       	brne	.-34     	; 0x1316 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    1338:	08 95       	ret

0000133a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    133a:	9b 01       	movw	r18, r22
    133c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    133e:	97 ff       	sbrs	r25, 7
    1340:	0e c0       	rjmp	.+28     	; 0x135e <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1342:	80 91 c0 00 	lds	r24, 0x00C0
    1346:	85 ff       	sbrs	r24, 5
    1348:	fc cf       	rjmp	.-8      	; 0x1342 <UART_Transmit_Number+0x8>
  UDR0=val;
    134a:	8d e2       	ldi	r24, 0x2D	; 45
    134c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    1350:	50 95       	com	r21
    1352:	40 95       	com	r20
    1354:	30 95       	com	r19
    1356:	21 95       	neg	r18
    1358:	3f 4f       	sbci	r19, 0xFF	; 255
    135a:	4f 4f       	sbci	r20, 0xFF	; 255
    135c:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    135e:	ca 01       	movw	r24, r20
    1360:	b9 01       	movw	r22, r18
    1362:	0e 94 49 09 	call	0x1292	; 0x1292 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    1366:	0e 94 88 09 	call	0x1310	; 0x1310 <UART_Transmit_Number_Digits>
}
    136a:	08 95       	ret

0000136c <UART_Flush_Buffer>:
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
  #endif
}
    136c:	08 95       	ret

0000136e <UART_Init>:
}
#endif



void UART_Init(uint32_t baud){
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	7b 01       	movw	r14, r22
    1378:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    137a:	0e 94 09 08 	call	0x1012	; 0x1012 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    137e:	c8 01       	movw	r24, r16
    1380:	b7 01       	movw	r22, r14
    1382:	0e 94 16 08 	call	0x102c	; 0x102c <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    1386:	e1 ec       	ldi	r30, 0xC1	; 193
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 60       	ori	r24, 0x08	; 8
    138e:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    1390:	86 e0       	ldi	r24, 0x06	; 6
    1392:	80 93 c2 00 	sts	0x00C2, r24
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
}
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	08 95       	ret

000013a0 <__mulsi3>:
    13a0:	62 9f       	mul	r22, r18
    13a2:	d0 01       	movw	r26, r0
    13a4:	73 9f       	mul	r23, r19
    13a6:	f0 01       	movw	r30, r0
    13a8:	82 9f       	mul	r24, r18
    13aa:	e0 0d       	add	r30, r0
    13ac:	f1 1d       	adc	r31, r1
    13ae:	64 9f       	mul	r22, r20
    13b0:	e0 0d       	add	r30, r0
    13b2:	f1 1d       	adc	r31, r1
    13b4:	92 9f       	mul	r25, r18
    13b6:	f0 0d       	add	r31, r0
    13b8:	83 9f       	mul	r24, r19
    13ba:	f0 0d       	add	r31, r0
    13bc:	74 9f       	mul	r23, r20
    13be:	f0 0d       	add	r31, r0
    13c0:	65 9f       	mul	r22, r21
    13c2:	f0 0d       	add	r31, r0
    13c4:	99 27       	eor	r25, r25
    13c6:	72 9f       	mul	r23, r18
    13c8:	b0 0d       	add	r27, r0
    13ca:	e1 1d       	adc	r30, r1
    13cc:	f9 1f       	adc	r31, r25
    13ce:	63 9f       	mul	r22, r19
    13d0:	b0 0d       	add	r27, r0
    13d2:	e1 1d       	adc	r30, r1
    13d4:	f9 1f       	adc	r31, r25
    13d6:	bd 01       	movw	r22, r26
    13d8:	cf 01       	movw	r24, r30
    13da:	11 24       	eor	r1, r1
    13dc:	08 95       	ret

000013de <__udivmodsi4>:
    13de:	a1 e2       	ldi	r26, 0x21	; 33
    13e0:	1a 2e       	mov	r1, r26
    13e2:	aa 1b       	sub	r26, r26
    13e4:	bb 1b       	sub	r27, r27
    13e6:	fd 01       	movw	r30, r26
    13e8:	0d c0       	rjmp	.+26     	; 0x1404 <__udivmodsi4_ep>

000013ea <__udivmodsi4_loop>:
    13ea:	aa 1f       	adc	r26, r26
    13ec:	bb 1f       	adc	r27, r27
    13ee:	ee 1f       	adc	r30, r30
    13f0:	ff 1f       	adc	r31, r31
    13f2:	a2 17       	cp	r26, r18
    13f4:	b3 07       	cpc	r27, r19
    13f6:	e4 07       	cpc	r30, r20
    13f8:	f5 07       	cpc	r31, r21
    13fa:	20 f0       	brcs	.+8      	; 0x1404 <__udivmodsi4_ep>
    13fc:	a2 1b       	sub	r26, r18
    13fe:	b3 0b       	sbc	r27, r19
    1400:	e4 0b       	sbc	r30, r20
    1402:	f5 0b       	sbc	r31, r21

00001404 <__udivmodsi4_ep>:
    1404:	66 1f       	adc	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	1a 94       	dec	r1
    140e:	69 f7       	brne	.-38     	; 0x13ea <__udivmodsi4_loop>
    1410:	60 95       	com	r22
    1412:	70 95       	com	r23
    1414:	80 95       	com	r24
    1416:	90 95       	com	r25
    1418:	9b 01       	movw	r18, r22
    141a:	ac 01       	movw	r20, r24
    141c:	bd 01       	movw	r22, r26
    141e:	cf 01       	movw	r24, r30
    1420:	08 95       	ret

00001422 <__divmodsi4>:
    1422:	97 fb       	bst	r25, 7
    1424:	09 2e       	mov	r0, r25
    1426:	05 26       	eor	r0, r21
    1428:	0e d0       	rcall	.+28     	; 0x1446 <__divmodsi4_neg1>
    142a:	57 fd       	sbrc	r21, 7
    142c:	04 d0       	rcall	.+8      	; 0x1436 <__divmodsi4_neg2>
    142e:	d7 df       	rcall	.-82     	; 0x13de <__udivmodsi4>
    1430:	0a d0       	rcall	.+20     	; 0x1446 <__divmodsi4_neg1>
    1432:	00 1c       	adc	r0, r0
    1434:	38 f4       	brcc	.+14     	; 0x1444 <__divmodsi4_exit>

00001436 <__divmodsi4_neg2>:
    1436:	50 95       	com	r21
    1438:	40 95       	com	r20
    143a:	30 95       	com	r19
    143c:	21 95       	neg	r18
    143e:	3f 4f       	sbci	r19, 0xFF	; 255
    1440:	4f 4f       	sbci	r20, 0xFF	; 255
    1442:	5f 4f       	sbci	r21, 0xFF	; 255

00001444 <__divmodsi4_exit>:
    1444:	08 95       	ret

00001446 <__divmodsi4_neg1>:
    1446:	f6 f7       	brtc	.-4      	; 0x1444 <__divmodsi4_exit>
    1448:	90 95       	com	r25
    144a:	80 95       	com	r24
    144c:	70 95       	com	r23
    144e:	61 95       	neg	r22
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	8f 4f       	sbci	r24, 0xFF	; 255
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	08 95       	ret

00001458 <_exit>:
    1458:	f8 94       	cli

0000145a <__stop_program>:
    145a:	ff cf       	rjmp	.-2      	; 0x145a <__stop_program>
