
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001d98  00001e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000df  0080011a  0080011a  00001e46  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000e11  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002afa  00000000  00000000  00002cb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d9  00000000  00000000  000057b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001743  00000000  00000000  00005d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  000074d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001010  00000000  00000000  00007b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000fd2  00000000  00000000  00008b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9b 02 	jmp	0x536	; 0x536 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e9       	ldi	r30, 0x98	; 152
      7c:	fd e1       	ldi	r31, 0x1D	; 29
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 3f       	cpi	r26, 0xF9	; 249
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(1000000);
      a6:	60 e4       	ldi	r22, 0x40	; 64
      a8:	72 e4       	ldi	r23, 0x42	; 66
      aa:	8f e0       	ldi	r24, 0x0F	; 15
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 bf 02 	call	0x57e	; 0x57e <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timebase_DownCounter_SS_Set_Securely>
	UART_Transmit_Space();
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_EndValueSubSec(0));
	UART_Transmit_Space();*/
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	Timebase_Timer_Delay_SubSeconds(100);
      e6:	84 e6       	ldi	r24, 0x64	; 100
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <Timebase_Timer_Delay_SubSeconds>
	
	//Add update req flag
	PORTD |= (1<<6);
      ee:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
      f0:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
      f4:	5e 98       	cbi	0x0b, 6	; 11
      f6:	f7 cf       	rjmp	.-18     	; 0xe6 <main+0x40>

000000f8 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
      f8:	10 92 1a 01 	sts	0x011A, r1
      fc:	eb e1       	ldi	r30, 0x1B	; 27
      fe:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     100:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	e3 32       	cpi	r30, 0x23	; 35
     106:	f8 07       	cpc	r31, r24
     108:	d9 f7       	brne	.-10     	; 0x100 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     10a:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     10c:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     10e:	80 e2       	ldi	r24, 0x20	; 32
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	93 a3       	std	Z+35, r25	; 0x23
     114:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     116:	15 a2       	std	Z+37, r1	; 0x25
     118:	14 a2       	std	Z+36, r1	; 0x24
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	04 c0       	rjmp	.+8      	; 0x126 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     11e:	e6 5e       	subi	r30, 0xE6	; 230
     120:	fe 4f       	sbci	r31, 0xFE	; 254
     122:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     124:	2f 5f       	subi	r18, 0xFF	; 255
     126:	80 91 45 01 	lds	r24, 0x0145
     12a:	90 91 46 01 	lds	r25, 0x0146
     12e:	e2 2f       	mov	r30, r18
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	e8 17       	cp	r30, r24
     134:	f9 07       	cpc	r31, r25
     136:	98 f3       	brcs	.-26     	; 0x11e <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     138:	08 95       	ret

0000013a <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     13a:	08 95       	ret

0000013c <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     13c:	08 95       	ret

0000013e <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     13e:	9b 01       	movw	r18, r22
     140:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     142:	60 e6       	ldi	r22, 0x60	; 96
     144:	73 ee       	ldi	r23, 0xE3	; 227
     146:	86 e1       	ldi	r24, 0x16	; 22
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__udivmodsi4>
     14e:	21 50       	subi	r18, 0x01	; 1
     150:	30 40       	sbci	r19, 0x00	; 0
     152:	40 40       	sbci	r20, 0x00	; 0
     154:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     156:	e0 ec       	ldi	r30, 0xC0	; 192
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	82 60       	ori	r24, 0x02	; 2
     15e:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     160:	bb 27       	eor	r27, r27
     162:	a5 2f       	mov	r26, r21
     164:	94 2f       	mov	r25, r20
     166:	83 2f       	mov	r24, r19
     168:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     16c:	20 93 c4 00 	sts	0x00C4, r18
}
     170:	08 95       	ret

00000172 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     172:	e1 ec       	ldi	r30, 0xC1	; 193
     174:	f0 e0       	ldi	r31, 0x00	; 0
     176:	80 81       	ld	r24, Z
     178:	88 60       	ori	r24, 0x08	; 8
     17a:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     17c:	86 e0       	ldi	r24, 0x06	; 6
     17e:	80 93 c2 00 	sts	0x00C2, r24
}
     182:	08 95       	ret

00000184 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     184:	e1 ec       	ldi	r30, 0xC1	; 193
     186:	f0 e0       	ldi	r31, 0x00	; 0
     188:	80 81       	ld	r24, Z
     18a:	80 61       	ori	r24, 0x10	; 16
     18c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     18e:	86 e0       	ldi	r24, 0x06	; 6
     190:	80 93 c2 00 	sts	0x00C2, r24
}
     194:	08 95       	ret

00000196 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     196:	e1 ec       	ldi	r30, 0xC1	; 193
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	80 68       	ori	r24, 0x80	; 128
     19e:	80 83       	st	Z, r24
  sei();
     1a0:	78 94       	sei
}
     1a2:	08 95       	ret

000001a4 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1a4:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1a6:	80 91 c0 00 	lds	r24, 0x00C0
     1aa:	85 ff       	sbrs	r24, 5
     1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1ae:	90 93 c6 00 	sts	0x00C6, r25
}
     1b2:	08 95       	ret

000001b4 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1b4:	df 93       	push	r29
     1b6:	cf 93       	push	r28
     1b8:	0f 92       	push	r0
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1be:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1c0:	80 91 c0 00 	lds	r24, 0x00C0
     1c4:	84 ff       	sbrs	r24, 4
     1c6:	05 c0       	rjmp	.+10     	; 0x1d2 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1c8:	80 91 c6 00 	lds	r24, 0x00C6
     1cc:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1ce:	81 e0       	ldi	r24, 0x01	; 1
     1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1d2:	80 91 c0 00 	lds	r24, 0x00C0
     1d6:	83 ff       	sbrs	r24, 3
     1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <UART_Receive_Byte+0x34>
    val=UDR0;
     1da:	80 91 c6 00 	lds	r24, 0x00C6
     1de:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     1e0:	82 e0       	ldi	r24, 0x02	; 2
     1e2:	80 93 1a 01 	sts	0x011A, r24
     1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     1e8:	80 91 c6 00 	lds	r24, 0x00C6
     1ec:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     1ee:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f4:	0f 90       	pop	r0
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     1fc:	80 91 24 01 	lds	r24, 0x0124
}
     200:	08 95       	ret

00000202 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     202:	10 92 24 01 	sts	0x0124, r1
}
     206:	08 95       	ret

00000208 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ab 01       	movw	r20, r22
     210:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     212:	4f 3f       	cpi	r20, 0xFF	; 255
     214:	51 05       	cpc	r21, r1
     216:	61 05       	cpc	r22, r1
     218:	71 05       	cpc	r23, r1
     21a:	09 f0       	breq	.+2      	; 0x21e <UART_Transmit_Byte_Hex+0x16>
     21c:	28 f4       	brcc	.+10     	; 0x228 <UART_Transmit_Byte_Hex+0x20>
     21e:	e8 e0       	ldi	r30, 0x08	; 8
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	c2 e0       	ldi	r28, 0x02	; 2
     224:	d0 e0       	ldi	r29, 0x00	; 0
     226:	11 c0       	rjmp	.+34     	; 0x24a <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     228:	40 30       	cpi	r20, 0x00	; 0
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	58 07       	cpc	r21, r24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	68 07       	cpc	r22, r24
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	78 07       	cpc	r23, r24
     236:	28 f0       	brcs	.+10     	; 0x242 <UART_Transmit_Byte_Hex+0x3a>
     238:	e0 e2       	ldi	r30, 0x20	; 32
     23a:	f0 e0       	ldi	r31, 0x00	; 0
     23c:	c8 e0       	ldi	r28, 0x08	; 8
     23e:	d0 e0       	ldi	r29, 0x00	; 0
     240:	04 c0       	rjmp	.+8      	; 0x24a <UART_Transmit_Byte_Hex+0x42>
     242:	e0 e1       	ldi	r30, 0x10	; 16
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	c4 e0       	ldi	r28, 0x04	; 4
     248:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     24a:	80 91 c0 00 	lds	r24, 0x00C0
     24e:	85 ff       	sbrs	r24, 5
     250:	fc cf       	rjmp	.-8      	; 0x24a <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     252:	80 e3       	ldi	r24, 0x30	; 48
     254:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     258:	80 91 c0 00 	lds	r24, 0x00C0
     25c:	85 ff       	sbrs	r24, 5
     25e:	fc cf       	rjmp	.-8      	; 0x258 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     260:	88 e7       	ldi	r24, 0x78	; 120
     262:	80 93 c6 00 	sts	0x00C6, r24
     266:	10 e0       	ldi	r17, 0x00	; 0
     268:	1f c0       	rjmp	.+62     	; 0x2a8 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     26a:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     26c:	db 01       	movw	r26, r22
     26e:	ca 01       	movw	r24, r20
     270:	0e 2e       	mov	r0, r30
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x74>
     274:	b6 95       	lsr	r27
     276:	a7 95       	ror	r26
     278:	97 95       	ror	r25
     27a:	87 95       	ror	r24
     27c:	0a 94       	dec	r0
     27e:	d2 f7       	brpl	.-12     	; 0x274 <UART_Transmit_Byte_Hex+0x6c>
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	8f 70       	andi	r24, 0x0F	; 15
     284:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     286:	8a 30       	cpi	r24, 0x0A	; 10
     288:	91 05       	cpc	r25, r1
     28a:	20 f0       	brcs	.+8      	; 0x294 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     28c:	9c 01       	movw	r18, r24
     28e:	29 5c       	subi	r18, 0xC9	; 201
     290:	3f 4f       	sbci	r19, 0xFF	; 255
     292:	03 c0       	rjmp	.+6      	; 0x29a <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     294:	9c 01       	movw	r18, r24
     296:	20 5d       	subi	r18, 0xD0	; 208
     298:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     29a:	80 91 c0 00 	lds	r24, 0x00C0
     29e:	85 ff       	sbrs	r24, 5
     2a0:	fc cf       	rjmp	.-8      	; 0x29a <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2a2:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2a6:	1f 5f       	subi	r17, 0xFF	; 255
     2a8:	81 2f       	mov	r24, r17
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	8c 17       	cp	r24, r28
     2ae:	9d 07       	cpc	r25, r29
     2b0:	e0 f2       	brcs	.-72     	; 0x26a <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2b2:	df 91       	pop	r29
     2b4:	cf 91       	pop	r28
     2b6:	1f 91       	pop	r17
     2b8:	08 95       	ret

000002ba <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	ab 01       	movw	r20, r22
     2cc:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2ce:	4f 3f       	cpi	r20, 0xFF	; 255
     2d0:	51 05       	cpc	r21, r1
     2d2:	61 05       	cpc	r22, r1
     2d4:	71 05       	cpc	r23, r1
     2d6:	09 f0       	breq	.+2      	; 0x2da <UART_Transmit_Byte_Bin+0x20>
     2d8:	10 f4       	brcc	.+4      	; 0x2de <UART_Transmit_Byte_Bin+0x24>
     2da:	97 e0       	ldi	r25, 0x07	; 7
     2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     2de:	40 30       	cpi	r20, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	58 07       	cpc	r21, r24
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	68 07       	cpc	r22, r24
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	78 07       	cpc	r23, r24
     2ec:	10 f0       	brcs	.+4      	; 0x2f2 <UART_Transmit_Byte_Bin+0x38>
     2ee:	9f e1       	ldi	r25, 0x1F	; 31
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <UART_Transmit_Byte_Bin+0x3a>
     2f2:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2f4:	80 91 c0 00 	lds	r24, 0x00C0
     2f8:	85 ff       	sbrs	r24, 5
     2fa:	fc cf       	rjmp	.-8      	; 0x2f4 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     2fc:	80 e3       	ldi	r24, 0x30	; 48
     2fe:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     302:	80 91 c0 00 	lds	r24, 0x00C0
     306:	85 ff       	sbrs	r24, 5
     308:	fc cf       	rjmp	.-8      	; 0x302 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     30a:	82 e6       	ldi	r24, 0x62	; 98
     30c:	80 93 c6 00 	sts	0x00C6, r24
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     314:	e9 2f       	mov	r30, r25
     316:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     318:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     31a:	11 e3       	ldi	r17, 0x31	; 49
     31c:	ef 01       	movw	r28, r30
     31e:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     320:	cf 01       	movw	r24, r30
     322:	82 1b       	sub	r24, r18
     324:	93 0b       	sbc	r25, r19
     326:	6a 01       	movw	r12, r20
     328:	7b 01       	movw	r14, r22
     32a:	04 c0       	rjmp	.+8      	; 0x334 <UART_Transmit_Byte_Bin+0x7a>
     32c:	f6 94       	lsr	r15
     32e:	e7 94       	ror	r14
     330:	d7 94       	ror	r13
     332:	c7 94       	ror	r12
     334:	8a 95       	dec	r24
     336:	d2 f7       	brpl	.-12     	; 0x32c <UART_Transmit_Byte_Bin+0x72>
     338:	d7 01       	movw	r26, r14
     33a:	c6 01       	movw	r24, r12
     33c:	81 70       	andi	r24, 0x01	; 1
     33e:	90 70       	andi	r25, 0x00	; 0
     340:	89 2b       	or	r24, r25
     342:	39 f0       	breq	.+14     	; 0x352 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     344:	80 91 c0 00 	lds	r24, 0x00C0
     348:	85 ff       	sbrs	r24, 5
     34a:	fc cf       	rjmp	.-8      	; 0x344 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     34c:	10 93 c6 00 	sts	0x00C6, r17
     350:	06 c0       	rjmp	.+12     	; 0x35e <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     352:	80 91 c0 00 	lds	r24, 0x00C0
     356:	85 ff       	sbrs	r24, 5
     358:	fc cf       	rjmp	.-8      	; 0x352 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     35a:	00 93 c6 00 	sts	0x00C6, r16
     35e:	2f 5f       	subi	r18, 0xFF	; 255
     360:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     362:	2c 17       	cp	r18, r28
     364:	3d 07       	cpc	r19, r29
     366:	e1 f6       	brne	.-72     	; 0x320 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	df 90       	pop	r13
     376:	cf 90       	pop	r12
     378:	08 95       	ret

0000037a <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     37a:	ac 01       	movw	r20, r24
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	07 c0       	rjmp	.+14     	; 0x38e <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     380:	80 91 c0 00 	lds	r24, 0x00C0
     384:	85 ff       	sbrs	r24, 5
     386:	fc cf       	rjmp	.-8      	; 0x380 <UART_Transmit_Text+0x6>
  UDR0=val;
     388:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     38c:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     38e:	fa 01       	movw	r30, r20
     390:	e2 0f       	add	r30, r18
     392:	f1 1d       	adc	r31, r1
     394:	e0 81       	ld	r30, Z
     396:	ee 23       	and	r30, r30
     398:	99 f7       	brne	.-26     	; 0x380 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     39a:	08 95       	ret

0000039c <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_Text>
}
     3a4:	08 95       	ret

000003a6 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3a6:	83 e0       	ldi	r24, 0x03	; 3
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_Text>
}
     3ae:	08 95       	ret

000003b0 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	6b 01       	movw	r12, r22
     3c0:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3c2:	61 15       	cp	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	81 05       	cpc	r24, r1
     3c8:	91 05       	cpc	r25, r1
     3ca:	31 f4       	brne	.+12     	; 0x3d8 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3cc:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	80 93 23 01 	sts	0x0123, r24
     3d6:	23 c0       	rjmp	.+70     	; 0x41e <UART_Determine_Digit_Numbers+0x6e>
     3d8:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     3da:	0b 2d       	mov	r16, r11
     3dc:	10 e0       	ldi	r17, 0x00	; 0
     3de:	06 5e       	subi	r16, 0xE6	; 230
     3e0:	1e 4f       	sbci	r17, 0xFE	; 254
     3e2:	c7 01       	movw	r24, r14
     3e4:	b6 01       	movw	r22, r12
     3e6:	2a e0       	ldi	r18, 0x0A	; 10
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__udivmodsi4>
     3f2:	f8 01       	movw	r30, r16
     3f4:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     3f6:	c7 01       	movw	r24, r14
     3f8:	b6 01       	movw	r22, r12
     3fa:	2a e0       	ldi	r18, 0x0A	; 10
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	40 e0       	ldi	r20, 0x00	; 0
     400:	50 e0       	ldi	r21, 0x00	; 0
     402:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <__udivmodsi4>
     406:	c9 01       	movw	r24, r18
     408:	da 01       	movw	r26, r20
     40a:	6c 01       	movw	r12, r24
     40c:	7d 01       	movw	r14, r26
      i++;
     40e:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     410:	c1 14       	cp	r12, r1
     412:	d1 04       	cpc	r13, r1
     414:	e1 04       	cpc	r14, r1
     416:	f1 04       	cpc	r15, r1
     418:	01 f7       	brne	.-64     	; 0x3da <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     41a:	b0 92 23 01 	sts	0x0123, r11
  }
}
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	08 95       	ret

0000042e <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     42e:	e0 91 23 01 	lds	r30, 0x0123
     432:	0f c0       	rjmp	.+30     	; 0x452 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     434:	2e 2f       	mov	r18, r30
     436:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     438:	e2 2f       	mov	r30, r18
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	e6 5e       	subi	r30, 0xE6	; 230
     43e:	fe 4f       	sbci	r31, 0xFE	; 254
     440:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     442:	80 91 c0 00 	lds	r24, 0x00C0
     446:	85 ff       	sbrs	r24, 5
     448:	fc cf       	rjmp	.-8      	; 0x442 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     44a:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     44c:	90 93 c6 00 	sts	0x00C6, r25
     450:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     452:	ee 23       	and	r30, r30
     454:	79 f7       	brne	.-34     	; 0x434 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     456:	08 95       	ret

00000458 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     458:	9b 01       	movw	r18, r22
     45a:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     45c:	97 ff       	sbrs	r25, 7
     45e:	0e c0       	rjmp	.+28     	; 0x47c <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     460:	80 91 c0 00 	lds	r24, 0x00C0
     464:	85 ff       	sbrs	r24, 5
     466:	fc cf       	rjmp	.-8      	; 0x460 <UART_Transmit_Number+0x8>
  UDR0=val;
     468:	8d e2       	ldi	r24, 0x2D	; 45
     46a:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     46e:	50 95       	com	r21
     470:	40 95       	com	r20
     472:	30 95       	com	r19
     474:	21 95       	neg	r18
     476:	3f 4f       	sbci	r19, 0xFF	; 255
     478:	4f 4f       	sbci	r20, 0xFF	; 255
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     47c:	ca 01       	movw	r24, r20
     47e:	b9 01       	movw	r22, r18
     480:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     484:	0e 94 17 02 	call	0x42e	; 0x42e <UART_Transmit_Number_Digits>
}
     488:	08 95       	ret

0000048a <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     48a:	fc 01       	movw	r30, r24
     48c:	e6 5e       	subi	r30, 0xE6	; 230
     48e:	fe 4f       	sbci	r31, 0xFE	; 254
     490:	83 85       	ldd	r24, Z+11	; 0x0b
}
     492:	08 95       	ret

00000494 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     494:	20 91 47 01 	lds	r18, 0x0147
     498:	30 91 48 01 	lds	r19, 0x0148
}
     49c:	c9 01       	movw	r24, r18
     49e:	08 95       	ret

000004a0 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4a0:	10 92 1a 01 	sts	0x011A, r1
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4aa:	f9 01       	movw	r30, r18
     4ac:	e6 5e       	subi	r30, 0xE6	; 230
     4ae:	fe 4f       	sbci	r31, 0xFE	; 254
     4b0:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4b2:	2f 5f       	subi	r18, 0xFF	; 255
     4b4:	3f 4f       	sbci	r19, 0xFF	; 255
     4b6:	80 91 45 01 	lds	r24, 0x0145
     4ba:	90 91 46 01 	lds	r25, 0x0146
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	98 f3       	brcs	.-26     	; 0x4aa <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4c4:	10 92 48 01 	sts	0x0148, r1
     4c8:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4cc:	08 95       	ret

000004ce <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	0f 92       	push	r0
     4d4:	cd b7       	in	r28, 0x3d	; 61
     4d6:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     4d8:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     4da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <UART_Receive_Byte>
     4de:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     4e0:	80 91 1a 01 	lds	r24, 0x011A
     4e4:	88 23       	and	r24, r24
     4e6:	19 f5       	brne	.+70     	; 0x52e <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     4ee:	e0 91 47 01 	lds	r30, 0x0147
     4f2:	f0 91 48 01 	lds	r31, 0x0148
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	e6 5e       	subi	r30, 0xE6	; 230
     4fa:	fe 4f       	sbci	r31, 0xFE	; 254
     4fc:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     4fe:	80 91 47 01 	lds	r24, 0x0147
     502:	90 91 48 01 	lds	r25, 0x0148
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	90 93 48 01 	sts	0x0148, r25
     50c:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     510:	20 91 47 01 	lds	r18, 0x0147
     514:	30 91 48 01 	lds	r19, 0x0148
     518:	80 91 45 01 	lds	r24, 0x0145
     51c:	90 91 46 01 	lds	r25, 0x0146
     520:	28 17       	cp	r18, r24
     522:	39 07       	cpc	r19, r25
     524:	20 f0       	brcs	.+8      	; 0x52e <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     526:	10 92 48 01 	sts	0x0148, r1
     52a:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     52e:	0f 90       	pop	r0
     530:	cf 91       	pop	r28
     532:	df 91       	pop	r29
     534:	08 95       	ret

00000536 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     536:	1f 92       	push	r1
     538:	0f 92       	push	r0
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	0f 92       	push	r0
     53e:	11 24       	eor	r1, r1
     540:	2f 93       	push	r18
     542:	3f 93       	push	r19
     544:	4f 93       	push	r20
     546:	5f 93       	push	r21
     548:	6f 93       	push	r22
     54a:	7f 93       	push	r23
     54c:	8f 93       	push	r24
     54e:	9f 93       	push	r25
     550:	af 93       	push	r26
     552:	bf 93       	push	r27
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     558:	0e 94 67 02 	call	0x4ce	; 0x4ce <UART_Interrupt_Service_Routine>
}
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	7b 01       	movw	r14, r22
     588:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     58a:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     58e:	c8 01       	movw	r24, r16
     590:	b7 01       	movw	r22, r14
     592:	0e 94 9f 00 	call	0x13e	; 0x13e <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     596:	e1 ec       	ldi	r30, 0xC1	; 193
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	88 60       	ori	r24, 0x08	; 8
     59e:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5a0:	a2 ec       	ldi	r26, 0xC2	; 194
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	96 e0       	ldi	r25, 0x06	; 6
     5a6:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5a8:	80 81       	ld	r24, Z
     5aa:	80 61       	ori	r24, 0x10	; 16
     5ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5ae:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5b0:	80 81       	ld	r24, Z
     5b2:	80 68       	ori	r24, 0x80	; 128
     5b4:	80 83       	st	Z, r24
  sei();
     5b6:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5b8:	0e 94 50 02 	call	0x4a0	; 0x4a0 <UART_Flush_Buffer>
}
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	08 95       	ret

000005c6 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5c6:	8b e4       	ldi	r24, 0x4B	; 75
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	90 93 4a 01 	sts	0x014A, r25
     5ce:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     5d2:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5d6:	80 91 4b 01 	lds	r24, 0x014B
     5da:	84 60       	ori	r24, 0x04	; 4
     5dc:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5e0:	80 91 4b 01 	lds	r24, 0x014B
     5e4:	87 70       	andi	r24, 0x07	; 7
     5e6:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	90 93 4d 01 	sts	0x014D, r25
     5f2:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     5f6:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSeconds = 0;
     5fa:	10 92 54 01 	sts	0x0154, r1
     5fe:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     602:	10 92 55 01 	sts	0x0155, r1
     606:	10 92 56 01 	sts	0x0156, r1
     60a:	10 92 57 01 	sts	0x0157, r1
     60e:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     612:	10 92 4f 01 	sts	0x014F, r1
     616:	10 92 50 01 	sts	0x0150, r1
     61a:	10 92 51 01 	sts	0x0151, r1
     61e:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     622:	10 92 59 01 	sts	0x0159, r1
     626:	10 92 5a 01 	sts	0x015A, r1
     62a:	10 92 5b 01 	sts	0x015B, r1
     62e:	10 92 5c 01 	sts	0x015C, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     632:	10 92 5d 01 	sts	0x015D, r1
     636:	10 92 5e 01 	sts	0x015E, r1
     63a:	10 92 5f 01 	sts	0x015F, r1
     63e:	10 92 60 01 	sts	0x0160, r1
	Timebase->Time.Status = 0;
     642:	10 92 61 01 	sts	0x0161, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     646:	10 92 62 01 	sts	0x0162, r1
     64a:	a9 eb       	ldi	r26, 0xB9	; 185
     64c:	b1 e0       	ldi	r27, 0x01	; 1
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     652:	2d e0       	ldi	r18, 0x0D	; 13
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	82 9f       	mul	r24, r18
     658:	f0 01       	movw	r30, r0
     65a:	83 9f       	mul	r24, r19
     65c:	f0 0d       	add	r31, r0
     65e:	92 9f       	mul	r25, r18
     660:	f0 0d       	add	r31, r0
     662:	11 24       	eor	r1, r1
     664:	e8 54       	subi	r30, 0x48	; 72
     666:	fe 4f       	sbci	r31, 0xFE	; 254
     668:	10 82       	st	Z, r1
    Timebase->DownCounter[i].EndValue = 0;
     66a:	1d 92       	st	X+, r1
     66c:	1d 92       	st	X+, r1
     66e:	1d 92       	st	X+, r1
     670:	1c 92       	st	X, r1
     672:	13 97       	sbiw	r26, 0x03	; 3
    Timebase->DownCounter[i].Value = 0;
     674:	14 96       	adiw	r26, 0x04	; 4
     676:	1d 92       	st	X+, r1
     678:	1d 92       	st	X+, r1
     67a:	1d 92       	st	X+, r1
     67c:	1c 92       	st	X, r1
     67e:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounter[i].PeriodValue = 0;
     680:	18 96       	adiw	r26, 0x08	; 8
     682:	1d 92       	st	X+, r1
     684:	1d 92       	st	X+, r1
     686:	1d 92       	st	X+, r1
     688:	1c 92       	st	X, r1
     68a:	1b 97       	sbiw	r26, 0x0b	; 11
     68c:	01 96       	adiw	r24, 0x01	; 1
     68e:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase->UpCounterSS[i].PeriodValue = 0;
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
     690:	85 30       	cpi	r24, 0x05	; 5
     692:	91 05       	cpc	r25, r1
     694:	01 f7       	brne	.-64     	; 0x656 <Timebase_Struct_Init+0x90>
     696:	a4 e6       	ldi	r26, 0x64	; 100
     698:	b1 e0       	ldi	r27, 0x01	; 1
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     69e:	fc 01       	movw	r30, r24
     6a0:	24 e0       	ldi	r18, 0x04	; 4
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	2a 95       	dec	r18
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <Timebase_Struct_Init+0xdc>
     6aa:	e8 0f       	add	r30, r24
     6ac:	f9 1f       	adc	r31, r25
     6ae:	e5 5b       	subi	r30, 0xB5	; 181
     6b0:	fe 4f       	sbci	r31, 0xFE	; 254
     6b2:	10 8e       	std	Z+24, r1	; 0x18
    Timebase->DownCounterSS[i].EndValueSec = 0;
     6b4:	1d 92       	st	X+, r1
     6b6:	1d 92       	st	X+, r1
     6b8:	1d 92       	st	X+, r1
     6ba:	1c 92       	st	X, r1
     6bc:	13 97       	sbiw	r26, 0x03	; 3
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     6be:	14 96       	adiw	r26, 0x04	; 4
     6c0:	1d 92       	st	X+, r1
     6c2:	1d 92       	st	X+, r1
     6c4:	1d 92       	st	X+, r1
     6c6:	1c 92       	st	X, r1
     6c8:	17 97       	sbiw	r26, 0x07	; 7
    Timebase->DownCounterSS[i].Value = 0;
     6ca:	18 96       	adiw	r26, 0x08	; 8
     6cc:	1d 92       	st	X+, r1
     6ce:	1d 92       	st	X+, r1
     6d0:	1d 92       	st	X+, r1
     6d2:	1c 92       	st	X, r1
     6d4:	1b 97       	sbiw	r26, 0x0b	; 11
    Timebase->DownCounterSS[i].PeriodValue = 0;
     6d6:	1c 96       	adiw	r26, 0x0c	; 12
     6d8:	1d 92       	st	X+, r1
     6da:	1d 92       	st	X+, r1
     6dc:	1d 92       	st	X+, r1
     6de:	1c 92       	st	X, r1
     6e0:	1f 97       	sbiw	r26, 0x0f	; 15
     6e2:	01 96       	adiw	r24, 0x01	; 1
     6e4:	51 96       	adiw	r26, 0x11	; 17
    Timebase->DownCounter[i].PeriodValue = 0;
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
     6e6:	85 30       	cpi	r24, 0x05	; 5
     6e8:	91 05       	cpc	r25, r1
     6ea:	c9 f6       	brne	.-78     	; 0x69e <Timebase_Struct_Init+0xd8>
    Timebase->DownCounterSS[i].Value = 0;
    Timebase->DownCounterSS[i].PeriodValue = 0;
  }
  #endif
  
}
     6ec:	08 95       	ret

000006ee <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     6ee:	7f 92       	push	r7
     6f0:	8f 92       	push	r8
     6f2:	9f 92       	push	r9
     6f4:	af 92       	push	r10
     6f6:	bf 92       	push	r11
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	2a 97       	sbiw	r28, 0x0a	; 10
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     71a:	c0 90 49 01 	lds	r12, 0x0149
     71e:	d0 90 4a 01 	lds	r13, 0x014A
     722:	f6 01       	movw	r30, r12
     724:	80 81       	ld	r24, Z
     726:	80 ff       	sbrs	r24, 0
     728:	31 c0       	rjmp	.+98     	; 0x78c <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     72a:	01 30       	cpi	r16, 0x01	; 1
     72c:	11 05       	cpc	r17, r1
     72e:	11 f4       	brne	.+4      	; 0x734 <Timebase_Timer_Config+0x46>
     730:	96 e0       	ldi	r25, 0x06	; 6
     732:	19 c0       	rjmp	.+50     	; 0x766 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     734:	02 30       	cpi	r16, 0x02	; 2
     736:	11 05       	cpc	r17, r1
     738:	11 f4       	brne	.+4      	; 0x73e <Timebase_Timer_Config+0x50>
     73a:	95 e0       	ldi	r25, 0x05	; 5
     73c:	14 c0       	rjmp	.+40     	; 0x766 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     73e:	04 30       	cpi	r16, 0x04	; 4
     740:	11 05       	cpc	r17, r1
     742:	11 f4       	brne	.+4      	; 0x748 <Timebase_Timer_Config+0x5a>
     744:	94 e0       	ldi	r25, 0x04	; 4
     746:	0f c0       	rjmp	.+30     	; 0x766 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     748:	08 30       	cpi	r16, 0x08	; 8
     74a:	11 05       	cpc	r17, r1
     74c:	11 f4       	brne	.+4      	; 0x752 <Timebase_Timer_Config+0x64>
     74e:	93 e0       	ldi	r25, 0x03	; 3
     750:	0a c0       	rjmp	.+20     	; 0x766 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     752:	00 31       	cpi	r16, 0x10	; 16
     754:	11 05       	cpc	r17, r1
     756:	11 f4       	brne	.+4      	; 0x75c <Timebase_Timer_Config+0x6e>
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	05 c0       	rjmp	.+10     	; 0x766 <Timebase_Timer_Config+0x78>
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	00 32       	cpi	r16, 0x20	; 32
     760:	11 05       	cpc	r17, r1
     762:	09 f4       	brne	.+2      	; 0x766 <Timebase_Timer_Config+0x78>
     764:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     766:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     768:	84 b7       	in	r24, 0x34	; 52
     76a:	87 7f       	andi	r24, 0xF7	; 247
     76c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     76e:	80 91 60 00 	lds	r24, 0x0060
     772:	80 68       	ori	r24, 0x80	; 128
     774:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     778:	80 91 60 00 	lds	r24, 0x0060
     77c:	88 61       	ori	r24, 0x18	; 24
     77e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     782:	90 64       	ori	r25, 0x40	; 64
     784:	90 93 60 00 	sts	0x0060, r25
    sei();
     788:	78 94       	sei
     78a:	67 c0       	rjmp	.+206    	; 0x85a <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     78c:	81 fd       	sbrc	r24, 1
     78e:	65 c0       	rjmp	.+202    	; 0x85a <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     790:	82 ff       	sbrs	r24, 2
     792:	63 c0       	rjmp	.+198    	; 0x85a <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     794:	de 01       	movw	r26, r28
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	ef e0       	ldi	r30, 0x0F	; 15
     79a:	f1 e0       	ldi	r31, 0x01	; 1
     79c:	8a e0       	ldi	r24, 0x0A	; 10
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	81 50       	subi	r24, 0x01	; 1
     7a4:	e1 f7       	brne	.-8      	; 0x79e <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     7a6:	98 01       	movw	r18, r16
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	7b e1       	ldi	r23, 0x1B	; 27
     7b0:	87 eb       	ldi	r24, 0xB7	; 183
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
     7b8:	72 2e       	mov	r7, r18
     7ba:	83 2e       	mov	r8, r19
     7bc:	94 2e       	mov	r9, r20
     7be:	e5 2e       	mov	r14, r21
     7c0:	5e 01       	movw	r10, r28
     7c2:	08 94       	sec
     7c4:	a1 1c       	adc	r10, r1
     7c6:	b1 1c       	adc	r11, r1
     7c8:	c9 01       	movw	r24, r18
     7ca:	da 01       	movw	r26, r20
     7cc:	9c 01       	movw	r18, r24
     7ce:	ad 01       	movw	r20, r26
     7d0:	ff 24       	eor	r15, r15
     7d2:	14 c0       	rjmp	.+40     	; 0x7fc <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     7d4:	f5 01       	movw	r30, r10
     7d6:	21 91       	ld	r18, Z+
     7d8:	31 91       	ld	r19, Z+
     7da:	5f 01       	movw	r10, r30
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	67 2d       	mov	r22, r7
     7e2:	78 2d       	mov	r23, r8
     7e4:	89 2d       	mov	r24, r9
     7e6:	9e 2d       	mov	r25, r14
     7e8:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
     7ec:	c9 01       	movw	r24, r18
     7ee:	da 01       	movw	r26, r20
     7f0:	9c 01       	movw	r18, r24
     7f2:	ad 01       	movw	r20, r26
	  clock_div_index++;
     7f4:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     7f6:	f5 e0       	ldi	r31, 0x05	; 5
     7f8:	ff 16       	cp	r15, r31
     7fa:	31 f0       	breq	.+12     	; 0x808 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     7fc:	2f 3f       	cpi	r18, 0xFF	; 255
     7fe:	31 05       	cpc	r19, r1
     800:	41 05       	cpc	r20, r1
     802:	51 05       	cpc	r21, r1
     804:	09 f0       	breq	.+2      	; 0x808 <Timebase_Timer_Config+0x11a>
     806:	34 f7       	brge	.-52     	; 0x7d4 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     808:	8f 2d       	mov	r24, r15
     80a:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     80c:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     80e:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     810:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     814:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     816:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     818:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     81a:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     81c:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     81e:	88 23       	and	r24, r24
     820:	11 f4       	brne	.+4      	; 0x826 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0f c0       	rjmp	.+30     	; 0x844 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     826:	81 30       	cpi	r24, 0x01	; 1
     828:	11 f4       	brne	.+4      	; 0x82e <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0b c0       	rjmp	.+22     	; 0x844 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	11 f4       	brne	.+4      	; 0x836 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	07 c0       	rjmp	.+14     	; 0x844 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     836:	83 30       	cpi	r24, 0x03	; 3
     838:	11 f4       	brne	.+4      	; 0x83e <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     83a:	84 e0       	ldi	r24, 0x04	; 4
     83c:	03 c0       	rjmp	.+6      	; 0x844 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     83e:	84 30       	cpi	r24, 0x04	; 4
     840:	11 f4       	brne	.+4      	; 0x846 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     842:	85 e0       	ldi	r24, 0x05	; 5
     844:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     846:	82 2f       	mov	r24, r18
     848:	80 95       	com	r24
     84a:	f6 01       	movw	r30, r12
     84c:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     84e:	83 81       	ldd	r24, Z+3	; 0x03
     850:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 6e 00 	sts	0x006E, r24
    sei();
     858:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     85a:	f6 01       	movw	r30, r12
     85c:	12 83       	std	Z+2, r17	; 0x02
     85e:	01 83       	std	Z+1, r16	; 0x01
}
     860:	2a 96       	adiw	r28, 0x0a	; 10
     862:	0f b6       	in	r0, 0x3f	; 63
     864:	f8 94       	cli
     866:	de bf       	out	0x3e, r29	; 62
     868:	0f be       	out	0x3f, r0	; 63
     86a:	cd bf       	out	0x3d, r28	; 61
     86c:	cf 91       	pop	r28
     86e:	df 91       	pop	r29
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	df 90       	pop	r13
     87a:	cf 90       	pop	r12
     87c:	bf 90       	pop	r11
     87e:	af 90       	pop	r10
     880:	9f 90       	pop	r9
     882:	8f 90       	pop	r8
     884:	7f 90       	pop	r7
     886:	08 95       	ret

00000888 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     888:	e0 91 49 01 	lds	r30, 0x0149
     88c:	f0 91 4a 01 	lds	r31, 0x014A
     890:	87 89       	ldd	r24, Z+23	; 0x17
}
     892:	08 95       	ret

00000894 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     894:	e0 91 49 01 	lds	r30, 0x0149
     898:	f0 91 4a 01 	lds	r31, 0x014A
     89c:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     89e:	8f 33       	cpi	r24, 0x3F	; 63
     8a0:	18 f4       	brcc	.+6      	; 0x8a8 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     8a2:	87 89       	ldd	r24, Z+23	; 0x17
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	87 8b       	std	Z+23, r24	; 0x17
     8a8:	08 95       	ret

000008aa <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     8aa:	e0 91 49 01 	lds	r30, 0x0149
     8ae:	f0 91 4a 01 	lds	r31, 0x014A
     8b2:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8b4:	88 23       	and	r24, r24
     8b6:	19 f0       	breq	.+6      	; 0x8be <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8b8:	87 89       	ldd	r24, Z+23	; 0x17
     8ba:	81 50       	subi	r24, 0x01	; 1
     8bc:	87 8b       	std	Z+23, r24	; 0x17
     8be:	08 95       	ret

000008c0 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8c0:	e0 91 49 01 	lds	r30, 0x0149
     8c4:	f0 91 4a 01 	lds	r31, 0x014A
     8c8:	17 8a       	std	Z+23, r1	; 0x17
}
     8ca:	08 95       	ret

000008cc <Timebase_Timer_Get_SubSeconds>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8cc:	e0 91 49 01 	lds	r30, 0x0149
     8d0:	f0 91 4a 01 	lds	r31, 0x014A
     8d4:	20 85       	ldd	r18, Z+8	; 0x08
     8d6:	31 85       	ldd	r19, Z+9	; 0x09
}
     8d8:	c9 01       	movw	r24, r18
     8da:	08 95       	ret

000008dc <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8dc:	e0 91 49 01 	lds	r30, 0x0149
     8e0:	f0 91 4a 01 	lds	r31, 0x014A
     8e4:	22 85       	ldd	r18, Z+10	; 0x0a
     8e6:	33 85       	ldd	r19, Z+11	; 0x0b
     8e8:	44 85       	ldd	r20, Z+12	; 0x0c
     8ea:	55 85       	ldd	r21, Z+13	; 0x0d
}
     8ec:	b9 01       	movw	r22, r18
     8ee:	ca 01       	movw	r24, r20
     8f0:	08 95       	ret

000008f2 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     8f2:	e0 91 49 01 	lds	r30, 0x0149
     8f6:	f0 91 4a 01 	lds	r31, 0x014A
     8fa:	91 87       	std	Z+9, r25	; 0x09
     8fc:	80 87       	std	Z+8, r24	; 0x08
}
     8fe:	08 95       	ret

00000900 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     900:	e0 91 49 01 	lds	r30, 0x0149
     904:	f0 91 4a 01 	lds	r31, 0x014A
     908:	62 87       	std	Z+10, r22	; 0x0a
     90a:	73 87       	std	Z+11, r23	; 0x0b
     90c:	84 87       	std	Z+12, r24	; 0x0c
     90e:	95 87       	std	Z+13, r25	; 0x0d
}
     910:	08 95       	ret

00000912 <Timebase_Timer_Await_SubSeconds>:
  }
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     912:	bc 01       	movw	r22, r24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     914:	e0 91 49 01 	lds	r30, 0x0149
     918:	f0 91 4a 01 	lds	r31, 0x014A
     91c:	80 85       	ldd	r24, Z+8	; 0x08
     91e:	91 85       	ldd	r25, Z+9	; 0x09
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     920:	24 81       	ldd	r18, Z+4	; 0x04
     922:	35 81       	ldd	r19, Z+5	; 0x05
     924:	46 81       	ldd	r20, Z+6	; 0x06
     926:	57 81       	ldd	r21, Z+7	; 0x07
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	82 17       	cp	r24, r18
     92e:	93 07       	cpc	r25, r19
     930:	a4 07       	cpc	r26, r20
     932:	b5 07       	cpc	r27, r21
     934:	99 f7       	brne	.-26     	; 0x91c <Timebase_Timer_Await_SubSeconds+0xa>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     936:	80 85       	ldd	r24, Z+8	; 0x08
     938:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     93a:	86 0f       	add	r24, r22
     93c:	97 1f       	adc	r25, r23
     93e:	a0 e0       	ldi	r26, 0x00	; 0
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	84 83       	std	Z+4, r24	; 0x04
     944:	95 83       	std	Z+5, r25	; 0x05
     946:	a6 83       	std	Z+6, r26	; 0x06
     948:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     94a:	24 81       	ldd	r18, Z+4	; 0x04
     94c:	35 81       	ldd	r19, Z+5	; 0x05
     94e:	46 81       	ldd	r20, Z+6	; 0x06
     950:	57 81       	ldd	r21, Z+7	; 0x07
     952:	81 81       	ldd	r24, Z+1	; 0x01
     954:	92 81       	ldd	r25, Z+2	; 0x02
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
     95a:	28 17       	cp	r18, r24
     95c:	39 07       	cpc	r19, r25
     95e:	4a 07       	cpc	r20, r26
     960:	5b 07       	cpc	r21, r27
     962:	84 f0       	brlt	.+32     	; 0x984 <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     964:	24 81       	ldd	r18, Z+4	; 0x04
     966:	35 81       	ldd	r19, Z+5	; 0x05
     968:	46 81       	ldd	r20, Z+6	; 0x06
     96a:	57 81       	ldd	r21, Z+7	; 0x07
     96c:	81 81       	ldd	r24, Z+1	; 0x01
     96e:	92 81       	ldd	r25, Z+2	; 0x02
     970:	a0 e0       	ldi	r26, 0x00	; 0
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	28 1b       	sub	r18, r24
     976:	39 0b       	sbc	r19, r25
     978:	4a 0b       	sbc	r20, r26
     97a:	5b 0b       	sbc	r21, r27
     97c:	24 83       	std	Z+4, r18	; 0x04
     97e:	35 83       	std	Z+5, r19	; 0x05
     980:	46 83       	std	Z+6, r20	; 0x06
     982:	57 83       	std	Z+7, r21	; 0x07
     984:	08 95       	ret

00000986 <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     98e:	e0 91 49 01 	lds	r30, 0x0149
     992:	f0 91 4a 01 	lds	r31, 0x014A
     996:	22 85       	ldd	r18, Z+10	; 0x0a
     998:	33 85       	ldd	r19, Z+11	; 0x0b
     99a:	44 85       	ldd	r20, Z+12	; 0x0c
     99c:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     99e:	7c 01       	movw	r14, r24
     9a0:	00 e0       	ldi	r16, 0x00	; 0
     9a2:	10 e0       	ldi	r17, 0x00	; 0
     9a4:	e2 0e       	add	r14, r18
     9a6:	f3 1e       	adc	r15, r19
     9a8:	04 1f       	adc	r16, r20
     9aa:	15 1f       	adc	r17, r21
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9ac:	82 85       	ldd	r24, Z+10	; 0x0a
     9ae:	93 85       	ldd	r25, Z+11	; 0x0b
     9b0:	a4 85       	ldd	r26, Z+12	; 0x0c
     9b2:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     9b4:	8e 15       	cp	r24, r14
     9b6:	9f 05       	cpc	r25, r15
     9b8:	a0 07       	cpc	r26, r16
     9ba:	b1 07       	cpc	r27, r17
     9bc:	bc f3       	brlt	.-18     	; 0x9ac <Timebase_Timer_Delay_Seconds+0x26>
}
     9be:	1f 91       	pop	r17
     9c0:	0f 91       	pop	r16
     9c2:	ff 90       	pop	r15
     9c4:	ef 90       	pop	r14
     9c6:	08 95       	ret

000009c8 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     9c8:	e0 91 49 01 	lds	r30, 0x0149
     9cc:	f0 91 4a 01 	lds	r31, 0x014A
     9d0:	16 86       	std	Z+14, r1	; 0x0e
     9d2:	17 86       	std	Z+15, r1	; 0x0f
     9d4:	10 8a       	std	Z+16, r1	; 0x10
     9d6:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     9d8:	12 8a       	std	Z+18, r1	; 0x12
     9da:	13 8a       	std	Z+19, r1	; 0x13
     9dc:	14 8a       	std	Z+20, r1	; 0x14
     9de:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     9e0:	16 8a       	std	Z+22, r1	; 0x16
}
     9e2:	08 95       	ret

000009e4 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     9e4:	e0 91 49 01 	lds	r30, 0x0149
     9e8:	f0 91 4a 01 	lds	r31, 0x014A
     9ec:	86 89       	ldd	r24, Z+22	; 0x16
     9ee:	88 23       	and	r24, r24
     9f0:	91 f4       	brne	.+36     	; 0xa16 <Timebase_Window_Timer_Start+0x32>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9f2:	82 85       	ldd	r24, Z+10	; 0x0a
     9f4:	93 85       	ldd	r25, Z+11	; 0x0b
     9f6:	a4 85       	ldd	r26, Z+12	; 0x0c
     9f8:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     9fa:	86 87       	std	Z+14, r24	; 0x0e
     9fc:	97 87       	std	Z+15, r25	; 0x0f
     9fe:	a0 8b       	std	Z+16, r26	; 0x10
     a00:	b1 8b       	std	Z+17, r27	; 0x11


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a02:	80 85       	ldd	r24, Z+8	; 0x08
     a04:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     a06:	a0 e0       	ldi	r26, 0x00	; 0
     a08:	b0 e0       	ldi	r27, 0x00	; 0
     a0a:	82 8b       	std	Z+18, r24	; 0x12
     a0c:	93 8b       	std	Z+19, r25	; 0x13
     a0e:	a4 8b       	std	Z+20, r26	; 0x14
     a10:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	86 8b       	std	Z+22, r24	; 0x16
     a16:	08 95       	ret

00000a18 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     a18:	ef 92       	push	r14
     a1a:	ff 92       	push	r15
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     a24:	c0 91 49 01 	lds	r28, 0x0149
     a28:	d0 91 4a 01 	lds	r29, 0x014A
     a2c:	8e 89       	ldd	r24, Y+22	; 0x16
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	21 f0       	breq	.+8      	; 0xa3a <Timebase_Window_Timer_Get_Interval+0x22>
     a32:	ee 24       	eor	r14, r14
     a34:	ff 24       	eor	r15, r15
     a36:	87 01       	movw	r16, r14
     a38:	23 c0       	rjmp	.+70     	; 0xa80 <Timebase_Window_Timer_Get_Interval+0x68>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a3a:	2a 85       	ldd	r18, Y+10	; 0x0a
     a3c:	3b 85       	ldd	r19, Y+11	; 0x0b
     a3e:	4c 85       	ldd	r20, Y+12	; 0x0c
     a40:	5d 85       	ldd	r21, Y+13	; 0x0d


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a42:	88 85       	ldd	r24, Y+8	; 0x08
     a44:	99 85       	ldd	r25, Y+9	; 0x09


int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    int32_t curr_s = Timebase_Timer_Get_Seconds();
    int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
     a46:	7c 01       	movw	r14, r24
     a48:	00 e0       	ldi	r16, 0x00	; 0
     a4a:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     a4c:	8e 85       	ldd	r24, Y+14	; 0x0e
     a4e:	9f 85       	ldd	r25, Y+15	; 0x0f
     a50:	a8 89       	ldd	r26, Y+16	; 0x10
     a52:	b9 89       	ldd	r27, Y+17	; 0x11
     a54:	28 1b       	sub	r18, r24
     a56:	39 0b       	sbc	r19, r25
     a58:	4a 0b       	sbc	r20, r26
     a5a:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     a5c:	69 81       	ldd	r22, Y+1	; 0x01
     a5e:	7a 81       	ldd	r23, Y+2	; 0x02
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
	curr_s += curr_ss;
     a68:	2a 89       	ldd	r18, Y+18	; 0x12
     a6a:	3b 89       	ldd	r19, Y+19	; 0x13
     a6c:	4c 89       	ldd	r20, Y+20	; 0x14
     a6e:	5d 89       	ldd	r21, Y+21	; 0x15
     a70:	e2 1a       	sub	r14, r18
     a72:	f3 0a       	sbc	r15, r19
     a74:	04 0b       	sbc	r16, r20
     a76:	15 0b       	sbc	r17, r21
     a78:	e6 0e       	add	r14, r22
     a7a:	f7 1e       	adc	r15, r23
     a7c:	08 1f       	adc	r16, r24
     a7e:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     a80:	b7 01       	movw	r22, r14
     a82:	c8 01       	movw	r24, r16
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	08 95       	ret

00000a92 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     a92:	0e 94 0c 05 	call	0xa18	; 0xa18 <Timebase_Window_Timer_Get_Interval>
     a96:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     a98:	e0 91 49 01 	lds	r30, 0x0149
     a9c:	f0 91 4a 01 	lds	r31, 0x014A
     aa0:	86 89       	ldd	r24, Z+22	; 0x16
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	49 f4       	brne	.+18     	; 0xab8 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     aa6:	16 86       	std	Z+14, r1	; 0x0e
     aa8:	17 86       	std	Z+15, r1	; 0x0f
     aaa:	10 8a       	std	Z+16, r1	; 0x10
     aac:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     aae:	12 8a       	std	Z+18, r1	; 0x12
     ab0:	13 8a       	std	Z+19, r1	; 0x13
     ab2:	14 8a       	std	Z+20, r1	; 0x14
     ab4:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     ab6:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     ab8:	82 2f       	mov	r24, r18
     aba:	08 95       	ret

00000abc <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
     abc:	e0 91 49 01 	lds	r30, 0x0149
     ac0:	f0 91 4a 01 	lds	r31, 0x014A
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	2d e0       	ldi	r18, 0x0D	; 13
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	ac 01       	movw	r20, r24
     acc:	42 9f       	mul	r20, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	43 9f       	mul	r20, r19
     ad2:	90 0d       	add	r25, r0
     ad4:	52 9f       	mul	r21, r18
     ad6:	90 0d       	add	r25, r0
     ad8:	11 24       	eor	r1, r1
     ada:	e8 0f       	add	r30, r24
     adc:	f9 1f       	adc	r31, r25
     ade:	e3 59       	subi	r30, 0x93	; 147
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	80 81       	ld	r24, Z
     ae4:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
     ae6:	8f 70       	andi	r24, 0x0F	; 15
     ae8:	08 95       	ret

00000aea <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     aea:	e0 91 49 01 	lds	r30, 0x0149
     aee:	f0 91 4a 01 	lds	r31, 0x014A
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	2d e0       	ldi	r18, 0x0D	; 13
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	ac 01       	movw	r20, r24
     afa:	42 9f       	mul	r20, r18
     afc:	c0 01       	movw	r24, r0
     afe:	43 9f       	mul	r20, r19
     b00:	90 0d       	add	r25, r0
     b02:	52 9f       	mul	r21, r18
     b04:	90 0d       	add	r25, r0
     b06:	11 24       	eor	r1, r1
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
     b0c:	e3 59       	subi	r30, 0x93	; 147
     b0e:	ff 4f       	sbci	r31, 0xFF	; 255
     b10:	6f 70       	andi	r22, 0x0F	; 15
     b12:	66 0f       	add	r22, r22
     b14:	80 81       	ld	r24, Z
     b16:	81 7e       	andi	r24, 0xE1	; 225
     b18:	86 2b       	or	r24, r22
     b1a:	80 83       	st	Z, r24
}
     b1c:	08 95       	ret

00000b1e <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
     b1e:	e0 91 49 01 	lds	r30, 0x0149
     b22:	f0 91 4a 01 	lds	r31, 0x014A
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	2d e0       	ldi	r18, 0x0D	; 13
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	ac 01       	movw	r20, r24
     b2e:	42 9f       	mul	r20, r18
     b30:	c0 01       	movw	r24, r0
     b32:	43 9f       	mul	r20, r19
     b34:	90 0d       	add	r25, r0
     b36:	52 9f       	mul	r21, r18
     b38:	90 0d       	add	r25, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	e8 0f       	add	r30, r24
     b3e:	f9 1f       	adc	r31, r25
     b40:	ee 58       	subi	r30, 0x8E	; 142
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	60 81       	ld	r22, Z
     b46:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
     b48:	82 81       	ldd	r24, Z+2	; 0x02
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	08 95       	ret

00000b4e <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     b4e:	e0 91 49 01 	lds	r30, 0x0149
     b52:	f0 91 4a 01 	lds	r31, 0x014A
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	2d e0       	ldi	r18, 0x0D	; 13
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	dc 01       	movw	r26, r24
     b5e:	a2 9f       	mul	r26, r18
     b60:	c0 01       	movw	r24, r0
     b62:	a3 9f       	mul	r26, r19
     b64:	90 0d       	add	r25, r0
     b66:	b2 9f       	mul	r27, r18
     b68:	90 0d       	add	r25, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	e8 0f       	add	r30, r24
     b6e:	f9 1f       	adc	r31, r25
     b70:	ee 58       	subi	r30, 0x8E	; 142
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	40 83       	st	Z, r20
     b76:	51 83       	std	Z+1, r21	; 0x01
     b78:	62 83       	std	Z+2, r22	; 0x02
     b7a:	73 83       	std	Z+3, r23	; 0x03
}
     b7c:	08 95       	ret

00000b7e <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
     b7e:	e0 91 49 01 	lds	r30, 0x0149
     b82:	f0 91 4a 01 	lds	r31, 0x014A
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	2d e0       	ldi	r18, 0x0D	; 13
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	ac 01       	movw	r20, r24
     b8e:	42 9f       	mul	r20, r18
     b90:	c0 01       	movw	r24, r0
     b92:	43 9f       	mul	r20, r19
     b94:	90 0d       	add	r25, r0
     b96:	52 9f       	mul	r21, r18
     b98:	90 0d       	add	r25, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	e8 0f       	add	r30, r24
     b9e:	f9 1f       	adc	r31, r25
     ba0:	e2 59       	subi	r30, 0x92	; 146
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	08 95       	ret

00000bae <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     bae:	e0 91 49 01 	lds	r30, 0x0149
     bb2:	f0 91 4a 01 	lds	r31, 0x014A
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	2d e0       	ldi	r18, 0x0D	; 13
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	dc 01       	movw	r26, r24
     bbe:	a2 9f       	mul	r26, r18
     bc0:	c0 01       	movw	r24, r0
     bc2:	a3 9f       	mul	r26, r19
     bc4:	90 0d       	add	r25, r0
     bc6:	b2 9f       	mul	r27, r18
     bc8:	90 0d       	add	r25, r0
     bca:	11 24       	eor	r1, r1
     bcc:	e8 0f       	add	r30, r24
     bce:	f9 1f       	adc	r31, r25
     bd0:	e2 59       	subi	r30, 0x92	; 146
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	40 83       	st	Z, r20
     bd6:	51 83       	std	Z+1, r21	; 0x01
     bd8:	62 83       	std	Z+2, r22	; 0x02
     bda:	73 83       	std	Z+3, r23	; 0x03
}
     bdc:	08 95       	ret

00000bde <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
     bde:	e0 91 49 01 	lds	r30, 0x0149
     be2:	f0 91 4a 01 	lds	r31, 0x014A
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	2d e0       	ldi	r18, 0x0D	; 13
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	ac 01       	movw	r20, r24
     bee:	42 9f       	mul	r20, r18
     bf0:	c0 01       	movw	r24, r0
     bf2:	43 9f       	mul	r20, r19
     bf4:	90 0d       	add	r25, r0
     bf6:	52 9f       	mul	r21, r18
     bf8:	90 0d       	add	r25, r0
     bfa:	11 24       	eor	r1, r1
     bfc:	e8 0f       	add	r30, r24
     bfe:	f9 1f       	adc	r31, r25
     c00:	ea 58       	subi	r30, 0x8A	; 138
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	60 81       	ld	r22, Z
     c06:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	08 95       	ret

00000c0e <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
     c0e:	e0 91 49 01 	lds	r30, 0x0149
     c12:	f0 91 4a 01 	lds	r31, 0x014A
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     c1a:	77 ff       	sbrs	r23, 7
     c1c:	13 c0       	rjmp	.+38     	; 0xc44 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
     c1e:	8d e0       	ldi	r24, 0x0D	; 13
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	ac 01       	movw	r20, r24
     c24:	24 9f       	mul	r18, r20
     c26:	c0 01       	movw	r24, r0
     c28:	25 9f       	mul	r18, r21
     c2a:	90 0d       	add	r25, r0
     c2c:	34 9f       	mul	r19, r20
     c2e:	90 0d       	add	r25, r0
     c30:	11 24       	eor	r1, r1
     c32:	e8 0f       	add	r30, r24
     c34:	f9 1f       	adc	r31, r25
     c36:	ea 58       	subi	r30, 0x8A	; 138
     c38:	ff 4f       	sbci	r31, 0xFF	; 255
     c3a:	10 82       	st	Z, r1
     c3c:	11 82       	std	Z+1, r1	; 0x01
     c3e:	12 82       	std	Z+2, r1	; 0x02
     c40:	13 82       	std	Z+3, r1	; 0x03
     c42:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
     c44:	8d e0       	ldi	r24, 0x0D	; 13
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	dc 01       	movw	r26, r24
     c4a:	2a 9f       	mul	r18, r26
     c4c:	c0 01       	movw	r24, r0
     c4e:	2b 9f       	mul	r18, r27
     c50:	90 0d       	add	r25, r0
     c52:	3a 9f       	mul	r19, r26
     c54:	90 0d       	add	r25, r0
     c56:	11 24       	eor	r1, r1
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	ea 58       	subi	r30, 0x8A	; 138
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	40 83       	st	Z, r20
     c62:	51 83       	std	Z+1, r21	; 0x01
     c64:	62 83       	std	Z+2, r22	; 0x02
     c66:	73 83       	std	Z+3, r23	; 0x03
     c68:	08 95       	ret

00000c6a <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
     c6a:	e0 91 49 01 	lds	r30, 0x0149
     c6e:	f0 91 4a 01 	lds	r31, 0x014A
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	2d e0       	ldi	r18, 0x0D	; 13
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	ac 01       	movw	r20, r24
     c7a:	42 9f       	mul	r20, r18
     c7c:	c0 01       	movw	r24, r0
     c7e:	43 9f       	mul	r20, r19
     c80:	90 0d       	add	r25, r0
     c82:	52 9f       	mul	r21, r18
     c84:	90 0d       	add	r25, r0
     c86:	11 24       	eor	r1, r1
     c88:	e8 0f       	add	r30, r24
     c8a:	f9 1f       	adc	r31, r25
     c8c:	e3 59       	subi	r30, 0x93	; 147
     c8e:	ff 4f       	sbci	r31, 0xFF	; 255
     c90:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
     c92:	81 70       	andi	r24, 0x01	; 1
     c94:	08 95       	ret

00000c96 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
     c96:	e0 91 49 01 	lds	r30, 0x0149
     c9a:	f0 91 4a 01 	lds	r31, 0x014A
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	2d e0       	ldi	r18, 0x0D	; 13
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	ac 01       	movw	r20, r24
     ca6:	42 9f       	mul	r20, r18
     ca8:	c0 01       	movw	r24, r0
     caa:	43 9f       	mul	r20, r19
     cac:	90 0d       	add	r25, r0
     cae:	52 9f       	mul	r21, r18
     cb0:	90 0d       	add	r25, r0
     cb2:	11 24       	eor	r1, r1
     cb4:	e8 0f       	add	r30, r24
     cb6:	f9 1f       	adc	r31, r25
     cb8:	e3 59       	subi	r30, 0x93	; 147
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	80 81       	ld	r24, Z
     cbe:	81 60       	ori	r24, 0x01	; 1
     cc0:	80 83       	st	Z, r24
}
     cc2:	08 95       	ret

00000cc4 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     cc4:	e0 91 49 01 	lds	r30, 0x0149
     cc8:	f0 91 4a 01 	lds	r31, 0x014A
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	2d e0       	ldi	r18, 0x0D	; 13
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	ac 01       	movw	r20, r24
     cd4:	42 9f       	mul	r20, r18
     cd6:	c0 01       	movw	r24, r0
     cd8:	43 9f       	mul	r20, r19
     cda:	90 0d       	add	r25, r0
     cdc:	52 9f       	mul	r21, r18
     cde:	90 0d       	add	r25, r0
     ce0:	11 24       	eor	r1, r1
     ce2:	e8 0f       	add	r30, r24
     ce4:	f9 1f       	adc	r31, r25
     ce6:	e3 59       	subi	r30, 0x93	; 147
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	80 83       	st	Z, r24
}
     cf0:	08 95       	ret

00000cf2 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     cf2:	e0 91 49 01 	lds	r30, 0x0149
     cf6:	f0 91 4a 01 	lds	r31, 0x014A
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	2d e0       	ldi	r18, 0x0D	; 13
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	ac 01       	movw	r20, r24
     d02:	42 9f       	mul	r20, r18
     d04:	c0 01       	movw	r24, r0
     d06:	43 9f       	mul	r20, r19
     d08:	90 0d       	add	r25, r0
     d0a:	52 9f       	mul	r21, r18
     d0c:	90 0d       	add	r25, r0
     d0e:	11 24       	eor	r1, r1
     d10:	e8 0f       	add	r30, r24
     d12:	f9 1f       	adc	r31, r25
     d14:	e2 59       	subi	r30, 0x92	; 146
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	11 92       	st	Z+, r1
     d1a:	11 92       	st	Z+, r1
     d1c:	11 92       	st	Z+, r1
     d1e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     d20:	10 82       	st	Z, r1
     d22:	11 82       	std	Z+1, r1	; 0x01
     d24:	12 82       	std	Z+2, r1	; 0x02
     d26:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     d28:	35 97       	sbiw	r30, 0x05	; 5
     d2a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     d2c:	80 7e       	andi	r24, 0xE0	; 224
     d2e:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
     d30:	08 95       	ret

00000d32 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     d32:	e0 91 49 01 	lds	r30, 0x0149
     d36:	f0 91 4a 01 	lds	r31, 0x014A
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	2d e0       	ldi	r18, 0x0D	; 13
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	ac 01       	movw	r20, r24
     d42:	42 9f       	mul	r20, r18
     d44:	c0 01       	movw	r24, r0
     d46:	43 9f       	mul	r20, r19
     d48:	90 0d       	add	r25, r0
     d4a:	52 9f       	mul	r21, r18
     d4c:	90 0d       	add	r25, r0
     d4e:	11 24       	eor	r1, r1
     d50:	e8 0f       	add	r30, r24
     d52:	f9 1f       	adc	r31, r25
     d54:	e2 59       	subi	r30, 0x92	; 146
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	11 92       	st	Z+, r1
     d5a:	11 92       	st	Z+, r1
     d5c:	11 92       	st	Z+, r1
     d5e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     d60:	10 82       	st	Z, r1
     d62:	11 82       	std	Z+1, r1	; 0x01
     d64:	12 82       	std	Z+2, r1	; 0x02
     d66:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     d68:	35 97       	sbiw	r30, 0x05	; 5
     d6a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     d6c:	80 7e       	andi	r24, 0xE0	; 224
     d6e:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
     d70:	08 95       	ret

00000d72 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     d72:	e0 91 49 01 	lds	r30, 0x0149
     d76:	f0 91 4a 01 	lds	r31, 0x014A
     d7a:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     d7c:	2d e0       	ldi	r18, 0x0D	; 13
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	ac 01       	movw	r20, r24
     d82:	42 9f       	mul	r20, r18
     d84:	c0 01       	movw	r24, r0
     d86:	43 9f       	mul	r20, r19
     d88:	90 0d       	add	r25, r0
     d8a:	52 9f       	mul	r21, r18
     d8c:	90 0d       	add	r25, r0
     d8e:	11 24       	eor	r1, r1
     d90:	e8 0f       	add	r30, r24
     d92:	f9 1f       	adc	r31, r25
     d94:	e3 59       	subi	r30, 0x93	; 147
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	90 81       	ld	r25, Z
     d9a:	89 2f       	mov	r24, r25
     d9c:	86 95       	lsr	r24
     d9e:	8f 70       	andi	r24, 0x0F	; 15
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	19 f0       	breq	.+6      	; 0xdaa <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     da4:	91 7e       	andi	r25, 0xE1	; 225
     da6:	92 60       	ori	r25, 0x02	; 2
     da8:	90 83       	st	Z, r25
     daa:	08 95       	ret

00000dac <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     dac:	e0 91 49 01 	lds	r30, 0x0149
     db0:	f0 91 4a 01 	lds	r31, 0x014A
     db4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     db6:	2d e0       	ldi	r18, 0x0D	; 13
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	ac 01       	movw	r20, r24
     dbc:	42 9f       	mul	r20, r18
     dbe:	c0 01       	movw	r24, r0
     dc0:	43 9f       	mul	r20, r19
     dc2:	90 0d       	add	r25, r0
     dc4:	52 9f       	mul	r21, r18
     dc6:	90 0d       	add	r25, r0
     dc8:	11 24       	eor	r1, r1
     dca:	e8 0f       	add	r30, r24
     dcc:	f9 1f       	adc	r31, r25
     dce:	e3 59       	subi	r30, 0x93	; 147
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	90 81       	ld	r25, Z
     dd4:	89 2f       	mov	r24, r25
     dd6:	86 95       	lsr	r24
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	82 30       	cpi	r24, 0x02	; 2
     ddc:	19 f0       	breq	.+6      	; 0xde4 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     dde:	91 7e       	andi	r25, 0xE1	; 225
     de0:	94 60       	ori	r25, 0x04	; 4
     de2:	90 83       	st	Z, r25
     de4:	08 95       	ret

00000de6 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     dea:	a0 91 49 01 	lds	r26, 0x0149
     dee:	b0 91 4a 01 	lds	r27, 0x014A
     df2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     df4:	2d e0       	ldi	r18, 0x0D	; 13
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	82 9f       	mul	r24, r18
     dfa:	f0 01       	movw	r30, r0
     dfc:	83 9f       	mul	r24, r19
     dfe:	f0 0d       	add	r31, r0
     e00:	92 9f       	mul	r25, r18
     e02:	f0 0d       	add	r31, r0
     e04:	11 24       	eor	r1, r1
     e06:	ea 0f       	add	r30, r26
     e08:	fb 1f       	adc	r31, r27
     e0a:	ef 01       	movw	r28, r30
     e0c:	c3 59       	subi	r28, 0x93	; 147
     e0e:	df 4f       	sbci	r29, 0xFF	; 255
     e10:	88 81       	ld	r24, Y
     e12:	86 95       	lsr	r24
     e14:	8f 70       	andi	r24, 0x0F	; 15
     e16:	e9 f4       	brne	.+58     	; 0xe52 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e18:	ee 58       	subi	r30, 0x8E	; 142
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	40 83       	st	Z, r20
     e1e:	51 83       	std	Z+1, r21	; 0x01
     e20:	62 83       	std	Z+2, r22	; 0x02
     e22:	73 83       	std	Z+3, r23	; 0x03
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e24:	1a 96       	adiw	r26, 0x0a	; 10
     e26:	8d 91       	ld	r24, X+
     e28:	9d 91       	ld	r25, X+
     e2a:	0d 90       	ld	r0, X+
     e2c:	bc 91       	ld	r27, X
     e2e:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e30:	84 0f       	add	r24, r20
     e32:	95 1f       	adc	r25, r21
     e34:	a6 1f       	adc	r26, r22
     e36:	b7 1f       	adc	r27, r23
     e38:	b2 93       	st	-Z, r27
     e3a:	a2 93       	st	-Z, r26
     e3c:	92 93       	st	-Z, r25
     e3e:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     e40:	98 81       	ld	r25, Y
     e42:	89 2f       	mov	r24, r25
     e44:	86 95       	lsr	r24
     e46:	8f 70       	andi	r24, 0x0F	; 15
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	19 f0       	breq	.+6      	; 0xe52 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e4c:	91 7e       	andi	r25, 0xE1	; 225
     e4e:	92 60       	ori	r25, 0x02	; 2
     e50:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     e5c:	e0 91 49 01 	lds	r30, 0x0149
     e60:	f0 91 4a 01 	lds	r31, 0x014A
     e64:	a8 2f       	mov	r26, r24
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	2d e0       	ldi	r18, 0x0D	; 13
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	e9 01       	movw	r28, r18
     e6e:	ac 9f       	mul	r26, r28
     e70:	90 01       	movw	r18, r0
     e72:	ad 9f       	mul	r26, r29
     e74:	30 0d       	add	r19, r0
     e76:	bc 9f       	mul	r27, r28
     e78:	30 0d       	add	r19, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	e2 0f       	add	r30, r18
     e7e:	f3 1f       	adc	r31, r19
     e80:	e2 59       	subi	r30, 0x92	; 146
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	11 92       	st	Z+, r1
     e86:	11 92       	st	Z+, r1
     e88:	11 92       	st	Z+, r1
     e8a:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     e8c:	10 82       	st	Z, r1
     e8e:	11 82       	std	Z+1, r1	; 0x01
     e90:	12 82       	std	Z+2, r1	; 0x02
     e92:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     e94:	35 97       	sbiw	r30, 0x05	; 5
     e96:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     e98:	90 7e       	andi	r25, 0xE0	; 224
     e9a:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
     e9c:	0e 94 f3 06 	call	0xde6	; 0xde6 <Timebase_DownCounter_Set_Securely>
} 
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     eae:	a0 91 49 01 	lds	r26, 0x0149
     eb2:	b0 91 4a 01 	lds	r27, 0x014A
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	2d e0       	ldi	r18, 0x0D	; 13
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	82 9f       	mul	r24, r18
     ebe:	f0 01       	movw	r30, r0
     ec0:	83 9f       	mul	r24, r19
     ec2:	f0 0d       	add	r31, r0
     ec4:	92 9f       	mul	r25, r18
     ec6:	f0 0d       	add	r31, r0
     ec8:	11 24       	eor	r1, r1
     eca:	ea 0f       	add	r30, r26
     ecc:	fb 1f       	adc	r31, r27
     ece:	8f 01       	movw	r16, r30
     ed0:	03 59       	subi	r16, 0x93	; 147
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	e8 01       	movw	r28, r16
     ed6:	88 81       	ld	r24, Y
     ed8:	86 95       	lsr	r24
     eda:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	69 f5       	brne	.+90     	; 0xf3a <Timebase_DownCounter_Update+0x94>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ee0:	1a 96       	adiw	r26, 0x0a	; 10
     ee2:	2d 91       	ld	r18, X+
     ee4:	3d 91       	ld	r19, X+
     ee6:	4d 91       	ld	r20, X+
     ee8:	5c 91       	ld	r21, X
     eea:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
     eec:	bf 01       	movw	r22, r30
     eee:	62 59       	subi	r22, 0x92	; 146
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	eb 01       	movw	r28, r22
     ef4:	88 81       	ld	r24, Y
     ef6:	99 81       	ldd	r25, Y+1	; 0x01
     ef8:	aa 81       	ldd	r26, Y+2	; 0x02
     efa:	bb 81       	ldd	r27, Y+3	; 0x03
     efc:	82 1b       	sub	r24, r18
     efe:	93 0b       	sbc	r25, r19
     f00:	a4 0b       	sbc	r26, r20
     f02:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f04:	ee 58       	subi	r30, 0x8E	; 142
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	80 83       	st	Z, r24
     f0a:	91 83       	std	Z+1, r25	; 0x01
     f0c:	a2 83       	std	Z+2, r26	; 0x02
     f0e:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
     f10:	18 16       	cp	r1, r24
     f12:	19 06       	cpc	r1, r25
     f14:	1a 06       	cpc	r1, r26
     f16:	1b 06       	cpc	r1, r27
     f18:	34 f1       	brlt	.+76     	; 0xf66 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f1a:	db 01       	movw	r26, r22
     f1c:	1d 92       	st	X+, r1
     f1e:	1d 92       	st	X+, r1
     f20:	1d 92       	st	X+, r1
     f22:	1c 92       	st	X, r1
     f24:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     f26:	10 82       	st	Z, r1
     f28:	11 82       	std	Z+1, r1	; 0x01
     f2a:	12 82       	std	Z+2, r1	; 0x02
     f2c:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     f2e:	e8 01       	movw	r28, r16
     f30:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     f32:	80 7e       	andi	r24, 0xE0	; 224
     f34:	88 60       	ori	r24, 0x08	; 8
     f36:	88 83       	st	Y, r24
     f38:	16 c0       	rjmp	.+44     	; 0xf66 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	a1 f4       	brne	.+40     	; 0xf66 <Timebase_DownCounter_Update+0xc0>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f3e:	1a 96       	adiw	r26, 0x0a	; 10
     f40:	8d 91       	ld	r24, X+
     f42:	9d 91       	ld	r25, X+
     f44:	0d 90       	ld	r0, X+
     f46:	bc 91       	ld	r27, X
     f48:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     f4a:	ee 58       	subi	r30, 0x8E	; 142
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	20 81       	ld	r18, Z
     f50:	31 81       	ldd	r19, Z+1	; 0x01
     f52:	42 81       	ldd	r20, Z+2	; 0x02
     f54:	53 81       	ldd	r21, Z+3	; 0x03
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	a4 1f       	adc	r26, r20
     f5c:	b5 1f       	adc	r27, r21
     f5e:	b2 93       	st	-Z, r27
     f60:	a2 93       	st	-Z, r26
     f62:	92 93       	st	-Z, r25
     f64:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	08 95       	ret

00000f70 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	e0 91 49 01 	lds	r30, 0x0149
     f76:	f0 91 4a 01 	lds	r31, 0x014A
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	2d e0       	ldi	r18, 0x0D	; 13
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	bc 01       	movw	r22, r24
     f82:	62 9f       	mul	r22, r18
     f84:	c0 01       	movw	r24, r0
     f86:	63 9f       	mul	r22, r19
     f88:	90 0d       	add	r25, r0
     f8a:	72 9f       	mul	r23, r18
     f8c:	90 0d       	add	r25, r0
     f8e:	11 24       	eor	r1, r1
     f90:	e8 0f       	add	r30, r24
     f92:	f9 1f       	adc	r31, r25
     f94:	e3 59       	subi	r30, 0x93	; 147
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	86 95       	lsr	r24
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <Timebase_DownCounter_Expired+0x34>
     fa2:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
     fa4:	84 2f       	mov	r24, r20
     fa6:	08 95       	ret

00000fa8 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
     fa8:	e0 91 49 01 	lds	r30, 0x0149
     fac:	f0 91 4a 01 	lds	r31, 0x014A
     fb0:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     fb2:	2d e0       	ldi	r18, 0x0D	; 13
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	ac 01       	movw	r20, r24
     fb8:	42 9f       	mul	r20, r18
     fba:	c0 01       	movw	r24, r0
     fbc:	43 9f       	mul	r20, r19
     fbe:	90 0d       	add	r25, r0
     fc0:	52 9f       	mul	r21, r18
     fc2:	90 0d       	add	r25, r0
     fc4:	11 24       	eor	r1, r1
     fc6:	e8 0f       	add	r30, r24
     fc8:	f9 1f       	adc	r31, r25
     fca:	df 01       	movw	r26, r30
     fcc:	a3 59       	subi	r26, 0x93	; 147
     fce:	bf 4f       	sbci	r27, 0xFF	; 255
     fd0:	8c 91       	ld	r24, X
     fd2:	86 95       	lsr	r24
     fd4:	8f 70       	andi	r24, 0x0F	; 15
     fd6:	84 30       	cpi	r24, 0x04	; 4
     fd8:	11 f0       	breq	.+4      	; 0xfde <Timebase_DownCounter_Expired_Event+0x36>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
     fde:	e2 59       	subi	r30, 0x92	; 146
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	11 92       	st	Z+, r1
     fe4:	11 92       	st	Z+, r1
     fe6:	11 92       	st	Z+, r1
     fe8:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
     fea:	10 82       	st	Z, r1
     fec:	11 82       	std	Z+1, r1	; 0x01
     fee:	12 82       	std	Z+2, r1	; 0x02
     ff0:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
     ff2:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
     ff4:	80 7e       	andi	r24, 0xE0	; 224
     ff6:	8c 93       	st	X, r24
     ff8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
     ffa:	08 95       	ret

00000ffc <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    1000:	c0 91 49 01 	lds	r28, 0x0149
    1004:	d0 91 4a 01 	lds	r29, 0x014A
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    100c:	8d e0       	ldi	r24, 0x0D	; 13
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	28 9f       	mul	r18, r24
    1012:	f0 01       	movw	r30, r0
    1014:	29 9f       	mul	r18, r25
    1016:	f0 0d       	add	r31, r0
    1018:	38 9f       	mul	r19, r24
    101a:	f0 0d       	add	r31, r0
    101c:	11 24       	eor	r1, r1
    101e:	ec 0f       	add	r30, r28
    1020:	fd 1f       	adc	r31, r29
    1022:	e3 59       	subi	r30, 0x93	; 147
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 81       	ld	r24, Z
    1028:	ed 56       	subi	r30, 0x6D	; 109
    102a:	f0 40       	sbci	r31, 0x00	; 0
    102c:	80 fd       	sbrc	r24, 0
    102e:	25 c0       	rjmp	.+74     	; 0x107a <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    1030:	ee 58       	subi	r30, 0x8E	; 142
    1032:	ff 4f       	sbci	r31, 0xFF	; 255
    1034:	81 91       	ld	r24, Z+
    1036:	91 91       	ld	r25, Z+
    1038:	a1 91       	ld	r26, Z+
    103a:	b1 91       	ld	r27, Z+
    103c:	84 1b       	sub	r24, r20
    103e:	95 0b       	sbc	r25, r21
    1040:	a6 0b       	sbc	r26, r22
    1042:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1044:	b7 ff       	sbrs	r27, 7
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    1048:	10 82       	st	Z, r1
    104a:	11 82       	std	Z+1, r1	; 0x01
    104c:	12 82       	std	Z+2, r1	; 0x02
    104e:	13 82       	std	Z+3, r1	; 0x03
    1050:	04 c0       	rjmp	.+8      	; 0x105a <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	a2 83       	std	Z+2, r26	; 0x02
    1058:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    105a:	8d e0       	ldi	r24, 0x0D	; 13
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	28 9f       	mul	r18, r24
    1060:	f0 01       	movw	r30, r0
    1062:	29 9f       	mul	r18, r25
    1064:	f0 0d       	add	r31, r0
    1066:	38 9f       	mul	r19, r24
    1068:	f0 0d       	add	r31, r0
    106a:	11 24       	eor	r1, r1
    106c:	ec 0f       	add	r30, r28
    106e:	fd 1f       	adc	r31, r29
    1070:	e3 59       	subi	r30, 0x93	; 147
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	80 81       	ld	r24, Z
    1076:	81 60       	ori	r24, 0x01	; 1
    1078:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    107a:	df 91       	pop	r29
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1080:	e0 91 49 01 	lds	r30, 0x0149
    1084:	f0 91 4a 01 	lds	r31, 0x014A
    1088:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    108a:	2d e0       	ldi	r18, 0x0D	; 13
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	ac 01       	movw	r20, r24
    1090:	42 9f       	mul	r20, r18
    1092:	c0 01       	movw	r24, r0
    1094:	43 9f       	mul	r20, r19
    1096:	90 0d       	add	r25, r0
    1098:	52 9f       	mul	r21, r18
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	df 01       	movw	r26, r30
    10a4:	aa 58       	subi	r26, 0x8A	; 138
    10a6:	bf 4f       	sbci	r27, 0xFF	; 255
    10a8:	ee 58       	subi	r30, 0x8E	; 142
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	20 81       	ld	r18, Z
    10ae:	31 81       	ldd	r19, Z+1	; 0x01
    10b0:	42 81       	ldd	r20, Z+2	; 0x02
    10b2:	53 81       	ldd	r21, Z+3	; 0x03
    10b4:	8d 91       	ld	r24, X+
    10b6:	9d 91       	ld	r25, X+
    10b8:	0d 90       	ld	r0, X+
    10ba:	bc 91       	ld	r27, X
    10bc:	a0 2d       	mov	r26, r0
    10be:	28 1b       	sub	r18, r24
    10c0:	39 0b       	sbc	r19, r25
    10c2:	4a 0b       	sbc	r20, r26
    10c4:	5b 0b       	sbc	r21, r27
    10c6:	57 ff       	sbrs	r21, 7
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    10d2:	b9 01       	movw	r22, r18
    10d4:	ca 01       	movw	r24, r20
    10d6:	08 95       	ret

000010d8 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    10dc:	c0 91 49 01 	lds	r28, 0x0149
    10e0:	d0 91 4a 01 	lds	r29, 0x014A
    10e4:	68 2f       	mov	r22, r24
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    10e8:	8d e0       	ldi	r24, 0x0D	; 13
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	68 9f       	mul	r22, r24
    10ee:	f0 01       	movw	r30, r0
    10f0:	69 9f       	mul	r22, r25
    10f2:	f0 0d       	add	r31, r0
    10f4:	78 9f       	mul	r23, r24
    10f6:	f0 0d       	add	r31, r0
    10f8:	11 24       	eor	r1, r1
    10fa:	ec 0f       	add	r30, r28
    10fc:	fd 1f       	adc	r31, r29
    10fe:	df 01       	movw	r26, r30
    1100:	aa 58       	subi	r26, 0x8A	; 138
    1102:	bf 4f       	sbci	r27, 0xFF	; 255
    1104:	ee 58       	subi	r30, 0x8E	; 142
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	42 81       	ldd	r20, Z+2	; 0x02
    110e:	53 81       	ldd	r21, Z+3	; 0x03
    1110:	8d 91       	ld	r24, X+
    1112:	9d 91       	ld	r25, X+
    1114:	0d 90       	ld	r0, X+
    1116:	bc 91       	ld	r27, X
    1118:	a0 2d       	mov	r26, r0
    111a:	28 1b       	sub	r18, r24
    111c:	39 0b       	sbc	r19, r25
    111e:	4a 0b       	sbc	r20, r26
    1120:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1122:	57 fd       	sbrc	r21, 7
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    1126:	21 15       	cp	r18, r1
    1128:	31 05       	cpc	r19, r1
    112a:	41 05       	cpc	r20, r1
    112c:	51 05       	cpc	r21, r1
    112e:	11 f0       	breq	.+4      	; 0x1134 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	14 c0       	rjmp	.+40     	; 0x115c <Timebase_DownCounter_Period_Value_Expired+0x84>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	8d e0       	ldi	r24, 0x0D	; 13
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	ac 01       	movw	r20, r24
    113c:	64 9f       	mul	r22, r20
    113e:	c0 01       	movw	r24, r0
    1140:	65 9f       	mul	r22, r21
    1142:	90 0d       	add	r25, r0
    1144:	74 9f       	mul	r23, r20
    1146:	90 0d       	add	r25, r0
    1148:	11 24       	eor	r1, r1
    114a:	c8 0f       	add	r28, r24
    114c:	d9 1f       	adc	r29, r25
    114e:	c3 59       	subi	r28, 0x93	; 147
    1150:	df 4f       	sbci	r29, 0xFF	; 255
    1152:	88 81       	ld	r24, Y
    1154:	80 ff       	sbrs	r24, 0
    1156:	21 e0       	ldi	r18, 0x01	; 1
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    115c:	82 2f       	mov	r24, r18
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1164:	1f 93       	push	r17
    1166:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    1168:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <Timebase_DownCounter_Period_Value_Expired>
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	11 f0       	breq	.+4      	; 0x1174 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	18 c0       	rjmp	.+48     	; 0x11a4 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1174:	e0 91 49 01 	lds	r30, 0x0149
    1178:	f0 91 4a 01 	lds	r31, 0x014A
    117c:	21 2f       	mov	r18, r17
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8d e0       	ldi	r24, 0x0D	; 13
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	ac 01       	movw	r20, r24
    1186:	24 9f       	mul	r18, r20
    1188:	c0 01       	movw	r24, r0
    118a:	25 9f       	mul	r18, r21
    118c:	90 0d       	add	r25, r0
    118e:	34 9f       	mul	r19, r20
    1190:	90 0d       	add	r25, r0
    1192:	11 24       	eor	r1, r1
    1194:	e8 0f       	add	r30, r24
    1196:	f9 1f       	adc	r31, r25
    1198:	e3 59       	subi	r30, 0x93	; 147
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 81       	ld	r24, Z
    119e:	8e 7f       	andi	r24, 0xFE	; 254
    11a0:	80 83       	st	Z, r24
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    11a4:	1f 91       	pop	r17
    11a6:	08 95       	ret

000011a8 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
    11a8:	1f 93       	push	r17
    11aa:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    11ac:	81 2f       	mov	r24, r17
    11ae:	0e 94 53 07 	call	0xea6	; 0xea6 <Timebase_DownCounter_Update>
  }
}


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    11b2:	1f 5f       	subi	r17, 0xFF	; 255
    11b4:	15 30       	cpi	r17, 0x05	; 5
    11b6:	d1 f7       	brne	.-12     	; 0x11ac <Timebase_DownCounter_Update_All+0x4>
    Timebase_DownCounter_Update(i);
  }
}
    11b8:	1f 91       	pop	r17
    11ba:	08 95       	ret

000011bc <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    11bc:	40 91 49 01 	lds	r20, 0x0149
    11c0:	50 91 4a 01 	lds	r21, 0x014A
    11c4:	da 01       	movw	r26, r20
    11c6:	a2 59       	subi	r26, 0x92	; 146
    11c8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    11ce:	6d e0       	ldi	r22, 0x0D	; 13
    11d0:	70 e0       	ldi	r23, 0x00	; 0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    11d2:	1d 92       	st	X+, r1
    11d4:	1d 92       	st	X+, r1
    11d6:	1d 92       	st	X+, r1
    11d8:	1c 92       	st	X, r1
    11da:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    11dc:	14 96       	adiw	r26, 0x04	; 4
    11de:	1d 92       	st	X+, r1
    11e0:	1d 92       	st	X+, r1
    11e2:	1d 92       	st	X+, r1
    11e4:	1c 92       	st	X, r1
    11e6:	17 97       	sbiw	r26, 0x07	; 7
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    11e8:	26 9f       	mul	r18, r22
    11ea:	f0 01       	movw	r30, r0
    11ec:	27 9f       	mul	r18, r23
    11ee:	f0 0d       	add	r31, r0
    11f0:	36 9f       	mul	r19, r22
    11f2:	f0 0d       	add	r31, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	e4 0f       	add	r30, r20
    11f8:	f5 1f       	adc	r31, r21
    11fa:	e3 59       	subi	r30, 0x93	; 147
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1200:	80 7e       	andi	r24, 0xE0	; 224
    1202:	80 83       	st	Z, r24
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	1d 96       	adiw	r26, 0x0d	; 13
    Timebase_DownCounter_Update(i);
  }
}

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    120a:	25 30       	cpi	r18, 0x05	; 5
    120c:	31 05       	cpc	r19, r1
    120e:	09 f7       	brne	.-62     	; 0x11d2 <Timebase_DownCounter_Reset_All+0x16>
    Timebase_DownCounter_Reset(i);
  }
}
    1210:	08 95       	ret

00001212 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1212:	e0 91 49 01 	lds	r30, 0x0149
    1216:	f0 91 4a 01 	lds	r31, 0x014A
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9c 01       	movw	r18, r24
    121e:	44 e0       	ldi	r20, 0x04	; 4
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	4a 95       	dec	r20
    1226:	e1 f7       	brne	.-8      	; 0x1220 <Timebase_DownCounter_SS_Get_Status+0xe>
    1228:	28 0f       	add	r18, r24
    122a:	39 1f       	adc	r19, r25
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	80 8d       	ldd	r24, Z+24	; 0x18
    1232:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1234:	8f 70       	andi	r24, 0x0F	; 15
    1236:	08 95       	ret

00001238 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1238:	e0 91 49 01 	lds	r30, 0x0149
    123c:	f0 91 4a 01 	lds	r31, 0x014A
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9c 01       	movw	r18, r24
    1244:	54 e0       	ldi	r21, 0x04	; 4
    1246:	22 0f       	add	r18, r18
    1248:	33 1f       	adc	r19, r19
    124a:	5a 95       	dec	r21
    124c:	e1 f7       	brne	.-8      	; 0x1246 <Timebase_DownCounter_SS_Set_Status+0xe>
    124e:	28 0f       	add	r18, r24
    1250:	39 1f       	adc	r19, r25
    1252:	e2 0f       	add	r30, r18
    1254:	f3 1f       	adc	r31, r19
    1256:	6f 70       	andi	r22, 0x0F	; 15
    1258:	66 0f       	add	r22, r22
    125a:	80 8d       	ldd	r24, Z+24	; 0x18
    125c:	81 7e       	andi	r24, 0xE1	; 225
    125e:	86 2b       	or	r24, r22
    1260:	80 8f       	std	Z+24, r24	; 0x18
}
    1262:	08 95       	ret

00001264 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1264:	e0 91 49 01 	lds	r30, 0x0149
    1268:	f0 91 4a 01 	lds	r31, 0x014A
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	9c 01       	movw	r18, r24
    1270:	64 e0       	ldi	r22, 0x04	; 4
    1272:	22 0f       	add	r18, r18
    1274:	33 1f       	adc	r19, r19
    1276:	6a 95       	dec	r22
    1278:	e1 f7       	brne	.-8      	; 0x1272 <Timebase_DownCounter_SS_Get_Value+0xe>
    127a:	28 0f       	add	r18, r24
    127c:	39 1f       	adc	r19, r25
    127e:	e2 0f       	add	r30, r18
    1280:	f3 1f       	adc	r31, r19
    1282:	df 01       	movw	r26, r30
    1284:	91 96       	adiw	r26, 0x21	; 33
    1286:	61 a1       	ldd	r22, Z+33	; 0x21
    1288:	11 96       	adiw	r26, 0x01	; 1
    128a:	7c 91       	ld	r23, X
    128c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
    128e:	12 96       	adiw	r26, 0x02	; 2
    1290:	8c 91       	ld	r24, X
    1292:	12 97       	sbiw	r26, 0x02	; 2
    1294:	13 96       	adiw	r26, 0x03	; 3
    1296:	9c 91       	ld	r25, X
    1298:	08 95       	ret

0000129a <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    129a:	e0 91 49 01 	lds	r30, 0x0149
    129e:	f0 91 4a 01 	lds	r31, 0x014A
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	9c 01       	movw	r18, r24
    12a6:	a4 e0       	ldi	r26, 0x04	; 4
    12a8:	22 0f       	add	r18, r18
    12aa:	33 1f       	adc	r19, r19
    12ac:	aa 95       	dec	r26
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <Timebase_DownCounter_SS_Set_Value+0xe>
    12b0:	28 0f       	add	r18, r24
    12b2:	39 1f       	adc	r19, r25
    12b4:	e2 0f       	add	r30, r18
    12b6:	f3 1f       	adc	r31, r19
    12b8:	41 a3       	std	Z+33, r20	; 0x21
    12ba:	52 a3       	std	Z+34, r21	; 0x22
    12bc:	63 a3       	std	Z+35, r22	; 0x23
    12be:	74 a3       	std	Z+36, r23	; 0x24
}
    12c0:	08 95       	ret

000012c2 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    12c2:	e0 91 49 01 	lds	r30, 0x0149
    12c6:	f0 91 4a 01 	lds	r31, 0x014A
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c 01       	movw	r18, r24
    12ce:	b4 e0       	ldi	r27, 0x04	; 4
    12d0:	22 0f       	add	r18, r18
    12d2:	33 1f       	adc	r19, r19
    12d4:	ba 95       	dec	r27
    12d6:	e1 f7       	brne	.-8      	; 0x12d0 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    12d8:	28 0f       	add	r18, r24
    12da:	39 1f       	adc	r19, r25
    12dc:	e2 0f       	add	r30, r18
    12de:	f3 1f       	adc	r31, r19
    12e0:	df 01       	movw	r26, r30
    12e2:	59 96       	adiw	r26, 0x19	; 25
    12e4:	61 8d       	ldd	r22, Z+25	; 0x19
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	7c 91       	ld	r23, X
    12ea:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
    12ec:	12 96       	adiw	r26, 0x02	; 2
    12ee:	8c 91       	ld	r24, X
    12f0:	12 97       	sbiw	r26, 0x02	; 2
    12f2:	13 96       	adiw	r26, 0x03	; 3
    12f4:	9c 91       	ld	r25, X
    12f6:	08 95       	ret

000012f8 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    12f8:	e0 91 49 01 	lds	r30, 0x0149
    12fc:	f0 91 4a 01 	lds	r31, 0x014A
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 01       	movw	r18, r24
    1304:	44 e0       	ldi	r20, 0x04	; 4
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	4a 95       	dec	r20
    130c:	e1 f7       	brne	.-8      	; 0x1306 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    130e:	28 0f       	add	r18, r24
    1310:	39 1f       	adc	r19, r25
    1312:	e2 0f       	add	r30, r18
    1314:	f3 1f       	adc	r31, r19
    1316:	df 01       	movw	r26, r30
    1318:	5d 96       	adiw	r26, 0x1d	; 29
    131a:	65 8d       	ldd	r22, Z+29	; 0x1d
    131c:	11 96       	adiw	r26, 0x01	; 1
    131e:	7c 91       	ld	r23, X
    1320:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	8c 91       	ld	r24, X
    1326:	12 97       	sbiw	r26, 0x02	; 2
    1328:	13 96       	adiw	r26, 0x03	; 3
    132a:	9c 91       	ld	r25, X
    132c:	08 95       	ret

0000132e <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    132e:	e0 91 49 01 	lds	r30, 0x0149
    1332:	f0 91 4a 01 	lds	r31, 0x014A
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 01       	movw	r18, r24
    133a:	a4 e0       	ldi	r26, 0x04	; 4
    133c:	22 0f       	add	r18, r18
    133e:	33 1f       	adc	r19, r19
    1340:	aa 95       	dec	r26
    1342:	e1 f7       	brne	.-8      	; 0x133c <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1344:	28 0f       	add	r18, r24
    1346:	39 1f       	adc	r19, r25
    1348:	e2 0f       	add	r30, r18
    134a:	f3 1f       	adc	r31, r19
    134c:	41 8f       	std	Z+25, r20	; 0x19
    134e:	52 8f       	std	Z+26, r21	; 0x1a
    1350:	63 8f       	std	Z+27, r22	; 0x1b
    1352:	74 8f       	std	Z+28, r23	; 0x1c
}
    1354:	08 95       	ret

00001356 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1356:	e0 91 49 01 	lds	r30, 0x0149
    135a:	f0 91 4a 01 	lds	r31, 0x014A
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 01       	movw	r18, r24
    1362:	b4 e0       	ldi	r27, 0x04	; 4
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	ba 95       	dec	r27
    136a:	e1 f7       	brne	.-8      	; 0x1364 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    136c:	28 0f       	add	r18, r24
    136e:	39 1f       	adc	r19, r25
    1370:	e2 0f       	add	r30, r18
    1372:	f3 1f       	adc	r31, r19
    1374:	45 8f       	std	Z+29, r20	; 0x1d
    1376:	56 8f       	std	Z+30, r21	; 0x1e
    1378:	67 8f       	std	Z+31, r22	; 0x1f
    137a:	70 a3       	std	Z+32, r23	; 0x20
}
    137c:	08 95       	ret

0000137e <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    137e:	e0 91 49 01 	lds	r30, 0x0149
    1382:	f0 91 4a 01 	lds	r31, 0x014A
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 01       	movw	r18, r24
    138a:	44 e0       	ldi	r20, 0x04	; 4
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	4a 95       	dec	r20
    1392:	e1 f7       	brne	.-8      	; 0x138c <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1394:	28 0f       	add	r18, r24
    1396:	39 1f       	adc	r19, r25
    1398:	e2 0f       	add	r30, r18
    139a:	f3 1f       	adc	r31, r19
    139c:	df 01       	movw	r26, r30
    139e:	95 96       	adiw	r26, 0x25	; 37
    13a0:	65 a1       	ldd	r22, Z+37	; 0x25
    13a2:	11 96       	adiw	r26, 0x01	; 1
    13a4:	7c 91       	ld	r23, X
    13a6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
    13a8:	12 96       	adiw	r26, 0x02	; 2
    13aa:	8c 91       	ld	r24, X
    13ac:	12 97       	sbiw	r26, 0x02	; 2
    13ae:	13 96       	adiw	r26, 0x03	; 3
    13b0:	9c 91       	ld	r25, X
    13b2:	08 95       	ret

000013b4 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    13b4:	e0 91 49 01 	lds	r30, 0x0149
    13b8:	f0 91 4a 01 	lds	r31, 0x014A
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    13c0:	77 ff       	sbrs	r23, 7
    13c2:	0f c0       	rjmp	.+30     	; 0x13e2 <Timebase_DownCounter_SS_Set_PeriodValue+0x2e>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    13c4:	c9 01       	movw	r24, r18
    13c6:	b4 e0       	ldi	r27, 0x04	; 4
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	ba 95       	dec	r27
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    13d0:	82 0f       	add	r24, r18
    13d2:	93 1f       	adc	r25, r19
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	15 a2       	std	Z+37, r1	; 0x25
    13da:	16 a2       	std	Z+38, r1	; 0x26
    13dc:	17 a2       	std	Z+39, r1	; 0x27
    13de:	10 a6       	std	Z+40, r1	; 0x28
    13e0:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    13e2:	c9 01       	movw	r24, r18
    13e4:	a4 e0       	ldi	r26, 0x04	; 4
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	aa 95       	dec	r26
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    13ee:	82 0f       	add	r24, r18
    13f0:	93 1f       	adc	r25, r19
    13f2:	e8 0f       	add	r30, r24
    13f4:	f9 1f       	adc	r31, r25
    13f6:	45 a3       	std	Z+37, r20	; 0x25
    13f8:	56 a3       	std	Z+38, r21	; 0x26
    13fa:	67 a3       	std	Z+39, r22	; 0x27
    13fc:	70 a7       	std	Z+40, r23	; 0x28
    13fe:	08 95       	ret

00001400 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1400:	e0 91 49 01 	lds	r30, 0x0149
    1404:	f0 91 4a 01 	lds	r31, 0x014A
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9c 01       	movw	r18, r24
    140c:	44 e0       	ldi	r20, 0x04	; 4
    140e:	22 0f       	add	r18, r18
    1410:	33 1f       	adc	r19, r19
    1412:	4a 95       	dec	r20
    1414:	e1 f7       	brne	.-8      	; 0x140e <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1416:	28 0f       	add	r18, r24
    1418:	39 1f       	adc	r19, r25
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1420:	81 70       	andi	r24, 0x01	; 1
    1422:	08 95       	ret

00001424 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    1424:	e0 91 49 01 	lds	r30, 0x0149
    1428:	f0 91 4a 01 	lds	r31, 0x014A
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 01       	movw	r18, r24
    1430:	54 e0       	ldi	r21, 0x04	; 4
    1432:	22 0f       	add	r18, r18
    1434:	33 1f       	adc	r19, r19
    1436:	5a 95       	dec	r21
    1438:	e1 f7       	brne	.-8      	; 0x1432 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    143a:	28 0f       	add	r18, r24
    143c:	39 1f       	adc	r19, r25
    143e:	e2 0f       	add	r30, r18
    1440:	f3 1f       	adc	r31, r19
    1442:	80 8d       	ldd	r24, Z+24	; 0x18
    1444:	81 60       	ori	r24, 0x01	; 1
    1446:	80 8f       	std	Z+24, r24	; 0x18
}
    1448:	08 95       	ret

0000144a <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    144a:	e0 91 49 01 	lds	r30, 0x0149
    144e:	f0 91 4a 01 	lds	r31, 0x014A
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c 01       	movw	r18, r24
    1456:	64 e0       	ldi	r22, 0x04	; 4
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	6a 95       	dec	r22
    145e:	e1 f7       	brne	.-8      	; 0x1458 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1460:	28 0f       	add	r18, r24
    1462:	39 1f       	adc	r19, r25
    1464:	e2 0f       	add	r30, r18
    1466:	f3 1f       	adc	r31, r19
    1468:	80 8d       	ldd	r24, Z+24	; 0x18
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	80 8f       	std	Z+24, r24	; 0x18
}
    146e:	08 95       	ret

00001470 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1470:	e0 91 49 01 	lds	r30, 0x0149
    1474:	f0 91 4a 01 	lds	r31, 0x014A
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9c 01       	movw	r18, r24
    147c:	74 e0       	ldi	r23, 0x04	; 4
    147e:	22 0f       	add	r18, r18
    1480:	33 1f       	adc	r19, r19
    1482:	7a 95       	dec	r23
    1484:	e1 f7       	brne	.-8      	; 0x147e <Timebase_DownCounter_SS_Reset+0xe>
    1486:	28 0f       	add	r18, r24
    1488:	39 1f       	adc	r19, r25
    148a:	e2 0f       	add	r30, r18
    148c:	f3 1f       	adc	r31, r19
    148e:	15 8e       	std	Z+29, r1	; 0x1d
    1490:	16 8e       	std	Z+30, r1	; 0x1e
    1492:	17 8e       	std	Z+31, r1	; 0x1f
    1494:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1496:	11 8e       	std	Z+25, r1	; 0x19
    1498:	12 8e       	std	Z+26, r1	; 0x1a
    149a:	13 8e       	std	Z+27, r1	; 0x1b
    149c:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    149e:	11 a2       	std	Z+33, r1	; 0x21
    14a0:	12 a2       	std	Z+34, r1	; 0x22
    14a2:	13 a2       	std	Z+35, r1	; 0x23
    14a4:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    14a6:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    14a8:	80 7e       	andi	r24, 0xE0	; 224
    14aa:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    14ac:	08 95       	ret

000014ae <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    14ae:	e0 91 49 01 	lds	r30, 0x0149
    14b2:	f0 91 4a 01 	lds	r31, 0x014A
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9c 01       	movw	r18, r24
    14ba:	a4 e0       	ldi	r26, 0x04	; 4
    14bc:	22 0f       	add	r18, r18
    14be:	33 1f       	adc	r19, r19
    14c0:	aa 95       	dec	r26
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    14c4:	28 0f       	add	r18, r24
    14c6:	39 1f       	adc	r19, r25
    14c8:	e2 0f       	add	r30, r18
    14ca:	f3 1f       	adc	r31, r19
    14cc:	15 8e       	std	Z+29, r1	; 0x1d
    14ce:	16 8e       	std	Z+30, r1	; 0x1e
    14d0:	17 8e       	std	Z+31, r1	; 0x1f
    14d2:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    14d4:	11 8e       	std	Z+25, r1	; 0x19
    14d6:	12 8e       	std	Z+26, r1	; 0x1a
    14d8:	13 8e       	std	Z+27, r1	; 0x1b
    14da:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    14dc:	11 a2       	std	Z+33, r1	; 0x21
    14de:	12 a2       	std	Z+34, r1	; 0x22
    14e0:	13 a2       	std	Z+35, r1	; 0x23
    14e2:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    14e4:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    14e6:	80 7e       	andi	r24, 0xE0	; 224
    14e8:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    14ea:	08 95       	ret

000014ec <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    14ec:	e0 91 49 01 	lds	r30, 0x0149
    14f0:	f0 91 4a 01 	lds	r31, 0x014A
    14f4:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    14f6:	9c 01       	movw	r18, r24
    14f8:	b4 e0       	ldi	r27, 0x04	; 4
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	ba 95       	dec	r27
    1500:	e1 f7       	brne	.-8      	; 0x14fa <Timebase_DownCounter_SS_Start+0xe>
    1502:	28 0f       	add	r18, r24
    1504:	39 1f       	adc	r19, r25
    1506:	e2 0f       	add	r30, r18
    1508:	f3 1f       	adc	r31, r19
    150a:	90 8d       	ldd	r25, Z+24	; 0x18
    150c:	89 2f       	mov	r24, r25
    150e:	86 95       	lsr	r24
    1510:	8f 70       	andi	r24, 0x0F	; 15
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	19 f0       	breq	.+6      	; 0x151c <Timebase_DownCounter_SS_Start+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1516:	91 7e       	andi	r25, 0xE1	; 225
    1518:	92 60       	ori	r25, 0x02	; 2
    151a:	90 8f       	std	Z+24, r25	; 0x18
    151c:	08 95       	ret

0000151e <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    151e:	e0 91 49 01 	lds	r30, 0x0149
    1522:	f0 91 4a 01 	lds	r31, 0x014A
    1526:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1528:	9c 01       	movw	r18, r24
    152a:	44 e0       	ldi	r20, 0x04	; 4
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	4a 95       	dec	r20
    1532:	e1 f7       	brne	.-8      	; 0x152c <Timebase_DownCounter_SS_Stop+0xe>
    1534:	28 0f       	add	r18, r24
    1536:	39 1f       	adc	r19, r25
    1538:	e2 0f       	add	r30, r18
    153a:	f3 1f       	adc	r31, r19
    153c:	90 8d       	ldd	r25, Z+24	; 0x18
    153e:	89 2f       	mov	r24, r25
    1540:	86 95       	lsr	r24
    1542:	8f 70       	andi	r24, 0x0F	; 15
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	19 f0       	breq	.+6      	; 0x154e <Timebase_DownCounter_SS_Stop+0x30>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1548:	91 7e       	andi	r25, 0xE1	; 225
    154a:	94 60       	ori	r25, 0x04	; 4
    154c:	90 8f       	std	Z+24, r25	; 0x18
    154e:	08 95       	ret

00001550 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1550:	2f 92       	push	r2
    1552:	3f 92       	push	r3
    1554:	4f 92       	push	r4
    1556:	5f 92       	push	r5
    1558:	6f 92       	push	r6
    155a:	7f 92       	push	r7
    155c:	8f 92       	push	r8
    155e:	9f 92       	push	r9
    1560:	af 92       	push	r10
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1576:	00 d0       	rcall	.+0      	; 0x1578 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1578:	cd b7       	in	r28, 0x3d	; 61
    157a:	de b7       	in	r29, 0x3e	; 62
    157c:	4a 01       	movw	r8, r20
    157e:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1580:	20 91 49 01 	lds	r18, 0x0149
    1584:	30 91 4a 01 	lds	r19, 0x014A
    1588:	3c 83       	std	Y+4, r19	; 0x04
    158a:	2b 83       	std	Y+3, r18	; 0x03
    158c:	a8 2f       	mov	r26, r24
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ba 83       	std	Y+2, r27	; 0x02
    1592:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1594:	fd 01       	movw	r30, r26
    1596:	64 e0       	ldi	r22, 0x04	; 4
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	6a 95       	dec	r22
    159e:	e1 f7       	brne	.-8      	; 0x1598 <Timebase_DownCounter_SS_Set_Securely+0x48>
    15a0:	ea 0f       	add	r30, r26
    15a2:	fb 1f       	adc	r31, r27
    15a4:	e2 0f       	add	r30, r18
    15a6:	f3 1f       	adc	r31, r19
    15a8:	80 8d       	ldd	r24, Z+24	; 0x18
    15aa:	86 95       	lsr	r24
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <Timebase_DownCounter_SS_Set_Securely+0x62>
    15b0:	6d c0       	rjmp	.+218    	; 0x168c <Timebase_DownCounter_SS_Set_Securely+0x13c>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    15b2:	81 a2       	std	Z+33, r8	; 0x21
    15b4:	92 a2       	std	Z+34, r9	; 0x22
    15b6:	a3 a2       	std	Z+35, r10	; 0x23
    15b8:	b4 a2       	std	Z+36, r11	; 0x24


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    15ba:	f9 01       	movw	r30, r18
    15bc:	c0 84       	ldd	r12, Z+8	; 0x08
    15be:	d1 84       	ldd	r13, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15c0:	22 84       	ldd	r2, Z+10	; 0x0a
    15c2:	33 84       	ldd	r3, Z+11	; 0x0b
    15c4:	44 84       	ldd	r4, Z+12	; 0x0c
    15c6:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    15c8:	21 81       	ldd	r18, Z+1	; 0x01
    15ca:	32 81       	ldd	r19, Z+2	; 0x02
    15cc:	40 e0       	ldi	r20, 0x00	; 0
    15ce:	50 e0       	ldi	r21, 0x00	; 0
    15d0:	c5 01       	movw	r24, r10
    15d2:	b4 01       	movw	r22, r8
    15d4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
    15d8:	7b 01       	movw	r14, r22
    15da:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    15dc:	ab 81       	ldd	r26, Y+3	; 0x03
    15de:	bc 81       	ldd	r27, Y+4	; 0x04
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	2d 91       	ld	r18, X+
    15e4:	3c 91       	ld	r19, X
    15e6:	12 97       	sbiw	r26, 0x02	; 2
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	c5 01       	movw	r24, r10
    15ee:	b4 01       	movw	r22, r8
    15f0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
    15f4:	c9 01       	movw	r24, r18
    15f6:	da 01       	movw	r26, r20
    15f8:	3c 01       	movw	r6, r24
    15fa:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    15fc:	56 01       	movw	r10, r12
    15fe:	cc 24       	eor	r12, r12
    1600:	dd 24       	eor	r13, r13
    1602:	ae 0c       	add	r10, r14
    1604:	bf 1c       	adc	r11, r15
    1606:	c0 1e       	adc	r12, r16
    1608:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    160a:	eb 81       	ldd	r30, Y+3	; 0x03
    160c:	fc 81       	ldd	r31, Y+4	; 0x04
    160e:	81 81       	ldd	r24, Z+1	; 0x01
    1610:	92 81       	ldd	r25, Z+2	; 0x02
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	a8 16       	cp	r10, r24
    1618:	b9 06       	cpc	r11, r25
    161a:	ca 06       	cpc	r12, r26
    161c:	db 06       	cpc	r13, r27
    161e:	94 f0       	brlt	.+36     	; 0x1644 <Timebase_DownCounter_SS_Set_Securely+0xf4>
	  sec_val += 1;
    1620:	08 94       	sec
    1622:	61 1c       	adc	r6, r1
    1624:	71 1c       	adc	r7, r1
    1626:	81 1c       	adc	r8, r1
    1628:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    162a:	21 81       	ldd	r18, Z+1	; 0x01
    162c:	32 81       	ldd	r19, Z+2	; 0x02
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	c6 01       	movw	r24, r12
    1634:	b5 01       	movw	r22, r10
    1636:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
    163a:	ac 01       	movw	r20, r24
    163c:	cb 01       	movw	r24, r22
    163e:	da 01       	movw	r26, r20
    1640:	5c 01       	movw	r10, r24
    1642:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1644:	e9 81       	ldd	r30, Y+1	; 0x01
    1646:	fa 81       	ldd	r31, Y+2	; 0x02
    1648:	54 e0       	ldi	r21, 0x04	; 4
    164a:	ee 0f       	add	r30, r30
    164c:	ff 1f       	adc	r31, r31
    164e:	5a 95       	dec	r21
    1650:	e1 f7       	brne	.-8      	; 0x164a <Timebase_DownCounter_SS_Set_Securely+0xfa>
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	3a 81       	ldd	r19, Y+2	; 0x02
    1656:	e2 0f       	add	r30, r18
    1658:	f3 1f       	adc	r31, r19
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	e8 0f       	add	r30, r24
    1660:	f9 1f       	adc	r31, r25
    1662:	26 0c       	add	r2, r6
    1664:	37 1c       	adc	r3, r7
    1666:	48 1c       	adc	r4, r8
    1668:	59 1c       	adc	r5, r9
    166a:	21 8e       	std	Z+25, r2	; 0x19
    166c:	32 8e       	std	Z+26, r3	; 0x1a
    166e:	43 8e       	std	Z+27, r4	; 0x1b
    1670:	54 8e       	std	Z+28, r5	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1672:	a5 8e       	std	Z+29, r10	; 0x1d
    1674:	b6 8e       	std	Z+30, r11	; 0x1e
    1676:	c7 8e       	std	Z+31, r12	; 0x1f
    1678:	d0 a2       	std	Z+32, r13	; 0x20
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    167a:	90 8d       	ldd	r25, Z+24	; 0x18
    167c:	89 2f       	mov	r24, r25
    167e:	86 95       	lsr	r24
    1680:	8f 70       	andi	r24, 0x0F	; 15
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	19 f0       	breq	.+6      	; 0x168c <Timebase_DownCounter_SS_Set_Securely+0x13c>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1686:	91 7e       	andi	r25, 0xE1	; 225
    1688:	92 60       	ori	r25, 0x02	; 2
    168a:	90 8f       	std	Z+24, r25	; 0x18
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	df 90       	pop	r13
    16a2:	cf 90       	pop	r12
    16a4:	bf 90       	pop	r11
    16a6:	af 90       	pop	r10
    16a8:	9f 90       	pop	r9
    16aa:	8f 90       	pop	r8
    16ac:	7f 90       	pop	r7
    16ae:	6f 90       	pop	r6
    16b0:	5f 90       	pop	r5
    16b2:	4f 90       	pop	r4
    16b4:	3f 90       	pop	r3
    16b6:	2f 90       	pop	r2
    16b8:	08 95       	ret

000016ba <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    16ba:	e0 91 49 01 	lds	r30, 0x0149
    16be:	f0 91 4a 01 	lds	r31, 0x014A
    16c2:	a8 2f       	mov	r26, r24
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	9d 01       	movw	r18, r26
    16c8:	94 e0       	ldi	r25, 0x04	; 4
    16ca:	22 0f       	add	r18, r18
    16cc:	33 1f       	adc	r19, r19
    16ce:	9a 95       	dec	r25
    16d0:	e1 f7       	brne	.-8      	; 0x16ca <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    16d2:	2a 0f       	add	r18, r26
    16d4:	3b 1f       	adc	r19, r27
    16d6:	e2 0f       	add	r30, r18
    16d8:	f3 1f       	adc	r31, r19
    16da:	15 8e       	std	Z+29, r1	; 0x1d
    16dc:	16 8e       	std	Z+30, r1	; 0x1e
    16de:	17 8e       	std	Z+31, r1	; 0x1f
    16e0:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    16e2:	11 8e       	std	Z+25, r1	; 0x19
    16e4:	12 8e       	std	Z+26, r1	; 0x1a
    16e6:	13 8e       	std	Z+27, r1	; 0x1b
    16e8:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    16ea:	11 a2       	std	Z+33, r1	; 0x21
    16ec:	12 a2       	std	Z+34, r1	; 0x22
    16ee:	13 a2       	std	Z+35, r1	; 0x23
    16f0:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    16f2:	90 8d       	ldd	r25, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    16f4:	90 7e       	andi	r25, 0xE0	; 224
    16f6:	90 8f       	std	Z+24, r25	; 0x18
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    16f8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <Timebase_DownCounter_SS_Set_Securely>
} 
    16fc:	08 95       	ret

000016fe <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    16fe:	2f 92       	push	r2
    1700:	3f 92       	push	r3
    1702:	4f 92       	push	r4
    1704:	5f 92       	push	r5
    1706:	6f 92       	push	r6
    1708:	7f 92       	push	r7
    170a:	8f 92       	push	r8
    170c:	9f 92       	push	r9
    170e:	af 92       	push	r10
    1710:	bf 92       	push	r11
    1712:	cf 92       	push	r12
    1714:	df 92       	push	r13
    1716:	ef 92       	push	r14
    1718:	ff 92       	push	r15
    171a:	0f 93       	push	r16
    171c:	1f 93       	push	r17
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <Timebase_DownCounter_SS_Update+0x26>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <Timebase_DownCounter_SS_Update+0x28>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    172a:	20 91 49 01 	lds	r18, 0x0149
    172e:	30 91 4a 01 	lds	r19, 0x014A
    1732:	3c 83       	std	Y+4, r19	; 0x04
    1734:	2b 83       	std	Y+3, r18	; 0x03
    1736:	c8 2e       	mov	r12, r24
    1738:	dd 24       	eor	r13, r13
    173a:	c6 01       	movw	r24, r12
    173c:	44 e0       	ldi	r20, 0x04	; 4
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	4a 95       	dec	r20
    1744:	e1 f7       	brne	.-8      	; 0x173e <Timebase_DownCounter_SS_Update+0x40>
    1746:	8c 0d       	add	r24, r12
    1748:	9d 1d       	adc	r25, r13
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	fc 01       	movw	r30, r24
    1754:	80 8d       	ldd	r24, Z+24	; 0x18
    1756:	86 95       	lsr	r24
    1758:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	09 f0       	breq	.+2      	; 0x1760 <Timebase_DownCounter_SS_Update+0x62>
    175e:	56 c0       	rjmp	.+172    	; 0x180c <Timebase_DownCounter_SS_Update+0x10e>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1760:	f9 01       	movw	r30, r18
    1762:	80 85       	ldd	r24, Z+8	; 0x08
    1764:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    1766:	4c 01       	movw	r8, r24
    1768:	aa 24       	eor	r10, r10
    176a:	bb 24       	eor	r11, r11
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    176c:	82 85       	ldd	r24, Z+10	; 0x0a
    176e:	93 85       	ldd	r25, Z+11	; 0x0b
    1770:	a4 85       	ldd	r26, Z+12	; 0x0c
    1772:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    1774:	e9 81       	ldd	r30, Y+1	; 0x01
    1776:	fa 81       	ldd	r31, Y+2	; 0x02
    1778:	e1 8c       	ldd	r14, Z+25	; 0x19
    177a:	f2 8c       	ldd	r15, Z+26	; 0x1a
    177c:	03 8d       	ldd	r16, Z+27	; 0x1b
    177e:	14 8d       	ldd	r17, Z+28	; 0x1c
    1780:	e8 1a       	sub	r14, r24
    1782:	f9 0a       	sbc	r15, r25
    1784:	0a 0b       	sbc	r16, r26
    1786:	1b 0b       	sbc	r17, r27
    1788:	17 ff       	sbrs	r17, 7
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <Timebase_DownCounter_SS_Update+0x94>
    178c:	ee 24       	eor	r14, r14
    178e:	ff 24       	eor	r15, r15
    1790:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    1792:	eb 81       	ldd	r30, Y+3	; 0x03
    1794:	fc 81       	ldd	r31, Y+4	; 0x04
    1796:	21 81       	ldd	r18, Z+1	; 0x01
    1798:	32 81       	ldd	r19, Z+2	; 0x02
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	c8 01       	movw	r24, r16
    17a0:	b7 01       	movw	r22, r14
    17a2:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
	temp_s += temp_ss;
    17a6:	f6 01       	movw	r30, r12
    17a8:	24 e0       	ldi	r18, 0x04	; 4
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	2a 95       	dec	r18
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <Timebase_DownCounter_SS_Update+0xac>
    17b2:	ec 0d       	add	r30, r12
    17b4:	fd 1d       	adc	r31, r13
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	e2 0f       	add	r30, r18
    17bc:	f3 1f       	adc	r31, r19
    17be:	25 8d       	ldd	r18, Z+29	; 0x1d
    17c0:	36 8d       	ldd	r19, Z+30	; 0x1e
    17c2:	47 8d       	ldd	r20, Z+31	; 0x1f
    17c4:	50 a1       	ldd	r21, Z+32	; 0x20
    17c6:	28 19       	sub	r18, r8
    17c8:	39 09       	sbc	r19, r9
    17ca:	4a 09       	sbc	r20, r10
    17cc:	5b 09       	sbc	r21, r11
    17ce:	26 0f       	add	r18, r22
    17d0:	37 1f       	adc	r19, r23
    17d2:	48 1f       	adc	r20, r24
    17d4:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    17d6:	21 a3       	std	Z+33, r18	; 0x21
    17d8:	32 a3       	std	Z+34, r19	; 0x22
    17da:	43 a3       	std	Z+35, r20	; 0x23
    17dc:	54 a3       	std	Z+36, r21	; 0x24
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    17de:	12 16       	cp	r1, r18
    17e0:	13 06       	cpc	r1, r19
    17e2:	14 06       	cpc	r1, r20
    17e4:	15 06       	cpc	r1, r21
    17e6:	0c f4       	brge	.+2      	; 0x17ea <Timebase_DownCounter_SS_Update+0xec>
    17e8:	4b c0       	rjmp	.+150    	; 0x1880 <Timebase_DownCounter_SS_Update+0x182>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    17ea:	15 8e       	std	Z+29, r1	; 0x1d
    17ec:	16 8e       	std	Z+30, r1	; 0x1e
    17ee:	17 8e       	std	Z+31, r1	; 0x1f
    17f0:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    17f2:	11 8e       	std	Z+25, r1	; 0x19
    17f4:	12 8e       	std	Z+26, r1	; 0x1a
    17f6:	13 8e       	std	Z+27, r1	; 0x1b
    17f8:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    17fa:	11 a2       	std	Z+33, r1	; 0x21
    17fc:	12 a2       	std	Z+34, r1	; 0x22
    17fe:	13 a2       	std	Z+35, r1	; 0x23
    1800:	14 a2       	std	Z+36, r1	; 0x24
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1802:	80 8d       	ldd	r24, Z+24	; 0x18
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1804:	80 7e       	andi	r24, 0xE0	; 224
    1806:	88 60       	ori	r24, 0x08	; 8
    1808:	80 8f       	std	Z+24, r24	; 0x18
    180a:	3a c0       	rjmp	.+116    	; 0x1880 <Timebase_DownCounter_SS_Update+0x182>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    180c:	82 30       	cpi	r24, 0x02	; 2
    180e:	c1 f5       	brne	.+112    	; 0x1880 <Timebase_DownCounter_SS_Update+0x182>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1810:	eb 81       	ldd	r30, Y+3	; 0x03
    1812:	fc 81       	ldd	r31, Y+4	; 0x04
    1814:	60 84       	ldd	r6, Z+8	; 0x08
    1816:	71 84       	ldd	r7, Z+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1818:	e2 84       	ldd	r14, Z+10	; 0x0a
    181a:	f3 84       	ldd	r15, Z+11	; 0x0b
    181c:	04 85       	ldd	r16, Z+12	; 0x0c
    181e:	15 85       	ldd	r17, Z+13	; 0x0d
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1820:	e9 81       	ldd	r30, Y+1	; 0x01
    1822:	fa 81       	ldd	r31, Y+2	; 0x02
    1824:	21 a0       	ldd	r2, Z+33	; 0x21
    1826:	32 a0       	ldd	r3, Z+34	; 0x22
    1828:	43 a0       	ldd	r4, Z+35	; 0x23
    182a:	54 a0       	ldd	r5, Z+36	; 0x24
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	21 81       	ldd	r18, Z+1	; 0x01
    1832:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    1834:	a1 80       	ldd	r10, Z+1	; 0x01
    1836:	b2 80       	ldd	r11, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	c2 01       	movw	r24, r4
    183e:	b1 01       	movw	r22, r2
    1840:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
    1844:	e2 0e       	add	r14, r18
    1846:	f3 1e       	adc	r15, r19
    1848:	04 1f       	adc	r16, r20
    184a:	15 1f       	adc	r17, r21
    184c:	e9 81       	ldd	r30, Y+1	; 0x01
    184e:	fa 81       	ldd	r31, Y+2	; 0x02
    1850:	e1 8e       	std	Z+25, r14	; 0x19
    1852:	f2 8e       	std	Z+26, r15	; 0x1a
    1854:	03 8f       	std	Z+27, r16	; 0x1b
    1856:	14 8f       	std	Z+28, r17	; 0x1c
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1858:	cc 24       	eor	r12, r12
    185a:	dd 24       	eor	r13, r13
    185c:	c2 01       	movw	r24, r4
    185e:	b1 01       	movw	r22, r2
    1860:	a6 01       	movw	r20, r12
    1862:	95 01       	movw	r18, r10
    1864:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <__divmodsi4>
    1868:	88 24       	eor	r8, r8
    186a:	99 24       	eor	r9, r9
    186c:	66 0e       	add	r6, r22
    186e:	77 1e       	adc	r7, r23
    1870:	88 1e       	adc	r8, r24
    1872:	99 1e       	adc	r9, r25
    1874:	e9 81       	ldd	r30, Y+1	; 0x01
    1876:	fa 81       	ldd	r31, Y+2	; 0x02
    1878:	65 8e       	std	Z+29, r6	; 0x1d
    187a:	76 8e       	std	Z+30, r7	; 0x1e
    187c:	87 8e       	std	Z+31, r8	; 0x1f
    187e:	90 a2       	std	Z+32, r9	; 0x20
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	9f 90       	pop	r9
    189e:	8f 90       	pop	r8
    18a0:	7f 90       	pop	r7
    18a2:	6f 90       	pop	r6
    18a4:	5f 90       	pop	r5
    18a6:	4f 90       	pop	r4
    18a8:	3f 90       	pop	r3
    18aa:	2f 90       	pop	r2
    18ac:	08 95       	ret

000018ae <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	e0 91 49 01 	lds	r30, 0x0149
    18b4:	f0 91 4a 01 	lds	r31, 0x014A
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	9c 01       	movw	r18, r24
    18bc:	54 e0       	ldi	r21, 0x04	; 4
    18be:	22 0f       	add	r18, r18
    18c0:	33 1f       	adc	r19, r19
    18c2:	5a 95       	dec	r21
    18c4:	e1 f7       	brne	.-8      	; 0x18be <Timebase_DownCounter_SS_Expired+0x10>
    18c6:	28 0f       	add	r18, r24
    18c8:	39 1f       	adc	r19, r25
    18ca:	e2 0f       	add	r30, r18
    18cc:	f3 1f       	adc	r31, r19
    18ce:	80 8d       	ldd	r24, Z+24	; 0x18
    18d0:	86 95       	lsr	r24
    18d2:	8f 70       	andi	r24, 0x0F	; 15
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	09 f4       	brne	.+2      	; 0x18da <Timebase_DownCounter_SS_Expired+0x2c>
    18d8:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    18da:	84 2f       	mov	r24, r20
    18dc:	08 95       	ret

000018de <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    18de:	e0 91 49 01 	lds	r30, 0x0149
    18e2:	f0 91 4a 01 	lds	r31, 0x014A
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    18e8:	9c 01       	movw	r18, r24
    18ea:	64 e0       	ldi	r22, 0x04	; 4
    18ec:	22 0f       	add	r18, r18
    18ee:	33 1f       	adc	r19, r19
    18f0:	6a 95       	dec	r22
    18f2:	e1 f7       	brne	.-8      	; 0x18ec <Timebase_DownCounter_SS_Expired_Event+0xe>
    18f4:	28 0f       	add	r18, r24
    18f6:	39 1f       	adc	r19, r25
    18f8:	e2 0f       	add	r30, r18
    18fa:	f3 1f       	adc	r31, r19
    18fc:	80 8d       	ldd	r24, Z+24	; 0x18
    18fe:	86 95       	lsr	r24
    1900:	8f 70       	andi	r24, 0x0F	; 15
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	11 f0       	breq	.+4      	; 0x190a <Timebase_DownCounter_SS_Expired_Event+0x2c>
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    190a:	15 8e       	std	Z+29, r1	; 0x1d
    190c:	16 8e       	std	Z+30, r1	; 0x1e
    190e:	17 8e       	std	Z+31, r1	; 0x1f
    1910:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1912:	11 8e       	std	Z+25, r1	; 0x19
    1914:	12 8e       	std	Z+26, r1	; 0x1a
    1916:	13 8e       	std	Z+27, r1	; 0x1b
    1918:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    191a:	11 a2       	std	Z+33, r1	; 0x21
    191c:	12 a2       	std	Z+34, r1	; 0x22
    191e:	13 a2       	std	Z+35, r1	; 0x23
    1920:	14 a2       	std	Z+36, r1	; 0x24
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1922:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1924:	80 7e       	andi	r24, 0xE0	; 224
    1926:	80 8f       	std	Z+24, r24	; 0x18
    1928:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    192a:	08 95       	ret

0000192c <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1930:	c0 91 49 01 	lds	r28, 0x0149
    1934:	d0 91 4a 01 	lds	r29, 0x014A
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    193c:	f9 01       	movw	r30, r18
    193e:	a4 e0       	ldi	r26, 0x04	; 4
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	aa 95       	dec	r26
    1946:	e1 f7       	brne	.-8      	; 0x1940 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    1948:	e2 0f       	add	r30, r18
    194a:	f3 1f       	adc	r31, r19
    194c:	ec 0f       	add	r30, r28
    194e:	fd 1f       	adc	r31, r29
    1950:	80 8d       	ldd	r24, Z+24	; 0x18
    1952:	80 fd       	sbrc	r24, 0
    1954:	20 c0       	rjmp	.+64     	; 0x1996 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1956:	81 a1       	ldd	r24, Z+33	; 0x21
    1958:	92 a1       	ldd	r25, Z+34	; 0x22
    195a:	a3 a1       	ldd	r26, Z+35	; 0x23
    195c:	b4 a1       	ldd	r27, Z+36	; 0x24
    195e:	84 1b       	sub	r24, r20
    1960:	95 0b       	sbc	r25, r21
    1962:	a6 0b       	sbc	r26, r22
    1964:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1966:	b7 ff       	sbrs	r27, 7
    1968:	05 c0       	rjmp	.+10     	; 0x1974 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x48>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    196a:	15 a2       	std	Z+37, r1	; 0x25
    196c:	16 a2       	std	Z+38, r1	; 0x26
    196e:	17 a2       	std	Z+39, r1	; 0x27
    1970:	10 a6       	std	Z+40, r1	; 0x28
    1972:	04 c0       	rjmp	.+8      	; 0x197c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x50>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1974:	85 a3       	std	Z+37, r24	; 0x25
    1976:	96 a3       	std	Z+38, r25	; 0x26
    1978:	a7 a3       	std	Z+39, r26	; 0x27
    197a:	b0 a7       	std	Z+40, r27	; 0x28
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
    197c:	f9 01       	movw	r30, r18
    197e:	74 e0       	ldi	r23, 0x04	; 4
    1980:	ee 0f       	add	r30, r30
    1982:	ff 1f       	adc	r31, r31
    1984:	7a 95       	dec	r23
    1986:	e1 f7       	brne	.-8      	; 0x1980 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    1988:	e2 0f       	add	r30, r18
    198a:	f3 1f       	adc	r31, r19
    198c:	ec 0f       	add	r30, r28
    198e:	fd 1f       	adc	r31, r29
    1990:	80 8d       	ldd	r24, Z+24	; 0x18
    1992:	81 60       	ori	r24, 0x01	; 1
    1994:	80 8f       	std	Z+24, r24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	08 95       	ret

0000199c <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    199c:	e0 91 49 01 	lds	r30, 0x0149
    19a0:	f0 91 4a 01 	lds	r31, 0x014A
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    19a6:	9c 01       	movw	r18, r24
    19a8:	b4 e0       	ldi	r27, 0x04	; 4
    19aa:	22 0f       	add	r18, r18
    19ac:	33 1f       	adc	r19, r19
    19ae:	ba 95       	dec	r27
    19b0:	e1 f7       	brne	.-8      	; 0x19aa <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    19b2:	28 0f       	add	r18, r24
    19b4:	39 1f       	adc	r19, r25
    19b6:	e2 0f       	add	r30, r18
    19b8:	f3 1f       	adc	r31, r19
    19ba:	21 a1       	ldd	r18, Z+33	; 0x21
    19bc:	32 a1       	ldd	r19, Z+34	; 0x22
    19be:	43 a1       	ldd	r20, Z+35	; 0x23
    19c0:	54 a1       	ldd	r21, Z+36	; 0x24
    19c2:	85 a1       	ldd	r24, Z+37	; 0x25
    19c4:	96 a1       	ldd	r25, Z+38	; 0x26
    19c6:	a7 a1       	ldd	r26, Z+39	; 0x27
    19c8:	b0 a5       	ldd	r27, Z+40	; 0x28
    19ca:	28 1b       	sub	r18, r24
    19cc:	39 0b       	sbc	r19, r25
    19ce:	4a 0b       	sbc	r20, r26
    19d0:	5b 0b       	sbc	r21, r27
    19d2:	57 ff       	sbrs	r21, 7
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x42>
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    19de:	b9 01       	movw	r22, r18
    19e0:	ca 01       	movw	r24, r20
    19e2:	08 95       	ret

000019e4 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    19e8:	c0 91 49 01 	lds	r28, 0x0149
    19ec:	d0 91 4a 01 	lds	r29, 0x014A
    19f0:	68 2f       	mov	r22, r24
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    19f4:	fb 01       	movw	r30, r22
    19f6:	44 e0       	ldi	r20, 0x04	; 4
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	4a 95       	dec	r20
    19fe:	e1 f7       	brne	.-8      	; 0x19f8 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    1a00:	e6 0f       	add	r30, r22
    1a02:	f7 1f       	adc	r31, r23
    1a04:	ec 0f       	add	r30, r28
    1a06:	fd 1f       	adc	r31, r29
    1a08:	21 a1       	ldd	r18, Z+33	; 0x21
    1a0a:	32 a1       	ldd	r19, Z+34	; 0x22
    1a0c:	43 a1       	ldd	r20, Z+35	; 0x23
    1a0e:	54 a1       	ldd	r21, Z+36	; 0x24
    1a10:	85 a1       	ldd	r24, Z+37	; 0x25
    1a12:	96 a1       	ldd	r25, Z+38	; 0x26
    1a14:	a7 a1       	ldd	r26, Z+39	; 0x27
    1a16:	b0 a5       	ldd	r27, Z+40	; 0x28
    1a18:	28 1b       	sub	r18, r24
    1a1a:	39 0b       	sbc	r19, r25
    1a1c:	4a 0b       	sbc	r20, r26
    1a1e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1a20:	57 fd       	sbrc	r21, 7
    1a22:	07 c0       	rjmp	.+14     	; 0x1a32 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_SS_Get_Period_Flag( window )){
    1a24:	21 15       	cp	r18, r1
    1a26:	31 05       	cpc	r19, r1
    1a28:	41 05       	cpc	r20, r1
    1a2a:	51 05       	cpc	r21, r1
    1a2c:	11 f0       	breq	.+4      	; 0x1a32 <Timebase_DownCounter_SS_Period_Value_Expired+0x4e>
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	10 c0       	rjmp	.+32     	; 0x1a52 <Timebase_DownCounter_SS_Period_Value_Expired+0x6e>
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	cb 01       	movw	r24, r22
    1a36:	34 e0       	ldi	r19, 0x04	; 4
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	3a 95       	dec	r19
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <Timebase_DownCounter_SS_Period_Value_Expired+0x54>
    1a40:	86 0f       	add	r24, r22
    1a42:	97 1f       	adc	r25, r23
    1a44:	c8 0f       	add	r28, r24
    1a46:	d9 1f       	adc	r29, r25
    1a48:	88 8d       	ldd	r24, Y+24	; 0x18
    1a4a:	80 ff       	sbrs	r24, 0
    1a4c:	21 e0       	ldi	r18, 0x01	; 1
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1a52:	82 2f       	mov	r24, r18
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	08 95       	ret

00001a5a <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1a5a:	1f 93       	push	r17
    1a5c:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == 1){
    1a5e:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Timebase_DownCounter_SS_Period_Value_Expired>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	11 f0       	breq	.+4      	; 0x1a6a <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	14 c0       	rjmp	.+40     	; 0x1a92 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x38>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1a6a:	e0 91 49 01 	lds	r30, 0x0149
    1a6e:	f0 91 4a 01 	lds	r31, 0x014A
    1a72:	21 2f       	mov	r18, r17
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	c9 01       	movw	r24, r18
    1a78:	54 e0       	ldi	r21, 0x04	; 4
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	5a 95       	dec	r21
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    1a82:	82 0f       	add	r24, r18
    1a84:	93 1f       	adc	r25, r19
    1a86:	e8 0f       	add	r30, r24
    1a88:	f9 1f       	adc	r31, r25
    1a8a:	80 8d       	ldd	r24, Z+24	; 0x18
    1a8c:	8e 7f       	andi	r24, 0xFE	; 254
    1a8e:	80 8f       	std	Z+24, r24	; 0x18
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1a92:	1f 91       	pop	r17
    1a94:	08 95       	ret

00001a96 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
    1a96:	1f 93       	push	r17
    1a98:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1a9a:	81 2f       	mov	r24, r17
    1a9c:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <Timebase_DownCounter_SS_Update>
  }
}


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1aa0:	1f 5f       	subi	r17, 0xFF	; 255
    1aa2:	15 30       	cpi	r17, 0x05	; 5
    1aa4:	d1 f7       	brne	.-12     	; 0x1a9a <Timebase_DownCounter_SS_Update_All+0x4>
    Timebase_DownCounter_SS_Update(i);
  }
}
    1aa6:	1f 91       	pop	r17
    1aa8:	08 95       	ret

00001aaa <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1aaa:	40 91 49 01 	lds	r20, 0x0149
    1aae:	50 91 4a 01 	lds	r21, 0x014A
    1ab2:	da 01       	movw	r26, r20
    1ab4:	59 96       	adiw	r26, 0x19	; 25
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	14 96       	adiw	r26, 0x04	; 4
    1abc:	1d 92       	st	X+, r1
    1abe:	1d 92       	st	X+, r1
    1ac0:	1d 92       	st	X+, r1
    1ac2:	1c 92       	st	X, r1
    1ac4:	17 97       	sbiw	r26, 0x07	; 7
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ac6:	1d 92       	st	X+, r1
    1ac8:	1d 92       	st	X+, r1
    1aca:	1d 92       	st	X+, r1
    1acc:	1c 92       	st	X, r1
    1ace:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ad0:	18 96       	adiw	r26, 0x08	; 8
    1ad2:	1d 92       	st	X+, r1
    1ad4:	1d 92       	st	X+, r1
    1ad6:	1d 92       	st	X+, r1
    1ad8:	1c 92       	st	X, r1
    1ada:	1b 97       	sbiw	r26, 0x0b	; 11
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1adc:	f9 01       	movw	r30, r18
    1ade:	64 e0       	ldi	r22, 0x04	; 4
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	6a 95       	dec	r22
    1ae6:	e1 f7       	brne	.-8      	; 0x1ae0 <Timebase_DownCounter_SS_Reset_All+0x36>
    1ae8:	e2 0f       	add	r30, r18
    1aea:	f3 1f       	adc	r31, r19
    1aec:	e4 0f       	add	r30, r20
    1aee:	f5 1f       	adc	r31, r21
    1af0:	80 8d       	ldd	r24, Z+24	; 0x18
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = 0;
    1af2:	80 7e       	andi	r24, 0xE0	; 224
    1af4:	80 8f       	std	Z+24, r24	; 0x18
    1af6:	2f 5f       	subi	r18, 0xFF	; 255
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	51 96       	adiw	r26, 0x11	; 17
    Timebase_DownCounter_SS_Update(i);
  }
}

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    1afc:	25 30       	cpi	r18, 0x05	; 5
    1afe:	31 05       	cpc	r19, r1
    1b00:	e1 f6       	brne	.-72     	; 0x1aba <Timebase_DownCounter_SS_Reset_All+0x10>
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1b02:	08 95       	ret

00001b04 <Timebase_Reset>:
void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1b04:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1b08:	0e 94 de 08 	call	0x11bc	; 0x11bc <Timebase_DownCounter_Reset_All>
  #endif
  
}
    1b0c:	08 95       	ret

00001b0e <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1b14:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1b18:	c8 01       	movw	r24, r16
    1b1a:	0e 94 77 03 	call	0x6ee	; 0x6ee <Timebase_Timer_Config>
  Timebase_Reset();
    1b1e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <Timebase_Reset>
}
    1b22:	1f 91       	pop	r17
    1b24:	0f 91       	pop	r16
    1b26:	08 95       	ret

00001b28 <Timebase_Main_Loop_Executables>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Update_All();
    1b28:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <Timebase_DownCounter_SS_Update_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1b2c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <Timebase_DownCounter_Update_All>
  #endif
}
    1b30:	08 95       	ret

00001b32 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1b32:	e0 91 49 01 	lds	r30, 0x0149
    1b36:	f0 91 4a 01 	lds	r31, 0x014A
    1b3a:	80 85       	ldd	r24, Z+8	; 0x08
    1b3c:	91 85       	ldd	r25, Z+9	; 0x09
    1b3e:	01 96       	adiw	r24, 0x01	; 1
    1b40:	91 87       	std	Z+9, r25	; 0x09
    1b42:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b44:	83 81       	ldd	r24, Z+3	; 0x03
    1b46:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    1b48:	80 85       	ldd	r24, Z+8	; 0x08
    1b4a:	91 85       	ldd	r25, Z+9	; 0x09
    1b4c:	61 81       	ldd	r22, Z+1	; 0x01
    1b4e:	72 81       	ldd	r23, Z+2	; 0x02
    1b50:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__udivmodhi4>
    1b54:	89 2b       	or	r24, r25
    1b56:	69 f4       	brne	.+26     	; 0x1b72 <Timebase_ISR_Executables+0x40>
    Timebase->Time.Seconds++;
    1b58:	82 85       	ldd	r24, Z+10	; 0x0a
    1b5a:	93 85       	ldd	r25, Z+11	; 0x0b
    1b5c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b5e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b60:	01 96       	adiw	r24, 0x01	; 1
    1b62:	a1 1d       	adc	r26, r1
    1b64:	b1 1d       	adc	r27, r1
    1b66:	82 87       	std	Z+10, r24	; 0x0a
    1b68:	93 87       	std	Z+11, r25	; 0x0b
    1b6a:	a4 87       	std	Z+12, r26	; 0x0c
    1b6c:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    1b6e:	11 86       	std	Z+9, r1	; 0x09
    1b70:	10 86       	std	Z+8, r1	; 0x08
    1b72:	08 95       	ret

00001b74 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	4f 93       	push	r20
    1b84:	5f 93       	push	r21
    1b86:	6f 93       	push	r22
    1b88:	7f 93       	push	r23
    1b8a:	8f 93       	push	r24
    1b8c:	9f 93       	push	r25
    1b8e:	af 93       	push	r26
    1b90:	bf 93       	push	r27
    1b92:	ef 93       	push	r30
    1b94:	ff 93       	push	r31
  PORTD|=(1<<5);
    1b96:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    1b98:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    1b9c:	5d 98       	cbi	0x0b, 5	; 11
}
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
    1bc0:	6f 92       	push	r6
    1bc2:	7f 92       	push	r7
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	5c 01       	movw	r10, r24
  if(Timebase_Timer_Get_Seconds() == end_val_s){
    while(Timebase_Timer_Get_SubSeconds() <= end_val_ss){
	}
  }*/
  
  UART_Transmit_Text("S ");
    1bde:	85 e0       	ldi	r24, 0x05	; 5
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_Text>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1be6:	e0 91 49 01 	lds	r30, 0x0149
    1bea:	f0 91 4a 01 	lds	r31, 0x014A
    1bee:	62 85       	ldd	r22, Z+10	; 0x0a
    1bf0:	73 85       	ldd	r23, Z+11	; 0x0b
    1bf2:	84 85       	ldd	r24, Z+12	; 0x0c
    1bf4:	95 85       	ldd	r25, Z+13	; 0x0d
    while(Timebase_Timer_Get_SubSeconds() <= end_val_ss){
	}
  }*/
  
  UART_Transmit_Text("S ");
  UART_Transmit_Number(Timebase_Timer_Get_Seconds());
    1bf6:	0e 94 2c 02 	call	0x458	; 0x458 <UART_Transmit_Number>
  UART_Transmit_Text(", ");
    1bfa:	88 e0       	ldi	r24, 0x08	; 8
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_Text>
  UART_Transmit_Text("SS ");
    1c02:	8b e0       	ldi	r24, 0x0B	; 11
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_Transmit_Text>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1c0a:	e0 91 49 01 	lds	r30, 0x0149
    1c0e:	f0 91 4a 01 	lds	r31, 0x014A
    1c12:	60 85       	ldd	r22, Z+8	; 0x08
    1c14:	71 85       	ldd	r23, Z+9	; 0x09
  
  UART_Transmit_Text("S ");
  UART_Transmit_Number(Timebase_Timer_Get_Seconds());
  UART_Transmit_Text(", ");
  UART_Transmit_Text("SS ");
  UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	0e 94 2c 02 	call	0x458	; 0x458 <UART_Transmit_Number>
  UART_Transmit_Text("TS ");
  UART_Transmit_Number(end_val_s);
  UART_Transmit_Text(", ");
  UART_Transmit_Text("TSS ");
  UART_Transmit_Number(end_val_ss);*/
  UART_Transmit_New_Line();
    1c1e:	0e 94 ce 01 	call	0x39c	; 0x39c <UART_Transmit_New_Line>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1c22:	c0 91 49 01 	lds	r28, 0x0149
    1c26:	d0 91 4a 01 	lds	r29, 0x014A
    1c2a:	e8 84       	ldd	r14, Y+8	; 0x08
    1c2c:	f9 84       	ldd	r15, Y+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1c2e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c30:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c32:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c34:	5d 85       	ldd	r21, Y+13	; 0x0d
  int32_t smpl_val = 0, curr_val = 0;
  int32_t smpl_ss  = Timebase_Timer_Get_SubSeconds();
  int32_t smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
    1c36:	69 81       	ldd	r22, Y+1	; 0x01
    1c38:	7a 81       	ldd	r23, Y+2	; 0x02
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
    1c42:	3b 01       	movw	r6, r22
    1c44:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
    1c46:	00 e0       	ldi	r16, 0x00	; 0
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	6e 0c       	add	r6, r14
    1c4c:	7f 1c       	adc	r7, r15
    1c4e:	80 1e       	adc	r8, r16
    1c50:	91 1e       	adc	r9, r17
  smpl_val += value;
    1c52:	cc 24       	eor	r12, r12
    1c54:	dd 24       	eor	r13, r13
    1c56:	6a 0c       	add	r6, r10
    1c58:	7b 1c       	adc	r7, r11
    1c5a:	8c 1c       	adc	r8, r12
    1c5c:	9d 1c       	adc	r9, r13
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	12 c0       	rjmp	.+36     	; 0x1c8c <Timebase_Timer_Delay_SubSeconds+0xcc>


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1c68:	e8 84       	ldd	r14, Y+8	; 0x08
    1c6a:	f9 84       	ldd	r15, Y+9	; 0x09
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1c6c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c6e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c70:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c72:	5d 85       	ldd	r21, Y+13	; 0x0d
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
    1c74:	69 81       	ldd	r22, Y+1	; 0x01
    1c76:	7a 81       	ldd	r23, Y+2	; 0x02
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <__mulsi3>
	curr_val += curr_ss;
    1c80:	00 e0       	ldi	r16, 0x00	; 0
    1c82:	10 e0       	ldi	r17, 0x00	; 0
    1c84:	6e 0d       	add	r22, r14
    1c86:	7f 1d       	adc	r23, r15
    1c88:	80 1f       	adc	r24, r16
    1c8a:	91 1f       	adc	r25, r17
  
  
  int32_t curr_ss  = 0; 
  int32_t curr_s   = 0; 
  
  while(curr_val<smpl_val){
    1c8c:	66 15       	cp	r22, r6
    1c8e:	77 05       	cpc	r23, r7
    1c90:	88 05       	cpc	r24, r8
    1c92:	99 05       	cpc	r25, r9
    1c94:	4c f3       	brlt	.-46     	; 0x1c68 <Timebase_Timer_Delay_SubSeconds+0xa8>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	08 95       	ret

00001cb4 <__mulsi3>:
    1cb4:	62 9f       	mul	r22, r18
    1cb6:	d0 01       	movw	r26, r0
    1cb8:	73 9f       	mul	r23, r19
    1cba:	f0 01       	movw	r30, r0
    1cbc:	82 9f       	mul	r24, r18
    1cbe:	e0 0d       	add	r30, r0
    1cc0:	f1 1d       	adc	r31, r1
    1cc2:	64 9f       	mul	r22, r20
    1cc4:	e0 0d       	add	r30, r0
    1cc6:	f1 1d       	adc	r31, r1
    1cc8:	92 9f       	mul	r25, r18
    1cca:	f0 0d       	add	r31, r0
    1ccc:	83 9f       	mul	r24, r19
    1cce:	f0 0d       	add	r31, r0
    1cd0:	74 9f       	mul	r23, r20
    1cd2:	f0 0d       	add	r31, r0
    1cd4:	65 9f       	mul	r22, r21
    1cd6:	f0 0d       	add	r31, r0
    1cd8:	99 27       	eor	r25, r25
    1cda:	72 9f       	mul	r23, r18
    1cdc:	b0 0d       	add	r27, r0
    1cde:	e1 1d       	adc	r30, r1
    1ce0:	f9 1f       	adc	r31, r25
    1ce2:	63 9f       	mul	r22, r19
    1ce4:	b0 0d       	add	r27, r0
    1ce6:	e1 1d       	adc	r30, r1
    1ce8:	f9 1f       	adc	r31, r25
    1cea:	bd 01       	movw	r22, r26
    1cec:	cf 01       	movw	r24, r30
    1cee:	11 24       	eor	r1, r1
    1cf0:	08 95       	ret

00001cf2 <__udivmodhi4>:
    1cf2:	aa 1b       	sub	r26, r26
    1cf4:	bb 1b       	sub	r27, r27
    1cf6:	51 e1       	ldi	r21, 0x11	; 17
    1cf8:	07 c0       	rjmp	.+14     	; 0x1d08 <__udivmodhi4_ep>

00001cfa <__udivmodhi4_loop>:
    1cfa:	aa 1f       	adc	r26, r26
    1cfc:	bb 1f       	adc	r27, r27
    1cfe:	a6 17       	cp	r26, r22
    1d00:	b7 07       	cpc	r27, r23
    1d02:	10 f0       	brcs	.+4      	; 0x1d08 <__udivmodhi4_ep>
    1d04:	a6 1b       	sub	r26, r22
    1d06:	b7 0b       	sbc	r27, r23

00001d08 <__udivmodhi4_ep>:
    1d08:	88 1f       	adc	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	5a 95       	dec	r21
    1d0e:	a9 f7       	brne	.-22     	; 0x1cfa <__udivmodhi4_loop>
    1d10:	80 95       	com	r24
    1d12:	90 95       	com	r25
    1d14:	bc 01       	movw	r22, r24
    1d16:	cd 01       	movw	r24, r26
    1d18:	08 95       	ret

00001d1a <__udivmodsi4>:
    1d1a:	a1 e2       	ldi	r26, 0x21	; 33
    1d1c:	1a 2e       	mov	r1, r26
    1d1e:	aa 1b       	sub	r26, r26
    1d20:	bb 1b       	sub	r27, r27
    1d22:	fd 01       	movw	r30, r26
    1d24:	0d c0       	rjmp	.+26     	; 0x1d40 <__udivmodsi4_ep>

00001d26 <__udivmodsi4_loop>:
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	ee 1f       	adc	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	a2 17       	cp	r26, r18
    1d30:	b3 07       	cpc	r27, r19
    1d32:	e4 07       	cpc	r30, r20
    1d34:	f5 07       	cpc	r31, r21
    1d36:	20 f0       	brcs	.+8      	; 0x1d40 <__udivmodsi4_ep>
    1d38:	a2 1b       	sub	r26, r18
    1d3a:	b3 0b       	sbc	r27, r19
    1d3c:	e4 0b       	sbc	r30, r20
    1d3e:	f5 0b       	sbc	r31, r21

00001d40 <__udivmodsi4_ep>:
    1d40:	66 1f       	adc	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	88 1f       	adc	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	1a 94       	dec	r1
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <__udivmodsi4_loop>
    1d4c:	60 95       	com	r22
    1d4e:	70 95       	com	r23
    1d50:	80 95       	com	r24
    1d52:	90 95       	com	r25
    1d54:	9b 01       	movw	r18, r22
    1d56:	ac 01       	movw	r20, r24
    1d58:	bd 01       	movw	r22, r26
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	08 95       	ret

00001d5e <__divmodsi4>:
    1d5e:	97 fb       	bst	r25, 7
    1d60:	09 2e       	mov	r0, r25
    1d62:	05 26       	eor	r0, r21
    1d64:	0e d0       	rcall	.+28     	; 0x1d82 <__divmodsi4_neg1>
    1d66:	57 fd       	sbrc	r21, 7
    1d68:	04 d0       	rcall	.+8      	; 0x1d72 <__divmodsi4_neg2>
    1d6a:	d7 df       	rcall	.-82     	; 0x1d1a <__udivmodsi4>
    1d6c:	0a d0       	rcall	.+20     	; 0x1d82 <__divmodsi4_neg1>
    1d6e:	00 1c       	adc	r0, r0
    1d70:	38 f4       	brcc	.+14     	; 0x1d80 <__divmodsi4_exit>

00001d72 <__divmodsi4_neg2>:
    1d72:	50 95       	com	r21
    1d74:	40 95       	com	r20
    1d76:	30 95       	com	r19
    1d78:	21 95       	neg	r18
    1d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d7e:	5f 4f       	sbci	r21, 0xFF	; 255

00001d80 <__divmodsi4_exit>:
    1d80:	08 95       	ret

00001d82 <__divmodsi4_neg1>:
    1d82:	f6 f7       	brtc	.-4      	; 0x1d80 <__divmodsi4_exit>
    1d84:	90 95       	com	r25
    1d86:	80 95       	com	r24
    1d88:	70 95       	com	r23
    1d8a:	61 95       	neg	r22
    1d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1d90:	9f 4f       	sbci	r25, 0xFF	; 255
    1d92:	08 95       	ret

00001d94 <_exit>:
    1d94:	f8 94       	cli

00001d96 <__stop_program>:
    1d96:	ff cf       	rjmp	.-2      	; 0x1d96 <__stop_program>
