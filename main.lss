
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001a04  00001a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  0080011c  0080011c  00001ab4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dcd  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002795  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000608  00000000  00000000  00005076  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001599  00000000  00000000  0000567e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  00006c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f2a  00000000  00000000  000072c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000dd9  00000000  00000000  000081f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00008fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e0       	ldi	r30, 0x04	; 4
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 38       	cpi	r26, 0x87	; 135
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "timebase.h"
#include "uart.h"

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
  
  UART_Init(19200);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	7b e4       	ldi	r23, 0x4B	; 75
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 c0 02 	call	0x580	; 0x580 <UART_Init>
  Timebase_Init(1000);
      b6:	88 ee       	ldi	r24, 0xE8	; 232
      b8:	93 e0       	ldi	r25, 0x03	; 3
      ba:	0e 94 34 0c 	call	0x1868	; 0x1868 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD|=(1<<5);
      be:	55 9a       	sbi	0x0a, 5	; 10
  PORTD&=~(1<<5);
      c0:	5d 98       	cbi	0x0b, 5	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	c8 ec       	ldi	r28, 0xC8	; 200
      c4:	d0 e0       	ldi	r29, 0x00	; 0
  
  while(1){
    
    UART_Transmit_Text("Timebase ");
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	91 e0       	ldi	r25, 0x01	; 1
      ca:	0e 94 be 01 	call	0x37c	; 0x37c <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
      ce:	0e 94 64 04 	call	0x8c8	; 0x8c8 <Timebase_Timer_Get_Seconds>
      d2:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_Transmit_Number>
	UART_Transmit_Text(" ");
      d6:	8a e0       	ldi	r24, 0x0A	; 10
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	0e 94 be 01 	call	0x37c	; 0x37c <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
      de:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <Timebase_Timer_Get_SubSeconds>
      e2:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_Transmit_Number>
	UART_Transmit_New_Line();
      e6:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_Transmit_New_Line>
      ea:	88 ee       	ldi	r24, 0xE8	; 232
      ec:	93 e0       	ldi	r25, 0x03	; 3
      ee:	fe 01       	movw	r30, r28
      f0:	31 97       	sbiw	r30, 0x01	; 1
      f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x4a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      f6:	d9 f7       	brne	.-10     	; 0xee <main+0x48>
      f8:	e6 cf       	rjmp	.-52     	; 0xc6 <main+0x20>

000000fa <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
      fa:	10 92 1c 01 	sts	0x011C, r1
      fe:	ed e1       	ldi	r30, 0x1D	; 29
     100:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     102:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	e5 32       	cpi	r30, 0x25	; 37
     108:	f8 07       	cpc	r31, r24
     10a:	d9 f7       	brne	.-10     	; 0x102 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     10c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     10e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     110:	80 e2       	ldi	r24, 0x20	; 32
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	93 a3       	std	Z+35, r25	; 0x23
     116:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     118:	15 a2       	std	Z+37, r1	; 0x25
     11a:	14 a2       	std	Z+36, r1	; 0x24
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	04 c0       	rjmp	.+8      	; 0x128 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     120:	e4 5e       	subi	r30, 0xE4	; 228
     122:	fe 4f       	sbci	r31, 0xFE	; 254
     124:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     126:	2f 5f       	subi	r18, 0xFF	; 255
     128:	80 91 47 01 	lds	r24, 0x0147
     12c:	90 91 48 01 	lds	r25, 0x0148
     130:	e2 2f       	mov	r30, r18
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	e8 17       	cp	r30, r24
     136:	f9 07       	cpc	r31, r25
     138:	98 f3       	brcs	.-26     	; 0x120 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     13a:	08 95       	ret

0000013c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     13c:	08 95       	ret

0000013e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     13e:	08 95       	ret

00000140 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     140:	9b 01       	movw	r18, r22
     142:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     144:	60 e4       	ldi	r22, 0x40	; 64
     146:	72 e4       	ldi	r23, 0x42	; 66
     148:	8f e0       	ldi	r24, 0x0F	; 15
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__udivmodsi4>
     150:	21 50       	subi	r18, 0x01	; 1
     152:	30 40       	sbci	r19, 0x00	; 0
     154:	40 40       	sbci	r20, 0x00	; 0
     156:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     158:	e0 ec       	ldi	r30, 0xC0	; 192
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	82 60       	ori	r24, 0x02	; 2
     160:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     162:	bb 27       	eor	r27, r27
     164:	a5 2f       	mov	r26, r21
     166:	94 2f       	mov	r25, r20
     168:	83 2f       	mov	r24, r19
     16a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     16e:	20 93 c4 00 	sts	0x00C4, r18
}
     172:	08 95       	ret

00000174 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     174:	e1 ec       	ldi	r30, 0xC1	; 193
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	88 60       	ori	r24, 0x08	; 8
     17c:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     17e:	86 e0       	ldi	r24, 0x06	; 6
     180:	80 93 c2 00 	sts	0x00C2, r24
}
     184:	08 95       	ret

00000186 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     186:	e1 ec       	ldi	r30, 0xC1	; 193
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	80 61       	ori	r24, 0x10	; 16
     18e:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	80 93 c2 00 	sts	0x00C2, r24
}
     196:	08 95       	ret

00000198 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     198:	e1 ec       	ldi	r30, 0xC1	; 193
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	80 68       	ori	r24, 0x80	; 128
     1a0:	80 83       	st	Z, r24
  sei();
     1a2:	78 94       	sei
}
     1a4:	08 95       	ret

000001a6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1a6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1a8:	80 91 c0 00 	lds	r24, 0x00C0
     1ac:	85 ff       	sbrs	r24, 5
     1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1b0:	90 93 c6 00 	sts	0x00C6, r25
}
     1b4:	08 95       	ret

000001b6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1b6:	df 93       	push	r29
     1b8:	cf 93       	push	r28
     1ba:	0f 92       	push	r0
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1c0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1c2:	80 91 c0 00 	lds	r24, 0x00C0
     1c6:	84 ff       	sbrs	r24, 4
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1ca:	80 91 c6 00 	lds	r24, 0x00C6
     1ce:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	08 c0       	rjmp	.+16     	; 0x1e4 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     1d4:	80 91 c0 00 	lds	r24, 0x00C0
     1d8:	83 ff       	sbrs	r24, 3
     1da:	07 c0       	rjmp	.+14     	; 0x1ea <UART_Receive_Byte+0x34>
    val=UDR0;
     1dc:	80 91 c6 00 	lds	r24, 0x00C6
     1e0:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     1e2:	82 e0       	ldi	r24, 0x02	; 2
     1e4:	80 93 1c 01 	sts	0x011C, r24
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     1ea:	80 91 c6 00 	lds	r24, 0x00C6
     1ee:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     1f0:	10 92 1c 01 	sts	0x011C, r1
  }
  return val;
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
}
     1f6:	0f 90       	pop	r0
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     1fe:	80 91 26 01 	lds	r24, 0x0126
}
     202:	08 95       	ret

00000204 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     204:	10 92 26 01 	sts	0x0126, r1
}
     208:	08 95       	ret

0000020a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     20a:	1f 93       	push	r17
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	ab 01       	movw	r20, r22
     212:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     214:	4f 3f       	cpi	r20, 0xFF	; 255
     216:	51 05       	cpc	r21, r1
     218:	61 05       	cpc	r22, r1
     21a:	71 05       	cpc	r23, r1
     21c:	09 f0       	breq	.+2      	; 0x220 <UART_Transmit_Byte_Hex+0x16>
     21e:	28 f4       	brcc	.+10     	; 0x22a <UART_Transmit_Byte_Hex+0x20>
     220:	e8 e0       	ldi	r30, 0x08	; 8
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	c2 e0       	ldi	r28, 0x02	; 2
     226:	d0 e0       	ldi	r29, 0x00	; 0
     228:	11 c0       	rjmp	.+34     	; 0x24c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     22a:	40 30       	cpi	r20, 0x00	; 0
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	58 07       	cpc	r21, r24
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	68 07       	cpc	r22, r24
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	78 07       	cpc	r23, r24
     238:	28 f0       	brcs	.+10     	; 0x244 <UART_Transmit_Byte_Hex+0x3a>
     23a:	e0 e2       	ldi	r30, 0x20	; 32
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	c8 e0       	ldi	r28, 0x08	; 8
     240:	d0 e0       	ldi	r29, 0x00	; 0
     242:	04 c0       	rjmp	.+8      	; 0x24c <UART_Transmit_Byte_Hex+0x42>
     244:	e0 e1       	ldi	r30, 0x10	; 16
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	c4 e0       	ldi	r28, 0x04	; 4
     24a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     24c:	80 91 c0 00 	lds	r24, 0x00C0
     250:	85 ff       	sbrs	r24, 5
     252:	fc cf       	rjmp	.-8      	; 0x24c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     254:	80 e3       	ldi	r24, 0x30	; 48
     256:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     25a:	80 91 c0 00 	lds	r24, 0x00C0
     25e:	85 ff       	sbrs	r24, 5
     260:	fc cf       	rjmp	.-8      	; 0x25a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     262:	88 e7       	ldi	r24, 0x78	; 120
     264:	80 93 c6 00 	sts	0x00C6, r24
     268:	10 e0       	ldi	r17, 0x00	; 0
     26a:	1f c0       	rjmp	.+62     	; 0x2aa <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     26c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     26e:	db 01       	movw	r26, r22
     270:	ca 01       	movw	r24, r20
     272:	0e 2e       	mov	r0, r30
     274:	04 c0       	rjmp	.+8      	; 0x27e <UART_Transmit_Byte_Hex+0x74>
     276:	b6 95       	lsr	r27
     278:	a7 95       	ror	r26
     27a:	97 95       	ror	r25
     27c:	87 95       	ror	r24
     27e:	0a 94       	dec	r0
     280:	d2 f7       	brpl	.-12     	; 0x276 <UART_Transmit_Byte_Hex+0x6c>
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	8f 70       	andi	r24, 0x0F	; 15
     286:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     288:	8a 30       	cpi	r24, 0x0A	; 10
     28a:	91 05       	cpc	r25, r1
     28c:	20 f0       	brcs	.+8      	; 0x296 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     28e:	9c 01       	movw	r18, r24
     290:	29 5c       	subi	r18, 0xC9	; 201
     292:	3f 4f       	sbci	r19, 0xFF	; 255
     294:	03 c0       	rjmp	.+6      	; 0x29c <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     296:	9c 01       	movw	r18, r24
     298:	20 5d       	subi	r18, 0xD0	; 208
     29a:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     29c:	80 91 c0 00 	lds	r24, 0x00C0
     2a0:	85 ff       	sbrs	r24, 5
     2a2:	fc cf       	rjmp	.-8      	; 0x29c <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2a4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2a8:	1f 5f       	subi	r17, 0xFF	; 255
     2aa:	81 2f       	mov	r24, r17
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	8c 17       	cp	r24, r28
     2b0:	9d 07       	cpc	r25, r29
     2b2:	e0 f2       	brcs	.-72     	; 0x26c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	1f 91       	pop	r17
     2ba:	08 95       	ret

000002bc <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2bc:	cf 92       	push	r12
     2be:	df 92       	push	r13
     2c0:	ef 92       	push	r14
     2c2:	ff 92       	push	r15
     2c4:	0f 93       	push	r16
     2c6:	1f 93       	push	r17
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	ab 01       	movw	r20, r22
     2ce:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     2d0:	4f 3f       	cpi	r20, 0xFF	; 255
     2d2:	51 05       	cpc	r21, r1
     2d4:	61 05       	cpc	r22, r1
     2d6:	71 05       	cpc	r23, r1
     2d8:	09 f0       	breq	.+2      	; 0x2dc <UART_Transmit_Byte_Bin+0x20>
     2da:	10 f4       	brcc	.+4      	; 0x2e0 <UART_Transmit_Byte_Bin+0x24>
     2dc:	97 e0       	ldi	r25, 0x07	; 7
     2de:	0b c0       	rjmp	.+22     	; 0x2f6 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     2e0:	40 30       	cpi	r20, 0x00	; 0
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	58 07       	cpc	r21, r24
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	68 07       	cpc	r22, r24
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	78 07       	cpc	r23, r24
     2ee:	10 f0       	brcs	.+4      	; 0x2f4 <UART_Transmit_Byte_Bin+0x38>
     2f0:	9f e1       	ldi	r25, 0x1F	; 31
     2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <UART_Transmit_Byte_Bin+0x3a>
     2f4:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2f6:	80 91 c0 00 	lds	r24, 0x00C0
     2fa:	85 ff       	sbrs	r24, 5
     2fc:	fc cf       	rjmp	.-8      	; 0x2f6 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     2fe:	80 e3       	ldi	r24, 0x30	; 48
     300:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     304:	80 91 c0 00 	lds	r24, 0x00C0
     308:	85 ff       	sbrs	r24, 5
     30a:	fc cf       	rjmp	.-8      	; 0x304 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     30c:	82 e6       	ldi	r24, 0x62	; 98
     30e:	80 93 c6 00 	sts	0x00C6, r24
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     316:	e9 2f       	mov	r30, r25
     318:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     31a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     31c:	11 e3       	ldi	r17, 0x31	; 49
     31e:	ef 01       	movw	r28, r30
     320:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     322:	cf 01       	movw	r24, r30
     324:	82 1b       	sub	r24, r18
     326:	93 0b       	sbc	r25, r19
     328:	6a 01       	movw	r12, r20
     32a:	7b 01       	movw	r14, r22
     32c:	04 c0       	rjmp	.+8      	; 0x336 <UART_Transmit_Byte_Bin+0x7a>
     32e:	f6 94       	lsr	r15
     330:	e7 94       	ror	r14
     332:	d7 94       	ror	r13
     334:	c7 94       	ror	r12
     336:	8a 95       	dec	r24
     338:	d2 f7       	brpl	.-12     	; 0x32e <UART_Transmit_Byte_Bin+0x72>
     33a:	d7 01       	movw	r26, r14
     33c:	c6 01       	movw	r24, r12
     33e:	81 70       	andi	r24, 0x01	; 1
     340:	90 70       	andi	r25, 0x00	; 0
     342:	89 2b       	or	r24, r25
     344:	39 f0       	breq	.+14     	; 0x354 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     346:	80 91 c0 00 	lds	r24, 0x00C0
     34a:	85 ff       	sbrs	r24, 5
     34c:	fc cf       	rjmp	.-8      	; 0x346 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     34e:	10 93 c6 00 	sts	0x00C6, r17
     352:	06 c0       	rjmp	.+12     	; 0x360 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     354:	80 91 c0 00 	lds	r24, 0x00C0
     358:	85 ff       	sbrs	r24, 5
     35a:	fc cf       	rjmp	.-8      	; 0x354 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     35c:	00 93 c6 00 	sts	0x00C6, r16
     360:	2f 5f       	subi	r18, 0xFF	; 255
     362:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     364:	2c 17       	cp	r18, r28
     366:	3d 07       	cpc	r19, r29
     368:	e1 f6       	brne	.-72     	; 0x322 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	0f 91       	pop	r16
     372:	ff 90       	pop	r15
     374:	ef 90       	pop	r14
     376:	df 90       	pop	r13
     378:	cf 90       	pop	r12
     37a:	08 95       	ret

0000037c <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     37c:	ac 01       	movw	r20, r24
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	07 c0       	rjmp	.+14     	; 0x390 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     382:	80 91 c0 00 	lds	r24, 0x00C0
     386:	85 ff       	sbrs	r24, 5
     388:	fc cf       	rjmp	.-8      	; 0x382 <UART_Transmit_Text+0x6>
  UDR0=val;
     38a:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     38e:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     390:	fa 01       	movw	r30, r20
     392:	e2 0f       	add	r30, r18
     394:	f1 1d       	adc	r31, r1
     396:	e0 81       	ld	r30, Z
     398:	ee 23       	and	r30, r30
     39a:	99 f7       	brne	.-26     	; 0x382 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     39c:	08 95       	ret

0000039e <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     39e:	8c e0       	ldi	r24, 0x0C	; 12
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 be 01 	call	0x37c	; 0x37c <UART_Transmit_Text>
}
     3a6:	08 95       	ret

000003a8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3a8:	8f e0       	ldi	r24, 0x0F	; 15
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	0e 94 be 01 	call	0x37c	; 0x37c <UART_Transmit_Text>
}
     3b0:	08 95       	ret

000003b2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	6b 01       	movw	r12, r22
     3c2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3c4:	61 15       	cp	r22, r1
     3c6:	71 05       	cpc	r23, r1
     3c8:	81 05       	cpc	r24, r1
     3ca:	91 05       	cpc	r25, r1
     3cc:	31 f4       	brne	.+12     	; 0x3da <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3ce:	10 92 1d 01 	sts	0x011D, r1
    UART.InputNumberDigits=1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 25 01 	sts	0x0125, r24
     3d8:	23 c0       	rjmp	.+70     	; 0x420 <UART_Determine_Digit_Numbers+0x6e>
     3da:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     3dc:	0b 2d       	mov	r16, r11
     3de:	10 e0       	ldi	r17, 0x00	; 0
     3e0:	04 5e       	subi	r16, 0xE4	; 228
     3e2:	1e 4f       	sbci	r17, 0xFE	; 254
     3e4:	c7 01       	movw	r24, r14
     3e6:	b6 01       	movw	r22, r12
     3e8:	2a e0       	ldi	r18, 0x0A	; 10
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	40 e0       	ldi	r20, 0x00	; 0
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__udivmodsi4>
     3f4:	f8 01       	movw	r30, r16
     3f6:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     3f8:	c7 01       	movw	r24, r14
     3fa:	b6 01       	movw	r22, r12
     3fc:	2a e0       	ldi	r18, 0x0A	; 10
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__udivmodsi4>
     408:	c9 01       	movw	r24, r18
     40a:	da 01       	movw	r26, r20
     40c:	6c 01       	movw	r12, r24
     40e:	7d 01       	movw	r14, r26
      i++;
     410:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     412:	c1 14       	cp	r12, r1
     414:	d1 04       	cpc	r13, r1
     416:	e1 04       	cpc	r14, r1
     418:	f1 04       	cpc	r15, r1
     41a:	01 f7       	brne	.-64     	; 0x3dc <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     41c:	b0 92 25 01 	sts	0x0125, r11
  }
}
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	08 95       	ret

00000430 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     430:	e0 91 25 01 	lds	r30, 0x0125
     434:	0f c0       	rjmp	.+30     	; 0x454 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     436:	2e 2f       	mov	r18, r30
     438:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     43a:	e2 2f       	mov	r30, r18
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	e4 5e       	subi	r30, 0xE4	; 228
     440:	fe 4f       	sbci	r31, 0xFE	; 254
     442:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     444:	80 91 c0 00 	lds	r24, 0x00C0
     448:	85 ff       	sbrs	r24, 5
     44a:	fc cf       	rjmp	.-8      	; 0x444 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     44c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     44e:	90 93 c6 00 	sts	0x00C6, r25
     452:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     454:	ee 23       	and	r30, r30
     456:	79 f7       	brne	.-34     	; 0x436 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     458:	08 95       	ret

0000045a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     45a:	9b 01       	movw	r18, r22
     45c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     45e:	97 ff       	sbrs	r25, 7
     460:	0e c0       	rjmp	.+28     	; 0x47e <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     462:	80 91 c0 00 	lds	r24, 0x00C0
     466:	85 ff       	sbrs	r24, 5
     468:	fc cf       	rjmp	.-8      	; 0x462 <UART_Transmit_Number+0x8>
  UDR0=val;
     46a:	8d e2       	ldi	r24, 0x2D	; 45
     46c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     470:	50 95       	com	r21
     472:	40 95       	com	r20
     474:	30 95       	com	r19
     476:	21 95       	neg	r18
     478:	3f 4f       	sbci	r19, 0xFF	; 255
     47a:	4f 4f       	sbci	r20, 0xFF	; 255
     47c:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     47e:	ca 01       	movw	r24, r20
     480:	b9 01       	movw	r22, r18
     482:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     486:	0e 94 18 02 	call	0x430	; 0x430 <UART_Transmit_Number_Digits>
}
     48a:	08 95       	ret

0000048c <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     48c:	fc 01       	movw	r30, r24
     48e:	e4 5e       	subi	r30, 0xE4	; 228
     490:	fe 4f       	sbci	r31, 0xFE	; 254
     492:	83 85       	ldd	r24, Z+11	; 0x0b
}
     494:	08 95       	ret

00000496 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     496:	20 91 49 01 	lds	r18, 0x0149
     49a:	30 91 4a 01 	lds	r19, 0x014A
}
     49e:	c9 01       	movw	r24, r18
     4a0:	08 95       	ret

000004a2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4a2:	10 92 1c 01 	sts	0x011C, r1
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	30 e0       	ldi	r19, 0x00	; 0
     4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4ac:	f9 01       	movw	r30, r18
     4ae:	e4 5e       	subi	r30, 0xE4	; 228
     4b0:	fe 4f       	sbci	r31, 0xFE	; 254
     4b2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	80 91 47 01 	lds	r24, 0x0147
     4bc:	90 91 48 01 	lds	r25, 0x0148
     4c0:	28 17       	cp	r18, r24
     4c2:	39 07       	cpc	r19, r25
     4c4:	98 f3       	brcs	.-26     	; 0x4ac <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4c6:	10 92 4a 01 	sts	0x014A, r1
     4ca:	10 92 49 01 	sts	0x0149, r1
  #endif
}
     4ce:	08 95       	ret

000004d0 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     4d0:	df 93       	push	r29
     4d2:	cf 93       	push	r28
     4d4:	0f 92       	push	r0
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     4da:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     4dc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <UART_Receive_Byte>
     4e0:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     4e2:	80 91 1c 01 	lds	r24, 0x011C
     4e6:	88 23       	and	r24, r24
     4e8:	19 f5       	brne	.+70     	; 0x530 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	80 93 26 01 	sts	0x0126, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     4f0:	e0 91 49 01 	lds	r30, 0x0149
     4f4:	f0 91 4a 01 	lds	r31, 0x014A
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	e4 5e       	subi	r30, 0xE4	; 228
     4fc:	fe 4f       	sbci	r31, 0xFE	; 254
     4fe:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     500:	80 91 49 01 	lds	r24, 0x0149
     504:	90 91 4a 01 	lds	r25, 0x014A
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	90 93 4a 01 	sts	0x014A, r25
     50e:	80 93 49 01 	sts	0x0149, r24

    if(UART.BufferIndex>=UART.BufferSize){
     512:	20 91 49 01 	lds	r18, 0x0149
     516:	30 91 4a 01 	lds	r19, 0x014A
     51a:	80 91 47 01 	lds	r24, 0x0147
     51e:	90 91 48 01 	lds	r25, 0x0148
     522:	28 17       	cp	r18, r24
     524:	39 07       	cpc	r19, r25
     526:	20 f0       	brcs	.+8      	; 0x530 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     528:	10 92 4a 01 	sts	0x014A, r1
     52c:	10 92 49 01 	sts	0x0149, r1
    }
  }
}
     530:	0f 90       	pop	r0
     532:	cf 91       	pop	r28
     534:	df 91       	pop	r29
     536:	08 95       	ret

00000538 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     55a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <UART_Interrupt_Service_Routine>
}
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     580:	ef 92       	push	r14
     582:	ff 92       	push	r15
     584:	0f 93       	push	r16
     586:	1f 93       	push	r17
     588:	7b 01       	movw	r14, r22
     58a:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     58c:	0e 94 7d 00 	call	0xfa	; 0xfa <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     590:	c8 01       	movw	r24, r16
     592:	b7 01       	movw	r22, r14
     594:	0e 94 a0 00 	call	0x140	; 0x140 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     598:	e1 ec       	ldi	r30, 0xC1	; 193
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	80 81       	ld	r24, Z
     59e:	88 60       	ori	r24, 0x08	; 8
     5a0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5a2:	a2 ec       	ldi	r26, 0xC2	; 194
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	96 e0       	ldi	r25, 0x06	; 6
     5a8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5aa:	80 81       	ld	r24, Z
     5ac:	80 61       	ori	r24, 0x10	; 16
     5ae:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5b0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5b2:	80 81       	ld	r24, Z
     5b4:	80 68       	ori	r24, 0x80	; 128
     5b6:	80 83       	st	Z, r24
  sei();
     5b8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ba:	0e 94 51 02 	call	0x4a2	; 0x4a2 <UART_Flush_Buffer>
}
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	08 95       	ret

000005c8 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5c8:	8d e4       	ldi	r24, 0x4D	; 77
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 4c 01 	sts	0x014C, r25
     5d0:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.Value = 0;
     5d4:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5d8:	80 91 4d 01 	lds	r24, 0x014D
     5dc:	84 60       	ori	r24, 0x04	; 4
     5de:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5e2:	80 91 4d 01 	lds	r24, 0x014D
     5e6:	87 70       	andi	r24, 0x07	; 7
     5e8:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.UpdateRate = 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	90 93 4f 01 	sts	0x014F, r25
     5f4:	80 93 4e 01 	sts	0x014E, r24
  Timebase->Time.OVFUpdateValue=0;
     5f8:	10 92 50 01 	sts	0x0150, r1
  Timebase->Time.SubSeconds = 0;
     5fc:	10 92 56 01 	sts	0x0156, r1
     600:	10 92 55 01 	sts	0x0155, r1
  Timebase->Time.Seconds = 0;
     604:	10 92 57 01 	sts	0x0157, r1
     608:	10 92 58 01 	sts	0x0158, r1
     60c:	10 92 59 01 	sts	0x0159, r1
     610:	10 92 5a 01 	sts	0x015A, r1
  Timebase->Time.LastSample = 0;
     614:	10 92 51 01 	sts	0x0151, r1
     618:	10 92 52 01 	sts	0x0152, r1
     61c:	10 92 53 01 	sts	0x0153, r1
     620:	10 92 54 01 	sts	0x0154, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds=0;
     624:	10 92 5b 01 	sts	0x015B, r1
     628:	10 92 5c 01 	sts	0x015C, r1
     62c:	10 92 5d 01 	sts	0x015D, r1
     630:	10 92 5e 01 	sts	0x015E, r1
	Timebase->Time.StartTimeSubSeconds=0;
     634:	10 92 5f 01 	sts	0x015F, r1
     638:	10 92 60 01 	sts	0x0160, r1
     63c:	10 92 61 01 	sts	0x0161, r1
     640:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.Status=0;
     644:	10 92 63 01 	sts	0x0163, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     648:	10 92 64 01 	sts	0x0164, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     64c:	10 92 65 01 	sts	0x0165, r1
    Timebase->UpCounter[i].EndValue = 0;
     650:	10 92 66 01 	sts	0x0166, r1
     654:	10 92 67 01 	sts	0x0167, r1
     658:	10 92 68 01 	sts	0x0168, r1
     65c:	10 92 69 01 	sts	0x0169, r1
    Timebase->UpCounter[i].Target = 0;
     660:	10 92 6a 01 	sts	0x016A, r1
     664:	10 92 6b 01 	sts	0x016B, r1
     668:	10 92 6c 01 	sts	0x016C, r1
     66c:	10 92 6d 01 	sts	0x016D, r1
    Timebase->UpCounter[i].Temporary = 0;    
     670:	10 92 6e 01 	sts	0x016E, r1
     674:	10 92 6f 01 	sts	0x016F, r1
     678:	10 92 70 01 	sts	0x0170, r1
     67c:	10 92 71 01 	sts	0x0171, r1
    Timebase->UpCounter[i].Value = 0;
     680:	10 92 72 01 	sts	0x0172, r1
     684:	10 92 73 01 	sts	0x0173, r1
     688:	10 92 74 01 	sts	0x0174, r1
     68c:	10 92 75 01 	sts	0x0175, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     690:	10 92 76 01 	sts	0x0176, r1
     694:	10 92 77 01 	sts	0x0177, r1
     698:	10 92 78 01 	sts	0x0178, r1
     69c:	10 92 79 01 	sts	0x0179, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     6a0:	10 92 7a 01 	sts	0x017A, r1
    Timebase->DownCounter[i].EndValue = 0;
     6a4:	10 92 7b 01 	sts	0x017B, r1
     6a8:	10 92 7c 01 	sts	0x017C, r1
     6ac:	10 92 7d 01 	sts	0x017D, r1
     6b0:	10 92 7e 01 	sts	0x017E, r1
    Timebase->DownCounter[i].Value = 0;
     6b4:	10 92 7f 01 	sts	0x017F, r1
     6b8:	10 92 80 01 	sts	0x0180, r1
     6bc:	10 92 81 01 	sts	0x0181, r1
     6c0:	10 92 82 01 	sts	0x0182, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     6c4:	10 92 83 01 	sts	0x0183, r1
     6c8:	10 92 84 01 	sts	0x0184, r1
     6cc:	10 92 85 01 	sts	0x0185, r1
     6d0:	10 92 86 01 	sts	0x0186, r1
  }
  #endif
}
     6d4:	08 95       	ret

000006d6 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     6d6:	7f 92       	push	r7
     6d8:	8f 92       	push	r8
     6da:	9f 92       	push	r9
     6dc:	af 92       	push	r10
     6de:	bf 92       	push	r11
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	2a 97       	sbiw	r28, 0x0a	; 10
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     702:	c0 90 4b 01 	lds	r12, 0x014B
     706:	d0 90 4c 01 	lds	r13, 0x014C
     70a:	f6 01       	movw	r30, r12
     70c:	80 81       	ld	r24, Z
     70e:	80 ff       	sbrs	r24, 0
     710:	31 c0       	rjmp	.+98     	; 0x774 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val=0;
    if(UpdateRateHz==1){
     712:	01 30       	cpi	r16, 0x01	; 1
     714:	11 05       	cpc	r17, r1
     716:	11 f4       	brne	.+4      	; 0x71c <Timebase_Timer_Config+0x46>
     718:	96 e0       	ldi	r25, 0x06	; 6
     71a:	19 c0       	rjmp	.+50     	; 0x74e <Timebase_Timer_Config+0x78>
      Prescaler_val=0x06;
    }else if(UpdateRateHz==2){
     71c:	02 30       	cpi	r16, 0x02	; 2
     71e:	11 05       	cpc	r17, r1
     720:	11 f4       	brne	.+4      	; 0x726 <Timebase_Timer_Config+0x50>
     722:	95 e0       	ldi	r25, 0x05	; 5
     724:	14 c0       	rjmp	.+40     	; 0x74e <Timebase_Timer_Config+0x78>
      Prescaler_val=0x05;
    }else if(UpdateRateHz==4){
     726:	04 30       	cpi	r16, 0x04	; 4
     728:	11 05       	cpc	r17, r1
     72a:	11 f4       	brne	.+4      	; 0x730 <Timebase_Timer_Config+0x5a>
     72c:	94 e0       	ldi	r25, 0x04	; 4
     72e:	0f c0       	rjmp	.+30     	; 0x74e <Timebase_Timer_Config+0x78>
      Prescaler_val=0x04;
    }else if(UpdateRateHz==8){
     730:	08 30       	cpi	r16, 0x08	; 8
     732:	11 05       	cpc	r17, r1
     734:	11 f4       	brne	.+4      	; 0x73a <Timebase_Timer_Config+0x64>
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0a c0       	rjmp	.+20     	; 0x74e <Timebase_Timer_Config+0x78>
      Prescaler_val=0x03;
    }else if(UpdateRateHz==16){
     73a:	00 31       	cpi	r16, 0x10	; 16
     73c:	11 05       	cpc	r17, r1
     73e:	11 f4       	brne	.+4      	; 0x744 <Timebase_Timer_Config+0x6e>
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	05 c0       	rjmp	.+10     	; 0x74e <Timebase_Timer_Config+0x78>
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	00 32       	cpi	r16, 0x20	; 32
     748:	11 05       	cpc	r17, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <Timebase_Timer_Config+0x78>
     74c:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz==64){
      Prescaler_val=0x00;
    }else{
      Prescaler_val=0x00;
    }
    cli();
     74e:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     750:	84 b7       	in	r24, 0x34	; 52
     752:	87 7f       	andi	r24, 0xF7	; 247
     754:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     756:	80 91 60 00 	lds	r24, 0x0060
     75a:	80 68       	ori	r24, 0x80	; 128
     75c:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     760:	80 91 60 00 	lds	r24, 0x0060
     764:	88 61       	ori	r24, 0x18	; 24
     766:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     76a:	90 64       	ori	r25, 0x40	; 64
     76c:	90 93 60 00 	sts	0x0060, r25
    sei();
     770:	78 94       	sei
     772:	67 c0       	rjmp	.+206    	; 0x842 <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     774:	81 fd       	sbrc	r24, 1
     776:	65 c0       	rjmp	.+202    	; 0x842 <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     778:	82 ff       	sbrs	r24, 2
     77a:	63 c0       	rjmp	.+198    	; 0x842 <Timebase_Timer_Config+0x16c>
    
	int32_t temp=F_CPU;
	uint16_t clock_div_factor[5]={1,8,64,256,1024};
     77c:	de 01       	movw	r26, r28
     77e:	11 96       	adiw	r26, 0x01	; 1
     780:	e1 e1       	ldi	r30, 0x11	; 17
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	8a e0       	ldi	r24, 0x0A	; 10
     786:	01 90       	ld	r0, Z+
     788:	0d 92       	st	X+, r0
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	e1 f7       	brne	.-8      	; 0x786 <Timebase_Timer_Config+0xb0>
	
	temp/=UpdateRateHz;
     78e:	98 01       	movw	r18, r16
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	72 e1       	ldi	r23, 0x12	; 18
     798:	8a e7       	ldi	r24, 0x7A	; 122
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__divmodsi4>
     7a0:	72 2e       	mov	r7, r18
     7a2:	83 2e       	mov	r8, r19
     7a4:	94 2e       	mov	r9, r20
     7a6:	e5 2e       	mov	r14, r21
     7a8:	5e 01       	movw	r10, r28
     7aa:	08 94       	sec
     7ac:	a1 1c       	adc	r10, r1
     7ae:	b1 1c       	adc	r11, r1
     7b0:	c9 01       	movw	r24, r18
     7b2:	da 01       	movw	r26, r20
     7b4:	9c 01       	movw	r18, r24
     7b6:	ad 01       	movw	r20, r26
     7b8:	ff 24       	eor	r15, r15
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index=0;
	int32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq=temp;
	  curr_freq/=clock_div_factor[clock_div_index];
     7bc:	f5 01       	movw	r30, r10
     7be:	21 91       	ld	r18, Z+
     7c0:	31 91       	ld	r19, Z+
     7c2:	5f 01       	movw	r10, r30
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	67 2d       	mov	r22, r7
     7ca:	78 2d       	mov	r23, r8
     7cc:	89 2d       	mov	r24, r9
     7ce:	9e 2d       	mov	r25, r14
     7d0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <__divmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	9c 01       	movw	r18, r24
     7da:	ad 01       	movw	r20, r26
	  clock_div_index++;
     7dc:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     7de:	f5 e0       	ldi	r31, 0x05	; 5
     7e0:	ff 16       	cp	r15, r31
     7e2:	31 f0       	breq	.+12     	; 0x7f0 <Timebase_Timer_Config+0x11a>
	temp/=UpdateRateHz;
	
	uint8_t  clock_div_index=0;
	int32_t curr_freq=temp;
	
	while( curr_freq > 0xFF ){
     7e4:	2f 3f       	cpi	r18, 0xFF	; 255
     7e6:	31 05       	cpc	r19, r1
     7e8:	41 05       	cpc	r20, r1
     7ea:	51 05       	cpc	r21, r1
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <Timebase_Timer_Config+0x11a>
     7ee:	34 f7       	brge	.-52     	; 0x7bc <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index-=1;
     7f0:	8f 2d       	mov	r24, r15
     7f2:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     7f4:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     7f6:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     7f8:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     7fc:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     7fe:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     800:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     802:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     804:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     806:	88 23       	and	r24, r24
     808:	11 f4       	brne	.+4      	; 0x80e <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	0f c0       	rjmp	.+30     	; 0x82c <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	11 f4       	brne	.+4      	; 0x816 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     812:	82 e0       	ldi	r24, 0x02	; 2
     814:	0b c0       	rjmp	.+22     	; 0x82c <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	11 f4       	brne	.+4      	; 0x81e <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	07 c0       	rjmp	.+14     	; 0x82c <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     81e:	83 30       	cpi	r24, 0x03	; 3
     820:	11 f4       	brne	.+4      	; 0x826 <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     822:	84 e0       	ldi	r24, 0x04	; 4
     824:	03 c0       	rjmp	.+6      	; 0x82c <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     826:	84 30       	cpi	r24, 0x04	; 4
     828:	11 f4       	brne	.+4      	; 0x82e <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     82a:	85 e0       	ldi	r24, 0x05	; 5
     82c:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = 0xFF-curr_freq;
     82e:	82 2f       	mov	r24, r18
     830:	80 95       	com	r24
     832:	f6 01       	movw	r30, r12
     834:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     836:	83 81       	ldd	r24, Z+3	; 0x03
     838:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	80 93 6e 00 	sts	0x006E, r24
    sei();
     840:	78 94       	sei
  }
  Timebase->Config.UpdateRate=UpdateRateHz;
     842:	f6 01       	movw	r30, r12
     844:	12 83       	std	Z+2, r17	; 0x02
     846:	01 83       	std	Z+1, r16	; 0x01
}
     848:	2a 96       	adiw	r28, 0x0a	; 10
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	7f 90       	pop	r7
     86e:	08 95       	ret

00000870 <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     870:	e0 91 4b 01 	lds	r30, 0x014B
     874:	f0 91 4c 01 	lds	r31, 0x014C
     878:	87 89       	ldd	r24, Z+23	; 0x17
}
     87a:	08 95       	ret

0000087c <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     87c:	e0 91 4b 01 	lds	r30, 0x014B
     880:	f0 91 4c 01 	lds	r31, 0x014C
     884:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     886:	8f 33       	cpi	r24, 0x3F	; 63
     888:	18 f4       	brcc	.+6      	; 0x890 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens+=1;
     88a:	87 89       	ldd	r24, Z+23	; 0x17
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	87 8b       	std	Z+23, r24	; 0x17
     890:	08 95       	ret

00000892 <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     892:	e0 91 4b 01 	lds	r30, 0x014B
     896:	f0 91 4c 01 	lds	r31, 0x014C
     89a:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     89c:	88 23       	and	r24, r24
     89e:	19 f0       	breq	.+6      	; 0x8a6 <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens-=1;
     8a0:	87 89       	ldd	r24, Z+23	; 0x17
     8a2:	81 50       	subi	r24, 0x01	; 1
     8a4:	87 8b       	std	Z+23, r24	; 0x17
     8a6:	08 95       	ret

000008a8 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens=0;
     8a8:	e0 91 4b 01 	lds	r30, 0x014B
     8ac:	f0 91 4c 01 	lds	r31, 0x014C
     8b0:	17 8a       	std	Z+23, r1	; 0x17
}
     8b2:	08 95       	ret

000008b4 <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8b4:	e0 91 4b 01 	lds	r30, 0x014B
     8b8:	f0 91 4c 01 	lds	r31, 0x014C
     8bc:	80 85       	ldd	r24, Z+8	; 0x08
     8be:	91 85       	ldd	r25, Z+9	; 0x09
}
     8c0:	bc 01       	movw	r22, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	08 95       	ret

000008c8 <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8c8:	e0 91 4b 01 	lds	r30, 0x014B
     8cc:	f0 91 4c 01 	lds	r31, 0x014C
     8d0:	22 85       	ldd	r18, Z+10	; 0x0a
     8d2:	33 85       	ldd	r19, Z+11	; 0x0b
     8d4:	44 85       	ldd	r20, Z+12	; 0x0c
     8d6:	55 85       	ldd	r21, Z+13	; 0x0d
}
     8d8:	b9 01       	movw	r22, r18
     8da:	ca 01       	movw	r24, r20
     8dc:	08 95       	ret

000008de <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds=value;
     8de:	e0 91 4b 01 	lds	r30, 0x014B
     8e2:	f0 91 4c 01 	lds	r31, 0x014C
     8e6:	91 87       	std	Z+9, r25	; 0x09
     8e8:	80 87       	std	Z+8, r24	; 0x08
}
     8ea:	08 95       	ret

000008ec <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(uint32_t value){
  Timebase->Time.Seconds=value;
     8ec:	e0 91 4b 01 	lds	r30, 0x014B
     8f0:	f0 91 4c 01 	lds	r31, 0x014C
     8f4:	62 87       	std	Z+10, r22	; 0x0a
     8f6:	73 87       	std	Z+11, r23	; 0x0b
     8f8:	84 87       	std	Z+12, r24	; 0x0c
     8fa:	95 87       	std	Z+13, r25	; 0x0d
}
     8fc:	08 95       	ret

000008fe <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     8fe:	9c 01       	movw	r18, r24


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     900:	e0 91 4b 01 	lds	r30, 0x014B
     904:	f0 91 4c 01 	lds	r31, 0x014C
     908:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     90a:	8f 33       	cpi	r24, 0x3F	; 63
     90c:	18 f4       	brcc	.+6      	; 0x914 <__stack+0x15>
    Timebase->ActiveTokens+=1;
     90e:	87 89       	ldd	r24, Z+23	; 0x17
     910:	8f 5f       	subi	r24, 0xFF	; 255
     912:	87 8b       	std	Z+23, r24	; 0x17
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     914:	80 85       	ldd	r24, Z+8	; 0x08
     916:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds() + value;
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	28 0f       	add	r18, r24
     922:	39 1f       	adc	r19, r25
     924:	4a 1f       	adc	r20, r26
     926:	5b 1f       	adc	r21, r27
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     928:	80 85       	ldd	r24, Z+8	; 0x08
     92a:	91 85       	ldd	r25, Z+9	; 0x09
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds() + value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     92c:	a0 e0       	ldi	r26, 0x00	; 0
     92e:	b0 e0       	ldi	r27, 0x00	; 0
     930:	82 17       	cp	r24, r18
     932:	93 07       	cpc	r25, r19
     934:	a4 07       	cpc	r26, r20
     936:	b5 07       	cpc	r27, r21
     938:	bc f3       	brlt	.-18     	; 0x928 <__stack+0x29>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     93a:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens+=1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     93c:	88 23       	and	r24, r24
     93e:	19 f0       	breq	.+6      	; 0x946 <__stack+0x47>
    Timebase->ActiveTokens-=1;
     940:	87 89       	ldd	r24, Z+23	; 0x17
     942:	81 50       	subi	r24, 0x01	; 1
     944:	87 8b       	std	Z+23, r24	; 0x17
     946:	08 95       	ret

00000948 <Timebase_Timer_Await_SubSeconds>:
  Timebase_Token_Remove();
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     948:	bc 01       	movw	r22, r24
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     94a:	e0 91 4b 01 	lds	r30, 0x014B
     94e:	f0 91 4c 01 	lds	r31, 0x014C
     952:	80 85       	ldd	r24, Z+8	; 0x08
     954:	91 85       	ldd	r25, Z+9	; 0x09
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds()!=Timebase->Time.LastSample);
     956:	24 81       	ldd	r18, Z+4	; 0x04
     958:	35 81       	ldd	r19, Z+5	; 0x05
     95a:	46 81       	ldd	r20, Z+6	; 0x06
     95c:	57 81       	ldd	r21, Z+7	; 0x07
     95e:	a0 e0       	ldi	r26, 0x00	; 0
     960:	b0 e0       	ldi	r27, 0x00	; 0
     962:	82 17       	cp	r24, r18
     964:	93 07       	cpc	r25, r19
     966:	a4 07       	cpc	r26, r20
     968:	b5 07       	cpc	r27, r21
     96a:	99 f7       	brne	.-26     	; 0x952 <Timebase_Timer_Await_SubSeconds+0xa>
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     96c:	80 85       	ldd	r24, Z+8	; 0x08
     96e:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds()!=Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds()+value;
     970:	9b 01       	movw	r18, r22
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	28 0f       	add	r18, r24
     97c:	39 1f       	adc	r19, r25
     97e:	4a 1f       	adc	r20, r26
     980:	5b 1f       	adc	r21, r27
     982:	24 83       	std	Z+4, r18	; 0x04
     984:	35 83       	std	Z+5, r19	; 0x05
     986:	46 83       	std	Z+6, r20	; 0x06
     988:	57 83       	std	Z+7, r21	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     98a:	24 81       	ldd	r18, Z+4	; 0x04
     98c:	35 81       	ldd	r19, Z+5	; 0x05
     98e:	46 81       	ldd	r20, Z+6	; 0x06
     990:	57 81       	ldd	r21, Z+7	; 0x07
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	92 81       	ldd	r25, Z+2	; 0x02
     996:	a0 e0       	ldi	r26, 0x00	; 0
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	28 17       	cp	r18, r24
     99c:	39 07       	cpc	r19, r25
     99e:	4a 07       	cpc	r20, r26
     9a0:	5b 07       	cpc	r21, r27
     9a2:	84 f0       	brlt	.+32     	; 0x9c4 <Timebase_Timer_Await_SubSeconds+0x7c>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     9a4:	24 81       	ldd	r18, Z+4	; 0x04
     9a6:	35 81       	ldd	r19, Z+5	; 0x05
     9a8:	46 81       	ldd	r20, Z+6	; 0x06
     9aa:	57 81       	ldd	r21, Z+7	; 0x07
     9ac:	81 81       	ldd	r24, Z+1	; 0x01
     9ae:	92 81       	ldd	r25, Z+2	; 0x02
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	28 1b       	sub	r18, r24
     9b6:	39 0b       	sbc	r19, r25
     9b8:	4a 0b       	sbc	r20, r26
     9ba:	5b 0b       	sbc	r21, r27
     9bc:	24 83       	std	Z+4, r18	; 0x04
     9be:	35 83       	std	Z+5, r19	; 0x05
     9c0:	46 83       	std	Z+6, r20	; 0x06
     9c2:	57 83       	std	Z+7, r21	; 0x07
     9c4:	08 95       	ret

000009c6 <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	0f 93       	push	r16
     9cc:	1f 93       	push	r17
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9ce:	e0 91 4b 01 	lds	r30, 0x014B
     9d2:	f0 91 4c 01 	lds	r31, 0x014C
     9d6:	22 85       	ldd	r18, Z+10	; 0x0a
     9d8:	33 85       	ldd	r19, Z+11	; 0x0b
     9da:	44 85       	ldd	r20, Z+12	; 0x0c
     9dc:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     9de:	7c 01       	movw	r14, r24
     9e0:	00 e0       	ldi	r16, 0x00	; 0
     9e2:	10 e0       	ldi	r17, 0x00	; 0
     9e4:	e2 0e       	add	r14, r18
     9e6:	f3 1e       	adc	r15, r19
     9e8:	04 1f       	adc	r16, r20
     9ea:	15 1f       	adc	r17, r21
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9ec:	82 85       	ldd	r24, Z+10	; 0x0a
     9ee:	93 85       	ldd	r25, Z+11	; 0x0b
     9f0:	a4 85       	ldd	r26, Z+12	; 0x0c
     9f2:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     9f4:	8e 15       	cp	r24, r14
     9f6:	9f 05       	cpc	r25, r15
     9f8:	a0 07       	cpc	r26, r16
     9fa:	b1 07       	cpc	r27, r17
     9fc:	bc f3       	brlt	.-18     	; 0x9ec <Timebase_Timer_Delay_Seconds+0x26>
}
     9fe:	1f 91       	pop	r17
     a00:	0f 91       	pop	r16
     a02:	ff 90       	pop	r15
     a04:	ef 90       	pop	r14
     a06:	08 95       	ret

00000a08 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds=0;
     a08:	e0 91 4b 01 	lds	r30, 0x014B
     a0c:	f0 91 4c 01 	lds	r31, 0x014C
     a10:	16 86       	std	Z+14, r1	; 0x0e
     a12:	17 86       	std	Z+15, r1	; 0x0f
     a14:	10 8a       	std	Z+16, r1	; 0x10
     a16:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds=0;
     a18:	12 8a       	std	Z+18, r1	; 0x12
     a1a:	13 8a       	std	Z+19, r1	; 0x13
     a1c:	14 8a       	std	Z+20, r1	; 0x14
     a1e:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status=0;
     a20:	16 8a       	std	Z+22, r1	; 0x16
}
     a22:	08 95       	ret

00000a24 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status==0){
     a24:	e0 91 4b 01 	lds	r30, 0x014B
     a28:	f0 91 4c 01 	lds	r31, 0x014C
     a2c:	86 89       	ldd	r24, Z+22	; 0x16
     a2e:	88 23       	and	r24, r24
     a30:	91 f4       	brne	.+36     	; 0xa56 <Timebase_Window_Timer_Start+0x32>
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a32:	82 85       	ldd	r24, Z+10	; 0x0a
     a34:	93 85       	ldd	r25, Z+11	; 0x0b
     a36:	a4 85       	ldd	r26, Z+12	; 0x0c
     a38:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status=0;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status==0){
    Timebase->Time.StartTimeSeconds=Timebase_Timer_Get_Seconds();
     a3a:	86 87       	std	Z+14, r24	; 0x0e
     a3c:	97 87       	std	Z+15, r25	; 0x0f
     a3e:	a0 8b       	std	Z+16, r26	; 0x10
     a40:	b1 8b       	std	Z+17, r27	; 0x11
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a42:	80 85       	ldd	r24, Z+8	; 0x08
     a44:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status==0){
    Timebase->Time.StartTimeSeconds=Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds=Timebase_Timer_Get_SubSeconds();
     a46:	a0 e0       	ldi	r26, 0x00	; 0
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	82 8b       	std	Z+18, r24	; 0x12
     a4c:	93 8b       	std	Z+19, r25	; 0x13
     a4e:	a4 8b       	std	Z+20, r26	; 0x14
     a50:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status=1;
     a52:	81 e0       	ldi	r24, 0x01	; 1
     a54:	86 8b       	std	Z+22, r24	; 0x16
     a56:	08 95       	ret

00000a58 <Timebase_Window_Timer_Get_Interval>:
  }
}

//Unit in subseconds -> 20mS
int32_t Timebase_Window_Timer_Get_Interval(void){
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
  if(Timebase->Time.Status){
     a64:	c0 91 4b 01 	lds	r28, 0x014B
     a68:	d0 91 4c 01 	lds	r29, 0x014C
     a6c:	8e 89       	ldd	r24, Y+22	; 0x16
     a6e:	88 23       	and	r24, r24
     a70:	21 f4       	brne	.+8      	; 0xa7a <Timebase_Window_Timer_Get_Interval+0x22>
     a72:	ee 24       	eor	r14, r14
     a74:	ff 24       	eor	r15, r15
     a76:	87 01       	movw	r16, r14
     a78:	23 c0       	rjmp	.+70     	; 0xac0 <Timebase_Window_Timer_Get_Interval+0x68>
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a7a:	6a 85       	ldd	r22, Y+10	; 0x0a
     a7c:	7b 85       	ldd	r23, Y+11	; 0x0b
     a7e:	8c 85       	ldd	r24, Y+12	; 0x0c
     a80:	9d 85       	ldd	r25, Y+13	; 0x0d
#endif


//Timer Functions
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a82:	28 85       	ldd	r18, Y+8	; 0x08
     a84:	39 85       	ldd	r19, Y+9	; 0x09
     a86:	79 01       	movw	r14, r18
     a88:	00 e0       	ldi	r16, 0x00	; 0
     a8a:	10 e0       	ldi	r17, 0x00	; 0
//Unit in subseconds -> 20mS
int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status){
    int32_t curr_s =Timebase_Timer_Get_Seconds();
    int32_t curr_ss=Timebase_Timer_Get_SubSeconds();
	curr_s-=Timebase->Time.StartTimeSeconds;
     a8c:	2e 85       	ldd	r18, Y+14	; 0x0e
     a8e:	3f 85       	ldd	r19, Y+15	; 0x0f
     a90:	48 89       	ldd	r20, Y+16	; 0x10
     a92:	59 89       	ldd	r21, Y+17	; 0x11
     a94:	62 1b       	sub	r22, r18
     a96:	73 0b       	sbc	r23, r19
     a98:	84 0b       	sbc	r24, r20
     a9a:	95 0b       	sbc	r25, r21
	curr_ss-=Timebase->Time.StartTimeSubSeconds;
	curr_s*=Timebase->Config.UpdateRate;
     a9c:	29 81       	ldd	r18, Y+1	; 0x01
     a9e:	3a 81       	ldd	r19, Y+2	; 0x02
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	0e 94 90 0c 	call	0x1920	; 0x1920 <__mulsi3>
	curr_s+=curr_ss;
     aa8:	2a 89       	ldd	r18, Y+18	; 0x12
     aaa:	3b 89       	ldd	r19, Y+19	; 0x13
     aac:	4c 89       	ldd	r20, Y+20	; 0x14
     aae:	5d 89       	ldd	r21, Y+21	; 0x15
     ab0:	e2 1a       	sub	r14, r18
     ab2:	f3 0a       	sbc	r15, r19
     ab4:	04 0b       	sbc	r16, r20
     ab6:	15 0b       	sbc	r17, r21
     ab8:	e6 0e       	add	r14, r22
     aba:	f7 1e       	adc	r15, r23
     abc:	08 1f       	adc	r16, r24
     abe:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     ac0:	b7 01       	movw	r22, r14
     ac2:	c8 01       	movw	r24, r16
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     ad2:	0e 94 2c 05 	call	0xa58	; 0xa58 <Timebase_Window_Timer_Get_Interval>
     ad6:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status){
     ad8:	e0 91 4b 01 	lds	r30, 0x014B
     adc:	f0 91 4c 01 	lds	r31, 0x014C
     ae0:	86 89       	ldd	r24, Z+22	; 0x16
     ae2:	88 23       	and	r24, r24
     ae4:	49 f0       	breq	.+18     	; 0xaf8 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds=0;
     ae6:	16 86       	std	Z+14, r1	; 0x0e
     ae8:	17 86       	std	Z+15, r1	; 0x0f
     aea:	10 8a       	std	Z+16, r1	; 0x10
     aec:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds=0;
     aee:	12 8a       	std	Z+18, r1	; 0x12
     af0:	13 8a       	std	Z+19, r1	; 0x13
     af2:	14 8a       	std	Z+20, r1	; 0x14
     af4:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status=0;
     af6:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     af8:	82 2f       	mov	r24, r18
     afa:	08 95       	ret

00000afc <Timebase_UpCounter_Get_Status>:



//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
     afc:	e0 91 4b 01 	lds	r30, 0x014B
     b00:	f0 91 4c 01 	lds	r31, 0x014C
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	25 e1       	ldi	r18, 0x15	; 21
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	ac 01       	movw	r20, r24
     b0c:	42 9f       	mul	r20, r18
     b0e:	c0 01       	movw	r24, r0
     b10:	43 9f       	mul	r20, r19
     b12:	90 0d       	add	r25, r0
     b14:	52 9f       	mul	r21, r18
     b16:	90 0d       	add	r25, r0
     b18:	11 24       	eor	r1, r1
     b1a:	e8 0f       	add	r30, r24
     b1c:	f9 1f       	adc	r31, r25
     b1e:	80 8d       	ldd	r24, Z+24	; 0x18
     b20:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
     b22:	8f 70       	andi	r24, 0x0F	; 15
     b24:	08 95       	ret

00000b26 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     b26:	e0 91 4b 01 	lds	r30, 0x014B
     b2a:	f0 91 4c 01 	lds	r31, 0x014C
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	25 e1       	ldi	r18, 0x15	; 21
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	ac 01       	movw	r20, r24
     b36:	42 9f       	mul	r20, r18
     b38:	c0 01       	movw	r24, r0
     b3a:	43 9f       	mul	r20, r19
     b3c:	90 0d       	add	r25, r0
     b3e:	52 9f       	mul	r21, r18
     b40:	90 0d       	add	r25, r0
     b42:	11 24       	eor	r1, r1
     b44:	e8 0f       	add	r30, r24
     b46:	f9 1f       	adc	r31, r25
     b48:	6f 70       	andi	r22, 0x0F	; 15
     b4a:	66 0f       	add	r22, r22
     b4c:	80 8d       	ldd	r24, Z+24	; 0x18
     b4e:	81 7e       	andi	r24, 0xE1	; 225
     b50:	86 2b       	or	r24, r22
     b52:	80 8f       	std	Z+24, r24	; 0x18
}
     b54:	08 95       	ret

00000b56 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
     b56:	e0 91 4b 01 	lds	r30, 0x014B
     b5a:	f0 91 4c 01 	lds	r31, 0x014C
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	25 e1       	ldi	r18, 0x15	; 21
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	ac 01       	movw	r20, r24
     b66:	42 9f       	mul	r20, r18
     b68:	c0 01       	movw	r24, r0
     b6a:	43 9f       	mul	r20, r19
     b6c:	90 0d       	add	r25, r0
     b6e:	52 9f       	mul	r21, r18
     b70:	90 0d       	add	r25, r0
     b72:	11 24       	eor	r1, r1
     b74:	e8 0f       	add	r30, r24
     b76:	f9 1f       	adc	r31, r25
     b78:	df 01       	movw	r26, r30
     b7a:	95 96       	adiw	r26, 0x25	; 37
     b7c:	65 a1       	ldd	r22, Z+37	; 0x25
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	7c 91       	ld	r23, X
     b82:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->UpCounter[window].Value;
}
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	8c 91       	ld	r24, X
     b88:	12 97       	sbiw	r26, 0x02	; 2
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	9c 91       	ld	r25, X
     b8e:	08 95       	ret

00000b90 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     b90:	e0 91 4b 01 	lds	r30, 0x014B
     b94:	f0 91 4c 01 	lds	r31, 0x014C
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	25 e1       	ldi	r18, 0x15	; 21
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	dc 01       	movw	r26, r24
     ba0:	a2 9f       	mul	r26, r18
     ba2:	c0 01       	movw	r24, r0
     ba4:	a3 9f       	mul	r26, r19
     ba6:	90 0d       	add	r25, r0
     ba8:	b2 9f       	mul	r27, r18
     baa:	90 0d       	add	r25, r0
     bac:	11 24       	eor	r1, r1
     bae:	e8 0f       	add	r30, r24
     bb0:	f9 1f       	adc	r31, r25
     bb2:	45 a3       	std	Z+37, r20	; 0x25
     bb4:	56 a3       	std	Z+38, r21	; 0x26
     bb6:	67 a3       	std	Z+39, r22	; 0x27
     bb8:	70 a7       	std	Z+40, r23	; 0x28
}
     bba:	08 95       	ret

00000bbc <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
     bbc:	e0 91 4b 01 	lds	r30, 0x014B
     bc0:	f0 91 4c 01 	lds	r31, 0x014C
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	25 e1       	ldi	r18, 0x15	; 21
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	ac 01       	movw	r20, r24
     bcc:	42 9f       	mul	r20, r18
     bce:	c0 01       	movw	r24, r0
     bd0:	43 9f       	mul	r20, r19
     bd2:	90 0d       	add	r25, r0
     bd4:	52 9f       	mul	r21, r18
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	df 01       	movw	r26, r30
     be0:	59 96       	adiw	r26, 0x19	; 25
     be2:	61 8d       	ldd	r22, Z+25	; 0x19
     be4:	11 96       	adiw	r26, 0x01	; 1
     be6:	7c 91       	ld	r23, X
     be8:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->UpCounter[window].EndValue;
}
     bea:	12 96       	adiw	r26, 0x02	; 2
     bec:	8c 91       	ld	r24, X
     bee:	12 97       	sbiw	r26, 0x02	; 2
     bf0:	13 96       	adiw	r26, 0x03	; 3
     bf2:	9c 91       	ld	r25, X
     bf4:	08 95       	ret

00000bf6 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     bf6:	e0 91 4b 01 	lds	r30, 0x014B
     bfa:	f0 91 4c 01 	lds	r31, 0x014C
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	25 e1       	ldi	r18, 0x15	; 21
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	dc 01       	movw	r26, r24
     c06:	a2 9f       	mul	r26, r18
     c08:	c0 01       	movw	r24, r0
     c0a:	a3 9f       	mul	r26, r19
     c0c:	90 0d       	add	r25, r0
     c0e:	b2 9f       	mul	r27, r18
     c10:	90 0d       	add	r25, r0
     c12:	11 24       	eor	r1, r1
     c14:	e8 0f       	add	r30, r24
     c16:	f9 1f       	adc	r31, r25
     c18:	41 8f       	std	Z+25, r20	; 0x19
     c1a:	52 8f       	std	Z+26, r21	; 0x1a
     c1c:	63 8f       	std	Z+27, r22	; 0x1b
     c1e:	74 8f       	std	Z+28, r23	; 0x1c
}
     c20:	08 95       	ret

00000c22 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
     c22:	e0 91 4b 01 	lds	r30, 0x014B
     c26:	f0 91 4c 01 	lds	r31, 0x014C
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	25 e1       	ldi	r18, 0x15	; 21
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	ac 01       	movw	r20, r24
     c32:	42 9f       	mul	r20, r18
     c34:	c0 01       	movw	r24, r0
     c36:	43 9f       	mul	r20, r19
     c38:	90 0d       	add	r25, r0
     c3a:	52 9f       	mul	r21, r18
     c3c:	90 0d       	add	r25, r0
     c3e:	11 24       	eor	r1, r1
     c40:	e8 0f       	add	r30, r24
     c42:	f9 1f       	adc	r31, r25
     c44:	df 01       	movw	r26, r30
     c46:	5d 96       	adiw	r26, 0x1d	; 29
     c48:	65 8d       	ldd	r22, Z+29	; 0x1d
     c4a:	11 96       	adiw	r26, 0x01	; 1
     c4c:	7c 91       	ld	r23, X
     c4e:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->UpCounter[window].Target;
}
     c50:	12 96       	adiw	r26, 0x02	; 2
     c52:	8c 91       	ld	r24, X
     c54:	12 97       	sbiw	r26, 0x02	; 2
     c56:	13 96       	adiw	r26, 0x03	; 3
     c58:	9c 91       	ld	r25, X
     c5a:	08 95       	ret

00000c5c <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     c5c:	e0 91 4b 01 	lds	r30, 0x014B
     c60:	f0 91 4c 01 	lds	r31, 0x014C
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	25 e1       	ldi	r18, 0x15	; 21
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	dc 01       	movw	r26, r24
     c6c:	a2 9f       	mul	r26, r18
     c6e:	c0 01       	movw	r24, r0
     c70:	a3 9f       	mul	r26, r19
     c72:	90 0d       	add	r25, r0
     c74:	b2 9f       	mul	r27, r18
     c76:	90 0d       	add	r25, r0
     c78:	11 24       	eor	r1, r1
     c7a:	e8 0f       	add	r30, r24
     c7c:	f9 1f       	adc	r31, r25
     c7e:	45 8f       	std	Z+29, r20	; 0x1d
     c80:	56 8f       	std	Z+30, r21	; 0x1e
     c82:	67 8f       	std	Z+31, r22	; 0x1f
     c84:	70 a3       	std	Z+32, r23	; 0x20
}
     c86:	08 95       	ret

00000c88 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
     c88:	e0 91 4b 01 	lds	r30, 0x014B
     c8c:	f0 91 4c 01 	lds	r31, 0x014C
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	25 e1       	ldi	r18, 0x15	; 21
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	ac 01       	movw	r20, r24
     c98:	42 9f       	mul	r20, r18
     c9a:	c0 01       	movw	r24, r0
     c9c:	43 9f       	mul	r20, r19
     c9e:	90 0d       	add	r25, r0
     ca0:	52 9f       	mul	r21, r18
     ca2:	90 0d       	add	r25, r0
     ca4:	11 24       	eor	r1, r1
     ca6:	e8 0f       	add	r30, r24
     ca8:	f9 1f       	adc	r31, r25
     caa:	df 01       	movw	r26, r30
     cac:	91 96       	adiw	r26, 0x21	; 33
     cae:	61 a1       	ldd	r22, Z+33	; 0x21
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	7c 91       	ld	r23, X
     cb4:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->UpCounter[window].Temporary;
}
     cb6:	12 96       	adiw	r26, 0x02	; 2
     cb8:	8c 91       	ld	r24, X
     cba:	12 97       	sbiw	r26, 0x02	; 2
     cbc:	13 96       	adiw	r26, 0x03	; 3
     cbe:	9c 91       	ld	r25, X
     cc0:	08 95       	ret

00000cc2 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     cc2:	e0 91 4b 01 	lds	r30, 0x014B
     cc6:	f0 91 4c 01 	lds	r31, 0x014C
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	25 e1       	ldi	r18, 0x15	; 21
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	dc 01       	movw	r26, r24
     cd2:	a2 9f       	mul	r26, r18
     cd4:	c0 01       	movw	r24, r0
     cd6:	a3 9f       	mul	r26, r19
     cd8:	90 0d       	add	r25, r0
     cda:	b2 9f       	mul	r27, r18
     cdc:	90 0d       	add	r25, r0
     cde:	11 24       	eor	r1, r1
     ce0:	e8 0f       	add	r30, r24
     ce2:	f9 1f       	adc	r31, r25
     ce4:	41 a3       	std	Z+33, r20	; 0x21
     ce6:	52 a3       	std	Z+34, r21	; 0x22
     ce8:	63 a3       	std	Z+35, r22	; 0x23
     cea:	74 a3       	std	Z+36, r23	; 0x24
}
     cec:	08 95       	ret

00000cee <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
     cee:	e0 91 4b 01 	lds	r30, 0x014B
     cf2:	f0 91 4c 01 	lds	r31, 0x014C
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	25 e1       	ldi	r18, 0x15	; 21
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	ac 01       	movw	r20, r24
     cfe:	42 9f       	mul	r20, r18
     d00:	c0 01       	movw	r24, r0
     d02:	43 9f       	mul	r20, r19
     d04:	90 0d       	add	r25, r0
     d06:	52 9f       	mul	r21, r18
     d08:	90 0d       	add	r25, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	e8 0f       	add	r30, r24
     d0e:	f9 1f       	adc	r31, r25
     d10:	df 01       	movw	r26, r30
     d12:	99 96       	adiw	r26, 0x29	; 41
     d14:	61 a5       	ldd	r22, Z+41	; 0x29
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	7c 91       	ld	r23, X
     d1a:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->UpCounter[window].PeriodValue;
}
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	8c 91       	ld	r24, X
     d20:	12 97       	sbiw	r26, 0x02	; 2
     d22:	13 96       	adiw	r26, 0x03	; 3
     d24:	9c 91       	ld	r25, X
     d26:	08 95       	ret

00000d28 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     d28:	e0 91 4b 01 	lds	r30, 0x014B
     d2c:	f0 91 4c 01 	lds	r31, 0x014C
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	25 e1       	ldi	r18, 0x15	; 21
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	dc 01       	movw	r26, r24
     d38:	a2 9f       	mul	r26, r18
     d3a:	c0 01       	movw	r24, r0
     d3c:	a3 9f       	mul	r26, r19
     d3e:	90 0d       	add	r25, r0
     d40:	b2 9f       	mul	r27, r18
     d42:	90 0d       	add	r25, r0
     d44:	11 24       	eor	r1, r1
     d46:	e8 0f       	add	r30, r24
     d48:	f9 1f       	adc	r31, r25
     d4a:	41 a7       	std	Z+41, r20	; 0x29
     d4c:	52 a7       	std	Z+42, r21	; 0x2a
     d4e:	63 a7       	std	Z+43, r22	; 0x2b
     d50:	74 a7       	std	Z+44, r23	; 0x2c
}
     d52:	08 95       	ret

00000d54 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
     d54:	e0 91 4b 01 	lds	r30, 0x014B
     d58:	f0 91 4c 01 	lds	r31, 0x014C
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	25 e1       	ldi	r18, 0x15	; 21
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	ac 01       	movw	r20, r24
     d64:	42 9f       	mul	r20, r18
     d66:	c0 01       	movw	r24, r0
     d68:	43 9f       	mul	r20, r19
     d6a:	90 0d       	add	r25, r0
     d6c:	52 9f       	mul	r21, r18
     d6e:	90 0d       	add	r25, r0
     d70:	11 24       	eor	r1, r1
     d72:	e8 0f       	add	r30, r24
     d74:	f9 1f       	adc	r31, r25
     d76:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
     d78:	81 70       	andi	r24, 0x01	; 1
     d7a:	08 95       	ret

00000d7c <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
     d7c:	e0 91 4b 01 	lds	r30, 0x014B
     d80:	f0 91 4c 01 	lds	r31, 0x014C
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	25 e1       	ldi	r18, 0x15	; 21
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	ac 01       	movw	r20, r24
     d8c:	42 9f       	mul	r20, r18
     d8e:	c0 01       	movw	r24, r0
     d90:	43 9f       	mul	r20, r19
     d92:	90 0d       	add	r25, r0
     d94:	52 9f       	mul	r21, r18
     d96:	90 0d       	add	r25, r0
     d98:	11 24       	eor	r1, r1
     d9a:	e8 0f       	add	r30, r24
     d9c:	f9 1f       	adc	r31, r25
     d9e:	80 8d       	ldd	r24, Z+24	; 0x18
     da0:	81 60       	ori	r24, 0x01	; 1
     da2:	80 8f       	std	Z+24, r24	; 0x18
}
     da4:	08 95       	ret

00000da6 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     da6:	e0 91 4b 01 	lds	r30, 0x014B
     daa:	f0 91 4c 01 	lds	r31, 0x014C
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	25 e1       	ldi	r18, 0x15	; 21
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	ac 01       	movw	r20, r24
     db6:	42 9f       	mul	r20, r18
     db8:	c0 01       	movw	r24, r0
     dba:	43 9f       	mul	r20, r19
     dbc:	90 0d       	add	r25, r0
     dbe:	52 9f       	mul	r21, r18
     dc0:	90 0d       	add	r25, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	e8 0f       	add	r30, r24
     dc6:	f9 1f       	adc	r31, r25
     dc8:	80 8d       	ldd	r24, Z+24	; 0x18
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	80 8f       	std	Z+24, r24	; 0x18
}
     dce:	08 95       	ret

00000dd0 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     dd0:	e0 91 4b 01 	lds	r30, 0x014B
     dd4:	f0 91 4c 01 	lds	r31, 0x014C
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	25 e1       	ldi	r18, 0x15	; 21
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	ac 01       	movw	r20, r24
     de0:	42 9f       	mul	r20, r18
     de2:	c0 01       	movw	r24, r0
     de4:	43 9f       	mul	r20, r19
     de6:	90 0d       	add	r25, r0
     de8:	52 9f       	mul	r21, r18
     dea:	90 0d       	add	r25, r0
     dec:	11 24       	eor	r1, r1
     dee:	e8 0f       	add	r30, r24
     df0:	f9 1f       	adc	r31, r25
     df2:	80 8d       	ldd	r24, Z+24	; 0x18
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     df4:	15 a2       	std	Z+37, r1	; 0x25
     df6:	16 a2       	std	Z+38, r1	; 0x26
     df8:	17 a2       	std	Z+39, r1	; 0x27
     dfa:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     dfc:	11 8e       	std	Z+25, r1	; 0x19
     dfe:	12 8e       	std	Z+26, r1	; 0x1a
     e00:	13 8e       	std	Z+27, r1	; 0x1b
     e02:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     e04:	15 8e       	std	Z+29, r1	; 0x1d
     e06:	16 8e       	std	Z+30, r1	; 0x1e
     e08:	17 8e       	std	Z+31, r1	; 0x1f
     e0a:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     e0c:	11 a2       	std	Z+33, r1	; 0x21
     e0e:	12 a2       	std	Z+34, r1	; 0x22
     e10:	13 a2       	std	Z+35, r1	; 0x23
     e12:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     e14:	11 a6       	std	Z+41, r1	; 0x29
     e16:	12 a6       	std	Z+42, r1	; 0x2a
     e18:	13 a6       	std	Z+43, r1	; 0x2b
     e1a:	14 a6       	std	Z+44, r1	; 0x2c
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     e1c:	80 7e       	andi	r24, 0xE0	; 224
     e1e:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
     e20:	08 95       	ret

00000e22 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
     e22:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Timebase_UpCounter_Reset>
}
     e26:	08 95       	ret

00000e28 <Timebase_UpCounter_Start>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e28:	e0 91 4b 01 	lds	r30, 0x014B
     e2c:	f0 91 4c 01 	lds	r31, 0x014C
     e30:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 1){
     e32:	25 e1       	ldi	r18, 0x15	; 21
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	ac 01       	movw	r20, r24
     e38:	42 9f       	mul	r20, r18
     e3a:	c0 01       	movw	r24, r0
     e3c:	43 9f       	mul	r20, r19
     e3e:	90 0d       	add	r25, r0
     e40:	52 9f       	mul	r21, r18
     e42:	90 0d       	add	r25, r0
     e44:	11 24       	eor	r1, r1
     e46:	e8 0f       	add	r30, r24
     e48:	f9 1f       	adc	r31, r25
     e4a:	90 8d       	ldd	r25, Z+24	; 0x18
     e4c:	89 2f       	mov	r24, r25
     e4e:	86 95       	lsr	r24
     e50:	8f 70       	andi	r24, 0x0F	; 15
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	19 f0       	breq	.+6      	; 0xe5c <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     e56:	91 7e       	andi	r25, 0xE1	; 225
     e58:	92 60       	ori	r25, 0x02	; 2
     e5a:	90 8f       	std	Z+24, r25	; 0x18
     e5c:	08 95       	ret

00000e5e <Timebase_UpCounter_Stop>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e5e:	e0 91 4b 01 	lds	r30, 0x014B
     e62:	f0 91 4c 01 	lds	r31, 0x014C
     e66:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , 1);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 2){
     e68:	25 e1       	ldi	r18, 0x15	; 21
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	ac 01       	movw	r20, r24
     e6e:	42 9f       	mul	r20, r18
     e70:	c0 01       	movw	r24, r0
     e72:	43 9f       	mul	r20, r19
     e74:	90 0d       	add	r25, r0
     e76:	52 9f       	mul	r21, r18
     e78:	90 0d       	add	r25, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	e8 0f       	add	r30, r24
     e7e:	f9 1f       	adc	r31, r25
     e80:	90 8d       	ldd	r25, Z+24	; 0x18
     e82:	89 2f       	mov	r24, r25
     e84:	86 95       	lsr	r24
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	82 30       	cpi	r24, 0x02	; 2
     e8a:	19 f0       	breq	.+6      	; 0xe92 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     e8c:	91 7e       	andi	r25, 0xE1	; 225
     e8e:	94 60       	ori	r25, 0x04	; 4
     e90:	90 8f       	std	Z+24, r25	; 0x18
     e92:	08 95       	ret

00000e94 <Timebase_UpCounter_Set_Securely>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e94:	a0 91 4b 01 	lds	r26, 0x014B
     e98:	b0 91 4c 01 	lds	r27, 0x014C
     e9c:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_UpCounter_Get_Status( window ) == 0 ){
     e9e:	25 e1       	ldi	r18, 0x15	; 21
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	82 9f       	mul	r24, r18
     ea4:	f0 01       	movw	r30, r0
     ea6:	83 9f       	mul	r24, r19
     ea8:	f0 0d       	add	r31, r0
     eaa:	92 9f       	mul	r25, r18
     eac:	f0 0d       	add	r31, r0
     eae:	11 24       	eor	r1, r1
     eb0:	ea 0f       	add	r30, r26
     eb2:	fb 1f       	adc	r31, r27
     eb4:	80 8d       	ldd	r24, Z+24	; 0x18
     eb6:	86 95       	lsr	r24
     eb8:	8f 70       	andi	r24, 0x0F	; 15
     eba:	19 f5       	brne	.+70     	; 0xf02 <Timebase_UpCounter_Set_Securely+0x6e>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     ebc:	15 a2       	std	Z+37, r1	; 0x25
     ebe:	16 a2       	std	Z+38, r1	; 0x26
     ec0:	17 a2       	std	Z+39, r1	; 0x27
     ec2:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     ec4:	11 a2       	std	Z+33, r1	; 0x21
     ec6:	12 a2       	std	Z+34, r1	; 0x22
     ec8:	13 a2       	std	Z+35, r1	; 0x23
     eca:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     ecc:	45 8f       	std	Z+29, r20	; 0x1d
     ece:	56 8f       	std	Z+30, r21	; 0x1e
     ed0:	67 8f       	std	Z+31, r22	; 0x1f
     ed2:	70 a3       	std	Z+32, r23	; 0x20
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ed4:	1a 96       	adiw	r26, 0x0a	; 10
     ed6:	8d 91       	ld	r24, X+
     ed8:	9d 91       	ld	r25, X+
     eda:	0d 90       	ld	r0, X+
     edc:	bc 91       	ld	r27, X
     ede:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     ee0:	84 0f       	add	r24, r20
     ee2:	95 1f       	adc	r25, r21
     ee4:	a6 1f       	adc	r26, r22
     ee6:	b7 1f       	adc	r27, r23
     ee8:	81 8f       	std	Z+25, r24	; 0x19
     eea:	92 8f       	std	Z+26, r25	; 0x1a
     eec:	a3 8f       	std	Z+27, r26	; 0x1b
     eee:	b4 8f       	std	Z+28, r27	; 0x1c
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != 1){
     ef0:	90 8d       	ldd	r25, Z+24	; 0x18
     ef2:	89 2f       	mov	r24, r25
     ef4:	86 95       	lsr	r24
     ef6:	8f 70       	andi	r24, 0x0F	; 15
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	19 f0       	breq	.+6      	; 0xf02 <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     efc:	91 7e       	andi	r25, 0xE1	; 225
     efe:	92 60       	ori	r25, 0x02	; 2
     f00:	90 8f       	std	Z+24, r25	; 0x18
     f02:	08 95       	ret

00000f04 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	0f 93       	push	r16
     f0c:	1f 93       	push	r17
     f0e:	d8 2e       	mov	r13, r24
     f10:	7a 01       	movw	r14, r20
     f12:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
     f14:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
     f18:	8d 2d       	mov	r24, r13
     f1a:	b8 01       	movw	r22, r16
     f1c:	a7 01       	movw	r20, r14
     f1e:	0e 94 4a 07 	call	0xe94	; 0xe94 <Timebase_UpCounter_Set_Securely>
} 
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	08 95       	ret

00000f2e <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	0f 93       	push	r16
     f34:	1f 93       	push	r17


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     f36:	a0 91 4b 01 	lds	r26, 0x014B
     f3a:	b0 91 4c 01 	lds	r27, 0x014C
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	25 e1       	ldi	r18, 0x15	; 21
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	82 9f       	mul	r24, r18
     f46:	f0 01       	movw	r30, r0
     f48:	83 9f       	mul	r24, r19
     f4a:	f0 0d       	add	r31, r0
     f4c:	92 9f       	mul	r25, r18
     f4e:	f0 0d       	add	r31, r0
     f50:	11 24       	eor	r1, r1
     f52:	ea 0f       	add	r30, r26
     f54:	fb 1f       	adc	r31, r27
     f56:	80 8d       	ldd	r24, Z+24	; 0x18
     f58:	86 95       	lsr	r24
     f5a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Reset( window );
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	b1 f5       	brne	.+108    	; 0xfcc <Timebase_UpCounter_Update+0x9e>
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f60:	1a 96       	adiw	r26, 0x0a	; 10
     f62:	8d 91       	ld	r24, X+
     f64:	9d 91       	ld	r25, X+
     f66:	0d 90       	ld	r0, X+
     f68:	bc 91       	ld	r27, X
     f6a:	a0 2d       	mov	r26, r0
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
     f6c:	21 8d       	ldd	r18, Z+25	; 0x19
     f6e:	32 8d       	ldd	r19, Z+26	; 0x1a
     f70:	43 8d       	ldd	r20, Z+27	; 0x1b
     f72:	54 8d       	ldd	r21, Z+28	; 0x1c
     f74:	28 1b       	sub	r18, r24
     f76:	39 0b       	sbc	r19, r25
     f78:	4a 0b       	sbc	r20, r26
     f7a:	5b 0b       	sbc	r21, r27
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     f7c:	21 a3       	std	Z+33, r18	; 0x21
     f7e:	32 a3       	std	Z+34, r19	; 0x22
     f80:	43 a3       	std	Z+35, r20	; 0x23
     f82:	54 a3       	std	Z+36, r21	; 0x24
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     f84:	e5 8c       	ldd	r14, Z+29	; 0x1d
     f86:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f88:	07 8d       	ldd	r16, Z+31	; 0x1f
     f8a:	10 a1       	ldd	r17, Z+32	; 0x20
     f8c:	d8 01       	movw	r26, r16
     f8e:	c7 01       	movw	r24, r14
     f90:	82 1b       	sub	r24, r18
     f92:	93 0b       	sbc	r25, r19
     f94:	a4 0b       	sbc	r26, r20
     f96:	b5 0b       	sbc	r27, r21
     f98:	85 a3       	std	Z+37, r24	; 0x25
     f9a:	96 a3       	std	Z+38, r25	; 0x26
     f9c:	a7 a3       	std	Z+39, r26	; 0x27
     f9e:	b0 a7       	std	Z+40, r27	; 0x28

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == 1 ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
     fa0:	12 16       	cp	r1, r18
     fa2:	13 06       	cpc	r1, r19
     fa4:	14 06       	cpc	r1, r20
     fa6:	15 06       	cpc	r1, r21
     fa8:	8c f1       	brlt	.+98     	; 0x100c <Timebase_UpCounter_Update+0xde>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     faa:	11 8e       	std	Z+25, r1	; 0x19
     fac:	12 8e       	std	Z+26, r1	; 0x1a
     fae:	13 8e       	std	Z+27, r1	; 0x1b
     fb0:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     fb2:	11 a2       	std	Z+33, r1	; 0x21
     fb4:	12 a2       	std	Z+34, r1	; 0x22
     fb6:	13 a2       	std	Z+35, r1	; 0x23
     fb8:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     fba:	e5 a2       	std	Z+37, r14	; 0x25
     fbc:	f6 a2       	std	Z+38, r15	; 0x26
     fbe:	07 a3       	std	Z+39, r16	; 0x27
     fc0:	10 a7       	std	Z+40, r17	; 0x28
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     fc2:	80 8d       	ldd	r24, Z+24	; 0x18
     fc4:	81 7e       	andi	r24, 0xE1	; 225
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	80 8f       	std	Z+24, r24	; 0x18
     fca:	20 c0       	rjmp	.+64     	; 0x100c <Timebase_UpCounter_Update+0xde>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, 4);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == 2){
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	f1 f4       	brne	.+60     	; 0x100c <Timebase_UpCounter_Update+0xde>
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     fd0:	1a 96       	adiw	r26, 0x0a	; 10
     fd2:	8d 91       	ld	r24, X+
     fd4:	9d 91       	ld	r25, X+
     fd6:	0d 90       	ld	r0, X+
     fd8:	bc 91       	ld	r27, X
     fda:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     fdc:	21 a1       	ldd	r18, Z+33	; 0x21
     fde:	32 a1       	ldd	r19, Z+34	; 0x22
     fe0:	43 a1       	ldd	r20, Z+35	; 0x23
     fe2:	54 a1       	ldd	r21, Z+36	; 0x24
     fe4:	82 0f       	add	r24, r18
     fe6:	93 1f       	adc	r25, r19
     fe8:	a4 1f       	adc	r26, r20
     fea:	b5 1f       	adc	r27, r21
     fec:	81 8f       	std	Z+25, r24	; 0x19
     fee:	92 8f       	std	Z+26, r25	; 0x1a
     ff0:	a3 8f       	std	Z+27, r26	; 0x1b
     ff2:	b4 8f       	std	Z+28, r27	; 0x1c
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     ff4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ff6:	96 8d       	ldd	r25, Z+30	; 0x1e
     ff8:	a7 8d       	ldd	r26, Z+31	; 0x1f
     ffa:	b0 a1       	ldd	r27, Z+32	; 0x20
     ffc:	82 1b       	sub	r24, r18
     ffe:	93 0b       	sbc	r25, r19
    1000:	a4 0b       	sbc	r26, r20
    1002:	b5 0b       	sbc	r27, r21
    1004:	85 a3       	std	Z+37, r24	; 0x25
    1006:	96 a3       	std	Z+38, r25	; 0x26
    1008:	a7 a3       	std	Z+39, r26	; 0x27
    100a:	b0 a7       	std	Z+40, r27	; 0x28
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == 2){
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + Timebase_Timer_Get_Seconds());
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	08 95       	ret

00001016 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	e0 91 4b 01 	lds	r30, 0x014B
    101c:	f0 91 4c 01 	lds	r31, 0x014C
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	25 e1       	ldi	r18, 0x15	; 21
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	bc 01       	movw	r22, r24
    1028:	62 9f       	mul	r22, r18
    102a:	c0 01       	movw	r24, r0
    102c:	63 9f       	mul	r22, r19
    102e:	90 0d       	add	r25, r0
    1030:	72 9f       	mul	r23, r18
    1032:	90 0d       	add	r25, r0
    1034:	11 24       	eor	r1, r1
    1036:	e8 0f       	add	r30, r24
    1038:	f9 1f       	adc	r31, r25
    103a:	80 8d       	ldd	r24, Z+24	; 0x18
    103c:	86 95       	lsr	r24
    103e:	8f 70       	andi	r24, 0x0F	; 15
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	09 f4       	brne	.+2      	; 0x1046 <Timebase_UpCounter_Expired+0x30>
    1044:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == 4){
    return 1;
  }else{
    return 0;
  }
}
    1046:	84 2f       	mov	r24, r20
    1048:	08 95       	ret

0000104a <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    104a:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == 4){
    104c:	e0 91 4b 01 	lds	r30, 0x014B
    1050:	f0 91 4c 01 	lds	r31, 0x014C
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	85 e1       	ldi	r24, 0x15	; 21
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	bc 01       	movw	r22, r24
    105e:	26 9f       	mul	r18, r22
    1060:	c0 01       	movw	r24, r0
    1062:	27 9f       	mul	r18, r23
    1064:	90 0d       	add	r25, r0
    1066:	36 9f       	mul	r19, r22
    1068:	90 0d       	add	r25, r0
    106a:	11 24       	eor	r1, r1
    106c:	e8 0f       	add	r30, r24
    106e:	f9 1f       	adc	r31, r25
    1070:	80 8d       	ldd	r24, Z+24	; 0x18
    1072:	86 95       	lsr	r24
    1074:	8f 70       	andi	r24, 0x0F	; 15
    1076:	84 30       	cpi	r24, 0x04	; 4
    1078:	11 f0       	breq	.+4      	; 0x107e <Timebase_UpCounter_Expired_Event+0x34>
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    107e:	84 2f       	mov	r24, r20
    1080:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Timebase_UpCounter_Reset>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1086:	08 95       	ret

00001088 <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1088:	e0 91 4b 01 	lds	r30, 0x014B
    108c:	f0 91 4c 01 	lds	r31, 0x014C
    1090:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    1092:	25 e1       	ldi	r18, 0x15	; 21
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	dc 01       	movw	r26, r24
    1098:	a2 9f       	mul	r26, r18
    109a:	c0 01       	movw	r24, r0
    109c:	a3 9f       	mul	r26, r19
    109e:	90 0d       	add	r25, r0
    10a0:	b2 9f       	mul	r27, r18
    10a2:	90 0d       	add	r25, r0
    10a4:	11 24       	eor	r1, r1
    10a6:	e8 0f       	add	r30, r24
    10a8:	f9 1f       	adc	r31, r25
    10aa:	80 8d       	ldd	r24, Z+24	; 0x18
    10ac:	80 fd       	sbrc	r24, 0
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <Timebase_UpCounter_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    10b0:	85 a1       	ldd	r24, Z+37	; 0x25
    10b2:	96 a1       	ldd	r25, Z+38	; 0x26
    10b4:	a7 a1       	ldd	r26, Z+39	; 0x27
    10b6:	b0 a5       	ldd	r27, Z+40	; 0x28
    10b8:	84 0f       	add	r24, r20
    10ba:	95 1f       	adc	r25, r21
    10bc:	a6 1f       	adc	r26, r22
    10be:	b7 1f       	adc	r27, r23
    10c0:	81 a7       	std	Z+41, r24	; 0x29
    10c2:	92 a7       	std	Z+42, r25	; 0x2a
    10c4:	a3 a7       	std	Z+43, r26	; 0x2b
    10c6:	b4 a7       	std	Z+44, r27	; 0x2c
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    10c8:	80 8d       	ldd	r24, Z+24	; 0x18
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	80 8f       	std	Z+24, r24	; 0x18
    10ce:	08 95       	ret

000010d0 <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].PeriodValue;
    10d0:	e0 91 4b 01 	lds	r30, 0x014B
    10d4:	f0 91 4c 01 	lds	r31, 0x014C
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    10da:	25 e1       	ldi	r18, 0x15	; 21
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	ac 01       	movw	r20, r24
    10e0:	42 9f       	mul	r20, r18
    10e2:	c0 01       	movw	r24, r0
    10e4:	43 9f       	mul	r20, r19
    10e6:	90 0d       	add	r25, r0
    10e8:	52 9f       	mul	r21, r18
    10ea:	90 0d       	add	r25, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	e8 0f       	add	r30, r24
    10f0:	f9 1f       	adc	r31, r25
    10f2:	21 a5       	ldd	r18, Z+41	; 0x29
    10f4:	32 a5       	ldd	r19, Z+42	; 0x2a
    10f6:	43 a5       	ldd	r20, Z+43	; 0x2b
    10f8:	54 a5       	ldd	r21, Z+44	; 0x2c
    10fa:	85 a1       	ldd	r24, Z+37	; 0x25
    10fc:	96 a1       	ldd	r25, Z+38	; 0x26
    10fe:	a7 a1       	ldd	r26, Z+39	; 0x27
    1100:	b0 a5       	ldd	r27, Z+40	; 0x28
    1102:	28 1b       	sub	r18, r24
    1104:	39 0b       	sbc	r19, r25
    1106:	4a 0b       	sbc	r20, r26
    1108:	5b 0b       	sbc	r21, r27
    110a:	57 ff       	sbrs	r21, 7
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <Timebase_UpCounter_Get_Remaining_Period_Value+0x46>
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1116:	b9 01       	movw	r22, r18
    1118:	ca 01       	movw	r24, r20
    111a:	08 95       	ret

0000111c <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    111c:	cf 93       	push	r28
    111e:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return (int32_t)Timebase->UpCounter[window].PeriodValue;
    1120:	c0 91 4b 01 	lds	r28, 0x014B
    1124:	d0 91 4c 01 	lds	r29, 0x014C
    1128:	68 2f       	mov	r22, r24
    112a:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    112c:	85 e1       	ldi	r24, 0x15	; 21
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	68 9f       	mul	r22, r24
    1132:	f0 01       	movw	r30, r0
    1134:	69 9f       	mul	r22, r25
    1136:	f0 0d       	add	r31, r0
    1138:	78 9f       	mul	r23, r24
    113a:	f0 0d       	add	r31, r0
    113c:	11 24       	eor	r1, r1
    113e:	ec 0f       	add	r30, r28
    1140:	fd 1f       	adc	r31, r29
    1142:	21 a5       	ldd	r18, Z+41	; 0x29
    1144:	32 a5       	ldd	r19, Z+42	; 0x2a
    1146:	43 a5       	ldd	r20, Z+43	; 0x2b
    1148:	54 a5       	ldd	r21, Z+44	; 0x2c
    114a:	85 a1       	ldd	r24, Z+37	; 0x25
    114c:	96 a1       	ldd	r25, Z+38	; 0x26
    114e:	a7 a1       	ldd	r26, Z+39	; 0x27
    1150:	b0 a5       	ldd	r27, Z+40	; 0x28
    1152:	28 1b       	sub	r18, r24
    1154:	39 0b       	sbc	r19, r25
    1156:	4a 0b       	sbc	r20, r26
    1158:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    115a:	57 fd       	sbrc	r21, 7
    115c:	07 c0       	rjmp	.+14     	; 0x116c <Timebase_UpCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_UpCounter_Get_Period_Flag( window )){
    115e:	21 15       	cp	r18, r1
    1160:	31 05       	cpc	r19, r1
    1162:	41 05       	cpc	r20, r1
    1164:	51 05       	cpc	r21, r1
    1166:	11 f0       	breq	.+4      	; 0x116c <Timebase_UpCounter_Period_Value_Expired+0x50>
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	12 c0       	rjmp	.+36     	; 0x1190 <Timebase_UpCounter_Period_Value_Expired+0x74>
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	85 e1       	ldi	r24, 0x15	; 21
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	ac 01       	movw	r20, r24
    1174:	64 9f       	mul	r22, r20
    1176:	c0 01       	movw	r24, r0
    1178:	65 9f       	mul	r22, r21
    117a:	90 0d       	add	r25, r0
    117c:	74 9f       	mul	r23, r20
    117e:	90 0d       	add	r25, r0
    1180:	11 24       	eor	r1, r1
    1182:	c8 0f       	add	r28, r24
    1184:	d9 1f       	adc	r29, r25
    1186:	88 8d       	ldd	r24, Y+24	; 0x18
    1188:	80 ff       	sbrs	r24, 0
    118a:	21 e0       	ldi	r18, 0x01	; 1
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    1190:	82 2f       	mov	r24, r18
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1198:	1f 93       	push	r17
    119a:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == 1){
    119c:	0e 94 8e 08 	call	0x111c	; 0x111c <Timebase_UpCounter_Period_Value_Expired>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	16 c0       	rjmp	.+44     	; 0x11d4 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    11a8:	e0 91 4b 01 	lds	r30, 0x014B
    11ac:	f0 91 4c 01 	lds	r31, 0x014C
    11b0:	21 2f       	mov	r18, r17
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	85 e1       	ldi	r24, 0x15	; 21
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	ac 01       	movw	r20, r24
    11ba:	24 9f       	mul	r18, r20
    11bc:	c0 01       	movw	r24, r0
    11be:	25 9f       	mul	r18, r21
    11c0:	90 0d       	add	r25, r0
    11c2:	34 9f       	mul	r19, r20
    11c4:	90 0d       	add	r25, r0
    11c6:	11 24       	eor	r1, r1
    11c8:	e8 0f       	add	r30, r24
    11ca:	f9 1f       	adc	r31, r25
    11cc:	80 8d       	ldd	r24, Z+24	; 0x18
    11ce:	8e 7f       	andi	r24, 0xFE	; 254
    11d0:	80 8f       	std	Z+24, r24	; 0x18
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    11d4:	1f 91       	pop	r17
    11d6:	08 95       	ret

000011d8 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	0e 94 97 07 	call	0xf2e	; 0xf2e <Timebase_UpCounter_Update>
  }
}
    11de:	08 95       	ret

000011e0 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <Timebase_UpCounter_Reset>
  }
}
    11e6:	08 95       	ret

000011e8 <Timebase_DownCounter_Get_Status>:
#endif



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    11e8:	e0 91 4b 01 	lds	r30, 0x014B
    11ec:	f0 91 4c 01 	lds	r31, 0x014C
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	2d e0       	ldi	r18, 0x0D	; 13
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	ac 01       	movw	r20, r24
    11f8:	42 9f       	mul	r20, r18
    11fa:	c0 01       	movw	r24, r0
    11fc:	43 9f       	mul	r20, r19
    11fe:	90 0d       	add	r25, r0
    1200:	52 9f       	mul	r21, r18
    1202:	90 0d       	add	r25, r0
    1204:	11 24       	eor	r1, r1
    1206:	e8 0f       	add	r30, r24
    1208:	f9 1f       	adc	r31, r25
    120a:	85 a5       	ldd	r24, Z+45	; 0x2d
    120c:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    120e:	8f 70       	andi	r24, 0x0F	; 15
    1210:	08 95       	ret

00001212 <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1212:	e0 91 4b 01 	lds	r30, 0x014B
    1216:	f0 91 4c 01 	lds	r31, 0x014C
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	2d e0       	ldi	r18, 0x0D	; 13
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	ac 01       	movw	r20, r24
    1222:	42 9f       	mul	r20, r18
    1224:	c0 01       	movw	r24, r0
    1226:	43 9f       	mul	r20, r19
    1228:	90 0d       	add	r25, r0
    122a:	52 9f       	mul	r21, r18
    122c:	90 0d       	add	r25, r0
    122e:	11 24       	eor	r1, r1
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	6f 70       	andi	r22, 0x0F	; 15
    1236:	66 0f       	add	r22, r22
    1238:	85 a5       	ldd	r24, Z+45	; 0x2d
    123a:	81 7e       	andi	r24, 0xE1	; 225
    123c:	86 2b       	or	r24, r22
    123e:	85 a7       	std	Z+45, r24	; 0x2d
}
    1240:	08 95       	ret

00001242 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    1242:	e0 91 4b 01 	lds	r30, 0x014B
    1246:	f0 91 4c 01 	lds	r31, 0x014C
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2d e0       	ldi	r18, 0x0D	; 13
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	ac 01       	movw	r20, r24
    1252:	42 9f       	mul	r20, r18
    1254:	c0 01       	movw	r24, r0
    1256:	43 9f       	mul	r20, r19
    1258:	90 0d       	add	r25, r0
    125a:	52 9f       	mul	r21, r18
    125c:	90 0d       	add	r25, r0
    125e:	11 24       	eor	r1, r1
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
    1264:	df 01       	movw	r26, r30
    1266:	d2 96       	adiw	r26, 0x32	; 50
    1268:	62 a9       	ldd	r22, Z+50	; 0x32
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	7c 91       	ld	r23, X
    126e:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->DownCounter[window].Value;
}
    1270:	12 96       	adiw	r26, 0x02	; 2
    1272:	8c 91       	ld	r24, X
    1274:	12 97       	sbiw	r26, 0x02	; 2
    1276:	13 96       	adiw	r26, 0x03	; 3
    1278:	9c 91       	ld	r25, X
    127a:	08 95       	ret

0000127c <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    127c:	e0 91 4b 01 	lds	r30, 0x014B
    1280:	f0 91 4c 01 	lds	r31, 0x014C
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	2d e0       	ldi	r18, 0x0D	; 13
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	dc 01       	movw	r26, r24
    128c:	a2 9f       	mul	r26, r18
    128e:	c0 01       	movw	r24, r0
    1290:	a3 9f       	mul	r26, r19
    1292:	90 0d       	add	r25, r0
    1294:	b2 9f       	mul	r27, r18
    1296:	90 0d       	add	r25, r0
    1298:	11 24       	eor	r1, r1
    129a:	e8 0f       	add	r30, r24
    129c:	f9 1f       	adc	r31, r25
    129e:	42 ab       	std	Z+50, r20	; 0x32
    12a0:	53 ab       	std	Z+51, r21	; 0x33
    12a2:	64 ab       	std	Z+52, r22	; 0x34
    12a4:	75 ab       	std	Z+53, r23	; 0x35
}
    12a6:	08 95       	ret

000012a8 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    12a8:	e0 91 4b 01 	lds	r30, 0x014B
    12ac:	f0 91 4c 01 	lds	r31, 0x014C
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2d e0       	ldi	r18, 0x0D	; 13
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	ac 01       	movw	r20, r24
    12b8:	42 9f       	mul	r20, r18
    12ba:	c0 01       	movw	r24, r0
    12bc:	43 9f       	mul	r20, r19
    12be:	90 0d       	add	r25, r0
    12c0:	52 9f       	mul	r21, r18
    12c2:	90 0d       	add	r25, r0
    12c4:	11 24       	eor	r1, r1
    12c6:	e8 0f       	add	r30, r24
    12c8:	f9 1f       	adc	r31, r25
    12ca:	df 01       	movw	r26, r30
    12cc:	9e 96       	adiw	r26, 0x2e	; 46
    12ce:	66 a5       	ldd	r22, Z+46	; 0x2e
    12d0:	11 96       	adiw	r26, 0x01	; 1
    12d2:	7c 91       	ld	r23, X
    12d4:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->DownCounter[window].EndValue;
}
    12d6:	12 96       	adiw	r26, 0x02	; 2
    12d8:	8c 91       	ld	r24, X
    12da:	12 97       	sbiw	r26, 0x02	; 2
    12dc:	13 96       	adiw	r26, 0x03	; 3
    12de:	9c 91       	ld	r25, X
    12e0:	08 95       	ret

000012e2 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    12e2:	e0 91 4b 01 	lds	r30, 0x014B
    12e6:	f0 91 4c 01 	lds	r31, 0x014C
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	2d e0       	ldi	r18, 0x0D	; 13
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	dc 01       	movw	r26, r24
    12f2:	a2 9f       	mul	r26, r18
    12f4:	c0 01       	movw	r24, r0
    12f6:	a3 9f       	mul	r26, r19
    12f8:	90 0d       	add	r25, r0
    12fa:	b2 9f       	mul	r27, r18
    12fc:	90 0d       	add	r25, r0
    12fe:	11 24       	eor	r1, r1
    1300:	e8 0f       	add	r30, r24
    1302:	f9 1f       	adc	r31, r25
    1304:	46 a7       	std	Z+46, r20	; 0x2e
    1306:	57 a7       	std	Z+47, r21	; 0x2f
    1308:	60 ab       	std	Z+48, r22	; 0x30
    130a:	71 ab       	std	Z+49, r23	; 0x31
}
    130c:	08 95       	ret

0000130e <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    130e:	e0 91 4b 01 	lds	r30, 0x014B
    1312:	f0 91 4c 01 	lds	r31, 0x014C
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	2d e0       	ldi	r18, 0x0D	; 13
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	ac 01       	movw	r20, r24
    131e:	42 9f       	mul	r20, r18
    1320:	c0 01       	movw	r24, r0
    1322:	43 9f       	mul	r20, r19
    1324:	90 0d       	add	r25, r0
    1326:	52 9f       	mul	r21, r18
    1328:	90 0d       	add	r25, r0
    132a:	11 24       	eor	r1, r1
    132c:	e8 0f       	add	r30, r24
    132e:	f9 1f       	adc	r31, r25
    1330:	df 01       	movw	r26, r30
    1332:	d6 96       	adiw	r26, 0x36	; 54
    1334:	66 a9       	ldd	r22, Z+54	; 0x36
    1336:	11 96       	adiw	r26, 0x01	; 1
    1338:	7c 91       	ld	r23, X
    133a:	11 97       	sbiw	r26, 0x01	; 1
  return (int32_t)Timebase->DownCounter[window].PeriodValue;
}
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	8c 91       	ld	r24, X
    1340:	12 97       	sbiw	r26, 0x02	; 2
    1342:	13 96       	adiw	r26, 0x03	; 3
    1344:	9c 91       	ld	r25, X
    1346:	08 95       	ret

00001348 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    1348:	e0 91 4b 01 	lds	r30, 0x014B
    134c:	f0 91 4c 01 	lds	r31, 0x014C
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1354:	77 ff       	sbrs	r23, 7
    1356:	11 c0       	rjmp	.+34     	; 0x137a <Timebase_DownCounter_Set_PeriodValue+0x32>
    Timebase->DownCounter[window].PeriodValue = 0;
    1358:	8d e0       	ldi	r24, 0x0D	; 13
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	ac 01       	movw	r20, r24
    135e:	24 9f       	mul	r18, r20
    1360:	c0 01       	movw	r24, r0
    1362:	25 9f       	mul	r18, r21
    1364:	90 0d       	add	r25, r0
    1366:	34 9f       	mul	r19, r20
    1368:	90 0d       	add	r25, r0
    136a:	11 24       	eor	r1, r1
    136c:	e8 0f       	add	r30, r24
    136e:	f9 1f       	adc	r31, r25
    1370:	16 aa       	std	Z+54, r1	; 0x36
    1372:	17 aa       	std	Z+55, r1	; 0x37
    1374:	10 ae       	std	Z+56, r1	; 0x38
    1376:	11 ae       	std	Z+57, r1	; 0x39
    1378:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    137a:	8d e0       	ldi	r24, 0x0D	; 13
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	dc 01       	movw	r26, r24
    1380:	2a 9f       	mul	r18, r26
    1382:	c0 01       	movw	r24, r0
    1384:	2b 9f       	mul	r18, r27
    1386:	90 0d       	add	r25, r0
    1388:	3a 9f       	mul	r19, r26
    138a:	90 0d       	add	r25, r0
    138c:	11 24       	eor	r1, r1
    138e:	e8 0f       	add	r30, r24
    1390:	f9 1f       	adc	r31, r25
    1392:	46 ab       	std	Z+54, r20	; 0x36
    1394:	57 ab       	std	Z+55, r21	; 0x37
    1396:	60 af       	std	Z+56, r22	; 0x38
    1398:	71 af       	std	Z+57, r23	; 0x39
    139a:	08 95       	ret

0000139c <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    139c:	e0 91 4b 01 	lds	r30, 0x014B
    13a0:	f0 91 4c 01 	lds	r31, 0x014C
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	2d e0       	ldi	r18, 0x0D	; 13
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	ac 01       	movw	r20, r24
    13ac:	42 9f       	mul	r20, r18
    13ae:	c0 01       	movw	r24, r0
    13b0:	43 9f       	mul	r20, r19
    13b2:	90 0d       	add	r25, r0
    13b4:	52 9f       	mul	r21, r18
    13b6:	90 0d       	add	r25, r0
    13b8:	11 24       	eor	r1, r1
    13ba:	e8 0f       	add	r30, r24
    13bc:	f9 1f       	adc	r31, r25
    13be:	85 a5       	ldd	r24, Z+45	; 0x2d
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
}
    13c0:	81 70       	andi	r24, 0x01	; 1
    13c2:	08 95       	ret

000013c4 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    13c4:	e0 91 4b 01 	lds	r30, 0x014B
    13c8:	f0 91 4c 01 	lds	r31, 0x014C
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	2d e0       	ldi	r18, 0x0D	; 13
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	ac 01       	movw	r20, r24
    13d4:	42 9f       	mul	r20, r18
    13d6:	c0 01       	movw	r24, r0
    13d8:	43 9f       	mul	r20, r19
    13da:	90 0d       	add	r25, r0
    13dc:	52 9f       	mul	r21, r18
    13de:	90 0d       	add	r25, r0
    13e0:	11 24       	eor	r1, r1
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
    13e6:	85 a5       	ldd	r24, Z+45	; 0x2d
    13e8:	81 60       	ori	r24, 0x01	; 1
    13ea:	85 a7       	std	Z+45, r24	; 0x2d
}
    13ec:	08 95       	ret

000013ee <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    13ee:	e0 91 4b 01 	lds	r30, 0x014B
    13f2:	f0 91 4c 01 	lds	r31, 0x014C
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	2d e0       	ldi	r18, 0x0D	; 13
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ac 01       	movw	r20, r24
    13fe:	42 9f       	mul	r20, r18
    1400:	c0 01       	movw	r24, r0
    1402:	43 9f       	mul	r20, r19
    1404:	90 0d       	add	r25, r0
    1406:	52 9f       	mul	r21, r18
    1408:	90 0d       	add	r25, r0
    140a:	11 24       	eor	r1, r1
    140c:	e8 0f       	add	r30, r24
    140e:	f9 1f       	adc	r31, r25
    1410:	85 a5       	ldd	r24, Z+45	; 0x2d
    1412:	8e 7f       	andi	r24, 0xFE	; 254
    1414:	85 a7       	std	Z+45, r24	; 0x2d
}
    1416:	08 95       	ret

00001418 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1418:	e0 91 4b 01 	lds	r30, 0x014B
    141c:	f0 91 4c 01 	lds	r31, 0x014C
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	2d e0       	ldi	r18, 0x0D	; 13
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	ac 01       	movw	r20, r24
    1428:	42 9f       	mul	r20, r18
    142a:	c0 01       	movw	r24, r0
    142c:	43 9f       	mul	r20, r19
    142e:	90 0d       	add	r25, r0
    1430:	52 9f       	mul	r21, r18
    1432:	90 0d       	add	r25, r0
    1434:	11 24       	eor	r1, r1
    1436:	e8 0f       	add	r30, r24
    1438:	f9 1f       	adc	r31, r25
    143a:	16 a6       	std	Z+46, r1	; 0x2e
    143c:	17 a6       	std	Z+47, r1	; 0x2f
    143e:	10 aa       	std	Z+48, r1	; 0x30
    1440:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1442:	12 aa       	std	Z+50, r1	; 0x32
    1444:	13 aa       	std	Z+51, r1	; 0x33
    1446:	14 aa       	std	Z+52, r1	; 0x34
    1448:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    144a:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    144c:	80 7e       	andi	r24, 0xE0	; 224
    144e:	85 a7       	std	Z+45, r24	; 0x2d
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, 0);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    1450:	08 95       	ret

00001452 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1452:	e0 91 4b 01 	lds	r30, 0x014B
    1456:	f0 91 4c 01 	lds	r31, 0x014C
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	2d e0       	ldi	r18, 0x0D	; 13
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	ac 01       	movw	r20, r24
    1462:	42 9f       	mul	r20, r18
    1464:	c0 01       	movw	r24, r0
    1466:	43 9f       	mul	r20, r19
    1468:	90 0d       	add	r25, r0
    146a:	52 9f       	mul	r21, r18
    146c:	90 0d       	add	r25, r0
    146e:	11 24       	eor	r1, r1
    1470:	e8 0f       	add	r30, r24
    1472:	f9 1f       	adc	r31, r25
    1474:	16 a6       	std	Z+46, r1	; 0x2e
    1476:	17 a6       	std	Z+47, r1	; 0x2f
    1478:	10 aa       	std	Z+48, r1	; 0x30
    147a:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    147c:	12 aa       	std	Z+50, r1	; 0x32
    147e:	13 aa       	std	Z+51, r1	; 0x33
    1480:	14 aa       	std	Z+52, r1	; 0x34
    1482:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1484:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1486:	80 7e       	andi	r24, 0xE0	; 224
    1488:	85 a7       	std	Z+45, r24	; 0x2d
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    148a:	08 95       	ret

0000148c <Timebase_DownCounter_Start>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    148c:	e0 91 4b 01 	lds	r30, 0x014B
    1490:	f0 91 4c 01 	lds	r31, 0x014C
    1494:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 1){
    1496:	2d e0       	ldi	r18, 0x0D	; 13
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	ac 01       	movw	r20, r24
    149c:	42 9f       	mul	r20, r18
    149e:	c0 01       	movw	r24, r0
    14a0:	43 9f       	mul	r20, r19
    14a2:	90 0d       	add	r25, r0
    14a4:	52 9f       	mul	r21, r18
    14a6:	90 0d       	add	r25, r0
    14a8:	11 24       	eor	r1, r1
    14aa:	e8 0f       	add	r30, r24
    14ac:	f9 1f       	adc	r31, r25
    14ae:	95 a5       	ldd	r25, Z+45	; 0x2d
    14b0:	89 2f       	mov	r24, r25
    14b2:	86 95       	lsr	r24
    14b4:	8f 70       	andi	r24, 0x0F	; 15
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	19 f0       	breq	.+6      	; 0x14c0 <Timebase_DownCounter_Start+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14ba:	91 7e       	andi	r25, 0xE1	; 225
    14bc:	92 60       	ori	r25, 0x02	; 2
    14be:	95 a7       	std	Z+45, r25	; 0x2d
    14c0:	08 95       	ret

000014c2 <Timebase_DownCounter_Stop>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    14c2:	e0 91 4b 01 	lds	r30, 0x014B
    14c6:	f0 91 4c 01 	lds	r31, 0x014C
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, 1); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 2){
    14cc:	2d e0       	ldi	r18, 0x0D	; 13
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	ac 01       	movw	r20, r24
    14d2:	42 9f       	mul	r20, r18
    14d4:	c0 01       	movw	r24, r0
    14d6:	43 9f       	mul	r20, r19
    14d8:	90 0d       	add	r25, r0
    14da:	52 9f       	mul	r21, r18
    14dc:	90 0d       	add	r25, r0
    14de:	11 24       	eor	r1, r1
    14e0:	e8 0f       	add	r30, r24
    14e2:	f9 1f       	adc	r31, r25
    14e4:	95 a5       	ldd	r25, Z+45	; 0x2d
    14e6:	89 2f       	mov	r24, r25
    14e8:	86 95       	lsr	r24
    14ea:	8f 70       	andi	r24, 0x0F	; 15
    14ec:	82 30       	cpi	r24, 0x02	; 2
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <Timebase_DownCounter_Stop+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14f0:	91 7e       	andi	r25, 0xE1	; 225
    14f2:	94 60       	ori	r25, 0x04	; 4
    14f4:	95 a7       	std	Z+45, r25	; 0x2d
    14f6:	08 95       	ret

000014f8 <Timebase_DownCounter_Set_Securely>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    14f8:	a0 91 4b 01 	lds	r26, 0x014B
    14fc:	b0 91 4c 01 	lds	r27, 0x014C
    1500:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == 0 ){
    1502:	2d e0       	ldi	r18, 0x0D	; 13
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	82 9f       	mul	r24, r18
    1508:	f0 01       	movw	r30, r0
    150a:	83 9f       	mul	r24, r19
    150c:	f0 0d       	add	r31, r0
    150e:	92 9f       	mul	r25, r18
    1510:	f0 0d       	add	r31, r0
    1512:	11 24       	eor	r1, r1
    1514:	ea 0f       	add	r30, r26
    1516:	fb 1f       	adc	r31, r27
    1518:	85 a5       	ldd	r24, Z+45	; 0x2d
    151a:	86 95       	lsr	r24
    151c:	8f 70       	andi	r24, 0x0F	; 15
    151e:	d9 f4       	brne	.+54     	; 0x1556 <Timebase_DownCounter_Set_Securely+0x5e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1520:	42 ab       	std	Z+50, r20	; 0x32
    1522:	53 ab       	std	Z+51, r21	; 0x33
    1524:	64 ab       	std	Z+52, r22	; 0x34
    1526:	75 ab       	std	Z+53, r23	; 0x35
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1528:	1a 96       	adiw	r26, 0x0a	; 10
    152a:	8d 91       	ld	r24, X+
    152c:	9d 91       	ld	r25, X+
    152e:	0d 90       	ld	r0, X+
    1530:	bc 91       	ld	r27, X
    1532:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1534:	84 0f       	add	r24, r20
    1536:	95 1f       	adc	r25, r21
    1538:	a6 1f       	adc	r26, r22
    153a:	b7 1f       	adc	r27, r23
    153c:	86 a7       	std	Z+46, r24	; 0x2e
    153e:	97 a7       	std	Z+47, r25	; 0x2f
    1540:	a0 ab       	std	Z+48, r26	; 0x30
    1542:	b1 ab       	std	Z+49, r27	; 0x31
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != 1){
    1544:	95 a5       	ldd	r25, Z+45	; 0x2d
    1546:	89 2f       	mov	r24, r25
    1548:	86 95       	lsr	r24
    154a:	8f 70       	andi	r24, 0x0F	; 15
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	19 f0       	breq	.+6      	; 0x1556 <Timebase_DownCounter_Set_Securely+0x5e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1550:	91 7e       	andi	r25, 0xE1	; 225
    1552:	92 60       	ori	r25, 0x02	; 2
    1554:	95 a7       	std	Z+45, r25	; 0x2d
    1556:	08 95       	ret

00001558 <Timebase_DownCounter_Set_Forcefully>:
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    155c:	e0 91 4b 01 	lds	r30, 0x014B
    1560:	f0 91 4c 01 	lds	r31, 0x014C
    1564:	a8 2f       	mov	r26, r24
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	2d e0       	ldi	r18, 0x0D	; 13
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	e9 01       	movw	r28, r18
    156e:	ac 9f       	mul	r26, r28
    1570:	90 01       	movw	r18, r0
    1572:	ad 9f       	mul	r26, r29
    1574:	30 0d       	add	r19, r0
    1576:	bc 9f       	mul	r27, r28
    1578:	30 0d       	add	r19, r0
    157a:	11 24       	eor	r1, r1
    157c:	e2 0f       	add	r30, r18
    157e:	f3 1f       	adc	r31, r19
    1580:	16 a6       	std	Z+46, r1	; 0x2e
    1582:	17 a6       	std	Z+47, r1	; 0x2f
    1584:	10 aa       	std	Z+48, r1	; 0x30
    1586:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1588:	12 aa       	std	Z+50, r1	; 0x32
    158a:	13 aa       	std	Z+51, r1	; 0x33
    158c:	14 aa       	std	Z+52, r1	; 0x34
    158e:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1590:	95 a5       	ldd	r25, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1592:	90 7e       	andi	r25, 0xE0	; 224
    1594:	95 a7       	std	Z+45, r25	; 0x2d
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    1596:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <Timebase_DownCounter_Set_Securely>
} 
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <Timebase_DownCounter_Update>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    15a0:	a0 91 4b 01 	lds	r26, 0x014B
    15a4:	b0 91 4c 01 	lds	r27, 0x014C
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	2d e0       	ldi	r18, 0x0D	; 13
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	82 9f       	mul	r24, r18
    15b0:	f0 01       	movw	r30, r0
    15b2:	83 9f       	mul	r24, r19
    15b4:	f0 0d       	add	r31, r0
    15b6:	92 9f       	mul	r25, r18
    15b8:	f0 0d       	add	r31, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	ea 0f       	add	r30, r26
    15be:	fb 1f       	adc	r31, r27
    15c0:	85 a5       	ldd	r24, Z+45	; 0x2d
    15c2:	86 95       	lsr	r24
    15c4:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	21 f5       	brne	.+72     	; 0x1612 <Timebase_DownCounter_Update+0x72>
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15ca:	1a 96       	adiw	r26, 0x0a	; 10
    15cc:	2d 91       	ld	r18, X+
    15ce:	3d 91       	ld	r19, X+
    15d0:	4d 91       	ld	r20, X+
    15d2:	5c 91       	ld	r21, X
    15d4:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    15d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    15d8:	97 a5       	ldd	r25, Z+47	; 0x2f
    15da:	a0 a9       	ldd	r26, Z+48	; 0x30
    15dc:	b1 a9       	ldd	r27, Z+49	; 0x31
    15de:	82 1b       	sub	r24, r18
    15e0:	93 0b       	sbc	r25, r19
    15e2:	a4 0b       	sbc	r26, r20
    15e4:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    15e6:	82 ab       	std	Z+50, r24	; 0x32
    15e8:	93 ab       	std	Z+51, r25	; 0x33
    15ea:	a4 ab       	std	Z+52, r26	; 0x34
    15ec:	b5 ab       	std	Z+53, r27	; 0x35
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == 1 ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    15ee:	18 16       	cp	r1, r24
    15f0:	19 06       	cpc	r1, r25
    15f2:	1a 06       	cpc	r1, r26
    15f4:	1b 06       	cpc	r1, r27
    15f6:	0c f1       	brlt	.+66     	; 0x163a <Timebase_DownCounter_Update+0x9a>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    15f8:	16 a6       	std	Z+46, r1	; 0x2e
    15fa:	17 a6       	std	Z+47, r1	; 0x2f
    15fc:	10 aa       	std	Z+48, r1	; 0x30
    15fe:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1600:	12 aa       	std	Z+50, r1	; 0x32
    1602:	13 aa       	std	Z+51, r1	; 0x33
    1604:	14 aa       	std	Z+52, r1	; 0x34
    1606:	15 aa       	std	Z+53, r1	; 0x35
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1608:	85 a5       	ldd	r24, Z+45	; 0x2d
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    160a:	80 7e       	andi	r24, 0xE0	; 224
    160c:	88 60       	ori	r24, 0x08	; 8
    160e:	85 a7       	std	Z+45, r24	; 0x2d
    1610:	08 95       	ret
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, 4);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == 2){ 
    1612:	82 30       	cpi	r24, 0x02	; 2
    1614:	91 f4       	brne	.+36     	; 0x163a <Timebase_DownCounter_Update+0x9a>
int32_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1616:	1a 96       	adiw	r26, 0x0a	; 10
    1618:	8d 91       	ld	r24, X+
    161a:	9d 91       	ld	r25, X+
    161c:	0d 90       	ld	r0, X+
    161e:	bc 91       	ld	r27, X
    1620:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1622:	22 a9       	ldd	r18, Z+50	; 0x32
    1624:	33 a9       	ldd	r19, Z+51	; 0x33
    1626:	44 a9       	ldd	r20, Z+52	; 0x34
    1628:	55 a9       	ldd	r21, Z+53	; 0x35
    162a:	82 0f       	add	r24, r18
    162c:	93 1f       	adc	r25, r19
    162e:	a4 1f       	adc	r26, r20
    1630:	b5 1f       	adc	r27, r21
    1632:	86 a7       	std	Z+46, r24	; 0x2e
    1634:	97 a7       	std	Z+47, r25	; 0x2f
    1636:	a0 ab       	std	Z+48, r26	; 0x30
    1638:	b1 ab       	std	Z+49, r27	; 0x31
    163a:	08 95       	ret

0000163c <Timebase_DownCounter_Expired>:
  } else if (Timebase_DownCounter_Get_Status( window ) == 2){ 
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	e0 91 4b 01 	lds	r30, 0x014B
    1642:	f0 91 4c 01 	lds	r31, 0x014C
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	2d e0       	ldi	r18, 0x0D	; 13
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	bc 01       	movw	r22, r24
    164e:	62 9f       	mul	r22, r18
    1650:	c0 01       	movw	r24, r0
    1652:	63 9f       	mul	r22, r19
    1654:	90 0d       	add	r25, r0
    1656:	72 9f       	mul	r23, r18
    1658:	90 0d       	add	r25, r0
    165a:	11 24       	eor	r1, r1
    165c:	e8 0f       	add	r30, r24
    165e:	f9 1f       	adc	r31, r25
    1660:	85 a5       	ldd	r24, Z+45	; 0x2d
    1662:	86 95       	lsr	r24
    1664:	8f 70       	andi	r24, 0x0F	; 15
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	09 f4       	brne	.+2      	; 0x166c <Timebase_DownCounter_Expired+0x30>
    166a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == 4){
    return 1;
  }else{
    return 0;
  }
}
    166c:	84 2f       	mov	r24, r20
    166e:	08 95       	ret

00001670 <Timebase_DownCounter_Expired_Event>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1670:	e0 91 4b 01 	lds	r30, 0x014B
    1674:	f0 91 4c 01 	lds	r31, 0x014C
    1678:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == 4){
    167a:	2d e0       	ldi	r18, 0x0D	; 13
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	ac 01       	movw	r20, r24
    1680:	42 9f       	mul	r20, r18
    1682:	c0 01       	movw	r24, r0
    1684:	43 9f       	mul	r20, r19
    1686:	90 0d       	add	r25, r0
    1688:	52 9f       	mul	r21, r18
    168a:	90 0d       	add	r25, r0
    168c:	11 24       	eor	r1, r1
    168e:	e8 0f       	add	r30, r24
    1690:	f9 1f       	adc	r31, r25
    1692:	85 a5       	ldd	r24, Z+45	; 0x2d
    1694:	86 95       	lsr	r24
    1696:	8f 70       	andi	r24, 0x0F	; 15
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	11 f0       	breq	.+4      	; 0x16a0 <Timebase_DownCounter_Expired_Event+0x30>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    16a0:	16 a6       	std	Z+46, r1	; 0x2e
    16a2:	17 a6       	std	Z+47, r1	; 0x2f
    16a4:	10 aa       	std	Z+48, r1	; 0x30
    16a6:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    16a8:	12 aa       	std	Z+50, r1	; 0x32
    16aa:	13 aa       	std	Z+51, r1	; 0x33
    16ac:	14 aa       	std	Z+52, r1	; 0x34
    16ae:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16b0:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    16b2:	80 7e       	andi	r24, 0xE0	; 224
    16b4:	85 a7       	std	Z+45, r24	; 0x2d
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    16b8:	08 95       	ret

000016ba <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
    16be:	c0 91 4b 01 	lds	r28, 0x014B
    16c2:	d0 91 4c 01 	lds	r29, 0x014C
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    16ca:	8d e0       	ldi	r24, 0x0D	; 13
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	28 9f       	mul	r18, r24
    16d0:	f0 01       	movw	r30, r0
    16d2:	29 9f       	mul	r18, r25
    16d4:	f0 0d       	add	r31, r0
    16d6:	38 9f       	mul	r19, r24
    16d8:	f0 0d       	add	r31, r0
    16da:	11 24       	eor	r1, r1
    16dc:	ec 0f       	add	r30, r28
    16de:	fd 1f       	adc	r31, r29
    16e0:	85 a5       	ldd	r24, Z+45	; 0x2d
    16e2:	80 fd       	sbrc	r24, 0
    16e4:	21 c0       	rjmp	.+66     	; 0x1728 <Timebase_DownCounter_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    16e6:	82 a9       	ldd	r24, Z+50	; 0x32
    16e8:	93 a9       	ldd	r25, Z+51	; 0x33
    16ea:	a4 a9       	ldd	r26, Z+52	; 0x34
    16ec:	b5 a9       	ldd	r27, Z+53	; 0x35
    16ee:	84 1b       	sub	r24, r20
    16f0:	95 0b       	sbc	r25, r21
    16f2:	a6 0b       	sbc	r26, r22
    16f4:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    16f6:	b7 ff       	sbrs	r27, 7
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <Timebase_DownCounter_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounter[window].PeriodValue = 0;
    16fa:	16 aa       	std	Z+54, r1	; 0x36
    16fc:	17 aa       	std	Z+55, r1	; 0x37
    16fe:	10 ae       	std	Z+56, r1	; 0x38
    1700:	11 ae       	std	Z+57, r1	; 0x39
    1702:	04 c0       	rjmp	.+8      	; 0x170c <Timebase_DownCounter_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1704:	86 ab       	std	Z+54, r24	; 0x36
    1706:	97 ab       	std	Z+55, r25	; 0x37
    1708:	a0 af       	std	Z+56, r26	; 0x38
    170a:	b1 af       	std	Z+57, r27	; 0x39
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return (uint8_t)Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    170c:	8d e0       	ldi	r24, 0x0D	; 13
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	28 9f       	mul	r18, r24
    1712:	f0 01       	movw	r30, r0
    1714:	29 9f       	mul	r18, r25
    1716:	f0 0d       	add	r31, r0
    1718:	38 9f       	mul	r19, r24
    171a:	f0 0d       	add	r31, r0
    171c:	11 24       	eor	r1, r1
    171e:	ec 0f       	add	r30, r28
    1720:	fd 1f       	adc	r31, r29
    1722:	85 a5       	ldd	r24, Z+45	; 0x2d
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	85 a7       	std	Z+45, r24	; 0x2d
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
    172e:	e0 91 4b 01 	lds	r30, 0x014B
    1732:	f0 91 4c 01 	lds	r31, 0x014C
    1736:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1738:	2d e0       	ldi	r18, 0x0D	; 13
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	ac 01       	movw	r20, r24
    173e:	42 9f       	mul	r20, r18
    1740:	c0 01       	movw	r24, r0
    1742:	43 9f       	mul	r20, r19
    1744:	90 0d       	add	r25, r0
    1746:	52 9f       	mul	r21, r18
    1748:	90 0d       	add	r25, r0
    174a:	11 24       	eor	r1, r1
    174c:	e8 0f       	add	r30, r24
    174e:	f9 1f       	adc	r31, r25
    1750:	22 a9       	ldd	r18, Z+50	; 0x32
    1752:	33 a9       	ldd	r19, Z+51	; 0x33
    1754:	44 a9       	ldd	r20, Z+52	; 0x34
    1756:	55 a9       	ldd	r21, Z+53	; 0x35
    1758:	86 a9       	ldd	r24, Z+54	; 0x36
    175a:	97 a9       	ldd	r25, Z+55	; 0x37
    175c:	a0 ad       	ldd	r26, Z+56	; 0x38
    175e:	b1 ad       	ldd	r27, Z+57	; 0x39
    1760:	28 1b       	sub	r18, r24
    1762:	39 0b       	sbc	r19, r25
    1764:	4a 0b       	sbc	r20, r26
    1766:	5b 0b       	sbc	r21, r27
    1768:	57 ff       	sbrs	r21, 7
    176a:	04 c0       	rjmp	.+8      	; 0x1774 <Timebase_DownCounter_Get_Remaining_Period_Value+0x46>
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1774:	b9 01       	movw	r22, r18
    1776:	ca 01       	movw	r24, r20
    1778:	08 95       	ret

0000177a <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
    177e:	c0 91 4b 01 	lds	r28, 0x014B
    1782:	d0 91 4c 01 	lds	r29, 0x014C
    1786:	68 2f       	mov	r22, r24
    1788:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    178a:	8d e0       	ldi	r24, 0x0D	; 13
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	68 9f       	mul	r22, r24
    1790:	f0 01       	movw	r30, r0
    1792:	69 9f       	mul	r22, r25
    1794:	f0 0d       	add	r31, r0
    1796:	78 9f       	mul	r23, r24
    1798:	f0 0d       	add	r31, r0
    179a:	11 24       	eor	r1, r1
    179c:	ec 0f       	add	r30, r28
    179e:	fd 1f       	adc	r31, r29
    17a0:	22 a9       	ldd	r18, Z+50	; 0x32
    17a2:	33 a9       	ldd	r19, Z+51	; 0x33
    17a4:	44 a9       	ldd	r20, Z+52	; 0x34
    17a6:	55 a9       	ldd	r21, Z+53	; 0x35
    17a8:	86 a9       	ldd	r24, Z+54	; 0x36
    17aa:	97 a9       	ldd	r25, Z+55	; 0x37
    17ac:	a0 ad       	ldd	r26, Z+56	; 0x38
    17ae:	b1 ad       	ldd	r27, Z+57	; 0x39
    17b0:	28 1b       	sub	r18, r24
    17b2:	39 0b       	sbc	r19, r25
    17b4:	4a 0b       	sbc	r20, r26
    17b6:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    17b8:	57 fd       	sbrc	r21, 7
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <Timebase_DownCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    17bc:	21 15       	cp	r18, r1
    17be:	31 05       	cpc	r19, r1
    17c0:	41 05       	cpc	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	11 f0       	breq	.+4      	; 0x17ca <Timebase_DownCounter_Period_Value_Expired+0x50>
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	12 c0       	rjmp	.+36     	; 0x17ee <Timebase_DownCounter_Period_Value_Expired+0x74>
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	8d e0       	ldi	r24, 0x0D	; 13
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	ac 01       	movw	r20, r24
    17d2:	64 9f       	mul	r22, r20
    17d4:	c0 01       	movw	r24, r0
    17d6:	65 9f       	mul	r22, r21
    17d8:	90 0d       	add	r25, r0
    17da:	74 9f       	mul	r23, r20
    17dc:	90 0d       	add	r25, r0
    17de:	11 24       	eor	r1, r1
    17e0:	c8 0f       	add	r28, r24
    17e2:	d9 1f       	adc	r29, r25
    17e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    17e6:	80 ff       	sbrs	r24, 0
    17e8:	21 e0       	ldi	r18, 0x01	; 1
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    17ee:	82 2f       	mov	r24, r18
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    17f6:	1f 93       	push	r17
    17f8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    17fa:	0e 94 bd 0b 	call	0x177a	; 0x177a <Timebase_DownCounter_Period_Value_Expired>
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	11 f0       	breq	.+4      	; 0x1806 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	16 c0       	rjmp	.+44     	; 0x1832 <Timebase_DownCounter_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1806:	e0 91 4b 01 	lds	r30, 0x014B
    180a:	f0 91 4c 01 	lds	r31, 0x014C
    180e:	21 2f       	mov	r18, r17
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	8d e0       	ldi	r24, 0x0D	; 13
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	ac 01       	movw	r20, r24
    1818:	24 9f       	mul	r18, r20
    181a:	c0 01       	movw	r24, r0
    181c:	25 9f       	mul	r18, r21
    181e:	90 0d       	add	r25, r0
    1820:	34 9f       	mul	r19, r20
    1822:	90 0d       	add	r25, r0
    1824:	11 24       	eor	r1, r1
    1826:	e8 0f       	add	r30, r24
    1828:	f9 1f       	adc	r31, r25
    182a:	85 a5       	ldd	r24, Z+45	; 0x2d
    182c:	8e 7f       	andi	r24, 0xFE	; 254
    182e:	85 a7       	std	Z+45, r24	; 0x2d
    1830:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    1832:	1f 91       	pop	r17
    1834:	08 95       	ret

00001836 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <Timebase_DownCounter_Update>
  }
}
    183c:	08 95       	ret

0000183e <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    183e:	e0 91 4b 01 	lds	r30, 0x014B
    1842:	f0 91 4c 01 	lds	r31, 0x014C
    1846:	16 a6       	std	Z+46, r1	; 0x2e
    1848:	17 a6       	std	Z+47, r1	; 0x2f
    184a:	10 aa       	std	Z+48, r1	; 0x30
    184c:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return (int32_t)Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    184e:	12 aa       	std	Z+50, r1	; 0x32
    1850:	13 aa       	std	Z+51, r1	; 0x33
    1852:	14 aa       	std	Z+52, r1	; 0x34
    1854:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1856:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1858:	80 7e       	andi	r24, 0xE0	; 224
    185a:	85 a7       	std	Z+45, r24	; 0x2d

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    185c:	08 95       	ret

0000185e <Timebase_Reset>:



void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    185e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1862:	0e 94 1f 0c 	call	0x183e	; 0x183e <Timebase_DownCounter_Reset_All>
  #endif
}
    1866:	08 95       	ret

00001868 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    186e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    1872:	c8 01       	movw	r24, r16
    1874:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Timebase_Timer_Config>
  Timebase_Reset();
    1878:	0e 94 2f 0c 	call	0x185e	; 0x185e <Timebase_Reset>
}
    187c:	1f 91       	pop	r17
    187e:	0f 91       	pop	r16
    1880:	08 95       	ret

00001882 <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
    1882:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <Timebase_UpCounter_Update_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1886:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Timebase_DownCounter_Update_All>
  #endif
}
    188a:	08 95       	ret

0000188c <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    188c:	e0 91 4b 01 	lds	r30, 0x014B
    1890:	f0 91 4c 01 	lds	r31, 0x014C
    1894:	80 85       	ldd	r24, Z+8	; 0x08
    1896:	91 85       	ldd	r25, Z+9	; 0x09
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	91 87       	std	Z+9, r25	; 0x09
    189c:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    189e:	83 81       	ldd	r24, Z+3	; 0x03
    18a0:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    18a2:	80 85       	ldd	r24, Z+8	; 0x08
    18a4:	91 85       	ldd	r25, Z+9	; 0x09
    18a6:	61 81       	ldd	r22, Z+1	; 0x01
    18a8:	72 81       	ldd	r23, Z+2	; 0x02
    18aa:	0e 94 af 0c 	call	0x195e	; 0x195e <__udivmodhi4>
    18ae:	89 2b       	or	r24, r25
    18b0:	81 f4       	brne	.+32     	; 0x18d2 <Timebase_ISR_Executables+0x46>
    Timebase->Time.Seconds++;
    18b2:	82 85       	ldd	r24, Z+10	; 0x0a
    18b4:	93 85       	ldd	r25, Z+11	; 0x0b
    18b6:	a4 85       	ldd	r26, Z+12	; 0x0c
    18b8:	b5 85       	ldd	r27, Z+13	; 0x0d
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	a1 1d       	adc	r26, r1
    18be:	b1 1d       	adc	r27, r1
    18c0:	82 87       	std	Z+10, r24	; 0x0a
    18c2:	93 87       	std	Z+11, r25	; 0x0b
    18c4:	a4 87       	std	Z+12, r26	; 0x0c
    18c6:	b5 87       	std	Z+13, r27	; 0x0d


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    18c8:	87 89       	ldd	r24, Z+23	; 0x17
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
    18ca:	88 23       	and	r24, r24
    18cc:	11 f4       	brne	.+4      	; 0x18d2 <Timebase_ISR_Executables+0x46>
      Timebase->Time.SubSeconds = 0;
    18ce:	11 86       	std	Z+9, r1	; 0x09
    18d0:	10 86       	std	Z+8, r1	; 0x08
    18d2:	08 95       	ret

000018d4 <__vector_16>:
    }
	#endif
  }
}

ISR(TIMER0_OVF_vect){
    18d4:	1f 92       	push	r1
    18d6:	0f 92       	push	r0
    18d8:	0f b6       	in	r0, 0x3f	; 63
    18da:	0f 92       	push	r0
    18dc:	11 24       	eor	r1, r1
    18de:	2f 93       	push	r18
    18e0:	3f 93       	push	r19
    18e2:	4f 93       	push	r20
    18e4:	5f 93       	push	r21
    18e6:	6f 93       	push	r22
    18e8:	7f 93       	push	r23
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	af 93       	push	r26
    18f0:	bf 93       	push	r27
    18f2:	ef 93       	push	r30
    18f4:	ff 93       	push	r31
  PORTD|=(1<<5);
    18f6:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    18f8:	0e 94 46 0c 	call	0x188c	; 0x188c <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    18fc:	5d 98       	cbi	0x0b, 5	; 11
}
    18fe:	ff 91       	pop	r31
    1900:	ef 91       	pop	r30
    1902:	bf 91       	pop	r27
    1904:	af 91       	pop	r26
    1906:	9f 91       	pop	r25
    1908:	8f 91       	pop	r24
    190a:	7f 91       	pop	r23
    190c:	6f 91       	pop	r22
    190e:	5f 91       	pop	r21
    1910:	4f 91       	pop	r20
    1912:	3f 91       	pop	r19
    1914:	2f 91       	pop	r18
    1916:	0f 90       	pop	r0
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	0f 90       	pop	r0
    191c:	1f 90       	pop	r1
    191e:	18 95       	reti

00001920 <__mulsi3>:
    1920:	62 9f       	mul	r22, r18
    1922:	d0 01       	movw	r26, r0
    1924:	73 9f       	mul	r23, r19
    1926:	f0 01       	movw	r30, r0
    1928:	82 9f       	mul	r24, r18
    192a:	e0 0d       	add	r30, r0
    192c:	f1 1d       	adc	r31, r1
    192e:	64 9f       	mul	r22, r20
    1930:	e0 0d       	add	r30, r0
    1932:	f1 1d       	adc	r31, r1
    1934:	92 9f       	mul	r25, r18
    1936:	f0 0d       	add	r31, r0
    1938:	83 9f       	mul	r24, r19
    193a:	f0 0d       	add	r31, r0
    193c:	74 9f       	mul	r23, r20
    193e:	f0 0d       	add	r31, r0
    1940:	65 9f       	mul	r22, r21
    1942:	f0 0d       	add	r31, r0
    1944:	99 27       	eor	r25, r25
    1946:	72 9f       	mul	r23, r18
    1948:	b0 0d       	add	r27, r0
    194a:	e1 1d       	adc	r30, r1
    194c:	f9 1f       	adc	r31, r25
    194e:	63 9f       	mul	r22, r19
    1950:	b0 0d       	add	r27, r0
    1952:	e1 1d       	adc	r30, r1
    1954:	f9 1f       	adc	r31, r25
    1956:	bd 01       	movw	r22, r26
    1958:	cf 01       	movw	r24, r30
    195a:	11 24       	eor	r1, r1
    195c:	08 95       	ret

0000195e <__udivmodhi4>:
    195e:	aa 1b       	sub	r26, r26
    1960:	bb 1b       	sub	r27, r27
    1962:	51 e1       	ldi	r21, 0x11	; 17
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <__udivmodhi4_ep>

00001966 <__udivmodhi4_loop>:
    1966:	aa 1f       	adc	r26, r26
    1968:	bb 1f       	adc	r27, r27
    196a:	a6 17       	cp	r26, r22
    196c:	b7 07       	cpc	r27, r23
    196e:	10 f0       	brcs	.+4      	; 0x1974 <__udivmodhi4_ep>
    1970:	a6 1b       	sub	r26, r22
    1972:	b7 0b       	sbc	r27, r23

00001974 <__udivmodhi4_ep>:
    1974:	88 1f       	adc	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	5a 95       	dec	r21
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__udivmodhi4_loop>
    197c:	80 95       	com	r24
    197e:	90 95       	com	r25
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	08 95       	ret

00001986 <__udivmodsi4>:
    1986:	a1 e2       	ldi	r26, 0x21	; 33
    1988:	1a 2e       	mov	r1, r26
    198a:	aa 1b       	sub	r26, r26
    198c:	bb 1b       	sub	r27, r27
    198e:	fd 01       	movw	r30, r26
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <__udivmodsi4_ep>

00001992 <__udivmodsi4_loop>:
    1992:	aa 1f       	adc	r26, r26
    1994:	bb 1f       	adc	r27, r27
    1996:	ee 1f       	adc	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	a2 17       	cp	r26, r18
    199c:	b3 07       	cpc	r27, r19
    199e:	e4 07       	cpc	r30, r20
    19a0:	f5 07       	cpc	r31, r21
    19a2:	20 f0       	brcs	.+8      	; 0x19ac <__udivmodsi4_ep>
    19a4:	a2 1b       	sub	r26, r18
    19a6:	b3 0b       	sbc	r27, r19
    19a8:	e4 0b       	sbc	r30, r20
    19aa:	f5 0b       	sbc	r31, r21

000019ac <__udivmodsi4_ep>:
    19ac:	66 1f       	adc	r22, r22
    19ae:	77 1f       	adc	r23, r23
    19b0:	88 1f       	adc	r24, r24
    19b2:	99 1f       	adc	r25, r25
    19b4:	1a 94       	dec	r1
    19b6:	69 f7       	brne	.-38     	; 0x1992 <__udivmodsi4_loop>
    19b8:	60 95       	com	r22
    19ba:	70 95       	com	r23
    19bc:	80 95       	com	r24
    19be:	90 95       	com	r25
    19c0:	9b 01       	movw	r18, r22
    19c2:	ac 01       	movw	r20, r24
    19c4:	bd 01       	movw	r22, r26
    19c6:	cf 01       	movw	r24, r30
    19c8:	08 95       	ret

000019ca <__divmodsi4>:
    19ca:	97 fb       	bst	r25, 7
    19cc:	09 2e       	mov	r0, r25
    19ce:	05 26       	eor	r0, r21
    19d0:	0e d0       	rcall	.+28     	; 0x19ee <__divmodsi4_neg1>
    19d2:	57 fd       	sbrc	r21, 7
    19d4:	04 d0       	rcall	.+8      	; 0x19de <__divmodsi4_neg2>
    19d6:	d7 df       	rcall	.-82     	; 0x1986 <__udivmodsi4>
    19d8:	0a d0       	rcall	.+20     	; 0x19ee <__divmodsi4_neg1>
    19da:	00 1c       	adc	r0, r0
    19dc:	38 f4       	brcc	.+14     	; 0x19ec <__divmodsi4_exit>

000019de <__divmodsi4_neg2>:
    19de:	50 95       	com	r21
    19e0:	40 95       	com	r20
    19e2:	30 95       	com	r19
    19e4:	21 95       	neg	r18
    19e6:	3f 4f       	sbci	r19, 0xFF	; 255
    19e8:	4f 4f       	sbci	r20, 0xFF	; 255
    19ea:	5f 4f       	sbci	r21, 0xFF	; 255

000019ec <__divmodsi4_exit>:
    19ec:	08 95       	ret

000019ee <__divmodsi4_neg1>:
    19ee:	f6 f7       	brtc	.-4      	; 0x19ec <__divmodsi4_exit>
    19f0:	90 95       	com	r25
    19f2:	80 95       	com	r24
    19f4:	70 95       	com	r23
    19f6:	61 95       	neg	r22
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	8f 4f       	sbci	r24, 0xFF	; 255
    19fc:	9f 4f       	sbci	r25, 0xFF	; 255
    19fe:	08 95       	ret

00001a00 <_exit>:
    1a00:	f8 94       	cli

00001a02 <__stop_program>:
    1a02:	ff cf       	rjmp	.-2      	; 0x1a02 <__stop_program>
