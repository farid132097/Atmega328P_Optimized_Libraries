
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00004156  000041ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800124  00800124  0000420e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000420e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000207d  00000000  00000000  0000426e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000617e  00000000  00000000  000062eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056f  00000000  00000000  0000c469  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002ca0  00000000  00000000  0000c9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000dc0  00000000  00000000  0000f678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002155  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002358  00000000  00000000  0001258d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000148e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 5d 1e 	jmp	0x3cba	; 0x3cba <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 11 1e 	jmp	0x3c22	; 0x3c22 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e5       	ldi	r30, 0x56	; 86
      7c:	f1 e4       	ldi	r31, 0x41	; 65
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 3b       	cpi	r26, 0xBB	; 187
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 a9 20 	jmp	0x4152	; 0x4152 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 34 20 	call	0x4068	; 0x4068 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<0);
      ba:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
      bc:	58 98       	cbi	0x0b, 0	; 11
      be:	88 e8       	ldi	r24, 0x88	; 136
      c0:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	2c e2       	ldi	r18, 0x2C	; 44
      c4:	31 e0       	ldi	r19, 0x01	; 1
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
  _delay_ms(500);
  
  
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	40 e2       	ldi	r20, 0x20	; 32
      d4:	5e e4       	ldi	r21, 0x4E	; 78
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	42 e1       	ldi	r20, 0x12	; 18
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	51 e7       	ldi	r21, 0x71	; 113
      f2:	62 e0       	ldi	r22, 0x02	; 2
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	4e e0       	ldi	r20, 0x0E	; 14
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Timebase_DownCounter_Set_Securely>
  Timebase_LPDownCounter_Set_Securely(0, 5);
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	45 e0       	ldi	r20, 0x05	; 5
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	0e 94 b0 1a 	call	0x3560	; 0x3560 <Timebase_LPDownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(10);
     116:	8a e0       	ldi	r24, 0x0A	; 10
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 ca 03 	call	0x794	; 0x794 <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Byte_Hex(Timebase_Get_Update_Req_Sts());
     11e:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <Timebase_Get_Update_Req_Sts>
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	bc 01       	movw	r22, r24
     12a:	cd 01       	movw	r24, r26
     12c:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <UART_Transmit_Byte_Hex>
	UART_Transmit_Text(",");
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_LPTimer_Get_Seconds());
     138:	0e 94 45 04 	call	0x88a	; 0x88a <Timebase_LPTimer_Get_Seconds>
     13c:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_LPDownCounter_Get_Value(0));
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 28 19 	call	0x3250	; 0x3250 <Timebase_LPDownCounter_Get_Value>
     14e:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
     15a:	0e 94 1a 03 	call	0x634	; 0x634 <Timebase_Timer_Get_Seconds>
     15e:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
     16a:	0e 94 12 03 	call	0x624	; 0x624 <Timebase_Timer_Get_SubSeconds>
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <Timebase_UpCounter_SS_Get_Value>
     188:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 bc 0a 	call	0x1578	; 0x1578 <Timebase_UpCounter_Get_Value>
     19a:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <Timebase_DownCounter_SS_Get_Value>
     1ac:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <Timebase_DownCounter_Get_Value>
     1be:	0e 94 1a 20 	call	0x4034	; 0x4034 <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
    
	if(Timebase_LPDownCounter_Expired_Event(0)){
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 0d 1c 	call	0x381a	; 0x381a <Timebase_LPDownCounter_Expired_Event>
     1d0:	88 23       	and	r24, r24
     1d2:	59 f0       	breq	.+22     	; 0x1ea <main+0x144>
	  Timebase_LPDownCounter_Set_Securely(0, 5);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	45 e0       	ldi	r20, 0x05	; 5
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	0e 94 b0 1a 	call	0x3560	; 0x3560 <Timebase_LPDownCounter_Set_Securely>
	  UART_Transmit_Text("LPTIM Expired\r\n");
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
	}
	
	
	
	PORTD |= (1<<0);
     1ea:	58 9a       	sbi	0x0b, 0	; 11
	Timebase_Main_Loop_Executables();
     1ec:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<0);
     1f0:	58 98       	cbi	0x0b, 0	; 11
     1f2:	91 cf       	rjmp	.-222    	; 0x116 <main+0x70>

000001f4 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     1f4:	80 e3       	ldi	r24, 0x30	; 48
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	90 93 2f 01 	sts	0x012F, r25
     1fc:	80 93 2e 01 	sts	0x012E, r24
  Timebase->Config.UpdateRate = 1;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 31 01 	sts	0x0131, r25
     208:	80 93 30 01 	sts	0x0130, r24
  Timebase->Time.OVFUpdateValue=0;
     20c:	10 92 35 01 	sts	0x0135, r1
     210:	10 92 34 01 	sts	0x0134, r1
  Timebase->Time.SubSecondsShadow = 0;
     214:	10 92 41 01 	sts	0x0141, r1
     218:	10 92 40 01 	sts	0x0140, r1
  Timebase->Time.SecondsShadow = 0;
     21c:	10 92 42 01 	sts	0x0142, r1
     220:	10 92 43 01 	sts	0x0143, r1
     224:	10 92 44 01 	sts	0x0144, r1
     228:	10 92 45 01 	sts	0x0145, r1
  Timebase->Time.SubSeconds = 0;
     22c:	10 92 3b 01 	sts	0x013B, r1
     230:	10 92 3a 01 	sts	0x013A, r1
  Timebase->Time.Seconds = 0;
     234:	10 92 3c 01 	sts	0x013C, r1
     238:	10 92 3d 01 	sts	0x013D, r1
     23c:	10 92 3e 01 	sts	0x013E, r1
     240:	10 92 3f 01 	sts	0x013F, r1
  Timebase->Time.VariablesSync = 0;
     244:	10 92 46 01 	sts	0x0146, r1
  Timebase->Time.LastSample = 0;
     248:	10 92 36 01 	sts	0x0136, r1
     24c:	10 92 37 01 	sts	0x0137, r1
     250:	10 92 38 01 	sts	0x0138, r1
     254:	10 92 39 01 	sts	0x0139, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds = 0;
     258:	10 92 48 01 	sts	0x0148, r1
     25c:	10 92 47 01 	sts	0x0147, r1
  Timebase->Time.LPTimerSeconds = 0;
     260:	10 92 49 01 	sts	0x0149, r1
     264:	10 92 4a 01 	sts	0x014A, r1
     268:	10 92 4b 01 	sts	0x014B, r1
     26c:	10 92 4c 01 	sts	0x014C, r1
  Timebase->Config.LPUpdateRate = 1;
     270:	90 93 33 01 	sts	0x0133, r25
     274:	80 93 32 01 	sts	0x0132, r24
  #endif
  
  Timebase->UpdateRequest = 0;
     278:	10 92 4d 01 	sts	0x014D, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     27c:	10 92 6b 01 	sts	0x016B, r1
    Timebase->UpCounter[i].EndValue = 0;
     280:	10 92 6c 01 	sts	0x016C, r1
     284:	10 92 6d 01 	sts	0x016D, r1
     288:	10 92 6e 01 	sts	0x016E, r1
     28c:	10 92 6f 01 	sts	0x016F, r1
    Timebase->UpCounter[i].Target = 0;
     290:	10 92 70 01 	sts	0x0170, r1
     294:	10 92 71 01 	sts	0x0171, r1
     298:	10 92 72 01 	sts	0x0172, r1
     29c:	10 92 73 01 	sts	0x0173, r1
    Timebase->UpCounter[i].Temporary = 0;    
     2a0:	10 92 74 01 	sts	0x0174, r1
     2a4:	10 92 75 01 	sts	0x0175, r1
     2a8:	10 92 76 01 	sts	0x0176, r1
     2ac:	10 92 77 01 	sts	0x0177, r1
    Timebase->UpCounter[i].Value = 0;
     2b0:	10 92 78 01 	sts	0x0178, r1
     2b4:	10 92 79 01 	sts	0x0179, r1
     2b8:	10 92 7a 01 	sts	0x017A, r1
     2bc:	10 92 7b 01 	sts	0x017B, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     2c0:	10 92 7c 01 	sts	0x017C, r1
     2c4:	10 92 7d 01 	sts	0x017D, r1
     2c8:	10 92 7e 01 	sts	0x017E, r1
     2cc:	10 92 7f 01 	sts	0x017F, r1
	Timebase->UpCounter[i].ReloadValue = 0;
     2d0:	10 92 80 01 	sts	0x0180, r1
     2d4:	10 92 81 01 	sts	0x0181, r1
     2d8:	10 92 82 01 	sts	0x0182, r1
     2dc:	10 92 83 01 	sts	0x0183, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     2e0:	10 92 4e 01 	sts	0x014E, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     2e4:	10 92 4f 01 	sts	0x014F, r1
     2e8:	10 92 50 01 	sts	0x0150, r1
     2ec:	10 92 51 01 	sts	0x0151, r1
     2f0:	10 92 52 01 	sts	0x0152, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     2f4:	10 92 53 01 	sts	0x0153, r1
     2f8:	10 92 54 01 	sts	0x0154, r1
     2fc:	10 92 55 01 	sts	0x0155, r1
     300:	10 92 56 01 	sts	0x0156, r1
    Timebase->UpCounterSS[i].Target = 0;
     304:	10 92 57 01 	sts	0x0157, r1
     308:	10 92 58 01 	sts	0x0158, r1
     30c:	10 92 59 01 	sts	0x0159, r1
     310:	10 92 5a 01 	sts	0x015A, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     314:	10 92 5b 01 	sts	0x015B, r1
     318:	10 92 5c 01 	sts	0x015C, r1
     31c:	10 92 5d 01 	sts	0x015D, r1
     320:	10 92 5e 01 	sts	0x015E, r1
    Timebase->UpCounterSS[i].Value = 0;
     324:	10 92 5f 01 	sts	0x015F, r1
     328:	10 92 60 01 	sts	0x0160, r1
     32c:	10 92 61 01 	sts	0x0161, r1
     330:	10 92 62 01 	sts	0x0162, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     334:	10 92 63 01 	sts	0x0163, r1
     338:	10 92 64 01 	sts	0x0164, r1
     33c:	10 92 65 01 	sts	0x0165, r1
     340:	10 92 66 01 	sts	0x0166, r1
	Timebase->UpCounterSS[i].ReloadValue = 0;
     344:	10 92 67 01 	sts	0x0167, r1
     348:	10 92 68 01 	sts	0x0168, r1
     34c:	10 92 69 01 	sts	0x0169, r1
     350:	10 92 6a 01 	sts	0x016A, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     354:	10 92 99 01 	sts	0x0199, r1
    Timebase->DownCounter[i].EndValue = 0;
     358:	10 92 9a 01 	sts	0x019A, r1
     35c:	10 92 9b 01 	sts	0x019B, r1
     360:	10 92 9c 01 	sts	0x019C, r1
     364:	10 92 9d 01 	sts	0x019D, r1
    Timebase->DownCounter[i].Value = 0;
     368:	10 92 9e 01 	sts	0x019E, r1
     36c:	10 92 9f 01 	sts	0x019F, r1
     370:	10 92 a0 01 	sts	0x01A0, r1
     374:	10 92 a1 01 	sts	0x01A1, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     378:	10 92 a2 01 	sts	0x01A2, r1
     37c:	10 92 a3 01 	sts	0x01A3, r1
     380:	10 92 a4 01 	sts	0x01A4, r1
     384:	10 92 a5 01 	sts	0x01A5, r1
	Timebase->DownCounter[i].ReloadValue = 0;
     388:	10 92 a6 01 	sts	0x01A6, r1
     38c:	10 92 a7 01 	sts	0x01A7, r1
     390:	10 92 a8 01 	sts	0x01A8, r1
     394:	10 92 a9 01 	sts	0x01A9, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     398:	10 92 84 01 	sts	0x0184, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     39c:	10 92 85 01 	sts	0x0185, r1
     3a0:	10 92 86 01 	sts	0x0186, r1
     3a4:	10 92 87 01 	sts	0x0187, r1
     3a8:	10 92 88 01 	sts	0x0188, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     3ac:	10 92 89 01 	sts	0x0189, r1
     3b0:	10 92 8a 01 	sts	0x018A, r1
     3b4:	10 92 8b 01 	sts	0x018B, r1
     3b8:	10 92 8c 01 	sts	0x018C, r1
    Timebase->DownCounterSS[i].Value = 0;
     3bc:	10 92 8d 01 	sts	0x018D, r1
     3c0:	10 92 8e 01 	sts	0x018E, r1
     3c4:	10 92 8f 01 	sts	0x018F, r1
     3c8:	10 92 90 01 	sts	0x0190, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     3cc:	10 92 91 01 	sts	0x0191, r1
     3d0:	10 92 92 01 	sts	0x0192, r1
     3d4:	10 92 93 01 	sts	0x0193, r1
     3d8:	10 92 94 01 	sts	0x0194, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     3dc:	10 92 95 01 	sts	0x0195, r1
     3e0:	10 92 96 01 	sts	0x0196, r1
     3e4:	10 92 97 01 	sts	0x0197, r1
     3e8:	10 92 98 01 	sts	0x0198, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     3ec:	10 92 aa 01 	sts	0x01AA, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     3f0:	10 92 ab 01 	sts	0x01AB, r1
     3f4:	10 92 ac 01 	sts	0x01AC, r1
     3f8:	10 92 ad 01 	sts	0x01AD, r1
     3fc:	10 92 ae 01 	sts	0x01AE, r1
    Timebase->LPDownCounter[i].Value = 0;
     400:	10 92 af 01 	sts	0x01AF, r1
     404:	10 92 b0 01 	sts	0x01B0, r1
     408:	10 92 b1 01 	sts	0x01B1, r1
     40c:	10 92 b2 01 	sts	0x01B2, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     410:	10 92 b3 01 	sts	0x01B3, r1
     414:	10 92 b4 01 	sts	0x01B4, r1
     418:	10 92 b5 01 	sts	0x01B5, r1
     41c:	10 92 b6 01 	sts	0x01B6, r1
	Timebase->LPDownCounter[i].ReloadValue = 0;
     420:	10 92 b7 01 	sts	0x01B7, r1
     424:	10 92 b8 01 	sts	0x01B8, r1
     428:	10 92 b9 01 	sts	0x01B9, r1
     42c:	10 92 ba 01 	sts	0x01BA, r1
  }
  #endif
  
}
     430:	08 95       	ret

00000432 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     432:	8f 92       	push	r8
     434:	9f 92       	push	r9
     436:	bf 92       	push	r11
     438:	cf 92       	push	r12
     43a:	df 92       	push	r13
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
     44c:	2a 97       	sbiw	r28, 0x0a	; 10
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     45a:	de 01       	movw	r26, r28
     45c:	11 96       	adiw	r26, 0x01	; 1
     45e:	e5 e1       	ldi	r30, 0x15	; 21
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	8a e0       	ldi	r24, 0x0A	; 10
     464:	01 90       	ld	r0, Z+
     466:	0d 92       	st	X+, r0
     468:	81 50       	subi	r24, 0x01	; 1
     46a:	e1 f7       	brne	.-8      	; 0x464 <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     46c:	94 01       	movw	r18, r8
     46e:	40 e0       	ldi	r20, 0x00	; 0
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	7b e1       	ldi	r23, 0x1B	; 27
     476:	87 eb       	ldi	r24, 0xB7	; 183
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
     47e:	b2 2e       	mov	r11, r18
     480:	c3 2e       	mov	r12, r19
     482:	d4 2e       	mov	r13, r20
     484:	05 2f       	mov	r16, r21
     486:	7e 01       	movw	r14, r28
     488:	08 94       	sec
     48a:	e1 1c       	adc	r14, r1
     48c:	f1 1c       	adc	r15, r1
     48e:	c9 01       	movw	r24, r18
     490:	da 01       	movw	r26, r20
     492:	9c 01       	movw	r18, r24
     494:	ad 01       	movw	r20, r26
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	13 c0       	rjmp	.+38     	; 0x4c0 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     49a:	f7 01       	movw	r30, r14
     49c:	21 91       	ld	r18, Z+
     49e:	31 91       	ld	r19, Z+
     4a0:	7f 01       	movw	r14, r30
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	6b 2d       	mov	r22, r11
     4a8:	7c 2d       	mov	r23, r12
     4aa:	8d 2d       	mov	r24, r13
     4ac:	90 2f       	mov	r25, r16
     4ae:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
     4b2:	c9 01       	movw	r24, r18
     4b4:	da 01       	movw	r26, r20
     4b6:	9c 01       	movw	r18, r24
     4b8:	ad 01       	movw	r20, r26
	clock_div_index++;
     4ba:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     4bc:	15 30       	cpi	r17, 0x05	; 5
     4be:	31 f0       	breq	.+12     	; 0x4cc <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     4c0:	2f 3f       	cpi	r18, 0xFF	; 255
     4c2:	31 05       	cpc	r19, r1
     4c4:	41 05       	cpc	r20, r1
     4c6:	51 05       	cpc	r21, r1
     4c8:	09 f0       	breq	.+2      	; 0x4cc <Timebase_Timer_Enable+0x9a>
     4ca:	3c f7       	brge	.-50     	; 0x49a <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     4cc:	81 2f       	mov	r24, r17
     4ce:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     4d0:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     4d2:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     4d4:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     4d8:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     4da:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     4dc:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     4de:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     4e0:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     4e2:	88 23       	and	r24, r24
     4e4:	11 f4       	brne	.+4      	; 0x4ea <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	0f c0       	rjmp	.+30     	; 0x508 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	11 f4       	brne	.+4      	; 0x4f2 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0b c0       	rjmp	.+22     	; 0x508 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     4f2:	82 30       	cpi	r24, 0x02	; 2
     4f4:	11 f4       	brne	.+4      	; 0x4fa <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     4f6:	83 e0       	ldi	r24, 0x03	; 3
     4f8:	07 c0       	rjmp	.+14     	; 0x508 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     4fa:	83 30       	cpi	r24, 0x03	; 3
     4fc:	11 f4       	brne	.+4      	; 0x502 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     4fe:	84 e0       	ldi	r24, 0x04	; 4
     500:	03 c0       	rjmp	.+6      	; 0x508 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     502:	84 30       	cpi	r24, 0x04	; 4
     504:	11 f4       	brne	.+4      	; 0x50a <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     506:	85 e0       	ldi	r24, 0x05	; 5
     508:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     50a:	e0 91 2e 01 	lds	r30, 0x012E
     50e:	f0 91 2f 01 	lds	r31, 0x012F
     512:	8f ef       	ldi	r24, 0xFF	; 255
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	82 1b       	sub	r24, r18
     518:	93 0b       	sbc	r25, r19
     51a:	95 83       	std	Z+5, r25	; 0x05
     51c:	84 83       	std	Z+4, r24	; 0x04
  TCNT0  = Timebase->Time.OVFUpdateValue;
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	95 81       	ldd	r25, Z+5	; 0x05
     522:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 6e 00 	sts	0x006E, r24
  sei();
     52a:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     52c:	91 82       	std	Z+1, r9	; 0x01
     52e:	80 82       	st	Z, r8
}
     530:	2a 96       	adiw	r28, 0x0a	; 10
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	cf 91       	pop	r28
     53e:	df 91       	pop	r29
     540:	1f 91       	pop	r17
     542:	0f 91       	pop	r16
     544:	ff 90       	pop	r15
     546:	ef 90       	pop	r14
     548:	df 90       	pop	r13
     54a:	cf 90       	pop	r12
     54c:	bf 90       	pop	r11
     54e:	9f 90       	pop	r9
     550:	8f 90       	pop	r8
     552:	08 95       	ret

00000554 <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     554:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     556:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     558:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     55c:	87 e0       	ldi	r24, 0x07	; 7
     55e:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     560:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     562:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     564:	16 bc       	out	0x26, r1	; 38
}
     566:	08 95       	ret

00000568 <Timebase_LPTimer_Enable>:



#ifdef TIMEBASE_LP_TIMER_ENABLE

void Timebase_LPTimer_Enable(uint16_t UpdateRateHz){
     568:	9c 01       	movw	r18, r24
    uint8_t  Prescaler_val;
	
    if(UpdateRateHz == 1){
     56a:	81 30       	cpi	r24, 0x01	; 1
     56c:	91 05       	cpc	r25, r1
     56e:	11 f4       	brne	.+4      	; 0x574 <Timebase_LPTimer_Enable+0xc>
     570:	96 e0       	ldi	r25, 0x06	; 6
     572:	19 c0       	rjmp	.+50     	; 0x5a6 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     574:	82 30       	cpi	r24, 0x02	; 2
     576:	91 05       	cpc	r25, r1
     578:	11 f4       	brne	.+4      	; 0x57e <Timebase_LPTimer_Enable+0x16>
     57a:	95 e0       	ldi	r25, 0x05	; 5
     57c:	14 c0       	rjmp	.+40     	; 0x5a6 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     57e:	84 30       	cpi	r24, 0x04	; 4
     580:	91 05       	cpc	r25, r1
     582:	11 f4       	brne	.+4      	; 0x588 <Timebase_LPTimer_Enable+0x20>
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	0f c0       	rjmp	.+30     	; 0x5a6 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     588:	88 30       	cpi	r24, 0x08	; 8
     58a:	91 05       	cpc	r25, r1
     58c:	11 f4       	brne	.+4      	; 0x592 <Timebase_LPTimer_Enable+0x2a>
     58e:	93 e0       	ldi	r25, 0x03	; 3
     590:	0a c0       	rjmp	.+20     	; 0x5a6 <Timebase_LPTimer_Enable+0x3e>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     592:	80 31       	cpi	r24, 0x10	; 16
     594:	91 05       	cpc	r25, r1
     596:	11 f4       	brne	.+4      	; 0x59c <Timebase_LPTimer_Enable+0x34>
     598:	92 e0       	ldi	r25, 0x02	; 2
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <Timebase_LPTimer_Enable+0x3e>
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	20 32       	cpi	r18, 0x20	; 32
     5a0:	31 05       	cpc	r19, r1
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <Timebase_LPTimer_Enable+0x3e>
     5a4:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     5a6:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     5a8:	84 b7       	in	r24, 0x34	; 52
     5aa:	87 7f       	andi	r24, 0xF7	; 247
     5ac:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     5ae:	80 91 60 00 	lds	r24, 0x0060
     5b2:	80 68       	ori	r24, 0x80	; 128
     5b4:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     5b8:	80 91 60 00 	lds	r24, 0x0060
     5bc:	88 61       	ori	r24, 0x18	; 24
     5be:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     5c2:	90 64       	ori	r25, 0x40	; 64
     5c4:	90 93 60 00 	sts	0x0060, r25
    sei();
     5c8:	78 94       	sei
	Timebase->Config.LPUpdateRate = UpdateRateHz;
     5ca:	e0 91 2e 01 	lds	r30, 0x012E
     5ce:	f0 91 2f 01 	lds	r31, 0x012F
     5d2:	33 83       	std	Z+3, r19	; 0x03
     5d4:	22 83       	std	Z+2, r18	; 0x02
}
     5d6:	08 95       	ret

000005d8 <Timebase_LPTimer_Disable>:


void Timebase_LPTimer_Disable(void){
    cli();
     5d8:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     5da:	84 b7       	in	r24, 0x34	; 52
     5dc:	87 7f       	andi	r24, 0xF7	; 247
     5de:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     5e0:	e0 e6       	ldi	r30, 0x60	; 96
     5e2:	f0 e0       	ldi	r31, 0x00	; 0
     5e4:	80 81       	ld	r24, Z
     5e6:	80 68       	ori	r24, 0x80	; 128
     5e8:	80 83       	st	Z, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     5ea:	80 81       	ld	r24, Z
     5ec:	88 61       	ori	r24, 0x18	; 24
     5ee:	80 83       	st	Z, r24
    WDTCSR  = 0x00;
     5f0:	10 82       	st	Z, r1
    sei();
     5f2:	78 94       	sei
}
     5f4:	08 95       	ret

000005f6 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5f6:	f8 94       	cli
}
     5f8:	08 95       	ret

000005fa <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     5fa:	78 94       	sei
}
     5fc:	08 95       	ret

000005fe <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5fe:	e0 91 2e 01 	lds	r30, 0x012E
     602:	f0 91 2f 01 	lds	r31, 0x012F
     606:	20 89       	ldd	r18, Z+16	; 0x10
     608:	31 89       	ldd	r19, Z+17	; 0x11
}
     60a:	c9 01       	movw	r24, r18
     60c:	08 95       	ret

0000060e <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     60e:	e0 91 2e 01 	lds	r30, 0x012E
     612:	f0 91 2f 01 	lds	r31, 0x012F
     616:	22 89       	ldd	r18, Z+18	; 0x12
     618:	33 89       	ldd	r19, Z+19	; 0x13
     61a:	44 89       	ldd	r20, Z+20	; 0x14
     61c:	55 89       	ldd	r21, Z+21	; 0x15
}
     61e:	b9 01       	movw	r22, r18
     620:	ca 01       	movw	r24, r20
     622:	08 95       	ret

00000624 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     624:	e0 91 2e 01 	lds	r30, 0x012E
     628:	f0 91 2f 01 	lds	r31, 0x012F
     62c:	22 85       	ldd	r18, Z+10	; 0x0a
     62e:	33 85       	ldd	r19, Z+11	; 0x0b
}
     630:	c9 01       	movw	r24, r18
     632:	08 95       	ret

00000634 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     634:	e0 91 2e 01 	lds	r30, 0x012E
     638:	f0 91 2f 01 	lds	r31, 0x012F
     63c:	24 85       	ldd	r18, Z+12	; 0x0c
     63e:	35 85       	ldd	r19, Z+13	; 0x0d
     640:	46 85       	ldd	r20, Z+14	; 0x0e
     642:	57 85       	ldd	r21, Z+15	; 0x0f
}
     644:	b9 01       	movw	r22, r18
     646:	ca 01       	movw	r24, r20
     648:	08 95       	ret

0000064a <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     64a:	e0 91 2e 01 	lds	r30, 0x012E
     64e:	f0 91 2f 01 	lds	r31, 0x012F
     652:	93 87       	std	Z+11, r25	; 0x0b
     654:	82 87       	std	Z+10, r24	; 0x0a
}
     656:	08 95       	ret

00000658 <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     658:	e0 91 2e 01 	lds	r30, 0x012E
     65c:	f0 91 2f 01 	lds	r31, 0x012F
     660:	64 87       	std	Z+12, r22	; 0x0c
     662:	75 87       	std	Z+13, r23	; 0x0d
     664:	86 87       	std	Z+14, r24	; 0x0e
     666:	97 87       	std	Z+15, r25	; 0x0f
}
     668:	08 95       	ret

0000066a <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     66a:	e0 91 2e 01 	lds	r30, 0x012E
     66e:	f0 91 2f 01 	lds	r31, 0x012F
     672:	20 89       	ldd	r18, Z+16	; 0x10
     674:	31 89       	ldd	r19, Z+17	; 0x11
    tmp1 = Timebase->Time.SubSecondsShadow;
     676:	80 89       	ldd	r24, Z+16	; 0x10
     678:	91 89       	ldd	r25, Z+17	; 0x11
	if(tmp0 == tmp1){
     67a:	28 17       	cp	r18, r24
     67c:	39 07       	cpc	r19, r25
     67e:	c9 f7       	brne	.-14     	; 0x672 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     680:	c9 01       	movw	r24, r18
     682:	08 95       	ret

00000684 <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     684:	e0 91 2e 01 	lds	r30, 0x012E
     688:	f0 91 2f 01 	lds	r31, 0x012F
     68c:	22 89       	ldd	r18, Z+18	; 0x12
     68e:	33 89       	ldd	r19, Z+19	; 0x13
     690:	44 89       	ldd	r20, Z+20	; 0x14
     692:	55 89       	ldd	r21, Z+21	; 0x15
    tmp1 = Timebase->Time.SecondsShadow;
     694:	82 89       	ldd	r24, Z+18	; 0x12
     696:	93 89       	ldd	r25, Z+19	; 0x13
     698:	a4 89       	ldd	r26, Z+20	; 0x14
     69a:	b5 89       	ldd	r27, Z+21	; 0x15
	if(tmp0 == tmp1){
     69c:	28 17       	cp	r18, r24
     69e:	39 07       	cpc	r19, r25
     6a0:	4a 07       	cpc	r20, r26
     6a2:	5b 07       	cpc	r21, r27
     6a4:	99 f7       	brne	.-26     	; 0x68c <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     6a6:	b9 01       	movw	r22, r18
     6a8:	ca 01       	movw	r24, r20
     6aa:	08 95       	ret

000006ac <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     6ac:	e0 91 2e 01 	lds	r30, 0x012E
     6b0:	f0 91 2f 01 	lds	r31, 0x012F
     6b4:	86 89       	ldd	r24, Z+22	; 0x16
     6b6:	88 23       	and	r24, r24
     6b8:	81 f4       	brne	.+32     	; 0x6da <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6ba:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     6bc:	80 89       	ldd	r24, Z+16	; 0x10
     6be:	91 89       	ldd	r25, Z+17	; 0x11
     6c0:	93 87       	std	Z+11, r25	; 0x0b
     6c2:	82 87       	std	Z+10, r24	; 0x0a
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     6c4:	82 89       	ldd	r24, Z+18	; 0x12
     6c6:	93 89       	ldd	r25, Z+19	; 0x13
     6c8:	a4 89       	ldd	r26, Z+20	; 0x14
     6ca:	b5 89       	ldd	r27, Z+21	; 0x15
     6cc:	84 87       	std	Z+12, r24	; 0x0c
     6ce:	95 87       	std	Z+13, r25	; 0x0d
     6d0:	a6 87       	std	Z+14, r26	; 0x0e
     6d2:	b7 87       	std	Z+15, r27	; 0x0f
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     6d4:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	86 8b       	std	Z+22, r24	; 0x16
     6da:	08 95       	ret

000006dc <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     6dc:	6f 92       	push	r6
     6de:	7f 92       	push	r7
     6e0:	8f 92       	push	r8
     6e2:	9f 92       	push	r9
     6e4:	af 92       	push	r10
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6fa:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     6fc:	c0 91 2e 01 	lds	r28, 0x012E
     700:	d0 91 2f 01 	lds	r29, 0x012F
     704:	e8 88       	ldd	r14, Y+16	; 0x10
     706:	f9 88       	ldd	r15, Y+17	; 0x11
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     708:	2a 89       	ldd	r18, Y+18	; 0x12
     70a:	3b 89       	ldd	r19, Y+19	; 0x13
     70c:	4c 89       	ldd	r20, Y+20	; 0x14
     70e:	5d 89       	ldd	r21, Y+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     710:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     712:	68 81       	ld	r22, Y
     714:	79 81       	ldd	r23, Y+1	; 0x01
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 4d 20 	call	0x409a	; 0x409a <__mulsi3>
     71e:	3b 01       	movw	r6, r22
     720:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	10 e0       	ldi	r17, 0x00	; 0
     726:	6e 0c       	add	r6, r14
     728:	7f 1c       	adc	r7, r15
     72a:	80 1e       	adc	r8, r16
     72c:	91 1e       	adc	r9, r17
  smpl_val += value;
     72e:	cc 24       	eor	r12, r12
     730:	dd 24       	eor	r13, r13
     732:	6a 0c       	add	r6, r10
     734:	7b 1c       	adc	r7, r11
     736:	8c 1c       	adc	r8, r12
     738:	9d 1c       	adc	r9, r13
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	14 c0       	rjmp	.+40     	; 0x76c <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     744:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     746:	e8 88       	ldd	r14, Y+16	; 0x10
     748:	f9 88       	ldd	r15, Y+17	; 0x11
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     74a:	2a 89       	ldd	r18, Y+18	; 0x12
     74c:	3b 89       	ldd	r19, Y+19	; 0x13
     74e:	4c 89       	ldd	r20, Y+20	; 0x14
     750:	5d 89       	ldd	r21, Y+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     752:	78 94       	sei
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     754:	68 81       	ld	r22, Y
     756:	79 81       	ldd	r23, Y+1	; 0x01
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 4d 20 	call	0x409a	; 0x409a <__mulsi3>
	curr_val += curr_ss;
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	10 e0       	ldi	r17, 0x00	; 0
     764:	6e 0d       	add	r22, r14
     766:	7f 1d       	adc	r23, r15
     768:	80 1f       	adc	r24, r16
     76a:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     76c:	66 15       	cp	r22, r6
     76e:	77 05       	cpc	r23, r7
     770:	88 05       	cpc	r24, r8
     772:	99 05       	cpc	r25, r9
     774:	3c f3       	brlt	.-50     	; 0x744 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	08 95       	ret

00000794 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     794:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     796:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     798:	e0 91 2e 01 	lds	r30, 0x012E
     79c:	f0 91 2f 01 	lds	r31, 0x012F
     7a0:	01 c0       	rjmp	.+2      	; 0x7a4 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     7a2:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     7a4:	80 89       	ldd	r24, Z+16	; 0x10
     7a6:	91 89       	ldd	r25, Z+17	; 0x11
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7a8:	78 94       	sei
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     7aa:	26 81       	ldd	r18, Z+6	; 0x06
     7ac:	37 81       	ldd	r19, Z+7	; 0x07
     7ae:	40 85       	ldd	r20, Z+8	; 0x08
     7b0:	51 85       	ldd	r21, Z+9	; 0x09
     7b2:	a0 e0       	ldi	r26, 0x00	; 0
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	82 17       	cp	r24, r18
     7b8:	93 07       	cpc	r25, r19
     7ba:	a4 07       	cpc	r26, r20
     7bc:	b5 07       	cpc	r27, r21
     7be:	89 f7       	brne	.-30     	; 0x7a2 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     7c0:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     7c2:	80 89       	ldd	r24, Z+16	; 0x10
     7c4:	91 89       	ldd	r25, Z+17	; 0x11
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7c6:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     7c8:	a0 e0       	ldi	r26, 0x00	; 0
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	86 83       	std	Z+6, r24	; 0x06
     7ce:	97 83       	std	Z+7, r25	; 0x07
     7d0:	a0 87       	std	Z+8, r26	; 0x08
     7d2:	b1 87       	std	Z+9, r27	; 0x09
  Timebase->Time.LastSample += value;
     7d4:	26 81       	ldd	r18, Z+6	; 0x06
     7d6:	37 81       	ldd	r19, Z+7	; 0x07
     7d8:	40 85       	ldd	r20, Z+8	; 0x08
     7da:	51 85       	ldd	r21, Z+9	; 0x09
     7dc:	cb 01       	movw	r24, r22
     7de:	a0 e0       	ldi	r26, 0x00	; 0
     7e0:	b0 e0       	ldi	r27, 0x00	; 0
     7e2:	82 0f       	add	r24, r18
     7e4:	93 1f       	adc	r25, r19
     7e6:	a4 1f       	adc	r26, r20
     7e8:	b5 1f       	adc	r27, r21
     7ea:	86 83       	std	Z+6, r24	; 0x06
     7ec:	97 83       	std	Z+7, r25	; 0x07
     7ee:	a0 87       	std	Z+8, r26	; 0x08
     7f0:	b1 87       	std	Z+9, r27	; 0x09
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     7f2:	26 81       	ldd	r18, Z+6	; 0x06
     7f4:	37 81       	ldd	r19, Z+7	; 0x07
     7f6:	40 85       	ldd	r20, Z+8	; 0x08
     7f8:	51 85       	ldd	r21, Z+9	; 0x09
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	28 17       	cp	r18, r24
     804:	39 07       	cpc	r19, r25
     806:	4a 07       	cpc	r20, r26
     808:	5b 07       	cpc	r21, r27
     80a:	84 f0       	brlt	.+32     	; 0x82c <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     80c:	26 81       	ldd	r18, Z+6	; 0x06
     80e:	37 81       	ldd	r19, Z+7	; 0x07
     810:	40 85       	ldd	r20, Z+8	; 0x08
     812:	51 85       	ldd	r21, Z+9	; 0x09
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	a0 e0       	ldi	r26, 0x00	; 0
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	28 1b       	sub	r18, r24
     81e:	39 0b       	sbc	r19, r25
     820:	4a 0b       	sbc	r20, r26
     822:	5b 0b       	sbc	r21, r27
     824:	26 83       	std	Z+6, r18	; 0x06
     826:	37 83       	std	Z+7, r19	; 0x07
     828:	40 87       	std	Z+8, r20	; 0x08
     82a:	51 87       	std	Z+9, r21	; 0x09
     82c:	08 95       	ret

0000082e <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     82e:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     830:	e0 91 2e 01 	lds	r30, 0x012E
     834:	f0 91 2f 01 	lds	r31, 0x012F
     838:	22 89       	ldd	r18, Z+18	; 0x12
     83a:	33 89       	ldd	r19, Z+19	; 0x13
     83c:	44 89       	ldd	r20, Z+20	; 0x14
     83e:	55 89       	ldd	r21, Z+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     840:	78 94       	sei
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     842:	a0 e0       	ldi	r26, 0x00	; 0
     844:	b0 e0       	ldi	r27, 0x00	; 0
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	a4 1f       	adc	r26, r20
     84c:	b5 1f       	adc	r27, r21
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	06 c0       	rjmp	.+12     	; 0x864 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     858:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     85a:	22 89       	ldd	r18, Z+18	; 0x12
     85c:	33 89       	ldd	r19, Z+19	; 0x13
     85e:	44 89       	ldd	r20, Z+20	; 0x14
     860:	55 89       	ldd	r21, Z+21	; 0x15
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     862:	78 94       	sei
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     864:	28 17       	cp	r18, r24
     866:	39 07       	cpc	r19, r25
     868:	4a 07       	cpc	r20, r26
     86a:	5b 07       	cpc	r21, r27
     86c:	ac f3       	brlt	.-22     	; 0x858 <Timebase_Timer_Delay_Seconds+0x2a>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     86e:	08 95       	ret

00000870 <Timebase_LPTimer_Get_SubSeconds>:
#ifdef TIMEBASE_LP_TIMER_ENABLE

uint16_t Timebase_LPTimer_Get_SubSeconds(void){
  uint16_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSubSeconds;
     870:	e0 91 2e 01 	lds	r30, 0x012E
     874:	f0 91 2f 01 	lds	r31, 0x012F
     878:	27 89       	ldd	r18, Z+23	; 0x17
     87a:	30 8d       	ldd	r19, Z+24	; 0x18
    temp1 = Timebase->Time.LPTimerSubSeconds;
     87c:	87 89       	ldd	r24, Z+23	; 0x17
     87e:	90 8d       	ldd	r25, Z+24	; 0x18
    if(temp0 == temp1){
     880:	28 17       	cp	r18, r24
     882:	39 07       	cpc	r19, r25
     884:	c9 f7       	brne	.-14     	; 0x878 <Timebase_LPTimer_Get_SubSeconds+0x8>
	  break;
    }
  }
  return temp0;
}
     886:	c9 01       	movw	r24, r18
     888:	08 95       	ret

0000088a <Timebase_LPTimer_Get_Seconds>:


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     88a:	e0 91 2e 01 	lds	r30, 0x012E
     88e:	f0 91 2f 01 	lds	r31, 0x012F
     892:	21 8d       	ldd	r18, Z+25	; 0x19
     894:	32 8d       	ldd	r19, Z+26	; 0x1a
     896:	43 8d       	ldd	r20, Z+27	; 0x1b
     898:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     89a:	81 8d       	ldd	r24, Z+25	; 0x19
     89c:	92 8d       	ldd	r25, Z+26	; 0x1a
     89e:	a3 8d       	ldd	r26, Z+27	; 0x1b
     8a0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     8a2:	28 17       	cp	r18, r24
     8a4:	39 07       	cpc	r19, r25
     8a6:	4a 07       	cpc	r20, r26
     8a8:	5b 07       	cpc	r21, r27
     8aa:	99 f7       	brne	.-26     	; 0x892 <Timebase_LPTimer_Get_Seconds+0x8>
	  break;
    }
  }
  return temp0;
}
     8ac:	b9 01       	movw	r22, r18
     8ae:	ca 01       	movw	r24, r20
     8b0:	08 95       	ret

000008b2 <Timebase_LPTimer_Set_SubSeconds>:


void Timebase_LPTimer_Set_SubSeconds(uint16_t value){
  Timebase->Time.LPTimerSubSeconds = value;
     8b2:	e0 91 2e 01 	lds	r30, 0x012E
     8b6:	f0 91 2f 01 	lds	r31, 0x012F
     8ba:	90 8f       	std	Z+24, r25	; 0x18
     8bc:	87 8b       	std	Z+23, r24	; 0x17
}
     8be:	08 95       	ret

000008c0 <Timebase_LPTimer_Set_Seconds>:


void Timebase_LPTimer_Set_Seconds(int32_t value){
  Timebase->Time.LPTimerSeconds = value;
     8c0:	e0 91 2e 01 	lds	r30, 0x012E
     8c4:	f0 91 2f 01 	lds	r31, 0x012F
     8c8:	61 8f       	std	Z+25, r22	; 0x19
     8ca:	72 8f       	std	Z+26, r23	; 0x1a
     8cc:	83 8f       	std	Z+27, r24	; 0x1b
     8ce:	94 8f       	std	Z+28, r25	; 0x1c
}
     8d0:	08 95       	ret

000008d2 <Timebase_LPTimer_Delay_Seconds>:

void Timebase_LPTimer_Delay_Seconds(uint16_t value){
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     8dc:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     8de:	e0 91 2e 01 	lds	r30, 0x012E
     8e2:	f0 91 2f 01 	lds	r31, 0x012F
     8e6:	21 8d       	ldd	r18, Z+25	; 0x19
     8e8:	32 8d       	ldd	r19, Z+26	; 0x1a
     8ea:	43 8d       	ldd	r20, Z+27	; 0x1b
     8ec:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     8ee:	81 8d       	ldd	r24, Z+25	; 0x19
     8f0:	92 8d       	ldd	r25, Z+26	; 0x1a
     8f2:	a3 8d       	ldd	r26, Z+27	; 0x1b
     8f4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     8f6:	28 17       	cp	r18, r24
     8f8:	39 07       	cpc	r19, r25
     8fa:	4a 07       	cpc	r20, r26
     8fc:	5b 07       	cpc	r21, r27
     8fe:	99 f7       	brne	.-26     	; 0x8e6 <Timebase_LPTimer_Delay_Seconds+0x14>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     900:	78 94       	sei
void Timebase_LPTimer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
     902:	7b 01       	movw	r14, r22
     904:	00 e0       	ldi	r16, 0x00	; 0
     906:	10 e0       	ldi	r17, 0x00	; 0
     908:	e2 0e       	add	r14, r18
     90a:	f3 1e       	adc	r15, r19
     90c:	04 1f       	adc	r16, r20
     90e:	15 1f       	adc	r17, r21
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	0f c0       	rjmp	.+30     	; 0x938 <__stack+0x39>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     91a:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     91c:	21 8d       	ldd	r18, Z+25	; 0x19
     91e:	32 8d       	ldd	r19, Z+26	; 0x1a
     920:	43 8d       	ldd	r20, Z+27	; 0x1b
     922:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
     924:	81 8d       	ldd	r24, Z+25	; 0x19
     926:	92 8d       	ldd	r25, Z+26	; 0x1a
     928:	a3 8d       	ldd	r26, Z+27	; 0x1b
     92a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
     92c:	28 17       	cp	r18, r24
     92e:	39 07       	cpc	r19, r25
     930:	4a 07       	cpc	r20, r26
     932:	5b 07       	cpc	r21, r27
     934:	99 f7       	brne	.-26     	; 0x91c <__stack+0x1d>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     936:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     938:	2e 15       	cp	r18, r14
     93a:	3f 05       	cpc	r19, r15
     93c:	40 07       	cpc	r20, r16
     93e:	51 07       	cpc	r21, r17
     940:	64 f3       	brlt	.-40     	; 0x91a <__stack+0x1b>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_LPTimer_Get_Seconds();
	Timebase_Atomic_Operation_End();
  }
}
     942:	1f 91       	pop	r17
     944:	0f 91       	pop	r16
     946:	ff 90       	pop	r15
     948:	ef 90       	pop	r14
     94a:	08 95       	ret

0000094c <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     94c:	e0 91 2e 01 	lds	r30, 0x012E
     950:	f0 91 2f 01 	lds	r31, 0x012F
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	2d e1       	ldi	r18, 0x1D	; 29
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	ac 01       	movw	r20, r24
     95c:	42 9f       	mul	r20, r18
     95e:	c0 01       	movw	r24, r0
     960:	43 9f       	mul	r20, r19
     962:	90 0d       	add	r25, r0
     964:	52 9f       	mul	r21, r18
     966:	90 0d       	add	r25, r0
     968:	11 24       	eor	r1, r1
     96a:	e8 0f       	add	r30, r24
     96c:	f9 1f       	adc	r31, r25
     96e:	86 8d       	ldd	r24, Z+30	; 0x1e
     970:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     972:	8f 70       	andi	r24, 0x0F	; 15
     974:	08 95       	ret

00000976 <Timebase_UpCounter_SS_Set_Status>:


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     976:	e0 91 2e 01 	lds	r30, 0x012E
     97a:	f0 91 2f 01 	lds	r31, 0x012F
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	2d e1       	ldi	r18, 0x1D	; 29
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	ac 01       	movw	r20, r24
     986:	42 9f       	mul	r20, r18
     988:	c0 01       	movw	r24, r0
     98a:	43 9f       	mul	r20, r19
     98c:	90 0d       	add	r25, r0
     98e:	52 9f       	mul	r21, r18
     990:	90 0d       	add	r25, r0
     992:	11 24       	eor	r1, r1
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	6f 70       	andi	r22, 0x0F	; 15
     99a:	66 0f       	add	r22, r22
     99c:	86 8d       	ldd	r24, Z+30	; 0x1e
     99e:	81 7e       	andi	r24, 0xE1	; 225
     9a0:	86 2b       	or	r24, r22
     9a2:	86 8f       	std	Z+30, r24	; 0x1e
}
     9a4:	08 95       	ret

000009a6 <Timebase_UpCounter_SS_Get_Value>:


int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     9a6:	e0 91 2e 01 	lds	r30, 0x012E
     9aa:	f0 91 2f 01 	lds	r31, 0x012F
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2d e1       	ldi	r18, 0x1D	; 29
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	ac 01       	movw	r20, r24
     9b6:	42 9f       	mul	r20, r18
     9b8:	c0 01       	movw	r24, r0
     9ba:	43 9f       	mul	r20, r19
     9bc:	90 0d       	add	r25, r0
     9be:	52 9f       	mul	r21, r18
     9c0:	90 0d       	add	r25, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	e8 0f       	add	r30, r24
     9c6:	f9 1f       	adc	r31, r25
     9c8:	df 01       	movw	r26, r30
     9ca:	9f 96       	adiw	r26, 0x2f	; 47
     9cc:	67 a5       	ldd	r22, Z+47	; 0x2f
     9ce:	11 96       	adiw	r26, 0x01	; 1
     9d0:	7c 91       	ld	r23, X
     9d2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	8c 91       	ld	r24, X
     9d8:	12 97       	sbiw	r26, 0x02	; 2
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 91       	ld	r25, X
     9de:	08 95       	ret

000009e0 <Timebase_UpCounter_SS_Set_Value>:


void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     9e4:	c0 91 2e 01 	lds	r28, 0x012E
     9e8:	d0 91 2f 01 	lds	r29, 0x012F
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	2d e1       	ldi	r18, 0x1D	; 29
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	fc 01       	movw	r30, r24
     9f4:	e2 9f       	mul	r30, r18
     9f6:	c0 01       	movw	r24, r0
     9f8:	e3 9f       	mul	r30, r19
     9fa:	90 0d       	add	r25, r0
     9fc:	f2 9f       	mul	r31, r18
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	c8 0f       	add	r28, r24
     a04:	d9 1f       	adc	r29, r25
     a06:	ca 01       	movw	r24, r20
     a08:	db 01       	movw	r26, r22
     a0a:	b7 ff       	sbrs	r27, 7
     a0c:	04 c0       	rjmp	.+8      	; 0xa16 <Timebase_UpCounter_SS_Set_Value+0x36>
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	a0 e0       	ldi	r26, 0x00	; 0
     a14:	b0 e0       	ldi	r27, 0x00	; 0
     a16:	8f a7       	std	Y+47, r24	; 0x2f
     a18:	98 ab       	std	Y+48, r25	; 0x30
     a1a:	a9 ab       	std	Y+49, r26	; 0x31
     a1c:	ba ab       	std	Y+50, r27	; 0x32
}
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <Timebase_UpCounter_SS_Get_EndValueSec>:


int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     a24:	e0 91 2e 01 	lds	r30, 0x012E
     a28:	f0 91 2f 01 	lds	r31, 0x012F
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	2d e1       	ldi	r18, 0x1D	; 29
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	ac 01       	movw	r20, r24
     a34:	42 9f       	mul	r20, r18
     a36:	c0 01       	movw	r24, r0
     a38:	43 9f       	mul	r20, r19
     a3a:	90 0d       	add	r25, r0
     a3c:	52 9f       	mul	r21, r18
     a3e:	90 0d       	add	r25, r0
     a40:	11 24       	eor	r1, r1
     a42:	e8 0f       	add	r30, r24
     a44:	f9 1f       	adc	r31, r25
     a46:	df 01       	movw	r26, r30
     a48:	5f 96       	adiw	r26, 0x1f	; 31
     a4a:	67 8d       	ldd	r22, Z+31	; 0x1f
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	7c 91       	ld	r23, X
     a50:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     a52:	12 96       	adiw	r26, 0x02	; 2
     a54:	8c 91       	ld	r24, X
     a56:	12 97       	sbiw	r26, 0x02	; 2
     a58:	13 96       	adiw	r26, 0x03	; 3
     a5a:	9c 91       	ld	r25, X
     a5c:	08 95       	ret

00000a5e <Timebase_UpCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     a5e:	e0 91 2e 01 	lds	r30, 0x012E
     a62:	f0 91 2f 01 	lds	r31, 0x012F
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	2d e1       	ldi	r18, 0x1D	; 29
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	ac 01       	movw	r20, r24
     a6e:	42 9f       	mul	r20, r18
     a70:	c0 01       	movw	r24, r0
     a72:	43 9f       	mul	r20, r19
     a74:	90 0d       	add	r25, r0
     a76:	52 9f       	mul	r21, r18
     a78:	90 0d       	add	r25, r0
     a7a:	11 24       	eor	r1, r1
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	df 01       	movw	r26, r30
     a82:	93 96       	adiw	r26, 0x23	; 35
     a84:	63 a1       	ldd	r22, Z+35	; 0x23
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	7c 91       	ld	r23, X
     a8a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     a8c:	12 96       	adiw	r26, 0x02	; 2
     a8e:	8c 91       	ld	r24, X
     a90:	12 97       	sbiw	r26, 0x02	; 2
     a92:	13 96       	adiw	r26, 0x03	; 3
     a94:	9c 91       	ld	r25, X
     a96:	08 95       	ret

00000a98 <Timebase_UpCounter_SS_Set_EndValueSec>:


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     a98:	e0 91 2e 01 	lds	r30, 0x012E
     a9c:	f0 91 2f 01 	lds	r31, 0x012F
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	2d e1       	ldi	r18, 0x1D	; 29
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	dc 01       	movw	r26, r24
     aa8:	a2 9f       	mul	r26, r18
     aaa:	c0 01       	movw	r24, r0
     aac:	a3 9f       	mul	r26, r19
     aae:	90 0d       	add	r25, r0
     ab0:	b2 9f       	mul	r27, r18
     ab2:	90 0d       	add	r25, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	e8 0f       	add	r30, r24
     ab8:	f9 1f       	adc	r31, r25
     aba:	47 8f       	std	Z+31, r20	; 0x1f
     abc:	50 a3       	std	Z+32, r21	; 0x20
     abe:	61 a3       	std	Z+33, r22	; 0x21
     ac0:	72 a3       	std	Z+34, r23	; 0x22
}
     ac2:	08 95       	ret

00000ac4 <Timebase_UpCounter_SS_Set_EndValueSubSec>:


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     ac4:	e0 91 2e 01 	lds	r30, 0x012E
     ac8:	f0 91 2f 01 	lds	r31, 0x012F
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	2d e1       	ldi	r18, 0x1D	; 29
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	dc 01       	movw	r26, r24
     ad4:	a2 9f       	mul	r26, r18
     ad6:	c0 01       	movw	r24, r0
     ad8:	a3 9f       	mul	r26, r19
     ada:	90 0d       	add	r25, r0
     adc:	b2 9f       	mul	r27, r18
     ade:	90 0d       	add	r25, r0
     ae0:	11 24       	eor	r1, r1
     ae2:	e8 0f       	add	r30, r24
     ae4:	f9 1f       	adc	r31, r25
     ae6:	43 a3       	std	Z+35, r20	; 0x23
     ae8:	54 a3       	std	Z+36, r21	; 0x24
     aea:	65 a3       	std	Z+37, r22	; 0x25
     aec:	76 a3       	std	Z+38, r23	; 0x26
}
     aee:	08 95       	ret

00000af0 <Timebase_UpCounter_SS_Get_TargetValue>:


int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     af0:	e0 91 2e 01 	lds	r30, 0x012E
     af4:	f0 91 2f 01 	lds	r31, 0x012F
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	2d e1       	ldi	r18, 0x1D	; 29
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	ac 01       	movw	r20, r24
     b00:	42 9f       	mul	r20, r18
     b02:	c0 01       	movw	r24, r0
     b04:	43 9f       	mul	r20, r19
     b06:	90 0d       	add	r25, r0
     b08:	52 9f       	mul	r21, r18
     b0a:	90 0d       	add	r25, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	e8 0f       	add	r30, r24
     b10:	f9 1f       	adc	r31, r25
     b12:	df 01       	movw	r26, r30
     b14:	97 96       	adiw	r26, 0x27	; 39
     b16:	67 a1       	ldd	r22, Z+39	; 0x27
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	7c 91       	ld	r23, X
     b1c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     b1e:	12 96       	adiw	r26, 0x02	; 2
     b20:	8c 91       	ld	r24, X
     b22:	12 97       	sbiw	r26, 0x02	; 2
     b24:	13 96       	adiw	r26, 0x03	; 3
     b26:	9c 91       	ld	r25, X
     b28:	08 95       	ret

00000b2a <Timebase_UpCounter_SS_Set_TargetValue>:


void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     b2a:	e0 91 2e 01 	lds	r30, 0x012E
     b2e:	f0 91 2f 01 	lds	r31, 0x012F
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	2d e1       	ldi	r18, 0x1D	; 29
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	dc 01       	movw	r26, r24
     b3a:	a2 9f       	mul	r26, r18
     b3c:	c0 01       	movw	r24, r0
     b3e:	a3 9f       	mul	r26, r19
     b40:	90 0d       	add	r25, r0
     b42:	b2 9f       	mul	r27, r18
     b44:	90 0d       	add	r25, r0
     b46:	11 24       	eor	r1, r1
     b48:	e8 0f       	add	r30, r24
     b4a:	f9 1f       	adc	r31, r25
     b4c:	47 a3       	std	Z+39, r20	; 0x27
     b4e:	50 a7       	std	Z+40, r21	; 0x28
     b50:	61 a7       	std	Z+41, r22	; 0x29
     b52:	72 a7       	std	Z+42, r23	; 0x2a
}
     b54:	08 95       	ret

00000b56 <Timebase_UpCounter_SS_Get_TemporaryValue>:


int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     b56:	e0 91 2e 01 	lds	r30, 0x012E
     b5a:	f0 91 2f 01 	lds	r31, 0x012F
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	2d e1       	ldi	r18, 0x1D	; 29
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	ac 01       	movw	r20, r24
     b66:	42 9f       	mul	r20, r18
     b68:	c0 01       	movw	r24, r0
     b6a:	43 9f       	mul	r20, r19
     b6c:	90 0d       	add	r25, r0
     b6e:	52 9f       	mul	r21, r18
     b70:	90 0d       	add	r25, r0
     b72:	11 24       	eor	r1, r1
     b74:	e8 0f       	add	r30, r24
     b76:	f9 1f       	adc	r31, r25
     b78:	df 01       	movw	r26, r30
     b7a:	9b 96       	adiw	r26, 0x2b	; 43
     b7c:	63 a5       	ldd	r22, Z+43	; 0x2b
     b7e:	11 96       	adiw	r26, 0x01	; 1
     b80:	7c 91       	ld	r23, X
     b82:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     b84:	12 96       	adiw	r26, 0x02	; 2
     b86:	8c 91       	ld	r24, X
     b88:	12 97       	sbiw	r26, 0x02	; 2
     b8a:	13 96       	adiw	r26, 0x03	; 3
     b8c:	9c 91       	ld	r25, X
     b8e:	08 95       	ret

00000b90 <Timebase_UpCounter_SS_Set_TemporaryValue>:


void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     b94:	c0 91 2e 01 	lds	r28, 0x012E
     b98:	d0 91 2f 01 	lds	r29, 0x012F
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	2d e1       	ldi	r18, 0x1D	; 29
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	fc 01       	movw	r30, r24
     ba4:	e2 9f       	mul	r30, r18
     ba6:	c0 01       	movw	r24, r0
     ba8:	e3 9f       	mul	r30, r19
     baa:	90 0d       	add	r25, r0
     bac:	f2 9f       	mul	r31, r18
     bae:	90 0d       	add	r25, r0
     bb0:	11 24       	eor	r1, r1
     bb2:	c8 0f       	add	r28, r24
     bb4:	d9 1f       	adc	r29, r25
     bb6:	ca 01       	movw	r24, r20
     bb8:	db 01       	movw	r26, r22
     bba:	b7 ff       	sbrs	r27, 7
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	8b a7       	std	Y+43, r24	; 0x2b
     bc8:	9c a7       	std	Y+44, r25	; 0x2c
     bca:	ad a7       	std	Y+45, r26	; 0x2d
     bcc:	be a7       	std	Y+46, r27	; 0x2e
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <Timebase_UpCounter_SS_Get_PeriodValue>:


int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     bd4:	e0 91 2e 01 	lds	r30, 0x012E
     bd8:	f0 91 2f 01 	lds	r31, 0x012F
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	2d e1       	ldi	r18, 0x1D	; 29
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	ac 01       	movw	r20, r24
     be4:	42 9f       	mul	r20, r18
     be6:	c0 01       	movw	r24, r0
     be8:	43 9f       	mul	r20, r19
     bea:	90 0d       	add	r25, r0
     bec:	52 9f       	mul	r21, r18
     bee:	90 0d       	add	r25, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	e8 0f       	add	r30, r24
     bf4:	f9 1f       	adc	r31, r25
     bf6:	df 01       	movw	r26, r30
     bf8:	d3 96       	adiw	r26, 0x33	; 51
     bfa:	63 a9       	ldd	r22, Z+51	; 0x33
     bfc:	11 96       	adiw	r26, 0x01	; 1
     bfe:	7c 91       	ld	r23, X
     c00:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8c 91       	ld	r24, X
     c06:	12 97       	sbiw	r26, 0x02	; 2
     c08:	13 96       	adiw	r26, 0x03	; 3
     c0a:	9c 91       	ld	r25, X
     c0c:	08 95       	ret

00000c0e <Timebase_UpCounter_SS_Set_PeriodValue>:


void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     c0e:	e0 91 2e 01 	lds	r30, 0x012E
     c12:	f0 91 2f 01 	lds	r31, 0x012F
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	2d e1       	ldi	r18, 0x1D	; 29
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	dc 01       	movw	r26, r24
     c1e:	a2 9f       	mul	r26, r18
     c20:	c0 01       	movw	r24, r0
     c22:	a3 9f       	mul	r26, r19
     c24:	90 0d       	add	r25, r0
     c26:	b2 9f       	mul	r27, r18
     c28:	90 0d       	add	r25, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	e8 0f       	add	r30, r24
     c2e:	f9 1f       	adc	r31, r25
     c30:	43 ab       	std	Z+51, r20	; 0x33
     c32:	54 ab       	std	Z+52, r21	; 0x34
     c34:	65 ab       	std	Z+53, r22	; 0x35
     c36:	76 ab       	std	Z+54, r23	; 0x36
}
     c38:	08 95       	ret

00000c3a <Timebase_UpCounter_SS_Get_Period_Flag>:


uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     c3a:	e0 91 2e 01 	lds	r30, 0x012E
     c3e:	f0 91 2f 01 	lds	r31, 0x012F
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	2d e1       	ldi	r18, 0x1D	; 29
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	ac 01       	movw	r20, r24
     c4a:	42 9f       	mul	r20, r18
     c4c:	c0 01       	movw	r24, r0
     c4e:	43 9f       	mul	r20, r19
     c50:	90 0d       	add	r25, r0
     c52:	52 9f       	mul	r21, r18
     c54:	90 0d       	add	r25, r0
     c56:	11 24       	eor	r1, r1
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	86 8d       	ldd	r24, Z+30	; 0x1e
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	08 95       	ret

00000c62 <Timebase_UpCounter_SS_Set_Period_Flag>:


void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     c62:	e0 91 2e 01 	lds	r30, 0x012E
     c66:	f0 91 2f 01 	lds	r31, 0x012F
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	2d e1       	ldi	r18, 0x1D	; 29
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	ac 01       	movw	r20, r24
     c72:	42 9f       	mul	r20, r18
     c74:	c0 01       	movw	r24, r0
     c76:	43 9f       	mul	r20, r19
     c78:	90 0d       	add	r25, r0
     c7a:	52 9f       	mul	r21, r18
     c7c:	90 0d       	add	r25, r0
     c7e:	11 24       	eor	r1, r1
     c80:	e8 0f       	add	r30, r24
     c82:	f9 1f       	adc	r31, r25
     c84:	86 8d       	ldd	r24, Z+30	; 0x1e
     c86:	81 60       	ori	r24, 0x01	; 1
     c88:	86 8f       	std	Z+30, r24	; 0x1e
}
     c8a:	08 95       	ret

00000c8c <Timebase_UpCounter_SS_Clear_Period_Flag>:


void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     c8c:	e0 91 2e 01 	lds	r30, 0x012E
     c90:	f0 91 2f 01 	lds	r31, 0x012F
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	2d e1       	ldi	r18, 0x1D	; 29
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	ac 01       	movw	r20, r24
     c9c:	42 9f       	mul	r20, r18
     c9e:	c0 01       	movw	r24, r0
     ca0:	43 9f       	mul	r20, r19
     ca2:	90 0d       	add	r25, r0
     ca4:	52 9f       	mul	r21, r18
     ca6:	90 0d       	add	r25, r0
     ca8:	11 24       	eor	r1, r1
     caa:	e8 0f       	add	r30, r24
     cac:	f9 1f       	adc	r31, r25
     cae:	86 8d       	ldd	r24, Z+30	; 0x1e
     cb0:	8e 7f       	andi	r24, 0xFE	; 254
     cb2:	86 8f       	std	Z+30, r24	; 0x1e
}
     cb4:	08 95       	ret

00000cb6 <Timebase_UpCounter_SS_Get_ReloadValue>:

int32_t Timebase_UpCounter_SS_Get_ReloadValue(uint8_t window){
     cb6:	e0 91 2e 01 	lds	r30, 0x012E
     cba:	f0 91 2f 01 	lds	r31, 0x012F
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	2d e1       	ldi	r18, 0x1D	; 29
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	ac 01       	movw	r20, r24
     cc6:	42 9f       	mul	r20, r18
     cc8:	c0 01       	movw	r24, r0
     cca:	43 9f       	mul	r20, r19
     ccc:	90 0d       	add	r25, r0
     cce:	52 9f       	mul	r21, r18
     cd0:	90 0d       	add	r25, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	e8 0f       	add	r30, r24
     cd6:	f9 1f       	adc	r31, r25
     cd8:	df 01       	movw	r26, r30
     cda:	d7 96       	adiw	r26, 0x37	; 55
     cdc:	67 a9       	ldd	r22, Z+55	; 0x37
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	7c 91       	ld	r23, X
     ce2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].ReloadValue;
}
     ce4:	12 96       	adiw	r26, 0x02	; 2
     ce6:	8c 91       	ld	r24, X
     ce8:	12 97       	sbiw	r26, 0x02	; 2
     cea:	13 96       	adiw	r26, 0x03	; 3
     cec:	9c 91       	ld	r25, X
     cee:	08 95       	ret

00000cf0 <Timebase_UpCounter_SS_Set_ReloadValue>:

void Timebase_UpCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].ReloadValue = value;
     cf0:	e0 91 2e 01 	lds	r30, 0x012E
     cf4:	f0 91 2f 01 	lds	r31, 0x012F
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	2d e1       	ldi	r18, 0x1D	; 29
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	dc 01       	movw	r26, r24
     d00:	a2 9f       	mul	r26, r18
     d02:	c0 01       	movw	r24, r0
     d04:	a3 9f       	mul	r26, r19
     d06:	90 0d       	add	r25, r0
     d08:	b2 9f       	mul	r27, r18
     d0a:	90 0d       	add	r25, r0
     d0c:	11 24       	eor	r1, r1
     d0e:	e8 0f       	add	r30, r24
     d10:	f9 1f       	adc	r31, r25
     d12:	47 ab       	std	Z+55, r20	; 0x37
     d14:	50 af       	std	Z+56, r21	; 0x38
     d16:	61 af       	std	Z+57, r22	; 0x39
     d18:	72 af       	std	Z+58, r23	; 0x3a
}
     d1a:	08 95       	ret

00000d1c <Timebase_UpCounter_SS_Reset>:
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     d1c:	e0 91 2e 01 	lds	r30, 0x012E
     d20:	f0 91 2f 01 	lds	r31, 0x012F
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	2d e1       	ldi	r18, 0x1D	; 29
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	ac 01       	movw	r20, r24
     d2c:	42 9f       	mul	r20, r18
     d2e:	c0 01       	movw	r24, r0
     d30:	43 9f       	mul	r20, r19
     d32:	90 0d       	add	r25, r0
     d34:	52 9f       	mul	r21, r18
     d36:	90 0d       	add	r25, r0
     d38:	11 24       	eor	r1, r1
     d3a:	e8 0f       	add	r30, r24
     d3c:	f9 1f       	adc	r31, r25
     d3e:	86 8d       	ldd	r24, Z+30	; 0x1e

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     d40:	17 a6       	std	Z+47, r1	; 0x2f
     d42:	10 aa       	std	Z+48, r1	; 0x30
     d44:	11 aa       	std	Z+49, r1	; 0x31
     d46:	12 aa       	std	Z+50, r1	; 0x32
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     d48:	17 8e       	std	Z+31, r1	; 0x1f
     d4a:	10 a2       	std	Z+32, r1	; 0x20
     d4c:	11 a2       	std	Z+33, r1	; 0x21
     d4e:	12 a2       	std	Z+34, r1	; 0x22
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     d50:	13 a2       	std	Z+35, r1	; 0x23
     d52:	14 a2       	std	Z+36, r1	; 0x24
     d54:	15 a2       	std	Z+37, r1	; 0x25
     d56:	16 a2       	std	Z+38, r1	; 0x26
  return Timebase->UpCounterSS[window].Target;
}


void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     d58:	17 a2       	std	Z+39, r1	; 0x27
     d5a:	10 a6       	std	Z+40, r1	; 0x28
     d5c:	11 a6       	std	Z+41, r1	; 0x29
     d5e:	12 a6       	std	Z+42, r1	; 0x2a

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     d60:	13 a6       	std	Z+43, r1	; 0x2b
     d62:	14 a6       	std	Z+44, r1	; 0x2c
     d64:	15 a6       	std	Z+45, r1	; 0x2d
     d66:	16 a6       	std	Z+46, r1	; 0x2e
  return Timebase->UpCounterSS[window].PeriodValue;
}


void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     d68:	13 aa       	std	Z+51, r1	; 0x33
     d6a:	14 aa       	std	Z+52, r1	; 0x34
     d6c:	15 aa       	std	Z+53, r1	; 0x35
     d6e:	16 aa       	std	Z+54, r1	; 0x36
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     d70:	80 7e       	andi	r24, 0xE0	; 224
     d72:	86 8f       	std	Z+30, r24	; 0x1e
int32_t Timebase_UpCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounterSS[window].ReloadValue;
}

void Timebase_UpCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].ReloadValue = value;
     d74:	17 aa       	std	Z+55, r1	; 0x37
     d76:	10 ae       	std	Z+56, r1	; 0x38
     d78:	11 ae       	std	Z+57, r1	; 0x39
     d7a:	12 ae       	std	Z+58, r1	; 0x3a
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
  Timebase_UpCounter_SS_Set_ReloadValue(window, 0);
} 
     d7c:	08 95       	ret

00000d7e <Timebase_UpCounter_SS_Clear_All_Flags>:


void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     d7e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Timebase_UpCounter_SS_Reset>
}
     d82:	08 95       	ret

00000d84 <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     d84:	e0 91 2e 01 	lds	r30, 0x012E
     d88:	f0 91 2f 01 	lds	r31, 0x012F
     d8c:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_UpCounter_SS_Reset( window );
}


void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     d8e:	2d e1       	ldi	r18, 0x1D	; 29
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	ac 01       	movw	r20, r24
     d94:	42 9f       	mul	r20, r18
     d96:	c0 01       	movw	r24, r0
     d98:	43 9f       	mul	r20, r19
     d9a:	90 0d       	add	r25, r0
     d9c:	52 9f       	mul	r21, r18
     d9e:	90 0d       	add	r25, r0
     da0:	11 24       	eor	r1, r1
     da2:	e8 0f       	add	r30, r24
     da4:	f9 1f       	adc	r31, r25
     da6:	96 8d       	ldd	r25, Z+30	; 0x1e
     da8:	89 2f       	mov	r24, r25
     daa:	86 95       	lsr	r24
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	19 f0       	breq	.+6      	; 0xdb8 <Timebase_UpCounter_SS_Start+0x34>
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     db2:	91 7e       	andi	r25, 0xE1	; 225
     db4:	92 60       	ori	r25, 0x02	; 2
     db6:	96 8f       	std	Z+30, r25	; 0x1e
     db8:	08 95       	ret

00000dba <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     dba:	e0 91 2e 01 	lds	r30, 0x012E
     dbe:	f0 91 2f 01 	lds	r31, 0x012F
     dc2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     dc4:	2d e1       	ldi	r18, 0x1D	; 29
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	ac 01       	movw	r20, r24
     dca:	42 9f       	mul	r20, r18
     dcc:	c0 01       	movw	r24, r0
     dce:	43 9f       	mul	r20, r19
     dd0:	90 0d       	add	r25, r0
     dd2:	52 9f       	mul	r21, r18
     dd4:	90 0d       	add	r25, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	e8 0f       	add	r30, r24
     dda:	f9 1f       	adc	r31, r25
     ddc:	96 8d       	ldd	r25, Z+30	; 0x1e
     dde:	89 2f       	mov	r24, r25
     de0:	86 95       	lsr	r24
     de2:	8f 70       	andi	r24, 0x0F	; 15
     de4:	82 30       	cpi	r24, 0x02	; 2
     de6:	19 f0       	breq	.+6      	; 0xdee <Timebase_UpCounter_SS_Stop+0x34>
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     de8:	91 7e       	andi	r25, 0xE1	; 225
     dea:	94 60       	ori	r25, 0x04	; 4
     dec:	96 8f       	std	Z+30, r25	; 0x1e
     dee:	08 95       	ret

00000df0 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
     df0:	2f 92       	push	r2
     df2:	3f 92       	push	r3
     df4:	4f 92       	push	r4
     df6:	5f 92       	push	r5
     df8:	6f 92       	push	r6
     dfa:	7f 92       	push	r7
     dfc:	8f 92       	push	r8
     dfe:	9f 92       	push	r9
     e00:	af 92       	push	r10
     e02:	bf 92       	push	r11
     e04:	cf 92       	push	r12
     e06:	df 92       	push	r13
     e08:	ef 92       	push	r14
     e0a:	ff 92       	push	r15
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	28 97       	sbiw	r28, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	1a 01       	movw	r2, r20
     e26:	2b 01       	movw	r4, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     e28:	20 91 2e 01 	lds	r18, 0x012E
     e2c:	30 91 2f 01 	lds	r19, 0x012F
     e30:	38 87       	std	Y+8, r19	; 0x08
     e32:	2f 83       	std	Y+7, r18	; 0x07
     e34:	a8 2f       	mov	r26, r24
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	ba 83       	std	Y+2, r27	; 0x02
     e3a:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     e3c:	8d e1       	ldi	r24, 0x1D	; 29
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a8 9f       	mul	r26, r24
     e42:	f0 01       	movw	r30, r0
     e44:	a9 9f       	mul	r26, r25
     e46:	f0 0d       	add	r31, r0
     e48:	b8 9f       	mul	r27, r24
     e4a:	f0 0d       	add	r31, r0
     e4c:	11 24       	eor	r1, r1
     e4e:	e2 0f       	add	r30, r18
     e50:	f3 1f       	adc	r31, r19
     e52:	86 8d       	ldd	r24, Z+30	; 0x1e
     e54:	86 95       	lsr	r24
     e56:	8f 70       	andi	r24, 0x0F	; 15
     e58:	09 f0       	breq	.+2      	; 0xe5c <Timebase_UpCounter_SS_Set_Securely+0x6c>
     e5a:	88 c0       	rjmp	.+272    	; 0xf6c <Timebase_UpCounter_SS_Set_Securely+0x17c>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     e5c:	17 a6       	std	Z+47, r1	; 0x2f
     e5e:	10 aa       	std	Z+48, r1	; 0x30
     e60:	11 aa       	std	Z+49, r1	; 0x31
     e62:	12 aa       	std	Z+50, r1	; 0x32

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     e64:	13 a6       	std	Z+43, r1	; 0x2b
     e66:	14 a6       	std	Z+44, r1	; 0x2c
     e68:	15 a6       	std	Z+45, r1	; 0x2d
     e6a:	16 a6       	std	Z+46, r1	; 0x2e
  return Timebase->UpCounterSS[window].Target;
}


void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     e6c:	47 a3       	std	Z+39, r20	; 0x27
     e6e:	50 a7       	std	Z+40, r21	; 0x28
     e70:	61 a7       	std	Z+41, r22	; 0x29
     e72:	72 a7       	std	Z+42, r23	; 0x2a
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e74:	f9 01       	movw	r30, r18
     e76:	c2 84       	ldd	r12, Z+10	; 0x0a
     e78:	d3 84       	ldd	r13, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     e7a:	d9 01       	movw	r26, r18
     e7c:	1c 96       	adiw	r26, 0x0c	; 12
     e7e:	8d 91       	ld	r24, X+
     e80:	9d 91       	ld	r25, X+
     e82:	0d 90       	ld	r0, X+
     e84:	bc 91       	ld	r27, X
     e86:	a0 2d       	mov	r26, r0
     e88:	8b 83       	std	Y+3, r24	; 0x03
     e8a:	9c 83       	std	Y+4, r25	; 0x04
     e8c:	ad 83       	std	Y+5, r26	; 0x05
     e8e:	be 83       	std	Y+6, r27	; 0x06
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	subsec_val = value % Timebase->Config.UpdateRate;
     e90:	20 81       	ld	r18, Z
     e92:	31 81       	ldd	r19, Z+1	; 0x01
     e94:	40 e0       	ldi	r20, 0x00	; 0
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	c2 01       	movw	r24, r4
     e9a:	b1 01       	movw	r22, r2
     e9c:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
     ea0:	7b 01       	movw	r14, r22
     ea2:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     ea4:	ef 81       	ldd	r30, Y+7	; 0x07
     ea6:	f8 85       	ldd	r31, Y+8	; 0x08
     ea8:	20 81       	ld	r18, Z
     eaa:	31 81       	ldd	r19, Z+1	; 0x01
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	c2 01       	movw	r24, r4
     eb2:	b1 01       	movw	r22, r2
     eb4:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
     eb8:	c9 01       	movw	r24, r18
     eba:	da 01       	movw	r26, r20
     ebc:	3c 01       	movw	r6, r24
     ebe:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
     ec0:	56 01       	movw	r10, r12
     ec2:	cc 24       	eor	r12, r12
     ec4:	dd 24       	eor	r13, r13
     ec6:	ae 0c       	add	r10, r14
     ec8:	bf 1c       	adc	r11, r15
     eca:	c0 1e       	adc	r12, r16
     ecc:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     ece:	af 81       	ldd	r26, Y+7	; 0x07
     ed0:	b8 85       	ldd	r27, Y+8	; 0x08
     ed2:	8d 91       	ld	r24, X+
     ed4:	9c 91       	ld	r25, X
     ed6:	a0 e0       	ldi	r26, 0x00	; 0
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	a8 16       	cp	r10, r24
     edc:	b9 06       	cpc	r11, r25
     ede:	ca 06       	cpc	r12, r26
     ee0:	db 06       	cpc	r13, r27
     ee2:	a4 f0       	brlt	.+40     	; 0xf0c <Timebase_UpCounter_SS_Set_Securely+0x11c>
	  sec_val += 1;
     ee4:	08 94       	sec
     ee6:	61 1c       	adc	r6, r1
     ee8:	71 1c       	adc	r7, r1
     eea:	81 1c       	adc	r8, r1
     eec:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     eee:	ef 81       	ldd	r30, Y+7	; 0x07
     ef0:	f8 85       	ldd	r31, Y+8	; 0x08
     ef2:	20 81       	ld	r18, Z
     ef4:	31 81       	ldd	r19, Z+1	; 0x01
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	c6 01       	movw	r24, r12
     efc:	b5 01       	movw	r22, r10
     efe:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
     f02:	ac 01       	movw	r20, r24
     f04:	cb 01       	movw	r24, r22
     f06:	da 01       	movw	r26, r20
     f08:	5c 01       	movw	r10, r24
     f0a:	6d 01       	movw	r12, r26
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     f0c:	8d e1       	ldi	r24, 0x1D	; 29
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	29 81       	ldd	r18, Y+1	; 0x01
     f12:	3a 81       	ldd	r19, Y+2	; 0x02
     f14:	28 9f       	mul	r18, r24
     f16:	a0 01       	movw	r20, r0
     f18:	29 9f       	mul	r18, r25
     f1a:	50 0d       	add	r21, r0
     f1c:	38 9f       	mul	r19, r24
     f1e:	50 0d       	add	r21, r0
     f20:	11 24       	eor	r1, r1
     f22:	8f 81       	ldd	r24, Y+7	; 0x07
     f24:	98 85       	ldd	r25, Y+8	; 0x08
     f26:	48 0f       	add	r20, r24
     f28:	59 1f       	adc	r21, r25
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	ad 81       	ldd	r26, Y+5	; 0x05
     f30:	be 81       	ldd	r27, Y+6	; 0x06
     f32:	86 0d       	add	r24, r6
     f34:	97 1d       	adc	r25, r7
     f36:	a8 1d       	adc	r26, r8
     f38:	b9 1d       	adc	r27, r9
     f3a:	fa 01       	movw	r30, r20
     f3c:	87 8f       	std	Z+31, r24	; 0x1f
     f3e:	90 a3       	std	Z+32, r25	; 0x20
     f40:	a1 a3       	std	Z+33, r26	; 0x21
     f42:	b2 a3       	std	Z+34, r27	; 0x22
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     f44:	da 01       	movw	r26, r20
     f46:	93 96       	adiw	r26, 0x23	; 35
     f48:	ad 92       	st	X+, r10
     f4a:	bd 92       	st	X+, r11
     f4c:	cd 92       	st	X+, r12
     f4e:	dc 92       	st	X, r13
     f50:	96 97       	sbiw	r26, 0x26	; 38
int32_t Timebase_UpCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounterSS[window].ReloadValue;
}

void Timebase_UpCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].ReloadValue = value;
     f52:	27 aa       	std	Z+55, r2	; 0x37
     f54:	30 ae       	std	Z+56, r3	; 0x38
     f56:	41 ae       	std	Z+57, r4	; 0x39
     f58:	52 ae       	std	Z+58, r5	; 0x3a
  Timebase_UpCounter_SS_Reset( window );
}


void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     f5a:	96 8d       	ldd	r25, Z+30	; 0x1e
     f5c:	89 2f       	mov	r24, r25
     f5e:	86 95       	lsr	r24
     f60:	8f 70       	andi	r24, 0x0F	; 15
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	19 f0       	breq	.+6      	; 0xf6c <Timebase_UpCounter_SS_Set_Securely+0x17c>
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     f66:	91 7e       	andi	r25, 0xE1	; 225
     f68:	92 60       	ori	r25, 0x02	; 2
     f6a:	96 8f       	std	Z+30, r25	; 0x1e
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_UpCounter_SS_Set_ReloadValue(window, value);
    Timebase_UpCounter_SS_Start(window);
  }
}
     f6c:	28 96       	adiw	r28, 0x08	; 8
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	9f 90       	pop	r9
     f8e:	8f 90       	pop	r8
     f90:	7f 90       	pop	r7
     f92:	6f 90       	pop	r6
     f94:	5f 90       	pop	r5
     f96:	4f 90       	pop	r4
     f98:	3f 90       	pop	r3
     f9a:	2f 90       	pop	r2
     f9c:	08 95       	ret

00000f9e <Timebase_UpCounter_SS_Set_Forcefully>:


void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     f9e:	cf 92       	push	r12
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	08 2f       	mov	r16, r24
     fac:	6a 01       	movw	r12, r20
     fae:	7b 01       	movw	r14, r22
  Timebase_UpCounter_SS_Reset( window );
     fb0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
     fb4:	80 2f       	mov	r24, r16
     fb6:	b7 01       	movw	r22, r14
     fb8:	a6 01       	movw	r20, r12
     fba:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timebase_UpCounter_SS_Set_Securely>
int32_t Timebase_UpCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounterSS[window].ReloadValue;
}

void Timebase_UpCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].ReloadValue = value;
     fbe:	e0 91 2e 01 	lds	r30, 0x012E
     fc2:	f0 91 2f 01 	lds	r31, 0x012F
     fc6:	10 e0       	ldi	r17, 0x00	; 0
     fc8:	8d e1       	ldi	r24, 0x1D	; 29
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	9c 01       	movw	r18, r24
     fce:	02 9f       	mul	r16, r18
     fd0:	c0 01       	movw	r24, r0
     fd2:	03 9f       	mul	r16, r19
     fd4:	90 0d       	add	r25, r0
     fd6:	12 9f       	mul	r17, r18
     fd8:	90 0d       	add	r25, r0
     fda:	11 24       	eor	r1, r1
     fdc:	e8 0f       	add	r30, r24
     fde:	f9 1f       	adc	r31, r25
     fe0:	c7 aa       	std	Z+55, r12	; 0x37
     fe2:	d0 ae       	std	Z+56, r13	; 0x38
     fe4:	e1 ae       	std	Z+57, r14	; 0x39
     fe6:	f2 ae       	std	Z+58, r15	; 0x3a

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_UpCounter_SS_Reset( window );
  Timebase_UpCounter_SS_Set_Securely( window, value );
  Timebase_UpCounter_SS_Set_ReloadValue(window, value);
} 
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	df 90       	pop	r13
     ff2:	cf 90       	pop	r12
     ff4:	08 95       	ret

00000ff6 <Timebase_UpCounter_SS_Update>:


void Timebase_UpCounter_SS_Update(uint8_t window){
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	00 d0       	rcall	.+0      	; 0x101c <Timebase_UpCounter_SS_Update+0x26>
    101c:	00 d0       	rcall	.+0      	; 0x101e <Timebase_UpCounter_SS_Update+0x28>
    101e:	00 d0       	rcall	.+0      	; 0x1020 <Timebase_UpCounter_SS_Update+0x2a>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1024:	20 90 2e 01 	lds	r2, 0x012E
    1028:	30 90 2f 01 	lds	r3, 0x012F
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	3e 83       	std	Y+6, r19	; 0x06
    1032:	2d 83       	std	Y+5, r18	; 0x05
    1034:	8d e1       	ldi	r24, 0x1D	; 29
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	28 9f       	mul	r18, r24
    103a:	50 01       	movw	r10, r0
    103c:	29 9f       	mul	r18, r25
    103e:	b0 0c       	add	r11, r0
    1040:	38 9f       	mul	r19, r24
    1042:	b0 0c       	add	r11, r0
    1044:	11 24       	eor	r1, r1
    1046:	a2 0c       	add	r10, r2
    1048:	b3 1c       	adc	r11, r3
    104a:	d5 01       	movw	r26, r10
    104c:	5e 96       	adiw	r26, 0x1e	; 30
    104e:	8c 91       	ld	r24, X
    1050:	86 95       	lsr	r24
    1052:	8f 70       	andi	r24, 0x0F	; 15
} 


void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	09 f0       	breq	.+2      	; 0x105a <Timebase_UpCounter_SS_Update+0x64>
    1058:	9f c0       	rjmp	.+318    	; 0x1198 <Timebase_UpCounter_SS_Update+0x1a2>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    105a:	f1 01       	movw	r30, r2
    105c:	84 85       	ldd	r24, Z+12	; 0x0c
    105e:	95 85       	ldd	r25, Z+13	; 0x0d
    1060:	a6 85       	ldd	r26, Z+14	; 0x0e
    1062:	b7 85       	ldd	r27, Z+15	; 0x0f
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1064:	e2 84       	ldd	r14, Z+10	; 0x0a
    1066:	f3 84       	ldd	r15, Z+11	; 0x0b

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
    1068:	00 e0       	ldi	r16, 0x00	; 0
    106a:	10 e0       	ldi	r17, 0x00	; 0
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
    106c:	f5 01       	movw	r30, r10
    106e:	27 8d       	ldd	r18, Z+31	; 0x1f
    1070:	30 a1       	ldd	r19, Z+32	; 0x20
    1072:	41 a1       	ldd	r20, Z+33	; 0x21
    1074:	52 a1       	ldd	r21, Z+34	; 0x22
    1076:	28 1b       	sub	r18, r24
    1078:	39 0b       	sbc	r19, r25
    107a:	4a 0b       	sbc	r20, r26
    107c:	5b 0b       	sbc	r21, r27
	curr_s *= Timebase->Config.UpdateRate;
    107e:	d1 01       	movw	r26, r2
    1080:	6d 91       	ld	r22, X+
    1082:	7c 91       	ld	r23, X
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 4d 20 	call	0x409a	; 0x409a <__mulsi3>
    108c:	9b 01       	movw	r18, r22
    108e:	ac 01       	movw	r20, r24
    1090:	2e 19       	sub	r18, r14
    1092:	3f 09       	sbc	r19, r15
    1094:	40 0b       	sbc	r20, r16
    1096:	51 0b       	sbc	r21, r17
	curr_ss += curr_s;
    1098:	f5 01       	movw	r30, r10
    109a:	83 a1       	ldd	r24, Z+35	; 0x23
    109c:	94 a1       	ldd	r25, Z+36	; 0x24
    109e:	a5 a1       	ldd	r26, Z+37	; 0x25
    10a0:	b6 a1       	ldd	r27, Z+38	; 0x26
    10a2:	28 0f       	add	r18, r24
    10a4:	39 1f       	adc	r19, r25
    10a6:	4a 1f       	adc	r20, r26
    10a8:	5b 1f       	adc	r21, r27
    10aa:	57 ff       	sbrs	r21, 7
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <Timebase_UpCounter_SS_Update+0xc0>
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    10b6:	8d e1       	ldi	r24, 0x1D	; 29
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	6d 81       	ldd	r22, Y+5	; 0x05
    10bc:	7e 81       	ldd	r23, Y+6	; 0x06
    10be:	68 9f       	mul	r22, r24
    10c0:	f0 01       	movw	r30, r0
    10c2:	69 9f       	mul	r22, r25
    10c4:	f0 0d       	add	r31, r0
    10c6:	78 9f       	mul	r23, r24
    10c8:	f0 0d       	add	r31, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	e2 0d       	add	r30, r2
    10ce:	f3 1d       	adc	r31, r3
    10d0:	23 a7       	std	Z+43, r18	; 0x2b
    10d2:	34 a7       	std	Z+44, r19	; 0x2c
    10d4:	45 a7       	std	Z+45, r20	; 0x2d
    10d6:	56 a7       	std	Z+46, r21	; 0x2e
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    10d8:	87 a1       	ldd	r24, Z+39	; 0x27
    10da:	90 a5       	ldd	r25, Z+40	; 0x28
    10dc:	a1 a5       	ldd	r26, Z+41	; 0x29
    10de:	b2 a5       	ldd	r27, Z+42	; 0x2a

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    10e0:	82 1b       	sub	r24, r18
    10e2:	93 0b       	sbc	r25, r19
    10e4:	a4 0b       	sbc	r26, r20
    10e6:	b5 0b       	sbc	r27, r21
    10e8:	b7 ff       	sbrs	r27, 7
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <Timebase_UpCounter_SS_Update+0xfe>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	87 a7       	std	Z+47, r24	; 0x2f
    10f6:	90 ab       	std	Z+48, r25	; 0x30
    10f8:	a1 ab       	std	Z+49, r26	; 0x31
    10fa:	b2 ab       	std	Z+50, r27	; 0x32
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    10fc:	8d e1       	ldi	r24, 0x1D	; 29
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	ad 81       	ldd	r26, Y+5	; 0x05
    1102:	be 81       	ldd	r27, Y+6	; 0x06
    1104:	a8 9f       	mul	r26, r24
    1106:	b0 01       	movw	r22, r0
    1108:	a9 9f       	mul	r26, r25
    110a:	70 0d       	add	r23, r0
    110c:	b8 9f       	mul	r27, r24
    110e:	70 0d       	add	r23, r0
    1110:	11 24       	eor	r1, r1
    1112:	62 0d       	add	r22, r2
    1114:	73 1d       	adc	r23, r3
    1116:	fb 01       	movw	r30, r22
    1118:	83 a5       	ldd	r24, Z+43	; 0x2b
    111a:	94 a5       	ldd	r25, Z+44	; 0x2c
    111c:	a5 a5       	ldd	r26, Z+45	; 0x2d
    111e:	b6 a5       	ldd	r27, Z+46	; 0x2e
    1120:	18 16       	cp	r1, r24
    1122:	19 06       	cpc	r1, r25
    1124:	1a 06       	cpc	r1, r26
    1126:	1b 06       	cpc	r1, r27
    1128:	0c f4       	brge	.+2      	; 0x112c <Timebase_UpCounter_SS_Update+0x136>
    112a:	c2 c0       	rjmp	.+388    	; 0x12b0 <Timebase_UpCounter_SS_Update+0x2ba>
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    112c:	db 01       	movw	r26, r22
    112e:	5f 96       	adiw	r26, 0x1f	; 31
    1130:	1d 92       	st	X+, r1
    1132:	1d 92       	st	X+, r1
    1134:	1d 92       	st	X+, r1
    1136:	1c 92       	st	X, r1
    1138:	92 97       	sbiw	r26, 0x22	; 34
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    113a:	13 a2       	std	Z+35, r1	; 0x23
    113c:	14 a2       	std	Z+36, r1	; 0x24
    113e:	15 a2       	std	Z+37, r1	; 0x25
    1140:	16 a2       	std	Z+38, r1	; 0x26

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
    1142:	9b 96       	adiw	r26, 0x2b	; 43
    1144:	1d 92       	st	X+, r1
    1146:	1d 92       	st	X+, r1
    1148:	1d 92       	st	X+, r1
    114a:	1c 92       	st	X, r1
    114c:	9e 97       	sbiw	r26, 0x2e	; 46
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}


int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
    114e:	b7 96       	adiw	r30, 0x27	; 39

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    1150:	97 96       	adiw	r26, 0x27	; 39
    1152:	2c 91       	ld	r18, X
    1154:	31 81       	ldd	r19, Z+1	; 0x01
    1156:	42 81       	ldd	r20, Z+2	; 0x02
    1158:	53 81       	ldd	r21, Z+3	; 0x03
    115a:	c9 01       	movw	r24, r18
    115c:	da 01       	movw	r26, r20
    115e:	b7 ff       	sbrs	r27, 7
    1160:	04 c0       	rjmp	.+8      	; 0x116a <Timebase_UpCounter_SS_Update+0x174>
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e0       	ldi	r26, 0x00	; 0
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	fb 01       	movw	r30, r22
    116c:	87 a7       	std	Z+47, r24	; 0x2f
    116e:	90 ab       	std	Z+48, r25	; 0x30
    1170:	a1 ab       	std	Z+49, r26	; 0x31
    1172:	b2 ab       	std	Z+50, r27	; 0x32
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1174:	8d e1       	ldi	r24, 0x1D	; 29
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	3e 81       	ldd	r19, Y+6	; 0x06
    117c:	28 9f       	mul	r18, r24
    117e:	f0 01       	movw	r30, r0
    1180:	29 9f       	mul	r18, r25
    1182:	f0 0d       	add	r31, r0
    1184:	38 9f       	mul	r19, r24
    1186:	f0 0d       	add	r31, r0
    1188:	11 24       	eor	r1, r1
    118a:	e2 0d       	add	r30, r2
    118c:	f3 1d       	adc	r31, r3
    118e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1190:	81 7e       	andi	r24, 0xE1	; 225
    1192:	88 60       	ori	r24, 0x08	; 8
    1194:	86 8f       	std	Z+30, r24	; 0x1e
    1196:	8c c0       	rjmp	.+280    	; 0x12b0 <Timebase_UpCounter_SS_Update+0x2ba>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1198:	82 30       	cpi	r24, 0x02	; 2
    119a:	09 f0       	breq	.+2      	; 0x119e <Timebase_UpCounter_SS_Update+0x1a8>
    119c:	89 c0       	rjmp	.+274    	; 0x12b0 <Timebase_UpCounter_SS_Update+0x2ba>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    119e:	d1 01       	movw	r26, r2
    11a0:	1c 96       	adiw	r26, 0x0c	; 12
    11a2:	6d 91       	ld	r22, X+
    11a4:	7d 91       	ld	r23, X+
    11a6:	8d 91       	ld	r24, X+
    11a8:	9c 91       	ld	r25, X
    11aa:	1f 97       	sbiw	r26, 0x0f	; 15
    11ac:	69 83       	std	Y+1, r22	; 0x01
    11ae:	7a 83       	std	Y+2, r23	; 0x02
    11b0:	8b 83       	std	Y+3, r24	; 0x03
    11b2:	9c 83       	std	Y+4, r25	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    11b4:	1a 96       	adiw	r26, 0x0a	; 10
    11b6:	8d 90       	ld	r8, X+
    11b8:	9c 90       	ld	r9, X
    11ba:	1b 97       	sbiw	r26, 0x0b	; 11
  Timebase->UpCounterSS[window].Target = value;
}


int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
    11bc:	f5 01       	movw	r30, r10
    11be:	a3 a4       	ldd	r10, Z+43	; 0x2b
    11c0:	b4 a4       	ldd	r11, Z+44	; 0x2c
    11c2:	c5 a4       	ldd	r12, Z+45	; 0x2d
    11c4:	d6 a4       	ldd	r13, Z+46	; 0x2e
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	value      = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	subsec_val = value % Timebase->Config.UpdateRate;
    11c6:	2d 91       	ld	r18, X+
    11c8:	3c 91       	ld	r19, X
    11ca:	40 e0       	ldi	r20, 0x00	; 0
    11cc:	50 e0       	ldi	r21, 0x00	; 0
    11ce:	c6 01       	movw	r24, r12
    11d0:	b5 01       	movw	r22, r10
    11d2:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    11d6:	7b 01       	movw	r14, r22
    11d8:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
    11da:	d1 01       	movw	r26, r2
    11dc:	2d 91       	ld	r18, X+
    11de:	3c 91       	ld	r19, X
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	c6 01       	movw	r24, r12
    11e6:	b5 01       	movw	r22, r10
    11e8:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    11ec:	c9 01       	movw	r24, r18
    11ee:	da 01       	movw	r26, r20
    11f0:	2c 01       	movw	r4, r24
    11f2:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
    11f4:	aa 24       	eor	r10, r10
    11f6:	bb 24       	eor	r11, r11
    11f8:	8e 0c       	add	r8, r14
    11fa:	9f 1c       	adc	r9, r15
    11fc:	a0 1e       	adc	r10, r16
    11fe:	b1 1e       	adc	r11, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1200:	f1 01       	movw	r30, r2
    1202:	80 81       	ld	r24, Z
    1204:	91 81       	ldd	r25, Z+1	; 0x01
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	88 16       	cp	r8, r24
    120c:	99 06       	cpc	r9, r25
    120e:	aa 06       	cpc	r10, r26
    1210:	bb 06       	cpc	r11, r27
    1212:	94 f0       	brlt	.+36     	; 0x1238 <Timebase_UpCounter_SS_Update+0x242>
	  sec_val += 1;
    1214:	08 94       	sec
    1216:	41 1c       	adc	r4, r1
    1218:	51 1c       	adc	r5, r1
    121a:	61 1c       	adc	r6, r1
    121c:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    121e:	20 81       	ld	r18, Z
    1220:	31 81       	ldd	r19, Z+1	; 0x01
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	c5 01       	movw	r24, r10
    1228:	b4 01       	movw	r22, r8
    122a:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    122e:	ac 01       	movw	r20, r24
    1230:	cb 01       	movw	r24, r22
    1232:	da 01       	movw	r26, r20
    1234:	4c 01       	movw	r8, r24
    1236:	5d 01       	movw	r10, r26
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1238:	8d e1       	ldi	r24, 0x1D	; 29
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	2d 81       	ldd	r18, Y+5	; 0x05
    123e:	3e 81       	ldd	r19, Y+6	; 0x06
    1240:	28 9f       	mul	r18, r24
    1242:	b0 01       	movw	r22, r0
    1244:	29 9f       	mul	r18, r25
    1246:	70 0d       	add	r23, r0
    1248:	38 9f       	mul	r19, r24
    124a:	70 0d       	add	r23, r0
    124c:	11 24       	eor	r1, r1
    124e:	62 0d       	add	r22, r2
    1250:	73 1d       	adc	r23, r3
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	ab 81       	ldd	r26, Y+3	; 0x03
    1258:	bc 81       	ldd	r27, Y+4	; 0x04
    125a:	84 0d       	add	r24, r4
    125c:	95 1d       	adc	r25, r5
    125e:	a6 1d       	adc	r26, r6
    1260:	b7 1d       	adc	r27, r7
    1262:	fb 01       	movw	r30, r22
    1264:	87 8f       	std	Z+31, r24	; 0x1f
    1266:	90 a3       	std	Z+32, r25	; 0x20
    1268:	a1 a3       	std	Z+33, r26	; 0x21
    126a:	b2 a3       	std	Z+34, r27	; 0x22
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    126c:	db 01       	movw	r26, r22
    126e:	93 96       	adiw	r26, 0x23	; 35
    1270:	8d 92       	st	X+, r8
    1272:	9d 92       	st	X+, r9
    1274:	ad 92       	st	X+, r10
    1276:	bc 92       	st	X, r11
    1278:	96 97       	sbiw	r26, 0x26	; 38
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
    127a:	97 96       	adiw	r26, 0x27	; 39
    127c:	2d 91       	ld	r18, X+
    127e:	3d 91       	ld	r19, X+
    1280:	4d 91       	ld	r20, X+
    1282:	5c 91       	ld	r21, X
    1284:	9a 97       	sbiw	r26, 0x2a	; 42
    1286:	9b 96       	adiw	r26, 0x2b	; 43
    1288:	8d 91       	ld	r24, X+
    128a:	9d 91       	ld	r25, X+
    128c:	0d 90       	ld	r0, X+
    128e:	bc 91       	ld	r27, X
    1290:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    1292:	28 1b       	sub	r18, r24
    1294:	39 0b       	sbc	r19, r25
    1296:	4a 0b       	sbc	r20, r26
    1298:	5b 0b       	sbc	r21, r27
    129a:	57 ff       	sbrs	r21, 7
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <Timebase_UpCounter_SS_Update+0x2b0>
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	fb 01       	movw	r30, r22
    12a8:	27 a7       	std	Z+47, r18	; 0x2f
    12aa:	30 ab       	std	Z+48, r19	; 0x30
    12ac:	41 ab       	std	Z+49, r20	; 0x31
    12ae:	52 ab       	std	Z+50, r21	; 0x32
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    12b0:	26 96       	adiw	r28, 0x06	; 6
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	de bf       	out	0x3e, r29	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	cd bf       	out	0x3d, r28	; 61
    12bc:	cf 91       	pop	r28
    12be:	df 91       	pop	r29
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	5f 90       	pop	r5
    12da:	4f 90       	pop	r4
    12dc:	3f 90       	pop	r3
    12de:	2f 90       	pop	r2
    12e0:	08 95       	ret

000012e2 <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	e0 91 2e 01 	lds	r30, 0x012E
    12e8:	f0 91 2f 01 	lds	r31, 0x012F
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	2d e1       	ldi	r18, 0x1D	; 29
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	bc 01       	movw	r22, r24
    12f4:	62 9f       	mul	r22, r18
    12f6:	c0 01       	movw	r24, r0
    12f8:	63 9f       	mul	r22, r19
    12fa:	90 0d       	add	r25, r0
    12fc:	72 9f       	mul	r23, r18
    12fe:	90 0d       	add	r25, r0
    1300:	11 24       	eor	r1, r1
    1302:	e8 0f       	add	r30, r24
    1304:	f9 1f       	adc	r31, r25
    1306:	86 8d       	ldd	r24, Z+30	; 0x1e
    1308:	86 95       	lsr	r24
    130a:	8f 70       	andi	r24, 0x0F	; 15
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	09 f4       	brne	.+2      	; 0x1312 <Timebase_UpCounter_SS_Expired+0x30>
    1310:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1312:	84 2f       	mov	r24, r20
    1314:	08 95       	ret

00001316 <Timebase_UpCounter_SS_Expired_Event>:


uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1316:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1318:	e0 91 2e 01 	lds	r30, 0x012E
    131c:	f0 91 2f 01 	lds	r31, 0x012F
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	8d e1       	ldi	r24, 0x1D	; 29
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	bc 01       	movw	r22, r24
    132a:	26 9f       	mul	r18, r22
    132c:	c0 01       	movw	r24, r0
    132e:	27 9f       	mul	r18, r23
    1330:	90 0d       	add	r25, r0
    1332:	36 9f       	mul	r19, r22
    1334:	90 0d       	add	r25, r0
    1336:	11 24       	eor	r1, r1
    1338:	e8 0f       	add	r30, r24
    133a:	f9 1f       	adc	r31, r25
    133c:	86 8d       	ldd	r24, Z+30	; 0x1e
    133e:	86 95       	lsr	r24
    1340:	8f 70       	andi	r24, 0x0F	; 15
    1342:	84 30       	cpi	r24, 0x04	; 4
    1344:	11 f0       	breq	.+4      	; 0x134a <Timebase_UpCounter_SS_Expired_Event+0x34>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	08 95       	ret
  Timebase_UpCounter_SS_Set_ReloadValue(window, 0);
} 


void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    134a:	84 2f       	mov	r24, r20
    134c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Timebase_UpCounter_SS_Reset>
    1350:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1352:	08 95       	ret

00001354 <Timebase_UpCounter_SS_Oneshot_Expired_Event>:



uint8_t Timebase_UpCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_UpCounter_SS_Expired_Event(window);
    1354:	0e 94 8b 09 	call	0x1316	; 0x1316 <Timebase_UpCounter_SS_Expired_Event>
}
    1358:	08 95       	ret

0000135a <Timebase_UpCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_UpCounter_SS_Continuous_Expired_Event(uint8_t window){
    135a:	df 92       	push	r13
    135c:	ef 92       	push	r14
    135e:	ff 92       	push	r15
    1360:	0f 93       	push	r16
    1362:	1f 93       	push	r17
    1364:	d8 2e       	mov	r13, r24

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1366:	e0 91 2e 01 	lds	r30, 0x012E
    136a:	f0 91 2f 01 	lds	r31, 0x012F
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_UpCounter_SS_Expired_Event(window);
}


uint8_t Timebase_UpCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1372:	8d e1       	ldi	r24, 0x1D	; 29
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	ac 01       	movw	r20, r24
    1378:	24 9f       	mul	r18, r20
    137a:	c0 01       	movw	r24, r0
    137c:	25 9f       	mul	r18, r21
    137e:	90 0d       	add	r25, r0
    1380:	34 9f       	mul	r19, r20
    1382:	90 0d       	add	r25, r0
    1384:	11 24       	eor	r1, r1
    1386:	e8 0f       	add	r30, r24
    1388:	f9 1f       	adc	r31, r25
    138a:	86 8d       	ldd	r24, Z+30	; 0x1e
    138c:	86 95       	lsr	r24
    138e:	8f 70       	andi	r24, 0x0F	; 15
    1390:	84 30       	cpi	r24, 0x04	; 4
    1392:	11 f0       	breq	.+4      	; 0x1398 <Timebase_UpCounter_SS_Continuous_Expired_Event+0x3e>
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <Timebase_UpCounter_SS_Continuous_Expired_Event+0x58>
void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_UpCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounterSS[window].ReloadValue;
    1398:	e7 a8       	ldd	r14, Z+55	; 0x37
    139a:	f0 ac       	ldd	r15, Z+56	; 0x38
    139c:	01 ad       	ldd	r16, Z+57	; 0x39
    139e:	12 ad       	ldd	r17, Z+58	; 0x3a
  Timebase_UpCounter_SS_Set_ReloadValue(window, 0);
} 


void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    13a0:	8d 2d       	mov	r24, r13
    13a2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Timebase_UpCounter_SS_Reset>

uint8_t Timebase_UpCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_UpCounter_SS_Get_ReloadValue(window);
    Timebase_UpCounter_SS_Clear_All_Flags( window );
	Timebase_UpCounter_SS_Set_Securely(window, temp);
    13a6:	8d 2d       	mov	r24, r13
    13a8:	b8 01       	movw	r22, r16
    13aa:	a7 01       	movw	r20, r14
    13ac:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timebase_UpCounter_SS_Set_Securely>
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	08 95       	ret

000013be <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
  Timebase->UpCounterSS[window].PeriodValue = value;
}


uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    13be:	e0 91 2e 01 	lds	r30, 0x012E
    13c2:	f0 91 2f 01 	lds	r31, 0x012F
    13c6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    13c8:	2d e1       	ldi	r18, 0x1D	; 29
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	dc 01       	movw	r26, r24
    13ce:	a2 9f       	mul	r26, r18
    13d0:	c0 01       	movw	r24, r0
    13d2:	a3 9f       	mul	r26, r19
    13d4:	90 0d       	add	r25, r0
    13d6:	b2 9f       	mul	r27, r18
    13d8:	90 0d       	add	r25, r0
    13da:	11 24       	eor	r1, r1
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	86 8d       	ldd	r24, Z+30	; 0x1e
    13e2:	80 fd       	sbrc	r24, 0
    13e4:	0f c0       	rjmp	.+30     	; 0x1404 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
  return Timebase->UpCounterSS[window].PeriodValue;
}


void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    13e6:	87 a5       	ldd	r24, Z+47	; 0x2f
    13e8:	90 a9       	ldd	r25, Z+48	; 0x30
    13ea:	a1 a9       	ldd	r26, Z+49	; 0x31
    13ec:	b2 a9       	ldd	r27, Z+50	; 0x32
    13ee:	84 0f       	add	r24, r20
    13f0:	95 1f       	adc	r25, r21
    13f2:	a6 1f       	adc	r26, r22
    13f4:	b7 1f       	adc	r27, r23
    13f6:	83 ab       	std	Z+51, r24	; 0x33
    13f8:	94 ab       	std	Z+52, r25	; 0x34
    13fa:	a5 ab       	std	Z+53, r26	; 0x35
    13fc:	b6 ab       	std	Z+54, r27	; 0x36
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}


void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    13fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	86 8f       	std	Z+30, r24	; 0x1e
    1404:	08 95       	ret

00001406 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  Timebase->UpCounterSS[window].Temporary = value;
}


int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1406:	e0 91 2e 01 	lds	r30, 0x012E
    140a:	f0 91 2f 01 	lds	r31, 0x012F
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	2d e1       	ldi	r18, 0x1D	; 29
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	ac 01       	movw	r20, r24
    1416:	42 9f       	mul	r20, r18
    1418:	c0 01       	movw	r24, r0
    141a:	43 9f       	mul	r20, r19
    141c:	90 0d       	add	r25, r0
    141e:	52 9f       	mul	r21, r18
    1420:	90 0d       	add	r25, r0
    1422:	11 24       	eor	r1, r1
    1424:	e8 0f       	add	r30, r24
    1426:	f9 1f       	adc	r31, r25
    1428:	23 a9       	ldd	r18, Z+51	; 0x33
    142a:	34 a9       	ldd	r19, Z+52	; 0x34
    142c:	45 a9       	ldd	r20, Z+53	; 0x35
    142e:	56 a9       	ldd	r21, Z+54	; 0x36
}


int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1430:	87 a5       	ldd	r24, Z+47	; 0x2f
    1432:	90 a9       	ldd	r25, Z+48	; 0x30
    1434:	a1 a9       	ldd	r26, Z+49	; 0x31
    1436:	b2 a9       	ldd	r27, Z+50	; 0x32
    1438:	28 1b       	sub	r18, r24
    143a:	39 0b       	sbc	r19, r25
    143c:	4a 0b       	sbc	r20, r26
    143e:	5b 0b       	sbc	r21, r27
    1440:	57 ff       	sbrs	r21, 7
    1442:	04 c0       	rjmp	.+8      	; 0x144c <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    1444:	20 e0       	ldi	r18, 0x00	; 0
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    144c:	b9 01       	movw	r22, r18
    144e:	ca 01       	movw	r24, r20
    1450:	08 95       	ret

00001452 <Timebase_UpCounter_SS_Period_Value_Expired>:


uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
  Timebase->UpCounterSS[window].Temporary = value;
}


int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1456:	c0 91 2e 01 	lds	r28, 0x012E
    145a:	d0 91 2f 01 	lds	r29, 0x012F
    145e:	68 2f       	mov	r22, r24
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	8d e1       	ldi	r24, 0x1D	; 29
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	68 9f       	mul	r22, r24
    1468:	f0 01       	movw	r30, r0
    146a:	69 9f       	mul	r22, r25
    146c:	f0 0d       	add	r31, r0
    146e:	78 9f       	mul	r23, r24
    1470:	f0 0d       	add	r31, r0
    1472:	11 24       	eor	r1, r1
    1474:	ec 0f       	add	r30, r28
    1476:	fd 1f       	adc	r31, r29
    1478:	23 a9       	ldd	r18, Z+51	; 0x33
    147a:	34 a9       	ldd	r19, Z+52	; 0x34
    147c:	45 a9       	ldd	r20, Z+53	; 0x35
    147e:	56 a9       	ldd	r21, Z+54	; 0x36
}


int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1480:	87 a5       	ldd	r24, Z+47	; 0x2f
    1482:	90 a9       	ldd	r25, Z+48	; 0x30
    1484:	a1 a9       	ldd	r26, Z+49	; 0x31
    1486:	b2 a9       	ldd	r27, Z+50	; 0x32
    1488:	28 1b       	sub	r18, r24
    148a:	39 0b       	sbc	r19, r25
    148c:	4a 0b       	sbc	r20, r26
    148e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1490:	57 fd       	sbrc	r21, 7
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1494:	21 15       	cp	r18, r1
    1496:	31 05       	cpc	r19, r1
    1498:	41 05       	cpc	r20, r1
    149a:	51 05       	cpc	r21, r1
    149c:	11 f0       	breq	.+4      	; 0x14a2 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	12 c0       	rjmp	.+36     	; 0x14c6 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	8d e1       	ldi	r24, 0x1D	; 29
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	ac 01       	movw	r20, r24
    14aa:	64 9f       	mul	r22, r20
    14ac:	c0 01       	movw	r24, r0
    14ae:	65 9f       	mul	r22, r21
    14b0:	90 0d       	add	r25, r0
    14b2:	74 9f       	mul	r23, r20
    14b4:	90 0d       	add	r25, r0
    14b6:	11 24       	eor	r1, r1
    14b8:	c8 0f       	add	r28, r24
    14ba:	d9 1f       	adc	r29, r25
    14bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    14be:	80 ff       	sbrs	r24, 0
    14c0:	21 e0       	ldi	r18, 0x01	; 1
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    14c6:	82 2f       	mov	r24, r18
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	08 95       	ret

000014ce <Timebase_UpCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    14ce:	1f 93       	push	r17
    14d0:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    14d2:	0e 94 29 0a 	call	0x1452	; 0x1452 <Timebase_UpCounter_SS_Period_Value_Expired>
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	11 f0       	breq	.+4      	; 0x14de <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	16 c0       	rjmp	.+44     	; 0x150a <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14de:	e0 91 2e 01 	lds	r30, 0x012E
    14e2:	f0 91 2f 01 	lds	r31, 0x012F
    14e6:	21 2f       	mov	r18, r17
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8d e1       	ldi	r24, 0x1D	; 29
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	ac 01       	movw	r20, r24
    14f0:	24 9f       	mul	r18, r20
    14f2:	c0 01       	movw	r24, r0
    14f4:	25 9f       	mul	r18, r21
    14f6:	90 0d       	add	r25, r0
    14f8:	34 9f       	mul	r19, r20
    14fa:	90 0d       	add	r25, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	e8 0f       	add	r30, r24
    1500:	f9 1f       	adc	r31, r25
    1502:	86 8d       	ldd	r24, Z+30	; 0x1e
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	86 8f       	std	Z+30, r24	; 0x1e
    1508:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    150a:	1f 91       	pop	r17
    150c:	08 95       	ret

0000150e <Timebase_UpCounter_SS_Update_All>:


void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase_UpCounter_SS_Update(i);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	0e 94 fb 07 	call	0xff6	; 0xff6 <Timebase_UpCounter_SS_Update>
  }
}
    1514:	08 95       	ret

00001516 <Timebase_UpCounter_SS_Reset_All>:


void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase_UpCounter_SS_Reset(i);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	0e 94 8e 06 	call	0xd1c	; 0xd1c <Timebase_UpCounter_SS_Reset>
  }
}
    151c:	08 95       	ret

0000151e <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    151e:	e0 91 2e 01 	lds	r30, 0x012E
    1522:	f0 91 2f 01 	lds	r31, 0x012F
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	29 e1       	ldi	r18, 0x19	; 25
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	ac 01       	movw	r20, r24
    152e:	42 9f       	mul	r20, r18
    1530:	c0 01       	movw	r24, r0
    1532:	43 9f       	mul	r20, r19
    1534:	90 0d       	add	r25, r0
    1536:	52 9f       	mul	r21, r18
    1538:	90 0d       	add	r25, r0
    153a:	11 24       	eor	r1, r1
    153c:	e8 0f       	add	r30, r24
    153e:	f9 1f       	adc	r31, r25
    1540:	83 ad       	ldd	r24, Z+59	; 0x3b
    1542:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    1544:	8f 70       	andi	r24, 0x0F	; 15
    1546:	08 95       	ret

00001548 <Timebase_UpCounter_Set_Status>:


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1548:	e0 91 2e 01 	lds	r30, 0x012E
    154c:	f0 91 2f 01 	lds	r31, 0x012F
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	29 e1       	ldi	r18, 0x19	; 25
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	ac 01       	movw	r20, r24
    1558:	42 9f       	mul	r20, r18
    155a:	c0 01       	movw	r24, r0
    155c:	43 9f       	mul	r20, r19
    155e:	90 0d       	add	r25, r0
    1560:	52 9f       	mul	r21, r18
    1562:	90 0d       	add	r25, r0
    1564:	11 24       	eor	r1, r1
    1566:	e8 0f       	add	r30, r24
    1568:	f9 1f       	adc	r31, r25
    156a:	6f 70       	andi	r22, 0x0F	; 15
    156c:	66 0f       	add	r22, r22
    156e:	83 ad       	ldd	r24, Z+59	; 0x3b
    1570:	81 7e       	andi	r24, 0xE1	; 225
    1572:	86 2b       	or	r24, r22
    1574:	83 af       	std	Z+59, r24	; 0x3b
}
    1576:	08 95       	ret

00001578 <Timebase_UpCounter_Get_Value>:


int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    1578:	e0 91 2e 01 	lds	r30, 0x012E
    157c:	f0 91 2f 01 	lds	r31, 0x012F
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	29 e1       	ldi	r18, 0x19	; 25
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	ac 01       	movw	r20, r24
    1588:	42 9f       	mul	r20, r18
    158a:	c0 01       	movw	r24, r0
    158c:	43 9f       	mul	r20, r19
    158e:	90 0d       	add	r25, r0
    1590:	52 9f       	mul	r21, r18
    1592:	90 0d       	add	r25, r0
    1594:	11 24       	eor	r1, r1
    1596:	e8 0f       	add	r30, r24
    1598:	f9 1f       	adc	r31, r25
    159a:	e8 5b       	subi	r30, 0xB8	; 184
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	08 95       	ret

000015a8 <Timebase_UpCounter_Set_Value>:


void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    15ac:	c0 91 2e 01 	lds	r28, 0x012E
    15b0:	d0 91 2f 01 	lds	r29, 0x012F
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	29 e1       	ldi	r18, 0x19	; 25
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	fc 01       	movw	r30, r24
    15bc:	e2 9f       	mul	r30, r18
    15be:	c0 01       	movw	r24, r0
    15c0:	e3 9f       	mul	r30, r19
    15c2:	90 0d       	add	r25, r0
    15c4:	f2 9f       	mul	r31, r18
    15c6:	90 0d       	add	r25, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	c8 0f       	add	r28, r24
    15cc:	d9 1f       	adc	r29, r25
    15ce:	c8 5b       	subi	r28, 0xB8	; 184
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	ca 01       	movw	r24, r20
    15d4:	db 01       	movw	r26, r22
    15d6:	b7 ff       	sbrs	r27, 7
    15d8:	04 c0       	rjmp	.+8      	; 0x15e2 <Timebase_UpCounter_Set_Value+0x3a>
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	a0 e0       	ldi	r26, 0x00	; 0
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	88 83       	st	Y, r24
    15e4:	99 83       	std	Y+1, r25	; 0x01
    15e6:	aa 83       	std	Y+2, r26	; 0x02
    15e8:	bb 83       	std	Y+3, r27	; 0x03
}
    15ea:	df 91       	pop	r29
    15ec:	cf 91       	pop	r28
    15ee:	08 95       	ret

000015f0 <Timebase_UpCounter_Get_EndValueSec>:


int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    15f0:	e0 91 2e 01 	lds	r30, 0x012E
    15f4:	f0 91 2f 01 	lds	r31, 0x012F
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	29 e1       	ldi	r18, 0x19	; 25
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	ac 01       	movw	r20, r24
    1600:	42 9f       	mul	r20, r18
    1602:	c0 01       	movw	r24, r0
    1604:	43 9f       	mul	r20, r19
    1606:	90 0d       	add	r25, r0
    1608:	52 9f       	mul	r21, r18
    160a:	90 0d       	add	r25, r0
    160c:	11 24       	eor	r1, r1
    160e:	e8 0f       	add	r30, r24
    1610:	f9 1f       	adc	r31, r25
    1612:	df 01       	movw	r26, r30
    1614:	dc 96       	adiw	r26, 0x3c	; 60
    1616:	64 ad       	ldd	r22, Z+60	; 0x3c
    1618:	11 96       	adiw	r26, 0x01	; 1
    161a:	7c 91       	ld	r23, X
    161c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    161e:	12 96       	adiw	r26, 0x02	; 2
    1620:	8c 91       	ld	r24, X
    1622:	12 97       	sbiw	r26, 0x02	; 2
    1624:	13 96       	adiw	r26, 0x03	; 3
    1626:	9c 91       	ld	r25, X
    1628:	08 95       	ret

0000162a <Timebase_UpCounter_Get_EndValueSubSec>:


int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    162a:	e0 91 2e 01 	lds	r30, 0x012E
    162e:	f0 91 2f 01 	lds	r31, 0x012F
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	29 e1       	ldi	r18, 0x19	; 25
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	ac 01       	movw	r20, r24
    163a:	42 9f       	mul	r20, r18
    163c:	c0 01       	movw	r24, r0
    163e:	43 9f       	mul	r20, r19
    1640:	90 0d       	add	r25, r0
    1642:	52 9f       	mul	r21, r18
    1644:	90 0d       	add	r25, r0
    1646:	11 24       	eor	r1, r1
    1648:	e8 0f       	add	r30, r24
    164a:	f9 1f       	adc	r31, r25
    164c:	df 01       	movw	r26, r30
    164e:	dc 96       	adiw	r26, 0x3c	; 60
    1650:	64 ad       	ldd	r22, Z+60	; 0x3c
    1652:	11 96       	adiw	r26, 0x01	; 1
    1654:	7c 91       	ld	r23, X
    1656:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1658:	12 96       	adiw	r26, 0x02	; 2
    165a:	8c 91       	ld	r24, X
    165c:	12 97       	sbiw	r26, 0x02	; 2
    165e:	13 96       	adiw	r26, 0x03	; 3
    1660:	9c 91       	ld	r25, X
    1662:	08 95       	ret

00001664 <Timebase_UpCounter_Set_EndValueSec>:


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1664:	e0 91 2e 01 	lds	r30, 0x012E
    1668:	f0 91 2f 01 	lds	r31, 0x012F
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	29 e1       	ldi	r18, 0x19	; 25
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	dc 01       	movw	r26, r24
    1674:	a2 9f       	mul	r26, r18
    1676:	c0 01       	movw	r24, r0
    1678:	a3 9f       	mul	r26, r19
    167a:	90 0d       	add	r25, r0
    167c:	b2 9f       	mul	r27, r18
    167e:	90 0d       	add	r25, r0
    1680:	11 24       	eor	r1, r1
    1682:	e8 0f       	add	r30, r24
    1684:	f9 1f       	adc	r31, r25
    1686:	44 af       	std	Z+60, r20	; 0x3c
    1688:	55 af       	std	Z+61, r21	; 0x3d
    168a:	66 af       	std	Z+62, r22	; 0x3e
    168c:	77 af       	std	Z+63, r23	; 0x3f
}
    168e:	08 95       	ret

00001690 <Timebase_UpCounter_Set_EndValueSubSec>:


void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1690:	e0 91 2e 01 	lds	r30, 0x012E
    1694:	f0 91 2f 01 	lds	r31, 0x012F
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	29 e1       	ldi	r18, 0x19	; 25
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	dc 01       	movw	r26, r24
    16a0:	a2 9f       	mul	r26, r18
    16a2:	c0 01       	movw	r24, r0
    16a4:	a3 9f       	mul	r26, r19
    16a6:	90 0d       	add	r25, r0
    16a8:	b2 9f       	mul	r27, r18
    16aa:	90 0d       	add	r25, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	e8 0f       	add	r30, r24
    16b0:	f9 1f       	adc	r31, r25
    16b2:	44 af       	std	Z+60, r20	; 0x3c
    16b4:	55 af       	std	Z+61, r21	; 0x3d
    16b6:	66 af       	std	Z+62, r22	; 0x3e
    16b8:	77 af       	std	Z+63, r23	; 0x3f
}
    16ba:	08 95       	ret

000016bc <Timebase_UpCounter_Get_TargetValue>:


int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    16bc:	e0 91 2e 01 	lds	r30, 0x012E
    16c0:	f0 91 2f 01 	lds	r31, 0x012F
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	29 e1       	ldi	r18, 0x19	; 25
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	ac 01       	movw	r20, r24
    16cc:	42 9f       	mul	r20, r18
    16ce:	c0 01       	movw	r24, r0
    16d0:	43 9f       	mul	r20, r19
    16d2:	90 0d       	add	r25, r0
    16d4:	52 9f       	mul	r21, r18
    16d6:	90 0d       	add	r25, r0
    16d8:	11 24       	eor	r1, r1
    16da:	e8 0f       	add	r30, r24
    16dc:	f9 1f       	adc	r31, r25
    16de:	e0 5c       	subi	r30, 0xC0	; 192
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Target;
}
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	08 95       	ret

000016ec <Timebase_UpCounter_Set_TargetValue>:


void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    16ec:	e0 91 2e 01 	lds	r30, 0x012E
    16f0:	f0 91 2f 01 	lds	r31, 0x012F
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	29 e1       	ldi	r18, 0x19	; 25
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	dc 01       	movw	r26, r24
    16fc:	a2 9f       	mul	r26, r18
    16fe:	c0 01       	movw	r24, r0
    1700:	a3 9f       	mul	r26, r19
    1702:	90 0d       	add	r25, r0
    1704:	b2 9f       	mul	r27, r18
    1706:	90 0d       	add	r25, r0
    1708:	11 24       	eor	r1, r1
    170a:	e8 0f       	add	r30, r24
    170c:	f9 1f       	adc	r31, r25
    170e:	e0 5c       	subi	r30, 0xC0	; 192
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	40 83       	st	Z, r20
    1714:	51 83       	std	Z+1, r21	; 0x01
    1716:	62 83       	std	Z+2, r22	; 0x02
    1718:	73 83       	std	Z+3, r23	; 0x03
}
    171a:	08 95       	ret

0000171c <Timebase_UpCounter_Get_TemporaryValue>:


int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    171c:	e0 91 2e 01 	lds	r30, 0x012E
    1720:	f0 91 2f 01 	lds	r31, 0x012F
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	29 e1       	ldi	r18, 0x19	; 25
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	ac 01       	movw	r20, r24
    172c:	42 9f       	mul	r20, r18
    172e:	c0 01       	movw	r24, r0
    1730:	43 9f       	mul	r20, r19
    1732:	90 0d       	add	r25, r0
    1734:	52 9f       	mul	r21, r18
    1736:	90 0d       	add	r25, r0
    1738:	11 24       	eor	r1, r1
    173a:	e8 0f       	add	r30, r24
    173c:	f9 1f       	adc	r31, r25
    173e:	ec 5b       	subi	r30, 0xBC	; 188
    1740:	ff 4f       	sbci	r31, 0xFF	; 255
    1742:	60 81       	ld	r22, Z
    1744:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    1746:	82 81       	ldd	r24, Z+2	; 0x02
    1748:	93 81       	ldd	r25, Z+3	; 0x03
    174a:	08 95       	ret

0000174c <Timebase_UpCounter_Set_TemporaryValue>:


void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1750:	c0 91 2e 01 	lds	r28, 0x012E
    1754:	d0 91 2f 01 	lds	r29, 0x012F
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	29 e1       	ldi	r18, 0x19	; 25
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	fc 01       	movw	r30, r24
    1760:	e2 9f       	mul	r30, r18
    1762:	c0 01       	movw	r24, r0
    1764:	e3 9f       	mul	r30, r19
    1766:	90 0d       	add	r25, r0
    1768:	f2 9f       	mul	r31, r18
    176a:	90 0d       	add	r25, r0
    176c:	11 24       	eor	r1, r1
    176e:	c8 0f       	add	r28, r24
    1770:	d9 1f       	adc	r29, r25
    1772:	cc 5b       	subi	r28, 0xBC	; 188
    1774:	df 4f       	sbci	r29, 0xFF	; 255
    1776:	ca 01       	movw	r24, r20
    1778:	db 01       	movw	r26, r22
    177a:	b7 ff       	sbrs	r27, 7
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <Timebase_UpCounter_Set_TemporaryValue+0x3a>
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e0       	ldi	r26, 0x00	; 0
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	88 83       	st	Y, r24
    1788:	99 83       	std	Y+1, r25	; 0x01
    178a:	aa 83       	std	Y+2, r26	; 0x02
    178c:	bb 83       	std	Y+3, r27	; 0x03
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <Timebase_UpCounter_Get_PeriodValue>:


int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1794:	e0 91 2e 01 	lds	r30, 0x012E
    1798:	f0 91 2f 01 	lds	r31, 0x012F
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	29 e1       	ldi	r18, 0x19	; 25
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	ac 01       	movw	r20, r24
    17a4:	42 9f       	mul	r20, r18
    17a6:	c0 01       	movw	r24, r0
    17a8:	43 9f       	mul	r20, r19
    17aa:	90 0d       	add	r25, r0
    17ac:	52 9f       	mul	r21, r18
    17ae:	90 0d       	add	r25, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	e8 0f       	add	r30, r24
    17b4:	f9 1f       	adc	r31, r25
    17b6:	e4 5b       	subi	r30, 0xB4	; 180
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	60 81       	ld	r22, Z
    17bc:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    17be:	82 81       	ldd	r24, Z+2	; 0x02
    17c0:	93 81       	ldd	r25, Z+3	; 0x03
    17c2:	08 95       	ret

000017c4 <Timebase_UpCounter_Set_PeriodValue>:


void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    17c4:	e0 91 2e 01 	lds	r30, 0x012E
    17c8:	f0 91 2f 01 	lds	r31, 0x012F
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	29 e1       	ldi	r18, 0x19	; 25
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	dc 01       	movw	r26, r24
    17d4:	a2 9f       	mul	r26, r18
    17d6:	c0 01       	movw	r24, r0
    17d8:	a3 9f       	mul	r26, r19
    17da:	90 0d       	add	r25, r0
    17dc:	b2 9f       	mul	r27, r18
    17de:	90 0d       	add	r25, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	e8 0f       	add	r30, r24
    17e4:	f9 1f       	adc	r31, r25
    17e6:	e4 5b       	subi	r30, 0xB4	; 180
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	40 83       	st	Z, r20
    17ec:	51 83       	std	Z+1, r21	; 0x01
    17ee:	62 83       	std	Z+2, r22	; 0x02
    17f0:	73 83       	std	Z+3, r23	; 0x03
}
    17f2:	08 95       	ret

000017f4 <Timebase_UpCounter_Get_Period_Flag>:


uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    17f4:	e0 91 2e 01 	lds	r30, 0x012E
    17f8:	f0 91 2f 01 	lds	r31, 0x012F
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	29 e1       	ldi	r18, 0x19	; 25
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	ac 01       	movw	r20, r24
    1804:	42 9f       	mul	r20, r18
    1806:	c0 01       	movw	r24, r0
    1808:	43 9f       	mul	r20, r19
    180a:	90 0d       	add	r25, r0
    180c:	52 9f       	mul	r21, r18
    180e:	90 0d       	add	r25, r0
    1810:	11 24       	eor	r1, r1
    1812:	e8 0f       	add	r30, r24
    1814:	f9 1f       	adc	r31, r25
    1816:	83 ad       	ldd	r24, Z+59	; 0x3b
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	08 95       	ret

0000181c <Timebase_UpCounter_Set_Period_Flag>:


void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    181c:	e0 91 2e 01 	lds	r30, 0x012E
    1820:	f0 91 2f 01 	lds	r31, 0x012F
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	29 e1       	ldi	r18, 0x19	; 25
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	ac 01       	movw	r20, r24
    182c:	42 9f       	mul	r20, r18
    182e:	c0 01       	movw	r24, r0
    1830:	43 9f       	mul	r20, r19
    1832:	90 0d       	add	r25, r0
    1834:	52 9f       	mul	r21, r18
    1836:	90 0d       	add	r25, r0
    1838:	11 24       	eor	r1, r1
    183a:	e8 0f       	add	r30, r24
    183c:	f9 1f       	adc	r31, r25
    183e:	83 ad       	ldd	r24, Z+59	; 0x3b
    1840:	81 60       	ori	r24, 0x01	; 1
    1842:	83 af       	std	Z+59, r24	; 0x3b
}
    1844:	08 95       	ret

00001846 <Timebase_UpCounter_Clear_Period_Flag>:


void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1846:	e0 91 2e 01 	lds	r30, 0x012E
    184a:	f0 91 2f 01 	lds	r31, 0x012F
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	29 e1       	ldi	r18, 0x19	; 25
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	ac 01       	movw	r20, r24
    1856:	42 9f       	mul	r20, r18
    1858:	c0 01       	movw	r24, r0
    185a:	43 9f       	mul	r20, r19
    185c:	90 0d       	add	r25, r0
    185e:	52 9f       	mul	r21, r18
    1860:	90 0d       	add	r25, r0
    1862:	11 24       	eor	r1, r1
    1864:	e8 0f       	add	r30, r24
    1866:	f9 1f       	adc	r31, r25
    1868:	83 ad       	ldd	r24, Z+59	; 0x3b
    186a:	8e 7f       	andi	r24, 0xFE	; 254
    186c:	83 af       	std	Z+59, r24	; 0x3b
}
    186e:	08 95       	ret

00001870 <Timebase_UpCounter_Get_ReloadValue>:

int32_t Timebase_UpCounter_Get_ReloadValue(uint8_t window){
    1870:	e0 91 2e 01 	lds	r30, 0x012E
    1874:	f0 91 2f 01 	lds	r31, 0x012F
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	29 e1       	ldi	r18, 0x19	; 25
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	ac 01       	movw	r20, r24
    1880:	42 9f       	mul	r20, r18
    1882:	c0 01       	movw	r24, r0
    1884:	43 9f       	mul	r20, r19
    1886:	90 0d       	add	r25, r0
    1888:	52 9f       	mul	r21, r18
    188a:	90 0d       	add	r25, r0
    188c:	11 24       	eor	r1, r1
    188e:	e8 0f       	add	r30, r24
    1890:	f9 1f       	adc	r31, r25
    1892:	e0 5b       	subi	r30, 0xB0	; 176
    1894:	ff 4f       	sbci	r31, 0xFF	; 255
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].ReloadValue;
}
    189a:	82 81       	ldd	r24, Z+2	; 0x02
    189c:	93 81       	ldd	r25, Z+3	; 0x03
    189e:	08 95       	ret

000018a0 <Timebase_UpCounter_Set_ReloadValue>:

void Timebase_UpCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].ReloadValue = value;
    18a0:	e0 91 2e 01 	lds	r30, 0x012E
    18a4:	f0 91 2f 01 	lds	r31, 0x012F
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	29 e1       	ldi	r18, 0x19	; 25
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	dc 01       	movw	r26, r24
    18b0:	a2 9f       	mul	r26, r18
    18b2:	c0 01       	movw	r24, r0
    18b4:	a3 9f       	mul	r26, r19
    18b6:	90 0d       	add	r25, r0
    18b8:	b2 9f       	mul	r27, r18
    18ba:	90 0d       	add	r25, r0
    18bc:	11 24       	eor	r1, r1
    18be:	e8 0f       	add	r30, r24
    18c0:	f9 1f       	adc	r31, r25
    18c2:	e0 5b       	subi	r30, 0xB0	; 176
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	40 83       	st	Z, r20
    18c8:	51 83       	std	Z+1, r21	; 0x01
    18ca:	62 83       	std	Z+2, r22	; 0x02
    18cc:	73 83       	std	Z+3, r23	; 0x03
}
    18ce:	08 95       	ret

000018d0 <Timebase_UpCounter_Reset>:
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    18d0:	e0 91 2e 01 	lds	r30, 0x012E
    18d4:	f0 91 2f 01 	lds	r31, 0x012F
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	29 e1       	ldi	r18, 0x19	; 25
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	ac 01       	movw	r20, r24
    18e0:	42 9f       	mul	r20, r18
    18e2:	c0 01       	movw	r24, r0
    18e4:	43 9f       	mul	r20, r19
    18e6:	90 0d       	add	r25, r0
    18e8:	52 9f       	mul	r21, r18
    18ea:	90 0d       	add	r25, r0
    18ec:	11 24       	eor	r1, r1
    18ee:	e8 0f       	add	r30, r24
    18f0:	f9 1f       	adc	r31, r25
    18f2:	83 ad       	ldd	r24, Z+59	; 0x3b

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    18f4:	e8 5b       	subi	r30, 0xB8	; 184
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	10 82       	st	Z, r1
    18fa:	11 82       	std	Z+1, r1	; 0x01
    18fc:	12 82       	std	Z+2, r1	; 0x02
    18fe:	13 82       	std	Z+3, r1	; 0x03
    1900:	e8 54       	subi	r30, 0x48	; 72
    1902:	f0 40       	sbci	r31, 0x00	; 0
  Timebase->UpCounter[window].EndValue = value;
}


void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1904:	14 ae       	std	Z+60, r1	; 0x3c
    1906:	15 ae       	std	Z+61, r1	; 0x3d
    1908:	16 ae       	std	Z+62, r1	; 0x3e
    190a:	17 ae       	std	Z+63, r1	; 0x3f
  return Timebase->UpCounter[window].Target;
}


void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    190c:	e0 5c       	subi	r30, 0xC0	; 192
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	11 92       	st	Z+, r1
    1912:	11 92       	st	Z+, r1
    1914:	11 92       	st	Z+, r1
    1916:	11 92       	st	Z+, r1

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1918:	10 82       	st	Z, r1
    191a:	11 82       	std	Z+1, r1	; 0x01
    191c:	12 82       	std	Z+2, r1	; 0x02
    191e:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->UpCounter[window].PeriodValue;
}


void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1920:	38 96       	adiw	r30, 0x08	; 8
    1922:	10 82       	st	Z, r1
    1924:	11 82       	std	Z+1, r1	; 0x01
    1926:	12 82       	std	Z+2, r1	; 0x02
    1928:	13 82       	std	Z+3, r1	; 0x03
    192a:	ec 54       	subi	r30, 0x4C	; 76
    192c:	f0 40       	sbci	r31, 0x00	; 0
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    192e:	80 7e       	andi	r24, 0xE0	; 224
    1930:	83 af       	std	Z+59, r24	; 0x3b
int32_t Timebase_UpCounter_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounter[window].ReloadValue;
}

void Timebase_UpCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].ReloadValue = value;
    1932:	e0 5b       	subi	r30, 0xB0	; 176
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	10 82       	st	Z, r1
    1938:	11 82       	std	Z+1, r1	; 0x01
    193a:	12 82       	std	Z+2, r1	; 0x02
    193c:	13 82       	std	Z+3, r1	; 0x03
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
  Timebase_UpCounter_Set_ReloadValue(window, 0);
} 
    193e:	08 95       	ret

00001940 <Timebase_UpCounter_Clear_All_Flags>:


void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1940:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Timebase_UpCounter_Reset>
}
    1944:	08 95       	ret

00001946 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1946:	e0 91 2e 01 	lds	r30, 0x012E
    194a:	f0 91 2f 01 	lds	r31, 0x012F
    194e:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_UpCounter_Reset( window );
}


void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1950:	29 e1       	ldi	r18, 0x19	; 25
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	ac 01       	movw	r20, r24
    1956:	42 9f       	mul	r20, r18
    1958:	c0 01       	movw	r24, r0
    195a:	43 9f       	mul	r20, r19
    195c:	90 0d       	add	r25, r0
    195e:	52 9f       	mul	r21, r18
    1960:	90 0d       	add	r25, r0
    1962:	11 24       	eor	r1, r1
    1964:	e8 0f       	add	r30, r24
    1966:	f9 1f       	adc	r31, r25
    1968:	93 ad       	ldd	r25, Z+59	; 0x3b
    196a:	89 2f       	mov	r24, r25
    196c:	86 95       	lsr	r24
    196e:	8f 70       	andi	r24, 0x0F	; 15
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	19 f0       	breq	.+6      	; 0x197a <Timebase_UpCounter_Start+0x34>
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1974:	91 7e       	andi	r25, 0xE1	; 225
    1976:	92 60       	ori	r25, 0x02	; 2
    1978:	93 af       	std	Z+59, r25	; 0x3b
    197a:	08 95       	ret

0000197c <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    197c:	e0 91 2e 01 	lds	r30, 0x012E
    1980:	f0 91 2f 01 	lds	r31, 0x012F
    1984:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    1986:	29 e1       	ldi	r18, 0x19	; 25
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	ac 01       	movw	r20, r24
    198c:	42 9f       	mul	r20, r18
    198e:	c0 01       	movw	r24, r0
    1990:	43 9f       	mul	r20, r19
    1992:	90 0d       	add	r25, r0
    1994:	52 9f       	mul	r21, r18
    1996:	90 0d       	add	r25, r0
    1998:	11 24       	eor	r1, r1
    199a:	e8 0f       	add	r30, r24
    199c:	f9 1f       	adc	r31, r25
    199e:	93 ad       	ldd	r25, Z+59	; 0x3b
    19a0:	89 2f       	mov	r24, r25
    19a2:	86 95       	lsr	r24
    19a4:	8f 70       	andi	r24, 0x0F	; 15
    19a6:	82 30       	cpi	r24, 0x02	; 2
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <Timebase_UpCounter_Stop+0x34>
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    19aa:	91 7e       	andi	r25, 0xE1	; 225
    19ac:	94 60       	ori	r25, 0x04	; 4
    19ae:	93 af       	std	Z+59, r25	; 0x3b
    19b0:	08 95       	ret

000019b2 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    19b2:	a0 91 2e 01 	lds	r26, 0x012E
    19b6:	b0 91 2f 01 	lds	r27, 0x012F
    19ba:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    19bc:	29 e1       	ldi	r18, 0x19	; 25
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	82 9f       	mul	r24, r18
    19c2:	f0 01       	movw	r30, r0
    19c4:	83 9f       	mul	r24, r19
    19c6:	f0 0d       	add	r31, r0
    19c8:	92 9f       	mul	r25, r18
    19ca:	f0 0d       	add	r31, r0
    19cc:	11 24       	eor	r1, r1
    19ce:	ea 0f       	add	r30, r26
    19d0:	fb 1f       	adc	r31, r27
    19d2:	83 ad       	ldd	r24, Z+59	; 0x3b
    19d4:	86 95       	lsr	r24
    19d6:	8f 70       	andi	r24, 0x0F	; 15
    19d8:	79 f5       	brne	.+94     	; 0x1a38 <Timebase_UpCounter_Set_Securely+0x86>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    19da:	e8 5b       	subi	r30, 0xB8	; 184
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	10 82       	st	Z, r1
    19e0:	11 82       	std	Z+1, r1	; 0x01
    19e2:	12 82       	std	Z+2, r1	; 0x02
    19e4:	13 82       	std	Z+3, r1	; 0x03

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    19e6:	12 92       	st	-Z, r1
    19e8:	12 92       	st	-Z, r1
    19ea:	12 92       	st	-Z, r1
    19ec:	12 92       	st	-Z, r1
  return Timebase->UpCounter[window].Target;
}


void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    19ee:	72 93       	st	-Z, r23
    19f0:	62 93       	st	-Z, r22
    19f2:	52 93       	st	-Z, r21
    19f4:	42 93       	st	-Z, r20
    19f6:	e0 54       	subi	r30, 0x40	; 64
    19f8:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    19fa:	1c 96       	adiw	r26, 0x0c	; 12
    19fc:	8d 91       	ld	r24, X+
    19fe:	9d 91       	ld	r25, X+
    1a00:	0d 90       	ld	r0, X+
    1a02:	bc 91       	ld	r27, X
    1a04:	a0 2d       	mov	r26, r0
  return Timebase->UpCounter[window].EndValue;
}


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1a06:	84 0f       	add	r24, r20
    1a08:	95 1f       	adc	r25, r21
    1a0a:	a6 1f       	adc	r26, r22
    1a0c:	b7 1f       	adc	r27, r23
    1a0e:	84 af       	std	Z+60, r24	; 0x3c
    1a10:	95 af       	std	Z+61, r25	; 0x3d
    1a12:	a6 af       	std	Z+62, r26	; 0x3e
    1a14:	b7 af       	std	Z+63, r27	; 0x3f
int32_t Timebase_UpCounter_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounter[window].ReloadValue;
}

void Timebase_UpCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].ReloadValue = value;
    1a16:	e0 5b       	subi	r30, 0xB0	; 176
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	40 83       	st	Z, r20
    1a1c:	51 83       	std	Z+1, r21	; 0x01
    1a1e:	62 83       	std	Z+2, r22	; 0x02
    1a20:	73 83       	std	Z+3, r23	; 0x03
    1a22:	e0 55       	subi	r30, 0x50	; 80
    1a24:	f0 40       	sbci	r31, 0x00	; 0
  Timebase_UpCounter_Reset( window );
}


void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1a26:	93 ad       	ldd	r25, Z+59	; 0x3b
    1a28:	89 2f       	mov	r24, r25
    1a2a:	86 95       	lsr	r24
    1a2c:	8f 70       	andi	r24, 0x0F	; 15
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <Timebase_UpCounter_Set_Securely+0x86>
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1a32:	91 7e       	andi	r25, 0xE1	; 225
    1a34:	92 60       	ori	r25, 0x02	; 2
    1a36:	93 af       	std	Z+59, r25	; 0x3b
    1a38:	08 95       	ret

00001a3a <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Start(window);
  }
}


void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    1a3a:	cf 92       	push	r12
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	08 2f       	mov	r16, r24
    1a48:	6a 01       	movw	r12, r20
    1a4a:	7b 01       	movw	r14, r22
  Timebase_UpCounter_Reset( window );
    1a4c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    1a50:	80 2f       	mov	r24, r16
    1a52:	b7 01       	movw	r22, r14
    1a54:	a6 01       	movw	r20, r12
    1a56:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Timebase_UpCounter_Set_Securely>
int32_t Timebase_UpCounter_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounter[window].ReloadValue;
}

void Timebase_UpCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].ReloadValue = value;
    1a5a:	e0 91 2e 01 	lds	r30, 0x012E
    1a5e:	f0 91 2f 01 	lds	r31, 0x012F
    1a62:	10 e0       	ldi	r17, 0x00	; 0
    1a64:	89 e1       	ldi	r24, 0x19	; 25
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	9c 01       	movw	r18, r24
    1a6a:	02 9f       	mul	r16, r18
    1a6c:	c0 01       	movw	r24, r0
    1a6e:	03 9f       	mul	r16, r19
    1a70:	90 0d       	add	r25, r0
    1a72:	12 9f       	mul	r17, r18
    1a74:	90 0d       	add	r25, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	e8 0f       	add	r30, r24
    1a7a:	f9 1f       	adc	r31, r25
    1a7c:	e0 5b       	subi	r30, 0xB0	; 176
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	c0 82       	st	Z, r12
    1a82:	d1 82       	std	Z+1, r13	; 0x01
    1a84:	e2 82       	std	Z+2, r14	; 0x02
    1a86:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_UpCounter_Reset( window );
  Timebase_UpCounter_Set_Securely( window, value );
  Timebase_UpCounter_Set_ReloadValue(window, value);
} 
    1a88:	1f 91       	pop	r17
    1a8a:	0f 91       	pop	r16
    1a8c:	ff 90       	pop	r15
    1a8e:	ef 90       	pop	r14
    1a90:	df 90       	pop	r13
    1a92:	cf 90       	pop	r12
    1a94:	08 95       	ret

00001a96 <Timebase_UpCounter_Update>:


void Timebase_UpCounter_Update(uint8_t window){
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1a9e:	60 91 2e 01 	lds	r22, 0x012E
    1aa2:	70 91 2f 01 	lds	r23, 0x012F
    1aa6:	08 2f       	mov	r16, r24
    1aa8:	10 e0       	ldi	r17, 0x00	; 0
    1aaa:	89 e1       	ldi	r24, 0x19	; 25
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	08 9f       	mul	r16, r24
    1ab0:	f0 01       	movw	r30, r0
    1ab2:	09 9f       	mul	r16, r25
    1ab4:	f0 0d       	add	r31, r0
    1ab6:	18 9f       	mul	r17, r24
    1ab8:	f0 0d       	add	r31, r0
    1aba:	11 24       	eor	r1, r1
    1abc:	e6 0f       	add	r30, r22
    1abe:	f7 1f       	adc	r31, r23
    1ac0:	83 ad       	ldd	r24, Z+59	; 0x3b
    1ac2:	86 95       	lsr	r24
    1ac4:	8f 70       	andi	r24, 0x0F	; 15
} 


void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	09 f0       	breq	.+2      	; 0x1acc <Timebase_UpCounter_Update+0x36>
    1aca:	7c c0       	rjmp	.+248    	; 0x1bc4 <Timebase_UpCounter_Update+0x12e>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1acc:	eb 01       	movw	r28, r22
    1ace:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ad0:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ad2:	ae 85       	ldd	r26, Y+14	; 0x0e
    1ad4:	bf 85       	ldd	r27, Y+15	; 0x0f

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    1ad6:	24 ad       	ldd	r18, Z+60	; 0x3c
    1ad8:	35 ad       	ldd	r19, Z+61	; 0x3d
    1ada:	46 ad       	ldd	r20, Z+62	; 0x3e
    1adc:	57 ad       	ldd	r21, Z+63	; 0x3f
    1ade:	28 1b       	sub	r18, r24
    1ae0:	39 0b       	sbc	r19, r25
    1ae2:	4a 0b       	sbc	r20, r26
    1ae4:	5b 0b       	sbc	r21, r27
    1ae6:	57 ff       	sbrs	r21, 7
    1ae8:	04 c0       	rjmp	.+8      	; 0x1af2 <Timebase_UpCounter_Update+0x5c>
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1af2:	89 e1       	ldi	r24, 0x19	; 25
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	08 9f       	mul	r16, r24
    1af8:	f0 01       	movw	r30, r0
    1afa:	09 9f       	mul	r16, r25
    1afc:	f0 0d       	add	r31, r0
    1afe:	18 9f       	mul	r17, r24
    1b00:	f0 0d       	add	r31, r0
    1b02:	11 24       	eor	r1, r1
    1b04:	e6 0f       	add	r30, r22
    1b06:	f7 1f       	adc	r31, r23
    1b08:	ec 5b       	subi	r30, 0xBC	; 188
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	20 83       	st	Z, r18
    1b0e:	31 83       	std	Z+1, r19	; 0x01
    1b10:	42 83       	std	Z+2, r20	; 0x02
    1b12:	53 83       	std	Z+3, r21	; 0x03
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    1b14:	b2 91       	ld	r27, -Z
    1b16:	a2 91       	ld	r26, -Z
    1b18:	92 91       	ld	r25, -Z
    1b1a:	82 91       	ld	r24, -Z

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1b1c:	38 96       	adiw	r30, 0x08	; 8
    1b1e:	82 1b       	sub	r24, r18
    1b20:	93 0b       	sbc	r25, r19
    1b22:	a4 0b       	sbc	r26, r20
    1b24:	b5 0b       	sbc	r27, r21
    1b26:	b7 ff       	sbrs	r27, 7
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <Timebase_UpCounter_Update+0x9c>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	80 83       	st	Z, r24
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	a2 83       	std	Z+2, r26	; 0x02
    1b38:	b3 83       	std	Z+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1b3a:	89 e1       	ldi	r24, 0x19	; 25
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	08 9f       	mul	r16, r24
    1b40:	e0 01       	movw	r28, r0
    1b42:	09 9f       	mul	r16, r25
    1b44:	d0 0d       	add	r29, r0
    1b46:	18 9f       	mul	r17, r24
    1b48:	d0 0d       	add	r29, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	c6 0f       	add	r28, r22
    1b4e:	d7 1f       	adc	r29, r23
    1b50:	fe 01       	movw	r30, r28
    1b52:	ec 5b       	subi	r30, 0xBC	; 188
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b5c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b5e:	18 16       	cp	r1, r24
    1b60:	19 06       	cpc	r1, r25
    1b62:	1a 06       	cpc	r1, r26
    1b64:	1b 06       	cpc	r1, r27
    1b66:	0c f4       	brge	.+2      	; 0x1b6a <Timebase_UpCounter_Update+0xd4>
    1b68:	59 c0       	rjmp	.+178    	; 0x1c1c <Timebase_UpCounter_Update+0x186>
  return Timebase->UpCounter[window].EndValue;
}


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1b6a:	1c ae       	std	Y+60, r1	; 0x3c
    1b6c:	1d ae       	std	Y+61, r1	; 0x3d
    1b6e:	1e ae       	std	Y+62, r1	; 0x3e
    1b70:	1f ae       	std	Y+63, r1	; 0x3f

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1b72:	10 82       	st	Z, r1
    1b74:	11 82       	std	Z+1, r1	; 0x01
    1b76:	12 82       	std	Z+2, r1	; 0x02
    1b78:	13 82       	std	Z+3, r1	; 0x03
  Timebase->UpCounter[window].EndValue = value;
}


int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e0 5c       	subi	r30, 0xC0	; 192
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1b80:	c8 5b       	subi	r28, 0xB8	; 184
    1b82:	df 4f       	sbci	r29, 0xFF	; 255
    1b84:	20 81       	ld	r18, Z
    1b86:	31 81       	ldd	r19, Z+1	; 0x01
    1b88:	42 81       	ldd	r20, Z+2	; 0x02
    1b8a:	53 81       	ldd	r21, Z+3	; 0x03
    1b8c:	c9 01       	movw	r24, r18
    1b8e:	da 01       	movw	r26, r20
    1b90:	b7 ff       	sbrs	r27, 7
    1b92:	04 c0       	rjmp	.+8      	; 0x1b9c <Timebase_UpCounter_Update+0x106>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	88 83       	st	Y, r24
    1b9e:	99 83       	std	Y+1, r25	; 0x01
    1ba0:	aa 83       	std	Y+2, r26	; 0x02
    1ba2:	bb 83       	std	Y+3, r27	; 0x03
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1ba4:	89 e1       	ldi	r24, 0x19	; 25
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	08 9f       	mul	r16, r24
    1baa:	f0 01       	movw	r30, r0
    1bac:	09 9f       	mul	r16, r25
    1bae:	f0 0d       	add	r31, r0
    1bb0:	18 9f       	mul	r17, r24
    1bb2:	f0 0d       	add	r31, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	e6 0f       	add	r30, r22
    1bb8:	f7 1f       	adc	r31, r23
    1bba:	83 ad       	ldd	r24, Z+59	; 0x3b
    1bbc:	81 7e       	andi	r24, 0xE1	; 225
    1bbe:	88 60       	ori	r24, 0x08	; 8
    1bc0:	83 af       	std	Z+59, r24	; 0x3b
    1bc2:	2c c0       	rjmp	.+88     	; 0x1c1c <Timebase_UpCounter_Update+0x186>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1bc4:	82 30       	cpi	r24, 0x02	; 2
    1bc6:	51 f5       	brne	.+84     	; 0x1c1c <Timebase_UpCounter_Update+0x186>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1bc8:	eb 01       	movw	r28, r22
    1bca:	8c 85       	ldd	r24, Y+12	; 0x0c
    1bcc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1bce:	ae 85       	ldd	r26, Y+14	; 0x0e
    1bd0:	bf 85       	ldd	r27, Y+15	; 0x0f
  return Timebase->UpCounter[window].EndValue;
}


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1bd2:	ec 5b       	subi	r30, 0xBC	; 188
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	20 81       	ld	r18, Z
    1bd8:	31 81       	ldd	r19, Z+1	; 0x01
    1bda:	42 81       	ldd	r20, Z+2	; 0x02
    1bdc:	53 81       	ldd	r21, Z+3	; 0x03
    1bde:	e4 54       	subi	r30, 0x44	; 68
    1be0:	f0 40       	sbci	r31, 0x00	; 0
    1be2:	82 0f       	add	r24, r18
    1be4:	93 1f       	adc	r25, r19
    1be6:	a4 1f       	adc	r26, r20
    1be8:	b5 1f       	adc	r27, r21
    1bea:	84 af       	std	Z+60, r24	; 0x3c
    1bec:	95 af       	std	Z+61, r25	; 0x3d
    1bee:	a6 af       	std	Z+62, r26	; 0x3e
    1bf0:	b7 af       	std	Z+63, r27	; 0x3f
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    1bf2:	e0 5c       	subi	r30, 0xC0	; 192
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	80 81       	ld	r24, Z
    1bf8:	91 81       	ldd	r25, Z+1	; 0x01
    1bfa:	a2 81       	ldd	r26, Z+2	; 0x02
    1bfc:	b3 81       	ldd	r27, Z+3	; 0x03

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1bfe:	38 96       	adiw	r30, 0x08	; 8
    1c00:	82 1b       	sub	r24, r18
    1c02:	93 0b       	sbc	r25, r19
    1c04:	a4 0b       	sbc	r26, r20
    1c06:	b5 0b       	sbc	r27, r21
    1c08:	b7 ff       	sbrs	r27, 7
    1c0a:	04 c0       	rjmp	.+8      	; 0x1c14 <Timebase_UpCounter_Update+0x17e>
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	a0 e0       	ldi	r26, 0x00	; 0
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	80 83       	st	Z, r24
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	a2 83       	std	Z+2, r26	; 0x02
    1c1a:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	1f 91       	pop	r17
    1c22:	0f 91       	pop	r16
    1c24:	08 95       	ret

00001c26 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	e0 91 2e 01 	lds	r30, 0x012E
    1c2c:	f0 91 2f 01 	lds	r31, 0x012F
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	29 e1       	ldi	r18, 0x19	; 25
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	bc 01       	movw	r22, r24
    1c38:	62 9f       	mul	r22, r18
    1c3a:	c0 01       	movw	r24, r0
    1c3c:	63 9f       	mul	r22, r19
    1c3e:	90 0d       	add	r25, r0
    1c40:	72 9f       	mul	r23, r18
    1c42:	90 0d       	add	r25, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	e8 0f       	add	r30, r24
    1c48:	f9 1f       	adc	r31, r25
    1c4a:	83 ad       	ldd	r24, Z+59	; 0x3b
    1c4c:	86 95       	lsr	r24
    1c4e:	8f 70       	andi	r24, 0x0F	; 15
    1c50:	84 30       	cpi	r24, 0x04	; 4
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <Timebase_UpCounter_Expired+0x30>
    1c54:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1c56:	84 2f       	mov	r24, r20
    1c58:	08 95       	ret

00001c5a <Timebase_UpCounter_Expired_Event>:


uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1c5a:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1c5c:	e0 91 2e 01 	lds	r30, 0x012E
    1c60:	f0 91 2f 01 	lds	r31, 0x012F
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	89 e1       	ldi	r24, 0x19	; 25
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	26 9f       	mul	r18, r22
    1c70:	c0 01       	movw	r24, r0
    1c72:	27 9f       	mul	r18, r23
    1c74:	90 0d       	add	r25, r0
    1c76:	36 9f       	mul	r19, r22
    1c78:	90 0d       	add	r25, r0
    1c7a:	11 24       	eor	r1, r1
    1c7c:	e8 0f       	add	r30, r24
    1c7e:	f9 1f       	adc	r31, r25
    1c80:	83 ad       	ldd	r24, Z+59	; 0x3b
    1c82:	86 95       	lsr	r24
    1c84:	8f 70       	andi	r24, 0x0F	; 15
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	11 f0       	breq	.+4      	; 0x1c8e <Timebase_UpCounter_Expired_Event+0x34>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	08 95       	ret
  Timebase_UpCounter_Set_ReloadValue(window, 0);
} 


void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1c8e:	84 2f       	mov	r24, r20
    1c90:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Timebase_UpCounter_Reset>
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1c96:	08 95       	ret

00001c98 <Timebase_UpCounter_Oneshot_Expired_Event>:


uint8_t Timebase_UpCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_UpCounter_Expired_Event(window);
    1c98:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <Timebase_UpCounter_Expired_Event>
}
    1c9c:	08 95       	ret

00001c9e <Timebase_UpCounter_Continuous_Expired_Event>:


uint8_t Timebase_UpCounter_Continuous_Expired_Event(uint8_t window){
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	1f 93       	push	r17
    1ca8:	d8 2e       	mov	r13, r24

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1caa:	e0 91 2e 01 	lds	r30, 0x012E
    1cae:	f0 91 2f 01 	lds	r31, 0x012F
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_UpCounter_Expired_Event(window);
}


uint8_t Timebase_UpCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1cb6:	89 e1       	ldi	r24, 0x19	; 25
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	ac 01       	movw	r20, r24
    1cbc:	24 9f       	mul	r18, r20
    1cbe:	c0 01       	movw	r24, r0
    1cc0:	25 9f       	mul	r18, r21
    1cc2:	90 0d       	add	r25, r0
    1cc4:	34 9f       	mul	r19, r20
    1cc6:	90 0d       	add	r25, r0
    1cc8:	11 24       	eor	r1, r1
    1cca:	e8 0f       	add	r30, r24
    1ccc:	f9 1f       	adc	r31, r25
    1cce:	83 ad       	ldd	r24, Z+59	; 0x3b
    1cd0:	86 95       	lsr	r24
    1cd2:	8f 70       	andi	r24, 0x0F	; 15
    1cd4:	84 30       	cpi	r24, 0x04	; 4
    1cd6:	11 f0       	breq	.+4      	; 0x1cdc <Timebase_UpCounter_Continuous_Expired_Event+0x3e>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <Timebase_UpCounter_Continuous_Expired_Event+0x5c>
void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_UpCounter_Get_ReloadValue(uint8_t window){
  return Timebase->UpCounter[window].ReloadValue;
    1cdc:	e0 5b       	subi	r30, 0xB0	; 176
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	e0 80       	ld	r14, Z
    1ce2:	f1 80       	ldd	r15, Z+1	; 0x01
    1ce4:	02 81       	ldd	r16, Z+2	; 0x02
    1ce6:	13 81       	ldd	r17, Z+3	; 0x03
  Timebase_UpCounter_Set_ReloadValue(window, 0);
} 


void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1ce8:	8d 2d       	mov	r24, r13
    1cea:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Timebase_UpCounter_Reset>

uint8_t Timebase_UpCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_UpCounter_Get_ReloadValue(window);
    Timebase_UpCounter_Clear_All_Flags( window );
	Timebase_UpCounter_Set_Securely(window, temp);
    1cee:	8d 2d       	mov	r24, r13
    1cf0:	b8 01       	movw	r22, r16
    1cf2:	a7 01       	movw	r20, r14
    1cf4:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <Timebase_UpCounter_Set_Securely>
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	08 95       	ret

00001d06 <Timebase_UpCounter_Set_Period_Value_Securely>:


void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
  Timebase->UpCounter[window].PeriodValue = value;
}


uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1d0a:	c0 91 2e 01 	lds	r28, 0x012E
    1d0e:	d0 91 2f 01 	lds	r29, 0x012F
    1d12:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1d14:	29 e1       	ldi	r18, 0x19	; 25
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	fc 01       	movw	r30, r24
    1d1a:	e2 9f       	mul	r30, r18
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	e3 9f       	mul	r30, r19
    1d20:	90 0d       	add	r25, r0
    1d22:	f2 9f       	mul	r31, r18
    1d24:	90 0d       	add	r25, r0
    1d26:	11 24       	eor	r1, r1
    1d28:	c8 0f       	add	r28, r24
    1d2a:	d9 1f       	adc	r29, r25
    1d2c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d2e:	80 fd       	sbrc	r24, 0
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
  return Timebase->UpCounter[window].PeriodValue;
}


void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1d32:	fe 01       	movw	r30, r28
    1d34:	e4 5b       	subi	r30, 0xB4	; 180
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	c8 5b       	subi	r28, 0xB8	; 184
    1d3a:	df 4f       	sbci	r29, 0xFF	; 255
    1d3c:	88 81       	ld	r24, Y
    1d3e:	99 81       	ldd	r25, Y+1	; 0x01
    1d40:	aa 81       	ldd	r26, Y+2	; 0x02
    1d42:	bb 81       	ldd	r27, Y+3	; 0x03
    1d44:	c8 54       	subi	r28, 0x48	; 72
    1d46:	d0 40       	sbci	r29, 0x00	; 0
    1d48:	84 0f       	add	r24, r20
    1d4a:	95 1f       	adc	r25, r21
    1d4c:	a6 1f       	adc	r26, r22
    1d4e:	b7 1f       	adc	r27, r23
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->UpCounter[window].Status.PeriodFlag;
}


void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1d58:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d5a:	81 60       	ori	r24, 0x01	; 1
    1d5c:	8b af       	std	Y+59, r24	; 0x3b
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <Timebase_UpCounter_Get_Remaining_Period_Value>:
  Timebase->UpCounter[window].Temporary = value;
}


int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1d64:	e0 91 2e 01 	lds	r30, 0x012E
    1d68:	f0 91 2f 01 	lds	r31, 0x012F
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1d6e:	29 e1       	ldi	r18, 0x19	; 25
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	ac 01       	movw	r20, r24
    1d74:	42 9f       	mul	r20, r18
    1d76:	c0 01       	movw	r24, r0
    1d78:	43 9f       	mul	r20, r19
    1d7a:	90 0d       	add	r25, r0
    1d7c:	52 9f       	mul	r21, r18
    1d7e:	90 0d       	add	r25, r0
    1d80:	11 24       	eor	r1, r1
    1d82:	e8 0f       	add	r30, r24
    1d84:	f9 1f       	adc	r31, r25
    1d86:	df 01       	movw	r26, r30
    1d88:	a8 5b       	subi	r26, 0xB8	; 184
    1d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8c:	e4 5b       	subi	r30, 0xB4	; 180
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	20 81       	ld	r18, Z
    1d92:	31 81       	ldd	r19, Z+1	; 0x01
    1d94:	42 81       	ldd	r20, Z+2	; 0x02
    1d96:	53 81       	ldd	r21, Z+3	; 0x03
    1d98:	8d 91       	ld	r24, X+
    1d9a:	9d 91       	ld	r25, X+
    1d9c:	0d 90       	ld	r0, X+
    1d9e:	bc 91       	ld	r27, X
    1da0:	a0 2d       	mov	r26, r0
    1da2:	28 1b       	sub	r18, r24
    1da4:	39 0b       	sbc	r19, r25
    1da6:	4a 0b       	sbc	r20, r26
    1da8:	5b 0b       	sbc	r21, r27
    1daa:	57 ff       	sbrs	r21, 7
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1db6:	b9 01       	movw	r22, r18
    1db8:	ca 01       	movw	r24, r20
    1dba:	08 95       	ret

00001dbc <Timebase_UpCounter_Period_Value_Expired>:


uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
  Timebase->UpCounter[window].Temporary = value;
}


int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1dc0:	c0 91 2e 01 	lds	r28, 0x012E
    1dc4:	d0 91 2f 01 	lds	r29, 0x012F
    1dc8:	68 2f       	mov	r22, r24
    1dca:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1dcc:	89 e1       	ldi	r24, 0x19	; 25
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	68 9f       	mul	r22, r24
    1dd2:	f0 01       	movw	r30, r0
    1dd4:	69 9f       	mul	r22, r25
    1dd6:	f0 0d       	add	r31, r0
    1dd8:	78 9f       	mul	r23, r24
    1dda:	f0 0d       	add	r31, r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	ec 0f       	add	r30, r28
    1de0:	fd 1f       	adc	r31, r29
    1de2:	df 01       	movw	r26, r30
    1de4:	a8 5b       	subi	r26, 0xB8	; 184
    1de6:	bf 4f       	sbci	r27, 0xFF	; 255
    1de8:	e4 5b       	subi	r30, 0xB4	; 180
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	20 81       	ld	r18, Z
    1dee:	31 81       	ldd	r19, Z+1	; 0x01
    1df0:	42 81       	ldd	r20, Z+2	; 0x02
    1df2:	53 81       	ldd	r21, Z+3	; 0x03
    1df4:	8d 91       	ld	r24, X+
    1df6:	9d 91       	ld	r25, X+
    1df8:	0d 90       	ld	r0, X+
    1dfa:	bc 91       	ld	r27, X
    1dfc:	a0 2d       	mov	r26, r0
    1dfe:	28 1b       	sub	r18, r24
    1e00:	39 0b       	sbc	r19, r25
    1e02:	4a 0b       	sbc	r20, r26
    1e04:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1e06:	57 fd       	sbrc	r21, 7
    1e08:	07 c0       	rjmp	.+14     	; 0x1e18 <Timebase_UpCounter_Period_Value_Expired+0x5c>
  return temp;
}


uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1e0a:	21 15       	cp	r18, r1
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	41 05       	cpc	r20, r1
    1e10:	51 05       	cpc	r21, r1
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	12 c0       	rjmp	.+36     	; 0x1e3c <Timebase_UpCounter_Period_Value_Expired+0x80>
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	89 e1       	ldi	r24, 0x19	; 25
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	ac 01       	movw	r20, r24
    1e20:	64 9f       	mul	r22, r20
    1e22:	c0 01       	movw	r24, r0
    1e24:	65 9f       	mul	r22, r21
    1e26:	90 0d       	add	r25, r0
    1e28:	74 9f       	mul	r23, r20
    1e2a:	90 0d       	add	r25, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	c8 0f       	add	r28, r24
    1e30:	d9 1f       	adc	r29, r25
    1e32:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e34:	80 ff       	sbrs	r24, 0
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1e3c:	82 2f       	mov	r24, r18
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <Timebase_UpCounter_Period_Value_Expired_Event>:


uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1e44:	1f 93       	push	r17
    1e46:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1e48:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <Timebase_UpCounter_Period_Value_Expired>
    1e4c:	81 30       	cpi	r24, 0x01	; 1
    1e4e:	11 f0       	breq	.+4      	; 0x1e54 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	16 c0       	rjmp	.+44     	; 0x1e80 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e54:	e0 91 2e 01 	lds	r30, 0x012E
    1e58:	f0 91 2f 01 	lds	r31, 0x012F
    1e5c:	21 2f       	mov	r18, r17
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	89 e1       	ldi	r24, 0x19	; 25
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	ac 01       	movw	r20, r24
    1e66:	24 9f       	mul	r18, r20
    1e68:	c0 01       	movw	r24, r0
    1e6a:	25 9f       	mul	r18, r21
    1e6c:	90 0d       	add	r25, r0
    1e6e:	34 9f       	mul	r19, r20
    1e70:	90 0d       	add	r25, r0
    1e72:	11 24       	eor	r1, r1
    1e74:	e8 0f       	add	r30, r24
    1e76:	f9 1f       	adc	r31, r25
    1e78:	83 ad       	ldd	r24, Z+59	; 0x3b
    1e7a:	8e 7f       	andi	r24, 0xFE	; 254
    1e7c:	83 af       	std	Z+59, r24	; 0x3b
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1e80:	1f 91       	pop	r17
    1e82:	08 95       	ret

00001e84 <Timebase_UpCounter_Update_All>:


void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <Timebase_UpCounter_Update>
  }
}
    1e8a:	08 95       	ret

00001e8c <Timebase_UpCounter_Reset_All>:


void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <Timebase_UpCounter_Reset>
  }
}
    1e92:	08 95       	ret

00001e94 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1e94:	e0 91 2e 01 	lds	r30, 0x012E
    1e98:	f0 91 2f 01 	lds	r31, 0x012F
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	25 e1       	ldi	r18, 0x15	; 21
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	ac 01       	movw	r20, r24
    1ea4:	42 9f       	mul	r20, r18
    1ea6:	c0 01       	movw	r24, r0
    1ea8:	43 9f       	mul	r20, r19
    1eaa:	90 0d       	add	r25, r0
    1eac:	52 9f       	mul	r21, r18
    1eae:	90 0d       	add	r25, r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	e8 0f       	add	r30, r24
    1eb4:	f9 1f       	adc	r31, r25
    1eb6:	ec 5a       	subi	r30, 0xAC	; 172
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1ebe:	8f 70       	andi	r24, 0x0F	; 15
    1ec0:	08 95       	ret

00001ec2 <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ec2:	e0 91 2e 01 	lds	r30, 0x012E
    1ec6:	f0 91 2f 01 	lds	r31, 0x012F
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	25 e1       	ldi	r18, 0x15	; 21
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	ac 01       	movw	r20, r24
    1ed2:	42 9f       	mul	r20, r18
    1ed4:	c0 01       	movw	r24, r0
    1ed6:	43 9f       	mul	r20, r19
    1ed8:	90 0d       	add	r25, r0
    1eda:	52 9f       	mul	r21, r18
    1edc:	90 0d       	add	r25, r0
    1ede:	11 24       	eor	r1, r1
    1ee0:	e8 0f       	add	r30, r24
    1ee2:	f9 1f       	adc	r31, r25
    1ee4:	ec 5a       	subi	r30, 0xAC	; 172
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	6f 70       	andi	r22, 0x0F	; 15
    1eea:	66 0f       	add	r22, r22
    1eec:	80 81       	ld	r24, Z
    1eee:	81 7e       	andi	r24, 0xE1	; 225
    1ef0:	86 2b       	or	r24, r22
    1ef2:	80 83       	st	Z, r24
}
    1ef4:	08 95       	ret

00001ef6 <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1ef6:	e0 91 2e 01 	lds	r30, 0x012E
    1efa:	f0 91 2f 01 	lds	r31, 0x012F
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	25 e1       	ldi	r18, 0x15	; 21
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	ac 01       	movw	r20, r24
    1f06:	42 9f       	mul	r20, r18
    1f08:	c0 01       	movw	r24, r0
    1f0a:	43 9f       	mul	r20, r19
    1f0c:	90 0d       	add	r25, r0
    1f0e:	52 9f       	mul	r21, r18
    1f10:	90 0d       	add	r25, r0
    1f12:	11 24       	eor	r1, r1
    1f14:	e8 0f       	add	r30, r24
    1f16:	f9 1f       	adc	r31, r25
    1f18:	e3 5a       	subi	r30, 0xA3	; 163
    1f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1c:	60 81       	ld	r22, Z
    1f1e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	93 81       	ldd	r25, Z+3	; 0x03
    1f24:	08 95       	ret

00001f26 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f26:	e0 91 2e 01 	lds	r30, 0x012E
    1f2a:	f0 91 2f 01 	lds	r31, 0x012F
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	25 e1       	ldi	r18, 0x15	; 21
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	dc 01       	movw	r26, r24
    1f36:	a2 9f       	mul	r26, r18
    1f38:	c0 01       	movw	r24, r0
    1f3a:	a3 9f       	mul	r26, r19
    1f3c:	90 0d       	add	r25, r0
    1f3e:	b2 9f       	mul	r27, r18
    1f40:	90 0d       	add	r25, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	e8 0f       	add	r30, r24
    1f46:	f9 1f       	adc	r31, r25
    1f48:	e3 5a       	subi	r30, 0xA3	; 163
    1f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4c:	40 83       	st	Z, r20
    1f4e:	51 83       	std	Z+1, r21	; 0x01
    1f50:	62 83       	std	Z+2, r22	; 0x02
    1f52:	73 83       	std	Z+3, r23	; 0x03
}
    1f54:	08 95       	ret

00001f56 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1f56:	e0 91 2e 01 	lds	r30, 0x012E
    1f5a:	f0 91 2f 01 	lds	r31, 0x012F
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	25 e1       	ldi	r18, 0x15	; 21
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	ac 01       	movw	r20, r24
    1f66:	42 9f       	mul	r20, r18
    1f68:	c0 01       	movw	r24, r0
    1f6a:	43 9f       	mul	r20, r19
    1f6c:	90 0d       	add	r25, r0
    1f6e:	52 9f       	mul	r21, r18
    1f70:	90 0d       	add	r25, r0
    1f72:	11 24       	eor	r1, r1
    1f74:	e8 0f       	add	r30, r24
    1f76:	f9 1f       	adc	r31, r25
    1f78:	eb 5a       	subi	r30, 0xAB	; 171
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	08 95       	ret

00001f86 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1f86:	e0 91 2e 01 	lds	r30, 0x012E
    1f8a:	f0 91 2f 01 	lds	r31, 0x012F
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	25 e1       	ldi	r18, 0x15	; 21
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	ac 01       	movw	r20, r24
    1f96:	42 9f       	mul	r20, r18
    1f98:	c0 01       	movw	r24, r0
    1f9a:	43 9f       	mul	r20, r19
    1f9c:	90 0d       	add	r25, r0
    1f9e:	52 9f       	mul	r21, r18
    1fa0:	90 0d       	add	r25, r0
    1fa2:	11 24       	eor	r1, r1
    1fa4:	e8 0f       	add	r30, r24
    1fa6:	f9 1f       	adc	r31, r25
    1fa8:	e7 5a       	subi	r30, 0xA7	; 167
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	60 81       	ld	r22, Z
    1fae:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1fb0:	82 81       	ldd	r24, Z+2	; 0x02
    1fb2:	93 81       	ldd	r25, Z+3	; 0x03
    1fb4:	08 95       	ret

00001fb6 <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fb6:	e0 91 2e 01 	lds	r30, 0x012E
    1fba:	f0 91 2f 01 	lds	r31, 0x012F
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	25 e1       	ldi	r18, 0x15	; 21
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	a2 9f       	mul	r26, r18
    1fc8:	c0 01       	movw	r24, r0
    1fca:	a3 9f       	mul	r26, r19
    1fcc:	90 0d       	add	r25, r0
    1fce:	b2 9f       	mul	r27, r18
    1fd0:	90 0d       	add	r25, r0
    1fd2:	11 24       	eor	r1, r1
    1fd4:	e8 0f       	add	r30, r24
    1fd6:	f9 1f       	adc	r31, r25
    1fd8:	eb 5a       	subi	r30, 0xAB	; 171
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	40 83       	st	Z, r20
    1fde:	51 83       	std	Z+1, r21	; 0x01
    1fe0:	62 83       	std	Z+2, r22	; 0x02
    1fe2:	73 83       	std	Z+3, r23	; 0x03
}
    1fe4:	08 95       	ret

00001fe6 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1fe6:	e0 91 2e 01 	lds	r30, 0x012E
    1fea:	f0 91 2f 01 	lds	r31, 0x012F
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	25 e1       	ldi	r18, 0x15	; 21
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	a2 9f       	mul	r26, r18
    1ff8:	c0 01       	movw	r24, r0
    1ffa:	a3 9f       	mul	r26, r19
    1ffc:	90 0d       	add	r25, r0
    1ffe:	b2 9f       	mul	r27, r18
    2000:	90 0d       	add	r25, r0
    2002:	11 24       	eor	r1, r1
    2004:	e8 0f       	add	r30, r24
    2006:	f9 1f       	adc	r31, r25
    2008:	e7 5a       	subi	r30, 0xA7	; 167
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	40 83       	st	Z, r20
    200e:	51 83       	std	Z+1, r21	; 0x01
    2010:	62 83       	std	Z+2, r22	; 0x02
    2012:	73 83       	std	Z+3, r23	; 0x03
}
    2014:	08 95       	ret

00002016 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    2016:	e0 91 2e 01 	lds	r30, 0x012E
    201a:	f0 91 2f 01 	lds	r31, 0x012F
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	25 e1       	ldi	r18, 0x15	; 21
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	ac 01       	movw	r20, r24
    2026:	42 9f       	mul	r20, r18
    2028:	c0 01       	movw	r24, r0
    202a:	43 9f       	mul	r20, r19
    202c:	90 0d       	add	r25, r0
    202e:	52 9f       	mul	r21, r18
    2030:	90 0d       	add	r25, r0
    2032:	11 24       	eor	r1, r1
    2034:	e8 0f       	add	r30, r24
    2036:	f9 1f       	adc	r31, r25
    2038:	ef 59       	subi	r30, 0x9F	; 159
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	08 95       	ret

00002046 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    2046:	e0 91 2e 01 	lds	r30, 0x012E
    204a:	f0 91 2f 01 	lds	r31, 0x012F
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2052:	77 ff       	sbrs	r23, 7
    2054:	13 c0       	rjmp	.+38     	; 0x207c <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2056:	85 e1       	ldi	r24, 0x15	; 21
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	ac 01       	movw	r20, r24
    205c:	24 9f       	mul	r18, r20
    205e:	c0 01       	movw	r24, r0
    2060:	25 9f       	mul	r18, r21
    2062:	90 0d       	add	r25, r0
    2064:	34 9f       	mul	r19, r20
    2066:	90 0d       	add	r25, r0
    2068:	11 24       	eor	r1, r1
    206a:	e8 0f       	add	r30, r24
    206c:	f9 1f       	adc	r31, r25
    206e:	ef 59       	subi	r30, 0x9F	; 159
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	10 82       	st	Z, r1
    2074:	11 82       	std	Z+1, r1	; 0x01
    2076:	12 82       	std	Z+2, r1	; 0x02
    2078:	13 82       	std	Z+3, r1	; 0x03
    207a:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    207c:	85 e1       	ldi	r24, 0x15	; 21
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	dc 01       	movw	r26, r24
    2082:	2a 9f       	mul	r18, r26
    2084:	c0 01       	movw	r24, r0
    2086:	2b 9f       	mul	r18, r27
    2088:	90 0d       	add	r25, r0
    208a:	3a 9f       	mul	r19, r26
    208c:	90 0d       	add	r25, r0
    208e:	11 24       	eor	r1, r1
    2090:	e8 0f       	add	r30, r24
    2092:	f9 1f       	adc	r31, r25
    2094:	ef 59       	subi	r30, 0x9F	; 159
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	40 83       	st	Z, r20
    209a:	51 83       	std	Z+1, r21	; 0x01
    209c:	62 83       	std	Z+2, r22	; 0x02
    209e:	73 83       	std	Z+3, r23	; 0x03
    20a0:	08 95       	ret

000020a2 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    20a2:	e0 91 2e 01 	lds	r30, 0x012E
    20a6:	f0 91 2f 01 	lds	r31, 0x012F
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	25 e1       	ldi	r18, 0x15	; 21
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	ac 01       	movw	r20, r24
    20b2:	42 9f       	mul	r20, r18
    20b4:	c0 01       	movw	r24, r0
    20b6:	43 9f       	mul	r20, r19
    20b8:	90 0d       	add	r25, r0
    20ba:	52 9f       	mul	r21, r18
    20bc:	90 0d       	add	r25, r0
    20be:	11 24       	eor	r1, r1
    20c0:	e8 0f       	add	r30, r24
    20c2:	f9 1f       	adc	r31, r25
    20c4:	ec 5a       	subi	r30, 0xAC	; 172
    20c6:	ff 4f       	sbci	r31, 0xFF	; 255
    20c8:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    20ca:	81 70       	andi	r24, 0x01	; 1
    20cc:	08 95       	ret

000020ce <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    20ce:	e0 91 2e 01 	lds	r30, 0x012E
    20d2:	f0 91 2f 01 	lds	r31, 0x012F
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	25 e1       	ldi	r18, 0x15	; 21
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	ac 01       	movw	r20, r24
    20de:	42 9f       	mul	r20, r18
    20e0:	c0 01       	movw	r24, r0
    20e2:	43 9f       	mul	r20, r19
    20e4:	90 0d       	add	r25, r0
    20e6:	52 9f       	mul	r21, r18
    20e8:	90 0d       	add	r25, r0
    20ea:	11 24       	eor	r1, r1
    20ec:	e8 0f       	add	r30, r24
    20ee:	f9 1f       	adc	r31, r25
    20f0:	ec 5a       	subi	r30, 0xAC	; 172
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	81 60       	ori	r24, 0x01	; 1
    20f8:	80 83       	st	Z, r24
}
    20fa:	08 95       	ret

000020fc <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    20fc:	e0 91 2e 01 	lds	r30, 0x012E
    2100:	f0 91 2f 01 	lds	r31, 0x012F
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	25 e1       	ldi	r18, 0x15	; 21
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	ac 01       	movw	r20, r24
    210c:	42 9f       	mul	r20, r18
    210e:	c0 01       	movw	r24, r0
    2110:	43 9f       	mul	r20, r19
    2112:	90 0d       	add	r25, r0
    2114:	52 9f       	mul	r21, r18
    2116:	90 0d       	add	r25, r0
    2118:	11 24       	eor	r1, r1
    211a:	e8 0f       	add	r30, r24
    211c:	f9 1f       	adc	r31, r25
    211e:	ec 5a       	subi	r30, 0xAC	; 172
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 81       	ld	r24, Z
    2124:	8e 7f       	andi	r24, 0xFE	; 254
    2126:	80 83       	st	Z, r24
}
    2128:	08 95       	ret

0000212a <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
    212a:	e0 91 2e 01 	lds	r30, 0x012E
    212e:	f0 91 2f 01 	lds	r31, 0x012F
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	25 e1       	ldi	r18, 0x15	; 21
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	ac 01       	movw	r20, r24
    213a:	42 9f       	mul	r20, r18
    213c:	c0 01       	movw	r24, r0
    213e:	43 9f       	mul	r20, r19
    2140:	90 0d       	add	r25, r0
    2142:	52 9f       	mul	r21, r18
    2144:	90 0d       	add	r25, r0
    2146:	11 24       	eor	r1, r1
    2148:	e8 0f       	add	r30, r24
    214a:	f9 1f       	adc	r31, r25
    214c:	eb 59       	subi	r30, 0x9B	; 155
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].ReloadValue;
}
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	08 95       	ret

0000215a <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    215a:	e0 91 2e 01 	lds	r30, 0x012E
    215e:	f0 91 2f 01 	lds	r31, 0x012F
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	25 e1       	ldi	r18, 0x15	; 21
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	dc 01       	movw	r26, r24
    216a:	a2 9f       	mul	r26, r18
    216c:	c0 01       	movw	r24, r0
    216e:	a3 9f       	mul	r26, r19
    2170:	90 0d       	add	r25, r0
    2172:	b2 9f       	mul	r27, r18
    2174:	90 0d       	add	r25, r0
    2176:	11 24       	eor	r1, r1
    2178:	e8 0f       	add	r30, r24
    217a:	f9 1f       	adc	r31, r25
    217c:	eb 59       	subi	r30, 0x9B	; 155
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	40 83       	st	Z, r20
    2182:	51 83       	std	Z+1, r21	; 0x01
    2184:	62 83       	std	Z+2, r22	; 0x02
    2186:	73 83       	std	Z+3, r23	; 0x03
}
    2188:	08 95       	ret

0000218a <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    218a:	e0 91 2e 01 	lds	r30, 0x012E
    218e:	f0 91 2f 01 	lds	r31, 0x012F
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	25 e1       	ldi	r18, 0x15	; 21
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	ac 01       	movw	r20, r24
    219a:	42 9f       	mul	r20, r18
    219c:	c0 01       	movw	r24, r0
    219e:	43 9f       	mul	r20, r19
    21a0:	90 0d       	add	r25, r0
    21a2:	52 9f       	mul	r21, r18
    21a4:	90 0d       	add	r25, r0
    21a6:	11 24       	eor	r1, r1
    21a8:	e8 0f       	add	r30, r24
    21aa:	f9 1f       	adc	r31, r25
    21ac:	e7 5a       	subi	r30, 0xA7	; 167
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	10 82       	st	Z, r1
    21b2:	11 82       	std	Z+1, r1	; 0x01
    21b4:	12 82       	std	Z+2, r1	; 0x02
    21b6:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    21b8:	12 92       	st	-Z, r1
    21ba:	12 92       	st	-Z, r1
    21bc:	12 92       	st	-Z, r1
    21be:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    21c0:	38 96       	adiw	r30, 0x08	; 8
    21c2:	10 82       	st	Z, r1
    21c4:	11 82       	std	Z+1, r1	; 0x01
    21c6:	12 82       	std	Z+2, r1	; 0x02
    21c8:	13 82       	std	Z+3, r1	; 0x03
    21ca:	ed 55       	subi	r30, 0x5D	; 93
    21cc:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    21ce:	df 01       	movw	r26, r30
    21d0:	ac 5a       	subi	r26, 0xAC	; 172
    21d2:	bf 4f       	sbci	r27, 0xFF	; 255
    21d4:	8c 91       	ld	r24, X
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    21d6:	80 7e       	andi	r24, 0xE0	; 224
    21d8:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    21da:	eb 59       	subi	r30, 0x9B	; 155
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	10 82       	st	Z, r1
    21e0:	11 82       	std	Z+1, r1	; 0x01
    21e2:	12 82       	std	Z+2, r1	; 0x02
    21e4:	13 82       	std	Z+3, r1	; 0x03
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
    21e6:	08 95       	ret

000021e8 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    21e8:	e0 91 2e 01 	lds	r30, 0x012E
    21ec:	f0 91 2f 01 	lds	r31, 0x012F
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	25 e1       	ldi	r18, 0x15	; 21
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	ac 01       	movw	r20, r24
    21f8:	42 9f       	mul	r20, r18
    21fa:	c0 01       	movw	r24, r0
    21fc:	43 9f       	mul	r20, r19
    21fe:	90 0d       	add	r25, r0
    2200:	52 9f       	mul	r21, r18
    2202:	90 0d       	add	r25, r0
    2204:	11 24       	eor	r1, r1
    2206:	e8 0f       	add	r30, r24
    2208:	f9 1f       	adc	r31, r25
    220a:	e7 5a       	subi	r30, 0xA7	; 167
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	10 82       	st	Z, r1
    2210:	11 82       	std	Z+1, r1	; 0x01
    2212:	12 82       	std	Z+2, r1	; 0x02
    2214:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2216:	12 92       	st	-Z, r1
    2218:	12 92       	st	-Z, r1
    221a:	12 92       	st	-Z, r1
    221c:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    221e:	38 96       	adiw	r30, 0x08	; 8
    2220:	10 82       	st	Z, r1
    2222:	11 82       	std	Z+1, r1	; 0x01
    2224:	12 82       	std	Z+2, r1	; 0x02
    2226:	13 82       	std	Z+3, r1	; 0x03
    2228:	ed 55       	subi	r30, 0x5D	; 93
    222a:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    222c:	df 01       	movw	r26, r30
    222e:	ac 5a       	subi	r26, 0xAC	; 172
    2230:	bf 4f       	sbci	r27, 0xFF	; 255
    2232:	8c 91       	ld	r24, X
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2234:	80 7e       	andi	r24, 0xE0	; 224
    2236:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    2238:	eb 59       	subi	r30, 0x9B	; 155
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	10 82       	st	Z, r1
    223e:	11 82       	std	Z+1, r1	; 0x01
    2240:	12 82       	std	Z+2, r1	; 0x02
    2242:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    2244:	08 95       	ret

00002246 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2246:	e0 91 2e 01 	lds	r30, 0x012E
    224a:	f0 91 2f 01 	lds	r31, 0x012F
    224e:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    2250:	25 e1       	ldi	r18, 0x15	; 21
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	ac 01       	movw	r20, r24
    2256:	42 9f       	mul	r20, r18
    2258:	c0 01       	movw	r24, r0
    225a:	43 9f       	mul	r20, r19
    225c:	90 0d       	add	r25, r0
    225e:	52 9f       	mul	r21, r18
    2260:	90 0d       	add	r25, r0
    2262:	11 24       	eor	r1, r1
    2264:	e8 0f       	add	r30, r24
    2266:	f9 1f       	adc	r31, r25
    2268:	ec 5a       	subi	r30, 0xAC	; 172
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	90 81       	ld	r25, Z
    226e:	89 2f       	mov	r24, r25
    2270:	86 95       	lsr	r24
    2272:	8f 70       	andi	r24, 0x0F	; 15
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	19 f0       	breq	.+6      	; 0x227e <Timebase_DownCounter_SS_Start+0x38>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2278:	91 7e       	andi	r25, 0xE1	; 225
    227a:	92 60       	ori	r25, 0x02	; 2
    227c:	90 83       	st	Z, r25
    227e:	08 95       	ret

00002280 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2280:	e0 91 2e 01 	lds	r30, 0x012E
    2284:	f0 91 2f 01 	lds	r31, 0x012F
    2288:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    228a:	25 e1       	ldi	r18, 0x15	; 21
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	ac 01       	movw	r20, r24
    2290:	42 9f       	mul	r20, r18
    2292:	c0 01       	movw	r24, r0
    2294:	43 9f       	mul	r20, r19
    2296:	90 0d       	add	r25, r0
    2298:	52 9f       	mul	r21, r18
    229a:	90 0d       	add	r25, r0
    229c:	11 24       	eor	r1, r1
    229e:	e8 0f       	add	r30, r24
    22a0:	f9 1f       	adc	r31, r25
    22a2:	ec 5a       	subi	r30, 0xAC	; 172
    22a4:	ff 4f       	sbci	r31, 0xFF	; 255
    22a6:	90 81       	ld	r25, Z
    22a8:	89 2f       	mov	r24, r25
    22aa:	86 95       	lsr	r24
    22ac:	8f 70       	andi	r24, 0x0F	; 15
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	19 f0       	breq	.+6      	; 0x22b8 <Timebase_DownCounter_SS_Stop+0x38>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    22b2:	91 7e       	andi	r25, 0xE1	; 225
    22b4:	94 60       	ori	r25, 0x04	; 4
    22b6:	90 83       	st	Z, r25
    22b8:	08 95       	ret

000022ba <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    22ba:	2f 92       	push	r2
    22bc:	3f 92       	push	r3
    22be:	4f 92       	push	r4
    22c0:	5f 92       	push	r5
    22c2:	6f 92       	push	r6
    22c4:	7f 92       	push	r7
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	cf 92       	push	r12
    22d0:	df 92       	push	r13
    22d2:	ef 92       	push	r14
    22d4:	ff 92       	push	r15
    22d6:	0f 93       	push	r16
    22d8:	1f 93       	push	r17
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	28 97       	sbiw	r28, 0x08	; 8
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	4b 83       	std	Y+3, r20	; 0x03
    22f0:	5c 83       	std	Y+4, r21	; 0x04
    22f2:	6d 83       	std	Y+5, r22	; 0x05
    22f4:	7e 83       	std	Y+6, r23	; 0x06

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    22f6:	20 91 2e 01 	lds	r18, 0x012E
    22fa:	30 91 2f 01 	lds	r19, 0x012F
    22fe:	38 87       	std	Y+8, r19	; 0x08
    2300:	2f 83       	std	Y+7, r18	; 0x07
    2302:	a8 2f       	mov	r26, r24
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	ba 83       	std	Y+2, r27	; 0x02
    2308:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    230a:	85 e1       	ldi	r24, 0x15	; 21
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	a8 9f       	mul	r26, r24
    2310:	f0 01       	movw	r30, r0
    2312:	a9 9f       	mul	r26, r25
    2314:	f0 0d       	add	r31, r0
    2316:	b8 9f       	mul	r27, r24
    2318:	f0 0d       	add	r31, r0
    231a:	11 24       	eor	r1, r1
    231c:	e2 0f       	add	r30, r18
    231e:	f3 1f       	adc	r31, r19
    2320:	ec 5a       	subi	r30, 0xAC	; 172
    2322:	ff 4f       	sbci	r31, 0xFF	; 255
    2324:	80 81       	ld	r24, Z
    2326:	e4 55       	subi	r30, 0x54	; 84
    2328:	f0 40       	sbci	r31, 0x00	; 0
    232a:	86 95       	lsr	r24
    232c:	8f 70       	andi	r24, 0x0F	; 15
    232e:	09 f0       	breq	.+2      	; 0x2332 <Timebase_DownCounter_SS_Set_Securely+0x78>
    2330:	7d c0       	rjmp	.+250    	; 0x242c <Timebase_DownCounter_SS_Set_Securely+0x172>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2332:	e3 5a       	subi	r30, 0xA3	; 163
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	40 83       	st	Z, r20
    2338:	51 83       	std	Z+1, r21	; 0x01
    233a:	62 83       	std	Z+2, r22	; 0x02
    233c:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    233e:	f9 01       	movw	r30, r18
    2340:	c2 84       	ldd	r12, Z+10	; 0x0a
    2342:	d3 84       	ldd	r13, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2344:	24 84       	ldd	r2, Z+12	; 0x0c
    2346:	35 84       	ldd	r3, Z+13	; 0x0d
    2348:	46 84       	ldd	r4, Z+14	; 0x0e
    234a:	57 84       	ldd	r5, Z+15	; 0x0f
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
    234c:	20 81       	ld	r18, Z
    234e:	31 81       	ldd	r19, Z+1	; 0x01
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	50 e0       	ldi	r21, 0x00	; 0
    2354:	6b 81       	ldd	r22, Y+3	; 0x03
    2356:	7c 81       	ldd	r23, Y+4	; 0x04
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    2360:	7b 01       	movw	r14, r22
    2362:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
    2364:	af 81       	ldd	r26, Y+7	; 0x07
    2366:	b8 85       	ldd	r27, Y+8	; 0x08
    2368:	2d 91       	ld	r18, X+
    236a:	3c 91       	ld	r19, X
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	50 e0       	ldi	r21, 0x00	; 0
    2370:	6b 81       	ldd	r22, Y+3	; 0x03
    2372:	7c 81       	ldd	r23, Y+4	; 0x04
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    237c:	c9 01       	movw	r24, r18
    237e:	da 01       	movw	r26, r20
    2380:	3c 01       	movw	r6, r24
    2382:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    2384:	56 01       	movw	r10, r12
    2386:	cc 24       	eor	r12, r12
    2388:	dd 24       	eor	r13, r13
    238a:	ae 0c       	add	r10, r14
    238c:	bf 1c       	adc	r11, r15
    238e:	c0 1e       	adc	r12, r16
    2390:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    2392:	ef 81       	ldd	r30, Y+7	; 0x07
    2394:	f8 85       	ldd	r31, Y+8	; 0x08
    2396:	80 81       	ld	r24, Z
    2398:	91 81       	ldd	r25, Z+1	; 0x01
    239a:	a0 e0       	ldi	r26, 0x00	; 0
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	a8 16       	cp	r10, r24
    23a0:	b9 06       	cpc	r11, r25
    23a2:	ca 06       	cpc	r12, r26
    23a4:	db 06       	cpc	r13, r27
    23a6:	94 f0       	brlt	.+36     	; 0x23cc <Timebase_DownCounter_SS_Set_Securely+0x112>
	  sec_val += 1;
    23a8:	08 94       	sec
    23aa:	61 1c       	adc	r6, r1
    23ac:	71 1c       	adc	r7, r1
    23ae:	81 1c       	adc	r8, r1
    23b0:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    23b2:	20 81       	ld	r18, Z
    23b4:	31 81       	ldd	r19, Z+1	; 0x01
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	c6 01       	movw	r24, r12
    23bc:	b5 01       	movw	r22, r10
    23be:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    23c2:	ac 01       	movw	r20, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	da 01       	movw	r26, r20
    23c8:	5c 01       	movw	r10, r24
    23ca:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    23cc:	85 e1       	ldi	r24, 0x15	; 21
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	29 81       	ldd	r18, Y+1	; 0x01
    23d2:	3a 81       	ldd	r19, Y+2	; 0x02
    23d4:	28 9f       	mul	r18, r24
    23d6:	f0 01       	movw	r30, r0
    23d8:	29 9f       	mul	r18, r25
    23da:	f0 0d       	add	r31, r0
    23dc:	38 9f       	mul	r19, r24
    23de:	f0 0d       	add	r31, r0
    23e0:	11 24       	eor	r1, r1
    23e2:	8f 81       	ldd	r24, Y+7	; 0x07
    23e4:	98 85       	ldd	r25, Y+8	; 0x08
    23e6:	e8 0f       	add	r30, r24
    23e8:	f9 1f       	adc	r31, r25
    23ea:	eb 5a       	subi	r30, 0xAB	; 171
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	26 0c       	add	r2, r6
    23f0:	37 1c       	adc	r3, r7
    23f2:	48 1c       	adc	r4, r8
    23f4:	59 1c       	adc	r5, r9
    23f6:	21 92       	st	Z+, r2
    23f8:	31 92       	st	Z+, r3
    23fa:	41 92       	st	Z+, r4
    23fc:	51 92       	st	Z+, r5
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    23fe:	a0 82       	st	Z, r10
    2400:	b1 82       	std	Z+1, r11	; 0x01
    2402:	c2 82       	std	Z+2, r12	; 0x02
    2404:	d3 82       	std	Z+3, r13	; 0x03
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    2406:	3c 96       	adiw	r30, 0x0c	; 12
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	ad 81       	ldd	r26, Y+5	; 0x05
    240e:	be 81       	ldd	r27, Y+6	; 0x06
    2410:	80 83       	st	Z, r24
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	a2 83       	std	Z+2, r26	; 0x02
    2416:	b3 83       	std	Z+3, r27	; 0x03
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    2418:	71 97       	sbiw	r30, 0x11	; 17
    241a:	90 81       	ld	r25, Z
    241c:	89 2f       	mov	r24, r25
    241e:	86 95       	lsr	r24
    2420:	8f 70       	andi	r24, 0x0F	; 15
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	19 f0       	breq	.+6      	; 0x242c <Timebase_DownCounter_SS_Set_Securely+0x172>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2426:	91 7e       	andi	r25, 0xE1	; 225
    2428:	92 60       	ori	r25, 0x02	; 2
    242a:	90 83       	st	Z, r25
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
    242c:	28 96       	adiw	r28, 0x08	; 8
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	cf 91       	pop	r28
    243a:	df 91       	pop	r29
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	df 90       	pop	r13
    2446:	cf 90       	pop	r12
    2448:	bf 90       	pop	r11
    244a:	af 90       	pop	r10
    244c:	9f 90       	pop	r9
    244e:	8f 90       	pop	r8
    2450:	7f 90       	pop	r7
    2452:	6f 90       	pop	r6
    2454:	5f 90       	pop	r5
    2456:	4f 90       	pop	r4
    2458:	3f 90       	pop	r3
    245a:	2f 90       	pop	r2
    245c:	08 95       	ret

0000245e <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    245e:	cf 92       	push	r12
    2460:	df 92       	push	r13
    2462:	ef 92       	push	r14
    2464:	ff 92       	push	r15
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	7a 01       	movw	r14, r20
    246c:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    246e:	e0 91 2e 01 	lds	r30, 0x012E
    2472:	f0 91 2f 01 	lds	r31, 0x012F
    2476:	48 2f       	mov	r20, r24
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	25 e1       	ldi	r18, 0x15	; 21
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	42 9f       	mul	r20, r18
    2480:	60 01       	movw	r12, r0
    2482:	43 9f       	mul	r20, r19
    2484:	d0 0c       	add	r13, r0
    2486:	52 9f       	mul	r21, r18
    2488:	d0 0c       	add	r13, r0
    248a:	11 24       	eor	r1, r1
    248c:	ec 0d       	add	r30, r12
    248e:	fd 1d       	adc	r31, r13
    2490:	e7 5a       	subi	r30, 0xA7	; 167
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	10 82       	st	Z, r1
    2496:	11 82       	std	Z+1, r1	; 0x01
    2498:	12 82       	std	Z+2, r1	; 0x02
    249a:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    249c:	12 92       	st	-Z, r1
    249e:	12 92       	st	-Z, r1
    24a0:	12 92       	st	-Z, r1
    24a2:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    24a4:	38 96       	adiw	r30, 0x08	; 8
    24a6:	10 82       	st	Z, r1
    24a8:	11 82       	std	Z+1, r1	; 0x01
    24aa:	12 82       	std	Z+2, r1	; 0x02
    24ac:	13 82       	std	Z+3, r1	; 0x03
    24ae:	ed 55       	subi	r30, 0x5D	; 93
    24b0:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    24b2:	df 01       	movw	r26, r30
    24b4:	ac 5a       	subi	r26, 0xAC	; 172
    24b6:	bf 4f       	sbci	r27, 0xFF	; 255
    24b8:	9c 91       	ld	r25, X
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24ba:	90 7e       	andi	r25, 0xE0	; 224
    24bc:	9c 93       	st	X, r25
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    24be:	eb 59       	subi	r30, 0x9B	; 155
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	10 82       	st	Z, r1
    24c4:	11 82       	std	Z+1, r1	; 0x01
    24c6:	12 82       	std	Z+2, r1	; 0x02
    24c8:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    24ca:	b8 01       	movw	r22, r16
    24cc:	a7 01       	movw	r20, r14
    24ce:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    24d2:	e0 91 2e 01 	lds	r30, 0x012E
    24d6:	f0 91 2f 01 	lds	r31, 0x012F
    24da:	ec 0d       	add	r30, r12
    24dc:	fd 1d       	adc	r31, r13
    24de:	eb 59       	subi	r30, 0x9B	; 155
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	e0 82       	st	Z, r14
    24e4:	f1 82       	std	Z+1, r15	; 0x01
    24e6:	02 83       	std	Z+2, r16	; 0x02
    24e8:	13 83       	std	Z+3, r17	; 0x03

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
    24ea:	1f 91       	pop	r17
    24ec:	0f 91       	pop	r16
    24ee:	ff 90       	pop	r15
    24f0:	ef 90       	pop	r14
    24f2:	df 90       	pop	r13
    24f4:	cf 90       	pop	r12
    24f6:	08 95       	ret

000024f8 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
    24f8:	2f 92       	push	r2
    24fa:	3f 92       	push	r3
    24fc:	4f 92       	push	r4
    24fe:	5f 92       	push	r5
    2500:	6f 92       	push	r6
    2502:	7f 92       	push	r7
    2504:	8f 92       	push	r8
    2506:	9f 92       	push	r9
    2508:	af 92       	push	r10
    250a:	bf 92       	push	r11
    250c:	cf 92       	push	r12
    250e:	df 92       	push	r13
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    251c:	e0 91 2e 01 	lds	r30, 0x012E
    2520:	f0 91 2f 01 	lds	r31, 0x012F
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	25 e1       	ldi	r18, 0x15	; 21
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	82 9f       	mul	r24, r18
    252c:	e0 01       	movw	r28, r0
    252e:	83 9f       	mul	r24, r19
    2530:	d0 0d       	add	r29, r0
    2532:	92 9f       	mul	r25, r18
    2534:	d0 0d       	add	r29, r0
    2536:	11 24       	eor	r1, r1
    2538:	ce 0f       	add	r28, r30
    253a:	df 1f       	adc	r29, r31
    253c:	94 e5       	ldi	r25, 0x54	; 84
    253e:	c9 2e       	mov	r12, r25
    2540:	d1 2c       	mov	r13, r1
    2542:	cc 0e       	add	r12, r28
    2544:	dd 1e       	adc	r13, r29
    2546:	d6 01       	movw	r26, r12
    2548:	8c 91       	ld	r24, X
    254a:	86 95       	lsr	r24
    254c:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	09 f0       	breq	.+2      	; 0x2554 <Timebase_DownCounter_SS_Update+0x5c>
    2552:	57 c0       	rjmp	.+174    	; 0x2602 <Timebase_DownCounter_SS_Update+0x10a>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2554:	e2 84       	ldd	r14, Z+10	; 0x0a
    2556:	f3 84       	ldd	r15, Z+11	; 0x0b

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
    2558:	00 e0       	ldi	r16, 0x00	; 0
    255a:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    255c:	64 84       	ldd	r6, Z+12	; 0x0c
    255e:	75 84       	ldd	r7, Z+13	; 0x0d
    2560:	86 84       	ldd	r8, Z+14	; 0x0e
    2562:	97 84       	ldd	r9, Z+15	; 0x0f
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    2564:	85 e5       	ldi	r24, 0x55	; 85
    2566:	a8 2e       	mov	r10, r24
    2568:	b1 2c       	mov	r11, r1
    256a:	ac 0e       	add	r10, r28
    256c:	bd 1e       	adc	r11, r29
    256e:	d5 01       	movw	r26, r10
    2570:	2d 91       	ld	r18, X+
    2572:	3d 91       	ld	r19, X+
    2574:	4d 91       	ld	r20, X+
    2576:	5c 91       	ld	r21, X
    2578:	26 19       	sub	r18, r6
    257a:	37 09       	sbc	r19, r7
    257c:	48 09       	sbc	r20, r8
    257e:	59 09       	sbc	r21, r9
	temp_s *= Timebase->Config.UpdateRate;
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	0e 94 4d 20 	call	0x409a	; 0x409a <__mulsi3>
    258c:	6e 19       	sub	r22, r14
    258e:	7f 09       	sbc	r23, r15
    2590:	80 0b       	sbc	r24, r16
    2592:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
    2594:	de 01       	movw	r26, r28
    2596:	a7 5a       	subi	r26, 0xA7	; 167
    2598:	bf 4f       	sbci	r27, 0xFF	; 255
    259a:	2d 91       	ld	r18, X+
    259c:	3d 91       	ld	r19, X+
    259e:	4d 91       	ld	r20, X+
    25a0:	5c 91       	ld	r21, X
    25a2:	13 97       	sbiw	r26, 0x03	; 3
    25a4:	62 0f       	add	r22, r18
    25a6:	73 1f       	adc	r23, r19
    25a8:	84 1f       	adc	r24, r20
    25aa:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    25ac:	fe 01       	movw	r30, r28
    25ae:	e3 5a       	subi	r30, 0xA3	; 163
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	60 83       	st	Z, r22
    25b4:	71 83       	std	Z+1, r23	; 0x01
    25b6:	82 83       	std	Z+2, r24	; 0x02
    25b8:	93 83       	std	Z+3, r25	; 0x03
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    25ba:	16 16       	cp	r1, r22
    25bc:	17 06       	cpc	r1, r23
    25be:	18 06       	cpc	r1, r24
    25c0:	19 06       	cpc	r1, r25
    25c2:	0c f4       	brge	.+2      	; 0x25c6 <Timebase_DownCounter_SS_Update+0xce>
    25c4:	51 c0       	rjmp	.+162    	; 0x2668 <Timebase_DownCounter_SS_Update+0x170>
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    25c6:	1d 92       	st	X+, r1
    25c8:	1d 92       	st	X+, r1
    25ca:	1d 92       	st	X+, r1
    25cc:	1c 92       	st	X, r1
    25ce:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    25d0:	d5 01       	movw	r26, r10
    25d2:	1d 92       	st	X+, r1
    25d4:	1d 92       	st	X+, r1
    25d6:	1d 92       	st	X+, r1
    25d8:	1c 92       	st	X, r1
    25da:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    25dc:	10 82       	st	Z, r1
    25de:	11 82       	std	Z+1, r1	; 0x01
    25e0:	12 82       	std	Z+2, r1	; 0x02
    25e2:	13 82       	std	Z+3, r1	; 0x03
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    25e4:	f6 01       	movw	r30, r12
    25e6:	80 81       	ld	r24, Z
    25e8:	8e 7f       	andi	r24, 0xFE	; 254
    25ea:	80 83       	st	Z, r24
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    25ec:	cb 59       	subi	r28, 0x9B	; 155
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	18 82       	st	Y, r1
    25f2:	19 82       	std	Y+1, r1	; 0x01
    25f4:	1a 82       	std	Y+2, r1	; 0x02
    25f6:	1b 82       	std	Y+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    25f8:	80 81       	ld	r24, Z
    25fa:	81 7e       	andi	r24, 0xE1	; 225
    25fc:	88 60       	ori	r24, 0x08	; 8
    25fe:	80 83       	st	Z, r24
    2600:	33 c0       	rjmp	.+102    	; 0x2668 <Timebase_DownCounter_SS_Update+0x170>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2602:	82 30       	cpi	r24, 0x02	; 2
    2604:	89 f5       	brne	.+98     	; 0x2668 <Timebase_DownCounter_SS_Update+0x170>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2606:	62 84       	ldd	r6, Z+10	; 0x0a
    2608:	73 84       	ldd	r7, Z+11	; 0x0b
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    260a:	e4 84       	ldd	r14, Z+12	; 0x0c
    260c:	f5 84       	ldd	r15, Z+13	; 0x0d
    260e:	06 85       	ldd	r16, Z+14	; 0x0e
    2610:	17 85       	ldd	r17, Z+15	; 0x0f
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2612:	c3 5a       	subi	r28, 0xA3	; 163
    2614:	df 4f       	sbci	r29, 0xFF	; 255
    2616:	28 80       	ld	r2, Y
    2618:	39 80       	ldd	r3, Y+1	; 0x01
    261a:	4a 80       	ldd	r4, Y+2	; 0x02
    261c:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
    261e:	20 81       	ld	r18, Z
    2620:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
    2622:	a0 80       	ld	r10, Z
    2624:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2626:	28 97       	sbiw	r28, 0x08	; 8
    2628:	40 e0       	ldi	r20, 0x00	; 0
    262a:	50 e0       	ldi	r21, 0x00	; 0
    262c:	c2 01       	movw	r24, r4
    262e:	b1 01       	movw	r22, r2
    2630:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    2634:	e2 0e       	add	r14, r18
    2636:	f3 1e       	adc	r15, r19
    2638:	04 1f       	adc	r16, r20
    263a:	15 1f       	adc	r17, r21
    263c:	e9 92       	st	Y+, r14
    263e:	f9 92       	st	Y+, r15
    2640:	09 93       	st	Y+, r16
    2642:	19 93       	st	Y+, r17
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2644:	cc 24       	eor	r12, r12
    2646:	dd 24       	eor	r13, r13
    2648:	c2 01       	movw	r24, r4
    264a:	b1 01       	movw	r22, r2
    264c:	a6 01       	movw	r20, r12
    264e:	95 01       	movw	r18, r10
    2650:	0e 94 8e 20 	call	0x411c	; 0x411c <__divmodsi4>
    2654:	88 24       	eor	r8, r8
    2656:	99 24       	eor	r9, r9
    2658:	66 0e       	add	r6, r22
    265a:	77 1e       	adc	r7, r23
    265c:	88 1e       	adc	r8, r24
    265e:	99 1e       	adc	r9, r25
    2660:	68 82       	st	Y, r6
    2662:	79 82       	std	Y+1, r7	; 0x01
    2664:	8a 82       	std	Y+2, r8	; 0x02
    2666:	9b 82       	std	Y+3, r9	; 0x03
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	7f 90       	pop	r7
    2682:	6f 90       	pop	r6
    2684:	5f 90       	pop	r5
    2686:	4f 90       	pop	r4
    2688:	3f 90       	pop	r3
    268a:	2f 90       	pop	r2
    268c:	08 95       	ret

0000268e <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	e0 91 2e 01 	lds	r30, 0x012E
    2694:	f0 91 2f 01 	lds	r31, 0x012F
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	25 e1       	ldi	r18, 0x15	; 21
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	bc 01       	movw	r22, r24
    26a0:	62 9f       	mul	r22, r18
    26a2:	c0 01       	movw	r24, r0
    26a4:	63 9f       	mul	r22, r19
    26a6:	90 0d       	add	r25, r0
    26a8:	72 9f       	mul	r23, r18
    26aa:	90 0d       	add	r25, r0
    26ac:	11 24       	eor	r1, r1
    26ae:	e8 0f       	add	r30, r24
    26b0:	f9 1f       	adc	r31, r25
    26b2:	ec 5a       	subi	r30, 0xAC	; 172
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	80 81       	ld	r24, Z
    26b8:	86 95       	lsr	r24
    26ba:	8f 70       	andi	r24, 0x0F	; 15
    26bc:	84 30       	cpi	r24, 0x04	; 4
    26be:	09 f4       	brne	.+2      	; 0x26c2 <Timebase_DownCounter_SS_Expired+0x34>
    26c0:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    26c2:	84 2f       	mov	r24, r20
    26c4:	08 95       	ret

000026c6 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    26c6:	e0 91 2e 01 	lds	r30, 0x012E
    26ca:	f0 91 2f 01 	lds	r31, 0x012F
    26ce:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    26d0:	25 e1       	ldi	r18, 0x15	; 21
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	ac 01       	movw	r20, r24
    26d6:	42 9f       	mul	r20, r18
    26d8:	c0 01       	movw	r24, r0
    26da:	43 9f       	mul	r20, r19
    26dc:	90 0d       	add	r25, r0
    26de:	52 9f       	mul	r21, r18
    26e0:	90 0d       	add	r25, r0
    26e2:	11 24       	eor	r1, r1
    26e4:	e8 0f       	add	r30, r24
    26e6:	f9 1f       	adc	r31, r25
    26e8:	df 01       	movw	r26, r30
    26ea:	ac 5a       	subi	r26, 0xAC	; 172
    26ec:	bf 4f       	sbci	r27, 0xFF	; 255
    26ee:	8c 91       	ld	r24, X
    26f0:	86 95       	lsr	r24
    26f2:	8f 70       	andi	r24, 0x0F	; 15
    26f4:	84 30       	cpi	r24, 0x04	; 4
    26f6:	11 f0       	breq	.+4      	; 0x26fc <Timebase_DownCounter_SS_Expired_Event+0x36>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    26fc:	e7 5a       	subi	r30, 0xA7	; 167
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	10 82       	st	Z, r1
    2702:	11 82       	std	Z+1, r1	; 0x01
    2704:	12 82       	std	Z+2, r1	; 0x02
    2706:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2708:	12 92       	st	-Z, r1
    270a:	12 92       	st	-Z, r1
    270c:	12 92       	st	-Z, r1
    270e:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2710:	38 96       	adiw	r30, 0x08	; 8
    2712:	10 82       	st	Z, r1
    2714:	11 82       	std	Z+1, r1	; 0x01
    2716:	12 82       	std	Z+2, r1	; 0x02
    2718:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    271a:	8c 91       	ld	r24, X
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    271c:	80 7e       	andi	r24, 0xE0	; 224
    271e:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    2720:	38 96       	adiw	r30, 0x08	; 8
    2722:	10 82       	st	Z, r1
    2724:	11 82       	std	Z+1, r1	; 0x01
    2726:	12 82       	std	Z+2, r1	; 0x02
    2728:	13 82       	std	Z+3, r1	; 0x03
    272a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    272c:	08 95       	ret

0000272e <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
    272e:	0e 94 63 13 	call	0x26c6	; 0x26c6 <Timebase_DownCounter_SS_Expired_Event>
}
    2732:	08 95       	ret

00002734 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
    2734:	1f 93       	push	r17
    2736:	cf 93       	push	r28
    2738:	df 93       	push	r29
    273a:	18 2f       	mov	r17, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    273c:	a0 91 2e 01 	lds	r26, 0x012E
    2740:	b0 91 2f 01 	lds	r27, 0x012F
    2744:	28 2f       	mov	r18, r24
    2746:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2748:	85 e1       	ldi	r24, 0x15	; 21
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	ac 01       	movw	r20, r24
    274e:	24 9f       	mul	r18, r20
    2750:	c0 01       	movw	r24, r0
    2752:	25 9f       	mul	r18, r21
    2754:	90 0d       	add	r25, r0
    2756:	34 9f       	mul	r19, r20
    2758:	90 0d       	add	r25, r0
    275a:	11 24       	eor	r1, r1
    275c:	a8 0f       	add	r26, r24
    275e:	b9 1f       	adc	r27, r25
    2760:	ed 01       	movw	r28, r26
    2762:	cc 5a       	subi	r28, 0xAC	; 172
    2764:	df 4f       	sbci	r29, 0xFF	; 255
    2766:	88 81       	ld	r24, Y
    2768:	86 95       	lsr	r24
    276a:	8f 70       	andi	r24, 0x0F	; 15
    276c:	84 30       	cpi	r24, 0x04	; 4
    276e:	11 f0       	breq	.+4      	; 0x2774 <Timebase_DownCounter_SS_Continuous_Expired_Event+0x40>
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	23 c0       	rjmp	.+70     	; 0x27ba <Timebase_DownCounter_SS_Continuous_Expired_Event+0x86>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    2774:	fd 01       	movw	r30, r26
    2776:	eb 59       	subi	r30, 0x9B	; 155
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	40 81       	ld	r20, Z
    277c:	51 81       	ldd	r21, Z+1	; 0x01
    277e:	62 81       	ldd	r22, Z+2	; 0x02
    2780:	73 81       	ldd	r23, Z+3	; 0x03
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2782:	a7 5a       	subi	r26, 0xA7	; 167
    2784:	bf 4f       	sbci	r27, 0xFF	; 255
    2786:	1d 92       	st	X+, r1
    2788:	1d 92       	st	X+, r1
    278a:	1d 92       	st	X+, r1
    278c:	1c 92       	st	X, r1
    278e:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2790:	1e 92       	st	-X, r1
    2792:	1e 92       	st	-X, r1
    2794:	1e 92       	st	-X, r1
    2796:	1e 92       	st	-X, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2798:	18 96       	adiw	r26, 0x08	; 8
    279a:	1d 92       	st	X+, r1
    279c:	1d 92       	st	X+, r1
    279e:	1d 92       	st	X+, r1
    27a0:	1c 92       	st	X, r1
    27a2:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    27a4:	88 81       	ld	r24, Y
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    27a6:	80 7e       	andi	r24, 0xE0	; 224
    27a8:	88 83       	st	Y, r24
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    27aa:	10 82       	st	Z, r1
    27ac:	11 82       	std	Z+1, r1	; 0x01
    27ae:	12 82       	std	Z+2, r1	; 0x02
    27b0:	13 82       	std	Z+3, r1	; 0x03

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    27b2:	81 2f       	mov	r24, r17
    27b4:	0e 94 5d 11 	call	0x22ba	; 0x22ba <Timebase_DownCounter_SS_Set_Securely>
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    27ba:	df 91       	pop	r29
    27bc:	cf 91       	pop	r28
    27be:	1f 91       	pop	r17
    27c0:	08 95       	ret

000027c2 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    27c6:	c0 91 2e 01 	lds	r28, 0x012E
    27ca:	d0 91 2f 01 	lds	r29, 0x012F
    27ce:	28 2f       	mov	r18, r24
    27d0:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    27d2:	85 e1       	ldi	r24, 0x15	; 21
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	28 9f       	mul	r18, r24
    27d8:	f0 01       	movw	r30, r0
    27da:	29 9f       	mul	r18, r25
    27dc:	f0 0d       	add	r31, r0
    27de:	38 9f       	mul	r19, r24
    27e0:	f0 0d       	add	r31, r0
    27e2:	11 24       	eor	r1, r1
    27e4:	ec 0f       	add	r30, r28
    27e6:	fd 1f       	adc	r31, r29
    27e8:	ec 5a       	subi	r30, 0xAC	; 172
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	e4 55       	subi	r30, 0x54	; 84
    27f0:	f0 40       	sbci	r31, 0x00	; 0
    27f2:	80 fd       	sbrc	r24, 0
    27f4:	25 c0       	rjmp	.+74     	; 0x2840 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    27f6:	e3 5a       	subi	r30, 0xA3	; 163
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	81 91       	ld	r24, Z+
    27fc:	91 91       	ld	r25, Z+
    27fe:	a1 91       	ld	r26, Z+
    2800:	b1 91       	ld	r27, Z+
    2802:	84 1b       	sub	r24, r20
    2804:	95 0b       	sbc	r25, r21
    2806:	a6 0b       	sbc	r26, r22
    2808:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    280a:	b7 ff       	sbrs	r27, 7
    280c:	05 c0       	rjmp	.+10     	; 0x2818 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x56>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    280e:	10 82       	st	Z, r1
    2810:	11 82       	std	Z+1, r1	; 0x01
    2812:	12 82       	std	Z+2, r1	; 0x02
    2814:	13 82       	std	Z+3, r1	; 0x03
    2816:	04 c0       	rjmp	.+8      	; 0x2820 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    2820:	85 e1       	ldi	r24, 0x15	; 21
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	28 9f       	mul	r18, r24
    2826:	f0 01       	movw	r30, r0
    2828:	29 9f       	mul	r18, r25
    282a:	f0 0d       	add	r31, r0
    282c:	38 9f       	mul	r19, r24
    282e:	f0 0d       	add	r31, r0
    2830:	11 24       	eor	r1, r1
    2832:	ec 0f       	add	r30, r28
    2834:	fd 1f       	adc	r31, r29
    2836:	ec 5a       	subi	r30, 0xAC	; 172
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	81 60       	ori	r24, 0x01	; 1
    283e:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    2840:	df 91       	pop	r29
    2842:	cf 91       	pop	r28
    2844:	08 95       	ret

00002846 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2846:	e0 91 2e 01 	lds	r30, 0x012E
    284a:	f0 91 2f 01 	lds	r31, 0x012F
    284e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2850:	25 e1       	ldi	r18, 0x15	; 21
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	ac 01       	movw	r20, r24
    2856:	42 9f       	mul	r20, r18
    2858:	c0 01       	movw	r24, r0
    285a:	43 9f       	mul	r20, r19
    285c:	90 0d       	add	r25, r0
    285e:	52 9f       	mul	r21, r18
    2860:	90 0d       	add	r25, r0
    2862:	11 24       	eor	r1, r1
    2864:	e8 0f       	add	r30, r24
    2866:	f9 1f       	adc	r31, r25
    2868:	df 01       	movw	r26, r30
    286a:	af 59       	subi	r26, 0x9F	; 159
    286c:	bf 4f       	sbci	r27, 0xFF	; 255
    286e:	e3 5a       	subi	r30, 0xA3	; 163
    2870:	ff 4f       	sbci	r31, 0xFF	; 255
    2872:	20 81       	ld	r18, Z
    2874:	31 81       	ldd	r19, Z+1	; 0x01
    2876:	42 81       	ldd	r20, Z+2	; 0x02
    2878:	53 81       	ldd	r21, Z+3	; 0x03
    287a:	8d 91       	ld	r24, X+
    287c:	9d 91       	ld	r25, X+
    287e:	0d 90       	ld	r0, X+
    2880:	bc 91       	ld	r27, X
    2882:	a0 2d       	mov	r26, r0
    2884:	28 1b       	sub	r18, r24
    2886:	39 0b       	sbc	r19, r25
    2888:	4a 0b       	sbc	r20, r26
    288a:	5b 0b       	sbc	r21, r27
    288c:	57 ff       	sbrs	r21, 7
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x52>
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e0       	ldi	r20, 0x00	; 0
    2896:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2898:	b9 01       	movw	r22, r18
    289a:	ca 01       	movw	r24, r20
    289c:	08 95       	ret

0000289e <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    289e:	cf 93       	push	r28
    28a0:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    28a2:	c0 91 2e 01 	lds	r28, 0x012E
    28a6:	d0 91 2f 01 	lds	r29, 0x012F
    28aa:	68 2f       	mov	r22, r24
    28ac:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    28ae:	85 e1       	ldi	r24, 0x15	; 21
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	68 9f       	mul	r22, r24
    28b4:	f0 01       	movw	r30, r0
    28b6:	69 9f       	mul	r22, r25
    28b8:	f0 0d       	add	r31, r0
    28ba:	78 9f       	mul	r23, r24
    28bc:	f0 0d       	add	r31, r0
    28be:	11 24       	eor	r1, r1
    28c0:	ec 0f       	add	r30, r28
    28c2:	fd 1f       	adc	r31, r29
    28c4:	df 01       	movw	r26, r30
    28c6:	af 59       	subi	r26, 0x9F	; 159
    28c8:	bf 4f       	sbci	r27, 0xFF	; 255
    28ca:	e3 5a       	subi	r30, 0xA3	; 163
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	20 81       	ld	r18, Z
    28d0:	31 81       	ldd	r19, Z+1	; 0x01
    28d2:	42 81       	ldd	r20, Z+2	; 0x02
    28d4:	53 81       	ldd	r21, Z+3	; 0x03
    28d6:	8d 91       	ld	r24, X+
    28d8:	9d 91       	ld	r25, X+
    28da:	0d 90       	ld	r0, X+
    28dc:	bc 91       	ld	r27, X
    28de:	a0 2d       	mov	r26, r0
    28e0:	28 1b       	sub	r18, r24
    28e2:	39 0b       	sbc	r19, r25
    28e4:	4a 0b       	sbc	r20, r26
    28e6:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    28e8:	57 fd       	sbrc	r21, 7
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <Timebase_DownCounter_SS_Period_Value_Expired+0x5c>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    28ec:	21 15       	cp	r18, r1
    28ee:	31 05       	cpc	r19, r1
    28f0:	41 05       	cpc	r20, r1
    28f2:	51 05       	cpc	r21, r1
    28f4:	11 f0       	breq	.+4      	; 0x28fa <Timebase_DownCounter_SS_Period_Value_Expired+0x5c>
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	14 c0       	rjmp	.+40     	; 0x2922 <Timebase_DownCounter_SS_Period_Value_Expired+0x84>
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	85 e1       	ldi	r24, 0x15	; 21
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	ac 01       	movw	r20, r24
    2902:	64 9f       	mul	r22, r20
    2904:	c0 01       	movw	r24, r0
    2906:	65 9f       	mul	r22, r21
    2908:	90 0d       	add	r25, r0
    290a:	74 9f       	mul	r23, r20
    290c:	90 0d       	add	r25, r0
    290e:	11 24       	eor	r1, r1
    2910:	c8 0f       	add	r28, r24
    2912:	d9 1f       	adc	r29, r25
    2914:	cc 5a       	subi	r28, 0xAC	; 172
    2916:	df 4f       	sbci	r29, 0xFF	; 255
    2918:	88 81       	ld	r24, Y
    291a:	80 ff       	sbrs	r24, 0
    291c:	21 e0       	ldi	r18, 0x01	; 1
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2922:	82 2f       	mov	r24, r18
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	08 95       	ret

0000292a <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    292a:	1f 93       	push	r17
    292c:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    292e:	0e 94 4f 14 	call	0x289e	; 0x289e <Timebase_DownCounter_SS_Period_Value_Expired>
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	11 f0       	breq	.+4      	; 0x293a <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	18 c0       	rjmp	.+48     	; 0x296a <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x40>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    293a:	e0 91 2e 01 	lds	r30, 0x012E
    293e:	f0 91 2f 01 	lds	r31, 0x012F
    2942:	21 2f       	mov	r18, r17
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	85 e1       	ldi	r24, 0x15	; 21
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	ac 01       	movw	r20, r24
    294c:	24 9f       	mul	r18, r20
    294e:	c0 01       	movw	r24, r0
    2950:	25 9f       	mul	r18, r21
    2952:	90 0d       	add	r25, r0
    2954:	34 9f       	mul	r19, r20
    2956:	90 0d       	add	r25, r0
    2958:	11 24       	eor	r1, r1
    295a:	e8 0f       	add	r30, r24
    295c:	f9 1f       	adc	r31, r25
    295e:	ec 5a       	subi	r30, 0xAC	; 172
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	8e 7f       	andi	r24, 0xFE	; 254
    2966:	80 83       	st	Z, r24
    2968:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    296a:	1f 91       	pop	r17
    296c:	08 95       	ret

0000296e <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <Timebase_DownCounter_SS_Update>
  }
}
    2974:	08 95       	ret

00002976 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2976:	e0 91 2e 01 	lds	r30, 0x012E
    297a:	f0 91 2f 01 	lds	r31, 0x012F
    297e:	e7 5a       	subi	r30, 0xA7	; 167
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	10 82       	st	Z, r1
    2984:	11 82       	std	Z+1, r1	; 0x01
    2986:	12 82       	std	Z+2, r1	; 0x02
    2988:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    298a:	12 92       	st	-Z, r1
    298c:	12 92       	st	-Z, r1
    298e:	12 92       	st	-Z, r1
    2990:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2992:	38 96       	adiw	r30, 0x08	; 8
    2994:	10 82       	st	Z, r1
    2996:	11 82       	std	Z+1, r1	; 0x01
    2998:	12 82       	std	Z+2, r1	; 0x02
    299a:	13 82       	std	Z+3, r1	; 0x03
    299c:	ed 55       	subi	r30, 0x5D	; 93
    299e:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    29a0:	df 01       	movw	r26, r30
    29a2:	ac 5a       	subi	r26, 0xAC	; 172
    29a4:	bf 4f       	sbci	r27, 0xFF	; 255
    29a6:	8c 91       	ld	r24, X
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    29a8:	80 7e       	andi	r24, 0xE0	; 224
    29aa:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    29ac:	eb 59       	subi	r30, 0x9B	; 155
    29ae:	ff 4f       	sbci	r31, 0xFF	; 255
    29b0:	10 82       	st	Z, r1
    29b2:	11 82       	std	Z+1, r1	; 0x01
    29b4:	12 82       	std	Z+2, r1	; 0x02
    29b6:	13 82       	std	Z+3, r1	; 0x03

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    29b8:	08 95       	ret

000029ba <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    29ba:	e0 91 2e 01 	lds	r30, 0x012E
    29be:	f0 91 2f 01 	lds	r31, 0x012F
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	9c 01       	movw	r18, r24
    29c6:	44 e0       	ldi	r20, 0x04	; 4
    29c8:	22 0f       	add	r18, r18
    29ca:	33 1f       	adc	r19, r19
    29cc:	4a 95       	dec	r20
    29ce:	e1 f7       	brne	.-8      	; 0x29c8 <Timebase_DownCounter_Get_Status+0xe>
    29d0:	28 0f       	add	r18, r24
    29d2:	39 1f       	adc	r19, r25
    29d4:	e2 0f       	add	r30, r18
    29d6:	f3 1f       	adc	r31, r19
    29d8:	e7 59       	subi	r30, 0x97	; 151
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	80 81       	ld	r24, Z
    29de:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    29e0:	8f 70       	andi	r24, 0x0F	; 15
    29e2:	08 95       	ret

000029e4 <Timebase_DownCounter_Set_Status>:


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    29e4:	e0 91 2e 01 	lds	r30, 0x012E
    29e8:	f0 91 2f 01 	lds	r31, 0x012F
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9c 01       	movw	r18, r24
    29f0:	54 e0       	ldi	r21, 0x04	; 4
    29f2:	22 0f       	add	r18, r18
    29f4:	33 1f       	adc	r19, r19
    29f6:	5a 95       	dec	r21
    29f8:	e1 f7       	brne	.-8      	; 0x29f2 <Timebase_DownCounter_Set_Status+0xe>
    29fa:	28 0f       	add	r18, r24
    29fc:	39 1f       	adc	r19, r25
    29fe:	e2 0f       	add	r30, r18
    2a00:	f3 1f       	adc	r31, r19
    2a02:	e7 59       	subi	r30, 0x97	; 151
    2a04:	ff 4f       	sbci	r31, 0xFF	; 255
    2a06:	6f 70       	andi	r22, 0x0F	; 15
    2a08:	66 0f       	add	r22, r22
    2a0a:	80 81       	ld	r24, Z
    2a0c:	81 7e       	andi	r24, 0xE1	; 225
    2a0e:	86 2b       	or	r24, r22
    2a10:	80 83       	st	Z, r24
}
    2a12:	08 95       	ret

00002a14 <Timebase_DownCounter_Get_Value>:


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    2a14:	e0 91 2e 01 	lds	r30, 0x012E
    2a18:	f0 91 2f 01 	lds	r31, 0x012F
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9c 01       	movw	r18, r24
    2a20:	64 e0       	ldi	r22, 0x04	; 4
    2a22:	22 0f       	add	r18, r18
    2a24:	33 1f       	adc	r19, r19
    2a26:	6a 95       	dec	r22
    2a28:	e1 f7       	brne	.-8      	; 0x2a22 <Timebase_DownCounter_Get_Value+0xe>
    2a2a:	28 0f       	add	r18, r24
    2a2c:	39 1f       	adc	r19, r25
    2a2e:	e2 0f       	add	r30, r18
    2a30:	f3 1f       	adc	r31, r19
    2a32:	e2 59       	subi	r30, 0x92	; 146
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	60 81       	ld	r22, Z
    2a38:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	08 95       	ret

00002a40 <Timebase_DownCounter_Set_Value>:


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a40:	e0 91 2e 01 	lds	r30, 0x012E
    2a44:	f0 91 2f 01 	lds	r31, 0x012F
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	a4 e0       	ldi	r26, 0x04	; 4
    2a4e:	22 0f       	add	r18, r18
    2a50:	33 1f       	adc	r19, r19
    2a52:	aa 95       	dec	r26
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <Timebase_DownCounter_Set_Value+0xe>
    2a56:	28 0f       	add	r18, r24
    2a58:	39 1f       	adc	r19, r25
    2a5a:	e2 0f       	add	r30, r18
    2a5c:	f3 1f       	adc	r31, r19
    2a5e:	e2 59       	subi	r30, 0x92	; 146
    2a60:	ff 4f       	sbci	r31, 0xFF	; 255
    2a62:	40 83       	st	Z, r20
    2a64:	51 83       	std	Z+1, r21	; 0x01
    2a66:	62 83       	std	Z+2, r22	; 0x02
    2a68:	73 83       	std	Z+3, r23	; 0x03
}
    2a6a:	08 95       	ret

00002a6c <Timebase_DownCounter_Get_EndValue>:


int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    2a6c:	e0 91 2e 01 	lds	r30, 0x012E
    2a70:	f0 91 2f 01 	lds	r31, 0x012F
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	9c 01       	movw	r18, r24
    2a78:	b4 e0       	ldi	r27, 0x04	; 4
    2a7a:	22 0f       	add	r18, r18
    2a7c:	33 1f       	adc	r19, r19
    2a7e:	ba 95       	dec	r27
    2a80:	e1 f7       	brne	.-8      	; 0x2a7a <Timebase_DownCounter_Get_EndValue+0xe>
    2a82:	28 0f       	add	r18, r24
    2a84:	39 1f       	adc	r19, r25
    2a86:	e2 0f       	add	r30, r18
    2a88:	f3 1f       	adc	r31, r19
    2a8a:	e6 59       	subi	r30, 0x96	; 150
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	60 81       	ld	r22, Z
    2a90:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	08 95       	ret

00002a98 <Timebase_DownCounter_Set_EndValue>:


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a98:	e0 91 2e 01 	lds	r30, 0x012E
    2a9c:	f0 91 2f 01 	lds	r31, 0x012F
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 01       	movw	r18, r24
    2aa4:	a4 e0       	ldi	r26, 0x04	; 4
    2aa6:	22 0f       	add	r18, r18
    2aa8:	33 1f       	adc	r19, r19
    2aaa:	aa 95       	dec	r26
    2aac:	e1 f7       	brne	.-8      	; 0x2aa6 <Timebase_DownCounter_Set_EndValue+0xe>
    2aae:	28 0f       	add	r18, r24
    2ab0:	39 1f       	adc	r19, r25
    2ab2:	e2 0f       	add	r30, r18
    2ab4:	f3 1f       	adc	r31, r19
    2ab6:	e6 59       	subi	r30, 0x96	; 150
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	40 83       	st	Z, r20
    2abc:	51 83       	std	Z+1, r21	; 0x01
    2abe:	62 83       	std	Z+2, r22	; 0x02
    2ac0:	73 83       	std	Z+3, r23	; 0x03
}
    2ac2:	08 95       	ret

00002ac4 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    2ac4:	e0 91 2e 01 	lds	r30, 0x012E
    2ac8:	f0 91 2f 01 	lds	r31, 0x012F
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9c 01       	movw	r18, r24
    2ad0:	b4 e0       	ldi	r27, 0x04	; 4
    2ad2:	22 0f       	add	r18, r18
    2ad4:	33 1f       	adc	r19, r19
    2ad6:	ba 95       	dec	r27
    2ad8:	e1 f7       	brne	.-8      	; 0x2ad2 <Timebase_DownCounter_Get_PeriodValue+0xe>
    2ada:	28 0f       	add	r18, r24
    2adc:	39 1f       	adc	r19, r25
    2ade:	e2 0f       	add	r30, r18
    2ae0:	f3 1f       	adc	r31, r19
    2ae2:	ee 58       	subi	r30, 0x8E	; 142
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	60 81       	ld	r22, Z
    2ae8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2aea:	82 81       	ldd	r24, Z+2	; 0x02
    2aec:	93 81       	ldd	r25, Z+3	; 0x03
    2aee:	08 95       	ret

00002af0 <Timebase_DownCounter_Set_PeriodValue>:


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2af0:	e0 91 2e 01 	lds	r30, 0x012E
    2af4:	f0 91 2f 01 	lds	r31, 0x012F
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2afc:	77 ff       	sbrs	r23, 7
    2afe:	11 c0       	rjmp	.+34     	; 0x2b22 <Timebase_DownCounter_Set_PeriodValue+0x32>
    Timebase->DownCounter[window].PeriodValue = 0;
    2b00:	c9 01       	movw	r24, r18
    2b02:	b4 e0       	ldi	r27, 0x04	; 4
    2b04:	88 0f       	add	r24, r24
    2b06:	99 1f       	adc	r25, r25
    2b08:	ba 95       	dec	r27
    2b0a:	e1 f7       	brne	.-8      	; 0x2b04 <Timebase_DownCounter_Set_PeriodValue+0x14>
    2b0c:	82 0f       	add	r24, r18
    2b0e:	93 1f       	adc	r25, r19
    2b10:	e8 0f       	add	r30, r24
    2b12:	f9 1f       	adc	r31, r25
    2b14:	ee 58       	subi	r30, 0x8E	; 142
    2b16:	ff 4f       	sbci	r31, 0xFF	; 255
    2b18:	10 82       	st	Z, r1
    2b1a:	11 82       	std	Z+1, r1	; 0x01
    2b1c:	12 82       	std	Z+2, r1	; 0x02
    2b1e:	13 82       	std	Z+3, r1	; 0x03
    2b20:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2b22:	c9 01       	movw	r24, r18
    2b24:	a4 e0       	ldi	r26, 0x04	; 4
    2b26:	88 0f       	add	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	aa 95       	dec	r26
    2b2c:	e1 f7       	brne	.-8      	; 0x2b26 <Timebase_DownCounter_Set_PeriodValue+0x36>
    2b2e:	82 0f       	add	r24, r18
    2b30:	93 1f       	adc	r25, r19
    2b32:	e8 0f       	add	r30, r24
    2b34:	f9 1f       	adc	r31, r25
    2b36:	ee 58       	subi	r30, 0x8E	; 142
    2b38:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3a:	40 83       	st	Z, r20
    2b3c:	51 83       	std	Z+1, r21	; 0x01
    2b3e:	62 83       	std	Z+2, r22	; 0x02
    2b40:	73 83       	std	Z+3, r23	; 0x03
    2b42:	08 95       	ret

00002b44 <Timebase_DownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    2b44:	e0 91 2e 01 	lds	r30, 0x012E
    2b48:	f0 91 2f 01 	lds	r31, 0x012F
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9c 01       	movw	r18, r24
    2b50:	44 e0       	ldi	r20, 0x04	; 4
    2b52:	22 0f       	add	r18, r18
    2b54:	33 1f       	adc	r19, r19
    2b56:	4a 95       	dec	r20
    2b58:	e1 f7       	brne	.-8      	; 0x2b52 <Timebase_DownCounter_Get_Period_Flag+0xe>
    2b5a:	28 0f       	add	r18, r24
    2b5c:	39 1f       	adc	r19, r25
    2b5e:	e2 0f       	add	r30, r18
    2b60:	f3 1f       	adc	r31, r19
    2b62:	e7 59       	subi	r30, 0x97	; 151
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2b68:	81 70       	andi	r24, 0x01	; 1
    2b6a:	08 95       	ret

00002b6c <Timebase_DownCounter_Set_Period_Flag>:


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2b6c:	e0 91 2e 01 	lds	r30, 0x012E
    2b70:	f0 91 2f 01 	lds	r31, 0x012F
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9c 01       	movw	r18, r24
    2b78:	54 e0       	ldi	r21, 0x04	; 4
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	5a 95       	dec	r21
    2b80:	e1 f7       	brne	.-8      	; 0x2b7a <Timebase_DownCounter_Set_Period_Flag+0xe>
    2b82:	28 0f       	add	r18, r24
    2b84:	39 1f       	adc	r19, r25
    2b86:	e2 0f       	add	r30, r18
    2b88:	f3 1f       	adc	r31, r19
    2b8a:	e7 59       	subi	r30, 0x97	; 151
    2b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8e:	80 81       	ld	r24, Z
    2b90:	81 60       	ori	r24, 0x01	; 1
    2b92:	80 83       	st	Z, r24
}
    2b94:	08 95       	ret

00002b96 <Timebase_DownCounter_Clear_Period_Flag>:


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b96:	e0 91 2e 01 	lds	r30, 0x012E
    2b9a:	f0 91 2f 01 	lds	r31, 0x012F
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9c 01       	movw	r18, r24
    2ba2:	64 e0       	ldi	r22, 0x04	; 4
    2ba4:	22 0f       	add	r18, r18
    2ba6:	33 1f       	adc	r19, r19
    2ba8:	6a 95       	dec	r22
    2baa:	e1 f7       	brne	.-8      	; 0x2ba4 <Timebase_DownCounter_Clear_Period_Flag+0xe>
    2bac:	28 0f       	add	r18, r24
    2bae:	39 1f       	adc	r19, r25
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	e7 59       	subi	r30, 0x97	; 151
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	8e 7f       	andi	r24, 0xFE	; 254
    2bbc:	80 83       	st	Z, r24
}
    2bbe:	08 95       	ret

00002bc0 <Timebase_DownCounter_Get_ReloadValue>:

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
    2bc0:	e0 91 2e 01 	lds	r30, 0x012E
    2bc4:	f0 91 2f 01 	lds	r31, 0x012F
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9c 01       	movw	r18, r24
    2bcc:	74 e0       	ldi	r23, 0x04	; 4
    2bce:	22 0f       	add	r18, r18
    2bd0:	33 1f       	adc	r19, r19
    2bd2:	7a 95       	dec	r23
    2bd4:	e1 f7       	brne	.-8      	; 0x2bce <Timebase_DownCounter_Get_ReloadValue+0xe>
    2bd6:	28 0f       	add	r18, r24
    2bd8:	39 1f       	adc	r19, r25
    2bda:	e2 0f       	add	r30, r18
    2bdc:	f3 1f       	adc	r31, r19
    2bde:	ea 58       	subi	r30, 0x8A	; 138
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].ReloadValue;
}
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	08 95       	ret

00002bec <Timebase_DownCounter_Set_ReloadValue>:

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2bec:	e0 91 2e 01 	lds	r30, 0x012E
    2bf0:	f0 91 2f 01 	lds	r31, 0x012F
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	9c 01       	movw	r18, r24
    2bf8:	a4 e0       	ldi	r26, 0x04	; 4
    2bfa:	22 0f       	add	r18, r18
    2bfc:	33 1f       	adc	r19, r19
    2bfe:	aa 95       	dec	r26
    2c00:	e1 f7       	brne	.-8      	; 0x2bfa <Timebase_DownCounter_Set_ReloadValue+0xe>
    2c02:	28 0f       	add	r18, r24
    2c04:	39 1f       	adc	r19, r25
    2c06:	e2 0f       	add	r30, r18
    2c08:	f3 1f       	adc	r31, r19
    2c0a:	ea 58       	subi	r30, 0x8A	; 138
    2c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0e:	40 83       	st	Z, r20
    2c10:	51 83       	std	Z+1, r21	; 0x01
    2c12:	62 83       	std	Z+2, r22	; 0x02
    2c14:	73 83       	std	Z+3, r23	; 0x03
}
    2c16:	08 95       	ret

00002c18 <Timebase_DownCounter_Reset>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2c18:	e0 91 2e 01 	lds	r30, 0x012E
    2c1c:	f0 91 2f 01 	lds	r31, 0x012F
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 01       	movw	r18, r24
    2c24:	b4 e0       	ldi	r27, 0x04	; 4
    2c26:	22 0f       	add	r18, r18
    2c28:	33 1f       	adc	r19, r19
    2c2a:	ba 95       	dec	r27
    2c2c:	e1 f7       	brne	.-8      	; 0x2c26 <Timebase_DownCounter_Reset+0xe>
    2c2e:	28 0f       	add	r18, r24
    2c30:	39 1f       	adc	r19, r25
    2c32:	e2 0f       	add	r30, r18
    2c34:	f3 1f       	adc	r31, r19
    2c36:	e6 59       	subi	r30, 0x96	; 150
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	11 92       	st	Z+, r1
    2c3c:	11 92       	st	Z+, r1
    2c3e:	11 92       	st	Z+, r1
    2c40:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c42:	10 82       	st	Z, r1
    2c44:	11 82       	std	Z+1, r1	; 0x01
    2c46:	12 82       	std	Z+2, r1	; 0x02
    2c48:	13 82       	std	Z+3, r1	; 0x03
    2c4a:	ee 56       	subi	r30, 0x6E	; 110
    2c4c:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c4e:	df 01       	movw	r26, r30
    2c50:	a7 59       	subi	r26, 0x97	; 151
    2c52:	bf 4f       	sbci	r27, 0xFF	; 255
    2c54:	8c 91       	ld	r24, X
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2c56:	80 7e       	andi	r24, 0xE0	; 224
    2c58:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2c5a:	ea 58       	subi	r30, 0x8A	; 138
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	10 82       	st	Z, r1
    2c60:	11 82       	std	Z+1, r1	; 0x01
    2c62:	12 82       	std	Z+2, r1	; 0x02
    2c64:	13 82       	std	Z+3, r1	; 0x03
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
  Timebase_DownCounter_Set_ReloadValue(window, 0);
} 
    2c66:	08 95       	ret

00002c68 <Timebase_DownCounter_Clear_All_Flags>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2c68:	e0 91 2e 01 	lds	r30, 0x012E
    2c6c:	f0 91 2f 01 	lds	r31, 0x012F
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 01       	movw	r18, r24
    2c74:	44 e0       	ldi	r20, 0x04	; 4
    2c76:	22 0f       	add	r18, r18
    2c78:	33 1f       	adc	r19, r19
    2c7a:	4a 95       	dec	r20
    2c7c:	e1 f7       	brne	.-8      	; 0x2c76 <Timebase_DownCounter_Clear_All_Flags+0xe>
    2c7e:	28 0f       	add	r18, r24
    2c80:	39 1f       	adc	r19, r25
    2c82:	e2 0f       	add	r30, r18
    2c84:	f3 1f       	adc	r31, r19
    2c86:	e6 59       	subi	r30, 0x96	; 150
    2c88:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8a:	11 92       	st	Z+, r1
    2c8c:	11 92       	st	Z+, r1
    2c8e:	11 92       	st	Z+, r1
    2c90:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2c92:	10 82       	st	Z, r1
    2c94:	11 82       	std	Z+1, r1	; 0x01
    2c96:	12 82       	std	Z+2, r1	; 0x02
    2c98:	13 82       	std	Z+3, r1	; 0x03
    2c9a:	ee 56       	subi	r30, 0x6E	; 110
    2c9c:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2c9e:	df 01       	movw	r26, r30
    2ca0:	a7 59       	subi	r26, 0x97	; 151
    2ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca4:	8c 91       	ld	r24, X
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2ca6:	80 7e       	andi	r24, 0xE0	; 224
    2ca8:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2caa:	ea 58       	subi	r30, 0x8A	; 138
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	10 82       	st	Z, r1
    2cb0:	11 82       	std	Z+1, r1	; 0x01
    2cb2:	12 82       	std	Z+2, r1	; 0x02
    2cb4:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2cb6:	08 95       	ret

00002cb8 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2cb8:	e0 91 2e 01 	lds	r30, 0x012E
    2cbc:	f0 91 2f 01 	lds	r31, 0x012F
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2cc2:	9c 01       	movw	r18, r24
    2cc4:	54 e0       	ldi	r21, 0x04	; 4
    2cc6:	22 0f       	add	r18, r18
    2cc8:	33 1f       	adc	r19, r19
    2cca:	5a 95       	dec	r21
    2ccc:	e1 f7       	brne	.-8      	; 0x2cc6 <Timebase_DownCounter_Start+0xe>
    2cce:	28 0f       	add	r18, r24
    2cd0:	39 1f       	adc	r19, r25
    2cd2:	e2 0f       	add	r30, r18
    2cd4:	f3 1f       	adc	r31, r19
    2cd6:	e7 59       	subi	r30, 0x97	; 151
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	90 81       	ld	r25, Z
    2cdc:	89 2f       	mov	r24, r25
    2cde:	86 95       	lsr	r24
    2ce0:	8f 70       	andi	r24, 0x0F	; 15
    2ce2:	81 30       	cpi	r24, 0x01	; 1
    2ce4:	19 f0       	breq	.+6      	; 0x2cec <Timebase_DownCounter_Start+0x34>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2ce6:	91 7e       	andi	r25, 0xE1	; 225
    2ce8:	92 60       	ori	r25, 0x02	; 2
    2cea:	90 83       	st	Z, r25
    2cec:	08 95       	ret

00002cee <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2cee:	e0 91 2e 01 	lds	r30, 0x012E
    2cf2:	f0 91 2f 01 	lds	r31, 0x012F
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2cf8:	9c 01       	movw	r18, r24
    2cfa:	64 e0       	ldi	r22, 0x04	; 4
    2cfc:	22 0f       	add	r18, r18
    2cfe:	33 1f       	adc	r19, r19
    2d00:	6a 95       	dec	r22
    2d02:	e1 f7       	brne	.-8      	; 0x2cfc <Timebase_DownCounter_Stop+0xe>
    2d04:	28 0f       	add	r18, r24
    2d06:	39 1f       	adc	r19, r25
    2d08:	e2 0f       	add	r30, r18
    2d0a:	f3 1f       	adc	r31, r19
    2d0c:	e7 59       	subi	r30, 0x97	; 151
    2d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d10:	90 81       	ld	r25, Z
    2d12:	89 2f       	mov	r24, r25
    2d14:	86 95       	lsr	r24
    2d16:	8f 70       	andi	r24, 0x0F	; 15
    2d18:	82 30       	cpi	r24, 0x02	; 2
    2d1a:	19 f0       	breq	.+6      	; 0x2d22 <Timebase_DownCounter_Stop+0x34>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2d1c:	91 7e       	andi	r25, 0xE1	; 225
    2d1e:	94 60       	ori	r25, 0x04	; 4
    2d20:	90 83       	st	Z, r25
    2d22:	08 95       	ret

00002d24 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2d28:	a0 91 2e 01 	lds	r26, 0x012E
    2d2c:	b0 91 2f 01 	lds	r27, 0x012F
    2d30:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2d32:	fc 01       	movw	r30, r24
    2d34:	24 e0       	ldi	r18, 0x04	; 4
    2d36:	ee 0f       	add	r30, r30
    2d38:	ff 1f       	adc	r31, r31
    2d3a:	2a 95       	dec	r18
    2d3c:	e1 f7       	brne	.-8      	; 0x2d36 <Timebase_DownCounter_Set_Securely+0x12>
    2d3e:	e8 0f       	add	r30, r24
    2d40:	f9 1f       	adc	r31, r25
    2d42:	ea 0f       	add	r30, r26
    2d44:	fb 1f       	adc	r31, r27
    2d46:	ef 01       	movw	r28, r30
    2d48:	c7 59       	subi	r28, 0x97	; 151
    2d4a:	df 4f       	sbci	r29, 0xFF	; 255
    2d4c:	88 81       	ld	r24, Y
    2d4e:	86 95       	lsr	r24
    2d50:	8f 70       	andi	r24, 0x0F	; 15
    2d52:	11 f5       	brne	.+68     	; 0x2d98 <Timebase_DownCounter_Set_Securely+0x74>
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2d54:	e2 59       	subi	r30, 0x92	; 146
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	40 83       	st	Z, r20
    2d5a:	51 83       	std	Z+1, r21	; 0x01
    2d5c:	62 83       	std	Z+2, r22	; 0x02
    2d5e:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2d60:	1c 96       	adiw	r26, 0x0c	; 12
    2d62:	8d 91       	ld	r24, X+
    2d64:	9d 91       	ld	r25, X+
    2d66:	0d 90       	ld	r0, X+
    2d68:	bc 91       	ld	r27, X
    2d6a:	a0 2d       	mov	r26, r0
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2d6c:	84 0f       	add	r24, r20
    2d6e:	95 1f       	adc	r25, r21
    2d70:	a6 1f       	adc	r26, r22
    2d72:	b7 1f       	adc	r27, r23
    2d74:	b2 93       	st	-Z, r27
    2d76:	a2 93       	st	-Z, r26
    2d78:	92 93       	st	-Z, r25
    2d7a:	82 93       	st	-Z, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2d7c:	3c 96       	adiw	r30, 0x0c	; 12
    2d7e:	40 83       	st	Z, r20
    2d80:	51 83       	std	Z+1, r21	; 0x01
    2d82:	62 83       	std	Z+2, r22	; 0x02
    2d84:	73 83       	std	Z+3, r23	; 0x03
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2d86:	98 81       	ld	r25, Y
    2d88:	89 2f       	mov	r24, r25
    2d8a:	86 95       	lsr	r24
    2d8c:	8f 70       	andi	r24, 0x0F	; 15
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	19 f0       	breq	.+6      	; 0x2d98 <Timebase_DownCounter_Set_Securely+0x74>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2d92:	91 7e       	andi	r25, 0xE1	; 225
    2d94:	92 60       	ori	r25, 0x02	; 2
    2d96:	98 83       	st	Y, r25
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
	Timebase_DownCounter_Set_ReloadValue(window, value);
    Timebase_DownCounter_Start(window);
  }
}
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	08 95       	ret

00002d9e <Timebase_DownCounter_Set_Forcefully>:


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2d9e:	cf 92       	push	r12
    2da0:	df 92       	push	r13
    2da2:	ef 92       	push	r14
    2da4:	ff 92       	push	r15
    2da6:	0f 93       	push	r16
    2da8:	1f 93       	push	r17
    2daa:	6a 01       	movw	r12, r20
    2dac:	7b 01       	movw	r14, r22
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2dae:	e0 91 2e 01 	lds	r30, 0x012E
    2db2:	f0 91 2f 01 	lds	r31, 0x012F
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	89 01       	movw	r16, r18
    2dbc:	44 e0       	ldi	r20, 0x04	; 4
    2dbe:	00 0f       	add	r16, r16
    2dc0:	11 1f       	adc	r17, r17
    2dc2:	4a 95       	dec	r20
    2dc4:	e1 f7       	brne	.-8      	; 0x2dbe <Timebase_DownCounter_Set_Forcefully+0x20>
    2dc6:	02 0f       	add	r16, r18
    2dc8:	13 1f       	adc	r17, r19
    2dca:	e0 0f       	add	r30, r16
    2dcc:	f1 1f       	adc	r31, r17
    2dce:	e6 59       	subi	r30, 0x96	; 150
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	11 92       	st	Z+, r1
    2dd4:	11 92       	st	Z+, r1
    2dd6:	11 92       	st	Z+, r1
    2dd8:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2dda:	10 82       	st	Z, r1
    2ddc:	11 82       	std	Z+1, r1	; 0x01
    2dde:	12 82       	std	Z+2, r1	; 0x02
    2de0:	13 82       	std	Z+3, r1	; 0x03
    2de2:	ee 56       	subi	r30, 0x6E	; 110
    2de4:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2de6:	df 01       	movw	r26, r30
    2de8:	a7 59       	subi	r26, 0x97	; 151
    2dea:	bf 4f       	sbci	r27, 0xFF	; 255
    2dec:	9c 91       	ld	r25, X
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2dee:	90 7e       	andi	r25, 0xE0	; 224
    2df0:	9c 93       	st	X, r25
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2df2:	ea 58       	subi	r30, 0x8A	; 138
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	10 82       	st	Z, r1
    2df8:	11 82       	std	Z+1, r1	; 0x01
    2dfa:	12 82       	std	Z+2, r1	; 0x02
    2dfc:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    2dfe:	b7 01       	movw	r22, r14
    2e00:	a6 01       	movw	r20, r12
    2e02:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Timebase_DownCounter_Set_Securely>
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2e06:	e0 91 2e 01 	lds	r30, 0x012E
    2e0a:	f0 91 2f 01 	lds	r31, 0x012F
    2e0e:	e0 0f       	add	r30, r16
    2e10:	f1 1f       	adc	r31, r17
    2e12:	ea 58       	subi	r30, 0x8A	; 138
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	c0 82       	st	Z, r12
    2e18:	d1 82       	std	Z+1, r13	; 0x01
    2e1a:	e2 82       	std	Z+2, r14	; 0x02
    2e1c:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
  Timebase_DownCounter_Set_ReloadValue(window, value);
} 
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	cf 90       	pop	r12
    2e2a:	08 95       	ret

00002e2c <Timebase_DownCounter_Update>:


void Timebase_DownCounter_Update(uint8_t window){
    2e2c:	0f 93       	push	r16
    2e2e:	1f 93       	push	r17
    2e30:	cf 93       	push	r28
    2e32:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2e34:	a0 91 2e 01 	lds	r26, 0x012E
    2e38:	b0 91 2f 01 	lds	r27, 0x012F
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	fc 01       	movw	r30, r24
    2e40:	54 e0       	ldi	r21, 0x04	; 4
    2e42:	ee 0f       	add	r30, r30
    2e44:	ff 1f       	adc	r31, r31
    2e46:	5a 95       	dec	r21
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <Timebase_DownCounter_Update+0x16>
    2e4a:	e8 0f       	add	r30, r24
    2e4c:	f9 1f       	adc	r31, r25
    2e4e:	ea 0f       	add	r30, r26
    2e50:	fb 1f       	adc	r31, r27
    2e52:	bf 01       	movw	r22, r30
    2e54:	67 59       	subi	r22, 0x97	; 151
    2e56:	7f 4f       	sbci	r23, 0xFF	; 255
    2e58:	eb 01       	movw	r28, r22
    2e5a:	88 81       	ld	r24, Y
    2e5c:	86 95       	lsr	r24
    2e5e:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Set_ReloadValue(window, value);
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    2e60:	81 30       	cpi	r24, 0x01	; 1
    2e62:	b9 f5       	brne	.+110    	; 0x2ed2 <Timebase_DownCounter_Update+0xa6>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2e64:	1c 96       	adiw	r26, 0x0c	; 12
    2e66:	2d 91       	ld	r18, X+
    2e68:	3d 91       	ld	r19, X+
    2e6a:	4d 91       	ld	r20, X+
    2e6c:	5c 91       	ld	r21, X
    2e6e:	1f 97       	sbiw	r26, 0x0f	; 15
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    2e70:	8f 01       	movw	r16, r30
    2e72:	06 59       	subi	r16, 0x96	; 150
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	e8 01       	movw	r28, r16
    2e78:	88 81       	ld	r24, Y
    2e7a:	99 81       	ldd	r25, Y+1	; 0x01
    2e7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2e7e:	bb 81       	ldd	r27, Y+3	; 0x03
    2e80:	82 1b       	sub	r24, r18
    2e82:	93 0b       	sbc	r25, r19
    2e84:	a4 0b       	sbc	r26, r20
    2e86:	b5 0b       	sbc	r27, r21
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2e88:	ef 01       	movw	r28, r30
    2e8a:	c2 59       	subi	r28, 0x92	; 146
    2e8c:	df 4f       	sbci	r29, 0xFF	; 255
    2e8e:	88 83       	st	Y, r24
    2e90:	99 83       	std	Y+1, r25	; 0x01
    2e92:	aa 83       	std	Y+2, r26	; 0x02
    2e94:	bb 83       	std	Y+3, r27	; 0x03


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2e96:	18 16       	cp	r1, r24
    2e98:	19 06       	cpc	r1, r25
    2e9a:	1a 06       	cpc	r1, r26
    2e9c:	1b 06       	cpc	r1, r27
    2e9e:	7c f1       	brlt	.+94     	; 0x2efe <Timebase_DownCounter_Update+0xd2>
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2ea0:	d8 01       	movw	r26, r16
    2ea2:	1d 92       	st	X+, r1
    2ea4:	1d 92       	st	X+, r1
    2ea6:	1d 92       	st	X+, r1
    2ea8:	1c 92       	st	X, r1
    2eaa:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2eac:	18 82       	st	Y, r1
    2eae:	19 82       	std	Y+1, r1	; 0x01
    2eb0:	1a 82       	std	Y+2, r1	; 0x02
    2eb2:	1b 82       	std	Y+3, r1	; 0x03
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2eb4:	eb 01       	movw	r28, r22
    2eb6:	88 81       	ld	r24, Y
    2eb8:	8e 7f       	andi	r24, 0xFE	; 254
    2eba:	88 83       	st	Y, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2ebc:	ea 58       	subi	r30, 0x8A	; 138
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	10 82       	st	Z, r1
    2ec2:	11 82       	std	Z+1, r1	; 0x01
    2ec4:	12 82       	std	Z+2, r1	; 0x02
    2ec6:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2ec8:	88 81       	ld	r24, Y
    2eca:	81 7e       	andi	r24, 0xE1	; 225
    2ecc:	88 60       	ori	r24, 0x08	; 8
    2ece:	88 83       	st	Y, r24
    2ed0:	16 c0       	rjmp	.+44     	; 0x2efe <Timebase_DownCounter_Update+0xd2>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2ed2:	82 30       	cpi	r24, 0x02	; 2
    2ed4:	a1 f4       	brne	.+40     	; 0x2efe <Timebase_DownCounter_Update+0xd2>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2ed6:	1c 96       	adiw	r26, 0x0c	; 12
    2ed8:	8d 91       	ld	r24, X+
    2eda:	9d 91       	ld	r25, X+
    2edc:	0d 90       	ld	r0, X+
    2ede:	bc 91       	ld	r27, X
    2ee0:	a0 2d       	mov	r26, r0
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2ee2:	e2 59       	subi	r30, 0x92	; 146
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	20 81       	ld	r18, Z
    2ee8:	31 81       	ldd	r19, Z+1	; 0x01
    2eea:	42 81       	ldd	r20, Z+2	; 0x02
    2eec:	53 81       	ldd	r21, Z+3	; 0x03
    2eee:	82 0f       	add	r24, r18
    2ef0:	93 1f       	adc	r25, r19
    2ef2:	a4 1f       	adc	r26, r20
    2ef4:	b5 1f       	adc	r27, r21
    2ef6:	b2 93       	st	-Z, r27
    2ef8:	a2 93       	st	-Z, r26
    2efa:	92 93       	st	-Z, r25
    2efc:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	08 95       	ret

00002f08 <Timebase_DownCounter_Expired>:


uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	e0 91 2e 01 	lds	r30, 0x012E
    2f0e:	f0 91 2f 01 	lds	r31, 0x012F
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	9c 01       	movw	r18, r24
    2f16:	64 e0       	ldi	r22, 0x04	; 4
    2f18:	22 0f       	add	r18, r18
    2f1a:	33 1f       	adc	r19, r19
    2f1c:	6a 95       	dec	r22
    2f1e:	e1 f7       	brne	.-8      	; 0x2f18 <Timebase_DownCounter_Expired+0x10>
    2f20:	28 0f       	add	r18, r24
    2f22:	39 1f       	adc	r19, r25
    2f24:	e2 0f       	add	r30, r18
    2f26:	f3 1f       	adc	r31, r19
    2f28:	e7 59       	subi	r30, 0x97	; 151
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 81       	ld	r24, Z
    2f2e:	86 95       	lsr	r24
    2f30:	8f 70       	andi	r24, 0x0F	; 15
    2f32:	84 30       	cpi	r24, 0x04	; 4
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <Timebase_DownCounter_Expired+0x30>
    2f36:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2f38:	84 2f       	mov	r24, r20
    2f3a:	08 95       	ret

00002f3c <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2f3c:	e0 91 2e 01 	lds	r30, 0x012E
    2f40:	f0 91 2f 01 	lds	r31, 0x012F
    2f44:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2f46:	9c 01       	movw	r18, r24
    2f48:	74 e0       	ldi	r23, 0x04	; 4
    2f4a:	22 0f       	add	r18, r18
    2f4c:	33 1f       	adc	r19, r19
    2f4e:	7a 95       	dec	r23
    2f50:	e1 f7       	brne	.-8      	; 0x2f4a <Timebase_DownCounter_Expired_Event+0xe>
    2f52:	28 0f       	add	r18, r24
    2f54:	39 1f       	adc	r19, r25
    2f56:	e2 0f       	add	r30, r18
    2f58:	f3 1f       	adc	r31, r19
    2f5a:	df 01       	movw	r26, r30
    2f5c:	a7 59       	subi	r26, 0x97	; 151
    2f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f60:	8c 91       	ld	r24, X
    2f62:	86 95       	lsr	r24
    2f64:	8f 70       	andi	r24, 0x0F	; 15
    2f66:	84 30       	cpi	r24, 0x04	; 4
    2f68:	11 f0       	breq	.+4      	; 0x2f6e <Timebase_DownCounter_Expired_Event+0x32>
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	08 95       	ret
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2f6e:	e6 59       	subi	r30, 0x96	; 150
    2f70:	ff 4f       	sbci	r31, 0xFF	; 255
    2f72:	11 92       	st	Z+, r1
    2f74:	11 92       	st	Z+, r1
    2f76:	11 92       	st	Z+, r1
    2f78:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2f7a:	10 82       	st	Z, r1
    2f7c:	11 82       	std	Z+1, r1	; 0x01
    2f7e:	12 82       	std	Z+2, r1	; 0x02
    2f80:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2f82:	8c 91       	ld	r24, X
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2f84:	80 7e       	andi	r24, 0xE0	; 224
    2f86:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    2f88:	38 96       	adiw	r30, 0x08	; 8
    2f8a:	10 82       	st	Z, r1
    2f8c:	11 82       	std	Z+1, r1	; 0x01
    2f8e:	12 82       	std	Z+2, r1	; 0x02
    2f90:	13 82       	std	Z+3, r1	; 0x03
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2f94:	08 95       	ret

00002f96 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2f9a:	c0 91 2e 01 	lds	r28, 0x012E
    2f9e:	d0 91 2f 01 	lds	r29, 0x012F
    2fa2:	28 2f       	mov	r18, r24
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2fa6:	f9 01       	movw	r30, r18
    2fa8:	b4 e0       	ldi	r27, 0x04	; 4
    2faa:	ee 0f       	add	r30, r30
    2fac:	ff 1f       	adc	r31, r31
    2fae:	ba 95       	dec	r27
    2fb0:	e1 f7       	brne	.-8      	; 0x2faa <Timebase_DownCounter_Set_Period_Value_Securely+0x14>
    2fb2:	e2 0f       	add	r30, r18
    2fb4:	f3 1f       	adc	r31, r19
    2fb6:	ec 0f       	add	r30, r28
    2fb8:	fd 1f       	adc	r31, r29
    2fba:	e7 59       	subi	r30, 0x97	; 151
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	e9 56       	subi	r30, 0x69	; 105
    2fc2:	f0 40       	sbci	r31, 0x00	; 0
    2fc4:	80 fd       	sbrc	r24, 0
    2fc6:	24 c0       	rjmp	.+72     	; 0x3010 <Timebase_DownCounter_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2fc8:	e2 59       	subi	r30, 0x92	; 146
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	81 91       	ld	r24, Z+
    2fce:	91 91       	ld	r25, Z+
    2fd0:	a1 91       	ld	r26, Z+
    2fd2:	b1 91       	ld	r27, Z+
    2fd4:	84 1b       	sub	r24, r20
    2fd6:	95 0b       	sbc	r25, r21
    2fd8:	a6 0b       	sbc	r26, r22
    2fda:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounter[window].PeriodValue;
}


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2fdc:	b7 ff       	sbrs	r27, 7
    2fde:	05 c0       	rjmp	.+10     	; 0x2fea <Timebase_DownCounter_Set_Period_Value_Securely+0x54>
    Timebase->DownCounter[window].PeriodValue = 0;
    2fe0:	10 82       	st	Z, r1
    2fe2:	11 82       	std	Z+1, r1	; 0x01
    2fe4:	12 82       	std	Z+2, r1	; 0x02
    2fe6:	13 82       	std	Z+3, r1	; 0x03
    2fe8:	04 c0       	rjmp	.+8      	; 0x2ff2 <Timebase_DownCounter_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2fea:	80 83       	st	Z, r24
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	a2 83       	std	Z+2, r26	; 0x02
    2ff0:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->DownCounter[window].Status.PeriodFlag;
}


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2ff2:	f9 01       	movw	r30, r18
    2ff4:	a4 e0       	ldi	r26, 0x04	; 4
    2ff6:	ee 0f       	add	r30, r30
    2ff8:	ff 1f       	adc	r31, r31
    2ffa:	aa 95       	dec	r26
    2ffc:	e1 f7       	brne	.-8      	; 0x2ff6 <Timebase_DownCounter_Set_Period_Value_Securely+0x60>
    2ffe:	e2 0f       	add	r30, r18
    3000:	f3 1f       	adc	r31, r19
    3002:	ec 0f       	add	r30, r28
    3004:	fd 1f       	adc	r31, r29
    3006:	e7 59       	subi	r30, 0x97	; 151
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	80 81       	ld	r24, Z
    300c:	81 60       	ori	r24, 0x01	; 1
    300e:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <Timebase_DownCounter_Get_Remaining_Period_Value>:
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    3016:	e0 91 2e 01 	lds	r30, 0x012E
    301a:	f0 91 2f 01 	lds	r31, 0x012F
    301e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    3020:	9c 01       	movw	r18, r24
    3022:	44 e0       	ldi	r20, 0x04	; 4
    3024:	22 0f       	add	r18, r18
    3026:	33 1f       	adc	r19, r19
    3028:	4a 95       	dec	r20
    302a:	e1 f7       	brne	.-8      	; 0x3024 <Timebase_DownCounter_Get_Remaining_Period_Value+0xe>
    302c:	28 0f       	add	r18, r24
    302e:	39 1f       	adc	r19, r25
    3030:	e2 0f       	add	r30, r18
    3032:	f3 1f       	adc	r31, r19
    3034:	df 01       	movw	r26, r30
    3036:	ae 58       	subi	r26, 0x8E	; 142
    3038:	bf 4f       	sbci	r27, 0xFF	; 255
    303a:	e2 59       	subi	r30, 0x92	; 146
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	20 81       	ld	r18, Z
    3040:	31 81       	ldd	r19, Z+1	; 0x01
    3042:	42 81       	ldd	r20, Z+2	; 0x02
    3044:	53 81       	ldd	r21, Z+3	; 0x03
    3046:	8d 91       	ld	r24, X+
    3048:	9d 91       	ld	r25, X+
    304a:	0d 90       	ld	r0, X+
    304c:	bc 91       	ld	r27, X
    304e:	a0 2d       	mov	r26, r0
    3050:	28 1b       	sub	r18, r24
    3052:	39 0b       	sbc	r19, r25
    3054:	4a 0b       	sbc	r20, r26
    3056:	5b 0b       	sbc	r21, r27
    3058:	57 ff       	sbrs	r21, 7
    305a:	04 c0       	rjmp	.+8      	; 0x3064 <Timebase_DownCounter_Get_Remaining_Period_Value+0x4e>
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e0       	ldi	r20, 0x00	; 0
    3062:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    3064:	b9 01       	movw	r22, r18
    3066:	ca 01       	movw	r24, r20
    3068:	08 95       	ret

0000306a <Timebase_DownCounter_Period_Value_Expired>:


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    306e:	c0 91 2e 01 	lds	r28, 0x012E
    3072:	d0 91 2f 01 	lds	r29, 0x012F
    3076:	68 2f       	mov	r22, r24
    3078:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    307a:	fb 01       	movw	r30, r22
    307c:	a4 e0       	ldi	r26, 0x04	; 4
    307e:	ee 0f       	add	r30, r30
    3080:	ff 1f       	adc	r31, r31
    3082:	aa 95       	dec	r26
    3084:	e1 f7       	brne	.-8      	; 0x307e <Timebase_DownCounter_Period_Value_Expired+0x14>
    3086:	e6 0f       	add	r30, r22
    3088:	f7 1f       	adc	r31, r23
    308a:	ec 0f       	add	r30, r28
    308c:	fd 1f       	adc	r31, r29
    308e:	df 01       	movw	r26, r30
    3090:	ae 58       	subi	r26, 0x8E	; 142
    3092:	bf 4f       	sbci	r27, 0xFF	; 255
    3094:	e2 59       	subi	r30, 0x92	; 146
    3096:	ff 4f       	sbci	r31, 0xFF	; 255
    3098:	20 81       	ld	r18, Z
    309a:	31 81       	ldd	r19, Z+1	; 0x01
    309c:	42 81       	ldd	r20, Z+2	; 0x02
    309e:	53 81       	ldd	r21, Z+3	; 0x03
    30a0:	8d 91       	ld	r24, X+
    30a2:	9d 91       	ld	r25, X+
    30a4:	0d 90       	ld	r0, X+
    30a6:	bc 91       	ld	r27, X
    30a8:	a0 2d       	mov	r26, r0
    30aa:	28 1b       	sub	r18, r24
    30ac:	39 0b       	sbc	r19, r25
    30ae:	4a 0b       	sbc	r20, r26
    30b0:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    30b2:	57 fd       	sbrc	r21, 7
    30b4:	07 c0       	rjmp	.+14     	; 0x30c4 <Timebase_DownCounter_Period_Value_Expired+0x5a>
  return temp;
}


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    30b6:	21 15       	cp	r18, r1
    30b8:	31 05       	cpc	r19, r1
    30ba:	41 05       	cpc	r20, r1
    30bc:	51 05       	cpc	r21, r1
    30be:	11 f0       	breq	.+4      	; 0x30c4 <Timebase_DownCounter_Period_Value_Expired+0x5a>
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	12 c0       	rjmp	.+36     	; 0x30e8 <Timebase_DownCounter_Period_Value_Expired+0x7e>
    30c4:	20 e0       	ldi	r18, 0x00	; 0
    30c6:	cb 01       	movw	r24, r22
    30c8:	54 e0       	ldi	r21, 0x04	; 4
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	5a 95       	dec	r21
    30d0:	e1 f7       	brne	.-8      	; 0x30ca <Timebase_DownCounter_Period_Value_Expired+0x60>
    30d2:	86 0f       	add	r24, r22
    30d4:	97 1f       	adc	r25, r23
    30d6:	c8 0f       	add	r28, r24
    30d8:	d9 1f       	adc	r29, r25
    30da:	c7 59       	subi	r28, 0x97	; 151
    30dc:	df 4f       	sbci	r29, 0xFF	; 255
    30de:	88 81       	ld	r24, Y
    30e0:	80 ff       	sbrs	r24, 0
    30e2:	21 e0       	ldi	r18, 0x01	; 1
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    30e8:	82 2f       	mov	r24, r18
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <Timebase_DownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    30f0:	1f 93       	push	r17
    30f2:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    30f4:	0e 94 35 18 	call	0x306a	; 0x306a <Timebase_DownCounter_Period_Value_Expired>
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	11 f0       	breq	.+4      	; 0x3100 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	16 c0       	rjmp	.+44     	; 0x312c <Timebase_DownCounter_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3100:	e0 91 2e 01 	lds	r30, 0x012E
    3104:	f0 91 2f 01 	lds	r31, 0x012F
    3108:	21 2f       	mov	r18, r17
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	c9 01       	movw	r24, r18
    310e:	b4 e0       	ldi	r27, 0x04	; 4
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	ba 95       	dec	r27
    3116:	e1 f7       	brne	.-8      	; 0x3110 <Timebase_DownCounter_Period_Value_Expired_Event+0x20>
    3118:	82 0f       	add	r24, r18
    311a:	93 1f       	adc	r25, r19
    311c:	e8 0f       	add	r30, r24
    311e:	f9 1f       	adc	r31, r25
    3120:	e7 59       	subi	r30, 0x97	; 151
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	8e 7f       	andi	r24, 0xFE	; 254
    3128:	80 83       	st	Z, r24
    312a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    312c:	1f 91       	pop	r17
    312e:	08 95       	ret

00003130 <Timebase_DownCounter_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_Expired_Event(window);
    3130:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Timebase_DownCounter_Expired_Event>
}
    3134:	08 95       	ret

00003136 <Timebase_DownCounter_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
    3136:	1f 93       	push	r17
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	18 2f       	mov	r17, r24

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    313e:	e0 91 2e 01 	lds	r30, 0x012E
    3142:	f0 91 2f 01 	lds	r31, 0x012F
    3146:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_DownCounter_Expired_Event(window);
}


uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    3148:	9c 01       	movw	r18, r24
    314a:	44 e0       	ldi	r20, 0x04	; 4
    314c:	22 0f       	add	r18, r18
    314e:	33 1f       	adc	r19, r19
    3150:	4a 95       	dec	r20
    3152:	e1 f7       	brne	.-8      	; 0x314c <Timebase_DownCounter_Continuous_Expired_Event+0x16>
    3154:	28 0f       	add	r18, r24
    3156:	39 1f       	adc	r19, r25
    3158:	e2 0f       	add	r30, r18
    315a:	f3 1f       	adc	r31, r19
    315c:	ef 01       	movw	r28, r30
    315e:	c7 59       	subi	r28, 0x97	; 151
    3160:	df 4f       	sbci	r29, 0xFF	; 255
    3162:	88 81       	ld	r24, Y
    3164:	86 95       	lsr	r24
    3166:	8f 70       	andi	r24, 0x0F	; 15
    3168:	84 30       	cpi	r24, 0x04	; 4
    316a:	11 f0       	breq	.+4      	; 0x3170 <Timebase_DownCounter_Continuous_Expired_Event+0x3a>
    316c:	80 e0       	ldi	r24, 0x00	; 0
    316e:	1e c0       	rjmp	.+60     	; 0x31ac <Timebase_DownCounter_Continuous_Expired_Event+0x76>
void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
    3170:	df 01       	movw	r26, r30
    3172:	aa 58       	subi	r26, 0x8A	; 138
    3174:	bf 4f       	sbci	r27, 0xFF	; 255
    3176:	4d 91       	ld	r20, X+
    3178:	5d 91       	ld	r21, X+
    317a:	6d 91       	ld	r22, X+
    317c:	7c 91       	ld	r23, X
    317e:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    3180:	e6 59       	subi	r30, 0x96	; 150
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	11 92       	st	Z+, r1
    3186:	11 92       	st	Z+, r1
    3188:	11 92       	st	Z+, r1
    318a:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    318c:	10 82       	st	Z, r1
    318e:	11 82       	std	Z+1, r1	; 0x01
    3190:	12 82       	std	Z+2, r1	; 0x02
    3192:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    3194:	88 81       	ld	r24, Y
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3196:	80 7e       	andi	r24, 0xE0	; 224
    3198:	88 83       	st	Y, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    319a:	1d 92       	st	X+, r1
    319c:	1d 92       	st	X+, r1
    319e:	1d 92       	st	X+, r1
    31a0:	1c 92       	st	X, r1
    31a2:	13 97       	sbiw	r26, 0x03	; 3

uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_Get_ReloadValue(window);
    Timebase_DownCounter_Clear_All_Flags( window );
	Timebase_DownCounter_Set_Securely(window, temp);
    31a4:	81 2f       	mov	r24, r17
    31a6:	0e 94 92 16 	call	0x2d24	; 0x2d24 <Timebase_DownCounter_Set_Securely>
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	08 95       	ret

000031b4 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <Timebase_DownCounter_Update>
  }
}
    31ba:	08 95       	ret

000031bc <Timebase_DownCounter_Reset_All>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    31bc:	e0 91 2e 01 	lds	r30, 0x012E
    31c0:	f0 91 2f 01 	lds	r31, 0x012F
    31c4:	e6 59       	subi	r30, 0x96	; 150
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	11 92       	st	Z+, r1
    31ca:	11 92       	st	Z+, r1
    31cc:	11 92       	st	Z+, r1
    31ce:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    31d0:	10 82       	st	Z, r1
    31d2:	11 82       	std	Z+1, r1	; 0x01
    31d4:	12 82       	std	Z+2, r1	; 0x02
    31d6:	13 82       	std	Z+3, r1	; 0x03
    31d8:	ee 56       	subi	r30, 0x6E	; 110
    31da:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    31dc:	df 01       	movw	r26, r30
    31de:	a7 59       	subi	r26, 0x97	; 151
    31e0:	bf 4f       	sbci	r27, 0xFF	; 255
    31e2:	8c 91       	ld	r24, X
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    31e4:	80 7e       	andi	r24, 0xE0	; 224
    31e6:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    31e8:	ea 58       	subi	r30, 0x8A	; 138
    31ea:	ff 4f       	sbci	r31, 0xFF	; 255
    31ec:	10 82       	st	Z, r1
    31ee:	11 82       	std	Z+1, r1	; 0x01
    31f0:	12 82       	std	Z+2, r1	; 0x02
    31f2:	13 82       	std	Z+3, r1	; 0x03

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    31f4:	08 95       	ret

000031f6 <Timebase_LPDownCounter_Get_Status>:


/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
    31f6:	e0 91 2e 01 	lds	r30, 0x012E
    31fa:	f0 91 2f 01 	lds	r31, 0x012F
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9c 01       	movw	r18, r24
    3202:	54 e0       	ldi	r21, 0x04	; 4
    3204:	22 0f       	add	r18, r18
    3206:	33 1f       	adc	r19, r19
    3208:	5a 95       	dec	r21
    320a:	e1 f7       	brne	.-8      	; 0x3204 <Timebase_LPDownCounter_Get_Status+0xe>
    320c:	28 0f       	add	r18, r24
    320e:	39 1f       	adc	r19, r25
    3210:	e2 0f       	add	r30, r18
    3212:	f3 1f       	adc	r31, r19
    3214:	e6 58       	subi	r30, 0x86	; 134
    3216:	ff 4f       	sbci	r31, 0xFF	; 255
    3218:	80 81       	ld	r24, Z
    321a:	86 95       	lsr	r24
  return Timebase->LPDownCounter[window].Status.Value;
}
    321c:	8f 70       	andi	r24, 0x0F	; 15
    321e:	08 95       	ret

00003220 <Timebase_LPDownCounter_Set_Status>:


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3220:	e0 91 2e 01 	lds	r30, 0x012E
    3224:	f0 91 2f 01 	lds	r31, 0x012F
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	9c 01       	movw	r18, r24
    322c:	74 e0       	ldi	r23, 0x04	; 4
    322e:	22 0f       	add	r18, r18
    3230:	33 1f       	adc	r19, r19
    3232:	7a 95       	dec	r23
    3234:	e1 f7       	brne	.-8      	; 0x322e <Timebase_LPDownCounter_Set_Status+0xe>
    3236:	28 0f       	add	r18, r24
    3238:	39 1f       	adc	r19, r25
    323a:	e2 0f       	add	r30, r18
    323c:	f3 1f       	adc	r31, r19
    323e:	e6 58       	subi	r30, 0x86	; 134
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	6f 70       	andi	r22, 0x0F	; 15
    3244:	66 0f       	add	r22, r22
    3246:	80 81       	ld	r24, Z
    3248:	81 7e       	andi	r24, 0xE1	; 225
    324a:	86 2b       	or	r24, r22
    324c:	80 83       	st	Z, r24
}
    324e:	08 95       	ret

00003250 <Timebase_LPDownCounter_Get_Value>:


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
    3250:	e0 91 2e 01 	lds	r30, 0x012E
    3254:	f0 91 2f 01 	lds	r31, 0x012F
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9c 01       	movw	r18, r24
    325c:	a4 e0       	ldi	r26, 0x04	; 4
    325e:	22 0f       	add	r18, r18
    3260:	33 1f       	adc	r19, r19
    3262:	aa 95       	dec	r26
    3264:	e1 f7       	brne	.-8      	; 0x325e <Timebase_LPDownCounter_Get_Value+0xe>
    3266:	28 0f       	add	r18, r24
    3268:	39 1f       	adc	r19, r25
    326a:	e2 0f       	add	r30, r18
    326c:	f3 1f       	adc	r31, r19
    326e:	e1 58       	subi	r30, 0x81	; 129
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].Value;
}
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	08 95       	ret

0000327c <Timebase_LPDownCounter_Set_Value>:


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    327c:	e0 91 2e 01 	lds	r30, 0x012E
    3280:	f0 91 2f 01 	lds	r31, 0x012F
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	9c 01       	movw	r18, r24
    3288:	b4 e0       	ldi	r27, 0x04	; 4
    328a:	22 0f       	add	r18, r18
    328c:	33 1f       	adc	r19, r19
    328e:	ba 95       	dec	r27
    3290:	e1 f7       	brne	.-8      	; 0x328a <Timebase_LPDownCounter_Set_Value+0xe>
    3292:	28 0f       	add	r18, r24
    3294:	39 1f       	adc	r19, r25
    3296:	e2 0f       	add	r30, r18
    3298:	f3 1f       	adc	r31, r19
    329a:	e1 58       	subi	r30, 0x81	; 129
    329c:	ff 4f       	sbci	r31, 0xFF	; 255
    329e:	40 83       	st	Z, r20
    32a0:	51 83       	std	Z+1, r21	; 0x01
    32a2:	62 83       	std	Z+2, r22	; 0x02
    32a4:	73 83       	std	Z+3, r23	; 0x03
}
    32a6:	08 95       	ret

000032a8 <Timebase_LPDownCounter_Get_EndValue>:


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
    32a8:	e0 91 2e 01 	lds	r30, 0x012E
    32ac:	f0 91 2f 01 	lds	r31, 0x012F
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9c 01       	movw	r18, r24
    32b4:	44 e0       	ldi	r20, 0x04	; 4
    32b6:	22 0f       	add	r18, r18
    32b8:	33 1f       	adc	r19, r19
    32ba:	4a 95       	dec	r20
    32bc:	e1 f7       	brne	.-8      	; 0x32b6 <Timebase_LPDownCounter_Get_EndValue+0xe>
    32be:	28 0f       	add	r18, r24
    32c0:	39 1f       	adc	r19, r25
    32c2:	e2 0f       	add	r30, r18
    32c4:	f3 1f       	adc	r31, r19
    32c6:	e5 58       	subi	r30, 0x85	; 133
    32c8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ca:	60 81       	ld	r22, Z
    32cc:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].EndValue;
}
    32ce:	82 81       	ldd	r24, Z+2	; 0x02
    32d0:	93 81       	ldd	r25, Z+3	; 0x03
    32d2:	08 95       	ret

000032d4 <Timebase_LPDownCounter_Set_EndValue>:


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    32d4:	e0 91 2e 01 	lds	r30, 0x012E
    32d8:	f0 91 2f 01 	lds	r31, 0x012F
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	9c 01       	movw	r18, r24
    32e0:	a4 e0       	ldi	r26, 0x04	; 4
    32e2:	22 0f       	add	r18, r18
    32e4:	33 1f       	adc	r19, r19
    32e6:	aa 95       	dec	r26
    32e8:	e1 f7       	brne	.-8      	; 0x32e2 <Timebase_LPDownCounter_Set_EndValue+0xe>
    32ea:	28 0f       	add	r18, r24
    32ec:	39 1f       	adc	r19, r25
    32ee:	e2 0f       	add	r30, r18
    32f0:	f3 1f       	adc	r31, r19
    32f2:	e5 58       	subi	r30, 0x85	; 133
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	40 83       	st	Z, r20
    32f8:	51 83       	std	Z+1, r21	; 0x01
    32fa:	62 83       	std	Z+2, r22	; 0x02
    32fc:	73 83       	std	Z+3, r23	; 0x03
}
    32fe:	08 95       	ret

00003300 <Timebase_LPDownCounter_Get_PeriodValue>:


int32_t Timebase_LPDownCounter_Get_PeriodValue(uint8_t window){
    3300:	e0 91 2e 01 	lds	r30, 0x012E
    3304:	f0 91 2f 01 	lds	r31, 0x012F
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	9c 01       	movw	r18, r24
    330c:	b4 e0       	ldi	r27, 0x04	; 4
    330e:	22 0f       	add	r18, r18
    3310:	33 1f       	adc	r19, r19
    3312:	ba 95       	dec	r27
    3314:	e1 f7       	brne	.-8      	; 0x330e <Timebase_LPDownCounter_Get_PeriodValue+0xe>
    3316:	28 0f       	add	r18, r24
    3318:	39 1f       	adc	r19, r25
    331a:	e2 0f       	add	r30, r18
    331c:	f3 1f       	adc	r31, r19
    331e:	ed 57       	subi	r30, 0x7D	; 125
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].PeriodValue;
}
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	08 95       	ret

0000332c <Timebase_LPDownCounter_Set_PeriodValue>:


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    332c:	e0 91 2e 01 	lds	r30, 0x012E
    3330:	f0 91 2f 01 	lds	r31, 0x012F
    3334:	28 2f       	mov	r18, r24
    3336:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    3338:	77 ff       	sbrs	r23, 7
    333a:	11 c0       	rjmp	.+34     	; 0x335e <Timebase_LPDownCounter_Set_PeriodValue+0x32>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    333c:	c9 01       	movw	r24, r18
    333e:	b4 e0       	ldi	r27, 0x04	; 4
    3340:	88 0f       	add	r24, r24
    3342:	99 1f       	adc	r25, r25
    3344:	ba 95       	dec	r27
    3346:	e1 f7       	brne	.-8      	; 0x3340 <Timebase_LPDownCounter_Set_PeriodValue+0x14>
    3348:	82 0f       	add	r24, r18
    334a:	93 1f       	adc	r25, r19
    334c:	e8 0f       	add	r30, r24
    334e:	f9 1f       	adc	r31, r25
    3350:	ed 57       	subi	r30, 0x7D	; 125
    3352:	ff 4f       	sbci	r31, 0xFF	; 255
    3354:	10 82       	st	Z, r1
    3356:	11 82       	std	Z+1, r1	; 0x01
    3358:	12 82       	std	Z+2, r1	; 0x02
    335a:	13 82       	std	Z+3, r1	; 0x03
    335c:	08 95       	ret
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    335e:	c9 01       	movw	r24, r18
    3360:	a4 e0       	ldi	r26, 0x04	; 4
    3362:	88 0f       	add	r24, r24
    3364:	99 1f       	adc	r25, r25
    3366:	aa 95       	dec	r26
    3368:	e1 f7       	brne	.-8      	; 0x3362 <Timebase_LPDownCounter_Set_PeriodValue+0x36>
    336a:	82 0f       	add	r24, r18
    336c:	93 1f       	adc	r25, r19
    336e:	e8 0f       	add	r30, r24
    3370:	f9 1f       	adc	r31, r25
    3372:	ed 57       	subi	r30, 0x7D	; 125
    3374:	ff 4f       	sbci	r31, 0xFF	; 255
    3376:	40 83       	st	Z, r20
    3378:	51 83       	std	Z+1, r21	; 0x01
    337a:	62 83       	std	Z+2, r22	; 0x02
    337c:	73 83       	std	Z+3, r23	; 0x03
    337e:	08 95       	ret

00003380 <Timebase_LPDownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
    3380:	e0 91 2e 01 	lds	r30, 0x012E
    3384:	f0 91 2f 01 	lds	r31, 0x012F
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	9c 01       	movw	r18, r24
    338c:	44 e0       	ldi	r20, 0x04	; 4
    338e:	22 0f       	add	r18, r18
    3390:	33 1f       	adc	r19, r19
    3392:	4a 95       	dec	r20
    3394:	e1 f7       	brne	.-8      	; 0x338e <Timebase_LPDownCounter_Get_Period_Flag+0xe>
    3396:	28 0f       	add	r18, r24
    3398:	39 1f       	adc	r19, r25
    339a:	e2 0f       	add	r30, r18
    339c:	f3 1f       	adc	r31, r19
    339e:	e6 58       	subi	r30, 0x86	; 134
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	80 81       	ld	r24, Z
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}
    33a4:	81 70       	andi	r24, 0x01	; 1
    33a6:	08 95       	ret

000033a8 <Timebase_LPDownCounter_Set_Period_Flag>:


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    33a8:	e0 91 2e 01 	lds	r30, 0x012E
    33ac:	f0 91 2f 01 	lds	r31, 0x012F
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	9c 01       	movw	r18, r24
    33b4:	54 e0       	ldi	r21, 0x04	; 4
    33b6:	22 0f       	add	r18, r18
    33b8:	33 1f       	adc	r19, r19
    33ba:	5a 95       	dec	r21
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <Timebase_LPDownCounter_Set_Period_Flag+0xe>
    33be:	28 0f       	add	r18, r24
    33c0:	39 1f       	adc	r19, r25
    33c2:	e2 0f       	add	r30, r18
    33c4:	f3 1f       	adc	r31, r19
    33c6:	e6 58       	subi	r30, 0x86	; 134
    33c8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ca:	80 81       	ld	r24, Z
    33cc:	81 60       	ori	r24, 0x01	; 1
    33ce:	80 83       	st	Z, r24
}
    33d0:	08 95       	ret

000033d2 <Timebase_LPDownCounter_Clear_Period_Flag>:


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    33d2:	e0 91 2e 01 	lds	r30, 0x012E
    33d6:	f0 91 2f 01 	lds	r31, 0x012F
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	9c 01       	movw	r18, r24
    33de:	64 e0       	ldi	r22, 0x04	; 4
    33e0:	22 0f       	add	r18, r18
    33e2:	33 1f       	adc	r19, r19
    33e4:	6a 95       	dec	r22
    33e6:	e1 f7       	brne	.-8      	; 0x33e0 <Timebase_LPDownCounter_Clear_Period_Flag+0xe>
    33e8:	28 0f       	add	r18, r24
    33ea:	39 1f       	adc	r19, r25
    33ec:	e2 0f       	add	r30, r18
    33ee:	f3 1f       	adc	r31, r19
    33f0:	e6 58       	subi	r30, 0x86	; 134
    33f2:	ff 4f       	sbci	r31, 0xFF	; 255
    33f4:	80 81       	ld	r24, Z
    33f6:	8e 7f       	andi	r24, 0xFE	; 254
    33f8:	80 83       	st	Z, r24
}
    33fa:	08 95       	ret

000033fc <Timebase_LPDownCounter_Get_ReloadValue>:

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
    33fc:	e0 91 2e 01 	lds	r30, 0x012E
    3400:	f0 91 2f 01 	lds	r31, 0x012F
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	9c 01       	movw	r18, r24
    3408:	74 e0       	ldi	r23, 0x04	; 4
    340a:	22 0f       	add	r18, r18
    340c:	33 1f       	adc	r19, r19
    340e:	7a 95       	dec	r23
    3410:	e1 f7       	brne	.-8      	; 0x340a <Timebase_LPDownCounter_Get_ReloadValue+0xe>
    3412:	28 0f       	add	r18, r24
    3414:	39 1f       	adc	r19, r25
    3416:	e2 0f       	add	r30, r18
    3418:	f3 1f       	adc	r31, r19
    341a:	e9 57       	subi	r30, 0x79	; 121
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	60 81       	ld	r22, Z
    3420:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].ReloadValue;
}
    3422:	82 81       	ldd	r24, Z+2	; 0x02
    3424:	93 81       	ldd	r25, Z+3	; 0x03
    3426:	08 95       	ret

00003428 <Timebase_LPDownCounter_Set_ReloadValue>:

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    3428:	e0 91 2e 01 	lds	r30, 0x012E
    342c:	f0 91 2f 01 	lds	r31, 0x012F
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9c 01       	movw	r18, r24
    3434:	a4 e0       	ldi	r26, 0x04	; 4
    3436:	22 0f       	add	r18, r18
    3438:	33 1f       	adc	r19, r19
    343a:	aa 95       	dec	r26
    343c:	e1 f7       	brne	.-8      	; 0x3436 <Timebase_LPDownCounter_Set_ReloadValue+0xe>
    343e:	28 0f       	add	r18, r24
    3440:	39 1f       	adc	r19, r25
    3442:	e2 0f       	add	r30, r18
    3444:	f3 1f       	adc	r31, r19
    3446:	e9 57       	subi	r30, 0x79	; 121
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	40 83       	st	Z, r20
    344c:	51 83       	std	Z+1, r21	; 0x01
    344e:	62 83       	std	Z+2, r22	; 0x02
    3450:	73 83       	std	Z+3, r23	; 0x03
}
    3452:	08 95       	ret

00003454 <Timebase_LPDownCounter_Reset>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    3454:	e0 91 2e 01 	lds	r30, 0x012E
    3458:	f0 91 2f 01 	lds	r31, 0x012F
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	9c 01       	movw	r18, r24
    3460:	b4 e0       	ldi	r27, 0x04	; 4
    3462:	22 0f       	add	r18, r18
    3464:	33 1f       	adc	r19, r19
    3466:	ba 95       	dec	r27
    3468:	e1 f7       	brne	.-8      	; 0x3462 <Timebase_LPDownCounter_Reset+0xe>
    346a:	28 0f       	add	r18, r24
    346c:	39 1f       	adc	r19, r25
    346e:	e2 0f       	add	r30, r18
    3470:	f3 1f       	adc	r31, r19
    3472:	e5 58       	subi	r30, 0x85	; 133
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	11 92       	st	Z+, r1
    3478:	11 92       	st	Z+, r1
    347a:	11 92       	st	Z+, r1
    347c:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    347e:	10 82       	st	Z, r1
    3480:	11 82       	std	Z+1, r1	; 0x01
    3482:	12 82       	std	Z+2, r1	; 0x02
    3484:	13 82       	std	Z+3, r1	; 0x03
    3486:	ef 57       	subi	r30, 0x7F	; 127
    3488:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    348a:	df 01       	movw	r26, r30
    348c:	a6 58       	subi	r26, 0x86	; 134
    348e:	bf 4f       	sbci	r27, 0xFF	; 255
    3490:	8c 91       	ld	r24, X
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3492:	80 7e       	andi	r24, 0xE0	; 224
    3494:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    3496:	e9 57       	subi	r30, 0x79	; 121
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	10 82       	st	Z, r1
    349c:	11 82       	std	Z+1, r1	; 0x01
    349e:	12 82       	std	Z+2, r1	; 0x02
    34a0:	13 82       	std	Z+3, r1	; 0x03
  Timebase_LPDownCounter_Set_EndValue(window, 0);
  Timebase_LPDownCounter_Set_Value(window, 0);
  Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_LPDownCounter_Clear_Period_Flag(window);
  Timebase_LPDownCounter_Set_ReloadValue(window, 0);
} 
    34a2:	08 95       	ret

000034a4 <Timebase_LPDownCounter_Clear_All_Flags>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    34a4:	e0 91 2e 01 	lds	r30, 0x012E
    34a8:	f0 91 2f 01 	lds	r31, 0x012F
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	9c 01       	movw	r18, r24
    34b0:	44 e0       	ldi	r20, 0x04	; 4
    34b2:	22 0f       	add	r18, r18
    34b4:	33 1f       	adc	r19, r19
    34b6:	4a 95       	dec	r20
    34b8:	e1 f7       	brne	.-8      	; 0x34b2 <Timebase_LPDownCounter_Clear_All_Flags+0xe>
    34ba:	28 0f       	add	r18, r24
    34bc:	39 1f       	adc	r19, r25
    34be:	e2 0f       	add	r30, r18
    34c0:	f3 1f       	adc	r31, r19
    34c2:	e5 58       	subi	r30, 0x85	; 133
    34c4:	ff 4f       	sbci	r31, 0xFF	; 255
    34c6:	11 92       	st	Z+, r1
    34c8:	11 92       	st	Z+, r1
    34ca:	11 92       	st	Z+, r1
    34cc:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    34ce:	10 82       	st	Z, r1
    34d0:	11 82       	std	Z+1, r1	; 0x01
    34d2:	12 82       	std	Z+2, r1	; 0x02
    34d4:	13 82       	std	Z+3, r1	; 0x03
    34d6:	ef 57       	subi	r30, 0x7F	; 127
    34d8:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    34da:	df 01       	movw	r26, r30
    34dc:	a6 58       	subi	r26, 0x86	; 134
    34de:	bf 4f       	sbci	r27, 0xFF	; 255
    34e0:	8c 91       	ld	r24, X
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    34e2:	80 7e       	andi	r24, 0xE0	; 224
    34e4:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    34e6:	e9 57       	subi	r30, 0x79	; 121
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	10 82       	st	Z, r1
    34ec:	11 82       	std	Z+1, r1	; 0x01
    34ee:	12 82       	std	Z+2, r1	; 0x02
    34f0:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_LPDownCounter_Clear_All_Flags(uint8_t window){
  Timebase_LPDownCounter_Reset( window );
}
    34f2:	08 95       	ret

000034f4 <Timebase_LPDownCounter_Start>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    34f4:	e0 91 2e 01 	lds	r30, 0x012E
    34f8:	f0 91 2f 01 	lds	r31, 0x012F
    34fc:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    34fe:	9c 01       	movw	r18, r24
    3500:	54 e0       	ldi	r21, 0x04	; 4
    3502:	22 0f       	add	r18, r18
    3504:	33 1f       	adc	r19, r19
    3506:	5a 95       	dec	r21
    3508:	e1 f7       	brne	.-8      	; 0x3502 <Timebase_LPDownCounter_Start+0xe>
    350a:	28 0f       	add	r18, r24
    350c:	39 1f       	adc	r19, r25
    350e:	e2 0f       	add	r30, r18
    3510:	f3 1f       	adc	r31, r19
    3512:	e6 58       	subi	r30, 0x86	; 134
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	90 81       	ld	r25, Z
    3518:	89 2f       	mov	r24, r25
    351a:	86 95       	lsr	r24
    351c:	8f 70       	andi	r24, 0x0F	; 15
    351e:	81 30       	cpi	r24, 0x01	; 1
    3520:	19 f0       	breq	.+6      	; 0x3528 <Timebase_LPDownCounter_Start+0x34>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3522:	91 7e       	andi	r25, 0xE1	; 225
    3524:	92 60       	ori	r25, 0x02	; 2
    3526:	90 83       	st	Z, r25
    3528:	08 95       	ret

0000352a <Timebase_LPDownCounter_Stop>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    352a:	e0 91 2e 01 	lds	r30, 0x012E
    352e:	f0 91 2f 01 	lds	r31, 0x012F
    3532:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Stop(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    3534:	9c 01       	movw	r18, r24
    3536:	64 e0       	ldi	r22, 0x04	; 4
    3538:	22 0f       	add	r18, r18
    353a:	33 1f       	adc	r19, r19
    353c:	6a 95       	dec	r22
    353e:	e1 f7       	brne	.-8      	; 0x3538 <Timebase_LPDownCounter_Stop+0xe>
    3540:	28 0f       	add	r18, r24
    3542:	39 1f       	adc	r19, r25
    3544:	e2 0f       	add	r30, r18
    3546:	f3 1f       	adc	r31, r19
    3548:	e6 58       	subi	r30, 0x86	; 134
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	90 81       	ld	r25, Z
    354e:	89 2f       	mov	r24, r25
    3550:	86 95       	lsr	r24
    3552:	8f 70       	andi	r24, 0x0F	; 15
    3554:	82 30       	cpi	r24, 0x02	; 2
    3556:	19 f0       	breq	.+6      	; 0x355e <Timebase_LPDownCounter_Stop+0x34>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3558:	91 7e       	andi	r25, 0xE1	; 225
    355a:	94 60       	ori	r25, 0x04	; 4
    355c:	90 83       	st	Z, r25
    355e:	08 95       	ret

00003560 <Timebase_LPDownCounter_Set_Securely>:
    Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
    3560:	ef 92       	push	r14
    3562:	ff 92       	push	r15
    3564:	0f 93       	push	r16
    3566:	1f 93       	push	r17
    3568:	cf 93       	push	r28
    356a:	df 93       	push	r29
    356c:	7a 01       	movw	r14, r20
    356e:	8b 01       	movw	r16, r22

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    3570:	c0 91 2e 01 	lds	r28, 0x012E
    3574:	d0 91 2f 01 	lds	r29, 0x012F
    3578:	68 2f       	mov	r22, r24
    357a:	70 e0       	ldi	r23, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    357c:	fb 01       	movw	r30, r22
    357e:	b4 e0       	ldi	r27, 0x04	; 4
    3580:	ee 0f       	add	r30, r30
    3582:	ff 1f       	adc	r31, r31
    3584:	ba 95       	dec	r27
    3586:	e1 f7       	brne	.-8      	; 0x3580 <Timebase_LPDownCounter_Set_Securely+0x20>
    3588:	e6 0f       	add	r30, r22
    358a:	f7 1f       	adc	r31, r23
    358c:	ec 0f       	add	r30, r28
    358e:	fd 1f       	adc	r31, r29
    3590:	e6 58       	subi	r30, 0x86	; 134
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	80 81       	ld	r24, Z
    3596:	ea 57       	subi	r30, 0x7A	; 122
    3598:	f0 40       	sbci	r31, 0x00	; 0
    359a:	86 95       	lsr	r24
    359c:	8f 70       	andi	r24, 0x0F	; 15
    359e:	b1 f5       	brne	.+108    	; 0x360c <Timebase_LPDownCounter_Set_Securely+0xac>
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    35a0:	e1 58       	subi	r30, 0x81	; 129
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	e0 82       	st	Z, r14
    35a6:	f1 82       	std	Z+1, r15	; 0x01
    35a8:	02 83       	std	Z+2, r16	; 0x02
    35aa:	13 83       	std	Z+3, r17	; 0x03


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    35ac:	29 8d       	ldd	r18, Y+25	; 0x19
    35ae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    35b0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    35b2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    35b4:	89 8d       	ldd	r24, Y+25	; 0x19
    35b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    35b8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    35ba:	bc 8d       	ldd	r27, Y+28	; 0x1c
    if(temp0 == temp1){
    35bc:	28 17       	cp	r18, r24
    35be:	39 07       	cpc	r19, r25
    35c0:	4a 07       	cpc	r20, r26
    35c2:	5b 07       	cpc	r21, r27
    35c4:	99 f7       	brne	.-26     	; 0x35ac <Timebase_LPDownCounter_Set_Securely+0x4c>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    35c6:	fb 01       	movw	r30, r22
    35c8:	a4 e0       	ldi	r26, 0x04	; 4
    35ca:	ee 0f       	add	r30, r30
    35cc:	ff 1f       	adc	r31, r31
    35ce:	aa 95       	dec	r26
    35d0:	e1 f7       	brne	.-8      	; 0x35ca <Timebase_LPDownCounter_Set_Securely+0x6a>
    35d2:	e6 0f       	add	r30, r22
    35d4:	f7 1f       	adc	r31, r23
    35d6:	ec 0f       	add	r30, r28
    35d8:	fd 1f       	adc	r31, r29
    35da:	e5 58       	subi	r30, 0x85	; 133
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	2e 0d       	add	r18, r14
    35e0:	3f 1d       	adc	r19, r15
    35e2:	40 1f       	adc	r20, r16
    35e4:	51 1f       	adc	r21, r17
    35e6:	20 83       	st	Z, r18
    35e8:	31 83       	std	Z+1, r19	; 0x01
    35ea:	42 83       	std	Z+2, r20	; 0x02
    35ec:	53 83       	std	Z+3, r21	; 0x03
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    35ee:	3c 96       	adiw	r30, 0x0c	; 12
    35f0:	e0 82       	st	Z, r14
    35f2:	f1 82       	std	Z+1, r15	; 0x01
    35f4:	02 83       	std	Z+2, r16	; 0x02
    35f6:	13 83       	std	Z+3, r17	; 0x03
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    35f8:	3d 97       	sbiw	r30, 0x0d	; 13
    35fa:	90 81       	ld	r25, Z
    35fc:	89 2f       	mov	r24, r25
    35fe:	86 95       	lsr	r24
    3600:	8f 70       	andi	r24, 0x0F	; 15
    3602:	81 30       	cpi	r24, 0x01	; 1
    3604:	19 f0       	breq	.+6      	; 0x360c <Timebase_LPDownCounter_Set_Securely+0xac>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3606:	91 7e       	andi	r25, 0xE1	; 225
    3608:	92 60       	ori	r25, 0x02	; 2
    360a:	90 83       	st	Z, r25
    Timebase_LPDownCounter_Set_Value(window, value);
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPTimer_Get_Seconds() + value);
	Timebase_LPDownCounter_Set_ReloadValue(window, value);
    Timebase_LPDownCounter_Start(window);
  }
}
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	ff 90       	pop	r15
    3616:	ef 90       	pop	r14
    3618:	08 95       	ret

0000361a <Timebase_LPDownCounter_Set_Forcefully>:


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
    361a:	cf 92       	push	r12
    361c:	df 92       	push	r13
    361e:	ef 92       	push	r14
    3620:	ff 92       	push	r15
    3622:	0f 93       	push	r16
    3624:	1f 93       	push	r17
    3626:	6a 01       	movw	r12, r20
    3628:	7b 01       	movw	r14, r22
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    362a:	e0 91 2e 01 	lds	r30, 0x012E
    362e:	f0 91 2f 01 	lds	r31, 0x012F
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	89 01       	movw	r16, r18
    3638:	94 e0       	ldi	r25, 0x04	; 4
    363a:	00 0f       	add	r16, r16
    363c:	11 1f       	adc	r17, r17
    363e:	9a 95       	dec	r25
    3640:	e1 f7       	brne	.-8      	; 0x363a <Timebase_LPDownCounter_Set_Forcefully+0x20>
    3642:	02 0f       	add	r16, r18
    3644:	13 1f       	adc	r17, r19
    3646:	e0 0f       	add	r30, r16
    3648:	f1 1f       	adc	r31, r17
    364a:	e5 58       	subi	r30, 0x85	; 133
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	11 92       	st	Z+, r1
    3650:	11 92       	st	Z+, r1
    3652:	11 92       	st	Z+, r1
    3654:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    3656:	10 82       	st	Z, r1
    3658:	11 82       	std	Z+1, r1	; 0x01
    365a:	12 82       	std	Z+2, r1	; 0x02
    365c:	13 82       	std	Z+3, r1	; 0x03
    365e:	ef 57       	subi	r30, 0x7F	; 127
    3660:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3662:	df 01       	movw	r26, r30
    3664:	a6 58       	subi	r26, 0x86	; 134
    3666:	bf 4f       	sbci	r27, 0xFF	; 255
    3668:	9c 91       	ld	r25, X
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    366a:	90 7e       	andi	r25, 0xE0	; 224
    366c:	9c 93       	st	X, r25
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    366e:	e9 57       	subi	r30, 0x79	; 121
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	10 82       	st	Z, r1
    3674:	11 82       	std	Z+1, r1	; 0x01
    3676:	12 82       	std	Z+2, r1	; 0x02
    3678:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
    367a:	0e 94 b0 1a 	call	0x3560	; 0x3560 <Timebase_LPDownCounter_Set_Securely>
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    367e:	e0 91 2e 01 	lds	r30, 0x012E
    3682:	f0 91 2f 01 	lds	r31, 0x012F
    3686:	e0 0f       	add	r30, r16
    3688:	f1 1f       	adc	r31, r17
    368a:	e9 57       	subi	r30, 0x79	; 121
    368c:	ff 4f       	sbci	r31, 0xFF	; 255
    368e:	c0 82       	st	Z, r12
    3690:	d1 82       	std	Z+1, r13	; 0x01
    3692:	e2 82       	std	Z+2, r14	; 0x02
    3694:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	08 95       	ret

000036a4 <Timebase_LPDownCounter_Update>:


void Timebase_LPDownCounter_Update(uint8_t window){
    36a4:	cf 92       	push	r12
    36a6:	df 92       	push	r13
    36a8:	ef 92       	push	r14
    36aa:	ff 92       	push	r15
    36ac:	0f 93       	push	r16
    36ae:	1f 93       	push	r17
    36b0:	cf 93       	push	r28
    36b2:	df 93       	push	r29

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    36b4:	60 91 2e 01 	lds	r22, 0x012E
    36b8:	70 91 2f 01 	lds	r23, 0x012F
    36bc:	c8 2e       	mov	r12, r24
    36be:	dd 24       	eor	r13, r13
    36c0:	f6 01       	movw	r30, r12
    36c2:	a4 e0       	ldi	r26, 0x04	; 4
    36c4:	ee 0f       	add	r30, r30
    36c6:	ff 1f       	adc	r31, r31
    36c8:	aa 95       	dec	r26
    36ca:	e1 f7       	brne	.-8      	; 0x36c4 <Timebase_LPDownCounter_Update+0x20>
    36cc:	ec 0d       	add	r30, r12
    36ce:	fd 1d       	adc	r31, r13
    36d0:	e6 0f       	add	r30, r22
    36d2:	f7 1f       	adc	r31, r23
    36d4:	e6 58       	subi	r30, 0x86	; 134
    36d6:	ff 4f       	sbci	r31, 0xFF	; 255
    36d8:	80 81       	ld	r24, Z
    36da:	ea 57       	subi	r30, 0x7A	; 122
    36dc:	f0 40       	sbci	r31, 0x00	; 0
    36de:	86 95       	lsr	r24
    36e0:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_LPDownCounter_Set_ReloadValue(window, value);
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    36e2:	81 30       	cpi	r24, 0x01	; 1
    36e4:	09 f0       	breq	.+2      	; 0x36e8 <Timebase_LPDownCounter_Update+0x44>
    36e6:	4b c0       	rjmp	.+150    	; 0x377e <Timebase_LPDownCounter_Update+0xda>
  Timebase->LPDownCounter[window].Value = value;
}


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
  return Timebase->LPDownCounter[window].EndValue;
    36e8:	e5 58       	subi	r30, 0x85	; 133
    36ea:	ff 4f       	sbci	r31, 0xFF	; 255
    36ec:	e0 80       	ld	r14, Z
    36ee:	f1 80       	ldd	r15, Z+1	; 0x01
    36f0:	02 81       	ldd	r16, Z+2	; 0x02
    36f2:	13 81       	ldd	r17, Z+3	; 0x03


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    36f4:	fb 01       	movw	r30, r22
    36f6:	21 8d       	ldd	r18, Z+25	; 0x19
    36f8:	32 8d       	ldd	r19, Z+26	; 0x1a
    36fa:	43 8d       	ldd	r20, Z+27	; 0x1b
    36fc:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    36fe:	81 8d       	ldd	r24, Z+25	; 0x19
    3700:	92 8d       	ldd	r25, Z+26	; 0x1a
    3702:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3704:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    3706:	28 17       	cp	r18, r24
    3708:	39 07       	cpc	r19, r25
    370a:	4a 07       	cpc	r20, r26
    370c:	5b 07       	cpc	r21, r27
    370e:	91 f7       	brne	.-28     	; 0x36f4 <Timebase_LPDownCounter_Update+0x50>
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    3710:	d8 01       	movw	r26, r16
    3712:	c7 01       	movw	r24, r14
    3714:	82 1b       	sub	r24, r18
    3716:	93 0b       	sbc	r25, r19
    3718:	a4 0b       	sbc	r26, r20
    371a:	b5 0b       	sbc	r27, r21
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    371c:	e6 01       	movw	r28, r12
    371e:	f4 e0       	ldi	r31, 0x04	; 4
    3720:	cc 0f       	add	r28, r28
    3722:	dd 1f       	adc	r29, r29
    3724:	fa 95       	dec	r31
    3726:	e1 f7       	brne	.-8      	; 0x3720 <Timebase_LPDownCounter_Update+0x7c>
    3728:	cc 0d       	add	r28, r12
    372a:	dd 1d       	adc	r29, r13
    372c:	c6 0f       	add	r28, r22
    372e:	d7 1f       	adc	r29, r23
    3730:	fe 01       	movw	r30, r28
    3732:	e1 58       	subi	r30, 0x81	; 129
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	80 83       	st	Z, r24
    3738:	91 83       	std	Z+1, r25	; 0x01
    373a:	a2 83       	std	Z+2, r26	; 0x02
    373c:	b3 83       	std	Z+3, r27	; 0x03


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
    373e:	18 16       	cp	r1, r24
    3740:	19 06       	cpc	r1, r25
    3742:	1a 06       	cpc	r1, r26
    3744:	1b 06       	cpc	r1, r27
    3746:	0c f4       	brge	.+2      	; 0x374a <Timebase_LPDownCounter_Update+0xa6>
    3748:	45 c0       	rjmp	.+138    	; 0x37d4 <Timebase_LPDownCounter_Update+0x130>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    374a:	c5 58       	subi	r28, 0x85	; 133
    374c:	df 4f       	sbci	r29, 0xFF	; 255
    374e:	18 82       	st	Y, r1
    3750:	19 82       	std	Y+1, r1	; 0x01
    3752:	1a 82       	std	Y+2, r1	; 0x02
    3754:	1b 82       	std	Y+3, r1	; 0x03
    3756:	cb 57       	subi	r28, 0x7B	; 123
    3758:	d0 40       	sbci	r29, 0x00	; 0
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    375a:	10 82       	st	Z, r1
    375c:	11 82       	std	Z+1, r1	; 0x01
    375e:	12 82       	std	Z+2, r1	; 0x02
    3760:	13 82       	std	Z+3, r1	; 0x03
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3762:	fe 01       	movw	r30, r28
    3764:	e6 58       	subi	r30, 0x86	; 134
    3766:	ff 4f       	sbci	r31, 0xFF	; 255
    3768:	80 81       	ld	r24, Z
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    376a:	c9 57       	subi	r28, 0x79	; 121
    376c:	df 4f       	sbci	r29, 0xFF	; 255
    376e:	18 82       	st	Y, r1
    3770:	19 82       	std	Y+1, r1	; 0x01
    3772:	1a 82       	std	Y+2, r1	; 0x02
    3774:	1b 82       	std	Y+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3776:	80 7e       	andi	r24, 0xE0	; 224
    3778:	88 60       	ori	r24, 0x08	; 8
    377a:	80 83       	st	Z, r24
    377c:	2b c0       	rjmp	.+86     	; 0x37d4 <Timebase_LPDownCounter_Update+0x130>
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
      Timebase_LPDownCounter_Reset(window);
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    377e:	82 30       	cpi	r24, 0x02	; 2
    3780:	49 f5       	brne	.+82     	; 0x37d4 <Timebase_LPDownCounter_Update+0x130>
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    3782:	e1 58       	subi	r30, 0x81	; 129
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	e0 80       	ld	r14, Z
    3788:	f1 80       	ldd	r15, Z+1	; 0x01
    378a:	02 81       	ldd	r16, Z+2	; 0x02
    378c:	13 81       	ldd	r17, Z+3	; 0x03


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    378e:	fb 01       	movw	r30, r22
    3790:	21 8d       	ldd	r18, Z+25	; 0x19
    3792:	32 8d       	ldd	r19, Z+26	; 0x1a
    3794:	43 8d       	ldd	r20, Z+27	; 0x1b
    3796:	54 8d       	ldd	r21, Z+28	; 0x1c
    temp1 = Timebase->Time.LPTimerSeconds;
    3798:	81 8d       	ldd	r24, Z+25	; 0x19
    379a:	92 8d       	ldd	r25, Z+26	; 0x1a
    379c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    379e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    if(temp0 == temp1){
    37a0:	28 17       	cp	r18, r24
    37a2:	39 07       	cpc	r19, r25
    37a4:	4a 07       	cpc	r20, r26
    37a6:	5b 07       	cpc	r21, r27
    37a8:	91 f7       	brne	.-28     	; 0x378e <Timebase_LPDownCounter_Update+0xea>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    37aa:	c6 01       	movw	r24, r12
    37ac:	e4 e0       	ldi	r30, 0x04	; 4
    37ae:	88 0f       	add	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	ea 95       	dec	r30
    37b4:	e1 f7       	brne	.-8      	; 0x37ae <Timebase_LPDownCounter_Update+0x10a>
    37b6:	8c 0d       	add	r24, r12
    37b8:	9d 1d       	adc	r25, r13
    37ba:	68 0f       	add	r22, r24
    37bc:	79 1f       	adc	r23, r25
    37be:	65 58       	subi	r22, 0x85	; 133
    37c0:	7f 4f       	sbci	r23, 0xFF	; 255
    37c2:	2e 0d       	add	r18, r14
    37c4:	3f 1d       	adc	r19, r15
    37c6:	40 1f       	adc	r20, r16
    37c8:	51 1f       	adc	r21, r17
    37ca:	fb 01       	movw	r30, r22
    37cc:	20 83       	st	Z, r18
    37ce:	31 83       	std	Z+1, r19	; 0x01
    37d0:	42 83       	std	Z+2, r20	; 0x02
    37d2:	53 83       	std	Z+3, r21	; 0x03
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPDownCounter_Get_Value(window) + Timebase_LPTimer_Get_Seconds());
  }
}
    37d4:	df 91       	pop	r29
    37d6:	cf 91       	pop	r28
    37d8:	1f 91       	pop	r17
    37da:	0f 91       	pop	r16
    37dc:	ff 90       	pop	r15
    37de:	ef 90       	pop	r14
    37e0:	df 90       	pop	r13
    37e2:	cf 90       	pop	r12
    37e4:	08 95       	ret

000037e6 <Timebase_LPDownCounter_Expired>:


uint8_t Timebase_LPDownCounter_Expired(uint8_t window){
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	e0 91 2e 01 	lds	r30, 0x012E
    37ec:	f0 91 2f 01 	lds	r31, 0x012F
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9c 01       	movw	r18, r24
    37f4:	b4 e0       	ldi	r27, 0x04	; 4
    37f6:	22 0f       	add	r18, r18
    37f8:	33 1f       	adc	r19, r19
    37fa:	ba 95       	dec	r27
    37fc:	e1 f7       	brne	.-8      	; 0x37f6 <Timebase_LPDownCounter_Expired+0x10>
    37fe:	28 0f       	add	r18, r24
    3800:	39 1f       	adc	r19, r25
    3802:	e2 0f       	add	r30, r18
    3804:	f3 1f       	adc	r31, r19
    3806:	e6 58       	subi	r30, 0x86	; 134
    3808:	ff 4f       	sbci	r31, 0xFF	; 255
    380a:	80 81       	ld	r24, Z
    380c:	86 95       	lsr	r24
    380e:	8f 70       	andi	r24, 0x0F	; 15
    3810:	84 30       	cpi	r24, 0x04	; 4
    3812:	09 f4       	brne	.+2      	; 0x3816 <Timebase_LPDownCounter_Expired+0x30>
    3814:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3816:	84 2f       	mov	r24, r20
    3818:	08 95       	ret

0000381a <Timebase_LPDownCounter_Expired_Event>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    381a:	e0 91 2e 01 	lds	r30, 0x012E
    381e:	f0 91 2f 01 	lds	r31, 0x012F
    3822:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_LPDownCounter_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    3824:	9c 01       	movw	r18, r24
    3826:	44 e0       	ldi	r20, 0x04	; 4
    3828:	22 0f       	add	r18, r18
    382a:	33 1f       	adc	r19, r19
    382c:	4a 95       	dec	r20
    382e:	e1 f7       	brne	.-8      	; 0x3828 <Timebase_LPDownCounter_Expired_Event+0xe>
    3830:	28 0f       	add	r18, r24
    3832:	39 1f       	adc	r19, r25
    3834:	e2 0f       	add	r30, r18
    3836:	f3 1f       	adc	r31, r19
    3838:	df 01       	movw	r26, r30
    383a:	a6 58       	subi	r26, 0x86	; 134
    383c:	bf 4f       	sbci	r27, 0xFF	; 255
    383e:	8c 91       	ld	r24, X
    3840:	86 95       	lsr	r24
    3842:	8f 70       	andi	r24, 0x0F	; 15
    3844:	84 30       	cpi	r24, 0x04	; 4
    3846:	11 f0       	breq	.+4      	; 0x384c <Timebase_LPDownCounter_Expired_Event+0x32>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	08 95       	ret
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    384c:	e5 58       	subi	r30, 0x85	; 133
    384e:	ff 4f       	sbci	r31, 0xFF	; 255
    3850:	11 92       	st	Z+, r1
    3852:	11 92       	st	Z+, r1
    3854:	11 92       	st	Z+, r1
    3856:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    3858:	10 82       	st	Z, r1
    385a:	11 82       	std	Z+1, r1	; 0x01
    385c:	12 82       	std	Z+2, r1	; 0x02
    385e:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3860:	8c 91       	ld	r24, X
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3862:	80 7e       	andi	r24, 0xE0	; 224
    3864:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    3866:	38 96       	adiw	r30, 0x08	; 8
    3868:	10 82       	st	Z, r1
    386a:	11 82       	std	Z+1, r1	; 0x01
    386c:	12 82       	std	Z+2, r1	; 0x02
    386e:	13 82       	std	Z+3, r1	; 0x03
    3870:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3872:	08 95       	ret

00003874 <Timebase_LPDownCounter_Oneshot_Expired_Event>:

uint8_t Timebase_LPDownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_LPDownCounter_Expired_Event(window);
    3874:	0e 94 0d 1c 	call	0x381a	; 0x381a <Timebase_LPDownCounter_Expired_Event>
}
    3878:	08 95       	ret

0000387a <Timebase_LPDownCounter_Continuous_Expired_Event>:


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	18 2f       	mov	r17, r24

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    3882:	e0 91 2e 01 	lds	r30, 0x012E
    3886:	f0 91 2f 01 	lds	r31, 0x012F
    388a:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_LPDownCounter_Expired_Event(window);
}


uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    388c:	9c 01       	movw	r18, r24
    388e:	54 e0       	ldi	r21, 0x04	; 4
    3890:	22 0f       	add	r18, r18
    3892:	33 1f       	adc	r19, r19
    3894:	5a 95       	dec	r21
    3896:	e1 f7       	brne	.-8      	; 0x3890 <Timebase_LPDownCounter_Continuous_Expired_Event+0x16>
    3898:	28 0f       	add	r18, r24
    389a:	39 1f       	adc	r19, r25
    389c:	e2 0f       	add	r30, r18
    389e:	f3 1f       	adc	r31, r19
    38a0:	ef 01       	movw	r28, r30
    38a2:	c6 58       	subi	r28, 0x86	; 134
    38a4:	df 4f       	sbci	r29, 0xFF	; 255
    38a6:	88 81       	ld	r24, Y
    38a8:	86 95       	lsr	r24
    38aa:	8f 70       	andi	r24, 0x0F	; 15
    38ac:	84 30       	cpi	r24, 0x04	; 4
    38ae:	11 f0       	breq	.+4      	; 0x38b4 <Timebase_LPDownCounter_Continuous_Expired_Event+0x3a>
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	1e c0       	rjmp	.+60     	; 0x38f0 <Timebase_LPDownCounter_Continuous_Expired_Event+0x76>
void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
    38b4:	df 01       	movw	r26, r30
    38b6:	a9 57       	subi	r26, 0x79	; 121
    38b8:	bf 4f       	sbci	r27, 0xFF	; 255
    38ba:	4d 91       	ld	r20, X+
    38bc:	5d 91       	ld	r21, X+
    38be:	6d 91       	ld	r22, X+
    38c0:	7c 91       	ld	r23, X
    38c2:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    38c4:	e5 58       	subi	r30, 0x85	; 133
    38c6:	ff 4f       	sbci	r31, 0xFF	; 255
    38c8:	11 92       	st	Z+, r1
    38ca:	11 92       	st	Z+, r1
    38cc:	11 92       	st	Z+, r1
    38ce:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    38d0:	10 82       	st	Z, r1
    38d2:	11 82       	std	Z+1, r1	; 0x01
    38d4:	12 82       	std	Z+2, r1	; 0x02
    38d6:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    38d8:	88 81       	ld	r24, Y
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    38da:	80 7e       	andi	r24, 0xE0	; 224
    38dc:	88 83       	st	Y, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    38de:	1d 92       	st	X+, r1
    38e0:	1d 92       	st	X+, r1
    38e2:	1d 92       	st	X+, r1
    38e4:	1c 92       	st	X, r1
    38e6:	13 97       	sbiw	r26, 0x03	; 3

uint8_t Timebase_LPDownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_LPDownCounter_Get_ReloadValue(window);
    Timebase_LPDownCounter_Clear_All_Flags( window );
	Timebase_LPDownCounter_Set_Securely(window, temp);
    38e8:	81 2f       	mov	r24, r17
    38ea:	0e 94 b0 1a 	call	0x3560	; 0x3560 <Timebase_LPDownCounter_Set_Securely>
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	1f 91       	pop	r17
    38f6:	08 95       	ret

000038f8 <Timebase_LPDownCounter_Set_Period_Value_Securely>:


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
    38fc:	c0 91 2e 01 	lds	r28, 0x012E
    3900:	d0 91 2f 01 	lds	r29, 0x012F
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    3908:	f9 01       	movw	r30, r18
    390a:	a4 e0       	ldi	r26, 0x04	; 4
    390c:	ee 0f       	add	r30, r30
    390e:	ff 1f       	adc	r31, r31
    3910:	aa 95       	dec	r26
    3912:	e1 f7       	brne	.-8      	; 0x390c <Timebase_LPDownCounter_Set_Period_Value_Securely+0x14>
    3914:	e2 0f       	add	r30, r18
    3916:	f3 1f       	adc	r31, r19
    3918:	ec 0f       	add	r30, r28
    391a:	fd 1f       	adc	r31, r29
    391c:	e6 58       	subi	r30, 0x86	; 134
    391e:	ff 4f       	sbci	r31, 0xFF	; 255
    3920:	80 81       	ld	r24, Z
    3922:	ea 57       	subi	r30, 0x7A	; 122
    3924:	f0 40       	sbci	r31, 0x00	; 0
    3926:	80 fd       	sbrc	r24, 0
    3928:	24 c0       	rjmp	.+72     	; 0x3972 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x7a>
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    392a:	e1 58       	subi	r30, 0x81	; 129
    392c:	ff 4f       	sbci	r31, 0xFF	; 255
    392e:	81 91       	ld	r24, Z+
    3930:	91 91       	ld	r25, Z+
    3932:	a1 91       	ld	r26, Z+
    3934:	b1 91       	ld	r27, Z+
    3936:	84 1b       	sub	r24, r20
    3938:	95 0b       	sbc	r25, r21
    393a:	a6 0b       	sbc	r26, r22
    393c:	b7 0b       	sbc	r27, r23
  return Timebase->LPDownCounter[window].PeriodValue;
}


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    393e:	b7 ff       	sbrs	r27, 7
    3940:	05 c0       	rjmp	.+10     	; 0x394c <Timebase_LPDownCounter_Set_Period_Value_Securely+0x54>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    3942:	10 82       	st	Z, r1
    3944:	11 82       	std	Z+1, r1	; 0x01
    3946:	12 82       	std	Z+2, r1	; 0x02
    3948:	13 82       	std	Z+3, r1	; 0x03
    394a:	04 c0       	rjmp	.+8      	; 0x3954 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    394c:	80 83       	st	Z, r24
    394e:	91 83       	std	Z+1, r25	; 0x01
    3950:	a2 83       	std	Z+2, r26	; 0x02
    3952:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    3954:	f9 01       	movw	r30, r18
    3956:	64 e0       	ldi	r22, 0x04	; 4
    3958:	ee 0f       	add	r30, r30
    395a:	ff 1f       	adc	r31, r31
    395c:	6a 95       	dec	r22
    395e:	e1 f7       	brne	.-8      	; 0x3958 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x60>
    3960:	e2 0f       	add	r30, r18
    3962:	f3 1f       	adc	r31, r19
    3964:	ec 0f       	add	r30, r28
    3966:	fd 1f       	adc	r31, r29
    3968:	e6 58       	subi	r30, 0x86	; 134
    396a:	ff 4f       	sbci	r31, 0xFF	; 255
    396c:	80 81       	ld	r24, Z
    396e:	81 60       	ori	r24, 0x01	; 1
    3970:	80 83       	st	Z, r24
void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    Timebase_LPDownCounter_Set_Period_Flag(window);
  }
}
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	08 95       	ret

00003978 <Timebase_LPDownCounter_Get_Remaining_Period_Value>:
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    3978:	e0 91 2e 01 	lds	r30, 0x012E
    397c:	f0 91 2f 01 	lds	r31, 0x012F
    3980:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    3982:	9c 01       	movw	r18, r24
    3984:	b4 e0       	ldi	r27, 0x04	; 4
    3986:	22 0f       	add	r18, r18
    3988:	33 1f       	adc	r19, r19
    398a:	ba 95       	dec	r27
    398c:	e1 f7       	brne	.-8      	; 0x3986 <Timebase_LPDownCounter_Get_Remaining_Period_Value+0xe>
    398e:	28 0f       	add	r18, r24
    3990:	39 1f       	adc	r19, r25
    3992:	e2 0f       	add	r30, r18
    3994:	f3 1f       	adc	r31, r19
    3996:	df 01       	movw	r26, r30
    3998:	ad 57       	subi	r26, 0x7D	; 125
    399a:	bf 4f       	sbci	r27, 0xFF	; 255
    399c:	e1 58       	subi	r30, 0x81	; 129
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	20 81       	ld	r18, Z
    39a2:	31 81       	ldd	r19, Z+1	; 0x01
    39a4:	42 81       	ldd	r20, Z+2	; 0x02
    39a6:	53 81       	ldd	r21, Z+3	; 0x03
    39a8:	8d 91       	ld	r24, X+
    39aa:	9d 91       	ld	r25, X+
    39ac:	0d 90       	ld	r0, X+
    39ae:	bc 91       	ld	r27, X
    39b0:	a0 2d       	mov	r26, r0
    39b2:	28 1b       	sub	r18, r24
    39b4:	39 0b       	sbc	r19, r25
    39b6:	4a 0b       	sbc	r20, r26
    39b8:	5b 0b       	sbc	r21, r27
    39ba:	57 ff       	sbrs	r21, 7
    39bc:	04 c0       	rjmp	.+8      	; 0x39c6 <Timebase_LPDownCounter_Get_Remaining_Period_Value+0x4e>
    39be:	20 e0       	ldi	r18, 0x00	; 0
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	40 e0       	ldi	r20, 0x00	; 0
    39c4:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    39c6:	b9 01       	movw	r22, r18
    39c8:	ca 01       	movw	r24, r20
    39ca:	08 95       	ret

000039cc <Timebase_LPDownCounter_Period_Value_Expired>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
    39cc:	cf 93       	push	r28
    39ce:	df 93       	push	r29
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    39d0:	c0 91 2e 01 	lds	r28, 0x012E
    39d4:	d0 91 2f 01 	lds	r29, 0x012F
    39d8:	68 2f       	mov	r22, r24
    39da:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    39dc:	fb 01       	movw	r30, r22
    39de:	44 e0       	ldi	r20, 0x04	; 4
    39e0:	ee 0f       	add	r30, r30
    39e2:	ff 1f       	adc	r31, r31
    39e4:	4a 95       	dec	r20
    39e6:	e1 f7       	brne	.-8      	; 0x39e0 <Timebase_LPDownCounter_Period_Value_Expired+0x14>
    39e8:	e6 0f       	add	r30, r22
    39ea:	f7 1f       	adc	r31, r23
    39ec:	ec 0f       	add	r30, r28
    39ee:	fd 1f       	adc	r31, r29
    39f0:	df 01       	movw	r26, r30
    39f2:	ad 57       	subi	r26, 0x7D	; 125
    39f4:	bf 4f       	sbci	r27, 0xFF	; 255
    39f6:	e1 58       	subi	r30, 0x81	; 129
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	20 81       	ld	r18, Z
    39fc:	31 81       	ldd	r19, Z+1	; 0x01
    39fe:	42 81       	ldd	r20, Z+2	; 0x02
    3a00:	53 81       	ldd	r21, Z+3	; 0x03
    3a02:	8d 91       	ld	r24, X+
    3a04:	9d 91       	ld	r25, X+
    3a06:	0d 90       	ld	r0, X+
    3a08:	bc 91       	ld	r27, X
    3a0a:	a0 2d       	mov	r26, r0
    3a0c:	28 1b       	sub	r18, r24
    3a0e:	39 0b       	sbc	r19, r25
    3a10:	4a 0b       	sbc	r20, r26
    3a12:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    3a14:	57 fd       	sbrc	r21, 7
    3a16:	07 c0       	rjmp	.+14     	; 0x3a26 <Timebase_LPDownCounter_Period_Value_Expired+0x5a>
  return temp;
}


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_LPDownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    3a18:	21 15       	cp	r18, r1
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	41 05       	cpc	r20, r1
    3a1e:	51 05       	cpc	r21, r1
    3a20:	11 f0       	breq	.+4      	; 0x3a26 <Timebase_LPDownCounter_Period_Value_Expired+0x5a>
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	12 c0       	rjmp	.+36     	; 0x3a4a <Timebase_LPDownCounter_Period_Value_Expired+0x7e>
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	cb 01       	movw	r24, r22
    3a2a:	34 e0       	ldi	r19, 0x04	; 4
    3a2c:	88 0f       	add	r24, r24
    3a2e:	99 1f       	adc	r25, r25
    3a30:	3a 95       	dec	r19
    3a32:	e1 f7       	brne	.-8      	; 0x3a2c <Timebase_LPDownCounter_Period_Value_Expired+0x60>
    3a34:	86 0f       	add	r24, r22
    3a36:	97 1f       	adc	r25, r23
    3a38:	c8 0f       	add	r28, r24
    3a3a:	d9 1f       	adc	r29, r25
    3a3c:	c6 58       	subi	r28, 0x86	; 134
    3a3e:	df 4f       	sbci	r29, 0xFF	; 255
    3a40:	88 81       	ld	r24, Y
    3a42:	80 ff       	sbrs	r24, 0
    3a44:	21 e0       	ldi	r18, 0x01	; 1
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3a4a:	82 2f       	mov	r24, r18
    3a4c:	df 91       	pop	r29
    3a4e:	cf 91       	pop	r28
    3a50:	08 95       	ret

00003a52 <Timebase_LPDownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired_Event(uint8_t window){
    3a52:	1f 93       	push	r17
    3a54:	18 2f       	mov	r17, r24
  if(Timebase_LPDownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    3a56:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <Timebase_LPDownCounter_Period_Value_Expired>
    3a5a:	81 30       	cpi	r24, 0x01	; 1
    3a5c:	11 f0       	breq	.+4      	; 0x3a62 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x10>
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	16 c0       	rjmp	.+44     	; 0x3a8e <Timebase_LPDownCounter_Period_Value_Expired_Event+0x3c>
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3a62:	e0 91 2e 01 	lds	r30, 0x012E
    3a66:	f0 91 2f 01 	lds	r31, 0x012F
    3a6a:	21 2f       	mov	r18, r17
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	c9 01       	movw	r24, r18
    3a70:	54 e0       	ldi	r21, 0x04	; 4
    3a72:	88 0f       	add	r24, r24
    3a74:	99 1f       	adc	r25, r25
    3a76:	5a 95       	dec	r21
    3a78:	e1 f7       	brne	.-8      	; 0x3a72 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x20>
    3a7a:	82 0f       	add	r24, r18
    3a7c:	93 1f       	adc	r25, r19
    3a7e:	e8 0f       	add	r30, r24
    3a80:	f9 1f       	adc	r31, r25
    3a82:	e6 58       	subi	r30, 0x86	; 134
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	8e 7f       	andi	r24, 0xFE	; 254
    3a8a:	80 83       	st	Z, r24
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3a8e:	1f 91       	pop	r17
    3a90:	08 95       	ret

00003a92 <Timebase_LPDownCounter_Update_All>:


void Timebase_LPDownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Update(i);
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <Timebase_LPDownCounter_Update>
  }
}
    3a98:	08 95       	ret

00003a9a <Timebase_LPDownCounter_Reset_All>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    3a9a:	e0 91 2e 01 	lds	r30, 0x012E
    3a9e:	f0 91 2f 01 	lds	r31, 0x012F
    3aa2:	e5 58       	subi	r30, 0x85	; 133
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	11 92       	st	Z+, r1
    3aa8:	11 92       	st	Z+, r1
    3aaa:	11 92       	st	Z+, r1
    3aac:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    3aae:	10 82       	st	Z, r1
    3ab0:	11 82       	std	Z+1, r1	; 0x01
    3ab2:	12 82       	std	Z+2, r1	; 0x02
    3ab4:	13 82       	std	Z+3, r1	; 0x03
    3ab6:	ef 57       	subi	r30, 0x7F	; 127
    3ab8:	f0 40       	sbci	r31, 0x00	; 0
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3aba:	df 01       	movw	r26, r30
    3abc:	a6 58       	subi	r26, 0x86	; 134
    3abe:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac0:	8c 91       	ld	r24, X
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3ac2:	80 7e       	andi	r24, 0xE0	; 224
    3ac4:	8c 93       	st	X, r24
int32_t Timebase_LPDownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->LPDownCounter[window].ReloadValue;
}

void Timebase_LPDownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].ReloadValue = value;
    3ac6:	e9 57       	subi	r30, 0x79	; 121
    3ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aca:	10 82       	st	Z, r1
    3acc:	11 82       	std	Z+1, r1	; 0x01
    3ace:	12 82       	std	Z+2, r1	; 0x02
    3ad0:	13 82       	std	Z+3, r1	; 0x03

void Timebase_LPDownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Reset(i);
  }
}
    3ad2:	08 95       	ret

00003ad4 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    3ad4:	e0 91 2e 01 	lds	r30, 0x012E
    3ad8:	f0 91 2f 01 	lds	r31, 0x012F
    3adc:	85 8d       	ldd	r24, Z+29	; 0x1d
}
    3ade:	08 95       	ret

00003ae0 <Timebase_Reset>:


void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    3ae0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <Timebase_UpCounter_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    3ae4:	0e 94 bb 14 	call	0x2976	; 0x2976 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    3ae8:	0e 94 de 18 	call	0x31bc	; 0x31bc <Timebase_DownCounter_Reset_All>
  #endif
}
    3aec:	08 95       	ret

00003aee <Timebase_LP_Reset>:


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    3aee:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <Timebase_LPDownCounter_Reset_All>
  #endif
}
    3af2:	08 95       	ret

00003af4 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    3af4:	0f 93       	push	r16
    3af6:	1f 93       	push	r17
    3af8:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    3afa:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    3afe:	c8 01       	movw	r24, r16
    3b00:	0e 94 19 02 	call	0x432	; 0x432 <Timebase_Timer_Enable>
  Timebase_Reset();
    3b04:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <Timebase_Reset>
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	0e 94 b4 02 	call	0x568	; 0x568 <Timebase_LPTimer_Enable>
}


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    3b10:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <Timebase_LPDownCounter_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	08 95       	ret

00003b1a <Timebase_Main_Loop_Executables>:


void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    3b1a:	e0 91 2e 01 	lds	r30, 0x012E
    3b1e:	f0 91 2f 01 	lds	r31, 0x012F
    3b22:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b24:	82 ff       	sbrs	r24, 2
    3b26:	0b c0       	rjmp	.+22     	; 0x3b3e <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3b28:	0e 94 56 03 	call	0x6ac	; 0x6ac <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    3b2c:	0e 94 87 0a 	call	0x150e	; 0x150e <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    3b30:	e0 91 2e 01 	lds	r30, 0x012E
    3b34:	f0 91 2f 01 	lds	r31, 0x012F
    3b38:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b3a:	8b 7f       	andi	r24, 0xFB	; 251
    3b3c:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    3b3e:	e0 91 2e 01 	lds	r30, 0x012E
    3b42:	f0 91 2f 01 	lds	r31, 0x012F
    3b46:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b48:	80 ff       	sbrs	r24, 0
    3b4a:	0b c0       	rjmp	.+22     	; 0x3b62 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3b4c:	0e 94 56 03 	call	0x6ac	; 0x6ac <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    3b50:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    3b54:	e0 91 2e 01 	lds	r30, 0x012E
    3b58:	f0 91 2f 01 	lds	r31, 0x012F
    3b5c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b5e:	8e 7f       	andi	r24, 0xFE	; 254
    3b60:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    3b62:	e0 91 2e 01 	lds	r30, 0x012E
    3b66:	f0 91 2f 01 	lds	r31, 0x012F
    3b6a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b6c:	83 ff       	sbrs	r24, 3
    3b6e:	0b c0       	rjmp	.+22     	; 0x3b86 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3b70:	0e 94 56 03 	call	0x6ac	; 0x6ac <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    3b74:	0e 94 b7 14 	call	0x296e	; 0x296e <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    3b78:	e0 91 2e 01 	lds	r30, 0x012E
    3b7c:	f0 91 2f 01 	lds	r31, 0x012F
    3b80:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b82:	87 7f       	andi	r24, 0xF7	; 247
    3b84:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    3b86:	e0 91 2e 01 	lds	r30, 0x012E
    3b8a:	f0 91 2f 01 	lds	r31, 0x012F
    3b8e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3b90:	81 ff       	sbrs	r24, 1
    3b92:	0b c0       	rjmp	.+22     	; 0x3baa <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3b94:	0e 94 56 03 	call	0x6ac	; 0x6ac <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    3b98:	0e 94 da 18 	call	0x31b4	; 0x31b4 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    3b9c:	e0 91 2e 01 	lds	r30, 0x012E
    3ba0:	f0 91 2f 01 	lds	r31, 0x012F
    3ba4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3ba6:	8d 7f       	andi	r24, 0xFD	; 253
    3ba8:	85 8f       	std	Z+29, r24	; 0x1d
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    3baa:	e0 91 2e 01 	lds	r30, 0x012E
    3bae:	f0 91 2f 01 	lds	r31, 0x012F
    3bb2:	16 8a       	std	Z+22, r1	; 0x16
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    3bb4:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bb6:	85 ff       	sbrs	r24, 5
    3bb8:	09 c0       	rjmp	.+18     	; 0x3bcc <Timebase_Main_Loop_Executables+0xb2>
    Timebase_LPDownCounter_Update_All();
    3bba:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <Timebase_LPDownCounter_Update_All>
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
    3bbe:	e0 91 2e 01 	lds	r30, 0x012E
    3bc2:	f0 91 2f 01 	lds	r31, 0x012F
    3bc6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3bc8:	8f 7d       	andi	r24, 0xDF	; 223
    3bca:	85 8f       	std	Z+29, r24	; 0x1d
    3bcc:	08 95       	ret

00003bce <Timebase_ISR_Executables>:
  #endif
}


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    3bce:	e0 91 2e 01 	lds	r30, 0x012E
    3bd2:	f0 91 2f 01 	lds	r31, 0x012F
    3bd6:	80 89       	ldd	r24, Z+16	; 0x10
    3bd8:	91 89       	ldd	r25, Z+17	; 0x11
    3bda:	01 96       	adiw	r24, 0x01	; 1
    3bdc:	91 8b       	std	Z+17, r25	; 0x11
    3bde:	80 8b       	std	Z+16, r24	; 0x10
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    3be0:	85 8d       	ldd	r24, Z+29	; 0x1d
    3be2:	84 60       	ori	r24, 0x04	; 4
    3be4:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    3be6:	85 8d       	ldd	r24, Z+29	; 0x1d
    3be8:	88 60       	ori	r24, 0x08	; 8
    3bea:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    3bec:	20 89       	ldd	r18, Z+16	; 0x10
    3bee:	31 89       	ldd	r19, Z+17	; 0x11
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	28 17       	cp	r18, r24
    3bf6:	39 07       	cpc	r19, r25
    3bf8:	98 f0       	brcs	.+38     	; 0x3c20 <Timebase_ISR_Executables+0x52>
    Timebase->Time.SubSecondsShadow = 0;
    3bfa:	11 8a       	std	Z+17, r1	; 0x11
    3bfc:	10 8a       	std	Z+16, r1	; 0x10
    Timebase->Time.SecondsShadow++;
    3bfe:	82 89       	ldd	r24, Z+18	; 0x12
    3c00:	93 89       	ldd	r25, Z+19	; 0x13
    3c02:	a4 89       	ldd	r26, Z+20	; 0x14
    3c04:	b5 89       	ldd	r27, Z+21	; 0x15
    3c06:	01 96       	adiw	r24, 0x01	; 1
    3c08:	a1 1d       	adc	r26, r1
    3c0a:	b1 1d       	adc	r27, r1
    3c0c:	82 8b       	std	Z+18, r24	; 0x12
    3c0e:	93 8b       	std	Z+19, r25	; 0x13
    3c10:	a4 8b       	std	Z+20, r26	; 0x14
    3c12:	b5 8b       	std	Z+21, r27	; 0x15
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    3c14:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c16:	81 60       	ori	r24, 0x01	; 1
    3c18:	85 8f       	std	Z+29, r24	; 0x1d
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    3c1a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c1c:	82 60       	ori	r24, 0x02	; 2
    3c1e:	85 8f       	std	Z+29, r24	; 0x1d
    3c20:	08 95       	ret

00003c22 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    3c22:	1f 92       	push	r1
    3c24:	0f 92       	push	r0
    3c26:	0f b6       	in	r0, 0x3f	; 63
    3c28:	0f 92       	push	r0
    3c2a:	11 24       	eor	r1, r1
    3c2c:	2f 93       	push	r18
    3c2e:	3f 93       	push	r19
    3c30:	4f 93       	push	r20
    3c32:	5f 93       	push	r21
    3c34:	6f 93       	push	r22
    3c36:	7f 93       	push	r23
    3c38:	8f 93       	push	r24
    3c3a:	9f 93       	push	r25
    3c3c:	af 93       	push	r26
    3c3e:	bf 93       	push	r27
    3c40:	ef 93       	push	r30
    3c42:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    3c44:	e0 91 2e 01 	lds	r30, 0x012E
    3c48:	f0 91 2f 01 	lds	r31, 0x012F
    3c4c:	84 81       	ldd	r24, Z+4	; 0x04
    3c4e:	95 81       	ldd	r25, Z+5	; 0x05
    3c50:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    3c52:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <Timebase_ISR_Executables>
}
    3c56:	ff 91       	pop	r31
    3c58:	ef 91       	pop	r30
    3c5a:	bf 91       	pop	r27
    3c5c:	af 91       	pop	r26
    3c5e:	9f 91       	pop	r25
    3c60:	8f 91       	pop	r24
    3c62:	7f 91       	pop	r23
    3c64:	6f 91       	pop	r22
    3c66:	5f 91       	pop	r21
    3c68:	4f 91       	pop	r20
    3c6a:	3f 91       	pop	r19
    3c6c:	2f 91       	pop	r18
    3c6e:	0f 90       	pop	r0
    3c70:	0f be       	out	0x3f, r0	; 63
    3c72:	0f 90       	pop	r0
    3c74:	1f 90       	pop	r1
    3c76:	18 95       	reti

00003c78 <Timebase_LP_ISR_Executables>:
}


void Timebase_LP_ISR_Executables(void){
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds++;
    3c78:	e0 91 2e 01 	lds	r30, 0x012E
    3c7c:	f0 91 2f 01 	lds	r31, 0x012F
    3c80:	87 89       	ldd	r24, Z+23	; 0x17
    3c82:	90 8d       	ldd	r25, Z+24	; 0x18
    3c84:	01 96       	adiw	r24, 0x01	; 1
    3c86:	90 8f       	std	Z+24, r25	; 0x18
    3c88:	87 8b       	std	Z+23, r24	; 0x17
  if(Timebase->Time.LPTimerSubSeconds >= Timebase->Config.LPUpdateRate){
    3c8a:	27 89       	ldd	r18, Z+23	; 0x17
    3c8c:	30 8d       	ldd	r19, Z+24	; 0x18
    3c8e:	82 81       	ldd	r24, Z+2	; 0x02
    3c90:	93 81       	ldd	r25, Z+3	; 0x03
    3c92:	28 17       	cp	r18, r24
    3c94:	39 07       	cpc	r19, r25
    3c96:	68 f0       	brcs	.+26     	; 0x3cb2 <Timebase_LP_ISR_Executables+0x3a>
    Timebase->Time.LPTimerSubSeconds = 0;
    3c98:	10 8e       	std	Z+24, r1	; 0x18
    3c9a:	17 8a       	std	Z+23, r1	; 0x17
    Timebase->Time.LPTimerSeconds++;
    3c9c:	81 8d       	ldd	r24, Z+25	; 0x19
    3c9e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3ca0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    3ca2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    3ca4:	01 96       	adiw	r24, 0x01	; 1
    3ca6:	a1 1d       	adc	r26, r1
    3ca8:	b1 1d       	adc	r27, r1
    3caa:	81 8f       	std	Z+25, r24	; 0x19
    3cac:	92 8f       	std	Z+26, r25	; 0x1a
    3cae:	a3 8f       	std	Z+27, r26	; 0x1b
    3cb0:	b4 8f       	std	Z+28, r27	; 0x1c
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
    3cb2:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cb4:	80 62       	ori	r24, 0x20	; 32
    3cb6:	85 8f       	std	Z+29, r24	; 0x1d
  #endif
}
    3cb8:	08 95       	ret

00003cba <__vector_6>:

/**********************************LPTimer ISR Start*********************************/

#ifdef TIMEBASE_LP_TIMER_ENABLE

ISR(WDT_vect){
    3cba:	1f 92       	push	r1
    3cbc:	0f 92       	push	r0
    3cbe:	0f b6       	in	r0, 0x3f	; 63
    3cc0:	0f 92       	push	r0
    3cc2:	11 24       	eor	r1, r1
    3cc4:	2f 93       	push	r18
    3cc6:	3f 93       	push	r19
    3cc8:	4f 93       	push	r20
    3cca:	5f 93       	push	r21
    3ccc:	6f 93       	push	r22
    3cce:	7f 93       	push	r23
    3cd0:	8f 93       	push	r24
    3cd2:	9f 93       	push	r25
    3cd4:	af 93       	push	r26
    3cd6:	bf 93       	push	r27
    3cd8:	ef 93       	push	r30
    3cda:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
    3cdc:	e0 e6       	ldi	r30, 0x60	; 96
    3cde:	f0 e0       	ldi	r31, 0x00	; 0
    3ce0:	80 81       	ld	r24, Z
    3ce2:	80 64       	ori	r24, 0x40	; 64
    3ce4:	80 83       	st	Z, r24
  Timebase_LP_ISR_Executables();
    3ce6:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <Timebase_LP_ISR_Executables>
}
    3cea:	ff 91       	pop	r31
    3cec:	ef 91       	pop	r30
    3cee:	bf 91       	pop	r27
    3cf0:	af 91       	pop	r26
    3cf2:	9f 91       	pop	r25
    3cf4:	8f 91       	pop	r24
    3cf6:	7f 91       	pop	r23
    3cf8:	6f 91       	pop	r22
    3cfa:	5f 91       	pop	r21
    3cfc:	4f 91       	pop	r20
    3cfe:	3f 91       	pop	r19
    3d00:	2f 91       	pop	r18
    3d02:	0f 90       	pop	r0
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	0f 90       	pop	r0
    3d08:	1f 90       	pop	r1
    3d0a:	18 95       	reti

00003d0c <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    3d0c:	10 92 24 01 	sts	0x0124, r1
    3d10:	e5 e2       	ldi	r30, 0x25	; 37
    3d12:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    3d14:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	ed 32       	cpi	r30, 0x2D	; 45
    3d1a:	f8 07       	cpc	r31, r24
    3d1c:	d9 f7       	brne	.-10     	; 0x3d14 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    3d1e:	10 82       	st	Z, r1
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
  }
  #endif
  
}
    3d20:	08 95       	ret

00003d22 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    3d22:	08 95       	ret

00003d24 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    3d24:	08 95       	ret

00003d26 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    3d26:	9b 01       	movw	r18, r22
    3d28:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    3d2a:	60 e6       	ldi	r22, 0x60	; 96
    3d2c:	73 ee       	ldi	r23, 0xE3	; 227
    3d2e:	86 e1       	ldi	r24, 0x16	; 22
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__udivmodsi4>
    3d36:	21 50       	subi	r18, 0x01	; 1
    3d38:	30 40       	sbci	r19, 0x00	; 0
    3d3a:	40 40       	sbci	r20, 0x00	; 0
    3d3c:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    3d3e:	e0 ec       	ldi	r30, 0xC0	; 192
    3d40:	f0 e0       	ldi	r31, 0x00	; 0
    3d42:	80 81       	ld	r24, Z
    3d44:	82 60       	ori	r24, 0x02	; 2
    3d46:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    3d48:	bb 27       	eor	r27, r27
    3d4a:	a5 2f       	mov	r26, r21
    3d4c:	94 2f       	mov	r25, r20
    3d4e:	83 2f       	mov	r24, r19
    3d50:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    3d54:	20 93 c4 00 	sts	0x00C4, r18
}
    3d58:	08 95       	ret

00003d5a <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    3d5a:	e1 ec       	ldi	r30, 0xC1	; 193
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	80 81       	ld	r24, Z
    3d60:	88 60       	ori	r24, 0x08	; 8
    3d62:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    3d64:	86 e0       	ldi	r24, 0x06	; 6
    3d66:	80 93 c2 00 	sts	0x00C2, r24
}
    3d6a:	08 95       	ret

00003d6c <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    3d6c:	e1 ec       	ldi	r30, 0xC1	; 193
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	80 81       	ld	r24, Z
    3d72:	80 61       	ori	r24, 0x10	; 16
    3d74:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    3d76:	86 e0       	ldi	r24, 0x06	; 6
    3d78:	80 93 c2 00 	sts	0x00C2, r24
}
    3d7c:	08 95       	ret

00003d7e <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    3d7e:	e1 ec       	ldi	r30, 0xC1	; 193
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	80 81       	ld	r24, Z
    3d84:	80 68       	ori	r24, 0x80	; 128
    3d86:	80 83       	st	Z, r24
  sei();
    3d88:	78 94       	sei
}
    3d8a:	08 95       	ret

00003d8c <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    3d8c:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    3d8e:	80 91 c0 00 	lds	r24, 0x00C0
    3d92:	85 ff       	sbrs	r24, 5
    3d94:	fc cf       	rjmp	.-8      	; 0x3d8e <UART_Transmit_Byte+0x2>
  UDR0=val;
    3d96:	90 93 c6 00 	sts	0x00C6, r25
}
    3d9a:	08 95       	ret

00003d9c <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    3d9c:	df 93       	push	r29
    3d9e:	cf 93       	push	r28
    3da0:	0f 92       	push	r0
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    3da6:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    3da8:	80 91 c0 00 	lds	r24, 0x00C0
    3dac:	84 ff       	sbrs	r24, 4
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <UART_Receive_Byte+0x1e>
    val=UDR0;
    3db0:	80 91 c6 00 	lds	r24, 0x00C6
    3db4:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	08 c0       	rjmp	.+16     	; 0x3dca <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    3dba:	80 91 c0 00 	lds	r24, 0x00C0
    3dbe:	83 ff       	sbrs	r24, 3
    3dc0:	07 c0       	rjmp	.+14     	; 0x3dd0 <UART_Receive_Byte+0x34>
    val=UDR0;
    3dc2:	80 91 c6 00 	lds	r24, 0x00C6
    3dc6:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    3dc8:	82 e0       	ldi	r24, 0x02	; 2
    3dca:	80 93 24 01 	sts	0x0124, r24
    3dce:	05 c0       	rjmp	.+10     	; 0x3dda <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    3dd0:	80 91 c6 00 	lds	r24, 0x00C6
    3dd4:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    3dd6:	10 92 24 01 	sts	0x0124, r1
  }
  return val;
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ddc:	0f 90       	pop	r0
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <UART_Transmit_Byte_Hex>:
}
#endif



void UART_Transmit_Byte_Hex(uint32_t val){
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	ab 01       	movw	r20, r22
    3dec:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    3dee:	4f 3f       	cpi	r20, 0xFF	; 255
    3df0:	51 05       	cpc	r21, r1
    3df2:	61 05       	cpc	r22, r1
    3df4:	71 05       	cpc	r23, r1
    3df6:	09 f0       	breq	.+2      	; 0x3dfa <UART_Transmit_Byte_Hex+0x16>
    3df8:	28 f4       	brcc	.+10     	; 0x3e04 <UART_Transmit_Byte_Hex+0x20>
    3dfa:	e8 e0       	ldi	r30, 0x08	; 8
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	c2 e0       	ldi	r28, 0x02	; 2
    3e00:	d0 e0       	ldi	r29, 0x00	; 0
    3e02:	11 c0       	rjmp	.+34     	; 0x3e26 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    3e04:	40 30       	cpi	r20, 0x00	; 0
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	58 07       	cpc	r21, r24
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
    3e0c:	68 07       	cpc	r22, r24
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	78 07       	cpc	r23, r24
    3e12:	28 f0       	brcs	.+10     	; 0x3e1e <UART_Transmit_Byte_Hex+0x3a>
    3e14:	e0 e2       	ldi	r30, 0x20	; 32
    3e16:	f0 e0       	ldi	r31, 0x00	; 0
    3e18:	c8 e0       	ldi	r28, 0x08	; 8
    3e1a:	d0 e0       	ldi	r29, 0x00	; 0
    3e1c:	04 c0       	rjmp	.+8      	; 0x3e26 <UART_Transmit_Byte_Hex+0x42>
    3e1e:	e0 e1       	ldi	r30, 0x10	; 16
    3e20:	f0 e0       	ldi	r31, 0x00	; 0
    3e22:	c4 e0       	ldi	r28, 0x04	; 4
    3e24:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3e26:	80 91 c0 00 	lds	r24, 0x00C0
    3e2a:	85 ff       	sbrs	r24, 5
    3e2c:	fc cf       	rjmp	.-8      	; 0x3e26 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    3e2e:	80 e3       	ldi	r24, 0x30	; 48
    3e30:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3e34:	80 91 c0 00 	lds	r24, 0x00C0
    3e38:	85 ff       	sbrs	r24, 5
    3e3a:	fc cf       	rjmp	.-8      	; 0x3e34 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    3e3c:	88 e7       	ldi	r24, 0x78	; 120
    3e3e:	80 93 c6 00 	sts	0x00C6, r24
    3e42:	10 e0       	ldi	r17, 0x00	; 0
    3e44:	1f c0       	rjmp	.+62     	; 0x3e84 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    3e46:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    3e48:	db 01       	movw	r26, r22
    3e4a:	ca 01       	movw	r24, r20
    3e4c:	0e 2e       	mov	r0, r30
    3e4e:	04 c0       	rjmp	.+8      	; 0x3e58 <UART_Transmit_Byte_Hex+0x74>
    3e50:	b6 95       	lsr	r27
    3e52:	a7 95       	ror	r26
    3e54:	97 95       	ror	r25
    3e56:	87 95       	ror	r24
    3e58:	0a 94       	dec	r0
    3e5a:	d2 f7       	brpl	.-12     	; 0x3e50 <UART_Transmit_Byte_Hex+0x6c>
    3e5c:	90 e0       	ldi	r25, 0x00	; 0
    3e5e:	8f 70       	andi	r24, 0x0F	; 15
    3e60:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    3e62:	8a 30       	cpi	r24, 0x0A	; 10
    3e64:	91 05       	cpc	r25, r1
    3e66:	20 f0       	brcs	.+8      	; 0x3e70 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    3e68:	9c 01       	movw	r18, r24
    3e6a:	29 5c       	subi	r18, 0xC9	; 201
    3e6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e6e:	03 c0       	rjmp	.+6      	; 0x3e76 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    3e70:	9c 01       	movw	r18, r24
    3e72:	20 5d       	subi	r18, 0xD0	; 208
    3e74:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3e76:	80 91 c0 00 	lds	r24, 0x00C0
    3e7a:	85 ff       	sbrs	r24, 5
    3e7c:	fc cf       	rjmp	.-8      	; 0x3e76 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    3e7e:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    3e82:	1f 5f       	subi	r17, 0xFF	; 255
    3e84:	81 2f       	mov	r24, r17
    3e86:	90 e0       	ldi	r25, 0x00	; 0
    3e88:	8c 17       	cp	r24, r28
    3e8a:	9d 07       	cpc	r25, r29
    3e8c:	e0 f2       	brcs	.-72     	; 0x3e46 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	1f 91       	pop	r17
    3e94:	08 95       	ret

00003e96 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    3e96:	cf 92       	push	r12
    3e98:	df 92       	push	r13
    3e9a:	ef 92       	push	r14
    3e9c:	ff 92       	push	r15
    3e9e:	0f 93       	push	r16
    3ea0:	1f 93       	push	r17
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	ab 01       	movw	r20, r22
    3ea8:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    3eaa:	4f 3f       	cpi	r20, 0xFF	; 255
    3eac:	51 05       	cpc	r21, r1
    3eae:	61 05       	cpc	r22, r1
    3eb0:	71 05       	cpc	r23, r1
    3eb2:	09 f0       	breq	.+2      	; 0x3eb6 <UART_Transmit_Byte_Bin+0x20>
    3eb4:	10 f4       	brcc	.+4      	; 0x3eba <UART_Transmit_Byte_Bin+0x24>
    3eb6:	97 e0       	ldi	r25, 0x07	; 7
    3eb8:	0b c0       	rjmp	.+22     	; 0x3ed0 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    3eba:	40 30       	cpi	r20, 0x00	; 0
    3ebc:	80 e0       	ldi	r24, 0x00	; 0
    3ebe:	58 07       	cpc	r21, r24
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	68 07       	cpc	r22, r24
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	78 07       	cpc	r23, r24
    3ec8:	10 f0       	brcs	.+4      	; 0x3ece <UART_Transmit_Byte_Bin+0x38>
    3eca:	9f e1       	ldi	r25, 0x1F	; 31
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <UART_Transmit_Byte_Bin+0x3a>
    3ece:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3ed0:	80 91 c0 00 	lds	r24, 0x00C0
    3ed4:	85 ff       	sbrs	r24, 5
    3ed6:	fc cf       	rjmp	.-8      	; 0x3ed0 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    3ed8:	80 e3       	ldi	r24, 0x30	; 48
    3eda:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3ede:	80 91 c0 00 	lds	r24, 0x00C0
    3ee2:	85 ff       	sbrs	r24, 5
    3ee4:	fc cf       	rjmp	.-8      	; 0x3ede <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    3ee6:	82 e6       	ldi	r24, 0x62	; 98
    3ee8:	80 93 c6 00 	sts	0x00C6, r24
    3eec:	20 e0       	ldi	r18, 0x00	; 0
    3eee:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    3ef0:	e9 2f       	mov	r30, r25
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    3ef4:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    3ef6:	11 e3       	ldi	r17, 0x31	; 49
    3ef8:	ef 01       	movw	r28, r30
    3efa:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    3efc:	cf 01       	movw	r24, r30
    3efe:	82 1b       	sub	r24, r18
    3f00:	93 0b       	sbc	r25, r19
    3f02:	6a 01       	movw	r12, r20
    3f04:	7b 01       	movw	r14, r22
    3f06:	04 c0       	rjmp	.+8      	; 0x3f10 <UART_Transmit_Byte_Bin+0x7a>
    3f08:	f6 94       	lsr	r15
    3f0a:	e7 94       	ror	r14
    3f0c:	d7 94       	ror	r13
    3f0e:	c7 94       	ror	r12
    3f10:	8a 95       	dec	r24
    3f12:	d2 f7       	brpl	.-12     	; 0x3f08 <UART_Transmit_Byte_Bin+0x72>
    3f14:	d7 01       	movw	r26, r14
    3f16:	c6 01       	movw	r24, r12
    3f18:	81 70       	andi	r24, 0x01	; 1
    3f1a:	90 70       	andi	r25, 0x00	; 0
    3f1c:	89 2b       	or	r24, r25
    3f1e:	39 f0       	breq	.+14     	; 0x3f2e <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3f20:	80 91 c0 00 	lds	r24, 0x00C0
    3f24:	85 ff       	sbrs	r24, 5
    3f26:	fc cf       	rjmp	.-8      	; 0x3f20 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    3f28:	10 93 c6 00 	sts	0x00C6, r17
    3f2c:	06 c0       	rjmp	.+12     	; 0x3f3a <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3f2e:	80 91 c0 00 	lds	r24, 0x00C0
    3f32:	85 ff       	sbrs	r24, 5
    3f34:	fc cf       	rjmp	.-8      	; 0x3f2e <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    3f36:	00 93 c6 00 	sts	0x00C6, r16
    3f3a:	2f 5f       	subi	r18, 0xFF	; 255
    3f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    3f3e:	2c 17       	cp	r18, r28
    3f40:	3d 07       	cpc	r19, r29
    3f42:	e1 f6       	brne	.-72     	; 0x3efc <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    3f44:	df 91       	pop	r29
    3f46:	cf 91       	pop	r28
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	ff 90       	pop	r15
    3f4e:	ef 90       	pop	r14
    3f50:	df 90       	pop	r13
    3f52:	cf 90       	pop	r12
    3f54:	08 95       	ret

00003f56 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    3f56:	ac 01       	movw	r20, r24
    3f58:	20 e0       	ldi	r18, 0x00	; 0
    3f5a:	07 c0       	rjmp	.+14     	; 0x3f6a <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3f5c:	80 91 c0 00 	lds	r24, 0x00C0
    3f60:	85 ff       	sbrs	r24, 5
    3f62:	fc cf       	rjmp	.-8      	; 0x3f5c <UART_Transmit_Text+0x6>
  UDR0=val;
    3f64:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    3f68:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    3f6a:	fa 01       	movw	r30, r20
    3f6c:	e2 0f       	add	r30, r18
    3f6e:	f1 1d       	adc	r31, r1
    3f70:	e0 81       	ld	r30, Z
    3f72:	ee 23       	and	r30, r30
    3f74:	99 f7       	brne	.-26     	; 0x3f5c <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    3f76:	08 95       	ret

00003f78 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    3f78:	8f e1       	ldi	r24, 0x1F	; 31
    3f7a:	91 e0       	ldi	r25, 0x01	; 1
    3f7c:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
}
    3f80:	08 95       	ret

00003f82 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    3f82:	82 e2       	ldi	r24, 0x22	; 34
    3f84:	91 e0       	ldi	r25, 0x01	; 1
    3f86:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <UART_Transmit_Text>
}
    3f8a:	08 95       	ret

00003f8c <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    3f8c:	bf 92       	push	r11
    3f8e:	cf 92       	push	r12
    3f90:	df 92       	push	r13
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	6b 01       	movw	r12, r22
    3f9c:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    3f9e:	61 15       	cp	r22, r1
    3fa0:	71 05       	cpc	r23, r1
    3fa2:	81 05       	cpc	r24, r1
    3fa4:	91 05       	cpc	r25, r1
    3fa6:	31 f4       	brne	.+12     	; 0x3fb4 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    3fa8:	10 92 25 01 	sts	0x0125, r1
    UART.InputNumberDigits=1;
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	80 93 2d 01 	sts	0x012D, r24
    3fb2:	23 c0       	rjmp	.+70     	; 0x3ffa <UART_Determine_Digit_Numbers+0x6e>
    3fb4:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    3fb6:	0b 2d       	mov	r16, r11
    3fb8:	10 e0       	ldi	r17, 0x00	; 0
    3fba:	0c 5d       	subi	r16, 0xDC	; 220
    3fbc:	1e 4f       	sbci	r17, 0xFE	; 254
    3fbe:	c7 01       	movw	r24, r14
    3fc0:	b6 01       	movw	r22, r12
    3fc2:	2a e0       	ldi	r18, 0x0A	; 10
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e0       	ldi	r20, 0x00	; 0
    3fc8:	50 e0       	ldi	r21, 0x00	; 0
    3fca:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__udivmodsi4>
    3fce:	f8 01       	movw	r30, r16
    3fd0:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    3fd2:	c7 01       	movw	r24, r14
    3fd4:	b6 01       	movw	r22, r12
    3fd6:	2a e0       	ldi	r18, 0x0A	; 10
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	40 e0       	ldi	r20, 0x00	; 0
    3fdc:	50 e0       	ldi	r21, 0x00	; 0
    3fde:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <__udivmodsi4>
    3fe2:	c9 01       	movw	r24, r18
    3fe4:	da 01       	movw	r26, r20
    3fe6:	6c 01       	movw	r12, r24
    3fe8:	7d 01       	movw	r14, r26
      i++;
    3fea:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    3fec:	c1 14       	cp	r12, r1
    3fee:	d1 04       	cpc	r13, r1
    3ff0:	e1 04       	cpc	r14, r1
    3ff2:	f1 04       	cpc	r15, r1
    3ff4:	01 f7       	brne	.-64     	; 0x3fb6 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    3ff6:	b0 92 2d 01 	sts	0x012D, r11
  }
}
    3ffa:	1f 91       	pop	r17
    3ffc:	0f 91       	pop	r16
    3ffe:	ff 90       	pop	r15
    4000:	ef 90       	pop	r14
    4002:	df 90       	pop	r13
    4004:	cf 90       	pop	r12
    4006:	bf 90       	pop	r11
    4008:	08 95       	ret

0000400a <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    400a:	e0 91 2d 01 	lds	r30, 0x012D
    400e:	0f c0       	rjmp	.+30     	; 0x402e <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    4010:	2e 2f       	mov	r18, r30
    4012:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    4014:	e2 2f       	mov	r30, r18
    4016:	f0 e0       	ldi	r31, 0x00	; 0
    4018:	ec 5d       	subi	r30, 0xDC	; 220
    401a:	fe 4f       	sbci	r31, 0xFE	; 254
    401c:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    401e:	80 91 c0 00 	lds	r24, 0x00C0
    4022:	85 ff       	sbrs	r24, 5
    4024:	fc cf       	rjmp	.-8      	; 0x401e <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    4026:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    4028:	90 93 c6 00 	sts	0x00C6, r25
    402c:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    402e:	ee 23       	and	r30, r30
    4030:	79 f7       	brne	.-34     	; 0x4010 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    4032:	08 95       	ret

00004034 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    4034:	9b 01       	movw	r18, r22
    4036:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    4038:	97 ff       	sbrs	r25, 7
    403a:	0e c0       	rjmp	.+28     	; 0x4058 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    403c:	80 91 c0 00 	lds	r24, 0x00C0
    4040:	85 ff       	sbrs	r24, 5
    4042:	fc cf       	rjmp	.-8      	; 0x403c <UART_Transmit_Number+0x8>
  UDR0=val;
    4044:	8d e2       	ldi	r24, 0x2D	; 45
    4046:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    404a:	50 95       	com	r21
    404c:	40 95       	com	r20
    404e:	30 95       	com	r19
    4050:	21 95       	neg	r18
    4052:	3f 4f       	sbci	r19, 0xFF	; 255
    4054:	4f 4f       	sbci	r20, 0xFF	; 255
    4056:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    4058:	ca 01       	movw	r24, r20
    405a:	b9 01       	movw	r22, r18
    405c:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    4060:	0e 94 05 20 	call	0x400a	; 0x400a <UART_Transmit_Number_Digits>
}
    4064:	08 95       	ret

00004066 <UART_Flush_Buffer>:
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
  #endif
}
    4066:	08 95       	ret

00004068 <UART_Init>:
}
#endif



void UART_Init(uint32_t baud){
    4068:	ef 92       	push	r14
    406a:	ff 92       	push	r15
    406c:	0f 93       	push	r16
    406e:	1f 93       	push	r17
    4070:	7b 01       	movw	r14, r22
    4072:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    4074:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    4078:	c8 01       	movw	r24, r16
    407a:	b7 01       	movw	r22, r14
    407c:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    4080:	e1 ec       	ldi	r30, 0xC1	; 193
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	88 60       	ori	r24, 0x08	; 8
    4088:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    408a:	86 e0       	ldi	r24, 0x06	; 6
    408c:	80 93 c2 00 	sts	0x00C2, r24
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
}
    4090:	1f 91       	pop	r17
    4092:	0f 91       	pop	r16
    4094:	ff 90       	pop	r15
    4096:	ef 90       	pop	r14
    4098:	08 95       	ret

0000409a <__mulsi3>:
    409a:	62 9f       	mul	r22, r18
    409c:	d0 01       	movw	r26, r0
    409e:	73 9f       	mul	r23, r19
    40a0:	f0 01       	movw	r30, r0
    40a2:	82 9f       	mul	r24, r18
    40a4:	e0 0d       	add	r30, r0
    40a6:	f1 1d       	adc	r31, r1
    40a8:	64 9f       	mul	r22, r20
    40aa:	e0 0d       	add	r30, r0
    40ac:	f1 1d       	adc	r31, r1
    40ae:	92 9f       	mul	r25, r18
    40b0:	f0 0d       	add	r31, r0
    40b2:	83 9f       	mul	r24, r19
    40b4:	f0 0d       	add	r31, r0
    40b6:	74 9f       	mul	r23, r20
    40b8:	f0 0d       	add	r31, r0
    40ba:	65 9f       	mul	r22, r21
    40bc:	f0 0d       	add	r31, r0
    40be:	99 27       	eor	r25, r25
    40c0:	72 9f       	mul	r23, r18
    40c2:	b0 0d       	add	r27, r0
    40c4:	e1 1d       	adc	r30, r1
    40c6:	f9 1f       	adc	r31, r25
    40c8:	63 9f       	mul	r22, r19
    40ca:	b0 0d       	add	r27, r0
    40cc:	e1 1d       	adc	r30, r1
    40ce:	f9 1f       	adc	r31, r25
    40d0:	bd 01       	movw	r22, r26
    40d2:	cf 01       	movw	r24, r30
    40d4:	11 24       	eor	r1, r1
    40d6:	08 95       	ret

000040d8 <__udivmodsi4>:
    40d8:	a1 e2       	ldi	r26, 0x21	; 33
    40da:	1a 2e       	mov	r1, r26
    40dc:	aa 1b       	sub	r26, r26
    40de:	bb 1b       	sub	r27, r27
    40e0:	fd 01       	movw	r30, r26
    40e2:	0d c0       	rjmp	.+26     	; 0x40fe <__udivmodsi4_ep>

000040e4 <__udivmodsi4_loop>:
    40e4:	aa 1f       	adc	r26, r26
    40e6:	bb 1f       	adc	r27, r27
    40e8:	ee 1f       	adc	r30, r30
    40ea:	ff 1f       	adc	r31, r31
    40ec:	a2 17       	cp	r26, r18
    40ee:	b3 07       	cpc	r27, r19
    40f0:	e4 07       	cpc	r30, r20
    40f2:	f5 07       	cpc	r31, r21
    40f4:	20 f0       	brcs	.+8      	; 0x40fe <__udivmodsi4_ep>
    40f6:	a2 1b       	sub	r26, r18
    40f8:	b3 0b       	sbc	r27, r19
    40fa:	e4 0b       	sbc	r30, r20
    40fc:	f5 0b       	sbc	r31, r21

000040fe <__udivmodsi4_ep>:
    40fe:	66 1f       	adc	r22, r22
    4100:	77 1f       	adc	r23, r23
    4102:	88 1f       	adc	r24, r24
    4104:	99 1f       	adc	r25, r25
    4106:	1a 94       	dec	r1
    4108:	69 f7       	brne	.-38     	; 0x40e4 <__udivmodsi4_loop>
    410a:	60 95       	com	r22
    410c:	70 95       	com	r23
    410e:	80 95       	com	r24
    4110:	90 95       	com	r25
    4112:	9b 01       	movw	r18, r22
    4114:	ac 01       	movw	r20, r24
    4116:	bd 01       	movw	r22, r26
    4118:	cf 01       	movw	r24, r30
    411a:	08 95       	ret

0000411c <__divmodsi4>:
    411c:	97 fb       	bst	r25, 7
    411e:	09 2e       	mov	r0, r25
    4120:	05 26       	eor	r0, r21
    4122:	0e d0       	rcall	.+28     	; 0x4140 <__divmodsi4_neg1>
    4124:	57 fd       	sbrc	r21, 7
    4126:	04 d0       	rcall	.+8      	; 0x4130 <__divmodsi4_neg2>
    4128:	d7 df       	rcall	.-82     	; 0x40d8 <__udivmodsi4>
    412a:	0a d0       	rcall	.+20     	; 0x4140 <__divmodsi4_neg1>
    412c:	00 1c       	adc	r0, r0
    412e:	38 f4       	brcc	.+14     	; 0x413e <__divmodsi4_exit>

00004130 <__divmodsi4_neg2>:
    4130:	50 95       	com	r21
    4132:	40 95       	com	r20
    4134:	30 95       	com	r19
    4136:	21 95       	neg	r18
    4138:	3f 4f       	sbci	r19, 0xFF	; 255
    413a:	4f 4f       	sbci	r20, 0xFF	; 255
    413c:	5f 4f       	sbci	r21, 0xFF	; 255

0000413e <__divmodsi4_exit>:
    413e:	08 95       	ret

00004140 <__divmodsi4_neg1>:
    4140:	f6 f7       	brtc	.-4      	; 0x413e <__divmodsi4_exit>
    4142:	90 95       	com	r25
    4144:	80 95       	com	r24
    4146:	70 95       	com	r23
    4148:	61 95       	neg	r22
    414a:	7f 4f       	sbci	r23, 0xFF	; 255
    414c:	8f 4f       	sbci	r24, 0xFF	; 255
    414e:	9f 4f       	sbci	r25, 0xFF	; 255
    4150:	08 95       	ret

00004152 <_exit>:
    4152:	f8 94       	cli

00004154 <__stop_program>:
    4154:	ff cf       	rjmp	.-2      	; 0x4154 <__stop_program>
