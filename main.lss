
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  000022a6  0000233a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000022a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  00800196  00800196  000023d0  2**0
                  ALLOC
  3 .debug_aranges 000000a0  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001287  00000000  00000000  00002470  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003a17  00000000  00000000  000036f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000081f  00000000  00000000  0000710e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002130  00000000  00000000  0000792d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a70  00000000  00000000  00009a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000160e  00000000  00000000  0000a4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001559  00000000  00000000  0000bade  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000d037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 79 08 	jmp	0x10f2	; 0x10f2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 ea       	ldi	r30, 0xA6	; 166
      7c:	f2 e2       	ldi	r31, 0x22	; 34
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 39       	cpi	r26, 0x96	; 150
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 e9       	ldi	r26, 0x96	; 150
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 31       	cpi	r26, 0x1B	; 27
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 33 08 	call	0x1066	; 0x1066 <Timebase_Init>
  App_Setup();
      ae:	0e 94 78 00 	call	0xf0	; 0xf0 <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 40 08 	call	0x1080	; 0x1080 <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:


void App_Main_Loop(void){
  
  
  if(UART_Data_Available()){
      bc:	0e 94 2a 0c 	call	0x1854	; 0x1854 <UART_Data_Available>
      c0:	88 23       	and	r24, r24
      c2:	a9 f0       	breq	.+42     	; 0xee <App_Main_Loop+0x32>
    UART_Tx_Parameter_Hex_SP("CalcCRC", UART_Data_Calculated_CRC_Get() );
      c4:	0e 94 32 0c 	call	0x1864	; 0x1864 <UART_Data_Calculated_CRC_Get>
      c8:	ac 01       	movw	r20, r24
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	80 e0       	ldi	r24, 0x00	; 0
      d0:	91 e0       	ldi	r25, 0x01	; 1
      d2:	0e 94 99 0b 	call	0x1732	; 0x1732 <UART_Tx_Parameter_Hex_SP>
    UART_Tx_Parameter_Hex_SP("ErrorCode", UART_Error_Code_Get() );
      d6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <UART_Error_Code_Get>
      da:	48 2f       	mov	r20, r24
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	88 e0       	ldi	r24, 0x08	; 8
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	0e 94 99 0b 	call	0x1732	; 0x1732 <UART_Tx_Parameter_Hex_SP>
    UART_RX_Packet_Read_Complete();
      ea:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <UART_RX_Packet_Read_Complete>
      ee:	08 95       	ret

000000f0 <App_Setup>:



void App_Setup(void){

  UART_Init(57600);
      f0:	60 e0       	ldi	r22, 0x00	; 0
      f2:	71 ee       	ldi	r23, 0xE1	; 225
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <UART_Init>
  
  
  Timebase_DownCounter_SS_Set_Securely(0, 50);
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	42 e3       	ldi	r20, 0x32	; 50
     100:	50 e0       	ldi	r21, 0x00	; 0
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	70 e0       	ldi	r23, 0x00	; 0
     106:	0e 94 0c 05 	call	0xa18	; 0xa18 <Timebase_DownCounter_SS_Set_Securely>
  
}
     10a:	08 95       	ret

0000010c <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     10c:	80 ef       	ldi	r24, 0xF0	; 240
     10e:	91 e0       	ldi	r25, 0x01	; 1
     110:	90 93 ef 01 	sts	0x01EF, r25
     114:	80 93 ee 01 	sts	0x01EE, r24
  Timebase->Config.UpdateRate = 1;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	90 93 f1 01 	sts	0x01F1, r25
     120:	80 93 f0 01 	sts	0x01F0, r24
  Timebase->Time.OVFUpdateValue=0;
     124:	10 92 f3 01 	sts	0x01F3, r1
     128:	10 92 f2 01 	sts	0x01F2, r1
  Timebase->Time.SubSecondsShadow = 0;
     12c:	10 92 ff 01 	sts	0x01FF, r1
     130:	10 92 fe 01 	sts	0x01FE, r1
  Timebase->Time.SecondsShadow = 0;
     134:	10 92 00 02 	sts	0x0200, r1
     138:	10 92 01 02 	sts	0x0201, r1
     13c:	10 92 02 02 	sts	0x0202, r1
     140:	10 92 03 02 	sts	0x0203, r1
  Timebase->Time.SubSeconds = 0;
     144:	10 92 f9 01 	sts	0x01F9, r1
     148:	10 92 f8 01 	sts	0x01F8, r1
  Timebase->Time.Seconds = 0;
     14c:	10 92 fa 01 	sts	0x01FA, r1
     150:	10 92 fb 01 	sts	0x01FB, r1
     154:	10 92 fc 01 	sts	0x01FC, r1
     158:	10 92 fd 01 	sts	0x01FD, r1
  Timebase->Time.VariablesSync = 0;
     15c:	10 92 04 02 	sts	0x0204, r1
  Timebase->Time.LastSample = 0;
     160:	10 92 f4 01 	sts	0x01F4, r1
     164:	10 92 f5 01 	sts	0x01F5, r1
     168:	10 92 f6 01 	sts	0x01F6, r1
     16c:	10 92 f7 01 	sts	0x01F7, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
     170:	10 92 05 02 	sts	0x0205, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     174:	10 92 06 02 	sts	0x0206, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     178:	10 92 07 02 	sts	0x0207, r1
     17c:	10 92 08 02 	sts	0x0208, r1
     180:	10 92 09 02 	sts	0x0209, r1
     184:	10 92 0a 02 	sts	0x020A, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     188:	10 92 0b 02 	sts	0x020B, r1
     18c:	10 92 0c 02 	sts	0x020C, r1
     190:	10 92 0d 02 	sts	0x020D, r1
     194:	10 92 0e 02 	sts	0x020E, r1
    Timebase->DownCounterSS[i].Value = 0;
     198:	10 92 0f 02 	sts	0x020F, r1
     19c:	10 92 10 02 	sts	0x0210, r1
     1a0:	10 92 11 02 	sts	0x0211, r1
     1a4:	10 92 12 02 	sts	0x0212, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     1a8:	10 92 13 02 	sts	0x0213, r1
     1ac:	10 92 14 02 	sts	0x0214, r1
     1b0:	10 92 15 02 	sts	0x0215, r1
     1b4:	10 92 16 02 	sts	0x0216, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     1b8:	10 92 17 02 	sts	0x0217, r1
     1bc:	10 92 18 02 	sts	0x0218, r1
     1c0:	10 92 19 02 	sts	0x0219, r1
     1c4:	10 92 1a 02 	sts	0x021A, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
	Timebase->LPDownCounter[i].ReloadValue = 0;
  }
  #endif
  
}
     1c8:	08 95       	ret

000001ca <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     1ca:	8f 92       	push	r8
     1cc:	9f 92       	push	r9
     1ce:	bf 92       	push	r11
     1d0:	cf 92       	push	r12
     1d2:	df 92       	push	r13
     1d4:	ef 92       	push	r14
     1d6:	ff 92       	push	r15
     1d8:	0f 93       	push	r16
     1da:	1f 93       	push	r17
     1dc:	df 93       	push	r29
     1de:	cf 93       	push	r28
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	2a 97       	sbiw	r28, 0x0a	; 10
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	f8 94       	cli
     1ea:	de bf       	out	0x3e, r29	; 62
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	cd bf       	out	0x3d, r28	; 61
     1f0:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     1f2:	de 01       	movw	r26, r28
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	e2 e1       	ldi	r30, 0x12	; 18
     1f8:	f1 e0       	ldi	r31, 0x01	; 1
     1fa:	8a e0       	ldi	r24, 0x0A	; 10
     1fc:	01 90       	ld	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	81 50       	subi	r24, 0x01	; 1
     202:	e1 f7       	brne	.-8      	; 0x1fc <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     204:	94 01       	movw	r18, r8
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	7b e1       	ldi	r23, 0x1B	; 27
     20e:	87 eb       	ldi	r24, 0xB7	; 183
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     216:	b2 2e       	mov	r11, r18
     218:	c3 2e       	mov	r12, r19
     21a:	d4 2e       	mov	r13, r20
     21c:	05 2f       	mov	r16, r21
     21e:	7e 01       	movw	r14, r28
     220:	08 94       	sec
     222:	e1 1c       	adc	r14, r1
     224:	f1 1c       	adc	r15, r1
     226:	c9 01       	movw	r24, r18
     228:	da 01       	movw	r26, r20
     22a:	9c 01       	movw	r18, r24
     22c:	ad 01       	movw	r20, r26
     22e:	10 e0       	ldi	r17, 0x00	; 0
     230:	13 c0       	rjmp	.+38     	; 0x258 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     232:	f7 01       	movw	r30, r14
     234:	21 91       	ld	r18, Z+
     236:	31 91       	ld	r19, Z+
     238:	7f 01       	movw	r14, r30
     23a:	40 e0       	ldi	r20, 0x00	; 0
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	6b 2d       	mov	r22, r11
     240:	7c 2d       	mov	r23, r12
     242:	8d 2d       	mov	r24, r13
     244:	90 2f       	mov	r25, r16
     246:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     24a:	c9 01       	movw	r24, r18
     24c:	da 01       	movw	r26, r20
     24e:	9c 01       	movw	r18, r24
     250:	ad 01       	movw	r20, r26
	clock_div_index++;
     252:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     254:	15 30       	cpi	r17, 0x05	; 5
     256:	31 f0       	breq	.+12     	; 0x264 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     258:	2f 3f       	cpi	r18, 0xFF	; 255
     25a:	31 05       	cpc	r19, r1
     25c:	41 05       	cpc	r20, r1
     25e:	51 05       	cpc	r21, r1
     260:	09 f0       	breq	.+2      	; 0x264 <Timebase_Timer_Enable+0x9a>
     262:	3c f7       	brge	.-50     	; 0x232 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     264:	81 2f       	mov	r24, r17
     266:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     268:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     26a:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     26c:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     270:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     272:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     274:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     276:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     278:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     27a:	88 23       	and	r24, r24
     27c:	11 f4       	brne	.+4      	; 0x282 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0f c0       	rjmp	.+30     	; 0x2a0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	11 f4       	brne	.+4      	; 0x28a <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	0b c0       	rjmp	.+22     	; 0x2a0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     28a:	82 30       	cpi	r24, 0x02	; 2
     28c:	11 f4       	brne	.+4      	; 0x292 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	07 c0       	rjmp	.+14     	; 0x2a0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	11 f4       	brne	.+4      	; 0x29a <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     296:	84 e0       	ldi	r24, 0x04	; 4
     298:	03 c0       	rjmp	.+6      	; 0x2a0 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     29a:	84 30       	cpi	r24, 0x04	; 4
     29c:	11 f4       	brne	.+4      	; 0x2a2 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     2a2:	e0 91 ee 01 	lds	r30, 0x01EE
     2a6:	f0 91 ef 01 	lds	r31, 0x01EF
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	82 1b       	sub	r24, r18
     2b0:	93 0b       	sbc	r25, r19
     2b2:	93 83       	std	Z+3, r25	; 0x03
     2b4:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     2b6:	82 81       	ldd	r24, Z+2	; 0x02
     2b8:	93 81       	ldd	r25, Z+3	; 0x03
     2ba:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 6e 00 	sts	0x006E, r24
  sei();
     2c2:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     2c4:	91 82       	std	Z+1, r9	; 0x01
     2c6:	80 82       	st	Z, r8
}
     2c8:	2a 96       	adiw	r28, 0x0a	; 10
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	cf 91       	pop	r28
     2d6:	df 91       	pop	r29
     2d8:	1f 91       	pop	r17
     2da:	0f 91       	pop	r16
     2dc:	ff 90       	pop	r15
     2de:	ef 90       	pop	r14
     2e0:	df 90       	pop	r13
     2e2:	cf 90       	pop	r12
     2e4:	bf 90       	pop	r11
     2e6:	9f 90       	pop	r9
     2e8:	8f 90       	pop	r8
     2ea:	08 95       	ret

000002ec <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     2ec:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     2ee:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     2f0:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     2f4:	87 e0       	ldi	r24, 0x07	; 7
     2f6:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     2f8:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     2fa:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     2fc:	16 bc       	out	0x26, r1	; 38
}
     2fe:	08 95       	ret

00000300 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     300:	f8 94       	cli
}
     302:	08 95       	ret

00000304 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     304:	78 94       	sei
}
     306:	08 95       	ret

00000308 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     308:	e0 91 ee 01 	lds	r30, 0x01EE
     30c:	f0 91 ef 01 	lds	r31, 0x01EF
     310:	26 85       	ldd	r18, Z+14	; 0x0e
     312:	37 85       	ldd	r19, Z+15	; 0x0f
}
     314:	c9 01       	movw	r24, r18
     316:	08 95       	ret

00000318 <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     318:	e0 91 ee 01 	lds	r30, 0x01EE
     31c:	f0 91 ef 01 	lds	r31, 0x01EF
     320:	20 89       	ldd	r18, Z+16	; 0x10
     322:	31 89       	ldd	r19, Z+17	; 0x11
     324:	42 89       	ldd	r20, Z+18	; 0x12
     326:	53 89       	ldd	r21, Z+19	; 0x13
}
     328:	b9 01       	movw	r22, r18
     32a:	ca 01       	movw	r24, r20
     32c:	08 95       	ret

0000032e <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     32e:	e0 91 ee 01 	lds	r30, 0x01EE
     332:	f0 91 ef 01 	lds	r31, 0x01EF
     336:	20 85       	ldd	r18, Z+8	; 0x08
     338:	31 85       	ldd	r19, Z+9	; 0x09
}
     33a:	c9 01       	movw	r24, r18
     33c:	08 95       	ret

0000033e <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     33e:	e0 91 ee 01 	lds	r30, 0x01EE
     342:	f0 91 ef 01 	lds	r31, 0x01EF
     346:	22 85       	ldd	r18, Z+10	; 0x0a
     348:	33 85       	ldd	r19, Z+11	; 0x0b
     34a:	44 85       	ldd	r20, Z+12	; 0x0c
     34c:	55 85       	ldd	r21, Z+13	; 0x0d
}
     34e:	b9 01       	movw	r22, r18
     350:	ca 01       	movw	r24, r20
     352:	08 95       	ret

00000354 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     354:	e0 91 ee 01 	lds	r30, 0x01EE
     358:	f0 91 ef 01 	lds	r31, 0x01EF
     35c:	91 87       	std	Z+9, r25	; 0x09
     35e:	80 87       	std	Z+8, r24	; 0x08
}
     360:	08 95       	ret

00000362 <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     362:	e0 91 ee 01 	lds	r30, 0x01EE
     366:	f0 91 ef 01 	lds	r31, 0x01EF
     36a:	62 87       	std	Z+10, r22	; 0x0a
     36c:	73 87       	std	Z+11, r23	; 0x0b
     36e:	84 87       	std	Z+12, r24	; 0x0c
     370:	95 87       	std	Z+13, r25	; 0x0d
}
     372:	08 95       	ret

00000374 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     374:	e0 91 ee 01 	lds	r30, 0x01EE
     378:	f0 91 ef 01 	lds	r31, 0x01EF
     37c:	26 85       	ldd	r18, Z+14	; 0x0e
     37e:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     380:	86 85       	ldd	r24, Z+14	; 0x0e
     382:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     384:	28 17       	cp	r18, r24
     386:	39 07       	cpc	r19, r25
     388:	c9 f7       	brne	.-14     	; 0x37c <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     38a:	c9 01       	movw	r24, r18
     38c:	08 95       	ret

0000038e <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     38e:	e0 91 ee 01 	lds	r30, 0x01EE
     392:	f0 91 ef 01 	lds	r31, 0x01EF
     396:	20 89       	ldd	r18, Z+16	; 0x10
     398:	31 89       	ldd	r19, Z+17	; 0x11
     39a:	42 89       	ldd	r20, Z+18	; 0x12
     39c:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     39e:	80 89       	ldd	r24, Z+16	; 0x10
     3a0:	91 89       	ldd	r25, Z+17	; 0x11
     3a2:	a2 89       	ldd	r26, Z+18	; 0x12
     3a4:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     3a6:	28 17       	cp	r18, r24
     3a8:	39 07       	cpc	r19, r25
     3aa:	4a 07       	cpc	r20, r26
     3ac:	5b 07       	cpc	r21, r27
     3ae:	99 f7       	brne	.-26     	; 0x396 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	  break;
	}
  }
  return tmp0;
}
     3b0:	b9 01       	movw	r22, r18
     3b2:	ca 01       	movw	r24, r20
     3b4:	08 95       	ret

000003b6 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     3b6:	e0 91 ee 01 	lds	r30, 0x01EE
     3ba:	f0 91 ef 01 	lds	r31, 0x01EF
     3be:	84 89       	ldd	r24, Z+20	; 0x14
     3c0:	88 23       	and	r24, r24
     3c2:	e1 f4       	brne	.+56     	; 0x3fc <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     3c4:	26 85       	ldd	r18, Z+14	; 0x0e
     3c6:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     3c8:	86 85       	ldd	r24, Z+14	; 0x0e
     3ca:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     3cc:	28 17       	cp	r18, r24
     3ce:	39 07       	cpc	r19, r25
     3d0:	c9 f7       	brne	.-14     	; 0x3c4 <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     3d2:	31 87       	std	Z+9, r19	; 0x09
     3d4:	20 87       	std	Z+8, r18	; 0x08
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     3d6:	20 89       	ldd	r18, Z+16	; 0x10
     3d8:	31 89       	ldd	r19, Z+17	; 0x11
     3da:	42 89       	ldd	r20, Z+18	; 0x12
     3dc:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     3de:	80 89       	ldd	r24, Z+16	; 0x10
     3e0:	91 89       	ldd	r25, Z+17	; 0x11
     3e2:	a2 89       	ldd	r26, Z+18	; 0x12
     3e4:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     3e6:	28 17       	cp	r18, r24
     3e8:	39 07       	cpc	r19, r25
     3ea:	4a 07       	cpc	r20, r26
     3ec:	5b 07       	cpc	r21, r27
     3ee:	99 f7       	brne	.-26     	; 0x3d6 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     3f0:	22 87       	std	Z+10, r18	; 0x0a
     3f2:	33 87       	std	Z+11, r19	; 0x0b
     3f4:	44 87       	std	Z+12, r20	; 0x0c
     3f6:	55 87       	std	Z+13, r21	; 0x0d
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	84 8b       	std	Z+20, r24	; 0x14
     3fc:	08 95       	ret

000003fe <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     3fe:	8f 92       	push	r8
     400:	9f 92       	push	r9
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     418:	c0 91 ee 01 	lds	r28, 0x01EE
     41c:	d0 91 ef 01 	lds	r29, 0x01EF
     420:	ce 84       	ldd	r12, Y+14	; 0x0e
     422:	df 84       	ldd	r13, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     424:	8e 85       	ldd	r24, Y+14	; 0x0e
     426:	9f 85       	ldd	r25, Y+15	; 0x0f
	if(tmp0 == tmp1){
     428:	c8 16       	cp	r12, r24
     42a:	d9 06       	cpc	r13, r25
     42c:	c9 f7       	brne	.-14     	; 0x420 <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     42e:	e8 88       	ldd	r14, Y+16	; 0x10
     430:	f9 88       	ldd	r15, Y+17	; 0x11
     432:	0a 89       	ldd	r16, Y+18	; 0x12
     434:	1b 89       	ldd	r17, Y+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     436:	88 89       	ldd	r24, Y+16	; 0x10
     438:	99 89       	ldd	r25, Y+17	; 0x11
     43a:	aa 89       	ldd	r26, Y+18	; 0x12
     43c:	bb 89       	ldd	r27, Y+19	; 0x13
	if(tmp0 == tmp1){
     43e:	e8 16       	cp	r14, r24
     440:	f9 06       	cpc	r15, r25
     442:	0a 07       	cpc	r16, r26
     444:	1b 07       	cpc	r17, r27
     446:	99 f7       	brne	.-26     	; 0x42e <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     448:	28 81       	ld	r18, Y
     44a:	39 81       	ldd	r19, Y+1	; 0x01
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	c8 01       	movw	r24, r16
     452:	b7 01       	movw	r22, r14
     454:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
  smpl_val += smpl_ss;
     458:	76 01       	movw	r14, r12
     45a:	00 e0       	ldi	r16, 0x00	; 0
     45c:	10 e0       	ldi	r17, 0x00	; 0
     45e:	95 01       	movw	r18, r10
     460:	40 e0       	ldi	r20, 0x00	; 0
     462:	50 e0       	ldi	r21, 0x00	; 0
     464:	e2 0e       	add	r14, r18
     466:	f3 1e       	adc	r15, r19
     468:	04 1f       	adc	r16, r20
     46a:	15 1f       	adc	r17, r21
  smpl_val += value;
     46c:	e6 0e       	add	r14, r22
     46e:	f7 1e       	adc	r15, r23
     470:	08 1f       	adc	r16, r24
     472:	19 1f       	adc	r17, r25
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	25 c0       	rjmp	.+74     	; 0x4c8 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     47e:	8e 84       	ldd	r8, Y+14	; 0x0e
     480:	9f 84       	ldd	r9, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     482:	8e 85       	ldd	r24, Y+14	; 0x0e
     484:	9f 85       	ldd	r25, Y+15	; 0x0f
	if(tmp0 == tmp1){
     486:	88 16       	cp	r8, r24
     488:	99 06       	cpc	r9, r25
     48a:	c9 f7       	brne	.-14     	; 0x47e <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     48c:	a8 88       	ldd	r10, Y+16	; 0x10
     48e:	b9 88       	ldd	r11, Y+17	; 0x11
     490:	ca 88       	ldd	r12, Y+18	; 0x12
     492:	db 88       	ldd	r13, Y+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     494:	88 89       	ldd	r24, Y+16	; 0x10
     496:	99 89       	ldd	r25, Y+17	; 0x11
     498:	aa 89       	ldd	r26, Y+18	; 0x12
     49a:	bb 89       	ldd	r27, Y+19	; 0x13
	if(tmp0 == tmp1){
     49c:	a8 16       	cp	r10, r24
     49e:	b9 06       	cpc	r11, r25
     4a0:	ca 06       	cpc	r12, r26
     4a2:	db 06       	cpc	r13, r27
     4a4:	99 f7       	brne	.-26     	; 0x48c <Timebase_Timer_Delay_SubSeconds+0x8e>
	curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     4a6:	28 81       	ld	r18, Y
     4a8:	39 81       	ldd	r19, Y+1	; 0x01
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	c6 01       	movw	r24, r12
     4b0:	b5 01       	movw	r22, r10
     4b2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
     4b6:	9b 01       	movw	r18, r22
     4b8:	ac 01       	movw	r20, r24
	curr_val += curr_ss;
     4ba:	c4 01       	movw	r24, r8
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	28 0f       	add	r18, r24
     4c2:	39 1f       	adc	r19, r25
     4c4:	4a 1f       	adc	r20, r26
     4c6:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     4c8:	2e 15       	cp	r18, r14
     4ca:	3f 05       	cpc	r19, r15
     4cc:	40 07       	cpc	r20, r16
     4ce:	51 07       	cpc	r21, r17
     4d0:	b4 f2       	brlt	.-84     	; 0x47e <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	df 90       	pop	r13
     4e0:	cf 90       	pop	r12
     4e2:	bf 90       	pop	r11
     4e4:	af 90       	pop	r10
     4e6:	9f 90       	pop	r9
     4e8:	8f 90       	pop	r8
     4ea:	08 95       	ret

000004ec <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4f2:	e0 91 ee 01 	lds	r30, 0x01EE
     4f6:	f0 91 ef 01 	lds	r31, 0x01EF
     4fa:	66 85       	ldd	r22, Z+14	; 0x0e
     4fc:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     4fe:	86 85       	ldd	r24, Z+14	; 0x0e
     500:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     502:	68 17       	cp	r22, r24
     504:	79 07       	cpc	r23, r25
     506:	c9 f7       	brne	.-14     	; 0x4fa <Timebase_Timer_Await_SubSeconds+0xe>
     508:	07 c0       	rjmp	.+14     	; 0x518 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     50a:	66 85       	ldd	r22, Z+14	; 0x0e
     50c:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     50e:	86 85       	ldd	r24, Z+14	; 0x0e
     510:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     512:	68 17       	cp	r22, r24
     514:	79 07       	cpc	r23, r25
     516:	c9 f7       	brne	.-14     	; 0x50a <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     518:	24 81       	ldd	r18, Z+4	; 0x04
     51a:	35 81       	ldd	r19, Z+5	; 0x05
     51c:	46 81       	ldd	r20, Z+6	; 0x06
     51e:	57 81       	ldd	r21, Z+7	; 0x07
     520:	cb 01       	movw	r24, r22
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	82 17       	cp	r24, r18
     528:	93 07       	cpc	r25, r19
     52a:	a4 07       	cpc	r26, r20
     52c:	b5 07       	cpc	r27, r21
     52e:	69 f7       	brne	.-38     	; 0x50a <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     530:	26 85       	ldd	r18, Z+14	; 0x0e
     532:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     534:	86 85       	ldd	r24, Z+14	; 0x0e
     536:	97 85       	ldd	r25, Z+15	; 0x0f
	if(tmp0 == tmp1){
     538:	28 17       	cp	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	c9 f7       	brne	.-14     	; 0x530 <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     53e:	c9 01       	movw	r24, r18
     540:	a0 e0       	ldi	r26, 0x00	; 0
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	84 83       	std	Z+4, r24	; 0x04
     546:	95 83       	std	Z+5, r25	; 0x05
     548:	a6 83       	std	Z+6, r26	; 0x06
     54a:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     54c:	24 81       	ldd	r18, Z+4	; 0x04
     54e:	35 81       	ldd	r19, Z+5	; 0x05
     550:	46 81       	ldd	r20, Z+6	; 0x06
     552:	57 81       	ldd	r21, Z+7	; 0x07
     554:	ce 01       	movw	r24, r28
     556:	a0 e0       	ldi	r26, 0x00	; 0
     558:	b0 e0       	ldi	r27, 0x00	; 0
     55a:	82 0f       	add	r24, r18
     55c:	93 1f       	adc	r25, r19
     55e:	a4 1f       	adc	r26, r20
     560:	b5 1f       	adc	r27, r21
     562:	84 83       	std	Z+4, r24	; 0x04
     564:	95 83       	std	Z+5, r25	; 0x05
     566:	a6 83       	std	Z+6, r26	; 0x06
     568:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     56a:	24 81       	ldd	r18, Z+4	; 0x04
     56c:	35 81       	ldd	r19, Z+5	; 0x05
     56e:	46 81       	ldd	r20, Z+6	; 0x06
     570:	57 81       	ldd	r21, Z+7	; 0x07
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	a0 e0       	ldi	r26, 0x00	; 0
     578:	b0 e0       	ldi	r27, 0x00	; 0
     57a:	28 17       	cp	r18, r24
     57c:	39 07       	cpc	r19, r25
     57e:	4a 07       	cpc	r20, r26
     580:	5b 07       	cpc	r21, r27
     582:	84 f0       	brlt	.+32     	; 0x5a4 <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     584:	24 81       	ldd	r18, Z+4	; 0x04
     586:	35 81       	ldd	r19, Z+5	; 0x05
     588:	46 81       	ldd	r20, Z+6	; 0x06
     58a:	57 81       	ldd	r21, Z+7	; 0x07
     58c:	80 81       	ld	r24, Z
     58e:	91 81       	ldd	r25, Z+1	; 0x01
     590:	a0 e0       	ldi	r26, 0x00	; 0
     592:	b0 e0       	ldi	r27, 0x00	; 0
     594:	28 1b       	sub	r18, r24
     596:	39 0b       	sbc	r19, r25
     598:	4a 0b       	sbc	r20, r26
     59a:	5b 0b       	sbc	r21, r27
     59c:	24 83       	std	Z+4, r18	; 0x04
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	46 83       	std	Z+6, r20	; 0x06
     5a2:	57 83       	std	Z+7, r21	; 0x07
  }
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     5b4:	e0 91 ee 01 	lds	r30, 0x01EE
     5b8:	f0 91 ef 01 	lds	r31, 0x01EF
     5bc:	20 89       	ldd	r18, Z+16	; 0x10
     5be:	31 89       	ldd	r19, Z+17	; 0x11
     5c0:	42 89       	ldd	r20, Z+18	; 0x12
     5c2:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     5c4:	80 89       	ldd	r24, Z+16	; 0x10
     5c6:	91 89       	ldd	r25, Z+17	; 0x11
     5c8:	a2 89       	ldd	r26, Z+18	; 0x12
     5ca:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     5cc:	28 17       	cp	r18, r24
     5ce:	39 07       	cpc	r19, r25
     5d0:	4a 07       	cpc	r20, r26
     5d2:	5b 07       	cpc	r21, r27
     5d4:	99 f7       	brne	.-26     	; 0x5bc <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     5d6:	7b 01       	movw	r14, r22
     5d8:	00 e0       	ldi	r16, 0x00	; 0
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	e2 0e       	add	r14, r18
     5de:	f3 1e       	adc	r15, r19
     5e0:	04 1f       	adc	r16, r20
     5e2:	15 1f       	adc	r17, r21
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	0d c0       	rjmp	.+26     	; 0x608 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     5ee:	20 89       	ldd	r18, Z+16	; 0x10
     5f0:	31 89       	ldd	r19, Z+17	; 0x11
     5f2:	42 89       	ldd	r20, Z+18	; 0x12
     5f4:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SecondsShadow;
     5f6:	80 89       	ldd	r24, Z+16	; 0x10
     5f8:	91 89       	ldd	r25, Z+17	; 0x11
     5fa:	a2 89       	ldd	r26, Z+18	; 0x12
     5fc:	b3 89       	ldd	r27, Z+19	; 0x13
	if(tmp0 == tmp1){
     5fe:	28 17       	cp	r18, r24
     600:	39 07       	cpc	r19, r25
     602:	4a 07       	cpc	r20, r26
     604:	5b 07       	cpc	r21, r27
     606:	99 f7       	brne	.-26     	; 0x5ee <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     608:	2e 15       	cp	r18, r14
     60a:	3f 05       	cpc	r19, r15
     60c:	40 07       	cpc	r20, r16
     60e:	51 07       	cpc	r21, r17
     610:	74 f3       	brlt	.-36     	; 0x5ee <Timebase_Timer_Delay_Seconds+0x44>
	Timebase_Atomic_Operation_End();
	#else
	curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     612:	1f 91       	pop	r17
     614:	0f 91       	pop	r16
     616:	ff 90       	pop	r15
     618:	ef 90       	pop	r14
     61a:	08 95       	ret

0000061c <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     61c:	e0 91 ee 01 	lds	r30, 0x01EE
     620:	f0 91 ef 01 	lds	r31, 0x01EF
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	25 e1       	ldi	r18, 0x15	; 21
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	ac 01       	movw	r20, r24
     62c:	42 9f       	mul	r20, r18
     62e:	c0 01       	movw	r24, r0
     630:	43 9f       	mul	r20, r19
     632:	90 0d       	add	r25, r0
     634:	52 9f       	mul	r21, r18
     636:	90 0d       	add	r25, r0
     638:	11 24       	eor	r1, r1
     63a:	e8 0f       	add	r30, r24
     63c:	f9 1f       	adc	r31, r25
     63e:	86 89       	ldd	r24, Z+22	; 0x16
     640:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     642:	8f 70       	andi	r24, 0x0F	; 15
     644:	08 95       	ret

00000646 <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     646:	e0 91 ee 01 	lds	r30, 0x01EE
     64a:	f0 91 ef 01 	lds	r31, 0x01EF
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	25 e1       	ldi	r18, 0x15	; 21
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	ac 01       	movw	r20, r24
     656:	42 9f       	mul	r20, r18
     658:	c0 01       	movw	r24, r0
     65a:	43 9f       	mul	r20, r19
     65c:	90 0d       	add	r25, r0
     65e:	52 9f       	mul	r21, r18
     660:	90 0d       	add	r25, r0
     662:	11 24       	eor	r1, r1
     664:	e8 0f       	add	r30, r24
     666:	f9 1f       	adc	r31, r25
     668:	6f 70       	andi	r22, 0x0F	; 15
     66a:	66 0f       	add	r22, r22
     66c:	86 89       	ldd	r24, Z+22	; 0x16
     66e:	81 7e       	andi	r24, 0xE1	; 225
     670:	86 2b       	or	r24, r22
     672:	86 8b       	std	Z+22, r24	; 0x16
}
     674:	08 95       	ret

00000676 <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     676:	e0 91 ee 01 	lds	r30, 0x01EE
     67a:	f0 91 ef 01 	lds	r31, 0x01EF
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	25 e1       	ldi	r18, 0x15	; 21
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	ac 01       	movw	r20, r24
     686:	42 9f       	mul	r20, r18
     688:	c0 01       	movw	r24, r0
     68a:	43 9f       	mul	r20, r19
     68c:	90 0d       	add	r25, r0
     68e:	52 9f       	mul	r21, r18
     690:	90 0d       	add	r25, r0
     692:	11 24       	eor	r1, r1
     694:	e8 0f       	add	r30, r24
     696:	f9 1f       	adc	r31, r25
     698:	df 01       	movw	r26, r30
     69a:	5f 96       	adiw	r26, 0x1f	; 31
     69c:	67 8d       	ldd	r22, Z+31	; 0x1f
     69e:	11 96       	adiw	r26, 0x01	; 1
     6a0:	7c 91       	ld	r23, X
     6a2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     6a4:	12 96       	adiw	r26, 0x02	; 2
     6a6:	8c 91       	ld	r24, X
     6a8:	12 97       	sbiw	r26, 0x02	; 2
     6aa:	13 96       	adiw	r26, 0x03	; 3
     6ac:	9c 91       	ld	r25, X
     6ae:	08 95       	ret

000006b0 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     6b0:	e0 91 ee 01 	lds	r30, 0x01EE
     6b4:	f0 91 ef 01 	lds	r31, 0x01EF
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	25 e1       	ldi	r18, 0x15	; 21
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	dc 01       	movw	r26, r24
     6c0:	a2 9f       	mul	r26, r18
     6c2:	c0 01       	movw	r24, r0
     6c4:	a3 9f       	mul	r26, r19
     6c6:	90 0d       	add	r25, r0
     6c8:	b2 9f       	mul	r27, r18
     6ca:	90 0d       	add	r25, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	e8 0f       	add	r30, r24
     6d0:	f9 1f       	adc	r31, r25
     6d2:	47 8f       	std	Z+31, r20	; 0x1f
     6d4:	50 a3       	std	Z+32, r21	; 0x20
     6d6:	61 a3       	std	Z+33, r22	; 0x21
     6d8:	72 a3       	std	Z+34, r23	; 0x22
}
     6da:	08 95       	ret

000006dc <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     6dc:	e0 91 ee 01 	lds	r30, 0x01EE
     6e0:	f0 91 ef 01 	lds	r31, 0x01EF
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	25 e1       	ldi	r18, 0x15	; 21
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	ac 01       	movw	r20, r24
     6ec:	42 9f       	mul	r20, r18
     6ee:	c0 01       	movw	r24, r0
     6f0:	43 9f       	mul	r20, r19
     6f2:	90 0d       	add	r25, r0
     6f4:	52 9f       	mul	r21, r18
     6f6:	90 0d       	add	r25, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	e8 0f       	add	r30, r24
     6fc:	f9 1f       	adc	r31, r25
     6fe:	df 01       	movw	r26, r30
     700:	57 96       	adiw	r26, 0x17	; 23
     702:	67 89       	ldd	r22, Z+23	; 0x17
     704:	11 96       	adiw	r26, 0x01	; 1
     706:	7c 91       	ld	r23, X
     708:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     70a:	12 96       	adiw	r26, 0x02	; 2
     70c:	8c 91       	ld	r24, X
     70e:	12 97       	sbiw	r26, 0x02	; 2
     710:	13 96       	adiw	r26, 0x03	; 3
     712:	9c 91       	ld	r25, X
     714:	08 95       	ret

00000716 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     716:	e0 91 ee 01 	lds	r30, 0x01EE
     71a:	f0 91 ef 01 	lds	r31, 0x01EF
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	25 e1       	ldi	r18, 0x15	; 21
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	ac 01       	movw	r20, r24
     726:	42 9f       	mul	r20, r18
     728:	c0 01       	movw	r24, r0
     72a:	43 9f       	mul	r20, r19
     72c:	90 0d       	add	r25, r0
     72e:	52 9f       	mul	r21, r18
     730:	90 0d       	add	r25, r0
     732:	11 24       	eor	r1, r1
     734:	e8 0f       	add	r30, r24
     736:	f9 1f       	adc	r31, r25
     738:	df 01       	movw	r26, r30
     73a:	5b 96       	adiw	r26, 0x1b	; 27
     73c:	63 8d       	ldd	r22, Z+27	; 0x1b
     73e:	11 96       	adiw	r26, 0x01	; 1
     740:	7c 91       	ld	r23, X
     742:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     744:	12 96       	adiw	r26, 0x02	; 2
     746:	8c 91       	ld	r24, X
     748:	12 97       	sbiw	r26, 0x02	; 2
     74a:	13 96       	adiw	r26, 0x03	; 3
     74c:	9c 91       	ld	r25, X
     74e:	08 95       	ret

00000750 <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     750:	e0 91 ee 01 	lds	r30, 0x01EE
     754:	f0 91 ef 01 	lds	r31, 0x01EF
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	25 e1       	ldi	r18, 0x15	; 21
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	dc 01       	movw	r26, r24
     760:	a2 9f       	mul	r26, r18
     762:	c0 01       	movw	r24, r0
     764:	a3 9f       	mul	r26, r19
     766:	90 0d       	add	r25, r0
     768:	b2 9f       	mul	r27, r18
     76a:	90 0d       	add	r25, r0
     76c:	11 24       	eor	r1, r1
     76e:	e8 0f       	add	r30, r24
     770:	f9 1f       	adc	r31, r25
     772:	47 8b       	std	Z+23, r20	; 0x17
     774:	50 8f       	std	Z+24, r21	; 0x18
     776:	61 8f       	std	Z+25, r22	; 0x19
     778:	72 8f       	std	Z+26, r23	; 0x1a
}
     77a:	08 95       	ret

0000077c <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     77c:	e0 91 ee 01 	lds	r30, 0x01EE
     780:	f0 91 ef 01 	lds	r31, 0x01EF
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	25 e1       	ldi	r18, 0x15	; 21
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	dc 01       	movw	r26, r24
     78c:	a2 9f       	mul	r26, r18
     78e:	c0 01       	movw	r24, r0
     790:	a3 9f       	mul	r26, r19
     792:	90 0d       	add	r25, r0
     794:	b2 9f       	mul	r27, r18
     796:	90 0d       	add	r25, r0
     798:	11 24       	eor	r1, r1
     79a:	e8 0f       	add	r30, r24
     79c:	f9 1f       	adc	r31, r25
     79e:	43 8f       	std	Z+27, r20	; 0x1b
     7a0:	54 8f       	std	Z+28, r21	; 0x1c
     7a2:	65 8f       	std	Z+29, r22	; 0x1d
     7a4:	76 8f       	std	Z+30, r23	; 0x1e
}
     7a6:	08 95       	ret

000007a8 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     7a8:	e0 91 ee 01 	lds	r30, 0x01EE
     7ac:	f0 91 ef 01 	lds	r31, 0x01EF
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	25 e1       	ldi	r18, 0x15	; 21
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	ac 01       	movw	r20, r24
     7b8:	42 9f       	mul	r20, r18
     7ba:	c0 01       	movw	r24, r0
     7bc:	43 9f       	mul	r20, r19
     7be:	90 0d       	add	r25, r0
     7c0:	52 9f       	mul	r21, r18
     7c2:	90 0d       	add	r25, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	e8 0f       	add	r30, r24
     7c8:	f9 1f       	adc	r31, r25
     7ca:	df 01       	movw	r26, r30
     7cc:	93 96       	adiw	r26, 0x23	; 35
     7ce:	63 a1       	ldd	r22, Z+35	; 0x23
     7d0:	11 96       	adiw	r26, 0x01	; 1
     7d2:	7c 91       	ld	r23, X
     7d4:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     7d6:	12 96       	adiw	r26, 0x02	; 2
     7d8:	8c 91       	ld	r24, X
     7da:	12 97       	sbiw	r26, 0x02	; 2
     7dc:	13 96       	adiw	r26, 0x03	; 3
     7de:	9c 91       	ld	r25, X
     7e0:	08 95       	ret

000007e2 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     7e2:	e0 91 ee 01 	lds	r30, 0x01EE
     7e6:	f0 91 ef 01 	lds	r31, 0x01EF
     7ea:	28 2f       	mov	r18, r24
     7ec:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     7ee:	77 ff       	sbrs	r23, 7
     7f0:	11 c0       	rjmp	.+34     	; 0x814 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     7f2:	85 e1       	ldi	r24, 0x15	; 21
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	ac 01       	movw	r20, r24
     7f8:	24 9f       	mul	r18, r20
     7fa:	c0 01       	movw	r24, r0
     7fc:	25 9f       	mul	r18, r21
     7fe:	90 0d       	add	r25, r0
     800:	34 9f       	mul	r19, r20
     802:	90 0d       	add	r25, r0
     804:	11 24       	eor	r1, r1
     806:	e8 0f       	add	r30, r24
     808:	f9 1f       	adc	r31, r25
     80a:	13 a2       	std	Z+35, r1	; 0x23
     80c:	14 a2       	std	Z+36, r1	; 0x24
     80e:	15 a2       	std	Z+37, r1	; 0x25
     810:	16 a2       	std	Z+38, r1	; 0x26
     812:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     814:	85 e1       	ldi	r24, 0x15	; 21
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	dc 01       	movw	r26, r24
     81a:	2a 9f       	mul	r18, r26
     81c:	c0 01       	movw	r24, r0
     81e:	2b 9f       	mul	r18, r27
     820:	90 0d       	add	r25, r0
     822:	3a 9f       	mul	r19, r26
     824:	90 0d       	add	r25, r0
     826:	11 24       	eor	r1, r1
     828:	e8 0f       	add	r30, r24
     82a:	f9 1f       	adc	r31, r25
     82c:	43 a3       	std	Z+35, r20	; 0x23
     82e:	54 a3       	std	Z+36, r21	; 0x24
     830:	65 a3       	std	Z+37, r22	; 0x25
     832:	76 a3       	std	Z+38, r23	; 0x26
     834:	08 95       	ret

00000836 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     836:	e0 91 ee 01 	lds	r30, 0x01EE
     83a:	f0 91 ef 01 	lds	r31, 0x01EF
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	25 e1       	ldi	r18, 0x15	; 21
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	ac 01       	movw	r20, r24
     846:	42 9f       	mul	r20, r18
     848:	c0 01       	movw	r24, r0
     84a:	43 9f       	mul	r20, r19
     84c:	90 0d       	add	r25, r0
     84e:	52 9f       	mul	r21, r18
     850:	90 0d       	add	r25, r0
     852:	11 24       	eor	r1, r1
     854:	e8 0f       	add	r30, r24
     856:	f9 1f       	adc	r31, r25
     858:	86 89       	ldd	r24, Z+22	; 0x16
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     85a:	81 70       	andi	r24, 0x01	; 1
     85c:	08 95       	ret

0000085e <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     85e:	e0 91 ee 01 	lds	r30, 0x01EE
     862:	f0 91 ef 01 	lds	r31, 0x01EF
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	25 e1       	ldi	r18, 0x15	; 21
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	ac 01       	movw	r20, r24
     86e:	42 9f       	mul	r20, r18
     870:	c0 01       	movw	r24, r0
     872:	43 9f       	mul	r20, r19
     874:	90 0d       	add	r25, r0
     876:	52 9f       	mul	r21, r18
     878:	90 0d       	add	r25, r0
     87a:	11 24       	eor	r1, r1
     87c:	e8 0f       	add	r30, r24
     87e:	f9 1f       	adc	r31, r25
     880:	86 89       	ldd	r24, Z+22	; 0x16
     882:	81 60       	ori	r24, 0x01	; 1
     884:	86 8b       	std	Z+22, r24	; 0x16
}
     886:	08 95       	ret

00000888 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     888:	e0 91 ee 01 	lds	r30, 0x01EE
     88c:	f0 91 ef 01 	lds	r31, 0x01EF
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	25 e1       	ldi	r18, 0x15	; 21
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	ac 01       	movw	r20, r24
     898:	42 9f       	mul	r20, r18
     89a:	c0 01       	movw	r24, r0
     89c:	43 9f       	mul	r20, r19
     89e:	90 0d       	add	r25, r0
     8a0:	52 9f       	mul	r21, r18
     8a2:	90 0d       	add	r25, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	e8 0f       	add	r30, r24
     8a8:	f9 1f       	adc	r31, r25
     8aa:	86 89       	ldd	r24, Z+22	; 0x16
     8ac:	8e 7f       	andi	r24, 0xFE	; 254
     8ae:	86 8b       	std	Z+22, r24	; 0x16
}
     8b0:	08 95       	ret

000008b2 <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     8b2:	e0 91 ee 01 	lds	r30, 0x01EE
     8b6:	f0 91 ef 01 	lds	r31, 0x01EF
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	25 e1       	ldi	r18, 0x15	; 21
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	ac 01       	movw	r20, r24
     8c2:	42 9f       	mul	r20, r18
     8c4:	c0 01       	movw	r24, r0
     8c6:	43 9f       	mul	r20, r19
     8c8:	90 0d       	add	r25, r0
     8ca:	52 9f       	mul	r21, r18
     8cc:	90 0d       	add	r25, r0
     8ce:	11 24       	eor	r1, r1
     8d0:	e8 0f       	add	r30, r24
     8d2:	f9 1f       	adc	r31, r25
     8d4:	df 01       	movw	r26, r30
     8d6:	97 96       	adiw	r26, 0x27	; 39
     8d8:	67 a1       	ldd	r22, Z+39	; 0x27
     8da:	11 96       	adiw	r26, 0x01	; 1
     8dc:	7c 91       	ld	r23, X
     8de:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     8e0:	12 96       	adiw	r26, 0x02	; 2
     8e2:	8c 91       	ld	r24, X
     8e4:	12 97       	sbiw	r26, 0x02	; 2
     8e6:	13 96       	adiw	r26, 0x03	; 3
     8e8:	9c 91       	ld	r25, X
     8ea:	08 95       	ret

000008ec <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     8ec:	e0 91 ee 01 	lds	r30, 0x01EE
     8f0:	f0 91 ef 01 	lds	r31, 0x01EF
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	25 e1       	ldi	r18, 0x15	; 21
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	dc 01       	movw	r26, r24
     8fc:	a2 9f       	mul	r26, r18
     8fe:	c0 01       	movw	r24, r0
     900:	a3 9f       	mul	r26, r19
     902:	90 0d       	add	r25, r0
     904:	b2 9f       	mul	r27, r18
     906:	90 0d       	add	r25, r0
     908:	11 24       	eor	r1, r1
     90a:	e8 0f       	add	r30, r24
     90c:	f9 1f       	adc	r31, r25
     90e:	47 a3       	std	Z+39, r20	; 0x27
     910:	50 a7       	std	Z+40, r21	; 0x28
     912:	61 a7       	std	Z+41, r22	; 0x29
     914:	72 a7       	std	Z+42, r23	; 0x2a
}
     916:	08 95       	ret

00000918 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     918:	e0 91 ee 01 	lds	r30, 0x01EE
     91c:	f0 91 ef 01 	lds	r31, 0x01EF
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	25 e1       	ldi	r18, 0x15	; 21
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	ac 01       	movw	r20, r24
     928:	42 9f       	mul	r20, r18
     92a:	c0 01       	movw	r24, r0
     92c:	43 9f       	mul	r20, r19
     92e:	90 0d       	add	r25, r0
     930:	52 9f       	mul	r21, r18
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	e8 0f       	add	r30, r24
     938:	f9 1f       	adc	r31, r25
     93a:	13 8e       	std	Z+27, r1	; 0x1b
     93c:	14 8e       	std	Z+28, r1	; 0x1c
     93e:	15 8e       	std	Z+29, r1	; 0x1d
     940:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     942:	17 8a       	std	Z+23, r1	; 0x17
     944:	10 8e       	std	Z+24, r1	; 0x18
     946:	11 8e       	std	Z+25, r1	; 0x19
     948:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     94a:	17 8e       	std	Z+31, r1	; 0x1f
     94c:	10 a2       	std	Z+32, r1	; 0x20
     94e:	11 a2       	std	Z+33, r1	; 0x21
     950:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     952:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     954:	80 7e       	andi	r24, 0xE0	; 224
     956:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     958:	17 a2       	std	Z+39, r1	; 0x27
     95a:	10 a6       	std	Z+40, r1	; 0x28
     95c:	11 a6       	std	Z+41, r1	; 0x29
     95e:	12 a6       	std	Z+42, r1	; 0x2a
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     960:	08 95       	ret

00000962 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     962:	e0 91 ee 01 	lds	r30, 0x01EE
     966:	f0 91 ef 01 	lds	r31, 0x01EF
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	25 e1       	ldi	r18, 0x15	; 21
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	ac 01       	movw	r20, r24
     972:	42 9f       	mul	r20, r18
     974:	c0 01       	movw	r24, r0
     976:	43 9f       	mul	r20, r19
     978:	90 0d       	add	r25, r0
     97a:	52 9f       	mul	r21, r18
     97c:	90 0d       	add	r25, r0
     97e:	11 24       	eor	r1, r1
     980:	e8 0f       	add	r30, r24
     982:	f9 1f       	adc	r31, r25
     984:	13 8e       	std	Z+27, r1	; 0x1b
     986:	14 8e       	std	Z+28, r1	; 0x1c
     988:	15 8e       	std	Z+29, r1	; 0x1d
     98a:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     98c:	17 8a       	std	Z+23, r1	; 0x17
     98e:	10 8e       	std	Z+24, r1	; 0x18
     990:	11 8e       	std	Z+25, r1	; 0x19
     992:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     994:	17 8e       	std	Z+31, r1	; 0x1f
     996:	10 a2       	std	Z+32, r1	; 0x20
     998:	11 a2       	std	Z+33, r1	; 0x21
     99a:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     99c:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     99e:	80 7e       	andi	r24, 0xE0	; 224
     9a0:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     9a2:	17 a2       	std	Z+39, r1	; 0x27
     9a4:	10 a6       	std	Z+40, r1	; 0x28
     9a6:	11 a6       	std	Z+41, r1	; 0x29
     9a8:	12 a6       	std	Z+42, r1	; 0x2a
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     9aa:	08 95       	ret

000009ac <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     9ac:	e0 91 ee 01 	lds	r30, 0x01EE
     9b0:	f0 91 ef 01 	lds	r31, 0x01EF
     9b4:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     9b6:	25 e1       	ldi	r18, 0x15	; 21
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	ac 01       	movw	r20, r24
     9bc:	42 9f       	mul	r20, r18
     9be:	c0 01       	movw	r24, r0
     9c0:	43 9f       	mul	r20, r19
     9c2:	90 0d       	add	r25, r0
     9c4:	52 9f       	mul	r21, r18
     9c6:	90 0d       	add	r25, r0
     9c8:	11 24       	eor	r1, r1
     9ca:	e8 0f       	add	r30, r24
     9cc:	f9 1f       	adc	r31, r25
     9ce:	96 89       	ldd	r25, Z+22	; 0x16
     9d0:	89 2f       	mov	r24, r25
     9d2:	86 95       	lsr	r24
     9d4:	8f 70       	andi	r24, 0x0F	; 15
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	19 f0       	breq	.+6      	; 0x9e0 <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     9da:	91 7e       	andi	r25, 0xE1	; 225
     9dc:	92 60       	ori	r25, 0x02	; 2
     9de:	96 8b       	std	Z+22, r25	; 0x16
     9e0:	08 95       	ret

000009e2 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     9e2:	e0 91 ee 01 	lds	r30, 0x01EE
     9e6:	f0 91 ef 01 	lds	r31, 0x01EF
     9ea:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     9ec:	25 e1       	ldi	r18, 0x15	; 21
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	ac 01       	movw	r20, r24
     9f2:	42 9f       	mul	r20, r18
     9f4:	c0 01       	movw	r24, r0
     9f6:	43 9f       	mul	r20, r19
     9f8:	90 0d       	add	r25, r0
     9fa:	52 9f       	mul	r21, r18
     9fc:	90 0d       	add	r25, r0
     9fe:	11 24       	eor	r1, r1
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	96 89       	ldd	r25, Z+22	; 0x16
     a06:	89 2f       	mov	r24, r25
     a08:	86 95       	lsr	r24
     a0a:	8f 70       	andi	r24, 0x0F	; 15
     a0c:	82 30       	cpi	r24, 0x02	; 2
     a0e:	19 f0       	breq	.+6      	; 0xa16 <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     a10:	91 7e       	andi	r25, 0xE1	; 225
     a12:	94 60       	ori	r25, 0x04	; 4
     a14:	96 8b       	std	Z+22, r25	; 0x16
     a16:	08 95       	ret

00000a18 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     a18:	2f 92       	push	r2
     a1a:	3f 92       	push	r3
     a1c:	4f 92       	push	r4
     a1e:	5f 92       	push	r5
     a20:	6f 92       	push	r6
     a22:	7f 92       	push	r7
     a24:	8f 92       	push	r8
     a26:	9f 92       	push	r9
     a28:	af 92       	push	r10
     a2a:	bf 92       	push	r11
     a2c:	cf 92       	push	r12
     a2e:	df 92       	push	r13
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	df 93       	push	r29
     a3a:	cf 93       	push	r28
     a3c:	cd b7       	in	r28, 0x3d	; 61
     a3e:	de b7       	in	r29, 0x3e	; 62
     a40:	28 97       	sbiw	r28, 0x08	; 8
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	f8 94       	cli
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	0f be       	out	0x3f, r0	; 63
     a4a:	cd bf       	out	0x3d, r28	; 61
     a4c:	1a 01       	movw	r2, r20
     a4e:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     a50:	20 91 ee 01 	lds	r18, 0x01EE
     a54:	30 91 ef 01 	lds	r19, 0x01EF
     a58:	38 87       	std	Y+8, r19	; 0x08
     a5a:	2f 83       	std	Y+7, r18	; 0x07
     a5c:	a8 2f       	mov	r26, r24
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	ba 83       	std	Y+2, r27	; 0x02
     a62:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     a64:	85 e1       	ldi	r24, 0x15	; 21
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a8 9f       	mul	r26, r24
     a6a:	f0 01       	movw	r30, r0
     a6c:	a9 9f       	mul	r26, r25
     a6e:	f0 0d       	add	r31, r0
     a70:	b8 9f       	mul	r27, r24
     a72:	f0 0d       	add	r31, r0
     a74:	11 24       	eor	r1, r1
     a76:	e2 0f       	add	r30, r18
     a78:	f3 1f       	adc	r31, r19
     a7a:	86 89       	ldd	r24, Z+22	; 0x16
     a7c:	86 95       	lsr	r24
     a7e:	8f 70       	andi	r24, 0x0F	; 15
     a80:	09 f0       	breq	.+2      	; 0xa84 <Timebase_DownCounter_SS_Set_Securely+0x6c>
     a82:	80 c0       	rjmp	.+256    	; 0xb84 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     a84:	47 8f       	std	Z+31, r20	; 0x1f
     a86:	50 a3       	std	Z+32, r21	; 0x20
     a88:	61 a3       	std	Z+33, r22	; 0x21
     a8a:	72 a3       	std	Z+34, r23	; 0x22
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a8c:	f9 01       	movw	r30, r18
     a8e:	c0 84       	ldd	r12, Z+8	; 0x08
     a90:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a92:	d9 01       	movw	r26, r18
     a94:	1a 96       	adiw	r26, 0x0a	; 10
     a96:	8d 91       	ld	r24, X+
     a98:	9d 91       	ld	r25, X+
     a9a:	0d 90       	ld	r0, X+
     a9c:	bc 91       	ld	r27, X
     a9e:	a0 2d       	mov	r26, r0
     aa0:	8b 83       	std	Y+3, r24	; 0x03
     aa2:	9c 83       	std	Y+4, r25	; 0x04
     aa4:	ad 83       	std	Y+5, r26	; 0x05
     aa6:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     aa8:	20 81       	ld	r18, Z
     aaa:	31 81       	ldd	r19, Z+1	; 0x01
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	c2 01       	movw	r24, r4
     ab2:	b1 01       	movw	r22, r2
     ab4:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     ab8:	7b 01       	movw	r14, r22
     aba:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     abc:	ef 81       	ldd	r30, Y+7	; 0x07
     abe:	f8 85       	ldd	r31, Y+8	; 0x08
     ac0:	20 81       	ld	r18, Z
     ac2:	31 81       	ldd	r19, Z+1	; 0x01
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	50 e0       	ldi	r21, 0x00	; 0
     ac8:	c2 01       	movw	r24, r4
     aca:	b1 01       	movw	r22, r2
     acc:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     ad0:	c9 01       	movw	r24, r18
     ad2:	da 01       	movw	r26, r20
     ad4:	3c 01       	movw	r6, r24
     ad6:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     ad8:	56 01       	movw	r10, r12
     ada:	cc 24       	eor	r12, r12
     adc:	dd 24       	eor	r13, r13
     ade:	ae 0c       	add	r10, r14
     ae0:	bf 1c       	adc	r11, r15
     ae2:	c0 1e       	adc	r12, r16
     ae4:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     ae6:	af 81       	ldd	r26, Y+7	; 0x07
     ae8:	b8 85       	ldd	r27, Y+8	; 0x08
     aea:	8d 91       	ld	r24, X+
     aec:	9c 91       	ld	r25, X
     aee:	a0 e0       	ldi	r26, 0x00	; 0
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	a8 16       	cp	r10, r24
     af4:	b9 06       	cpc	r11, r25
     af6:	ca 06       	cpc	r12, r26
     af8:	db 06       	cpc	r13, r27
     afa:	a4 f0       	brlt	.+40     	; 0xb24 <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     afc:	08 94       	sec
     afe:	61 1c       	adc	r6, r1
     b00:	71 1c       	adc	r7, r1
     b02:	81 1c       	adc	r8, r1
     b04:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     b06:	ef 81       	ldd	r30, Y+7	; 0x07
     b08:	f8 85       	ldd	r31, Y+8	; 0x08
     b0a:	20 81       	ld	r18, Z
     b0c:	31 81       	ldd	r19, Z+1	; 0x01
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	50 e0       	ldi	r21, 0x00	; 0
     b12:	c6 01       	movw	r24, r12
     b14:	b5 01       	movw	r22, r10
     b16:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     b1a:	ac 01       	movw	r20, r24
     b1c:	cb 01       	movw	r24, r22
     b1e:	da 01       	movw	r26, r20
     b20:	5c 01       	movw	r10, r24
     b22:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b24:	85 e1       	ldi	r24, 0x15	; 21
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	29 81       	ldd	r18, Y+1	; 0x01
     b2a:	3a 81       	ldd	r19, Y+2	; 0x02
     b2c:	28 9f       	mul	r18, r24
     b2e:	a0 01       	movw	r20, r0
     b30:	29 9f       	mul	r18, r25
     b32:	50 0d       	add	r21, r0
     b34:	38 9f       	mul	r19, r24
     b36:	50 0d       	add	r21, r0
     b38:	11 24       	eor	r1, r1
     b3a:	8f 81       	ldd	r24, Y+7	; 0x07
     b3c:	98 85       	ldd	r25, Y+8	; 0x08
     b3e:	48 0f       	add	r20, r24
     b40:	59 1f       	adc	r21, r25
     b42:	8b 81       	ldd	r24, Y+3	; 0x03
     b44:	9c 81       	ldd	r25, Y+4	; 0x04
     b46:	ad 81       	ldd	r26, Y+5	; 0x05
     b48:	be 81       	ldd	r27, Y+6	; 0x06
     b4a:	86 0d       	add	r24, r6
     b4c:	97 1d       	adc	r25, r7
     b4e:	a8 1d       	adc	r26, r8
     b50:	b9 1d       	adc	r27, r9
     b52:	fa 01       	movw	r30, r20
     b54:	87 8b       	std	Z+23, r24	; 0x17
     b56:	90 8f       	std	Z+24, r25	; 0x18
     b58:	a1 8f       	std	Z+25, r26	; 0x19
     b5a:	b2 8f       	std	Z+26, r27	; 0x1a
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b5c:	da 01       	movw	r26, r20
     b5e:	5b 96       	adiw	r26, 0x1b	; 27
     b60:	ad 92       	st	X+, r10
     b62:	bd 92       	st	X+, r11
     b64:	cd 92       	st	X+, r12
     b66:	dc 92       	st	X, r13
     b68:	5e 97       	sbiw	r26, 0x1e	; 30
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b6a:	27 a2       	std	Z+39, r2	; 0x27
     b6c:	30 a6       	std	Z+40, r3	; 0x28
     b6e:	41 a6       	std	Z+41, r4	; 0x29
     b70:	52 a6       	std	Z+42, r5	; 0x2a
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     b72:	96 89       	ldd	r25, Z+22	; 0x16
     b74:	89 2f       	mov	r24, r25
     b76:	86 95       	lsr	r24
     b78:	8f 70       	andi	r24, 0x0F	; 15
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	19 f0       	breq	.+6      	; 0xb84 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b7e:	91 7e       	andi	r25, 0xE1	; 225
     b80:	92 60       	ori	r25, 0x02	; 2
     b82:	96 8b       	std	Z+22, r25	; 0x16
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     b84:	28 96       	adiw	r28, 0x08	; 8
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	de bf       	out	0x3e, r29	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cd bf       	out	0x3d, r28	; 61
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	bf 90       	pop	r11
     ba2:	af 90       	pop	r10
     ba4:	9f 90       	pop	r9
     ba6:	8f 90       	pop	r8
     ba8:	7f 90       	pop	r7
     baa:	6f 90       	pop	r6
     bac:	5f 90       	pop	r5
     bae:	4f 90       	pop	r4
     bb0:	3f 90       	pop	r3
     bb2:	2f 90       	pop	r2
     bb4:	08 95       	ret

00000bb6 <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	7a 01       	movw	r14, r20
     bc4:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     bc6:	e0 91 ee 01 	lds	r30, 0x01EE
     bca:	f0 91 ef 01 	lds	r31, 0x01EF
     bce:	48 2f       	mov	r20, r24
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	25 e1       	ldi	r18, 0x15	; 21
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	42 9f       	mul	r20, r18
     bd8:	60 01       	movw	r12, r0
     bda:	43 9f       	mul	r20, r19
     bdc:	d0 0c       	add	r13, r0
     bde:	52 9f       	mul	r21, r18
     be0:	d0 0c       	add	r13, r0
     be2:	11 24       	eor	r1, r1
     be4:	ec 0d       	add	r30, r12
     be6:	fd 1d       	adc	r31, r13
     be8:	13 8e       	std	Z+27, r1	; 0x1b
     bea:	14 8e       	std	Z+28, r1	; 0x1c
     bec:	15 8e       	std	Z+29, r1	; 0x1d
     bee:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     bf0:	17 8a       	std	Z+23, r1	; 0x17
     bf2:	10 8e       	std	Z+24, r1	; 0x18
     bf4:	11 8e       	std	Z+25, r1	; 0x19
     bf6:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     bf8:	17 8e       	std	Z+31, r1	; 0x1f
     bfa:	10 a2       	std	Z+32, r1	; 0x20
     bfc:	11 a2       	std	Z+33, r1	; 0x21
     bfe:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c00:	96 89       	ldd	r25, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     c02:	90 7e       	andi	r25, 0xE0	; 224
     c04:	96 8b       	std	Z+22, r25	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c06:	17 a2       	std	Z+39, r1	; 0x27
     c08:	10 a6       	std	Z+40, r1	; 0x28
     c0a:	11 a6       	std	Z+41, r1	; 0x29
     c0c:	12 a6       	std	Z+42, r1	; 0x2a
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     c0e:	b8 01       	movw	r22, r16
     c10:	a7 01       	movw	r20, r14
     c12:	0e 94 0c 05 	call	0xa18	; 0xa18 <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c16:	e0 91 ee 01 	lds	r30, 0x01EE
     c1a:	f0 91 ef 01 	lds	r31, 0x01EF
     c1e:	ec 0d       	add	r30, r12
     c20:	fd 1d       	adc	r31, r13
     c22:	e7 a2       	std	Z+39, r14	; 0x27
     c24:	f0 a6       	std	Z+40, r15	; 0x28
     c26:	01 a7       	std	Z+41, r16	; 0x29
     c28:	12 a7       	std	Z+42, r17	; 0x2a

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     c2a:	1f 91       	pop	r17
     c2c:	0f 91       	pop	r16
     c2e:	ff 90       	pop	r15
     c30:	ef 90       	pop	r14
     c32:	df 90       	pop	r13
     c34:	cf 90       	pop	r12
     c36:	08 95       	ret

00000c38 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     c38:	2f 92       	push	r2
     c3a:	3f 92       	push	r3
     c3c:	4f 92       	push	r4
     c3e:	5f 92       	push	r5
     c40:	6f 92       	push	r6
     c42:	7f 92       	push	r7
     c44:	8f 92       	push	r8
     c46:	9f 92       	push	r9
     c48:	af 92       	push	r10
     c4a:	bf 92       	push	r11
     c4c:	cf 92       	push	r12
     c4e:	df 92       	push	r13
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c5c:	e0 91 ee 01 	lds	r30, 0x01EE
     c60:	f0 91 ef 01 	lds	r31, 0x01EF
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	25 e1       	ldi	r18, 0x15	; 21
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	82 9f       	mul	r24, r18
     c6c:	e0 01       	movw	r28, r0
     c6e:	83 9f       	mul	r24, r19
     c70:	d0 0d       	add	r29, r0
     c72:	92 9f       	mul	r25, r18
     c74:	d0 0d       	add	r29, r0
     c76:	11 24       	eor	r1, r1
     c78:	ce 0f       	add	r28, r30
     c7a:	df 1f       	adc	r29, r31
     c7c:	8e 89       	ldd	r24, Y+22	; 0x16
     c7e:	86 95       	lsr	r24
     c80:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	09 f0       	breq	.+2      	; 0xc88 <Timebase_DownCounter_SS_Update+0x50>
     c86:	48 c0       	rjmp	.+144    	; 0xd18 <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     c88:	e0 84       	ldd	r14, Z+8	; 0x08
     c8a:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     c90:	82 85       	ldd	r24, Z+10	; 0x0a
     c92:	93 85       	ldd	r25, Z+11	; 0x0b
     c94:	a4 85       	ldd	r26, Z+12	; 0x0c
     c96:	b5 85       	ldd	r27, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     c98:	2f 89       	ldd	r18, Y+23	; 0x17
     c9a:	38 8d       	ldd	r19, Y+24	; 0x18
     c9c:	49 8d       	ldd	r20, Y+25	; 0x19
     c9e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     ca0:	28 1b       	sub	r18, r24
     ca2:	39 0b       	sbc	r19, r25
     ca4:	4a 0b       	sbc	r20, r26
     ca6:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     ca8:	60 81       	ld	r22, Z
     caa:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
     cb4:	6e 19       	sub	r22, r14
     cb6:	7f 09       	sbc	r23, r15
     cb8:	80 0b       	sbc	r24, r16
     cba:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     cbc:	2b 8d       	ldd	r18, Y+27	; 0x1b
     cbe:	3c 8d       	ldd	r19, Y+28	; 0x1c
     cc0:	4d 8d       	ldd	r20, Y+29	; 0x1d
     cc2:	5e 8d       	ldd	r21, Y+30	; 0x1e
     cc4:	62 0f       	add	r22, r18
     cc6:	73 1f       	adc	r23, r19
     cc8:	84 1f       	adc	r24, r20
     cca:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ccc:	6f 8f       	std	Y+31, r22	; 0x1f
     cce:	78 a3       	std	Y+32, r23	; 0x20
     cd0:	89 a3       	std	Y+33, r24	; 0x21
     cd2:	9a a3       	std	Y+34, r25	; 0x22
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     cd4:	16 16       	cp	r1, r22
     cd6:	17 06       	cpc	r1, r23
     cd8:	18 06       	cpc	r1, r24
     cda:	19 06       	cpc	r1, r25
     cdc:	0c f4       	brge	.+2      	; 0xce0 <Timebase_DownCounter_SS_Update+0xa8>
     cde:	4c c0       	rjmp	.+152    	; 0xd78 <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     ce0:	8f a1       	ldd	r24, Y+39	; 0x27
     ce2:	98 a5       	ldd	r25, Y+40	; 0x28
     ce4:	a9 a5       	ldd	r26, Y+41	; 0x29
     ce6:	ba a5       	ldd	r27, Y+42	; 0x2a
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     ce8:	1b 8e       	std	Y+27, r1	; 0x1b
     cea:	1c 8e       	std	Y+28, r1	; 0x1c
     cec:	1d 8e       	std	Y+29, r1	; 0x1d
     cee:	1e 8e       	std	Y+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     cf0:	1f 8a       	std	Y+23, r1	; 0x17
     cf2:	18 8e       	std	Y+24, r1	; 0x18
     cf4:	19 8e       	std	Y+25, r1	; 0x19
     cf6:	1a 8e       	std	Y+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     cf8:	1f 8e       	std	Y+31, r1	; 0x1f
     cfa:	18 a2       	std	Y+32, r1	; 0x20
     cfc:	19 a2       	std	Y+33, r1	; 0x21
     cfe:	1a a2       	std	Y+34, r1	; 0x22
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     d00:	2e 89       	ldd	r18, Y+22	; 0x16
     d02:	2e 7f       	andi	r18, 0xFE	; 254
     d04:	2e 8b       	std	Y+22, r18	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d06:	8f a3       	std	Y+39, r24	; 0x27
     d08:	98 a7       	std	Y+40, r25	; 0x28
     d0a:	a9 a7       	std	Y+41, r26	; 0x29
     d0c:	ba a7       	std	Y+42, r27	; 0x2a
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     d0e:	8e 89       	ldd	r24, Y+22	; 0x16
     d10:	81 7e       	andi	r24, 0xE1	; 225
     d12:	88 60       	ori	r24, 0x08	; 8
     d14:	8e 8b       	std	Y+22, r24	; 0x16
     d16:	30 c0       	rjmp	.+96     	; 0xd78 <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     d18:	82 30       	cpi	r24, 0x02	; 2
     d1a:	71 f5       	brne	.+92     	; 0xd78 <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d1c:	60 84       	ldd	r6, Z+8	; 0x08
     d1e:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d20:	e2 84       	ldd	r14, Z+10	; 0x0a
     d22:	f3 84       	ldd	r15, Z+11	; 0x0b
     d24:	04 85       	ldd	r16, Z+12	; 0x0c
     d26:	15 85       	ldd	r17, Z+13	; 0x0d
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     d28:	2f 8c       	ldd	r2, Y+31	; 0x1f
     d2a:	38 a0       	ldd	r3, Y+32	; 0x20
     d2c:	49 a0       	ldd	r4, Y+33	; 0x21
     d2e:	5a a0       	ldd	r5, Y+34	; 0x22
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     d30:	20 81       	ld	r18, Z
     d32:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     d34:	a0 80       	ld	r10, Z
     d36:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     d38:	40 e0       	ldi	r20, 0x00	; 0
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	c2 01       	movw	r24, r4
     d3e:	b1 01       	movw	r22, r2
     d40:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     d44:	e2 0e       	add	r14, r18
     d46:	f3 1e       	adc	r15, r19
     d48:	04 1f       	adc	r16, r20
     d4a:	15 1f       	adc	r17, r21
     d4c:	ef 8a       	std	Y+23, r14	; 0x17
     d4e:	f8 8e       	std	Y+24, r15	; 0x18
     d50:	09 8f       	std	Y+25, r16	; 0x19
     d52:	1a 8f       	std	Y+26, r17	; 0x1a
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d54:	cc 24       	eor	r12, r12
     d56:	dd 24       	eor	r13, r13
     d58:	c2 01       	movw	r24, r4
     d5a:	b1 01       	movw	r22, r2
     d5c:	a6 01       	movw	r20, r12
     d5e:	95 01       	movw	r18, r10
     d60:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
     d64:	88 24       	eor	r8, r8
     d66:	99 24       	eor	r9, r9
     d68:	66 0e       	add	r6, r22
     d6a:	77 1e       	adc	r7, r23
     d6c:	88 1e       	adc	r8, r24
     d6e:	99 1e       	adc	r9, r25
     d70:	6b 8e       	std	Y+27, r6	; 0x1b
     d72:	7c 8e       	std	Y+28, r7	; 0x1c
     d74:	8d 8e       	std	Y+29, r8	; 0x1d
     d76:	9e 8e       	std	Y+30, r9	; 0x1e
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	ef 90       	pop	r14
     d84:	df 90       	pop	r13
     d86:	cf 90       	pop	r12
     d88:	bf 90       	pop	r11
     d8a:	af 90       	pop	r10
     d8c:	9f 90       	pop	r9
     d8e:	8f 90       	pop	r8
     d90:	7f 90       	pop	r7
     d92:	6f 90       	pop	r6
     d94:	5f 90       	pop	r5
     d96:	4f 90       	pop	r4
     d98:	3f 90       	pop	r3
     d9a:	2f 90       	pop	r2
     d9c:	08 95       	ret

00000d9e <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	e0 91 ee 01 	lds	r30, 0x01EE
     da4:	f0 91 ef 01 	lds	r31, 0x01EF
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	25 e1       	ldi	r18, 0x15	; 21
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	bc 01       	movw	r22, r24
     db0:	62 9f       	mul	r22, r18
     db2:	c0 01       	movw	r24, r0
     db4:	63 9f       	mul	r22, r19
     db6:	90 0d       	add	r25, r0
     db8:	72 9f       	mul	r23, r18
     dba:	90 0d       	add	r25, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	e8 0f       	add	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	86 89       	ldd	r24, Z+22	; 0x16
     dc4:	86 95       	lsr	r24
     dc6:	8f 70       	andi	r24, 0x0F	; 15
     dc8:	84 30       	cpi	r24, 0x04	; 4
     dca:	09 f4       	brne	.+2      	; 0xdce <Timebase_DownCounter_SS_Expired+0x30>
     dcc:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     dce:	84 2f       	mov	r24, r20
     dd0:	08 95       	ret

00000dd2 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     dd2:	e0 91 ee 01 	lds	r30, 0x01EE
     dd6:	f0 91 ef 01 	lds	r31, 0x01EF
     dda:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     ddc:	25 e1       	ldi	r18, 0x15	; 21
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	ac 01       	movw	r20, r24
     de2:	42 9f       	mul	r20, r18
     de4:	c0 01       	movw	r24, r0
     de6:	43 9f       	mul	r20, r19
     de8:	90 0d       	add	r25, r0
     dea:	52 9f       	mul	r21, r18
     dec:	90 0d       	add	r25, r0
     dee:	11 24       	eor	r1, r1
     df0:	e8 0f       	add	r30, r24
     df2:	f9 1f       	adc	r31, r25
     df4:	86 89       	ldd	r24, Z+22	; 0x16
     df6:	86 95       	lsr	r24
     df8:	8f 70       	andi	r24, 0x0F	; 15
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	11 f0       	breq	.+4      	; 0xe02 <Timebase_DownCounter_SS_Expired_Event+0x30>
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e02:	13 8e       	std	Z+27, r1	; 0x1b
     e04:	14 8e       	std	Z+28, r1	; 0x1c
     e06:	15 8e       	std	Z+29, r1	; 0x1d
     e08:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e0a:	17 8a       	std	Z+23, r1	; 0x17
     e0c:	10 8e       	std	Z+24, r1	; 0x18
     e0e:	11 8e       	std	Z+25, r1	; 0x19
     e10:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e12:	17 8e       	std	Z+31, r1	; 0x1f
     e14:	10 a2       	std	Z+32, r1	; 0x20
     e16:	11 a2       	std	Z+33, r1	; 0x21
     e18:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e1a:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e1c:	80 7e       	andi	r24, 0xE0	; 224
     e1e:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e20:	17 a2       	std	Z+39, r1	; 0x27
     e22:	10 a6       	std	Z+40, r1	; 0x28
     e24:	11 a6       	std	Z+41, r1	; 0x29
     e26:	12 a6       	std	Z+42, r1	; 0x2a
     e28:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e2a:	08 95       	ret

00000e2c <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
     e2c:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <Timebase_DownCounter_SS_Expired_Event>
}
     e30:	08 95       	ret

00000e32 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
     e32:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e34:	e0 91 ee 01 	lds	r30, 0x01EE
     e38:	f0 91 ef 01 	lds	r31, 0x01EF
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     e40:	85 e1       	ldi	r24, 0x15	; 21
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	ac 01       	movw	r20, r24
     e46:	24 9f       	mul	r18, r20
     e48:	c0 01       	movw	r24, r0
     e4a:	25 9f       	mul	r18, r21
     e4c:	90 0d       	add	r25, r0
     e4e:	34 9f       	mul	r19, r20
     e50:	90 0d       	add	r25, r0
     e52:	11 24       	eor	r1, r1
     e54:	e8 0f       	add	r30, r24
     e56:	f9 1f       	adc	r31, r25
     e58:	86 89       	ldd	r24, Z+22	; 0x16
     e5a:	86 95       	lsr	r24
     e5c:	8f 70       	andi	r24, 0x0F	; 15
     e5e:	84 30       	cpi	r24, 0x04	; 4
     e60:	11 f0       	breq	.+4      	; 0xe66 <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     e66:	47 a1       	ldd	r20, Z+39	; 0x27
     e68:	50 a5       	ldd	r21, Z+40	; 0x28
     e6a:	61 a5       	ldd	r22, Z+41	; 0x29
     e6c:	72 a5       	ldd	r23, Z+42	; 0x2a
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e6e:	13 8e       	std	Z+27, r1	; 0x1b
     e70:	14 8e       	std	Z+28, r1	; 0x1c
     e72:	15 8e       	std	Z+29, r1	; 0x1d
     e74:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e76:	17 8a       	std	Z+23, r1	; 0x17
     e78:	10 8e       	std	Z+24, r1	; 0x18
     e7a:	11 8e       	std	Z+25, r1	; 0x19
     e7c:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e7e:	17 8e       	std	Z+31, r1	; 0x1f
     e80:	10 a2       	std	Z+32, r1	; 0x20
     e82:	11 a2       	std	Z+33, r1	; 0x21
     e84:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e86:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e88:	80 7e       	andi	r24, 0xE0	; 224
     e8a:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e8c:	17 a2       	std	Z+39, r1	; 0x27
     e8e:	10 a6       	std	Z+40, r1	; 0x28
     e90:	11 a6       	std	Z+41, r1	; 0x29
     e92:	12 a6       	std	Z+42, r1	; 0x2a

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
     e94:	8a 2f       	mov	r24, r26
     e96:	0e 94 0c 05 	call	0xa18	; 0xa18 <Timebase_DownCounter_SS_Set_Securely>
     e9a:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     e9c:	08 95       	ret

00000e9e <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
     ea2:	c0 91 ee 01 	lds	r28, 0x01EE
     ea6:	d0 91 ef 01 	lds	r29, 0x01EF
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
     eae:	85 e1       	ldi	r24, 0x15	; 21
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	28 9f       	mul	r18, r24
     eb4:	f0 01       	movw	r30, r0
     eb6:	29 9f       	mul	r18, r25
     eb8:	f0 0d       	add	r31, r0
     eba:	38 9f       	mul	r19, r24
     ebc:	f0 0d       	add	r31, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	ec 0f       	add	r30, r28
     ec2:	fd 1f       	adc	r31, r29
     ec4:	86 89       	ldd	r24, Z+22	; 0x16
     ec6:	80 fd       	sbrc	r24, 0
     ec8:	21 c0       	rjmp	.+66     	; 0xf0c <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
     eca:	87 8d       	ldd	r24, Z+31	; 0x1f
     ecc:	90 a1       	ldd	r25, Z+32	; 0x20
     ece:	a1 a1       	ldd	r26, Z+33	; 0x21
     ed0:	b2 a1       	ldd	r27, Z+34	; 0x22
     ed2:	84 1b       	sub	r24, r20
     ed4:	95 0b       	sbc	r25, r21
     ed6:	a6 0b       	sbc	r26, r22
     ed8:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
     eda:	b7 ff       	sbrs	r27, 7
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     ede:	13 a2       	std	Z+35, r1	; 0x23
     ee0:	14 a2       	std	Z+36, r1	; 0x24
     ee2:	15 a2       	std	Z+37, r1	; 0x25
     ee4:	16 a2       	std	Z+38, r1	; 0x26
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     ee8:	83 a3       	std	Z+35, r24	; 0x23
     eea:	94 a3       	std	Z+36, r25	; 0x24
     eec:	a5 a3       	std	Z+37, r26	; 0x25
     eee:	b6 a3       	std	Z+38, r27	; 0x26
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     ef0:	85 e1       	ldi	r24, 0x15	; 21
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	28 9f       	mul	r18, r24
     ef6:	f0 01       	movw	r30, r0
     ef8:	29 9f       	mul	r18, r25
     efa:	f0 0d       	add	r31, r0
     efc:	38 9f       	mul	r19, r24
     efe:	f0 0d       	add	r31, r0
     f00:	11 24       	eor	r1, r1
     f02:	ec 0f       	add	r30, r28
     f04:	fd 1f       	adc	r31, r29
     f06:	86 89       	ldd	r24, Z+22	; 0x16
     f08:	81 60       	ori	r24, 0x01	; 1
     f0a:	86 8b       	std	Z+22, r24	; 0x16
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	08 95       	ret

00000f12 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f12:	e0 91 ee 01 	lds	r30, 0x01EE
     f16:	f0 91 ef 01 	lds	r31, 0x01EF
     f1a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
     f1c:	25 e1       	ldi	r18, 0x15	; 21
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	ac 01       	movw	r20, r24
     f22:	42 9f       	mul	r20, r18
     f24:	c0 01       	movw	r24, r0
     f26:	43 9f       	mul	r20, r19
     f28:	90 0d       	add	r25, r0
     f2a:	52 9f       	mul	r21, r18
     f2c:	90 0d       	add	r25, r0
     f2e:	11 24       	eor	r1, r1
     f30:	e8 0f       	add	r30, r24
     f32:	f9 1f       	adc	r31, r25
     f34:	27 8d       	ldd	r18, Z+31	; 0x1f
     f36:	30 a1       	ldd	r19, Z+32	; 0x20
     f38:	41 a1       	ldd	r20, Z+33	; 0x21
     f3a:	52 a1       	ldd	r21, Z+34	; 0x22
     f3c:	83 a1       	ldd	r24, Z+35	; 0x23
     f3e:	94 a1       	ldd	r25, Z+36	; 0x24
     f40:	a5 a1       	ldd	r26, Z+37	; 0x25
     f42:	b6 a1       	ldd	r27, Z+38	; 0x26
     f44:	28 1b       	sub	r18, r24
     f46:	39 0b       	sbc	r19, r25
     f48:	4a 0b       	sbc	r20, r26
     f4a:	5b 0b       	sbc	r21, r27
     f4c:	57 ff       	sbrs	r21, 7
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
     f58:	b9 01       	movw	r22, r18
     f5a:	ca 01       	movw	r24, r20
     f5c:	08 95       	ret

00000f5e <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f62:	c0 91 ee 01 	lds	r28, 0x01EE
     f66:	d0 91 ef 01 	lds	r29, 0x01EF
     f6a:	68 2f       	mov	r22, r24
     f6c:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
     f6e:	85 e1       	ldi	r24, 0x15	; 21
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	68 9f       	mul	r22, r24
     f74:	f0 01       	movw	r30, r0
     f76:	69 9f       	mul	r22, r25
     f78:	f0 0d       	add	r31, r0
     f7a:	78 9f       	mul	r23, r24
     f7c:	f0 0d       	add	r31, r0
     f7e:	11 24       	eor	r1, r1
     f80:	ec 0f       	add	r30, r28
     f82:	fd 1f       	adc	r31, r29
     f84:	27 8d       	ldd	r18, Z+31	; 0x1f
     f86:	30 a1       	ldd	r19, Z+32	; 0x20
     f88:	41 a1       	ldd	r20, Z+33	; 0x21
     f8a:	52 a1       	ldd	r21, Z+34	; 0x22
     f8c:	83 a1       	ldd	r24, Z+35	; 0x23
     f8e:	94 a1       	ldd	r25, Z+36	; 0x24
     f90:	a5 a1       	ldd	r26, Z+37	; 0x25
     f92:	b6 a1       	ldd	r27, Z+38	; 0x26
     f94:	28 1b       	sub	r18, r24
     f96:	39 0b       	sbc	r19, r25
     f98:	4a 0b       	sbc	r20, r26
     f9a:	5b 0b       	sbc	r21, r27
  if(temp < 0){
     f9c:	57 fd       	sbrc	r21, 7
     f9e:	07 c0       	rjmp	.+14     	; 0xfae <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
     fa0:	21 15       	cp	r18, r1
     fa2:	31 05       	cpc	r19, r1
     fa4:	41 05       	cpc	r20, r1
     fa6:	51 05       	cpc	r21, r1
     fa8:	11 f0       	breq	.+4      	; 0xfae <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	12 c0       	rjmp	.+36     	; 0xfd2 <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	85 e1       	ldi	r24, 0x15	; 21
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	ac 01       	movw	r20, r24
     fb6:	64 9f       	mul	r22, r20
     fb8:	c0 01       	movw	r24, r0
     fba:	65 9f       	mul	r22, r21
     fbc:	90 0d       	add	r25, r0
     fbe:	74 9f       	mul	r23, r20
     fc0:	90 0d       	add	r25, r0
     fc2:	11 24       	eor	r1, r1
     fc4:	c8 0f       	add	r28, r24
     fc6:	d9 1f       	adc	r29, r25
     fc8:	8e 89       	ldd	r24, Y+22	; 0x16
     fca:	80 ff       	sbrs	r24, 0
     fcc:	21 e0       	ldi	r18, 0x01	; 1
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fd2:	82 2f       	mov	r24, r18
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
     fda:	1f 93       	push	r17
     fdc:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
     fde:	0e 94 af 07 	call	0xf5e	; 0xf5e <Timebase_DownCounter_SS_Period_Value_Expired>
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	11 f0       	breq	.+4      	; 0xfea <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	16 c0       	rjmp	.+44     	; 0x1016 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     fea:	e0 91 ee 01 	lds	r30, 0x01EE
     fee:	f0 91 ef 01 	lds	r31, 0x01EF
     ff2:	21 2f       	mov	r18, r17
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	85 e1       	ldi	r24, 0x15	; 21
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	ac 01       	movw	r20, r24
     ffc:	24 9f       	mul	r18, r20
     ffe:	c0 01       	movw	r24, r0
    1000:	25 9f       	mul	r18, r21
    1002:	90 0d       	add	r25, r0
    1004:	34 9f       	mul	r19, r20
    1006:	90 0d       	add	r25, r0
    1008:	11 24       	eor	r1, r1
    100a:	e8 0f       	add	r30, r24
    100c:	f9 1f       	adc	r31, r25
    100e:	86 89       	ldd	r24, Z+22	; 0x16
    1010:	8e 7f       	andi	r24, 0xFE	; 254
    1012:	86 8b       	std	Z+22, r24	; 0x16
    1014:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1016:	1f 91       	pop	r17
    1018:	08 95       	ret

0000101a <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 1c 06 	call	0xc38	; 0xc38 <Timebase_DownCounter_SS_Update>
  }
}
    1020:	08 95       	ret

00001022 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1022:	e0 91 ee 01 	lds	r30, 0x01EE
    1026:	f0 91 ef 01 	lds	r31, 0x01EF
    102a:	13 8e       	std	Z+27, r1	; 0x1b
    102c:	14 8e       	std	Z+28, r1	; 0x1c
    102e:	15 8e       	std	Z+29, r1	; 0x1d
    1030:	16 8e       	std	Z+30, r1	; 0x1e
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1032:	17 8a       	std	Z+23, r1	; 0x17
    1034:	10 8e       	std	Z+24, r1	; 0x18
    1036:	11 8e       	std	Z+25, r1	; 0x19
    1038:	12 8e       	std	Z+26, r1	; 0x1a
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    103a:	17 8e       	std	Z+31, r1	; 0x1f
    103c:	10 a2       	std	Z+32, r1	; 0x20
    103e:	11 a2       	std	Z+33, r1	; 0x21
    1040:	12 a2       	std	Z+34, r1	; 0x22
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1042:	86 89       	ldd	r24, Z+22	; 0x16
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1044:	80 7e       	andi	r24, 0xE0	; 224
    1046:	86 8b       	std	Z+22, r24	; 0x16
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1048:	17 a2       	std	Z+39, r1	; 0x27
    104a:	10 a6       	std	Z+40, r1	; 0x28
    104c:	11 a6       	std	Z+41, r1	; 0x29
    104e:	12 a6       	std	Z+42, r1	; 0x2a

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1050:	08 95       	ret

00001052 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    1052:	e0 91 ee 01 	lds	r30, 0x01EE
    1056:	f0 91 ef 01 	lds	r31, 0x01EF
    105a:	85 89       	ldd	r24, Z+21	; 0x15
}
    105c:	08 95       	ret

0000105e <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    105e:	0e 94 11 08 	call	0x1022	; 0x1022 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
  #endif
}
    1062:	08 95       	ret

00001064 <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
    1064:	08 95       	ret

00001066 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    106c:	0e 94 86 00 	call	0x10c	; 0x10c <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    1070:	c8 01       	movw	r24, r16
    1072:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Timebase_Timer_Enable>
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1076:	0e 94 11 08 	call	0x1022	; 0x1022 <Timebase_DownCounter_SS_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1080:	e0 91 ee 01 	lds	r30, 0x01EE
    1084:	f0 91 ef 01 	lds	r31, 0x01EF
    1088:	85 89       	ldd	r24, Z+21	; 0x15
    108a:	83 ff       	sbrs	r24, 3
    108c:	0b c0       	rjmp	.+22     	; 0x10a4 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    108e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1092:	0e 94 0d 08 	call	0x101a	; 0x101a <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1096:	e0 91 ee 01 	lds	r30, 0x01EE
    109a:	f0 91 ef 01 	lds	r31, 0x01EF
    109e:	85 89       	ldd	r24, Z+21	; 0x15
    10a0:	87 7f       	andi	r24, 0xF7	; 247
    10a2:	85 8b       	std	Z+21, r24	; 0x15
    Timebase_Timer_Sync_With_Shadow_Variables();
    Timebase_DownCounter_Update_All();
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    10a4:	e0 91 ee 01 	lds	r30, 0x01EE
    10a8:	f0 91 ef 01 	lds	r31, 0x01EF
    10ac:	14 8a       	std	Z+20, r1	; 0x14
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
    10ae:	08 95       	ret

000010b0 <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    10b0:	e0 91 ee 01 	lds	r30, 0x01EE
    10b4:	f0 91 ef 01 	lds	r31, 0x01EF
    10b8:	86 85       	ldd	r24, Z+14	; 0x0e
    10ba:	97 85       	ldd	r25, Z+15	; 0x0f
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	97 87       	std	Z+15, r25	; 0x0f
    10c0:	86 87       	std	Z+14, r24	; 0x0e
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    10c2:	85 89       	ldd	r24, Z+21	; 0x15
    10c4:	88 60       	ori	r24, 0x08	; 8
    10c6:	85 8b       	std	Z+21, r24	; 0x15
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    10c8:	26 85       	ldd	r18, Z+14	; 0x0e
    10ca:	37 85       	ldd	r19, Z+15	; 0x0f
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	28 17       	cp	r18, r24
    10d2:	39 07       	cpc	r19, r25
    10d4:	68 f0       	brcs	.+26     	; 0x10f0 <Timebase_ISR_Executables+0x40>
    Timebase->Time.SubSecondsShadow = 0;
    10d6:	17 86       	std	Z+15, r1	; 0x0f
    10d8:	16 86       	std	Z+14, r1	; 0x0e
    Timebase->Time.SecondsShadow++;
    10da:	80 89       	ldd	r24, Z+16	; 0x10
    10dc:	91 89       	ldd	r25, Z+17	; 0x11
    10de:	a2 89       	ldd	r26, Z+18	; 0x12
    10e0:	b3 89       	ldd	r27, Z+19	; 0x13
    10e2:	01 96       	adiw	r24, 0x01	; 1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	b1 1d       	adc	r27, r1
    10e8:	80 8b       	std	Z+16, r24	; 0x10
    10ea:	91 8b       	std	Z+17, r25	; 0x11
    10ec:	a2 8b       	std	Z+18, r26	; 0x12
    10ee:	b3 8b       	std	Z+19, r27	; 0x13
    10f0:	08 95       	ret

000010f2 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    10f2:	1f 92       	push	r1
    10f4:	0f 92       	push	r0
    10f6:	0f b6       	in	r0, 0x3f	; 63
    10f8:	0f 92       	push	r0
    10fa:	11 24       	eor	r1, r1
    10fc:	2f 93       	push	r18
    10fe:	3f 93       	push	r19
    1100:	4f 93       	push	r20
    1102:	5f 93       	push	r21
    1104:	6f 93       	push	r22
    1106:	7f 93       	push	r23
    1108:	8f 93       	push	r24
    110a:	9f 93       	push	r25
    110c:	af 93       	push	r26
    110e:	bf 93       	push	r27
    1110:	ef 93       	push	r30
    1112:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1114:	e0 91 ee 01 	lds	r30, 0x01EE
    1118:	f0 91 ef 01 	lds	r31, 0x01EF
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1122:	0e 94 58 08 	call	0x10b0	; 0x10b0 <Timebase_ISR_Executables>
}
    1126:	ff 91       	pop	r31
    1128:	ef 91       	pop	r30
    112a:	bf 91       	pop	r27
    112c:	af 91       	pop	r26
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	7f 91       	pop	r23
    1134:	6f 91       	pop	r22
    1136:	5f 91       	pop	r21
    1138:	4f 91       	pop	r20
    113a:	3f 91       	pop	r19
    113c:	2f 91       	pop	r18
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
    1148:	08 95       	ret

0000114a <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    114a:	10 92 96 01 	sts	0x0196, r1
    114e:	e7 e9       	ldi	r30, 0x97	; 151
    1150:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    1152:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	ef 39       	cpi	r30, 0x9F	; 159
    1158:	f8 07       	cpc	r31, r24
    115a:	d9 f7       	brne	.-10     	; 0x1152 <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    115c:	10 82       	st	Z, r1
    
  UART.LastRxByte = UART_NULL;
    115e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    1160:	80 e4       	ldi	r24, 0x40	; 64
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	90 93 e2 01 	sts	0x01E2, r25
    1168:	80 93 e1 01 	sts	0x01E1, r24
  UART.BufIndex = 0;
    116c:	10 92 e4 01 	sts	0x01E4, r1
    1170:	10 92 e3 01 	sts	0x01E3, r1
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    1178:	ea 56       	subi	r30, 0x6A	; 106
    117a:	fe 4f       	sbci	r31, 0xFE	; 254
    117c:	13 86       	std	Z+11, r1	; 0x0b
  UART.InputNumDigits = UART_NULL;
    
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    117e:	2f 5f       	subi	r18, 0xFF	; 255
    1180:	80 91 e1 01 	lds	r24, 0x01E1
    1184:	90 91 e2 01 	lds	r25, 0x01E2
    1188:	e2 2f       	mov	r30, r18
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	e8 17       	cp	r30, r24
    118e:	f9 07       	cpc	r31, r25
    1190:	98 f3       	brcs	.-26     	; 0x1178 <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
    1192:	08 95       	ret

00001194 <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1194:	10 92 e8 01 	sts	0x01E8, r1
    1198:	10 92 e7 01 	sts	0x01E7, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    119c:	10 92 ea 01 	sts	0x01EA, r1
    11a0:	10 92 e9 01 	sts	0x01E9, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    11a4:	10 92 eb 01 	sts	0x01EB, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    11a8:	10 92 ec 01 	sts	0x01EC, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 ed 01 	sts	0x01ED, r24
}
    11b2:	08 95       	ret

000011b4 <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    11b4:	08 95       	ret

000011b6 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    11b6:	08 95       	ret

000011b8 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    11b8:	9b 01       	movw	r18, r22
    11ba:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    11bc:	60 e6       	ldi	r22, 0x60	; 96
    11be:	73 ee       	ldi	r23, 0xE3	; 227
    11c0:	86 e1       	ldi	r24, 0x16	; 22
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodsi4>
    11c8:	21 50       	subi	r18, 0x01	; 1
    11ca:	30 40       	sbci	r19, 0x00	; 0
    11cc:	40 40       	sbci	r20, 0x00	; 0
    11ce:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    11d0:	e0 ec       	ldi	r30, 0xC0	; 192
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    11da:	bb 27       	eor	r27, r27
    11dc:	a5 2f       	mov	r26, r21
    11de:	94 2f       	mov	r25, r20
    11e0:	83 2f       	mov	r24, r19
    11e2:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    11e6:	20 93 c4 00 	sts	0x00C4, r18
}
    11ea:	08 95       	ret

000011ec <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    11ec:	e1 ec       	ldi	r30, 0xC1	; 193
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	88 60       	ori	r24, 0x08	; 8
    11f4:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	80 93 c2 00 	sts	0x00C2, r24
}
    11fc:	08 95       	ret

000011fe <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    11fe:	e1 ec       	ldi	r30, 0xC1	; 193
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	80 61       	ori	r24, 0x10	; 16
    1206:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1208:	86 e0       	ldi	r24, 0x06	; 6
    120a:	80 93 c2 00 	sts	0x00C2, r24
}
    120e:	08 95       	ret

00001210 <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1210:	e1 ec       	ldi	r30, 0xC1	; 193
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	80 68       	ori	r24, 0x80	; 128
    1218:	80 83       	st	Z, r24
  sei();
    121a:	78 94       	sei
}
    121c:	08 95       	ret

0000121e <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    121e:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1220:	80 91 c0 00 	lds	r24, 0x00C0
    1224:	85 ff       	sbrs	r24, 5
    1226:	fc cf       	rjmp	.-8      	; 0x1220 <UART_Tx_Byte+0x2>
  UDR0 = val;
    1228:	90 93 c6 00 	sts	0x00C6, r25
}
    122c:	08 95       	ret

0000122e <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    1238:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    123a:	80 91 c0 00 	lds	r24, 0x00C0
    123e:	84 ff       	sbrs	r24, 4
    1240:	05 c0       	rjmp	.+10     	; 0x124c <UART_Rx_Byte+0x1e>
    val = UDR0;
    1242:	80 91 c6 00 	lds	r24, 0x00C6
    1246:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	08 c0       	rjmp	.+16     	; 0x125c <UART_Rx_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    124c:	80 91 c0 00 	lds	r24, 0x00C0
    1250:	83 ff       	sbrs	r24, 3
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <UART_Rx_Byte+0x34>
    val = UDR0;
    1254:	80 91 c6 00 	lds	r24, 0x00C6
    1258:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	80 93 96 01 	sts	0x0196, r24
    1260:	05 c0       	rjmp	.+10     	; 0x126c <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    1262:	80 91 c6 00 	lds	r24, 0x00C6
    1266:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
    1268:	10 92 96 01 	sts	0x0196, r1
  }
  return val;
    126c:	89 81       	ldd	r24, Y+1	; 0x01
}
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1276:	10 92 e5 01 	sts	0x01E5, r1
  UART.Timer.ResetVal = UART_NULL;
    127a:	10 92 e6 01 	sts	0x01E6, r1
}
    127e:	08 95       	ret

00001280 <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
    1280:	84 e0       	ldi	r24, 0x04	; 4
    1282:	80 93 e6 01 	sts	0x01E6, r24
  UART.Timer.ResetVal = 0xFF - temp1;
    1286:	8b ef       	ldi	r24, 0xFB	; 251
    1288:	80 93 e6 01 	sts	0x01E6, r24
  
  ASSR   = 0x00;
    128c:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
    1290:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
    1294:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
    1298:	e0 e7       	ldi	r30, 0x70	; 112
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	10 82       	st	Z, r1
  TCNT2  = 0x00;
    129e:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	80 83       	st	Z, r24
  sei();
    12aa:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
    12ac:	08 95       	ret

000012ae <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    12ae:	87 e0       	ldi	r24, 0x07	; 7
    12b0:	80 93 b1 00 	sts	0x00B1, r24
}
    12b4:	08 95       	ret

000012b6 <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    12b6:	10 92 b1 00 	sts	0x00B1, r1
}
    12ba:	08 95       	ret

000012bc <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    12bc:	80 91 e5 01 	lds	r24, 0x01E5
}
    12c0:	08 95       	ret

000012c2 <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
    12c2:	80 91 b2 00 	lds	r24, 0x00B2
}
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	08 95       	ret

000012ca <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    12ca:	80 91 e6 01 	lds	r24, 0x01E6
    12ce:	80 93 b2 00 	sts	0x00B2, r24
}
    12d2:	08 95       	ret

000012d4 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    12d4:	ac 01       	movw	r20, r24
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	0c c0       	rjmp	.+24     	; 0x12f6 <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    12de:	fa 01       	movw	r30, r20
    12e0:	e2 0f       	add	r30, r18
    12e2:	f3 1f       	adc	r31, r19
    12e4:	e0 81       	ld	r30, Z
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    12e6:	80 91 c0 00 	lds	r24, 0x00C0
    12ea:	85 ff       	sbrs	r24, 5
    12ec:	fc cf       	rjmp	.-8      	; 0x12e6 <UART_Tx_Buf+0x12>
  UDR0 = val;
    12ee:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    12f2:	2f 5f       	subi	r18, 0xFF	; 255
    12f4:	3f 4f       	sbci	r19, 0xFF	; 255
    12f6:	26 17       	cp	r18, r22
    12f8:	37 07       	cpc	r19, r23
    12fa:	88 f3       	brcs	.-30     	; 0x12de <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    12fc:	08 95       	ret

000012fe <UART_Tx_NL>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    12fe:	80 91 c0 00 	lds	r24, 0x00C0
    1302:	85 ff       	sbrs	r24, 5
    1304:	fc cf       	rjmp	.-8      	; 0x12fe <UART_Tx_NL>
  UDR0 = val;
    1306:	8d e0       	ldi	r24, 0x0D	; 13
    1308:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    130c:	80 91 c0 00 	lds	r24, 0x00C0
    1310:	85 ff       	sbrs	r24, 5
    1312:	fc cf       	rjmp	.-8      	; 0x130c <UART_Tx_NL+0xe>
  UDR0 = val;
    1314:	8a e0       	ldi	r24, 0x0A	; 10
    1316:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    131a:	08 95       	ret

0000131c <UART_Tx_SP>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    131c:	80 91 c0 00 	lds	r24, 0x00C0
    1320:	85 ff       	sbrs	r24, 5
    1322:	fc cf       	rjmp	.-8      	; 0x131c <UART_Tx_SP>
  UDR0 = val;
    1324:	80 e2       	ldi	r24, 0x20	; 32
    1326:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    132a:	08 95       	ret

0000132c <UART_Tx_CM>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    132c:	80 91 c0 00 	lds	r24, 0x00C0
    1330:	85 ff       	sbrs	r24, 5
    1332:	fc cf       	rjmp	.-8      	; 0x132c <UART_Tx_CM>
  UDR0 = val;
    1334:	8c e2       	ldi	r24, 0x2C	; 44
    1336:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    133a:	08 95       	ret

0000133c <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    133c:	ac 01       	movw	r20, r24
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <UART_Tx_Text+0x14>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1342:	80 91 c0 00 	lds	r24, 0x00C0
    1346:	85 ff       	sbrs	r24, 5
    1348:	fc cf       	rjmp	.-8      	; 0x1342 <UART_Tx_Text+0x6>
  UDR0 = val;
    134a:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    134e:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    1350:	fa 01       	movw	r30, r20
    1352:	e2 0f       	add	r30, r18
    1354:	f1 1d       	adc	r31, r1
    1356:	e0 81       	ld	r30, Z
    1358:	ee 23       	and	r30, r30
    135a:	99 f7       	brne	.-26     	; 0x1342 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    135c:	08 95       	ret

0000135e <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    135e:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UART_Tx_NL();
    1362:	0e 94 7f 09 	call	0x12fe	; 0x12fe <UART_Tx_NL>
}
    1366:	08 95       	ret

00001368 <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    1368:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    136c:	80 91 c0 00 	lds	r24, 0x00C0
    1370:	85 ff       	sbrs	r24, 5
    1372:	fc cf       	rjmp	.-8      	; 0x136c <UART_Tx_Text_SP+0x4>
  UDR0 = val;
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    137a:	08 95       	ret

0000137c <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    137c:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1380:	80 91 c0 00 	lds	r24, 0x00C0
    1384:	85 ff       	sbrs	r24, 5
    1386:	fc cf       	rjmp	.-8      	; 0x1380 <UART_Tx_Text_CM+0x4>
  UDR0 = val;
    1388:	8c e2       	ldi	r24, 0x2C	; 44
    138a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    138e:	08 95       	ret

00001390 <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    1390:	bf 92       	push	r11
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	6b 01       	movw	r12, r22
    13a0:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    13a2:	61 15       	cp	r22, r1
    13a4:	71 05       	cpc	r23, r1
    13a6:	81 05       	cpc	r24, r1
    13a8:	91 05       	cpc	r25, r1
    13aa:	31 f4       	brne	.+12     	; 0x13b8 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    13ac:	10 92 97 01 	sts	0x0197, r1
    UART.InputNumDigits = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 9f 01 	sts	0x019F, r24
    13b6:	23 c0       	rjmp	.+70     	; 0x13fe <UART_Determine_Digit_Numbers+0x6e>
    13b8:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    13ba:	0b 2d       	mov	r16, r11
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	0a 56       	subi	r16, 0x6A	; 106
    13c0:	1e 4f       	sbci	r17, 0xFE	; 254
    13c2:	c7 01       	movw	r24, r14
    13c4:	b6 01       	movw	r22, r12
    13c6:	2a e0       	ldi	r18, 0x0A	; 10
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodsi4>
    13d2:	f8 01       	movw	r30, r16
    13d4:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    13d6:	c7 01       	movw	r24, r14
    13d8:	b6 01       	movw	r22, r12
    13da:	2a e0       	ldi	r18, 0x0A	; 10
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e0       	ldi	r20, 0x00	; 0
    13e0:	50 e0       	ldi	r21, 0x00	; 0
    13e2:	0e 94 14 11 	call	0x2228	; 0x2228 <__udivmodsi4>
    13e6:	c9 01       	movw	r24, r18
    13e8:	da 01       	movw	r26, r20
    13ea:	6c 01       	movw	r12, r24
    13ec:	7d 01       	movw	r14, r26
      i++;
    13ee:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    13f0:	c1 14       	cp	r12, r1
    13f2:	d1 04       	cpc	r13, r1
    13f4:	e1 04       	cpc	r14, r1
    13f6:	f1 04       	cpc	r15, r1
    13f8:	01 f7       	brne	.-64     	; 0x13ba <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    13fa:	b0 92 9f 01 	sts	0x019F, r11
  }
}
    13fe:	1f 91       	pop	r17
    1400:	0f 91       	pop	r16
    1402:	ff 90       	pop	r15
    1404:	ef 90       	pop	r14
    1406:	df 90       	pop	r13
    1408:	cf 90       	pop	r12
    140a:	bf 90       	pop	r11
    140c:	08 95       	ret

0000140e <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    140e:	e0 91 9f 01 	lds	r30, 0x019F
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1414:	2e 2f       	mov	r18, r30
    1416:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    1418:	e2 2f       	mov	r30, r18
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	ea 56       	subi	r30, 0x6A	; 106
    141e:	fe 4f       	sbci	r31, 0xFE	; 254
    1420:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1422:	80 91 c0 00 	lds	r24, 0x00C0
    1426:	85 ff       	sbrs	r24, 5
    1428:	fc cf       	rjmp	.-8      	; 0x1422 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    142a:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    142c:	90 93 c6 00 	sts	0x00C6, r25
    1430:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1432:	ee 23       	and	r30, r30
    1434:	79 f7       	brne	.-34     	; 0x1414 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    1436:	08 95       	ret

00001438 <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    1438:	9b 01       	movw	r18, r22
    143a:	ac 01       	movw	r20, r24
  if(num < 0){
    143c:	97 ff       	sbrs	r25, 7
    143e:	0e c0       	rjmp	.+28     	; 0x145c <UART_Tx_Number+0x24>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1440:	80 91 c0 00 	lds	r24, 0x00C0
    1444:	85 ff       	sbrs	r24, 5
    1446:	fc cf       	rjmp	.-8      	; 0x1440 <UART_Tx_Number+0x8>
  UDR0 = val;
    1448:	8d e2       	ldi	r24, 0x2D	; 45
    144a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    144e:	50 95       	com	r21
    1450:	40 95       	com	r20
    1452:	30 95       	com	r19
    1454:	21 95       	neg	r18
    1456:	3f 4f       	sbci	r19, 0xFF	; 255
    1458:	4f 4f       	sbci	r20, 0xFF	; 255
    145a:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    145c:	ca 01       	movw	r24, r20
    145e:	b9 01       	movw	r22, r18
    1460:	0e 94 c8 09 	call	0x1390	; 0x1390 <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    1464:	0e 94 07 0a 	call	0x140e	; 0x140e <UART_Tx_Number_Digits>
}
    1468:	08 95       	ret

0000146a <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ab 01       	movw	r20, r22
    1472:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    1474:	4f 3f       	cpi	r20, 0xFF	; 255
    1476:	51 05       	cpc	r21, r1
    1478:	61 05       	cpc	r22, r1
    147a:	71 05       	cpc	r23, r1
    147c:	09 f0       	breq	.+2      	; 0x1480 <UART_Tx_Number_Hex+0x16>
    147e:	28 f4       	brcc	.+10     	; 0x148a <UART_Tx_Number_Hex+0x20>
    1480:	e8 e0       	ldi	r30, 0x08	; 8
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	c2 e0       	ldi	r28, 0x02	; 2
    1486:	d0 e0       	ldi	r29, 0x00	; 0
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    148a:	40 30       	cpi	r20, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	58 07       	cpc	r21, r24
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	68 07       	cpc	r22, r24
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	78 07       	cpc	r23, r24
    1498:	28 f0       	brcs	.+10     	; 0x14a4 <UART_Tx_Number_Hex+0x3a>
    149a:	e0 e2       	ldi	r30, 0x20	; 32
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	c8 e0       	ldi	r28, 0x08	; 8
    14a0:	d0 e0       	ldi	r29, 0x00	; 0
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <UART_Tx_Number_Hex+0x42>
    14a4:	e0 e1       	ldi	r30, 0x10	; 16
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	c4 e0       	ldi	r28, 0x04	; 4
    14aa:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14ac:	80 91 c0 00 	lds	r24, 0x00C0
    14b0:	85 ff       	sbrs	r24, 5
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <UART_Tx_Number_Hex+0x42>
  UDR0 = val;
    14b4:	80 e3       	ldi	r24, 0x30	; 48
    14b6:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14ba:	80 91 c0 00 	lds	r24, 0x00C0
    14be:	85 ff       	sbrs	r24, 5
    14c0:	fc cf       	rjmp	.-8      	; 0x14ba <UART_Tx_Number_Hex+0x50>
  UDR0 = val;
    14c2:	88 e7       	ldi	r24, 0x78	; 120
    14c4:	80 93 c6 00 	sts	0x00C6, r24
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	1f c0       	rjmp	.+62     	; 0x150a <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    14cc:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    14ce:	db 01       	movw	r26, r22
    14d0:	ca 01       	movw	r24, r20
    14d2:	0e 2e       	mov	r0, r30
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <UART_Tx_Number_Hex+0x74>
    14d6:	b6 95       	lsr	r27
    14d8:	a7 95       	ror	r26
    14da:	97 95       	ror	r25
    14dc:	87 95       	ror	r24
    14de:	0a 94       	dec	r0
    14e0:	d2 f7       	brpl	.-12     	; 0x14d6 <UART_Tx_Number_Hex+0x6c>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	8f 70       	andi	r24, 0x0F	; 15
    14e6:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    14e8:	8a 30       	cpi	r24, 0x0A	; 10
    14ea:	91 05       	cpc	r25, r1
    14ec:	20 f0       	brcs	.+8      	; 0x14f6 <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    14ee:	9c 01       	movw	r18, r24
    14f0:	29 5c       	subi	r18, 0xC9	; 201
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	03 c0       	rjmp	.+6      	; 0x14fc <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    14f6:	9c 01       	movw	r18, r24
    14f8:	20 5d       	subi	r18, 0xD0	; 208
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    14fc:	80 91 c0 00 	lds	r24, 0x00C0
    1500:	85 ff       	sbrs	r24, 5
    1502:	fc cf       	rjmp	.-8      	; 0x14fc <UART_Tx_Number_Hex+0x92>
  UDR0 = val;
    1504:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    1508:	1f 5f       	subi	r17, 0xFF	; 255
    150a:	81 2f       	mov	r24, r17
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	8c 17       	cp	r24, r28
    1510:	9d 07       	cpc	r25, r29
    1512:	e0 f2       	brcs	.-72     	; 0x14cc <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	08 95       	ret

0000151c <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    151c:	cf 92       	push	r12
    151e:	df 92       	push	r13
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	ab 01       	movw	r20, r22
    152e:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    1530:	4f 3f       	cpi	r20, 0xFF	; 255
    1532:	51 05       	cpc	r21, r1
    1534:	61 05       	cpc	r22, r1
    1536:	71 05       	cpc	r23, r1
    1538:	09 f0       	breq	.+2      	; 0x153c <UART_Tx_Number_Bin+0x20>
    153a:	10 f4       	brcc	.+4      	; 0x1540 <UART_Tx_Number_Bin+0x24>
    153c:	97 e0       	ldi	r25, 0x07	; 7
    153e:	0b c0       	rjmp	.+22     	; 0x1556 <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    1540:	40 30       	cpi	r20, 0x00	; 0
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	58 07       	cpc	r21, r24
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	68 07       	cpc	r22, r24
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	78 07       	cpc	r23, r24
    154e:	10 f0       	brcs	.+4      	; 0x1554 <UART_Tx_Number_Bin+0x38>
    1550:	9f e1       	ldi	r25, 0x1F	; 31
    1552:	01 c0       	rjmp	.+2      	; 0x1556 <UART_Tx_Number_Bin+0x3a>
    1554:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1556:	80 91 c0 00 	lds	r24, 0x00C0
    155a:	85 ff       	sbrs	r24, 5
    155c:	fc cf       	rjmp	.-8      	; 0x1556 <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1564:	80 91 c0 00 	lds	r24, 0x00C0
    1568:	85 ff       	sbrs	r24, 5
    156a:	fc cf       	rjmp	.-8      	; 0x1564 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;
    156c:	82 e6       	ldi	r24, 0x62	; 98
    156e:	80 93 c6 00 	sts	0x00C6, r24
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    1576:	e9 2f       	mov	r30, r25
    1578:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    157a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    157c:	11 e3       	ldi	r17, 0x31	; 49
    157e:	ef 01       	movw	r28, r30
    1580:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1582:	cf 01       	movw	r24, r30
    1584:	82 1b       	sub	r24, r18
    1586:	93 0b       	sbc	r25, r19
    1588:	6a 01       	movw	r12, r20
    158a:	7b 01       	movw	r14, r22
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <UART_Tx_Number_Bin+0x7a>
    158e:	f6 94       	lsr	r15
    1590:	e7 94       	ror	r14
    1592:	d7 94       	ror	r13
    1594:	c7 94       	ror	r12
    1596:	8a 95       	dec	r24
    1598:	d2 f7       	brpl	.-12     	; 0x158e <UART_Tx_Number_Bin+0x72>
    159a:	d7 01       	movw	r26, r14
    159c:	c6 01       	movw	r24, r12
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	90 70       	andi	r25, 0x00	; 0
    15a2:	89 2b       	or	r24, r25
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <UART_Tx_Number_Bin+0x98>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15a6:	80 91 c0 00 	lds	r24, 0x00C0
    15aa:	85 ff       	sbrs	r24, 5
    15ac:	fc cf       	rjmp	.-8      	; 0x15a6 <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;
    15ae:	10 93 c6 00 	sts	0x00C6, r17
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <UART_Tx_Number_Bin+0xa4>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15b4:	80 91 c0 00 	lds	r24, 0x00C0
    15b8:	85 ff       	sbrs	r24, 5
    15ba:	fc cf       	rjmp	.-8      	; 0x15b4 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;
    15bc:	00 93 c6 00 	sts	0x00C6, r16
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    15c4:	2c 17       	cp	r18, r28
    15c6:	3d 07       	cpc	r19, r29
    15c8:	e1 f6       	brne	.-72     	; 0x1582 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	ff 90       	pop	r15
    15d4:	ef 90       	pop	r14
    15d6:	df 90       	pop	r13
    15d8:	cf 90       	pop	r12
    15da:	08 95       	ret

000015dc <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    15dc:	0e 94 1c 0a 	call	0x1438	; 0x1438 <UART_Tx_Number>
  UART_Tx_NL();
    15e0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <UART_Tx_NL>
}
    15e4:	08 95       	ret

000015e6 <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    15e6:	0e 94 1c 0a 	call	0x1438	; 0x1438 <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15ea:	80 91 c0 00 	lds	r24, 0x00C0
    15ee:	85 ff       	sbrs	r24, 5
    15f0:	fc cf       	rjmp	.-8      	; 0x15ea <UART_Tx_Number_SP+0x4>
  UDR0 = val;
    15f2:	80 e2       	ldi	r24, 0x20	; 32
    15f4:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    15f8:	08 95       	ret

000015fa <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    15fa:	0e 94 1c 0a 	call	0x1438	; 0x1438 <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    15fe:	80 91 c0 00 	lds	r24, 0x00C0
    1602:	85 ff       	sbrs	r24, 5
    1604:	fc cf       	rjmp	.-8      	; 0x15fe <UART_Tx_Number_CM+0x4>
  UDR0 = val;
    1606:	8c e2       	ldi	r24, 0x2C	; 44
    1608:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    160c:	08 95       	ret

0000160e <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    160e:	0e 94 35 0a 	call	0x146a	; 0x146a <UART_Tx_Number_Hex>
  UART_Tx_NL();
    1612:	0e 94 7f 09 	call	0x12fe	; 0x12fe <UART_Tx_NL>
}
    1616:	08 95       	ret

00001618 <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    1618:	0e 94 35 0a 	call	0x146a	; 0x146a <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    161c:	80 91 c0 00 	lds	r24, 0x00C0
    1620:	85 ff       	sbrs	r24, 5
    1622:	fc cf       	rjmp	.-8      	; 0x161c <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;
    1624:	80 e2       	ldi	r24, 0x20	; 32
    1626:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    162a:	08 95       	ret

0000162c <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    162c:	0e 94 35 0a 	call	0x146a	; 0x146a <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1630:	80 91 c0 00 	lds	r24, 0x00C0
    1634:	85 ff       	sbrs	r24, 5
    1636:	fc cf       	rjmp	.-8      	; 0x1630 <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;
    1638:	8c e2       	ldi	r24, 0x2C	; 44
    163a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    163e:	08 95       	ret

00001640 <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    1640:	0e 94 8e 0a 	call	0x151c	; 0x151c <UART_Tx_Number_Bin>
  UART_Tx_NL();
    1644:	0e 94 7f 09 	call	0x12fe	; 0x12fe <UART_Tx_NL>
}
    1648:	08 95       	ret

0000164a <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    164a:	0e 94 8e 0a 	call	0x151c	; 0x151c <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    164e:	80 91 c0 00 	lds	r24, 0x00C0
    1652:	85 ff       	sbrs	r24, 5
    1654:	fc cf       	rjmp	.-8      	; 0x164e <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;
    1656:	80 e2       	ldi	r24, 0x20	; 32
    1658:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    165c:	08 95       	ret

0000165e <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    165e:	0e 94 8e 0a 	call	0x151c	; 0x151c <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1662:	80 91 c0 00 	lds	r24, 0x00C0
    1666:	85 ff       	sbrs	r24, 5
    1668:	fc cf       	rjmp	.-8      	; 0x1662 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;
    166a:	8c e2       	ldi	r24, 0x2C	; 44
    166c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    1670:	08 95       	ret

00001672 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    1672:	ef 92       	push	r14
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	7a 01       	movw	r14, r20
    167c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    167e:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1682:	80 91 c0 00 	lds	r24, 0x00C0
    1686:	85 ff       	sbrs	r24, 5
    1688:	fc cf       	rjmp	.-8      	; 0x1682 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;
    168a:	80 e2       	ldi	r24, 0x20	; 32
    168c:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    1690:	c8 01       	movw	r24, r16
    1692:	b7 01       	movw	r22, r14
    1694:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <UART_Tx_Number_NL>
}
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	ff 90       	pop	r15
    169e:	ef 90       	pop	r14
    16a0:	08 95       	ret

000016a2 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    16a2:	ef 92       	push	r14
    16a4:	ff 92       	push	r15
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	7a 01       	movw	r14, r20
    16ac:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    16ae:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16b2:	80 91 c0 00 	lds	r24, 0x00C0
    16b6:	85 ff       	sbrs	r24, 5
    16b8:	fc cf       	rjmp	.-8      	; 0x16b2 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;
    16ba:	80 e2       	ldi	r24, 0x20	; 32
    16bc:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    16c0:	c8 01       	movw	r24, r16
    16c2:	b7 01       	movw	r22, r14
    16c4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <UART_Tx_Number_SP>
}
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	ff 90       	pop	r15
    16ce:	ef 90       	pop	r14
    16d0:	08 95       	ret

000016d2 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	7a 01       	movw	r14, r20
    16dc:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    16de:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    16e2:	80 91 c0 00 	lds	r24, 0x00C0
    16e6:	85 ff       	sbrs	r24, 5
    16e8:	fc cf       	rjmp	.-8      	; 0x16e2 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;
    16ea:	80 e2       	ldi	r24, 0x20	; 32
    16ec:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    16f0:	c8 01       	movw	r24, r16
    16f2:	b7 01       	movw	r22, r14
    16f4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <UART_Tx_Number_CM>
}
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	08 95       	ret

00001702 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	7a 01       	movw	r14, r20
    170c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    170e:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1712:	80 91 c0 00 	lds	r24, 0x00C0
    1716:	85 ff       	sbrs	r24, 5
    1718:	fc cf       	rjmp	.-8      	; 0x1712 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;
    171a:	80 e2       	ldi	r24, 0x20	; 32
    171c:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    1720:	c8 01       	movw	r24, r16
    1722:	b7 01       	movw	r22, r14
    1724:	0e 94 07 0b 	call	0x160e	; 0x160e <UART_Tx_Number_Hex_NL>
}
    1728:	1f 91       	pop	r17
    172a:	0f 91       	pop	r16
    172c:	ff 90       	pop	r15
    172e:	ef 90       	pop	r14
    1730:	08 95       	ret

00001732 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	0f 93       	push	r16
    1738:	1f 93       	push	r17
    173a:	7a 01       	movw	r14, r20
    173c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    173e:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1742:	80 91 c0 00 	lds	r24, 0x00C0
    1746:	85 ff       	sbrs	r24, 5
    1748:	fc cf       	rjmp	.-8      	; 0x1742 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    1750:	c8 01       	movw	r24, r16
    1752:	b7 01       	movw	r22, r14
    1754:	0e 94 0c 0b 	call	0x1618	; 0x1618 <UART_Tx_Number_Hex_SP>
}
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	ff 90       	pop	r15
    175e:	ef 90       	pop	r14
    1760:	08 95       	ret

00001762 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    1762:	ef 92       	push	r14
    1764:	ff 92       	push	r15
    1766:	0f 93       	push	r16
    1768:	1f 93       	push	r17
    176a:	7a 01       	movw	r14, r20
    176c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    176e:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1772:	80 91 c0 00 	lds	r24, 0x00C0
    1776:	85 ff       	sbrs	r24, 5
    1778:	fc cf       	rjmp	.-8      	; 0x1772 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    1780:	c8 01       	movw	r24, r16
    1782:	b7 01       	movw	r22, r14
    1784:	0e 94 16 0b 	call	0x162c	; 0x162c <UART_Tx_Number_Hex_CM>
}
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	08 95       	ret

00001792 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	7a 01       	movw	r14, r20
    179c:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    179e:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17a2:	80 91 c0 00 	lds	r24, 0x00C0
    17a6:	85 ff       	sbrs	r24, 5
    17a8:	fc cf       	rjmp	.-8      	; 0x17a2 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;
    17aa:	80 e2       	ldi	r24, 0x20	; 32
    17ac:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    17b0:	c8 01       	movw	r24, r16
    17b2:	b7 01       	movw	r22, r14
    17b4:	0e 94 20 0b 	call	0x1640	; 0x1640 <UART_Tx_Number_Bin_NL>
}
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	08 95       	ret

000017c2 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	7a 01       	movw	r14, r20
    17cc:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    17ce:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    17d2:	80 91 c0 00 	lds	r24, 0x00C0
    17d6:	85 ff       	sbrs	r24, 5
    17d8:	fc cf       	rjmp	.-8      	; 0x17d2 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;
    17da:	80 e2       	ldi	r24, 0x20	; 32
    17dc:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    17e0:	c8 01       	movw	r24, r16
    17e2:	b7 01       	movw	r22, r14
    17e4:	0e 94 25 0b 	call	0x164a	; 0x164a <UART_Tx_Number_Bin_SP>
}
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	ff 90       	pop	r15
    17ee:	ef 90       	pop	r14
    17f0:	08 95       	ret

000017f2 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	7a 01       	movw	r14, r20
    17fc:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    17fe:	0e 94 9e 09 	call	0x133c	; 0x133c <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1802:	80 91 c0 00 	lds	r24, 0x00C0
    1806:	85 ff       	sbrs	r24, 5
    1808:	fc cf       	rjmp	.-8      	; 0x1802 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;
    180a:	80 e2       	ldi	r24, 0x20	; 32
    180c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    1810:	c8 01       	movw	r24, r16
    1812:	b7 01       	movw	r22, r14
    1814:	0e 94 2f 0b 	call	0x165e	; 0x165e <UART_Tx_Number_Bin_CM>
}
    1818:	1f 91       	pop	r17
    181a:	0f 91       	pop	r16
    181c:	ff 90       	pop	r15
    181e:	ef 90       	pop	r14
    1820:	08 95       	ret

00001822 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1826:	fc 01       	movw	r30, r24
    1828:	ea 56       	subi	r30, 0x6A	; 106
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	13 86       	std	Z+11, r1	; 0x0b
    182e:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1830:	80 34       	cpi	r24, 0x40	; 64
    1832:	91 05       	cpc	r25, r1
    1834:	c1 f7       	brne	.-16     	; 0x1826 <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1836:	10 92 e4 01 	sts	0x01E4, r1
    183a:	10 92 e3 01 	sts	0x01E3, r1
}
    183e:	08 95       	ret

00001840 <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1840:	fc 01       	movw	r30, r24
    1842:	ea 56       	subi	r30, 0x6A	; 106
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	83 85       	ldd	r24, Z+11	; 0x0b
}
    1848:	08 95       	ret

0000184a <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    184a:	80 91 e3 01 	lds	r24, 0x01E3
    184e:	90 91 e4 01 	lds	r25, 0x01E4
}
    1852:	08 95       	ret

00001854 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
    1854:	80 91 ec 01 	lds	r24, 0x01EC
}
    1858:	08 95       	ret

0000185a <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    185a:	80 91 e3 01 	lds	r24, 0x01E3
    185e:	90 91 e4 01 	lds	r25, 0x01E4
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
    1862:	08 95       	ret

00001864 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
    1864:	20 91 e7 01 	lds	r18, 0x01E7
    1868:	30 91 e8 01 	lds	r19, 0x01E8
}
    186c:	c9 01       	movw	r24, r18
    186e:	08 95       	ret

00001870 <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
    1870:	20 91 e9 01 	lds	r18, 0x01E9
    1874:	30 91 ea 01 	lds	r19, 0x01EA
}
    1878:	c9 01       	movw	r24, r18
    187a:	08 95       	ret

0000187c <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
    187c:	80 91 eb 01 	lds	r24, 0x01EB
}
    1880:	08 95       	ret

00001882 <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
    1882:	80 91 ed 01 	lds	r24, 0x01ED
}
    1886:	08 95       	ret

00001888 <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    1888:	10 92 ec 01 	sts	0x01EC, r1
}
    188c:	08 95       	ret

0000188e <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1892:	fc 01       	movw	r30, r24
    1894:	ea 56       	subi	r30, 0x6A	; 106
    1896:	fe 4f       	sbci	r31, 0xFE	; 254
    1898:	13 86       	std	Z+11, r1	; 0x0b
    189a:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    189c:	80 34       	cpi	r24, 0x40	; 64
    189e:	91 05       	cpc	r25, r1
    18a0:	c1 f7       	brne	.-16     	; 0x1892 <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    18a2:	10 92 e4 01 	sts	0x01E4, r1
    18a6:	10 92 e3 01 	sts	0x01E3, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	80 93 ed 01 	sts	0x01ED, r24
}
    18b0:	08 95       	ret

000018b2 <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
    18b2:	ac 01       	movw	r20, r24
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	0a c0       	rjmp	.+20     	; 0x18ce <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    18ba:	f9 01       	movw	r30, r18
    18bc:	ea 56       	subi	r30, 0x6A	; 106
    18be:	fe 4f       	sbci	r31, 0xFE	; 254
    18c0:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
    18c2:	fa 01       	movw	r30, r20
    18c4:	e2 0f       	add	r30, r18
    18c6:	f3 1f       	adc	r31, r19
    18c8:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    18ca:	2f 5f       	subi	r18, 0xFF	; 255
    18cc:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    18ce:	80 91 e3 01 	lds	r24, 0x01E3
    18d2:	90 91 e4 01 	lds	r25, 0x01E4
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	28 17       	cp	r18, r24
    18da:	39 07       	cpc	r19, r25
    18dc:	70 f3       	brcs	.-36     	; 0x18ba <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
    18de:	08 95       	ret

000018e0 <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    18e6:	f9 01       	movw	r30, r18
    18e8:	ea 56       	subi	r30, 0x6A	; 106
    18ea:	fe 4f       	sbci	r31, 0xFE	; 254
    18ec:	93 85       	ldd	r25, Z+11	; 0x0b
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    18ee:	80 91 c0 00 	lds	r24, 0x00C0
    18f2:	85 ff       	sbrs	r24, 5
    18f4:	fc cf       	rjmp	.-8      	; 0x18ee <UART_Data_Print_Buf+0xe>
  UDR0 = val;
    18f6:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    18fa:	2f 5f       	subi	r18, 0xFF	; 255
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    18fe:	80 91 e3 01 	lds	r24, 0x01E3
    1902:	90 91 e4 01 	lds	r25, 0x01E4
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	28 17       	cp	r18, r24
    190a:	39 07       	cpc	r19, r25
    190c:	60 f3       	brcs	.-40     	; 0x18e6 <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
    190e:	0e 94 7f 09 	call	0x12fe	; 0x12fe <UART_Tx_NL>
}
    1912:	08 95       	ret

00001914 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
    1914:	80 91 96 01 	lds	r24, 0x0196
}
    1918:	08 95       	ret

0000191a <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
    191a:	10 92 96 01 	sts	0x0196, r1
}
    191e:	08 95       	ret

00001920 <UART_ISR_Handler>:


/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    1920:	0e 94 17 09 	call	0x122e	; 0x122e <UART_Rx_Byte>
    1924:	80 93 a0 01 	sts	0x01A0, r24
  if(UART.Error == 0x00){
    1928:	80 91 96 01 	lds	r24, 0x0196
    192c:	88 23       	and	r24, r24
    192e:	11 f5       	brne	.+68     	; 0x1974 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    1930:	e0 91 e3 01 	lds	r30, 0x01E3
    1934:	f0 91 e4 01 	lds	r31, 0x01E4
    1938:	80 91 a0 01 	lds	r24, 0x01A0
    193c:	ea 56       	subi	r30, 0x6A	; 106
    193e:	fe 4f       	sbci	r31, 0xFE	; 254
    1940:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    1942:	80 91 e3 01 	lds	r24, 0x01E3
    1946:	90 91 e4 01 	lds	r25, 0x01E4
    194a:	01 96       	adiw	r24, 0x01	; 1
    194c:	90 93 e4 01 	sts	0x01E4, r25
    1950:	80 93 e3 01 	sts	0x01E3, r24
    if(UART.BufIndex >= UART.BufSize){
    1954:	20 91 e3 01 	lds	r18, 0x01E3
    1958:	30 91 e4 01 	lds	r19, 0x01E4
    195c:	80 91 e1 01 	lds	r24, 0x01E1
    1960:	90 91 e2 01 	lds	r25, 0x01E2
    1964:	28 17       	cp	r18, r24
    1966:	39 07       	cpc	r19, r25
    1968:	38 f0       	brcs	.+14     	; 0x1978 <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    196a:	10 92 e4 01 	sts	0x01E4, r1
    196e:	10 92 e3 01 	sts	0x01E3, r1
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    1974:	10 92 a0 01 	sts	0x01A0, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    1978:	80 91 e6 01 	lds	r24, 0x01E6
    197c:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
    1980:	80 91 e5 01 	lds	r24, 0x01E5
    1984:	88 23       	and	r24, r24
    1986:	31 f4       	brne	.+12     	; 0x1994 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1988:	87 e0       	ldi	r24, 0x07	; 7
    198a:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	80 93 e5 01 	sts	0x01E5, r24
    1994:	08 95       	ret

00001996 <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
  UART_ISR_Handler();
    19b8:	0e 94 90 0c 	call	0x1920	; 0x1920 <UART_ISR_Handler>
  //Clear flag if necessary
}
    19bc:	ff 91       	pop	r31
    19be:	ef 91       	pop	r30
    19c0:	bf 91       	pop	r27
    19c2:	af 91       	pop	r26
    19c4:	9f 91       	pop	r25
    19c6:	8f 91       	pop	r24
    19c8:	7f 91       	pop	r23
    19ca:	6f 91       	pop	r22
    19cc:	5f 91       	pop	r21
    19ce:	4f 91       	pop	r20
    19d0:	3f 91       	pop	r19
    19d2:	2f 91       	pop	r18
    19d4:	0f 90       	pop	r0
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	0f 90       	pop	r0
    19da:	1f 90       	pop	r1
    19dc:	18 95       	reti

000019de <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    19de:	36 2f       	mov	r19, r22
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	28 27       	eor	r18, r24
    19e4:	39 27       	eor	r19, r25
    19e6:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    19e8:	61 e2       	ldi	r22, 0x21	; 33
    19ea:	70 e1       	ldi	r23, 0x10	; 16
    19ec:	c9 01       	movw	r24, r18
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    19f2:	37 ff       	sbrs	r19, 7
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    19f6:	9c 01       	movw	r18, r24
    19f8:	26 27       	eor	r18, r22
    19fa:	37 27       	eor	r19, r23
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    19fe:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    1a00:	4f 5f       	subi	r20, 0xFF	; 255
    1a02:	48 30       	cpi	r20, 0x08	; 8
    1a04:	99 f7       	brne	.-26     	; 0x19ec <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    1a06:	c9 01       	movw	r24, r18
    1a08:	08 95       	ret

00001a0a <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    1a0a:	0f 93       	push	r16
    1a0c:	1f 93       	push	r17
    1a0e:	cf 93       	push	r28
    1a10:	df 93       	push	r29
    1a12:	06 2f       	mov	r16, r22
    1a14:	ec 01       	movw	r28, r24
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	10 e0       	ldi	r17, 0x00	; 0
    1a1c:	06 c0       	rjmp	.+12     	; 0x1a2a <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    1a1e:	c9 01       	movw	r24, r18
    1a20:	69 91       	ld	r22, Y+
    1a22:	0e 94 ef 0c 	call	0x19de	; 0x19de <UART_CRC_Calculate_Byte>
    1a26:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    1a28:	1f 5f       	subi	r17, 0xFF	; 255
    1a2a:	10 17       	cp	r17, r16
    1a2c:	c0 f3       	brcs	.-16     	; 0x1a1e <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    1a2e:	c9 01       	movw	r24, r18
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	08 95       	ret

00001a3a <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a3a:	60 91 e3 01 	lds	r22, 0x01E3
    1a3e:	70 91 e4 01 	lds	r23, 0x01E4

/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    1a42:	62 50       	subi	r22, 0x02	; 2
    1a44:	81 ea       	ldi	r24, 0xA1	; 161
    1a46:	91 e0       	ldi	r25, 0x01	; 1
    1a48:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <UART_CRC_Calculate_Block>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a4c:	e0 91 e3 01 	lds	r30, 0x01E3
    1a50:	f0 91 e4 01 	lds	r31, 0x01E4
/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1a56:	ec 56       	subi	r30, 0x6C	; 108
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	23 85       	ldd	r18, Z+11	; 0x0b

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
    1a5c:	52 2f       	mov	r21, r18
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1a60:	e0 91 e3 01 	lds	r30, 0x01E3
    1a64:	f0 91 e4 01 	lds	r31, 0x01E4
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    1a6a:	eb 56       	subi	r30, 0x6B	; 107
    1a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6e:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	42 2b       	or	r20, r18
    1a74:	53 2b       	or	r21, r19
  UART.RxPacket.CalculatedCRC = crc_calc;
    1a76:	90 93 e8 01 	sts	0x01E8, r25
    1a7a:	80 93 e7 01 	sts	0x01E7, r24
  UART.RxPacket.ReceivedCRC = crc_recv;
    1a7e:	50 93 ea 01 	sts	0x01EA, r21
    1a82:	40 93 e9 01 	sts	0x01E9, r20
  if(UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC){
    1a86:	20 91 e7 01 	lds	r18, 0x01E7
    1a8a:	30 91 e8 01 	lds	r19, 0x01E8
    1a8e:	80 91 e9 01 	lds	r24, 0x01E9
    1a92:	90 91 ea 01 	lds	r25, 0x01EA
    1a96:	28 17       	cp	r18, r24
    1a98:	39 07       	cpc	r19, r25
    1a9a:	21 f4       	brne	.+8      	; 0x1aa4 <UART_RX_Packet_CRC_Check+0x6a>
    UART.RxPacket.CRCStatus = UART_TRUE;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	80 93 eb 01 	sts	0x01EB, r24
    1aa2:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
    1aa4:	10 92 eb 01 	sts	0x01EB, r1
    1aa8:	08 95       	ret

00001aaa <UART_Timer_ISR_Handler>:
  }
  
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    1aaa:	80 91 e5 01 	lds	r24, 0x01E5
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	21 f4       	brne	.+8      	; 0x1aba <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    1ab2:	10 92 b1 00 	sts	0x00B1, r1
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
    1ab6:	10 92 e5 01 	sts	0x01E5, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    1aba:	80 91 e3 01 	lds	r24, 0x01E3
    1abe:	90 91 e4 01 	lds	r25, 0x01E4
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    1ac2:	88 23       	and	r24, r24
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
    1ac6:	80 91 ed 01 	lds	r24, 0x01ED
    1aca:	88 23       	and	r24, r24
    1acc:	19 f4       	brne	.+6      	; 0x1ad4 <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
    1ace:	80 e1       	ldi	r24, 0x10	; 16
    1ad0:	80 93 96 01 	sts	0x0196, r24
	}
    UART_RX_Packet_CRC_Check();
    1ad4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 93 ec 01 	sts	0x01EC, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
    1ade:	10 92 ed 01 	sts	0x01ED, r1
    1ae2:	08 95       	ret

00001ae4 <__vector_9>:
  TCNT2 = UART.Timer.ResetVal;
}



ISR(TIMER2_OVF_vect){
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    1b06:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <UART_Timer_ISR_Handler>
  //Clear flag if necessary
}
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	bf 91       	pop	r27
    1b10:	af 91       	pop	r26
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	7f 91       	pop	r23
    1b18:	6f 91       	pop	r22
    1b1a:	5f 91       	pop	r21
    1b1c:	4f 91       	pop	r20
    1b1e:	3f 91       	pop	r19
    1b20:	2f 91       	pop	r18
    1b22:	0f 90       	pop	r0
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	0f 90       	pop	r0
    1b28:	1f 90       	pop	r1
    1b2a:	18 95       	reti

00001b2c <UART_RX_Packet_Read_Complete>:
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
  }
}

void UART_RX_Packet_Read_Complete(void){
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1b30:	fc 01       	movw	r30, r24
    1b32:	ea 56       	subi	r30, 0x6A	; 106
    1b34:	fe 4f       	sbci	r31, 0xFE	; 254
    1b36:	13 86       	std	Z+11, r1	; 0x0b
    1b38:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1b3a:	80 34       	cpi	r24, 0x40	; 64
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	c1 f7       	brne	.-16     	; 0x1b30 <UART_RX_Packet_Read_Complete+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1b40:	10 92 e4 01 	sts	0x01E4, r1
    1b44:	10 92 e3 01 	sts	0x01E3, r1
uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
}

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    1b48:	10 92 ec 01 	sts	0x01EC, r1
}

void UART_RX_Packet_Read_Complete(void){
  UART_Buf_Flush();
  UART_Data_Clear_Available_Flag();
  UART_Data_Clear_Read_Complete_Flag();
    1b4c:	0e 94 47 0c 	call	0x188e	; 0x188e <UART_Data_Clear_Read_Complete_Flag>
}
    1b50:	08 95       	ret

00001b52 <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	7b 01       	movw	r14, r22
    1b5c:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    1b5e:	0e 94 a5 08 	call	0x114a	; 0x114a <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1b62:	10 92 e8 01 	sts	0x01E8, r1
    1b66:	10 92 e7 01 	sts	0x01E7, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1b6a:	10 92 ea 01 	sts	0x01EA, r1
    1b6e:	10 92 e9 01 	sts	0x01E9, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1b72:	10 92 eb 01 	sts	0x01EB, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1b76:	10 92 ec 01 	sts	0x01EC, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 ed 01 	sts	0x01ED, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1b80:	10 92 e5 01 	sts	0x01E5, r1
  UART.Timer.ResetVal = UART_NULL;
    1b84:	10 92 e6 01 	sts	0x01E6, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    1b88:	c8 01       	movw	r24, r16
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1b90:	80 91 c1 00 	lds	r24, 0x00C1
    1b94:	88 60       	ori	r24, 0x08	; 8
    1b96:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1b9a:	96 e0       	ldi	r25, 0x06	; 6
    1b9c:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1ba0:	80 91 c1 00 	lds	r24, 0x00C1
    1ba4:	80 61       	ori	r24, 0x10	; 16
    1ba6:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1baa:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1bae:	80 91 c1 00 	lds	r24, 0x00C1
    1bb2:	80 68       	ori	r24, 0x80	; 128
    1bb4:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    1bb8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    1bba:	0e 94 40 09 	call	0x1280	; 0x1280 <UART_Timer_Init>
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	ea 56       	subi	r30, 0x6A	; 106
    1bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bc8:	13 86       	std	Z+11, r1	; 0x0b
    1bca:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    1bcc:	80 34       	cpi	r24, 0x40	; 64
    1bce:	91 05       	cpc	r25, r1
    1bd0:	c1 f7       	brne	.-16     	; 0x1bc2 <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    1bd2:	10 92 e4 01 	sts	0x01E4, r1
    1bd6:	10 92 e3 01 	sts	0x01E3, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	ff 90       	pop	r15
    1be0:	ef 90       	pop	r14
    1be2:	08 95       	ret

00001be4 <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    1be4:	10 92 1c 01 	sts	0x011C, r1
    1be8:	10 92 1d 01 	sts	0x011D, r1
    1bec:	10 92 1e 01 	sts	0x011E, r1
    1bf0:	10 92 1f 01 	sts	0x011F, r1
  PID.Input.Ki = 0;
    1bf4:	10 92 20 01 	sts	0x0120, r1
    1bf8:	10 92 21 01 	sts	0x0121, r1
    1bfc:	10 92 22 01 	sts	0x0122, r1
    1c00:	10 92 23 01 	sts	0x0123, r1
  PID.Input.Kd = 0;
    1c04:	10 92 24 01 	sts	0x0124, r1
    1c08:	10 92 25 01 	sts	0x0125, r1
    1c0c:	10 92 26 01 	sts	0x0126, r1
    1c10:	10 92 27 01 	sts	0x0127, r1
  PID.Input.SetPoint = 0;
    1c14:	10 92 28 01 	sts	0x0128, r1
    1c18:	10 92 29 01 	sts	0x0129, r1
    1c1c:	10 92 2a 01 	sts	0x012A, r1
    1c20:	10 92 2b 01 	sts	0x012B, r1
  PID.Input.ProcessValue = 0;
    1c24:	10 92 2c 01 	sts	0x012C, r1
    1c28:	10 92 2d 01 	sts	0x012D, r1
    1c2c:	10 92 2e 01 	sts	0x012E, r1
    1c30:	10 92 2f 01 	sts	0x012F, r1
  PID.Error.PError = 0;
    1c34:	10 92 30 01 	sts	0x0130, r1
    1c38:	10 92 31 01 	sts	0x0131, r1
    1c3c:	10 92 32 01 	sts	0x0132, r1
    1c40:	10 92 33 01 	sts	0x0133, r1
  PID.Error.DError = 0;
    1c44:	10 92 34 01 	sts	0x0134, r1
    1c48:	10 92 35 01 	sts	0x0135, r1
    1c4c:	10 92 36 01 	sts	0x0136, r1
    1c50:	10 92 37 01 	sts	0x0137, r1
  PID.Error.IError = 0;
    1c54:	10 92 38 01 	sts	0x0138, r1
    1c58:	10 92 39 01 	sts	0x0139, r1
    1c5c:	10 92 3a 01 	sts	0x013A, r1
    1c60:	10 92 3b 01 	sts	0x013B, r1
  PID.Error.IErrorLimit = 0;
    1c64:	10 92 3c 01 	sts	0x013C, r1
    1c68:	10 92 3d 01 	sts	0x013D, r1
    1c6c:	10 92 3e 01 	sts	0x013E, r1
    1c70:	10 92 3f 01 	sts	0x013F, r1
  PID.Error.LastError = 0;
    1c74:	10 92 40 01 	sts	0x0140, r1
    1c78:	10 92 41 01 	sts	0x0141, r1
    1c7c:	10 92 42 01 	sts	0x0142, r1
    1c80:	10 92 43 01 	sts	0x0143, r1
  PID.Products.PError = 0;
    1c84:	10 92 44 01 	sts	0x0144, r1
    1c88:	10 92 45 01 	sts	0x0145, r1
    1c8c:	10 92 46 01 	sts	0x0146, r1
    1c90:	10 92 47 01 	sts	0x0147, r1
  PID.Products.IError = 0;
    1c94:	10 92 48 01 	sts	0x0148, r1
    1c98:	10 92 49 01 	sts	0x0149, r1
    1c9c:	10 92 4a 01 	sts	0x014A, r1
    1ca0:	10 92 4b 01 	sts	0x014B, r1
  PID.Products.DError = 0;
    1ca4:	10 92 4c 01 	sts	0x014C, r1
    1ca8:	10 92 4d 01 	sts	0x014D, r1
    1cac:	10 92 4e 01 	sts	0x014E, r1
    1cb0:	10 92 4f 01 	sts	0x014F, r1
  PID.Products.ScaleFact = 0;
    1cb4:	10 92 50 01 	sts	0x0150, r1
    1cb8:	10 92 51 01 	sts	0x0151, r1
    1cbc:	10 92 52 01 	sts	0x0152, r1
    1cc0:	10 92 53 01 	sts	0x0153, r1
  PID.Output = 0;
    1cc4:	10 92 54 01 	sts	0x0154, r1
    1cc8:	10 92 55 01 	sts	0x0155, r1
    1ccc:	10 92 56 01 	sts	0x0156, r1
    1cd0:	10 92 57 01 	sts	0x0157, r1
  PID.OutputNonNegative = 0;
    1cd4:	10 92 58 01 	sts	0x0158, r1
    1cd8:	10 92 59 01 	sts	0x0159, r1
    1cdc:	10 92 5a 01 	sts	0x015A, r1
    1ce0:	10 92 5b 01 	sts	0x015B, r1
}
    1ce4:	08 95       	ret

00001ce6 <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1ce6:	60 93 1c 01 	sts	0x011C, r22
    1cea:	70 93 1d 01 	sts	0x011D, r23
    1cee:	80 93 1e 01 	sts	0x011E, r24
    1cf2:	90 93 1f 01 	sts	0x011F, r25
}
    1cf6:	08 95       	ret

00001cf8 <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1cf8:	60 93 20 01 	sts	0x0120, r22
    1cfc:	70 93 21 01 	sts	0x0121, r23
    1d00:	80 93 22 01 	sts	0x0122, r24
    1d04:	90 93 23 01 	sts	0x0123, r25
}
    1d08:	08 95       	ret

00001d0a <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1d0a:	60 93 24 01 	sts	0x0124, r22
    1d0e:	70 93 25 01 	sts	0x0125, r23
    1d12:	80 93 26 01 	sts	0x0126, r24
    1d16:	90 93 27 01 	sts	0x0127, r25
}
    1d1a:	08 95       	ret

00001d1c <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    1d1c:	ef 92       	push	r14
    1d1e:	ff 92       	push	r15
    1d20:	0f 93       	push	r16
    1d22:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    1d24:	60 93 1c 01 	sts	0x011C, r22
    1d28:	70 93 1d 01 	sts	0x011D, r23
    1d2c:	80 93 1e 01 	sts	0x011E, r24
    1d30:	90 93 1f 01 	sts	0x011F, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    1d34:	20 93 20 01 	sts	0x0120, r18
    1d38:	30 93 21 01 	sts	0x0121, r19
    1d3c:	40 93 22 01 	sts	0x0122, r20
    1d40:	50 93 23 01 	sts	0x0123, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    1d44:	e0 92 24 01 	sts	0x0124, r14
    1d48:	f0 92 25 01 	sts	0x0125, r15
    1d4c:	00 93 26 01 	sts	0x0126, r16
    1d50:	10 93 27 01 	sts	0x0127, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    1d54:	1f 91       	pop	r17
    1d56:	0f 91       	pop	r16
    1d58:	ff 90       	pop	r15
    1d5a:	ef 90       	pop	r14
    1d5c:	08 95       	ret

00001d5e <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    1d5e:	60 93 28 01 	sts	0x0128, r22
    1d62:	70 93 29 01 	sts	0x0129, r23
    1d66:	80 93 2a 01 	sts	0x012A, r24
    1d6a:	90 93 2b 01 	sts	0x012B, r25
}
    1d6e:	08 95       	ret

00001d70 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    1d70:	60 93 2c 01 	sts	0x012C, r22
    1d74:	70 93 2d 01 	sts	0x012D, r23
    1d78:	80 93 2e 01 	sts	0x012E, r24
    1d7c:	90 93 2f 01 	sts	0x012F, r25
}
    1d80:	08 95       	ret

00001d82 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    1d82:	60 93 3c 01 	sts	0x013C, r22
    1d86:	70 93 3d 01 	sts	0x013D, r23
    1d8a:	80 93 3e 01 	sts	0x013E, r24
    1d8e:	90 93 3f 01 	sts	0x013F, r25
}
    1d92:	08 95       	ret

00001d94 <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    1d94:	60 93 50 01 	sts	0x0150, r22
    1d98:	70 93 51 01 	sts	0x0151, r23
    1d9c:	80 93 52 01 	sts	0x0152, r24
    1da0:	90 93 53 01 	sts	0x0153, r25
}
    1da4:	08 95       	ret

00001da6 <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    1da6:	10 92 38 01 	sts	0x0138, r1
    1daa:	10 92 39 01 	sts	0x0139, r1
    1dae:	10 92 3a 01 	sts	0x013A, r1
    1db2:	10 92 3b 01 	sts	0x013B, r1
}
    1db6:	08 95       	ret

00001db8 <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    1dc0:	20 91 28 01 	lds	r18, 0x0128
    1dc4:	30 91 29 01 	lds	r19, 0x0129
    1dc8:	40 91 2a 01 	lds	r20, 0x012A
    1dcc:	50 91 2b 01 	lds	r21, 0x012B
    1dd0:	80 91 2c 01 	lds	r24, 0x012C
    1dd4:	90 91 2d 01 	lds	r25, 0x012D
    1dd8:	a0 91 2e 01 	lds	r26, 0x012E
    1ddc:	b0 91 2f 01 	lds	r27, 0x012F
    1de0:	28 1b       	sub	r18, r24
    1de2:	39 0b       	sbc	r19, r25
    1de4:	4a 0b       	sbc	r20, r26
    1de6:	5b 0b       	sbc	r21, r27
    1de8:	20 93 30 01 	sts	0x0130, r18
    1dec:	30 93 31 01 	sts	0x0131, r19
    1df0:	40 93 32 01 	sts	0x0132, r20
    1df4:	50 93 33 01 	sts	0x0133, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    1df8:	80 91 40 01 	lds	r24, 0x0140
    1dfc:	90 91 41 01 	lds	r25, 0x0141
    1e00:	a0 91 42 01 	lds	r26, 0x0142
    1e04:	b0 91 43 01 	lds	r27, 0x0143
    1e08:	79 01       	movw	r14, r18
    1e0a:	8a 01       	movw	r16, r20
    1e0c:	e8 1a       	sub	r14, r24
    1e0e:	f9 0a       	sbc	r15, r25
    1e10:	0a 0b       	sbc	r16, r26
    1e12:	1b 0b       	sbc	r17, r27
    1e14:	e0 92 34 01 	sts	0x0134, r14
    1e18:	f0 92 35 01 	sts	0x0135, r15
    1e1c:	00 93 36 01 	sts	0x0136, r16
    1e20:	10 93 37 01 	sts	0x0137, r17
  PID.Error.LastError = PID.Error.PError;
    1e24:	20 93 40 01 	sts	0x0140, r18
    1e28:	30 93 41 01 	sts	0x0141, r19
    1e2c:	40 93 42 01 	sts	0x0142, r20
    1e30:	50 93 43 01 	sts	0x0143, r21
  PID.Error.IError += PID.Error.PError;
    1e34:	e0 90 38 01 	lds	r14, 0x0138
    1e38:	f0 90 39 01 	lds	r15, 0x0139
    1e3c:	00 91 3a 01 	lds	r16, 0x013A
    1e40:	10 91 3b 01 	lds	r17, 0x013B
    1e44:	e2 0e       	add	r14, r18
    1e46:	f3 1e       	adc	r15, r19
    1e48:	04 1f       	adc	r16, r20
    1e4a:	15 1f       	adc	r17, r21
    1e4c:	e0 92 38 01 	sts	0x0138, r14
    1e50:	f0 92 39 01 	sts	0x0139, r15
    1e54:	00 93 3a 01 	sts	0x013A, r16
    1e58:	10 93 3b 01 	sts	0x013B, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    1e5c:	80 91 3c 01 	lds	r24, 0x013C
    1e60:	90 91 3d 01 	lds	r25, 0x013D
    1e64:	a0 91 3e 01 	lds	r26, 0x013E
    1e68:	b0 91 3f 01 	lds	r27, 0x013F
    1e6c:	8e 15       	cp	r24, r14
    1e6e:	9f 05       	cpc	r25, r15
    1e70:	a0 07       	cpc	r26, r16
    1e72:	b1 07       	cpc	r27, r17
    1e74:	4c f4       	brge	.+18     	; 0x1e88 <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    1e76:	80 93 38 01 	sts	0x0138, r24
    1e7a:	90 93 39 01 	sts	0x0139, r25
    1e7e:	a0 93 3a 01 	sts	0x013A, r26
    1e82:	b0 93 3b 01 	sts	0x013B, r27
    1e86:	14 c0       	rjmp	.+40     	; 0x1eb0 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    1e88:	22 27       	eor	r18, r18
    1e8a:	33 27       	eor	r19, r19
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	28 1b       	sub	r18, r24
    1e90:	39 0b       	sbc	r19, r25
    1e92:	4a 0b       	sbc	r20, r26
    1e94:	5b 0b       	sbc	r21, r27
    1e96:	e2 16       	cp	r14, r18
    1e98:	f3 06       	cpc	r15, r19
    1e9a:	04 07       	cpc	r16, r20
    1e9c:	15 07       	cpc	r17, r21
    1e9e:	44 f4       	brge	.+16     	; 0x1eb0 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    1ea0:	20 93 38 01 	sts	0x0138, r18
    1ea4:	30 93 39 01 	sts	0x0139, r19
    1ea8:	40 93 3a 01 	sts	0x013A, r20
    1eac:	50 93 3b 01 	sts	0x013B, r21
  }
}
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	ff 90       	pop	r15
    1eb6:	ef 90       	pop	r14
    1eb8:	08 95       	ret

00001eba <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    1eba:	6f 92       	push	r6
    1ebc:	7f 92       	push	r7
    1ebe:	8f 92       	push	r8
    1ec0:	9f 92       	push	r9
    1ec2:	af 92       	push	r10
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    1ed2:	60 91 20 01 	lds	r22, 0x0120
    1ed6:	70 91 21 01 	lds	r23, 0x0121
    1eda:	80 91 22 01 	lds	r24, 0x0122
    1ede:	90 91 23 01 	lds	r25, 0x0123
    1ee2:	20 91 38 01 	lds	r18, 0x0138
    1ee6:	30 91 39 01 	lds	r19, 0x0139
    1eea:	40 91 3a 01 	lds	r20, 0x013A
    1eee:	50 91 3b 01 	lds	r21, 0x013B
    1ef2:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
    1ef6:	3b 01       	movw	r6, r22
    1ef8:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    1efa:	60 91 24 01 	lds	r22, 0x0124
    1efe:	70 91 25 01 	lds	r23, 0x0125
    1f02:	80 91 26 01 	lds	r24, 0x0126
    1f06:	90 91 27 01 	lds	r25, 0x0127
    1f0a:	20 91 34 01 	lds	r18, 0x0134
    1f0e:	30 91 35 01 	lds	r19, 0x0135
    1f12:	40 91 36 01 	lds	r20, 0x0136
    1f16:	50 91 37 01 	lds	r21, 0x0137
    1f1a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
    1f1e:	5b 01       	movw	r10, r22
    1f20:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    1f22:	e0 90 50 01 	lds	r14, 0x0150
    1f26:	f0 90 51 01 	lds	r15, 0x0151
    1f2a:	00 91 52 01 	lds	r16, 0x0152
    1f2e:	10 91 53 01 	lds	r17, 0x0153
    1f32:	60 91 1c 01 	lds	r22, 0x011C
    1f36:	70 91 1d 01 	lds	r23, 0x011D
    1f3a:	80 91 1e 01 	lds	r24, 0x011E
    1f3e:	90 91 1f 01 	lds	r25, 0x011F
    1f42:	20 91 30 01 	lds	r18, 0x0130
    1f46:	30 91 31 01 	lds	r19, 0x0131
    1f4a:	40 91 32 01 	lds	r20, 0x0132
    1f4e:	50 91 33 01 	lds	r21, 0x0133
    1f52:	0e 94 f5 10 	call	0x21ea	; 0x21ea <__mulsi3>
    1f56:	a8 01       	movw	r20, r16
    1f58:	97 01       	movw	r18, r14
    1f5a:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
    1f5e:	20 93 44 01 	sts	0x0144, r18
    1f62:	30 93 45 01 	sts	0x0145, r19
    1f66:	40 93 46 01 	sts	0x0146, r20
    1f6a:	50 93 47 01 	sts	0x0147, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    1f6e:	c4 01       	movw	r24, r8
    1f70:	b3 01       	movw	r22, r6
    1f72:	a8 01       	movw	r20, r16
    1f74:	97 01       	movw	r18, r14
    1f76:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
    1f7a:	20 93 48 01 	sts	0x0148, r18
    1f7e:	30 93 49 01 	sts	0x0149, r19
    1f82:	40 93 4a 01 	sts	0x014A, r20
    1f86:	50 93 4b 01 	sts	0x014B, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    1f8a:	c6 01       	movw	r24, r12
    1f8c:	b5 01       	movw	r22, r10
    1f8e:	a8 01       	movw	r20, r16
    1f90:	97 01       	movw	r18, r14
    1f92:	0e 94 36 11 	call	0x226c	; 0x226c <__divmodsi4>
    1f96:	20 93 4c 01 	sts	0x014C, r18
    1f9a:	30 93 4d 01 	sts	0x014D, r19
    1f9e:	40 93 4e 01 	sts	0x014E, r20
    1fa2:	50 93 4f 01 	sts	0x014F, r21
}
    1fa6:	1f 91       	pop	r17
    1fa8:	0f 91       	pop	r16
    1faa:	ff 90       	pop	r15
    1fac:	ef 90       	pop	r14
    1fae:	df 90       	pop	r13
    1fb0:	cf 90       	pop	r12
    1fb2:	bf 90       	pop	r11
    1fb4:	af 90       	pop	r10
    1fb6:	9f 90       	pop	r9
    1fb8:	8f 90       	pop	r8
    1fba:	7f 90       	pop	r7
    1fbc:	6f 90       	pop	r6
    1fbe:	08 95       	ret

00001fc0 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    1fc0:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    1fc4:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    1fc8:	20 91 44 01 	lds	r18, 0x0144
    1fcc:	30 91 45 01 	lds	r19, 0x0145
    1fd0:	40 91 46 01 	lds	r20, 0x0146
    1fd4:	50 91 47 01 	lds	r21, 0x0147
  control_value += PID.Products.IError;
    1fd8:	80 91 48 01 	lds	r24, 0x0148
    1fdc:	90 91 49 01 	lds	r25, 0x0149
    1fe0:	a0 91 4a 01 	lds	r26, 0x014A
    1fe4:	b0 91 4b 01 	lds	r27, 0x014B
    1fe8:	28 0f       	add	r18, r24
    1fea:	39 1f       	adc	r19, r25
    1fec:	4a 1f       	adc	r20, r26
    1fee:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    1ff0:	80 91 4c 01 	lds	r24, 0x014C
    1ff4:	90 91 4d 01 	lds	r25, 0x014D
    1ff8:	a0 91 4e 01 	lds	r26, 0x014E
    1ffc:	b0 91 4f 01 	lds	r27, 0x014F
    2000:	28 0f       	add	r18, r24
    2002:	39 1f       	adc	r19, r25
    2004:	4a 1f       	adc	r20, r26
    2006:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    2008:	20 93 54 01 	sts	0x0154, r18
    200c:	30 93 55 01 	sts	0x0155, r19
    2010:	40 93 56 01 	sts	0x0156, r20
    2014:	50 93 57 01 	sts	0x0157, r21
  if(control_value < 0){
    2018:	57 ff       	sbrs	r21, 7
    201a:	09 c0       	rjmp	.+18     	; 0x202e <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    201c:	10 92 58 01 	sts	0x0158, r1
    2020:	10 92 59 01 	sts	0x0159, r1
    2024:	10 92 5a 01 	sts	0x015A, r1
    2028:	10 92 5b 01 	sts	0x015B, r1
    202c:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    202e:	20 93 58 01 	sts	0x0158, r18
    2032:	30 93 59 01 	sts	0x0159, r19
    2036:	40 93 5a 01 	sts	0x015A, r20
    203a:	50 93 5b 01 	sts	0x015B, r21
    203e:	08 95       	ret

00002040 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    2040:	60 91 1c 01 	lds	r22, 0x011C
    2044:	70 91 1d 01 	lds	r23, 0x011D
  return PID.Input.Kp;
}
    2048:	80 91 1e 01 	lds	r24, 0x011E
    204c:	90 91 1f 01 	lds	r25, 0x011F
    2050:	08 95       	ret

00002052 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2052:	60 91 20 01 	lds	r22, 0x0120
    2056:	70 91 21 01 	lds	r23, 0x0121
  return PID.Input.Ki;
}
    205a:	80 91 22 01 	lds	r24, 0x0122
    205e:	90 91 23 01 	lds	r25, 0x0123
    2062:	08 95       	ret

00002064 <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    2064:	60 91 24 01 	lds	r22, 0x0124
    2068:	70 91 25 01 	lds	r23, 0x0125
  return PID.Input.Kd;
}
    206c:	80 91 26 01 	lds	r24, 0x0126
    2070:	90 91 27 01 	lds	r25, 0x0127
    2074:	08 95       	ret

00002076 <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    2076:	60 91 28 01 	lds	r22, 0x0128
    207a:	70 91 29 01 	lds	r23, 0x0129
  return PID.Input.SetPoint;
}
    207e:	80 91 2a 01 	lds	r24, 0x012A
    2082:	90 91 2b 01 	lds	r25, 0x012B
    2086:	08 95       	ret

00002088 <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    2088:	60 91 2c 01 	lds	r22, 0x012C
    208c:	70 91 2d 01 	lds	r23, 0x012D
  return PID.Input.ProcessValue;
}
    2090:	80 91 2e 01 	lds	r24, 0x012E
    2094:	90 91 2f 01 	lds	r25, 0x012F
    2098:	08 95       	ret

0000209a <PID_Get_PError>:

signed long PID_Get_PError(void){
    209a:	60 91 30 01 	lds	r22, 0x0130
    209e:	70 91 31 01 	lds	r23, 0x0131
  return PID.Error.PError;
}
    20a2:	80 91 32 01 	lds	r24, 0x0132
    20a6:	90 91 33 01 	lds	r25, 0x0133
    20aa:	08 95       	ret

000020ac <PID_Get_IError>:

signed long PID_Get_IError(void){
    20ac:	60 91 38 01 	lds	r22, 0x0138
    20b0:	70 91 39 01 	lds	r23, 0x0139
  return PID.Error.IError;
}
    20b4:	80 91 3a 01 	lds	r24, 0x013A
    20b8:	90 91 3b 01 	lds	r25, 0x013B
    20bc:	08 95       	ret

000020be <PID_Get_DError>:

signed long PID_Get_DError(void){
    20be:	60 91 34 01 	lds	r22, 0x0134
    20c2:	70 91 35 01 	lds	r23, 0x0135
  return PID.Error.DError;
}
    20c6:	80 91 36 01 	lds	r24, 0x0136
    20ca:	90 91 37 01 	lds	r25, 0x0137
    20ce:	08 95       	ret

000020d0 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    20d0:	60 91 3c 01 	lds	r22, 0x013C
    20d4:	70 91 3d 01 	lds	r23, 0x013D
  return PID.Error.IErrorLimit;
}
    20d8:	80 91 3e 01 	lds	r24, 0x013E
    20dc:	90 91 3f 01 	lds	r25, 0x013F
    20e0:	08 95       	ret

000020e2 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    20e2:	60 91 44 01 	lds	r22, 0x0144
    20e6:	70 91 45 01 	lds	r23, 0x0145
  return PID.Products.PError;
}
    20ea:	80 91 46 01 	lds	r24, 0x0146
    20ee:	90 91 47 01 	lds	r25, 0x0147
    20f2:	08 95       	ret

000020f4 <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    20f4:	60 91 48 01 	lds	r22, 0x0148
    20f8:	70 91 49 01 	lds	r23, 0x0149
  return PID.Products.IError;
}
    20fc:	80 91 4a 01 	lds	r24, 0x014A
    2100:	90 91 4b 01 	lds	r25, 0x014B
    2104:	08 95       	ret

00002106 <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    2106:	60 91 4c 01 	lds	r22, 0x014C
    210a:	70 91 4d 01 	lds	r23, 0x014D
  return PID.Products.DError;
}
    210e:	80 91 4e 01 	lds	r24, 0x014E
    2112:	90 91 4f 01 	lds	r25, 0x014F
    2116:	08 95       	ret

00002118 <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    2118:	60 91 50 01 	lds	r22, 0x0150
    211c:	70 91 51 01 	lds	r23, 0x0151
  return PID.Products.ScaleFact;
}
    2120:	80 91 52 01 	lds	r24, 0x0152
    2124:	90 91 53 01 	lds	r25, 0x0153
    2128:	08 95       	ret

0000212a <PID_Get_Output>:


signed long PID_Get_Output(void){
    212a:	60 91 54 01 	lds	r22, 0x0154
    212e:	70 91 55 01 	lds	r23, 0x0155
  return PID.Output;
}
    2132:	80 91 56 01 	lds	r24, 0x0156
    2136:	90 91 57 01 	lds	r25, 0x0157
    213a:	08 95       	ret

0000213c <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    213c:	60 91 58 01 	lds	r22, 0x0158
    2140:	70 91 59 01 	lds	r23, 0x0159
  return PID.OutputNonNegative;
}
    2144:	80 91 5a 01 	lds	r24, 0x015A
    2148:	90 91 5b 01 	lds	r25, 0x015B
    214c:	08 95       	ret

0000214e <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    214e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <PID_Struct_Init>
}
    2152:	08 95       	ret

00002154 <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    2154:	af 92       	push	r10
    2156:	bf 92       	push	r11
    2158:	cf 92       	push	r12
    215a:	df 92       	push	r13
    215c:	ef 92       	push	r14
    215e:	ff 92       	push	r15
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    216c:	60 93 1c 01 	sts	0x011C, r22
    2170:	70 93 1d 01 	sts	0x011D, r23
    2174:	80 93 1e 01 	sts	0x011E, r24
    2178:	90 93 1f 01 	sts	0x011F, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    217c:	20 93 20 01 	sts	0x0120, r18
    2180:	30 93 21 01 	sts	0x0121, r19
    2184:	40 93 22 01 	sts	0x0122, r20
    2188:	50 93 23 01 	sts	0x0123, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    218c:	e0 92 24 01 	sts	0x0124, r14
    2190:	f0 92 25 01 	sts	0x0125, r15
    2194:	00 93 26 01 	sts	0x0126, r16
    2198:	10 93 27 01 	sts	0x0127, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    219c:	a0 92 3c 01 	sts	0x013C, r10
    21a0:	b0 92 3d 01 	sts	0x013D, r11
    21a4:	c0 92 3e 01 	sts	0x013E, r12
    21a8:	d0 92 3f 01 	sts	0x013F, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    21ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    21b0:	af 85       	ldd	r26, Y+15	; 0x0f
    21b2:	b8 89       	ldd	r27, Y+16	; 0x10
    21b4:	80 93 50 01 	sts	0x0150, r24
    21b8:	90 93 51 01 	sts	0x0151, r25
    21bc:	a0 93 52 01 	sts	0x0152, r26
    21c0:	b0 93 53 01 	sts	0x0153, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    21c4:	10 92 38 01 	sts	0x0138, r1
    21c8:	10 92 39 01 	sts	0x0139, r1
    21cc:	10 92 3a 01 	sts	0x013A, r1
    21d0:	10 92 3b 01 	sts	0x013B, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    21d4:	cf 91       	pop	r28
    21d6:	df 91       	pop	r29
    21d8:	1f 91       	pop	r17
    21da:	0f 91       	pop	r16
    21dc:	ff 90       	pop	r15
    21de:	ef 90       	pop	r14
    21e0:	df 90       	pop	r13
    21e2:	cf 90       	pop	r12
    21e4:	bf 90       	pop	r11
    21e6:	af 90       	pop	r10
    21e8:	08 95       	ret

000021ea <__mulsi3>:
    21ea:	62 9f       	mul	r22, r18
    21ec:	d0 01       	movw	r26, r0
    21ee:	73 9f       	mul	r23, r19
    21f0:	f0 01       	movw	r30, r0
    21f2:	82 9f       	mul	r24, r18
    21f4:	e0 0d       	add	r30, r0
    21f6:	f1 1d       	adc	r31, r1
    21f8:	64 9f       	mul	r22, r20
    21fa:	e0 0d       	add	r30, r0
    21fc:	f1 1d       	adc	r31, r1
    21fe:	92 9f       	mul	r25, r18
    2200:	f0 0d       	add	r31, r0
    2202:	83 9f       	mul	r24, r19
    2204:	f0 0d       	add	r31, r0
    2206:	74 9f       	mul	r23, r20
    2208:	f0 0d       	add	r31, r0
    220a:	65 9f       	mul	r22, r21
    220c:	f0 0d       	add	r31, r0
    220e:	99 27       	eor	r25, r25
    2210:	72 9f       	mul	r23, r18
    2212:	b0 0d       	add	r27, r0
    2214:	e1 1d       	adc	r30, r1
    2216:	f9 1f       	adc	r31, r25
    2218:	63 9f       	mul	r22, r19
    221a:	b0 0d       	add	r27, r0
    221c:	e1 1d       	adc	r30, r1
    221e:	f9 1f       	adc	r31, r25
    2220:	bd 01       	movw	r22, r26
    2222:	cf 01       	movw	r24, r30
    2224:	11 24       	eor	r1, r1
    2226:	08 95       	ret

00002228 <__udivmodsi4>:
    2228:	a1 e2       	ldi	r26, 0x21	; 33
    222a:	1a 2e       	mov	r1, r26
    222c:	aa 1b       	sub	r26, r26
    222e:	bb 1b       	sub	r27, r27
    2230:	fd 01       	movw	r30, r26
    2232:	0d c0       	rjmp	.+26     	; 0x224e <__udivmodsi4_ep>

00002234 <__udivmodsi4_loop>:
    2234:	aa 1f       	adc	r26, r26
    2236:	bb 1f       	adc	r27, r27
    2238:	ee 1f       	adc	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	a2 17       	cp	r26, r18
    223e:	b3 07       	cpc	r27, r19
    2240:	e4 07       	cpc	r30, r20
    2242:	f5 07       	cpc	r31, r21
    2244:	20 f0       	brcs	.+8      	; 0x224e <__udivmodsi4_ep>
    2246:	a2 1b       	sub	r26, r18
    2248:	b3 0b       	sbc	r27, r19
    224a:	e4 0b       	sbc	r30, r20
    224c:	f5 0b       	sbc	r31, r21

0000224e <__udivmodsi4_ep>:
    224e:	66 1f       	adc	r22, r22
    2250:	77 1f       	adc	r23, r23
    2252:	88 1f       	adc	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	1a 94       	dec	r1
    2258:	69 f7       	brne	.-38     	; 0x2234 <__udivmodsi4_loop>
    225a:	60 95       	com	r22
    225c:	70 95       	com	r23
    225e:	80 95       	com	r24
    2260:	90 95       	com	r25
    2262:	9b 01       	movw	r18, r22
    2264:	ac 01       	movw	r20, r24
    2266:	bd 01       	movw	r22, r26
    2268:	cf 01       	movw	r24, r30
    226a:	08 95       	ret

0000226c <__divmodsi4>:
    226c:	97 fb       	bst	r25, 7
    226e:	09 2e       	mov	r0, r25
    2270:	05 26       	eor	r0, r21
    2272:	0e d0       	rcall	.+28     	; 0x2290 <__divmodsi4_neg1>
    2274:	57 fd       	sbrc	r21, 7
    2276:	04 d0       	rcall	.+8      	; 0x2280 <__divmodsi4_neg2>
    2278:	d7 df       	rcall	.-82     	; 0x2228 <__udivmodsi4>
    227a:	0a d0       	rcall	.+20     	; 0x2290 <__divmodsi4_neg1>
    227c:	00 1c       	adc	r0, r0
    227e:	38 f4       	brcc	.+14     	; 0x228e <__divmodsi4_exit>

00002280 <__divmodsi4_neg2>:
    2280:	50 95       	com	r21
    2282:	40 95       	com	r20
    2284:	30 95       	com	r19
    2286:	21 95       	neg	r18
    2288:	3f 4f       	sbci	r19, 0xFF	; 255
    228a:	4f 4f       	sbci	r20, 0xFF	; 255
    228c:	5f 4f       	sbci	r21, 0xFF	; 255

0000228e <__divmodsi4_exit>:
    228e:	08 95       	ret

00002290 <__divmodsi4_neg1>:
    2290:	f6 f7       	brtc	.-4      	; 0x228e <__divmodsi4_exit>
    2292:	90 95       	com	r25
    2294:	80 95       	com	r24
    2296:	70 95       	com	r23
    2298:	61 95       	neg	r22
    229a:	7f 4f       	sbci	r23, 0xFF	; 255
    229c:	8f 4f       	sbci	r24, 0xFF	; 255
    229e:	9f 4f       	sbci	r25, 0xFF	; 255
    22a0:	08 95       	ret

000022a2 <_exit>:
    22a2:	f8 94       	cli

000022a4 <__stop_program>:
    22a4:	ff cf       	rjmp	.-2      	; 0x22a4 <__stop_program>
