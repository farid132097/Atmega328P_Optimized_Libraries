
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00002d9c  00002e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  008001ae  008001ae  00002ede  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00002ede  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000019ad  00000000  00000000  00002f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004e9a  00000000  00000000  0000494b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000949  00000000  00000000  000097e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002b02  00000000  00000000  0000a12e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000da0  00000000  00000000  0000cc30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001cd9  00000000  00000000  0000d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a55  00000000  00000000  0000f6a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000110fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e9       	ldi	r30, 0x9C	; 156
      7c:	fd e2       	ldi	r31, 0x2D	; 45
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 3a       	cpi	r26, 0xAE	; 174
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	ae ea       	ldi	r26, 0xAE	; 174
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 37       	cpi	r26, 0x7C	; 124
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Timebase_Init>
  App_Setup();
      ae:	0e 94 88 00 	call	0x110	; 0x110 <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:
}


void App_Main_Loop(void){
  
  Timebase_Window_Timer_Start();
      bc:	0e 94 cd 03 	call	0x79a	; 0x79a <Timebase_Window_Timer_Start>
  if(Timebase_DownCounter_Continuous_Expired_Event(0)){
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <Timebase_DownCounter_Continuous_Expired_Event>
      c6:	88 23       	and	r24, r24
      c8:	11 f0       	breq	.+4      	; 0xce <App_Main_Loop+0x12>
    ThreadedDbg_Execution_Enable();
      ca:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <ThreadedDbg_Execution_Enable>
  }
  
  
  ThreadedDbg_Execute_Function();
      ce:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <ThreadedDbg_Execute_Function>
  uint16_t val = Timebase_Window_Timer_Get_Interval_Reset();
      d2:	0e 94 28 04 	call	0x850	; 0x850 <Timebase_Window_Timer_Get_Interval_Reset>
  
  if(UART_Data_Available()){
      d6:	0e 94 59 11 	call	0x22b2	; 0x22b2 <UART_Data_Available>
      da:	88 23       	and	r24, r24
      dc:	c1 f0       	breq	.+48     	; 0x10e <App_Main_Loop+0x52>
    UART_Tx_Parameter_Hex_CM("CalCRC", UART_Data_Calculated_CRC_Get());
      de:	0e 94 61 11 	call	0x22c2	; 0x22c2 <UART_Data_Calculated_CRC_Get>
      e2:	ac 01       	movw	r20, r24
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	91 e0       	ldi	r25, 0x01	; 1
      ec:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <UART_Tx_Parameter_Hex_CM>
    UART_Tx_Parameter_Hex_CM("RecCRC", UART_Data_Received_CRC_Get());
      f0:	0e 94 67 11 	call	0x22ce	; 0x22ce <UART_Data_Received_CRC_Get>
      f4:	ac 01       	movw	r20, r24
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	70 e0       	ldi	r23, 0x00	; 0
      fa:	87 e0       	ldi	r24, 0x07	; 7
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <UART_Tx_Parameter_Hex_CM>
    UART_Data_Print_Buf();
     102:	0e 94 9f 11 	call	0x233e	; 0x233e <UART_Data_Print_Buf>
	UART_Tx_NL();
     106:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <UART_Tx_NL>
	UART_RX_Packet_Read_Complete();
     10a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <UART_RX_Packet_Read_Complete>
     10e:	08 95       	ret

00000110 <App_Setup>:
  UART_Tx_Parameter_Hex_NL("Print3",0x26);
}

void App_Setup(void){

  UART_Init(57600);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	71 ee       	ldi	r23, 0xE1	; 225
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <UART_Init>
  ThreadedDbg_Init();
     11c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <ThreadedDbg_Init>
  ThreadedDbg_Add_Function(Print0);
     120:	83 ec       	ldi	r24, 0xC3	; 195
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print1);
     128:	8a eb       	ldi	r24, 0xBA	; 186
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print2);
     130:	81 eb       	ldi	r24, 0xB1	; 177
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print3);
     138:	88 ea       	ldi	r24, 0xA8	; 168
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <ThreadedDbg_Add_Function>
  Timebase_DownCounter_Set_Forcefully(0,5);
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	45 e0       	ldi	r20, 0x05	; 5
     144:	50 e0       	ldi	r21, 0x00	; 0
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	0e 94 2f 0b 	call	0x165e	; 0x165e <Timebase_DownCounter_Set_Forcefully>
  
}
     14e:	08 95       	ret

00000150 <Print3>:
void Print2(void){
  UART_Tx_Parameter_Hex_NL("Print2",0x96);
}

void Print3(void){
  UART_Tx_Parameter_Hex_NL("Print3",0x26);
     150:	8e e0       	ldi	r24, 0x0E	; 14
     152:	91 e0       	ldi	r25, 0x01	; 1
     154:	46 e2       	ldi	r20, 0x26	; 38
     156:	50 e0       	ldi	r21, 0x00	; 0
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	70 e0       	ldi	r23, 0x00	; 0
     15c:	0e 94 b0 10 	call	0x2160	; 0x2160 <UART_Tx_Parameter_Hex_NL>
}
     160:	08 95       	ret

00000162 <Print2>:
void Print1(void){
  UART_Tx_Parameter_Hex_NL("Print1",0x0700);
}

void Print2(void){
  UART_Tx_Parameter_Hex_NL("Print2",0x96);
     162:	85 e1       	ldi	r24, 0x15	; 21
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	46 e9       	ldi	r20, 0x96	; 150
     168:	50 e0       	ldi	r21, 0x00	; 0
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	0e 94 b0 10 	call	0x2160	; 0x2160 <UART_Tx_Parameter_Hex_NL>
}
     172:	08 95       	ret

00000174 <Print1>:
void Print0(void){
  UART_Tx_Parameter_Hex_NL("Print0",0x25);
}

void Print1(void){
  UART_Tx_Parameter_Hex_NL("Print1",0x0700);
     174:	8c e1       	ldi	r24, 0x1C	; 28
     176:	91 e0       	ldi	r25, 0x01	; 1
     178:	40 e0       	ldi	r20, 0x00	; 0
     17a:	57 e0       	ldi	r21, 0x07	; 7
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	0e 94 b0 10 	call	0x2160	; 0x2160 <UART_Tx_Parameter_Hex_NL>
}
     184:	08 95       	ret

00000186 <Print0>:
#include "uart.h"
#include "pid.h"
#include "app.h"

void Print0(void){
  UART_Tx_Parameter_Hex_NL("Print0",0x25);
     186:	83 e2       	ldi	r24, 0x23	; 35
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	45 e2       	ldi	r20, 0x25	; 37
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	0e 94 b0 10 	call	0x2160	; 0x2160 <UART_Tx_Parameter_Hex_NL>
}
     196:	08 95       	ret

00000198 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     198:	88 e0       	ldi	r24, 0x08	; 8
     19a:	92 e0       	ldi	r25, 0x02	; 2
     19c:	90 93 07 02 	sts	0x0207, r25
     1a0:	80 93 06 02 	sts	0x0206, r24
  Timebase->Config.UpdateRate = 1;
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	90 93 09 02 	sts	0x0209, r25
     1ac:	80 93 08 02 	sts	0x0208, r24
  Timebase->Time.OVFUpdateValue=0;
     1b0:	10 92 0b 02 	sts	0x020B, r1
     1b4:	10 92 0a 02 	sts	0x020A, r1
  Timebase->Time.SubSecondsShadow = 0;
     1b8:	10 92 17 02 	sts	0x0217, r1
     1bc:	10 92 16 02 	sts	0x0216, r1
  Timebase->Time.SubSecondsUpTime = 0;
     1c0:	10 92 18 02 	sts	0x0218, r1
     1c4:	10 92 19 02 	sts	0x0219, r1
     1c8:	10 92 1a 02 	sts	0x021A, r1
     1cc:	10 92 1b 02 	sts	0x021B, r1
  Timebase->Time.SecondsShadow = 0;
     1d0:	10 92 1c 02 	sts	0x021C, r1
     1d4:	10 92 1d 02 	sts	0x021D, r1
     1d8:	10 92 1e 02 	sts	0x021E, r1
     1dc:	10 92 1f 02 	sts	0x021F, r1
  Timebase->Time.SubSeconds = 0;
     1e0:	10 92 11 02 	sts	0x0211, r1
     1e4:	10 92 10 02 	sts	0x0210, r1
  Timebase->Time.Seconds = 0;
     1e8:	10 92 12 02 	sts	0x0212, r1
     1ec:	10 92 13 02 	sts	0x0213, r1
     1f0:	10 92 14 02 	sts	0x0214, r1
     1f4:	10 92 15 02 	sts	0x0215, r1
  Timebase->Time.VariablesSync = 0;
     1f8:	10 92 20 02 	sts	0x0220, r1
  Timebase->Time.LastSample = 0;
     1fc:	10 92 0c 02 	sts	0x020C, r1
     200:	10 92 0d 02 	sts	0x020D, r1
     204:	10 92 0e 02 	sts	0x020E, r1
     208:	10 92 0f 02 	sts	0x020F, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
  Timebase->Time.StartTimeSeconds = 0;
     20c:	10 92 21 02 	sts	0x0221, r1
     210:	10 92 22 02 	sts	0x0222, r1
     214:	10 92 23 02 	sts	0x0223, r1
     218:	10 92 24 02 	sts	0x0224, r1
  Timebase->Time.StartTimeSubSeconds = 0;
     21c:	10 92 25 02 	sts	0x0225, r1
     220:	10 92 26 02 	sts	0x0226, r1
     224:	10 92 27 02 	sts	0x0227, r1
     228:	10 92 28 02 	sts	0x0228, r1
  Timebase->Time.Status = 0;
     22c:	10 92 29 02 	sts	0x0229, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
     230:	10 92 2a 02 	sts	0x022A, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     234:	10 92 40 02 	sts	0x0240, r1
    Timebase->DownCounter[i].EndValue = 0;
     238:	10 92 41 02 	sts	0x0241, r1
     23c:	10 92 42 02 	sts	0x0242, r1
     240:	10 92 43 02 	sts	0x0243, r1
     244:	10 92 44 02 	sts	0x0244, r1
    Timebase->DownCounter[i].Value = 0;
     248:	10 92 45 02 	sts	0x0245, r1
     24c:	10 92 46 02 	sts	0x0246, r1
     250:	10 92 47 02 	sts	0x0247, r1
     254:	10 92 48 02 	sts	0x0248, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     258:	10 92 49 02 	sts	0x0249, r1
     25c:	10 92 4a 02 	sts	0x024A, r1
     260:	10 92 4b 02 	sts	0x024B, r1
     264:	10 92 4c 02 	sts	0x024C, r1
	Timebase->DownCounter[i].ReloadValue = 0;
     268:	10 92 4d 02 	sts	0x024D, r1
     26c:	10 92 4e 02 	sts	0x024E, r1
     270:	10 92 4f 02 	sts	0x024F, r1
     274:	10 92 50 02 	sts	0x0250, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     278:	10 92 2b 02 	sts	0x022B, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     27c:	10 92 2c 02 	sts	0x022C, r1
     280:	10 92 2d 02 	sts	0x022D, r1
     284:	10 92 2e 02 	sts	0x022E, r1
     288:	10 92 2f 02 	sts	0x022F, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     28c:	10 92 30 02 	sts	0x0230, r1
     290:	10 92 31 02 	sts	0x0231, r1
     294:	10 92 32 02 	sts	0x0232, r1
     298:	10 92 33 02 	sts	0x0233, r1
    Timebase->DownCounterSS[i].Value = 0;
     29c:	10 92 34 02 	sts	0x0234, r1
     2a0:	10 92 35 02 	sts	0x0235, r1
     2a4:	10 92 36 02 	sts	0x0236, r1
     2a8:	10 92 37 02 	sts	0x0237, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     2ac:	10 92 38 02 	sts	0x0238, r1
     2b0:	10 92 39 02 	sts	0x0239, r1
     2b4:	10 92 3a 02 	sts	0x023A, r1
     2b8:	10 92 3b 02 	sts	0x023B, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     2bc:	10 92 3c 02 	sts	0x023C, r1
     2c0:	10 92 3d 02 	sts	0x023D, r1
     2c4:	10 92 3e 02 	sts	0x023E, r1
     2c8:	10 92 3f 02 	sts	0x023F, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
	Timebase->LPDownCounter[i].ReloadValue = 0;
  }
  #endif
  
}
     2cc:	08 95       	ret

000002ce <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     2ce:	8f 92       	push	r8
     2d0:	9f 92       	push	r9
     2d2:	bf 92       	push	r11
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	df 93       	push	r29
     2e2:	cf 93       	push	r28
     2e4:	cd b7       	in	r28, 0x3d	; 61
     2e6:	de b7       	in	r29, 0x3e	; 62
     2e8:	2a 97       	sbiw	r28, 0x0a	; 10
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     2f6:	de 01       	movw	r26, r28
     2f8:	11 96       	adiw	r26, 0x01	; 1
     2fa:	ea e2       	ldi	r30, 0x2A	; 42
     2fc:	f1 e0       	ldi	r31, 0x01	; 1
     2fe:	8a e0       	ldi	r24, 0x0A	; 10
     300:	01 90       	ld	r0, Z+
     302:	0d 92       	st	X+, r0
     304:	81 50       	subi	r24, 0x01	; 1
     306:	e1 f7       	brne	.-8      	; 0x300 <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     308:	94 01       	movw	r18, r8
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	50 e0       	ldi	r21, 0x00	; 0
     30e:	60 e0       	ldi	r22, 0x00	; 0
     310:	7b e1       	ldi	r23, 0x1B	; 27
     312:	87 eb       	ldi	r24, 0xB7	; 183
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     31a:	b2 2e       	mov	r11, r18
     31c:	c3 2e       	mov	r12, r19
     31e:	d4 2e       	mov	r13, r20
     320:	05 2f       	mov	r16, r21
     322:	7e 01       	movw	r14, r28
     324:	08 94       	sec
     326:	e1 1c       	adc	r14, r1
     328:	f1 1c       	adc	r15, r1
     32a:	c9 01       	movw	r24, r18
     32c:	da 01       	movw	r26, r20
     32e:	9c 01       	movw	r18, r24
     330:	ad 01       	movw	r20, r26
     332:	10 e0       	ldi	r17, 0x00	; 0
     334:	13 c0       	rjmp	.+38     	; 0x35c <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     336:	f7 01       	movw	r30, r14
     338:	21 91       	ld	r18, Z+
     33a:	31 91       	ld	r19, Z+
     33c:	7f 01       	movw	r14, r30
     33e:	40 e0       	ldi	r20, 0x00	; 0
     340:	50 e0       	ldi	r21, 0x00	; 0
     342:	6b 2d       	mov	r22, r11
     344:	7c 2d       	mov	r23, r12
     346:	8d 2d       	mov	r24, r13
     348:	90 2f       	mov	r25, r16
     34a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     34e:	c9 01       	movw	r24, r18
     350:	da 01       	movw	r26, r20
     352:	9c 01       	movw	r18, r24
     354:	ad 01       	movw	r20, r26
	clock_div_index++;
     356:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     358:	15 30       	cpi	r17, 0x05	; 5
     35a:	31 f0       	breq	.+12     	; 0x368 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     35c:	2f 3f       	cpi	r18, 0xFF	; 255
     35e:	31 05       	cpc	r19, r1
     360:	41 05       	cpc	r20, r1
     362:	51 05       	cpc	r21, r1
     364:	09 f0       	breq	.+2      	; 0x368 <Timebase_Timer_Enable+0x9a>
     366:	3c f7       	brge	.-50     	; 0x336 <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     368:	81 2f       	mov	r24, r17
     36a:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     36c:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     36e:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     370:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     374:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     376:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     378:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     37a:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     37c:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     37e:	88 23       	and	r24, r24
     380:	11 f4       	brne	.+4      	; 0x386 <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0f c0       	rjmp	.+30     	; 0x3a4 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     386:	81 30       	cpi	r24, 0x01	; 1
     388:	11 f4       	brne	.+4      	; 0x38e <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	0b c0       	rjmp	.+22     	; 0x3a4 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     38e:	82 30       	cpi	r24, 0x02	; 2
     390:	11 f4       	brne	.+4      	; 0x396 <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     392:	83 e0       	ldi	r24, 0x03	; 3
     394:	07 c0       	rjmp	.+14     	; 0x3a4 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	11 f4       	brne	.+4      	; 0x39e <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     39a:	84 e0       	ldi	r24, 0x04	; 4
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     39e:	84 30       	cpi	r24, 0x04	; 4
     3a0:	11 f4       	brne	.+4      	; 0x3a6 <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     3a2:	85 e0       	ldi	r24, 0x05	; 5
     3a4:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     3a6:	e0 91 06 02 	lds	r30, 0x0206
     3aa:	f0 91 07 02 	lds	r31, 0x0207
     3ae:	8f ef       	ldi	r24, 0xFF	; 255
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	82 1b       	sub	r24, r18
     3b4:	93 0b       	sbc	r25, r19
     3b6:	93 83       	std	Z+3, r25	; 0x03
     3b8:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     3ba:	82 81       	ldd	r24, Z+2	; 0x02
     3bc:	93 81       	ldd	r25, Z+3	; 0x03
     3be:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	80 93 6e 00 	sts	0x006E, r24
  sei();
     3c6:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     3c8:	91 82       	std	Z+1, r9	; 0x01
     3ca:	80 82       	st	Z, r8
}
     3cc:	2a 96       	adiw	r28, 0x0a	; 10
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	cf 91       	pop	r28
     3da:	df 91       	pop	r29
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	df 90       	pop	r13
     3e6:	cf 90       	pop	r12
     3e8:	bf 90       	pop	r11
     3ea:	9f 90       	pop	r9
     3ec:	8f 90       	pop	r8
     3ee:	08 95       	ret

000003f0 <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     3f0:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     3f2:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     3f4:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     3f8:	87 e0       	ldi	r24, 0x07	; 7
     3fa:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     3fc:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     3fe:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     400:	16 bc       	out	0x26, r1	; 38
}
     402:	08 95       	ret

00000404 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     404:	f8 94       	cli
}
     406:	08 95       	ret

00000408 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     408:	78 94       	sei
}
     40a:	08 95       	ret

0000040c <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     40c:	e0 91 06 02 	lds	r30, 0x0206
     410:	f0 91 07 02 	lds	r31, 0x0207
     414:	26 85       	ldd	r18, Z+14	; 0x0e
     416:	37 85       	ldd	r19, Z+15	; 0x0f
}
     418:	c9 01       	movw	r24, r18
     41a:	08 95       	ret

0000041c <Timebase_Timer_Get_SubSecondsUpTime>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
     41c:	e0 91 06 02 	lds	r30, 0x0206
     420:	f0 91 07 02 	lds	r31, 0x0207
     424:	20 89       	ldd	r18, Z+16	; 0x10
     426:	31 89       	ldd	r19, Z+17	; 0x11
     428:	42 89       	ldd	r20, Z+18	; 0x12
     42a:	53 89       	ldd	r21, Z+19	; 0x13
}
     42c:	b9 01       	movw	r22, r18
     42e:	ca 01       	movw	r24, r20
     430:	08 95       	ret

00000432 <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     432:	e0 91 06 02 	lds	r30, 0x0206
     436:	f0 91 07 02 	lds	r31, 0x0207
     43a:	24 89       	ldd	r18, Z+20	; 0x14
     43c:	35 89       	ldd	r19, Z+21	; 0x15
     43e:	46 89       	ldd	r20, Z+22	; 0x16
     440:	57 89       	ldd	r21, Z+23	; 0x17
}
     442:	b9 01       	movw	r22, r18
     444:	ca 01       	movw	r24, r20
     446:	08 95       	ret

00000448 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     448:	e0 91 06 02 	lds	r30, 0x0206
     44c:	f0 91 07 02 	lds	r31, 0x0207
     450:	20 85       	ldd	r18, Z+8	; 0x08
     452:	31 85       	ldd	r19, Z+9	; 0x09
}
     454:	c9 01       	movw	r24, r18
     456:	08 95       	ret

00000458 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     458:	e0 91 06 02 	lds	r30, 0x0206
     45c:	f0 91 07 02 	lds	r31, 0x0207
     460:	22 85       	ldd	r18, Z+10	; 0x0a
     462:	33 85       	ldd	r19, Z+11	; 0x0b
     464:	44 85       	ldd	r20, Z+12	; 0x0c
     466:	55 85       	ldd	r21, Z+13	; 0x0d
}
     468:	b9 01       	movw	r22, r18
     46a:	ca 01       	movw	r24, r20
     46c:	08 95       	ret

0000046e <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     46e:	e0 91 06 02 	lds	r30, 0x0206
     472:	f0 91 07 02 	lds	r31, 0x0207
     476:	91 87       	std	Z+9, r25	; 0x09
     478:	80 87       	std	Z+8, r24	; 0x08
}
     47a:	08 95       	ret

0000047c <Timebase_Timer_Set_SubSecondsShadow>:

void Timebase_Timer_Set_SubSecondsShadow(uint16_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsShadow = value;
     47c:	e0 91 06 02 	lds	r30, 0x0206
     480:	f0 91 07 02 	lds	r31, 0x0207
     484:	97 87       	std	Z+15, r25	; 0x0f
     486:	86 87       	std	Z+14, r24	; 0x0e
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     488:	08 95       	ret

0000048a <Timebase_Timer_Set_SubSecondsUpTime>:

void Timebase_Timer_Set_SubSecondsUpTime(uint32_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsUpTime = value;
     48a:	e0 91 06 02 	lds	r30, 0x0206
     48e:	f0 91 07 02 	lds	r31, 0x0207
     492:	60 8b       	std	Z+16, r22	; 0x10
     494:	71 8b       	std	Z+17, r23	; 0x11
     496:	82 8b       	std	Z+18, r24	; 0x12
     498:	93 8b       	std	Z+19, r25	; 0x13
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     49a:	08 95       	ret

0000049c <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     49c:	e0 91 06 02 	lds	r30, 0x0206
     4a0:	f0 91 07 02 	lds	r31, 0x0207
     4a4:	62 87       	std	Z+10, r22	; 0x0a
     4a6:	73 87       	std	Z+11, r23	; 0x0b
     4a8:	84 87       	std	Z+12, r24	; 0x0c
     4aa:	95 87       	std	Z+13, r25	; 0x0d
}
     4ac:	08 95       	ret

000004ae <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4ae:	e0 91 06 02 	lds	r30, 0x0206
     4b2:	f0 91 07 02 	lds	r31, 0x0207
     4b6:	26 85       	ldd	r18, Z+14	; 0x0e
     4b8:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     4ba:	86 85       	ldd	r24, Z+14	; 0x0e
     4bc:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	c9 f7       	brne	.-14     	; 0x4b6 <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     4c4:	c9 01       	movw	r24, r18
     4c6:	08 95       	ret

000004c8 <Timebase_Timer_Get_SubSecondsUpTime_Securely>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime_Securely(void){
  uint32_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsUpTime;
     4c8:	e0 91 06 02 	lds	r30, 0x0206
     4cc:	f0 91 07 02 	lds	r31, 0x0207
     4d0:	20 89       	ldd	r18, Z+16	; 0x10
     4d2:	31 89       	ldd	r19, Z+17	; 0x11
     4d4:	42 89       	ldd	r20, Z+18	; 0x12
     4d6:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SubSecondsUpTime;
     4d8:	80 89       	ldd	r24, Z+16	; 0x10
     4da:	91 89       	ldd	r25, Z+17	; 0x11
     4dc:	a2 89       	ldd	r26, Z+18	; 0x12
     4de:	b3 89       	ldd	r27, Z+19	; 0x13
	  if(tmp0 == tmp1){
     4e0:	28 17       	cp	r18, r24
     4e2:	39 07       	cpc	r19, r25
     4e4:	4a 07       	cpc	r20, r26
     4e6:	5b 07       	cpc	r21, r27
     4e8:	99 f7       	brne	.-26     	; 0x4d0 <Timebase_Timer_Get_SubSecondsUpTime_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     4ea:	b9 01       	movw	r22, r18
     4ec:	ca 01       	movw	r24, r20
     4ee:	08 95       	ret

000004f0 <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4f0:	e0 91 06 02 	lds	r30, 0x0206
     4f4:	f0 91 07 02 	lds	r31, 0x0207
     4f8:	24 89       	ldd	r18, Z+20	; 0x14
     4fa:	35 89       	ldd	r19, Z+21	; 0x15
     4fc:	46 89       	ldd	r20, Z+22	; 0x16
     4fe:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     500:	84 89       	ldd	r24, Z+20	; 0x14
     502:	95 89       	ldd	r25, Z+21	; 0x15
     504:	a6 89       	ldd	r26, Z+22	; 0x16
     506:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     508:	28 17       	cp	r18, r24
     50a:	39 07       	cpc	r19, r25
     50c:	4a 07       	cpc	r20, r26
     50e:	5b 07       	cpc	r21, r27
     510:	99 f7       	brne	.-26     	; 0x4f8 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     512:	b9 01       	movw	r22, r18
     514:	ca 01       	movw	r24, r20
     516:	08 95       	ret

00000518 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     518:	e0 91 06 02 	lds	r30, 0x0206
     51c:	f0 91 07 02 	lds	r31, 0x0207
     520:	80 8d       	ldd	r24, Z+24	; 0x18
     522:	88 23       	and	r24, r24
     524:	e1 f4       	brne	.+56     	; 0x55e <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     526:	26 85       	ldd	r18, Z+14	; 0x0e
     528:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     52a:	86 85       	ldd	r24, Z+14	; 0x0e
     52c:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	c9 f7       	brne	.-14     	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     534:	31 87       	std	Z+9, r19	; 0x09
     536:	20 87       	std	Z+8, r18	; 0x08
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     538:	24 89       	ldd	r18, Z+20	; 0x14
     53a:	35 89       	ldd	r19, Z+21	; 0x15
     53c:	46 89       	ldd	r20, Z+22	; 0x16
     53e:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     540:	84 89       	ldd	r24, Z+20	; 0x14
     542:	95 89       	ldd	r25, Z+21	; 0x15
     544:	a6 89       	ldd	r26, Z+22	; 0x16
     546:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     548:	28 17       	cp	r18, r24
     54a:	39 07       	cpc	r19, r25
     54c:	4a 07       	cpc	r20, r26
     54e:	5b 07       	cpc	r21, r27
     550:	99 f7       	brne	.-26     	; 0x538 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     552:	22 87       	std	Z+10, r18	; 0x0a
     554:	33 87       	std	Z+11, r19	; 0x0b
     556:	44 87       	std	Z+12, r20	; 0x0c
     558:	55 87       	std	Z+13, r21	; 0x0d
    #endif
	
	  Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 8f       	std	Z+24, r24	; 0x18
     55e:	08 95       	ret

00000560 <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     560:	8f 92       	push	r8
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     57a:	c0 91 06 02 	lds	r28, 0x0206
     57e:	d0 91 07 02 	lds	r29, 0x0207
     582:	ce 84       	ldd	r12, Y+14	; 0x0e
     584:	df 84       	ldd	r13, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     586:	8e 85       	ldd	r24, Y+14	; 0x0e
     588:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     58a:	c8 16       	cp	r12, r24
     58c:	d9 06       	cpc	r13, r25
     58e:	c9 f7       	brne	.-14     	; 0x582 <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     590:	ec 88       	ldd	r14, Y+20	; 0x14
     592:	fd 88       	ldd	r15, Y+21	; 0x15
     594:	0e 89       	ldd	r16, Y+22	; 0x16
     596:	1f 89       	ldd	r17, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     598:	8c 89       	ldd	r24, Y+20	; 0x14
     59a:	9d 89       	ldd	r25, Y+21	; 0x15
     59c:	ae 89       	ldd	r26, Y+22	; 0x16
     59e:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     5a0:	e8 16       	cp	r14, r24
     5a2:	f9 06       	cpc	r15, r25
     5a4:	0a 07       	cpc	r16, r26
     5a6:	1b 07       	cpc	r17, r27
     5a8:	99 f7       	brne	.-26     	; 0x590 <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     5aa:	28 81       	ld	r18, Y
     5ac:	39 81       	ldd	r19, Y+1	; 0x01
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	c8 01       	movw	r24, r16
     5b4:	b7 01       	movw	r22, r14
     5b6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
  smpl_val += smpl_ss;
     5ba:	76 01       	movw	r14, r12
     5bc:	00 e0       	ldi	r16, 0x00	; 0
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	95 01       	movw	r18, r10
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	e2 0e       	add	r14, r18
     5c8:	f3 1e       	adc	r15, r19
     5ca:	04 1f       	adc	r16, r20
     5cc:	15 1f       	adc	r17, r21
  smpl_val += value;
     5ce:	e6 0e       	add	r14, r22
     5d0:	f7 1e       	adc	r15, r23
     5d2:	08 1f       	adc	r16, r24
     5d4:	19 1f       	adc	r17, r25
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	50 e0       	ldi	r21, 0x00	; 0
     5de:	25 c0       	rjmp	.+74     	; 0x62a <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5e0:	8e 84       	ldd	r8, Y+14	; 0x0e
     5e2:	9f 84       	ldd	r9, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     5e4:	8e 85       	ldd	r24, Y+14	; 0x0e
     5e6:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     5e8:	88 16       	cp	r8, r24
     5ea:	99 06       	cpc	r9, r25
     5ec:	c9 f7       	brne	.-14     	; 0x5e0 <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     5ee:	ac 88       	ldd	r10, Y+20	; 0x14
     5f0:	bd 88       	ldd	r11, Y+21	; 0x15
     5f2:	ce 88       	ldd	r12, Y+22	; 0x16
     5f4:	df 88       	ldd	r13, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     5f6:	8c 89       	ldd	r24, Y+20	; 0x14
     5f8:	9d 89       	ldd	r25, Y+21	; 0x15
     5fa:	ae 89       	ldd	r26, Y+22	; 0x16
     5fc:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     5fe:	a8 16       	cp	r10, r24
     600:	b9 06       	cpc	r11, r25
     602:	ca 06       	cpc	r12, r26
     604:	db 06       	cpc	r13, r27
     606:	99 f7       	brne	.-26     	; 0x5ee <Timebase_Timer_Delay_SubSeconds+0x8e>
	  curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
     608:	28 81       	ld	r18, Y
     60a:	39 81       	ldd	r19, Y+1	; 0x01
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	c6 01       	movw	r24, r12
     612:	b5 01       	movw	r22, r10
     614:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
     618:	9b 01       	movw	r18, r22
     61a:	ac 01       	movw	r20, r24
	  curr_val += curr_ss;
     61c:	c4 01       	movw	r24, r8
     61e:	a0 e0       	ldi	r26, 0x00	; 0
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	28 0f       	add	r18, r24
     624:	39 1f       	adc	r19, r25
     626:	4a 1f       	adc	r20, r26
     628:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     62a:	2e 15       	cp	r18, r14
     62c:	3f 05       	cpc	r19, r15
     62e:	40 07       	cpc	r20, r16
     630:	51 07       	cpc	r21, r17
     632:	b4 f2       	brlt	.-84     	; 0x5e0 <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
	  curr_val += curr_ss;
  }
  
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	1f 91       	pop	r17
     63a:	0f 91       	pop	r16
     63c:	ff 90       	pop	r15
     63e:	ef 90       	pop	r14
     640:	df 90       	pop	r13
     642:	cf 90       	pop	r12
     644:	bf 90       	pop	r11
     646:	af 90       	pop	r10
     648:	9f 90       	pop	r9
     64a:	8f 90       	pop	r8
     64c:	08 95       	ret

0000064e <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     654:	e0 91 06 02 	lds	r30, 0x0206
     658:	f0 91 07 02 	lds	r31, 0x0207
     65c:	66 85       	ldd	r22, Z+14	; 0x0e
     65e:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     660:	86 85       	ldd	r24, Z+14	; 0x0e
     662:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     664:	68 17       	cp	r22, r24
     666:	79 07       	cpc	r23, r25
     668:	c9 f7       	brne	.-14     	; 0x65c <Timebase_Timer_Await_SubSeconds+0xe>
     66a:	07 c0       	rjmp	.+14     	; 0x67a <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     66c:	66 85       	ldd	r22, Z+14	; 0x0e
     66e:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     670:	86 85       	ldd	r24, Z+14	; 0x0e
     672:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     674:	68 17       	cp	r22, r24
     676:	79 07       	cpc	r23, r25
     678:	c9 f7       	brne	.-14     	; 0x66c <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     67a:	24 81       	ldd	r18, Z+4	; 0x04
     67c:	35 81       	ldd	r19, Z+5	; 0x05
     67e:	46 81       	ldd	r20, Z+6	; 0x06
     680:	57 81       	ldd	r21, Z+7	; 0x07
     682:	cb 01       	movw	r24, r22
     684:	a0 e0       	ldi	r26, 0x00	; 0
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	82 17       	cp	r24, r18
     68a:	93 07       	cpc	r25, r19
     68c:	a4 07       	cpc	r26, r20
     68e:	b5 07       	cpc	r27, r21
     690:	69 f7       	brne	.-38     	; 0x66c <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     692:	26 85       	ldd	r18, Z+14	; 0x0e
     694:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     696:	86 85       	ldd	r24, Z+14	; 0x0e
     698:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     69a:	28 17       	cp	r18, r24
     69c:	39 07       	cpc	r19, r25
     69e:	c9 f7       	brne	.-14     	; 0x692 <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     6a0:	c9 01       	movw	r24, r18
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	84 83       	std	Z+4, r24	; 0x04
     6a8:	95 83       	std	Z+5, r25	; 0x05
     6aa:	a6 83       	std	Z+6, r26	; 0x06
     6ac:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     6ae:	24 81       	ldd	r18, Z+4	; 0x04
     6b0:	35 81       	ldd	r19, Z+5	; 0x05
     6b2:	46 81       	ldd	r20, Z+6	; 0x06
     6b4:	57 81       	ldd	r21, Z+7	; 0x07
     6b6:	ce 01       	movw	r24, r28
     6b8:	a0 e0       	ldi	r26, 0x00	; 0
     6ba:	b0 e0       	ldi	r27, 0x00	; 0
     6bc:	82 0f       	add	r24, r18
     6be:	93 1f       	adc	r25, r19
     6c0:	a4 1f       	adc	r26, r20
     6c2:	b5 1f       	adc	r27, r21
     6c4:	84 83       	std	Z+4, r24	; 0x04
     6c6:	95 83       	std	Z+5, r25	; 0x05
     6c8:	a6 83       	std	Z+6, r26	; 0x06
     6ca:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     6cc:	24 81       	ldd	r18, Z+4	; 0x04
     6ce:	35 81       	ldd	r19, Z+5	; 0x05
     6d0:	46 81       	ldd	r20, Z+6	; 0x06
     6d2:	57 81       	ldd	r21, Z+7	; 0x07
     6d4:	80 81       	ld	r24, Z
     6d6:	91 81       	ldd	r25, Z+1	; 0x01
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	28 17       	cp	r18, r24
     6de:	39 07       	cpc	r19, r25
     6e0:	4a 07       	cpc	r20, r26
     6e2:	5b 07       	cpc	r21, r27
     6e4:	84 f0       	brlt	.+32     	; 0x706 <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     6e6:	24 81       	ldd	r18, Z+4	; 0x04
     6e8:	35 81       	ldd	r19, Z+5	; 0x05
     6ea:	46 81       	ldd	r20, Z+6	; 0x06
     6ec:	57 81       	ldd	r21, Z+7	; 0x07
     6ee:	80 81       	ld	r24, Z
     6f0:	91 81       	ldd	r25, Z+1	; 0x01
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	28 1b       	sub	r18, r24
     6f8:	39 0b       	sbc	r19, r25
     6fa:	4a 0b       	sbc	r20, r26
     6fc:	5b 0b       	sbc	r21, r27
     6fe:	24 83       	std	Z+4, r18	; 0x04
     700:	35 83       	std	Z+5, r19	; 0x05
     702:	46 83       	std	Z+6, r20	; 0x06
     704:	57 83       	std	Z+7, r21	; 0x07
  }
}
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     716:	e0 91 06 02 	lds	r30, 0x0206
     71a:	f0 91 07 02 	lds	r31, 0x0207
     71e:	24 89       	ldd	r18, Z+20	; 0x14
     720:	35 89       	ldd	r19, Z+21	; 0x15
     722:	46 89       	ldd	r20, Z+22	; 0x16
     724:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     726:	84 89       	ldd	r24, Z+20	; 0x14
     728:	95 89       	ldd	r25, Z+21	; 0x15
     72a:	a6 89       	ldd	r26, Z+22	; 0x16
     72c:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     72e:	28 17       	cp	r18, r24
     730:	39 07       	cpc	r19, r25
     732:	4a 07       	cpc	r20, r26
     734:	5b 07       	cpc	r21, r27
     736:	99 f7       	brne	.-26     	; 0x71e <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     738:	7b 01       	movw	r14, r22
     73a:	00 e0       	ldi	r16, 0x00	; 0
     73c:	10 e0       	ldi	r17, 0x00	; 0
     73e:	e2 0e       	add	r14, r18
     740:	f3 1e       	adc	r15, r19
     742:	04 1f       	adc	r16, r20
     744:	15 1f       	adc	r17, r21
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	40 e0       	ldi	r20, 0x00	; 0
     74c:	50 e0       	ldi	r21, 0x00	; 0
     74e:	0d c0       	rjmp	.+26     	; 0x76a <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     750:	24 89       	ldd	r18, Z+20	; 0x14
     752:	35 89       	ldd	r19, Z+21	; 0x15
     754:	46 89       	ldd	r20, Z+22	; 0x16
     756:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     758:	84 89       	ldd	r24, Z+20	; 0x14
     75a:	95 89       	ldd	r25, Z+21	; 0x15
     75c:	a6 89       	ldd	r26, Z+22	; 0x16
     75e:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     760:	28 17       	cp	r18, r24
     762:	39 07       	cpc	r19, r25
     764:	4a 07       	cpc	r20, r26
     766:	5b 07       	cpc	r21, r27
     768:	99 f7       	brne	.-26     	; 0x750 <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     76a:	2e 15       	cp	r18, r14
     76c:	3f 05       	cpc	r19, r15
     76e:	40 07       	cpc	r20, r16
     770:	51 07       	cpc	r21, r17
     772:	74 f3       	brlt	.-36     	; 0x750 <Timebase_Timer_Delay_Seconds+0x44>
	  Timebase_Atomic_Operation_End();
	  #else
	  curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	08 95       	ret

0000077e <Timebase_Window_Timer_Reset>:

/****************************Time Window Functions Start*****************************/

#ifdef TIMEBASE_TIME_WINDOW_CALCULATION
void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     77e:	e0 91 06 02 	lds	r30, 0x0206
     782:	f0 91 07 02 	lds	r31, 0x0207
     786:	11 8e       	std	Z+25, r1	; 0x19
     788:	12 8e       	std	Z+26, r1	; 0x1a
     78a:	13 8e       	std	Z+27, r1	; 0x1b
     78c:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.StartTimeSubSeconds = 0;
     78e:	15 8e       	std	Z+29, r1	; 0x1d
     790:	16 8e       	std	Z+30, r1	; 0x1e
     792:	17 8e       	std	Z+31, r1	; 0x1f
     794:	10 a2       	std	Z+32, r1	; 0x20
  Timebase->Time.Status = COUNTER_STATE_RESET;
     796:	11 a2       	std	Z+33, r1	; 0x21
}
     798:	08 95       	ret

0000079a <Timebase_Window_Timer_Start>:


void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     79a:	e0 91 06 02 	lds	r30, 0x0206
     79e:	f0 91 07 02 	lds	r31, 0x0207
     7a2:	81 a1       	ldd	r24, Z+33	; 0x21
     7a4:	88 23       	and	r24, r24
     7a6:	a1 f4       	brne	.+40     	; 0x7d0 <Timebase_Window_Timer_Start+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     7a8:	f8 94       	cli
uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     7aa:	84 89       	ldd	r24, Z+20	; 0x14
     7ac:	95 89       	ldd	r25, Z+21	; 0x15
     7ae:	a6 89       	ldd	r26, Z+22	; 0x16
     7b0:	b7 89       	ldd	r27, Z+23	; 0x17


void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
     7b2:	81 8f       	std	Z+25, r24	; 0x19
     7b4:	92 8f       	std	Z+26, r25	; 0x1a
     7b6:	a3 8f       	std	Z+27, r26	; 0x1b
     7b8:	b4 8f       	std	Z+28, r27	; 0x1c


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     7ba:	86 85       	ldd	r24, Z+14	; 0x0e
     7bc:	97 85       	ldd	r25, Z+15	; 0x0f

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
     7be:	a0 e0       	ldi	r26, 0x00	; 0
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	85 8f       	std	Z+29, r24	; 0x1d
     7c4:	96 8f       	std	Z+30, r25	; 0x1e
     7c6:	a7 8f       	std	Z+31, r26	; 0x1f
     7c8:	b0 a3       	std	Z+32, r27	; 0x20
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7ca:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	81 a3       	std	Z+33, r24	; 0x21
     7d0:	08 95       	ret

000007d2 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     7d2:	ef 92       	push	r14
     7d4:	ff 92       	push	r15
     7d6:	0f 93       	push	r16
     7d8:	1f 93       	push	r17
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     7de:	c0 91 06 02 	lds	r28, 0x0206
     7e2:	d0 91 07 02 	lds	r29, 0x0207
     7e6:	89 a1       	ldd	r24, Y+33	; 0x21
     7e8:	81 30       	cpi	r24, 0x01	; 1
     7ea:	21 f0       	breq	.+8      	; 0x7f4 <Timebase_Window_Timer_Get_Interval+0x22>
     7ec:	ee 24       	eor	r14, r14
     7ee:	ff 24       	eor	r15, r15
     7f0:	87 01       	movw	r16, r14
     7f2:	25 c0       	rjmp	.+74     	; 0x83e <Timebase_Window_Timer_Get_Interval+0x6c>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     7f4:	f8 94       	cli
uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     7f6:	2c 89       	ldd	r18, Y+20	; 0x14
     7f8:	3d 89       	ldd	r19, Y+21	; 0x15
     7fa:	4e 89       	ldd	r20, Y+22	; 0x16
     7fc:	5f 89       	ldd	r21, Y+23	; 0x17


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     7fe:	8e 85       	ldd	r24, Y+14	; 0x0e
     800:	9f 85       	ldd	r25, Y+15	; 0x0f
int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
     802:	7c 01       	movw	r14, r24
     804:	00 e0       	ldi	r16, 0x00	; 0
     806:	10 e0       	ldi	r17, 0x00	; 0
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     808:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
	curr_s -= Timebase->Time.StartTimeSeconds;
     80a:	89 8d       	ldd	r24, Y+25	; 0x19
     80c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     80e:	ab 8d       	ldd	r26, Y+27	; 0x1b
     810:	bc 8d       	ldd	r27, Y+28	; 0x1c
     812:	28 1b       	sub	r18, r24
     814:	39 0b       	sbc	r19, r25
     816:	4a 0b       	sbc	r20, r26
     818:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     81a:	68 81       	ld	r22, Y
     81c:	79 81       	ldd	r23, Y+1	; 0x01
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
	curr_s += curr_ss;
     826:	2d 8d       	ldd	r18, Y+29	; 0x1d
     828:	3e 8d       	ldd	r19, Y+30	; 0x1e
     82a:	4f 8d       	ldd	r20, Y+31	; 0x1f
     82c:	58 a1       	ldd	r21, Y+32	; 0x20
     82e:	e2 1a       	sub	r14, r18
     830:	f3 0a       	sbc	r15, r19
     832:	04 0b       	sbc	r16, r20
     834:	15 0b       	sbc	r17, r21
     836:	e6 0e       	add	r14, r22
     838:	f7 1e       	adc	r15, r23
     83a:	08 1f       	adc	r16, r24
     83c:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     83e:	b7 01       	movw	r22, r14
     840:	c8 01       	movw	r24, r16
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	08 95       	ret

00000850 <Timebase_Window_Timer_Get_Interval_Reset>:


int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     850:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Timebase_Window_Timer_Get_Interval>
     854:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     856:	e0 91 06 02 	lds	r30, 0x0206
     85a:	f0 91 07 02 	lds	r31, 0x0207
     85e:	81 a1       	ldd	r24, Z+33	; 0x21
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	49 f4       	brne	.+18     	; 0x876 <Timebase_Window_Timer_Get_Interval_Reset+0x26>

/****************************Time Window Functions Start*****************************/

#ifdef TIMEBASE_TIME_WINDOW_CALCULATION
void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     864:	11 8e       	std	Z+25, r1	; 0x19
     866:	12 8e       	std	Z+26, r1	; 0x1a
     868:	13 8e       	std	Z+27, r1	; 0x1b
     86a:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.StartTimeSubSeconds = 0;
     86c:	15 8e       	std	Z+29, r1	; 0x1d
     86e:	16 8e       	std	Z+30, r1	; 0x1e
     870:	17 8e       	std	Z+31, r1	; 0x1f
     872:	10 a2       	std	Z+32, r1	; 0x20
  Timebase->Time.Status = COUNTER_STATE_RESET;
     874:	11 a2       	std	Z+33, r1	; 0x21
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     876:	82 2f       	mov	r24, r18
     878:	08 95       	ret

0000087a <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     87a:	e0 91 06 02 	lds	r30, 0x0206
     87e:	f0 91 07 02 	lds	r31, 0x0207
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	25 e1       	ldi	r18, 0x15	; 21
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	ac 01       	movw	r20, r24
     88a:	42 9f       	mul	r20, r18
     88c:	c0 01       	movw	r24, r0
     88e:	43 9f       	mul	r20, r19
     890:	90 0d       	add	r25, r0
     892:	52 9f       	mul	r21, r18
     894:	90 0d       	add	r25, r0
     896:	11 24       	eor	r1, r1
     898:	e8 0f       	add	r30, r24
     89a:	f9 1f       	adc	r31, r25
     89c:	83 a1       	ldd	r24, Z+35	; 0x23
     89e:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     8a0:	8f 70       	andi	r24, 0x0F	; 15
     8a2:	08 95       	ret

000008a4 <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     8a4:	e0 91 06 02 	lds	r30, 0x0206
     8a8:	f0 91 07 02 	lds	r31, 0x0207
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	25 e1       	ldi	r18, 0x15	; 21
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	ac 01       	movw	r20, r24
     8b4:	42 9f       	mul	r20, r18
     8b6:	c0 01       	movw	r24, r0
     8b8:	43 9f       	mul	r20, r19
     8ba:	90 0d       	add	r25, r0
     8bc:	52 9f       	mul	r21, r18
     8be:	90 0d       	add	r25, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	e8 0f       	add	r30, r24
     8c4:	f9 1f       	adc	r31, r25
     8c6:	6f 70       	andi	r22, 0x0F	; 15
     8c8:	66 0f       	add	r22, r22
     8ca:	83 a1       	ldd	r24, Z+35	; 0x23
     8cc:	81 7e       	andi	r24, 0xE1	; 225
     8ce:	86 2b       	or	r24, r22
     8d0:	83 a3       	std	Z+35, r24	; 0x23
}
     8d2:	08 95       	ret

000008d4 <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     8d4:	e0 91 06 02 	lds	r30, 0x0206
     8d8:	f0 91 07 02 	lds	r31, 0x0207
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	25 e1       	ldi	r18, 0x15	; 21
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	ac 01       	movw	r20, r24
     8e4:	42 9f       	mul	r20, r18
     8e6:	c0 01       	movw	r24, r0
     8e8:	43 9f       	mul	r20, r19
     8ea:	90 0d       	add	r25, r0
     8ec:	52 9f       	mul	r21, r18
     8ee:	90 0d       	add	r25, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	e8 0f       	add	r30, r24
     8f4:	f9 1f       	adc	r31, r25
     8f6:	df 01       	movw	r26, r30
     8f8:	9c 96       	adiw	r26, 0x2c	; 44
     8fa:	64 a5       	ldd	r22, Z+44	; 0x2c
     8fc:	11 96       	adiw	r26, 0x01	; 1
     8fe:	7c 91       	ld	r23, X
     900:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     902:	12 96       	adiw	r26, 0x02	; 2
     904:	8c 91       	ld	r24, X
     906:	12 97       	sbiw	r26, 0x02	; 2
     908:	13 96       	adiw	r26, 0x03	; 3
     90a:	9c 91       	ld	r25, X
     90c:	08 95       	ret

0000090e <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     90e:	e0 91 06 02 	lds	r30, 0x0206
     912:	f0 91 07 02 	lds	r31, 0x0207
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	25 e1       	ldi	r18, 0x15	; 21
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	dc 01       	movw	r26, r24
     91e:	a2 9f       	mul	r26, r18
     920:	c0 01       	movw	r24, r0
     922:	a3 9f       	mul	r26, r19
     924:	90 0d       	add	r25, r0
     926:	b2 9f       	mul	r27, r18
     928:	90 0d       	add	r25, r0
     92a:	11 24       	eor	r1, r1
     92c:	e8 0f       	add	r30, r24
     92e:	f9 1f       	adc	r31, r25
     930:	44 a7       	std	Z+44, r20	; 0x2c
     932:	55 a7       	std	Z+45, r21	; 0x2d
     934:	66 a7       	std	Z+46, r22	; 0x2e
     936:	77 a7       	std	Z+47, r23	; 0x2f
}
     938:	08 95       	ret

0000093a <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     93a:	e0 91 06 02 	lds	r30, 0x0206
     93e:	f0 91 07 02 	lds	r31, 0x0207
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	25 e1       	ldi	r18, 0x15	; 21
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	ac 01       	movw	r20, r24
     94a:	42 9f       	mul	r20, r18
     94c:	c0 01       	movw	r24, r0
     94e:	43 9f       	mul	r20, r19
     950:	90 0d       	add	r25, r0
     952:	52 9f       	mul	r21, r18
     954:	90 0d       	add	r25, r0
     956:	11 24       	eor	r1, r1
     958:	e8 0f       	add	r30, r24
     95a:	f9 1f       	adc	r31, r25
     95c:	df 01       	movw	r26, r30
     95e:	94 96       	adiw	r26, 0x24	; 36
     960:	64 a1       	ldd	r22, Z+36	; 0x24
     962:	11 96       	adiw	r26, 0x01	; 1
     964:	7c 91       	ld	r23, X
     966:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     968:	12 96       	adiw	r26, 0x02	; 2
     96a:	8c 91       	ld	r24, X
     96c:	12 97       	sbiw	r26, 0x02	; 2
     96e:	13 96       	adiw	r26, 0x03	; 3
     970:	9c 91       	ld	r25, X
     972:	08 95       	ret

00000974 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     974:	e0 91 06 02 	lds	r30, 0x0206
     978:	f0 91 07 02 	lds	r31, 0x0207
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	25 e1       	ldi	r18, 0x15	; 21
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	ac 01       	movw	r20, r24
     984:	42 9f       	mul	r20, r18
     986:	c0 01       	movw	r24, r0
     988:	43 9f       	mul	r20, r19
     98a:	90 0d       	add	r25, r0
     98c:	52 9f       	mul	r21, r18
     98e:	90 0d       	add	r25, r0
     990:	11 24       	eor	r1, r1
     992:	e8 0f       	add	r30, r24
     994:	f9 1f       	adc	r31, r25
     996:	df 01       	movw	r26, r30
     998:	98 96       	adiw	r26, 0x28	; 40
     99a:	60 a5       	ldd	r22, Z+40	; 0x28
     99c:	11 96       	adiw	r26, 0x01	; 1
     99e:	7c 91       	ld	r23, X
     9a0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     9a2:	12 96       	adiw	r26, 0x02	; 2
     9a4:	8c 91       	ld	r24, X
     9a6:	12 97       	sbiw	r26, 0x02	; 2
     9a8:	13 96       	adiw	r26, 0x03	; 3
     9aa:	9c 91       	ld	r25, X
     9ac:	08 95       	ret

000009ae <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     9ae:	e0 91 06 02 	lds	r30, 0x0206
     9b2:	f0 91 07 02 	lds	r31, 0x0207
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	25 e1       	ldi	r18, 0x15	; 21
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	dc 01       	movw	r26, r24
     9be:	a2 9f       	mul	r26, r18
     9c0:	c0 01       	movw	r24, r0
     9c2:	a3 9f       	mul	r26, r19
     9c4:	90 0d       	add	r25, r0
     9c6:	b2 9f       	mul	r27, r18
     9c8:	90 0d       	add	r25, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	e8 0f       	add	r30, r24
     9ce:	f9 1f       	adc	r31, r25
     9d0:	44 a3       	std	Z+36, r20	; 0x24
     9d2:	55 a3       	std	Z+37, r21	; 0x25
     9d4:	66 a3       	std	Z+38, r22	; 0x26
     9d6:	77 a3       	std	Z+39, r23	; 0x27
}
     9d8:	08 95       	ret

000009da <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     9da:	e0 91 06 02 	lds	r30, 0x0206
     9de:	f0 91 07 02 	lds	r31, 0x0207
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	25 e1       	ldi	r18, 0x15	; 21
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	dc 01       	movw	r26, r24
     9ea:	a2 9f       	mul	r26, r18
     9ec:	c0 01       	movw	r24, r0
     9ee:	a3 9f       	mul	r26, r19
     9f0:	90 0d       	add	r25, r0
     9f2:	b2 9f       	mul	r27, r18
     9f4:	90 0d       	add	r25, r0
     9f6:	11 24       	eor	r1, r1
     9f8:	e8 0f       	add	r30, r24
     9fa:	f9 1f       	adc	r31, r25
     9fc:	40 a7       	std	Z+40, r20	; 0x28
     9fe:	51 a7       	std	Z+41, r21	; 0x29
     a00:	62 a7       	std	Z+42, r22	; 0x2a
     a02:	73 a7       	std	Z+43, r23	; 0x2b
}
     a04:	08 95       	ret

00000a06 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     a06:	e0 91 06 02 	lds	r30, 0x0206
     a0a:	f0 91 07 02 	lds	r31, 0x0207
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	25 e1       	ldi	r18, 0x15	; 21
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	ac 01       	movw	r20, r24
     a16:	42 9f       	mul	r20, r18
     a18:	c0 01       	movw	r24, r0
     a1a:	43 9f       	mul	r20, r19
     a1c:	90 0d       	add	r25, r0
     a1e:	52 9f       	mul	r21, r18
     a20:	90 0d       	add	r25, r0
     a22:	11 24       	eor	r1, r1
     a24:	e8 0f       	add	r30, r24
     a26:	f9 1f       	adc	r31, r25
     a28:	df 01       	movw	r26, r30
     a2a:	d0 96       	adiw	r26, 0x30	; 48
     a2c:	60 a9       	ldd	r22, Z+48	; 0x30
     a2e:	11 96       	adiw	r26, 0x01	; 1
     a30:	7c 91       	ld	r23, X
     a32:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     a34:	12 96       	adiw	r26, 0x02	; 2
     a36:	8c 91       	ld	r24, X
     a38:	12 97       	sbiw	r26, 0x02	; 2
     a3a:	13 96       	adiw	r26, 0x03	; 3
     a3c:	9c 91       	ld	r25, X
     a3e:	08 95       	ret

00000a40 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     a40:	e0 91 06 02 	lds	r30, 0x0206
     a44:	f0 91 07 02 	lds	r31, 0x0207
     a48:	28 2f       	mov	r18, r24
     a4a:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     a4c:	77 ff       	sbrs	r23, 7
     a4e:	11 c0       	rjmp	.+34     	; 0xa72 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     a50:	85 e1       	ldi	r24, 0x15	; 21
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	ac 01       	movw	r20, r24
     a56:	24 9f       	mul	r18, r20
     a58:	c0 01       	movw	r24, r0
     a5a:	25 9f       	mul	r18, r21
     a5c:	90 0d       	add	r25, r0
     a5e:	34 9f       	mul	r19, r20
     a60:	90 0d       	add	r25, r0
     a62:	11 24       	eor	r1, r1
     a64:	e8 0f       	add	r30, r24
     a66:	f9 1f       	adc	r31, r25
     a68:	10 aa       	std	Z+48, r1	; 0x30
     a6a:	11 aa       	std	Z+49, r1	; 0x31
     a6c:	12 aa       	std	Z+50, r1	; 0x32
     a6e:	13 aa       	std	Z+51, r1	; 0x33
     a70:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     a72:	85 e1       	ldi	r24, 0x15	; 21
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	dc 01       	movw	r26, r24
     a78:	2a 9f       	mul	r18, r26
     a7a:	c0 01       	movw	r24, r0
     a7c:	2b 9f       	mul	r18, r27
     a7e:	90 0d       	add	r25, r0
     a80:	3a 9f       	mul	r19, r26
     a82:	90 0d       	add	r25, r0
     a84:	11 24       	eor	r1, r1
     a86:	e8 0f       	add	r30, r24
     a88:	f9 1f       	adc	r31, r25
     a8a:	40 ab       	std	Z+48, r20	; 0x30
     a8c:	51 ab       	std	Z+49, r21	; 0x31
     a8e:	62 ab       	std	Z+50, r22	; 0x32
     a90:	73 ab       	std	Z+51, r23	; 0x33
     a92:	08 95       	ret

00000a94 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     a94:	e0 91 06 02 	lds	r30, 0x0206
     a98:	f0 91 07 02 	lds	r31, 0x0207
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	25 e1       	ldi	r18, 0x15	; 21
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	ac 01       	movw	r20, r24
     aa4:	42 9f       	mul	r20, r18
     aa6:	c0 01       	movw	r24, r0
     aa8:	43 9f       	mul	r20, r19
     aaa:	90 0d       	add	r25, r0
     aac:	52 9f       	mul	r21, r18
     aae:	90 0d       	add	r25, r0
     ab0:	11 24       	eor	r1, r1
     ab2:	e8 0f       	add	r30, r24
     ab4:	f9 1f       	adc	r31, r25
     ab6:	83 a1       	ldd	r24, Z+35	; 0x23
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     ab8:	81 70       	andi	r24, 0x01	; 1
     aba:	08 95       	ret

00000abc <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     abc:	e0 91 06 02 	lds	r30, 0x0206
     ac0:	f0 91 07 02 	lds	r31, 0x0207
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	25 e1       	ldi	r18, 0x15	; 21
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	ac 01       	movw	r20, r24
     acc:	42 9f       	mul	r20, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	43 9f       	mul	r20, r19
     ad2:	90 0d       	add	r25, r0
     ad4:	52 9f       	mul	r21, r18
     ad6:	90 0d       	add	r25, r0
     ad8:	11 24       	eor	r1, r1
     ada:	e8 0f       	add	r30, r24
     adc:	f9 1f       	adc	r31, r25
     ade:	83 a1       	ldd	r24, Z+35	; 0x23
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	83 a3       	std	Z+35, r24	; 0x23
}
     ae4:	08 95       	ret

00000ae6 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     ae6:	e0 91 06 02 	lds	r30, 0x0206
     aea:	f0 91 07 02 	lds	r31, 0x0207
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	25 e1       	ldi	r18, 0x15	; 21
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	ac 01       	movw	r20, r24
     af6:	42 9f       	mul	r20, r18
     af8:	c0 01       	movw	r24, r0
     afa:	43 9f       	mul	r20, r19
     afc:	90 0d       	add	r25, r0
     afe:	52 9f       	mul	r21, r18
     b00:	90 0d       	add	r25, r0
     b02:	11 24       	eor	r1, r1
     b04:	e8 0f       	add	r30, r24
     b06:	f9 1f       	adc	r31, r25
     b08:	83 a1       	ldd	r24, Z+35	; 0x23
     b0a:	8e 7f       	andi	r24, 0xFE	; 254
     b0c:	83 a3       	std	Z+35, r24	; 0x23
}
     b0e:	08 95       	ret

00000b10 <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     b10:	e0 91 06 02 	lds	r30, 0x0206
     b14:	f0 91 07 02 	lds	r31, 0x0207
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	25 e1       	ldi	r18, 0x15	; 21
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	ac 01       	movw	r20, r24
     b20:	42 9f       	mul	r20, r18
     b22:	c0 01       	movw	r24, r0
     b24:	43 9f       	mul	r20, r19
     b26:	90 0d       	add	r25, r0
     b28:	52 9f       	mul	r21, r18
     b2a:	90 0d       	add	r25, r0
     b2c:	11 24       	eor	r1, r1
     b2e:	e8 0f       	add	r30, r24
     b30:	f9 1f       	adc	r31, r25
     b32:	df 01       	movw	r26, r30
     b34:	d4 96       	adiw	r26, 0x34	; 52
     b36:	64 a9       	ldd	r22, Z+52	; 0x34
     b38:	11 96       	adiw	r26, 0x01	; 1
     b3a:	7c 91       	ld	r23, X
     b3c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     b3e:	12 96       	adiw	r26, 0x02	; 2
     b40:	8c 91       	ld	r24, X
     b42:	12 97       	sbiw	r26, 0x02	; 2
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 91       	ld	r25, X
     b48:	08 95       	ret

00000b4a <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b4a:	e0 91 06 02 	lds	r30, 0x0206
     b4e:	f0 91 07 02 	lds	r31, 0x0207
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	25 e1       	ldi	r18, 0x15	; 21
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	dc 01       	movw	r26, r24
     b5a:	a2 9f       	mul	r26, r18
     b5c:	c0 01       	movw	r24, r0
     b5e:	a3 9f       	mul	r26, r19
     b60:	90 0d       	add	r25, r0
     b62:	b2 9f       	mul	r27, r18
     b64:	90 0d       	add	r25, r0
     b66:	11 24       	eor	r1, r1
     b68:	e8 0f       	add	r30, r24
     b6a:	f9 1f       	adc	r31, r25
     b6c:	44 ab       	std	Z+52, r20	; 0x34
     b6e:	55 ab       	std	Z+53, r21	; 0x35
     b70:	66 ab       	std	Z+54, r22	; 0x36
     b72:	77 ab       	std	Z+55, r23	; 0x37
}
     b74:	08 95       	ret

00000b76 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b76:	e0 91 06 02 	lds	r30, 0x0206
     b7a:	f0 91 07 02 	lds	r31, 0x0207
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	25 e1       	ldi	r18, 0x15	; 21
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	ac 01       	movw	r20, r24
     b86:	42 9f       	mul	r20, r18
     b88:	c0 01       	movw	r24, r0
     b8a:	43 9f       	mul	r20, r19
     b8c:	90 0d       	add	r25, r0
     b8e:	52 9f       	mul	r21, r18
     b90:	90 0d       	add	r25, r0
     b92:	11 24       	eor	r1, r1
     b94:	e8 0f       	add	r30, r24
     b96:	f9 1f       	adc	r31, r25
     b98:	10 a6       	std	Z+40, r1	; 0x28
     b9a:	11 a6       	std	Z+41, r1	; 0x29
     b9c:	12 a6       	std	Z+42, r1	; 0x2a
     b9e:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     ba0:	14 a2       	std	Z+36, r1	; 0x24
     ba2:	15 a2       	std	Z+37, r1	; 0x25
     ba4:	16 a2       	std	Z+38, r1	; 0x26
     ba6:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ba8:	14 a6       	std	Z+44, r1	; 0x2c
     baa:	15 a6       	std	Z+45, r1	; 0x2d
     bac:	16 a6       	std	Z+46, r1	; 0x2e
     bae:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bb0:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     bb2:	80 7e       	andi	r24, 0xE0	; 224
     bb4:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     bb6:	14 aa       	std	Z+52, r1	; 0x34
     bb8:	15 aa       	std	Z+53, r1	; 0x35
     bba:	16 aa       	std	Z+54, r1	; 0x36
     bbc:	17 aa       	std	Z+55, r1	; 0x37
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     bbe:	08 95       	ret

00000bc0 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     bc0:	e0 91 06 02 	lds	r30, 0x0206
     bc4:	f0 91 07 02 	lds	r31, 0x0207
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	25 e1       	ldi	r18, 0x15	; 21
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	ac 01       	movw	r20, r24
     bd0:	42 9f       	mul	r20, r18
     bd2:	c0 01       	movw	r24, r0
     bd4:	43 9f       	mul	r20, r19
     bd6:	90 0d       	add	r25, r0
     bd8:	52 9f       	mul	r21, r18
     bda:	90 0d       	add	r25, r0
     bdc:	11 24       	eor	r1, r1
     bde:	e8 0f       	add	r30, r24
     be0:	f9 1f       	adc	r31, r25
     be2:	10 a6       	std	Z+40, r1	; 0x28
     be4:	11 a6       	std	Z+41, r1	; 0x29
     be6:	12 a6       	std	Z+42, r1	; 0x2a
     be8:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     bea:	14 a2       	std	Z+36, r1	; 0x24
     bec:	15 a2       	std	Z+37, r1	; 0x25
     bee:	16 a2       	std	Z+38, r1	; 0x26
     bf0:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     bf2:	14 a6       	std	Z+44, r1	; 0x2c
     bf4:	15 a6       	std	Z+45, r1	; 0x2d
     bf6:	16 a6       	std	Z+46, r1	; 0x2e
     bf8:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bfa:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     bfc:	80 7e       	andi	r24, 0xE0	; 224
     bfe:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     c00:	14 aa       	std	Z+52, r1	; 0x34
     c02:	15 aa       	std	Z+53, r1	; 0x35
     c04:	16 aa       	std	Z+54, r1	; 0x36
     c06:	17 aa       	std	Z+55, r1	; 0x37
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     c08:	08 95       	ret

00000c0a <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c0a:	e0 91 06 02 	lds	r30, 0x0206
     c0e:	f0 91 07 02 	lds	r31, 0x0207
     c12:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     c14:	25 e1       	ldi	r18, 0x15	; 21
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	ac 01       	movw	r20, r24
     c1a:	42 9f       	mul	r20, r18
     c1c:	c0 01       	movw	r24, r0
     c1e:	43 9f       	mul	r20, r19
     c20:	90 0d       	add	r25, r0
     c22:	52 9f       	mul	r21, r18
     c24:	90 0d       	add	r25, r0
     c26:	11 24       	eor	r1, r1
     c28:	e8 0f       	add	r30, r24
     c2a:	f9 1f       	adc	r31, r25
     c2c:	93 a1       	ldd	r25, Z+35	; 0x23
     c2e:	89 2f       	mov	r24, r25
     c30:	86 95       	lsr	r24
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	81 30       	cpi	r24, 0x01	; 1
     c36:	19 f0       	breq	.+6      	; 0xc3e <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c38:	91 7e       	andi	r25, 0xE1	; 225
     c3a:	92 60       	ori	r25, 0x02	; 2
     c3c:	93 a3       	std	Z+35, r25	; 0x23
     c3e:	08 95       	ret

00000c40 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c40:	e0 91 06 02 	lds	r30, 0x0206
     c44:	f0 91 07 02 	lds	r31, 0x0207
     c48:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     c4a:	25 e1       	ldi	r18, 0x15	; 21
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	ac 01       	movw	r20, r24
     c50:	42 9f       	mul	r20, r18
     c52:	c0 01       	movw	r24, r0
     c54:	43 9f       	mul	r20, r19
     c56:	90 0d       	add	r25, r0
     c58:	52 9f       	mul	r21, r18
     c5a:	90 0d       	add	r25, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	e8 0f       	add	r30, r24
     c60:	f9 1f       	adc	r31, r25
     c62:	93 a1       	ldd	r25, Z+35	; 0x23
     c64:	89 2f       	mov	r24, r25
     c66:	86 95       	lsr	r24
     c68:	8f 70       	andi	r24, 0x0F	; 15
     c6a:	82 30       	cpi	r24, 0x02	; 2
     c6c:	19 f0       	breq	.+6      	; 0xc74 <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c6e:	91 7e       	andi	r25, 0xE1	; 225
     c70:	94 60       	ori	r25, 0x04	; 4
     c72:	93 a3       	std	Z+35, r25	; 0x23
     c74:	08 95       	ret

00000c76 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     c76:	2f 92       	push	r2
     c78:	3f 92       	push	r3
     c7a:	4f 92       	push	r4
     c7c:	5f 92       	push	r5
     c7e:	6f 92       	push	r6
     c80:	7f 92       	push	r7
     c82:	8f 92       	push	r8
     c84:	9f 92       	push	r9
     c86:	af 92       	push	r10
     c88:	bf 92       	push	r11
     c8a:	cf 92       	push	r12
     c8c:	df 92       	push	r13
     c8e:	ef 92       	push	r14
     c90:	ff 92       	push	r15
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	df 93       	push	r29
     c98:	cf 93       	push	r28
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	28 97       	sbiw	r28, 0x08	; 8
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	1a 01       	movw	r2, r20
     cac:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     cae:	20 91 06 02 	lds	r18, 0x0206
     cb2:	30 91 07 02 	lds	r19, 0x0207
     cb6:	38 87       	std	Y+8, r19	; 0x08
     cb8:	2f 83       	std	Y+7, r18	; 0x07
     cba:	a8 2f       	mov	r26, r24
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ba 83       	std	Y+2, r27	; 0x02
     cc0:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     cc2:	85 e1       	ldi	r24, 0x15	; 21
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a8 9f       	mul	r26, r24
     cc8:	f0 01       	movw	r30, r0
     cca:	a9 9f       	mul	r26, r25
     ccc:	f0 0d       	add	r31, r0
     cce:	b8 9f       	mul	r27, r24
     cd0:	f0 0d       	add	r31, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	e2 0f       	add	r30, r18
     cd6:	f3 1f       	adc	r31, r19
     cd8:	83 a1       	ldd	r24, Z+35	; 0x23
     cda:	86 95       	lsr	r24
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	09 f0       	breq	.+2      	; 0xce2 <Timebase_DownCounter_SS_Set_Securely+0x6c>
     ce0:	80 c0       	rjmp	.+256    	; 0xde2 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ce2:	44 a7       	std	Z+44, r20	; 0x2c
     ce4:	55 a7       	std	Z+45, r21	; 0x2d
     ce6:	66 a7       	std	Z+46, r22	; 0x2e
     ce8:	77 a7       	std	Z+47, r23	; 0x2f
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     cea:	f9 01       	movw	r30, r18
     cec:	c0 84       	ldd	r12, Z+8	; 0x08
     cee:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     cf0:	d9 01       	movw	r26, r18
     cf2:	1a 96       	adiw	r26, 0x0a	; 10
     cf4:	8d 91       	ld	r24, X+
     cf6:	9d 91       	ld	r25, X+
     cf8:	0d 90       	ld	r0, X+
     cfa:	bc 91       	ld	r27, X
     cfc:	a0 2d       	mov	r26, r0
     cfe:	8b 83       	std	Y+3, r24	; 0x03
     d00:	9c 83       	std	Y+4, r25	; 0x04
     d02:	ad 83       	std	Y+5, r26	; 0x05
     d04:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     d06:	20 81       	ld	r18, Z
     d08:	31 81       	ldd	r19, Z+1	; 0x01
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	c2 01       	movw	r24, r4
     d10:	b1 01       	movw	r22, r2
     d12:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     d16:	7b 01       	movw	r14, r22
     d18:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     d1a:	ef 81       	ldd	r30, Y+7	; 0x07
     d1c:	f8 85       	ldd	r31, Y+8	; 0x08
     d1e:	20 81       	ld	r18, Z
     d20:	31 81       	ldd	r19, Z+1	; 0x01
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	c2 01       	movw	r24, r4
     d28:	b1 01       	movw	r22, r2
     d2a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     d2e:	c9 01       	movw	r24, r18
     d30:	da 01       	movw	r26, r20
     d32:	3c 01       	movw	r6, r24
     d34:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     d36:	56 01       	movw	r10, r12
     d38:	cc 24       	eor	r12, r12
     d3a:	dd 24       	eor	r13, r13
     d3c:	ae 0c       	add	r10, r14
     d3e:	bf 1c       	adc	r11, r15
     d40:	c0 1e       	adc	r12, r16
     d42:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     d44:	af 81       	ldd	r26, Y+7	; 0x07
     d46:	b8 85       	ldd	r27, Y+8	; 0x08
     d48:	8d 91       	ld	r24, X+
     d4a:	9c 91       	ld	r25, X
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	a8 16       	cp	r10, r24
     d52:	b9 06       	cpc	r11, r25
     d54:	ca 06       	cpc	r12, r26
     d56:	db 06       	cpc	r13, r27
     d58:	a4 f0       	brlt	.+40     	; 0xd82 <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     d5a:	08 94       	sec
     d5c:	61 1c       	adc	r6, r1
     d5e:	71 1c       	adc	r7, r1
     d60:	81 1c       	adc	r8, r1
     d62:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     d64:	ef 81       	ldd	r30, Y+7	; 0x07
     d66:	f8 85       	ldd	r31, Y+8	; 0x08
     d68:	20 81       	ld	r18, Z
     d6a:	31 81       	ldd	r19, Z+1	; 0x01
     d6c:	40 e0       	ldi	r20, 0x00	; 0
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	c6 01       	movw	r24, r12
     d72:	b5 01       	movw	r22, r10
     d74:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     d78:	ac 01       	movw	r20, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	da 01       	movw	r26, r20
     d7e:	5c 01       	movw	r10, r24
     d80:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     d82:	85 e1       	ldi	r24, 0x15	; 21
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	29 81       	ldd	r18, Y+1	; 0x01
     d88:	3a 81       	ldd	r19, Y+2	; 0x02
     d8a:	28 9f       	mul	r18, r24
     d8c:	a0 01       	movw	r20, r0
     d8e:	29 9f       	mul	r18, r25
     d90:	50 0d       	add	r21, r0
     d92:	38 9f       	mul	r19, r24
     d94:	50 0d       	add	r21, r0
     d96:	11 24       	eor	r1, r1
     d98:	8f 81       	ldd	r24, Y+7	; 0x07
     d9a:	98 85       	ldd	r25, Y+8	; 0x08
     d9c:	48 0f       	add	r20, r24
     d9e:	59 1f       	adc	r21, r25
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	9c 81       	ldd	r25, Y+4	; 0x04
     da4:	ad 81       	ldd	r26, Y+5	; 0x05
     da6:	be 81       	ldd	r27, Y+6	; 0x06
     da8:	86 0d       	add	r24, r6
     daa:	97 1d       	adc	r25, r7
     dac:	a8 1d       	adc	r26, r8
     dae:	b9 1d       	adc	r27, r9
     db0:	fa 01       	movw	r30, r20
     db2:	84 a3       	std	Z+36, r24	; 0x24
     db4:	95 a3       	std	Z+37, r25	; 0x25
     db6:	a6 a3       	std	Z+38, r26	; 0x26
     db8:	b7 a3       	std	Z+39, r27	; 0x27
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     dba:	da 01       	movw	r26, r20
     dbc:	98 96       	adiw	r26, 0x28	; 40
     dbe:	ad 92       	st	X+, r10
     dc0:	bd 92       	st	X+, r11
     dc2:	cd 92       	st	X+, r12
     dc4:	dc 92       	st	X, r13
     dc6:	9b 97       	sbiw	r26, 0x2b	; 43
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     dc8:	24 aa       	std	Z+52, r2	; 0x34
     dca:	35 aa       	std	Z+53, r3	; 0x35
     dcc:	46 aa       	std	Z+54, r4	; 0x36
     dce:	57 aa       	std	Z+55, r5	; 0x37
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     dd0:	93 a1       	ldd	r25, Z+35	; 0x23
     dd2:	89 2f       	mov	r24, r25
     dd4:	86 95       	lsr	r24
     dd6:	8f 70       	andi	r24, 0x0F	; 15
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	19 f0       	breq	.+6      	; 0xde2 <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     ddc:	91 7e       	andi	r25, 0xE1	; 225
     dde:	92 60       	ori	r25, 0x02	; 2
     de0:	93 a3       	std	Z+35, r25	; 0x23
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     de2:	28 96       	adiw	r28, 0x08	; 8
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	cd bf       	out	0x3d, r28	; 61
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	df 90       	pop	r13
     dfc:	cf 90       	pop	r12
     dfe:	bf 90       	pop	r11
     e00:	af 90       	pop	r10
     e02:	9f 90       	pop	r9
     e04:	8f 90       	pop	r8
     e06:	7f 90       	pop	r7
     e08:	6f 90       	pop	r6
     e0a:	5f 90       	pop	r5
     e0c:	4f 90       	pop	r4
     e0e:	3f 90       	pop	r3
     e10:	2f 90       	pop	r2
     e12:	08 95       	ret

00000e14 <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	7a 01       	movw	r14, r20
     e22:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     e24:	e0 91 06 02 	lds	r30, 0x0206
     e28:	f0 91 07 02 	lds	r31, 0x0207
     e2c:	48 2f       	mov	r20, r24
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	25 e1       	ldi	r18, 0x15	; 21
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	42 9f       	mul	r20, r18
     e36:	60 01       	movw	r12, r0
     e38:	43 9f       	mul	r20, r19
     e3a:	d0 0c       	add	r13, r0
     e3c:	52 9f       	mul	r21, r18
     e3e:	d0 0c       	add	r13, r0
     e40:	11 24       	eor	r1, r1
     e42:	ec 0d       	add	r30, r12
     e44:	fd 1d       	adc	r31, r13
     e46:	10 a6       	std	Z+40, r1	; 0x28
     e48:	11 a6       	std	Z+41, r1	; 0x29
     e4a:	12 a6       	std	Z+42, r1	; 0x2a
     e4c:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e4e:	14 a2       	std	Z+36, r1	; 0x24
     e50:	15 a2       	std	Z+37, r1	; 0x25
     e52:	16 a2       	std	Z+38, r1	; 0x26
     e54:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e56:	14 a6       	std	Z+44, r1	; 0x2c
     e58:	15 a6       	std	Z+45, r1	; 0x2d
     e5a:	16 a6       	std	Z+46, r1	; 0x2e
     e5c:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e5e:	93 a1       	ldd	r25, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e60:	90 7e       	andi	r25, 0xE0	; 224
     e62:	93 a3       	std	Z+35, r25	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e64:	14 aa       	std	Z+52, r1	; 0x34
     e66:	15 aa       	std	Z+53, r1	; 0x35
     e68:	16 aa       	std	Z+54, r1	; 0x36
     e6a:	17 aa       	std	Z+55, r1	; 0x37
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     e6c:	b8 01       	movw	r22, r16
     e6e:	a7 01       	movw	r20, r14
     e70:	0e 94 3b 06 	call	0xc76	; 0xc76 <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e74:	e0 91 06 02 	lds	r30, 0x0206
     e78:	f0 91 07 02 	lds	r31, 0x0207
     e7c:	ec 0d       	add	r30, r12
     e7e:	fd 1d       	adc	r31, r13
     e80:	e4 aa       	std	Z+52, r14	; 0x34
     e82:	f5 aa       	std	Z+53, r15	; 0x35
     e84:	06 ab       	std	Z+54, r16	; 0x36
     e86:	17 ab       	std	Z+55, r17	; 0x37

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     e88:	1f 91       	pop	r17
     e8a:	0f 91       	pop	r16
     e8c:	ff 90       	pop	r15
     e8e:	ef 90       	pop	r14
     e90:	df 90       	pop	r13
     e92:	cf 90       	pop	r12
     e94:	08 95       	ret

00000e96 <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     e96:	2f 92       	push	r2
     e98:	3f 92       	push	r3
     e9a:	4f 92       	push	r4
     e9c:	5f 92       	push	r5
     e9e:	6f 92       	push	r6
     ea0:	7f 92       	push	r7
     ea2:	8f 92       	push	r8
     ea4:	9f 92       	push	r9
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     eba:	e0 91 06 02 	lds	r30, 0x0206
     ebe:	f0 91 07 02 	lds	r31, 0x0207
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	25 e1       	ldi	r18, 0x15	; 21
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	82 9f       	mul	r24, r18
     eca:	e0 01       	movw	r28, r0
     ecc:	83 9f       	mul	r24, r19
     ece:	d0 0d       	add	r29, r0
     ed0:	92 9f       	mul	r25, r18
     ed2:	d0 0d       	add	r29, r0
     ed4:	11 24       	eor	r1, r1
     ed6:	ce 0f       	add	r28, r30
     ed8:	df 1f       	adc	r29, r31
     eda:	8b a1       	ldd	r24, Y+35	; 0x23
     edc:	86 95       	lsr	r24
     ede:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <Timebase_DownCounter_SS_Update+0x50>
     ee4:	48 c0       	rjmp	.+144    	; 0xf76 <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ee6:	e0 84       	ldd	r14, Z+8	; 0x08
     ee8:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     eea:	00 e0       	ldi	r16, 0x00	; 0
     eec:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     eee:	82 85       	ldd	r24, Z+10	; 0x0a
     ef0:	93 85       	ldd	r25, Z+11	; 0x0b
     ef2:	a4 85       	ldd	r26, Z+12	; 0x0c
     ef4:	b5 85       	ldd	r27, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     ef6:	2c a1       	ldd	r18, Y+36	; 0x24
     ef8:	3d a1       	ldd	r19, Y+37	; 0x25
     efa:	4e a1       	ldd	r20, Y+38	; 0x26
     efc:	5f a1       	ldd	r21, Y+39	; 0x27
     efe:	28 1b       	sub	r18, r24
     f00:	39 0b       	sbc	r19, r25
     f02:	4a 0b       	sbc	r20, r26
     f04:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     f06:	60 81       	ld	r22, Z
     f08:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
     f12:	6e 19       	sub	r22, r14
     f14:	7f 09       	sbc	r23, r15
     f16:	80 0b       	sbc	r24, r16
     f18:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     f1a:	28 a5       	ldd	r18, Y+40	; 0x28
     f1c:	39 a5       	ldd	r19, Y+41	; 0x29
     f1e:	4a a5       	ldd	r20, Y+42	; 0x2a
     f20:	5b a5       	ldd	r21, Y+43	; 0x2b
     f22:	62 0f       	add	r22, r18
     f24:	73 1f       	adc	r23, r19
     f26:	84 1f       	adc	r24, r20
     f28:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     f2a:	6c a7       	std	Y+44, r22	; 0x2c
     f2c:	7d a7       	std	Y+45, r23	; 0x2d
     f2e:	8e a7       	std	Y+46, r24	; 0x2e
     f30:	9f a7       	std	Y+47, r25	; 0x2f
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     f32:	16 16       	cp	r1, r22
     f34:	17 06       	cpc	r1, r23
     f36:	18 06       	cpc	r1, r24
     f38:	19 06       	cpc	r1, r25
     f3a:	0c f4       	brge	.+2      	; 0xf3e <Timebase_DownCounter_SS_Update+0xa8>
     f3c:	4c c0       	rjmp	.+152    	; 0xfd6 <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     f3e:	8c a9       	ldd	r24, Y+52	; 0x34
     f40:	9d a9       	ldd	r25, Y+53	; 0x35
     f42:	ae a9       	ldd	r26, Y+54	; 0x36
     f44:	bf a9       	ldd	r27, Y+55	; 0x37
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     f46:	18 a6       	std	Y+40, r1	; 0x28
     f48:	19 a6       	std	Y+41, r1	; 0x29
     f4a:	1a a6       	std	Y+42, r1	; 0x2a
     f4c:	1b a6       	std	Y+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     f4e:	1c a2       	std	Y+36, r1	; 0x24
     f50:	1d a2       	std	Y+37, r1	; 0x25
     f52:	1e a2       	std	Y+38, r1	; 0x26
     f54:	1f a2       	std	Y+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     f56:	1c a6       	std	Y+44, r1	; 0x2c
     f58:	1d a6       	std	Y+45, r1	; 0x2d
     f5a:	1e a6       	std	Y+46, r1	; 0x2e
     f5c:	1f a6       	std	Y+47, r1	; 0x2f
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f5e:	2b a1       	ldd	r18, Y+35	; 0x23
     f60:	2e 7f       	andi	r18, 0xFE	; 254
     f62:	2b a3       	std	Y+35, r18	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     f64:	8c ab       	std	Y+52, r24	; 0x34
     f66:	9d ab       	std	Y+53, r25	; 0x35
     f68:	ae ab       	std	Y+54, r26	; 0x36
     f6a:	bf ab       	std	Y+55, r27	; 0x37
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     f6c:	8b a1       	ldd	r24, Y+35	; 0x23
     f6e:	81 7e       	andi	r24, 0xE1	; 225
     f70:	88 60       	ori	r24, 0x08	; 8
     f72:	8b a3       	std	Y+35, r24	; 0x23
     f74:	30 c0       	rjmp	.+96     	; 0xfd6 <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     f76:	82 30       	cpi	r24, 0x02	; 2
     f78:	71 f5       	brne	.+92     	; 0xfd6 <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     f7a:	60 84       	ldd	r6, Z+8	; 0x08
     f7c:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f7e:	e2 84       	ldd	r14, Z+10	; 0x0a
     f80:	f3 84       	ldd	r15, Z+11	; 0x0b
     f82:	04 85       	ldd	r16, Z+12	; 0x0c
     f84:	15 85       	ldd	r17, Z+13	; 0x0d
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f86:	2c a4       	ldd	r2, Y+44	; 0x2c
     f88:	3d a4       	ldd	r3, Y+45	; 0x2d
     f8a:	4e a4       	ldd	r4, Y+46	; 0x2e
     f8c:	5f a4       	ldd	r5, Y+47	; 0x2f
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     f8e:	20 81       	ld	r18, Z
     f90:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     f92:	a0 80       	ld	r10, Z
     f94:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	c2 01       	movw	r24, r4
     f9c:	b1 01       	movw	r22, r2
     f9e:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     fa2:	e2 0e       	add	r14, r18
     fa4:	f3 1e       	adc	r15, r19
     fa6:	04 1f       	adc	r16, r20
     fa8:	15 1f       	adc	r17, r21
     faa:	ec a2       	std	Y+36, r14	; 0x24
     fac:	fd a2       	std	Y+37, r15	; 0x25
     fae:	0e a3       	std	Y+38, r16	; 0x26
     fb0:	1f a3       	std	Y+39, r17	; 0x27
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     fb2:	cc 24       	eor	r12, r12
     fb4:	dd 24       	eor	r13, r13
     fb6:	c2 01       	movw	r24, r4
     fb8:	b1 01       	movw	r22, r2
     fba:	a6 01       	movw	r20, r12
     fbc:	95 01       	movw	r18, r10
     fbe:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
     fc2:	88 24       	eor	r8, r8
     fc4:	99 24       	eor	r9, r9
     fc6:	66 0e       	add	r6, r22
     fc8:	77 1e       	adc	r7, r23
     fca:	88 1e       	adc	r8, r24
     fcc:	99 1e       	adc	r9, r25
     fce:	68 a6       	std	Y+40, r6	; 0x28
     fd0:	79 a6       	std	Y+41, r7	; 0x29
     fd2:	8a a6       	std	Y+42, r8	; 0x2a
     fd4:	9b a6       	std	Y+43, r9	; 0x2b
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	9f 90       	pop	r9
     fec:	8f 90       	pop	r8
     fee:	7f 90       	pop	r7
     ff0:	6f 90       	pop	r6
     ff2:	5f 90       	pop	r5
     ff4:	4f 90       	pop	r4
     ff6:	3f 90       	pop	r3
     ff8:	2f 90       	pop	r2
     ffa:	08 95       	ret

00000ffc <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     ffc:	40 e0       	ldi	r20, 0x00	; 0
     ffe:	e0 91 06 02 	lds	r30, 0x0206
    1002:	f0 91 07 02 	lds	r31, 0x0207
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	25 e1       	ldi	r18, 0x15	; 21
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	bc 01       	movw	r22, r24
    100e:	62 9f       	mul	r22, r18
    1010:	c0 01       	movw	r24, r0
    1012:	63 9f       	mul	r22, r19
    1014:	90 0d       	add	r25, r0
    1016:	72 9f       	mul	r23, r18
    1018:	90 0d       	add	r25, r0
    101a:	11 24       	eor	r1, r1
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	83 a1       	ldd	r24, Z+35	; 0x23
    1022:	86 95       	lsr	r24
    1024:	8f 70       	andi	r24, 0x0F	; 15
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	09 f4       	brne	.+2      	; 0x102c <Timebase_DownCounter_SS_Expired+0x30>
    102a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    102c:	84 2f       	mov	r24, r20
    102e:	08 95       	ret

00001030 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1030:	e0 91 06 02 	lds	r30, 0x0206
    1034:	f0 91 07 02 	lds	r31, 0x0207
    1038:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    103a:	25 e1       	ldi	r18, 0x15	; 21
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	ac 01       	movw	r20, r24
    1040:	42 9f       	mul	r20, r18
    1042:	c0 01       	movw	r24, r0
    1044:	43 9f       	mul	r20, r19
    1046:	90 0d       	add	r25, r0
    1048:	52 9f       	mul	r21, r18
    104a:	90 0d       	add	r25, r0
    104c:	11 24       	eor	r1, r1
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	83 a1       	ldd	r24, Z+35	; 0x23
    1054:	86 95       	lsr	r24
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	11 f0       	breq	.+4      	; 0x1060 <Timebase_DownCounter_SS_Expired_Event+0x30>
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1060:	10 a6       	std	Z+40, r1	; 0x28
    1062:	11 a6       	std	Z+41, r1	; 0x29
    1064:	12 a6       	std	Z+42, r1	; 0x2a
    1066:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1068:	14 a2       	std	Z+36, r1	; 0x24
    106a:	15 a2       	std	Z+37, r1	; 0x25
    106c:	16 a2       	std	Z+38, r1	; 0x26
    106e:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1070:	14 a6       	std	Z+44, r1	; 0x2c
    1072:	15 a6       	std	Z+45, r1	; 0x2d
    1074:	16 a6       	std	Z+46, r1	; 0x2e
    1076:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1078:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    107a:	80 7e       	andi	r24, 0xE0	; 224
    107c:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    107e:	14 aa       	std	Z+52, r1	; 0x34
    1080:	15 aa       	std	Z+53, r1	; 0x35
    1082:	16 aa       	std	Z+54, r1	; 0x36
    1084:	17 aa       	std	Z+55, r1	; 0x37
    1086:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1088:	08 95       	ret

0000108a <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
    108a:	0e 94 18 08 	call	0x1030	; 0x1030 <Timebase_DownCounter_SS_Expired_Event>
}
    108e:	08 95       	ret

00001090 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
    1090:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1092:	e0 91 06 02 	lds	r30, 0x0206
    1096:	f0 91 07 02 	lds	r31, 0x0207
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    109e:	85 e1       	ldi	r24, 0x15	; 21
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	ac 01       	movw	r20, r24
    10a4:	24 9f       	mul	r18, r20
    10a6:	c0 01       	movw	r24, r0
    10a8:	25 9f       	mul	r18, r21
    10aa:	90 0d       	add	r25, r0
    10ac:	34 9f       	mul	r19, r20
    10ae:	90 0d       	add	r25, r0
    10b0:	11 24       	eor	r1, r1
    10b2:	e8 0f       	add	r30, r24
    10b4:	f9 1f       	adc	r31, r25
    10b6:	83 a1       	ldd	r24, Z+35	; 0x23
    10b8:	86 95       	lsr	r24
    10ba:	8f 70       	andi	r24, 0x0F	; 15
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	11 f0       	breq	.+4      	; 0x10c4 <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    10c4:	44 a9       	ldd	r20, Z+52	; 0x34
    10c6:	55 a9       	ldd	r21, Z+53	; 0x35
    10c8:	66 a9       	ldd	r22, Z+54	; 0x36
    10ca:	77 a9       	ldd	r23, Z+55	; 0x37
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    10cc:	10 a6       	std	Z+40, r1	; 0x28
    10ce:	11 a6       	std	Z+41, r1	; 0x29
    10d0:	12 a6       	std	Z+42, r1	; 0x2a
    10d2:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    10d4:	14 a2       	std	Z+36, r1	; 0x24
    10d6:	15 a2       	std	Z+37, r1	; 0x25
    10d8:	16 a2       	std	Z+38, r1	; 0x26
    10da:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    10dc:	14 a6       	std	Z+44, r1	; 0x2c
    10de:	15 a6       	std	Z+45, r1	; 0x2d
    10e0:	16 a6       	std	Z+46, r1	; 0x2e
    10e2:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    10e4:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    10e6:	80 7e       	andi	r24, 0xE0	; 224
    10e8:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    10ea:	14 aa       	std	Z+52, r1	; 0x34
    10ec:	15 aa       	std	Z+53, r1	; 0x35
    10ee:	16 aa       	std	Z+54, r1	; 0x36
    10f0:	17 aa       	std	Z+55, r1	; 0x37

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    10f2:	8a 2f       	mov	r24, r26
    10f4:	0e 94 3b 06 	call	0xc76	; 0xc76 <Timebase_DownCounter_SS_Set_Securely>
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    10fa:	08 95       	ret

000010fc <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    1100:	c0 91 06 02 	lds	r28, 0x0206
    1104:	d0 91 07 02 	lds	r29, 0x0207
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    110c:	85 e1       	ldi	r24, 0x15	; 21
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	28 9f       	mul	r18, r24
    1112:	f0 01       	movw	r30, r0
    1114:	29 9f       	mul	r18, r25
    1116:	f0 0d       	add	r31, r0
    1118:	38 9f       	mul	r19, r24
    111a:	f0 0d       	add	r31, r0
    111c:	11 24       	eor	r1, r1
    111e:	ec 0f       	add	r30, r28
    1120:	fd 1f       	adc	r31, r29
    1122:	83 a1       	ldd	r24, Z+35	; 0x23
    1124:	80 fd       	sbrc	r24, 0
    1126:	21 c0       	rjmp	.+66     	; 0x116a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    1128:	84 a5       	ldd	r24, Z+44	; 0x2c
    112a:	95 a5       	ldd	r25, Z+45	; 0x2d
    112c:	a6 a5       	ldd	r26, Z+46	; 0x2e
    112e:	b7 a5       	ldd	r27, Z+47	; 0x2f
    1130:	84 1b       	sub	r24, r20
    1132:	95 0b       	sbc	r25, r21
    1134:	a6 0b       	sbc	r26, r22
    1136:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1138:	b7 ff       	sbrs	r27, 7
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    113c:	10 aa       	std	Z+48, r1	; 0x30
    113e:	11 aa       	std	Z+49, r1	; 0x31
    1140:	12 aa       	std	Z+50, r1	; 0x32
    1142:	13 aa       	std	Z+51, r1	; 0x33
    1144:	04 c0       	rjmp	.+8      	; 0x114e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1146:	80 ab       	std	Z+48, r24	; 0x30
    1148:	91 ab       	std	Z+49, r25	; 0x31
    114a:	a2 ab       	std	Z+50, r26	; 0x32
    114c:	b3 ab       	std	Z+51, r27	; 0x33
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    114e:	85 e1       	ldi	r24, 0x15	; 21
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	28 9f       	mul	r18, r24
    1154:	f0 01       	movw	r30, r0
    1156:	29 9f       	mul	r18, r25
    1158:	f0 0d       	add	r31, r0
    115a:	38 9f       	mul	r19, r24
    115c:	f0 0d       	add	r31, r0
    115e:	11 24       	eor	r1, r1
    1160:	ec 0f       	add	r30, r28
    1162:	fd 1f       	adc	r31, r29
    1164:	83 a1       	ldd	r24, Z+35	; 0x23
    1166:	81 60       	ori	r24, 0x01	; 1
    1168:	83 a3       	std	Z+35, r24	; 0x23
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	08 95       	ret

00001170 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1170:	e0 91 06 02 	lds	r30, 0x0206
    1174:	f0 91 07 02 	lds	r31, 0x0207
    1178:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    117a:	25 e1       	ldi	r18, 0x15	; 21
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	ac 01       	movw	r20, r24
    1180:	42 9f       	mul	r20, r18
    1182:	c0 01       	movw	r24, r0
    1184:	43 9f       	mul	r20, r19
    1186:	90 0d       	add	r25, r0
    1188:	52 9f       	mul	r21, r18
    118a:	90 0d       	add	r25, r0
    118c:	11 24       	eor	r1, r1
    118e:	e8 0f       	add	r30, r24
    1190:	f9 1f       	adc	r31, r25
    1192:	24 a5       	ldd	r18, Z+44	; 0x2c
    1194:	35 a5       	ldd	r19, Z+45	; 0x2d
    1196:	46 a5       	ldd	r20, Z+46	; 0x2e
    1198:	57 a5       	ldd	r21, Z+47	; 0x2f
    119a:	80 a9       	ldd	r24, Z+48	; 0x30
    119c:	91 a9       	ldd	r25, Z+49	; 0x31
    119e:	a2 a9       	ldd	r26, Z+50	; 0x32
    11a0:	b3 a9       	ldd	r27, Z+51	; 0x33
    11a2:	28 1b       	sub	r18, r24
    11a4:	39 0b       	sbc	r19, r25
    11a6:	4a 0b       	sbc	r20, r26
    11a8:	5b 0b       	sbc	r21, r27
    11aa:	57 ff       	sbrs	r21, 7
    11ac:	04 c0       	rjmp	.+8      	; 0x11b6 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e0       	ldi	r20, 0x00	; 0
    11b4:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    11b6:	b9 01       	movw	r22, r18
    11b8:	ca 01       	movw	r24, r20
    11ba:	08 95       	ret

000011bc <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    11bc:	cf 93       	push	r28
    11be:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    11c0:	c0 91 06 02 	lds	r28, 0x0206
    11c4:	d0 91 07 02 	lds	r29, 0x0207
    11c8:	68 2f       	mov	r22, r24
    11ca:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    11cc:	85 e1       	ldi	r24, 0x15	; 21
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	68 9f       	mul	r22, r24
    11d2:	f0 01       	movw	r30, r0
    11d4:	69 9f       	mul	r22, r25
    11d6:	f0 0d       	add	r31, r0
    11d8:	78 9f       	mul	r23, r24
    11da:	f0 0d       	add	r31, r0
    11dc:	11 24       	eor	r1, r1
    11de:	ec 0f       	add	r30, r28
    11e0:	fd 1f       	adc	r31, r29
    11e2:	24 a5       	ldd	r18, Z+44	; 0x2c
    11e4:	35 a5       	ldd	r19, Z+45	; 0x2d
    11e6:	46 a5       	ldd	r20, Z+46	; 0x2e
    11e8:	57 a5       	ldd	r21, Z+47	; 0x2f
    11ea:	80 a9       	ldd	r24, Z+48	; 0x30
    11ec:	91 a9       	ldd	r25, Z+49	; 0x31
    11ee:	a2 a9       	ldd	r26, Z+50	; 0x32
    11f0:	b3 a9       	ldd	r27, Z+51	; 0x33
    11f2:	28 1b       	sub	r18, r24
    11f4:	39 0b       	sbc	r19, r25
    11f6:	4a 0b       	sbc	r20, r26
    11f8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    11fa:	57 fd       	sbrc	r21, 7
    11fc:	07 c0       	rjmp	.+14     	; 0x120c <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    11fe:	21 15       	cp	r18, r1
    1200:	31 05       	cpc	r19, r1
    1202:	41 05       	cpc	r20, r1
    1204:	51 05       	cpc	r21, r1
    1206:	11 f0       	breq	.+4      	; 0x120c <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	12 c0       	rjmp	.+36     	; 0x1230 <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	85 e1       	ldi	r24, 0x15	; 21
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	ac 01       	movw	r20, r24
    1214:	64 9f       	mul	r22, r20
    1216:	c0 01       	movw	r24, r0
    1218:	65 9f       	mul	r22, r21
    121a:	90 0d       	add	r25, r0
    121c:	74 9f       	mul	r23, r20
    121e:	90 0d       	add	r25, r0
    1220:	11 24       	eor	r1, r1
    1222:	c8 0f       	add	r28, r24
    1224:	d9 1f       	adc	r29, r25
    1226:	8b a1       	ldd	r24, Y+35	; 0x23
    1228:	80 ff       	sbrs	r24, 0
    122a:	21 e0       	ldi	r18, 0x01	; 1
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1230:	82 2f       	mov	r24, r18
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1238:	1f 93       	push	r17
    123a:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    123c:	0e 94 de 08 	call	0x11bc	; 0x11bc <Timebase_DownCounter_SS_Period_Value_Expired>
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	11 f0       	breq	.+4      	; 0x1248 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	16 c0       	rjmp	.+44     	; 0x1274 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1248:	e0 91 06 02 	lds	r30, 0x0206
    124c:	f0 91 07 02 	lds	r31, 0x0207
    1250:	21 2f       	mov	r18, r17
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	85 e1       	ldi	r24, 0x15	; 21
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	ac 01       	movw	r20, r24
    125a:	24 9f       	mul	r18, r20
    125c:	c0 01       	movw	r24, r0
    125e:	25 9f       	mul	r18, r21
    1260:	90 0d       	add	r25, r0
    1262:	34 9f       	mul	r19, r20
    1264:	90 0d       	add	r25, r0
    1266:	11 24       	eor	r1, r1
    1268:	e8 0f       	add	r30, r24
    126a:	f9 1f       	adc	r31, r25
    126c:	83 a1       	ldd	r24, Z+35	; 0x23
    126e:	8e 7f       	andi	r24, 0xFE	; 254
    1270:	83 a3       	std	Z+35, r24	; 0x23
    1272:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1274:	1f 91       	pop	r17
    1276:	08 95       	ret

00001278 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 4b 07 	call	0xe96	; 0xe96 <Timebase_DownCounter_SS_Update>
  }
}
    127e:	08 95       	ret

00001280 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1280:	e0 91 06 02 	lds	r30, 0x0206
    1284:	f0 91 07 02 	lds	r31, 0x0207
    1288:	10 a6       	std	Z+40, r1	; 0x28
    128a:	11 a6       	std	Z+41, r1	; 0x29
    128c:	12 a6       	std	Z+42, r1	; 0x2a
    128e:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1290:	14 a2       	std	Z+36, r1	; 0x24
    1292:	15 a2       	std	Z+37, r1	; 0x25
    1294:	16 a2       	std	Z+38, r1	; 0x26
    1296:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1298:	14 a6       	std	Z+44, r1	; 0x2c
    129a:	15 a6       	std	Z+45, r1	; 0x2d
    129c:	16 a6       	std	Z+46, r1	; 0x2e
    129e:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    12a0:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    12a2:	80 7e       	andi	r24, 0xE0	; 224
    12a4:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    12a6:	14 aa       	std	Z+52, r1	; 0x34
    12a8:	15 aa       	std	Z+53, r1	; 0x35
    12aa:	16 aa       	std	Z+54, r1	; 0x36
    12ac:	17 aa       	std	Z+55, r1	; 0x37

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    12ae:	08 95       	ret

000012b0 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    12b0:	e0 91 06 02 	lds	r30, 0x0206
    12b4:	f0 91 07 02 	lds	r31, 0x0207
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c 01       	movw	r18, r24
    12bc:	44 e0       	ldi	r20, 0x04	; 4
    12be:	22 0f       	add	r18, r18
    12c0:	33 1f       	adc	r19, r19
    12c2:	4a 95       	dec	r20
    12c4:	e1 f7       	brne	.-8      	; 0x12be <Timebase_DownCounter_Get_Status+0xe>
    12c6:	28 0f       	add	r18, r24
    12c8:	39 1f       	adc	r19, r25
    12ca:	e2 0f       	add	r30, r18
    12cc:	f3 1f       	adc	r31, r19
    12ce:	80 ad       	ldd	r24, Z+56	; 0x38
    12d0:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    12d2:	8f 70       	andi	r24, 0x0F	; 15
    12d4:	08 95       	ret

000012d6 <Timebase_DownCounter_Set_Status>:


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    12d6:	e0 91 06 02 	lds	r30, 0x0206
    12da:	f0 91 07 02 	lds	r31, 0x0207
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	9c 01       	movw	r18, r24
    12e2:	54 e0       	ldi	r21, 0x04	; 4
    12e4:	22 0f       	add	r18, r18
    12e6:	33 1f       	adc	r19, r19
    12e8:	5a 95       	dec	r21
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <Timebase_DownCounter_Set_Status+0xe>
    12ec:	28 0f       	add	r18, r24
    12ee:	39 1f       	adc	r19, r25
    12f0:	e2 0f       	add	r30, r18
    12f2:	f3 1f       	adc	r31, r19
    12f4:	6f 70       	andi	r22, 0x0F	; 15
    12f6:	66 0f       	add	r22, r22
    12f8:	80 ad       	ldd	r24, Z+56	; 0x38
    12fa:	81 7e       	andi	r24, 0xE1	; 225
    12fc:	86 2b       	or	r24, r22
    12fe:	80 af       	std	Z+56, r24	; 0x38
}
    1300:	08 95       	ret

00001302 <Timebase_DownCounter_Get_Value>:


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    1302:	e0 91 06 02 	lds	r30, 0x0206
    1306:	f0 91 07 02 	lds	r31, 0x0207
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 01       	movw	r18, r24
    130e:	64 e0       	ldi	r22, 0x04	; 4
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	6a 95       	dec	r22
    1316:	e1 f7       	brne	.-8      	; 0x1310 <Timebase_DownCounter_Get_Value+0xe>
    1318:	28 0f       	add	r18, r24
    131a:	39 1f       	adc	r19, r25
    131c:	e2 0f       	add	r30, r18
    131e:	f3 1f       	adc	r31, r19
    1320:	fd 96       	adiw	r30, 0x3d	; 61
    1322:	60 81       	ld	r22, Z
    1324:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	08 95       	ret

0000132c <Timebase_DownCounter_Set_Value>:


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    132c:	e0 91 06 02 	lds	r30, 0x0206
    1330:	f0 91 07 02 	lds	r31, 0x0207
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 01       	movw	r18, r24
    1338:	a4 e0       	ldi	r26, 0x04	; 4
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	aa 95       	dec	r26
    1340:	e1 f7       	brne	.-8      	; 0x133a <Timebase_DownCounter_Set_Value+0xe>
    1342:	28 0f       	add	r18, r24
    1344:	39 1f       	adc	r19, r25
    1346:	e2 0f       	add	r30, r18
    1348:	f3 1f       	adc	r31, r19
    134a:	fd 96       	adiw	r30, 0x3d	; 61
    134c:	40 83       	st	Z, r20
    134e:	51 83       	std	Z+1, r21	; 0x01
    1350:	62 83       	std	Z+2, r22	; 0x02
    1352:	73 83       	std	Z+3, r23	; 0x03
}
    1354:	08 95       	ret

00001356 <Timebase_DownCounter_Get_EndValue>:


int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    1356:	e0 91 06 02 	lds	r30, 0x0206
    135a:	f0 91 07 02 	lds	r31, 0x0207
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	9c 01       	movw	r18, r24
    1362:	b4 e0       	ldi	r27, 0x04	; 4
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	ba 95       	dec	r27
    136a:	e1 f7       	brne	.-8      	; 0x1364 <Timebase_DownCounter_Get_EndValue+0xe>
    136c:	28 0f       	add	r18, r24
    136e:	39 1f       	adc	r19, r25
    1370:	e2 0f       	add	r30, r18
    1372:	f3 1f       	adc	r31, r19
    1374:	df 01       	movw	r26, r30
    1376:	d9 96       	adiw	r26, 0x39	; 57
    1378:	61 ad       	ldd	r22, Z+57	; 0x39
    137a:	11 96       	adiw	r26, 0x01	; 1
    137c:	7c 91       	ld	r23, X
    137e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].EndValue;
}
    1380:	12 96       	adiw	r26, 0x02	; 2
    1382:	8c 91       	ld	r24, X
    1384:	12 97       	sbiw	r26, 0x02	; 2
    1386:	13 96       	adiw	r26, 0x03	; 3
    1388:	9c 91       	ld	r25, X
    138a:	08 95       	ret

0000138c <Timebase_DownCounter_Set_EndValue>:


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    138c:	e0 91 06 02 	lds	r30, 0x0206
    1390:	f0 91 07 02 	lds	r31, 0x0207
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9c 01       	movw	r18, r24
    1398:	a4 e0       	ldi	r26, 0x04	; 4
    139a:	22 0f       	add	r18, r18
    139c:	33 1f       	adc	r19, r19
    139e:	aa 95       	dec	r26
    13a0:	e1 f7       	brne	.-8      	; 0x139a <Timebase_DownCounter_Set_EndValue+0xe>
    13a2:	28 0f       	add	r18, r24
    13a4:	39 1f       	adc	r19, r25
    13a6:	e2 0f       	add	r30, r18
    13a8:	f3 1f       	adc	r31, r19
    13aa:	41 af       	std	Z+57, r20	; 0x39
    13ac:	52 af       	std	Z+58, r21	; 0x3a
    13ae:	63 af       	std	Z+59, r22	; 0x3b
    13b0:	74 af       	std	Z+60, r23	; 0x3c
}
    13b2:	08 95       	ret

000013b4 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    13b4:	e0 91 06 02 	lds	r30, 0x0206
    13b8:	f0 91 07 02 	lds	r31, 0x0207
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 01       	movw	r18, r24
    13c0:	b4 e0       	ldi	r27, 0x04	; 4
    13c2:	22 0f       	add	r18, r18
    13c4:	33 1f       	adc	r19, r19
    13c6:	ba 95       	dec	r27
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <Timebase_DownCounter_Get_PeriodValue+0xe>
    13ca:	28 0f       	add	r18, r24
    13cc:	39 1f       	adc	r19, r25
    13ce:	e2 0f       	add	r30, r18
    13d0:	f3 1f       	adc	r31, r19
    13d2:	ef 5b       	subi	r30, 0xBF	; 191
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	60 81       	ld	r22, Z
    13d8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	08 95       	ret

000013e0 <Timebase_DownCounter_Set_PeriodValue>:


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    13e0:	e0 91 06 02 	lds	r30, 0x0206
    13e4:	f0 91 07 02 	lds	r31, 0x0207
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    13ec:	77 ff       	sbrs	r23, 7
    13ee:	11 c0       	rjmp	.+34     	; 0x1412 <Timebase_DownCounter_Set_PeriodValue+0x32>
    Timebase->DownCounter[window].PeriodValue = 0;
    13f0:	c9 01       	movw	r24, r18
    13f2:	b4 e0       	ldi	r27, 0x04	; 4
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	ba 95       	dec	r27
    13fa:	e1 f7       	brne	.-8      	; 0x13f4 <Timebase_DownCounter_Set_PeriodValue+0x14>
    13fc:	82 0f       	add	r24, r18
    13fe:	93 1f       	adc	r25, r19
    1400:	e8 0f       	add	r30, r24
    1402:	f9 1f       	adc	r31, r25
    1404:	ef 5b       	subi	r30, 0xBF	; 191
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	10 82       	st	Z, r1
    140a:	11 82       	std	Z+1, r1	; 0x01
    140c:	12 82       	std	Z+2, r1	; 0x02
    140e:	13 82       	std	Z+3, r1	; 0x03
    1410:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1412:	c9 01       	movw	r24, r18
    1414:	a4 e0       	ldi	r26, 0x04	; 4
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	aa 95       	dec	r26
    141c:	e1 f7       	brne	.-8      	; 0x1416 <Timebase_DownCounter_Set_PeriodValue+0x36>
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	e8 0f       	add	r30, r24
    1424:	f9 1f       	adc	r31, r25
    1426:	ef 5b       	subi	r30, 0xBF	; 191
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	40 83       	st	Z, r20
    142c:	51 83       	std	Z+1, r21	; 0x01
    142e:	62 83       	std	Z+2, r22	; 0x02
    1430:	73 83       	std	Z+3, r23	; 0x03
    1432:	08 95       	ret

00001434 <Timebase_DownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    1434:	e0 91 06 02 	lds	r30, 0x0206
    1438:	f0 91 07 02 	lds	r31, 0x0207
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 01       	movw	r18, r24
    1440:	44 e0       	ldi	r20, 0x04	; 4
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	4a 95       	dec	r20
    1448:	e1 f7       	brne	.-8      	; 0x1442 <Timebase_DownCounter_Get_Period_Flag+0xe>
    144a:	28 0f       	add	r18, r24
    144c:	39 1f       	adc	r19, r25
    144e:	e2 0f       	add	r30, r18
    1450:	f3 1f       	adc	r31, r19
    1452:	80 ad       	ldd	r24, Z+56	; 0x38
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	08 95       	ret

00001458 <Timebase_DownCounter_Set_Period_Flag>:


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1458:	e0 91 06 02 	lds	r30, 0x0206
    145c:	f0 91 07 02 	lds	r31, 0x0207
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	9c 01       	movw	r18, r24
    1464:	54 e0       	ldi	r21, 0x04	; 4
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	5a 95       	dec	r21
    146c:	e1 f7       	brne	.-8      	; 0x1466 <Timebase_DownCounter_Set_Period_Flag+0xe>
    146e:	28 0f       	add	r18, r24
    1470:	39 1f       	adc	r19, r25
    1472:	e2 0f       	add	r30, r18
    1474:	f3 1f       	adc	r31, r19
    1476:	80 ad       	ldd	r24, Z+56	; 0x38
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 af       	std	Z+56, r24	; 0x38
}
    147c:	08 95       	ret

0000147e <Timebase_DownCounter_Clear_Period_Flag>:


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    147e:	e0 91 06 02 	lds	r30, 0x0206
    1482:	f0 91 07 02 	lds	r31, 0x0207
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 01       	movw	r18, r24
    148a:	64 e0       	ldi	r22, 0x04	; 4
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	6a 95       	dec	r22
    1492:	e1 f7       	brne	.-8      	; 0x148c <Timebase_DownCounter_Clear_Period_Flag+0xe>
    1494:	28 0f       	add	r18, r24
    1496:	39 1f       	adc	r19, r25
    1498:	e2 0f       	add	r30, r18
    149a:	f3 1f       	adc	r31, r19
    149c:	80 ad       	ldd	r24, Z+56	; 0x38
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	80 af       	std	Z+56, r24	; 0x38
}
    14a2:	08 95       	ret

000014a4 <Timebase_DownCounter_Get_ReloadValue>:

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
    14a4:	e0 91 06 02 	lds	r30, 0x0206
    14a8:	f0 91 07 02 	lds	r31, 0x0207
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 01       	movw	r18, r24
    14b0:	74 e0       	ldi	r23, 0x04	; 4
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	7a 95       	dec	r23
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <Timebase_DownCounter_Get_ReloadValue+0xe>
    14ba:	28 0f       	add	r18, r24
    14bc:	39 1f       	adc	r19, r25
    14be:	e2 0f       	add	r30, r18
    14c0:	f3 1f       	adc	r31, r19
    14c2:	eb 5b       	subi	r30, 0xBB	; 187
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	60 81       	ld	r22, Z
    14c8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].ReloadValue;
}
    14ca:	82 81       	ldd	r24, Z+2	; 0x02
    14cc:	93 81       	ldd	r25, Z+3	; 0x03
    14ce:	08 95       	ret

000014d0 <Timebase_DownCounter_Set_ReloadValue>:

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    14d0:	e0 91 06 02 	lds	r30, 0x0206
    14d4:	f0 91 07 02 	lds	r31, 0x0207
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 01       	movw	r18, r24
    14dc:	a4 e0       	ldi	r26, 0x04	; 4
    14de:	22 0f       	add	r18, r18
    14e0:	33 1f       	adc	r19, r19
    14e2:	aa 95       	dec	r26
    14e4:	e1 f7       	brne	.-8      	; 0x14de <Timebase_DownCounter_Set_ReloadValue+0xe>
    14e6:	28 0f       	add	r18, r24
    14e8:	39 1f       	adc	r19, r25
    14ea:	e2 0f       	add	r30, r18
    14ec:	f3 1f       	adc	r31, r19
    14ee:	eb 5b       	subi	r30, 0xBB	; 187
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	40 83       	st	Z, r20
    14f4:	51 83       	std	Z+1, r21	; 0x01
    14f6:	62 83       	std	Z+2, r22	; 0x02
    14f8:	73 83       	std	Z+3, r23	; 0x03
}
    14fa:	08 95       	ret

000014fc <Timebase_DownCounter_Reset>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    14fc:	e0 91 06 02 	lds	r30, 0x0206
    1500:	f0 91 07 02 	lds	r31, 0x0207
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9c 01       	movw	r18, r24
    1508:	b4 e0       	ldi	r27, 0x04	; 4
    150a:	22 0f       	add	r18, r18
    150c:	33 1f       	adc	r19, r19
    150e:	ba 95       	dec	r27
    1510:	e1 f7       	brne	.-8      	; 0x150a <Timebase_DownCounter_Reset+0xe>
    1512:	28 0f       	add	r18, r24
    1514:	39 1f       	adc	r19, r25
    1516:	e2 0f       	add	r30, r18
    1518:	f3 1f       	adc	r31, r19
    151a:	11 ae       	std	Z+57, r1	; 0x39
    151c:	12 ae       	std	Z+58, r1	; 0x3a
    151e:	13 ae       	std	Z+59, r1	; 0x3b
    1520:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1522:	fd 96       	adiw	r30, 0x3d	; 61
    1524:	10 82       	st	Z, r1
    1526:	11 82       	std	Z+1, r1	; 0x01
    1528:	12 82       	std	Z+2, r1	; 0x02
    152a:	13 82       	std	Z+3, r1	; 0x03
    152c:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    152e:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1530:	80 7e       	andi	r24, 0xE0	; 224
    1532:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1534:	eb 5b       	subi	r30, 0xBB	; 187
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	10 82       	st	Z, r1
    153a:	11 82       	std	Z+1, r1	; 0x01
    153c:	12 82       	std	Z+2, r1	; 0x02
    153e:	13 82       	std	Z+3, r1	; 0x03
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
  Timebase_DownCounter_Set_ReloadValue(window, 0);
} 
    1540:	08 95       	ret

00001542 <Timebase_DownCounter_Clear_All_Flags>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1542:	e0 91 06 02 	lds	r30, 0x0206
    1546:	f0 91 07 02 	lds	r31, 0x0207
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	9c 01       	movw	r18, r24
    154e:	44 e0       	ldi	r20, 0x04	; 4
    1550:	22 0f       	add	r18, r18
    1552:	33 1f       	adc	r19, r19
    1554:	4a 95       	dec	r20
    1556:	e1 f7       	brne	.-8      	; 0x1550 <Timebase_DownCounter_Clear_All_Flags+0xe>
    1558:	28 0f       	add	r18, r24
    155a:	39 1f       	adc	r19, r25
    155c:	e2 0f       	add	r30, r18
    155e:	f3 1f       	adc	r31, r19
    1560:	11 ae       	std	Z+57, r1	; 0x39
    1562:	12 ae       	std	Z+58, r1	; 0x3a
    1564:	13 ae       	std	Z+59, r1	; 0x3b
    1566:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1568:	fd 96       	adiw	r30, 0x3d	; 61
    156a:	10 82       	st	Z, r1
    156c:	11 82       	std	Z+1, r1	; 0x01
    156e:	12 82       	std	Z+2, r1	; 0x02
    1570:	13 82       	std	Z+3, r1	; 0x03
    1572:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1574:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1576:	80 7e       	andi	r24, 0xE0	; 224
    1578:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    157a:	eb 5b       	subi	r30, 0xBB	; 187
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	10 82       	st	Z, r1
    1580:	11 82       	std	Z+1, r1	; 0x01
    1582:	12 82       	std	Z+2, r1	; 0x02
    1584:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    1586:	08 95       	ret

00001588 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1588:	e0 91 06 02 	lds	r30, 0x0206
    158c:	f0 91 07 02 	lds	r31, 0x0207
    1590:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1592:	9c 01       	movw	r18, r24
    1594:	54 e0       	ldi	r21, 0x04	; 4
    1596:	22 0f       	add	r18, r18
    1598:	33 1f       	adc	r19, r19
    159a:	5a 95       	dec	r21
    159c:	e1 f7       	brne	.-8      	; 0x1596 <Timebase_DownCounter_Start+0xe>
    159e:	28 0f       	add	r18, r24
    15a0:	39 1f       	adc	r19, r25
    15a2:	e2 0f       	add	r30, r18
    15a4:	f3 1f       	adc	r31, r19
    15a6:	90 ad       	ldd	r25, Z+56	; 0x38
    15a8:	89 2f       	mov	r24, r25
    15aa:	86 95       	lsr	r24
    15ac:	8f 70       	andi	r24, 0x0F	; 15
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <Timebase_DownCounter_Start+0x30>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    15b2:	91 7e       	andi	r25, 0xE1	; 225
    15b4:	92 60       	ori	r25, 0x02	; 2
    15b6:	90 af       	std	Z+56, r25	; 0x38
    15b8:	08 95       	ret

000015ba <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    15ba:	e0 91 06 02 	lds	r30, 0x0206
    15be:	f0 91 07 02 	lds	r31, 0x0207
    15c2:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    15c4:	9c 01       	movw	r18, r24
    15c6:	64 e0       	ldi	r22, 0x04	; 4
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	6a 95       	dec	r22
    15ce:	e1 f7       	brne	.-8      	; 0x15c8 <Timebase_DownCounter_Stop+0xe>
    15d0:	28 0f       	add	r18, r24
    15d2:	39 1f       	adc	r19, r25
    15d4:	e2 0f       	add	r30, r18
    15d6:	f3 1f       	adc	r31, r19
    15d8:	90 ad       	ldd	r25, Z+56	; 0x38
    15da:	89 2f       	mov	r24, r25
    15dc:	86 95       	lsr	r24
    15de:	8f 70       	andi	r24, 0x0F	; 15
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	19 f0       	breq	.+6      	; 0x15ea <Timebase_DownCounter_Stop+0x30>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    15e4:	91 7e       	andi	r25, 0xE1	; 225
    15e6:	94 60       	ori	r25, 0x04	; 4
    15e8:	90 af       	std	Z+56, r25	; 0x38
    15ea:	08 95       	ret

000015ec <Timebase_DownCounter_Set_Securely>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    15ec:	a0 91 06 02 	lds	r26, 0x0206
    15f0:	b0 91 07 02 	lds	r27, 0x0207
    15f4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    15f6:	fc 01       	movw	r30, r24
    15f8:	24 e0       	ldi	r18, 0x04	; 4
    15fa:	ee 0f       	add	r30, r30
    15fc:	ff 1f       	adc	r31, r31
    15fe:	2a 95       	dec	r18
    1600:	e1 f7       	brne	.-8      	; 0x15fa <Timebase_DownCounter_Set_Securely+0xe>
    1602:	e8 0f       	add	r30, r24
    1604:	f9 1f       	adc	r31, r25
    1606:	ea 0f       	add	r30, r26
    1608:	fb 1f       	adc	r31, r27
    160a:	80 ad       	ldd	r24, Z+56	; 0x38
    160c:	86 95       	lsr	r24
    160e:	8f 70       	andi	r24, 0x0F	; 15
    1610:	29 f5       	brne	.+74     	; 0x165c <Timebase_DownCounter_Set_Securely+0x70>
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1612:	fd 96       	adiw	r30, 0x3d	; 61
    1614:	40 83       	st	Z, r20
    1616:	51 83       	std	Z+1, r21	; 0x01
    1618:	62 83       	std	Z+2, r22	; 0x02
    161a:	73 83       	std	Z+3, r23	; 0x03
    161c:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    161e:	1a 96       	adiw	r26, 0x0a	; 10
    1620:	8d 91       	ld	r24, X+
    1622:	9d 91       	ld	r25, X+
    1624:	0d 90       	ld	r0, X+
    1626:	bc 91       	ld	r27, X
    1628:	a0 2d       	mov	r26, r0
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    162a:	84 0f       	add	r24, r20
    162c:	95 1f       	adc	r25, r21
    162e:	a6 1f       	adc	r26, r22
    1630:	b7 1f       	adc	r27, r23
    1632:	81 af       	std	Z+57, r24	; 0x39
    1634:	92 af       	std	Z+58, r25	; 0x3a
    1636:	a3 af       	std	Z+59, r26	; 0x3b
    1638:	b4 af       	std	Z+60, r27	; 0x3c
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    163a:	eb 5b       	subi	r30, 0xBB	; 187
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	40 83       	st	Z, r20
    1640:	51 83       	std	Z+1, r21	; 0x01
    1642:	62 83       	std	Z+2, r22	; 0x02
    1644:	73 83       	std	Z+3, r23	; 0x03
    1646:	e5 54       	subi	r30, 0x45	; 69
    1648:	f0 40       	sbci	r31, 0x00	; 0
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    164a:	90 ad       	ldd	r25, Z+56	; 0x38
    164c:	89 2f       	mov	r24, r25
    164e:	86 95       	lsr	r24
    1650:	8f 70       	andi	r24, 0x0F	; 15
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	19 f0       	breq	.+6      	; 0x165c <Timebase_DownCounter_Set_Securely+0x70>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1656:	91 7e       	andi	r25, 0xE1	; 225
    1658:	92 60       	ori	r25, 0x02	; 2
    165a:	90 af       	std	Z+56, r25	; 0x38
    165c:	08 95       	ret

0000165e <Timebase_DownCounter_Set_Forcefully>:
    Timebase_DownCounter_Start(window);
  }
}


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    165e:	cf 92       	push	r12
    1660:	df 92       	push	r13
    1662:	ef 92       	push	r14
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	6a 01       	movw	r12, r20
    166c:	7b 01       	movw	r14, r22
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    166e:	e0 91 06 02 	lds	r30, 0x0206
    1672:	f0 91 07 02 	lds	r31, 0x0207
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	89 01       	movw	r16, r18
    167c:	44 e0       	ldi	r20, 0x04	; 4
    167e:	00 0f       	add	r16, r16
    1680:	11 1f       	adc	r17, r17
    1682:	4a 95       	dec	r20
    1684:	e1 f7       	brne	.-8      	; 0x167e <Timebase_DownCounter_Set_Forcefully+0x20>
    1686:	02 0f       	add	r16, r18
    1688:	13 1f       	adc	r17, r19
    168a:	e0 0f       	add	r30, r16
    168c:	f1 1f       	adc	r31, r17
    168e:	11 ae       	std	Z+57, r1	; 0x39
    1690:	12 ae       	std	Z+58, r1	; 0x3a
    1692:	13 ae       	std	Z+59, r1	; 0x3b
    1694:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1696:	fd 96       	adiw	r30, 0x3d	; 61
    1698:	10 82       	st	Z, r1
    169a:	11 82       	std	Z+1, r1	; 0x01
    169c:	12 82       	std	Z+2, r1	; 0x02
    169e:	13 82       	std	Z+3, r1	; 0x03
    16a0:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16a2:	90 ad       	ldd	r25, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    16a4:	90 7e       	andi	r25, 0xE0	; 224
    16a6:	90 af       	std	Z+56, r25	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    16a8:	eb 5b       	subi	r30, 0xBB	; 187
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	10 82       	st	Z, r1
    16ae:	11 82       	std	Z+1, r1	; 0x01
    16b0:	12 82       	std	Z+2, r1	; 0x02
    16b2:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    16b4:	b7 01       	movw	r22, r14
    16b6:	a6 01       	movw	r20, r12
    16b8:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Timebase_DownCounter_Set_Securely>
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    16bc:	e0 91 06 02 	lds	r30, 0x0206
    16c0:	f0 91 07 02 	lds	r31, 0x0207
    16c4:	e0 0f       	add	r30, r16
    16c6:	f1 1f       	adc	r31, r17
    16c8:	eb 5b       	subi	r30, 0xBB	; 187
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	c0 82       	st	Z, r12
    16ce:	d1 82       	std	Z+1, r13	; 0x01
    16d0:	e2 82       	std	Z+2, r14	; 0x02
    16d2:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
  Timebase_DownCounter_Set_ReloadValue(window, value);
} 
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	08 95       	ret

000016e2 <Timebase_DownCounter_Update>:


void Timebase_DownCounter_Update(uint8_t window){
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    16e6:	e0 91 06 02 	lds	r30, 0x0206
    16ea:	f0 91 07 02 	lds	r31, 0x0207
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	ec 01       	movw	r28, r24
    16f2:	54 e0       	ldi	r21, 0x04	; 4
    16f4:	cc 0f       	add	r28, r28
    16f6:	dd 1f       	adc	r29, r29
    16f8:	5a 95       	dec	r21
    16fa:	e1 f7       	brne	.-8      	; 0x16f4 <Timebase_DownCounter_Update+0x12>
    16fc:	c8 0f       	add	r28, r24
    16fe:	d9 1f       	adc	r29, r25
    1700:	ce 0f       	add	r28, r30
    1702:	df 1f       	adc	r29, r31
    1704:	88 ad       	ldd	r24, Y+56	; 0x38
    1706:	86 95       	lsr	r24
    1708:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Set_ReloadValue(window, value);
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	b1 f5       	brne	.+108    	; 0x177a <Timebase_DownCounter_Update+0x98>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    170e:	22 85       	ldd	r18, Z+10	; 0x0a
    1710:	33 85       	ldd	r19, Z+11	; 0x0b
    1712:	44 85       	ldd	r20, Z+12	; 0x0c
    1714:	55 85       	ldd	r21, Z+13	; 0x0d
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    1716:	89 ad       	ldd	r24, Y+57	; 0x39
    1718:	9a ad       	ldd	r25, Y+58	; 0x3a
    171a:	ab ad       	ldd	r26, Y+59	; 0x3b
    171c:	bc ad       	ldd	r27, Y+60	; 0x3c
    171e:	82 1b       	sub	r24, r18
    1720:	93 0b       	sbc	r25, r19
    1722:	a4 0b       	sbc	r26, r20
    1724:	b5 0b       	sbc	r27, r21
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1726:	be 01       	movw	r22, r28
    1728:	63 5c       	subi	r22, 0xC3	; 195
    172a:	7f 4f       	sbci	r23, 0xFF	; 255
    172c:	fb 01       	movw	r30, r22
    172e:	80 83       	st	Z, r24
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	a2 83       	std	Z+2, r26	; 0x02
    1734:	b3 83       	std	Z+3, r27	; 0x03


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    1736:	18 16       	cp	r1, r24
    1738:	19 06       	cpc	r1, r25
    173a:	1a 06       	cpc	r1, r26
    173c:	1b 06       	cpc	r1, r27
    173e:	8c f1       	brlt	.+98     	; 0x17a2 <Timebase_DownCounter_Update+0xc0>
void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
    1740:	fe 01       	movw	r30, r28
    1742:	eb 5b       	subi	r30, 0xBB	; 187
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	20 81       	ld	r18, Z
    1748:	31 81       	ldd	r19, Z+1	; 0x01
    174a:	42 81       	ldd	r20, Z+2	; 0x02
    174c:	53 81       	ldd	r21, Z+3	; 0x03
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    174e:	19 ae       	std	Y+57, r1	; 0x39
    1750:	1a ae       	std	Y+58, r1	; 0x3a
    1752:	1b ae       	std	Y+59, r1	; 0x3b
    1754:	1c ae       	std	Y+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1756:	db 01       	movw	r26, r22
    1758:	1d 92       	st	X+, r1
    175a:	1d 92       	st	X+, r1
    175c:	1d 92       	st	X+, r1
    175e:	1c 92       	st	X, r1
    1760:	13 97       	sbiw	r26, 0x03	; 3
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1762:	88 ad       	ldd	r24, Y+56	; 0x38
    1764:	8e 7f       	andi	r24, 0xFE	; 254
    1766:	88 af       	std	Y+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1768:	20 83       	st	Z, r18
    176a:	31 83       	std	Z+1, r19	; 0x01
    176c:	42 83       	std	Z+2, r20	; 0x02
    176e:	53 83       	std	Z+3, r21	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1770:	88 ad       	ldd	r24, Y+56	; 0x38
    1772:	81 7e       	andi	r24, 0xE1	; 225
    1774:	88 60       	ori	r24, 0x08	; 8
    1776:	88 af       	std	Y+56, r24	; 0x38
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <Timebase_DownCounter_Update+0xc0>
	  int32_t temp = Timebase_DownCounter_Get_ReloadValue(window);
      Timebase_DownCounter_Reset(window);
	  Timebase_DownCounter_Set_ReloadValue(window, temp);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 f4       	brne	.+36     	; 0x17a2 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    177e:	82 85       	ldd	r24, Z+10	; 0x0a
    1780:	93 85       	ldd	r25, Z+11	; 0x0b
    1782:	a4 85       	ldd	r26, Z+12	; 0x0c
    1784:	b5 85       	ldd	r27, Z+13	; 0x0d
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1786:	ed 96       	adiw	r28, 0x3d	; 61
    1788:	28 81       	ld	r18, Y
    178a:	39 81       	ldd	r19, Y+1	; 0x01
    178c:	4a 81       	ldd	r20, Y+2	; 0x02
    178e:	5b 81       	ldd	r21, Y+3	; 0x03
    1790:	ed 97       	sbiw	r28, 0x3d	; 61
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	a4 1f       	adc	r26, r20
    1798:	b5 1f       	adc	r27, r21
    179a:	89 af       	std	Y+57, r24	; 0x39
    179c:	9a af       	std	Y+58, r25	; 0x3a
    179e:	ab af       	std	Y+59, r26	; 0x3b
    17a0:	bc af       	std	Y+60, r27	; 0x3c
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <Timebase_DownCounter_Expired>:


uint8_t Timebase_DownCounter_Expired(uint8_t window){
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	e0 91 06 02 	lds	r30, 0x0206
    17ae:	f0 91 07 02 	lds	r31, 0x0207
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9c 01       	movw	r18, r24
    17b6:	64 e0       	ldi	r22, 0x04	; 4
    17b8:	22 0f       	add	r18, r18
    17ba:	33 1f       	adc	r19, r19
    17bc:	6a 95       	dec	r22
    17be:	e1 f7       	brne	.-8      	; 0x17b8 <Timebase_DownCounter_Expired+0x10>
    17c0:	28 0f       	add	r18, r24
    17c2:	39 1f       	adc	r19, r25
    17c4:	e2 0f       	add	r30, r18
    17c6:	f3 1f       	adc	r31, r19
    17c8:	80 ad       	ldd	r24, Z+56	; 0x38
    17ca:	86 95       	lsr	r24
    17cc:	8f 70       	andi	r24, 0x0F	; 15
    17ce:	84 30       	cpi	r24, 0x04	; 4
    17d0:	09 f4       	brne	.+2      	; 0x17d4 <Timebase_DownCounter_Expired+0x2c>
    17d2:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17d4:	84 2f       	mov	r24, r20
    17d6:	08 95       	ret

000017d8 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    17d8:	e0 91 06 02 	lds	r30, 0x0206
    17dc:	f0 91 07 02 	lds	r31, 0x0207
    17e0:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    17e2:	9c 01       	movw	r18, r24
    17e4:	74 e0       	ldi	r23, 0x04	; 4
    17e6:	22 0f       	add	r18, r18
    17e8:	33 1f       	adc	r19, r19
    17ea:	7a 95       	dec	r23
    17ec:	e1 f7       	brne	.-8      	; 0x17e6 <Timebase_DownCounter_Expired_Event+0xe>
    17ee:	28 0f       	add	r18, r24
    17f0:	39 1f       	adc	r19, r25
    17f2:	e2 0f       	add	r30, r18
    17f4:	f3 1f       	adc	r31, r19
    17f6:	80 ad       	ldd	r24, Z+56	; 0x38
    17f8:	86 95       	lsr	r24
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	11 f0       	breq	.+4      	; 0x1804 <Timebase_DownCounter_Expired_Event+0x2c>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	08 95       	ret
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1804:	11 ae       	std	Z+57, r1	; 0x39
    1806:	12 ae       	std	Z+58, r1	; 0x3a
    1808:	13 ae       	std	Z+59, r1	; 0x3b
    180a:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    180c:	fd 96       	adiw	r30, 0x3d	; 61
    180e:	10 82       	st	Z, r1
    1810:	11 82       	std	Z+1, r1	; 0x01
    1812:	12 82       	std	Z+2, r1	; 0x02
    1814:	13 82       	std	Z+3, r1	; 0x03
    1816:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1818:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    181a:	80 7e       	andi	r24, 0xE0	; 224
    181c:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    181e:	eb 5b       	subi	r30, 0xBB	; 187
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	10 82       	st	Z, r1
    1824:	11 82       	std	Z+1, r1	; 0x01
    1826:	12 82       	std	Z+2, r1	; 0x02
    1828:	13 82       	std	Z+3, r1	; 0x03
    182a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    182c:	08 95       	ret

0000182e <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    1832:	c0 91 06 02 	lds	r28, 0x0206
    1836:	d0 91 07 02 	lds	r29, 0x0207
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    183e:	f9 01       	movw	r30, r18
    1840:	b4 e0       	ldi	r27, 0x04	; 4
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ba 95       	dec	r27
    1848:	e1 f7       	brne	.-8      	; 0x1842 <Timebase_DownCounter_Set_Period_Value_Securely+0x14>
    184a:	e2 0f       	add	r30, r18
    184c:	f3 1f       	adc	r31, r19
    184e:	ec 0f       	add	r30, r28
    1850:	fd 1f       	adc	r31, r29
    1852:	80 ad       	ldd	r24, Z+56	; 0x38
    1854:	80 fd       	sbrc	r24, 0
    1856:	21 c0       	rjmp	.+66     	; 0x189a <Timebase_DownCounter_Set_Period_Value_Securely+0x6c>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    1858:	fd 96       	adiw	r30, 0x3d	; 61
    185a:	81 91       	ld	r24, Z+
    185c:	91 91       	ld	r25, Z+
    185e:	a1 91       	ld	r26, Z+
    1860:	b1 91       	ld	r27, Z+
    1862:	84 1b       	sub	r24, r20
    1864:	95 0b       	sbc	r25, r21
    1866:	a6 0b       	sbc	r26, r22
    1868:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounter[window].PeriodValue;
}


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    186a:	b7 ff       	sbrs	r27, 7
    186c:	05 c0       	rjmp	.+10     	; 0x1878 <Timebase_DownCounter_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounter[window].PeriodValue = 0;
    186e:	10 82       	st	Z, r1
    1870:	11 82       	std	Z+1, r1	; 0x01
    1872:	12 82       	std	Z+2, r1	; 0x02
    1874:	13 82       	std	Z+3, r1	; 0x03
    1876:	04 c0       	rjmp	.+8      	; 0x1880 <Timebase_DownCounter_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1878:	80 83       	st	Z, r24
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	a2 83       	std	Z+2, r26	; 0x02
    187e:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->DownCounter[window].Status.PeriodFlag;
}


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1880:	f9 01       	movw	r30, r18
    1882:	a4 e0       	ldi	r26, 0x04	; 4
    1884:	ee 0f       	add	r30, r30
    1886:	ff 1f       	adc	r31, r31
    1888:	aa 95       	dec	r26
    188a:	e1 f7       	brne	.-8      	; 0x1884 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    188c:	e2 0f       	add	r30, r18
    188e:	f3 1f       	adc	r31, r19
    1890:	ec 0f       	add	r30, r28
    1892:	fd 1f       	adc	r31, r29
    1894:	80 ad       	ldd	r24, Z+56	; 0x38
    1896:	81 60       	ori	r24, 0x01	; 1
    1898:	80 af       	std	Z+56, r24	; 0x38
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    189a:	df 91       	pop	r29
    189c:	cf 91       	pop	r28
    189e:	08 95       	ret

000018a0 <Timebase_DownCounter_Get_Remaining_Period_Value>:
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    18a0:	e0 91 06 02 	lds	r30, 0x0206
    18a4:	f0 91 07 02 	lds	r31, 0x0207
    18a8:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    18aa:	9c 01       	movw	r18, r24
    18ac:	44 e0       	ldi	r20, 0x04	; 4
    18ae:	22 0f       	add	r18, r18
    18b0:	33 1f       	adc	r19, r19
    18b2:	4a 95       	dec	r20
    18b4:	e1 f7       	brne	.-8      	; 0x18ae <Timebase_DownCounter_Get_Remaining_Period_Value+0xe>
    18b6:	28 0f       	add	r18, r24
    18b8:	39 1f       	adc	r19, r25
    18ba:	e2 0f       	add	r30, r18
    18bc:	f3 1f       	adc	r31, r19
    18be:	df 01       	movw	r26, r30
    18c0:	af 5b       	subi	r26, 0xBF	; 191
    18c2:	bf 4f       	sbci	r27, 0xFF	; 255
    18c4:	fd 96       	adiw	r30, 0x3d	; 61
    18c6:	20 81       	ld	r18, Z
    18c8:	31 81       	ldd	r19, Z+1	; 0x01
    18ca:	42 81       	ldd	r20, Z+2	; 0x02
    18cc:	53 81       	ldd	r21, Z+3	; 0x03
    18ce:	8d 91       	ld	r24, X+
    18d0:	9d 91       	ld	r25, X+
    18d2:	0d 90       	ld	r0, X+
    18d4:	bc 91       	ld	r27, X
    18d6:	a0 2d       	mov	r26, r0
    18d8:	28 1b       	sub	r18, r24
    18da:	39 0b       	sbc	r19, r25
    18dc:	4a 0b       	sbc	r20, r26
    18de:	5b 0b       	sbc	r21, r27
    18e0:	57 ff       	sbrs	r21, 7
    18e2:	04 c0       	rjmp	.+8      	; 0x18ec <Timebase_DownCounter_Get_Remaining_Period_Value+0x4c>
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e0       	ldi	r20, 0x00	; 0
    18ea:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    18ec:	b9 01       	movw	r22, r18
    18ee:	ca 01       	movw	r24, r20
    18f0:	08 95       	ret

000018f2 <Timebase_DownCounter_Period_Value_Expired>:


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    18f6:	c0 91 06 02 	lds	r28, 0x0206
    18fa:	d0 91 07 02 	lds	r29, 0x0207
    18fe:	68 2f       	mov	r22, r24
    1900:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1902:	fb 01       	movw	r30, r22
    1904:	a4 e0       	ldi	r26, 0x04	; 4
    1906:	ee 0f       	add	r30, r30
    1908:	ff 1f       	adc	r31, r31
    190a:	aa 95       	dec	r26
    190c:	e1 f7       	brne	.-8      	; 0x1906 <Timebase_DownCounter_Period_Value_Expired+0x14>
    190e:	e6 0f       	add	r30, r22
    1910:	f7 1f       	adc	r31, r23
    1912:	ec 0f       	add	r30, r28
    1914:	fd 1f       	adc	r31, r29
    1916:	df 01       	movw	r26, r30
    1918:	af 5b       	subi	r26, 0xBF	; 191
    191a:	bf 4f       	sbci	r27, 0xFF	; 255
    191c:	fd 96       	adiw	r30, 0x3d	; 61
    191e:	20 81       	ld	r18, Z
    1920:	31 81       	ldd	r19, Z+1	; 0x01
    1922:	42 81       	ldd	r20, Z+2	; 0x02
    1924:	53 81       	ldd	r21, Z+3	; 0x03
    1926:	8d 91       	ld	r24, X+
    1928:	9d 91       	ld	r25, X+
    192a:	0d 90       	ld	r0, X+
    192c:	bc 91       	ld	r27, X
    192e:	a0 2d       	mov	r26, r0
    1930:	28 1b       	sub	r18, r24
    1932:	39 0b       	sbc	r19, r25
    1934:	4a 0b       	sbc	r20, r26
    1936:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1938:	57 fd       	sbrc	r21, 7
    193a:	07 c0       	rjmp	.+14     	; 0x194a <Timebase_DownCounter_Period_Value_Expired+0x58>
  return temp;
}


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    193c:	21 15       	cp	r18, r1
    193e:	31 05       	cpc	r19, r1
    1940:	41 05       	cpc	r20, r1
    1942:	51 05       	cpc	r21, r1
    1944:	11 f0       	breq	.+4      	; 0x194a <Timebase_DownCounter_Period_Value_Expired+0x58>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	10 c0       	rjmp	.+32     	; 0x196a <Timebase_DownCounter_Period_Value_Expired+0x78>
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	cb 01       	movw	r24, r22
    194e:	54 e0       	ldi	r21, 0x04	; 4
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	5a 95       	dec	r21
    1956:	e1 f7       	brne	.-8      	; 0x1950 <Timebase_DownCounter_Period_Value_Expired+0x5e>
    1958:	86 0f       	add	r24, r22
    195a:	97 1f       	adc	r25, r23
    195c:	c8 0f       	add	r28, r24
    195e:	d9 1f       	adc	r29, r25
    1960:	88 ad       	ldd	r24, Y+56	; 0x38
    1962:	80 ff       	sbrs	r24, 0
    1964:	21 e0       	ldi	r18, 0x01	; 1
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    196a:	82 2f       	mov	r24, r18
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <Timebase_DownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    1972:	1f 93       	push	r17
    1974:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1976:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <Timebase_DownCounter_Period_Value_Expired>
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	11 f0       	breq	.+4      	; 0x1982 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	14 c0       	rjmp	.+40     	; 0x19aa <Timebase_DownCounter_Period_Value_Expired_Event+0x38>
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1982:	e0 91 06 02 	lds	r30, 0x0206
    1986:	f0 91 07 02 	lds	r31, 0x0207
    198a:	21 2f       	mov	r18, r17
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	c9 01       	movw	r24, r18
    1990:	b4 e0       	ldi	r27, 0x04	; 4
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	ba 95       	dec	r27
    1998:	e1 f7       	brne	.-8      	; 0x1992 <Timebase_DownCounter_Period_Value_Expired_Event+0x20>
    199a:	82 0f       	add	r24, r18
    199c:	93 1f       	adc	r25, r19
    199e:	e8 0f       	add	r30, r24
    19a0:	f9 1f       	adc	r31, r25
    19a2:	80 ad       	ldd	r24, Z+56	; 0x38
    19a4:	8e 7f       	andi	r24, 0xFE	; 254
    19a6:	80 af       	std	Z+56, r24	; 0x38
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19aa:	1f 91       	pop	r17
    19ac:	08 95       	ret

000019ae <Timebase_DownCounter_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_Expired_Event(window);
    19ae:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <Timebase_DownCounter_Expired_Event>
}
    19b2:	08 95       	ret

000019b4 <Timebase_DownCounter_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
    19b4:	1f 93       	push	r17
    19b6:	18 2f       	mov	r17, r24

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    19b8:	a0 91 06 02 	lds	r26, 0x0206
    19bc:	b0 91 07 02 	lds	r27, 0x0207
    19c0:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_DownCounter_Expired_Event(window);
}


uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    19c2:	9c 01       	movw	r18, r24
    19c4:	44 e0       	ldi	r20, 0x04	; 4
    19c6:	22 0f       	add	r18, r18
    19c8:	33 1f       	adc	r19, r19
    19ca:	4a 95       	dec	r20
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <Timebase_DownCounter_Continuous_Expired_Event+0x12>
    19ce:	28 0f       	add	r18, r24
    19d0:	39 1f       	adc	r19, r25
    19d2:	a2 0f       	add	r26, r18
    19d4:	b3 1f       	adc	r27, r19
    19d6:	d8 96       	adiw	r26, 0x38	; 56
    19d8:	8c 91       	ld	r24, X
    19da:	d8 97       	sbiw	r26, 0x38	; 56
    19dc:	86 95       	lsr	r24
    19de:	8f 70       	andi	r24, 0x0F	; 15
    19e0:	84 30       	cpi	r24, 0x04	; 4
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <Timebase_DownCounter_Continuous_Expired_Event+0x34>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	22 c0       	rjmp	.+68     	; 0x1a2c <Timebase_DownCounter_Continuous_Expired_Event+0x78>
void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
    19e8:	fd 01       	movw	r30, r26
    19ea:	eb 5b       	subi	r30, 0xBB	; 187
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	40 81       	ld	r20, Z
    19f0:	51 81       	ldd	r21, Z+1	; 0x01
    19f2:	62 81       	ldd	r22, Z+2	; 0x02
    19f4:	73 81       	ldd	r23, Z+3	; 0x03
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    19f6:	d9 96       	adiw	r26, 0x39	; 57
    19f8:	1d 92       	st	X+, r1
    19fa:	1d 92       	st	X+, r1
    19fc:	1d 92       	st	X+, r1
    19fe:	1c 92       	st	X, r1
    1a00:	dc 97       	sbiw	r26, 0x3c	; 60
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1a02:	dd 96       	adiw	r26, 0x3d	; 61
    1a04:	1d 92       	st	X+, r1
    1a06:	1d 92       	st	X+, r1
    1a08:	1d 92       	st	X+, r1
    1a0a:	1c 92       	st	X, r1
    1a0c:	13 97       	sbiw	r26, 0x03	; 3
    1a0e:	dd 97       	sbiw	r26, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1a10:	d8 96       	adiw	r26, 0x38	; 56
    1a12:	8c 91       	ld	r24, X
    1a14:	d8 97       	sbiw	r26, 0x38	; 56
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a16:	80 7e       	andi	r24, 0xE0	; 224
    1a18:	d8 96       	adiw	r26, 0x38	; 56
    1a1a:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1a1c:	10 82       	st	Z, r1
    1a1e:	11 82       	std	Z+1, r1	; 0x01
    1a20:	12 82       	std	Z+2, r1	; 0x02
    1a22:	13 82       	std	Z+3, r1	; 0x03

uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_Get_ReloadValue(window);
    Timebase_DownCounter_Clear_All_Flags( window );
	Timebase_DownCounter_Set_Securely(window, temp);
    1a24:	81 2f       	mov	r24, r17
    1a26:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Timebase_DownCounter_Set_Securely>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a2c:	1f 91       	pop	r17
    1a2e:	08 95       	ret

00001a30 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <Timebase_DownCounter_Update>
  }
}
    1a36:	08 95       	ret

00001a38 <Timebase_DownCounter_Reset_All>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1a38:	e0 91 06 02 	lds	r30, 0x0206
    1a3c:	f0 91 07 02 	lds	r31, 0x0207
    1a40:	11 ae       	std	Z+57, r1	; 0x39
    1a42:	12 ae       	std	Z+58, r1	; 0x3a
    1a44:	13 ae       	std	Z+59, r1	; 0x3b
    1a46:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1a48:	fd 96       	adiw	r30, 0x3d	; 61
    1a4a:	10 82       	st	Z, r1
    1a4c:	11 82       	std	Z+1, r1	; 0x01
    1a4e:	12 82       	std	Z+2, r1	; 0x02
    1a50:	13 82       	std	Z+3, r1	; 0x03
    1a52:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1a54:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a56:	80 7e       	andi	r24, 0xE0	; 224
    1a58:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1a5a:	eb 5b       	subi	r30, 0xBB	; 187
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	10 82       	st	Z, r1
    1a60:	11 82       	std	Z+1, r1	; 0x01
    1a62:	12 82       	std	Z+2, r1	; 0x02
    1a64:	13 82       	std	Z+3, r1	; 0x03

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    1a66:	08 95       	ret

00001a68 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    1a68:	e0 91 06 02 	lds	r30, 0x0206
    1a6c:	f0 91 07 02 	lds	r31, 0x0207
    1a70:	82 a1       	ldd	r24, Z+34	; 0x22
}
    1a72:	08 95       	ret

00001a74 <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a74:	0e 94 40 09 	call	0x1280	; 0x1280 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1a78:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <Timebase_DownCounter_Reset_All>
  #endif
}
    1a7c:	08 95       	ret

00001a7e <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
    1a7e:	08 95       	ret

00001a80 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1a80:	0f 93       	push	r16
    1a82:	1f 93       	push	r17
    1a84:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1a86:	0e 94 cc 00 	call	0x198	; 0x198 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	0e 94 67 01 	call	0x2ce	; 0x2ce <Timebase_Timer_Enable>
  Timebase_Reset();
    1a90:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <Timebase_Reset>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1a94:	1f 91       	pop	r17
    1a96:	0f 91       	pop	r16
    1a98:	08 95       	ret

00001a9a <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1a9a:	e0 91 06 02 	lds	r30, 0x0206
    1a9e:	f0 91 07 02 	lds	r31, 0x0207
    1aa2:	82 a1       	ldd	r24, Z+34	; 0x22
    1aa4:	83 ff       	sbrs	r24, 3
    1aa6:	0b c0       	rjmp	.+22     	; 0x1abe <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1aa8:	0e 94 8c 02 	call	0x518	; 0x518 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1aac:	0e 94 3c 09 	call	0x1278	; 0x1278 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1ab0:	e0 91 06 02 	lds	r30, 0x0206
    1ab4:	f0 91 07 02 	lds	r31, 0x0207
    1ab8:	82 a1       	ldd	r24, Z+34	; 0x22
    1aba:	87 7f       	andi	r24, 0xF7	; 247
    1abc:	82 a3       	std	Z+34, r24	; 0x22
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    1abe:	e0 91 06 02 	lds	r30, 0x0206
    1ac2:	f0 91 07 02 	lds	r31, 0x0207
    1ac6:	82 a1       	ldd	r24, Z+34	; 0x22
    1ac8:	81 ff       	sbrs	r24, 1
    1aca:	0b c0       	rjmp	.+22     	; 0x1ae2 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1acc:	0e 94 8c 02 	call	0x518	; 0x518 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    1ad0:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    1ad4:	e0 91 06 02 	lds	r30, 0x0206
    1ad8:	f0 91 07 02 	lds	r31, 0x0207
    1adc:	82 a1       	ldd	r24, Z+34	; 0x22
    1ade:	8d 7f       	andi	r24, 0xFD	; 253
    1ae0:	82 a3       	std	Z+34, r24	; 0x22
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    1ae2:	e0 91 06 02 	lds	r30, 0x0206
    1ae6:	f0 91 07 02 	lds	r31, 0x0207
    1aea:	10 8e       	std	Z+24, r1	; 0x18
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
    1aec:	08 95       	ret

00001aee <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    1aee:	e0 91 06 02 	lds	r30, 0x0206
    1af2:	f0 91 07 02 	lds	r31, 0x0207
    1af6:	86 85       	ldd	r24, Z+14	; 0x0e
    1af8:	97 85       	ldd	r25, Z+15	; 0x0f
    1afa:	01 96       	adiw	r24, 0x01	; 1
    1afc:	97 87       	std	Z+15, r25	; 0x0f
    1afe:	86 87       	std	Z+14, r24	; 0x0e
  Timebase->Time.SubSecondsUpTime++;
    1b00:	80 89       	ldd	r24, Z+16	; 0x10
    1b02:	91 89       	ldd	r25, Z+17	; 0x11
    1b04:	a2 89       	ldd	r26, Z+18	; 0x12
    1b06:	b3 89       	ldd	r27, Z+19	; 0x13
    1b08:	01 96       	adiw	r24, 0x01	; 1
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	b1 1d       	adc	r27, r1
    1b0e:	80 8b       	std	Z+16, r24	; 0x10
    1b10:	91 8b       	std	Z+17, r25	; 0x11
    1b12:	a2 8b       	std	Z+18, r26	; 0x12
    1b14:	b3 8b       	std	Z+19, r27	; 0x13
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1b16:	82 a1       	ldd	r24, Z+34	; 0x22
    1b18:	88 60       	ori	r24, 0x08	; 8
    1b1a:	82 a3       	std	Z+34, r24	; 0x22
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    1b1c:	26 85       	ldd	r18, Z+14	; 0x0e
    1b1e:	37 85       	ldd	r19, Z+15	; 0x0f
    1b20:	80 81       	ld	r24, Z
    1b22:	91 81       	ldd	r25, Z+1	; 0x01
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	80 f0       	brcs	.+32     	; 0x1b4a <Timebase_ISR_Executables+0x5c>
    Timebase->Time.SubSecondsShadow = 0;
    1b2a:	17 86       	std	Z+15, r1	; 0x0f
    1b2c:	16 86       	std	Z+14, r1	; 0x0e
    Timebase->Time.SecondsShadow++;
    1b2e:	84 89       	ldd	r24, Z+20	; 0x14
    1b30:	95 89       	ldd	r25, Z+21	; 0x15
    1b32:	a6 89       	ldd	r26, Z+22	; 0x16
    1b34:	b7 89       	ldd	r27, Z+23	; 0x17
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	a1 1d       	adc	r26, r1
    1b3a:	b1 1d       	adc	r27, r1
    1b3c:	84 8b       	std	Z+20, r24	; 0x14
    1b3e:	95 8b       	std	Z+21, r25	; 0x15
    1b40:	a6 8b       	std	Z+22, r26	; 0x16
    1b42:	b7 8b       	std	Z+23, r27	; 0x17
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    1b44:	82 a1       	ldd	r24, Z+34	; 0x22
    1b46:	82 60       	ori	r24, 0x02	; 2
    1b48:	82 a3       	std	Z+34, r24	; 0x22
    1b4a:	08 95       	ret

00001b4c <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    1b4c:	1f 92       	push	r1
    1b4e:	0f 92       	push	r0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	0f 92       	push	r0
    1b54:	11 24       	eor	r1, r1
    1b56:	2f 93       	push	r18
    1b58:	3f 93       	push	r19
    1b5a:	4f 93       	push	r20
    1b5c:	5f 93       	push	r21
    1b5e:	6f 93       	push	r22
    1b60:	7f 93       	push	r23
    1b62:	8f 93       	push	r24
    1b64:	9f 93       	push	r25
    1b66:	af 93       	push	r26
    1b68:	bf 93       	push	r27
    1b6a:	ef 93       	push	r30
    1b6c:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b6e:	e0 91 06 02 	lds	r30, 0x0206
    1b72:	f0 91 07 02 	lds	r31, 0x0207
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1b7c:	0e 94 77 0d 	call	0x1aee	; 0x1aee <Timebase_ISR_Executables>
}
    1b80:	ff 91       	pop	r31
    1b82:	ef 91       	pop	r30
    1b84:	bf 91       	pop	r27
    1b86:	af 91       	pop	r26
    1b88:	9f 91       	pop	r25
    1b8a:	8f 91       	pop	r24
    1b8c:	7f 91       	pop	r23
    1b8e:	6f 91       	pop	r22
    1b90:	5f 91       	pop	r21
    1b92:	4f 91       	pop	r20
    1b94:	3f 91       	pop	r19
    1b96:	2f 91       	pop	r18
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	0f 90       	pop	r0
    1b9e:	1f 90       	pop	r1
    1ba0:	18 95       	reti

00001ba2 <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
    1ba2:	08 95       	ret

00001ba4 <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    1ba4:	10 92 ae 01 	sts	0x01AE, r1
    1ba8:	ef ea       	ldi	r30, 0xAF	; 175
    1baa:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    1bac:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	e7 3b       	cpi	r30, 0xB7	; 183
    1bb2:	f8 07       	cpc	r31, r24
    1bb4:	d9 f7       	brne	.-10     	; 0x1bac <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    1bb6:	10 82       	st	Z, r1
  UART.LastRxByte = UART_NULL;
    1bb8:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    1bba:	80 e4       	ldi	r24, 0x40	; 64
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	90 93 fa 01 	sts	0x01FA, r25
    1bc2:	80 93 f9 01 	sts	0x01F9, r24
  UART.BufIndex = 0;
    1bc6:	10 92 fc 01 	sts	0x01FC, r1
    1bca:	10 92 fb 01 	sts	0x01FB, r1
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	04 c0       	rjmp	.+8      	; 0x1bda <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    1bd2:	e2 55       	subi	r30, 0x52	; 82
    1bd4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bd6:	13 86       	std	Z+11, r1	; 0x0b
  }
  UART.InputNumDigits = UART_NULL;
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    1bd8:	2f 5f       	subi	r18, 0xFF	; 255
    1bda:	80 91 f9 01 	lds	r24, 0x01F9
    1bde:	90 91 fa 01 	lds	r25, 0x01FA
    1be2:	e2 2f       	mov	r30, r18
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	e8 17       	cp	r30, r24
    1be8:	f9 07       	cpc	r31, r25
    1bea:	98 f3       	brcs	.-26     	; 0x1bd2 <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
    1bec:	08 95       	ret

00001bee <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1bee:	10 92 00 02 	sts	0x0200, r1
    1bf2:	10 92 ff 01 	sts	0x01FF, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1bf6:	10 92 02 02 	sts	0x0202, r1
    1bfa:	10 92 01 02 	sts	0x0201, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1bfe:	10 92 03 02 	sts	0x0203, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1c02:	10 92 04 02 	sts	0x0204, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	80 93 05 02 	sts	0x0205, r24
}
    1c0c:	08 95       	ret

00001c0e <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    1c0e:	08 95       	ret

00001c10 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    1c10:	08 95       	ret

00001c12 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    1c12:	9b 01       	movw	r18, r22
    1c14:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1c16:	60 e6       	ldi	r22, 0x60	; 96
    1c18:	73 ee       	ldi	r23, 0xE3	; 227
    1c1a:	86 e1       	ldi	r24, 0x16	; 22
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__udivmodsi4>
    1c22:	21 50       	subi	r18, 0x01	; 1
    1c24:	30 40       	sbci	r19, 0x00	; 0
    1c26:	40 40       	sbci	r20, 0x00	; 0
    1c28:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    1c2a:	e0 ec       	ldi	r30, 0xC0	; 192
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	82 60       	ori	r24, 0x02	; 2
    1c32:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    1c34:	bb 27       	eor	r27, r27
    1c36:	a5 2f       	mov	r26, r21
    1c38:	94 2f       	mov	r25, r20
    1c3a:	83 2f       	mov	r24, r19
    1c3c:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    1c40:	20 93 c4 00 	sts	0x00C4, r18
}
    1c44:	08 95       	ret

00001c46 <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1c46:	e1 ec       	ldi	r30, 0xC1	; 193
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	88 60       	ori	r24, 0x08	; 8
    1c4e:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c50:	86 e0       	ldi	r24, 0x06	; 6
    1c52:	80 93 c2 00 	sts	0x00C2, r24
}
    1c56:	08 95       	ret

00001c58 <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1c58:	e1 ec       	ldi	r30, 0xC1	; 193
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	80 61       	ori	r24, 0x10	; 16
    1c60:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c62:	86 e0       	ldi	r24, 0x06	; 6
    1c64:	80 93 c2 00 	sts	0x00C2, r24
}
    1c68:	08 95       	ret

00001c6a <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1c6a:	e1 ec       	ldi	r30, 0xC1	; 193
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	80 68       	ori	r24, 0x80	; 128
    1c72:	80 83       	st	Z, r24
  sei();
    1c74:	78 94       	sei
}
    1c76:	08 95       	ret

00001c78 <UART_Clear_Interrupt_Flag>:

void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
    1c78:	08 95       	ret

00001c7a <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    1c7a:	98 2f       	mov	r25, r24
  while( !(UCSR0A & (1<<UDRE0)) );
    1c7c:	80 91 c0 00 	lds	r24, 0x00C0
    1c80:	85 ff       	sbrs	r24, 5
    1c82:	fc cf       	rjmp	.-8      	; 0x1c7c <UART_Tx_Byte+0x2>
  UDR0 = val;                                                                                                        
    1c84:	90 93 c6 00 	sts	0x00C6, r25
}
    1c88:	08 95       	ret

00001c8a <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	0f 92       	push	r0
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    1c94:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    1c96:	80 91 c0 00 	lds	r24, 0x00C0
    1c9a:	84 ff       	sbrs	r24, 4
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <UART_Rx_Byte+0x1e>
    val = UDR0;
    1c9e:	80 91 c6 00 	lds	r24, 0x00C6
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	08 c0       	rjmp	.+16     	; 0x1cb8 <UART_Rx_Byte+0x2e>
  }else if( UCSR0A & (1<<DOR0) ){
    1ca8:	80 91 c0 00 	lds	r24, 0x00C0
    1cac:	83 ff       	sbrs	r24, 3
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <UART_Rx_Byte+0x34>
    val = UDR0;
    1cb0:	80 91 c6 00 	lds	r24, 0x00C6
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	80 93 ae 01 	sts	0x01AE, r24
    1cbc:	05 c0       	rjmp	.+10     	; 0x1cc8 <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    1cbe:	80 91 c6 00 	lds	r24, 0x00C6
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
    1cc4:	10 92 ae 01 	sts	0x01AE, r1
  }
  return val;
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cca:	0f 90       	pop	r0
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1cd2:	10 92 fd 01 	sts	0x01FD, r1
  UART.Timer.ResetVal = UART_NULL;
    1cd6:	10 92 fe 01 	sts	0x01FE, r1
}
    1cda:	08 95       	ret

00001cdc <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
    1cdc:	84 e0       	ldi	r24, 0x04	; 4
    1cde:	80 93 fe 01 	sts	0x01FE, r24
  UART.Timer.ResetVal = 0xFF - temp1;
    1ce2:	8b ef       	ldi	r24, 0xFB	; 251
    1ce4:	80 93 fe 01 	sts	0x01FE, r24
  
  ASSR   = 0x00;
    1ce8:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
    1cec:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
    1cf0:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
    1cf4:	e0 e7       	ldi	r30, 0x70	; 112
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	10 82       	st	Z, r1
  TCNT2  = 0x00;
    1cfa:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 83       	st	Z, r24
  sei();
    1d06:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
    1d08:	08 95       	ret

00001d0a <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1d0a:	87 e0       	ldi	r24, 0x07	; 7
    1d0c:	80 93 b1 00 	sts	0x00B1, r24
}
    1d10:	08 95       	ret

00001d12 <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    1d12:	10 92 b1 00 	sts	0x00B1, r1
}
    1d16:	08 95       	ret

00001d18 <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    1d18:	80 91 fd 01 	lds	r24, 0x01FD
}
    1d1c:	08 95       	ret

00001d1e <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
    1d1e:	80 91 b2 00 	lds	r24, 0x00B2
}
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	08 95       	ret

00001d26 <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    1d26:	80 91 fe 01 	lds	r24, 0x01FE
    1d2a:	80 93 b2 00 	sts	0x00B2, r24
}
    1d2e:	08 95       	ret

00001d30 <UART_Timer_Clear_Interrupt_Flag>:

void UART_Timer_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}
    1d30:	08 95       	ret

00001d32 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    1d32:	ac 01       	movw	r20, r24
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	0c c0       	rjmp	.+24     	; 0x1d54 <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    1d3c:	fa 01       	movw	r30, r20
    1d3e:	e2 0f       	add	r30, r18
    1d40:	f3 1f       	adc	r31, r19
    1d42:	e0 81       	ld	r30, Z
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1d44:	80 91 c0 00 	lds	r24, 0x00C0
    1d48:	85 ff       	sbrs	r24, 5
    1d4a:	fc cf       	rjmp	.-8      	; 0x1d44 <UART_Tx_Buf+0x12>
  UDR0 = val;                                                                                                        
    1d4c:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    1d50:	2f 5f       	subi	r18, 0xFF	; 255
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	26 17       	cp	r18, r22
    1d56:	37 07       	cpc	r19, r23
    1d58:	88 f3       	brcs	.-30     	; 0x1d3c <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    1d5a:	08 95       	ret

00001d5c <UART_Tx_NL>:
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1d5c:	80 91 c0 00 	lds	r24, 0x00C0
    1d60:	85 ff       	sbrs	r24, 5
    1d62:	fc cf       	rjmp	.-8      	; 0x1d5c <UART_Tx_NL>
  UDR0 = val;                                                                                                        
    1d64:	8d e0       	ldi	r24, 0x0D	; 13
    1d66:	80 93 c6 00 	sts	0x00C6, r24
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1d6a:	80 91 c0 00 	lds	r24, 0x00C0
    1d6e:	85 ff       	sbrs	r24, 5
    1d70:	fc cf       	rjmp	.-8      	; 0x1d6a <UART_Tx_NL+0xe>
  UDR0 = val;                                                                                                        
    1d72:	8a e0       	ldi	r24, 0x0A	; 10
    1d74:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    1d78:	08 95       	ret

00001d7a <UART_Tx_SP>:
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1d7a:	80 91 c0 00 	lds	r24, 0x00C0
    1d7e:	85 ff       	sbrs	r24, 5
    1d80:	fc cf       	rjmp	.-8      	; 0x1d7a <UART_Tx_SP>
  UDR0 = val;                                                                                                        
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    1d88:	08 95       	ret

00001d8a <UART_Tx_CM>:
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1d8a:	80 91 c0 00 	lds	r24, 0x00C0
    1d8e:	85 ff       	sbrs	r24, 5
    1d90:	fc cf       	rjmp	.-8      	; 0x1d8a <UART_Tx_CM>
  UDR0 = val;                                                                                                        
    1d92:	8c e2       	ldi	r24, 0x2C	; 44
    1d94:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    1d98:	08 95       	ret

00001d9a <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    1d9a:	ac 01       	movw	r20, r24
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	07 c0       	rjmp	.+14     	; 0x1dae <UART_Tx_Text+0x14>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1da0:	80 91 c0 00 	lds	r24, 0x00C0
    1da4:	85 ff       	sbrs	r24, 5
    1da6:	fc cf       	rjmp	.-8      	; 0x1da0 <UART_Tx_Text+0x6>
  UDR0 = val;                                                                                                        
    1da8:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    1dac:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    1dae:	fa 01       	movw	r30, r20
    1db0:	e2 0f       	add	r30, r18
    1db2:	f1 1d       	adc	r31, r1
    1db4:	e0 81       	ld	r30, Z
    1db6:	ee 23       	and	r30, r30
    1db8:	99 f7       	brne	.-26     	; 0x1da0 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    1dba:	08 95       	ret

00001dbc <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    1dbc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
  UART_Tx_NL();
    1dc0:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <UART_Tx_NL>
}
    1dc4:	08 95       	ret

00001dc6 <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    1dc6:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1dca:	80 91 c0 00 	lds	r24, 0x00C0
    1dce:	85 ff       	sbrs	r24, 5
    1dd0:	fc cf       	rjmp	.-8      	; 0x1dca <UART_Tx_Text_SP+0x4>
  UDR0 = val;                                                                                                        
    1dd2:	80 e2       	ldi	r24, 0x20	; 32
    1dd4:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    1dd8:	08 95       	ret

00001dda <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    1dda:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1dde:	80 91 c0 00 	lds	r24, 0x00C0
    1de2:	85 ff       	sbrs	r24, 5
    1de4:	fc cf       	rjmp	.-8      	; 0x1dde <UART_Tx_Text_CM+0x4>
  UDR0 = val;                                                                                                        
    1de6:	8c e2       	ldi	r24, 0x2C	; 44
    1de8:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    1dec:	08 95       	ret

00001dee <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    1dee:	bf 92       	push	r11
    1df0:	cf 92       	push	r12
    1df2:	df 92       	push	r13
    1df4:	ef 92       	push	r14
    1df6:	ff 92       	push	r15
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	6b 01       	movw	r12, r22
    1dfe:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    1e00:	61 15       	cp	r22, r1
    1e02:	71 05       	cpc	r23, r1
    1e04:	81 05       	cpc	r24, r1
    1e06:	91 05       	cpc	r25, r1
    1e08:	31 f4       	brne	.+12     	; 0x1e16 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    1e0a:	10 92 af 01 	sts	0x01AF, r1
    UART.InputNumDigits = 1;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	80 93 b7 01 	sts	0x01B7, r24
    1e14:	23 c0       	rjmp	.+70     	; 0x1e5c <UART_Determine_Digit_Numbers+0x6e>
    1e16:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    1e18:	0b 2d       	mov	r16, r11
    1e1a:	10 e0       	ldi	r17, 0x00	; 0
    1e1c:	02 55       	subi	r16, 0x52	; 82
    1e1e:	1e 4f       	sbci	r17, 0xFE	; 254
    1e20:	c7 01       	movw	r24, r14
    1e22:	b6 01       	movw	r22, r12
    1e24:	2a e0       	ldi	r18, 0x0A	; 10
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__udivmodsi4>
    1e30:	f8 01       	movw	r30, r16
    1e32:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    1e34:	c7 01       	movw	r24, r14
    1e36:	b6 01       	movw	r22, r12
    1e38:	2a e0       	ldi	r18, 0x0A	; 10
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__udivmodsi4>
    1e44:	c9 01       	movw	r24, r18
    1e46:	da 01       	movw	r26, r20
    1e48:	6c 01       	movw	r12, r24
    1e4a:	7d 01       	movw	r14, r26
      i++;
    1e4c:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    1e4e:	c1 14       	cp	r12, r1
    1e50:	d1 04       	cpc	r13, r1
    1e52:	e1 04       	cpc	r14, r1
    1e54:	f1 04       	cpc	r15, r1
    1e56:	01 f7       	brne	.-64     	; 0x1e18 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    1e58:	b0 92 b7 01 	sts	0x01B7, r11
  }
}
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	ff 90       	pop	r15
    1e62:	ef 90       	pop	r14
    1e64:	df 90       	pop	r13
    1e66:	cf 90       	pop	r12
    1e68:	bf 90       	pop	r11
    1e6a:	08 95       	ret

00001e6c <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1e6c:	e0 91 b7 01 	lds	r30, 0x01B7
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1e72:	2e 2f       	mov	r18, r30
    1e74:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    1e76:	e2 2f       	mov	r30, r18
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	e2 55       	subi	r30, 0x52	; 82
    1e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7e:	91 81       	ldd	r25, Z+1	; 0x01
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1e80:	80 91 c0 00 	lds	r24, 0x00C0
    1e84:	85 ff       	sbrs	r24, 5
    1e86:	fc cf       	rjmp	.-8      	; 0x1e80 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    1e88:	90 5d       	subi	r25, 0xD0	; 208
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
  UDR0 = val;                                                                                                        
    1e8a:	90 93 c6 00 	sts	0x00C6, r25
    1e8e:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1e90:	ee 23       	and	r30, r30
    1e92:	79 f7       	brne	.-34     	; 0x1e72 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    1e94:	08 95       	ret

00001e96 <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
  if(num < 0){
    1e9a:	97 ff       	sbrs	r25, 7
    1e9c:	0e c0       	rjmp	.+28     	; 0x1eba <UART_Tx_Number+0x24>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1e9e:	80 91 c0 00 	lds	r24, 0x00C0
    1ea2:	85 ff       	sbrs	r24, 5
    1ea4:	fc cf       	rjmp	.-8      	; 0x1e9e <UART_Tx_Number+0x8>
  UDR0 = val;                                                                                                        
    1ea6:	8d e2       	ldi	r24, 0x2D	; 45
    1ea8:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    1eac:	50 95       	com	r21
    1eae:	40 95       	com	r20
    1eb0:	30 95       	com	r19
    1eb2:	21 95       	neg	r18
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    1eba:	ca 01       	movw	r24, r20
    1ebc:	b9 01       	movw	r22, r18
    1ebe:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    1ec2:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <UART_Tx_Number_Digits>
}
    1ec6:	08 95       	ret

00001ec8 <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    1ec8:	1f 93       	push	r17
    1eca:	cf 93       	push	r28
    1ecc:	df 93       	push	r29
    1ece:	ab 01       	movw	r20, r22
    1ed0:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    1ed2:	4f 3f       	cpi	r20, 0xFF	; 255
    1ed4:	51 05       	cpc	r21, r1
    1ed6:	61 05       	cpc	r22, r1
    1ed8:	71 05       	cpc	r23, r1
    1eda:	09 f0       	breq	.+2      	; 0x1ede <UART_Tx_Number_Hex+0x16>
    1edc:	28 f4       	brcc	.+10     	; 0x1ee8 <UART_Tx_Number_Hex+0x20>
    1ede:	e8 e0       	ldi	r30, 0x08	; 8
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	c2 e0       	ldi	r28, 0x02	; 2
    1ee4:	d0 e0       	ldi	r29, 0x00	; 0
    1ee6:	11 c0       	rjmp	.+34     	; 0x1f0a <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    1ee8:	40 30       	cpi	r20, 0x00	; 0
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	58 07       	cpc	r21, r24
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	68 07       	cpc	r22, r24
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	78 07       	cpc	r23, r24
    1ef6:	28 f0       	brcs	.+10     	; 0x1f02 <UART_Tx_Number_Hex+0x3a>
    1ef8:	e0 e2       	ldi	r30, 0x20	; 32
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	c8 e0       	ldi	r28, 0x08	; 8
    1efe:	d0 e0       	ldi	r29, 0x00	; 0
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <UART_Tx_Number_Hex+0x42>
    1f02:	e0 e1       	ldi	r30, 0x10	; 16
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	c4 e0       	ldi	r28, 0x04	; 4
    1f08:	d0 e0       	ldi	r29, 0x00	; 0
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1f0a:	80 91 c0 00 	lds	r24, 0x00C0
    1f0e:	85 ff       	sbrs	r24, 5
    1f10:	fc cf       	rjmp	.-8      	; 0x1f0a <UART_Tx_Number_Hex+0x42>
  UDR0 = val;                                                                                                        
    1f12:	80 e3       	ldi	r24, 0x30	; 48
    1f14:	80 93 c6 00 	sts	0x00C6, r24
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1f18:	80 91 c0 00 	lds	r24, 0x00C0
    1f1c:	85 ff       	sbrs	r24, 5
    1f1e:	fc cf       	rjmp	.-8      	; 0x1f18 <UART_Tx_Number_Hex+0x50>
  UDR0 = val;                                                                                                        
    1f20:	88 e7       	ldi	r24, 0x78	; 120
    1f22:	80 93 c6 00 	sts	0x00C6, r24
    1f26:	10 e0       	ldi	r17, 0x00	; 0
    1f28:	1f c0       	rjmp	.+62     	; 0x1f68 <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    1f2a:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    1f2c:	db 01       	movw	r26, r22
    1f2e:	ca 01       	movw	r24, r20
    1f30:	0e 2e       	mov	r0, r30
    1f32:	04 c0       	rjmp	.+8      	; 0x1f3c <UART_Tx_Number_Hex+0x74>
    1f34:	b6 95       	lsr	r27
    1f36:	a7 95       	ror	r26
    1f38:	97 95       	ror	r25
    1f3a:	87 95       	ror	r24
    1f3c:	0a 94       	dec	r0
    1f3e:	d2 f7       	brpl	.-12     	; 0x1f34 <UART_Tx_Number_Hex+0x6c>
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	8f 70       	andi	r24, 0x0F	; 15
    1f44:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    1f46:	8a 30       	cpi	r24, 0x0A	; 10
    1f48:	91 05       	cpc	r25, r1
    1f4a:	20 f0       	brcs	.+8      	; 0x1f54 <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    1f4c:	9c 01       	movw	r18, r24
    1f4e:	29 5c       	subi	r18, 0xC9	; 201
    1f50:	3f 4f       	sbci	r19, 0xFF	; 255
    1f52:	03 c0       	rjmp	.+6      	; 0x1f5a <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    1f54:	9c 01       	movw	r18, r24
    1f56:	20 5d       	subi	r18, 0xD0	; 208
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1f5a:	80 91 c0 00 	lds	r24, 0x00C0
    1f5e:	85 ff       	sbrs	r24, 5
    1f60:	fc cf       	rjmp	.-8      	; 0x1f5a <UART_Tx_Number_Hex+0x92>
  UDR0 = val;                                                                                                        
    1f62:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    1f66:	1f 5f       	subi	r17, 0xFF	; 255
    1f68:	81 2f       	mov	r24, r17
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	8c 17       	cp	r24, r28
    1f6e:	9d 07       	cpc	r25, r29
    1f70:	e0 f2       	brcs	.-72     	; 0x1f2a <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	08 95       	ret

00001f7a <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	cf 93       	push	r28
    1f88:	df 93       	push	r29
    1f8a:	ab 01       	movw	r20, r22
    1f8c:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    1f8e:	4f 3f       	cpi	r20, 0xFF	; 255
    1f90:	51 05       	cpc	r21, r1
    1f92:	61 05       	cpc	r22, r1
    1f94:	71 05       	cpc	r23, r1
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <UART_Tx_Number_Bin+0x20>
    1f98:	10 f4       	brcc	.+4      	; 0x1f9e <UART_Tx_Number_Bin+0x24>
    1f9a:	97 e0       	ldi	r25, 0x07	; 7
    1f9c:	0b c0       	rjmp	.+22     	; 0x1fb4 <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    1f9e:	40 30       	cpi	r20, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	58 07       	cpc	r21, r24
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	68 07       	cpc	r22, r24
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	78 07       	cpc	r23, r24
    1fac:	10 f0       	brcs	.+4      	; 0x1fb2 <UART_Tx_Number_Bin+0x38>
    1fae:	9f e1       	ldi	r25, 0x1F	; 31
    1fb0:	01 c0       	rjmp	.+2      	; 0x1fb4 <UART_Tx_Number_Bin+0x3a>
    1fb2:	9f e0       	ldi	r25, 0x0F	; 15
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1fb4:	80 91 c0 00 	lds	r24, 0x00C0
    1fb8:	85 ff       	sbrs	r24, 5
    1fba:	fc cf       	rjmp	.-8      	; 0x1fb4 <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;                                                                                                        
    1fbc:	80 e3       	ldi	r24, 0x30	; 48
    1fbe:	80 93 c6 00 	sts	0x00C6, r24
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    1fc2:	80 91 c0 00 	lds	r24, 0x00C0
    1fc6:	85 ff       	sbrs	r24, 5
    1fc8:	fc cf       	rjmp	.-8      	; 0x1fc2 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;                                                                                                        
    1fca:	82 e6       	ldi	r24, 0x62	; 98
    1fcc:	80 93 c6 00 	sts	0x00C6, r24
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    1fd4:	e9 2f       	mov	r30, r25
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
  UDR0 = val;                                                                                                        
    1fd8:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1fda:	11 e3       	ldi	r17, 0x31	; 49
    1fdc:	ef 01       	movw	r28, r30
    1fde:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1fe0:	cf 01       	movw	r24, r30
    1fe2:	82 1b       	sub	r24, r18
    1fe4:	93 0b       	sbc	r25, r19
    1fe6:	6a 01       	movw	r12, r20
    1fe8:	7b 01       	movw	r14, r22
    1fea:	04 c0       	rjmp	.+8      	; 0x1ff4 <UART_Tx_Number_Bin+0x7a>
    1fec:	f6 94       	lsr	r15
    1fee:	e7 94       	ror	r14
    1ff0:	d7 94       	ror	r13
    1ff2:	c7 94       	ror	r12
    1ff4:	8a 95       	dec	r24
    1ff6:	d2 f7       	brpl	.-12     	; 0x1fec <UART_Tx_Number_Bin+0x72>
    1ff8:	d7 01       	movw	r26, r14
    1ffa:	c6 01       	movw	r24, r12
    1ffc:	81 70       	andi	r24, 0x01	; 1
    1ffe:	90 70       	andi	r25, 0x00	; 0
    2000:	89 2b       	or	r24, r25
    2002:	39 f0       	breq	.+14     	; 0x2012 <UART_Tx_Number_Bin+0x98>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2004:	80 91 c0 00 	lds	r24, 0x00C0
    2008:	85 ff       	sbrs	r24, 5
    200a:	fc cf       	rjmp	.-8      	; 0x2004 <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;                                                                                                        
    200c:	10 93 c6 00 	sts	0x00C6, r17
    2010:	06 c0       	rjmp	.+12     	; 0x201e <UART_Tx_Number_Bin+0xa4>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2012:	80 91 c0 00 	lds	r24, 0x00C0
    2016:	85 ff       	sbrs	r24, 5
    2018:	fc cf       	rjmp	.-8      	; 0x2012 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;                                                                                                        
    201a:	00 93 c6 00 	sts	0x00C6, r16
    201e:	2f 5f       	subi	r18, 0xFF	; 255
    2020:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    2022:	2c 17       	cp	r18, r28
    2024:	3d 07       	cpc	r19, r29
    2026:	e1 f6       	brne	.-72     	; 0x1fe0 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	08 95       	ret

0000203a <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    203a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <UART_Tx_Number>
  UART_Tx_NL();
    203e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <UART_Tx_NL>
}
    2042:	08 95       	ret

00002044 <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    2044:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <UART_Tx_Number>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2048:	80 91 c0 00 	lds	r24, 0x00C0
    204c:	85 ff       	sbrs	r24, 5
    204e:	fc cf       	rjmp	.-8      	; 0x2048 <UART_Tx_Number_SP+0x4>
  UDR0 = val;                                                                                                        
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    2056:	08 95       	ret

00002058 <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    2058:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <UART_Tx_Number>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    205c:	80 91 c0 00 	lds	r24, 0x00C0
    2060:	85 ff       	sbrs	r24, 5
    2062:	fc cf       	rjmp	.-8      	; 0x205c <UART_Tx_Number_CM+0x4>
  UDR0 = val;                                                                                                        
    2064:	8c e2       	ldi	r24, 0x2C	; 44
    2066:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    206a:	08 95       	ret

0000206c <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    206c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <UART_Tx_Number_Hex>
  UART_Tx_NL();
    2070:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <UART_Tx_NL>
}
    2074:	08 95       	ret

00002076 <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    2076:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <UART_Tx_Number_Hex>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    207a:	80 91 c0 00 	lds	r24, 0x00C0
    207e:	85 ff       	sbrs	r24, 5
    2080:	fc cf       	rjmp	.-8      	; 0x207a <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;                                                                                                        
    2082:	80 e2       	ldi	r24, 0x20	; 32
    2084:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    2088:	08 95       	ret

0000208a <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    208a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <UART_Tx_Number_Hex>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    208e:	80 91 c0 00 	lds	r24, 0x00C0
    2092:	85 ff       	sbrs	r24, 5
    2094:	fc cf       	rjmp	.-8      	; 0x208e <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;                                                                                                        
    2096:	8c e2       	ldi	r24, 0x2C	; 44
    2098:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    209c:	08 95       	ret

0000209e <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    209e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <UART_Tx_Number_Bin>
  UART_Tx_NL();
    20a2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <UART_Tx_NL>
}
    20a6:	08 95       	ret

000020a8 <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    20a8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <UART_Tx_Number_Bin>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    20ac:	80 91 c0 00 	lds	r24, 0x00C0
    20b0:	85 ff       	sbrs	r24, 5
    20b2:	fc cf       	rjmp	.-8      	; 0x20ac <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;                                                                                                        
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    20ba:	08 95       	ret

000020bc <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    20bc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <UART_Tx_Number_Bin>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    20c0:	80 91 c0 00 	lds	r24, 0x00C0
    20c4:	85 ff       	sbrs	r24, 5
    20c6:	fc cf       	rjmp	.-8      	; 0x20c0 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;                                                                                                        
    20c8:	8c e2       	ldi	r24, 0x2C	; 44
    20ca:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    20ce:	08 95       	ret

000020d0 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	7a 01       	movw	r14, r20
    20da:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    20dc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    20e0:	80 91 c0 00 	lds	r24, 0x00C0
    20e4:	85 ff       	sbrs	r24, 5
    20e6:	fc cf       	rjmp	.-8      	; 0x20e0 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;                                                                                                        
    20e8:	80 e2       	ldi	r24, 0x20	; 32
    20ea:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    20ee:	c8 01       	movw	r24, r16
    20f0:	b7 01       	movw	r22, r14
    20f2:	0e 94 1d 10 	call	0x203a	; 0x203a <UART_Tx_Number_NL>
}
    20f6:	1f 91       	pop	r17
    20f8:	0f 91       	pop	r16
    20fa:	ff 90       	pop	r15
    20fc:	ef 90       	pop	r14
    20fe:	08 95       	ret

00002100 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    2100:	ef 92       	push	r14
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	7a 01       	movw	r14, r20
    210a:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    210c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2110:	80 91 c0 00 	lds	r24, 0x00C0
    2114:	85 ff       	sbrs	r24, 5
    2116:	fc cf       	rjmp	.-8      	; 0x2110 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;                                                                                                        
    2118:	80 e2       	ldi	r24, 0x20	; 32
    211a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    211e:	c8 01       	movw	r24, r16
    2120:	b7 01       	movw	r22, r14
    2122:	0e 94 22 10 	call	0x2044	; 0x2044 <UART_Tx_Number_SP>
}
    2126:	1f 91       	pop	r17
    2128:	0f 91       	pop	r16
    212a:	ff 90       	pop	r15
    212c:	ef 90       	pop	r14
    212e:	08 95       	ret

00002130 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    2130:	ef 92       	push	r14
    2132:	ff 92       	push	r15
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	7a 01       	movw	r14, r20
    213a:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    213c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2140:	80 91 c0 00 	lds	r24, 0x00C0
    2144:	85 ff       	sbrs	r24, 5
    2146:	fc cf       	rjmp	.-8      	; 0x2140 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;                                                                                                        
    2148:	80 e2       	ldi	r24, 0x20	; 32
    214a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    214e:	c8 01       	movw	r24, r16
    2150:	b7 01       	movw	r22, r14
    2152:	0e 94 2c 10 	call	0x2058	; 0x2058 <UART_Tx_Number_CM>
}
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	08 95       	ret

00002160 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    2160:	ef 92       	push	r14
    2162:	ff 92       	push	r15
    2164:	0f 93       	push	r16
    2166:	1f 93       	push	r17
    2168:	7a 01       	movw	r14, r20
    216a:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    216c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2170:	80 91 c0 00 	lds	r24, 0x00C0
    2174:	85 ff       	sbrs	r24, 5
    2176:	fc cf       	rjmp	.-8      	; 0x2170 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;                                                                                                        
    2178:	80 e2       	ldi	r24, 0x20	; 32
    217a:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    217e:	c8 01       	movw	r24, r16
    2180:	b7 01       	movw	r22, r14
    2182:	0e 94 36 10 	call	0x206c	; 0x206c <UART_Tx_Number_Hex_NL>
}
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	08 95       	ret

00002190 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	7a 01       	movw	r14, r20
    219a:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    219c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    21a0:	80 91 c0 00 	lds	r24, 0x00C0
    21a4:	85 ff       	sbrs	r24, 5
    21a6:	fc cf       	rjmp	.-8      	; 0x21a0 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;                                                                                                        
    21a8:	80 e2       	ldi	r24, 0x20	; 32
    21aa:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    21ae:	c8 01       	movw	r24, r16
    21b0:	b7 01       	movw	r22, r14
    21b2:	0e 94 3b 10 	call	0x2076	; 0x2076 <UART_Tx_Number_Hex_SP>
}
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	08 95       	ret

000021c0 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	7a 01       	movw	r14, r20
    21ca:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    21cc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    21d0:	80 91 c0 00 	lds	r24, 0x00C0
    21d4:	85 ff       	sbrs	r24, 5
    21d6:	fc cf       	rjmp	.-8      	; 0x21d0 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;                                                                                                        
    21d8:	80 e2       	ldi	r24, 0x20	; 32
    21da:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    21de:	c8 01       	movw	r24, r16
    21e0:	b7 01       	movw	r22, r14
    21e2:	0e 94 45 10 	call	0x208a	; 0x208a <UART_Tx_Number_Hex_CM>
}
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	08 95       	ret

000021f0 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	7a 01       	movw	r14, r20
    21fa:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    21fc:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2200:	80 91 c0 00 	lds	r24, 0x00C0
    2204:	85 ff       	sbrs	r24, 5
    2206:	fc cf       	rjmp	.-8      	; 0x2200 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;                                                                                                        
    2208:	80 e2       	ldi	r24, 0x20	; 32
    220a:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    220e:	c8 01       	movw	r24, r16
    2210:	b7 01       	movw	r22, r14
    2212:	0e 94 4f 10 	call	0x209e	; 0x209e <UART_Tx_Number_Bin_NL>
}
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	08 95       	ret

00002220 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	7a 01       	movw	r14, r20
    222a:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    222c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2230:	80 91 c0 00 	lds	r24, 0x00C0
    2234:	85 ff       	sbrs	r24, 5
    2236:	fc cf       	rjmp	.-8      	; 0x2230 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;                                                                                                        
    2238:	80 e2       	ldi	r24, 0x20	; 32
    223a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    223e:	c8 01       	movw	r24, r16
    2240:	b7 01       	movw	r22, r14
    2242:	0e 94 54 10 	call	0x20a8	; 0x20a8 <UART_Tx_Number_Bin_SP>
}
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	08 95       	ret

00002250 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    2250:	ef 92       	push	r14
    2252:	ff 92       	push	r15
    2254:	0f 93       	push	r16
    2256:	1f 93       	push	r17
    2258:	7a 01       	movw	r14, r20
    225a:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    225c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <UART_Tx_Text>
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    2260:	80 91 c0 00 	lds	r24, 0x00C0
    2264:	85 ff       	sbrs	r24, 5
    2266:	fc cf       	rjmp	.-8      	; 0x2260 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;                                                                                                        
    2268:	80 e2       	ldi	r24, 0x20	; 32
    226a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    226e:	c8 01       	movw	r24, r16
    2270:	b7 01       	movw	r22, r14
    2272:	0e 94 5e 10 	call	0x20bc	; 0x20bc <UART_Tx_Number_Bin_CM>
}
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	08 95       	ret

00002280 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    2284:	fc 01       	movw	r30, r24
    2286:	e2 55       	subi	r30, 0x52	; 82
    2288:	fe 4f       	sbci	r31, 0xFE	; 254
    228a:	13 86       	std	Z+11, r1	; 0x0b
    228c:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    228e:	80 34       	cpi	r24, 0x40	; 64
    2290:	91 05       	cpc	r25, r1
    2292:	c1 f7       	brne	.-16     	; 0x2284 <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    2294:	10 92 fc 01 	sts	0x01FC, r1
    2298:	10 92 fb 01 	sts	0x01FB, r1
}
    229c:	08 95       	ret

0000229e <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    229e:	fc 01       	movw	r30, r24
    22a0:	e2 55       	subi	r30, 0x52	; 82
    22a2:	fe 4f       	sbci	r31, 0xFE	; 254
    22a4:	83 85       	ldd	r24, Z+11	; 0x0b
}
    22a6:	08 95       	ret

000022a8 <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    22a8:	80 91 fb 01 	lds	r24, 0x01FB
    22ac:	90 91 fc 01 	lds	r25, 0x01FC
}
    22b0:	08 95       	ret

000022b2 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
    22b2:	80 91 04 02 	lds	r24, 0x0204
}
    22b6:	08 95       	ret

000022b8 <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    22b8:	80 91 fb 01 	lds	r24, 0x01FB
    22bc:	90 91 fc 01 	lds	r25, 0x01FC
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
    22c0:	08 95       	ret

000022c2 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
    22c2:	20 91 ff 01 	lds	r18, 0x01FF
    22c6:	30 91 00 02 	lds	r19, 0x0200
}
    22ca:	c9 01       	movw	r24, r18
    22cc:	08 95       	ret

000022ce <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
    22ce:	20 91 01 02 	lds	r18, 0x0201
    22d2:	30 91 02 02 	lds	r19, 0x0202
}
    22d6:	c9 01       	movw	r24, r18
    22d8:	08 95       	ret

000022da <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
    22da:	80 91 03 02 	lds	r24, 0x0203
}
    22de:	08 95       	ret

000022e0 <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
    22e0:	80 91 05 02 	lds	r24, 0x0205
}
    22e4:	08 95       	ret

000022e6 <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    22e6:	10 92 04 02 	sts	0x0204, r1
}
    22ea:	08 95       	ret

000022ec <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    22f0:	fc 01       	movw	r30, r24
    22f2:	e2 55       	subi	r30, 0x52	; 82
    22f4:	fe 4f       	sbci	r31, 0xFE	; 254
    22f6:	13 86       	std	Z+11, r1	; 0x0b
    22f8:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    22fa:	80 34       	cpi	r24, 0x40	; 64
    22fc:	91 05       	cpc	r25, r1
    22fe:	c1 f7       	brne	.-16     	; 0x22f0 <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    2300:	10 92 fc 01 	sts	0x01FC, r1
    2304:	10 92 fb 01 	sts	0x01FB, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	80 93 05 02 	sts	0x0205, r24
}
    230e:	08 95       	ret

00002310 <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
    2310:	ac 01       	movw	r20, r24
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	0a c0       	rjmp	.+20     	; 0x232c <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2318:	f9 01       	movw	r30, r18
    231a:	e2 55       	subi	r30, 0x52	; 82
    231c:	fe 4f       	sbci	r31, 0xFE	; 254
    231e:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
    2320:	fa 01       	movw	r30, r20
    2322:	e2 0f       	add	r30, r18
    2324:	f3 1f       	adc	r31, r19
    2326:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    2328:	2f 5f       	subi	r18, 0xFF	; 255
    232a:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    232c:	80 91 fb 01 	lds	r24, 0x01FB
    2330:	90 91 fc 01 	lds	r25, 0x01FC
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	28 17       	cp	r18, r24
    2338:	39 07       	cpc	r19, r25
    233a:	70 f3       	brcs	.-36     	; 0x2318 <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
    233c:	08 95       	ret

0000233e <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	0c c0       	rjmp	.+24     	; 0x235c <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2344:	f9 01       	movw	r30, r18
    2346:	e2 55       	subi	r30, 0x52	; 82
    2348:	fe 4f       	sbci	r31, 0xFE	; 254
    234a:	93 85       	ldd	r25, Z+11	; 0x0b
void UART_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

void UART_Tx_Byte(uint8_t val){
  while( !(UCSR0A & (1<<UDRE0)) );
    234c:	80 91 c0 00 	lds	r24, 0x00C0
    2350:	85 ff       	sbrs	r24, 5
    2352:	fc cf       	rjmp	.-8      	; 0x234c <UART_Data_Print_Buf+0xe>
  UDR0 = val;                                                                                                        
    2354:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    2358:	2f 5f       	subi	r18, 0xFF	; 255
    235a:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    235c:	80 91 fb 01 	lds	r24, 0x01FB
    2360:	90 91 fc 01 	lds	r25, 0x01FC
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	28 17       	cp	r18, r24
    2368:	39 07       	cpc	r19, r25
    236a:	60 f3       	brcs	.-40     	; 0x2344 <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
    236c:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <UART_Tx_NL>
}
    2370:	08 95       	ret

00002372 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
    2372:	80 91 ae 01 	lds	r24, 0x01AE
}
    2376:	08 95       	ret

00002378 <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
    2378:	10 92 ae 01 	sts	0x01AE, r1
}
    237c:	08 95       	ret

0000237e <UART_ISR_Handler>:

/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART_Clear_Interrupt_Flag();
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    237e:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <UART_Rx_Byte>
    2382:	80 93 b8 01 	sts	0x01B8, r24
  if(UART.Error == 0x00){
    2386:	80 91 ae 01 	lds	r24, 0x01AE
    238a:	88 23       	and	r24, r24
    238c:	11 f5       	brne	.+68     	; 0x23d2 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    238e:	e0 91 fb 01 	lds	r30, 0x01FB
    2392:	f0 91 fc 01 	lds	r31, 0x01FC
    2396:	80 91 b8 01 	lds	r24, 0x01B8
    239a:	e2 55       	subi	r30, 0x52	; 82
    239c:	fe 4f       	sbci	r31, 0xFE	; 254
    239e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    23a0:	80 91 fb 01 	lds	r24, 0x01FB
    23a4:	90 91 fc 01 	lds	r25, 0x01FC
    23a8:	01 96       	adiw	r24, 0x01	; 1
    23aa:	90 93 fc 01 	sts	0x01FC, r25
    23ae:	80 93 fb 01 	sts	0x01FB, r24
    if(UART.BufIndex >= UART.BufSize){
    23b2:	20 91 fb 01 	lds	r18, 0x01FB
    23b6:	30 91 fc 01 	lds	r19, 0x01FC
    23ba:	80 91 f9 01 	lds	r24, 0x01F9
    23be:	90 91 fa 01 	lds	r25, 0x01FA
    23c2:	28 17       	cp	r18, r24
    23c4:	39 07       	cpc	r19, r25
    23c6:	38 f0       	brcs	.+14     	; 0x23d6 <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    23c8:	10 92 fc 01 	sts	0x01FC, r1
    23cc:	10 92 fb 01 	sts	0x01FB, r1
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    23d2:	10 92 b8 01 	sts	0x01B8, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    23d6:	80 91 fe 01 	lds	r24, 0x01FE
    23da:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
    23de:	80 91 fd 01 	lds	r24, 0x01FD
    23e2:	88 23       	and	r24, r24
    23e4:	31 f4       	brne	.+12     	; 0x23f2 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    23e6:	87 e0       	ldi	r24, 0x07	; 7
    23e8:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 fd 01 	sts	0x01FD, r24
    23f2:	08 95       	ret

000023f4 <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    23f4:	1f 92       	push	r1
    23f6:	0f 92       	push	r0
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	0f 92       	push	r0
    23fc:	11 24       	eor	r1, r1
    23fe:	2f 93       	push	r18
    2400:	3f 93       	push	r19
    2402:	4f 93       	push	r20
    2404:	5f 93       	push	r21
    2406:	6f 93       	push	r22
    2408:	7f 93       	push	r23
    240a:	8f 93       	push	r24
    240c:	9f 93       	push	r25
    240e:	af 93       	push	r26
    2410:	bf 93       	push	r27
    2412:	ef 93       	push	r30
    2414:	ff 93       	push	r31
  UART_ISR_Handler();
    2416:	0e 94 bf 11 	call	0x237e	; 0x237e <UART_ISR_Handler>
}
    241a:	ff 91       	pop	r31
    241c:	ef 91       	pop	r30
    241e:	bf 91       	pop	r27
    2420:	af 91       	pop	r26
    2422:	9f 91       	pop	r25
    2424:	8f 91       	pop	r24
    2426:	7f 91       	pop	r23
    2428:	6f 91       	pop	r22
    242a:	5f 91       	pop	r21
    242c:	4f 91       	pop	r20
    242e:	3f 91       	pop	r19
    2430:	2f 91       	pop	r18
    2432:	0f 90       	pop	r0
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	0f 90       	pop	r0
    2438:	1f 90       	pop	r1
    243a:	18 95       	reti

0000243c <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    243c:	36 2f       	mov	r19, r22
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	28 27       	eor	r18, r24
    2442:	39 27       	eor	r19, r25
    2444:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    2446:	61 e2       	ldi	r22, 0x21	; 33
    2448:	70 e1       	ldi	r23, 0x10	; 16
    244a:	c9 01       	movw	r24, r18
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    2450:	37 ff       	sbrs	r19, 7
    2452:	04 c0       	rjmp	.+8      	; 0x245c <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    2454:	9c 01       	movw	r18, r24
    2456:	26 27       	eor	r18, r22
    2458:	37 27       	eor	r19, r23
    245a:	01 c0       	rjmp	.+2      	; 0x245e <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    245c:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    245e:	4f 5f       	subi	r20, 0xFF	; 255
    2460:	48 30       	cpi	r20, 0x08	; 8
    2462:	99 f7       	brne	.-26     	; 0x244a <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    2464:	c9 01       	movw	r24, r18
    2466:	08 95       	ret

00002468 <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	06 2f       	mov	r16, r22
    2472:	ec 01       	movw	r28, r24
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	10 e0       	ldi	r17, 0x00	; 0
    247a:	06 c0       	rjmp	.+12     	; 0x2488 <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    247c:	c9 01       	movw	r24, r18
    247e:	69 91       	ld	r22, Y+
    2480:	0e 94 1e 12 	call	0x243c	; 0x243c <UART_CRC_Calculate_Byte>
    2484:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    2486:	1f 5f       	subi	r17, 0xFF	; 255
    2488:	10 17       	cp	r17, r16
    248a:	c0 f3       	brcs	.-16     	; 0x247c <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    248c:	c9 01       	movw	r24, r18
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2498:	80 91 fb 01 	lds	r24, 0x01FB
    249c:	90 91 fc 01 	lds	r25, 0x01FC

/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    24a0:	82 30       	cpi	r24, 0x02	; 2
    24a2:	28 f4       	brcc	.+10     	; 0x24ae <UART_RX_Packet_CRC_Check+0x16>
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	1f c0       	rjmp	.+62     	; 0x24ec <UART_RX_Packet_CRC_Check+0x54>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    24ae:	60 91 fb 01 	lds	r22, 0x01FB
    24b2:	70 91 fc 01 	lds	r23, 0x01FC
/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    24b6:	62 50       	subi	r22, 0x02	; 2
    24b8:	89 eb       	ldi	r24, 0xB9	; 185
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	0e 94 34 12 	call	0x2468	; 0x2468 <UART_CRC_Calculate_Block>
    24c0:	ac 01       	movw	r20, r24
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    24c2:	e0 91 fb 01 	lds	r30, 0x01FB
    24c6:	f0 91 fc 01 	lds	r31, 0x01FC

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    24cc:	e4 55       	subi	r30, 0x54	; 84
    24ce:	fe 4f       	sbci	r31, 0xFE	; 254
    24d0:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    crc_recv <<= 8;
    24d2:	92 2f       	mov	r25, r18
    24d4:	80 e0       	ldi	r24, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    24d6:	e0 91 fb 01 	lds	r30, 0x01FB
    24da:	f0 91 fc 01 	lds	r31, 0x01FC
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    crc_recv <<= 8;
    crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    24de:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    24e0:	e3 55       	subi	r30, 0x53	; 83
    24e2:	fe 4f       	sbci	r31, 0xFE	; 254
    24e4:	23 85       	ldd	r18, Z+11	; 0x0b
  uint16_t crc_calc = 0, crc_recv = 0;
  if( UART_Data_Len_Get() >= 2){
    crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    crc_recv <<= 8;
    crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	28 2b       	or	r18, r24
    24ea:	39 2b       	or	r19, r25
  }
  UART.RxPacket.CalculatedCRC = crc_calc;
    24ec:	50 93 00 02 	sts	0x0200, r21
    24f0:	40 93 ff 01 	sts	0x01FF, r20
  UART.RxPacket.ReceivedCRC = crc_recv;
    24f4:	30 93 02 02 	sts	0x0202, r19
    24f8:	20 93 01 02 	sts	0x0201, r18
  if( UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC ){
    24fc:	20 91 ff 01 	lds	r18, 0x01FF
    2500:	30 91 00 02 	lds	r19, 0x0200
    2504:	80 91 01 02 	lds	r24, 0x0201
    2508:	90 91 02 02 	lds	r25, 0x0202
    250c:	28 17       	cp	r18, r24
    250e:	39 07       	cpc	r19, r25
    2510:	21 f4       	brne	.+8      	; 0x251a <UART_RX_Packet_CRC_Check+0x82>
    UART.RxPacket.CRCStatus = UART_TRUE;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 03 02 	sts	0x0203, r24
    2518:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
    251a:	10 92 03 02 	sts	0x0203, r1
    251e:	08 95       	ret

00002520 <UART_Timer_ISR_Handler>:
  
}

void UART_Timer_ISR_Handler(void){
  UART_Timer_Clear_Interrupt_Flag();
  if(UART.Timer.Enabled == UART_TRUE){
    2520:	80 91 fd 01 	lds	r24, 0x01FD
    2524:	81 30       	cpi	r24, 0x01	; 1
    2526:	21 f4       	brne	.+8      	; 0x2530 <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    2528:	10 92 b1 00 	sts	0x00B1, r1

void UART_Timer_ISR_Handler(void){
  UART_Timer_Clear_Interrupt_Flag();
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
    252c:	10 92 fd 01 	sts	0x01FD, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2530:	80 91 fb 01 	lds	r24, 0x01FB
    2534:	90 91 fc 01 	lds	r25, 0x01FC
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    2538:	88 23       	and	r24, r24
    253a:	71 f0       	breq	.+28     	; 0x2558 <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
    253c:	80 91 05 02 	lds	r24, 0x0205
    2540:	88 23       	and	r24, r24
    2542:	19 f4       	brne	.+6      	; 0x254a <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
    2544:	80 e1       	ldi	r24, 0x10	; 16
    2546:	80 93 ae 01 	sts	0x01AE, r24
	}
    UART_RX_Packet_CRC_Check();
    254a:	0e 94 4c 12 	call	0x2498	; 0x2498 <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	80 93 04 02 	sts	0x0204, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
    2554:	10 92 05 02 	sts	0x0205, r1
    2558:	08 95       	ret

0000255a <__vector_9>:

void UART_Timer_Clear_Interrupt_Flag(void){
  //Clear flag if necessary
}

ISR(TIMER2_OVF_vect){
    255a:	1f 92       	push	r1
    255c:	0f 92       	push	r0
    255e:	0f b6       	in	r0, 0x3f	; 63
    2560:	0f 92       	push	r0
    2562:	11 24       	eor	r1, r1
    2564:	2f 93       	push	r18
    2566:	3f 93       	push	r19
    2568:	4f 93       	push	r20
    256a:	5f 93       	push	r21
    256c:	6f 93       	push	r22
    256e:	7f 93       	push	r23
    2570:	8f 93       	push	r24
    2572:	9f 93       	push	r25
    2574:	af 93       	push	r26
    2576:	bf 93       	push	r27
    2578:	ef 93       	push	r30
    257a:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    257c:	0e 94 90 12 	call	0x2520	; 0x2520 <UART_Timer_ISR_Handler>
}
    2580:	ff 91       	pop	r31
    2582:	ef 91       	pop	r30
    2584:	bf 91       	pop	r27
    2586:	af 91       	pop	r26
    2588:	9f 91       	pop	r25
    258a:	8f 91       	pop	r24
    258c:	7f 91       	pop	r23
    258e:	6f 91       	pop	r22
    2590:	5f 91       	pop	r21
    2592:	4f 91       	pop	r20
    2594:	3f 91       	pop	r19
    2596:	2f 91       	pop	r18
    2598:	0f 90       	pop	r0
    259a:	0f be       	out	0x3f, r0	; 63
    259c:	0f 90       	pop	r0
    259e:	1f 90       	pop	r1
    25a0:	18 95       	reti

000025a2 <UART_RX_Packet_Read_Complete>:
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
  }
}

void UART_RX_Packet_Read_Complete(void){
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    25a6:	fc 01       	movw	r30, r24
    25a8:	e2 55       	subi	r30, 0x52	; 82
    25aa:	fe 4f       	sbci	r31, 0xFE	; 254
    25ac:	13 86       	std	Z+11, r1	; 0x0b
    25ae:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    25b0:	80 34       	cpi	r24, 0x40	; 64
    25b2:	91 05       	cpc	r25, r1
    25b4:	c1 f7       	brne	.-16     	; 0x25a6 <UART_RX_Packet_Read_Complete+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    25b6:	10 92 fc 01 	sts	0x01FC, r1
    25ba:	10 92 fb 01 	sts	0x01FB, r1
uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
}

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    25be:	10 92 04 02 	sts	0x0204, r1
}

void UART_RX_Packet_Read_Complete(void){
  UART_Buf_Flush();
  UART_Data_Clear_Available_Flag();
  UART_Data_Clear_Read_Complete_Flag();
    25c2:	0e 94 76 11 	call	0x22ec	; 0x22ec <UART_Data_Clear_Read_Complete_Flag>
}
    25c6:	08 95       	ret

000025c8 <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    25c8:	ef 92       	push	r14
    25ca:	ff 92       	push	r15
    25cc:	0f 93       	push	r16
    25ce:	1f 93       	push	r17
    25d0:	7b 01       	movw	r14, r22
    25d2:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    25d4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    25d8:	10 92 00 02 	sts	0x0200, r1
    25dc:	10 92 ff 01 	sts	0x01FF, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    25e0:	10 92 02 02 	sts	0x0202, r1
    25e4:	10 92 01 02 	sts	0x0201, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    25e8:	10 92 03 02 	sts	0x0203, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    25ec:	10 92 04 02 	sts	0x0204, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	80 93 05 02 	sts	0x0205, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    25f6:	10 92 fd 01 	sts	0x01FD, r1
  UART.Timer.ResetVal = UART_NULL;
    25fa:	10 92 fe 01 	sts	0x01FE, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    25fe:	c8 01       	movw	r24, r16
    2600:	b7 01       	movw	r22, r14
    2602:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    2606:	80 91 c1 00 	lds	r24, 0x00C1
    260a:	88 60       	ori	r24, 0x08	; 8
    260c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    2610:	96 e0       	ldi	r25, 0x06	; 6
    2612:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    2616:	80 91 c1 00 	lds	r24, 0x00C1
    261a:	80 61       	ori	r24, 0x10	; 16
    261c:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    2620:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    2624:	80 91 c1 00 	lds	r24, 0x00C1
    2628:	80 68       	ori	r24, 0x80	; 128
    262a:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    262e:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    2630:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <UART_Timer_Init>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    2638:	fc 01       	movw	r30, r24
    263a:	e2 55       	subi	r30, 0x52	; 82
    263c:	fe 4f       	sbci	r31, 0xFE	; 254
    263e:	13 86       	std	Z+11, r1	; 0x0b
    2640:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    2642:	80 34       	cpi	r24, 0x40	; 64
    2644:	91 05       	cpc	r25, r1
    2646:	c1 f7       	brne	.-16     	; 0x2638 <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    2648:	10 92 fc 01 	sts	0x01FC, r1
    264c:	10 92 fb 01 	sts	0x01FB, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    2650:	1f 91       	pop	r17
    2652:	0f 91       	pop	r16
    2654:	ff 90       	pop	r15
    2656:	ef 90       	pop	r14
    2658:	08 95       	ret

0000265a <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    265a:	10 92 34 01 	sts	0x0134, r1
    265e:	10 92 35 01 	sts	0x0135, r1
    2662:	10 92 36 01 	sts	0x0136, r1
    2666:	10 92 37 01 	sts	0x0137, r1
  PID.Input.Ki = 0;
    266a:	10 92 38 01 	sts	0x0138, r1
    266e:	10 92 39 01 	sts	0x0139, r1
    2672:	10 92 3a 01 	sts	0x013A, r1
    2676:	10 92 3b 01 	sts	0x013B, r1
  PID.Input.Kd = 0;
    267a:	10 92 3c 01 	sts	0x013C, r1
    267e:	10 92 3d 01 	sts	0x013D, r1
    2682:	10 92 3e 01 	sts	0x013E, r1
    2686:	10 92 3f 01 	sts	0x013F, r1
  PID.Input.SetPoint = 0;
    268a:	10 92 40 01 	sts	0x0140, r1
    268e:	10 92 41 01 	sts	0x0141, r1
    2692:	10 92 42 01 	sts	0x0142, r1
    2696:	10 92 43 01 	sts	0x0143, r1
  PID.Input.ProcessValue = 0;
    269a:	10 92 44 01 	sts	0x0144, r1
    269e:	10 92 45 01 	sts	0x0145, r1
    26a2:	10 92 46 01 	sts	0x0146, r1
    26a6:	10 92 47 01 	sts	0x0147, r1
  PID.Error.PError = 0;
    26aa:	10 92 48 01 	sts	0x0148, r1
    26ae:	10 92 49 01 	sts	0x0149, r1
    26b2:	10 92 4a 01 	sts	0x014A, r1
    26b6:	10 92 4b 01 	sts	0x014B, r1
  PID.Error.DError = 0;
    26ba:	10 92 4c 01 	sts	0x014C, r1
    26be:	10 92 4d 01 	sts	0x014D, r1
    26c2:	10 92 4e 01 	sts	0x014E, r1
    26c6:	10 92 4f 01 	sts	0x014F, r1
  PID.Error.IError = 0;
    26ca:	10 92 50 01 	sts	0x0150, r1
    26ce:	10 92 51 01 	sts	0x0151, r1
    26d2:	10 92 52 01 	sts	0x0152, r1
    26d6:	10 92 53 01 	sts	0x0153, r1
  PID.Error.IErrorLimit = 0;
    26da:	10 92 54 01 	sts	0x0154, r1
    26de:	10 92 55 01 	sts	0x0155, r1
    26e2:	10 92 56 01 	sts	0x0156, r1
    26e6:	10 92 57 01 	sts	0x0157, r1
  PID.Error.LastError = 0;
    26ea:	10 92 58 01 	sts	0x0158, r1
    26ee:	10 92 59 01 	sts	0x0159, r1
    26f2:	10 92 5a 01 	sts	0x015A, r1
    26f6:	10 92 5b 01 	sts	0x015B, r1
  PID.Products.PError = 0;
    26fa:	10 92 5c 01 	sts	0x015C, r1
    26fe:	10 92 5d 01 	sts	0x015D, r1
    2702:	10 92 5e 01 	sts	0x015E, r1
    2706:	10 92 5f 01 	sts	0x015F, r1
  PID.Products.IError = 0;
    270a:	10 92 60 01 	sts	0x0160, r1
    270e:	10 92 61 01 	sts	0x0161, r1
    2712:	10 92 62 01 	sts	0x0162, r1
    2716:	10 92 63 01 	sts	0x0163, r1
  PID.Products.DError = 0;
    271a:	10 92 64 01 	sts	0x0164, r1
    271e:	10 92 65 01 	sts	0x0165, r1
    2722:	10 92 66 01 	sts	0x0166, r1
    2726:	10 92 67 01 	sts	0x0167, r1
  PID.Products.ScaleFact = 0;
    272a:	10 92 68 01 	sts	0x0168, r1
    272e:	10 92 69 01 	sts	0x0169, r1
    2732:	10 92 6a 01 	sts	0x016A, r1
    2736:	10 92 6b 01 	sts	0x016B, r1
  PID.Output = 0;
    273a:	10 92 6c 01 	sts	0x016C, r1
    273e:	10 92 6d 01 	sts	0x016D, r1
    2742:	10 92 6e 01 	sts	0x016E, r1
    2746:	10 92 6f 01 	sts	0x016F, r1
  PID.OutputNonNegative = 0;
    274a:	10 92 70 01 	sts	0x0170, r1
    274e:	10 92 71 01 	sts	0x0171, r1
    2752:	10 92 72 01 	sts	0x0172, r1
    2756:	10 92 73 01 	sts	0x0173, r1
}
    275a:	08 95       	ret

0000275c <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    275c:	60 93 34 01 	sts	0x0134, r22
    2760:	70 93 35 01 	sts	0x0135, r23
    2764:	80 93 36 01 	sts	0x0136, r24
    2768:	90 93 37 01 	sts	0x0137, r25
}
    276c:	08 95       	ret

0000276e <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    276e:	60 93 38 01 	sts	0x0138, r22
    2772:	70 93 39 01 	sts	0x0139, r23
    2776:	80 93 3a 01 	sts	0x013A, r24
    277a:	90 93 3b 01 	sts	0x013B, r25
}
    277e:	08 95       	ret

00002780 <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2780:	60 93 3c 01 	sts	0x013C, r22
    2784:	70 93 3d 01 	sts	0x013D, r23
    2788:	80 93 3e 01 	sts	0x013E, r24
    278c:	90 93 3f 01 	sts	0x013F, r25
}
    2790:	08 95       	ret

00002792 <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    279a:	60 93 34 01 	sts	0x0134, r22
    279e:	70 93 35 01 	sts	0x0135, r23
    27a2:	80 93 36 01 	sts	0x0136, r24
    27a6:	90 93 37 01 	sts	0x0137, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    27aa:	20 93 38 01 	sts	0x0138, r18
    27ae:	30 93 39 01 	sts	0x0139, r19
    27b2:	40 93 3a 01 	sts	0x013A, r20
    27b6:	50 93 3b 01 	sts	0x013B, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    27ba:	e0 92 3c 01 	sts	0x013C, r14
    27be:	f0 92 3d 01 	sts	0x013D, r15
    27c2:	00 93 3e 01 	sts	0x013E, r16
    27c6:	10 93 3f 01 	sts	0x013F, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	08 95       	ret

000027d4 <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    27d4:	60 93 40 01 	sts	0x0140, r22
    27d8:	70 93 41 01 	sts	0x0141, r23
    27dc:	80 93 42 01 	sts	0x0142, r24
    27e0:	90 93 43 01 	sts	0x0143, r25
}
    27e4:	08 95       	ret

000027e6 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    27e6:	60 93 44 01 	sts	0x0144, r22
    27ea:	70 93 45 01 	sts	0x0145, r23
    27ee:	80 93 46 01 	sts	0x0146, r24
    27f2:	90 93 47 01 	sts	0x0147, r25
}
    27f6:	08 95       	ret

000027f8 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    27f8:	60 93 54 01 	sts	0x0154, r22
    27fc:	70 93 55 01 	sts	0x0155, r23
    2800:	80 93 56 01 	sts	0x0156, r24
    2804:	90 93 57 01 	sts	0x0157, r25
}
    2808:	08 95       	ret

0000280a <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    280a:	60 93 68 01 	sts	0x0168, r22
    280e:	70 93 69 01 	sts	0x0169, r23
    2812:	80 93 6a 01 	sts	0x016A, r24
    2816:	90 93 6b 01 	sts	0x016B, r25
}
    281a:	08 95       	ret

0000281c <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    281c:	10 92 50 01 	sts	0x0150, r1
    2820:	10 92 51 01 	sts	0x0151, r1
    2824:	10 92 52 01 	sts	0x0152, r1
    2828:	10 92 53 01 	sts	0x0153, r1
}
    282c:	08 95       	ret

0000282e <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    282e:	ef 92       	push	r14
    2830:	ff 92       	push	r15
    2832:	0f 93       	push	r16
    2834:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    2836:	20 91 40 01 	lds	r18, 0x0140
    283a:	30 91 41 01 	lds	r19, 0x0141
    283e:	40 91 42 01 	lds	r20, 0x0142
    2842:	50 91 43 01 	lds	r21, 0x0143
    2846:	80 91 44 01 	lds	r24, 0x0144
    284a:	90 91 45 01 	lds	r25, 0x0145
    284e:	a0 91 46 01 	lds	r26, 0x0146
    2852:	b0 91 47 01 	lds	r27, 0x0147
    2856:	28 1b       	sub	r18, r24
    2858:	39 0b       	sbc	r19, r25
    285a:	4a 0b       	sbc	r20, r26
    285c:	5b 0b       	sbc	r21, r27
    285e:	20 93 48 01 	sts	0x0148, r18
    2862:	30 93 49 01 	sts	0x0149, r19
    2866:	40 93 4a 01 	sts	0x014A, r20
    286a:	50 93 4b 01 	sts	0x014B, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    286e:	80 91 58 01 	lds	r24, 0x0158
    2872:	90 91 59 01 	lds	r25, 0x0159
    2876:	a0 91 5a 01 	lds	r26, 0x015A
    287a:	b0 91 5b 01 	lds	r27, 0x015B
    287e:	79 01       	movw	r14, r18
    2880:	8a 01       	movw	r16, r20
    2882:	e8 1a       	sub	r14, r24
    2884:	f9 0a       	sbc	r15, r25
    2886:	0a 0b       	sbc	r16, r26
    2888:	1b 0b       	sbc	r17, r27
    288a:	e0 92 4c 01 	sts	0x014C, r14
    288e:	f0 92 4d 01 	sts	0x014D, r15
    2892:	00 93 4e 01 	sts	0x014E, r16
    2896:	10 93 4f 01 	sts	0x014F, r17
  PID.Error.LastError = PID.Error.PError;
    289a:	20 93 58 01 	sts	0x0158, r18
    289e:	30 93 59 01 	sts	0x0159, r19
    28a2:	40 93 5a 01 	sts	0x015A, r20
    28a6:	50 93 5b 01 	sts	0x015B, r21
  PID.Error.IError += PID.Error.PError;
    28aa:	e0 90 50 01 	lds	r14, 0x0150
    28ae:	f0 90 51 01 	lds	r15, 0x0151
    28b2:	00 91 52 01 	lds	r16, 0x0152
    28b6:	10 91 53 01 	lds	r17, 0x0153
    28ba:	e2 0e       	add	r14, r18
    28bc:	f3 1e       	adc	r15, r19
    28be:	04 1f       	adc	r16, r20
    28c0:	15 1f       	adc	r17, r21
    28c2:	e0 92 50 01 	sts	0x0150, r14
    28c6:	f0 92 51 01 	sts	0x0151, r15
    28ca:	00 93 52 01 	sts	0x0152, r16
    28ce:	10 93 53 01 	sts	0x0153, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    28d2:	80 91 54 01 	lds	r24, 0x0154
    28d6:	90 91 55 01 	lds	r25, 0x0155
    28da:	a0 91 56 01 	lds	r26, 0x0156
    28de:	b0 91 57 01 	lds	r27, 0x0157
    28e2:	8e 15       	cp	r24, r14
    28e4:	9f 05       	cpc	r25, r15
    28e6:	a0 07       	cpc	r26, r16
    28e8:	b1 07       	cpc	r27, r17
    28ea:	4c f4       	brge	.+18     	; 0x28fe <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    28ec:	80 93 50 01 	sts	0x0150, r24
    28f0:	90 93 51 01 	sts	0x0151, r25
    28f4:	a0 93 52 01 	sts	0x0152, r26
    28f8:	b0 93 53 01 	sts	0x0153, r27
    28fc:	14 c0       	rjmp	.+40     	; 0x2926 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    28fe:	22 27       	eor	r18, r18
    2900:	33 27       	eor	r19, r19
    2902:	a9 01       	movw	r20, r18
    2904:	28 1b       	sub	r18, r24
    2906:	39 0b       	sbc	r19, r25
    2908:	4a 0b       	sbc	r20, r26
    290a:	5b 0b       	sbc	r21, r27
    290c:	e2 16       	cp	r14, r18
    290e:	f3 06       	cpc	r15, r19
    2910:	04 07       	cpc	r16, r20
    2912:	15 07       	cpc	r17, r21
    2914:	44 f4       	brge	.+16     	; 0x2926 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    2916:	20 93 50 01 	sts	0x0150, r18
    291a:	30 93 51 01 	sts	0x0151, r19
    291e:	40 93 52 01 	sts	0x0152, r20
    2922:	50 93 53 01 	sts	0x0153, r21
  }
}
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	ff 90       	pop	r15
    292c:	ef 90       	pop	r14
    292e:	08 95       	ret

00002930 <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    2930:	6f 92       	push	r6
    2932:	7f 92       	push	r7
    2934:	8f 92       	push	r8
    2936:	9f 92       	push	r9
    2938:	af 92       	push	r10
    293a:	bf 92       	push	r11
    293c:	cf 92       	push	r12
    293e:	df 92       	push	r13
    2940:	ef 92       	push	r14
    2942:	ff 92       	push	r15
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    2948:	60 91 38 01 	lds	r22, 0x0138
    294c:	70 91 39 01 	lds	r23, 0x0139
    2950:	80 91 3a 01 	lds	r24, 0x013A
    2954:	90 91 3b 01 	lds	r25, 0x013B
    2958:	20 91 50 01 	lds	r18, 0x0150
    295c:	30 91 51 01 	lds	r19, 0x0151
    2960:	40 91 52 01 	lds	r20, 0x0152
    2964:	50 91 53 01 	lds	r21, 0x0153
    2968:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
    296c:	3b 01       	movw	r6, r22
    296e:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    2970:	60 91 3c 01 	lds	r22, 0x013C
    2974:	70 91 3d 01 	lds	r23, 0x013D
    2978:	80 91 3e 01 	lds	r24, 0x013E
    297c:	90 91 3f 01 	lds	r25, 0x013F
    2980:	20 91 4c 01 	lds	r18, 0x014C
    2984:	30 91 4d 01 	lds	r19, 0x014D
    2988:	40 91 4e 01 	lds	r20, 0x014E
    298c:	50 91 4f 01 	lds	r21, 0x014F
    2990:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
    2994:	5b 01       	movw	r10, r22
    2996:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    2998:	e0 90 68 01 	lds	r14, 0x0168
    299c:	f0 90 69 01 	lds	r15, 0x0169
    29a0:	00 91 6a 01 	lds	r16, 0x016A
    29a4:	10 91 6b 01 	lds	r17, 0x016B
    29a8:	60 91 34 01 	lds	r22, 0x0134
    29ac:	70 91 35 01 	lds	r23, 0x0135
    29b0:	80 91 36 01 	lds	r24, 0x0136
    29b4:	90 91 37 01 	lds	r25, 0x0137
    29b8:	20 91 48 01 	lds	r18, 0x0148
    29bc:	30 91 49 01 	lds	r19, 0x0149
    29c0:	40 91 4a 01 	lds	r20, 0x014A
    29c4:	50 91 4b 01 	lds	r21, 0x014B
    29c8:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__mulsi3>
    29cc:	a8 01       	movw	r20, r16
    29ce:	97 01       	movw	r18, r14
    29d0:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
    29d4:	20 93 5c 01 	sts	0x015C, r18
    29d8:	30 93 5d 01 	sts	0x015D, r19
    29dc:	40 93 5e 01 	sts	0x015E, r20
    29e0:	50 93 5f 01 	sts	0x015F, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    29e4:	c4 01       	movw	r24, r8
    29e6:	b3 01       	movw	r22, r6
    29e8:	a8 01       	movw	r20, r16
    29ea:	97 01       	movw	r18, r14
    29ec:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
    29f0:	20 93 60 01 	sts	0x0160, r18
    29f4:	30 93 61 01 	sts	0x0161, r19
    29f8:	40 93 62 01 	sts	0x0162, r20
    29fc:	50 93 63 01 	sts	0x0163, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    2a00:	c6 01       	movw	r24, r12
    2a02:	b5 01       	movw	r22, r10
    2a04:	a8 01       	movw	r20, r16
    2a06:	97 01       	movw	r18, r14
    2a08:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__divmodsi4>
    2a0c:	20 93 64 01 	sts	0x0164, r18
    2a10:	30 93 65 01 	sts	0x0165, r19
    2a14:	40 93 66 01 	sts	0x0166, r20
    2a18:	50 93 67 01 	sts	0x0167, r21
}
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	ff 90       	pop	r15
    2a22:	ef 90       	pop	r14
    2a24:	df 90       	pop	r13
    2a26:	cf 90       	pop	r12
    2a28:	bf 90       	pop	r11
    2a2a:	af 90       	pop	r10
    2a2c:	9f 90       	pop	r9
    2a2e:	8f 90       	pop	r8
    2a30:	7f 90       	pop	r7
    2a32:	6f 90       	pop	r6
    2a34:	08 95       	ret

00002a36 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    2a36:	0e 94 17 14 	call	0x282e	; 0x282e <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    2a3a:	0e 94 98 14 	call	0x2930	; 0x2930 <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    2a3e:	20 91 5c 01 	lds	r18, 0x015C
    2a42:	30 91 5d 01 	lds	r19, 0x015D
    2a46:	40 91 5e 01 	lds	r20, 0x015E
    2a4a:	50 91 5f 01 	lds	r21, 0x015F
  control_value += PID.Products.IError;
    2a4e:	80 91 60 01 	lds	r24, 0x0160
    2a52:	90 91 61 01 	lds	r25, 0x0161
    2a56:	a0 91 62 01 	lds	r26, 0x0162
    2a5a:	b0 91 63 01 	lds	r27, 0x0163
    2a5e:	28 0f       	add	r18, r24
    2a60:	39 1f       	adc	r19, r25
    2a62:	4a 1f       	adc	r20, r26
    2a64:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    2a66:	80 91 64 01 	lds	r24, 0x0164
    2a6a:	90 91 65 01 	lds	r25, 0x0165
    2a6e:	a0 91 66 01 	lds	r26, 0x0166
    2a72:	b0 91 67 01 	lds	r27, 0x0167
    2a76:	28 0f       	add	r18, r24
    2a78:	39 1f       	adc	r19, r25
    2a7a:	4a 1f       	adc	r20, r26
    2a7c:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    2a7e:	20 93 6c 01 	sts	0x016C, r18
    2a82:	30 93 6d 01 	sts	0x016D, r19
    2a86:	40 93 6e 01 	sts	0x016E, r20
    2a8a:	50 93 6f 01 	sts	0x016F, r21
  if(control_value < 0){
    2a8e:	57 ff       	sbrs	r21, 7
    2a90:	09 c0       	rjmp	.+18     	; 0x2aa4 <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    2a92:	10 92 70 01 	sts	0x0170, r1
    2a96:	10 92 71 01 	sts	0x0171, r1
    2a9a:	10 92 72 01 	sts	0x0172, r1
    2a9e:	10 92 73 01 	sts	0x0173, r1
    2aa2:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    2aa4:	20 93 70 01 	sts	0x0170, r18
    2aa8:	30 93 71 01 	sts	0x0171, r19
    2aac:	40 93 72 01 	sts	0x0172, r20
    2ab0:	50 93 73 01 	sts	0x0173, r21
    2ab4:	08 95       	ret

00002ab6 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    2ab6:	60 91 34 01 	lds	r22, 0x0134
    2aba:	70 91 35 01 	lds	r23, 0x0135
  return PID.Input.Kp;
}
    2abe:	80 91 36 01 	lds	r24, 0x0136
    2ac2:	90 91 37 01 	lds	r25, 0x0137
    2ac6:	08 95       	ret

00002ac8 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2ac8:	60 91 38 01 	lds	r22, 0x0138
    2acc:	70 91 39 01 	lds	r23, 0x0139
  return PID.Input.Ki;
}
    2ad0:	80 91 3a 01 	lds	r24, 0x013A
    2ad4:	90 91 3b 01 	lds	r25, 0x013B
    2ad8:	08 95       	ret

00002ada <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    2ada:	60 91 3c 01 	lds	r22, 0x013C
    2ade:	70 91 3d 01 	lds	r23, 0x013D
  return PID.Input.Kd;
}
    2ae2:	80 91 3e 01 	lds	r24, 0x013E
    2ae6:	90 91 3f 01 	lds	r25, 0x013F
    2aea:	08 95       	ret

00002aec <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    2aec:	60 91 40 01 	lds	r22, 0x0140
    2af0:	70 91 41 01 	lds	r23, 0x0141
  return PID.Input.SetPoint;
}
    2af4:	80 91 42 01 	lds	r24, 0x0142
    2af8:	90 91 43 01 	lds	r25, 0x0143
    2afc:	08 95       	ret

00002afe <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    2afe:	60 91 44 01 	lds	r22, 0x0144
    2b02:	70 91 45 01 	lds	r23, 0x0145
  return PID.Input.ProcessValue;
}
    2b06:	80 91 46 01 	lds	r24, 0x0146
    2b0a:	90 91 47 01 	lds	r25, 0x0147
    2b0e:	08 95       	ret

00002b10 <PID_Get_PError>:

signed long PID_Get_PError(void){
    2b10:	60 91 48 01 	lds	r22, 0x0148
    2b14:	70 91 49 01 	lds	r23, 0x0149
  return PID.Error.PError;
}
    2b18:	80 91 4a 01 	lds	r24, 0x014A
    2b1c:	90 91 4b 01 	lds	r25, 0x014B
    2b20:	08 95       	ret

00002b22 <PID_Get_IError>:

signed long PID_Get_IError(void){
    2b22:	60 91 50 01 	lds	r22, 0x0150
    2b26:	70 91 51 01 	lds	r23, 0x0151
  return PID.Error.IError;
}
    2b2a:	80 91 52 01 	lds	r24, 0x0152
    2b2e:	90 91 53 01 	lds	r25, 0x0153
    2b32:	08 95       	ret

00002b34 <PID_Get_DError>:

signed long PID_Get_DError(void){
    2b34:	60 91 4c 01 	lds	r22, 0x014C
    2b38:	70 91 4d 01 	lds	r23, 0x014D
  return PID.Error.DError;
}
    2b3c:	80 91 4e 01 	lds	r24, 0x014E
    2b40:	90 91 4f 01 	lds	r25, 0x014F
    2b44:	08 95       	ret

00002b46 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    2b46:	60 91 54 01 	lds	r22, 0x0154
    2b4a:	70 91 55 01 	lds	r23, 0x0155
  return PID.Error.IErrorLimit;
}
    2b4e:	80 91 56 01 	lds	r24, 0x0156
    2b52:	90 91 57 01 	lds	r25, 0x0157
    2b56:	08 95       	ret

00002b58 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    2b58:	60 91 5c 01 	lds	r22, 0x015C
    2b5c:	70 91 5d 01 	lds	r23, 0x015D
  return PID.Products.PError;
}
    2b60:	80 91 5e 01 	lds	r24, 0x015E
    2b64:	90 91 5f 01 	lds	r25, 0x015F
    2b68:	08 95       	ret

00002b6a <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    2b6a:	60 91 60 01 	lds	r22, 0x0160
    2b6e:	70 91 61 01 	lds	r23, 0x0161
  return PID.Products.IError;
}
    2b72:	80 91 62 01 	lds	r24, 0x0162
    2b76:	90 91 63 01 	lds	r25, 0x0163
    2b7a:	08 95       	ret

00002b7c <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    2b7c:	60 91 64 01 	lds	r22, 0x0164
    2b80:	70 91 65 01 	lds	r23, 0x0165
  return PID.Products.DError;
}
    2b84:	80 91 66 01 	lds	r24, 0x0166
    2b88:	90 91 67 01 	lds	r25, 0x0167
    2b8c:	08 95       	ret

00002b8e <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    2b8e:	60 91 68 01 	lds	r22, 0x0168
    2b92:	70 91 69 01 	lds	r23, 0x0169
  return PID.Products.ScaleFact;
}
    2b96:	80 91 6a 01 	lds	r24, 0x016A
    2b9a:	90 91 6b 01 	lds	r25, 0x016B
    2b9e:	08 95       	ret

00002ba0 <PID_Get_Output>:


signed long PID_Get_Output(void){
    2ba0:	60 91 6c 01 	lds	r22, 0x016C
    2ba4:	70 91 6d 01 	lds	r23, 0x016D
  return PID.Output;
}
    2ba8:	80 91 6e 01 	lds	r24, 0x016E
    2bac:	90 91 6f 01 	lds	r25, 0x016F
    2bb0:	08 95       	ret

00002bb2 <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    2bb2:	60 91 70 01 	lds	r22, 0x0170
    2bb6:	70 91 71 01 	lds	r23, 0x0171
  return PID.OutputNonNegative;
}
    2bba:	80 91 72 01 	lds	r24, 0x0172
    2bbe:	90 91 73 01 	lds	r25, 0x0173
    2bc2:	08 95       	ret

00002bc4 <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    2bc4:	0e 94 2d 13 	call	0x265a	; 0x265a <PID_Struct_Init>
}
    2bc8:	08 95       	ret

00002bca <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    2bca:	af 92       	push	r10
    2bcc:	bf 92       	push	r11
    2bce:	cf 92       	push	r12
    2bd0:	df 92       	push	r13
    2bd2:	ef 92       	push	r14
    2bd4:	ff 92       	push	r15
    2bd6:	0f 93       	push	r16
    2bd8:	1f 93       	push	r17
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2be2:	60 93 34 01 	sts	0x0134, r22
    2be6:	70 93 35 01 	sts	0x0135, r23
    2bea:	80 93 36 01 	sts	0x0136, r24
    2bee:	90 93 37 01 	sts	0x0137, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2bf2:	20 93 38 01 	sts	0x0138, r18
    2bf6:	30 93 39 01 	sts	0x0139, r19
    2bfa:	40 93 3a 01 	sts	0x013A, r20
    2bfe:	50 93 3b 01 	sts	0x013B, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2c02:	e0 92 3c 01 	sts	0x013C, r14
    2c06:	f0 92 3d 01 	sts	0x013D, r15
    2c0a:	00 93 3e 01 	sts	0x013E, r16
    2c0e:	10 93 3f 01 	sts	0x013F, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    2c12:	a0 92 54 01 	sts	0x0154, r10
    2c16:	b0 92 55 01 	sts	0x0155, r11
    2c1a:	c0 92 56 01 	sts	0x0156, r12
    2c1e:	d0 92 57 01 	sts	0x0157, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    2c22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c26:	af 85       	ldd	r26, Y+15	; 0x0f
    2c28:	b8 89       	ldd	r27, Y+16	; 0x10
    2c2a:	80 93 68 01 	sts	0x0168, r24
    2c2e:	90 93 69 01 	sts	0x0169, r25
    2c32:	a0 93 6a 01 	sts	0x016A, r26
    2c36:	b0 93 6b 01 	sts	0x016B, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    2c3a:	10 92 50 01 	sts	0x0150, r1
    2c3e:	10 92 51 01 	sts	0x0151, r1
    2c42:	10 92 52 01 	sts	0x0152, r1
    2c46:	10 92 53 01 	sts	0x0153, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	df 90       	pop	r13
    2c58:	cf 90       	pop	r12
    2c5a:	bf 90       	pop	r11
    2c5c:	af 90       	pop	r10
    2c5e:	08 95       	ret

00002c60 <ThreadedDbg_Struct_Init>:


thdbg_t ThreadedDbg;

void ThreadedDbg_Struct_Init(void){
  ThreadedDbg.TotalThreads = 0;
    2c60:	10 92 79 02 	sts	0x0279, r1
  ThreadedDbg.ExecutionIndex = 0;
    2c64:	10 92 7a 02 	sts	0x027A, r1
  ThreadedDbg.ExecutionEnabled = 0;
    2c68:	10 92 7b 02 	sts	0x027B, r1
}
    2c6c:	08 95       	ret

00002c6e <ThreadedDbg_Add_Function>:

void ThreadedDbg_Add_Function( void (*fptr) (void) ){
  ThreadedDbg.FnPtr[ThreadedDbg.TotalThreads] = fptr;
    2c6e:	20 91 79 02 	lds	r18, 0x0279
    2c72:	e2 2f       	mov	r30, r18
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	ee 0f       	add	r30, r30
    2c78:	ff 1f       	adc	r31, r31
    2c7a:	ef 5a       	subi	r30, 0xAF	; 175
    2c7c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c7e:	91 83       	std	Z+1, r25	; 0x01
    2c80:	80 83       	st	Z, r24
  ThreadedDbg.TotalThreads++;
    2c82:	2f 5f       	subi	r18, 0xFF	; 255
    2c84:	20 93 79 02 	sts	0x0279, r18
}
    2c88:	08 95       	ret

00002c8a <ThreadedDbg_Execution_Enable>:

void ThreadedDbg_Execution_Enable(void){
  ThreadedDbg.ExecutionEnabled = 1;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	80 93 7b 02 	sts	0x027B, r24
}
    2c90:	08 95       	ret

00002c92 <ThreadedDbg_Execution_Disable>:

void ThreadedDbg_Execution_Disable(void){
  ThreadedDbg.ExecutionEnabled = 0;
    2c92:	10 92 7b 02 	sts	0x027B, r1
}
    2c96:	08 95       	ret

00002c98 <ThreadedDbg_Execute_Function>:


void ThreadedDbg_Execute_Function(void){
  if(ThreadedDbg.ExecutionEnabled == 1){
    2c98:	80 91 7b 02 	lds	r24, 0x027B
    2c9c:	81 30       	cpi	r24, 0x01	; 1
    2c9e:	c1 f4       	brne	.+48     	; 0x2cd0 <ThreadedDbg_Execute_Function+0x38>
    (*ThreadedDbg.FnPtr[ThreadedDbg.ExecutionIndex])();
    2ca0:	e0 91 7a 02 	lds	r30, 0x027A
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	ee 0f       	add	r30, r30
    2ca8:	ff 1f       	adc	r31, r31
    2caa:	ef 5a       	subi	r30, 0xAF	; 175
    2cac:	fd 4f       	sbci	r31, 0xFD	; 253
    2cae:	01 90       	ld	r0, Z+
    2cb0:	f0 81       	ld	r31, Z
    2cb2:	e0 2d       	mov	r30, r0
    2cb4:	09 95       	icall
    ThreadedDbg.ExecutionIndex++;
    2cb6:	80 91 7a 02 	lds	r24, 0x027A
    2cba:	8f 5f       	subi	r24, 0xFF	; 255
    2cbc:	80 93 7a 02 	sts	0x027A, r24
    if(ThreadedDbg.ExecutionIndex >= ThreadedDbg.TotalThreads){
    2cc0:	90 91 79 02 	lds	r25, 0x0279
    2cc4:	89 17       	cp	r24, r25
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <ThreadedDbg_Execute_Function+0x38>
      ThreadedDbg.ExecutionIndex = 0;
    2cc8:	10 92 7a 02 	sts	0x027A, r1
	  ThreadedDbg.ExecutionEnabled = 0;
    2ccc:	10 92 7b 02 	sts	0x027B, r1
    2cd0:	08 95       	ret

00002cd2 <ThreadedDbg_Init>:


thdbg_t ThreadedDbg;

void ThreadedDbg_Struct_Init(void){
  ThreadedDbg.TotalThreads = 0;
    2cd2:	10 92 79 02 	sts	0x0279, r1
  ThreadedDbg.ExecutionIndex = 0;
    2cd6:	10 92 7a 02 	sts	0x027A, r1
  ThreadedDbg.ExecutionEnabled = 0;
    2cda:	10 92 7b 02 	sts	0x027B, r1



void ThreadedDbg_Init(void){
  ThreadedDbg_Struct_Init();
}
    2cde:	08 95       	ret

00002ce0 <__mulsi3>:
    2ce0:	62 9f       	mul	r22, r18
    2ce2:	d0 01       	movw	r26, r0
    2ce4:	73 9f       	mul	r23, r19
    2ce6:	f0 01       	movw	r30, r0
    2ce8:	82 9f       	mul	r24, r18
    2cea:	e0 0d       	add	r30, r0
    2cec:	f1 1d       	adc	r31, r1
    2cee:	64 9f       	mul	r22, r20
    2cf0:	e0 0d       	add	r30, r0
    2cf2:	f1 1d       	adc	r31, r1
    2cf4:	92 9f       	mul	r25, r18
    2cf6:	f0 0d       	add	r31, r0
    2cf8:	83 9f       	mul	r24, r19
    2cfa:	f0 0d       	add	r31, r0
    2cfc:	74 9f       	mul	r23, r20
    2cfe:	f0 0d       	add	r31, r0
    2d00:	65 9f       	mul	r22, r21
    2d02:	f0 0d       	add	r31, r0
    2d04:	99 27       	eor	r25, r25
    2d06:	72 9f       	mul	r23, r18
    2d08:	b0 0d       	add	r27, r0
    2d0a:	e1 1d       	adc	r30, r1
    2d0c:	f9 1f       	adc	r31, r25
    2d0e:	63 9f       	mul	r22, r19
    2d10:	b0 0d       	add	r27, r0
    2d12:	e1 1d       	adc	r30, r1
    2d14:	f9 1f       	adc	r31, r25
    2d16:	bd 01       	movw	r22, r26
    2d18:	cf 01       	movw	r24, r30
    2d1a:	11 24       	eor	r1, r1
    2d1c:	08 95       	ret

00002d1e <__udivmodsi4>:
    2d1e:	a1 e2       	ldi	r26, 0x21	; 33
    2d20:	1a 2e       	mov	r1, r26
    2d22:	aa 1b       	sub	r26, r26
    2d24:	bb 1b       	sub	r27, r27
    2d26:	fd 01       	movw	r30, r26
    2d28:	0d c0       	rjmp	.+26     	; 0x2d44 <__udivmodsi4_ep>

00002d2a <__udivmodsi4_loop>:
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	ee 1f       	adc	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	a2 17       	cp	r26, r18
    2d34:	b3 07       	cpc	r27, r19
    2d36:	e4 07       	cpc	r30, r20
    2d38:	f5 07       	cpc	r31, r21
    2d3a:	20 f0       	brcs	.+8      	; 0x2d44 <__udivmodsi4_ep>
    2d3c:	a2 1b       	sub	r26, r18
    2d3e:	b3 0b       	sbc	r27, r19
    2d40:	e4 0b       	sbc	r30, r20
    2d42:	f5 0b       	sbc	r31, r21

00002d44 <__udivmodsi4_ep>:
    2d44:	66 1f       	adc	r22, r22
    2d46:	77 1f       	adc	r23, r23
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	1a 94       	dec	r1
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <__udivmodsi4_loop>
    2d50:	60 95       	com	r22
    2d52:	70 95       	com	r23
    2d54:	80 95       	com	r24
    2d56:	90 95       	com	r25
    2d58:	9b 01       	movw	r18, r22
    2d5a:	ac 01       	movw	r20, r24
    2d5c:	bd 01       	movw	r22, r26
    2d5e:	cf 01       	movw	r24, r30
    2d60:	08 95       	ret

00002d62 <__divmodsi4>:
    2d62:	97 fb       	bst	r25, 7
    2d64:	09 2e       	mov	r0, r25
    2d66:	05 26       	eor	r0, r21
    2d68:	0e d0       	rcall	.+28     	; 0x2d86 <__divmodsi4_neg1>
    2d6a:	57 fd       	sbrc	r21, 7
    2d6c:	04 d0       	rcall	.+8      	; 0x2d76 <__divmodsi4_neg2>
    2d6e:	d7 df       	rcall	.-82     	; 0x2d1e <__udivmodsi4>
    2d70:	0a d0       	rcall	.+20     	; 0x2d86 <__divmodsi4_neg1>
    2d72:	00 1c       	adc	r0, r0
    2d74:	38 f4       	brcc	.+14     	; 0x2d84 <__divmodsi4_exit>

00002d76 <__divmodsi4_neg2>:
    2d76:	50 95       	com	r21
    2d78:	40 95       	com	r20
    2d7a:	30 95       	com	r19
    2d7c:	21 95       	neg	r18
    2d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d80:	4f 4f       	sbci	r20, 0xFF	; 255
    2d82:	5f 4f       	sbci	r21, 0xFF	; 255

00002d84 <__divmodsi4_exit>:
    2d84:	08 95       	ret

00002d86 <__divmodsi4_neg1>:
    2d86:	f6 f7       	brtc	.-4      	; 0x2d84 <__divmodsi4_exit>
    2d88:	90 95       	com	r25
    2d8a:	80 95       	com	r24
    2d8c:	70 95       	com	r23
    2d8e:	61 95       	neg	r22
    2d90:	7f 4f       	sbci	r23, 0xFF	; 255
    2d92:	8f 4f       	sbci	r24, 0xFF	; 255
    2d94:	9f 4f       	sbci	r25, 0xFF	; 255
    2d96:	08 95       	ret

00002d98 <_exit>:
    2d98:	f8 94       	cli

00002d9a <__stop_program>:
    2d9a:	ff cf       	rjmp	.-2      	; 0x2d9a <__stop_program>
