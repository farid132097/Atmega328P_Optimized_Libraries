
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00002d48  00002ddc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ce  008001a0  008001a0  00002e7c  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000196b  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004e44  00000000  00000000  000048a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000958  00000000  00000000  000096eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002aaa  00000000  00000000  0000a043  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d80  00000000  00000000  0000caf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c9f  00000000  00000000  0000d870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019fd  00000000  00000000  0000f50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00010f0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__vector_9>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e4       	ldi	r30, 0x48	; 72
      7c:	fd e2       	ldi	r31, 0x2D	; 45
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a0 3a       	cpi	r26, 0xA0	; 160
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 ea       	ldi	r26, 0xA0	; 160
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 36       	cpi	r26, 0x6E	; 110
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "timebase.h"
#include "app.h"

int main(void){
  
  Timebase_Init(1000);
      a6:	88 ee       	ldi	r24, 0xE8	; 232
      a8:	93 e0       	ldi	r25, 0x03	; 3
      aa:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <Timebase_Init>
  App_Setup();
      ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <App_Setup>
  
  while(1){
  
    while(1){
	  App_Main_Loop();
      b2:	0e 94 5e 00 	call	0xbc	; 0xbc <App_Main_Loop>
	  Timebase_Main_Loop_Executables();
      b6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <Timebase_Main_Loop_Executables>
      ba:	fb cf       	rjmp	.-10     	; 0xb2 <main+0xc>

000000bc <App_Main_Loop>:
}


void App_Main_Loop(void){
  
  Timebase_Window_Timer_Start();
      bc:	0e 94 b1 03 	call	0x762	; 0x762 <Timebase_Window_Timer_Start>
  if(Timebase_DownCounter_Continuous_Expired_Event(0)){
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	0e 94 be 0c 	call	0x197c	; 0x197c <Timebase_DownCounter_Continuous_Expired_Event>
      c6:	88 23       	and	r24, r24
      c8:	11 f0       	breq	.+4      	; 0xce <App_Main_Loop+0x12>
    ThreadedDbg_Execution_Enable();
      ca:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <ThreadedDbg_Execution_Enable>
  }
  
  
  ThreadedDbg_Execute_Function();
      ce:	0e 94 22 16 	call	0x2c44	; 0x2c44 <ThreadedDbg_Execute_Function>
  uint16_t val = Timebase_Window_Timer_Get_Interval_Reset();
      d2:	0e 94 0c 04 	call	0x818	; 0x818 <Timebase_Window_Timer_Get_Interval_Reset>
  
  //UART_Tx_Parameter_NL("LoopTime", val);
  //UART_Tx_NL();
  
}
      d6:	08 95       	ret

000000d8 <App_Setup>:
  UART_Tx_Parameter_Hex_NL("Print3",0x26);
}

void App_Setup(void){

  UART_Init(57600);
      d8:	60 e0       	ldi	r22, 0x00	; 0
      da:	71 ee       	ldi	r23, 0xE1	; 225
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 ba 12 	call	0x2574	; 0x2574 <UART_Init>
  ThreadedDbg_Init();
      e4:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <ThreadedDbg_Init>
  ThreadedDbg_Add_Function(Print0);
      e8:	87 ea       	ldi	r24, 0xA7	; 167
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print1);
      f0:	8e e9       	ldi	r24, 0x9E	; 158
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print2);
      f8:	85 e9       	ldi	r24, 0x95	; 149
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <ThreadedDbg_Add_Function>
  ThreadedDbg_Add_Function(Print3);
     100:	8c e8       	ldi	r24, 0x8C	; 140
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <ThreadedDbg_Add_Function>
  Timebase_DownCounter_Set_Forcefully(0,5);
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	45 e0       	ldi	r20, 0x05	; 5
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	0e 94 13 0b 	call	0x1626	; 0x1626 <Timebase_DownCounter_Set_Forcefully>
  
}
     116:	08 95       	ret

00000118 <Print3>:
void Print2(void){
  UART_Tx_Parameter_Hex_NL("Print2",0x96);
}

void Print3(void){
  UART_Tx_Parameter_Hex_NL("Print3",0x26);
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	46 e2       	ldi	r20, 0x26	; 38
     11e:	50 e0       	ldi	r21, 0x00	; 0
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_Tx_Parameter_Hex_NL>
}
     128:	08 95       	ret

0000012a <Print2>:
void Print1(void){
  UART_Tx_Parameter_Hex_NL("Print1",0x0700);
}

void Print2(void){
  UART_Tx_Parameter_Hex_NL("Print2",0x96);
     12a:	87 e0       	ldi	r24, 0x07	; 7
     12c:	91 e0       	ldi	r25, 0x01	; 1
     12e:	46 e9       	ldi	r20, 0x96	; 150
     130:	50 e0       	ldi	r21, 0x00	; 0
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_Tx_Parameter_Hex_NL>
}
     13a:	08 95       	ret

0000013c <Print1>:
void Print0(void){
  UART_Tx_Parameter_Hex_NL("Print0",0x25);
}

void Print1(void){
  UART_Tx_Parameter_Hex_NL("Print1",0x0700);
     13c:	8e e0       	ldi	r24, 0x0E	; 14
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	40 e0       	ldi	r20, 0x00	; 0
     142:	57 e0       	ldi	r21, 0x07	; 7
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	70 e0       	ldi	r23, 0x00	; 0
     148:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_Tx_Parameter_Hex_NL>
}
     14c:	08 95       	ret

0000014e <Print0>:
#include "uart.h"
#include "pid.h"
#include "app.h"

void Print0(void){
  UART_Tx_Parameter_Hex_NL("Print0",0x25);
     14e:	85 e1       	ldi	r24, 0x15	; 21
     150:	91 e0       	ldi	r25, 0x01	; 1
     152:	45 e2       	ldi	r20, 0x25	; 37
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	70 e0       	ldi	r23, 0x00	; 0
     15a:	0e 94 92 10 	call	0x2124	; 0x2124 <UART_Tx_Parameter_Hex_NL>
}
     15e:	08 95       	ret

00000160 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     160:	8a ef       	ldi	r24, 0xFA	; 250
     162:	91 e0       	ldi	r25, 0x01	; 1
     164:	90 93 f9 01 	sts	0x01F9, r25
     168:	80 93 f8 01 	sts	0x01F8, r24
  Timebase->Config.UpdateRate = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	90 93 fb 01 	sts	0x01FB, r25
     174:	80 93 fa 01 	sts	0x01FA, r24
  Timebase->Time.OVFUpdateValue=0;
     178:	10 92 fd 01 	sts	0x01FD, r1
     17c:	10 92 fc 01 	sts	0x01FC, r1
  Timebase->Time.SubSecondsShadow = 0;
     180:	10 92 09 02 	sts	0x0209, r1
     184:	10 92 08 02 	sts	0x0208, r1
  Timebase->Time.SubSecondsUpTime = 0;
     188:	10 92 0a 02 	sts	0x020A, r1
     18c:	10 92 0b 02 	sts	0x020B, r1
     190:	10 92 0c 02 	sts	0x020C, r1
     194:	10 92 0d 02 	sts	0x020D, r1
  Timebase->Time.SecondsShadow = 0;
     198:	10 92 0e 02 	sts	0x020E, r1
     19c:	10 92 0f 02 	sts	0x020F, r1
     1a0:	10 92 10 02 	sts	0x0210, r1
     1a4:	10 92 11 02 	sts	0x0211, r1
  Timebase->Time.SubSeconds = 0;
     1a8:	10 92 03 02 	sts	0x0203, r1
     1ac:	10 92 02 02 	sts	0x0202, r1
  Timebase->Time.Seconds = 0;
     1b0:	10 92 04 02 	sts	0x0204, r1
     1b4:	10 92 05 02 	sts	0x0205, r1
     1b8:	10 92 06 02 	sts	0x0206, r1
     1bc:	10 92 07 02 	sts	0x0207, r1
  Timebase->Time.VariablesSync = 0;
     1c0:	10 92 12 02 	sts	0x0212, r1
  Timebase->Time.LastSample = 0;
     1c4:	10 92 fe 01 	sts	0x01FE, r1
     1c8:	10 92 ff 01 	sts	0x01FF, r1
     1cc:	10 92 00 02 	sts	0x0200, r1
     1d0:	10 92 01 02 	sts	0x0201, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
  Timebase->Time.StartTimeSeconds = 0;
     1d4:	10 92 13 02 	sts	0x0213, r1
     1d8:	10 92 14 02 	sts	0x0214, r1
     1dc:	10 92 15 02 	sts	0x0215, r1
     1e0:	10 92 16 02 	sts	0x0216, r1
  Timebase->Time.StartTimeSubSeconds = 0;
     1e4:	10 92 17 02 	sts	0x0217, r1
     1e8:	10 92 18 02 	sts	0x0218, r1
     1ec:	10 92 19 02 	sts	0x0219, r1
     1f0:	10 92 1a 02 	sts	0x021A, r1
  Timebase->Time.Status = 0;
     1f4:	10 92 1b 02 	sts	0x021B, r1
  Timebase->Time.LPTimerSubSeconds = 0;
  Timebase->Time.LPTimerSeconds = 0;
  Timebase->Config.LPUpdateRate = 1;
  #endif
  
  Timebase->UpdateRequest = 0;
     1f8:	10 92 1c 02 	sts	0x021C, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     1fc:	10 92 32 02 	sts	0x0232, r1
    Timebase->DownCounter[i].EndValue = 0;
     200:	10 92 33 02 	sts	0x0233, r1
     204:	10 92 34 02 	sts	0x0234, r1
     208:	10 92 35 02 	sts	0x0235, r1
     20c:	10 92 36 02 	sts	0x0236, r1
    Timebase->DownCounter[i].Value = 0;
     210:	10 92 37 02 	sts	0x0237, r1
     214:	10 92 38 02 	sts	0x0238, r1
     218:	10 92 39 02 	sts	0x0239, r1
     21c:	10 92 3a 02 	sts	0x023A, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     220:	10 92 3b 02 	sts	0x023B, r1
     224:	10 92 3c 02 	sts	0x023C, r1
     228:	10 92 3d 02 	sts	0x023D, r1
     22c:	10 92 3e 02 	sts	0x023E, r1
	Timebase->DownCounter[i].ReloadValue = 0;
     230:	10 92 3f 02 	sts	0x023F, r1
     234:	10 92 40 02 	sts	0x0240, r1
     238:	10 92 41 02 	sts	0x0241, r1
     23c:	10 92 42 02 	sts	0x0242, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     240:	10 92 1d 02 	sts	0x021D, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     244:	10 92 1e 02 	sts	0x021E, r1
     248:	10 92 1f 02 	sts	0x021F, r1
     24c:	10 92 20 02 	sts	0x0220, r1
     250:	10 92 21 02 	sts	0x0221, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     254:	10 92 22 02 	sts	0x0222, r1
     258:	10 92 23 02 	sts	0x0223, r1
     25c:	10 92 24 02 	sts	0x0224, r1
     260:	10 92 25 02 	sts	0x0225, r1
    Timebase->DownCounterSS[i].Value = 0;
     264:	10 92 26 02 	sts	0x0226, r1
     268:	10 92 27 02 	sts	0x0227, r1
     26c:	10 92 28 02 	sts	0x0228, r1
     270:	10 92 29 02 	sts	0x0229, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     274:	10 92 2a 02 	sts	0x022A, r1
     278:	10 92 2b 02 	sts	0x022B, r1
     27c:	10 92 2c 02 	sts	0x022C, r1
     280:	10 92 2d 02 	sts	0x022D, r1
	Timebase->DownCounterSS[i].ReloadValue = 0;
     284:	10 92 2e 02 	sts	0x022E, r1
     288:	10 92 2f 02 	sts	0x022F, r1
     28c:	10 92 30 02 	sts	0x0230, r1
     290:	10 92 31 02 	sts	0x0231, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
	Timebase->LPDownCounter[i].ReloadValue = 0;
  }
  #endif
  
}
     294:	08 95       	ret

00000296 <Timebase_Timer_Enable>:


void Timebase_Timer_Enable(uint16_t UpdateRateHz){
     296:	8f 92       	push	r8
     298:	9f 92       	push	r9
     29a:	bf 92       	push	r11
     29c:	cf 92       	push	r12
     29e:	df 92       	push	r13
     2a0:	ef 92       	push	r14
     2a2:	ff 92       	push	r15
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	df 93       	push	r29
     2aa:	cf 93       	push	r28
     2ac:	cd b7       	in	r28, 0x3d	; 61
     2ae:	de b7       	in	r29, 0x3e	; 62
     2b0:	2a 97       	sbiw	r28, 0x0a	; 10
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	f8 94       	cli
     2b6:	de bf       	out	0x3e, r29	; 62
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	cd bf       	out	0x3d, r28	; 61
     2bc:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     2be:	de 01       	movw	r26, r28
     2c0:	11 96       	adiw	r26, 0x01	; 1
     2c2:	ec e1       	ldi	r30, 0x1C	; 28
     2c4:	f1 e0       	ldi	r31, 0x01	; 1
     2c6:	8a e0       	ldi	r24, 0x0A	; 10
     2c8:	01 90       	ld	r0, Z+
     2ca:	0d 92       	st	X+, r0
     2cc:	81 50       	subi	r24, 0x01	; 1
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <Timebase_Timer_Enable+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     2d0:	94 01       	movw	r18, r8
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	50 e0       	ldi	r21, 0x00	; 0
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	7b e1       	ldi	r23, 0x1B	; 27
     2da:	87 eb       	ldi	r24, 0xB7	; 183
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     2e2:	b2 2e       	mov	r11, r18
     2e4:	c3 2e       	mov	r12, r19
     2e6:	d4 2e       	mov	r13, r20
     2e8:	05 2f       	mov	r16, r21
     2ea:	7e 01       	movw	r14, r28
     2ec:	08 94       	sec
     2ee:	e1 1c       	adc	r14, r1
     2f0:	f1 1c       	adc	r15, r1
     2f2:	c9 01       	movw	r24, r18
     2f4:	da 01       	movw	r26, r20
     2f6:	9c 01       	movw	r18, r24
     2f8:	ad 01       	movw	r20, r26
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	13 c0       	rjmp	.+38     	; 0x324 <Timebase_Timer_Enable+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     2fe:	f7 01       	movw	r30, r14
     300:	21 91       	ld	r18, Z+
     302:	31 91       	ld	r19, Z+
     304:	7f 01       	movw	r14, r30
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	6b 2d       	mov	r22, r11
     30c:	7c 2d       	mov	r23, r12
     30e:	8d 2d       	mov	r24, r13
     310:	90 2f       	mov	r25, r16
     312:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     316:	c9 01       	movw	r24, r18
     318:	da 01       	movw	r26, r20
     31a:	9c 01       	movw	r18, r24
     31c:	ad 01       	movw	r20, r26
	clock_div_index++;
     31e:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     320:	15 30       	cpi	r17, 0x05	; 5
     322:	31 f0       	breq	.+12     	; 0x330 <Timebase_Timer_Enable+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     324:	2f 3f       	cpi	r18, 0xFF	; 255
     326:	31 05       	cpc	r19, r1
     328:	41 05       	cpc	r20, r1
     32a:	51 05       	cpc	r21, r1
     32c:	09 f0       	breq	.+2      	; 0x330 <Timebase_Timer_Enable+0x9a>
     32e:	3c f7       	brge	.-50     	; 0x2fe <Timebase_Timer_Enable+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     330:	81 2f       	mov	r24, r17
     332:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     334:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     336:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     338:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     33c:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     33e:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     340:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     342:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     344:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     346:	88 23       	and	r24, r24
     348:	11 f4       	brne	.+4      	; 0x34e <Timebase_Timer_Enable+0xb8>
	TCCR0B = (1<<CS00);
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	0f c0       	rjmp	.+30     	; 0x36c <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 1){
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	11 f4       	brne	.+4      	; 0x356 <Timebase_Timer_Enable+0xc0>
	TCCR0B = (1<<CS01);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	0b c0       	rjmp	.+22     	; 0x36c <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 2){
     356:	82 30       	cpi	r24, 0x02	; 2
     358:	11 f4       	brne	.+4      	; 0x35e <Timebase_Timer_Enable+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     35a:	83 e0       	ldi	r24, 0x03	; 3
     35c:	07 c0       	rjmp	.+14     	; 0x36c <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 3){
     35e:	83 30       	cpi	r24, 0x03	; 3
     360:	11 f4       	brne	.+4      	; 0x366 <Timebase_Timer_Enable+0xd0>
	TCCR0B = (1<<CS02);
     362:	84 e0       	ldi	r24, 0x04	; 4
     364:	03 c0       	rjmp	.+6      	; 0x36c <Timebase_Timer_Enable+0xd6>
  }else if(clock_div_index == 4){
     366:	84 30       	cpi	r24, 0x04	; 4
     368:	11 f4       	brne	.+4      	; 0x36e <Timebase_Timer_Enable+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     36a:	85 e0       	ldi	r24, 0x05	; 5
     36c:	85 bd       	out	0x25, r24	; 37
  }
  
  
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     36e:	e0 91 f8 01 	lds	r30, 0x01F8
     372:	f0 91 f9 01 	lds	r31, 0x01F9
     376:	8f ef       	ldi	r24, 0xFF	; 255
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	82 1b       	sub	r24, r18
     37c:	93 0b       	sbc	r25, r19
     37e:	93 83       	std	Z+3, r25	; 0x03
     380:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     382:	82 81       	ldd	r24, Z+2	; 0x02
     384:	93 81       	ldd	r25, Z+3	; 0x03
     386:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 6e 00 	sts	0x006E, r24
  sei();
     38e:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     390:	91 82       	std	Z+1, r9	; 0x01
     392:	80 82       	st	Z, r8
}
     394:	2a 96       	adiw	r28, 0x0a	; 10
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	cf 91       	pop	r28
     3a2:	df 91       	pop	r29
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	bf 90       	pop	r11
     3b2:	9f 90       	pop	r9
     3b4:	8f 90       	pop	r8
     3b6:	08 95       	ret

000003b8 <Timebase_Timer_Disable>:



void Timebase_Timer_Disable(void){
  TCCR0A = 0x00;
     3b8:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     3ba:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     3bc:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x07;
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	85 bb       	out	0x15, r24	; 21
  OCR0A  = 0x00;
     3c4:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     3c6:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     3c8:	16 bc       	out	0x26, r1	; 38
}
     3ca:	08 95       	ret

000003cc <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     3cc:	f8 94       	cli
}
     3ce:	08 95       	ret

000003d0 <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     3d0:	78 94       	sei
}
     3d2:	08 95       	ret

000003d4 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     3d4:	e0 91 f8 01 	lds	r30, 0x01F8
     3d8:	f0 91 f9 01 	lds	r31, 0x01F9
     3dc:	26 85       	ldd	r18, Z+14	; 0x0e
     3de:	37 85       	ldd	r19, Z+15	; 0x0f
}
     3e0:	c9 01       	movw	r24, r18
     3e2:	08 95       	ret

000003e4 <Timebase_Timer_Get_SubSecondsUpTime>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
     3e4:	e0 91 f8 01 	lds	r30, 0x01F8
     3e8:	f0 91 f9 01 	lds	r31, 0x01F9
     3ec:	20 89       	ldd	r18, Z+16	; 0x10
     3ee:	31 89       	ldd	r19, Z+17	; 0x11
     3f0:	42 89       	ldd	r20, Z+18	; 0x12
     3f2:	53 89       	ldd	r21, Z+19	; 0x13
}
     3f4:	b9 01       	movw	r22, r18
     3f6:	ca 01       	movw	r24, r20
     3f8:	08 95       	ret

000003fa <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     3fa:	e0 91 f8 01 	lds	r30, 0x01F8
     3fe:	f0 91 f9 01 	lds	r31, 0x01F9
     402:	24 89       	ldd	r18, Z+20	; 0x14
     404:	35 89       	ldd	r19, Z+21	; 0x15
     406:	46 89       	ldd	r20, Z+22	; 0x16
     408:	57 89       	ldd	r21, Z+23	; 0x17
}
     40a:	b9 01       	movw	r22, r18
     40c:	ca 01       	movw	r24, r20
     40e:	08 95       	ret

00000410 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     410:	e0 91 f8 01 	lds	r30, 0x01F8
     414:	f0 91 f9 01 	lds	r31, 0x01F9
     418:	20 85       	ldd	r18, Z+8	; 0x08
     41a:	31 85       	ldd	r19, Z+9	; 0x09
}
     41c:	c9 01       	movw	r24, r18
     41e:	08 95       	ret

00000420 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     420:	e0 91 f8 01 	lds	r30, 0x01F8
     424:	f0 91 f9 01 	lds	r31, 0x01F9
     428:	22 85       	ldd	r18, Z+10	; 0x0a
     42a:	33 85       	ldd	r19, Z+11	; 0x0b
     42c:	44 85       	ldd	r20, Z+12	; 0x0c
     42e:	55 85       	ldd	r21, Z+13	; 0x0d
}
     430:	b9 01       	movw	r22, r18
     432:	ca 01       	movw	r24, r20
     434:	08 95       	ret

00000436 <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     436:	e0 91 f8 01 	lds	r30, 0x01F8
     43a:	f0 91 f9 01 	lds	r31, 0x01F9
     43e:	91 87       	std	Z+9, r25	; 0x09
     440:	80 87       	std	Z+8, r24	; 0x08
}
     442:	08 95       	ret

00000444 <Timebase_Timer_Set_SubSecondsShadow>:

void Timebase_Timer_Set_SubSecondsShadow(uint16_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsShadow = value;
     444:	e0 91 f8 01 	lds	r30, 0x01F8
     448:	f0 91 f9 01 	lds	r31, 0x01F9
     44c:	97 87       	std	Z+15, r25	; 0x0f
     44e:	86 87       	std	Z+14, r24	; 0x0e
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     450:	08 95       	ret

00000452 <Timebase_Timer_Set_SubSecondsUpTime>:

void Timebase_Timer_Set_SubSecondsUpTime(uint32_t value){
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_Start();
	#endif
  Timebase->Time.SubSecondsUpTime = value;
     452:	e0 91 f8 01 	lds	r30, 0x01F8
     456:	f0 91 f9 01 	lds	r31, 0x01F9
     45a:	60 8b       	std	Z+16, r22	; 0x10
     45c:	71 8b       	std	Z+17, r23	; 0x11
     45e:	82 8b       	std	Z+18, r24	; 0x12
     460:	93 8b       	std	Z+19, r25	; 0x13
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
	Timebase_Atomic_Operation_End();
	#endif
}
     462:	08 95       	ret

00000464 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     464:	e0 91 f8 01 	lds	r30, 0x01F8
     468:	f0 91 f9 01 	lds	r31, 0x01F9
     46c:	62 87       	std	Z+10, r22	; 0x0a
     46e:	73 87       	std	Z+11, r23	; 0x0b
     470:	84 87       	std	Z+12, r24	; 0x0c
     472:	95 87       	std	Z+13, r25	; 0x0d
}
     474:	08 95       	ret

00000476 <Timebase_Timer_Get_SubSecondsShadow_Securely>:


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     476:	e0 91 f8 01 	lds	r30, 0x01F8
     47a:	f0 91 f9 01 	lds	r31, 0x01F9
     47e:	26 85       	ldd	r18, Z+14	; 0x0e
     480:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     482:	86 85       	ldd	r24, Z+14	; 0x0e
     484:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     486:	28 17       	cp	r18, r24
     488:	39 07       	cpc	r19, r25
     48a:	c9 f7       	brne	.-14     	; 0x47e <Timebase_Timer_Get_SubSecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     48c:	c9 01       	movw	r24, r18
     48e:	08 95       	ret

00000490 <Timebase_Timer_Get_SubSecondsUpTime_Securely>:

uint32_t Timebase_Timer_Get_SubSecondsUpTime_Securely(void){
  uint32_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsUpTime;
     490:	e0 91 f8 01 	lds	r30, 0x01F8
     494:	f0 91 f9 01 	lds	r31, 0x01F9
     498:	20 89       	ldd	r18, Z+16	; 0x10
     49a:	31 89       	ldd	r19, Z+17	; 0x11
     49c:	42 89       	ldd	r20, Z+18	; 0x12
     49e:	53 89       	ldd	r21, Z+19	; 0x13
    tmp1 = Timebase->Time.SubSecondsUpTime;
     4a0:	80 89       	ldd	r24, Z+16	; 0x10
     4a2:	91 89       	ldd	r25, Z+17	; 0x11
     4a4:	a2 89       	ldd	r26, Z+18	; 0x12
     4a6:	b3 89       	ldd	r27, Z+19	; 0x13
	  if(tmp0 == tmp1){
     4a8:	28 17       	cp	r18, r24
     4aa:	39 07       	cpc	r19, r25
     4ac:	4a 07       	cpc	r20, r26
     4ae:	5b 07       	cpc	r21, r27
     4b0:	99 f7       	brne	.-26     	; 0x498 <Timebase_Timer_Get_SubSecondsUpTime_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     4b2:	b9 01       	movw	r22, r18
     4b4:	ca 01       	movw	r24, r20
     4b6:	08 95       	ret

000004b8 <Timebase_Timer_Get_SecondsShadow_Securely>:

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     4b8:	e0 91 f8 01 	lds	r30, 0x01F8
     4bc:	f0 91 f9 01 	lds	r31, 0x01F9
     4c0:	24 89       	ldd	r18, Z+20	; 0x14
     4c2:	35 89       	ldd	r19, Z+21	; 0x15
     4c4:	46 89       	ldd	r20, Z+22	; 0x16
     4c6:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     4c8:	84 89       	ldd	r24, Z+20	; 0x14
     4ca:	95 89       	ldd	r25, Z+21	; 0x15
     4cc:	a6 89       	ldd	r26, Z+22	; 0x16
     4ce:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     4d0:	28 17       	cp	r18, r24
     4d2:	39 07       	cpc	r19, r25
     4d4:	4a 07       	cpc	r20, r26
     4d6:	5b 07       	cpc	r21, r27
     4d8:	99 f7       	brne	.-26     	; 0x4c0 <Timebase_Timer_Get_SecondsShadow_Securely+0x8>
	    break;
	  }
  }
  return tmp0;
}
     4da:	b9 01       	movw	r22, r18
     4dc:	ca 01       	movw	r24, r20
     4de:	08 95       	ret

000004e0 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     4e0:	e0 91 f8 01 	lds	r30, 0x01F8
     4e4:	f0 91 f9 01 	lds	r31, 0x01F9
     4e8:	80 8d       	ldd	r24, Z+24	; 0x18
     4ea:	88 23       	and	r24, r24
     4ec:	e1 f4       	brne	.+56     	; 0x526 <Timebase_Timer_Sync_With_Shadow_Variables+0x46>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     4ee:	26 85       	ldd	r18, Z+14	; 0x0e
     4f0:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     4f2:	86 85       	ldd	r24, Z+14	; 0x0e
     4f4:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     4f6:	28 17       	cp	r18, r24
     4f8:	39 07       	cpc	r19, r25
     4fa:	c9 f7       	brne	.-14     	; 0x4ee <Timebase_Timer_Sync_With_Shadow_Variables+0xe>
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
     4fc:	31 87       	std	Z+9, r19	; 0x09
     4fe:	20 87       	std	Z+8, r18	; 0x08
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     500:	24 89       	ldd	r18, Z+20	; 0x14
     502:	35 89       	ldd	r19, Z+21	; 0x15
     504:	46 89       	ldd	r20, Z+22	; 0x16
     506:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     508:	84 89       	ldd	r24, Z+20	; 0x14
     50a:	95 89       	ldd	r25, Z+21	; 0x15
     50c:	a6 89       	ldd	r26, Z+22	; 0x16
     50e:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     510:	28 17       	cp	r18, r24
     512:	39 07       	cpc	r19, r25
     514:	4a 07       	cpc	r20, r26
     516:	5b 07       	cpc	r21, r27
     518:	99 f7       	brne	.-26     	; 0x500 <Timebase_Timer_Sync_With_Shadow_Variables+0x20>
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    Timebase_Atomic_Operation_End();
    #else
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase_Timer_Get_SubSecondsShadow_Securely();
    Timebase->Time.Seconds    = Timebase_Timer_Get_SecondsShadow_Securely();
     51a:	22 87       	std	Z+10, r18	; 0x0a
     51c:	33 87       	std	Z+11, r19	; 0x0b
     51e:	44 87       	std	Z+12, r20	; 0x0c
     520:	55 87       	std	Z+13, r21	; 0x0d
    #endif
	
	  Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 8f       	std	Z+24, r24	; 0x18
     526:	08 95       	ret

00000528 <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     528:	8f 92       	push	r8
     52a:	9f 92       	push	r9
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	5c 01       	movw	r10, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     542:	c0 91 f8 01 	lds	r28, 0x01F8
     546:	d0 91 f9 01 	lds	r29, 0x01F9
     54a:	ce 84       	ldd	r12, Y+14	; 0x0e
     54c:	df 84       	ldd	r13, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     54e:	8e 85       	ldd	r24, Y+14	; 0x0e
     550:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     552:	c8 16       	cp	r12, r24
     554:	d9 06       	cpc	r13, r25
     556:	c9 f7       	brne	.-14     	; 0x54a <Timebase_Timer_Delay_SubSeconds+0x22>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     558:	ec 88       	ldd	r14, Y+20	; 0x14
     55a:	fd 88       	ldd	r15, Y+21	; 0x15
     55c:	0e 89       	ldd	r16, Y+22	; 0x16
     55e:	1f 89       	ldd	r17, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     560:	8c 89       	ldd	r24, Y+20	; 0x14
     562:	9d 89       	ldd	r25, Y+21	; 0x15
     564:	ae 89       	ldd	r26, Y+22	; 0x16
     566:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     568:	e8 16       	cp	r14, r24
     56a:	f9 06       	cpc	r15, r25
     56c:	0a 07       	cpc	r16, r26
     56e:	1b 07       	cpc	r17, r27
     570:	99 f7       	brne	.-26     	; 0x558 <Timebase_Timer_Delay_SubSeconds+0x30>
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
  smpl_s   = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     572:	28 81       	ld	r18, Y
     574:	39 81       	ldd	r19, Y+1	; 0x01
     576:	40 e0       	ldi	r20, 0x00	; 0
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	c8 01       	movw	r24, r16
     57c:	b7 01       	movw	r22, r14
     57e:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
  smpl_val += smpl_ss;
     582:	76 01       	movw	r14, r12
     584:	00 e0       	ldi	r16, 0x00	; 0
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	95 01       	movw	r18, r10
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	e2 0e       	add	r14, r18
     590:	f3 1e       	adc	r15, r19
     592:	04 1f       	adc	r16, r20
     594:	15 1f       	adc	r17, r21
  smpl_val += value;
     596:	e6 0e       	add	r14, r22
     598:	f7 1e       	adc	r15, r23
     59a:	08 1f       	adc	r16, r24
     59c:	19 1f       	adc	r17, r25
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	25 c0       	rjmp	.+74     	; 0x5f2 <Timebase_Timer_Delay_SubSeconds+0xca>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     5a8:	8e 84       	ldd	r8, Y+14	; 0x0e
     5aa:	9f 84       	ldd	r9, Y+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     5ac:	8e 85       	ldd	r24, Y+14	; 0x0e
     5ae:	9f 85       	ldd	r25, Y+15	; 0x0f
	  if(tmp0 == tmp1){
     5b0:	88 16       	cp	r8, r24
     5b2:	99 06       	cpc	r9, r25
     5b4:	c9 f7       	brne	.-14     	; 0x5a8 <Timebase_Timer_Delay_SubSeconds+0x80>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     5b6:	ac 88       	ldd	r10, Y+20	; 0x14
     5b8:	bd 88       	ldd	r11, Y+21	; 0x15
     5ba:	ce 88       	ldd	r12, Y+22	; 0x16
     5bc:	df 88       	ldd	r13, Y+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     5be:	8c 89       	ldd	r24, Y+20	; 0x14
     5c0:	9d 89       	ldd	r25, Y+21	; 0x15
     5c2:	ae 89       	ldd	r26, Y+22	; 0x16
     5c4:	bf 89       	ldd	r27, Y+23	; 0x17
	  if(tmp0 == tmp1){
     5c6:	a8 16       	cp	r10, r24
     5c8:	b9 06       	cpc	r11, r25
     5ca:	ca 06       	cpc	r12, r26
     5cc:	db 06       	cpc	r13, r27
     5ce:	99 f7       	brne	.-26     	; 0x5b6 <Timebase_Timer_Delay_SubSeconds+0x8e>
	  curr_ss  = Timebase_Timer_Get_SubSecondsShadow_Securely();
    curr_s   = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
	
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
     5d0:	28 81       	ld	r18, Y
     5d2:	39 81       	ldd	r19, Y+1	; 0x01
     5d4:	40 e0       	ldi	r20, 0x00	; 0
     5d6:	50 e0       	ldi	r21, 0x00	; 0
     5d8:	c6 01       	movw	r24, r12
     5da:	b5 01       	movw	r22, r10
     5dc:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
     5e0:	9b 01       	movw	r18, r22
     5e2:	ac 01       	movw	r20, r24
	  curr_val += curr_ss;
     5e4:	c4 01       	movw	r24, r8
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	28 0f       	add	r18, r24
     5ec:	39 1f       	adc	r19, r25
     5ee:	4a 1f       	adc	r20, r26
     5f0:	5b 1f       	adc	r21, r27
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     5f2:	2e 15       	cp	r18, r14
     5f4:	3f 05       	cpc	r19, r15
     5f6:	40 07       	cpc	r20, r16
     5f8:	51 07       	cpc	r21, r17
     5fa:	b4 f2       	brlt	.-84     	; 0x5a8 <Timebase_Timer_Delay_SubSeconds+0x80>
    curr_val  = curr_s;
	  curr_val *= Timebase->Config.UpdateRate;
	  curr_val += curr_ss;
  }
  
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	df 90       	pop	r13
     60a:	cf 90       	pop	r12
     60c:	bf 90       	pop	r11
     60e:	af 90       	pop	r10
     610:	9f 90       	pop	r9
     612:	8f 90       	pop	r8
     614:	08 95       	ret

00000616 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	ec 01       	movw	r28, r24


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     61c:	e0 91 f8 01 	lds	r30, 0x01F8
     620:	f0 91 f9 01 	lds	r31, 0x01F9
     624:	66 85       	ldd	r22, Z+14	; 0x0e
     626:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     628:	86 85       	ldd	r24, Z+14	; 0x0e
     62a:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     62c:	68 17       	cp	r22, r24
     62e:	79 07       	cpc	r23, r25
     630:	c9 f7       	brne	.-14     	; 0x624 <Timebase_Timer_Await_SubSeconds+0xe>
     632:	07 c0       	rjmp	.+14     	; 0x642 <Timebase_Timer_Await_SubSeconds+0x2c>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     634:	66 85       	ldd	r22, Z+14	; 0x0e
     636:	77 85       	ldd	r23, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     638:	86 85       	ldd	r24, Z+14	; 0x0e
     63a:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     63c:	68 17       	cp	r22, r24
     63e:	79 07       	cpc	r23, r25
     640:	c9 f7       	brne	.-14     	; 0x634 <Timebase_Timer_Await_SubSeconds+0x1e>
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  
  while(temp != Timebase->Time.LastSample){
     642:	24 81       	ldd	r18, Z+4	; 0x04
     644:	35 81       	ldd	r19, Z+5	; 0x05
     646:	46 81       	ldd	r20, Z+6	; 0x06
     648:	57 81       	ldd	r21, Z+7	; 0x07
     64a:	cb 01       	movw	r24, r22
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	82 17       	cp	r24, r18
     652:	93 07       	cpc	r25, r19
     654:	a4 07       	cpc	r26, r20
     656:	b5 07       	cpc	r27, r21
     658:	69 f7       	brne	.-38     	; 0x634 <Timebase_Timer_Await_SubSeconds+0x1e>


uint16_t Timebase_Timer_Get_SubSecondsShadow_Securely(void){
  uint16_t tmp0 , tmp1 ;
  while( 1 ){
    tmp0 = Timebase->Time.SubSecondsShadow;
     65a:	26 85       	ldd	r18, Z+14	; 0x0e
     65c:	37 85       	ldd	r19, Z+15	; 0x0f
    tmp1 = Timebase->Time.SubSecondsShadow;
     65e:	86 85       	ldd	r24, Z+14	; 0x0e
     660:	97 85       	ldd	r25, Z+15	; 0x0f
	  if(tmp0 == tmp1){
     662:	28 17       	cp	r18, r24
     664:	39 07       	cpc	r19, r25
     666:	c9 f7       	brne	.-14     	; 0x65a <Timebase_Timer_Await_SubSeconds+0x44>
  Timebase_Atomic_Operation_End();
  #else
  temp = Timebase_Timer_Get_SubSecondsShadow_Securely();
  #endif
  
  Timebase->Time.LastSample = temp;
     668:	c9 01       	movw	r24, r18
     66a:	a0 e0       	ldi	r26, 0x00	; 0
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	84 83       	std	Z+4, r24	; 0x04
     670:	95 83       	std	Z+5, r25	; 0x05
     672:	a6 83       	std	Z+6, r26	; 0x06
     674:	b7 83       	std	Z+7, r27	; 0x07
  Timebase->Time.LastSample += value;
     676:	24 81       	ldd	r18, Z+4	; 0x04
     678:	35 81       	ldd	r19, Z+5	; 0x05
     67a:	46 81       	ldd	r20, Z+6	; 0x06
     67c:	57 81       	ldd	r21, Z+7	; 0x07
     67e:	ce 01       	movw	r24, r28
     680:	a0 e0       	ldi	r26, 0x00	; 0
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	82 0f       	add	r24, r18
     686:	93 1f       	adc	r25, r19
     688:	a4 1f       	adc	r26, r20
     68a:	b5 1f       	adc	r27, r21
     68c:	84 83       	std	Z+4, r24	; 0x04
     68e:	95 83       	std	Z+5, r25	; 0x05
     690:	a6 83       	std	Z+6, r26	; 0x06
     692:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     694:	24 81       	ldd	r18, Z+4	; 0x04
     696:	35 81       	ldd	r19, Z+5	; 0x05
     698:	46 81       	ldd	r20, Z+6	; 0x06
     69a:	57 81       	ldd	r21, Z+7	; 0x07
     69c:	80 81       	ld	r24, Z
     69e:	91 81       	ldd	r25, Z+1	; 0x01
     6a0:	a0 e0       	ldi	r26, 0x00	; 0
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	28 17       	cp	r18, r24
     6a6:	39 07       	cpc	r19, r25
     6a8:	4a 07       	cpc	r20, r26
     6aa:	5b 07       	cpc	r21, r27
     6ac:	84 f0       	brlt	.+32     	; 0x6ce <Timebase_Timer_Await_SubSeconds+0xb8>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     6ae:	24 81       	ldd	r18, Z+4	; 0x04
     6b0:	35 81       	ldd	r19, Z+5	; 0x05
     6b2:	46 81       	ldd	r20, Z+6	; 0x06
     6b4:	57 81       	ldd	r21, Z+7	; 0x07
     6b6:	80 81       	ld	r24, Z
     6b8:	91 81       	ldd	r25, Z+1	; 0x01
     6ba:	a0 e0       	ldi	r26, 0x00	; 0
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	28 1b       	sub	r18, r24
     6c0:	39 0b       	sbc	r19, r25
     6c2:	4a 0b       	sbc	r20, r26
     6c4:	5b 0b       	sbc	r21, r27
     6c6:	24 83       	std	Z+4, r18	; 0x04
     6c8:	35 83       	std	Z+5, r19	; 0x05
     6ca:	46 83       	std	Z+6, r20	; 0x06
     6cc:	57 83       	std	Z+7, r21	; 0x07
  }
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <Timebase_Timer_Delay_Seconds>:


void Timebase_Timer_Delay_Seconds(uint16_t value){
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	bc 01       	movw	r22, r24
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     6de:	e0 91 f8 01 	lds	r30, 0x01F8
     6e2:	f0 91 f9 01 	lds	r31, 0x01F9
     6e6:	24 89       	ldd	r18, Z+20	; 0x14
     6e8:	35 89       	ldd	r19, Z+21	; 0x15
     6ea:	46 89       	ldd	r20, Z+22	; 0x16
     6ec:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     6ee:	84 89       	ldd	r24, Z+20	; 0x14
     6f0:	95 89       	ldd	r25, Z+21	; 0x15
     6f2:	a6 89       	ldd	r26, Z+22	; 0x16
     6f4:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     6f6:	28 17       	cp	r18, r24
     6f8:	39 07       	cpc	r19, r25
     6fa:	4a 07       	cpc	r20, r26
     6fc:	5b 07       	cpc	r21, r27
     6fe:	99 f7       	brne	.-26     	; 0x6e6 <Timebase_Timer_Delay_Seconds+0x12>
  Timebase_Atomic_Operation_End();
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
     700:	7b 01       	movw	r14, r22
     702:	00 e0       	ldi	r16, 0x00	; 0
     704:	10 e0       	ldi	r17, 0x00	; 0
     706:	e2 0e       	add	r14, r18
     708:	f3 1e       	adc	r15, r19
     70a:	04 1f       	adc	r16, r20
     70c:	15 1f       	adc	r17, r21
     70e:	20 e0       	ldi	r18, 0x00	; 0
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	0d c0       	rjmp	.+26     	; 0x732 <Timebase_Timer_Delay_Seconds+0x5e>
}

int32_t Timebase_Timer_Get_SecondsShadow_Securely(void){
  int32_t tmp0, tmp1;
  while( 1 ){
    tmp0 = Timebase->Time.SecondsShadow;
     718:	24 89       	ldd	r18, Z+20	; 0x14
     71a:	35 89       	ldd	r19, Z+21	; 0x15
     71c:	46 89       	ldd	r20, Z+22	; 0x16
     71e:	57 89       	ldd	r21, Z+23	; 0x17
    tmp1 = Timebase->Time.SecondsShadow;
     720:	84 89       	ldd	r24, Z+20	; 0x14
     722:	95 89       	ldd	r25, Z+21	; 0x15
     724:	a6 89       	ldd	r26, Z+22	; 0x16
     726:	b7 89       	ldd	r27, Z+23	; 0x17
	  if(tmp0 == tmp1){
     728:	28 17       	cp	r18, r24
     72a:	39 07       	cpc	r19, r25
     72c:	4a 07       	cpc	r20, r26
     72e:	5b 07       	cpc	r21, r27
     730:	99 f7       	brne	.-26     	; 0x718 <Timebase_Timer_Delay_Seconds+0x44>
  #else
  target_s = Timebase_Timer_Get_SecondsShadow_Securely();
  #endif
  
  target_s += value;
  while(target_s > curr_s){
     732:	2e 15       	cp	r18, r14
     734:	3f 05       	cpc	r19, r15
     736:	40 07       	cpc	r20, r16
     738:	51 07       	cpc	r21, r17
     73a:	74 f3       	brlt	.-36     	; 0x718 <Timebase_Timer_Delay_Seconds+0x44>
	  Timebase_Atomic_Operation_End();
	  #else
	  curr_s = Timebase_Timer_Get_SecondsShadow_Securely();
    #endif
  }
}
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	08 95       	ret

00000746 <Timebase_Window_Timer_Reset>:

/****************************Time Window Functions Start*****************************/

#ifdef TIMEBASE_TIME_WINDOW_CALCULATION
void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     746:	e0 91 f8 01 	lds	r30, 0x01F8
     74a:	f0 91 f9 01 	lds	r31, 0x01F9
     74e:	11 8e       	std	Z+25, r1	; 0x19
     750:	12 8e       	std	Z+26, r1	; 0x1a
     752:	13 8e       	std	Z+27, r1	; 0x1b
     754:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.StartTimeSubSeconds = 0;
     756:	15 8e       	std	Z+29, r1	; 0x1d
     758:	16 8e       	std	Z+30, r1	; 0x1e
     75a:	17 8e       	std	Z+31, r1	; 0x1f
     75c:	10 a2       	std	Z+32, r1	; 0x20
  Timebase->Time.Status = COUNTER_STATE_RESET;
     75e:	11 a2       	std	Z+33, r1	; 0x21
}
     760:	08 95       	ret

00000762 <Timebase_Window_Timer_Start>:


void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     762:	e0 91 f8 01 	lds	r30, 0x01F8
     766:	f0 91 f9 01 	lds	r31, 0x01F9
     76a:	81 a1       	ldd	r24, Z+33	; 0x21
     76c:	88 23       	and	r24, r24
     76e:	a1 f4       	brne	.+40     	; 0x798 <Timebase_Window_Timer_Start+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     770:	f8 94       	cli
uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     772:	84 89       	ldd	r24, Z+20	; 0x14
     774:	95 89       	ldd	r25, Z+21	; 0x15
     776:	a6 89       	ldd	r26, Z+22	; 0x16
     778:	b7 89       	ldd	r27, Z+23	; 0x17


void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
     77a:	81 8f       	std	Z+25, r24	; 0x19
     77c:	92 8f       	std	Z+26, r25	; 0x1a
     77e:	a3 8f       	std	Z+27, r26	; 0x1b
     780:	b4 8f       	std	Z+28, r27	; 0x1c


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     782:	86 85       	ldd	r24, Z+14	; 0x0e
     784:	97 85       	ldd	r25, Z+15	; 0x0f

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
     786:	a0 e0       	ldi	r26, 0x00	; 0
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	85 8f       	std	Z+29, r24	; 0x1d
     78c:	96 8f       	std	Z+30, r25	; 0x1e
     78e:	a7 8f       	std	Z+31, r26	; 0x1f
     790:	b0 a3       	std	Z+32, r27	; 0x20
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     792:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase_Atomic_Operation_Start();
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_SecondsShadow();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	81 a3       	std	Z+33, r24	; 0x21
     798:	08 95       	ret

0000079a <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     7a6:	c0 91 f8 01 	lds	r28, 0x01F8
     7aa:	d0 91 f9 01 	lds	r29, 0x01F9
     7ae:	89 a1       	ldd	r24, Y+33	; 0x21
     7b0:	81 30       	cpi	r24, 0x01	; 1
     7b2:	21 f0       	breq	.+8      	; 0x7bc <Timebase_Window_Timer_Get_Interval+0x22>
     7b4:	ee 24       	eor	r14, r14
     7b6:	ff 24       	eor	r15, r15
     7b8:	87 01       	movw	r16, r14
     7ba:	25 c0       	rjmp	.+74     	; 0x806 <Timebase_Window_Timer_Get_Interval+0x6c>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     7bc:	f8 94       	cli
uint32_t Timebase_Timer_Get_SubSecondsUpTime(void){
  return Timebase->Time.SubSecondsUpTime;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     7be:	2c 89       	ldd	r18, Y+20	; 0x14
     7c0:	3d 89       	ldd	r19, Y+21	; 0x15
     7c2:	4e 89       	ldd	r20, Y+22	; 0x16
     7c4:	5f 89       	ldd	r21, Y+23	; 0x17


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     7c6:	8e 85       	ldd	r24, Y+14	; 0x0e
     7c8:	9f 85       	ldd	r25, Y+15	; 0x0f
int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
     7ca:	7c 01       	movw	r14, r24
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	10 e0       	ldi	r17, 0x00	; 0
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     7d0:	78 94       	sei
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
    curr_ss = Timebase_Timer_Get_SubSecondsShadow();
	Timebase_Atomic_Operation_End();
	curr_s -= Timebase->Time.StartTimeSeconds;
     7d2:	89 8d       	ldd	r24, Y+25	; 0x19
     7d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7d6:	ab 8d       	ldd	r26, Y+27	; 0x1b
     7d8:	bc 8d       	ldd	r27, Y+28	; 0x1c
     7da:	28 1b       	sub	r18, r24
     7dc:	39 0b       	sbc	r19, r25
     7de:	4a 0b       	sbc	r20, r26
     7e0:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     7e2:	68 81       	ld	r22, Y
     7e4:	79 81       	ldd	r23, Y+1	; 0x01
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
	curr_s += curr_ss;
     7ee:	2d 8d       	ldd	r18, Y+29	; 0x1d
     7f0:	3e 8d       	ldd	r19, Y+30	; 0x1e
     7f2:	4f 8d       	ldd	r20, Y+31	; 0x1f
     7f4:	58 a1       	ldd	r21, Y+32	; 0x20
     7f6:	e2 1a       	sub	r14, r18
     7f8:	f3 0a       	sbc	r15, r19
     7fa:	04 0b       	sbc	r16, r20
     7fc:	15 0b       	sbc	r17, r21
     7fe:	e6 0e       	add	r14, r22
     800:	f7 1e       	adc	r15, r23
     802:	08 1f       	adc	r16, r24
     804:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     806:	b7 01       	movw	r22, r14
     808:	c8 01       	movw	r24, r16
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	1f 91       	pop	r17
     810:	0f 91       	pop	r16
     812:	ff 90       	pop	r15
     814:	ef 90       	pop	r14
     816:	08 95       	ret

00000818 <Timebase_Window_Timer_Get_Interval_Reset>:


int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     818:	0e 94 cd 03 	call	0x79a	; 0x79a <Timebase_Window_Timer_Get_Interval>
     81c:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     81e:	e0 91 f8 01 	lds	r30, 0x01F8
     822:	f0 91 f9 01 	lds	r31, 0x01F9
     826:	81 a1       	ldd	r24, Z+33	; 0x21
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	49 f4       	brne	.+18     	; 0x83e <Timebase_Window_Timer_Get_Interval_Reset+0x26>

/****************************Time Window Functions Start*****************************/

#ifdef TIMEBASE_TIME_WINDOW_CALCULATION
void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     82c:	11 8e       	std	Z+25, r1	; 0x19
     82e:	12 8e       	std	Z+26, r1	; 0x1a
     830:	13 8e       	std	Z+27, r1	; 0x1b
     832:	14 8e       	std	Z+28, r1	; 0x1c
  Timebase->Time.StartTimeSubSeconds = 0;
     834:	15 8e       	std	Z+29, r1	; 0x1d
     836:	16 8e       	std	Z+30, r1	; 0x1e
     838:	17 8e       	std	Z+31, r1	; 0x1f
     83a:	10 a2       	std	Z+32, r1	; 0x20
  Timebase->Time.Status = COUNTER_STATE_RESET;
     83c:	11 a2       	std	Z+33, r1	; 0x21
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     83e:	82 2f       	mov	r24, r18
     840:	08 95       	ret

00000842 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
     842:	e0 91 f8 01 	lds	r30, 0x01F8
     846:	f0 91 f9 01 	lds	r31, 0x01F9
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	25 e1       	ldi	r18, 0x15	; 21
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	ac 01       	movw	r20, r24
     852:	42 9f       	mul	r20, r18
     854:	c0 01       	movw	r24, r0
     856:	43 9f       	mul	r20, r19
     858:	90 0d       	add	r25, r0
     85a:	52 9f       	mul	r21, r18
     85c:	90 0d       	add	r25, r0
     85e:	11 24       	eor	r1, r1
     860:	e8 0f       	add	r30, r24
     862:	f9 1f       	adc	r31, r25
     864:	83 a1       	ldd	r24, Z+35	; 0x23
     866:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
     868:	8f 70       	andi	r24, 0x0F	; 15
     86a:	08 95       	ret

0000086c <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     86c:	e0 91 f8 01 	lds	r30, 0x01F8
     870:	f0 91 f9 01 	lds	r31, 0x01F9
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	25 e1       	ldi	r18, 0x15	; 21
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	ac 01       	movw	r20, r24
     87c:	42 9f       	mul	r20, r18
     87e:	c0 01       	movw	r24, r0
     880:	43 9f       	mul	r20, r19
     882:	90 0d       	add	r25, r0
     884:	52 9f       	mul	r21, r18
     886:	90 0d       	add	r25, r0
     888:	11 24       	eor	r1, r1
     88a:	e8 0f       	add	r30, r24
     88c:	f9 1f       	adc	r31, r25
     88e:	6f 70       	andi	r22, 0x0F	; 15
     890:	66 0f       	add	r22, r22
     892:	83 a1       	ldd	r24, Z+35	; 0x23
     894:	81 7e       	andi	r24, 0xE1	; 225
     896:	86 2b       	or	r24, r22
     898:	83 a3       	std	Z+35, r24	; 0x23
}
     89a:	08 95       	ret

0000089c <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
     89c:	e0 91 f8 01 	lds	r30, 0x01F8
     8a0:	f0 91 f9 01 	lds	r31, 0x01F9
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	25 e1       	ldi	r18, 0x15	; 21
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	ac 01       	movw	r20, r24
     8ac:	42 9f       	mul	r20, r18
     8ae:	c0 01       	movw	r24, r0
     8b0:	43 9f       	mul	r20, r19
     8b2:	90 0d       	add	r25, r0
     8b4:	52 9f       	mul	r21, r18
     8b6:	90 0d       	add	r25, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	e8 0f       	add	r30, r24
     8bc:	f9 1f       	adc	r31, r25
     8be:	df 01       	movw	r26, r30
     8c0:	9c 96       	adiw	r26, 0x2c	; 44
     8c2:	64 a5       	ldd	r22, Z+44	; 0x2c
     8c4:	11 96       	adiw	r26, 0x01	; 1
     8c6:	7c 91       	ld	r23, X
     8c8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].Value;
}
     8ca:	12 96       	adiw	r26, 0x02	; 2
     8cc:	8c 91       	ld	r24, X
     8ce:	12 97       	sbiw	r26, 0x02	; 2
     8d0:	13 96       	adiw	r26, 0x03	; 3
     8d2:	9c 91       	ld	r25, X
     8d4:	08 95       	ret

000008d6 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     8d6:	e0 91 f8 01 	lds	r30, 0x01F8
     8da:	f0 91 f9 01 	lds	r31, 0x01F9
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	25 e1       	ldi	r18, 0x15	; 21
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	dc 01       	movw	r26, r24
     8e6:	a2 9f       	mul	r26, r18
     8e8:	c0 01       	movw	r24, r0
     8ea:	a3 9f       	mul	r26, r19
     8ec:	90 0d       	add	r25, r0
     8ee:	b2 9f       	mul	r27, r18
     8f0:	90 0d       	add	r25, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	e8 0f       	add	r30, r24
     8f6:	f9 1f       	adc	r31, r25
     8f8:	44 a7       	std	Z+44, r20	; 0x2c
     8fa:	55 a7       	std	Z+45, r21	; 0x2d
     8fc:	66 a7       	std	Z+46, r22	; 0x2e
     8fe:	77 a7       	std	Z+47, r23	; 0x2f
}
     900:	08 95       	ret

00000902 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
     902:	e0 91 f8 01 	lds	r30, 0x01F8
     906:	f0 91 f9 01 	lds	r31, 0x01F9
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	25 e1       	ldi	r18, 0x15	; 21
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	ac 01       	movw	r20, r24
     912:	42 9f       	mul	r20, r18
     914:	c0 01       	movw	r24, r0
     916:	43 9f       	mul	r20, r19
     918:	90 0d       	add	r25, r0
     91a:	52 9f       	mul	r21, r18
     91c:	90 0d       	add	r25, r0
     91e:	11 24       	eor	r1, r1
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
     924:	df 01       	movw	r26, r30
     926:	94 96       	adiw	r26, 0x24	; 36
     928:	64 a1       	ldd	r22, Z+36	; 0x24
     92a:	11 96       	adiw	r26, 0x01	; 1
     92c:	7c 91       	ld	r23, X
     92e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSec;
}
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	8c 91       	ld	r24, X
     934:	12 97       	sbiw	r26, 0x02	; 2
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	9c 91       	ld	r25, X
     93a:	08 95       	ret

0000093c <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
     93c:	e0 91 f8 01 	lds	r30, 0x01F8
     940:	f0 91 f9 01 	lds	r31, 0x01F9
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	25 e1       	ldi	r18, 0x15	; 21
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	ac 01       	movw	r20, r24
     94c:	42 9f       	mul	r20, r18
     94e:	c0 01       	movw	r24, r0
     950:	43 9f       	mul	r20, r19
     952:	90 0d       	add	r25, r0
     954:	52 9f       	mul	r21, r18
     956:	90 0d       	add	r25, r0
     958:	11 24       	eor	r1, r1
     95a:	e8 0f       	add	r30, r24
     95c:	f9 1f       	adc	r31, r25
     95e:	df 01       	movw	r26, r30
     960:	98 96       	adiw	r26, 0x28	; 40
     962:	60 a5       	ldd	r22, Z+40	; 0x28
     964:	11 96       	adiw	r26, 0x01	; 1
     966:	7c 91       	ld	r23, X
     968:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
     96a:	12 96       	adiw	r26, 0x02	; 2
     96c:	8c 91       	ld	r24, X
     96e:	12 97       	sbiw	r26, 0x02	; 2
     970:	13 96       	adiw	r26, 0x03	; 3
     972:	9c 91       	ld	r25, X
     974:	08 95       	ret

00000976 <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     976:	e0 91 f8 01 	lds	r30, 0x01F8
     97a:	f0 91 f9 01 	lds	r31, 0x01F9
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	25 e1       	ldi	r18, 0x15	; 21
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	dc 01       	movw	r26, r24
     986:	a2 9f       	mul	r26, r18
     988:	c0 01       	movw	r24, r0
     98a:	a3 9f       	mul	r26, r19
     98c:	90 0d       	add	r25, r0
     98e:	b2 9f       	mul	r27, r18
     990:	90 0d       	add	r25, r0
     992:	11 24       	eor	r1, r1
     994:	e8 0f       	add	r30, r24
     996:	f9 1f       	adc	r31, r25
     998:	44 a3       	std	Z+36, r20	; 0x24
     99a:	55 a3       	std	Z+37, r21	; 0x25
     99c:	66 a3       	std	Z+38, r22	; 0x26
     99e:	77 a3       	std	Z+39, r23	; 0x27
}
     9a0:	08 95       	ret

000009a2 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     9a2:	e0 91 f8 01 	lds	r30, 0x01F8
     9a6:	f0 91 f9 01 	lds	r31, 0x01F9
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	25 e1       	ldi	r18, 0x15	; 21
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	dc 01       	movw	r26, r24
     9b2:	a2 9f       	mul	r26, r18
     9b4:	c0 01       	movw	r24, r0
     9b6:	a3 9f       	mul	r26, r19
     9b8:	90 0d       	add	r25, r0
     9ba:	b2 9f       	mul	r27, r18
     9bc:	90 0d       	add	r25, r0
     9be:	11 24       	eor	r1, r1
     9c0:	e8 0f       	add	r30, r24
     9c2:	f9 1f       	adc	r31, r25
     9c4:	40 a7       	std	Z+40, r20	; 0x28
     9c6:	51 a7       	std	Z+41, r21	; 0x29
     9c8:	62 a7       	std	Z+42, r22	; 0x2a
     9ca:	73 a7       	std	Z+43, r23	; 0x2b
}
     9cc:	08 95       	ret

000009ce <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
     9ce:	e0 91 f8 01 	lds	r30, 0x01F8
     9d2:	f0 91 f9 01 	lds	r31, 0x01F9
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	25 e1       	ldi	r18, 0x15	; 21
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	ac 01       	movw	r20, r24
     9de:	42 9f       	mul	r20, r18
     9e0:	c0 01       	movw	r24, r0
     9e2:	43 9f       	mul	r20, r19
     9e4:	90 0d       	add	r25, r0
     9e6:	52 9f       	mul	r21, r18
     9e8:	90 0d       	add	r25, r0
     9ea:	11 24       	eor	r1, r1
     9ec:	e8 0f       	add	r30, r24
     9ee:	f9 1f       	adc	r31, r25
     9f0:	df 01       	movw	r26, r30
     9f2:	d0 96       	adiw	r26, 0x30	; 48
     9f4:	60 a9       	ldd	r22, Z+48	; 0x30
     9f6:	11 96       	adiw	r26, 0x01	; 1
     9f8:	7c 91       	ld	r23, X
     9fa:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].PeriodValue;
}
     9fc:	12 96       	adiw	r26, 0x02	; 2
     9fe:	8c 91       	ld	r24, X
     a00:	12 97       	sbiw	r26, 0x02	; 2
     a02:	13 96       	adiw	r26, 0x03	; 3
     a04:	9c 91       	ld	r25, X
     a06:	08 95       	ret

00000a08 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
     a08:	e0 91 f8 01 	lds	r30, 0x01F8
     a0c:	f0 91 f9 01 	lds	r31, 0x01F9
     a10:	28 2f       	mov	r18, r24
     a12:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
     a14:	77 ff       	sbrs	r23, 7
     a16:	11 c0       	rjmp	.+34     	; 0xa3a <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
     a18:	85 e1       	ldi	r24, 0x15	; 21
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	ac 01       	movw	r20, r24
     a1e:	24 9f       	mul	r18, r20
     a20:	c0 01       	movw	r24, r0
     a22:	25 9f       	mul	r18, r21
     a24:	90 0d       	add	r25, r0
     a26:	34 9f       	mul	r19, r20
     a28:	90 0d       	add	r25, r0
     a2a:	11 24       	eor	r1, r1
     a2c:	e8 0f       	add	r30, r24
     a2e:	f9 1f       	adc	r31, r25
     a30:	10 aa       	std	Z+48, r1	; 0x30
     a32:	11 aa       	std	Z+49, r1	; 0x31
     a34:	12 aa       	std	Z+50, r1	; 0x32
     a36:	13 aa       	std	Z+51, r1	; 0x33
     a38:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
     a3a:	85 e1       	ldi	r24, 0x15	; 21
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	dc 01       	movw	r26, r24
     a40:	2a 9f       	mul	r18, r26
     a42:	c0 01       	movw	r24, r0
     a44:	2b 9f       	mul	r18, r27
     a46:	90 0d       	add	r25, r0
     a48:	3a 9f       	mul	r19, r26
     a4a:	90 0d       	add	r25, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	e8 0f       	add	r30, r24
     a50:	f9 1f       	adc	r31, r25
     a52:	40 ab       	std	Z+48, r20	; 0x30
     a54:	51 ab       	std	Z+49, r21	; 0x31
     a56:	62 ab       	std	Z+50, r22	; 0x32
     a58:	73 ab       	std	Z+51, r23	; 0x33
     a5a:	08 95       	ret

00000a5c <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
     a5c:	e0 91 f8 01 	lds	r30, 0x01F8
     a60:	f0 91 f9 01 	lds	r31, 0x01F9
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	25 e1       	ldi	r18, 0x15	; 21
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	ac 01       	movw	r20, r24
     a6c:	42 9f       	mul	r20, r18
     a6e:	c0 01       	movw	r24, r0
     a70:	43 9f       	mul	r20, r19
     a72:	90 0d       	add	r25, r0
     a74:	52 9f       	mul	r21, r18
     a76:	90 0d       	add	r25, r0
     a78:	11 24       	eor	r1, r1
     a7a:	e8 0f       	add	r30, r24
     a7c:	f9 1f       	adc	r31, r25
     a7e:	83 a1       	ldd	r24, Z+35	; 0x23
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
     a80:	81 70       	andi	r24, 0x01	; 1
     a82:	08 95       	ret

00000a84 <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     a84:	e0 91 f8 01 	lds	r30, 0x01F8
     a88:	f0 91 f9 01 	lds	r31, 0x01F9
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	25 e1       	ldi	r18, 0x15	; 21
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	ac 01       	movw	r20, r24
     a94:	42 9f       	mul	r20, r18
     a96:	c0 01       	movw	r24, r0
     a98:	43 9f       	mul	r20, r19
     a9a:	90 0d       	add	r25, r0
     a9c:	52 9f       	mul	r21, r18
     a9e:	90 0d       	add	r25, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	e8 0f       	add	r30, r24
     aa4:	f9 1f       	adc	r31, r25
     aa6:	83 a1       	ldd	r24, Z+35	; 0x23
     aa8:	81 60       	ori	r24, 0x01	; 1
     aaa:	83 a3       	std	Z+35, r24	; 0x23
}
     aac:	08 95       	ret

00000aae <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     aae:	e0 91 f8 01 	lds	r30, 0x01F8
     ab2:	f0 91 f9 01 	lds	r31, 0x01F9
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	25 e1       	ldi	r18, 0x15	; 21
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	ac 01       	movw	r20, r24
     abe:	42 9f       	mul	r20, r18
     ac0:	c0 01       	movw	r24, r0
     ac2:	43 9f       	mul	r20, r19
     ac4:	90 0d       	add	r25, r0
     ac6:	52 9f       	mul	r21, r18
     ac8:	90 0d       	add	r25, r0
     aca:	11 24       	eor	r1, r1
     acc:	e8 0f       	add	r30, r24
     ace:	f9 1f       	adc	r31, r25
     ad0:	83 a1       	ldd	r24, Z+35	; 0x23
     ad2:	8e 7f       	andi	r24, 0xFE	; 254
     ad4:	83 a3       	std	Z+35, r24	; 0x23
}
     ad6:	08 95       	ret

00000ad8 <Timebase_DownCounter_SS_Get_ReloadValue>:

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
     ad8:	e0 91 f8 01 	lds	r30, 0x01F8
     adc:	f0 91 f9 01 	lds	r31, 0x01F9
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	25 e1       	ldi	r18, 0x15	; 21
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	ac 01       	movw	r20, r24
     ae8:	42 9f       	mul	r20, r18
     aea:	c0 01       	movw	r24, r0
     aec:	43 9f       	mul	r20, r19
     aee:	90 0d       	add	r25, r0
     af0:	52 9f       	mul	r21, r18
     af2:	90 0d       	add	r25, r0
     af4:	11 24       	eor	r1, r1
     af6:	e8 0f       	add	r30, r24
     af8:	f9 1f       	adc	r31, r25
     afa:	df 01       	movw	r26, r30
     afc:	d4 96       	adiw	r26, 0x34	; 52
     afe:	64 a9       	ldd	r22, Z+52	; 0x34
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	7c 91       	ld	r23, X
     b04:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounterSS[window].ReloadValue;
}
     b06:	12 96       	adiw	r26, 0x02	; 2
     b08:	8c 91       	ld	r24, X
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	13 96       	adiw	r26, 0x03	; 3
     b0e:	9c 91       	ld	r25, X
     b10:	08 95       	ret

00000b12 <Timebase_DownCounter_SS_Set_ReloadValue>:

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b12:	e0 91 f8 01 	lds	r30, 0x01F8
     b16:	f0 91 f9 01 	lds	r31, 0x01F9
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	25 e1       	ldi	r18, 0x15	; 21
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	dc 01       	movw	r26, r24
     b22:	a2 9f       	mul	r26, r18
     b24:	c0 01       	movw	r24, r0
     b26:	a3 9f       	mul	r26, r19
     b28:	90 0d       	add	r25, r0
     b2a:	b2 9f       	mul	r27, r18
     b2c:	90 0d       	add	r25, r0
     b2e:	11 24       	eor	r1, r1
     b30:	e8 0f       	add	r30, r24
     b32:	f9 1f       	adc	r31, r25
     b34:	44 ab       	std	Z+52, r20	; 0x34
     b36:	55 ab       	std	Z+53, r21	; 0x35
     b38:	66 ab       	std	Z+54, r22	; 0x36
     b3a:	77 ab       	std	Z+55, r23	; 0x37
}
     b3c:	08 95       	ret

00000b3e <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b3e:	e0 91 f8 01 	lds	r30, 0x01F8
     b42:	f0 91 f9 01 	lds	r31, 0x01F9
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	25 e1       	ldi	r18, 0x15	; 21
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	ac 01       	movw	r20, r24
     b4e:	42 9f       	mul	r20, r18
     b50:	c0 01       	movw	r24, r0
     b52:	43 9f       	mul	r20, r19
     b54:	90 0d       	add	r25, r0
     b56:	52 9f       	mul	r21, r18
     b58:	90 0d       	add	r25, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	e8 0f       	add	r30, r24
     b5e:	f9 1f       	adc	r31, r25
     b60:	10 a6       	std	Z+40, r1	; 0x28
     b62:	11 a6       	std	Z+41, r1	; 0x29
     b64:	12 a6       	std	Z+42, r1	; 0x2a
     b66:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     b68:	14 a2       	std	Z+36, r1	; 0x24
     b6a:	15 a2       	std	Z+37, r1	; 0x25
     b6c:	16 a2       	std	Z+38, r1	; 0x26
     b6e:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     b70:	14 a6       	std	Z+44, r1	; 0x2c
     b72:	15 a6       	std	Z+45, r1	; 0x2d
     b74:	16 a6       	std	Z+46, r1	; 0x2e
     b76:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     b78:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     b7a:	80 7e       	andi	r24, 0xE0	; 224
     b7c:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     b7e:	14 aa       	std	Z+52, r1	; 0x34
     b80:	15 aa       	std	Z+53, r1	; 0x35
     b82:	16 aa       	std	Z+54, r1	; 0x36
     b84:	17 aa       	std	Z+55, r1	; 0x37
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
  Timebase_DownCounter_SS_Set_ReloadValue(window, 0);
} 
     b86:	08 95       	ret

00000b88 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     b88:	e0 91 f8 01 	lds	r30, 0x01F8
     b8c:	f0 91 f9 01 	lds	r31, 0x01F9
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	25 e1       	ldi	r18, 0x15	; 21
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	ac 01       	movw	r20, r24
     b98:	42 9f       	mul	r20, r18
     b9a:	c0 01       	movw	r24, r0
     b9c:	43 9f       	mul	r20, r19
     b9e:	90 0d       	add	r25, r0
     ba0:	52 9f       	mul	r21, r18
     ba2:	90 0d       	add	r25, r0
     ba4:	11 24       	eor	r1, r1
     ba6:	e8 0f       	add	r30, r24
     ba8:	f9 1f       	adc	r31, r25
     baa:	10 a6       	std	Z+40, r1	; 0x28
     bac:	11 a6       	std	Z+41, r1	; 0x29
     bae:	12 a6       	std	Z+42, r1	; 0x2a
     bb0:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     bb2:	14 a2       	std	Z+36, r1	; 0x24
     bb4:	15 a2       	std	Z+37, r1	; 0x25
     bb6:	16 a2       	std	Z+38, r1	; 0x26
     bb8:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     bba:	14 a6       	std	Z+44, r1	; 0x2c
     bbc:	15 a6       	std	Z+45, r1	; 0x2d
     bbe:	16 a6       	std	Z+46, r1	; 0x2e
     bc0:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     bc2:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     bc4:	80 7e       	andi	r24, 0xE0	; 224
     bc6:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     bc8:	14 aa       	std	Z+52, r1	; 0x34
     bca:	15 aa       	std	Z+53, r1	; 0x35
     bcc:	16 aa       	std	Z+54, r1	; 0x36
     bce:	17 aa       	std	Z+55, r1	; 0x37
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
     bd0:	08 95       	ret

00000bd2 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     bd2:	e0 91 f8 01 	lds	r30, 0x01F8
     bd6:	f0 91 f9 01 	lds	r31, 0x01F9
     bda:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     bdc:	25 e1       	ldi	r18, 0x15	; 21
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	ac 01       	movw	r20, r24
     be2:	42 9f       	mul	r20, r18
     be4:	c0 01       	movw	r24, r0
     be6:	43 9f       	mul	r20, r19
     be8:	90 0d       	add	r25, r0
     bea:	52 9f       	mul	r21, r18
     bec:	90 0d       	add	r25, r0
     bee:	11 24       	eor	r1, r1
     bf0:	e8 0f       	add	r30, r24
     bf2:	f9 1f       	adc	r31, r25
     bf4:	93 a1       	ldd	r25, Z+35	; 0x23
     bf6:	89 2f       	mov	r24, r25
     bf8:	86 95       	lsr	r24
     bfa:	8f 70       	andi	r24, 0x0F	; 15
     bfc:	81 30       	cpi	r24, 0x01	; 1
     bfe:	19 f0       	breq	.+6      	; 0xc06 <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c00:	91 7e       	andi	r25, 0xE1	; 225
     c02:	92 60       	ori	r25, 0x02	; 2
     c04:	93 a3       	std	Z+35, r25	; 0x23
     c06:	08 95       	ret

00000c08 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c08:	e0 91 f8 01 	lds	r30, 0x01F8
     c0c:	f0 91 f9 01 	lds	r31, 0x01F9
     c10:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     c12:	25 e1       	ldi	r18, 0x15	; 21
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	ac 01       	movw	r20, r24
     c18:	42 9f       	mul	r20, r18
     c1a:	c0 01       	movw	r24, r0
     c1c:	43 9f       	mul	r20, r19
     c1e:	90 0d       	add	r25, r0
     c20:	52 9f       	mul	r21, r18
     c22:	90 0d       	add	r25, r0
     c24:	11 24       	eor	r1, r1
     c26:	e8 0f       	add	r30, r24
     c28:	f9 1f       	adc	r31, r25
     c2a:	93 a1       	ldd	r25, Z+35	; 0x23
     c2c:	89 2f       	mov	r24, r25
     c2e:	86 95       	lsr	r24
     c30:	8f 70       	andi	r24, 0x0F	; 15
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	19 f0       	breq	.+6      	; 0xc3c <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     c36:	91 7e       	andi	r25, 0xE1	; 225
     c38:	94 60       	ori	r25, 0x04	; 4
     c3a:	93 a3       	std	Z+35, r25	; 0x23
     c3c:	08 95       	ret

00000c3e <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
     c3e:	2f 92       	push	r2
     c40:	3f 92       	push	r3
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	28 97       	sbiw	r28, 0x08	; 8
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	1a 01       	movw	r2, r20
     c74:	2b 01       	movw	r4, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     c76:	20 91 f8 01 	lds	r18, 0x01F8
     c7a:	30 91 f9 01 	lds	r19, 0x01F9
     c7e:	38 87       	std	Y+8, r19	; 0x08
     c80:	2f 83       	std	Y+7, r18	; 0x07
     c82:	a8 2f       	mov	r26, r24
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ba 83       	std	Y+2, r27	; 0x02
     c88:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     c8a:	85 e1       	ldi	r24, 0x15	; 21
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a8 9f       	mul	r26, r24
     c90:	f0 01       	movw	r30, r0
     c92:	a9 9f       	mul	r26, r25
     c94:	f0 0d       	add	r31, r0
     c96:	b8 9f       	mul	r27, r24
     c98:	f0 0d       	add	r31, r0
     c9a:	11 24       	eor	r1, r1
     c9c:	e2 0f       	add	r30, r18
     c9e:	f3 1f       	adc	r31, r19
     ca0:	83 a1       	ldd	r24, Z+35	; 0x23
     ca2:	86 95       	lsr	r24
     ca4:	8f 70       	andi	r24, 0x0F	; 15
     ca6:	09 f0       	breq	.+2      	; 0xcaa <Timebase_DownCounter_SS_Set_Securely+0x6c>
     ca8:	80 c0       	rjmp	.+256    	; 0xdaa <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     caa:	44 a7       	std	Z+44, r20	; 0x2c
     cac:	55 a7       	std	Z+45, r21	; 0x2d
     cae:	66 a7       	std	Z+46, r22	; 0x2e
     cb0:	77 a7       	std	Z+47, r23	; 0x2f
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     cb2:	f9 01       	movw	r30, r18
     cb4:	c0 84       	ldd	r12, Z+8	; 0x08
     cb6:	d1 84       	ldd	r13, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     cb8:	d9 01       	movw	r26, r18
     cba:	1a 96       	adiw	r26, 0x0a	; 10
     cbc:	8d 91       	ld	r24, X+
     cbe:	9d 91       	ld	r25, X+
     cc0:	0d 90       	ld	r0, X+
     cc2:	bc 91       	ld	r27, X
     cc4:	a0 2d       	mov	r26, r0
     cc6:	8b 83       	std	Y+3, r24	; 0x03
     cc8:	9c 83       	std	Y+4, r25	; 0x04
     cca:	ad 83       	std	Y+5, r26	; 0x05
     ccc:	be 83       	std	Y+6, r27	; 0x06
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
     cce:	20 81       	ld	r18, Z
     cd0:	31 81       	ldd	r19, Z+1	; 0x01
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	c2 01       	movw	r24, r4
     cd8:	b1 01       	movw	r22, r2
     cda:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     cde:	7b 01       	movw	r14, r22
     ce0:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
     ce2:	ef 81       	ldd	r30, Y+7	; 0x07
     ce4:	f8 85       	ldd	r31, Y+8	; 0x08
     ce6:	20 81       	ld	r18, Z
     ce8:	31 81       	ldd	r19, Z+1	; 0x01
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	c2 01       	movw	r24, r4
     cf0:	b1 01       	movw	r22, r2
     cf2:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     cf6:	c9 01       	movw	r24, r18
     cf8:	da 01       	movw	r26, r20
     cfa:	3c 01       	movw	r6, r24
     cfc:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
     cfe:	56 01       	movw	r10, r12
     d00:	cc 24       	eor	r12, r12
     d02:	dd 24       	eor	r13, r13
     d04:	ae 0c       	add	r10, r14
     d06:	bf 1c       	adc	r11, r15
     d08:	c0 1e       	adc	r12, r16
     d0a:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     d0c:	af 81       	ldd	r26, Y+7	; 0x07
     d0e:	b8 85       	ldd	r27, Y+8	; 0x08
     d10:	8d 91       	ld	r24, X+
     d12:	9c 91       	ld	r25, X
     d14:	a0 e0       	ldi	r26, 0x00	; 0
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	a8 16       	cp	r10, r24
     d1a:	b9 06       	cpc	r11, r25
     d1c:	ca 06       	cpc	r12, r26
     d1e:	db 06       	cpc	r13, r27
     d20:	a4 f0       	brlt	.+40     	; 0xd4a <Timebase_DownCounter_SS_Set_Securely+0x10c>
	  sec_val += 1;
     d22:	08 94       	sec
     d24:	61 1c       	adc	r6, r1
     d26:	71 1c       	adc	r7, r1
     d28:	81 1c       	adc	r8, r1
     d2a:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
     d2c:	ef 81       	ldd	r30, Y+7	; 0x07
     d2e:	f8 85       	ldd	r31, Y+8	; 0x08
     d30:	20 81       	ld	r18, Z
     d32:	31 81       	ldd	r19, Z+1	; 0x01
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	c6 01       	movw	r24, r12
     d3a:	b5 01       	movw	r22, r10
     d3c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     d40:	ac 01       	movw	r20, r24
     d42:	cb 01       	movw	r24, r22
     d44:	da 01       	movw	r26, r20
     d46:	5c 01       	movw	r10, r24
     d48:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     d4a:	85 e1       	ldi	r24, 0x15	; 21
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	29 81       	ldd	r18, Y+1	; 0x01
     d50:	3a 81       	ldd	r19, Y+2	; 0x02
     d52:	28 9f       	mul	r18, r24
     d54:	a0 01       	movw	r20, r0
     d56:	29 9f       	mul	r18, r25
     d58:	50 0d       	add	r21, r0
     d5a:	38 9f       	mul	r19, r24
     d5c:	50 0d       	add	r21, r0
     d5e:	11 24       	eor	r1, r1
     d60:	8f 81       	ldd	r24, Y+7	; 0x07
     d62:	98 85       	ldd	r25, Y+8	; 0x08
     d64:	48 0f       	add	r20, r24
     d66:	59 1f       	adc	r21, r25
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	ad 81       	ldd	r26, Y+5	; 0x05
     d6e:	be 81       	ldd	r27, Y+6	; 0x06
     d70:	86 0d       	add	r24, r6
     d72:	97 1d       	adc	r25, r7
     d74:	a8 1d       	adc	r26, r8
     d76:	b9 1d       	adc	r27, r9
     d78:	fa 01       	movw	r30, r20
     d7a:	84 a3       	std	Z+36, r24	; 0x24
     d7c:	95 a3       	std	Z+37, r25	; 0x25
     d7e:	a6 a3       	std	Z+38, r26	; 0x26
     d80:	b7 a3       	std	Z+39, r27	; 0x27
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     d82:	da 01       	movw	r26, r20
     d84:	98 96       	adiw	r26, 0x28	; 40
     d86:	ad 92       	st	X+, r10
     d88:	bd 92       	st	X+, r11
     d8a:	cd 92       	st	X+, r12
     d8c:	dc 92       	st	X, r13
     d8e:	9b 97       	sbiw	r26, 0x2b	; 43
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     d90:	24 aa       	std	Z+52, r2	; 0x34
     d92:	35 aa       	std	Z+53, r3	; 0x35
     d94:	46 aa       	std	Z+54, r4	; 0x36
     d96:	57 aa       	std	Z+55, r5	; 0x37
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     d98:	93 a1       	ldd	r25, Z+35	; 0x23
     d9a:	89 2f       	mov	r24, r25
     d9c:	86 95       	lsr	r24
     d9e:	8f 70       	andi	r24, 0x0F	; 15
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	19 f0       	breq	.+6      	; 0xdaa <Timebase_DownCounter_SS_Set_Securely+0x16c>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     da4:	91 7e       	andi	r25, 0xE1	; 225
     da6:	92 60       	ori	r25, 0x02	; 2
     da8:	93 a3       	std	Z+35, r25	; 0x23
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
	Timebase_DownCounter_SS_Set_ReloadValue(window, value);
    Timebase_DownCounter_SS_Start(window);
  }
}
     daa:	28 96       	adiw	r28, 0x08	; 8
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	cf 91       	pop	r28
     db8:	df 91       	pop	r29
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	bf 90       	pop	r11
     dc8:	af 90       	pop	r10
     dca:	9f 90       	pop	r9
     dcc:	8f 90       	pop	r8
     dce:	7f 90       	pop	r7
     dd0:	6f 90       	pop	r6
     dd2:	5f 90       	pop	r5
     dd4:	4f 90       	pop	r4
     dd6:	3f 90       	pop	r3
     dd8:	2f 90       	pop	r2
     dda:	08 95       	ret

00000ddc <Timebase_DownCounter_SS_Set_Forcefully>:


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     ddc:	cf 92       	push	r12
     dde:	df 92       	push	r13
     de0:	ef 92       	push	r14
     de2:	ff 92       	push	r15
     de4:	0f 93       	push	r16
     de6:	1f 93       	push	r17
     de8:	7a 01       	movw	r14, r20
     dea:	8b 01       	movw	r16, r22
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     dec:	e0 91 f8 01 	lds	r30, 0x01F8
     df0:	f0 91 f9 01 	lds	r31, 0x01F9
     df4:	48 2f       	mov	r20, r24
     df6:	50 e0       	ldi	r21, 0x00	; 0
     df8:	25 e1       	ldi	r18, 0x15	; 21
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	42 9f       	mul	r20, r18
     dfe:	60 01       	movw	r12, r0
     e00:	43 9f       	mul	r20, r19
     e02:	d0 0c       	add	r13, r0
     e04:	52 9f       	mul	r21, r18
     e06:	d0 0c       	add	r13, r0
     e08:	11 24       	eor	r1, r1
     e0a:	ec 0d       	add	r30, r12
     e0c:	fd 1d       	adc	r31, r13
     e0e:	10 a6       	std	Z+40, r1	; 0x28
     e10:	11 a6       	std	Z+41, r1	; 0x29
     e12:	12 a6       	std	Z+42, r1	; 0x2a
     e14:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     e16:	14 a2       	std	Z+36, r1	; 0x24
     e18:	15 a2       	std	Z+37, r1	; 0x25
     e1a:	16 a2       	std	Z+38, r1	; 0x26
     e1c:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     e1e:	14 a6       	std	Z+44, r1	; 0x2c
     e20:	15 a6       	std	Z+45, r1	; 0x2d
     e22:	16 a6       	std	Z+46, r1	; 0x2e
     e24:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     e26:	93 a1       	ldd	r25, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     e28:	90 7e       	andi	r25, 0xE0	; 224
     e2a:	93 a3       	std	Z+35, r25	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e2c:	14 aa       	std	Z+52, r1	; 0x34
     e2e:	15 aa       	std	Z+53, r1	; 0x35
     e30:	16 aa       	std	Z+54, r1	; 0x36
     e32:	17 aa       	std	Z+55, r1	; 0x37
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
     e34:	b8 01       	movw	r22, r16
     e36:	a7 01       	movw	r20, r14
     e38:	0e 94 1f 06 	call	0xc3e	; 0xc3e <Timebase_DownCounter_SS_Set_Securely>
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     e3c:	e0 91 f8 01 	lds	r30, 0x01F8
     e40:	f0 91 f9 01 	lds	r31, 0x01F9
     e44:	ec 0d       	add	r30, r12
     e46:	fd 1d       	adc	r31, r13
     e48:	e4 aa       	std	Z+52, r14	; 0x34
     e4a:	f5 aa       	std	Z+53, r15	; 0x35
     e4c:	06 ab       	std	Z+54, r16	; 0x36
     e4e:	17 ab       	std	Z+55, r17	; 0x37

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
  Timebase_DownCounter_SS_Set_ReloadValue(window, value);
} 
     e50:	1f 91       	pop	r17
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	df 90       	pop	r13
     e5a:	cf 90       	pop	r12
     e5c:	08 95       	ret

00000e5e <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
     e5e:	2f 92       	push	r2
     e60:	3f 92       	push	r3
     e62:	4f 92       	push	r4
     e64:	5f 92       	push	r5
     e66:	6f 92       	push	r6
     e68:	7f 92       	push	r7
     e6a:	8f 92       	push	r8
     e6c:	9f 92       	push	r9
     e6e:	af 92       	push	r10
     e70:	bf 92       	push	r11
     e72:	cf 92       	push	r12
     e74:	df 92       	push	r13
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     e82:	e0 91 f8 01 	lds	r30, 0x01F8
     e86:	f0 91 f9 01 	lds	r31, 0x01F9
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	25 e1       	ldi	r18, 0x15	; 21
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	82 9f       	mul	r24, r18
     e92:	e0 01       	movw	r28, r0
     e94:	83 9f       	mul	r24, r19
     e96:	d0 0d       	add	r29, r0
     e98:	92 9f       	mul	r25, r18
     e9a:	d0 0d       	add	r29, r0
     e9c:	11 24       	eor	r1, r1
     e9e:	ce 0f       	add	r28, r30
     ea0:	df 1f       	adc	r29, r31
     ea2:	8b a1       	ldd	r24, Y+35	; 0x23
     ea4:	86 95       	lsr	r24
     ea6:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <Timebase_DownCounter_SS_Update+0x50>
     eac:	48 c0       	rjmp	.+144    	; 0xf3e <Timebase_DownCounter_SS_Update+0xe0>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     eae:	e0 84       	ldd	r14, Z+8	; 0x08
     eb0:	f1 84       	ldd	r15, Z+9	; 0x09

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
     eb2:	00 e0       	ldi	r16, 0x00	; 0
     eb4:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     eb6:	82 85       	ldd	r24, Z+10	; 0x0a
     eb8:	93 85       	ldd	r25, Z+11	; 0x0b
     eba:	a4 85       	ldd	r26, Z+12	; 0x0c
     ebc:	b5 85       	ldd	r27, Z+13	; 0x0d
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
     ebe:	2c a1       	ldd	r18, Y+36	; 0x24
     ec0:	3d a1       	ldd	r19, Y+37	; 0x25
     ec2:	4e a1       	ldd	r20, Y+38	; 0x26
     ec4:	5f a1       	ldd	r21, Y+39	; 0x27
     ec6:	28 1b       	sub	r18, r24
     ec8:	39 0b       	sbc	r19, r25
     eca:	4a 0b       	sbc	r20, r26
     ecc:	5b 0b       	sbc	r21, r27
	temp_s *= Timebase->Config.UpdateRate;
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
     eda:	6e 19       	sub	r22, r14
     edc:	7f 09       	sbc	r23, r15
     ede:	80 0b       	sbc	r24, r16
     ee0:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
     ee2:	28 a5       	ldd	r18, Y+40	; 0x28
     ee4:	39 a5       	ldd	r19, Y+41	; 0x29
     ee6:	4a a5       	ldd	r20, Y+42	; 0x2a
     ee8:	5b a5       	ldd	r21, Y+43	; 0x2b
     eea:	62 0f       	add	r22, r18
     eec:	73 1f       	adc	r23, r19
     eee:	84 1f       	adc	r24, r20
     ef0:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     ef2:	6c a7       	std	Y+44, r22	; 0x2c
     ef4:	7d a7       	std	Y+45, r23	; 0x2d
     ef6:	8e a7       	std	Y+46, r24	; 0x2e
     ef8:	9f a7       	std	Y+47, r25	; 0x2f
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	19 06       	cpc	r1, r25
     f02:	0c f4       	brge	.+2      	; 0xf06 <Timebase_DownCounter_SS_Update+0xa8>
     f04:	4c c0       	rjmp	.+152    	; 0xf9e <Timebase_DownCounter_SS_Update+0x140>
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
     f06:	8c a9       	ldd	r24, Y+52	; 0x34
     f08:	9d a9       	ldd	r25, Y+53	; 0x35
     f0a:	ae a9       	ldd	r26, Y+54	; 0x36
     f0c:	bf a9       	ldd	r27, Y+55	; 0x37
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     f0e:	18 a6       	std	Y+40, r1	; 0x28
     f10:	19 a6       	std	Y+41, r1	; 0x29
     f12:	1a a6       	std	Y+42, r1	; 0x2a
     f14:	1b a6       	std	Y+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     f16:	1c a2       	std	Y+36, r1	; 0x24
     f18:	1d a2       	std	Y+37, r1	; 0x25
     f1a:	1e a2       	std	Y+38, r1	; 0x26
     f1c:	1f a2       	std	Y+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
     f1e:	1c a6       	std	Y+44, r1	; 0x2c
     f20:	1d a6       	std	Y+45, r1	; 0x2d
     f22:	1e a6       	std	Y+46, r1	; 0x2e
     f24:	1f a6       	std	Y+47, r1	; 0x2f
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f26:	2b a1       	ldd	r18, Y+35	; 0x23
     f28:	2e 7f       	andi	r18, 0xFE	; 254
     f2a:	2b a3       	std	Y+35, r18	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
     f2c:	8c ab       	std	Y+52, r24	; 0x34
     f2e:	9d ab       	std	Y+53, r25	; 0x35
     f30:	ae ab       	std	Y+54, r26	; 0x36
     f32:	bf ab       	std	Y+55, r27	; 0x37
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
     f34:	8b a1       	ldd	r24, Y+35	; 0x23
     f36:	81 7e       	andi	r24, 0xE1	; 225
     f38:	88 60       	ori	r24, 0x08	; 8
     f3a:	8b a3       	std	Y+35, r24	; 0x23
     f3c:	30 c0       	rjmp	.+96     	; 0xf9e <Timebase_DownCounter_SS_Update+0x140>
	  int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
      Timebase_DownCounter_SS_Reset(window);
	  Timebase_DownCounter_SS_Set_ReloadValue(window, temp);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     f3e:	82 30       	cpi	r24, 0x02	; 2
     f40:	71 f5       	brne	.+92     	; 0xf9e <Timebase_DownCounter_SS_Update+0x140>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     f42:	60 84       	ldd	r6, Z+8	; 0x08
     f44:	71 84       	ldd	r7, Z+9	; 0x09
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f46:	e2 84       	ldd	r14, Z+10	; 0x0a
     f48:	f3 84       	ldd	r15, Z+11	; 0x0b
     f4a:	04 85       	ldd	r16, Z+12	; 0x0c
     f4c:	15 85       	ldd	r17, Z+13	; 0x0d
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
     f4e:	2c a4       	ldd	r2, Y+44	; 0x2c
     f50:	3d a4       	ldd	r3, Y+45	; 0x2d
     f52:	4e a4       	ldd	r4, Y+46	; 0x2e
     f54:	5f a4       	ldd	r5, Y+47	; 0x2f
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
     f56:	20 81       	ld	r18, Z
     f58:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
     f5a:	a0 80       	ld	r10, Z
     f5c:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	c2 01       	movw	r24, r4
     f64:	b1 01       	movw	r22, r2
     f66:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     f6a:	e2 0e       	add	r14, r18
     f6c:	f3 1e       	adc	r15, r19
     f6e:	04 1f       	adc	r16, r20
     f70:	15 1f       	adc	r17, r21
     f72:	ec a2       	std	Y+36, r14	; 0x24
     f74:	fd a2       	std	Y+37, r15	; 0x25
     f76:	0e a3       	std	Y+38, r16	; 0x26
     f78:	1f a3       	std	Y+39, r17	; 0x27
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
     f7a:	cc 24       	eor	r12, r12
     f7c:	dd 24       	eor	r13, r13
     f7e:	c2 01       	movw	r24, r4
     f80:	b1 01       	movw	r22, r2
     f82:	a6 01       	movw	r20, r12
     f84:	95 01       	movw	r18, r10
     f86:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
     f8a:	88 24       	eor	r8, r8
     f8c:	99 24       	eor	r9, r9
     f8e:	66 0e       	add	r6, r22
     f90:	77 1e       	adc	r7, r23
     f92:	88 1e       	adc	r8, r24
     f94:	99 1e       	adc	r9, r25
     f96:	68 a6       	std	Y+40, r6	; 0x28
     f98:	79 a6       	std	Y+41, r7	; 0x29
     f9a:	8a a6       	std	Y+42, r8	; 0x2a
     f9c:	9b a6       	std	Y+43, r9	; 0x2b
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	bf 90       	pop	r11
     fb0:	af 90       	pop	r10
     fb2:	9f 90       	pop	r9
     fb4:	8f 90       	pop	r8
     fb6:	7f 90       	pop	r7
     fb8:	6f 90       	pop	r6
     fba:	5f 90       	pop	r5
     fbc:	4f 90       	pop	r4
     fbe:	3f 90       	pop	r3
     fc0:	2f 90       	pop	r2
     fc2:	08 95       	ret

00000fc4 <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	e0 91 f8 01 	lds	r30, 0x01F8
     fca:	f0 91 f9 01 	lds	r31, 0x01F9
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	25 e1       	ldi	r18, 0x15	; 21
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	bc 01       	movw	r22, r24
     fd6:	62 9f       	mul	r22, r18
     fd8:	c0 01       	movw	r24, r0
     fda:	63 9f       	mul	r22, r19
     fdc:	90 0d       	add	r25, r0
     fde:	72 9f       	mul	r23, r18
     fe0:	90 0d       	add	r25, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	e8 0f       	add	r30, r24
     fe6:	f9 1f       	adc	r31, r25
     fe8:	83 a1       	ldd	r24, Z+35	; 0x23
     fea:	86 95       	lsr	r24
     fec:	8f 70       	andi	r24, 0x0F	; 15
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	09 f4       	brne	.+2      	; 0xff4 <Timebase_DownCounter_SS_Expired+0x30>
     ff2:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     ff4:	84 2f       	mov	r24, r20
     ff6:	08 95       	ret

00000ff8 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
     ff8:	e0 91 f8 01 	lds	r30, 0x01F8
     ffc:	f0 91 f9 01 	lds	r31, 0x01F9
    1000:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1002:	25 e1       	ldi	r18, 0x15	; 21
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	ac 01       	movw	r20, r24
    1008:	42 9f       	mul	r20, r18
    100a:	c0 01       	movw	r24, r0
    100c:	43 9f       	mul	r20, r19
    100e:	90 0d       	add	r25, r0
    1010:	52 9f       	mul	r21, r18
    1012:	90 0d       	add	r25, r0
    1014:	11 24       	eor	r1, r1
    1016:	e8 0f       	add	r30, r24
    1018:	f9 1f       	adc	r31, r25
    101a:	83 a1       	ldd	r24, Z+35	; 0x23
    101c:	86 95       	lsr	r24
    101e:	8f 70       	andi	r24, 0x0F	; 15
    1020:	84 30       	cpi	r24, 0x04	; 4
    1022:	11 f0       	breq	.+4      	; 0x1028 <Timebase_DownCounter_SS_Expired_Event+0x30>
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1028:	10 a6       	std	Z+40, r1	; 0x28
    102a:	11 a6       	std	Z+41, r1	; 0x29
    102c:	12 a6       	std	Z+42, r1	; 0x2a
    102e:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1030:	14 a2       	std	Z+36, r1	; 0x24
    1032:	15 a2       	std	Z+37, r1	; 0x25
    1034:	16 a2       	std	Z+38, r1	; 0x26
    1036:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1038:	14 a6       	std	Z+44, r1	; 0x2c
    103a:	15 a6       	std	Z+45, r1	; 0x2d
    103c:	16 a6       	std	Z+46, r1	; 0x2e
    103e:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1040:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1042:	80 7e       	andi	r24, 0xE0	; 224
    1044:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    1046:	14 aa       	std	Z+52, r1	; 0x34
    1048:	15 aa       	std	Z+53, r1	; 0x35
    104a:	16 aa       	std	Z+54, r1	; 0x36
    104c:	17 aa       	std	Z+55, r1	; 0x37
    104e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1050:	08 95       	ret

00001052 <Timebase_DownCounter_SS_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_SS_Expired_Event(window);
    1052:	0e 94 fc 07 	call	0xff8	; 0xff8 <Timebase_DownCounter_SS_Expired_Event>
}
    1056:	08 95       	ret

00001058 <Timebase_DownCounter_SS_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
    1058:	a8 2f       	mov	r26, r24

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    105a:	e0 91 f8 01 	lds	r30, 0x01F8
    105e:	f0 91 f9 01 	lds	r31, 0x01F9
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
  return Timebase_DownCounter_SS_Expired_Event(window);
}


uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1066:	85 e1       	ldi	r24, 0x15	; 21
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	ac 01       	movw	r20, r24
    106c:	24 9f       	mul	r18, r20
    106e:	c0 01       	movw	r24, r0
    1070:	25 9f       	mul	r18, r21
    1072:	90 0d       	add	r25, r0
    1074:	34 9f       	mul	r19, r20
    1076:	90 0d       	add	r25, r0
    1078:	11 24       	eor	r1, r1
    107a:	e8 0f       	add	r30, r24
    107c:	f9 1f       	adc	r31, r25
    107e:	83 a1       	ldd	r24, Z+35	; 0x23
    1080:	86 95       	lsr	r24
    1082:	8f 70       	andi	r24, 0x0F	; 15
    1084:	84 30       	cpi	r24, 0x04	; 4
    1086:	11 f0       	breq	.+4      	; 0x108c <Timebase_DownCounter_SS_Continuous_Expired_Event+0x34>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	08 95       	ret
void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
    108c:	44 a9       	ldd	r20, Z+52	; 0x34
    108e:	55 a9       	ldd	r21, Z+53	; 0x35
    1090:	66 a9       	ldd	r22, Z+54	; 0x36
    1092:	77 a9       	ldd	r23, Z+55	; 0x37
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1094:	10 a6       	std	Z+40, r1	; 0x28
    1096:	11 a6       	std	Z+41, r1	; 0x29
    1098:	12 a6       	std	Z+42, r1	; 0x2a
    109a:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    109c:	14 a2       	std	Z+36, r1	; 0x24
    109e:	15 a2       	std	Z+37, r1	; 0x25
    10a0:	16 a2       	std	Z+38, r1	; 0x26
    10a2:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    10a4:	14 a6       	std	Z+44, r1	; 0x2c
    10a6:	15 a6       	std	Z+45, r1	; 0x2d
    10a8:	16 a6       	std	Z+46, r1	; 0x2e
    10aa:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    10ac:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    10ae:	80 7e       	andi	r24, 0xE0	; 224
    10b0:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    10b2:	14 aa       	std	Z+52, r1	; 0x34
    10b4:	15 aa       	std	Z+53, r1	; 0x35
    10b6:	16 aa       	std	Z+54, r1	; 0x36
    10b8:	17 aa       	std	Z+55, r1	; 0x37

uint8_t Timebase_DownCounter_SS_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_SS_Get_ReloadValue(window);
    Timebase_DownCounter_SS_Clear_All_Flags( window );
	Timebase_DownCounter_SS_Set_Securely(window, temp);
    10ba:	8a 2f       	mov	r24, r26
    10bc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <Timebase_DownCounter_SS_Set_Securely>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    10c2:	08 95       	ret

000010c4 <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    10c8:	c0 91 f8 01 	lds	r28, 0x01F8
    10cc:	d0 91 f9 01 	lds	r29, 0x01F9
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    10d4:	85 e1       	ldi	r24, 0x15	; 21
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	28 9f       	mul	r18, r24
    10da:	f0 01       	movw	r30, r0
    10dc:	29 9f       	mul	r18, r25
    10de:	f0 0d       	add	r31, r0
    10e0:	38 9f       	mul	r19, r24
    10e2:	f0 0d       	add	r31, r0
    10e4:	11 24       	eor	r1, r1
    10e6:	ec 0f       	add	r30, r28
    10e8:	fd 1f       	adc	r31, r29
    10ea:	83 a1       	ldd	r24, Z+35	; 0x23
    10ec:	80 fd       	sbrc	r24, 0
    10ee:	21 c0       	rjmp	.+66     	; 0x1132 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    10f0:	84 a5       	ldd	r24, Z+44	; 0x2c
    10f2:	95 a5       	ldd	r25, Z+45	; 0x2d
    10f4:	a6 a5       	ldd	r26, Z+46	; 0x2e
    10f6:	b7 a5       	ldd	r27, Z+47	; 0x2f
    10f8:	84 1b       	sub	r24, r20
    10fa:	95 0b       	sbc	r25, r21
    10fc:	a6 0b       	sbc	r26, r22
    10fe:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1100:	b7 ff       	sbrs	r27, 7
    1102:	05 c0       	rjmp	.+10     	; 0x110e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1104:	10 aa       	std	Z+48, r1	; 0x30
    1106:	11 aa       	std	Z+49, r1	; 0x31
    1108:	12 aa       	std	Z+50, r1	; 0x32
    110a:	13 aa       	std	Z+51, r1	; 0x33
    110c:	04 c0       	rjmp	.+8      	; 0x1116 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    110e:	80 ab       	std	Z+48, r24	; 0x30
    1110:	91 ab       	std	Z+49, r25	; 0x31
    1112:	a2 ab       	std	Z+50, r26	; 0x32
    1114:	b3 ab       	std	Z+51, r27	; 0x33
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1116:	85 e1       	ldi	r24, 0x15	; 21
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	28 9f       	mul	r18, r24
    111c:	f0 01       	movw	r30, r0
    111e:	29 9f       	mul	r18, r25
    1120:	f0 0d       	add	r31, r0
    1122:	38 9f       	mul	r19, r24
    1124:	f0 0d       	add	r31, r0
    1126:	11 24       	eor	r1, r1
    1128:	ec 0f       	add	r30, r28
    112a:	fd 1f       	adc	r31, r29
    112c:	83 a1       	ldd	r24, Z+35	; 0x23
    112e:	81 60       	ori	r24, 0x01	; 1
    1130:	83 a3       	std	Z+35, r24	; 0x23
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1138:	e0 91 f8 01 	lds	r30, 0x01F8
    113c:	f0 91 f9 01 	lds	r31, 0x01F9
    1140:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1142:	25 e1       	ldi	r18, 0x15	; 21
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	ac 01       	movw	r20, r24
    1148:	42 9f       	mul	r20, r18
    114a:	c0 01       	movw	r24, r0
    114c:	43 9f       	mul	r20, r19
    114e:	90 0d       	add	r25, r0
    1150:	52 9f       	mul	r21, r18
    1152:	90 0d       	add	r25, r0
    1154:	11 24       	eor	r1, r1
    1156:	e8 0f       	add	r30, r24
    1158:	f9 1f       	adc	r31, r25
    115a:	24 a5       	ldd	r18, Z+44	; 0x2c
    115c:	35 a5       	ldd	r19, Z+45	; 0x2d
    115e:	46 a5       	ldd	r20, Z+46	; 0x2e
    1160:	57 a5       	ldd	r21, Z+47	; 0x2f
    1162:	80 a9       	ldd	r24, Z+48	; 0x30
    1164:	91 a9       	ldd	r25, Z+49	; 0x31
    1166:	a2 a9       	ldd	r26, Z+50	; 0x32
    1168:	b3 a9       	ldd	r27, Z+51	; 0x33
    116a:	28 1b       	sub	r18, r24
    116c:	39 0b       	sbc	r19, r25
    116e:	4a 0b       	sbc	r20, r26
    1170:	5b 0b       	sbc	r21, r27
    1172:	57 ff       	sbrs	r21, 7
    1174:	04 c0       	rjmp	.+8      	; 0x117e <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x46>
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e0       	ldi	r20, 0x00	; 0
    117c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    117e:	b9 01       	movw	r22, r18
    1180:	ca 01       	movw	r24, r20
    1182:	08 95       	ret

00001184 <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1188:	c0 91 f8 01 	lds	r28, 0x01F8
    118c:	d0 91 f9 01 	lds	r29, 0x01F9
    1190:	68 2f       	mov	r22, r24
    1192:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    1194:	85 e1       	ldi	r24, 0x15	; 21
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	68 9f       	mul	r22, r24
    119a:	f0 01       	movw	r30, r0
    119c:	69 9f       	mul	r22, r25
    119e:	f0 0d       	add	r31, r0
    11a0:	78 9f       	mul	r23, r24
    11a2:	f0 0d       	add	r31, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	ec 0f       	add	r30, r28
    11a8:	fd 1f       	adc	r31, r29
    11aa:	24 a5       	ldd	r18, Z+44	; 0x2c
    11ac:	35 a5       	ldd	r19, Z+45	; 0x2d
    11ae:	46 a5       	ldd	r20, Z+46	; 0x2e
    11b0:	57 a5       	ldd	r21, Z+47	; 0x2f
    11b2:	80 a9       	ldd	r24, Z+48	; 0x30
    11b4:	91 a9       	ldd	r25, Z+49	; 0x31
    11b6:	a2 a9       	ldd	r26, Z+50	; 0x32
    11b8:	b3 a9       	ldd	r27, Z+51	; 0x33
    11ba:	28 1b       	sub	r18, r24
    11bc:	39 0b       	sbc	r19, r25
    11be:	4a 0b       	sbc	r20, r26
    11c0:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    11c2:	57 fd       	sbrc	r21, 7
    11c4:	07 c0       	rjmp	.+14     	; 0x11d4 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    11c6:	21 15       	cp	r18, r1
    11c8:	31 05       	cpc	r19, r1
    11ca:	41 05       	cpc	r20, r1
    11cc:	51 05       	cpc	r21, r1
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <Timebase_DownCounter_SS_Period_Value_Expired+0x50>
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	12 c0       	rjmp	.+36     	; 0x11f8 <Timebase_DownCounter_SS_Period_Value_Expired+0x74>
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	85 e1       	ldi	r24, 0x15	; 21
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	ac 01       	movw	r20, r24
    11dc:	64 9f       	mul	r22, r20
    11de:	c0 01       	movw	r24, r0
    11e0:	65 9f       	mul	r22, r21
    11e2:	90 0d       	add	r25, r0
    11e4:	74 9f       	mul	r23, r20
    11e6:	90 0d       	add	r25, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	c8 0f       	add	r28, r24
    11ec:	d9 1f       	adc	r29, r25
    11ee:	8b a1       	ldd	r24, Y+35	; 0x23
    11f0:	80 ff       	sbrs	r24, 0
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11f8:	82 2f       	mov	r24, r18
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	08 95       	ret

00001200 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    1200:	1f 93       	push	r17
    1202:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1204:	0e 94 c2 08 	call	0x1184	; 0x1184 <Timebase_DownCounter_SS_Period_Value_Expired>
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	11 f0       	breq	.+4      	; 0x1210 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	16 c0       	rjmp	.+44     	; 0x123c <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1210:	e0 91 f8 01 	lds	r30, 0x01F8
    1214:	f0 91 f9 01 	lds	r31, 0x01F9
    1218:	21 2f       	mov	r18, r17
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	85 e1       	ldi	r24, 0x15	; 21
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	ac 01       	movw	r20, r24
    1222:	24 9f       	mul	r18, r20
    1224:	c0 01       	movw	r24, r0
    1226:	25 9f       	mul	r18, r21
    1228:	90 0d       	add	r25, r0
    122a:	34 9f       	mul	r19, r20
    122c:	90 0d       	add	r25, r0
    122e:	11 24       	eor	r1, r1
    1230:	e8 0f       	add	r30, r24
    1232:	f9 1f       	adc	r31, r25
    1234:	83 a1       	ldd	r24, Z+35	; 0x23
    1236:	8e 7f       	andi	r24, 0xFE	; 254
    1238:	83 a3       	std	Z+35, r24	; 0x23
    123a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    123c:	1f 91       	pop	r17
    123e:	08 95       	ret

00001240 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	0e 94 2f 07 	call	0xe5e	; 0xe5e <Timebase_DownCounter_SS_Update>
  }
}
    1246:	08 95       	ret

00001248 <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1248:	e0 91 f8 01 	lds	r30, 0x01F8
    124c:	f0 91 f9 01 	lds	r31, 0x01F9
    1250:	10 a6       	std	Z+40, r1	; 0x28
    1252:	11 a6       	std	Z+41, r1	; 0x29
    1254:	12 a6       	std	Z+42, r1	; 0x2a
    1256:	13 a6       	std	Z+43, r1	; 0x2b
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1258:	14 a2       	std	Z+36, r1	; 0x24
    125a:	15 a2       	std	Z+37, r1	; 0x25
    125c:	16 a2       	std	Z+38, r1	; 0x26
    125e:	17 a2       	std	Z+39, r1	; 0x27
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1260:	14 a6       	std	Z+44, r1	; 0x2c
    1262:	15 a6       	std	Z+45, r1	; 0x2d
    1264:	16 a6       	std	Z+46, r1	; 0x2e
    1266:	17 a6       	std	Z+47, r1	; 0x2f
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1268:	83 a1       	ldd	r24, Z+35	; 0x23
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    126a:	80 7e       	andi	r24, 0xE0	; 224
    126c:	83 a3       	std	Z+35, r24	; 0x23
int32_t Timebase_DownCounter_SS_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounterSS[window].ReloadValue;
}

void Timebase_DownCounter_SS_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].ReloadValue = value;
    126e:	14 aa       	std	Z+52, r1	; 0x34
    1270:	15 aa       	std	Z+53, r1	; 0x35
    1272:	16 aa       	std	Z+54, r1	; 0x36
    1274:	17 aa       	std	Z+55, r1	; 0x37

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    1276:	08 95       	ret

00001278 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    1278:	e0 91 f8 01 	lds	r30, 0x01F8
    127c:	f0 91 f9 01 	lds	r31, 0x01F9
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9c 01       	movw	r18, r24
    1284:	44 e0       	ldi	r20, 0x04	; 4
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	4a 95       	dec	r20
    128c:	e1 f7       	brne	.-8      	; 0x1286 <Timebase_DownCounter_Get_Status+0xe>
    128e:	28 0f       	add	r18, r24
    1290:	39 1f       	adc	r19, r25
    1292:	e2 0f       	add	r30, r18
    1294:	f3 1f       	adc	r31, r19
    1296:	80 ad       	ldd	r24, Z+56	; 0x38
    1298:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    129a:	8f 70       	andi	r24, 0x0F	; 15
    129c:	08 95       	ret

0000129e <Timebase_DownCounter_Set_Status>:


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    129e:	e0 91 f8 01 	lds	r30, 0x01F8
    12a2:	f0 91 f9 01 	lds	r31, 0x01F9
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9c 01       	movw	r18, r24
    12aa:	54 e0       	ldi	r21, 0x04	; 4
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	5a 95       	dec	r21
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <Timebase_DownCounter_Set_Status+0xe>
    12b4:	28 0f       	add	r18, r24
    12b6:	39 1f       	adc	r19, r25
    12b8:	e2 0f       	add	r30, r18
    12ba:	f3 1f       	adc	r31, r19
    12bc:	6f 70       	andi	r22, 0x0F	; 15
    12be:	66 0f       	add	r22, r22
    12c0:	80 ad       	ldd	r24, Z+56	; 0x38
    12c2:	81 7e       	andi	r24, 0xE1	; 225
    12c4:	86 2b       	or	r24, r22
    12c6:	80 af       	std	Z+56, r24	; 0x38
}
    12c8:	08 95       	ret

000012ca <Timebase_DownCounter_Get_Value>:


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    12ca:	e0 91 f8 01 	lds	r30, 0x01F8
    12ce:	f0 91 f9 01 	lds	r31, 0x01F9
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9c 01       	movw	r18, r24
    12d6:	64 e0       	ldi	r22, 0x04	; 4
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	6a 95       	dec	r22
    12de:	e1 f7       	brne	.-8      	; 0x12d8 <Timebase_DownCounter_Get_Value+0xe>
    12e0:	28 0f       	add	r18, r24
    12e2:	39 1f       	adc	r19, r25
    12e4:	e2 0f       	add	r30, r18
    12e6:	f3 1f       	adc	r31, r19
    12e8:	fd 96       	adiw	r30, 0x3d	; 61
    12ea:	60 81       	ld	r22, Z
    12ec:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	08 95       	ret

000012f4 <Timebase_DownCounter_Set_Value>:


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    12f4:	e0 91 f8 01 	lds	r30, 0x01F8
    12f8:	f0 91 f9 01 	lds	r31, 0x01F9
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9c 01       	movw	r18, r24
    1300:	a4 e0       	ldi	r26, 0x04	; 4
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	aa 95       	dec	r26
    1308:	e1 f7       	brne	.-8      	; 0x1302 <Timebase_DownCounter_Set_Value+0xe>
    130a:	28 0f       	add	r18, r24
    130c:	39 1f       	adc	r19, r25
    130e:	e2 0f       	add	r30, r18
    1310:	f3 1f       	adc	r31, r19
    1312:	fd 96       	adiw	r30, 0x3d	; 61
    1314:	40 83       	st	Z, r20
    1316:	51 83       	std	Z+1, r21	; 0x01
    1318:	62 83       	std	Z+2, r22	; 0x02
    131a:	73 83       	std	Z+3, r23	; 0x03
}
    131c:	08 95       	ret

0000131e <Timebase_DownCounter_Get_EndValue>:


int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    131e:	e0 91 f8 01 	lds	r30, 0x01F8
    1322:	f0 91 f9 01 	lds	r31, 0x01F9
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	9c 01       	movw	r18, r24
    132a:	b4 e0       	ldi	r27, 0x04	; 4
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	ba 95       	dec	r27
    1332:	e1 f7       	brne	.-8      	; 0x132c <Timebase_DownCounter_Get_EndValue+0xe>
    1334:	28 0f       	add	r18, r24
    1336:	39 1f       	adc	r19, r25
    1338:	e2 0f       	add	r30, r18
    133a:	f3 1f       	adc	r31, r19
    133c:	df 01       	movw	r26, r30
    133e:	d9 96       	adiw	r26, 0x39	; 57
    1340:	61 ad       	ldd	r22, Z+57	; 0x39
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	7c 91       	ld	r23, X
    1346:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].EndValue;
}
    1348:	12 96       	adiw	r26, 0x02	; 2
    134a:	8c 91       	ld	r24, X
    134c:	12 97       	sbiw	r26, 0x02	; 2
    134e:	13 96       	adiw	r26, 0x03	; 3
    1350:	9c 91       	ld	r25, X
    1352:	08 95       	ret

00001354 <Timebase_DownCounter_Set_EndValue>:


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1354:	e0 91 f8 01 	lds	r30, 0x01F8
    1358:	f0 91 f9 01 	lds	r31, 0x01F9
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9c 01       	movw	r18, r24
    1360:	a4 e0       	ldi	r26, 0x04	; 4
    1362:	22 0f       	add	r18, r18
    1364:	33 1f       	adc	r19, r19
    1366:	aa 95       	dec	r26
    1368:	e1 f7       	brne	.-8      	; 0x1362 <Timebase_DownCounter_Set_EndValue+0xe>
    136a:	28 0f       	add	r18, r24
    136c:	39 1f       	adc	r19, r25
    136e:	e2 0f       	add	r30, r18
    1370:	f3 1f       	adc	r31, r19
    1372:	41 af       	std	Z+57, r20	; 0x39
    1374:	52 af       	std	Z+58, r21	; 0x3a
    1376:	63 af       	std	Z+59, r22	; 0x3b
    1378:	74 af       	std	Z+60, r23	; 0x3c
}
    137a:	08 95       	ret

0000137c <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    137c:	e0 91 f8 01 	lds	r30, 0x01F8
    1380:	f0 91 f9 01 	lds	r31, 0x01F9
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	9c 01       	movw	r18, r24
    1388:	b4 e0       	ldi	r27, 0x04	; 4
    138a:	22 0f       	add	r18, r18
    138c:	33 1f       	adc	r19, r19
    138e:	ba 95       	dec	r27
    1390:	e1 f7       	brne	.-8      	; 0x138a <Timebase_DownCounter_Get_PeriodValue+0xe>
    1392:	28 0f       	add	r18, r24
    1394:	39 1f       	adc	r19, r25
    1396:	e2 0f       	add	r30, r18
    1398:	f3 1f       	adc	r31, r19
    139a:	ef 5b       	subi	r30, 0xBF	; 191
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	08 95       	ret

000013a8 <Timebase_DownCounter_Set_PeriodValue>:


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    13a8:	e0 91 f8 01 	lds	r30, 0x01F8
    13ac:	f0 91 f9 01 	lds	r31, 0x01F9
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    13b4:	77 ff       	sbrs	r23, 7
    13b6:	11 c0       	rjmp	.+34     	; 0x13da <Timebase_DownCounter_Set_PeriodValue+0x32>
    Timebase->DownCounter[window].PeriodValue = 0;
    13b8:	c9 01       	movw	r24, r18
    13ba:	b4 e0       	ldi	r27, 0x04	; 4
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	ba 95       	dec	r27
    13c2:	e1 f7       	brne	.-8      	; 0x13bc <Timebase_DownCounter_Set_PeriodValue+0x14>
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	e8 0f       	add	r30, r24
    13ca:	f9 1f       	adc	r31, r25
    13cc:	ef 5b       	subi	r30, 0xBF	; 191
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	10 82       	st	Z, r1
    13d2:	11 82       	std	Z+1, r1	; 0x01
    13d4:	12 82       	std	Z+2, r1	; 0x02
    13d6:	13 82       	std	Z+3, r1	; 0x03
    13d8:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    13da:	c9 01       	movw	r24, r18
    13dc:	a4 e0       	ldi	r26, 0x04	; 4
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	aa 95       	dec	r26
    13e4:	e1 f7       	brne	.-8      	; 0x13de <Timebase_DownCounter_Set_PeriodValue+0x36>
    13e6:	82 0f       	add	r24, r18
    13e8:	93 1f       	adc	r25, r19
    13ea:	e8 0f       	add	r30, r24
    13ec:	f9 1f       	adc	r31, r25
    13ee:	ef 5b       	subi	r30, 0xBF	; 191
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	40 83       	st	Z, r20
    13f4:	51 83       	std	Z+1, r21	; 0x01
    13f6:	62 83       	std	Z+2, r22	; 0x02
    13f8:	73 83       	std	Z+3, r23	; 0x03
    13fa:	08 95       	ret

000013fc <Timebase_DownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    13fc:	e0 91 f8 01 	lds	r30, 0x01F8
    1400:	f0 91 f9 01 	lds	r31, 0x01F9
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c 01       	movw	r18, r24
    1408:	44 e0       	ldi	r20, 0x04	; 4
    140a:	22 0f       	add	r18, r18
    140c:	33 1f       	adc	r19, r19
    140e:	4a 95       	dec	r20
    1410:	e1 f7       	brne	.-8      	; 0x140a <Timebase_DownCounter_Get_Period_Flag+0xe>
    1412:	28 0f       	add	r18, r24
    1414:	39 1f       	adc	r19, r25
    1416:	e2 0f       	add	r30, r18
    1418:	f3 1f       	adc	r31, r19
    141a:	80 ad       	ldd	r24, Z+56	; 0x38
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    141c:	81 70       	andi	r24, 0x01	; 1
    141e:	08 95       	ret

00001420 <Timebase_DownCounter_Set_Period_Flag>:


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1420:	e0 91 f8 01 	lds	r30, 0x01F8
    1424:	f0 91 f9 01 	lds	r31, 0x01F9
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9c 01       	movw	r18, r24
    142c:	54 e0       	ldi	r21, 0x04	; 4
    142e:	22 0f       	add	r18, r18
    1430:	33 1f       	adc	r19, r19
    1432:	5a 95       	dec	r21
    1434:	e1 f7       	brne	.-8      	; 0x142e <Timebase_DownCounter_Set_Period_Flag+0xe>
    1436:	28 0f       	add	r18, r24
    1438:	39 1f       	adc	r19, r25
    143a:	e2 0f       	add	r30, r18
    143c:	f3 1f       	adc	r31, r19
    143e:	80 ad       	ldd	r24, Z+56	; 0x38
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	80 af       	std	Z+56, r24	; 0x38
}
    1444:	08 95       	ret

00001446 <Timebase_DownCounter_Clear_Period_Flag>:


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1446:	e0 91 f8 01 	lds	r30, 0x01F8
    144a:	f0 91 f9 01 	lds	r31, 0x01F9
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 01       	movw	r18, r24
    1452:	64 e0       	ldi	r22, 0x04	; 4
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	6a 95       	dec	r22
    145a:	e1 f7       	brne	.-8      	; 0x1454 <Timebase_DownCounter_Clear_Period_Flag+0xe>
    145c:	28 0f       	add	r18, r24
    145e:	39 1f       	adc	r19, r25
    1460:	e2 0f       	add	r30, r18
    1462:	f3 1f       	adc	r31, r19
    1464:	80 ad       	ldd	r24, Z+56	; 0x38
    1466:	8e 7f       	andi	r24, 0xFE	; 254
    1468:	80 af       	std	Z+56, r24	; 0x38
}
    146a:	08 95       	ret

0000146c <Timebase_DownCounter_Get_ReloadValue>:

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
    146c:	e0 91 f8 01 	lds	r30, 0x01F8
    1470:	f0 91 f9 01 	lds	r31, 0x01F9
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9c 01       	movw	r18, r24
    1478:	74 e0       	ldi	r23, 0x04	; 4
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	7a 95       	dec	r23
    1480:	e1 f7       	brne	.-8      	; 0x147a <Timebase_DownCounter_Get_ReloadValue+0xe>
    1482:	28 0f       	add	r18, r24
    1484:	39 1f       	adc	r19, r25
    1486:	e2 0f       	add	r30, r18
    1488:	f3 1f       	adc	r31, r19
    148a:	eb 5b       	subi	r30, 0xBB	; 187
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].ReloadValue;
}
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	08 95       	ret

00001498 <Timebase_DownCounter_Set_ReloadValue>:

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1498:	e0 91 f8 01 	lds	r30, 0x01F8
    149c:	f0 91 f9 01 	lds	r31, 0x01F9
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	9c 01       	movw	r18, r24
    14a4:	a4 e0       	ldi	r26, 0x04	; 4
    14a6:	22 0f       	add	r18, r18
    14a8:	33 1f       	adc	r19, r19
    14aa:	aa 95       	dec	r26
    14ac:	e1 f7       	brne	.-8      	; 0x14a6 <Timebase_DownCounter_Set_ReloadValue+0xe>
    14ae:	28 0f       	add	r18, r24
    14b0:	39 1f       	adc	r19, r25
    14b2:	e2 0f       	add	r30, r18
    14b4:	f3 1f       	adc	r31, r19
    14b6:	eb 5b       	subi	r30, 0xBB	; 187
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	40 83       	st	Z, r20
    14bc:	51 83       	std	Z+1, r21	; 0x01
    14be:	62 83       	std	Z+2, r22	; 0x02
    14c0:	73 83       	std	Z+3, r23	; 0x03
}
    14c2:	08 95       	ret

000014c4 <Timebase_DownCounter_Reset>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    14c4:	e0 91 f8 01 	lds	r30, 0x01F8
    14c8:	f0 91 f9 01 	lds	r31, 0x01F9
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9c 01       	movw	r18, r24
    14d0:	b4 e0       	ldi	r27, 0x04	; 4
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	ba 95       	dec	r27
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <Timebase_DownCounter_Reset+0xe>
    14da:	28 0f       	add	r18, r24
    14dc:	39 1f       	adc	r19, r25
    14de:	e2 0f       	add	r30, r18
    14e0:	f3 1f       	adc	r31, r19
    14e2:	11 ae       	std	Z+57, r1	; 0x39
    14e4:	12 ae       	std	Z+58, r1	; 0x3a
    14e6:	13 ae       	std	Z+59, r1	; 0x3b
    14e8:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    14ea:	fd 96       	adiw	r30, 0x3d	; 61
    14ec:	10 82       	st	Z, r1
    14ee:	11 82       	std	Z+1, r1	; 0x01
    14f0:	12 82       	std	Z+2, r1	; 0x02
    14f2:	13 82       	std	Z+3, r1	; 0x03
    14f4:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14f6:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14f8:	80 7e       	andi	r24, 0xE0	; 224
    14fa:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    14fc:	eb 5b       	subi	r30, 0xBB	; 187
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	10 82       	st	Z, r1
    1502:	11 82       	std	Z+1, r1	; 0x01
    1504:	12 82       	std	Z+2, r1	; 0x02
    1506:	13 82       	std	Z+3, r1	; 0x03
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
  Timebase_DownCounter_Set_ReloadValue(window, 0);
} 
    1508:	08 95       	ret

0000150a <Timebase_DownCounter_Clear_All_Flags>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    150a:	e0 91 f8 01 	lds	r30, 0x01F8
    150e:	f0 91 f9 01 	lds	r31, 0x01F9
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	9c 01       	movw	r18, r24
    1516:	44 e0       	ldi	r20, 0x04	; 4
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	4a 95       	dec	r20
    151e:	e1 f7       	brne	.-8      	; 0x1518 <Timebase_DownCounter_Clear_All_Flags+0xe>
    1520:	28 0f       	add	r18, r24
    1522:	39 1f       	adc	r19, r25
    1524:	e2 0f       	add	r30, r18
    1526:	f3 1f       	adc	r31, r19
    1528:	11 ae       	std	Z+57, r1	; 0x39
    152a:	12 ae       	std	Z+58, r1	; 0x3a
    152c:	13 ae       	std	Z+59, r1	; 0x3b
    152e:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1530:	fd 96       	adiw	r30, 0x3d	; 61
    1532:	10 82       	st	Z, r1
    1534:	11 82       	std	Z+1, r1	; 0x01
    1536:	12 82       	std	Z+2, r1	; 0x02
    1538:	13 82       	std	Z+3, r1	; 0x03
    153a:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    153c:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    153e:	80 7e       	andi	r24, 0xE0	; 224
    1540:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1542:	eb 5b       	subi	r30, 0xBB	; 187
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	10 82       	st	Z, r1
    1548:	11 82       	std	Z+1, r1	; 0x01
    154a:	12 82       	std	Z+2, r1	; 0x02
    154c:	13 82       	std	Z+3, r1	; 0x03
} 


void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    154e:	08 95       	ret

00001550 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1550:	e0 91 f8 01 	lds	r30, 0x01F8
    1554:	f0 91 f9 01 	lds	r31, 0x01F9
    1558:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    155a:	9c 01       	movw	r18, r24
    155c:	54 e0       	ldi	r21, 0x04	; 4
    155e:	22 0f       	add	r18, r18
    1560:	33 1f       	adc	r19, r19
    1562:	5a 95       	dec	r21
    1564:	e1 f7       	brne	.-8      	; 0x155e <Timebase_DownCounter_Start+0xe>
    1566:	28 0f       	add	r18, r24
    1568:	39 1f       	adc	r19, r25
    156a:	e2 0f       	add	r30, r18
    156c:	f3 1f       	adc	r31, r19
    156e:	90 ad       	ldd	r25, Z+56	; 0x38
    1570:	89 2f       	mov	r24, r25
    1572:	86 95       	lsr	r24
    1574:	8f 70       	andi	r24, 0x0F	; 15
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	19 f0       	breq	.+6      	; 0x1580 <Timebase_DownCounter_Start+0x30>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    157a:	91 7e       	andi	r25, 0xE1	; 225
    157c:	92 60       	ori	r25, 0x02	; 2
    157e:	90 af       	std	Z+56, r25	; 0x38
    1580:	08 95       	ret

00001582 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1582:	e0 91 f8 01 	lds	r30, 0x01F8
    1586:	f0 91 f9 01 	lds	r31, 0x01F9
    158a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    158c:	9c 01       	movw	r18, r24
    158e:	64 e0       	ldi	r22, 0x04	; 4
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	6a 95       	dec	r22
    1596:	e1 f7       	brne	.-8      	; 0x1590 <Timebase_DownCounter_Stop+0xe>
    1598:	28 0f       	add	r18, r24
    159a:	39 1f       	adc	r19, r25
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	90 ad       	ldd	r25, Z+56	; 0x38
    15a2:	89 2f       	mov	r24, r25
    15a4:	86 95       	lsr	r24
    15a6:	8f 70       	andi	r24, 0x0F	; 15
    15a8:	82 30       	cpi	r24, 0x02	; 2
    15aa:	19 f0       	breq	.+6      	; 0x15b2 <Timebase_DownCounter_Stop+0x30>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    15ac:	91 7e       	andi	r25, 0xE1	; 225
    15ae:	94 60       	ori	r25, 0x04	; 4
    15b0:	90 af       	std	Z+56, r25	; 0x38
    15b2:	08 95       	ret

000015b4 <Timebase_DownCounter_Set_Securely>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    15b4:	a0 91 f8 01 	lds	r26, 0x01F8
    15b8:	b0 91 f9 01 	lds	r27, 0x01F9
    15bc:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    15be:	fc 01       	movw	r30, r24
    15c0:	24 e0       	ldi	r18, 0x04	; 4
    15c2:	ee 0f       	add	r30, r30
    15c4:	ff 1f       	adc	r31, r31
    15c6:	2a 95       	dec	r18
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <Timebase_DownCounter_Set_Securely+0xe>
    15ca:	e8 0f       	add	r30, r24
    15cc:	f9 1f       	adc	r31, r25
    15ce:	ea 0f       	add	r30, r26
    15d0:	fb 1f       	adc	r31, r27
    15d2:	80 ad       	ldd	r24, Z+56	; 0x38
    15d4:	86 95       	lsr	r24
    15d6:	8f 70       	andi	r24, 0x0F	; 15
    15d8:	29 f5       	brne	.+74     	; 0x1624 <Timebase_DownCounter_Set_Securely+0x70>
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    15da:	fd 96       	adiw	r30, 0x3d	; 61
    15dc:	40 83       	st	Z, r20
    15de:	51 83       	std	Z+1, r21	; 0x01
    15e0:	62 83       	std	Z+2, r22	; 0x02
    15e2:	73 83       	std	Z+3, r23	; 0x03
    15e4:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15e6:	1a 96       	adiw	r26, 0x0a	; 10
    15e8:	8d 91       	ld	r24, X+
    15ea:	9d 91       	ld	r25, X+
    15ec:	0d 90       	ld	r0, X+
    15ee:	bc 91       	ld	r27, X
    15f0:	a0 2d       	mov	r26, r0
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    15f2:	84 0f       	add	r24, r20
    15f4:	95 1f       	adc	r25, r21
    15f6:	a6 1f       	adc	r26, r22
    15f8:	b7 1f       	adc	r27, r23
    15fa:	81 af       	std	Z+57, r24	; 0x39
    15fc:	92 af       	std	Z+58, r25	; 0x3a
    15fe:	a3 af       	std	Z+59, r26	; 0x3b
    1600:	b4 af       	std	Z+60, r27	; 0x3c
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1602:	eb 5b       	subi	r30, 0xBB	; 187
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	40 83       	st	Z, r20
    1608:	51 83       	std	Z+1, r21	; 0x01
    160a:	62 83       	std	Z+2, r22	; 0x02
    160c:	73 83       	std	Z+3, r23	; 0x03
    160e:	e5 54       	subi	r30, 0x45	; 69
    1610:	f0 40       	sbci	r31, 0x00	; 0
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1612:	90 ad       	ldd	r25, Z+56	; 0x38
    1614:	89 2f       	mov	r24, r25
    1616:	86 95       	lsr	r24
    1618:	8f 70       	andi	r24, 0x0F	; 15
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	19 f0       	breq	.+6      	; 0x1624 <Timebase_DownCounter_Set_Securely+0x70>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    161e:	91 7e       	andi	r25, 0xE1	; 225
    1620:	92 60       	ori	r25, 0x02	; 2
    1622:	90 af       	std	Z+56, r25	; 0x38
    1624:	08 95       	ret

00001626 <Timebase_DownCounter_Set_Forcefully>:
    Timebase_DownCounter_Start(window);
  }
}


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	6a 01       	movw	r12, r20
    1634:	7b 01       	movw	r14, r22
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1636:	e0 91 f8 01 	lds	r30, 0x01F8
    163a:	f0 91 f9 01 	lds	r31, 0x01F9
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	89 01       	movw	r16, r18
    1644:	44 e0       	ldi	r20, 0x04	; 4
    1646:	00 0f       	add	r16, r16
    1648:	11 1f       	adc	r17, r17
    164a:	4a 95       	dec	r20
    164c:	e1 f7       	brne	.-8      	; 0x1646 <Timebase_DownCounter_Set_Forcefully+0x20>
    164e:	02 0f       	add	r16, r18
    1650:	13 1f       	adc	r17, r19
    1652:	e0 0f       	add	r30, r16
    1654:	f1 1f       	adc	r31, r17
    1656:	11 ae       	std	Z+57, r1	; 0x39
    1658:	12 ae       	std	Z+58, r1	; 0x3a
    165a:	13 ae       	std	Z+59, r1	; 0x3b
    165c:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    165e:	fd 96       	adiw	r30, 0x3d	; 61
    1660:	10 82       	st	Z, r1
    1662:	11 82       	std	Z+1, r1	; 0x01
    1664:	12 82       	std	Z+2, r1	; 0x02
    1666:	13 82       	std	Z+3, r1	; 0x03
    1668:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    166a:	90 ad       	ldd	r25, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    166c:	90 7e       	andi	r25, 0xE0	; 224
    166e:	90 af       	std	Z+56, r25	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1670:	eb 5b       	subi	r30, 0xBB	; 187
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	10 82       	st	Z, r1
    1676:	11 82       	std	Z+1, r1	; 0x01
    1678:	12 82       	std	Z+2, r1	; 0x02
    167a:	13 82       	std	Z+3, r1	; 0x03
}


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    167c:	b7 01       	movw	r22, r14
    167e:	a6 01       	movw	r20, r12
    1680:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Timebase_DownCounter_Set_Securely>
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1684:	e0 91 f8 01 	lds	r30, 0x01F8
    1688:	f0 91 f9 01 	lds	r31, 0x01F9
    168c:	e0 0f       	add	r30, r16
    168e:	f1 1f       	adc	r31, r17
    1690:	eb 5b       	subi	r30, 0xBB	; 187
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	c0 82       	st	Z, r12
    1696:	d1 82       	std	Z+1, r13	; 0x01
    1698:	e2 82       	std	Z+2, r14	; 0x02
    169a:	f3 82       	std	Z+3, r15	; 0x03

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
  Timebase_DownCounter_Set_ReloadValue(window, value);
} 
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	08 95       	ret

000016aa <Timebase_DownCounter_Update>:


void Timebase_DownCounter_Update(uint8_t window){
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    16ae:	e0 91 f8 01 	lds	r30, 0x01F8
    16b2:	f0 91 f9 01 	lds	r31, 0x01F9
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	ec 01       	movw	r28, r24
    16ba:	54 e0       	ldi	r21, 0x04	; 4
    16bc:	cc 0f       	add	r28, r28
    16be:	dd 1f       	adc	r29, r29
    16c0:	5a 95       	dec	r21
    16c2:	e1 f7       	brne	.-8      	; 0x16bc <Timebase_DownCounter_Update+0x12>
    16c4:	c8 0f       	add	r28, r24
    16c6:	d9 1f       	adc	r29, r25
    16c8:	ce 0f       	add	r28, r30
    16ca:	df 1f       	adc	r29, r31
    16cc:	88 ad       	ldd	r24, Y+56	; 0x38
    16ce:	86 95       	lsr	r24
    16d0:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Set_ReloadValue(window, value);
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    16d2:	81 30       	cpi	r24, 0x01	; 1
    16d4:	b1 f5       	brne	.+108    	; 0x1742 <Timebase_DownCounter_Update+0x98>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16d6:	22 85       	ldd	r18, Z+10	; 0x0a
    16d8:	33 85       	ldd	r19, Z+11	; 0x0b
    16da:	44 85       	ldd	r20, Z+12	; 0x0c
    16dc:	55 85       	ldd	r21, Z+13	; 0x0d
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    16de:	89 ad       	ldd	r24, Y+57	; 0x39
    16e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    16e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    16e4:	bc ad       	ldd	r27, Y+60	; 0x3c
    16e6:	82 1b       	sub	r24, r18
    16e8:	93 0b       	sbc	r25, r19
    16ea:	a4 0b       	sbc	r26, r20
    16ec:	b5 0b       	sbc	r27, r21
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    16ee:	be 01       	movw	r22, r28
    16f0:	63 5c       	subi	r22, 0xC3	; 195
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	fb 01       	movw	r30, r22
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    16fe:	18 16       	cp	r1, r24
    1700:	19 06       	cpc	r1, r25
    1702:	1a 06       	cpc	r1, r26
    1704:	1b 06       	cpc	r1, r27
    1706:	8c f1       	brlt	.+98     	; 0x176a <Timebase_DownCounter_Update+0xc0>
void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
    1708:	fe 01       	movw	r30, r28
    170a:	eb 5b       	subi	r30, 0xBB	; 187
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	20 81       	ld	r18, Z
    1710:	31 81       	ldd	r19, Z+1	; 0x01
    1712:	42 81       	ldd	r20, Z+2	; 0x02
    1714:	53 81       	ldd	r21, Z+3	; 0x03
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1716:	19 ae       	std	Y+57, r1	; 0x39
    1718:	1a ae       	std	Y+58, r1	; 0x3a
    171a:	1b ae       	std	Y+59, r1	; 0x3b
    171c:	1c ae       	std	Y+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    171e:	db 01       	movw	r26, r22
    1720:	1d 92       	st	X+, r1
    1722:	1d 92       	st	X+, r1
    1724:	1d 92       	st	X+, r1
    1726:	1c 92       	st	X, r1
    1728:	13 97       	sbiw	r26, 0x03	; 3
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    172a:	88 ad       	ldd	r24, Y+56	; 0x38
    172c:	8e 7f       	andi	r24, 0xFE	; 254
    172e:	88 af       	std	Y+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1730:	20 83       	st	Z, r18
    1732:	31 83       	std	Z+1, r19	; 0x01
    1734:	42 83       	std	Z+2, r20	; 0x02
    1736:	53 83       	std	Z+3, r21	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1738:	88 ad       	ldd	r24, Y+56	; 0x38
    173a:	81 7e       	andi	r24, 0xE1	; 225
    173c:	88 60       	ori	r24, 0x08	; 8
    173e:	88 af       	std	Y+56, r24	; 0x38
    1740:	14 c0       	rjmp	.+40     	; 0x176a <Timebase_DownCounter_Update+0xc0>
	  int32_t temp = Timebase_DownCounter_Get_ReloadValue(window);
      Timebase_DownCounter_Reset(window);
	  Timebase_DownCounter_Set_ReloadValue(window, temp);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	91 f4       	brne	.+36     	; 0x176a <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1746:	82 85       	ldd	r24, Z+10	; 0x0a
    1748:	93 85       	ldd	r25, Z+11	; 0x0b
    174a:	a4 85       	ldd	r26, Z+12	; 0x0c
    174c:	b5 85       	ldd	r27, Z+13	; 0x0d
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    174e:	ed 96       	adiw	r28, 0x3d	; 61
    1750:	28 81       	ld	r18, Y
    1752:	39 81       	ldd	r19, Y+1	; 0x01
    1754:	4a 81       	ldd	r20, Y+2	; 0x02
    1756:	5b 81       	ldd	r21, Y+3	; 0x03
    1758:	ed 97       	sbiw	r28, 0x3d	; 61
    175a:	82 0f       	add	r24, r18
    175c:	93 1f       	adc	r25, r19
    175e:	a4 1f       	adc	r26, r20
    1760:	b5 1f       	adc	r27, r21
    1762:	89 af       	std	Y+57, r24	; 0x39
    1764:	9a af       	std	Y+58, r25	; 0x3a
    1766:	ab af       	std	Y+59, r26	; 0x3b
    1768:	bc af       	std	Y+60, r27	; 0x3c
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <Timebase_DownCounter_Expired>:


uint8_t Timebase_DownCounter_Expired(uint8_t window){
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	e0 91 f8 01 	lds	r30, 0x01F8
    1776:	f0 91 f9 01 	lds	r31, 0x01F9
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9c 01       	movw	r18, r24
    177e:	64 e0       	ldi	r22, 0x04	; 4
    1780:	22 0f       	add	r18, r18
    1782:	33 1f       	adc	r19, r19
    1784:	6a 95       	dec	r22
    1786:	e1 f7       	brne	.-8      	; 0x1780 <Timebase_DownCounter_Expired+0x10>
    1788:	28 0f       	add	r18, r24
    178a:	39 1f       	adc	r19, r25
    178c:	e2 0f       	add	r30, r18
    178e:	f3 1f       	adc	r31, r19
    1790:	80 ad       	ldd	r24, Z+56	; 0x38
    1792:	86 95       	lsr	r24
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	84 30       	cpi	r24, 0x04	; 4
    1798:	09 f4       	brne	.+2      	; 0x179c <Timebase_DownCounter_Expired+0x2c>
    179a:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    179c:	84 2f       	mov	r24, r20
    179e:	08 95       	ret

000017a0 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    17a0:	e0 91 f8 01 	lds	r30, 0x01F8
    17a4:	f0 91 f9 01 	lds	r31, 0x01F9
    17a8:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    17aa:	9c 01       	movw	r18, r24
    17ac:	74 e0       	ldi	r23, 0x04	; 4
    17ae:	22 0f       	add	r18, r18
    17b0:	33 1f       	adc	r19, r19
    17b2:	7a 95       	dec	r23
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <Timebase_DownCounter_Expired_Event+0xe>
    17b6:	28 0f       	add	r18, r24
    17b8:	39 1f       	adc	r19, r25
    17ba:	e2 0f       	add	r30, r18
    17bc:	f3 1f       	adc	r31, r19
    17be:	80 ad       	ldd	r24, Z+56	; 0x38
    17c0:	86 95       	lsr	r24
    17c2:	8f 70       	andi	r24, 0x0F	; 15
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	11 f0       	breq	.+4      	; 0x17cc <Timebase_DownCounter_Expired_Event+0x2c>
    17c8:	80 e0       	ldi	r24, 0x00	; 0
    17ca:	08 95       	ret
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    17cc:	11 ae       	std	Z+57, r1	; 0x39
    17ce:	12 ae       	std	Z+58, r1	; 0x3a
    17d0:	13 ae       	std	Z+59, r1	; 0x3b
    17d2:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    17d4:	fd 96       	adiw	r30, 0x3d	; 61
    17d6:	10 82       	st	Z, r1
    17d8:	11 82       	std	Z+1, r1	; 0x01
    17da:	12 82       	std	Z+2, r1	; 0x02
    17dc:	13 82       	std	Z+3, r1	; 0x03
    17de:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    17e0:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17e2:	80 7e       	andi	r24, 0xE0	; 224
    17e4:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    17e6:	eb 5b       	subi	r30, 0xBB	; 187
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	10 82       	st	Z, r1
    17ec:	11 82       	std	Z+1, r1	; 0x01
    17ee:	12 82       	std	Z+2, r1	; 0x02
    17f0:	13 82       	std	Z+3, r1	; 0x03
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17f4:	08 95       	ret

000017f6 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    17fa:	c0 91 f8 01 	lds	r28, 0x01F8
    17fe:	d0 91 f9 01 	lds	r29, 0x01F9
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1806:	f9 01       	movw	r30, r18
    1808:	b4 e0       	ldi	r27, 0x04	; 4
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	ba 95       	dec	r27
    1810:	e1 f7       	brne	.-8      	; 0x180a <Timebase_DownCounter_Set_Period_Value_Securely+0x14>
    1812:	e2 0f       	add	r30, r18
    1814:	f3 1f       	adc	r31, r19
    1816:	ec 0f       	add	r30, r28
    1818:	fd 1f       	adc	r31, r29
    181a:	80 ad       	ldd	r24, Z+56	; 0x38
    181c:	80 fd       	sbrc	r24, 0
    181e:	21 c0       	rjmp	.+66     	; 0x1862 <Timebase_DownCounter_Set_Period_Value_Securely+0x6c>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    1820:	fd 96       	adiw	r30, 0x3d	; 61
    1822:	81 91       	ld	r24, Z+
    1824:	91 91       	ld	r25, Z+
    1826:	a1 91       	ld	r26, Z+
    1828:	b1 91       	ld	r27, Z+
    182a:	84 1b       	sub	r24, r20
    182c:	95 0b       	sbc	r25, r21
    182e:	a6 0b       	sbc	r26, r22
    1830:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounter[window].PeriodValue;
}


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    1832:	b7 ff       	sbrs	r27, 7
    1834:	05 c0       	rjmp	.+10     	; 0x1840 <Timebase_DownCounter_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounter[window].PeriodValue = 0;
    1836:	10 82       	st	Z, r1
    1838:	11 82       	std	Z+1, r1	; 0x01
    183a:	12 82       	std	Z+2, r1	; 0x02
    183c:	13 82       	std	Z+3, r1	; 0x03
    183e:	04 c0       	rjmp	.+8      	; 0x1848 <Timebase_DownCounter_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1840:	80 83       	st	Z, r24
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	a2 83       	std	Z+2, r26	; 0x02
    1846:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->DownCounter[window].Status.PeriodFlag;
}


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1848:	f9 01       	movw	r30, r18
    184a:	a4 e0       	ldi	r26, 0x04	; 4
    184c:	ee 0f       	add	r30, r30
    184e:	ff 1f       	adc	r31, r31
    1850:	aa 95       	dec	r26
    1852:	e1 f7       	brne	.-8      	; 0x184c <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    1854:	e2 0f       	add	r30, r18
    1856:	f3 1f       	adc	r31, r19
    1858:	ec 0f       	add	r30, r28
    185a:	fd 1f       	adc	r31, r29
    185c:	80 ad       	ldd	r24, Z+56	; 0x38
    185e:	81 60       	ori	r24, 0x01	; 1
    1860:	80 af       	std	Z+56, r24	; 0x38
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <Timebase_DownCounter_Get_Remaining_Period_Value>:
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1868:	e0 91 f8 01 	lds	r30, 0x01F8
    186c:	f0 91 f9 01 	lds	r31, 0x01F9
    1870:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1872:	9c 01       	movw	r18, r24
    1874:	44 e0       	ldi	r20, 0x04	; 4
    1876:	22 0f       	add	r18, r18
    1878:	33 1f       	adc	r19, r19
    187a:	4a 95       	dec	r20
    187c:	e1 f7       	brne	.-8      	; 0x1876 <Timebase_DownCounter_Get_Remaining_Period_Value+0xe>
    187e:	28 0f       	add	r18, r24
    1880:	39 1f       	adc	r19, r25
    1882:	e2 0f       	add	r30, r18
    1884:	f3 1f       	adc	r31, r19
    1886:	df 01       	movw	r26, r30
    1888:	af 5b       	subi	r26, 0xBF	; 191
    188a:	bf 4f       	sbci	r27, 0xFF	; 255
    188c:	fd 96       	adiw	r30, 0x3d	; 61
    188e:	20 81       	ld	r18, Z
    1890:	31 81       	ldd	r19, Z+1	; 0x01
    1892:	42 81       	ldd	r20, Z+2	; 0x02
    1894:	53 81       	ldd	r21, Z+3	; 0x03
    1896:	8d 91       	ld	r24, X+
    1898:	9d 91       	ld	r25, X+
    189a:	0d 90       	ld	r0, X+
    189c:	bc 91       	ld	r27, X
    189e:	a0 2d       	mov	r26, r0
    18a0:	28 1b       	sub	r18, r24
    18a2:	39 0b       	sbc	r19, r25
    18a4:	4a 0b       	sbc	r20, r26
    18a6:	5b 0b       	sbc	r21, r27
    18a8:	57 ff       	sbrs	r21, 7
    18aa:	04 c0       	rjmp	.+8      	; 0x18b4 <Timebase_DownCounter_Get_Remaining_Period_Value+0x4c>
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    18b4:	b9 01       	movw	r22, r18
    18b6:	ca 01       	movw	r24, r20
    18b8:	08 95       	ret

000018ba <Timebase_DownCounter_Period_Value_Expired>:


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    18be:	c0 91 f8 01 	lds	r28, 0x01F8
    18c2:	d0 91 f9 01 	lds	r29, 0x01F9
    18c6:	68 2f       	mov	r22, r24
    18c8:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    18ca:	fb 01       	movw	r30, r22
    18cc:	a4 e0       	ldi	r26, 0x04	; 4
    18ce:	ee 0f       	add	r30, r30
    18d0:	ff 1f       	adc	r31, r31
    18d2:	aa 95       	dec	r26
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <Timebase_DownCounter_Period_Value_Expired+0x14>
    18d6:	e6 0f       	add	r30, r22
    18d8:	f7 1f       	adc	r31, r23
    18da:	ec 0f       	add	r30, r28
    18dc:	fd 1f       	adc	r31, r29
    18de:	df 01       	movw	r26, r30
    18e0:	af 5b       	subi	r26, 0xBF	; 191
    18e2:	bf 4f       	sbci	r27, 0xFF	; 255
    18e4:	fd 96       	adiw	r30, 0x3d	; 61
    18e6:	20 81       	ld	r18, Z
    18e8:	31 81       	ldd	r19, Z+1	; 0x01
    18ea:	42 81       	ldd	r20, Z+2	; 0x02
    18ec:	53 81       	ldd	r21, Z+3	; 0x03
    18ee:	8d 91       	ld	r24, X+
    18f0:	9d 91       	ld	r25, X+
    18f2:	0d 90       	ld	r0, X+
    18f4:	bc 91       	ld	r27, X
    18f6:	a0 2d       	mov	r26, r0
    18f8:	28 1b       	sub	r18, r24
    18fa:	39 0b       	sbc	r19, r25
    18fc:	4a 0b       	sbc	r20, r26
    18fe:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1900:	57 fd       	sbrc	r21, 7
    1902:	07 c0       	rjmp	.+14     	; 0x1912 <Timebase_DownCounter_Period_Value_Expired+0x58>
  return temp;
}


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1904:	21 15       	cp	r18, r1
    1906:	31 05       	cpc	r19, r1
    1908:	41 05       	cpc	r20, r1
    190a:	51 05       	cpc	r21, r1
    190c:	11 f0       	breq	.+4      	; 0x1912 <Timebase_DownCounter_Period_Value_Expired+0x58>
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	10 c0       	rjmp	.+32     	; 0x1932 <Timebase_DownCounter_Period_Value_Expired+0x78>
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	cb 01       	movw	r24, r22
    1916:	54 e0       	ldi	r21, 0x04	; 4
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	5a 95       	dec	r21
    191e:	e1 f7       	brne	.-8      	; 0x1918 <Timebase_DownCounter_Period_Value_Expired+0x5e>
    1920:	86 0f       	add	r24, r22
    1922:	97 1f       	adc	r25, r23
    1924:	c8 0f       	add	r28, r24
    1926:	d9 1f       	adc	r29, r25
    1928:	88 ad       	ldd	r24, Y+56	; 0x38
    192a:	80 ff       	sbrs	r24, 0
    192c:	21 e0       	ldi	r18, 0x01	; 1
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1932:	82 2f       	mov	r24, r18
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <Timebase_DownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    193a:	1f 93       	push	r17
    193c:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    193e:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Timebase_DownCounter_Period_Value_Expired>
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	11 f0       	breq	.+4      	; 0x194a <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <Timebase_DownCounter_Period_Value_Expired_Event+0x38>
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    194a:	e0 91 f8 01 	lds	r30, 0x01F8
    194e:	f0 91 f9 01 	lds	r31, 0x01F9
    1952:	21 2f       	mov	r18, r17
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	c9 01       	movw	r24, r18
    1958:	b4 e0       	ldi	r27, 0x04	; 4
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	ba 95       	dec	r27
    1960:	e1 f7       	brne	.-8      	; 0x195a <Timebase_DownCounter_Period_Value_Expired_Event+0x20>
    1962:	82 0f       	add	r24, r18
    1964:	93 1f       	adc	r25, r19
    1966:	e8 0f       	add	r30, r24
    1968:	f9 1f       	adc	r31, r25
    196a:	80 ad       	ldd	r24, Z+56	; 0x38
    196c:	8e 7f       	andi	r24, 0xFE	; 254
    196e:	80 af       	std	Z+56, r24	; 0x38
    1970:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1972:	1f 91       	pop	r17
    1974:	08 95       	ret

00001976 <Timebase_DownCounter_Oneshot_Expired_Event>:


uint8_t Timebase_DownCounter_Oneshot_Expired_Event(uint8_t window){
  return Timebase_DownCounter_Expired_Event(window);
    1976:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <Timebase_DownCounter_Expired_Event>
}
    197a:	08 95       	ret

0000197c <Timebase_DownCounter_Continuous_Expired_Event>:


uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
    197c:	1f 93       	push	r17
    197e:	18 2f       	mov	r17, r24

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1980:	a0 91 f8 01 	lds	r26, 0x01F8
    1984:	b0 91 f9 01 	lds	r27, 0x01F9
    1988:	90 e0       	ldi	r25, 0x00	; 0
  return Timebase_DownCounter_Expired_Event(window);
}


uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    198a:	9c 01       	movw	r18, r24
    198c:	44 e0       	ldi	r20, 0x04	; 4
    198e:	22 0f       	add	r18, r18
    1990:	33 1f       	adc	r19, r19
    1992:	4a 95       	dec	r20
    1994:	e1 f7       	brne	.-8      	; 0x198e <Timebase_DownCounter_Continuous_Expired_Event+0x12>
    1996:	28 0f       	add	r18, r24
    1998:	39 1f       	adc	r19, r25
    199a:	a2 0f       	add	r26, r18
    199c:	b3 1f       	adc	r27, r19
    199e:	d8 96       	adiw	r26, 0x38	; 56
    19a0:	8c 91       	ld	r24, X
    19a2:	d8 97       	sbiw	r26, 0x38	; 56
    19a4:	86 95       	lsr	r24
    19a6:	8f 70       	andi	r24, 0x0F	; 15
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <Timebase_DownCounter_Continuous_Expired_Event+0x34>
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	22 c0       	rjmp	.+68     	; 0x19f4 <Timebase_DownCounter_Continuous_Expired_Event+0x78>
void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
}

int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
    19b0:	fd 01       	movw	r30, r26
    19b2:	eb 5b       	subi	r30, 0xBB	; 187
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	40 81       	ld	r20, Z
    19b8:	51 81       	ldd	r21, Z+1	; 0x01
    19ba:	62 81       	ldd	r22, Z+2	; 0x02
    19bc:	73 81       	ldd	r23, Z+3	; 0x03
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    19be:	d9 96       	adiw	r26, 0x39	; 57
    19c0:	1d 92       	st	X+, r1
    19c2:	1d 92       	st	X+, r1
    19c4:	1d 92       	st	X+, r1
    19c6:	1c 92       	st	X, r1
    19c8:	dc 97       	sbiw	r26, 0x3c	; 60
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    19ca:	dd 96       	adiw	r26, 0x3d	; 61
    19cc:	1d 92       	st	X+, r1
    19ce:	1d 92       	st	X+, r1
    19d0:	1d 92       	st	X+, r1
    19d2:	1c 92       	st	X, r1
    19d4:	13 97       	sbiw	r26, 0x03	; 3
    19d6:	dd 97       	sbiw	r26, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    19d8:	d8 96       	adiw	r26, 0x38	; 56
    19da:	8c 91       	ld	r24, X
    19dc:	d8 97       	sbiw	r26, 0x38	; 56
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    19de:	80 7e       	andi	r24, 0xE0	; 224
    19e0:	d8 96       	adiw	r26, 0x38	; 56
    19e2:	8c 93       	st	X, r24
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    19e4:	10 82       	st	Z, r1
    19e6:	11 82       	std	Z+1, r1	; 0x01
    19e8:	12 82       	std	Z+2, r1	; 0x02
    19ea:	13 82       	std	Z+3, r1	; 0x03

uint8_t Timebase_DownCounter_Continuous_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    int32_t temp = Timebase_DownCounter_Get_ReloadValue(window);
    Timebase_DownCounter_Clear_All_Flags( window );
	Timebase_DownCounter_Set_Securely(window, temp);
    19ec:	81 2f       	mov	r24, r17
    19ee:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <Timebase_DownCounter_Set_Securely>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19f4:	1f 91       	pop	r17
    19f6:	08 95       	ret

000019f8 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Timebase_DownCounter_Update>
  }
}
    19fe:	08 95       	ret

00001a00 <Timebase_DownCounter_Reset_All>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1a00:	e0 91 f8 01 	lds	r30, 0x01F8
    1a04:	f0 91 f9 01 	lds	r31, 0x01F9
    1a08:	11 ae       	std	Z+57, r1	; 0x39
    1a0a:	12 ae       	std	Z+58, r1	; 0x3a
    1a0c:	13 ae       	std	Z+59, r1	; 0x3b
    1a0e:	14 ae       	std	Z+60, r1	; 0x3c
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1a10:	fd 96       	adiw	r30, 0x3d	; 61
    1a12:	10 82       	st	Z, r1
    1a14:	11 82       	std	Z+1, r1	; 0x01
    1a16:	12 82       	std	Z+2, r1	; 0x02
    1a18:	13 82       	std	Z+3, r1	; 0x03
    1a1a:	fd 97       	sbiw	r30, 0x3d	; 61
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1a1c:	80 ad       	ldd	r24, Z+56	; 0x38
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1a1e:	80 7e       	andi	r24, 0xE0	; 224
    1a20:	80 af       	std	Z+56, r24	; 0x38
int32_t Timebase_DownCounter_Get_ReloadValue(uint8_t window){
  return Timebase->DownCounter[window].ReloadValue;
}

void Timebase_DownCounter_Set_ReloadValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].ReloadValue = value;
    1a22:	eb 5b       	subi	r30, 0xBB	; 187
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	10 82       	st	Z, r1
    1a28:	11 82       	std	Z+1, r1	; 0x01
    1a2a:	12 82       	std	Z+2, r1	; 0x02
    1a2c:	13 82       	std	Z+3, r1	; 0x03

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    1a2e:	08 95       	ret

00001a30 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    1a30:	e0 91 f8 01 	lds	r30, 0x01F8
    1a34:	f0 91 f9 01 	lds	r31, 0x01F9
    1a38:	82 a1       	ldd	r24, Z+34	; 0x22
}
    1a3a:	08 95       	ret

00001a3c <Timebase_Reset>:
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    1a3c:	0e 94 24 09 	call	0x1248	; 0x1248 <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    1a40:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <Timebase_DownCounter_Reset_All>
  #endif
}
    1a44:	08 95       	ret

00001a46 <Timebase_LP_Reset>:

void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
  #endif
}
    1a46:	08 95       	ret

00001a48 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1a4e:	0e 94 b0 00 	call	0x160	; 0x160 <Timebase_Struct_Init>
  Timebase_Timer_Enable(UpdateRateHz);
    1a52:	c8 01       	movw	r24, r16
    1a54:	0e 94 4b 01 	call	0x296	; 0x296 <Timebase_Timer_Enable>
  Timebase_Reset();
    1a58:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <Timebase_Reset>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Enable(1);
  Timebase_LP_Reset();
  #endif
  
}
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <Timebase_Main_Loop_Executables>:
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    1a62:	e0 91 f8 01 	lds	r30, 0x01F8
    1a66:	f0 91 f9 01 	lds	r31, 0x01F9
    1a6a:	82 a1       	ldd	r24, Z+34	; 0x22
    1a6c:	83 ff       	sbrs	r24, 3
    1a6e:	0b c0       	rjmp	.+22     	; 0x1a86 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1a70:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    1a74:	0e 94 20 09 	call	0x1240	; 0x1240 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    1a78:	e0 91 f8 01 	lds	r30, 0x01F8
    1a7c:	f0 91 f9 01 	lds	r31, 0x01F9
    1a80:	82 a1       	ldd	r24, Z+34	; 0x22
    1a82:	87 7f       	andi	r24, 0xF7	; 247
    1a84:	82 a3       	std	Z+34, r24	; 0x22
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    1a86:	e0 91 f8 01 	lds	r30, 0x01F8
    1a8a:	f0 91 f9 01 	lds	r31, 0x01F9
    1a8e:	82 a1       	ldd	r24, Z+34	; 0x22
    1a90:	81 ff       	sbrs	r24, 1
    1a92:	0b c0       	rjmp	.+22     	; 0x1aaa <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    1a94:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    1a98:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    1a9c:	e0 91 f8 01 	lds	r30, 0x01F8
    1aa0:	f0 91 f9 01 	lds	r31, 0x01F9
    1aa4:	82 a1       	ldd	r24, Z+34	; 0x22
    1aa6:	8d 7f       	andi	r24, 0xFD	; 253
    1aa8:	82 a3       	std	Z+34, r24	; 0x22
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    1aaa:	e0 91 f8 01 	lds	r30, 0x01F8
    1aae:	f0 91 f9 01 	lds	r31, 0x01F9
    1ab2:	10 8e       	std	Z+24, r1	; 0x18
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    Timebase_LPDownCounter_Update_All();
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
  }
  #endif
}
    1ab4:	08 95       	ret

00001ab6 <Timebase_ISR_Executables>:


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    1ab6:	e0 91 f8 01 	lds	r30, 0x01F8
    1aba:	f0 91 f9 01 	lds	r31, 0x01F9
    1abe:	86 85       	ldd	r24, Z+14	; 0x0e
    1ac0:	97 85       	ldd	r25, Z+15	; 0x0f
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	97 87       	std	Z+15, r25	; 0x0f
    1ac6:	86 87       	std	Z+14, r24	; 0x0e
  Timebase->Time.SubSecondsUpTime++;
    1ac8:	80 89       	ldd	r24, Z+16	; 0x10
    1aca:	91 89       	ldd	r25, Z+17	; 0x11
    1acc:	a2 89       	ldd	r26, Z+18	; 0x12
    1ace:	b3 89       	ldd	r27, Z+19	; 0x13
    1ad0:	01 96       	adiw	r24, 0x01	; 1
    1ad2:	a1 1d       	adc	r26, r1
    1ad4:	b1 1d       	adc	r27, r1
    1ad6:	80 8b       	std	Z+16, r24	; 0x10
    1ad8:	91 8b       	std	Z+17, r25	; 0x11
    1ada:	a2 8b       	std	Z+18, r26	; 0x12
    1adc:	b3 8b       	std	Z+19, r27	; 0x13
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    1ade:	82 a1       	ldd	r24, Z+34	; 0x22
    1ae0:	88 60       	ori	r24, 0x08	; 8
    1ae2:	82 a3       	std	Z+34, r24	; 0x22
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    1ae4:	26 85       	ldd	r18, Z+14	; 0x0e
    1ae6:	37 85       	ldd	r19, Z+15	; 0x0f
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	80 f0       	brcs	.+32     	; 0x1b12 <Timebase_ISR_Executables+0x5c>
    Timebase->Time.SubSecondsShadow = 0;
    1af2:	17 86       	std	Z+15, r1	; 0x0f
    1af4:	16 86       	std	Z+14, r1	; 0x0e
    Timebase->Time.SecondsShadow++;
    1af6:	84 89       	ldd	r24, Z+20	; 0x14
    1af8:	95 89       	ldd	r25, Z+21	; 0x15
    1afa:	a6 89       	ldd	r26, Z+22	; 0x16
    1afc:	b7 89       	ldd	r27, Z+23	; 0x17
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	a1 1d       	adc	r26, r1
    1b02:	b1 1d       	adc	r27, r1
    1b04:	84 8b       	std	Z+20, r24	; 0x14
    1b06:	95 8b       	std	Z+21, r25	; 0x15
    1b08:	a6 8b       	std	Z+22, r26	; 0x16
    1b0a:	b7 8b       	std	Z+23, r27	; 0x17
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    1b0c:	82 a1       	ldd	r24, Z+34	; 0x22
    1b0e:	82 60       	ori	r24, 0x02	; 2
    1b10:	82 a3       	std	Z+34, r24	; 0x22
    1b12:	08 95       	ret

00001b14 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    1b14:	1f 92       	push	r1
    1b16:	0f 92       	push	r0
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	0f 92       	push	r0
    1b1c:	11 24       	eor	r1, r1
    1b1e:	2f 93       	push	r18
    1b20:	3f 93       	push	r19
    1b22:	4f 93       	push	r20
    1b24:	5f 93       	push	r21
    1b26:	6f 93       	push	r22
    1b28:	7f 93       	push	r23
    1b2a:	8f 93       	push	r24
    1b2c:	9f 93       	push	r25
    1b2e:	af 93       	push	r26
    1b30:	bf 93       	push	r27
    1b32:	ef 93       	push	r30
    1b34:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1b36:	e0 91 f8 01 	lds	r30, 0x01F8
    1b3a:	f0 91 f9 01 	lds	r31, 0x01F9
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    1b44:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Timebase_ISR_Executables>
}
    1b48:	ff 91       	pop	r31
    1b4a:	ef 91       	pop	r30
    1b4c:	bf 91       	pop	r27
    1b4e:	af 91       	pop	r26
    1b50:	9f 91       	pop	r25
    1b52:	8f 91       	pop	r24
    1b54:	7f 91       	pop	r23
    1b56:	6f 91       	pop	r22
    1b58:	5f 91       	pop	r21
    1b5a:	4f 91       	pop	r20
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <Timebase_LP_ISR_Executables>:
    Timebase->Time.LPTimerSubSeconds = 0;
    Timebase->Time.LPTimerSeconds++;
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
  #endif
}
    1b6a:	08 95       	ret

00001b6c <UART_Struct_Init>:


/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
    1b6c:	10 92 a0 01 	sts	0x01A0, r1
    1b70:	e1 ea       	ldi	r30, 0xA1	; 161
    1b72:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i = 0; i < 8; i++){
    UART.Digits[i] = UART_NULL;
    1b74:	11 92       	st	Z+, r1

/*******************UART Structure Functions Start****************/

void UART_Struct_Init(void){
  UART.Error = 0;
  for(uint8_t i = 0; i < 8; i++){
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	e9 3a       	cpi	r30, 0xA9	; 169
    1b7a:	f8 07       	cpc	r31, r24
    1b7c:	d9 f7       	brne	.-10     	; 0x1b74 <UART_Struct_Init+0x8>
    UART.Digits[i] = UART_NULL;
  }
  UART.InputNumDigits = UART_NULL;
    1b7e:	10 82       	st	Z, r1
    
  UART.LastRxByte = UART_NULL;
    1b80:	11 82       	std	Z+1, r1	; 0x01
  UART.BufSize = UART_BUFFER_SIZE;
    1b82:	80 e4       	ldi	r24, 0x40	; 64
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	90 93 ec 01 	sts	0x01EC, r25
    1b8a:	80 93 eb 01 	sts	0x01EB, r24
  UART.BufIndex = 0;
    1b8e:	10 92 ee 01 	sts	0x01EE, r1
    1b92:	10 92 ed 01 	sts	0x01ED, r1
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <UART_Struct_Init+0x36>
  for(uint8_t i = 0; i < UART.BufSize; i++){
    UART.Buf[i] = UART_NULL;
    1b9a:	e0 56       	subi	r30, 0x60	; 96
    1b9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b9e:	13 86       	std	Z+11, r1	; 0x0b
  UART.InputNumDigits = UART_NULL;
    
  UART.LastRxByte = UART_NULL;
  UART.BufSize = UART_BUFFER_SIZE;
  UART.BufIndex = 0;
  for(uint8_t i = 0; i < UART.BufSize; i++){
    1ba0:	2f 5f       	subi	r18, 0xFF	; 255
    1ba2:	80 91 eb 01 	lds	r24, 0x01EB
    1ba6:	90 91 ec 01 	lds	r25, 0x01EC
    1baa:	e2 2f       	mov	r30, r18
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	e8 17       	cp	r30, r24
    1bb0:	f9 07       	cpc	r31, r25
    1bb2:	98 f3       	brcs	.-26     	; 0x1b9a <UART_Struct_Init+0x2e>
    UART.Buf[i] = UART_NULL;
  }
}
    1bb4:	08 95       	ret

00001bb6 <UART_RX_Packet_Struct_Init>:

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    1bb6:	10 92 f2 01 	sts	0x01F2, r1
    1bba:	10 92 f1 01 	sts	0x01F1, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    1bbe:	10 92 f4 01 	sts	0x01F4, r1
    1bc2:	10 92 f3 01 	sts	0x01F3, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    1bc6:	10 92 f5 01 	sts	0x01F5, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    1bca:	10 92 f6 01 	sts	0x01F6, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	80 93 f7 01 	sts	0x01F7, r24
}
    1bd4:	08 95       	ret

00001bd6 <UART_Config_GPIO>:

/*********************UART Init Functions Start******************/

void UART_Config_GPIO(void){
  //add gpio config
}
    1bd6:	08 95       	ret

00001bd8 <UART_Config_Clock>:

void UART_Config_Clock(void){
  //add clock config
}
    1bd8:	08 95       	ret

00001bda <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    1bda:	9b 01       	movw	r18, r22
    1bdc:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    1bde:	60 e6       	ldi	r22, 0x60	; 96
    1be0:	73 ee       	ldi	r23, 0xE3	; 227
    1be2:	86 e1       	ldi	r24, 0x16	; 22
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 65 16 	call	0x2cca	; 0x2cca <__udivmodsi4>
    1bea:	21 50       	subi	r18, 0x01	; 1
    1bec:	30 40       	sbci	r19, 0x00	; 0
    1bee:	40 40       	sbci	r20, 0x00	; 0
    1bf0:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A |= (1<<U2X0);  
    1bf2:	e0 ec       	ldi	r30, 0xC0	; 192
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	82 60       	ori	r24, 0x02	; 2
    1bfa:	80 83       	st	Z, r24
  #else
  UCSR0A &=~ (1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    1bfc:	bb 27       	eor	r27, r27
    1bfe:	a5 2f       	mov	r26, r21
    1c00:	94 2f       	mov	r25, r20
    1c02:	83 2f       	mov	r24, r19
    1c04:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    1c08:	20 93 c4 00 	sts	0x00C4, r18
}
    1c0c:	08 95       	ret

00001c0e <UART_Config_Tx>:


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    1c0e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	88 60       	ori	r24, 0x08	; 8
    1c16:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c18:	86 e0       	ldi	r24, 0x06	; 6
    1c1a:	80 93 c2 00 	sts	0x00C2, r24
}
    1c1e:	08 95       	ret

00001c20 <UART_Config_Rx>:


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    1c20:	e1 ec       	ldi	r30, 0xC1	; 193
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 61       	ori	r24, 0x10	; 16
    1c28:	80 83       	st	Z, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    1c2a:	86 e0       	ldi	r24, 0x06	; 6
    1c2c:	80 93 c2 00 	sts	0x00C2, r24
}
    1c30:	08 95       	ret

00001c32 <UART_Config_Rx_Interrupt>:

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    1c32:	e1 ec       	ldi	r30, 0xC1	; 193
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	80 68       	ori	r24, 0x80	; 128
    1c3a:	80 83       	st	Z, r24
  sei();
    1c3c:	78 94       	sei
}
    1c3e:	08 95       	ret

00001c40 <UART_Tx_Byte>:

void UART_Tx_Byte(uint8_t val){
    1c40:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    1c42:	80 91 c0 00 	lds	r24, 0x00C0
    1c46:	85 ff       	sbrs	r24, 5
    1c48:	fc cf       	rjmp	.-8      	; 0x1c42 <UART_Tx_Byte+0x2>
  UDR0 = val;
    1c4a:	90 93 c6 00 	sts	0x00C6, r25
}
    1c4e:	08 95       	ret

00001c50 <UART_Rx_Byte>:

uint8_t UART_Rx_Byte(void){
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	0f 92       	push	r0
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val = 0;
    1c5a:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    1c5c:	80 91 c0 00 	lds	r24, 0x00C0
    1c60:	84 ff       	sbrs	r24, 4
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <UART_Rx_Byte+0x1e>
    val = UDR0;
    1c64:	80 91 c6 00 	lds	r24, 0x00C6
    1c68:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_FRAMING;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	08 c0       	rjmp	.+16     	; 0x1c7e <UART_Rx_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    1c6e:	80 91 c0 00 	lds	r24, 0x00C0
    1c72:	83 ff       	sbrs	r24, 3
    1c74:	07 c0       	rjmp	.+14     	; 0x1c84 <UART_Rx_Byte+0x34>
    val = UDR0;
    1c76:	80 91 c6 00 	lds	r24, 0x00C6
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_OVERRUN;
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	80 93 a0 01 	sts	0x01A0, r24
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <UART_Rx_Byte+0x3e>
  }else{
    val = UDR0;
    1c84:	80 91 c6 00 	lds	r24, 0x00C6
    1c88:	89 83       	std	Y+1, r24	; 0x01
    UART.Error = UART_RX_ERR_NO_ERR;
    1c8a:	10 92 a0 01 	sts	0x01A0, r1
  }
  return val;
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c90:	0f 90       	pop	r0
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <UART_Timer_Struct_Init>:


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    1c98:	10 92 ef 01 	sts	0x01EF, r1
  UART.Timer.ResetVal = UART_NULL;
    1c9c:	10 92 f0 01 	sts	0x01F0, r1
}
    1ca0:	08 95       	ret

00001ca2 <UART_Timer_Init>:
  uint32_t temp0 = F_CPU;
  uint32_t temp1 = UART_RX_PCKT_CMPLT_DELAY;
  temp1 *= 1000;
  temp0 /= 1024;             //Prescaler
  temp1 /= temp0;                    
  UART.Timer.ResetVal = temp1;
    1ca2:	84 e0       	ldi	r24, 0x04	; 4
    1ca4:	80 93 f0 01 	sts	0x01F0, r24
  UART.Timer.ResetVal = 0xFF - temp1;
    1ca8:	8b ef       	ldi	r24, 0xFB	; 251
    1caa:	80 93 f0 01 	sts	0x01F0, r24
  
  ASSR   = 0x00;
    1cae:	10 92 b6 00 	sts	0x00B6, r1
  TCCR2A = 0x00;
    1cb2:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0x00;
    1cb6:	10 92 b1 00 	sts	0x00B1, r1
  TIMSK2 = 0x00;
    1cba:	e0 e7       	ldi	r30, 0x70	; 112
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	10 82       	st	Z, r1
  TCNT2  = 0x00;
    1cc0:	10 92 b2 00 	sts	0x00B2, r1
  TIFR2  = 0xFF;
    1cc4:	8f ef       	ldi	r24, 0xFF	; 255
    1cc6:	87 bb       	out	0x17, r24	; 23
  TIMSK2 = (1<<TOIE2);
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	80 83       	st	Z, r24
  sei();
    1ccc:	78 94       	sei
  #if UART_RX_PCKT_CMPLT_DELAY<20U
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}
    1cce:	08 95       	ret

00001cd0 <UART_Timer_Enable>:

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    1cd0:	87 e0       	ldi	r24, 0x07	; 7
    1cd2:	80 93 b1 00 	sts	0x00B1, r24
}
    1cd6:	08 95       	ret

00001cd8 <UART_Timer_Disable>:

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    1cd8:	10 92 b1 00 	sts	0x00B1, r1
}
    1cdc:	08 95       	ret

00001cde <UART_Timer_Get_Status>:

uint8_t UART_Timer_Get_Status(void){
  return UART.Timer.Enabled;
    1cde:	80 91 ef 01 	lds	r24, 0x01EF
}
    1ce2:	08 95       	ret

00001ce4 <UART_Timer_Get_Val>:

uint16_t UART_Timer_Get_Val(void){
  return TCNT2;
    1ce4:	80 91 b2 00 	lds	r24, 0x00B2
}
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	08 95       	ret

00001cec <UART_Timer_Value_Reset>:


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    1cec:	80 91 f0 01 	lds	r24, 0x01F0
    1cf0:	80 93 b2 00 	sts	0x00B2, r24
}
    1cf4:	08 95       	ret

00001cf6 <UART_Tx_Buf>:



/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
  for(uint16_t i = 0; i < len; i++){
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	0c c0       	rjmp	.+24     	; 0x1d18 <UART_Tx_Buf+0x22>
	UART_Tx_Byte( data[i] );
    1d00:	fa 01       	movw	r30, r20
    1d02:	e2 0f       	add	r30, r18
    1d04:	f3 1f       	adc	r31, r19
    1d06:	e0 81       	ld	r30, Z
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d08:	80 91 c0 00 	lds	r24, 0x00C0
    1d0c:	85 ff       	sbrs	r24, 5
    1d0e:	fc cf       	rjmp	.-8      	; 0x1d08 <UART_Tx_Buf+0x12>
  UDR0 = val;
    1d10:	e0 93 c6 00 	sts	0x00C6, r30


/********************Buffer Tx Functions Start*******************/

void UART_Tx_Buf(uint8_t *data, uint8_t len){
  for(uint16_t i = 0; i < len; i++){
    1d14:	2f 5f       	subi	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	26 17       	cp	r18, r22
    1d1a:	37 07       	cpc	r19, r23
    1d1c:	88 f3       	brcs	.-30     	; 0x1d00 <UART_Tx_Buf+0xa>
	UART_Tx_Byte( data[i] );
  }
}
    1d1e:	08 95       	ret

00001d20 <UART_Tx_NL>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d20:	80 91 c0 00 	lds	r24, 0x00C0
    1d24:	85 ff       	sbrs	r24, 5
    1d26:	fc cf       	rjmp	.-8      	; 0x1d20 <UART_Tx_NL>
  UDR0 = val;
    1d28:	8d e0       	ldi	r24, 0x0D	; 13
    1d2a:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d2e:	80 91 c0 00 	lds	r24, 0x00C0
    1d32:	85 ff       	sbrs	r24, 5
    1d34:	fc cf       	rjmp	.-8      	; 0x1d2e <UART_Tx_NL+0xe>
  UDR0 = val;
    1d36:	8a e0       	ldi	r24, 0x0A	; 10
    1d38:	80 93 c6 00 	sts	0x00C6, r24
/*******************End Char Functions Start******************/

void UART_Tx_NL(void){
  UART_Tx_Byte('\r');
  UART_Tx_Byte('\n');
}
    1d3c:	08 95       	ret

00001d3e <UART_Tx_SP>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d3e:	80 91 c0 00 	lds	r24, 0x00C0
    1d42:	85 ff       	sbrs	r24, 5
    1d44:	fc cf       	rjmp	.-8      	; 0x1d3e <UART_Tx_SP>
  UDR0 = val;
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte('\n');
}

void UART_Tx_SP(void){
  UART_Tx_Byte(' ');
}
    1d4c:	08 95       	ret

00001d4e <UART_Tx_CM>:
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d4e:	80 91 c0 00 	lds	r24, 0x00C0
    1d52:	85 ff       	sbrs	r24, 5
    1d54:	fc cf       	rjmp	.-8      	; 0x1d4e <UART_Tx_CM>
  UDR0 = val;
    1d56:	8c e2       	ldi	r24, 0x2C	; 44
    1d58:	80 93 c6 00 	sts	0x00C6, r24
  UART_Tx_Byte(' ');
}

void UART_Tx_CM(void){
  UART_Tx_Byte(',');
}
    1d5c:	08 95       	ret

00001d5e <UART_Tx_Text>:



/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
    1d5e:	ac 01       	movw	r20, r24
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	07 c0       	rjmp	.+14     	; 0x1d72 <UART_Tx_Text+0x14>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d64:	80 91 c0 00 	lds	r24, 0x00C0
    1d68:	85 ff       	sbrs	r24, 5
    1d6a:	fc cf       	rjmp	.-8      	; 0x1d64 <UART_Tx_Text+0x6>
  UDR0 = val;
    1d6c:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    UART_Tx_Byte(str[i]);
    i++;
    1d70:	2f 5f       	subi	r18, 0xFF	; 255

/*********************Text Functions Start*******************/

void UART_Tx_Text(char *str){
  uint8_t i = 0;
  while(str[i] != '\0'){
    1d72:	fa 01       	movw	r30, r20
    1d74:	e2 0f       	add	r30, r18
    1d76:	f1 1d       	adc	r31, r1
    1d78:	e0 81       	ld	r30, Z
    1d7a:	ee 23       	and	r30, r30
    1d7c:	99 f7       	brne	.-26     	; 0x1d64 <UART_Tx_Text+0x6>
    UART_Tx_Byte(str[i]);
    i++;
  }
}
    1d7e:	08 95       	ret

00001d80 <UART_Tx_Text_NL>:

void UART_Tx_Text_NL(char *str){
  UART_Tx_Text(str);
    1d80:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UART_Tx_NL();
    1d84:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <UART_Tx_NL>
}
    1d88:	08 95       	ret

00001d8a <UART_Tx_Text_SP>:

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
    1d8a:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1d8e:	80 91 c0 00 	lds	r24, 0x00C0
    1d92:	85 ff       	sbrs	r24, 5
    1d94:	fc cf       	rjmp	.-8      	; 0x1d8e <UART_Tx_Text_SP+0x4>
  UDR0 = val;
    1d96:	80 e2       	ldi	r24, 0x20	; 32
    1d98:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_SP(char *str){
  UART_Tx_Text(str);
  UART_Tx_SP();
}
    1d9c:	08 95       	ret

00001d9e <UART_Tx_Text_CM>:

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
    1d9e:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1da2:	80 91 c0 00 	lds	r24, 0x00C0
    1da6:	85 ff       	sbrs	r24, 5
    1da8:	fc cf       	rjmp	.-8      	; 0x1da2 <UART_Tx_Text_CM+0x4>
  UDR0 = val;
    1daa:	8c e2       	ldi	r24, 0x2C	; 44
    1dac:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Text_CM(char *str){
  UART_Tx_Text(str);
  UART_Tx_CM();
}
    1db0:	08 95       	ret

00001db2 <UART_Determine_Digit_Numbers>:



/*********************Number Functions Start********************/

void UART_Determine_Digit_Numbers(uint32_t num){
    1db2:	bf 92       	push	r11
    1db4:	cf 92       	push	r12
    1db6:	df 92       	push	r13
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	6b 01       	movw	r12, r22
    1dc2:	7c 01       	movw	r14, r24
  uint8_t i = 0;
  if(num == 0){
    1dc4:	61 15       	cp	r22, r1
    1dc6:	71 05       	cpc	r23, r1
    1dc8:	81 05       	cpc	r24, r1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	31 f4       	brne	.+12     	; 0x1dda <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0] = 0;
    1dce:	10 92 a1 01 	sts	0x01A1, r1
    UART.InputNumDigits = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	80 93 a9 01 	sts	0x01A9, r24
    1dd8:	23 c0       	rjmp	.+70     	; 0x1e20 <UART_Determine_Digit_Numbers+0x6e>
    1dda:	bb 24       	eor	r11, r11
  }else{
    while(num != 0){
      UART.Digits[i] = num%10;
    1ddc:	0b 2d       	mov	r16, r11
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	00 56       	subi	r16, 0x60	; 96
    1de2:	1e 4f       	sbci	r17, 0xFE	; 254
    1de4:	c7 01       	movw	r24, r14
    1de6:	b6 01       	movw	r22, r12
    1de8:	2a e0       	ldi	r18, 0x0A	; 10
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	0e 94 65 16 	call	0x2cca	; 0x2cca <__udivmodsi4>
    1df4:	f8 01       	movw	r30, r16
    1df6:	61 83       	std	Z+1, r22	; 0x01
      num /= 10;
    1df8:	c7 01       	movw	r24, r14
    1dfa:	b6 01       	movw	r22, r12
    1dfc:	2a e0       	ldi	r18, 0x0A	; 10
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	0e 94 65 16 	call	0x2cca	; 0x2cca <__udivmodsi4>
    1e08:	c9 01       	movw	r24, r18
    1e0a:	da 01       	movw	r26, r20
    1e0c:	6c 01       	movw	r12, r24
    1e0e:	7d 01       	movw	r14, r26
      i++;
    1e10:	b3 94       	inc	r11
  uint8_t i = 0;
  if(num == 0){
    UART.Digits[0] = 0;
    UART.InputNumDigits = 1;
  }else{
    while(num != 0){
    1e12:	c1 14       	cp	r12, r1
    1e14:	d1 04       	cpc	r13, r1
    1e16:	e1 04       	cpc	r14, r1
    1e18:	f1 04       	cpc	r15, r1
    1e1a:	01 f7       	brne	.-64     	; 0x1ddc <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i] = num%10;
      num /= 10;
      i++;
    }
	UART.InputNumDigits = i;
    1e1c:	b0 92 a9 01 	sts	0x01A9, r11
  }
}
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	ff 90       	pop	r15
    1e26:	ef 90       	pop	r14
    1e28:	df 90       	pop	r13
    1e2a:	cf 90       	pop	r12
    1e2c:	bf 90       	pop	r11
    1e2e:	08 95       	ret

00001e30 <UART_Tx_Number_Digits>:

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1e30:	e0 91 a9 01 	lds	r30, 0x01A9
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <UART_Tx_Number_Digits+0x24>
    uint8_t temp = i;
    temp -= 1;
    1e36:	2e 2f       	mov	r18, r30
    1e38:	21 50       	subi	r18, 0x01	; 1
    temp  = UART.Digits[temp];
    1e3a:	e2 2f       	mov	r30, r18
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	e0 56       	subi	r30, 0x60	; 96
    1e40:	fe 4f       	sbci	r31, 0xFE	; 254
    1e42:	91 81       	ldd	r25, Z+1	; 0x01
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e44:	80 91 c0 00 	lds	r24, 0x00C0
    1e48:	85 ff       	sbrs	r24, 5
    1e4a:	fc cf       	rjmp	.-8      	; 0x1e44 <UART_Tx_Number_Digits+0x14>
void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    uint8_t temp = i;
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    1e4c:	90 5d       	subi	r25, 0xD0	; 208
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    1e4e:	90 93 c6 00 	sts	0x00C6, r25
    1e52:	e2 2f       	mov	r30, r18
	UART.InputNumDigits = i;
  }
}

void UART_Tx_Number_Digits(void){
  for(uint8_t i = UART.InputNumDigits; i > 0; i--){
    1e54:	ee 23       	and	r30, r30
    1e56:	79 f7       	brne	.-34     	; 0x1e36 <UART_Tx_Number_Digits+0x6>
    temp -= 1;
    temp  = UART.Digits[temp];
    temp += 48;
    UART_Tx_Byte(temp);
  }
}
    1e58:	08 95       	ret

00001e5a <UART_Tx_Number>:

void UART_Tx_Number(int32_t num){
    1e5a:	9b 01       	movw	r18, r22
    1e5c:	ac 01       	movw	r20, r24
  if(num < 0){
    1e5e:	97 ff       	sbrs	r25, 7
    1e60:	0e c0       	rjmp	.+28     	; 0x1e7e <UART_Tx_Number+0x24>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1e62:	80 91 c0 00 	lds	r24, 0x00C0
    1e66:	85 ff       	sbrs	r24, 5
    1e68:	fc cf       	rjmp	.-8      	; 0x1e62 <UART_Tx_Number+0x8>
  UDR0 = val;
    1e6a:	8d e2       	ldi	r24, 0x2D	; 45
    1e6c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number(int32_t num){
  if(num < 0){
    UART_Tx_Byte('-');
	  num = -num;
    1e70:	50 95       	com	r21
    1e72:	40 95       	com	r20
    1e74:	30 95       	com	r19
    1e76:	21 95       	neg	r18
    1e78:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7a:	4f 4f       	sbci	r20, 0xFF	; 255
    1e7c:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  UART_Determine_Digit_Numbers((uint32_t)num);
    1e7e:	ca 01       	movw	r24, r20
    1e80:	b9 01       	movw	r22, r18
    1e82:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <UART_Determine_Digit_Numbers>
  UART_Tx_Number_Digits();
    1e86:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <UART_Tx_Number_Digits>
}
    1e8a:	08 95       	ret

00001e8c <UART_Tx_Number_Hex>:

void UART_Tx_Number_Hex(uint32_t val){
    1e8c:	1f 93       	push	r17
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
    1e92:	ab 01       	movw	r20, r22
    1e94:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index = 0, loop_counter = 0;
  if(val <= 0xFF){
    1e96:	4f 3f       	cpi	r20, 0xFF	; 255
    1e98:	51 05       	cpc	r21, r1
    1e9a:	61 05       	cpc	r22, r1
    1e9c:	71 05       	cpc	r23, r1
    1e9e:	09 f0       	breq	.+2      	; 0x1ea2 <UART_Tx_Number_Hex+0x16>
    1ea0:	28 f4       	brcc	.+10     	; 0x1eac <UART_Tx_Number_Hex+0x20>
    1ea2:	e8 e0       	ldi	r30, 0x08	; 8
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	c2 e0       	ldi	r28, 0x02	; 2
    1ea8:	d0 e0       	ldi	r29, 0x00	; 0
    1eaa:	11 c0       	rjmp	.+34     	; 0x1ece <UART_Tx_Number_Hex+0x42>
    index = 8;
    loop_counter = 2;
  }else if(val <= 0xFFFF){
    1eac:	40 30       	cpi	r20, 0x00	; 0
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	58 07       	cpc	r21, r24
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	68 07       	cpc	r22, r24
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	78 07       	cpc	r23, r24
    1eba:	28 f0       	brcs	.+10     	; 0x1ec6 <UART_Tx_Number_Hex+0x3a>
    1ebc:	e0 e2       	ldi	r30, 0x20	; 32
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	c8 e0       	ldi	r28, 0x08	; 8
    1ec2:	d0 e0       	ldi	r29, 0x00	; 0
    1ec4:	04 c0       	rjmp	.+8      	; 0x1ece <UART_Tx_Number_Hex+0x42>
    1ec6:	e0 e1       	ldi	r30, 0x10	; 16
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	c4 e0       	ldi	r28, 0x04	; 4
    1ecc:	d0 e0       	ldi	r29, 0x00	; 0
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1ece:	80 91 c0 00 	lds	r24, 0x00C0
    1ed2:	85 ff       	sbrs	r24, 5
    1ed4:	fc cf       	rjmp	.-8      	; 0x1ece <UART_Tx_Number_Hex+0x42>
  UDR0 = val;
    1ed6:	80 e3       	ldi	r24, 0x30	; 48
    1ed8:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1edc:	80 91 c0 00 	lds	r24, 0x00C0
    1ee0:	85 ff       	sbrs	r24, 5
    1ee2:	fc cf       	rjmp	.-8      	; 0x1edc <UART_Tx_Number_Hex+0x50>
  UDR0 = val;
    1ee4:	88 e7       	ldi	r24, 0x78	; 120
    1ee6:	80 93 c6 00 	sts	0x00C6, r24
    1eea:	10 e0       	ldi	r17, 0x00	; 0
    1eec:	1f c0       	rjmp	.+62     	; 0x1f2c <UART_Tx_Number_Hex+0xa0>
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
	index -= 4;
    1eee:	34 97       	sbiw	r30, 0x04	; 4
	hex_digit = (uint8_t)((val>>index) & 0x0F);
    1ef0:	db 01       	movw	r26, r22
    1ef2:	ca 01       	movw	r24, r20
    1ef4:	0e 2e       	mov	r0, r30
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <UART_Tx_Number_Hex+0x74>
    1ef8:	b6 95       	lsr	r27
    1efa:	a7 95       	ror	r26
    1efc:	97 95       	ror	r25
    1efe:	87 95       	ror	r24
    1f00:	0a 94       	dec	r0
    1f02:	d2 f7       	brpl	.-12     	; 0x1ef8 <UART_Tx_Number_Hex+0x6c>
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	8f 70       	andi	r24, 0x0F	; 15
    1f08:	90 70       	andi	r25, 0x00	; 0
	if(hex_digit > 9){
    1f0a:	8a 30       	cpi	r24, 0x0A	; 10
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	20 f0       	brcs	.+8      	; 0x1f18 <UART_Tx_Number_Hex+0x8c>
	  hex_digit += 55;
    1f10:	9c 01       	movw	r18, r24
    1f12:	29 5c       	subi	r18, 0xC9	; 201
    1f14:	3f 4f       	sbci	r19, 0xFF	; 255
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <UART_Tx_Number_Hex+0x92>
	}
	else{
	  hex_digit += 48;
    1f18:	9c 01       	movw	r18, r24
    1f1a:	20 5d       	subi	r18, 0xD0	; 208
    1f1c:	3f 4f       	sbci	r19, 0xFF	; 255
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f1e:	80 91 c0 00 	lds	r24, 0x00C0
    1f22:	85 ff       	sbrs	r24, 5
    1f24:	fc cf       	rjmp	.-8      	; 0x1f1e <UART_Tx_Number_Hex+0x92>
  UDR0 = val;
    1f26:	20 93 c6 00 	sts	0x00C6, r18
    index = 32;
    loop_counter = 8;
  }
  UART_Tx_Byte('0');
  UART_Tx_Byte('x');
  for(uint8_t i = 0; i < loop_counter; i++){
    1f2a:	1f 5f       	subi	r17, 0xFF	; 255
    1f2c:	81 2f       	mov	r24, r17
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	8c 17       	cp	r24, r28
    1f32:	9d 07       	cpc	r25, r29
    1f34:	e0 f2       	brcs	.-72     	; 0x1eee <UART_Tx_Number_Hex+0x62>
	else{
	  hex_digit += 48;
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	08 95       	ret

00001f3e <UART_Tx_Number_Bin>:

void UART_Tx_Number_Bin(uint32_t val){
    1f3e:	cf 92       	push	r12
    1f40:	df 92       	push	r13
    1f42:	ef 92       	push	r14
    1f44:	ff 92       	push	r15
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	ab 01       	movw	r20, r22
    1f50:	bc 01       	movw	r22, r24
  uint8_t loop_counter = 0;
  if(val <= 0xFF){
    1f52:	4f 3f       	cpi	r20, 0xFF	; 255
    1f54:	51 05       	cpc	r21, r1
    1f56:	61 05       	cpc	r22, r1
    1f58:	71 05       	cpc	r23, r1
    1f5a:	09 f0       	breq	.+2      	; 0x1f5e <UART_Tx_Number_Bin+0x20>
    1f5c:	10 f4       	brcc	.+4      	; 0x1f62 <UART_Tx_Number_Bin+0x24>
    1f5e:	97 e0       	ldi	r25, 0x07	; 7
    1f60:	0b c0       	rjmp	.+22     	; 0x1f78 <UART_Tx_Number_Bin+0x3a>
    loop_counter = 7;
  }else if(val <= 0xFFFF){
    1f62:	40 30       	cpi	r20, 0x00	; 0
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	58 07       	cpc	r21, r24
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	68 07       	cpc	r22, r24
    1f6c:	80 e0       	ldi	r24, 0x00	; 0
    1f6e:	78 07       	cpc	r23, r24
    1f70:	10 f0       	brcs	.+4      	; 0x1f76 <UART_Tx_Number_Bin+0x38>
    1f72:	9f e1       	ldi	r25, 0x1F	; 31
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <UART_Tx_Number_Bin+0x3a>
    1f76:	9f e0       	ldi	r25, 0x0F	; 15
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f78:	80 91 c0 00 	lds	r24, 0x00C0
    1f7c:	85 ff       	sbrs	r24, 5
    1f7e:	fc cf       	rjmp	.-8      	; 0x1f78 <UART_Tx_Number_Bin+0x3a>
  UDR0 = val;
    1f80:	80 e3       	ldi	r24, 0x30	; 48
    1f82:	80 93 c6 00 	sts	0x00C6, r24
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1f86:	80 91 c0 00 	lds	r24, 0x00C0
    1f8a:	85 ff       	sbrs	r24, 5
    1f8c:	fc cf       	rjmp	.-8      	; 0x1f86 <UART_Tx_Number_Bin+0x48>
  UDR0 = val;
    1f8e:	82 e6       	ldi	r24, 0x62	; 98
    1f90:	80 93 c6 00 	sts	0x00C6, r24
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
	}
	UART_Tx_Byte((uint8_t)hex_digit);
  }
}

void UART_Tx_Number_Bin(uint32_t val){
    1f98:	e9 2f       	mov	r30, r25
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0 = val;
    1f9c:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1f9e:	11 e3       	ldi	r17, 0x31	; 49
    1fa0:	ef 01       	movw	r28, r30
    1fa2:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    1fa4:	cf 01       	movw	r24, r30
    1fa6:	82 1b       	sub	r24, r18
    1fa8:	93 0b       	sbc	r25, r19
    1faa:	6a 01       	movw	r12, r20
    1fac:	7b 01       	movw	r14, r22
    1fae:	04 c0       	rjmp	.+8      	; 0x1fb8 <UART_Tx_Number_Bin+0x7a>
    1fb0:	f6 94       	lsr	r15
    1fb2:	e7 94       	ror	r14
    1fb4:	d7 94       	ror	r13
    1fb6:	c7 94       	ror	r12
    1fb8:	8a 95       	dec	r24
    1fba:	d2 f7       	brpl	.-12     	; 0x1fb0 <UART_Tx_Number_Bin+0x72>
    1fbc:	d7 01       	movw	r26, r14
    1fbe:	c6 01       	movw	r24, r12
    1fc0:	81 70       	andi	r24, 0x01	; 1
    1fc2:	90 70       	andi	r25, 0x00	; 0
    1fc4:	89 2b       	or	r24, r25
    1fc6:	39 f0       	breq	.+14     	; 0x1fd6 <UART_Tx_Number_Bin+0x98>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1fc8:	80 91 c0 00 	lds	r24, 0x00C0
    1fcc:	85 ff       	sbrs	r24, 5
    1fce:	fc cf       	rjmp	.-8      	; 0x1fc8 <UART_Tx_Number_Bin+0x8a>
  UDR0 = val;
    1fd0:	10 93 c6 00 	sts	0x00C6, r17
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <UART_Tx_Number_Bin+0xa4>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    1fd6:	80 91 c0 00 	lds	r24, 0x00C0
    1fda:	85 ff       	sbrs	r24, 5
    1fdc:	fc cf       	rjmp	.-8      	; 0x1fd6 <UART_Tx_Number_Bin+0x98>
  UDR0 = val;
    1fde:	00 93 c6 00 	sts	0x00C6, r16
    1fe2:	2f 5f       	subi	r18, 0xFF	; 255
    1fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter = 31;
  }
  
  UART_Tx_Byte('0');
  UART_Tx_Byte('b');
  for(int i = loop_counter; i >= 0; i--){
    1fe6:	2c 17       	cp	r18, r28
    1fe8:	3d 07       	cpc	r19, r29
    1fea:	e1 f6       	brne	.-72     	; 0x1fa4 <UART_Tx_Number_Bin+0x66>
      UART_Tx_Byte( 49 );   
    }else{
      UART_Tx_Byte( 48 );         
    }
  }
}
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	08 95       	ret

00001ffe <UART_Tx_Number_NL>:


/************Number with End Char Functions Start**************/

void UART_Tx_Number_NL(int32_t num){
  UART_Tx_Number(num);
    1ffe:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <UART_Tx_Number>
  UART_Tx_NL();
    2002:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <UART_Tx_NL>
}
    2006:	08 95       	ret

00002008 <UART_Tx_Number_SP>:

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
    2008:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    200c:	80 91 c0 00 	lds	r24, 0x00C0
    2010:	85 ff       	sbrs	r24, 5
    2012:	fc cf       	rjmp	.-8      	; 0x200c <UART_Tx_Number_SP+0x4>
  UDR0 = val;
    2014:	80 e2       	ldi	r24, 0x20	; 32
    2016:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_SP(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_SP();
}
    201a:	08 95       	ret

0000201c <UART_Tx_Number_CM>:

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
    201c:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <UART_Tx_Number>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2020:	80 91 c0 00 	lds	r24, 0x00C0
    2024:	85 ff       	sbrs	r24, 5
    2026:	fc cf       	rjmp	.-8      	; 0x2020 <UART_Tx_Number_CM+0x4>
  UDR0 = val;
    2028:	8c e2       	ldi	r24, 0x2C	; 44
    202a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_CM(int32_t num){
  UART_Tx_Number(num);
  UART_Tx_CM();
}
    202e:	08 95       	ret

00002030 <UART_Tx_Number_Hex_NL>:


/**********Hex Number with End Char Functions Start************/

void UART_Tx_Number_Hex_NL(int32_t num){
  UART_Tx_Number_Hex(num);
    2030:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <UART_Tx_Number_Hex>
  UART_Tx_NL();
    2034:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <UART_Tx_NL>
}
    2038:	08 95       	ret

0000203a <UART_Tx_Number_Hex_SP>:

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
    203a:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    203e:	80 91 c0 00 	lds	r24, 0x00C0
    2042:	85 ff       	sbrs	r24, 5
    2044:	fc cf       	rjmp	.-8      	; 0x203e <UART_Tx_Number_Hex_SP+0x4>
  UDR0 = val;
    2046:	80 e2       	ldi	r24, 0x20	; 32
    2048:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_SP(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_SP();
}
    204c:	08 95       	ret

0000204e <UART_Tx_Number_Hex_CM>:

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
    204e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <UART_Tx_Number_Hex>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2052:	80 91 c0 00 	lds	r24, 0x00C0
    2056:	85 ff       	sbrs	r24, 5
    2058:	fc cf       	rjmp	.-8      	; 0x2052 <UART_Tx_Number_Hex_CM+0x4>
  UDR0 = val;
    205a:	8c e2       	ldi	r24, 0x2C	; 44
    205c:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Hex_CM(int32_t num){
  UART_Tx_Number_Hex(num);
  UART_Tx_CM();
}
    2060:	08 95       	ret

00002062 <UART_Tx_Number_Bin_NL>:


/**********Bin Number with End Char Functions Start************/

void UART_Tx_Number_Bin_NL(int32_t num){
  UART_Tx_Number_Bin(num);
    2062:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_Tx_Number_Bin>
  UART_Tx_NL();
    2066:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <UART_Tx_NL>
}
    206a:	08 95       	ret

0000206c <UART_Tx_Number_Bin_SP>:

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
    206c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2070:	80 91 c0 00 	lds	r24, 0x00C0
    2074:	85 ff       	sbrs	r24, 5
    2076:	fc cf       	rjmp	.-8      	; 0x2070 <UART_Tx_Number_Bin_SP+0x4>
  UDR0 = val;
    2078:	80 e2       	ldi	r24, 0x20	; 32
    207a:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_SP(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_SP();
}
    207e:	08 95       	ret

00002080 <UART_Tx_Number_Bin_CM>:

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
    2080:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <UART_Tx_Number_Bin>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2084:	80 91 c0 00 	lds	r24, 0x00C0
    2088:	85 ff       	sbrs	r24, 5
    208a:	fc cf       	rjmp	.-8      	; 0x2084 <UART_Tx_Number_Bin_CM+0x4>
  UDR0 = val;
    208c:	8c e2       	ldi	r24, 0x2C	; 44
    208e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Number_Bin_CM(int32_t num){
  UART_Tx_Number_Bin(num);
  UART_Tx_CM();
}
    2092:	08 95       	ret

00002094 <UART_Tx_Parameter_NL>:



/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	7a 01       	movw	r14, r20
    209e:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    20a0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    20a4:	80 91 c0 00 	lds	r24, 0x00C0
    20a8:	85 ff       	sbrs	r24, 5
    20aa:	fc cf       	rjmp	.-8      	; 0x20a4 <UART_Tx_Parameter_NL+0x10>
  UDR0 = val;
    20ac:	80 e2       	ldi	r24, 0x20	; 32
    20ae:	80 93 c6 00 	sts	0x00C6, r24
/************Number with Parameter Functions Start*************/

void UART_Tx_Parameter_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_NL(num);
    20b2:	c8 01       	movw	r24, r16
    20b4:	b7 01       	movw	r22, r14
    20b6:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <UART_Tx_Number_NL>
}
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	08 95       	ret

000020c4 <UART_Tx_Parameter_SP>:

void UART_Tx_Parameter_SP(char *name, int32_t num){
    20c4:	ef 92       	push	r14
    20c6:	ff 92       	push	r15
    20c8:	0f 93       	push	r16
    20ca:	1f 93       	push	r17
    20cc:	7a 01       	movw	r14, r20
    20ce:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    20d0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    20d4:	80 91 c0 00 	lds	r24, 0x00C0
    20d8:	85 ff       	sbrs	r24, 5
    20da:	fc cf       	rjmp	.-8      	; 0x20d4 <UART_Tx_Parameter_SP+0x10>
  UDR0 = val;
    20dc:	80 e2       	ldi	r24, 0x20	; 32
    20de:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_SP(num);
    20e2:	c8 01       	movw	r24, r16
    20e4:	b7 01       	movw	r22, r14
    20e6:	0e 94 04 10 	call	0x2008	; 0x2008 <UART_Tx_Number_SP>
}
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	08 95       	ret

000020f4 <UART_Tx_Parameter_CM>:

void UART_Tx_Parameter_CM(char *name, int32_t num){
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	7a 01       	movw	r14, r20
    20fe:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2100:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2104:	80 91 c0 00 	lds	r24, 0x00C0
    2108:	85 ff       	sbrs	r24, 5
    210a:	fc cf       	rjmp	.-8      	; 0x2104 <UART_Tx_Parameter_CM+0x10>
  UDR0 = val;
    210c:	80 e2       	ldi	r24, 0x20	; 32
    210e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_CM(num);
    2112:	c8 01       	movw	r24, r16
    2114:	b7 01       	movw	r22, r14
    2116:	0e 94 0e 10 	call	0x201c	; 0x201c <UART_Tx_Number_CM>
}
    211a:	1f 91       	pop	r17
    211c:	0f 91       	pop	r16
    211e:	ff 90       	pop	r15
    2120:	ef 90       	pop	r14
    2122:	08 95       	ret

00002124 <UART_Tx_Parameter_Hex_NL>:



/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
    2124:	ef 92       	push	r14
    2126:	ff 92       	push	r15
    2128:	0f 93       	push	r16
    212a:	1f 93       	push	r17
    212c:	7a 01       	movw	r14, r20
    212e:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2130:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2134:	80 91 c0 00 	lds	r24, 0x00C0
    2138:	85 ff       	sbrs	r24, 5
    213a:	fc cf       	rjmp	.-8      	; 0x2134 <UART_Tx_Parameter_Hex_NL+0x10>
  UDR0 = val;
    213c:	80 e2       	ldi	r24, 0x20	; 32
    213e:	80 93 c6 00 	sts	0x00C6, r24
/**********Hex Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Hex_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_NL(num);
    2142:	c8 01       	movw	r24, r16
    2144:	b7 01       	movw	r22, r14
    2146:	0e 94 18 10 	call	0x2030	; 0x2030 <UART_Tx_Number_Hex_NL>
}
    214a:	1f 91       	pop	r17
    214c:	0f 91       	pop	r16
    214e:	ff 90       	pop	r15
    2150:	ef 90       	pop	r14
    2152:	08 95       	ret

00002154 <UART_Tx_Parameter_Hex_SP>:

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	7a 01       	movw	r14, r20
    215e:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2160:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2164:	80 91 c0 00 	lds	r24, 0x00C0
    2168:	85 ff       	sbrs	r24, 5
    216a:	fc cf       	rjmp	.-8      	; 0x2164 <UART_Tx_Parameter_Hex_SP+0x10>
  UDR0 = val;
    216c:	80 e2       	ldi	r24, 0x20	; 32
    216e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_SP(num);
    2172:	c8 01       	movw	r24, r16
    2174:	b7 01       	movw	r22, r14
    2176:	0e 94 1d 10 	call	0x203a	; 0x203a <UART_Tx_Number_Hex_SP>
}
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	08 95       	ret

00002184 <UART_Tx_Parameter_Hex_CM>:

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
    2184:	ef 92       	push	r14
    2186:	ff 92       	push	r15
    2188:	0f 93       	push	r16
    218a:	1f 93       	push	r17
    218c:	7a 01       	movw	r14, r20
    218e:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2190:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2194:	80 91 c0 00 	lds	r24, 0x00C0
    2198:	85 ff       	sbrs	r24, 5
    219a:	fc cf       	rjmp	.-8      	; 0x2194 <UART_Tx_Parameter_Hex_CM+0x10>
  UDR0 = val;
    219c:	80 e2       	ldi	r24, 0x20	; 32
    219e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Hex_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Hex_CM(num);
    21a2:	c8 01       	movw	r24, r16
    21a4:	b7 01       	movw	r22, r14
    21a6:	0e 94 27 10 	call	0x204e	; 0x204e <UART_Tx_Number_Hex_CM>
}
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	08 95       	ret

000021b4 <UART_Tx_Parameter_Bin_NL>:



/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	7a 01       	movw	r14, r20
    21be:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    21c0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    21c4:	80 91 c0 00 	lds	r24, 0x00C0
    21c8:	85 ff       	sbrs	r24, 5
    21ca:	fc cf       	rjmp	.-8      	; 0x21c4 <UART_Tx_Parameter_Bin_NL+0x10>
  UDR0 = val;
    21cc:	80 e2       	ldi	r24, 0x20	; 32
    21ce:	80 93 c6 00 	sts	0x00C6, r24
/**********Bin Number with Parameter Functions Start***********/

void UART_Tx_Parameter_Bin_NL(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_NL(num);
    21d2:	c8 01       	movw	r24, r16
    21d4:	b7 01       	movw	r22, r14
    21d6:	0e 94 31 10 	call	0x2062	; 0x2062 <UART_Tx_Number_Bin_NL>
}
    21da:	1f 91       	pop	r17
    21dc:	0f 91       	pop	r16
    21de:	ff 90       	pop	r15
    21e0:	ef 90       	pop	r14
    21e2:	08 95       	ret

000021e4 <UART_Tx_Parameter_Bin_SP>:

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
    21e4:	ef 92       	push	r14
    21e6:	ff 92       	push	r15
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	7a 01       	movw	r14, r20
    21ee:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    21f0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    21f4:	80 91 c0 00 	lds	r24, 0x00C0
    21f8:	85 ff       	sbrs	r24, 5
    21fa:	fc cf       	rjmp	.-8      	; 0x21f4 <UART_Tx_Parameter_Bin_SP+0x10>
  UDR0 = val;
    21fc:	80 e2       	ldi	r24, 0x20	; 32
    21fe:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_SP(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_SP(num);
    2202:	c8 01       	movw	r24, r16
    2204:	b7 01       	movw	r22, r14
    2206:	0e 94 36 10 	call	0x206c	; 0x206c <UART_Tx_Number_Bin_SP>
}
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	ff 90       	pop	r15
    2210:	ef 90       	pop	r14
    2212:	08 95       	ret

00002214 <UART_Tx_Parameter_Bin_CM>:

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
    2214:	ef 92       	push	r14
    2216:	ff 92       	push	r15
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	7a 01       	movw	r14, r20
    221e:	8b 01       	movw	r16, r22
  UART_Tx_Text(name);
    2220:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <UART_Tx_Text>
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2224:	80 91 c0 00 	lds	r24, 0x00C0
    2228:	85 ff       	sbrs	r24, 5
    222a:	fc cf       	rjmp	.-8      	; 0x2224 <UART_Tx_Parameter_Bin_CM+0x10>
  UDR0 = val;
    222c:	80 e2       	ldi	r24, 0x20	; 32
    222e:	80 93 c6 00 	sts	0x00C6, r24
}

void UART_Tx_Parameter_Bin_CM(char *name, int32_t num){
  UART_Tx_Text(name);
  UART_Tx_SP();
  UART_Tx_Number_Bin_CM(num);
    2232:	c8 01       	movw	r24, r16
    2234:	b7 01       	movw	r22, r14
    2236:	0e 94 40 10 	call	0x2080	; 0x2080 <UART_Tx_Number_Bin_CM>
}
    223a:	1f 91       	pop	r17
    223c:	0f 91       	pop	r16
    223e:	ff 90       	pop	r15
    2240:	ef 90       	pop	r14
    2242:	08 95       	ret

00002244 <UART_Buf_Flush>:



/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    2248:	fc 01       	movw	r30, r24
    224a:	e0 56       	subi	r30, 0x60	; 96
    224c:	fe 4f       	sbci	r31, 0xFE	; 254
    224e:	13 86       	std	Z+11, r1	; 0x0b
    2250:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    2252:	80 34       	cpi	r24, 0x40	; 64
    2254:	91 05       	cpc	r25, r1
    2256:	c1 f7       	brne	.-16     	; 0x2248 <UART_Buf_Flush+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    2258:	10 92 ee 01 	sts	0x01EE, r1
    225c:	10 92 ed 01 	sts	0x01ED, r1
}
    2260:	08 95       	ret

00002262 <UART_Buf_Get>:

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2262:	fc 01       	movw	r30, r24
    2264:	e0 56       	subi	r30, 0x60	; 96
    2266:	fe 4f       	sbci	r31, 0xFE	; 254
    2268:	83 85       	ldd	r24, Z+11	; 0x0b
}
    226a:	08 95       	ret

0000226c <UART_Buf_Get_Index>:

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    226c:	80 91 ed 01 	lds	r24, 0x01ED
    2270:	90 91 ee 01 	lds	r25, 0x01EE
}
    2274:	08 95       	ret

00002276 <UART_Data_Available>:


/*******************UART Data Functions Start****************/

uint8_t UART_Data_Available(void){
  return UART.RxPacket.DataAvailable;
    2276:	80 91 f6 01 	lds	r24, 0x01F6
}
    227a:	08 95       	ret

0000227c <UART_Data_Len_Get>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    227c:	80 91 ed 01 	lds	r24, 0x01ED
    2280:	90 91 ee 01 	lds	r25, 0x01EE
  return UART.RxPacket.DataAvailable;
}

uint8_t UART_Data_Len_Get(void){
  return UART_Buf_Get_Index();
}
    2284:	08 95       	ret

00002286 <UART_Data_Calculated_CRC_Get>:

uint16_t UART_Data_Calculated_CRC_Get(void){
  return UART.RxPacket.CalculatedCRC;
    2286:	20 91 f1 01 	lds	r18, 0x01F1
    228a:	30 91 f2 01 	lds	r19, 0x01F2
}
    228e:	c9 01       	movw	r24, r18
    2290:	08 95       	ret

00002292 <UART_Data_Received_CRC_Get>:

uint16_t UART_Data_Received_CRC_Get(void){
  return UART.RxPacket.ReceivedCRC;
    2292:	20 91 f3 01 	lds	r18, 0x01F3
    2296:	30 91 f4 01 	lds	r19, 0x01F4
}
    229a:	c9 01       	movw	r24, r18
    229c:	08 95       	ret

0000229e <UART_Data_CRC_Status_Get>:

uint8_t UART_Data_CRC_Status_Get(void){
  return UART.RxPacket.CRCStatus;
    229e:	80 91 f5 01 	lds	r24, 0x01F5
}
    22a2:	08 95       	ret

000022a4 <UART_Data_Read_Complete_Status>:

uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
    22a4:	80 91 f7 01 	lds	r24, 0x01F7
}
    22a8:	08 95       	ret

000022aa <UART_Data_Clear_Available_Flag>:

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    22aa:	10 92 f6 01 	sts	0x01F6, r1
}
    22ae:	08 95       	ret

000022b0 <UART_Data_Clear_Read_Complete_Flag>:

void UART_Data_Clear_Read_Complete_Flag(void){
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    22b4:	fc 01       	movw	r30, r24
    22b6:	e0 56       	subi	r30, 0x60	; 96
    22b8:	fe 4f       	sbci	r31, 0xFE	; 254
    22ba:	13 86       	std	Z+11, r1	; 0x0b
    22bc:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    22be:	80 34       	cpi	r24, 0x40	; 64
    22c0:	91 05       	cpc	r25, r1
    22c2:	c1 f7       	brne	.-16     	; 0x22b4 <UART_Data_Clear_Read_Complete_Flag+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    22c4:	10 92 ee 01 	sts	0x01EE, r1
    22c8:	10 92 ed 01 	sts	0x01ED, r1
  UART.RxPacket.DataAvailable = UART_FALSE;
}

void UART_Data_Clear_Read_Complete_Flag(void){
  UART_Buf_Flush();
  UART.RxPacket.DataReadComplete = UART_TRUE;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	80 93 f7 01 	sts	0x01F7, r24
}
    22d2:	08 95       	ret

000022d4 <UART_Data_Copy_Buf>:


void UART_Data_Copy_Buf(uint8_t *buf){
    22d4:	ac 01       	movw	r20, r24
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	0a c0       	rjmp	.+20     	; 0x22f0 <UART_Data_Copy_Buf+0x1c>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    22dc:	f9 01       	movw	r30, r18
    22de:	e0 56       	subi	r30, 0x60	; 96
    22e0:	fe 4f       	sbci	r31, 0xFE	; 254
    22e2:	83 85       	ldd	r24, Z+11	; 0x0b
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
	buf[i] = UART_Buf_Get(i);
    22e4:	fa 01       	movw	r30, r20
    22e6:	e2 0f       	add	r30, r18
    22e8:	f3 1f       	adc	r31, r19
    22ea:	80 83       	st	Z, r24
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    22ec:	2f 5f       	subi	r18, 0xFF	; 255
    22ee:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    22f0:	80 91 ed 01 	lds	r24, 0x01ED
    22f4:	90 91 ee 01 	lds	r25, 0x01EE
  UART.RxPacket.DataReadComplete = UART_TRUE;
}


void UART_Data_Copy_Buf(uint8_t *buf){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	28 17       	cp	r18, r24
    22fc:	39 07       	cpc	r19, r25
    22fe:	70 f3       	brcs	.-36     	; 0x22dc <UART_Data_Copy_Buf+0x8>
	buf[i] = UART_Buf_Get(i);
  }
}
    2300:	08 95       	ret

00002302 <UART_Data_Print_Buf>:


void UART_Data_Print_Buf(void){
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	0c c0       	rjmp	.+24     	; 0x2320 <UART_Data_Print_Buf+0x1e>
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2308:	f9 01       	movw	r30, r18
    230a:	e0 56       	subi	r30, 0x60	; 96
    230c:	fe 4f       	sbci	r31, 0xFE	; 254
    230e:	93 85       	ldd	r25, Z+11	; 0x0b
  UCSR0B |= (1<<RXCIE0);
  sei();
}

void UART_Tx_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2310:	80 91 c0 00 	lds	r24, 0x00C0
    2314:	85 ff       	sbrs	r24, 5
    2316:	fc cf       	rjmp	.-8      	; 0x2310 <UART_Data_Print_Buf+0xe>
  UDR0 = val;
    2318:	90 93 c6 00 	sts	0x00C6, r25
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    231c:	2f 5f       	subi	r18, 0xFF	; 255
    231e:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2320:	80 91 ed 01 	lds	r24, 0x01ED
    2324:	90 91 ee 01 	lds	r25, 0x01EE
  }
}


void UART_Data_Print_Buf(void){
  for(uint16_t i = 0; i < UART_Data_Len_Get(); i++){
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	28 17       	cp	r18, r24
    232c:	39 07       	cpc	r19, r25
    232e:	60 f3       	brcs	.-40     	; 0x2308 <UART_Data_Print_Buf+0x6>
	UART_Tx_Byte( UART_Buf_Get(i) );
  }
  UART_Tx_NL();
    2330:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <UART_Tx_NL>
}
    2334:	08 95       	ret

00002336 <UART_Error_Code_Get>:

\
/******************Error Code Functions Start****************/

uint8_t UART_Error_Code_Get(void){
  return UART.Error;
    2336:	80 91 a0 01 	lds	r24, 0x01A0
}
    233a:	08 95       	ret

0000233c <UART_Error_Code_Clear>:

void UART_Error_Code_Clear(void){
  UART.Error = 0;
    233c:	10 92 a0 01 	sts	0x01A0, r1
}
    2340:	08 95       	ret

00002342 <UART_ISR_Handler>:


/***************UART ISR Handler Functions Start************/

void UART_ISR_Handler(void){
  UART.LastRxByte = (uint8_t)UART_Rx_Byte();
    2342:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <UART_Rx_Byte>
    2346:	80 93 aa 01 	sts	0x01AA, r24
  if(UART.Error == 0x00){
    234a:	80 91 a0 01 	lds	r24, 0x01A0
    234e:	88 23       	and	r24, r24
    2350:	11 f5       	brne	.+68     	; 0x2396 <UART_ISR_Handler+0x54>
    UART.Buf[UART.BufIndex] = UART.LastRxByte;
    2352:	e0 91 ed 01 	lds	r30, 0x01ED
    2356:	f0 91 ee 01 	lds	r31, 0x01EE
    235a:	80 91 aa 01 	lds	r24, 0x01AA
    235e:	e0 56       	subi	r30, 0x60	; 96
    2360:	fe 4f       	sbci	r31, 0xFE	; 254
    2362:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufIndex++;
    2364:	80 91 ed 01 	lds	r24, 0x01ED
    2368:	90 91 ee 01 	lds	r25, 0x01EE
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	90 93 ee 01 	sts	0x01EE, r25
    2372:	80 93 ed 01 	sts	0x01ED, r24
    if(UART.BufIndex >= UART.BufSize){
    2376:	20 91 ed 01 	lds	r18, 0x01ED
    237a:	30 91 ee 01 	lds	r19, 0x01EE
    237e:	80 91 eb 01 	lds	r24, 0x01EB
    2382:	90 91 ec 01 	lds	r25, 0x01EC
    2386:	28 17       	cp	r18, r24
    2388:	39 07       	cpc	r19, r25
    238a:	38 f0       	brcs	.+14     	; 0x239a <UART_ISR_Handler+0x58>
      UART.BufIndex = 0;
    238c:	10 92 ee 01 	sts	0x01EE, r1
    2390:	10 92 ed 01 	sts	0x01ED, r1
    2394:	02 c0       	rjmp	.+4      	; 0x239a <UART_ISR_Handler+0x58>
    }
  }
  else{
    UART.LastRxByte = UART_NULL;
    2396:	10 92 aa 01 	sts	0x01AA, r1
  return TCNT2;
}


void UART_Timer_Value_Reset(void){
  TCNT2 = UART.Timer.ResetVal;
    239a:	80 91 f0 01 	lds	r24, 0x01F0
    239e:	80 93 b2 00 	sts	0x00B2, r24
  else{
    UART.LastRxByte = UART_NULL;
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
    23a2:	80 91 ef 01 	lds	r24, 0x01EF
    23a6:	88 23       	and	r24, r24
    23a8:	31 f4       	brne	.+12     	; 0x23b6 <UART_ISR_Handler+0x74>
    #warning UART_RX_PCKT_CMPLT_DELAY value < 20
  #endif
}

void UART_Timer_Enable(void){
  TCCR2B = 0x07;
    23aa:	87 e0       	ldi	r24, 0x07	; 7
    23ac:	80 93 b1 00 	sts	0x00B1, r24
  }
  
  UART_Timer_Value_Reset();
  if(UART.Timer.Enabled == UART_FALSE){
	UART_Timer_Enable();
	UART.Timer.Enabled = UART_TRUE;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	80 93 ef 01 	sts	0x01EF, r24
    23b6:	08 95       	ret

000023b8 <__vector_18>:
  return val;
}



ISR(USART_RX_vect){
    23b8:	1f 92       	push	r1
    23ba:	0f 92       	push	r0
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	0f 92       	push	r0
    23c0:	11 24       	eor	r1, r1
    23c2:	2f 93       	push	r18
    23c4:	3f 93       	push	r19
    23c6:	4f 93       	push	r20
    23c8:	5f 93       	push	r21
    23ca:	6f 93       	push	r22
    23cc:	7f 93       	push	r23
    23ce:	8f 93       	push	r24
    23d0:	9f 93       	push	r25
    23d2:	af 93       	push	r26
    23d4:	bf 93       	push	r27
    23d6:	ef 93       	push	r30
    23d8:	ff 93       	push	r31
  UART_ISR_Handler();
    23da:	0e 94 a1 11 	call	0x2342	; 0x2342 <UART_ISR_Handler>
  //Clear flag if necessary
}
    23de:	ff 91       	pop	r31
    23e0:	ef 91       	pop	r30
    23e2:	bf 91       	pop	r27
    23e4:	af 91       	pop	r26
    23e6:	9f 91       	pop	r25
    23e8:	8f 91       	pop	r24
    23ea:	7f 91       	pop	r23
    23ec:	6f 91       	pop	r22
    23ee:	5f 91       	pop	r21
    23f0:	4f 91       	pop	r20
    23f2:	3f 91       	pop	r19
    23f4:	2f 91       	pop	r18
    23f6:	0f 90       	pop	r0
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	0f 90       	pop	r0
    23fc:	1f 90       	pop	r1
    23fe:	18 95       	reti

00002400 <UART_CRC_Calculate_Byte>:
#endif

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    2400:	36 2f       	mov	r19, r22
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	28 27       	eor	r18, r24
    2406:	39 27       	eor	r19, r25
    2408:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
	  crc = (crc<<1)^0x1021;
    240a:	61 e2       	ldi	r22, 0x21	; 33
    240c:	70 e1       	ldi	r23, 0x10	; 16
    240e:	c9 01       	movw	r24, r18
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    if(crc & 0x8000){
    2414:	37 ff       	sbrs	r19, 7
    2416:	04 c0       	rjmp	.+8      	; 0x2420 <UART_CRC_Calculate_Byte+0x20>
	  crc = (crc<<1)^0x1021;
    2418:	9c 01       	movw	r18, r24
    241a:	26 27       	eor	r18, r22
    241c:	37 27       	eor	r19, r23
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <UART_CRC_Calculate_Byte+0x22>
	}
    else{
	  crc <<= 1;
    2420:	9c 01       	movw	r18, r24

#ifdef   UART_CRC_XMODEM

uint16_t UART_CRC_Calculate_Byte(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i = 0; i < 8; i++){
    2422:	4f 5f       	subi	r20, 0xFF	; 255
    2424:	48 30       	cpi	r20, 0x08	; 8
    2426:	99 f7       	brne	.-26     	; 0x240e <UART_CRC_Calculate_Byte+0xe>
    else{
	  crc <<= 1;
	}
  }
  return crc;
}
    2428:	c9 01       	movw	r24, r18
    242a:	08 95       	ret

0000242c <UART_CRC_Calculate_Block>:

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	06 2f       	mov	r16, r22
    2436:	ec 01       	movw	r28, r24
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	10 e0       	ldi	r17, 0x00	; 0
    243e:	06 c0       	rjmp	.+12     	; 0x244c <UART_CRC_Calculate_Block+0x20>
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
    2440:	c9 01       	movw	r24, r18
    2442:	69 91       	ld	r22, Y+
    2444:	0e 94 00 12 	call	0x2400	; 0x2400 <UART_CRC_Calculate_Byte>
    2448:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t UART_CRC_Calculate_Block(uint8_t *buf, uint8_t len){
  uint16_t crc = 0;
  for(uint8_t i = 0; i < len; i++){
    244a:	1f 5f       	subi	r17, 0xFF	; 255
    244c:	10 17       	cp	r17, r16
    244e:	c0 f3       	brcs	.-16     	; 0x2440 <UART_CRC_Calculate_Block+0x14>
    crc = UART_CRC_Calculate_Byte(crc,buf[i]);
  }
  return crc;
}
    2450:	c9 01       	movw	r24, r18
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	1f 91       	pop	r17
    2458:	0f 91       	pop	r16
    245a:	08 95       	ret

0000245c <UART_RX_Packet_CRC_Check>:
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    245c:	60 91 ed 01 	lds	r22, 0x01ED
    2460:	70 91 ee 01 	lds	r23, 0x01EE

/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
    2464:	62 50       	subi	r22, 0x02	; 2
    2466:	8b ea       	ldi	r24, 0xAB	; 171
    2468:	91 e0       	ldi	r25, 0x01	; 1
    246a:	0e 94 16 12 	call	0x242c	; 0x242c <UART_CRC_Calculate_Block>
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    246e:	e0 91 ed 01 	lds	r30, 0x01ED
    2472:	f0 91 ee 01 	lds	r31, 0x01EE
/*************UART RX Packet Functions Start***************/

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
    2476:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    2478:	e2 56       	subi	r30, 0x62	; 98
    247a:	fe 4f       	sbci	r31, 0xFE	; 254
    247c:	23 85       	ldd	r18, Z+11	; 0x0b

void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
    247e:	52 2f       	mov	r21, r18
    2480:	40 e0       	ldi	r20, 0x00	; 0
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    2482:	e0 91 ed 01 	lds	r30, 0x01ED
    2486:	f0 91 ee 01 	lds	r31, 0x01EE
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    248a:	f0 e0       	ldi	r31, 0x00	; 0
  }
  UART.BufIndex = 0;
}

uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
    248c:	e1 56       	subi	r30, 0x61	; 97
    248e:	fe 4f       	sbci	r31, 0xFE	; 254
    2490:	23 85       	ldd	r18, Z+11	; 0x0b
void UART_RX_Packet_CRC_Check(void){
  uint16_t crc_calc = 0, crc_recv = 0;
  crc_calc   =  UART_CRC_Calculate_Block((uint8_t*)UART.Buf, UART_Data_Len_Get()-2);
  crc_recv   =  UART_Buf_Get(UART_Data_Len_Get() - 2);
  crc_recv <<= 8;
  crc_recv  |= UART_Buf_Get(UART_Data_Len_Get() - 1);
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	42 2b       	or	r20, r18
    2496:	53 2b       	or	r21, r19
  UART.RxPacket.CalculatedCRC = crc_calc;
    2498:	90 93 f2 01 	sts	0x01F2, r25
    249c:	80 93 f1 01 	sts	0x01F1, r24
  UART.RxPacket.ReceivedCRC = crc_recv;
    24a0:	50 93 f4 01 	sts	0x01F4, r21
    24a4:	40 93 f3 01 	sts	0x01F3, r20
  if(UART.RxPacket.CalculatedCRC == UART.RxPacket.ReceivedCRC){
    24a8:	20 91 f1 01 	lds	r18, 0x01F1
    24ac:	30 91 f2 01 	lds	r19, 0x01F2
    24b0:	80 91 f3 01 	lds	r24, 0x01F3
    24b4:	90 91 f4 01 	lds	r25, 0x01F4
    24b8:	28 17       	cp	r18, r24
    24ba:	39 07       	cpc	r19, r25
    24bc:	21 f4       	brne	.+8      	; 0x24c6 <UART_RX_Packet_CRC_Check+0x6a>
    UART.RxPacket.CRCStatus = UART_TRUE;
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	80 93 f5 01 	sts	0x01F5, r24
    24c4:	08 95       	ret
  }
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
    24c6:	10 92 f5 01 	sts	0x01F5, r1
    24ca:	08 95       	ret

000024cc <UART_Timer_ISR_Handler>:
  }
  
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    24cc:	80 91 ef 01 	lds	r24, 0x01EF
    24d0:	81 30       	cpi	r24, 0x01	; 1
    24d2:	21 f4       	brne	.+8      	; 0x24dc <UART_Timer_ISR_Handler+0x10>
void UART_Timer_Enable(void){
  TCCR2B = 0x07;
}

void UART_Timer_Disable(void){ 
  TCCR2B = 0x00;
    24d4:	10 92 b1 00 	sts	0x00B1, r1
}

void UART_Timer_ISR_Handler(void){
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
    24d8:	10 92 ef 01 	sts	0x01EF, r1
uint8_t UART_Buf_Get(uint16_t index){
  return UART.Buf[index];
}

uint8_t UART_Buf_Get_Index(void){
  return UART.BufIndex;
    24dc:	80 91 ed 01 	lds	r24, 0x01ED
    24e0:	90 91 ee 01 	lds	r25, 0x01EE
  if(UART.Timer.Enabled == UART_TRUE){
    UART_Timer_Disable();
	UART.Timer.Enabled = UART_FALSE;
  }
  
  if(UART_Buf_Get_Index() != UART_NULL){
    24e4:	88 23       	and	r24, r24
    24e6:	71 f0       	breq	.+28     	; 0x2504 <UART_Timer_ISR_Handler+0x38>
    
	if(UART.RxPacket.DataReadComplete == UART_FALSE){
    24e8:	80 91 f7 01 	lds	r24, 0x01F7
    24ec:	88 23       	and	r24, r24
    24ee:	19 f4       	brne	.+6      	; 0x24f6 <UART_Timer_ISR_Handler+0x2a>
	  UART.Error = UART_RX_ERR_READ_INCOMPLETE;
    24f0:	80 e1       	ldi	r24, 0x10	; 16
    24f2:	80 93 a0 01 	sts	0x01A0, r24
	}
    UART_RX_Packet_CRC_Check();
    24f6:	0e 94 2e 12 	call	0x245c	; 0x245c <UART_RX_Packet_CRC_Check>
	else{
	  UART_Buf_Flush();
	  UART.RxPacket.DataAvailable = UART_FALSE;
	}
	#else
	UART.RxPacket.DataAvailable = UART_TRUE;
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	80 93 f6 01 	sts	0x01F6, r24
	#endif
	
	UART.RxPacket.DataReadComplete = UART_FALSE;
    2500:	10 92 f7 01 	sts	0x01F7, r1
    2504:	08 95       	ret

00002506 <__vector_9>:
  TCNT2 = UART.Timer.ResetVal;
}



ISR(TIMER2_OVF_vect){
    2506:	1f 92       	push	r1
    2508:	0f 92       	push	r0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	2f 93       	push	r18
    2512:	3f 93       	push	r19
    2514:	4f 93       	push	r20
    2516:	5f 93       	push	r21
    2518:	6f 93       	push	r22
    251a:	7f 93       	push	r23
    251c:	8f 93       	push	r24
    251e:	9f 93       	push	r25
    2520:	af 93       	push	r26
    2522:	bf 93       	push	r27
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
  UART_Timer_ISR_Handler();
    2528:	0e 94 66 12 	call	0x24cc	; 0x24cc <UART_Timer_ISR_Handler>
  //Clear flag if necessary
}
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	bf 91       	pop	r27
    2532:	af 91       	pop	r26
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	7f 91       	pop	r23
    253a:	6f 91       	pop	r22
    253c:	5f 91       	pop	r21
    253e:	4f 91       	pop	r20
    2540:	3f 91       	pop	r19
    2542:	2f 91       	pop	r18
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <UART_RX_Packet_Read_Complete>:
  else{
    UART.RxPacket.CRCStatus = UART_FALSE;
  }
}

void UART_RX_Packet_Read_Complete(void){
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    2552:	fc 01       	movw	r30, r24
    2554:	e0 56       	subi	r30, 0x60	; 96
    2556:	fe 4f       	sbci	r31, 0xFE	; 254
    2558:	13 86       	std	Z+11, r1	; 0x0b
    255a:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    255c:	80 34       	cpi	r24, 0x40	; 64
    255e:	91 05       	cpc	r25, r1
    2560:	c1 f7       	brne	.-16     	; 0x2552 <UART_RX_Packet_Read_Complete+0x4>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    2562:	10 92 ee 01 	sts	0x01EE, r1
    2566:	10 92 ed 01 	sts	0x01ED, r1
uint8_t UART_Data_Read_Complete_Status(void){
  return UART.RxPacket.DataReadComplete;
}

void UART_Data_Clear_Available_Flag(void){
  UART.RxPacket.DataAvailable = UART_FALSE;
    256a:	10 92 f6 01 	sts	0x01F6, r1
}

void UART_RX_Packet_Read_Complete(void){
  UART_Buf_Flush();
  UART_Data_Clear_Available_Flag();
  UART_Data_Clear_Read_Complete_Flag();
    256e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <UART_Data_Clear_Read_Complete_Flag>
}
    2572:	08 95       	ret

00002574 <UART_Init>:



/*****************UART Init Functions Start****************/

void UART_Init(uint32_t baud){
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	7b 01       	movw	r14, r22
    257e:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    2580:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <UART_Struct_Init>
    UART.Buf[i] = UART_NULL;
  }
}

void UART_RX_Packet_Struct_Init(void){
  UART.RxPacket.CalculatedCRC    = UART_NULL;
    2584:	10 92 f2 01 	sts	0x01F2, r1
    2588:	10 92 f1 01 	sts	0x01F1, r1
  UART.RxPacket.ReceivedCRC      = UART_NULL;
    258c:	10 92 f4 01 	sts	0x01F4, r1
    2590:	10 92 f3 01 	sts	0x01F3, r1
  UART.RxPacket.CRCStatus        = UART_FALSE;
    2594:	10 92 f5 01 	sts	0x01F5, r1
  UART.RxPacket.DataAvailable    = UART_FALSE;
    2598:	10 92 f6 01 	sts	0x01F6, r1
  UART.RxPacket.DataReadComplete = UART_TRUE;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	80 93 f7 01 	sts	0x01F7, r24


/********************UART Timer Functions Start*****************/

void UART_Timer_Struct_Init(void){
  UART.Timer.Enabled = UART_FALSE;
    25a2:	10 92 ef 01 	sts	0x01EF, r1
  UART.Timer.ResetVal = UART_NULL;
    25a6:	10 92 f0 01 	sts	0x01F0, r1
  UART_RX_Packet_Struct_Init();
  UART_Timer_Struct_Init();
  
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    25aa:	c8 01       	movw	r24, r16
    25ac:	b7 01       	movw	r22, r14
    25ae:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Tx(void){
  UCSR0B |= (1<<TXEN0);
    25b2:	80 91 c1 00 	lds	r24, 0x00C1
    25b6:	88 60       	ori	r24, 0x08	; 8
    25b8:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    25bc:	96 e0       	ldi	r25, 0x06	; 6
    25be:	90 93 c2 00 	sts	0x00C2, r25
}


void UART_Config_Rx(void){
  UCSR0B |= (1<<RXEN0);
    25c2:	80 91 c1 00 	lds	r24, 0x00C1
    25c6:	80 61       	ori	r24, 0x10	; 16
    25c8:	80 93 c1 00 	sts	0x00C1, r24
  UCSR0C  = (1<<UCSZ00)| (1<<UCSZ01);
    25cc:	90 93 c2 00 	sts	0x00C2, r25
}

void UART_Config_Rx_Interrupt(void){
  UCSR0B |= (1<<RXCIE0);
    25d0:	80 91 c1 00 	lds	r24, 0x00C1
    25d4:	80 68       	ori	r24, 0x80	; 128
    25d6:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    25da:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
    25dc:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <UART_Timer_Init>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0

/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
	UART.Buf[i] = 0;
    25e4:	fc 01       	movw	r30, r24
    25e6:	e0 56       	subi	r30, 0x60	; 96
    25e8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ea:	13 86       	std	Z+11, r1	; 0x0b
    25ec:	01 96       	adiw	r24, 0x01	; 1


/*******************UART Buffer Functions Start***************/

void UART_Buf_Flush(void){
  for(uint8_t i = 0; i < UART_BUFFER_SIZE; i++){
    25ee:	80 34       	cpi	r24, 0x40	; 64
    25f0:	91 05       	cpc	r25, r1
    25f2:	c1 f7       	brne	.-16     	; 0x25e4 <UART_Init+0x70>
	UART.Buf[i] = 0;
  }
  UART.BufIndex = 0;
    25f4:	10 92 ee 01 	sts	0x01EE, r1
    25f8:	10 92 ed 01 	sts	0x01ED, r1
  UART_Config_Rx_Interrupt();
  #endif
  
  UART_Timer_Init();
  UART_Buf_Flush();
}
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	08 95       	ret

00002606 <PID_Struct_Init>:
};



void PID_Struct_Init(void){
  PID.Input.Kp = 0;
    2606:	10 92 26 01 	sts	0x0126, r1
    260a:	10 92 27 01 	sts	0x0127, r1
    260e:	10 92 28 01 	sts	0x0128, r1
    2612:	10 92 29 01 	sts	0x0129, r1
  PID.Input.Ki = 0;
    2616:	10 92 2a 01 	sts	0x012A, r1
    261a:	10 92 2b 01 	sts	0x012B, r1
    261e:	10 92 2c 01 	sts	0x012C, r1
    2622:	10 92 2d 01 	sts	0x012D, r1
  PID.Input.Kd = 0;
    2626:	10 92 2e 01 	sts	0x012E, r1
    262a:	10 92 2f 01 	sts	0x012F, r1
    262e:	10 92 30 01 	sts	0x0130, r1
    2632:	10 92 31 01 	sts	0x0131, r1
  PID.Input.SetPoint = 0;
    2636:	10 92 32 01 	sts	0x0132, r1
    263a:	10 92 33 01 	sts	0x0133, r1
    263e:	10 92 34 01 	sts	0x0134, r1
    2642:	10 92 35 01 	sts	0x0135, r1
  PID.Input.ProcessValue = 0;
    2646:	10 92 36 01 	sts	0x0136, r1
    264a:	10 92 37 01 	sts	0x0137, r1
    264e:	10 92 38 01 	sts	0x0138, r1
    2652:	10 92 39 01 	sts	0x0139, r1
  PID.Error.PError = 0;
    2656:	10 92 3a 01 	sts	0x013A, r1
    265a:	10 92 3b 01 	sts	0x013B, r1
    265e:	10 92 3c 01 	sts	0x013C, r1
    2662:	10 92 3d 01 	sts	0x013D, r1
  PID.Error.DError = 0;
    2666:	10 92 3e 01 	sts	0x013E, r1
    266a:	10 92 3f 01 	sts	0x013F, r1
    266e:	10 92 40 01 	sts	0x0140, r1
    2672:	10 92 41 01 	sts	0x0141, r1
  PID.Error.IError = 0;
    2676:	10 92 42 01 	sts	0x0142, r1
    267a:	10 92 43 01 	sts	0x0143, r1
    267e:	10 92 44 01 	sts	0x0144, r1
    2682:	10 92 45 01 	sts	0x0145, r1
  PID.Error.IErrorLimit = 0;
    2686:	10 92 46 01 	sts	0x0146, r1
    268a:	10 92 47 01 	sts	0x0147, r1
    268e:	10 92 48 01 	sts	0x0148, r1
    2692:	10 92 49 01 	sts	0x0149, r1
  PID.Error.LastError = 0;
    2696:	10 92 4a 01 	sts	0x014A, r1
    269a:	10 92 4b 01 	sts	0x014B, r1
    269e:	10 92 4c 01 	sts	0x014C, r1
    26a2:	10 92 4d 01 	sts	0x014D, r1
  PID.Products.PError = 0;
    26a6:	10 92 4e 01 	sts	0x014E, r1
    26aa:	10 92 4f 01 	sts	0x014F, r1
    26ae:	10 92 50 01 	sts	0x0150, r1
    26b2:	10 92 51 01 	sts	0x0151, r1
  PID.Products.IError = 0;
    26b6:	10 92 52 01 	sts	0x0152, r1
    26ba:	10 92 53 01 	sts	0x0153, r1
    26be:	10 92 54 01 	sts	0x0154, r1
    26c2:	10 92 55 01 	sts	0x0155, r1
  PID.Products.DError = 0;
    26c6:	10 92 56 01 	sts	0x0156, r1
    26ca:	10 92 57 01 	sts	0x0157, r1
    26ce:	10 92 58 01 	sts	0x0158, r1
    26d2:	10 92 59 01 	sts	0x0159, r1
  PID.Products.ScaleFact = 0;
    26d6:	10 92 5a 01 	sts	0x015A, r1
    26da:	10 92 5b 01 	sts	0x015B, r1
    26de:	10 92 5c 01 	sts	0x015C, r1
    26e2:	10 92 5d 01 	sts	0x015D, r1
  PID.Output = 0;
    26e6:	10 92 5e 01 	sts	0x015E, r1
    26ea:	10 92 5f 01 	sts	0x015F, r1
    26ee:	10 92 60 01 	sts	0x0160, r1
    26f2:	10 92 61 01 	sts	0x0161, r1
  PID.OutputNonNegative = 0;
    26f6:	10 92 62 01 	sts	0x0162, r1
    26fa:	10 92 63 01 	sts	0x0163, r1
    26fe:	10 92 64 01 	sts	0x0164, r1
    2702:	10 92 65 01 	sts	0x0165, r1
}
    2706:	08 95       	ret

00002708 <PID_Set_Kp>:


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2708:	60 93 26 01 	sts	0x0126, r22
    270c:	70 93 27 01 	sts	0x0127, r23
    2710:	80 93 28 01 	sts	0x0128, r24
    2714:	90 93 29 01 	sts	0x0129, r25
}
    2718:	08 95       	ret

0000271a <PID_Set_Ki>:

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    271a:	60 93 2a 01 	sts	0x012A, r22
    271e:	70 93 2b 01 	sts	0x012B, r23
    2722:	80 93 2c 01 	sts	0x012C, r24
    2726:	90 93 2d 01 	sts	0x012D, r25
}
    272a:	08 95       	ret

0000272c <PID_Set_Kd>:

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    272c:	60 93 2e 01 	sts	0x012E, r22
    2730:	70 93 2f 01 	sts	0x012F, r23
    2734:	80 93 30 01 	sts	0x0130, r24
    2738:	90 93 31 01 	sts	0x0131, r25
}
    273c:	08 95       	ret

0000273e <PID_Set_Constants>:

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2746:	60 93 26 01 	sts	0x0126, r22
    274a:	70 93 27 01 	sts	0x0127, r23
    274e:	80 93 28 01 	sts	0x0128, r24
    2752:	90 93 29 01 	sts	0x0129, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2756:	20 93 2a 01 	sts	0x012A, r18
    275a:	30 93 2b 01 	sts	0x012B, r19
    275e:	40 93 2c 01 	sts	0x012C, r20
    2762:	50 93 2d 01 	sts	0x012D, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2766:	e0 92 2e 01 	sts	0x012E, r14
    276a:	f0 92 2f 01 	sts	0x012F, r15
    276e:	00 93 30 01 	sts	0x0130, r16
    2772:	10 93 31 01 	sts	0x0131, r17

void PID_Set_Constants(signed long kp, signed long ki, signed long kd){
  PID_Set_Kp(kp);
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
}
    2776:	1f 91       	pop	r17
    2778:	0f 91       	pop	r16
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	08 95       	ret

00002780 <PID_Set_SetPoint>:

void PID_Set_SetPoint(signed long set_point){
  PID.Input.SetPoint = set_point;
    2780:	60 93 32 01 	sts	0x0132, r22
    2784:	70 93 33 01 	sts	0x0133, r23
    2788:	80 93 34 01 	sts	0x0134, r24
    278c:	90 93 35 01 	sts	0x0135, r25
}
    2790:	08 95       	ret

00002792 <PID_Set_ProcessValue>:

void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
    2792:	60 93 36 01 	sts	0x0136, r22
    2796:	70 93 37 01 	sts	0x0137, r23
    279a:	80 93 38 01 	sts	0x0138, r24
    279e:	90 93 39 01 	sts	0x0139, r25
}
    27a2:	08 95       	ret

000027a4 <PID_Set_Max_IError>:

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    27a4:	60 93 46 01 	sts	0x0146, r22
    27a8:	70 93 47 01 	sts	0x0147, r23
    27ac:	80 93 48 01 	sts	0x0148, r24
    27b0:	90 93 49 01 	sts	0x0149, r25
}
    27b4:	08 95       	ret

000027b6 <PID_Set_Scaling_Factor>:

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    27b6:	60 93 5a 01 	sts	0x015A, r22
    27ba:	70 93 5b 01 	sts	0x015B, r23
    27be:	80 93 5c 01 	sts	0x015C, r24
    27c2:	90 93 5d 01 	sts	0x015D, r25
}
    27c6:	08 95       	ret

000027c8 <PID_Reset_IError>:




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    27c8:	10 92 42 01 	sts	0x0142, r1
    27cc:	10 92 43 01 	sts	0x0143, r1
    27d0:	10 92 44 01 	sts	0x0144, r1
    27d4:	10 92 45 01 	sts	0x0145, r1
}
    27d8:	08 95       	ret

000027da <PID_Calculate_Error>:

void PID_Calculate_Error(void){
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
  PID.Error.PError = PID.Input.SetPoint - PID.Input.ProcessValue;
    27e2:	20 91 32 01 	lds	r18, 0x0132
    27e6:	30 91 33 01 	lds	r19, 0x0133
    27ea:	40 91 34 01 	lds	r20, 0x0134
    27ee:	50 91 35 01 	lds	r21, 0x0135
    27f2:	80 91 36 01 	lds	r24, 0x0136
    27f6:	90 91 37 01 	lds	r25, 0x0137
    27fa:	a0 91 38 01 	lds	r26, 0x0138
    27fe:	b0 91 39 01 	lds	r27, 0x0139
    2802:	28 1b       	sub	r18, r24
    2804:	39 0b       	sbc	r19, r25
    2806:	4a 0b       	sbc	r20, r26
    2808:	5b 0b       	sbc	r21, r27
    280a:	20 93 3a 01 	sts	0x013A, r18
    280e:	30 93 3b 01 	sts	0x013B, r19
    2812:	40 93 3c 01 	sts	0x013C, r20
    2816:	50 93 3d 01 	sts	0x013D, r21
  PID.Error.DError = PID.Error.PError - PID.Error.LastError;
    281a:	80 91 4a 01 	lds	r24, 0x014A
    281e:	90 91 4b 01 	lds	r25, 0x014B
    2822:	a0 91 4c 01 	lds	r26, 0x014C
    2826:	b0 91 4d 01 	lds	r27, 0x014D
    282a:	79 01       	movw	r14, r18
    282c:	8a 01       	movw	r16, r20
    282e:	e8 1a       	sub	r14, r24
    2830:	f9 0a       	sbc	r15, r25
    2832:	0a 0b       	sbc	r16, r26
    2834:	1b 0b       	sbc	r17, r27
    2836:	e0 92 3e 01 	sts	0x013E, r14
    283a:	f0 92 3f 01 	sts	0x013F, r15
    283e:	00 93 40 01 	sts	0x0140, r16
    2842:	10 93 41 01 	sts	0x0141, r17
  PID.Error.LastError = PID.Error.PError;
    2846:	20 93 4a 01 	sts	0x014A, r18
    284a:	30 93 4b 01 	sts	0x014B, r19
    284e:	40 93 4c 01 	sts	0x014C, r20
    2852:	50 93 4d 01 	sts	0x014D, r21
  PID.Error.IError += PID.Error.PError;
    2856:	e0 90 42 01 	lds	r14, 0x0142
    285a:	f0 90 43 01 	lds	r15, 0x0143
    285e:	00 91 44 01 	lds	r16, 0x0144
    2862:	10 91 45 01 	lds	r17, 0x0145
    2866:	e2 0e       	add	r14, r18
    2868:	f3 1e       	adc	r15, r19
    286a:	04 1f       	adc	r16, r20
    286c:	15 1f       	adc	r17, r21
    286e:	e0 92 42 01 	sts	0x0142, r14
    2872:	f0 92 43 01 	sts	0x0143, r15
    2876:	00 93 44 01 	sts	0x0144, r16
    287a:	10 93 45 01 	sts	0x0145, r17
  if     ( PID.Error.IError > PID.Error.IErrorLimit ){
    287e:	80 91 46 01 	lds	r24, 0x0146
    2882:	90 91 47 01 	lds	r25, 0x0147
    2886:	a0 91 48 01 	lds	r26, 0x0148
    288a:	b0 91 49 01 	lds	r27, 0x0149
    288e:	8e 15       	cp	r24, r14
    2890:	9f 05       	cpc	r25, r15
    2892:	a0 07       	cpc	r26, r16
    2894:	b1 07       	cpc	r27, r17
    2896:	4c f4       	brge	.+18     	; 0x28aa <PID_Calculate_Error+0xd0>
    PID.Error.IError = PID.Error.IErrorLimit;
    2898:	80 93 42 01 	sts	0x0142, r24
    289c:	90 93 43 01 	sts	0x0143, r25
    28a0:	a0 93 44 01 	sts	0x0144, r26
    28a4:	b0 93 45 01 	sts	0x0145, r27
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <PID_Calculate_Error+0xf8>
  }
  else if( PID.Error.IError < -PID.Error.IErrorLimit ){
    28aa:	22 27       	eor	r18, r18
    28ac:	33 27       	eor	r19, r19
    28ae:	a9 01       	movw	r20, r18
    28b0:	28 1b       	sub	r18, r24
    28b2:	39 0b       	sbc	r19, r25
    28b4:	4a 0b       	sbc	r20, r26
    28b6:	5b 0b       	sbc	r21, r27
    28b8:	e2 16       	cp	r14, r18
    28ba:	f3 06       	cpc	r15, r19
    28bc:	04 07       	cpc	r16, r20
    28be:	15 07       	cpc	r17, r21
    28c0:	44 f4       	brge	.+16     	; 0x28d2 <PID_Calculate_Error+0xf8>
    PID.Error.IError = -PID.Error.IErrorLimit;
    28c2:	20 93 42 01 	sts	0x0142, r18
    28c6:	30 93 43 01 	sts	0x0143, r19
    28ca:	40 93 44 01 	sts	0x0144, r20
    28ce:	50 93 45 01 	sts	0x0145, r21
  }
}
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	ff 90       	pop	r15
    28d8:	ef 90       	pop	r14
    28da:	08 95       	ret

000028dc <PID_Calculate_Error_Products>:

void PID_Calculate_Error_Products(void){
    28dc:	6f 92       	push	r6
    28de:	7f 92       	push	r7
    28e0:	8f 92       	push	r8
    28e2:	9f 92       	push	r9
    28e4:	af 92       	push	r10
    28e6:	bf 92       	push	r11
    28e8:	cf 92       	push	r12
    28ea:	df 92       	push	r13
    28ec:	ef 92       	push	r14
    28ee:	ff 92       	push	r15
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
  PID.Products.PError = ( PID.Error.PError * PID.Input.Kp );
  PID.Products.IError = ( PID.Error.IError * PID.Input.Ki );
    28f4:	60 91 2a 01 	lds	r22, 0x012A
    28f8:	70 91 2b 01 	lds	r23, 0x012B
    28fc:	80 91 2c 01 	lds	r24, 0x012C
    2900:	90 91 2d 01 	lds	r25, 0x012D
    2904:	20 91 42 01 	lds	r18, 0x0142
    2908:	30 91 43 01 	lds	r19, 0x0143
    290c:	40 91 44 01 	lds	r20, 0x0144
    2910:	50 91 45 01 	lds	r21, 0x0145
    2914:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
    2918:	3b 01       	movw	r6, r22
    291a:	4c 01       	movw	r8, r24
  PID.Products.DError = ( PID.Error.DError * PID.Input.Kd );
    291c:	60 91 2e 01 	lds	r22, 0x012E
    2920:	70 91 2f 01 	lds	r23, 0x012F
    2924:	80 91 30 01 	lds	r24, 0x0130
    2928:	90 91 31 01 	lds	r25, 0x0131
    292c:	20 91 3e 01 	lds	r18, 0x013E
    2930:	30 91 3f 01 	lds	r19, 0x013F
    2934:	40 91 40 01 	lds	r20, 0x0140
    2938:	50 91 41 01 	lds	r21, 0x0141
    293c:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
    2940:	5b 01       	movw	r10, r22
    2942:	6c 01       	movw	r12, r24
  PID.Products.PError/= PID.Products.ScaleFact;
    2944:	e0 90 5a 01 	lds	r14, 0x015A
    2948:	f0 90 5b 01 	lds	r15, 0x015B
    294c:	00 91 5c 01 	lds	r16, 0x015C
    2950:	10 91 5d 01 	lds	r17, 0x015D
    2954:	60 91 26 01 	lds	r22, 0x0126
    2958:	70 91 27 01 	lds	r23, 0x0127
    295c:	80 91 28 01 	lds	r24, 0x0128
    2960:	90 91 29 01 	lds	r25, 0x0129
    2964:	20 91 3a 01 	lds	r18, 0x013A
    2968:	30 91 3b 01 	lds	r19, 0x013B
    296c:	40 91 3c 01 	lds	r20, 0x013C
    2970:	50 91 3d 01 	lds	r21, 0x013D
    2974:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <__mulsi3>
    2978:	a8 01       	movw	r20, r16
    297a:	97 01       	movw	r18, r14
    297c:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
    2980:	20 93 4e 01 	sts	0x014E, r18
    2984:	30 93 4f 01 	sts	0x014F, r19
    2988:	40 93 50 01 	sts	0x0150, r20
    298c:	50 93 51 01 	sts	0x0151, r21
  PID.Products.IError/= PID.Products.ScaleFact;
    2990:	c4 01       	movw	r24, r8
    2992:	b3 01       	movw	r22, r6
    2994:	a8 01       	movw	r20, r16
    2996:	97 01       	movw	r18, r14
    2998:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
    299c:	20 93 52 01 	sts	0x0152, r18
    29a0:	30 93 53 01 	sts	0x0153, r19
    29a4:	40 93 54 01 	sts	0x0154, r20
    29a8:	50 93 55 01 	sts	0x0155, r21
  PID.Products.DError/= PID.Products.ScaleFact;
    29ac:	c6 01       	movw	r24, r12
    29ae:	b5 01       	movw	r22, r10
    29b0:	a8 01       	movw	r20, r16
    29b2:	97 01       	movw	r18, r14
    29b4:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <__divmodsi4>
    29b8:	20 93 56 01 	sts	0x0156, r18
    29bc:	30 93 57 01 	sts	0x0157, r19
    29c0:	40 93 58 01 	sts	0x0158, r20
    29c4:	50 93 59 01 	sts	0x0159, r21
}
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	ff 90       	pop	r15
    29ce:	ef 90       	pop	r14
    29d0:	df 90       	pop	r13
    29d2:	cf 90       	pop	r12
    29d4:	bf 90       	pop	r11
    29d6:	af 90       	pop	r10
    29d8:	9f 90       	pop	r9
    29da:	8f 90       	pop	r8
    29dc:	7f 90       	pop	r7
    29de:	6f 90       	pop	r6
    29e0:	08 95       	ret

000029e2 <PID_Execute_Routine>:

void PID_Execute_Routine(void){
  signed long control_value = 0;
  PID_Calculate_Error();
    29e2:	0e 94 ed 13 	call	0x27da	; 0x27da <PID_Calculate_Error>
  PID_Calculate_Error_Products();
    29e6:	0e 94 6e 14 	call	0x28dc	; 0x28dc <PID_Calculate_Error_Products>
  control_value  = PID.Products.PError;
    29ea:	20 91 4e 01 	lds	r18, 0x014E
    29ee:	30 91 4f 01 	lds	r19, 0x014F
    29f2:	40 91 50 01 	lds	r20, 0x0150
    29f6:	50 91 51 01 	lds	r21, 0x0151
  control_value += PID.Products.IError;
    29fa:	80 91 52 01 	lds	r24, 0x0152
    29fe:	90 91 53 01 	lds	r25, 0x0153
    2a02:	a0 91 54 01 	lds	r26, 0x0154
    2a06:	b0 91 55 01 	lds	r27, 0x0155
    2a0a:	28 0f       	add	r18, r24
    2a0c:	39 1f       	adc	r19, r25
    2a0e:	4a 1f       	adc	r20, r26
    2a10:	5b 1f       	adc	r21, r27
  control_value += PID.Products.DError;
    2a12:	80 91 56 01 	lds	r24, 0x0156
    2a16:	90 91 57 01 	lds	r25, 0x0157
    2a1a:	a0 91 58 01 	lds	r26, 0x0158
    2a1e:	b0 91 59 01 	lds	r27, 0x0159
    2a22:	28 0f       	add	r18, r24
    2a24:	39 1f       	adc	r19, r25
    2a26:	4a 1f       	adc	r20, r26
    2a28:	5b 1f       	adc	r21, r27
  PID.Output = control_value;
    2a2a:	20 93 5e 01 	sts	0x015E, r18
    2a2e:	30 93 5f 01 	sts	0x015F, r19
    2a32:	40 93 60 01 	sts	0x0160, r20
    2a36:	50 93 61 01 	sts	0x0161, r21
  if(control_value < 0){
    2a3a:	57 ff       	sbrs	r21, 7
    2a3c:	09 c0       	rjmp	.+18     	; 0x2a50 <PID_Execute_Routine+0x6e>
    PID.OutputNonNegative = 0;
    2a3e:	10 92 62 01 	sts	0x0162, r1
    2a42:	10 92 63 01 	sts	0x0163, r1
    2a46:	10 92 64 01 	sts	0x0164, r1
    2a4a:	10 92 65 01 	sts	0x0165, r1
    2a4e:	08 95       	ret
  }else{
    PID.OutputNonNegative = control_value;
    2a50:	20 93 62 01 	sts	0x0162, r18
    2a54:	30 93 63 01 	sts	0x0163, r19
    2a58:	40 93 64 01 	sts	0x0164, r20
    2a5c:	50 93 65 01 	sts	0x0165, r21
    2a60:	08 95       	ret

00002a62 <PID_Get_Kp>:
}




signed long PID_Get_Kp(void){
    2a62:	60 91 26 01 	lds	r22, 0x0126
    2a66:	70 91 27 01 	lds	r23, 0x0127
  return PID.Input.Kp;
}
    2a6a:	80 91 28 01 	lds	r24, 0x0128
    2a6e:	90 91 29 01 	lds	r25, 0x0129
    2a72:	08 95       	ret

00002a74 <PID_Get_Ki>:

signed long PID_Get_Ki(void){
    2a74:	60 91 2a 01 	lds	r22, 0x012A
    2a78:	70 91 2b 01 	lds	r23, 0x012B
  return PID.Input.Ki;
}
    2a7c:	80 91 2c 01 	lds	r24, 0x012C
    2a80:	90 91 2d 01 	lds	r25, 0x012D
    2a84:	08 95       	ret

00002a86 <PID_Get_Kd>:

signed long PID_Get_Kd(void){
    2a86:	60 91 2e 01 	lds	r22, 0x012E
    2a8a:	70 91 2f 01 	lds	r23, 0x012F
  return PID.Input.Kd;
}
    2a8e:	80 91 30 01 	lds	r24, 0x0130
    2a92:	90 91 31 01 	lds	r25, 0x0131
    2a96:	08 95       	ret

00002a98 <PID_Get_Set_Point>:

signed long PID_Get_Set_Point(void){
    2a98:	60 91 32 01 	lds	r22, 0x0132
    2a9c:	70 91 33 01 	lds	r23, 0x0133
  return PID.Input.SetPoint;
}
    2aa0:	80 91 34 01 	lds	r24, 0x0134
    2aa4:	90 91 35 01 	lds	r25, 0x0135
    2aa8:	08 95       	ret

00002aaa <PID_Get_Process_Value>:

signed long PID_Get_Process_Value(void){
    2aaa:	60 91 36 01 	lds	r22, 0x0136
    2aae:	70 91 37 01 	lds	r23, 0x0137
  return PID.Input.ProcessValue;
}
    2ab2:	80 91 38 01 	lds	r24, 0x0138
    2ab6:	90 91 39 01 	lds	r25, 0x0139
    2aba:	08 95       	ret

00002abc <PID_Get_PError>:

signed long PID_Get_PError(void){
    2abc:	60 91 3a 01 	lds	r22, 0x013A
    2ac0:	70 91 3b 01 	lds	r23, 0x013B
  return PID.Error.PError;
}
    2ac4:	80 91 3c 01 	lds	r24, 0x013C
    2ac8:	90 91 3d 01 	lds	r25, 0x013D
    2acc:	08 95       	ret

00002ace <PID_Get_IError>:

signed long PID_Get_IError(void){
    2ace:	60 91 42 01 	lds	r22, 0x0142
    2ad2:	70 91 43 01 	lds	r23, 0x0143
  return PID.Error.IError;
}
    2ad6:	80 91 44 01 	lds	r24, 0x0144
    2ada:	90 91 45 01 	lds	r25, 0x0145
    2ade:	08 95       	ret

00002ae0 <PID_Get_DError>:

signed long PID_Get_DError(void){
    2ae0:	60 91 3e 01 	lds	r22, 0x013E
    2ae4:	70 91 3f 01 	lds	r23, 0x013F
  return PID.Error.DError;
}
    2ae8:	80 91 40 01 	lds	r24, 0x0140
    2aec:	90 91 41 01 	lds	r25, 0x0141
    2af0:	08 95       	ret

00002af2 <PID_Get_Max_IError>:

signed long PID_Get_Max_IError(void){
    2af2:	60 91 46 01 	lds	r22, 0x0146
    2af6:	70 91 47 01 	lds	r23, 0x0147
  return PID.Error.IErrorLimit;
}
    2afa:	80 91 48 01 	lds	r24, 0x0148
    2afe:	90 91 49 01 	lds	r25, 0x0149
    2b02:	08 95       	ret

00002b04 <PID_Get_PError_Product>:

signed long PID_Get_PError_Product(void){
    2b04:	60 91 4e 01 	lds	r22, 0x014E
    2b08:	70 91 4f 01 	lds	r23, 0x014F
  return PID.Products.PError;
}
    2b0c:	80 91 50 01 	lds	r24, 0x0150
    2b10:	90 91 51 01 	lds	r25, 0x0151
    2b14:	08 95       	ret

00002b16 <PID_Get_IError_Product>:

signed long PID_Get_IError_Product(void){
    2b16:	60 91 52 01 	lds	r22, 0x0152
    2b1a:	70 91 53 01 	lds	r23, 0x0153
  return PID.Products.IError;
}
    2b1e:	80 91 54 01 	lds	r24, 0x0154
    2b22:	90 91 55 01 	lds	r25, 0x0155
    2b26:	08 95       	ret

00002b28 <PID_Get_DError_Product>:

signed long PID_Get_DError_Product(void){
    2b28:	60 91 56 01 	lds	r22, 0x0156
    2b2c:	70 91 57 01 	lds	r23, 0x0157
  return PID.Products.DError;
}
    2b30:	80 91 58 01 	lds	r24, 0x0158
    2b34:	90 91 59 01 	lds	r25, 0x0159
    2b38:	08 95       	ret

00002b3a <PID_Get_Scaling_Factor>:

signed long PID_Get_Scaling_Factor(void){
    2b3a:	60 91 5a 01 	lds	r22, 0x015A
    2b3e:	70 91 5b 01 	lds	r23, 0x015B
  return PID.Products.ScaleFact;
}
    2b42:	80 91 5c 01 	lds	r24, 0x015C
    2b46:	90 91 5d 01 	lds	r25, 0x015D
    2b4a:	08 95       	ret

00002b4c <PID_Get_Output>:


signed long PID_Get_Output(void){
    2b4c:	60 91 5e 01 	lds	r22, 0x015E
    2b50:	70 91 5f 01 	lds	r23, 0x015F
  return PID.Output;
}
    2b54:	80 91 60 01 	lds	r24, 0x0160
    2b58:	90 91 61 01 	lds	r25, 0x0161
    2b5c:	08 95       	ret

00002b5e <PID_Get_Output_NonNegative>:

signed long PID_Get_Output_NonNegative(void){
    2b5e:	60 91 62 01 	lds	r22, 0x0162
    2b62:	70 91 63 01 	lds	r23, 0x0163
  return PID.OutputNonNegative;
}
    2b66:	80 91 64 01 	lds	r24, 0x0164
    2b6a:	90 91 65 01 	lds	r25, 0x0165
    2b6e:	08 95       	ret

00002b70 <PID_Init>:



void PID_Init(void){
  PID_Struct_Init();
    2b70:	0e 94 03 13 	call	0x2606	; 0x2606 <PID_Struct_Init>
}
    2b74:	08 95       	ret

00002b76 <PID_Init_Module>:

void PID_Init_Module(signed long kp, signed long ki, signed long kd, signed long max_ierror, signed long scaling_fact){
    2b76:	af 92       	push	r10
    2b78:	bf 92       	push	r11
    2b7a:	cf 92       	push	r12
    2b7c:	df 92       	push	r13
    2b7e:	ef 92       	push	r14
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
  PID.OutputNonNegative = 0;
}


void PID_Set_Kp(signed long kp){
  PID.Input.Kp = kp;
    2b8e:	60 93 26 01 	sts	0x0126, r22
    2b92:	70 93 27 01 	sts	0x0127, r23
    2b96:	80 93 28 01 	sts	0x0128, r24
    2b9a:	90 93 29 01 	sts	0x0129, r25
}

void PID_Set_Ki(signed long ki){
  PID.Input.Ki = ki;
    2b9e:	20 93 2a 01 	sts	0x012A, r18
    2ba2:	30 93 2b 01 	sts	0x012B, r19
    2ba6:	40 93 2c 01 	sts	0x012C, r20
    2baa:	50 93 2d 01 	sts	0x012D, r21
}

void PID_Set_Kd(signed long kd){
  PID.Input.Kd = kd;
    2bae:	e0 92 2e 01 	sts	0x012E, r14
    2bb2:	f0 92 2f 01 	sts	0x012F, r15
    2bb6:	00 93 30 01 	sts	0x0130, r16
    2bba:	10 93 31 01 	sts	0x0131, r17
void PID_Set_ProcessValue(signed long process_value){
  PID.Input.ProcessValue = process_value;
}

void PID_Set_Max_IError(signed long max_ierror){
  PID.Error.IErrorLimit = max_ierror;
    2bbe:	a0 92 46 01 	sts	0x0146, r10
    2bc2:	b0 92 47 01 	sts	0x0147, r11
    2bc6:	c0 92 48 01 	sts	0x0148, r12
    2bca:	d0 92 49 01 	sts	0x0149, r13
}

void PID_Set_Scaling_Factor(signed long scale_fact){
  PID.Products.ScaleFact = scale_fact;
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	af 85       	ldd	r26, Y+15	; 0x0f
    2bd4:	b8 89       	ldd	r27, Y+16	; 0x10
    2bd6:	80 93 5a 01 	sts	0x015A, r24
    2bda:	90 93 5b 01 	sts	0x015B, r25
    2bde:	a0 93 5c 01 	sts	0x015C, r26
    2be2:	b0 93 5d 01 	sts	0x015D, r27




void PID_Reset_IError(void){
  PID.Error.IError = 0;
    2be6:	10 92 42 01 	sts	0x0142, r1
    2bea:	10 92 43 01 	sts	0x0143, r1
    2bee:	10 92 44 01 	sts	0x0144, r1
    2bf2:	10 92 45 01 	sts	0x0145, r1
  PID_Set_Ki(ki);
  PID_Set_Kd(kd);
  PID_Set_Max_IError(max_ierror);
  PID_Set_Scaling_Factor(scaling_fact);
  PID_Reset_IError();
    2bf6:	cf 91       	pop	r28
    2bf8:	df 91       	pop	r29
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
    2c06:	bf 90       	pop	r11
    2c08:	af 90       	pop	r10
    2c0a:	08 95       	ret

00002c0c <ThreadedDbg_Struct_Init>:


thdbg_t ThreadedDbg;

void ThreadedDbg_Struct_Init(void){
  ThreadedDbg.TotalThreads = 0;
    2c0c:	10 92 6b 02 	sts	0x026B, r1
  ThreadedDbg.ExecutionIndex = 0;
    2c10:	10 92 6c 02 	sts	0x026C, r1
  ThreadedDbg.ExecutionEnabled = 0;
    2c14:	10 92 6d 02 	sts	0x026D, r1
}
    2c18:	08 95       	ret

00002c1a <ThreadedDbg_Add_Function>:

void ThreadedDbg_Add_Function( void (*fptr) (void) ){
  ThreadedDbg.FnPtr[ThreadedDbg.TotalThreads] = fptr;
    2c1a:	20 91 6b 02 	lds	r18, 0x026B
    2c1e:	e2 2f       	mov	r30, r18
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	ee 0f       	add	r30, r30
    2c24:	ff 1f       	adc	r31, r31
    2c26:	ed 5b       	subi	r30, 0xBD	; 189
    2c28:	fd 4f       	sbci	r31, 0xFD	; 253
    2c2a:	91 83       	std	Z+1, r25	; 0x01
    2c2c:	80 83       	st	Z, r24
  ThreadedDbg.TotalThreads++;
    2c2e:	2f 5f       	subi	r18, 0xFF	; 255
    2c30:	20 93 6b 02 	sts	0x026B, r18
}
    2c34:	08 95       	ret

00002c36 <ThreadedDbg_Execution_Enable>:

void ThreadedDbg_Execution_Enable(void){
  ThreadedDbg.ExecutionEnabled = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	80 93 6d 02 	sts	0x026D, r24
}
    2c3c:	08 95       	ret

00002c3e <ThreadedDbg_Execution_Disable>:

void ThreadedDbg_Execution_Disable(void){
  ThreadedDbg.ExecutionEnabled = 0;
    2c3e:	10 92 6d 02 	sts	0x026D, r1
}
    2c42:	08 95       	ret

00002c44 <ThreadedDbg_Execute_Function>:


void ThreadedDbg_Execute_Function(void){
  if(ThreadedDbg.ExecutionEnabled == 1){
    2c44:	80 91 6d 02 	lds	r24, 0x026D
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	c1 f4       	brne	.+48     	; 0x2c7c <ThreadedDbg_Execute_Function+0x38>
    (*ThreadedDbg.FnPtr[ThreadedDbg.ExecutionIndex])();
    2c4c:	e0 91 6c 02 	lds	r30, 0x026C
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	ee 0f       	add	r30, r30
    2c54:	ff 1f       	adc	r31, r31
    2c56:	ed 5b       	subi	r30, 0xBD	; 189
    2c58:	fd 4f       	sbci	r31, 0xFD	; 253
    2c5a:	01 90       	ld	r0, Z+
    2c5c:	f0 81       	ld	r31, Z
    2c5e:	e0 2d       	mov	r30, r0
    2c60:	09 95       	icall
    ThreadedDbg.ExecutionIndex++;
    2c62:	80 91 6c 02 	lds	r24, 0x026C
    2c66:	8f 5f       	subi	r24, 0xFF	; 255
    2c68:	80 93 6c 02 	sts	0x026C, r24
    if(ThreadedDbg.ExecutionIndex >= ThreadedDbg.TotalThreads){
    2c6c:	90 91 6b 02 	lds	r25, 0x026B
    2c70:	89 17       	cp	r24, r25
    2c72:	20 f0       	brcs	.+8      	; 0x2c7c <ThreadedDbg_Execute_Function+0x38>
      ThreadedDbg.ExecutionIndex = 0;
    2c74:	10 92 6c 02 	sts	0x026C, r1
	  ThreadedDbg.ExecutionEnabled = 0;
    2c78:	10 92 6d 02 	sts	0x026D, r1
    2c7c:	08 95       	ret

00002c7e <ThreadedDbg_Init>:


thdbg_t ThreadedDbg;

void ThreadedDbg_Struct_Init(void){
  ThreadedDbg.TotalThreads = 0;
    2c7e:	10 92 6b 02 	sts	0x026B, r1
  ThreadedDbg.ExecutionIndex = 0;
    2c82:	10 92 6c 02 	sts	0x026C, r1
  ThreadedDbg.ExecutionEnabled = 0;
    2c86:	10 92 6d 02 	sts	0x026D, r1



void ThreadedDbg_Init(void){
  ThreadedDbg_Struct_Init();
}
    2c8a:	08 95       	ret

00002c8c <__mulsi3>:
    2c8c:	62 9f       	mul	r22, r18
    2c8e:	d0 01       	movw	r26, r0
    2c90:	73 9f       	mul	r23, r19
    2c92:	f0 01       	movw	r30, r0
    2c94:	82 9f       	mul	r24, r18
    2c96:	e0 0d       	add	r30, r0
    2c98:	f1 1d       	adc	r31, r1
    2c9a:	64 9f       	mul	r22, r20
    2c9c:	e0 0d       	add	r30, r0
    2c9e:	f1 1d       	adc	r31, r1
    2ca0:	92 9f       	mul	r25, r18
    2ca2:	f0 0d       	add	r31, r0
    2ca4:	83 9f       	mul	r24, r19
    2ca6:	f0 0d       	add	r31, r0
    2ca8:	74 9f       	mul	r23, r20
    2caa:	f0 0d       	add	r31, r0
    2cac:	65 9f       	mul	r22, r21
    2cae:	f0 0d       	add	r31, r0
    2cb0:	99 27       	eor	r25, r25
    2cb2:	72 9f       	mul	r23, r18
    2cb4:	b0 0d       	add	r27, r0
    2cb6:	e1 1d       	adc	r30, r1
    2cb8:	f9 1f       	adc	r31, r25
    2cba:	63 9f       	mul	r22, r19
    2cbc:	b0 0d       	add	r27, r0
    2cbe:	e1 1d       	adc	r30, r1
    2cc0:	f9 1f       	adc	r31, r25
    2cc2:	bd 01       	movw	r22, r26
    2cc4:	cf 01       	movw	r24, r30
    2cc6:	11 24       	eor	r1, r1
    2cc8:	08 95       	ret

00002cca <__udivmodsi4>:
    2cca:	a1 e2       	ldi	r26, 0x21	; 33
    2ccc:	1a 2e       	mov	r1, r26
    2cce:	aa 1b       	sub	r26, r26
    2cd0:	bb 1b       	sub	r27, r27
    2cd2:	fd 01       	movw	r30, r26
    2cd4:	0d c0       	rjmp	.+26     	; 0x2cf0 <__udivmodsi4_ep>

00002cd6 <__udivmodsi4_loop>:
    2cd6:	aa 1f       	adc	r26, r26
    2cd8:	bb 1f       	adc	r27, r27
    2cda:	ee 1f       	adc	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	a2 17       	cp	r26, r18
    2ce0:	b3 07       	cpc	r27, r19
    2ce2:	e4 07       	cpc	r30, r20
    2ce4:	f5 07       	cpc	r31, r21
    2ce6:	20 f0       	brcs	.+8      	; 0x2cf0 <__udivmodsi4_ep>
    2ce8:	a2 1b       	sub	r26, r18
    2cea:	b3 0b       	sbc	r27, r19
    2cec:	e4 0b       	sbc	r30, r20
    2cee:	f5 0b       	sbc	r31, r21

00002cf0 <__udivmodsi4_ep>:
    2cf0:	66 1f       	adc	r22, r22
    2cf2:	77 1f       	adc	r23, r23
    2cf4:	88 1f       	adc	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	1a 94       	dec	r1
    2cfa:	69 f7       	brne	.-38     	; 0x2cd6 <__udivmodsi4_loop>
    2cfc:	60 95       	com	r22
    2cfe:	70 95       	com	r23
    2d00:	80 95       	com	r24
    2d02:	90 95       	com	r25
    2d04:	9b 01       	movw	r18, r22
    2d06:	ac 01       	movw	r20, r24
    2d08:	bd 01       	movw	r22, r26
    2d0a:	cf 01       	movw	r24, r30
    2d0c:	08 95       	ret

00002d0e <__divmodsi4>:
    2d0e:	97 fb       	bst	r25, 7
    2d10:	09 2e       	mov	r0, r25
    2d12:	05 26       	eor	r0, r21
    2d14:	0e d0       	rcall	.+28     	; 0x2d32 <__divmodsi4_neg1>
    2d16:	57 fd       	sbrc	r21, 7
    2d18:	04 d0       	rcall	.+8      	; 0x2d22 <__divmodsi4_neg2>
    2d1a:	d7 df       	rcall	.-82     	; 0x2cca <__udivmodsi4>
    2d1c:	0a d0       	rcall	.+20     	; 0x2d32 <__divmodsi4_neg1>
    2d1e:	00 1c       	adc	r0, r0
    2d20:	38 f4       	brcc	.+14     	; 0x2d30 <__divmodsi4_exit>

00002d22 <__divmodsi4_neg2>:
    2d22:	50 95       	com	r21
    2d24:	40 95       	com	r20
    2d26:	30 95       	com	r19
    2d28:	21 95       	neg	r18
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	4f 4f       	sbci	r20, 0xFF	; 255
    2d2e:	5f 4f       	sbci	r21, 0xFF	; 255

00002d30 <__divmodsi4_exit>:
    2d30:	08 95       	ret

00002d32 <__divmodsi4_neg1>:
    2d32:	f6 f7       	brtc	.-4      	; 0x2d30 <__divmodsi4_exit>
    2d34:	90 95       	com	r25
    2d36:	80 95       	com	r24
    2d38:	70 95       	com	r23
    2d3a:	61 95       	neg	r22
    2d3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d3e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d40:	9f 4f       	sbci	r25, 0xFF	; 255
    2d42:	08 95       	ret

00002d44 <_exit>:
    2d44:	f8 94       	cli

00002d46 <__stop_program>:
    2d46:	ff cf       	rjmp	.-2      	; 0x2d46 <__stop_program>
