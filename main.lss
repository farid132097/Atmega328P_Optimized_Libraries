
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002f2a  00002fbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000096  0080011a  0080011a  00002fd8  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017d5  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004aac  00000000  00000000  0000480d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d0  00000000  00000000  000092b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022ce  00000000  00000000  00009889  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a90  00000000  00000000  0000bb58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000019f0  00000000  00000000  0000c5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001aac  00000000  00000000  0000dfd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000fa84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e2       	ldi	r30, 0x2A	; 42
      7c:	ff e2       	ldi	r31, 0x2F	; 47
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3b       	cpi	r26, 0xB0	; 176
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_DownCounter_SS_Set_Securely(0, 10000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e1       	ldi	r20, 0x10	; 16
      dc:	57 e2       	ldi	r21, 0x27	; 39
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(1, 8000);
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	40 e4       	ldi	r20, 0x40	; 64
      ea:	5f e1       	ldi	r21, 0x1F	; 31
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(2, 6000);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	40 e7       	ldi	r20, 0x70	; 112
      f8:	57 e1       	ldi	r21, 0x17	; 23
      fa:	60 e0       	ldi	r22, 0x00	; 0
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(3, 4000);
     102:	83 e0       	ldi	r24, 0x03	; 3
     104:	40 ea       	ldi	r20, 0xA0	; 160
     106:	5f e0       	ldi	r21, 0x0F	; 15
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Timebase_DownCounter_SS_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(100);
     110:	84 e6       	ldi	r24, 0x64	; 100
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 57 05 	call	0xaae	; 0xaae <Timebase_Timer_Await_SubSeconds>
	UART_Transmit_Text("Timebase\r\n");
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     120:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     122:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     126:	5e 98       	cbi	0x0b, 6	; 11
     128:	f3 cf       	rjmp	.-26     	; 0x110 <main+0x6a>

0000012a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
     12a:	10 92 1a 01 	sts	0x011A, r1
     12e:	eb e1       	ldi	r30, 0x1B	; 27
     130:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
     132:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	e3 32       	cpi	r30, 0x23	; 35
     138:	f8 07       	cpc	r31, r24
     13a:	d9 f7       	brne	.-10     	; 0x132 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
     13c:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
     13e:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
     140:	80 e2       	ldi	r24, 0x20	; 32
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	93 a3       	std	Z+35, r25	; 0x23
     146:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
     148:	15 a2       	std	Z+37, r1	; 0x25
     14a:	14 a2       	std	Z+36, r1	; 0x24
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	04 c0       	rjmp	.+8      	; 0x158 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
     150:	e6 5e       	subi	r30, 0xE6	; 230
     152:	fe 4f       	sbci	r31, 0xFE	; 254
     154:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
     156:	2f 5f       	subi	r18, 0xFF	; 255
     158:	80 91 45 01 	lds	r24, 0x0145
     15c:	90 91 46 01 	lds	r25, 0x0146
     160:	e2 2f       	mov	r30, r18
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	e8 17       	cp	r30, r24
     166:	f9 07       	cpc	r31, r25
     168:	98 f3       	brcs	.-26     	; 0x150 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
     16a:	08 95       	ret

0000016c <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
     16c:	08 95       	ret

0000016e <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
     16e:	08 95       	ret

00000170 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
     170:	9b 01       	movw	r18, r22
     172:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
     174:	60 e6       	ldi	r22, 0x60	; 96
     176:	73 ee       	ldi	r23, 0xE3	; 227
     178:	86 e1       	ldi	r24, 0x16	; 22
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 56 17 	call	0x2eac	; 0x2eac <__udivmodsi4>
     180:	21 50       	subi	r18, 0x01	; 1
     182:	30 40       	sbci	r19, 0x00	; 0
     184:	40 40       	sbci	r20, 0x00	; 0
     186:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
     188:	e0 ec       	ldi	r30, 0xC0	; 192
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	82 60       	ori	r24, 0x02	; 2
     190:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
     192:	bb 27       	eor	r27, r27
     194:	a5 2f       	mov	r26, r21
     196:	94 2f       	mov	r25, r20
     198:	83 2f       	mov	r24, r19
     19a:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
     19e:	20 93 c4 00 	sts	0x00C4, r18
}
     1a2:	08 95       	ret

000001a4 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     1a4:	e1 ec       	ldi	r30, 0xC1	; 193
     1a6:	f0 e0       	ldi	r31, 0x00	; 0
     1a8:	80 81       	ld	r24, Z
     1aa:	88 60       	ori	r24, 0x08	; 8
     1ac:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	80 93 c2 00 	sts	0x00C2, r24
}
     1b4:	08 95       	ret

000001b6 <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     1b6:	e1 ec       	ldi	r30, 0xC1	; 193
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	80 61       	ori	r24, 0x10	; 16
     1be:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	80 93 c2 00 	sts	0x00C2, r24
}
     1c6:	08 95       	ret

000001c8 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     1c8:	e1 ec       	ldi	r30, 0xC1	; 193
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	80 68       	ori	r24, 0x80	; 128
     1d0:	80 83       	st	Z, r24
  sei();
     1d2:	78 94       	sei
}
     1d4:	08 95       	ret

000001d6 <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
     1d6:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
     1d8:	80 91 c0 00 	lds	r24, 0x00C0
     1dc:	85 ff       	sbrs	r24, 5
     1de:	fc cf       	rjmp	.-8      	; 0x1d8 <UART_Transmit_Byte+0x2>
  UDR0=val;
     1e0:	90 93 c6 00 	sts	0x00C6, r25
}
     1e4:	08 95       	ret

000001e6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	0f 92       	push	r0
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
     1f0:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
     1f2:	80 91 c0 00 	lds	r24, 0x00C0
     1f6:	84 ff       	sbrs	r24, 4
     1f8:	05 c0       	rjmp	.+10     	; 0x204 <UART_Receive_Byte+0x1e>
    val=UDR0;
     1fa:	80 91 c6 00 	lds	r24, 0x00C6
     1fe:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	08 c0       	rjmp	.+16     	; 0x214 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
     204:	80 91 c0 00 	lds	r24, 0x00C0
     208:	83 ff       	sbrs	r24, 3
     20a:	07 c0       	rjmp	.+14     	; 0x21a <UART_Receive_Byte+0x34>
    val=UDR0;
     20c:	80 91 c6 00 	lds	r24, 0x00C6
     210:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
     212:	82 e0       	ldi	r24, 0x02	; 2
     214:	80 93 1a 01 	sts	0x011A, r24
     218:	05 c0       	rjmp	.+10     	; 0x224 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
     21a:	80 91 c6 00 	lds	r24, 0x00C6
     21e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
     220:	10 92 1a 01 	sts	0x011A, r1
  }
  return val;
     224:	89 81       	ldd	r24, Y+1	; 0x01
}
     226:	0f 90       	pop	r0
     228:	cf 91       	pop	r28
     22a:	df 91       	pop	r29
     22c:	08 95       	ret

0000022e <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
     22e:	80 91 24 01 	lds	r24, 0x0124
}
     232:	08 95       	ret

00000234 <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
     234:	10 92 24 01 	sts	0x0124, r1
}
     238:	08 95       	ret

0000023a <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
     23a:	1f 93       	push	r17
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	ab 01       	movw	r20, r22
     242:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
     244:	4f 3f       	cpi	r20, 0xFF	; 255
     246:	51 05       	cpc	r21, r1
     248:	61 05       	cpc	r22, r1
     24a:	71 05       	cpc	r23, r1
     24c:	09 f0       	breq	.+2      	; 0x250 <UART_Transmit_Byte_Hex+0x16>
     24e:	28 f4       	brcc	.+10     	; 0x25a <UART_Transmit_Byte_Hex+0x20>
     250:	e8 e0       	ldi	r30, 0x08	; 8
     252:	f0 e0       	ldi	r31, 0x00	; 0
     254:	c2 e0       	ldi	r28, 0x02	; 2
     256:	d0 e0       	ldi	r29, 0x00	; 0
     258:	11 c0       	rjmp	.+34     	; 0x27c <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
     25a:	40 30       	cpi	r20, 0x00	; 0
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	58 07       	cpc	r21, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	68 07       	cpc	r22, r24
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	78 07       	cpc	r23, r24
     268:	28 f0       	brcs	.+10     	; 0x274 <UART_Transmit_Byte_Hex+0x3a>
     26a:	e0 e2       	ldi	r30, 0x20	; 32
     26c:	f0 e0       	ldi	r31, 0x00	; 0
     26e:	c8 e0       	ldi	r28, 0x08	; 8
     270:	d0 e0       	ldi	r29, 0x00	; 0
     272:	04 c0       	rjmp	.+8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
     274:	e0 e1       	ldi	r30, 0x10	; 16
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	c4 e0       	ldi	r28, 0x04	; 4
     27a:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     27c:	80 91 c0 00 	lds	r24, 0x00C0
     280:	85 ff       	sbrs	r24, 5
     282:	fc cf       	rjmp	.-8      	; 0x27c <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
     284:	80 e3       	ldi	r24, 0x30	; 48
     286:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     28a:	80 91 c0 00 	lds	r24, 0x00C0
     28e:	85 ff       	sbrs	r24, 5
     290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
     292:	88 e7       	ldi	r24, 0x78	; 120
     294:	80 93 c6 00 	sts	0x00C6, r24
     298:	10 e0       	ldi	r17, 0x00	; 0
     29a:	1f c0       	rjmp	.+62     	; 0x2da <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
     29c:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
     29e:	db 01       	movw	r26, r22
     2a0:	ca 01       	movw	r24, r20
     2a2:	0e 2e       	mov	r0, r30
     2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_Transmit_Byte_Hex+0x74>
     2a6:	b6 95       	lsr	r27
     2a8:	a7 95       	ror	r26
     2aa:	97 95       	ror	r25
     2ac:	87 95       	ror	r24
     2ae:	0a 94       	dec	r0
     2b0:	d2 f7       	brpl	.-12     	; 0x2a6 <UART_Transmit_Byte_Hex+0x6c>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	8f 70       	andi	r24, 0x0F	; 15
     2b6:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
     2b8:	8a 30       	cpi	r24, 0x0A	; 10
     2ba:	91 05       	cpc	r25, r1
     2bc:	20 f0       	brcs	.+8      	; 0x2c6 <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
     2be:	9c 01       	movw	r18, r24
     2c0:	29 5c       	subi	r18, 0xC9	; 201
     2c2:	3f 4f       	sbci	r19, 0xFF	; 255
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
     2c6:	9c 01       	movw	r18, r24
     2c8:	20 5d       	subi	r18, 0xD0	; 208
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     2cc:	80 91 c0 00 	lds	r24, 0x00C0
     2d0:	85 ff       	sbrs	r24, 5
     2d2:	fc cf       	rjmp	.-8      	; 0x2cc <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
     2d4:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
     2d8:	1f 5f       	subi	r17, 0xFF	; 255
     2da:	81 2f       	mov	r24, r17
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	8c 17       	cp	r24, r28
     2e0:	9d 07       	cpc	r25, r29
     2e2:	e0 f2       	brcs	.-72     	; 0x29c <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	08 95       	ret

000002ec <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	ab 01       	movw	r20, r22
     2fe:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
     300:	4f 3f       	cpi	r20, 0xFF	; 255
     302:	51 05       	cpc	r21, r1
     304:	61 05       	cpc	r22, r1
     306:	71 05       	cpc	r23, r1
     308:	09 f0       	breq	.+2      	; 0x30c <UART_Transmit_Byte_Bin+0x20>
     30a:	10 f4       	brcc	.+4      	; 0x310 <UART_Transmit_Byte_Bin+0x24>
     30c:	97 e0       	ldi	r25, 0x07	; 7
     30e:	0b c0       	rjmp	.+22     	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
     310:	40 30       	cpi	r20, 0x00	; 0
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	58 07       	cpc	r21, r24
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	68 07       	cpc	r22, r24
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	78 07       	cpc	r23, r24
     31e:	10 f0       	brcs	.+4      	; 0x324 <UART_Transmit_Byte_Bin+0x38>
     320:	9f e1       	ldi	r25, 0x1F	; 31
     322:	01 c0       	rjmp	.+2      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
     324:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     326:	80 91 c0 00 	lds	r24, 0x00C0
     32a:	85 ff       	sbrs	r24, 5
     32c:	fc cf       	rjmp	.-8      	; 0x326 <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
     32e:	80 e3       	ldi	r24, 0x30	; 48
     330:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     334:	80 91 c0 00 	lds	r24, 0x00C0
     338:	85 ff       	sbrs	r24, 5
     33a:	fc cf       	rjmp	.-8      	; 0x334 <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
     33c:	82 e6       	ldi	r24, 0x62	; 98
     33e:	80 93 c6 00 	sts	0x00C6, r24
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
     346:	e9 2f       	mov	r30, r25
     348:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     34a:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     34c:	11 e3       	ldi	r17, 0x31	; 49
     34e:	ef 01       	movw	r28, r30
     350:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
     352:	cf 01       	movw	r24, r30
     354:	82 1b       	sub	r24, r18
     356:	93 0b       	sbc	r25, r19
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
     35c:	04 c0       	rjmp	.+8      	; 0x366 <UART_Transmit_Byte_Bin+0x7a>
     35e:	f6 94       	lsr	r15
     360:	e7 94       	ror	r14
     362:	d7 94       	ror	r13
     364:	c7 94       	ror	r12
     366:	8a 95       	dec	r24
     368:	d2 f7       	brpl	.-12     	; 0x35e <UART_Transmit_Byte_Bin+0x72>
     36a:	d7 01       	movw	r26, r14
     36c:	c6 01       	movw	r24, r12
     36e:	81 70       	andi	r24, 0x01	; 1
     370:	90 70       	andi	r25, 0x00	; 0
     372:	89 2b       	or	r24, r25
     374:	39 f0       	breq	.+14     	; 0x384 <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     376:	80 91 c0 00 	lds	r24, 0x00C0
     37a:	85 ff       	sbrs	r24, 5
     37c:	fc cf       	rjmp	.-8      	; 0x376 <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
     37e:	10 93 c6 00 	sts	0x00C6, r17
     382:	06 c0       	rjmp	.+12     	; 0x390 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     384:	80 91 c0 00 	lds	r24, 0x00C0
     388:	85 ff       	sbrs	r24, 5
     38a:	fc cf       	rjmp	.-8      	; 0x384 <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
     38c:	00 93 c6 00 	sts	0x00C6, r16
     390:	2f 5f       	subi	r18, 0xFF	; 255
     392:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
     394:	2c 17       	cp	r18, r28
     396:	3d 07       	cpc	r19, r29
     398:	e1 f6       	brne	.-72     	; 0x352 <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	ff 90       	pop	r15
     3a4:	ef 90       	pop	r14
     3a6:	df 90       	pop	r13
     3a8:	cf 90       	pop	r12
     3aa:	08 95       	ret

000003ac <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
     3ac:	ac 01       	movw	r20, r24
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	07 c0       	rjmp	.+14     	; 0x3c0 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     3b2:	80 91 c0 00 	lds	r24, 0x00C0
     3b6:	85 ff       	sbrs	r24, 5
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <UART_Transmit_Text+0x6>
  UDR0=val;
     3ba:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
     3be:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
     3c0:	fa 01       	movw	r30, r20
     3c2:	e2 0f       	add	r30, r18
     3c4:	f1 1d       	adc	r31, r1
     3c6:	e0 81       	ld	r30, Z
     3c8:	ee 23       	and	r30, r30
     3ca:	99 f7       	brne	.-26     	; 0x3b2 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
     3cc:	08 95       	ret

000003ce <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
     3ce:	8b e0       	ldi	r24, 0x0B	; 11
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3d6:	08 95       	ret

000003d8 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
     3d8:	8e e0       	ldi	r24, 0x0E	; 14
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Transmit_Text>
}
     3e0:	08 95       	ret

000003e2 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	6b 01       	movw	r12, r22
     3f2:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
     3f4:	61 15       	cp	r22, r1
     3f6:	71 05       	cpc	r23, r1
     3f8:	81 05       	cpc	r24, r1
     3fa:	91 05       	cpc	r25, r1
     3fc:	31 f4       	brne	.+12     	; 0x40a <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
     3fe:	10 92 1b 01 	sts	0x011B, r1
    UART.InputNumberDigits=1;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 23 01 	sts	0x0123, r24
     408:	23 c0       	rjmp	.+70     	; 0x450 <UART_Determine_Digit_Numbers+0x6e>
     40a:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
     40c:	0b 2d       	mov	r16, r11
     40e:	10 e0       	ldi	r17, 0x00	; 0
     410:	06 5e       	subi	r16, 0xE6	; 230
     412:	1e 4f       	sbci	r17, 0xFE	; 254
     414:	c7 01       	movw	r24, r14
     416:	b6 01       	movw	r22, r12
     418:	2a e0       	ldi	r18, 0x0A	; 10
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	50 e0       	ldi	r21, 0x00	; 0
     420:	0e 94 56 17 	call	0x2eac	; 0x2eac <__udivmodsi4>
     424:	f8 01       	movw	r30, r16
     426:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
     428:	c7 01       	movw	r24, r14
     42a:	b6 01       	movw	r22, r12
     42c:	2a e0       	ldi	r18, 0x0A	; 10
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	40 e0       	ldi	r20, 0x00	; 0
     432:	50 e0       	ldi	r21, 0x00	; 0
     434:	0e 94 56 17 	call	0x2eac	; 0x2eac <__udivmodsi4>
     438:	c9 01       	movw	r24, r18
     43a:	da 01       	movw	r26, r20
     43c:	6c 01       	movw	r12, r24
     43e:	7d 01       	movw	r14, r26
      i++;
     440:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
     442:	c1 14       	cp	r12, r1
     444:	d1 04       	cpc	r13, r1
     446:	e1 04       	cpc	r14, r1
     448:	f1 04       	cpc	r15, r1
     44a:	01 f7       	brne	.-64     	; 0x40c <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
     44c:	b0 92 23 01 	sts	0x0123, r11
  }
}
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	bf 90       	pop	r11
     45e:	08 95       	ret

00000460 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     460:	e0 91 23 01 	lds	r30, 0x0123
     464:	0f c0       	rjmp	.+30     	; 0x484 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
     466:	2e 2f       	mov	r18, r30
     468:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
     46a:	e2 2f       	mov	r30, r18
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	e6 5e       	subi	r30, 0xE6	; 230
     470:	fe 4f       	sbci	r31, 0xFE	; 254
     472:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     474:	80 91 c0 00 	lds	r24, 0x00C0
     478:	85 ff       	sbrs	r24, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
     47c:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
     47e:	90 93 c6 00 	sts	0x00C6, r25
     482:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
     484:	ee 23       	and	r30, r30
     486:	79 f7       	brne	.-34     	; 0x466 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
     488:	08 95       	ret

0000048a <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
     48a:	9b 01       	movw	r18, r22
     48c:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     48e:	97 ff       	sbrs	r25, 7
     490:	0e c0       	rjmp	.+28     	; 0x4ae <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
     492:	80 91 c0 00 	lds	r24, 0x00C0
     496:	85 ff       	sbrs	r24, 5
     498:	fc cf       	rjmp	.-8      	; 0x492 <UART_Transmit_Number+0x8>
  UDR0=val;
     49a:	8d e2       	ldi	r24, 0x2D	; 45
     49c:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
     4a0:	50 95       	com	r21
     4a2:	40 95       	com	r20
     4a4:	30 95       	com	r19
     4a6:	21 95       	neg	r18
     4a8:	3f 4f       	sbci	r19, 0xFF	; 255
     4aa:	4f 4f       	sbci	r20, 0xFF	; 255
     4ac:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
     4b6:	0e 94 30 02 	call	0x460	; 0x460 <UART_Transmit_Number_Digits>
}
     4ba:	08 95       	ret

000004bc <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
     4bc:	fc 01       	movw	r30, r24
     4be:	e6 5e       	subi	r30, 0xE6	; 230
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	83 85       	ldd	r24, Z+11	; 0x0b
}
     4c4:	08 95       	ret

000004c6 <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
     4c6:	20 91 47 01 	lds	r18, 0x0147
     4ca:	30 91 48 01 	lds	r19, 0x0148
}
     4ce:	c9 01       	movw	r24, r18
     4d0:	08 95       	ret

000004d2 <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
     4d2:	10 92 1a 01 	sts	0x011A, r1
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
     4dc:	f9 01       	movw	r30, r18
     4de:	e6 5e       	subi	r30, 0xE6	; 230
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
     4e4:	2f 5f       	subi	r18, 0xFF	; 255
     4e6:	3f 4f       	sbci	r19, 0xFF	; 255
     4e8:	80 91 45 01 	lds	r24, 0x0145
     4ec:	90 91 46 01 	lds	r25, 0x0146
     4f0:	28 17       	cp	r18, r24
     4f2:	39 07       	cpc	r19, r25
     4f4:	98 f3       	brcs	.-26     	; 0x4dc <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
     4f6:	10 92 48 01 	sts	0x0148, r1
     4fa:	10 92 47 01 	sts	0x0147, r1
  #endif
}
     4fe:	08 95       	ret

00000500 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
     500:	df 93       	push	r29
     502:	cf 93       	push	r28
     504:	0f 92       	push	r0
     506:	cd b7       	in	r28, 0x3d	; 61
     508:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
     50a:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
     50c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <UART_Receive_Byte>
     510:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
     512:	80 91 1a 01 	lds	r24, 0x011A
     516:	88 23       	and	r24, r24
     518:	19 f5       	brne	.+70     	; 0x560 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	80 93 24 01 	sts	0x0124, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
     520:	e0 91 47 01 	lds	r30, 0x0147
     524:	f0 91 48 01 	lds	r31, 0x0148
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	e6 5e       	subi	r30, 0xE6	; 230
     52c:	fe 4f       	sbci	r31, 0xFE	; 254
     52e:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
     530:	80 91 47 01 	lds	r24, 0x0147
     534:	90 91 48 01 	lds	r25, 0x0148
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	90 93 48 01 	sts	0x0148, r25
     53e:	80 93 47 01 	sts	0x0147, r24

    if(UART.BufferIndex>=UART.BufferSize){
     542:	20 91 47 01 	lds	r18, 0x0147
     546:	30 91 48 01 	lds	r19, 0x0148
     54a:	80 91 45 01 	lds	r24, 0x0145
     54e:	90 91 46 01 	lds	r25, 0x0146
     552:	28 17       	cp	r18, r24
     554:	39 07       	cpc	r19, r25
     556:	20 f0       	brcs	.+8      	; 0x560 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
     558:	10 92 48 01 	sts	0x0148, r1
     55c:	10 92 47 01 	sts	0x0147, r1
    }
  }
}
     560:	0f 90       	pop	r0
     562:	cf 91       	pop	r28
     564:	df 91       	pop	r29
     566:	08 95       	ret

00000568 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
     568:	1f 92       	push	r1
     56a:	0f 92       	push	r0
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	0f 92       	push	r0
     570:	11 24       	eor	r1, r1
     572:	2f 93       	push	r18
     574:	3f 93       	push	r19
     576:	4f 93       	push	r20
     578:	5f 93       	push	r21
     57a:	6f 93       	push	r22
     57c:	7f 93       	push	r23
     57e:	8f 93       	push	r24
     580:	9f 93       	push	r25
     582:	af 93       	push	r26
     584:	bf 93       	push	r27
     586:	ef 93       	push	r30
     588:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
     58a:	0e 94 80 02 	call	0x500	; 0x500 <UART_Interrupt_Service_Routine>
}
     58e:	ff 91       	pop	r31
     590:	ef 91       	pop	r30
     592:	bf 91       	pop	r27
     594:	af 91       	pop	r26
     596:	9f 91       	pop	r25
     598:	8f 91       	pop	r24
     59a:	7f 91       	pop	r23
     59c:	6f 91       	pop	r22
     59e:	5f 91       	pop	r21
     5a0:	4f 91       	pop	r20
     5a2:	3f 91       	pop	r19
     5a4:	2f 91       	pop	r18
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	7b 01       	movw	r14, r22
     5ba:	8c 01       	movw	r16, r24
  UART_Struct_Init();
     5bc:	0e 94 95 00 	call	0x12a	; 0x12a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
     5c0:	c8 01       	movw	r24, r16
     5c2:	b7 01       	movw	r22, r14
     5c4:	0e 94 b8 00 	call	0x170	; 0x170 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	88 60       	ori	r24, 0x08	; 8
     5d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5d2:	a2 ec       	ldi	r26, 0xC2	; 194
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	96 e0       	ldi	r25, 0x06	; 6
     5d8:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
     5da:	80 81       	ld	r24, Z
     5dc:	80 61       	ori	r24, 0x10	; 16
     5de:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
     5e0:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
     5e2:	80 81       	ld	r24, Z
     5e4:	80 68       	ori	r24, 0x80	; 128
     5e6:	80 83       	st	Z, r24
  sei();
     5e8:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
     5ea:	0e 94 69 02 	call	0x4d2	; 0x4d2 <UART_Flush_Buffer>
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	08 95       	ret

000005f8 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5f8:	8b e4       	ldi	r24, 0x4B	; 75
     5fa:	91 e0       	ldi	r25, 0x01	; 1
     5fc:	90 93 4a 01 	sts	0x014A, r25
     600:	80 93 49 01 	sts	0x0149, r24
  Timebase->Config.TimerType.Value = 0;
     604:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     608:	80 91 4b 01 	lds	r24, 0x014B
     60c:	84 60       	ori	r24, 0x04	; 4
     60e:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     612:	80 91 4b 01 	lds	r24, 0x014B
     616:	87 70       	andi	r24, 0x07	; 7
     618:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.UpdateRate = 1;
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 4d 01 	sts	0x014D, r25
     624:	80 93 4c 01 	sts	0x014C, r24
  Timebase->Time.OVFUpdateValue=0;
     628:	10 92 4e 01 	sts	0x014E, r1
  Timebase->Time.SubSeconds = 0;
     62c:	10 92 54 01 	sts	0x0154, r1
     630:	10 92 53 01 	sts	0x0153, r1
  Timebase->Time.Seconds = 0;
     634:	10 92 55 01 	sts	0x0155, r1
     638:	10 92 56 01 	sts	0x0156, r1
     63c:	10 92 57 01 	sts	0x0157, r1
     640:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     644:	10 92 4f 01 	sts	0x014F, r1
     648:	10 92 50 01 	sts	0x0150, r1
     64c:	10 92 51 01 	sts	0x0151, r1
     650:	10 92 52 01 	sts	0x0152, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     654:	10 92 59 01 	sts	0x0159, r1
     658:	10 92 5a 01 	sts	0x015A, r1
     65c:	10 92 5b 01 	sts	0x015B, r1
     660:	10 92 5c 01 	sts	0x015C, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     664:	10 92 5d 01 	sts	0x015D, r1
     668:	10 92 5e 01 	sts	0x015E, r1
     66c:	10 92 5f 01 	sts	0x015F, r1
     670:	10 92 60 01 	sts	0x0160, r1
	Timebase->Time.Status = 0;
     674:	10 92 61 01 	sts	0x0161, r1
  #endif
  
  Timebase->UpdateRequest = 0;
     678:	10 92 62 01 	sts	0x0162, r1
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     67c:	10 92 63 01 	sts	0x0163, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     680:	10 92 7d 01 	sts	0x017D, r1
    Timebase->UpCounter[i].EndValue = 0;
     684:	10 92 7e 01 	sts	0x017E, r1
     688:	10 92 7f 01 	sts	0x017F, r1
     68c:	10 92 80 01 	sts	0x0180, r1
     690:	10 92 81 01 	sts	0x0181, r1
    Timebase->UpCounter[i].Target = 0;
     694:	10 92 82 01 	sts	0x0182, r1
     698:	10 92 83 01 	sts	0x0183, r1
     69c:	10 92 84 01 	sts	0x0184, r1
     6a0:	10 92 85 01 	sts	0x0185, r1
    Timebase->UpCounter[i].Temporary = 0;    
     6a4:	10 92 86 01 	sts	0x0186, r1
     6a8:	10 92 87 01 	sts	0x0187, r1
     6ac:	10 92 88 01 	sts	0x0188, r1
     6b0:	10 92 89 01 	sts	0x0189, r1
    Timebase->UpCounter[i].Value = 0;
     6b4:	10 92 8a 01 	sts	0x018A, r1
     6b8:	10 92 8b 01 	sts	0x018B, r1
     6bc:	10 92 8c 01 	sts	0x018C, r1
     6c0:	10 92 8d 01 	sts	0x018D, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     6c4:	10 92 8e 01 	sts	0x018E, r1
     6c8:	10 92 8f 01 	sts	0x018F, r1
     6cc:	10 92 90 01 	sts	0x0190, r1
     6d0:	10 92 91 01 	sts	0x0191, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     6d4:	10 92 64 01 	sts	0x0164, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     6d8:	10 92 65 01 	sts	0x0165, r1
     6dc:	10 92 66 01 	sts	0x0166, r1
     6e0:	10 92 67 01 	sts	0x0167, r1
     6e4:	10 92 68 01 	sts	0x0168, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     6e8:	10 92 69 01 	sts	0x0169, r1
     6ec:	10 92 6a 01 	sts	0x016A, r1
     6f0:	10 92 6b 01 	sts	0x016B, r1
     6f4:	10 92 6c 01 	sts	0x016C, r1
    Timebase->UpCounterSS[i].Target = 0;
     6f8:	10 92 6d 01 	sts	0x016D, r1
     6fc:	10 92 6e 01 	sts	0x016E, r1
     700:	10 92 6f 01 	sts	0x016F, r1
     704:	10 92 70 01 	sts	0x0170, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     708:	10 92 71 01 	sts	0x0171, r1
     70c:	10 92 72 01 	sts	0x0172, r1
     710:	10 92 73 01 	sts	0x0173, r1
     714:	10 92 74 01 	sts	0x0174, r1
    Timebase->UpCounterSS[i].Value = 0;
     718:	10 92 75 01 	sts	0x0175, r1
     71c:	10 92 76 01 	sts	0x0176, r1
     720:	10 92 77 01 	sts	0x0177, r1
     724:	10 92 78 01 	sts	0x0178, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     728:	10 92 79 01 	sts	0x0179, r1
     72c:	10 92 7a 01 	sts	0x017A, r1
     730:	10 92 7b 01 	sts	0x017B, r1
     734:	10 92 7c 01 	sts	0x017C, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     738:	10 92 a3 01 	sts	0x01A3, r1
    Timebase->DownCounter[i].EndValue = 0;
     73c:	10 92 a4 01 	sts	0x01A4, r1
     740:	10 92 a5 01 	sts	0x01A5, r1
     744:	10 92 a6 01 	sts	0x01A6, r1
     748:	10 92 a7 01 	sts	0x01A7, r1
    Timebase->DownCounter[i].Value = 0;
     74c:	10 92 a8 01 	sts	0x01A8, r1
     750:	10 92 a9 01 	sts	0x01A9, r1
     754:	10 92 aa 01 	sts	0x01AA, r1
     758:	10 92 ab 01 	sts	0x01AB, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     75c:	10 92 ac 01 	sts	0x01AC, r1
     760:	10 92 ad 01 	sts	0x01AD, r1
     764:	10 92 ae 01 	sts	0x01AE, r1
     768:	10 92 af 01 	sts	0x01AF, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     76c:	10 92 92 01 	sts	0x0192, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     770:	10 92 93 01 	sts	0x0193, r1
     774:	10 92 94 01 	sts	0x0194, r1
     778:	10 92 95 01 	sts	0x0195, r1
     77c:	10 92 96 01 	sts	0x0196, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     780:	10 92 97 01 	sts	0x0197, r1
     784:	10 92 98 01 	sts	0x0198, r1
     788:	10 92 99 01 	sts	0x0199, r1
     78c:	10 92 9a 01 	sts	0x019A, r1
    Timebase->DownCounterSS[i].Value = 0;
     790:	10 92 9b 01 	sts	0x019B, r1
     794:	10 92 9c 01 	sts	0x019C, r1
     798:	10 92 9d 01 	sts	0x019D, r1
     79c:	10 92 9e 01 	sts	0x019E, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     7a0:	10 92 9f 01 	sts	0x019F, r1
     7a4:	10 92 a0 01 	sts	0x01A0, r1
     7a8:	10 92 a1 01 	sts	0x01A1, r1
     7ac:	10 92 a2 01 	sts	0x01A2, r1
  }
  #endif
  
}
     7b0:	08 95       	ret

000007b2 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     7b2:	7f 92       	push	r7
     7b4:	8f 92       	push	r8
     7b6:	9f 92       	push	r9
     7b8:	af 92       	push	r10
     7ba:	bf 92       	push	r11
     7bc:	cf 92       	push	r12
     7be:	df 92       	push	r13
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	df 93       	push	r29
     7ca:	cf 93       	push	r28
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
     7d0:	2a 97       	sbiw	r28, 0x0a	; 10
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     7de:	c0 90 49 01 	lds	r12, 0x0149
     7e2:	d0 90 4a 01 	lds	r13, 0x014A
     7e6:	f6 01       	movw	r30, r12
     7e8:	80 81       	ld	r24, Z
     7ea:	80 ff       	sbrs	r24, 0
     7ec:	31 c0       	rjmp	.+98     	; 0x850 <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     7ee:	01 30       	cpi	r16, 0x01	; 1
     7f0:	11 05       	cpc	r17, r1
     7f2:	11 f4       	brne	.+4      	; 0x7f8 <Timebase_Timer_Config+0x46>
     7f4:	96 e0       	ldi	r25, 0x06	; 6
     7f6:	19 c0       	rjmp	.+50     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     7f8:	02 30       	cpi	r16, 0x02	; 2
     7fa:	11 05       	cpc	r17, r1
     7fc:	11 f4       	brne	.+4      	; 0x802 <Timebase_Timer_Config+0x50>
     7fe:	95 e0       	ldi	r25, 0x05	; 5
     800:	14 c0       	rjmp	.+40     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     802:	04 30       	cpi	r16, 0x04	; 4
     804:	11 05       	cpc	r17, r1
     806:	11 f4       	brne	.+4      	; 0x80c <Timebase_Timer_Config+0x5a>
     808:	94 e0       	ldi	r25, 0x04	; 4
     80a:	0f c0       	rjmp	.+30     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     80c:	08 30       	cpi	r16, 0x08	; 8
     80e:	11 05       	cpc	r17, r1
     810:	11 f4       	brne	.+4      	; 0x816 <Timebase_Timer_Config+0x64>
     812:	93 e0       	ldi	r25, 0x03	; 3
     814:	0a c0       	rjmp	.+20     	; 0x82a <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     816:	00 31       	cpi	r16, 0x10	; 16
     818:	11 05       	cpc	r17, r1
     81a:	11 f4       	brne	.+4      	; 0x820 <Timebase_Timer_Config+0x6e>
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	05 c0       	rjmp	.+10     	; 0x82a <Timebase_Timer_Config+0x78>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	00 32       	cpi	r16, 0x20	; 32
     824:	11 05       	cpc	r17, r1
     826:	09 f4       	brne	.+2      	; 0x82a <Timebase_Timer_Config+0x78>
     828:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     82a:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     82c:	84 b7       	in	r24, 0x34	; 52
     82e:	87 7f       	andi	r24, 0xF7	; 247
     830:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     832:	80 91 60 00 	lds	r24, 0x0060
     836:	80 68       	ori	r24, 0x80	; 128
     838:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     83c:	80 91 60 00 	lds	r24, 0x0060
     840:	88 61       	ori	r24, 0x18	; 24
     842:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     846:	90 64       	ori	r25, 0x40	; 64
     848:	90 93 60 00 	sts	0x0060, r25
    sei();
     84c:	78 94       	sei
     84e:	67 c0       	rjmp	.+206    	; 0x91e <__stack+0x1f>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     850:	81 fd       	sbrc	r24, 1
     852:	65 c0       	rjmp	.+202    	; 0x91e <__stack+0x1f>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     854:	82 ff       	sbrs	r24, 2
     856:	63 c0       	rjmp	.+198    	; 0x91e <__stack+0x1f>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     858:	de 01       	movw	r26, r28
     85a:	11 96       	adiw	r26, 0x01	; 1
     85c:	e0 e1       	ldi	r30, 0x10	; 16
     85e:	f1 e0       	ldi	r31, 0x01	; 1
     860:	8a e0       	ldi	r24, 0x0A	; 10
     862:	01 90       	ld	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	81 50       	subi	r24, 0x01	; 1
     868:	e1 f7       	brne	.-8      	; 0x862 <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     86a:	98 01       	movw	r18, r16
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	50 e0       	ldi	r21, 0x00	; 0
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	7b e1       	ldi	r23, 0x1B	; 27
     874:	87 eb       	ldi	r24, 0xB7	; 183
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
     87c:	72 2e       	mov	r7, r18
     87e:	83 2e       	mov	r8, r19
     880:	94 2e       	mov	r9, r20
     882:	e5 2e       	mov	r14, r21
     884:	5e 01       	movw	r10, r28
     886:	08 94       	sec
     888:	a1 1c       	adc	r10, r1
     88a:	b1 1c       	adc	r11, r1
     88c:	c9 01       	movw	r24, r18
     88e:	da 01       	movw	r26, r20
     890:	9c 01       	movw	r18, r24
     892:	ad 01       	movw	r20, r26
     894:	ff 24       	eor	r15, r15
     896:	14 c0       	rjmp	.+40     	; 0x8c0 <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     898:	f5 01       	movw	r30, r10
     89a:	21 91       	ld	r18, Z+
     89c:	31 91       	ld	r19, Z+
     89e:	5f 01       	movw	r10, r30
     8a0:	40 e0       	ldi	r20, 0x00	; 0
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	67 2d       	mov	r22, r7
     8a6:	78 2d       	mov	r23, r8
     8a8:	89 2d       	mov	r24, r9
     8aa:	9e 2d       	mov	r25, r14
     8ac:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
     8b0:	c9 01       	movw	r24, r18
     8b2:	da 01       	movw	r26, r20
     8b4:	9c 01       	movw	r18, r24
     8b6:	ad 01       	movw	r20, r26
	  clock_div_index++;
     8b8:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     8ba:	f5 e0       	ldi	r31, 0x05	; 5
     8bc:	ff 16       	cp	r15, r31
     8be:	31 f0       	breq	.+12     	; 0x8cc <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     8c0:	2f 3f       	cpi	r18, 0xFF	; 255
     8c2:	31 05       	cpc	r19, r1
     8c4:	41 05       	cpc	r20, r1
     8c6:	51 05       	cpc	r21, r1
     8c8:	09 f0       	breq	.+2      	; 0x8cc <Timebase_Timer_Config+0x11a>
     8ca:	34 f7       	brge	.-52     	; 0x898 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     8cc:	8f 2d       	mov	r24, r15
     8ce:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     8d0:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     8d2:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     8d4:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     8d8:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     8da:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     8dc:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     8de:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     8e0:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     8e2:	88 23       	and	r24, r24
     8e4:	11 f4       	brne	.+4      	; 0x8ea <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	0f c0       	rjmp	.+30     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 1){
     8ea:	81 30       	cpi	r24, 0x01	; 1
     8ec:	11 f4       	brne	.+4      	; 0x8f2 <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0b c0       	rjmp	.+22     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 2){
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	11 f4       	brne	.+4      	; 0x8fa <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	07 c0       	rjmp	.+14     	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 3){
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	11 f4       	brne	.+4      	; 0x902 <__stack+0x3>
	  TCCR0B = (1<<CS02);
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	03 c0       	rjmp	.+6      	; 0x908 <__stack+0x9>
	}else if(clock_div_index == 4){
     902:	84 30       	cpi	r24, 0x04	; 4
     904:	11 f4       	brne	.+4      	; 0x90a <__stack+0xb>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     90a:	82 2f       	mov	r24, r18
     90c:	80 95       	com	r24
     90e:	f6 01       	movw	r30, r12
     910:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     912:	83 81       	ldd	r24, Z+3	; 0x03
     914:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	80 93 6e 00 	sts	0x006E, r24
    sei();
     91c:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     91e:	f6 01       	movw	r30, r12
     920:	12 83       	std	Z+2, r17	; 0x02
     922:	01 83       	std	Z+1, r16	; 0x01
}
     924:	2a 96       	adiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	cf 91       	pop	r28
     932:	df 91       	pop	r29
     934:	1f 91       	pop	r17
     936:	0f 91       	pop	r16
     938:	ff 90       	pop	r15
     93a:	ef 90       	pop	r14
     93c:	df 90       	pop	r13
     93e:	cf 90       	pop	r12
     940:	bf 90       	pop	r11
     942:	af 90       	pop	r10
     944:	9f 90       	pop	r9
     946:	8f 90       	pop	r8
     948:	7f 90       	pop	r7
     94a:	08 95       	ret

0000094c <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     94c:	f8 94       	cli
}
     94e:	08 95       	ret

00000950 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     950:	78 94       	sei
}
     952:	08 95       	ret

00000954 <Timebase_Token_Executing>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     954:	e0 91 49 01 	lds	r30, 0x0149
     958:	f0 91 4a 01 	lds	r31, 0x014A
     95c:	80 8d       	ldd	r24, Z+24	; 0x18
}
     95e:	08 95       	ret

00000960 <Timebase_Token_Add>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     960:	e0 91 49 01 	lds	r30, 0x0149
     964:	f0 91 4a 01 	lds	r31, 0x014A
     968:	80 8d       	ldd	r24, Z+24	; 0x18
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     96a:	8f 33       	cpi	r24, 0x3F	; 63
     96c:	18 f4       	brcc	.+6      	; 0x974 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     96e:	80 8d       	ldd	r24, Z+24	; 0x18
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	80 8f       	std	Z+24, r24	; 0x18
     974:	08 95       	ret

00000976 <Timebase_Token_Remove>:

/*********************************Token Functions Start*******************************/

#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     976:	e0 91 49 01 	lds	r30, 0x0149
     97a:	f0 91 4a 01 	lds	r31, 0x014A
     97e:	80 8d       	ldd	r24, Z+24	; 0x18
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     980:	88 23       	and	r24, r24
     982:	19 f0       	breq	.+6      	; 0x98a <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     984:	80 8d       	ldd	r24, Z+24	; 0x18
     986:	81 50       	subi	r24, 0x01	; 1
     988:	80 8f       	std	Z+24, r24	; 0x18
     98a:	08 95       	ret

0000098c <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     98c:	e0 91 49 01 	lds	r30, 0x0149
     990:	f0 91 4a 01 	lds	r31, 0x014A
     994:	10 8e       	std	Z+24, r1	; 0x18
}
     996:	08 95       	ret

00000998 <Timebase_Timer_Get_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     998:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     99a:	e0 91 49 01 	lds	r30, 0x0149
     99e:	f0 91 4a 01 	lds	r31, 0x014A
     9a2:	20 85       	ldd	r18, Z+8	; 0x08
     9a4:	31 85       	ldd	r19, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9a6:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_ss;
  #else
  return Timebase->Time.SubSeconds;
  #endif
}
     9a8:	c9 01       	movw	r24, r18
     9aa:	08 95       	ret

000009ac <Timebase_Timer_Get_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9ac:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     9ae:	e0 91 49 01 	lds	r30, 0x0149
     9b2:	f0 91 4a 01 	lds	r31, 0x014A
     9b6:	22 85       	ldd	r18, Z+10	; 0x0a
     9b8:	33 85       	ldd	r19, Z+11	; 0x0b
     9ba:	44 85       	ldd	r20, Z+12	; 0x0c
     9bc:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9be:	78 94       	sei
  Timebase_Atomic_Operation_End();
  return curr_s;
  #else
  Timebase->Time.Seconds;
  #endif
}
     9c0:	b9 01       	movw	r22, r18
     9c2:	ca 01       	movw	r24, r20
     9c4:	08 95       	ret

000009c6 <Timebase_Timer_Set_SubSeconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9c6:	f8 94       	cli
}

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.SubSeconds = value;
     9c8:	e0 91 49 01 	lds	r30, 0x0149
     9cc:	f0 91 4a 01 	lds	r31, 0x014A
     9d0:	91 87       	std	Z+9, r25	; 0x09
     9d2:	80 87       	std	Z+8, r24	; 0x08
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9d4:	78 94       	sei
  Timebase->Time.SubSeconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.SubSeconds = value;
  #endif
}
     9d6:	08 95       	ret

000009d8 <Timebase_Timer_Set_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     9d8:	f8 94       	cli
}

void Timebase_Timer_Set_Seconds(int32_t value){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  Timebase_Atomic_Operation_Start();
  Timebase->Time.Seconds = value;
     9da:	e0 91 49 01 	lds	r30, 0x0149
     9de:	f0 91 4a 01 	lds	r31, 0x014A
     9e2:	62 87       	std	Z+10, r22	; 0x0a
     9e4:	73 87       	std	Z+11, r23	; 0x0b
     9e6:	84 87       	std	Z+12, r24	; 0x0c
     9e8:	95 87       	std	Z+13, r25	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     9ea:	78 94       	sei
  Timebase->Time.Seconds = value;
  Timebase_Atomic_Operation_End();
  #else
  Timebase->Time.Seconds = value;
  #endif
}
     9ec:	08 95       	ret

000009ee <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     9ee:	6f 92       	push	r6
     9f0:	7f 92       	push	r7
     9f2:	8f 92       	push	r8
     9f4:	9f 92       	push	r9
     9f6:	af 92       	push	r10
     9f8:	bf 92       	push	r11
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a0c:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a0e:	c0 91 49 01 	lds	r28, 0x0149
     a12:	d0 91 4a 01 	lds	r29, 0x014A
     a16:	e8 84       	ldd	r14, Y+8	; 0x08
     a18:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a1a:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a1c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a1e:	2a 85       	ldd	r18, Y+10	; 0x0a
     a20:	3b 85       	ldd	r19, Y+11	; 0x0b
     a22:	4c 85       	ldd	r20, Y+12	; 0x0c
     a24:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a26:	78 94       	sei
  
  smpl_ss  = Timebase_Timer_Get_SubSeconds();
  smpl_s   = Timebase_Timer_Get_Seconds();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     a28:	69 81       	ldd	r22, Y+1	; 0x01
     a2a:	7a 81       	ldd	r23, Y+2	; 0x02
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__mulsi3>
     a34:	3b 01       	movw	r6, r22
     a36:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     a38:	00 e0       	ldi	r16, 0x00	; 0
     a3a:	10 e0       	ldi	r17, 0x00	; 0
     a3c:	6e 0c       	add	r6, r14
     a3e:	7f 1c       	adc	r7, r15
     a40:	80 1e       	adc	r8, r16
     a42:	91 1e       	adc	r9, r17
  smpl_val += value;
     a44:	cc 24       	eor	r12, r12
     a46:	dd 24       	eor	r13, r13
     a48:	6a 0c       	add	r6, r10
     a4a:	7b 1c       	adc	r7, r11
     a4c:	8c 1c       	adc	r8, r12
     a4e:	9d 1c       	adc	r9, r13
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <Timebase_Timer_Delay_SubSeconds+0x98>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a5a:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     a5c:	e8 84       	ldd	r14, Y+8	; 0x08
     a5e:	f9 84       	ldd	r15, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a60:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     a62:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     a64:	2a 85       	ldd	r18, Y+10	; 0x0a
     a66:	3b 85       	ldd	r19, Y+11	; 0x0b
     a68:	4c 85       	ldd	r20, Y+12	; 0x0c
     a6a:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     a6c:	78 94       	sei
  
  while(curr_val<smpl_val){
    curr_ss   = Timebase_Timer_Get_SubSeconds();
	curr_s    = Timebase_Timer_Get_Seconds();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     a6e:	69 81       	ldd	r22, Y+1	; 0x01
     a70:	7a 81       	ldd	r23, Y+2	; 0x02
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__mulsi3>
	curr_val += curr_ss;
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	6e 0d       	add	r22, r14
     a80:	7f 1d       	adc	r23, r15
     a82:	80 1f       	adc	r24, r16
     a84:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     a86:	66 15       	cp	r22, r6
     a88:	77 05       	cpc	r23, r7
     a8a:	88 05       	cpc	r24, r8
     a8c:	99 05       	cpc	r25, r9
     a8e:	2c f3       	brlt	.-54     	; 0xa5a <Timebase_Timer_Delay_SubSeconds+0x6c>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	cf 90       	pop	r12
     aa0:	bf 90       	pop	r11
     aa2:	af 90       	pop	r10
     aa4:	9f 90       	pop	r9
     aa6:	8f 90       	pop	r8
     aa8:	7f 90       	pop	r7
     aaa:	6f 90       	pop	r6
     aac:	08 95       	ret

00000aae <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     aae:	bc 01       	movw	r22, r24

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ab0:	e0 91 49 01 	lds	r30, 0x0149
     ab4:	f0 91 4a 01 	lds	r31, 0x014A

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ab8:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     aba:	80 85       	ldd	r24, Z+8	; 0x08
     abc:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     abe:	78 94       	sei
  
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     ac0:	24 81       	ldd	r18, Z+4	; 0x04
     ac2:	35 81       	ldd	r19, Z+5	; 0x05
     ac4:	46 81       	ldd	r20, Z+6	; 0x06
     ac6:	57 81       	ldd	r21, Z+7	; 0x07
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	82 17       	cp	r24, r18
     ace:	93 07       	cpc	r25, r19
     ad0:	a4 07       	cpc	r26, r20
     ad2:	b5 07       	cpc	r27, r21
     ad4:	89 f7       	brne	.-30     	; 0xab8 <Timebase_Timer_Await_SubSeconds+0xa>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     ad6:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     ad8:	80 85       	ldd	r24, Z+8	; 0x08
     ada:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     adc:	78 94       	sei


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     ade:	86 0f       	add	r24, r22
     ae0:	97 1f       	adc	r25, r23
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	84 83       	std	Z+4, r24	; 0x04
     ae8:	95 83       	std	Z+5, r25	; 0x05
     aea:	a6 83       	std	Z+6, r26	; 0x06
     aec:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     aee:	24 81       	ldd	r18, Z+4	; 0x04
     af0:	35 81       	ldd	r19, Z+5	; 0x05
     af2:	46 81       	ldd	r20, Z+6	; 0x06
     af4:	57 81       	ldd	r21, Z+7	; 0x07
     af6:	81 81       	ldd	r24, Z+1	; 0x01
     af8:	92 81       	ldd	r25, Z+2	; 0x02
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	28 17       	cp	r18, r24
     b00:	39 07       	cpc	r19, r25
     b02:	4a 07       	cpc	r20, r26
     b04:	5b 07       	cpc	r21, r27
     b06:	84 f0       	brlt	.+32     	; 0xb28 <Timebase_Timer_Await_SubSeconds+0x7a>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     b08:	24 81       	ldd	r18, Z+4	; 0x04
     b0a:	35 81       	ldd	r19, Z+5	; 0x05
     b0c:	46 81       	ldd	r20, Z+6	; 0x06
     b0e:	57 81       	ldd	r21, Z+7	; 0x07
     b10:	81 81       	ldd	r24, Z+1	; 0x01
     b12:	92 81       	ldd	r25, Z+2	; 0x02
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	28 1b       	sub	r18, r24
     b1a:	39 0b       	sbc	r19, r25
     b1c:	4a 0b       	sbc	r20, r26
     b1e:	5b 0b       	sbc	r21, r27
     b20:	24 83       	std	Z+4, r18	; 0x04
     b22:	35 83       	std	Z+5, r19	; 0x05
     b24:	46 83       	std	Z+6, r20	; 0x06
     b26:	57 83       	std	Z+7, r21	; 0x07
     b28:	08 95       	ret

00000b2a <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b2a:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b2c:	e0 91 49 01 	lds	r30, 0x0149
     b30:	f0 91 4a 01 	lds	r31, 0x014A
     b34:	22 85       	ldd	r18, Z+10	; 0x0a
     b36:	33 85       	ldd	r19, Z+11	; 0x0b
     b38:	44 85       	ldd	r20, Z+12	; 0x0c
     b3a:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b3c:	78 94       	sei


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
     b3e:	a0 e0       	ldi	r26, 0x00	; 0
     b40:	b0 e0       	ldi	r27, 0x00	; 0
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	a4 1f       	adc	r26, r20
     b48:	b5 1f       	adc	r27, r21
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e0       	ldi	r21, 0x00	; 0
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b54:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b56:	22 85       	ldd	r18, Z+10	; 0x0a
     b58:	33 85       	ldd	r19, Z+11	; 0x0b
     b5a:	44 85       	ldd	r20, Z+12	; 0x0c
     b5c:	55 85       	ldd	r21, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     b5e:	78 94       	sei

void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  target_s = Timebase_Timer_Get_Seconds();
  target_s += value;
  while(target_s > curr_s){
     b60:	28 17       	cp	r18, r24
     b62:	39 07       	cpc	r19, r25
     b64:	4a 07       	cpc	r20, r26
     b66:	5b 07       	cpc	r21, r27
     b68:	ac f3       	brlt	.-22     	; 0xb54 <Timebase_Timer_Delay_Seconds+0x2a>
    curr_s = Timebase_Timer_Get_Seconds();
  }
}
     b6a:	08 95       	ret

00000b6c <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     b6c:	e0 91 49 01 	lds	r30, 0x0149
     b70:	f0 91 4a 01 	lds	r31, 0x014A
     b74:	16 86       	std	Z+14, r1	; 0x0e
     b76:	17 86       	std	Z+15, r1	; 0x0f
     b78:	10 8a       	std	Z+16, r1	; 0x10
     b7a:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     b7c:	12 8a       	std	Z+18, r1	; 0x12
     b7e:	13 8a       	std	Z+19, r1	; 0x13
     b80:	14 8a       	std	Z+20, r1	; 0x14
     b82:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     b84:	16 8a       	std	Z+22, r1	; 0x16
}
     b86:	08 95       	ret

00000b88 <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     b88:	e0 91 49 01 	lds	r30, 0x0149
     b8c:	f0 91 4a 01 	lds	r31, 0x014A
     b90:	86 89       	ldd	r24, Z+22	; 0x16
     b92:	88 23       	and	r24, r24
     b94:	b1 f4       	brne	.+44     	; 0xbc2 <Timebase_Window_Timer_Start+0x3a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     b96:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     b98:	82 85       	ldd	r24, Z+10	; 0x0a
     b9a:	93 85       	ldd	r25, Z+11	; 0x0b
     b9c:	a4 85       	ldd	r26, Z+12	; 0x0c
     b9e:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     ba0:	78 94       	sei
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     ba2:	86 87       	std	Z+14, r24	; 0x0e
     ba4:	97 87       	std	Z+15, r25	; 0x0f
     ba6:	a0 8b       	std	Z+16, r26	; 0x10
     ba8:	b1 8b       	std	Z+17, r27	; 0x11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     baa:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bac:	80 85       	ldd	r24, Z+8	; 0x08
     bae:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bb0:	78 94       	sei
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     bb2:	a0 e0       	ldi	r26, 0x00	; 0
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	82 8b       	std	Z+18, r24	; 0x12
     bb8:	93 8b       	std	Z+19, r25	; 0x13
     bba:	a4 8b       	std	Z+20, r26	; 0x14
     bbc:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	86 8b       	std	Z+22, r24	; 0x16
     bc2:	08 95       	ret

00000bc4 <Timebase_Window_Timer_Get_Interval>:
  }
}


int32_t Timebase_Window_Timer_Get_Interval(void){
     bc4:	ef 92       	push	r14
     bc6:	ff 92       	push	r15
     bc8:	0f 93       	push	r16
     bca:	1f 93       	push	r17
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     bd0:	c0 91 49 01 	lds	r28, 0x0149
     bd4:	d0 91 4a 01 	lds	r29, 0x014A
     bd8:	8e 89       	ldd	r24, Y+22	; 0x16
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <Timebase_Window_Timer_Get_Interval+0x22>
     bde:	ee 24       	eor	r14, r14
     be0:	ff 24       	eor	r15, r15
     be2:	87 01       	movw	r16, r14
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <Timebase_Window_Timer_Get_Interval+0x70>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     be6:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
     be8:	2a 85       	ldd	r18, Y+10	; 0x0a
     bea:	3b 85       	ldd	r19, Y+11	; 0x0b
     bec:	4c 85       	ldd	r20, Y+12	; 0x0c
     bee:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf0:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     bf2:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
     bf4:	88 85       	ldd	r24, Y+8	; 0x08
     bf6:	99 85       	ldd	r25, Y+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     bf8:	78 94       	sei

int32_t Timebase_Window_Timer_Get_Interval(void){
  int32_t curr_ss = 0, curr_s = 0;
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    curr_s = Timebase_Timer_Get_Seconds();
    curr_ss = Timebase_Timer_Get_SubSeconds();
     bfa:	7c 01       	movw	r14, r24
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     c00:	8e 85       	ldd	r24, Y+14	; 0x0e
     c02:	9f 85       	ldd	r25, Y+15	; 0x0f
     c04:	a8 89       	ldd	r26, Y+16	; 0x10
     c06:	b9 89       	ldd	r27, Y+17	; 0x11
     c08:	28 1b       	sub	r18, r24
     c0a:	39 0b       	sbc	r19, r25
     c0c:	4a 0b       	sbc	r20, r26
     c0e:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     c10:	69 81       	ldd	r22, Y+1	; 0x01
     c12:	7a 81       	ldd	r23, Y+2	; 0x02
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__mulsi3>
	curr_s += curr_ss;
     c1c:	2a 89       	ldd	r18, Y+18	; 0x12
     c1e:	3b 89       	ldd	r19, Y+19	; 0x13
     c20:	4c 89       	ldd	r20, Y+20	; 0x14
     c22:	5d 89       	ldd	r21, Y+21	; 0x15
     c24:	e2 1a       	sub	r14, r18
     c26:	f3 0a       	sbc	r15, r19
     c28:	04 0b       	sbc	r16, r20
     c2a:	15 0b       	sbc	r17, r21
     c2c:	e6 0e       	add	r14, r22
     c2e:	f7 1e       	adc	r15, r23
     c30:	08 1f       	adc	r16, r24
     c32:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     c34:	b7 01       	movw	r22, r14
     c36:	c8 01       	movw	r24, r16
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     c46:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Timebase_Window_Timer_Get_Interval>
     c4a:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     c4c:	e0 91 49 01 	lds	r30, 0x0149
     c50:	f0 91 4a 01 	lds	r31, 0x014A
     c54:	86 89       	ldd	r24, Z+22	; 0x16
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	49 f4       	brne	.+18     	; 0xc6c <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  }
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     c5a:	16 86       	std	Z+14, r1	; 0x0e
     c5c:	17 86       	std	Z+15, r1	; 0x0f
     c5e:	10 8a       	std	Z+16, r1	; 0x10
     c60:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     c62:	12 8a       	std	Z+18, r1	; 0x12
     c64:	13 8a       	std	Z+19, r1	; 0x13
     c66:	14 8a       	std	Z+20, r1	; 0x14
     c68:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     c6a:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     c6c:	82 2f       	mov	r24, r18
     c6e:	08 95       	ret

00000c70 <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     c70:	e0 91 49 01 	lds	r30, 0x0149
     c74:	f0 91 4a 01 	lds	r31, 0x014A
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	29 e1       	ldi	r18, 0x19	; 25
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	ac 01       	movw	r20, r24
     c82:	42 9f       	mul	r20, r18
     c84:	c0 01       	movw	r24, r0
     c86:	43 9f       	mul	r20, r19
     c88:	90 0d       	add	r25, r0
     c8a:	52 9f       	mul	r21, r18
     c8c:	90 0d       	add	r25, r0
     c8e:	11 24       	eor	r1, r1
     c90:	e8 0f       	add	r30, r24
     c92:	f9 1f       	adc	r31, r25
     c94:	80 81       	ld	r24, Z
     c96:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     c98:	8f 70       	andi	r24, 0x0F	; 15
     c9a:	08 95       	ret

00000c9c <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c9c:	e0 91 49 01 	lds	r30, 0x0149
     ca0:	f0 91 4a 01 	lds	r31, 0x014A
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	29 e1       	ldi	r18, 0x19	; 25
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	ac 01       	movw	r20, r24
     cae:	42 9f       	mul	r20, r18
     cb0:	c0 01       	movw	r24, r0
     cb2:	43 9f       	mul	r20, r19
     cb4:	90 0d       	add	r25, r0
     cb6:	52 9f       	mul	r21, r18
     cb8:	90 0d       	add	r25, r0
     cba:	11 24       	eor	r1, r1
     cbc:	e8 0f       	add	r30, r24
     cbe:	f9 1f       	adc	r31, r25
     cc0:	6f 70       	andi	r22, 0x0F	; 15
     cc2:	66 0f       	add	r22, r22
     cc4:	80 81       	ld	r24, Z
     cc6:	81 7e       	andi	r24, 0xE1	; 225
     cc8:	86 2b       	or	r24, r22
     cca:	80 83       	st	Z, r24
}
     ccc:	08 95       	ret

00000cce <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     cce:	e0 91 49 01 	lds	r30, 0x0149
     cd2:	f0 91 4a 01 	lds	r31, 0x014A
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	29 e1       	ldi	r18, 0x19	; 25
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	ac 01       	movw	r20, r24
     cde:	42 9f       	mul	r20, r18
     ce0:	c0 01       	movw	r24, r0
     ce2:	43 9f       	mul	r20, r19
     ce4:	90 0d       	add	r25, r0
     ce6:	52 9f       	mul	r21, r18
     ce8:	90 0d       	add	r25, r0
     cea:	11 24       	eor	r1, r1
     cec:	e8 0f       	add	r30, r24
     cee:	f9 1f       	adc	r31, r25
     cf0:	df 01       	movw	r26, r30
     cf2:	9a 96       	adiw	r26, 0x2a	; 42
     cf4:	62 a5       	ldd	r22, Z+42	; 0x2a
     cf6:	11 96       	adiw	r26, 0x01	; 1
     cf8:	7c 91       	ld	r23, X
     cfa:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     cfc:	12 96       	adiw	r26, 0x02	; 2
     cfe:	8c 91       	ld	r24, X
     d00:	12 97       	sbiw	r26, 0x02	; 2
     d02:	13 96       	adiw	r26, 0x03	; 3
     d04:	9c 91       	ld	r25, X
     d06:	08 95       	ret

00000d08 <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     d08:	e0 91 49 01 	lds	r30, 0x0149
     d0c:	f0 91 4a 01 	lds	r31, 0x014A
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	29 e1       	ldi	r18, 0x19	; 25
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	dc 01       	movw	r26, r24
     d18:	a2 9f       	mul	r26, r18
     d1a:	c0 01       	movw	r24, r0
     d1c:	a3 9f       	mul	r26, r19
     d1e:	90 0d       	add	r25, r0
     d20:	b2 9f       	mul	r27, r18
     d22:	90 0d       	add	r25, r0
     d24:	11 24       	eor	r1, r1
     d26:	e8 0f       	add	r30, r24
     d28:	f9 1f       	adc	r31, r25
     d2a:	42 a7       	std	Z+42, r20	; 0x2a
     d2c:	53 a7       	std	Z+43, r21	; 0x2b
     d2e:	64 a7       	std	Z+44, r22	; 0x2c
     d30:	75 a7       	std	Z+45, r23	; 0x2d
}
     d32:	08 95       	ret

00000d34 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     d34:	e0 91 49 01 	lds	r30, 0x0149
     d38:	f0 91 4a 01 	lds	r31, 0x014A
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	29 e1       	ldi	r18, 0x19	; 25
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	ac 01       	movw	r20, r24
     d44:	42 9f       	mul	r20, r18
     d46:	c0 01       	movw	r24, r0
     d48:	43 9f       	mul	r20, r19
     d4a:	90 0d       	add	r25, r0
     d4c:	52 9f       	mul	r21, r18
     d4e:	90 0d       	add	r25, r0
     d50:	11 24       	eor	r1, r1
     d52:	e8 0f       	add	r30, r24
     d54:	f9 1f       	adc	r31, r25
     d56:	df 01       	movw	r26, r30
     d58:	5a 96       	adiw	r26, 0x1a	; 26
     d5a:	62 8d       	ldd	r22, Z+26	; 0x1a
     d5c:	11 96       	adiw	r26, 0x01	; 1
     d5e:	7c 91       	ld	r23, X
     d60:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     d62:	12 96       	adiw	r26, 0x02	; 2
     d64:	8c 91       	ld	r24, X
     d66:	12 97       	sbiw	r26, 0x02	; 2
     d68:	13 96       	adiw	r26, 0x03	; 3
     d6a:	9c 91       	ld	r25, X
     d6c:	08 95       	ret

00000d6e <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     d6e:	e0 91 49 01 	lds	r30, 0x0149
     d72:	f0 91 4a 01 	lds	r31, 0x014A
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	29 e1       	ldi	r18, 0x19	; 25
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	ac 01       	movw	r20, r24
     d7e:	42 9f       	mul	r20, r18
     d80:	c0 01       	movw	r24, r0
     d82:	43 9f       	mul	r20, r19
     d84:	90 0d       	add	r25, r0
     d86:	52 9f       	mul	r21, r18
     d88:	90 0d       	add	r25, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	e8 0f       	add	r30, r24
     d8e:	f9 1f       	adc	r31, r25
     d90:	df 01       	movw	r26, r30
     d92:	5e 96       	adiw	r26, 0x1e	; 30
     d94:	66 8d       	ldd	r22, Z+30	; 0x1e
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	7c 91       	ld	r23, X
     d9a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     d9c:	12 96       	adiw	r26, 0x02	; 2
     d9e:	8c 91       	ld	r24, X
     da0:	12 97       	sbiw	r26, 0x02	; 2
     da2:	13 96       	adiw	r26, 0x03	; 3
     da4:	9c 91       	ld	r25, X
     da6:	08 95       	ret

00000da8 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     da8:	e0 91 49 01 	lds	r30, 0x0149
     dac:	f0 91 4a 01 	lds	r31, 0x014A
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	29 e1       	ldi	r18, 0x19	; 25
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	dc 01       	movw	r26, r24
     db8:	a2 9f       	mul	r26, r18
     dba:	c0 01       	movw	r24, r0
     dbc:	a3 9f       	mul	r26, r19
     dbe:	90 0d       	add	r25, r0
     dc0:	b2 9f       	mul	r27, r18
     dc2:	90 0d       	add	r25, r0
     dc4:	11 24       	eor	r1, r1
     dc6:	e8 0f       	add	r30, r24
     dc8:	f9 1f       	adc	r31, r25
     dca:	42 8f       	std	Z+26, r20	; 0x1a
     dcc:	53 8f       	std	Z+27, r21	; 0x1b
     dce:	64 8f       	std	Z+28, r22	; 0x1c
     dd0:	75 8f       	std	Z+29, r23	; 0x1d
}
     dd2:	08 95       	ret

00000dd4 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     dd4:	e0 91 49 01 	lds	r30, 0x0149
     dd8:	f0 91 4a 01 	lds	r31, 0x014A
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	29 e1       	ldi	r18, 0x19	; 25
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	dc 01       	movw	r26, r24
     de4:	a2 9f       	mul	r26, r18
     de6:	c0 01       	movw	r24, r0
     de8:	a3 9f       	mul	r26, r19
     dea:	90 0d       	add	r25, r0
     dec:	b2 9f       	mul	r27, r18
     dee:	90 0d       	add	r25, r0
     df0:	11 24       	eor	r1, r1
     df2:	e8 0f       	add	r30, r24
     df4:	f9 1f       	adc	r31, r25
     df6:	46 8f       	std	Z+30, r20	; 0x1e
     df8:	57 8f       	std	Z+31, r21	; 0x1f
     dfa:	60 a3       	std	Z+32, r22	; 0x20
     dfc:	71 a3       	std	Z+33, r23	; 0x21
}
     dfe:	08 95       	ret

00000e00 <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     e00:	e0 91 49 01 	lds	r30, 0x0149
     e04:	f0 91 4a 01 	lds	r31, 0x014A
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	29 e1       	ldi	r18, 0x19	; 25
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	ac 01       	movw	r20, r24
     e10:	42 9f       	mul	r20, r18
     e12:	c0 01       	movw	r24, r0
     e14:	43 9f       	mul	r20, r19
     e16:	90 0d       	add	r25, r0
     e18:	52 9f       	mul	r21, r18
     e1a:	90 0d       	add	r25, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	e8 0f       	add	r30, r24
     e20:	f9 1f       	adc	r31, r25
     e22:	df 01       	movw	r26, r30
     e24:	92 96       	adiw	r26, 0x22	; 34
     e26:	62 a1       	ldd	r22, Z+34	; 0x22
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	7c 91       	ld	r23, X
     e2c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	8c 91       	ld	r24, X
     e32:	12 97       	sbiw	r26, 0x02	; 2
     e34:	13 96       	adiw	r26, 0x03	; 3
     e36:	9c 91       	ld	r25, X
     e38:	08 95       	ret

00000e3a <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     e3a:	e0 91 49 01 	lds	r30, 0x0149
     e3e:	f0 91 4a 01 	lds	r31, 0x014A
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	29 e1       	ldi	r18, 0x19	; 25
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	dc 01       	movw	r26, r24
     e4a:	a2 9f       	mul	r26, r18
     e4c:	c0 01       	movw	r24, r0
     e4e:	a3 9f       	mul	r26, r19
     e50:	90 0d       	add	r25, r0
     e52:	b2 9f       	mul	r27, r18
     e54:	90 0d       	add	r25, r0
     e56:	11 24       	eor	r1, r1
     e58:	e8 0f       	add	r30, r24
     e5a:	f9 1f       	adc	r31, r25
     e5c:	42 a3       	std	Z+34, r20	; 0x22
     e5e:	53 a3       	std	Z+35, r21	; 0x23
     e60:	64 a3       	std	Z+36, r22	; 0x24
     e62:	75 a3       	std	Z+37, r23	; 0x25
}
     e64:	08 95       	ret

00000e66 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     e66:	e0 91 49 01 	lds	r30, 0x0149
     e6a:	f0 91 4a 01 	lds	r31, 0x014A
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	29 e1       	ldi	r18, 0x19	; 25
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	ac 01       	movw	r20, r24
     e76:	42 9f       	mul	r20, r18
     e78:	c0 01       	movw	r24, r0
     e7a:	43 9f       	mul	r20, r19
     e7c:	90 0d       	add	r25, r0
     e7e:	52 9f       	mul	r21, r18
     e80:	90 0d       	add	r25, r0
     e82:	11 24       	eor	r1, r1
     e84:	e8 0f       	add	r30, r24
     e86:	f9 1f       	adc	r31, r25
     e88:	df 01       	movw	r26, r30
     e8a:	96 96       	adiw	r26, 0x26	; 38
     e8c:	66 a1       	ldd	r22, Z+38	; 0x26
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	7c 91       	ld	r23, X
     e92:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     e94:	12 96       	adiw	r26, 0x02	; 2
     e96:	8c 91       	ld	r24, X
     e98:	12 97       	sbiw	r26, 0x02	; 2
     e9a:	13 96       	adiw	r26, 0x03	; 3
     e9c:	9c 91       	ld	r25, X
     e9e:	08 95       	ret

00000ea0 <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
     ea0:	e0 91 49 01 	lds	r30, 0x0149
     ea4:	f0 91 4a 01 	lds	r31, 0x014A
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	29 e1       	ldi	r18, 0x19	; 25
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	dc 01       	movw	r26, r24
     eb0:	a2 9f       	mul	r26, r18
     eb2:	c0 01       	movw	r24, r0
     eb4:	a3 9f       	mul	r26, r19
     eb6:	90 0d       	add	r25, r0
     eb8:	b2 9f       	mul	r27, r18
     eba:	90 0d       	add	r25, r0
     ebc:	11 24       	eor	r1, r1
     ebe:	e8 0f       	add	r30, r24
     ec0:	f9 1f       	adc	r31, r25
     ec2:	46 a3       	std	Z+38, r20	; 0x26
     ec4:	57 a3       	std	Z+39, r21	; 0x27
     ec6:	60 a7       	std	Z+40, r22	; 0x28
     ec8:	71 a7       	std	Z+41, r23	; 0x29
}
     eca:	08 95       	ret

00000ecc <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     ecc:	e0 91 49 01 	lds	r30, 0x0149
     ed0:	f0 91 4a 01 	lds	r31, 0x014A
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	29 e1       	ldi	r18, 0x19	; 25
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	ac 01       	movw	r20, r24
     edc:	42 9f       	mul	r20, r18
     ede:	c0 01       	movw	r24, r0
     ee0:	43 9f       	mul	r20, r19
     ee2:	90 0d       	add	r25, r0
     ee4:	52 9f       	mul	r21, r18
     ee6:	90 0d       	add	r25, r0
     ee8:	11 24       	eor	r1, r1
     eea:	e8 0f       	add	r30, r24
     eec:	f9 1f       	adc	r31, r25
     eee:	df 01       	movw	r26, r30
     ef0:	9e 96       	adiw	r26, 0x2e	; 46
     ef2:	66 a5       	ldd	r22, Z+46	; 0x2e
     ef4:	11 96       	adiw	r26, 0x01	; 1
     ef6:	7c 91       	ld	r23, X
     ef8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     efa:	12 96       	adiw	r26, 0x02	; 2
     efc:	8c 91       	ld	r24, X
     efe:	12 97       	sbiw	r26, 0x02	; 2
     f00:	13 96       	adiw	r26, 0x03	; 3
     f02:	9c 91       	ld	r25, X
     f04:	08 95       	ret

00000f06 <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     f06:	e0 91 49 01 	lds	r30, 0x0149
     f0a:	f0 91 4a 01 	lds	r31, 0x014A
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	29 e1       	ldi	r18, 0x19	; 25
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	dc 01       	movw	r26, r24
     f16:	a2 9f       	mul	r26, r18
     f18:	c0 01       	movw	r24, r0
     f1a:	a3 9f       	mul	r26, r19
     f1c:	90 0d       	add	r25, r0
     f1e:	b2 9f       	mul	r27, r18
     f20:	90 0d       	add	r25, r0
     f22:	11 24       	eor	r1, r1
     f24:	e8 0f       	add	r30, r24
     f26:	f9 1f       	adc	r31, r25
     f28:	46 a7       	std	Z+46, r20	; 0x2e
     f2a:	57 a7       	std	Z+47, r21	; 0x2f
     f2c:	60 ab       	std	Z+48, r22	; 0x30
     f2e:	71 ab       	std	Z+49, r23	; 0x31
}
     f30:	08 95       	ret

00000f32 <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     f32:	e0 91 49 01 	lds	r30, 0x0149
     f36:	f0 91 4a 01 	lds	r31, 0x014A
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	29 e1       	ldi	r18, 0x19	; 25
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	ac 01       	movw	r20, r24
     f44:	42 9f       	mul	r20, r18
     f46:	c0 01       	movw	r24, r0
     f48:	43 9f       	mul	r20, r19
     f4a:	90 0d       	add	r25, r0
     f4c:	52 9f       	mul	r21, r18
     f4e:	90 0d       	add	r25, r0
     f50:	11 24       	eor	r1, r1
     f52:	e8 0f       	add	r30, r24
     f54:	f9 1f       	adc	r31, r25
     f56:	80 81       	ld	r24, Z
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     f58:	81 70       	andi	r24, 0x01	; 1
     f5a:	08 95       	ret

00000f5c <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     f5c:	e0 91 49 01 	lds	r30, 0x0149
     f60:	f0 91 4a 01 	lds	r31, 0x014A
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	29 e1       	ldi	r18, 0x19	; 25
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	ac 01       	movw	r20, r24
     f6e:	42 9f       	mul	r20, r18
     f70:	c0 01       	movw	r24, r0
     f72:	43 9f       	mul	r20, r19
     f74:	90 0d       	add	r25, r0
     f76:	52 9f       	mul	r21, r18
     f78:	90 0d       	add	r25, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	e8 0f       	add	r30, r24
     f7e:	f9 1f       	adc	r31, r25
     f80:	80 81       	ld	r24, Z
     f82:	81 60       	ori	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24
}
     f86:	08 95       	ret

00000f88 <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     f88:	e0 91 49 01 	lds	r30, 0x0149
     f8c:	f0 91 4a 01 	lds	r31, 0x014A
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	01 96       	adiw	r24, 0x01	; 1
     f94:	29 e1       	ldi	r18, 0x19	; 25
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	ac 01       	movw	r20, r24
     f9a:	42 9f       	mul	r20, r18
     f9c:	c0 01       	movw	r24, r0
     f9e:	43 9f       	mul	r20, r19
     fa0:	90 0d       	add	r25, r0
     fa2:	52 9f       	mul	r21, r18
     fa4:	90 0d       	add	r25, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	e8 0f       	add	r30, r24
     faa:	f9 1f       	adc	r31, r25
     fac:	80 81       	ld	r24, Z
     fae:	8e 7f       	andi	r24, 0xFE	; 254
     fb0:	80 83       	st	Z, r24
}
     fb2:	08 95       	ret

00000fb4 <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     fb4:	60 91 49 01 	lds	r22, 0x0149
     fb8:	70 91 4a 01 	lds	r23, 0x014A
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	01 96       	adiw	r24, 0x01	; 1
     fc0:	49 e1       	ldi	r20, 0x19	; 25
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	84 9f       	mul	r24, r20
     fc6:	d0 01       	movw	r26, r0
     fc8:	85 9f       	mul	r24, r21
     fca:	b0 0d       	add	r27, r0
     fcc:	94 9f       	mul	r25, r20
     fce:	b0 0d       	add	r27, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	a6 0f       	add	r26, r22
     fd6:	b7 1f       	adc	r27, r23
     fd8:	2c 91       	ld	r18, X
     fda:	21 7e       	andi	r18, 0xE1	; 225
     fdc:	2c 93       	st	X, r18
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
     fde:	84 9f       	mul	r24, r20
     fe0:	f0 01       	movw	r30, r0
     fe2:	85 9f       	mul	r24, r21
     fe4:	f0 0d       	add	r31, r0
     fe6:	94 9f       	mul	r25, r20
     fe8:	f0 0d       	add	r31, r0
     fea:	11 24       	eor	r1, r1
     fec:	e6 0f       	add	r30, r22
     fee:	f7 1f       	adc	r31, r23
     ff0:	12 a6       	std	Z+42, r1	; 0x2a
     ff2:	13 a6       	std	Z+43, r1	; 0x2b
     ff4:	14 a6       	std	Z+44, r1	; 0x2c
     ff6:	15 a6       	std	Z+45, r1	; 0x2d
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     ff8:	12 8e       	std	Z+26, r1	; 0x1a
     ffa:	13 8e       	std	Z+27, r1	; 0x1b
     ffc:	14 8e       	std	Z+28, r1	; 0x1c
     ffe:	15 8e       	std	Z+29, r1	; 0x1d
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    1000:	16 8e       	std	Z+30, r1	; 0x1e
    1002:	17 8e       	std	Z+31, r1	; 0x1f
    1004:	10 a2       	std	Z+32, r1	; 0x20
    1006:	11 a2       	std	Z+33, r1	; 0x21
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    1008:	12 a2       	std	Z+34, r1	; 0x22
    100a:	13 a2       	std	Z+35, r1	; 0x23
    100c:	14 a2       	std	Z+36, r1	; 0x24
    100e:	15 a2       	std	Z+37, r1	; 0x25
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    1010:	16 a2       	std	Z+38, r1	; 0x26
    1012:	17 a2       	std	Z+39, r1	; 0x27
    1014:	10 a6       	std	Z+40, r1	; 0x28
    1016:	11 a6       	std	Z+41, r1	; 0x29
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1018:	16 a6       	std	Z+46, r1	; 0x2e
    101a:	17 a6       	std	Z+47, r1	; 0x2f
    101c:	10 aa       	std	Z+48, r1	; 0x30
    101e:	11 aa       	std	Z+49, r1	; 0x31
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1020:	8c 91       	ld	r24, X
    1022:	8e 7f       	andi	r24, 0xFE	; 254
    1024:	8c 93       	st	X, r24
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
    1026:	08 95       	ret

00001028 <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    1028:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Timebase_UpCounter_SS_Reset>
}
    102c:	08 95       	ret

0000102e <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    102e:	e0 91 49 01 	lds	r30, 0x0149
    1032:	f0 91 4a 01 	lds	r31, 0x014A
    1036:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	29 e1       	ldi	r18, 0x19	; 25
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	ac 01       	movw	r20, r24
    1040:	42 9f       	mul	r20, r18
    1042:	c0 01       	movw	r24, r0
    1044:	43 9f       	mul	r20, r19
    1046:	90 0d       	add	r25, r0
    1048:	52 9f       	mul	r21, r18
    104a:	90 0d       	add	r25, r0
    104c:	11 24       	eor	r1, r1
    104e:	e8 0f       	add	r30, r24
    1050:	f9 1f       	adc	r31, r25
    1052:	90 81       	ld	r25, Z
    1054:	89 2f       	mov	r24, r25
    1056:	86 95       	lsr	r24
    1058:	8f 70       	andi	r24, 0x0F	; 15
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	19 f0       	breq	.+6      	; 0x1064 <Timebase_UpCounter_SS_Start+0x36>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    105e:	91 7e       	andi	r25, 0xE1	; 225
    1060:	92 60       	ori	r25, 0x02	; 2
    1062:	90 83       	st	Z, r25
    1064:	08 95       	ret

00001066 <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    1066:	e0 91 49 01 	lds	r30, 0x0149
    106a:	f0 91 4a 01 	lds	r31, 0x014A
    106e:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	29 e1       	ldi	r18, 0x19	; 25
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	ac 01       	movw	r20, r24
    1078:	42 9f       	mul	r20, r18
    107a:	c0 01       	movw	r24, r0
    107c:	43 9f       	mul	r20, r19
    107e:	90 0d       	add	r25, r0
    1080:	52 9f       	mul	r21, r18
    1082:	90 0d       	add	r25, r0
    1084:	11 24       	eor	r1, r1
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	90 81       	ld	r25, Z
    108c:	89 2f       	mov	r24, r25
    108e:	86 95       	lsr	r24
    1090:	8f 70       	andi	r24, 0x0F	; 15
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	19 f0       	breq	.+6      	; 0x109c <Timebase_UpCounter_SS_Stop+0x36>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1096:	91 7e       	andi	r25, 0xE1	; 225
    1098:	94 60       	ori	r25, 0x04	; 4
    109a:	90 83       	st	Z, r25
    109c:	08 95       	ret

0000109e <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    10a2:	a0 91 49 01 	lds	r26, 0x0149
    10a6:	b0 91 4a 01 	lds	r27, 0x014A
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    10ae:	2f 5f       	subi	r18, 0xFF	; 255
    10b0:	3f 4f       	sbci	r19, 0xFF	; 255
    10b2:	c9 e1       	ldi	r28, 0x19	; 25
    10b4:	d0 e0       	ldi	r29, 0x00	; 0
    10b6:	2c 9f       	mul	r18, r28
    10b8:	f0 01       	movw	r30, r0
    10ba:	2d 9f       	mul	r18, r29
    10bc:	f0 0d       	add	r31, r0
    10be:	3c 9f       	mul	r19, r28
    10c0:	f0 0d       	add	r31, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	21 50       	subi	r18, 0x01	; 1
    10c6:	30 40       	sbci	r19, 0x00	; 0
    10c8:	ea 0f       	add	r30, r26
    10ca:	fb 1f       	adc	r31, r27
    10cc:	80 81       	ld	r24, Z
    10ce:	86 95       	lsr	r24
    10d0:	8f 70       	andi	r24, 0x0F	; 15
    10d2:	99 f5       	brne	.+102    	; 0x113a <Timebase_UpCounter_SS_Set_Securely+0x9c>
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    10d4:	2c 9f       	mul	r18, r28
    10d6:	f0 01       	movw	r30, r0
    10d8:	2d 9f       	mul	r18, r29
    10da:	f0 0d       	add	r31, r0
    10dc:	3c 9f       	mul	r19, r28
    10de:	f0 0d       	add	r31, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	ea 0f       	add	r30, r26
    10e4:	fb 1f       	adc	r31, r27
    10e6:	12 a6       	std	Z+42, r1	; 0x2a
    10e8:	13 a6       	std	Z+43, r1	; 0x2b
    10ea:	14 a6       	std	Z+44, r1	; 0x2c
    10ec:	15 a6       	std	Z+45, r1	; 0x2d
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    10ee:	16 a2       	std	Z+38, r1	; 0x26
    10f0:	17 a2       	std	Z+39, r1	; 0x27
    10f2:	10 a6       	std	Z+40, r1	; 0x28
    10f4:	11 a6       	std	Z+41, r1	; 0x29
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
    10f6:	42 a3       	std	Z+34, r20	; 0x22
    10f8:	53 a3       	std	Z+35, r21	; 0x23
    10fa:	64 a3       	std	Z+36, r22	; 0x24
    10fc:	75 a3       	std	Z+37, r23	; 0x25

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    10fe:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1100:	1a 96       	adiw	r26, 0x0a	; 10
    1102:	4d 91       	ld	r20, X+
    1104:	5d 91       	ld	r21, X+
    1106:	6d 91       	ld	r22, X+
    1108:	7c 91       	ld	r23, X
    110a:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    110c:	78 94       	sei
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    110e:	2f 5f       	subi	r18, 0xFF	; 255
    1110:	3f 4f       	sbci	r19, 0xFF	; 255
    1112:	89 e1       	ldi	r24, 0x19	; 25
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	28 9f       	mul	r18, r24
    1118:	f0 01       	movw	r30, r0
    111a:	29 9f       	mul	r18, r25
    111c:	f0 0d       	add	r31, r0
    111e:	38 9f       	mul	r19, r24
    1120:	f0 0d       	add	r31, r0
    1122:	11 24       	eor	r1, r1
    1124:	ea 0f       	add	r30, r26
    1126:	fb 1f       	adc	r31, r27
    1128:	90 81       	ld	r25, Z
    112a:	89 2f       	mov	r24, r25
    112c:	86 95       	lsr	r24
    112e:	8f 70       	andi	r24, 0x0F	; 15
    1130:	81 30       	cpi	r24, 0x01	; 1
    1132:	19 f0       	breq	.+6      	; 0x113a <Timebase_UpCounter_SS_Set_Securely+0x9c>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1134:	91 7e       	andi	r25, 0xE1	; 225
    1136:	92 60       	ori	r25, 0x02	; 2
    1138:	90 83       	st	Z, r25
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_SS_Start(window);
  }
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	08 95       	ret

00001140 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	d8 2e       	mov	r13, r24
    114c:	7a 01       	movw	r14, r20
    114e:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
    1150:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
    1154:	8d 2d       	mov	r24, r13
    1156:	b8 01       	movw	r22, r16
    1158:	a7 01       	movw	r20, r14
    115a:	0e 94 4f 08 	call	0x109e	; 0x109e <Timebase_UpCounter_SS_Set_Securely>
} 
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	08 95       	ret

0000116a <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
    116a:	cf 92       	push	r12
    116c:	df 92       	push	r13
    116e:	ef 92       	push	r14
    1170:	ff 92       	push	r15
    1172:	0f 93       	push	r16
    1174:	1f 93       	push	r17
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
    117a:	c0 91 49 01 	lds	r28, 0x0149
    117e:	d0 91 4a 01 	lds	r29, 0x014A
    1182:	68 2f       	mov	r22, r24
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	7f 4f       	sbci	r23, 0xFF	; 255
    118a:	89 e1       	ldi	r24, 0x19	; 25
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	68 9f       	mul	r22, r24
    1190:	f0 01       	movw	r30, r0
    1192:	69 9f       	mul	r22, r25
    1194:	f0 0d       	add	r31, r0
    1196:	78 9f       	mul	r23, r24
    1198:	f0 0d       	add	r31, r0
    119a:	11 24       	eor	r1, r1
    119c:	61 50       	subi	r22, 0x01	; 1
    119e:	70 40       	sbci	r23, 0x00	; 0
    11a0:	ec 0f       	add	r30, r28
    11a2:	fd 1f       	adc	r31, r29
    11a4:	e0 81       	ld	r30, Z
    11a6:	e6 95       	lsr	r30
    11a8:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    11aa:	e1 30       	cpi	r30, 0x01	; 1
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <Timebase_UpCounter_SS_Update+0x46>
    11ae:	41 c0       	rjmp	.+130    	; 0x1232 <Timebase_UpCounter_SS_Update+0xc8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    11b0:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    11b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    11b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    11b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    11b8:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    11ba:	78 94       	sei
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	c8 2e       	mov	r12, r24
    11c0:	d1 2c       	mov	r13, r1
    11c2:	6c 9d       	mul	r22, r12
    11c4:	f0 01       	movw	r30, r0
    11c6:	6d 9d       	mul	r22, r13
    11c8:	f0 0d       	add	r31, r0
    11ca:	7c 9d       	mul	r23, r12
    11cc:	f0 0d       	add	r31, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	ec 0f       	add	r30, r28
    11d2:	fd 1f       	adc	r31, r29
    11d4:	e2 a0       	ldd	r14, Z+34	; 0x22
    11d6:	f3 a0       	ldd	r15, Z+35	; 0x23
    11d8:	04 a1       	ldd	r16, Z+36	; 0x24
    11da:	15 a1       	ldd	r17, Z+37	; 0x25
    11dc:	26 a1       	ldd	r18, Z+38	; 0x26
    11de:	37 a1       	ldd	r19, Z+39	; 0x27
    11e0:	40 a5       	ldd	r20, Z+40	; 0x28
    11e2:	51 a5       	ldd	r21, Z+41	; 0x29
    11e4:	d8 01       	movw	r26, r16
    11e6:	c7 01       	movw	r24, r14
    11e8:	82 1b       	sub	r24, r18
    11ea:	93 0b       	sbc	r25, r19
    11ec:	a4 0b       	sbc	r26, r20
    11ee:	b5 0b       	sbc	r27, r21
    11f0:	82 a7       	std	Z+42, r24	; 0x2a
    11f2:	93 a7       	std	Z+43, r25	; 0x2b
    11f4:	a4 a7       	std	Z+44, r26	; 0x2c
    11f6:	b5 a7       	std	Z+45, r27	; 0x2d
  int32_t curr_s = 0;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_TemporaryValue(window, Timebase_UpCounter_SS_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
    11f8:	12 16       	cp	r1, r18
    11fa:	13 06       	cpc	r1, r19
    11fc:	14 06       	cpc	r1, r20
    11fe:	15 06       	cpc	r1, r21
    1200:	dc f1       	brlt	.+118    	; 0x1278 <Timebase_UpCounter_SS_Update+0x10e>
int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
}

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
    1202:	16 a2       	std	Z+38, r1	; 0x26
    1204:	17 a2       	std	Z+39, r1	; 0x27
    1206:	10 a6       	std	Z+40, r1	; 0x28
    1208:	11 a6       	std	Z+41, r1	; 0x29
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    120a:	e2 a6       	std	Z+42, r14	; 0x2a
    120c:	f3 a6       	std	Z+43, r15	; 0x2b
    120e:	04 a7       	std	Z+44, r16	; 0x2c
    1210:	15 a7       	std	Z+45, r17	; 0x2d
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
    1212:	6f 5f       	subi	r22, 0xFF	; 255
    1214:	7f 4f       	sbci	r23, 0xFF	; 255
    1216:	6c 9d       	mul	r22, r12
    1218:	f0 01       	movw	r30, r0
    121a:	6d 9d       	mul	r22, r13
    121c:	f0 0d       	add	r31, r0
    121e:	7c 9d       	mul	r23, r12
    1220:	f0 0d       	add	r31, r0
    1222:	11 24       	eor	r1, r1
    1224:	ec 0f       	add	r30, r28
    1226:	fd 1f       	adc	r31, r29
    1228:	80 81       	ld	r24, Z
    122a:	81 7e       	andi	r24, 0xE1	; 225
    122c:	88 60       	ori	r24, 0x08	; 8
    122e:	80 83       	st	Z, r24
    1230:	23 c0       	rjmp	.+70     	; 0x1278 <Timebase_UpCounter_SS_Update+0x10e>
      //Timebase_UpCounter_SS_Set_EndValue(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1232:	e2 30       	cpi	r30, 0x02	; 2
    1234:	09 f5       	brne	.+66     	; 0x1278 <Timebase_UpCounter_SS_Update+0x10e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1236:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1238:	8a 85       	ldd	r24, Y+10	; 0x0a
    123a:	9b 85       	ldd	r25, Y+11	; 0x0b
    123c:	ac 85       	ldd	r26, Y+12	; 0x0c
    123e:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1240:	78 94       	sei
int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
  return Timebase->UpCounterSS[window].Value;
}

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Value = value;
    1242:	89 e1       	ldi	r24, 0x19	; 25
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	68 9f       	mul	r22, r24
    1248:	f0 01       	movw	r30, r0
    124a:	69 9f       	mul	r22, r25
    124c:	f0 0d       	add	r31, r0
    124e:	78 9f       	mul	r23, r24
    1250:	f0 0d       	add	r31, r0
    1252:	11 24       	eor	r1, r1
    1254:	ec 0f       	add	r30, r28
    1256:	fd 1f       	adc	r31, r29
    1258:	82 a1       	ldd	r24, Z+34	; 0x22
    125a:	93 a1       	ldd	r25, Z+35	; 0x23
    125c:	a4 a1       	ldd	r26, Z+36	; 0x24
    125e:	b5 a1       	ldd	r27, Z+37	; 0x25
    1260:	26 a1       	ldd	r18, Z+38	; 0x26
    1262:	37 a1       	ldd	r19, Z+39	; 0x27
    1264:	40 a5       	ldd	r20, Z+40	; 0x28
    1266:	51 a5       	ldd	r21, Z+41	; 0x29
    1268:	82 1b       	sub	r24, r18
    126a:	93 0b       	sbc	r25, r19
    126c:	a4 0b       	sbc	r26, r20
    126e:	b5 0b       	sbc	r27, r21
    1270:	82 a7       	std	Z+42, r24	; 0x2a
    1272:	93 a7       	std	Z+43, r25	; 0x2b
    1274:	a4 a7       	std	Z+44, r26	; 0x2c
    1276:	b5 a7       	std	Z+45, r27	; 0x2d
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    //Timebase_UpCounter_SS_Set_EndValue(window, Timebase_UpCounter_SS_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	08 95       	ret

0000128a <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	e0 91 49 01 	lds	r30, 0x0149
    1290:	f0 91 4a 01 	lds	r31, 0x014A
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	01 96       	adiw	r24, 0x01	; 1
    1298:	29 e1       	ldi	r18, 0x19	; 25
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	bc 01       	movw	r22, r24
    129e:	62 9f       	mul	r22, r18
    12a0:	c0 01       	movw	r24, r0
    12a2:	63 9f       	mul	r22, r19
    12a4:	90 0d       	add	r25, r0
    12a6:	72 9f       	mul	r23, r18
    12a8:	90 0d       	add	r25, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	e8 0f       	add	r30, r24
    12ae:	f9 1f       	adc	r31, r25
    12b0:	80 81       	ld	r24, Z
    12b2:	86 95       	lsr	r24
    12b4:	8f 70       	andi	r24, 0x0F	; 15
    12b6:	84 30       	cpi	r24, 0x04	; 4
    12b8:	09 f4       	brne	.+2      	; 0x12bc <Timebase_UpCounter_SS_Expired+0x32>
    12ba:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    12bc:	84 2f       	mov	r24, r20
    12be:	08 95       	ret

000012c0 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    12c0:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    12c2:	e0 91 49 01 	lds	r30, 0x0149
    12c6:	f0 91 4a 01 	lds	r31, 0x014A
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	29 e1       	ldi	r18, 0x19	; 25
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	bc 01       	movw	r22, r24
    12d4:	62 9f       	mul	r22, r18
    12d6:	c0 01       	movw	r24, r0
    12d8:	63 9f       	mul	r22, r19
    12da:	90 0d       	add	r25, r0
    12dc:	72 9f       	mul	r23, r18
    12de:	90 0d       	add	r25, r0
    12e0:	11 24       	eor	r1, r1
    12e2:	e8 0f       	add	r30, r24
    12e4:	f9 1f       	adc	r31, r25
    12e6:	80 81       	ld	r24, Z
    12e8:	86 95       	lsr	r24
    12ea:	8f 70       	andi	r24, 0x0F	; 15
    12ec:	84 30       	cpi	r24, 0x04	; 4
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <Timebase_UpCounter_SS_Expired_Event+0x34>
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    12f4:	84 2f       	mov	r24, r20
    12f6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Timebase_UpCounter_SS_Reset>
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    12fc:	08 95       	ret

000012fe <Timebase_UpCounter_SS_Set_Period_Value_Securely>:

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    1306:	a0 91 49 01 	lds	r26, 0x0149
    130a:	b0 91 4a 01 	lds	r27, 0x014A
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1312:	2f 5f       	subi	r18, 0xFF	; 255
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	09 e1       	ldi	r16, 0x19	; 25
    1318:	10 e0       	ldi	r17, 0x00	; 0
    131a:	20 9f       	mul	r18, r16
    131c:	e0 01       	movw	r28, r0
    131e:	21 9f       	mul	r18, r17
    1320:	d0 0d       	add	r29, r0
    1322:	30 9f       	mul	r19, r16
    1324:	d0 0d       	add	r29, r0
    1326:	11 24       	eor	r1, r1
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	30 40       	sbci	r19, 0x00	; 0
    132c:	ca 0f       	add	r28, r26
    132e:	db 1f       	adc	r29, r27
    1330:	88 81       	ld	r24, Y
    1332:	80 fd       	sbrc	r24, 0
    1334:	18 c0       	rjmp	.+48     	; 0x1366 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x68>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    1336:	20 9f       	mul	r18, r16
    1338:	f0 01       	movw	r30, r0
    133a:	21 9f       	mul	r18, r17
    133c:	f0 0d       	add	r31, r0
    133e:	30 9f       	mul	r19, r16
    1340:	f0 0d       	add	r31, r0
    1342:	11 24       	eor	r1, r1
    1344:	ea 0f       	add	r30, r26
    1346:	fb 1f       	adc	r31, r27
    1348:	82 a5       	ldd	r24, Z+42	; 0x2a
    134a:	93 a5       	ldd	r25, Z+43	; 0x2b
    134c:	a4 a5       	ldd	r26, Z+44	; 0x2c
    134e:	b5 a5       	ldd	r27, Z+45	; 0x2d
    1350:	84 0f       	add	r24, r20
    1352:	95 1f       	adc	r25, r21
    1354:	a6 1f       	adc	r26, r22
    1356:	b7 1f       	adc	r27, r23
    1358:	86 a7       	std	Z+46, r24	; 0x2e
    135a:	97 a7       	std	Z+47, r25	; 0x2f
    135c:	a0 ab       	std	Z+48, r26	; 0x30
    135e:	b1 ab       	std	Z+49, r27	; 0x31
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1360:	88 81       	ld	r24, Y
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	88 83       	st	Y, r24
void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_SS_Set_PeriodValue( window, Timebase_UpCounter_SS_Get_Value( window ) + value);
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1370:	e0 91 49 01 	lds	r30, 0x0149
    1374:	f0 91 4a 01 	lds	r31, 0x014A
    1378:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    137a:	29 e1       	ldi	r18, 0x19	; 25
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	ac 01       	movw	r20, r24
    1380:	42 9f       	mul	r20, r18
    1382:	c0 01       	movw	r24, r0
    1384:	43 9f       	mul	r20, r19
    1386:	90 0d       	add	r25, r0
    1388:	52 9f       	mul	r21, r18
    138a:	90 0d       	add	r25, r0
    138c:	11 24       	eor	r1, r1
    138e:	e8 0f       	add	r30, r24
    1390:	f9 1f       	adc	r31, r25
    1392:	26 a5       	ldd	r18, Z+46	; 0x2e
    1394:	37 a5       	ldd	r19, Z+47	; 0x2f
    1396:	40 a9       	ldd	r20, Z+48	; 0x30
    1398:	51 a9       	ldd	r21, Z+49	; 0x31
    139a:	82 a5       	ldd	r24, Z+42	; 0x2a
    139c:	93 a5       	ldd	r25, Z+43	; 0x2b
    139e:	a4 a5       	ldd	r26, Z+44	; 0x2c
    13a0:	b5 a5       	ldd	r27, Z+45	; 0x2d
    13a2:	28 1b       	sub	r18, r24
    13a4:	39 0b       	sbc	r19, r25
    13a6:	4a 0b       	sbc	r20, r26
    13a8:	5b 0b       	sbc	r21, r27
    13aa:	57 ff       	sbrs	r21, 7
    13ac:	04 c0       	rjmp	.+8      	; 0x13b6 <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e0       	ldi	r20, 0x00	; 0
    13b4:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    13b6:	b9 01       	movw	r22, r18
    13b8:	ca 01       	movw	r24, r20
    13ba:	08 95       	ret

000013bc <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    13c0:	c0 91 49 01 	lds	r28, 0x0149
    13c4:	d0 91 4a 01 	lds	r29, 0x014A
    13c8:	68 2f       	mov	r22, r24
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_SS_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window ) - Timebase_UpCounter_SS_Get_Value( window );
    13cc:	89 e1       	ldi	r24, 0x19	; 25
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	68 9f       	mul	r22, r24
    13d2:	f0 01       	movw	r30, r0
    13d4:	69 9f       	mul	r22, r25
    13d6:	f0 0d       	add	r31, r0
    13d8:	78 9f       	mul	r23, r24
    13da:	f0 0d       	add	r31, r0
    13dc:	11 24       	eor	r1, r1
    13de:	ec 0f       	add	r30, r28
    13e0:	fd 1f       	adc	r31, r29
    13e2:	26 a5       	ldd	r18, Z+46	; 0x2e
    13e4:	37 a5       	ldd	r19, Z+47	; 0x2f
    13e6:	40 a9       	ldd	r20, Z+48	; 0x30
    13e8:	51 a9       	ldd	r21, Z+49	; 0x31
    13ea:	82 a5       	ldd	r24, Z+42	; 0x2a
    13ec:	93 a5       	ldd	r25, Z+43	; 0x2b
    13ee:	a4 a5       	ldd	r26, Z+44	; 0x2c
    13f0:	b5 a5       	ldd	r27, Z+45	; 0x2d
    13f2:	28 1b       	sub	r18, r24
    13f4:	39 0b       	sbc	r19, r25
    13f6:	4a 0b       	sbc	r20, r26
    13f8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    13fa:	57 fd       	sbrc	r21, 7
    13fc:	07 c0       	rjmp	.+14     	; 0x140c <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    13fe:	21 15       	cp	r18, r1
    1400:	31 05       	cpc	r19, r1
    1402:	41 05       	cpc	r20, r1
    1404:	51 05       	cpc	r21, r1
    1406:	11 f0       	breq	.+4      	; 0x140c <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <Timebase_UpCounter_SS_Period_Value_Expired+0x78>
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	6f 5f       	subi	r22, 0xFF	; 255
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	89 e1       	ldi	r24, 0x19	; 25
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	ac 01       	movw	r20, r24
    1418:	64 9f       	mul	r22, r20
    141a:	c0 01       	movw	r24, r0
    141c:	65 9f       	mul	r22, r21
    141e:	90 0d       	add	r25, r0
    1420:	74 9f       	mul	r23, r20
    1422:	90 0d       	add	r25, r0
    1424:	11 24       	eor	r1, r1
    1426:	c8 0f       	add	r28, r24
    1428:	d9 1f       	adc	r29, r25
    142a:	88 81       	ld	r24, Y
    142c:	80 ff       	sbrs	r24, 0
    142e:	21 e0       	ldi	r18, 0x01	; 1
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1434:	82 2f       	mov	r24, r18
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	08 95       	ret

0000143c <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    143c:	1f 93       	push	r17
    143e:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1440:	0e 94 de 09 	call	0x13bc	; 0x13bc <Timebase_UpCounter_SS_Period_Value_Expired>
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	11 f0       	breq	.+4      	; 0x144c <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	17 c0       	rjmp	.+46     	; 0x147a <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3e>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    144c:	e0 91 49 01 	lds	r30, 0x0149
    1450:	f0 91 4a 01 	lds	r31, 0x014A
    1454:	81 2f       	mov	r24, r17
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	01 96       	adiw	r24, 0x01	; 1
    145a:	29 e1       	ldi	r18, 0x19	; 25
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	ac 01       	movw	r20, r24
    1460:	42 9f       	mul	r20, r18
    1462:	c0 01       	movw	r24, r0
    1464:	43 9f       	mul	r20, r19
    1466:	90 0d       	add	r25, r0
    1468:	52 9f       	mul	r21, r18
    146a:	90 0d       	add	r25, r0
    146c:	11 24       	eor	r1, r1
    146e:	e8 0f       	add	r30, r24
    1470:	f9 1f       	adc	r31, r25
    1472:	80 81       	ld	r24, Z
    1474:	8e 7f       	andi	r24, 0xFE	; 254
    1476:	80 83       	st	Z, r24
    1478:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    147a:	1f 91       	pop	r17
    147c:	08 95       	ret

0000147e <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	0e 94 b5 08 	call	0x116a	; 0x116a <Timebase_UpCounter_SS_Update>
  }
}
    1484:	08 95       	ret

00001486 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0e 94 da 07 	call	0xfb4	; 0xfb4 <Timebase_UpCounter_SS_Reset>
  }
}
    148c:	08 95       	ret

0000148e <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    148e:	e0 91 49 01 	lds	r30, 0x0149
    1492:	f0 91 4a 01 	lds	r31, 0x014A
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	25 e1       	ldi	r18, 0x15	; 21
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	ac 01       	movw	r20, r24
    149e:	42 9f       	mul	r20, r18
    14a0:	c0 01       	movw	r24, r0
    14a2:	43 9f       	mul	r20, r19
    14a4:	90 0d       	add	r25, r0
    14a6:	52 9f       	mul	r21, r18
    14a8:	90 0d       	add	r25, r0
    14aa:	11 24       	eor	r1, r1
    14ac:	e8 0f       	add	r30, r24
    14ae:	f9 1f       	adc	r31, r25
    14b0:	82 a9       	ldd	r24, Z+50	; 0x32
    14b2:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    14b4:	8f 70       	andi	r24, 0x0F	; 15
    14b6:	08 95       	ret

000014b8 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    14b8:	e0 91 49 01 	lds	r30, 0x0149
    14bc:	f0 91 4a 01 	lds	r31, 0x014A
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	25 e1       	ldi	r18, 0x15	; 21
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	ac 01       	movw	r20, r24
    14c8:	42 9f       	mul	r20, r18
    14ca:	c0 01       	movw	r24, r0
    14cc:	43 9f       	mul	r20, r19
    14ce:	90 0d       	add	r25, r0
    14d0:	52 9f       	mul	r21, r18
    14d2:	90 0d       	add	r25, r0
    14d4:	11 24       	eor	r1, r1
    14d6:	e8 0f       	add	r30, r24
    14d8:	f9 1f       	adc	r31, r25
    14da:	6f 70       	andi	r22, 0x0F	; 15
    14dc:	66 0f       	add	r22, r22
    14de:	82 a9       	ldd	r24, Z+50	; 0x32
    14e0:	81 7e       	andi	r24, 0xE1	; 225
    14e2:	86 2b       	or	r24, r22
    14e4:	82 ab       	std	Z+50, r24	; 0x32
}
    14e6:	08 95       	ret

000014e8 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    14e8:	e0 91 49 01 	lds	r30, 0x0149
    14ec:	f0 91 4a 01 	lds	r31, 0x014A
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	25 e1       	ldi	r18, 0x15	; 21
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	ac 01       	movw	r20, r24
    14f8:	42 9f       	mul	r20, r18
    14fa:	c0 01       	movw	r24, r0
    14fc:	43 9f       	mul	r20, r19
    14fe:	90 0d       	add	r25, r0
    1500:	52 9f       	mul	r21, r18
    1502:	90 0d       	add	r25, r0
    1504:	11 24       	eor	r1, r1
    1506:	e8 0f       	add	r30, r24
    1508:	f9 1f       	adc	r31, r25
    150a:	ff 96       	adiw	r30, 0x3f	; 63
    150c:	60 81       	ld	r22, Z
    150e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1510:	82 81       	ldd	r24, Z+2	; 0x02
    1512:	93 81       	ldd	r25, Z+3	; 0x03
    1514:	08 95       	ret

00001516 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1516:	e0 91 49 01 	lds	r30, 0x0149
    151a:	f0 91 4a 01 	lds	r31, 0x014A
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	25 e1       	ldi	r18, 0x15	; 21
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	dc 01       	movw	r26, r24
    1526:	a2 9f       	mul	r26, r18
    1528:	c0 01       	movw	r24, r0
    152a:	a3 9f       	mul	r26, r19
    152c:	90 0d       	add	r25, r0
    152e:	b2 9f       	mul	r27, r18
    1530:	90 0d       	add	r25, r0
    1532:	11 24       	eor	r1, r1
    1534:	e8 0f       	add	r30, r24
    1536:	f9 1f       	adc	r31, r25
    1538:	ff 96       	adiw	r30, 0x3f	; 63
    153a:	40 83       	st	Z, r20
    153c:	51 83       	std	Z+1, r21	; 0x01
    153e:	62 83       	std	Z+2, r22	; 0x02
    1540:	73 83       	std	Z+3, r23	; 0x03
}
    1542:	08 95       	ret

00001544 <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
    1544:	e0 91 49 01 	lds	r30, 0x0149
    1548:	f0 91 4a 01 	lds	r31, 0x014A
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	25 e1       	ldi	r18, 0x15	; 21
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	ac 01       	movw	r20, r24
    1554:	42 9f       	mul	r20, r18
    1556:	c0 01       	movw	r24, r0
    1558:	43 9f       	mul	r20, r19
    155a:	90 0d       	add	r25, r0
    155c:	52 9f       	mul	r21, r18
    155e:	90 0d       	add	r25, r0
    1560:	11 24       	eor	r1, r1
    1562:	e8 0f       	add	r30, r24
    1564:	f9 1f       	adc	r31, r25
    1566:	df 01       	movw	r26, r30
    1568:	d3 96       	adiw	r26, 0x33	; 51
    156a:	63 a9       	ldd	r22, Z+51	; 0x33
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	7c 91       	ld	r23, X
    1570:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1572:	12 96       	adiw	r26, 0x02	; 2
    1574:	8c 91       	ld	r24, X
    1576:	12 97       	sbiw	r26, 0x02	; 2
    1578:	13 96       	adiw	r26, 0x03	; 3
    157a:	9c 91       	ld	r25, X
    157c:	08 95       	ret

0000157e <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    157e:	e0 91 49 01 	lds	r30, 0x0149
    1582:	f0 91 4a 01 	lds	r31, 0x014A
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	25 e1       	ldi	r18, 0x15	; 21
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	dc 01       	movw	r26, r24
    158e:	a2 9f       	mul	r26, r18
    1590:	c0 01       	movw	r24, r0
    1592:	a3 9f       	mul	r26, r19
    1594:	90 0d       	add	r25, r0
    1596:	b2 9f       	mul	r27, r18
    1598:	90 0d       	add	r25, r0
    159a:	11 24       	eor	r1, r1
    159c:	e8 0f       	add	r30, r24
    159e:	f9 1f       	adc	r31, r25
    15a0:	43 ab       	std	Z+51, r20	; 0x33
    15a2:	54 ab       	std	Z+52, r21	; 0x34
    15a4:	65 ab       	std	Z+53, r22	; 0x35
    15a6:	76 ab       	std	Z+54, r23	; 0x36
}
    15a8:	08 95       	ret

000015aa <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    15aa:	e0 91 49 01 	lds	r30, 0x0149
    15ae:	f0 91 4a 01 	lds	r31, 0x014A
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	25 e1       	ldi	r18, 0x15	; 21
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	ac 01       	movw	r20, r24
    15ba:	42 9f       	mul	r20, r18
    15bc:	c0 01       	movw	r24, r0
    15be:	43 9f       	mul	r20, r19
    15c0:	90 0d       	add	r25, r0
    15c2:	52 9f       	mul	r21, r18
    15c4:	90 0d       	add	r25, r0
    15c6:	11 24       	eor	r1, r1
    15c8:	e8 0f       	add	r30, r24
    15ca:	f9 1f       	adc	r31, r25
    15cc:	df 01       	movw	r26, r30
    15ce:	d7 96       	adiw	r26, 0x37	; 55
    15d0:	67 a9       	ldd	r22, Z+55	; 0x37
    15d2:	11 96       	adiw	r26, 0x01	; 1
    15d4:	7c 91       	ld	r23, X
    15d6:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    15d8:	12 96       	adiw	r26, 0x02	; 2
    15da:	8c 91       	ld	r24, X
    15dc:	12 97       	sbiw	r26, 0x02	; 2
    15de:	13 96       	adiw	r26, 0x03	; 3
    15e0:	9c 91       	ld	r25, X
    15e2:	08 95       	ret

000015e4 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    15e4:	e0 91 49 01 	lds	r30, 0x0149
    15e8:	f0 91 4a 01 	lds	r31, 0x014A
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	25 e1       	ldi	r18, 0x15	; 21
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	dc 01       	movw	r26, r24
    15f4:	a2 9f       	mul	r26, r18
    15f6:	c0 01       	movw	r24, r0
    15f8:	a3 9f       	mul	r26, r19
    15fa:	90 0d       	add	r25, r0
    15fc:	b2 9f       	mul	r27, r18
    15fe:	90 0d       	add	r25, r0
    1600:	11 24       	eor	r1, r1
    1602:	e8 0f       	add	r30, r24
    1604:	f9 1f       	adc	r31, r25
    1606:	47 ab       	std	Z+55, r20	; 0x37
    1608:	50 af       	std	Z+56, r21	; 0x38
    160a:	61 af       	std	Z+57, r22	; 0x39
    160c:	72 af       	std	Z+58, r23	; 0x3a
}
    160e:	08 95       	ret

00001610 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    1610:	e0 91 49 01 	lds	r30, 0x0149
    1614:	f0 91 4a 01 	lds	r31, 0x014A
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	25 e1       	ldi	r18, 0x15	; 21
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	ac 01       	movw	r20, r24
    1620:	42 9f       	mul	r20, r18
    1622:	c0 01       	movw	r24, r0
    1624:	43 9f       	mul	r20, r19
    1626:	90 0d       	add	r25, r0
    1628:	52 9f       	mul	r21, r18
    162a:	90 0d       	add	r25, r0
    162c:	11 24       	eor	r1, r1
    162e:	e8 0f       	add	r30, r24
    1630:	f9 1f       	adc	r31, r25
    1632:	df 01       	movw	r26, r30
    1634:	db 96       	adiw	r26, 0x3b	; 59
    1636:	63 ad       	ldd	r22, Z+59	; 0x3b
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	7c 91       	ld	r23, X
    163c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
    163e:	12 96       	adiw	r26, 0x02	; 2
    1640:	8c 91       	ld	r24, X
    1642:	12 97       	sbiw	r26, 0x02	; 2
    1644:	13 96       	adiw	r26, 0x03	; 3
    1646:	9c 91       	ld	r25, X
    1648:	08 95       	ret

0000164a <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    164a:	e0 91 49 01 	lds	r30, 0x0149
    164e:	f0 91 4a 01 	lds	r31, 0x014A
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	25 e1       	ldi	r18, 0x15	; 21
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	dc 01       	movw	r26, r24
    165a:	a2 9f       	mul	r26, r18
    165c:	c0 01       	movw	r24, r0
    165e:	a3 9f       	mul	r26, r19
    1660:	90 0d       	add	r25, r0
    1662:	b2 9f       	mul	r27, r18
    1664:	90 0d       	add	r25, r0
    1666:	11 24       	eor	r1, r1
    1668:	e8 0f       	add	r30, r24
    166a:	f9 1f       	adc	r31, r25
    166c:	43 af       	std	Z+59, r20	; 0x3b
    166e:	54 af       	std	Z+60, r21	; 0x3c
    1670:	65 af       	std	Z+61, r22	; 0x3d
    1672:	76 af       	std	Z+62, r23	; 0x3e
}
    1674:	08 95       	ret

00001676 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1676:	e0 91 49 01 	lds	r30, 0x0149
    167a:	f0 91 4a 01 	lds	r31, 0x014A
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	25 e1       	ldi	r18, 0x15	; 21
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	ac 01       	movw	r20, r24
    1686:	42 9f       	mul	r20, r18
    1688:	c0 01       	movw	r24, r0
    168a:	43 9f       	mul	r20, r19
    168c:	90 0d       	add	r25, r0
    168e:	52 9f       	mul	r21, r18
    1690:	90 0d       	add	r25, r0
    1692:	11 24       	eor	r1, r1
    1694:	e8 0f       	add	r30, r24
    1696:	f9 1f       	adc	r31, r25
    1698:	ed 5b       	subi	r30, 0xBD	; 189
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	08 95       	ret

000016a6 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    16a6:	e0 91 49 01 	lds	r30, 0x0149
    16aa:	f0 91 4a 01 	lds	r31, 0x014A
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	25 e1       	ldi	r18, 0x15	; 21
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	dc 01       	movw	r26, r24
    16b6:	a2 9f       	mul	r26, r18
    16b8:	c0 01       	movw	r24, r0
    16ba:	a3 9f       	mul	r26, r19
    16bc:	90 0d       	add	r25, r0
    16be:	b2 9f       	mul	r27, r18
    16c0:	90 0d       	add	r25, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	e8 0f       	add	r30, r24
    16c6:	f9 1f       	adc	r31, r25
    16c8:	ed 5b       	subi	r30, 0xBD	; 189
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	40 83       	st	Z, r20
    16ce:	51 83       	std	Z+1, r21	; 0x01
    16d0:	62 83       	std	Z+2, r22	; 0x02
    16d2:	73 83       	std	Z+3, r23	; 0x03
}
    16d4:	08 95       	ret

000016d6 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    16d6:	e0 91 49 01 	lds	r30, 0x0149
    16da:	f0 91 4a 01 	lds	r31, 0x014A
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	25 e1       	ldi	r18, 0x15	; 21
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	ac 01       	movw	r20, r24
    16e6:	42 9f       	mul	r20, r18
    16e8:	c0 01       	movw	r24, r0
    16ea:	43 9f       	mul	r20, r19
    16ec:	90 0d       	add	r25, r0
    16ee:	52 9f       	mul	r21, r18
    16f0:	90 0d       	add	r25, r0
    16f2:	11 24       	eor	r1, r1
    16f4:	e8 0f       	add	r30, r24
    16f6:	f9 1f       	adc	r31, r25
    16f8:	82 a9       	ldd	r24, Z+50	; 0x32
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    16fa:	81 70       	andi	r24, 0x01	; 1
    16fc:	08 95       	ret

000016fe <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    16fe:	e0 91 49 01 	lds	r30, 0x0149
    1702:	f0 91 4a 01 	lds	r31, 0x014A
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	25 e1       	ldi	r18, 0x15	; 21
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	ac 01       	movw	r20, r24
    170e:	42 9f       	mul	r20, r18
    1710:	c0 01       	movw	r24, r0
    1712:	43 9f       	mul	r20, r19
    1714:	90 0d       	add	r25, r0
    1716:	52 9f       	mul	r21, r18
    1718:	90 0d       	add	r25, r0
    171a:	11 24       	eor	r1, r1
    171c:	e8 0f       	add	r30, r24
    171e:	f9 1f       	adc	r31, r25
    1720:	82 a9       	ldd	r24, Z+50	; 0x32
    1722:	81 60       	ori	r24, 0x01	; 1
    1724:	82 ab       	std	Z+50, r24	; 0x32
}
    1726:	08 95       	ret

00001728 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1728:	e0 91 49 01 	lds	r30, 0x0149
    172c:	f0 91 4a 01 	lds	r31, 0x014A
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	25 e1       	ldi	r18, 0x15	; 21
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	ac 01       	movw	r20, r24
    1738:	42 9f       	mul	r20, r18
    173a:	c0 01       	movw	r24, r0
    173c:	43 9f       	mul	r20, r19
    173e:	90 0d       	add	r25, r0
    1740:	52 9f       	mul	r21, r18
    1742:	90 0d       	add	r25, r0
    1744:	11 24       	eor	r1, r1
    1746:	e8 0f       	add	r30, r24
    1748:	f9 1f       	adc	r31, r25
    174a:	82 a9       	ldd	r24, Z+50	; 0x32
    174c:	8e 7f       	andi	r24, 0xFE	; 254
    174e:	82 ab       	std	Z+50, r24	; 0x32
}
    1750:	08 95       	ret

00001752 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1752:	e0 91 49 01 	lds	r30, 0x0149
    1756:	f0 91 4a 01 	lds	r31, 0x014A
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	25 e1       	ldi	r18, 0x15	; 21
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	ac 01       	movw	r20, r24
    1762:	42 9f       	mul	r20, r18
    1764:	c0 01       	movw	r24, r0
    1766:	43 9f       	mul	r20, r19
    1768:	90 0d       	add	r25, r0
    176a:	52 9f       	mul	r21, r18
    176c:	90 0d       	add	r25, r0
    176e:	11 24       	eor	r1, r1
    1770:	e8 0f       	add	r30, r24
    1772:	f9 1f       	adc	r31, r25
    1774:	82 a9       	ldd	r24, Z+50	; 0x32
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1776:	ff 96       	adiw	r30, 0x3f	; 63
    1778:	10 82       	st	Z, r1
    177a:	11 82       	std	Z+1, r1	; 0x01
    177c:	12 82       	std	Z+2, r1	; 0x02
    177e:	13 82       	std	Z+3, r1	; 0x03
    1780:	ff 97       	sbiw	r30, 0x3f	; 63
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1782:	13 aa       	std	Z+51, r1	; 0x33
    1784:	14 aa       	std	Z+52, r1	; 0x34
    1786:	15 aa       	std	Z+53, r1	; 0x35
    1788:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    178a:	17 aa       	std	Z+55, r1	; 0x37
    178c:	10 ae       	std	Z+56, r1	; 0x38
    178e:	11 ae       	std	Z+57, r1	; 0x39
    1790:	12 ae       	std	Z+58, r1	; 0x3a
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1792:	13 ae       	std	Z+59, r1	; 0x3b
    1794:	14 ae       	std	Z+60, r1	; 0x3c
    1796:	15 ae       	std	Z+61, r1	; 0x3d
    1798:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    179a:	ed 5b       	subi	r30, 0xBD	; 189
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	10 82       	st	Z, r1
    17a0:	11 82       	std	Z+1, r1	; 0x01
    17a2:	12 82       	std	Z+2, r1	; 0x02
    17a4:	13 82       	std	Z+3, r1	; 0x03
    17a6:	e3 54       	subi	r30, 0x43	; 67
    17a8:	f0 40       	sbci	r31, 0x00	; 0
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    17aa:	80 7e       	andi	r24, 0xE0	; 224
    17ac:	82 ab       	std	Z+50, r24	; 0x32
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    17ae:	08 95       	ret

000017b0 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    17b0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <Timebase_UpCounter_Reset>
}
    17b4:	08 95       	ret

000017b6 <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    17b6:	e0 91 49 01 	lds	r30, 0x0149
    17ba:	f0 91 4a 01 	lds	r31, 0x014A
    17be:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    17c0:	25 e1       	ldi	r18, 0x15	; 21
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	ac 01       	movw	r20, r24
    17c6:	42 9f       	mul	r20, r18
    17c8:	c0 01       	movw	r24, r0
    17ca:	43 9f       	mul	r20, r19
    17cc:	90 0d       	add	r25, r0
    17ce:	52 9f       	mul	r21, r18
    17d0:	90 0d       	add	r25, r0
    17d2:	11 24       	eor	r1, r1
    17d4:	e8 0f       	add	r30, r24
    17d6:	f9 1f       	adc	r31, r25
    17d8:	92 a9       	ldd	r25, Z+50	; 0x32
    17da:	89 2f       	mov	r24, r25
    17dc:	86 95       	lsr	r24
    17de:	8f 70       	andi	r24, 0x0F	; 15
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	19 f0       	breq	.+6      	; 0x17ea <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    17e4:	91 7e       	andi	r25, 0xE1	; 225
    17e6:	92 60       	ori	r25, 0x02	; 2
    17e8:	92 ab       	std	Z+50, r25	; 0x32
    17ea:	08 95       	ret

000017ec <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    17ec:	e0 91 49 01 	lds	r30, 0x0149
    17f0:	f0 91 4a 01 	lds	r31, 0x014A
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    17f6:	25 e1       	ldi	r18, 0x15	; 21
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	ac 01       	movw	r20, r24
    17fc:	42 9f       	mul	r20, r18
    17fe:	c0 01       	movw	r24, r0
    1800:	43 9f       	mul	r20, r19
    1802:	90 0d       	add	r25, r0
    1804:	52 9f       	mul	r21, r18
    1806:	90 0d       	add	r25, r0
    1808:	11 24       	eor	r1, r1
    180a:	e8 0f       	add	r30, r24
    180c:	f9 1f       	adc	r31, r25
    180e:	92 a9       	ldd	r25, Z+50	; 0x32
    1810:	89 2f       	mov	r24, r25
    1812:	86 95       	lsr	r24
    1814:	8f 70       	andi	r24, 0x0F	; 15
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	19 f0       	breq	.+6      	; 0x1820 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    181a:	91 7e       	andi	r25, 0xE1	; 225
    181c:	94 60       	ori	r25, 0x04	; 4
    181e:	92 ab       	std	Z+50, r25	; 0x32
    1820:	08 95       	ret

00001822 <Timebase_UpCounter_Set_Securely>:
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    182a:	c0 91 49 01 	lds	r28, 0x0149
    182e:	d0 91 4a 01 	lds	r29, 0x014A
    1832:	08 2f       	mov	r16, r24
    1834:	10 e0       	ldi	r17, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1836:	85 e1       	ldi	r24, 0x15	; 21
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	08 9f       	mul	r16, r24
    183c:	f0 01       	movw	r30, r0
    183e:	09 9f       	mul	r16, r25
    1840:	f0 0d       	add	r31, r0
    1842:	18 9f       	mul	r17, r24
    1844:	f0 0d       	add	r31, r0
    1846:	11 24       	eor	r1, r1
    1848:	ec 0f       	add	r30, r28
    184a:	fd 1f       	adc	r31, r29
    184c:	82 a9       	ldd	r24, Z+50	; 0x32
    184e:	86 95       	lsr	r24
    1850:	8f 70       	andi	r24, 0x0F	; 15
    1852:	81 f5       	brne	.+96     	; 0x18b4 <Timebase_UpCounter_Set_Securely+0x92>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1854:	ff 96       	adiw	r30, 0x3f	; 63
    1856:	10 82       	st	Z, r1
    1858:	11 82       	std	Z+1, r1	; 0x01
    185a:	12 82       	std	Z+2, r1	; 0x02
    185c:	13 82       	std	Z+3, r1	; 0x03
    185e:	ff 97       	sbiw	r30, 0x3f	; 63
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1860:	13 ae       	std	Z+59, r1	; 0x3b
    1862:	14 ae       	std	Z+60, r1	; 0x3c
    1864:	15 ae       	std	Z+61, r1	; 0x3d
    1866:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1868:	47 ab       	std	Z+55, r20	; 0x37
    186a:	50 af       	std	Z+56, r21	; 0x38
    186c:	61 af       	std	Z+57, r22	; 0x39
    186e:	72 af       	std	Z+58, r23	; 0x3a

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1870:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1872:	8a 85       	ldd	r24, Y+10	; 0x0a
    1874:	9b 85       	ldd	r25, Y+11	; 0x0b
    1876:	ac 85       	ldd	r26, Y+12	; 0x0c
    1878:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    187a:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    187c:	25 e1       	ldi	r18, 0x15	; 21
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	02 9f       	mul	r16, r18
    1882:	f0 01       	movw	r30, r0
    1884:	03 9f       	mul	r16, r19
    1886:	f0 0d       	add	r31, r0
    1888:	12 9f       	mul	r17, r18
    188a:	f0 0d       	add	r31, r0
    188c:	11 24       	eor	r1, r1
    188e:	ec 0f       	add	r30, r28
    1890:	fd 1f       	adc	r31, r29
    1892:	84 0f       	add	r24, r20
    1894:	95 1f       	adc	r25, r21
    1896:	a6 1f       	adc	r26, r22
    1898:	b7 1f       	adc	r27, r23
    189a:	83 ab       	std	Z+51, r24	; 0x33
    189c:	94 ab       	std	Z+52, r25	; 0x34
    189e:	a5 ab       	std	Z+53, r26	; 0x35
    18a0:	b6 ab       	std	Z+54, r27	; 0x36
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    18a2:	92 a9       	ldd	r25, Z+50	; 0x32
    18a4:	89 2f       	mov	r24, r25
    18a6:	86 95       	lsr	r24
    18a8:	8f 70       	andi	r24, 0x0F	; 15
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	19 f0       	breq	.+6      	; 0x18b4 <Timebase_UpCounter_Set_Securely+0x92>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    18ae:	91 7e       	andi	r25, 0xE1	; 225
    18b0:	92 60       	ori	r25, 0x02	; 2
    18b2:	92 ab       	std	Z+50, r25	; 0x32
    Timebase_UpCounter_Set_TargetValue(window, value);
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, curr_s + value);  
    Timebase_UpCounter_Start(window);
  }
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <Timebase_UpCounter_Set_Forcefully>:

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    18be:	df 92       	push	r13
    18c0:	ef 92       	push	r14
    18c2:	ff 92       	push	r15
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	d8 2e       	mov	r13, r24
    18ca:	7a 01       	movw	r14, r20
    18cc:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    18ce:	0e 94 a9 0b 	call	0x1752	; 0x1752 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    18d2:	8d 2d       	mov	r24, r13
    18d4:	b8 01       	movw	r22, r16
    18d6:	a7 01       	movw	r20, r14
    18d8:	0e 94 11 0c 	call	0x1822	; 0x1822 <Timebase_UpCounter_Set_Securely>
} 
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	df 90       	pop	r13
    18e6:	08 95       	ret

000018e8 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    18f4:	c0 91 49 01 	lds	r28, 0x0149
    18f8:	d0 91 4a 01 	lds	r29, 0x014A
    18fc:	48 2f       	mov	r20, r24
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	85 e1       	ldi	r24, 0x15	; 21
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	48 9f       	mul	r20, r24
    1906:	f0 01       	movw	r30, r0
    1908:	49 9f       	mul	r20, r25
    190a:	f0 0d       	add	r31, r0
    190c:	58 9f       	mul	r21, r24
    190e:	f0 0d       	add	r31, r0
    1910:	11 24       	eor	r1, r1
    1912:	ec 0f       	add	r30, r28
    1914:	fd 1f       	adc	r31, r29
    1916:	82 a9       	ldd	r24, Z+50	; 0x32
    1918:	86 95       	lsr	r24
    191a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	09 f0       	breq	.+2      	; 0x1922 <Timebase_UpCounter_Update+0x3a>
    1920:	44 c0       	rjmp	.+136    	; 0x19aa <Timebase_UpCounter_Update+0xc2>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1922:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1924:	ea 84       	ldd	r14, Y+10	; 0x0a
    1926:	fb 84       	ldd	r15, Y+11	; 0x0b
    1928:	0c 85       	ldd	r16, Y+12	; 0x0c
    192a:	1d 85       	ldd	r17, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    192c:	78 94       	sei

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    192e:	85 e1       	ldi	r24, 0x15	; 21
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	48 9f       	mul	r20, r24
    1934:	f0 01       	movw	r30, r0
    1936:	49 9f       	mul	r20, r25
    1938:	f0 0d       	add	r31, r0
    193a:	58 9f       	mul	r21, r24
    193c:	f0 0d       	add	r31, r0
    193e:	11 24       	eor	r1, r1
    1940:	ec 0f       	add	r30, r28
    1942:	fd 1f       	adc	r31, r29
    1944:	23 a9       	ldd	r18, Z+51	; 0x33
    1946:	34 a9       	ldd	r19, Z+52	; 0x34
    1948:	45 a9       	ldd	r20, Z+53	; 0x35
    194a:	56 a9       	ldd	r21, Z+54	; 0x36
    194c:	2e 19       	sub	r18, r14
    194e:	3f 09       	sbc	r19, r15
    1950:	40 0b       	sbc	r20, r16
    1952:	51 0b       	sbc	r21, r17
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1954:	23 af       	std	Z+59, r18	; 0x3b
    1956:	34 af       	std	Z+60, r19	; 0x3c
    1958:	45 af       	std	Z+61, r20	; 0x3d
    195a:	56 af       	std	Z+62, r21	; 0x3e
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    195c:	ef 01       	movw	r28, r30
    195e:	ef 96       	adiw	r28, 0x3f	; 63
    1960:	e7 a8       	ldd	r14, Z+55	; 0x37
    1962:	f0 ac       	ldd	r15, Z+56	; 0x38
    1964:	01 ad       	ldd	r16, Z+57	; 0x39
    1966:	12 ad       	ldd	r17, Z+58	; 0x3a
    1968:	d8 01       	movw	r26, r16
    196a:	c7 01       	movw	r24, r14
    196c:	82 1b       	sub	r24, r18
    196e:	93 0b       	sbc	r25, r19
    1970:	a4 0b       	sbc	r26, r20
    1972:	b5 0b       	sbc	r27, r21
    1974:	88 83       	st	Y, r24
    1976:	99 83       	std	Y+1, r25	; 0x01
    1978:	aa 83       	std	Y+2, r26	; 0x02
    197a:	bb 83       	std	Y+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    197c:	12 16       	cp	r1, r18
    197e:	13 06       	cpc	r1, r19
    1980:	14 06       	cpc	r1, r20
    1982:	15 06       	cpc	r1, r21
    1984:	0c f4       	brge	.+2      	; 0x1988 <Timebase_UpCounter_Update+0xa0>
    1986:	3d c0       	rjmp	.+122    	; 0x1a02 <Timebase_UpCounter_Update+0x11a>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1988:	13 aa       	std	Z+51, r1	; 0x33
    198a:	14 aa       	std	Z+52, r1	; 0x34
    198c:	15 aa       	std	Z+53, r1	; 0x35
    198e:	16 aa       	std	Z+54, r1	; 0x36
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
    1990:	13 ae       	std	Z+59, r1	; 0x3b
    1992:	14 ae       	std	Z+60, r1	; 0x3c
    1994:	15 ae       	std	Z+61, r1	; 0x3d
    1996:	16 ae       	std	Z+62, r1	; 0x3e
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    1998:	e8 82       	st	Y, r14
    199a:	f9 82       	std	Y+1, r15	; 0x01
    199c:	0a 83       	std	Y+2, r16	; 0x02
    199e:	1b 83       	std	Y+3, r17	; 0x03
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    19a0:	82 a9       	ldd	r24, Z+50	; 0x32
    19a2:	81 7e       	andi	r24, 0xE1	; 225
    19a4:	88 60       	ori	r24, 0x08	; 8
    19a6:	82 ab       	std	Z+50, r24	; 0x32
    19a8:	2c c0       	rjmp	.+88     	; 0x1a02 <Timebase_UpCounter_Update+0x11a>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    19aa:	82 30       	cpi	r24, 0x02	; 2
    19ac:	51 f5       	brne	.+84     	; 0x1a02 <Timebase_UpCounter_Update+0x11a>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    19ae:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    19b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    19b4:	ac 85       	ldd	r26, Y+12	; 0x0c
    19b6:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    19b8:	78 94       	sei
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    19ba:	25 e1       	ldi	r18, 0x15	; 21
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	42 9f       	mul	r20, r18
    19c0:	f0 01       	movw	r30, r0
    19c2:	43 9f       	mul	r20, r19
    19c4:	f0 0d       	add	r31, r0
    19c6:	52 9f       	mul	r21, r18
    19c8:	f0 0d       	add	r31, r0
    19ca:	11 24       	eor	r1, r1
    19cc:	ec 0f       	add	r30, r28
    19ce:	fd 1f       	adc	r31, r29
    19d0:	23 ad       	ldd	r18, Z+59	; 0x3b
    19d2:	34 ad       	ldd	r19, Z+60	; 0x3c
    19d4:	45 ad       	ldd	r20, Z+61	; 0x3d
    19d6:	56 ad       	ldd	r21, Z+62	; 0x3e
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	a4 1f       	adc	r26, r20
    19de:	b5 1f       	adc	r27, r21
    19e0:	83 ab       	std	Z+51, r24	; 0x33
    19e2:	94 ab       	std	Z+52, r25	; 0x34
    19e4:	a5 ab       	std	Z+53, r26	; 0x35
    19e6:	b6 ab       	std	Z+54, r27	; 0x36
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
    19e8:	87 a9       	ldd	r24, Z+55	; 0x37
    19ea:	90 ad       	ldd	r25, Z+56	; 0x38
    19ec:	a1 ad       	ldd	r26, Z+57	; 0x39
    19ee:	b2 ad       	ldd	r27, Z+58	; 0x3a
    19f0:	82 1b       	sub	r24, r18
    19f2:	93 0b       	sbc	r25, r19
    19f4:	a4 0b       	sbc	r26, r20
    19f6:	b5 0b       	sbc	r27, r21
    19f8:	ff 96       	adiw	r30, 0x3f	; 63
    19fa:	80 83       	st	Z, r24
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	a2 83       	std	Z+2, r26	; 0x02
    1a00:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1a02:	df 91       	pop	r29
    1a04:	cf 91       	pop	r28
    1a06:	1f 91       	pop	r17
    1a08:	0f 91       	pop	r16
    1a0a:	ff 90       	pop	r15
    1a0c:	ef 90       	pop	r14
    1a0e:	08 95       	ret

00001a10 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	e0 91 49 01 	lds	r30, 0x0149
    1a16:	f0 91 4a 01 	lds	r31, 0x014A
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	25 e1       	ldi	r18, 0x15	; 21
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	bc 01       	movw	r22, r24
    1a22:	62 9f       	mul	r22, r18
    1a24:	c0 01       	movw	r24, r0
    1a26:	63 9f       	mul	r22, r19
    1a28:	90 0d       	add	r25, r0
    1a2a:	72 9f       	mul	r23, r18
    1a2c:	90 0d       	add	r25, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	e8 0f       	add	r30, r24
    1a32:	f9 1f       	adc	r31, r25
    1a34:	82 a9       	ldd	r24, Z+50	; 0x32
    1a36:	86 95       	lsr	r24
    1a38:	8f 70       	andi	r24, 0x0F	; 15
    1a3a:	84 30       	cpi	r24, 0x04	; 4
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <Timebase_UpCounter_Expired+0x30>
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a40:	84 2f       	mov	r24, r20
    1a42:	08 95       	ret

00001a44 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1a44:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1a46:	e0 91 49 01 	lds	r30, 0x0149
    1a4a:	f0 91 4a 01 	lds	r31, 0x014A
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	85 e1       	ldi	r24, 0x15	; 21
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	bc 01       	movw	r22, r24
    1a58:	26 9f       	mul	r18, r22
    1a5a:	c0 01       	movw	r24, r0
    1a5c:	27 9f       	mul	r18, r23
    1a5e:	90 0d       	add	r25, r0
    1a60:	36 9f       	mul	r19, r22
    1a62:	90 0d       	add	r25, r0
    1a64:	11 24       	eor	r1, r1
    1a66:	e8 0f       	add	r30, r24
    1a68:	f9 1f       	adc	r31, r25
    1a6a:	82 a9       	ldd	r24, Z+50	; 0x32
    1a6c:	86 95       	lsr	r24
    1a6e:	8f 70       	andi	r24, 0x0F	; 15
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	11 f0       	breq	.+4      	; 0x1a78 <Timebase_UpCounter_Expired_Event+0x34>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1a78:	84 2f       	mov	r24, r20
    1a7a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <Timebase_UpCounter_Reset>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1a80:	08 95       	ret

00001a82 <Timebase_UpCounter_Set_Period_Value_Securely>:

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1a86:	c0 91 49 01 	lds	r28, 0x0149
    1a8a:	d0 91 4a 01 	lds	r29, 0x014A
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    1a90:	25 e1       	ldi	r18, 0x15	; 21
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	e2 9f       	mul	r30, r18
    1a98:	c0 01       	movw	r24, r0
    1a9a:	e3 9f       	mul	r30, r19
    1a9c:	90 0d       	add	r25, r0
    1a9e:	f2 9f       	mul	r31, r18
    1aa0:	90 0d       	add	r25, r0
    1aa2:	11 24       	eor	r1, r1
    1aa4:	c8 0f       	add	r28, r24
    1aa6:	d9 1f       	adc	r29, r25
    1aa8:	8a a9       	ldd	r24, Y+50	; 0x32
    1aaa:	80 fd       	sbrc	r24, 0
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <Timebase_UpCounter_Set_Period_Value_Securely+0x54>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1aae:	fe 01       	movw	r30, r28
    1ab0:	ed 5b       	subi	r30, 0xBD	; 189
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	ef 96       	adiw	r28, 0x3f	; 63
    1ab6:	88 81       	ld	r24, Y
    1ab8:	99 81       	ldd	r25, Y+1	; 0x01
    1aba:	aa 81       	ldd	r26, Y+2	; 0x02
    1abc:	bb 81       	ldd	r27, Y+3	; 0x03
    1abe:	ef 97       	sbiw	r28, 0x3f	; 63
    1ac0:	84 0f       	add	r24, r20
    1ac2:	95 1f       	adc	r25, r21
    1ac4:	a6 1f       	adc	r26, r22
    1ac6:	b7 1f       	adc	r27, r23
    1ac8:	80 83       	st	Z, r24
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	a2 83       	std	Z+2, r26	; 0x02
    1ace:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1ad0:	8a a9       	ldd	r24, Y+50	; 0x32
    1ad2:	81 60       	ori	r24, 0x01	; 1
    1ad4:	8a ab       	std	Y+50, r24	; 0x32
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1adc:	e0 91 49 01 	lds	r30, 0x0149
    1ae0:	f0 91 4a 01 	lds	r31, 0x014A
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1ae6:	25 e1       	ldi	r18, 0x15	; 21
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	ac 01       	movw	r20, r24
    1aec:	42 9f       	mul	r20, r18
    1aee:	c0 01       	movw	r24, r0
    1af0:	43 9f       	mul	r20, r19
    1af2:	90 0d       	add	r25, r0
    1af4:	52 9f       	mul	r21, r18
    1af6:	90 0d       	add	r25, r0
    1af8:	11 24       	eor	r1, r1
    1afa:	e8 0f       	add	r30, r24
    1afc:	f9 1f       	adc	r31, r25
    1afe:	df 01       	movw	r26, r30
    1b00:	df 96       	adiw	r26, 0x3f	; 63
    1b02:	ed 5b       	subi	r30, 0xBD	; 189
    1b04:	ff 4f       	sbci	r31, 0xFF	; 255
    1b06:	20 81       	ld	r18, Z
    1b08:	31 81       	ldd	r19, Z+1	; 0x01
    1b0a:	42 81       	ldd	r20, Z+2	; 0x02
    1b0c:	53 81       	ldd	r21, Z+3	; 0x03
    1b0e:	8d 91       	ld	r24, X+
    1b10:	9d 91       	ld	r25, X+
    1b12:	0d 90       	ld	r0, X+
    1b14:	bc 91       	ld	r27, X
    1b16:	a0 2d       	mov	r26, r0
    1b18:	28 1b       	sub	r18, r24
    1b1a:	39 0b       	sbc	r19, r25
    1b1c:	4a 0b       	sbc	r20, r26
    1b1e:	5b 0b       	sbc	r21, r27
    1b20:	57 ff       	sbrs	r21, 7
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <Timebase_UpCounter_Get_Remaining_Period_Value+0x50>
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	ca 01       	movw	r24, r20
    1b30:	08 95       	ret

00001b32 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1b36:	c0 91 49 01 	lds	r28, 0x0149
    1b3a:	d0 91 4a 01 	lds	r29, 0x014A
    1b3e:	68 2f       	mov	r22, r24
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1b42:	85 e1       	ldi	r24, 0x15	; 21
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	68 9f       	mul	r22, r24
    1b48:	f0 01       	movw	r30, r0
    1b4a:	69 9f       	mul	r22, r25
    1b4c:	f0 0d       	add	r31, r0
    1b4e:	78 9f       	mul	r23, r24
    1b50:	f0 0d       	add	r31, r0
    1b52:	11 24       	eor	r1, r1
    1b54:	ec 0f       	add	r30, r28
    1b56:	fd 1f       	adc	r31, r29
    1b58:	df 01       	movw	r26, r30
    1b5a:	df 96       	adiw	r26, 0x3f	; 63
    1b5c:	ed 5b       	subi	r30, 0xBD	; 189
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	20 81       	ld	r18, Z
    1b62:	31 81       	ldd	r19, Z+1	; 0x01
    1b64:	42 81       	ldd	r20, Z+2	; 0x02
    1b66:	53 81       	ldd	r21, Z+3	; 0x03
    1b68:	8d 91       	ld	r24, X+
    1b6a:	9d 91       	ld	r25, X+
    1b6c:	0d 90       	ld	r0, X+
    1b6e:	bc 91       	ld	r27, X
    1b70:	a0 2d       	mov	r26, r0
    1b72:	28 1b       	sub	r18, r24
    1b74:	39 0b       	sbc	r19, r25
    1b76:	4a 0b       	sbc	r20, r26
    1b78:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1b7a:	57 fd       	sbrc	r21, 7
    1b7c:	07 c0       	rjmp	.+14     	; 0x1b8c <Timebase_UpCounter_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1b7e:	21 15       	cp	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	41 05       	cpc	r20, r1
    1b84:	51 05       	cpc	r21, r1
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <Timebase_UpCounter_Period_Value_Expired+0x5a>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	12 c0       	rjmp	.+36     	; 0x1bb0 <Timebase_UpCounter_Period_Value_Expired+0x7e>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	85 e1       	ldi	r24, 0x15	; 21
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	ac 01       	movw	r20, r24
    1b94:	64 9f       	mul	r22, r20
    1b96:	c0 01       	movw	r24, r0
    1b98:	65 9f       	mul	r22, r21
    1b9a:	90 0d       	add	r25, r0
    1b9c:	74 9f       	mul	r23, r20
    1b9e:	90 0d       	add	r25, r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	c8 0f       	add	r28, r24
    1ba4:	d9 1f       	adc	r29, r25
    1ba6:	8a a9       	ldd	r24, Y+50	; 0x32
    1ba8:	80 ff       	sbrs	r24, 0
    1baa:	21 e0       	ldi	r18, 0x01	; 1
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1bb0:	82 2f       	mov	r24, r18
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	08 95       	ret

00001bb8 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1bb8:	1f 93       	push	r17
    1bba:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1bbc:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <Timebase_UpCounter_Period_Value_Expired>
    1bc0:	81 30       	cpi	r24, 0x01	; 1
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	16 c0       	rjmp	.+44     	; 0x1bf4 <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1bc8:	e0 91 49 01 	lds	r30, 0x0149
    1bcc:	f0 91 4a 01 	lds	r31, 0x014A
    1bd0:	21 2f       	mov	r18, r17
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	85 e1       	ldi	r24, 0x15	; 21
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	ac 01       	movw	r20, r24
    1bda:	24 9f       	mul	r18, r20
    1bdc:	c0 01       	movw	r24, r0
    1bde:	25 9f       	mul	r18, r21
    1be0:	90 0d       	add	r25, r0
    1be2:	34 9f       	mul	r19, r20
    1be4:	90 0d       	add	r25, r0
    1be6:	11 24       	eor	r1, r1
    1be8:	e8 0f       	add	r30, r24
    1bea:	f9 1f       	adc	r31, r25
    1bec:	82 a9       	ldd	r24, Z+50	; 0x32
    1bee:	8e 7f       	andi	r24, 0xFE	; 254
    1bf0:	82 ab       	std	Z+50, r24	; 0x32
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1bf4:	1f 91       	pop	r17
    1bf6:	08 95       	ret

00001bf8 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <Timebase_UpCounter_Update>
  }
}
    1bfe:	08 95       	ret

00001c00 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	0e 94 a9 0b 	call	0x1752	; 0x1752 <Timebase_UpCounter_Reset>
  }
}
    1c06:	08 95       	ret

00001c08 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1c08:	e0 91 49 01 	lds	r30, 0x0149
    1c0c:	f0 91 4a 01 	lds	r31, 0x014A
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c 01       	movw	r18, r24
    1c14:	44 e0       	ldi	r20, 0x04	; 4
    1c16:	22 0f       	add	r18, r18
    1c18:	33 1f       	adc	r19, r19
    1c1a:	4a 95       	dec	r20
    1c1c:	e1 f7       	brne	.-8      	; 0x1c16 <Timebase_DownCounter_SS_Get_Status+0xe>
    1c1e:	28 0f       	add	r18, r24
    1c20:	39 1f       	adc	r19, r25
    1c22:	e2 0f       	add	r30, r18
    1c24:	f3 1f       	adc	r31, r19
    1c26:	e9 5b       	subi	r30, 0xB9	; 185
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	80 81       	ld	r24, Z
    1c2c:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1c2e:	8f 70       	andi	r24, 0x0F	; 15
    1c30:	08 95       	ret

00001c32 <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c32:	e0 91 49 01 	lds	r30, 0x0149
    1c36:	f0 91 4a 01 	lds	r31, 0x014A
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 01       	movw	r18, r24
    1c3e:	54 e0       	ldi	r21, 0x04	; 4
    1c40:	22 0f       	add	r18, r18
    1c42:	33 1f       	adc	r19, r19
    1c44:	5a 95       	dec	r21
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <Timebase_DownCounter_SS_Set_Status+0xe>
    1c48:	28 0f       	add	r18, r24
    1c4a:	39 1f       	adc	r19, r25
    1c4c:	e2 0f       	add	r30, r18
    1c4e:	f3 1f       	adc	r31, r19
    1c50:	e9 5b       	subi	r30, 0xB9	; 185
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	6f 70       	andi	r22, 0x0F	; 15
    1c56:	66 0f       	add	r22, r22
    1c58:	80 81       	ld	r24, Z
    1c5a:	81 7e       	andi	r24, 0xE1	; 225
    1c5c:	86 2b       	or	r24, r22
    1c5e:	80 83       	st	Z, r24
}
    1c60:	08 95       	ret

00001c62 <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1c62:	e0 91 49 01 	lds	r30, 0x0149
    1c66:	f0 91 4a 01 	lds	r31, 0x014A
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9c 01       	movw	r18, r24
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	22 0f       	add	r18, r18
    1c72:	33 1f       	adc	r19, r19
    1c74:	6a 95       	dec	r22
    1c76:	e1 f7       	brne	.-8      	; 0x1c70 <Timebase_DownCounter_SS_Get_Value+0xe>
    1c78:	28 0f       	add	r18, r24
    1c7a:	39 1f       	adc	r19, r25
    1c7c:	e2 0f       	add	r30, r18
    1c7e:	f3 1f       	adc	r31, r19
    1c80:	e0 5b       	subi	r30, 0xB0	; 176
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	08 95       	ret

00001c8e <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1c8e:	e0 91 49 01 	lds	r30, 0x0149
    1c92:	f0 91 4a 01 	lds	r31, 0x014A
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9c 01       	movw	r18, r24
    1c9a:	a4 e0       	ldi	r26, 0x04	; 4
    1c9c:	22 0f       	add	r18, r18
    1c9e:	33 1f       	adc	r19, r19
    1ca0:	aa 95       	dec	r26
    1ca2:	e1 f7       	brne	.-8      	; 0x1c9c <Timebase_DownCounter_SS_Set_Value+0xe>
    1ca4:	28 0f       	add	r18, r24
    1ca6:	39 1f       	adc	r19, r25
    1ca8:	e2 0f       	add	r30, r18
    1caa:	f3 1f       	adc	r31, r19
    1cac:	e0 5b       	subi	r30, 0xB0	; 176
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	40 83       	st	Z, r20
    1cb2:	51 83       	std	Z+1, r21	; 0x01
    1cb4:	62 83       	std	Z+2, r22	; 0x02
    1cb6:	73 83       	std	Z+3, r23	; 0x03
}
    1cb8:	08 95       	ret

00001cba <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1cba:	e0 91 49 01 	lds	r30, 0x0149
    1cbe:	f0 91 4a 01 	lds	r31, 0x014A
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	b4 e0       	ldi	r27, 0x04	; 4
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	ba 95       	dec	r27
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1cd0:	28 0f       	add	r18, r24
    1cd2:	39 1f       	adc	r19, r25
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	e8 5b       	subi	r30, 0xB8	; 184
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	60 81       	ld	r22, Z
    1cde:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1ce0:	82 81       	ldd	r24, Z+2	; 0x02
    1ce2:	93 81       	ldd	r25, Z+3	; 0x03
    1ce4:	08 95       	ret

00001ce6 <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1ce6:	e0 91 49 01 	lds	r30, 0x0149
    1cea:	f0 91 4a 01 	lds	r31, 0x014A
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9c 01       	movw	r18, r24
    1cf2:	44 e0       	ldi	r20, 0x04	; 4
    1cf4:	22 0f       	add	r18, r18
    1cf6:	33 1f       	adc	r19, r19
    1cf8:	4a 95       	dec	r20
    1cfa:	e1 f7       	brne	.-8      	; 0x1cf4 <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1cfc:	28 0f       	add	r18, r24
    1cfe:	39 1f       	adc	r19, r25
    1d00:	e2 0f       	add	r30, r18
    1d02:	f3 1f       	adc	r31, r19
    1d04:	e4 5b       	subi	r30, 0xB4	; 180
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	60 81       	ld	r22, Z
    1d0a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	08 95       	ret

00001d12 <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1d12:	e0 91 49 01 	lds	r30, 0x0149
    1d16:	f0 91 4a 01 	lds	r31, 0x014A
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 01       	movw	r18, r24
    1d1e:	a4 e0       	ldi	r26, 0x04	; 4
    1d20:	22 0f       	add	r18, r18
    1d22:	33 1f       	adc	r19, r19
    1d24:	aa 95       	dec	r26
    1d26:	e1 f7       	brne	.-8      	; 0x1d20 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1d28:	28 0f       	add	r18, r24
    1d2a:	39 1f       	adc	r19, r25
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	e8 5b       	subi	r30, 0xB8	; 184
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	40 83       	st	Z, r20
    1d36:	51 83       	std	Z+1, r21	; 0x01
    1d38:	62 83       	std	Z+2, r22	; 0x02
    1d3a:	73 83       	std	Z+3, r23	; 0x03
}
    1d3c:	08 95       	ret

00001d3e <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1d3e:	e0 91 49 01 	lds	r30, 0x0149
    1d42:	f0 91 4a 01 	lds	r31, 0x014A
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9c 01       	movw	r18, r24
    1d4a:	b4 e0       	ldi	r27, 0x04	; 4
    1d4c:	22 0f       	add	r18, r18
    1d4e:	33 1f       	adc	r19, r19
    1d50:	ba 95       	dec	r27
    1d52:	e1 f7       	brne	.-8      	; 0x1d4c <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1d54:	28 0f       	add	r18, r24
    1d56:	39 1f       	adc	r19, r25
    1d58:	e2 0f       	add	r30, r18
    1d5a:	f3 1f       	adc	r31, r19
    1d5c:	e4 5b       	subi	r30, 0xB4	; 180
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	40 83       	st	Z, r20
    1d62:	51 83       	std	Z+1, r21	; 0x01
    1d64:	62 83       	std	Z+2, r22	; 0x02
    1d66:	73 83       	std	Z+3, r23	; 0x03
}
    1d68:	08 95       	ret

00001d6a <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1d6a:	e0 91 49 01 	lds	r30, 0x0149
    1d6e:	f0 91 4a 01 	lds	r31, 0x014A
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	9c 01       	movw	r18, r24
    1d76:	44 e0       	ldi	r20, 0x04	; 4
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	4a 95       	dec	r20
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1d80:	28 0f       	add	r18, r24
    1d82:	39 1f       	adc	r19, r25
    1d84:	e2 0f       	add	r30, r18
    1d86:	f3 1f       	adc	r31, r19
    1d88:	ec 5a       	subi	r30, 0xAC	; 172
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	08 95       	ret

00001d96 <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1d96:	e0 91 49 01 	lds	r30, 0x0149
    1d9a:	f0 91 4a 01 	lds	r31, 0x014A
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1da2:	77 ff       	sbrs	r23, 7
    1da4:	11 c0       	rjmp	.+34     	; 0x1dc8 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1da6:	c9 01       	movw	r24, r18
    1da8:	b4 e0       	ldi	r27, 0x04	; 4
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	ba 95       	dec	r27
    1db0:	e1 f7       	brne	.-8      	; 0x1daa <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1db2:	82 0f       	add	r24, r18
    1db4:	93 1f       	adc	r25, r19
    1db6:	e8 0f       	add	r30, r24
    1db8:	f9 1f       	adc	r31, r25
    1dba:	ec 5a       	subi	r30, 0xAC	; 172
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	10 82       	st	Z, r1
    1dc0:	11 82       	std	Z+1, r1	; 0x01
    1dc2:	12 82       	std	Z+2, r1	; 0x02
    1dc4:	13 82       	std	Z+3, r1	; 0x03
    1dc6:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1dc8:	c9 01       	movw	r24, r18
    1dca:	a4 e0       	ldi	r26, 0x04	; 4
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	aa 95       	dec	r26
    1dd2:	e1 f7       	brne	.-8      	; 0x1dcc <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	e8 0f       	add	r30, r24
    1dda:	f9 1f       	adc	r31, r25
    1ddc:	ec 5a       	subi	r30, 0xAC	; 172
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	40 83       	st	Z, r20
    1de2:	51 83       	std	Z+1, r21	; 0x01
    1de4:	62 83       	std	Z+2, r22	; 0x02
    1de6:	73 83       	std	Z+3, r23	; 0x03
    1de8:	08 95       	ret

00001dea <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1dea:	e0 91 49 01 	lds	r30, 0x0149
    1dee:	f0 91 4a 01 	lds	r31, 0x014A
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	9c 01       	movw	r18, r24
    1df6:	44 e0       	ldi	r20, 0x04	; 4
    1df8:	22 0f       	add	r18, r18
    1dfa:	33 1f       	adc	r19, r19
    1dfc:	4a 95       	dec	r20
    1dfe:	e1 f7       	brne	.-8      	; 0x1df8 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1e00:	28 0f       	add	r18, r24
    1e02:	39 1f       	adc	r19, r25
    1e04:	e2 0f       	add	r30, r18
    1e06:	f3 1f       	adc	r31, r19
    1e08:	e9 5b       	subi	r30, 0xB9	; 185
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	08 95       	ret

00001e12 <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1e12:	e0 91 49 01 	lds	r30, 0x0149
    1e16:	f0 91 4a 01 	lds	r31, 0x014A
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9c 01       	movw	r18, r24
    1e1e:	54 e0       	ldi	r21, 0x04	; 4
    1e20:	22 0f       	add	r18, r18
    1e22:	33 1f       	adc	r19, r19
    1e24:	5a 95       	dec	r21
    1e26:	e1 f7       	brne	.-8      	; 0x1e20 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1e28:	28 0f       	add	r18, r24
    1e2a:	39 1f       	adc	r19, r25
    1e2c:	e2 0f       	add	r30, r18
    1e2e:	f3 1f       	adc	r31, r19
    1e30:	e9 5b       	subi	r30, 0xB9	; 185
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	80 81       	ld	r24, Z
    1e36:	81 60       	ori	r24, 0x01	; 1
    1e38:	80 83       	st	Z, r24
}
    1e3a:	08 95       	ret

00001e3c <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e3c:	e0 91 49 01 	lds	r30, 0x0149
    1e40:	f0 91 4a 01 	lds	r31, 0x014A
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	9c 01       	movw	r18, r24
    1e48:	64 e0       	ldi	r22, 0x04	; 4
    1e4a:	22 0f       	add	r18, r18
    1e4c:	33 1f       	adc	r19, r19
    1e4e:	6a 95       	dec	r22
    1e50:	e1 f7       	brne	.-8      	; 0x1e4a <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1e52:	28 0f       	add	r18, r24
    1e54:	39 1f       	adc	r19, r25
    1e56:	e2 0f       	add	r30, r18
    1e58:	f3 1f       	adc	r31, r19
    1e5a:	e9 5b       	subi	r30, 0xB9	; 185
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	8e 7f       	andi	r24, 0xFE	; 254
    1e62:	80 83       	st	Z, r24
}
    1e64:	08 95       	ret

00001e66 <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e66:	e0 91 49 01 	lds	r30, 0x0149
    1e6a:	f0 91 4a 01 	lds	r31, 0x014A
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 01       	movw	r18, r24
    1e72:	74 e0       	ldi	r23, 0x04	; 4
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	7a 95       	dec	r23
    1e7a:	e1 f7       	brne	.-8      	; 0x1e74 <Timebase_DownCounter_SS_Reset+0xe>
    1e7c:	28 0f       	add	r18, r24
    1e7e:	39 1f       	adc	r19, r25
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
    1e84:	e4 5b       	subi	r30, 0xB4	; 180
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	10 82       	st	Z, r1
    1e8a:	11 82       	std	Z+1, r1	; 0x01
    1e8c:	12 82       	std	Z+2, r1	; 0x02
    1e8e:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e90:	12 92       	st	-Z, r1
    1e92:	12 92       	st	-Z, r1
    1e94:	12 92       	st	-Z, r1
    1e96:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e98:	38 96       	adiw	r30, 0x08	; 8
    1e9a:	10 82       	st	Z, r1
    1e9c:	11 82       	std	Z+1, r1	; 0x01
    1e9e:	12 82       	std	Z+2, r1	; 0x02
    1ea0:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ea2:	39 97       	sbiw	r30, 0x09	; 9
    1ea4:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1ea6:	80 7e       	andi	r24, 0xE0	; 224
    1ea8:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1eaa:	08 95       	ret

00001eac <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1eac:	e0 91 49 01 	lds	r30, 0x0149
    1eb0:	f0 91 4a 01 	lds	r31, 0x014A
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9c 01       	movw	r18, r24
    1eb8:	a4 e0       	ldi	r26, 0x04	; 4
    1eba:	22 0f       	add	r18, r18
    1ebc:	33 1f       	adc	r19, r19
    1ebe:	aa 95       	dec	r26
    1ec0:	e1 f7       	brne	.-8      	; 0x1eba <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1ec2:	28 0f       	add	r18, r24
    1ec4:	39 1f       	adc	r19, r25
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	e4 5b       	subi	r30, 0xB4	; 180
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	10 82       	st	Z, r1
    1ed0:	11 82       	std	Z+1, r1	; 0x01
    1ed2:	12 82       	std	Z+2, r1	; 0x02
    1ed4:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ed6:	12 92       	st	-Z, r1
    1ed8:	12 92       	st	-Z, r1
    1eda:	12 92       	st	-Z, r1
    1edc:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ede:	38 96       	adiw	r30, 0x08	; 8
    1ee0:	10 82       	st	Z, r1
    1ee2:	11 82       	std	Z+1, r1	; 0x01
    1ee4:	12 82       	std	Z+2, r1	; 0x02
    1ee6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ee8:	39 97       	sbiw	r30, 0x09	; 9
    1eea:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1eec:	80 7e       	andi	r24, 0xE0	; 224
    1eee:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1ef0:	08 95       	ret

00001ef2 <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ef2:	e0 91 49 01 	lds	r30, 0x0149
    1ef6:	f0 91 4a 01 	lds	r31, 0x014A
    1efa:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1efc:	9c 01       	movw	r18, r24
    1efe:	b4 e0       	ldi	r27, 0x04	; 4
    1f00:	22 0f       	add	r18, r18
    1f02:	33 1f       	adc	r19, r19
    1f04:	ba 95       	dec	r27
    1f06:	e1 f7       	brne	.-8      	; 0x1f00 <Timebase_DownCounter_SS_Start+0xe>
    1f08:	28 0f       	add	r18, r24
    1f0a:	39 1f       	adc	r19, r25
    1f0c:	e2 0f       	add	r30, r18
    1f0e:	f3 1f       	adc	r31, r19
    1f10:	e9 5b       	subi	r30, 0xB9	; 185
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	90 81       	ld	r25, Z
    1f16:	89 2f       	mov	r24, r25
    1f18:	86 95       	lsr	r24
    1f1a:	8f 70       	andi	r24, 0x0F	; 15
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f20:	91 7e       	andi	r25, 0xE1	; 225
    1f22:	92 60       	ori	r25, 0x02	; 2
    1f24:	90 83       	st	Z, r25
    1f26:	08 95       	ret

00001f28 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f28:	e0 91 49 01 	lds	r30, 0x0149
    1f2c:	f0 91 4a 01 	lds	r31, 0x014A
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1f32:	9c 01       	movw	r18, r24
    1f34:	44 e0       	ldi	r20, 0x04	; 4
    1f36:	22 0f       	add	r18, r18
    1f38:	33 1f       	adc	r19, r19
    1f3a:	4a 95       	dec	r20
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <Timebase_DownCounter_SS_Stop+0xe>
    1f3e:	28 0f       	add	r18, r24
    1f40:	39 1f       	adc	r19, r25
    1f42:	e2 0f       	add	r30, r18
    1f44:	f3 1f       	adc	r31, r19
    1f46:	e9 5b       	subi	r30, 0xB9	; 185
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	90 81       	ld	r25, Z
    1f4c:	89 2f       	mov	r24, r25
    1f4e:	86 95       	lsr	r24
    1f50:	8f 70       	andi	r24, 0x0F	; 15
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	19 f0       	breq	.+6      	; 0x1f5c <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f56:	91 7e       	andi	r25, 0xE1	; 225
    1f58:	94 60       	ori	r25, 0x04	; 4
    1f5a:	90 83       	st	Z, r25
    1f5c:	08 95       	ret

00001f5e <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1f5e:	2f 92       	push	r2
    1f60:	3f 92       	push	r3
    1f62:	4f 92       	push	r4
    1f64:	5f 92       	push	r5
    1f66:	6f 92       	push	r6
    1f68:	7f 92       	push	r7
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <Timebase_DownCounter_SS_Set_Securely+0x26>
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	4a 01       	movw	r8, r20
    1f8c:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1f8e:	20 91 49 01 	lds	r18, 0x0149
    1f92:	30 91 4a 01 	lds	r19, 0x014A
    1f96:	3c 83       	std	Y+4, r19	; 0x04
    1f98:	2b 83       	std	Y+3, r18	; 0x03
    1f9a:	a8 2f       	mov	r26, r24
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	ba 83       	std	Y+2, r27	; 0x02
    1fa0:	a9 83       	std	Y+1, r26	; 0x01
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1fa2:	fd 01       	movw	r30, r26
    1fa4:	64 e0       	ldi	r22, 0x04	; 4
    1fa6:	ee 0f       	add	r30, r30
    1fa8:	ff 1f       	adc	r31, r31
    1faa:	6a 95       	dec	r22
    1fac:	e1 f7       	brne	.-8      	; 0x1fa6 <Timebase_DownCounter_SS_Set_Securely+0x48>
    1fae:	ea 0f       	add	r30, r26
    1fb0:	fb 1f       	adc	r31, r27
    1fb2:	e2 0f       	add	r30, r18
    1fb4:	f3 1f       	adc	r31, r19
    1fb6:	e9 5b       	subi	r30, 0xB9	; 185
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	80 81       	ld	r24, Z
    1fbc:	e7 54       	subi	r30, 0x47	; 71
    1fbe:	f0 40       	sbci	r31, 0x00	; 0
    1fc0:	86 95       	lsr	r24
    1fc2:	8f 70       	andi	r24, 0x0F	; 15
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1fc6:	76 c0       	rjmp	.+236    	; 0x20b4 <Timebase_DownCounter_SS_Set_Securely+0x156>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1fc8:	e0 5b       	subi	r30, 0xB0	; 176
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 82       	st	Z, r8
    1fce:	91 82       	std	Z+1, r9	; 0x01
    1fd0:	a2 82       	std	Z+2, r10	; 0x02
    1fd2:	b3 82       	std	Z+3, r11	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1fd4:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    1fd6:	f9 01       	movw	r30, r18
    1fd8:	c0 84       	ldd	r12, Z+8	; 0x08
    1fda:	d1 84       	ldd	r13, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1fdc:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    1fde:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    1fe0:	22 84       	ldd	r2, Z+10	; 0x0a
    1fe2:	33 84       	ldd	r3, Z+11	; 0x0b
    1fe4:	44 84       	ldd	r4, Z+12	; 0x0c
    1fe6:	55 84       	ldd	r5, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    1fe8:	78 94       	sei
void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	int32_t subsec_val = value % Timebase->Config.UpdateRate;
    1fea:	21 81       	ldd	r18, Z+1	; 0x01
    1fec:	32 81       	ldd	r19, Z+2	; 0x02
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	50 e0       	ldi	r21, 0x00	; 0
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
    1ffa:	7b 01       	movw	r14, r22
    1ffc:	8c 01       	movw	r16, r24
	int32_t sec_val    = value / Timebase->Config.UpdateRate;
    1ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    2000:	bc 81       	ldd	r27, Y+4	; 0x04
    2002:	11 96       	adiw	r26, 0x01	; 1
    2004:	2d 91       	ld	r18, X+
    2006:	3c 91       	ld	r19, X
    2008:	12 97       	sbiw	r26, 0x02	; 2
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	50 e0       	ldi	r21, 0x00	; 0
    200e:	c5 01       	movw	r24, r10
    2010:	b4 01       	movw	r22, r8
    2012:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
    2016:	c9 01       	movw	r24, r18
    2018:	da 01       	movw	r26, r20
    201a:	3c 01       	movw	r6, r24
    201c:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    201e:	56 01       	movw	r10, r12
    2020:	cc 24       	eor	r12, r12
    2022:	dd 24       	eor	r13, r13
    2024:	ae 0c       	add	r10, r14
    2026:	bf 1c       	adc	r11, r15
    2028:	c0 1e       	adc	r12, r16
    202a:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    202c:	eb 81       	ldd	r30, Y+3	; 0x03
    202e:	fc 81       	ldd	r31, Y+4	; 0x04
    2030:	81 81       	ldd	r24, Z+1	; 0x01
    2032:	92 81       	ldd	r25, Z+2	; 0x02
    2034:	a0 e0       	ldi	r26, 0x00	; 0
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	a8 16       	cp	r10, r24
    203a:	b9 06       	cpc	r11, r25
    203c:	ca 06       	cpc	r12, r26
    203e:	db 06       	cpc	r13, r27
    2040:	94 f0       	brlt	.+36     	; 0x2066 <Timebase_DownCounter_SS_Set_Securely+0x108>
	  sec_val += 1;
    2042:	08 94       	sec
    2044:	61 1c       	adc	r6, r1
    2046:	71 1c       	adc	r7, r1
    2048:	81 1c       	adc	r8, r1
    204a:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    204c:	21 81       	ldd	r18, Z+1	; 0x01
    204e:	32 81       	ldd	r19, Z+2	; 0x02
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	c6 01       	movw	r24, r12
    2056:	b5 01       	movw	r22, r10
    2058:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
    205c:	ac 01       	movw	r20, r24
    205e:	cb 01       	movw	r24, r22
    2060:	da 01       	movw	r26, r20
    2062:	5c 01       	movw	r10, r24
    2064:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2066:	e9 81       	ldd	r30, Y+1	; 0x01
    2068:	fa 81       	ldd	r31, Y+2	; 0x02
    206a:	54 e0       	ldi	r21, 0x04	; 4
    206c:	ee 0f       	add	r30, r30
    206e:	ff 1f       	adc	r31, r31
    2070:	5a 95       	dec	r21
    2072:	e1 f7       	brne	.-8      	; 0x206c <Timebase_DownCounter_SS_Set_Securely+0x10e>
    2074:	29 81       	ldd	r18, Y+1	; 0x01
    2076:	3a 81       	ldd	r19, Y+2	; 0x02
    2078:	e2 0f       	add	r30, r18
    207a:	f3 1f       	adc	r31, r19
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	9c 81       	ldd	r25, Y+4	; 0x04
    2080:	e8 0f       	add	r30, r24
    2082:	f9 1f       	adc	r31, r25
    2084:	e8 5b       	subi	r30, 0xB8	; 184
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	26 0c       	add	r2, r6
    208a:	37 1c       	adc	r3, r7
    208c:	48 1c       	adc	r4, r8
    208e:	59 1c       	adc	r5, r9
    2090:	21 92       	st	Z+, r2
    2092:	31 92       	st	Z+, r3
    2094:	41 92       	st	Z+, r4
    2096:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2098:	a0 82       	st	Z, r10
    209a:	b1 82       	std	Z+1, r11	; 0x01
    209c:	c2 82       	std	Z+2, r12	; 0x02
    209e:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    20a0:	35 97       	sbiw	r30, 0x05	; 5
    20a2:	90 81       	ld	r25, Z
    20a4:	89 2f       	mov	r24, r25
    20a6:	86 95       	lsr	r24
    20a8:	8f 70       	andi	r24, 0x0F	; 15
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <Timebase_DownCounter_SS_Set_Securely+0x156>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    20ae:	91 7e       	andi	r25, 0xE1	; 225
    20b0:	92 60       	ori	r25, 0x02	; 2
    20b2:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    20b4:	0f 90       	pop	r0
    20b6:	0f 90       	pop	r0
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	cf 91       	pop	r28
    20be:	df 91       	pop	r29
    20c0:	1f 91       	pop	r17
    20c2:	0f 91       	pop	r16
    20c4:	ff 90       	pop	r15
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	bf 90       	pop	r11
    20ce:	af 90       	pop	r10
    20d0:	9f 90       	pop	r9
    20d2:	8f 90       	pop	r8
    20d4:	7f 90       	pop	r7
    20d6:	6f 90       	pop	r6
    20d8:	5f 90       	pop	r5
    20da:	4f 90       	pop	r4
    20dc:	3f 90       	pop	r3
    20de:	2f 90       	pop	r2
    20e0:	08 95       	ret

000020e2 <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    20e2:	e0 91 49 01 	lds	r30, 0x0149
    20e6:	f0 91 4a 01 	lds	r31, 0x014A
    20ea:	a8 2f       	mov	r26, r24
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	9d 01       	movw	r18, r26
    20f0:	94 e0       	ldi	r25, 0x04	; 4
    20f2:	22 0f       	add	r18, r18
    20f4:	33 1f       	adc	r19, r19
    20f6:	9a 95       	dec	r25
    20f8:	e1 f7       	brne	.-8      	; 0x20f2 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    20fa:	2a 0f       	add	r18, r26
    20fc:	3b 1f       	adc	r19, r27
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	e4 5b       	subi	r30, 0xB4	; 180
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	10 82       	st	Z, r1
    2108:	11 82       	std	Z+1, r1	; 0x01
    210a:	12 82       	std	Z+2, r1	; 0x02
    210c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    210e:	12 92       	st	-Z, r1
    2110:	12 92       	st	-Z, r1
    2112:	12 92       	st	-Z, r1
    2114:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2116:	38 96       	adiw	r30, 0x08	; 8
    2118:	10 82       	st	Z, r1
    211a:	11 82       	std	Z+1, r1	; 0x01
    211c:	12 82       	std	Z+2, r1	; 0x02
    211e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2120:	39 97       	sbiw	r30, 0x09	; 9
    2122:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2124:	90 7e       	andi	r25, 0xE0	; 224
    2126:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2128:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Timebase_DownCounter_SS_Set_Securely>
} 
    212c:	08 95       	ret

0000212e <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    212e:	4f 92       	push	r4
    2130:	5f 92       	push	r5
    2132:	6f 92       	push	r6
    2134:	7f 92       	push	r7
    2136:	8f 92       	push	r8
    2138:	9f 92       	push	r9
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <Timebase_DownCounter_SS_Update+0x22>
    2150:	00 d0       	rcall	.+0      	; 0x2152 <Timebase_DownCounter_SS_Update+0x24>
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2156:	60 90 49 01 	lds	r6, 0x0149
    215a:	70 90 4a 01 	lds	r7, 0x014A
    215e:	c8 2e       	mov	r12, r24
    2160:	dd 24       	eor	r13, r13
    2162:	f6 01       	movw	r30, r12
    2164:	54 e0       	ldi	r21, 0x04	; 4
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	5a 95       	dec	r21
    216c:	e1 f7       	brne	.-8      	; 0x2166 <Timebase_DownCounter_SS_Update+0x38>
    216e:	ec 0d       	add	r30, r12
    2170:	fd 1d       	adc	r31, r13
    2172:	e6 0d       	add	r30, r6
    2174:	f7 1d       	adc	r31, r7
    2176:	e9 5b       	subi	r30, 0xB9	; 185
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	e0 81       	ld	r30, Z
    217c:	e6 95       	lsr	r30
    217e:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    2180:	e1 30       	cpi	r30, 0x01	; 1
    2182:	09 f0       	breq	.+2      	; 0x2186 <Timebase_DownCounter_SS_Update+0x58>
    2184:	75 c0       	rjmp	.+234    	; 0x2270 <Timebase_DownCounter_SS_Update+0x142>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2186:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    2188:	d3 01       	movw	r26, r6
    218a:	18 96       	adiw	r26, 0x08	; 8
    218c:	8d 91       	ld	r24, X+
    218e:	9c 91       	ld	r25, X
    2190:	19 97       	sbiw	r26, 0x09	; 9
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2192:	78 94       	sei
  Timebase_DownCounter_SS_Set_Securely( window, value );
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
    2194:	4c 01       	movw	r8, r24
    2196:	aa 24       	eor	r10, r10
    2198:	bb 24       	eor	r11, r11

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    219a:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    219c:	f3 01       	movw	r30, r6
    219e:	82 85       	ldd	r24, Z+10	; 0x0a
    21a0:	93 85       	ldd	r25, Z+11	; 0x0b
    21a2:	a4 85       	ldd	r26, Z+12	; 0x0c
    21a4:	b5 85       	ldd	r27, Z+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    21a6:	78 94       	sei
void Timebase_DownCounter_SS_Update(uint8_t window){
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    int32_t temp_ss = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    21a8:	f6 01       	movw	r30, r12
    21aa:	44 e0       	ldi	r20, 0x04	; 4
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	4a 95       	dec	r20
    21b2:	e1 f7       	brne	.-8      	; 0x21ac <Timebase_DownCounter_SS_Update+0x7e>
    21b4:	ec 0d       	add	r30, r12
    21b6:	fd 1d       	adc	r31, r13
    21b8:	e6 0d       	add	r30, r6
    21ba:	f7 1d       	adc	r31, r7
    21bc:	e8 5b       	subi	r30, 0xB8	; 184
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	e0 80       	ld	r14, Z
    21c2:	f1 80       	ldd	r15, Z+1	; 0x01
    21c4:	02 81       	ldd	r16, Z+2	; 0x02
    21c6:	13 81       	ldd	r17, Z+3	; 0x03
    21c8:	e8 1a       	sub	r14, r24
    21ca:	f9 0a       	sbc	r15, r25
    21cc:	0a 0b       	sbc	r16, r26
    21ce:	1b 0b       	sbc	r17, r27
    21d0:	17 ff       	sbrs	r17, 7
    21d2:	03 c0       	rjmp	.+6      	; 0x21da <Timebase_DownCounter_SS_Update+0xac>
    21d4:	ee 24       	eor	r14, r14
    21d6:	ff 24       	eor	r15, r15
    21d8:	87 01       	movw	r16, r14
	if(temp_s < 0){
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
    21da:	d3 01       	movw	r26, r6
    21dc:	11 96       	adiw	r26, 0x01	; 1
    21de:	2d 91       	ld	r18, X+
    21e0:	3c 91       	ld	r19, X
    21e2:	12 97       	sbiw	r26, 0x02	; 2
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	c8 01       	movw	r24, r16
    21ea:	b7 01       	movw	r22, r14
    21ec:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__mulsi3>
	temp_s += temp_ss;
    21f0:	f6 01       	movw	r30, r12
    21f2:	34 e0       	ldi	r19, 0x04	; 4
    21f4:	ee 0f       	add	r30, r30
    21f6:	ff 1f       	adc	r31, r31
    21f8:	3a 95       	dec	r19
    21fa:	e1 f7       	brne	.-8      	; 0x21f4 <Timebase_DownCounter_SS_Update+0xc6>
    21fc:	ec 0d       	add	r30, r12
    21fe:	fd 1d       	adc	r31, r13
    2200:	e6 0d       	add	r30, r6
    2202:	f7 1d       	adc	r31, r7
    2204:	8f 01       	movw	r16, r30
    2206:	04 5b       	subi	r16, 0xB4	; 180
    2208:	1f 4f       	sbci	r17, 0xFF	; 255
    220a:	d8 01       	movw	r26, r16
    220c:	2d 91       	ld	r18, X+
    220e:	3d 91       	ld	r19, X+
    2210:	4d 91       	ld	r20, X+
    2212:	5c 91       	ld	r21, X
    2214:	28 19       	sub	r18, r8
    2216:	39 09       	sbc	r19, r9
    2218:	4a 09       	sbc	r20, r10
    221a:	5b 09       	sbc	r21, r11
    221c:	26 0f       	add	r18, r22
    221e:	37 1f       	adc	r19, r23
    2220:	48 1f       	adc	r20, r24
    2222:	59 1f       	adc	r21, r25
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2224:	cf 01       	movw	r24, r30
    2226:	80 5b       	subi	r24, 0xB0	; 176
    2228:	9f 4f       	sbci	r25, 0xFF	; 255
    222a:	dc 01       	movw	r26, r24
    222c:	2d 93       	st	X+, r18
    222e:	3d 93       	st	X+, r19
    2230:	4d 93       	st	X+, r20
    2232:	5c 93       	st	X, r21
    2234:	13 97       	sbiw	r26, 0x03	; 3
	  temp_s = 0;
	}
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    2236:	12 16       	cp	r1, r18
    2238:	13 06       	cpc	r1, r19
    223a:	14 06       	cpc	r1, r20
    223c:	15 06       	cpc	r1, r21
    223e:	0c f4       	brge	.+2      	; 0x2242 <Timebase_DownCounter_SS_Update+0x114>
    2240:	6a c0       	rjmp	.+212    	; 0x2316 <Timebase_DownCounter_SS_Update+0x1e8>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2242:	d8 01       	movw	r26, r16
    2244:	1d 92       	st	X+, r1
    2246:	1d 92       	st	X+, r1
    2248:	1d 92       	st	X+, r1
    224a:	1c 92       	st	X, r1
    224c:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    224e:	e8 5b       	subi	r30, 0xB8	; 184
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	10 82       	st	Z, r1
    2254:	11 82       	std	Z+1, r1	; 0x01
    2256:	12 82       	std	Z+2, r1	; 0x02
    2258:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    225a:	dc 01       	movw	r26, r24
    225c:	1d 92       	st	X+, r1
    225e:	1d 92       	st	X+, r1
    2260:	1d 92       	st	X+, r1
    2262:	1c 92       	st	X, r1
    2264:	13 97       	sbiw	r26, 0x03	; 3
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2266:	82 91       	ld	r24, -Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2268:	80 7e       	andi	r24, 0xE0	; 224
    226a:	88 60       	ori	r24, 0x08	; 8
    226c:	80 83       	st	Z, r24
    226e:	53 c0       	rjmp	.+166    	; 0x2316 <Timebase_DownCounter_SS_Update+0x1e8>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2270:	e2 30       	cpi	r30, 0x02	; 2
    2272:	09 f0       	breq	.+2      	; 0x2276 <Timebase_DownCounter_SS_Update+0x148>
    2274:	50 c0       	rjmp	.+160    	; 0x2316 <Timebase_DownCounter_SS_Update+0x1e8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2276:	f8 94       	cli

uint16_t Timebase_Timer_Get_SubSeconds(void){
  #ifdef TIMEBASE_SUBSEC_COUNT_ATOMIC_OPERATION
  uint16_t curr_ss = 0;
  Timebase_Atomic_Operation_Start();
  curr_ss = Timebase->Time.SubSeconds;
    2278:	f3 01       	movw	r30, r6
    227a:	40 84       	ldd	r4, Z+8	; 0x08
    227c:	51 84       	ldd	r5, Z+9	; 0x09
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    227e:	78 94       	sei

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2280:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2282:	d3 01       	movw	r26, r6
    2284:	1a 96       	adiw	r26, 0x0a	; 10
    2286:	8d 90       	ld	r8, X+
    2288:	9d 90       	ld	r9, X+
    228a:	ad 90       	ld	r10, X+
    228c:	bc 90       	ld	r11, X
    228e:	1d 97       	sbiw	r26, 0x0d	; 13
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2290:	78 94       	sei
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2292:	86 01       	movw	r16, r12
    2294:	24 e0       	ldi	r18, 0x04	; 4
    2296:	00 0f       	add	r16, r16
    2298:	11 1f       	adc	r17, r17
    229a:	2a 95       	dec	r18
    229c:	e1 f7       	brne	.-8      	; 0x2296 <Timebase_DownCounter_SS_Update+0x168>
    229e:	0c 0d       	add	r16, r12
    22a0:	1d 1d       	adc	r17, r13
    22a2:	06 0d       	add	r16, r6
    22a4:	17 1d       	adc	r17, r7
    22a6:	00 5b       	subi	r16, 0xB0	; 176
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	d8 01       	movw	r26, r16
    22ac:	8d 91       	ld	r24, X+
    22ae:	9d 91       	ld	r25, X+
    22b0:	0d 90       	ld	r0, X+
    22b2:	bc 91       	ld	r27, X
    22b4:	a0 2d       	mov	r26, r0
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	ab 83       	std	Y+3, r26	; 0x03
    22bc:	bc 83       	std	Y+4, r27	; 0x04
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    int32_t temp_ss  = Timebase_Timer_Get_SubSeconds();
	int32_t temp_s   = Timebase_Timer_Get_Seconds();
	int32_t curr_val = Timebase_DownCounter_SS_Get_Value(window);
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
    22be:	f3 01       	movw	r30, r6
    22c0:	21 81       	ldd	r18, Z+1	; 0x01
    22c2:	32 81       	ldd	r19, Z+2	; 0x02
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
    22c4:	c1 80       	ldd	r12, Z+1	; 0x01
    22c6:	d2 80       	ldd	r13, Z+2	; 0x02
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    22c8:	08 50       	subi	r16, 0x08	; 8
    22ca:	10 40       	sbci	r17, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	50 e0       	ldi	r21, 0x00	; 0
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
    22d8:	82 0e       	add	r8, r18
    22da:	93 1e       	adc	r9, r19
    22dc:	a4 1e       	adc	r10, r20
    22de:	b5 1e       	adc	r11, r21
    22e0:	d8 01       	movw	r26, r16
    22e2:	8d 92       	st	X+, r8
    22e4:	9d 92       	st	X+, r9
    22e6:	ad 92       	st	X+, r10
    22e8:	bd 92       	st	X+, r11
    22ea:	8d 01       	movw	r16, r26
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    22ec:	ee 24       	eor	r14, r14
    22ee:	ff 24       	eor	r15, r15
    22f0:	69 81       	ldd	r22, Y+1	; 0x01
    22f2:	7a 81       	ldd	r23, Y+2	; 0x02
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	a7 01       	movw	r20, r14
    22fa:	96 01       	movw	r18, r12
    22fc:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <__divmodsi4>
    2300:	66 24       	eor	r6, r6
    2302:	77 24       	eor	r7, r7
    2304:	46 0e       	add	r4, r22
    2306:	57 1e       	adc	r5, r23
    2308:	68 1e       	adc	r6, r24
    230a:	79 1e       	adc	r7, r25
    230c:	f8 01       	movw	r30, r16
    230e:	40 82       	st	Z, r4
    2310:	51 82       	std	Z+1, r5	; 0x01
    2312:	62 82       	std	Z+2, r6	; 0x02
    2314:	73 82       	std	Z+3, r7	; 0x03
	int32_t curr_s   = curr_val / Timebase->Config.UpdateRate;
	int32_t curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	ff 90       	pop	r15
    2328:	ef 90       	pop	r14
    232a:	df 90       	pop	r13
    232c:	cf 90       	pop	r12
    232e:	bf 90       	pop	r11
    2330:	af 90       	pop	r10
    2332:	9f 90       	pop	r9
    2334:	8f 90       	pop	r8
    2336:	7f 90       	pop	r7
    2338:	6f 90       	pop	r6
    233a:	5f 90       	pop	r5
    233c:	4f 90       	pop	r4
    233e:	08 95       	ret

00002340 <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    2340:	40 e0       	ldi	r20, 0x00	; 0
    2342:	e0 91 49 01 	lds	r30, 0x0149
    2346:	f0 91 4a 01 	lds	r31, 0x014A
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9c 01       	movw	r18, r24
    234e:	64 e0       	ldi	r22, 0x04	; 4
    2350:	22 0f       	add	r18, r18
    2352:	33 1f       	adc	r19, r19
    2354:	6a 95       	dec	r22
    2356:	e1 f7       	brne	.-8      	; 0x2350 <Timebase_DownCounter_SS_Expired+0x10>
    2358:	28 0f       	add	r18, r24
    235a:	39 1f       	adc	r19, r25
    235c:	e2 0f       	add	r30, r18
    235e:	f3 1f       	adc	r31, r19
    2360:	e9 5b       	subi	r30, 0xB9	; 185
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 81       	ld	r24, Z
    2366:	86 95       	lsr	r24
    2368:	8f 70       	andi	r24, 0x0F	; 15
    236a:	84 30       	cpi	r24, 0x04	; 4
    236c:	09 f4       	brne	.+2      	; 0x2370 <Timebase_DownCounter_SS_Expired+0x30>
    236e:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2370:	84 2f       	mov	r24, r20
    2372:	08 95       	ret

00002374 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2374:	e0 91 49 01 	lds	r30, 0x0149
    2378:	f0 91 4a 01 	lds	r31, 0x014A
    237c:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    237e:	9c 01       	movw	r18, r24
    2380:	74 e0       	ldi	r23, 0x04	; 4
    2382:	22 0f       	add	r18, r18
    2384:	33 1f       	adc	r19, r19
    2386:	7a 95       	dec	r23
    2388:	e1 f7       	brne	.-8      	; 0x2382 <Timebase_DownCounter_SS_Expired_Event+0xe>
    238a:	28 0f       	add	r18, r24
    238c:	39 1f       	adc	r19, r25
    238e:	e2 0f       	add	r30, r18
    2390:	f3 1f       	adc	r31, r19
    2392:	df 01       	movw	r26, r30
    2394:	a9 5b       	subi	r26, 0xB9	; 185
    2396:	bf 4f       	sbci	r27, 0xFF	; 255
    2398:	8c 91       	ld	r24, X
    239a:	86 95       	lsr	r24
    239c:	8f 70       	andi	r24, 0x0F	; 15
    239e:	84 30       	cpi	r24, 0x04	; 4
    23a0:	11 f0       	breq	.+4      	; 0x23a6 <Timebase_DownCounter_SS_Expired_Event+0x32>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    23a6:	e4 5b       	subi	r30, 0xB4	; 180
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	10 82       	st	Z, r1
    23ac:	11 82       	std	Z+1, r1	; 0x01
    23ae:	12 82       	std	Z+2, r1	; 0x02
    23b0:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    23b2:	12 92       	st	-Z, r1
    23b4:	12 92       	st	-Z, r1
    23b6:	12 92       	st	-Z, r1
    23b8:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    23ba:	38 96       	adiw	r30, 0x08	; 8
    23bc:	10 82       	st	Z, r1
    23be:	11 82       	std	Z+1, r1	; 0x01
    23c0:	12 82       	std	Z+2, r1	; 0x02
    23c2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    23c4:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    23c6:	80 7e       	andi	r24, 0xE0	; 224
    23c8:	8c 93       	st	X, r24
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    23cc:	08 95       	ret

000023ce <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    23ce:	cf 93       	push	r28
    23d0:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    23d2:	c0 91 49 01 	lds	r28, 0x0149
    23d6:	d0 91 4a 01 	lds	r29, 0x014A
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    23de:	f9 01       	movw	r30, r18
    23e0:	b4 e0       	ldi	r27, 0x04	; 4
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ba 95       	dec	r27
    23e8:	e1 f7       	brne	.-8      	; 0x23e2 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    23ea:	e2 0f       	add	r30, r18
    23ec:	f3 1f       	adc	r31, r19
    23ee:	ec 0f       	add	r30, r28
    23f0:	fd 1f       	adc	r31, r29
    23f2:	e9 5b       	subi	r30, 0xB9	; 185
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	80 81       	ld	r24, Z
    23f8:	e7 54       	subi	r30, 0x47	; 71
    23fa:	f0 40       	sbci	r31, 0x00	; 0
    23fc:	80 fd       	sbrc	r24, 0
    23fe:	24 c0       	rjmp	.+72     	; 0x2448 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    2400:	e0 5b       	subi	r30, 0xB0	; 176
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	81 91       	ld	r24, Z+
    2406:	91 91       	ld	r25, Z+
    2408:	a1 91       	ld	r26, Z+
    240a:	b1 91       	ld	r27, Z+
    240c:	84 1b       	sub	r24, r20
    240e:	95 0b       	sbc	r25, r21
    2410:	a6 0b       	sbc	r26, r22
    2412:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2414:	b7 ff       	sbrs	r27, 7
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2418:	10 82       	st	Z, r1
    241a:	11 82       	std	Z+1, r1	; 0x01
    241c:	12 82       	std	Z+2, r1	; 0x02
    241e:	13 82       	std	Z+3, r1	; 0x03
    2420:	04 c0       	rjmp	.+8      	; 0x242a <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    2422:	80 83       	st	Z, r24
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	a2 83       	std	Z+2, r26	; 0x02
    2428:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    242a:	f9 01       	movw	r30, r18
    242c:	a4 e0       	ldi	r26, 0x04	; 4
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	aa 95       	dec	r26
    2434:	e1 f7       	brne	.-8      	; 0x242e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    2436:	e2 0f       	add	r30, r18
    2438:	f3 1f       	adc	r31, r19
    243a:	ec 0f       	add	r30, r28
    243c:	fd 1f       	adc	r31, r29
    243e:	e9 5b       	subi	r30, 0xB9	; 185
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	81 60       	ori	r24, 0x01	; 1
    2446:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    2448:	df 91       	pop	r29
    244a:	cf 91       	pop	r28
    244c:	08 95       	ret

0000244e <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    244e:	e0 91 49 01 	lds	r30, 0x0149
    2452:	f0 91 4a 01 	lds	r31, 0x014A
    2456:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2458:	9c 01       	movw	r18, r24
    245a:	44 e0       	ldi	r20, 0x04	; 4
    245c:	22 0f       	add	r18, r18
    245e:	33 1f       	adc	r19, r19
    2460:	4a 95       	dec	r20
    2462:	e1 f7       	brne	.-8      	; 0x245c <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    2464:	28 0f       	add	r18, r24
    2466:	39 1f       	adc	r19, r25
    2468:	e2 0f       	add	r30, r18
    246a:	f3 1f       	adc	r31, r19
    246c:	df 01       	movw	r26, r30
    246e:	ac 5a       	subi	r26, 0xAC	; 172
    2470:	bf 4f       	sbci	r27, 0xFF	; 255
    2472:	e0 5b       	subi	r30, 0xB0	; 176
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	20 81       	ld	r18, Z
    2478:	31 81       	ldd	r19, Z+1	; 0x01
    247a:	42 81       	ldd	r20, Z+2	; 0x02
    247c:	53 81       	ldd	r21, Z+3	; 0x03
    247e:	8d 91       	ld	r24, X+
    2480:	9d 91       	ld	r25, X+
    2482:	0d 90       	ld	r0, X+
    2484:	bc 91       	ld	r27, X
    2486:	a0 2d       	mov	r26, r0
    2488:	28 1b       	sub	r18, r24
    248a:	39 0b       	sbc	r19, r25
    248c:	4a 0b       	sbc	r20, r26
    248e:	5b 0b       	sbc	r21, r27
    2490:	57 ff       	sbrs	r21, 7
    2492:	04 c0       	rjmp	.+8      	; 0x249c <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    249c:	b9 01       	movw	r22, r18
    249e:	ca 01       	movw	r24, r20
    24a0:	08 95       	ret

000024a2 <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    24a6:	c0 91 49 01 	lds	r28, 0x0149
    24aa:	d0 91 4a 01 	lds	r29, 0x014A
    24ae:	68 2f       	mov	r22, r24
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    24b2:	fb 01       	movw	r30, r22
    24b4:	a4 e0       	ldi	r26, 0x04	; 4
    24b6:	ee 0f       	add	r30, r30
    24b8:	ff 1f       	adc	r31, r31
    24ba:	aa 95       	dec	r26
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    24be:	e6 0f       	add	r30, r22
    24c0:	f7 1f       	adc	r31, r23
    24c2:	ec 0f       	add	r30, r28
    24c4:	fd 1f       	adc	r31, r29
    24c6:	df 01       	movw	r26, r30
    24c8:	ac 5a       	subi	r26, 0xAC	; 172
    24ca:	bf 4f       	sbci	r27, 0xFF	; 255
    24cc:	e0 5b       	subi	r30, 0xB0	; 176
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	20 81       	ld	r18, Z
    24d2:	31 81       	ldd	r19, Z+1	; 0x01
    24d4:	42 81       	ldd	r20, Z+2	; 0x02
    24d6:	53 81       	ldd	r21, Z+3	; 0x03
    24d8:	8d 91       	ld	r24, X+
    24da:	9d 91       	ld	r25, X+
    24dc:	0d 90       	ld	r0, X+
    24de:	bc 91       	ld	r27, X
    24e0:	a0 2d       	mov	r26, r0
    24e2:	28 1b       	sub	r18, r24
    24e4:	39 0b       	sbc	r19, r25
    24e6:	4a 0b       	sbc	r20, r26
    24e8:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    24ea:	57 fd       	sbrc	r21, 7
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    24ee:	21 15       	cp	r18, r1
    24f0:	31 05       	cpc	r19, r1
    24f2:	41 05       	cpc	r20, r1
    24f4:	51 05       	cpc	r21, r1
    24f6:	11 f0       	breq	.+4      	; 0x24fc <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	12 c0       	rjmp	.+36     	; 0x2520 <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	cb 01       	movw	r24, r22
    2500:	54 e0       	ldi	r21, 0x04	; 4
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	5a 95       	dec	r21
    2508:	e1 f7       	brne	.-8      	; 0x2502 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    250a:	86 0f       	add	r24, r22
    250c:	97 1f       	adc	r25, r23
    250e:	c8 0f       	add	r28, r24
    2510:	d9 1f       	adc	r29, r25
    2512:	c9 5b       	subi	r28, 0xB9	; 185
    2514:	df 4f       	sbci	r29, 0xFF	; 255
    2516:	88 81       	ld	r24, Y
    2518:	80 ff       	sbrs	r24, 0
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2520:	82 2f       	mov	r24, r18
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    2528:	1f 93       	push	r17
    252a:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    252c:	0e 94 51 12 	call	0x24a2	; 0x24a2 <Timebase_DownCounter_SS_Period_Value_Expired>
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	11 f0       	breq	.+4      	; 0x2538 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	16 c0       	rjmp	.+44     	; 0x2564 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2538:	e0 91 49 01 	lds	r30, 0x0149
    253c:	f0 91 4a 01 	lds	r31, 0x014A
    2540:	21 2f       	mov	r18, r17
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	c9 01       	movw	r24, r18
    2546:	b4 e0       	ldi	r27, 0x04	; 4
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	ba 95       	dec	r27
    254e:	e1 f7       	brne	.-8      	; 0x2548 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    2550:	82 0f       	add	r24, r18
    2552:	93 1f       	adc	r25, r19
    2554:	e8 0f       	add	r30, r24
    2556:	f9 1f       	adc	r31, r25
    2558:	e9 5b       	subi	r30, 0xB9	; 185
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	8e 7f       	andi	r24, 0xFE	; 254
    2560:	80 83       	st	Z, r24
    2562:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2564:	1f 91       	pop	r17
    2566:	08 95       	ret

00002568 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	0e 94 97 10 	call	0x212e	; 0x212e <Timebase_DownCounter_SS_Update>
  }
}
    256e:	08 95       	ret

00002570 <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2570:	e0 91 49 01 	lds	r30, 0x0149
    2574:	f0 91 4a 01 	lds	r31, 0x014A
    2578:	e4 5b       	subi	r30, 0xB4	; 180
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	10 82       	st	Z, r1
    257e:	11 82       	std	Z+1, r1	; 0x01
    2580:	12 82       	std	Z+2, r1	; 0x02
    2582:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2584:	12 92       	st	-Z, r1
    2586:	12 92       	st	-Z, r1
    2588:	12 92       	st	-Z, r1
    258a:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    258c:	38 96       	adiw	r30, 0x08	; 8
    258e:	10 82       	st	Z, r1
    2590:	11 82       	std	Z+1, r1	; 0x01
    2592:	12 82       	std	Z+2, r1	; 0x02
    2594:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2596:	39 97       	sbiw	r30, 0x09	; 9
    2598:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    259a:	80 7e       	andi	r24, 0xE0	; 224
    259c:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    259e:	08 95       	ret

000025a0 <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    25a0:	e0 91 49 01 	lds	r30, 0x0149
    25a4:	f0 91 4a 01 	lds	r31, 0x014A
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	2d e0       	ldi	r18, 0x0D	; 13
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	ac 01       	movw	r20, r24
    25b0:	42 9f       	mul	r20, r18
    25b2:	c0 01       	movw	r24, r0
    25b4:	43 9f       	mul	r20, r19
    25b6:	90 0d       	add	r25, r0
    25b8:	52 9f       	mul	r21, r18
    25ba:	90 0d       	add	r25, r0
    25bc:	11 24       	eor	r1, r1
    25be:	e8 0f       	add	r30, r24
    25c0:	f9 1f       	adc	r31, r25
    25c2:	e8 5a       	subi	r30, 0xA8	; 168
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	80 81       	ld	r24, Z
    25c8:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    25ca:	8f 70       	andi	r24, 0x0F	; 15
    25cc:	08 95       	ret

000025ce <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25ce:	e0 91 49 01 	lds	r30, 0x0149
    25d2:	f0 91 4a 01 	lds	r31, 0x014A
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	2d e0       	ldi	r18, 0x0D	; 13
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	ac 01       	movw	r20, r24
    25de:	42 9f       	mul	r20, r18
    25e0:	c0 01       	movw	r24, r0
    25e2:	43 9f       	mul	r20, r19
    25e4:	90 0d       	add	r25, r0
    25e6:	52 9f       	mul	r21, r18
    25e8:	90 0d       	add	r25, r0
    25ea:	11 24       	eor	r1, r1
    25ec:	e8 0f       	add	r30, r24
    25ee:	f9 1f       	adc	r31, r25
    25f0:	e8 5a       	subi	r30, 0xA8	; 168
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	6f 70       	andi	r22, 0x0F	; 15
    25f6:	66 0f       	add	r22, r22
    25f8:	80 81       	ld	r24, Z
    25fa:	81 7e       	andi	r24, 0xE1	; 225
    25fc:	86 2b       	or	r24, r22
    25fe:	80 83       	st	Z, r24
}
    2600:	08 95       	ret

00002602 <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    2602:	e0 91 49 01 	lds	r30, 0x0149
    2606:	f0 91 4a 01 	lds	r31, 0x014A
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	2d e0       	ldi	r18, 0x0D	; 13
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	ac 01       	movw	r20, r24
    2612:	42 9f       	mul	r20, r18
    2614:	c0 01       	movw	r24, r0
    2616:	43 9f       	mul	r20, r19
    2618:	90 0d       	add	r25, r0
    261a:	52 9f       	mul	r21, r18
    261c:	90 0d       	add	r25, r0
    261e:	11 24       	eor	r1, r1
    2620:	e8 0f       	add	r30, r24
    2622:	f9 1f       	adc	r31, r25
    2624:	e3 5a       	subi	r30, 0xA3	; 163
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	08 95       	ret

00002632 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2632:	e0 91 49 01 	lds	r30, 0x0149
    2636:	f0 91 4a 01 	lds	r31, 0x014A
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	2d e0       	ldi	r18, 0x0D	; 13
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	dc 01       	movw	r26, r24
    2642:	a2 9f       	mul	r26, r18
    2644:	c0 01       	movw	r24, r0
    2646:	a3 9f       	mul	r26, r19
    2648:	90 0d       	add	r25, r0
    264a:	b2 9f       	mul	r27, r18
    264c:	90 0d       	add	r25, r0
    264e:	11 24       	eor	r1, r1
    2650:	e8 0f       	add	r30, r24
    2652:	f9 1f       	adc	r31, r25
    2654:	e3 5a       	subi	r30, 0xA3	; 163
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	40 83       	st	Z, r20
    265a:	51 83       	std	Z+1, r21	; 0x01
    265c:	62 83       	std	Z+2, r22	; 0x02
    265e:	73 83       	std	Z+3, r23	; 0x03
}
    2660:	08 95       	ret

00002662 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    2662:	e0 91 49 01 	lds	r30, 0x0149
    2666:	f0 91 4a 01 	lds	r31, 0x014A
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	2d e0       	ldi	r18, 0x0D	; 13
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	ac 01       	movw	r20, r24
    2672:	42 9f       	mul	r20, r18
    2674:	c0 01       	movw	r24, r0
    2676:	43 9f       	mul	r20, r19
    2678:	90 0d       	add	r25, r0
    267a:	52 9f       	mul	r21, r18
    267c:	90 0d       	add	r25, r0
    267e:	11 24       	eor	r1, r1
    2680:	e8 0f       	add	r30, r24
    2682:	f9 1f       	adc	r31, r25
    2684:	e7 5a       	subi	r30, 0xA7	; 167
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	60 81       	ld	r22, Z
    268a:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    268c:	82 81       	ldd	r24, Z+2	; 0x02
    268e:	93 81       	ldd	r25, Z+3	; 0x03
    2690:	08 95       	ret

00002692 <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2692:	e0 91 49 01 	lds	r30, 0x0149
    2696:	f0 91 4a 01 	lds	r31, 0x014A
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	2d e0       	ldi	r18, 0x0D	; 13
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	dc 01       	movw	r26, r24
    26a2:	a2 9f       	mul	r26, r18
    26a4:	c0 01       	movw	r24, r0
    26a6:	a3 9f       	mul	r26, r19
    26a8:	90 0d       	add	r25, r0
    26aa:	b2 9f       	mul	r27, r18
    26ac:	90 0d       	add	r25, r0
    26ae:	11 24       	eor	r1, r1
    26b0:	e8 0f       	add	r30, r24
    26b2:	f9 1f       	adc	r31, r25
    26b4:	e7 5a       	subi	r30, 0xA7	; 167
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	40 83       	st	Z, r20
    26ba:	51 83       	std	Z+1, r21	; 0x01
    26bc:	62 83       	std	Z+2, r22	; 0x02
    26be:	73 83       	std	Z+3, r23	; 0x03
}
    26c0:	08 95       	ret

000026c2 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    26c2:	e0 91 49 01 	lds	r30, 0x0149
    26c6:	f0 91 4a 01 	lds	r31, 0x014A
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	2d e0       	ldi	r18, 0x0D	; 13
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	ac 01       	movw	r20, r24
    26d2:	42 9f       	mul	r20, r18
    26d4:	c0 01       	movw	r24, r0
    26d6:	43 9f       	mul	r20, r19
    26d8:	90 0d       	add	r25, r0
    26da:	52 9f       	mul	r21, r18
    26dc:	90 0d       	add	r25, r0
    26de:	11 24       	eor	r1, r1
    26e0:	e8 0f       	add	r30, r24
    26e2:	f9 1f       	adc	r31, r25
    26e4:	ef 59       	subi	r30, 0x9F	; 159
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	08 95       	ret

000026f2 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    26f2:	e0 91 49 01 	lds	r30, 0x0149
    26f6:	f0 91 4a 01 	lds	r31, 0x014A
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    26fe:	77 ff       	sbrs	r23, 7
    2700:	13 c0       	rjmp	.+38     	; 0x2728 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    2702:	8d e0       	ldi	r24, 0x0D	; 13
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	ac 01       	movw	r20, r24
    2708:	24 9f       	mul	r18, r20
    270a:	c0 01       	movw	r24, r0
    270c:	25 9f       	mul	r18, r21
    270e:	90 0d       	add	r25, r0
    2710:	34 9f       	mul	r19, r20
    2712:	90 0d       	add	r25, r0
    2714:	11 24       	eor	r1, r1
    2716:	e8 0f       	add	r30, r24
    2718:	f9 1f       	adc	r31, r25
    271a:	ef 59       	subi	r30, 0x9F	; 159
    271c:	ff 4f       	sbci	r31, 0xFF	; 255
    271e:	10 82       	st	Z, r1
    2720:	11 82       	std	Z+1, r1	; 0x01
    2722:	12 82       	std	Z+2, r1	; 0x02
    2724:	13 82       	std	Z+3, r1	; 0x03
    2726:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2728:	8d e0       	ldi	r24, 0x0D	; 13
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	dc 01       	movw	r26, r24
    272e:	2a 9f       	mul	r18, r26
    2730:	c0 01       	movw	r24, r0
    2732:	2b 9f       	mul	r18, r27
    2734:	90 0d       	add	r25, r0
    2736:	3a 9f       	mul	r19, r26
    2738:	90 0d       	add	r25, r0
    273a:	11 24       	eor	r1, r1
    273c:	e8 0f       	add	r30, r24
    273e:	f9 1f       	adc	r31, r25
    2740:	ef 59       	subi	r30, 0x9F	; 159
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	40 83       	st	Z, r20
    2746:	51 83       	std	Z+1, r21	; 0x01
    2748:	62 83       	std	Z+2, r22	; 0x02
    274a:	73 83       	std	Z+3, r23	; 0x03
    274c:	08 95       	ret

0000274e <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    274e:	e0 91 49 01 	lds	r30, 0x0149
    2752:	f0 91 4a 01 	lds	r31, 0x014A
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	2d e0       	ldi	r18, 0x0D	; 13
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	ac 01       	movw	r20, r24
    275e:	42 9f       	mul	r20, r18
    2760:	c0 01       	movw	r24, r0
    2762:	43 9f       	mul	r20, r19
    2764:	90 0d       	add	r25, r0
    2766:	52 9f       	mul	r21, r18
    2768:	90 0d       	add	r25, r0
    276a:	11 24       	eor	r1, r1
    276c:	e8 0f       	add	r30, r24
    276e:	f9 1f       	adc	r31, r25
    2770:	e8 5a       	subi	r30, 0xA8	; 168
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2776:	81 70       	andi	r24, 0x01	; 1
    2778:	08 95       	ret

0000277a <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    277a:	e0 91 49 01 	lds	r30, 0x0149
    277e:	f0 91 4a 01 	lds	r31, 0x014A
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	2d e0       	ldi	r18, 0x0D	; 13
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	ac 01       	movw	r20, r24
    278a:	42 9f       	mul	r20, r18
    278c:	c0 01       	movw	r24, r0
    278e:	43 9f       	mul	r20, r19
    2790:	90 0d       	add	r25, r0
    2792:	52 9f       	mul	r21, r18
    2794:	90 0d       	add	r25, r0
    2796:	11 24       	eor	r1, r1
    2798:	e8 0f       	add	r30, r24
    279a:	f9 1f       	adc	r31, r25
    279c:	e8 5a       	subi	r30, 0xA8	; 168
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 81       	ld	r24, Z
    27a2:	81 60       	ori	r24, 0x01	; 1
    27a4:	80 83       	st	Z, r24
}
    27a6:	08 95       	ret

000027a8 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    27a8:	e0 91 49 01 	lds	r30, 0x0149
    27ac:	f0 91 4a 01 	lds	r31, 0x014A
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	2d e0       	ldi	r18, 0x0D	; 13
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	ac 01       	movw	r20, r24
    27b8:	42 9f       	mul	r20, r18
    27ba:	c0 01       	movw	r24, r0
    27bc:	43 9f       	mul	r20, r19
    27be:	90 0d       	add	r25, r0
    27c0:	52 9f       	mul	r21, r18
    27c2:	90 0d       	add	r25, r0
    27c4:	11 24       	eor	r1, r1
    27c6:	e8 0f       	add	r30, r24
    27c8:	f9 1f       	adc	r31, r25
    27ca:	e8 5a       	subi	r30, 0xA8	; 168
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	8e 7f       	andi	r24, 0xFE	; 254
    27d2:	80 83       	st	Z, r24
}
    27d4:	08 95       	ret

000027d6 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    27d6:	e0 91 49 01 	lds	r30, 0x0149
    27da:	f0 91 4a 01 	lds	r31, 0x014A
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	2d e0       	ldi	r18, 0x0D	; 13
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	ac 01       	movw	r20, r24
    27e6:	42 9f       	mul	r20, r18
    27e8:	c0 01       	movw	r24, r0
    27ea:	43 9f       	mul	r20, r19
    27ec:	90 0d       	add	r25, r0
    27ee:	52 9f       	mul	r21, r18
    27f0:	90 0d       	add	r25, r0
    27f2:	11 24       	eor	r1, r1
    27f4:	e8 0f       	add	r30, r24
    27f6:	f9 1f       	adc	r31, r25
    27f8:	e7 5a       	subi	r30, 0xA7	; 167
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	11 92       	st	Z+, r1
    27fe:	11 92       	st	Z+, r1
    2800:	11 92       	st	Z+, r1
    2802:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2804:	10 82       	st	Z, r1
    2806:	11 82       	std	Z+1, r1	; 0x01
    2808:	12 82       	std	Z+2, r1	; 0x02
    280a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    280c:	35 97       	sbiw	r30, 0x05	; 5
    280e:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2810:	80 7e       	andi	r24, 0xE0	; 224
    2812:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2814:	08 95       	ret

00002816 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2816:	e0 91 49 01 	lds	r30, 0x0149
    281a:	f0 91 4a 01 	lds	r31, 0x014A
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	2d e0       	ldi	r18, 0x0D	; 13
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	ac 01       	movw	r20, r24
    2826:	42 9f       	mul	r20, r18
    2828:	c0 01       	movw	r24, r0
    282a:	43 9f       	mul	r20, r19
    282c:	90 0d       	add	r25, r0
    282e:	52 9f       	mul	r21, r18
    2830:	90 0d       	add	r25, r0
    2832:	11 24       	eor	r1, r1
    2834:	e8 0f       	add	r30, r24
    2836:	f9 1f       	adc	r31, r25
    2838:	e7 5a       	subi	r30, 0xA7	; 167
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	11 92       	st	Z+, r1
    283e:	11 92       	st	Z+, r1
    2840:	11 92       	st	Z+, r1
    2842:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2844:	10 82       	st	Z, r1
    2846:	11 82       	std	Z+1, r1	; 0x01
    2848:	12 82       	std	Z+2, r1	; 0x02
    284a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    284c:	35 97       	sbiw	r30, 0x05	; 5
    284e:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2850:	80 7e       	andi	r24, 0xE0	; 224
    2852:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2854:	08 95       	ret

00002856 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2856:	e0 91 49 01 	lds	r30, 0x0149
    285a:	f0 91 4a 01 	lds	r31, 0x014A
    285e:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2860:	2d e0       	ldi	r18, 0x0D	; 13
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	ac 01       	movw	r20, r24
    2866:	42 9f       	mul	r20, r18
    2868:	c0 01       	movw	r24, r0
    286a:	43 9f       	mul	r20, r19
    286c:	90 0d       	add	r25, r0
    286e:	52 9f       	mul	r21, r18
    2870:	90 0d       	add	r25, r0
    2872:	11 24       	eor	r1, r1
    2874:	e8 0f       	add	r30, r24
    2876:	f9 1f       	adc	r31, r25
    2878:	e8 5a       	subi	r30, 0xA8	; 168
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	90 81       	ld	r25, Z
    287e:	89 2f       	mov	r24, r25
    2880:	86 95       	lsr	r24
    2882:	8f 70       	andi	r24, 0x0F	; 15
    2884:	81 30       	cpi	r24, 0x01	; 1
    2886:	19 f0       	breq	.+6      	; 0x288e <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2888:	91 7e       	andi	r25, 0xE1	; 225
    288a:	92 60       	ori	r25, 0x02	; 2
    288c:	90 83       	st	Z, r25
    288e:	08 95       	ret

00002890 <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2890:	e0 91 49 01 	lds	r30, 0x0149
    2894:	f0 91 4a 01 	lds	r31, 0x014A
    2898:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    289a:	2d e0       	ldi	r18, 0x0D	; 13
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	ac 01       	movw	r20, r24
    28a0:	42 9f       	mul	r20, r18
    28a2:	c0 01       	movw	r24, r0
    28a4:	43 9f       	mul	r20, r19
    28a6:	90 0d       	add	r25, r0
    28a8:	52 9f       	mul	r21, r18
    28aa:	90 0d       	add	r25, r0
    28ac:	11 24       	eor	r1, r1
    28ae:	e8 0f       	add	r30, r24
    28b0:	f9 1f       	adc	r31, r25
    28b2:	e8 5a       	subi	r30, 0xA8	; 168
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	90 81       	ld	r25, Z
    28b8:	89 2f       	mov	r24, r25
    28ba:	86 95       	lsr	r24
    28bc:	8f 70       	andi	r24, 0x0F	; 15
    28be:	82 30       	cpi	r24, 0x02	; 2
    28c0:	19 f0       	breq	.+6      	; 0x28c8 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    28c2:	91 7e       	andi	r25, 0xE1	; 225
    28c4:	94 60       	ori	r25, 0x04	; 4
    28c6:	90 83       	st	Z, r25
    28c8:	08 95       	ret

000028ca <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    28ca:	0f 93       	push	r16
    28cc:	1f 93       	push	r17
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    28d2:	c0 91 49 01 	lds	r28, 0x0149
    28d6:	d0 91 4a 01 	lds	r29, 0x014A
    28da:	08 2f       	mov	r16, r24
    28dc:	10 e0       	ldi	r17, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    28de:	8d e0       	ldi	r24, 0x0D	; 13
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	08 9f       	mul	r16, r24
    28e4:	f0 01       	movw	r30, r0
    28e6:	09 9f       	mul	r16, r25
    28e8:	f0 0d       	add	r31, r0
    28ea:	18 9f       	mul	r17, r24
    28ec:	f0 0d       	add	r31, r0
    28ee:	11 24       	eor	r1, r1
    28f0:	ec 0f       	add	r30, r28
    28f2:	fd 1f       	adc	r31, r29
    28f4:	e8 5a       	subi	r30, 0xA8	; 168
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	e8 55       	subi	r30, 0x58	; 88
    28fc:	f0 40       	sbci	r31, 0x00	; 0
    28fe:	86 95       	lsr	r24
    2900:	8f 70       	andi	r24, 0x0F	; 15
    2902:	51 f5       	brne	.+84     	; 0x2958 <Timebase_DownCounter_Set_Securely+0x8e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2904:	e3 5a       	subi	r30, 0xA3	; 163
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	40 83       	st	Z, r20
    290a:	51 83       	std	Z+1, r21	; 0x01
    290c:	62 83       	std	Z+2, r22	; 0x02
    290e:	73 83       	std	Z+3, r23	; 0x03

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2910:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2912:	8a 85       	ldd	r24, Y+10	; 0x0a
    2914:	9b 85       	ldd	r25, Y+11	; 0x0b
    2916:	ac 85       	ldd	r26, Y+12	; 0x0c
    2918:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    291a:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    291c:	2d e0       	ldi	r18, 0x0D	; 13
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	02 9f       	mul	r16, r18
    2922:	f0 01       	movw	r30, r0
    2924:	03 9f       	mul	r16, r19
    2926:	f0 0d       	add	r31, r0
    2928:	12 9f       	mul	r17, r18
    292a:	f0 0d       	add	r31, r0
    292c:	11 24       	eor	r1, r1
    292e:	ec 0f       	add	r30, r28
    2930:	fd 1f       	adc	r31, r29
    2932:	e7 5a       	subi	r30, 0xA7	; 167
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	84 0f       	add	r24, r20
    2938:	95 1f       	adc	r25, r21
    293a:	a6 1f       	adc	r26, r22
    293c:	b7 1f       	adc	r27, r23
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2946:	92 91       	ld	r25, -Z
    2948:	89 2f       	mov	r24, r25
    294a:	86 95       	lsr	r24
    294c:	8f 70       	andi	r24, 0x0F	; 15
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	19 f0       	breq	.+6      	; 0x2958 <Timebase_DownCounter_Set_Securely+0x8e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2952:	91 7e       	andi	r25, 0xE1	; 225
    2954:	92 60       	ori	r25, 0x02	; 2
    2956:	90 83       	st	Z, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	08 95       	ret

00002962 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2966:	e0 91 49 01 	lds	r30, 0x0149
    296a:	f0 91 4a 01 	lds	r31, 0x014A
    296e:	a8 2f       	mov	r26, r24
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	2d e0       	ldi	r18, 0x0D	; 13
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	e9 01       	movw	r28, r18
    2978:	ac 9f       	mul	r26, r28
    297a:	90 01       	movw	r18, r0
    297c:	ad 9f       	mul	r26, r29
    297e:	30 0d       	add	r19, r0
    2980:	bc 9f       	mul	r27, r28
    2982:	30 0d       	add	r19, r0
    2984:	11 24       	eor	r1, r1
    2986:	e2 0f       	add	r30, r18
    2988:	f3 1f       	adc	r31, r19
    298a:	e7 5a       	subi	r30, 0xA7	; 167
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	11 92       	st	Z+, r1
    2990:	11 92       	st	Z+, r1
    2992:	11 92       	st	Z+, r1
    2994:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2996:	10 82       	st	Z, r1
    2998:	11 82       	std	Z+1, r1	; 0x01
    299a:	12 82       	std	Z+2, r1	; 0x02
    299c:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    299e:	35 97       	sbiw	r30, 0x05	; 5
    29a0:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    29a2:	90 7e       	andi	r25, 0xE0	; 224
    29a4:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    29a6:	0e 94 65 14 	call	0x28ca	; 0x28ca <Timebase_DownCounter_Set_Securely>
} 
    29aa:	df 91       	pop	r29
    29ac:	cf 91       	pop	r28
    29ae:	08 95       	ret

000029b0 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    29b0:	cf 93       	push	r28
    29b2:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    29b4:	c0 91 49 01 	lds	r28, 0x0149
    29b8:	d0 91 4a 01 	lds	r29, 0x014A
    29bc:	68 2f       	mov	r22, r24
    29be:	70 e0       	ldi	r23, 0x00	; 0
    29c0:	8d e0       	ldi	r24, 0x0D	; 13
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	68 9f       	mul	r22, r24
    29c6:	f0 01       	movw	r30, r0
    29c8:	69 9f       	mul	r22, r25
    29ca:	f0 0d       	add	r31, r0
    29cc:	78 9f       	mul	r23, r24
    29ce:	f0 0d       	add	r31, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	ec 0f       	add	r30, r28
    29d4:	fd 1f       	adc	r31, r29
    29d6:	e8 5a       	subi	r30, 0xA8	; 168
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	e0 81       	ld	r30, Z
    29dc:	e6 95       	lsr	r30
    29de:	ef 70       	andi	r30, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    29e0:	e1 30       	cpi	r30, 0x01	; 1
    29e2:	d1 f5       	brne	.+116    	; 0x2a58 <Timebase_DownCounter_Update+0xa8>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    29e4:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    29e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    29e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    29ea:	4c 85       	ldd	r20, Y+12	; 0x0c
    29ec:	5d 85       	ldd	r21, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    29ee:	78 94       	sei
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    29f0:	8d e0       	ldi	r24, 0x0D	; 13
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	68 9f       	mul	r22, r24
    29f6:	f0 01       	movw	r30, r0
    29f8:	69 9f       	mul	r22, r25
    29fa:	f0 0d       	add	r31, r0
    29fc:	78 9f       	mul	r23, r24
    29fe:	f0 0d       	add	r31, r0
    2a00:	11 24       	eor	r1, r1
    2a02:	ec 0f       	add	r30, r28
    2a04:	fd 1f       	adc	r31, r29
    2a06:	bf 01       	movw	r22, r30
    2a08:	67 5a       	subi	r22, 0xA7	; 167
    2a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0c:	eb 01       	movw	r28, r22
    2a0e:	88 81       	ld	r24, Y
    2a10:	99 81       	ldd	r25, Y+1	; 0x01
    2a12:	aa 81       	ldd	r26, Y+2	; 0x02
    2a14:	bb 81       	ldd	r27, Y+3	; 0x03
    2a16:	82 1b       	sub	r24, r18
    2a18:	93 0b       	sbc	r25, r19
    2a1a:	a4 0b       	sbc	r26, r20
    2a1c:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a1e:	ef 01       	movw	r28, r30
    2a20:	c3 5a       	subi	r28, 0xA3	; 163
    2a22:	df 4f       	sbci	r29, 0xFF	; 255
    2a24:	88 83       	st	Y, r24
    2a26:	99 83       	std	Y+1, r25	; 0x01
    2a28:	aa 83       	std	Y+2, r26	; 0x02
    2a2a:	bb 83       	std	Y+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2a2c:	18 16       	cp	r1, r24
    2a2e:	19 06       	cpc	r1, r25
    2a30:	1a 06       	cpc	r1, r26
    2a32:	1b 06       	cpc	r1, r27
    2a34:	94 f1       	brlt	.+100    	; 0x2a9a <Timebase_DownCounter_Update+0xea>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a36:	db 01       	movw	r26, r22
    2a38:	1d 92       	st	X+, r1
    2a3a:	1d 92       	st	X+, r1
    2a3c:	1d 92       	st	X+, r1
    2a3e:	1c 92       	st	X, r1
    2a40:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2a42:	18 82       	st	Y, r1
    2a44:	19 82       	std	Y+1, r1	; 0x01
    2a46:	1a 82       	std	Y+2, r1	; 0x02
    2a48:	1b 82       	std	Y+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2a4a:	e8 5a       	subi	r30, 0xA8	; 168
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2a50:	80 7e       	andi	r24, 0xE0	; 224
    2a52:	88 60       	ori	r24, 0x08	; 8
    2a54:	80 83       	st	Z, r24
    2a56:	21 c0       	rjmp	.+66     	; 0x2a9a <Timebase_DownCounter_Update+0xea>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2a58:	e2 30       	cpi	r30, 0x02	; 2
    2a5a:	f9 f4       	brne	.+62     	; 0x2a9a <Timebase_DownCounter_Update+0xea>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
    2a5c:	f8 94       	cli

int32_t Timebase_Timer_Get_Seconds(void){
  #ifdef TIMEBASE_SEC_COUNT_ATOMIC_OPERATION
  int32_t curr_s = 0;
  Timebase_Atomic_Operation_Start();
  curr_s = Timebase->Time.Seconds;
    2a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a62:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a64:	bd 85       	ldd	r27, Y+13	; 0x0d
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
    2a66:	78 94       	sei
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2a68:	2d e0       	ldi	r18, 0x0D	; 13
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	62 9f       	mul	r22, r18
    2a6e:	f0 01       	movw	r30, r0
    2a70:	63 9f       	mul	r22, r19
    2a72:	f0 0d       	add	r31, r0
    2a74:	72 9f       	mul	r23, r18
    2a76:	f0 0d       	add	r31, r0
    2a78:	11 24       	eor	r1, r1
    2a7a:	ec 0f       	add	r30, r28
    2a7c:	fd 1f       	adc	r31, r29
    2a7e:	e3 5a       	subi	r30, 0xA3	; 163
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	20 81       	ld	r18, Z
    2a84:	31 81       	ldd	r19, Z+1	; 0x01
    2a86:	42 81       	ldd	r20, Z+2	; 0x02
    2a88:	53 81       	ldd	r21, Z+3	; 0x03
    2a8a:	82 0f       	add	r24, r18
    2a8c:	93 1f       	adc	r25, r19
    2a8e:	a4 1f       	adc	r26, r20
    2a90:	b5 1f       	adc	r27, r21
    2a92:	b2 93       	st	-Z, r27
    2a94:	a2 93       	st	-Z, r26
    2a96:	92 93       	st	-Z, r25
    2a98:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	08 95       	ret

00002aa0 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2aa0:	40 e0       	ldi	r20, 0x00	; 0
    2aa2:	e0 91 49 01 	lds	r30, 0x0149
    2aa6:	f0 91 4a 01 	lds	r31, 0x014A
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	2d e0       	ldi	r18, 0x0D	; 13
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	62 9f       	mul	r22, r18
    2ab4:	c0 01       	movw	r24, r0
    2ab6:	63 9f       	mul	r22, r19
    2ab8:	90 0d       	add	r25, r0
    2aba:	72 9f       	mul	r23, r18
    2abc:	90 0d       	add	r25, r0
    2abe:	11 24       	eor	r1, r1
    2ac0:	e8 0f       	add	r30, r24
    2ac2:	f9 1f       	adc	r31, r25
    2ac4:	e8 5a       	subi	r30, 0xA8	; 168
    2ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac8:	80 81       	ld	r24, Z
    2aca:	86 95       	lsr	r24
    2acc:	8f 70       	andi	r24, 0x0F	; 15
    2ace:	84 30       	cpi	r24, 0x04	; 4
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <Timebase_DownCounter_Expired+0x34>
    2ad2:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2ad4:	84 2f       	mov	r24, r20
    2ad6:	08 95       	ret

00002ad8 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2ad8:	e0 91 49 01 	lds	r30, 0x0149
    2adc:	f0 91 4a 01 	lds	r31, 0x014A
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2ae2:	2d e0       	ldi	r18, 0x0D	; 13
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	ac 01       	movw	r20, r24
    2ae8:	42 9f       	mul	r20, r18
    2aea:	c0 01       	movw	r24, r0
    2aec:	43 9f       	mul	r20, r19
    2aee:	90 0d       	add	r25, r0
    2af0:	52 9f       	mul	r21, r18
    2af2:	90 0d       	add	r25, r0
    2af4:	11 24       	eor	r1, r1
    2af6:	e8 0f       	add	r30, r24
    2af8:	f9 1f       	adc	r31, r25
    2afa:	df 01       	movw	r26, r30
    2afc:	a8 5a       	subi	r26, 0xA8	; 168
    2afe:	bf 4f       	sbci	r27, 0xFF	; 255
    2b00:	8c 91       	ld	r24, X
    2b02:	86 95       	lsr	r24
    2b04:	8f 70       	andi	r24, 0x0F	; 15
    2b06:	84 30       	cpi	r24, 0x04	; 4
    2b08:	11 f0       	breq	.+4      	; 0x2b0e <Timebase_DownCounter_Expired_Event+0x36>
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2b0e:	e7 5a       	subi	r30, 0xA7	; 167
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	11 92       	st	Z+, r1
    2b14:	11 92       	st	Z+, r1
    2b16:	11 92       	st	Z+, r1
    2b18:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2b1a:	10 82       	st	Z, r1
    2b1c:	11 82       	std	Z+1, r1	; 0x01
    2b1e:	12 82       	std	Z+2, r1	; 0x02
    2b20:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2b22:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b24:	80 7e       	andi	r24, 0xE0	; 224
    2b26:	8c 93       	st	X, r24
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2b2a:	08 95       	ret

00002b2c <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2b30:	c0 91 49 01 	lds	r28, 0x0149
    2b34:	d0 91 4a 01 	lds	r29, 0x014A
    2b38:	28 2f       	mov	r18, r24
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    2b3c:	8d e0       	ldi	r24, 0x0D	; 13
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	28 9f       	mul	r18, r24
    2b42:	f0 01       	movw	r30, r0
    2b44:	29 9f       	mul	r18, r25
    2b46:	f0 0d       	add	r31, r0
    2b48:	38 9f       	mul	r19, r24
    2b4a:	f0 0d       	add	r31, r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	ec 0f       	add	r30, r28
    2b50:	fd 1f       	adc	r31, r29
    2b52:	e8 5a       	subi	r30, 0xA8	; 168
    2b54:	ff 4f       	sbci	r31, 0xFF	; 255
    2b56:	80 81       	ld	r24, Z
    2b58:	e8 55       	subi	r30, 0x58	; 88
    2b5a:	f0 40       	sbci	r31, 0x00	; 0
    2b5c:	80 fd       	sbrc	r24, 0
    2b5e:	25 c0       	rjmp	.+74     	; 0x2baa <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2b60:	e3 5a       	subi	r30, 0xA3	; 163
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	81 91       	ld	r24, Z+
    2b66:	91 91       	ld	r25, Z+
    2b68:	a1 91       	ld	r26, Z+
    2b6a:	b1 91       	ld	r27, Z+
    2b6c:	84 1b       	sub	r24, r20
    2b6e:	95 0b       	sbc	r25, r21
    2b70:	a6 0b       	sbc	r26, r22
    2b72:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2b74:	b7 ff       	sbrs	r27, 7
    2b76:	05 c0       	rjmp	.+10     	; 0x2b82 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    2b78:	10 82       	st	Z, r1
    2b7a:	11 82       	std	Z+1, r1	; 0x01
    2b7c:	12 82       	std	Z+2, r1	; 0x02
    2b7e:	13 82       	std	Z+3, r1	; 0x03
    2b80:	04 c0       	rjmp	.+8      	; 0x2b8a <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2b82:	80 83       	st	Z, r24
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	a2 83       	std	Z+2, r26	; 0x02
    2b88:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2b8a:	8d e0       	ldi	r24, 0x0D	; 13
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	28 9f       	mul	r18, r24
    2b90:	f0 01       	movw	r30, r0
    2b92:	29 9f       	mul	r18, r25
    2b94:	f0 0d       	add	r31, r0
    2b96:	38 9f       	mul	r19, r24
    2b98:	f0 0d       	add	r31, r0
    2b9a:	11 24       	eor	r1, r1
    2b9c:	ec 0f       	add	r30, r28
    2b9e:	fd 1f       	adc	r31, r29
    2ba0:	e8 5a       	subi	r30, 0xA8	; 168
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	81 60       	ori	r24, 0x01	; 1
    2ba8:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	08 95       	ret

00002bb0 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2bb0:	e0 91 49 01 	lds	r30, 0x0149
    2bb4:	f0 91 4a 01 	lds	r31, 0x014A
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2bba:	2d e0       	ldi	r18, 0x0D	; 13
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	ac 01       	movw	r20, r24
    2bc0:	42 9f       	mul	r20, r18
    2bc2:	c0 01       	movw	r24, r0
    2bc4:	43 9f       	mul	r20, r19
    2bc6:	90 0d       	add	r25, r0
    2bc8:	52 9f       	mul	r21, r18
    2bca:	90 0d       	add	r25, r0
    2bcc:	11 24       	eor	r1, r1
    2bce:	e8 0f       	add	r30, r24
    2bd0:	f9 1f       	adc	r31, r25
    2bd2:	df 01       	movw	r26, r30
    2bd4:	af 59       	subi	r26, 0x9F	; 159
    2bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd8:	e3 5a       	subi	r30, 0xA3	; 163
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	20 81       	ld	r18, Z
    2bde:	31 81       	ldd	r19, Z+1	; 0x01
    2be0:	42 81       	ldd	r20, Z+2	; 0x02
    2be2:	53 81       	ldd	r21, Z+3	; 0x03
    2be4:	8d 91       	ld	r24, X+
    2be6:	9d 91       	ld	r25, X+
    2be8:	0d 90       	ld	r0, X+
    2bea:	bc 91       	ld	r27, X
    2bec:	a0 2d       	mov	r26, r0
    2bee:	28 1b       	sub	r18, r24
    2bf0:	39 0b       	sbc	r19, r25
    2bf2:	4a 0b       	sbc	r20, r26
    2bf4:	5b 0b       	sbc	r21, r27
    2bf6:	57 ff       	sbrs	r21, 7
    2bf8:	04 c0       	rjmp	.+8      	; 0x2c02 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2c02:	b9 01       	movw	r22, r18
    2c04:	ca 01       	movw	r24, r20
    2c06:	08 95       	ret

00002c08 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2c0c:	c0 91 49 01 	lds	r28, 0x0149
    2c10:	d0 91 4a 01 	lds	r29, 0x014A
    2c14:	68 2f       	mov	r22, r24
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2c18:	8d e0       	ldi	r24, 0x0D	; 13
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	68 9f       	mul	r22, r24
    2c1e:	f0 01       	movw	r30, r0
    2c20:	69 9f       	mul	r22, r25
    2c22:	f0 0d       	add	r31, r0
    2c24:	78 9f       	mul	r23, r24
    2c26:	f0 0d       	add	r31, r0
    2c28:	11 24       	eor	r1, r1
    2c2a:	ec 0f       	add	r30, r28
    2c2c:	fd 1f       	adc	r31, r29
    2c2e:	df 01       	movw	r26, r30
    2c30:	af 59       	subi	r26, 0x9F	; 159
    2c32:	bf 4f       	sbci	r27, 0xFF	; 255
    2c34:	e3 5a       	subi	r30, 0xA3	; 163
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	20 81       	ld	r18, Z
    2c3a:	31 81       	ldd	r19, Z+1	; 0x01
    2c3c:	42 81       	ldd	r20, Z+2	; 0x02
    2c3e:	53 81       	ldd	r21, Z+3	; 0x03
    2c40:	8d 91       	ld	r24, X+
    2c42:	9d 91       	ld	r25, X+
    2c44:	0d 90       	ld	r0, X+
    2c46:	bc 91       	ld	r27, X
    2c48:	a0 2d       	mov	r26, r0
    2c4a:	28 1b       	sub	r18, r24
    2c4c:	39 0b       	sbc	r19, r25
    2c4e:	4a 0b       	sbc	r20, r26
    2c50:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2c52:	57 fd       	sbrc	r21, 7
    2c54:	07 c0       	rjmp	.+14     	; 0x2c64 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2c56:	21 15       	cp	r18, r1
    2c58:	31 05       	cpc	r19, r1
    2c5a:	41 05       	cpc	r20, r1
    2c5c:	51 05       	cpc	r21, r1
    2c5e:	11 f0       	breq	.+4      	; 0x2c64 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	14 c0       	rjmp	.+40     	; 0x2c8c <Timebase_DownCounter_Period_Value_Expired+0x84>
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	8d e0       	ldi	r24, 0x0D	; 13
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	ac 01       	movw	r20, r24
    2c6c:	64 9f       	mul	r22, r20
    2c6e:	c0 01       	movw	r24, r0
    2c70:	65 9f       	mul	r22, r21
    2c72:	90 0d       	add	r25, r0
    2c74:	74 9f       	mul	r23, r20
    2c76:	90 0d       	add	r25, r0
    2c78:	11 24       	eor	r1, r1
    2c7a:	c8 0f       	add	r28, r24
    2c7c:	d9 1f       	adc	r29, r25
    2c7e:	c8 5a       	subi	r28, 0xA8	; 168
    2c80:	df 4f       	sbci	r29, 0xFF	; 255
    2c82:	88 81       	ld	r24, Y
    2c84:	80 ff       	sbrs	r24, 0
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2c8c:	82 2f       	mov	r24, r18
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2c94:	1f 93       	push	r17
    2c96:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2c98:	0e 94 04 16 	call	0x2c08	; 0x2c08 <Timebase_DownCounter_Period_Value_Expired>
    2c9c:	81 30       	cpi	r24, 0x01	; 1
    2c9e:	11 f0       	breq	.+4      	; 0x2ca4 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	18 c0       	rjmp	.+48     	; 0x2cd4 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2ca4:	e0 91 49 01 	lds	r30, 0x0149
    2ca8:	f0 91 4a 01 	lds	r31, 0x014A
    2cac:	21 2f       	mov	r18, r17
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	8d e0       	ldi	r24, 0x0D	; 13
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	ac 01       	movw	r20, r24
    2cb6:	24 9f       	mul	r18, r20
    2cb8:	c0 01       	movw	r24, r0
    2cba:	25 9f       	mul	r18, r21
    2cbc:	90 0d       	add	r25, r0
    2cbe:	34 9f       	mul	r19, r20
    2cc0:	90 0d       	add	r25, r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	e8 0f       	add	r30, r24
    2cc6:	f9 1f       	adc	r31, r25
    2cc8:	e8 5a       	subi	r30, 0xA8	; 168
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	8e 7f       	andi	r24, 0xFE	; 254
    2cd0:	80 83       	st	Z, r24
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2cd4:	1f 91       	pop	r17
    2cd6:	08 95       	ret

00002cd8 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <Timebase_DownCounter_Update>
  }
}
    2cde:	08 95       	ret

00002ce0 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2ce0:	e0 91 49 01 	lds	r30, 0x0149
    2ce4:	f0 91 4a 01 	lds	r31, 0x014A
    2ce8:	e7 5a       	subi	r30, 0xA7	; 167
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	11 92       	st	Z+, r1
    2cee:	11 92       	st	Z+, r1
    2cf0:	11 92       	st	Z+, r1
    2cf2:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2cf4:	10 82       	st	Z, r1
    2cf6:	11 82       	std	Z+1, r1	; 0x01
    2cf8:	12 82       	std	Z+2, r1	; 0x02
    2cfa:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2cfc:	35 97       	sbiw	r30, 0x05	; 5
    2cfe:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d00:	80 7e       	andi	r24, 0xE0	; 224
    2d02:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2d04:	08 95       	ret

00002d06 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2d06:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    2d0a:	0e 94 b8 12 	call	0x2570	; 0x2570 <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    2d0e:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2d12:	08 95       	ret

00002d14 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2d14:	0f 93       	push	r16
    2d16:	1f 93       	push	r17
    2d18:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    2d1a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    2d1e:	c8 01       	movw	r24, r16
    2d20:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <Timebase_Timer_Config>
  Timebase_Reset();
    2d24:	0e 94 83 16 	call	0x2d06	; 0x2d06 <Timebase_Reset>
}
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	08 95       	ret

00002d2e <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    2d2e:	e0 91 49 01 	lds	r30, 0x0149
    2d32:	f0 91 4a 01 	lds	r31, 0x014A
    2d36:	87 89       	ldd	r24, Z+23	; 0x17
    2d38:	82 ff       	sbrs	r24, 2
    2d3a:	03 c0       	rjmp	.+6      	; 0x2d42 <Timebase_Main_Loop_Executables+0x14>
    //add upcounter ss function
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2d3c:	87 89       	ldd	r24, Z+23	; 0x17
    2d3e:	8b 7f       	andi	r24, 0xFB	; 251
    2d40:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2d42:	87 89       	ldd	r24, Z+23	; 0x17
    2d44:	80 ff       	sbrs	r24, 0
    2d46:	09 c0       	rjmp	.+18     	; 0x2d5a <Timebase_Main_Loop_Executables+0x2c>
    Timebase_UpCounter_Update_All();
    2d48:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2d4c:	e0 91 49 01 	lds	r30, 0x0149
    2d50:	f0 91 4a 01 	lds	r31, 0x014A
    2d54:	87 89       	ldd	r24, Z+23	; 0x17
    2d56:	8e 7f       	andi	r24, 0xFE	; 254
    2d58:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    2d5a:	e0 91 49 01 	lds	r30, 0x0149
    2d5e:	f0 91 4a 01 	lds	r31, 0x014A
    2d62:	87 89       	ldd	r24, Z+23	; 0x17
    2d64:	83 ff       	sbrs	r24, 3
    2d66:	09 c0       	rjmp	.+18     	; 0x2d7a <Timebase_Main_Loop_Executables+0x4c>
    Timebase_DownCounter_SS_Update_All();
    2d68:	0e 94 b4 12 	call	0x2568	; 0x2568 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    2d6c:	e0 91 49 01 	lds	r30, 0x0149
    2d70:	f0 91 4a 01 	lds	r31, 0x014A
    2d74:	87 89       	ldd	r24, Z+23	; 0x17
    2d76:	87 7f       	andi	r24, 0xF7	; 247
    2d78:	87 8b       	std	Z+23, r24	; 0x17
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    2d7a:	e0 91 49 01 	lds	r30, 0x0149
    2d7e:	f0 91 4a 01 	lds	r31, 0x014A
    2d82:	87 89       	ldd	r24, Z+23	; 0x17
    2d84:	81 ff       	sbrs	r24, 1
    2d86:	09 c0       	rjmp	.+18     	; 0x2d9a <Timebase_Main_Loop_Executables+0x6c>
    Timebase_DownCounter_Update_All();
    2d88:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    2d8c:	e0 91 49 01 	lds	r30, 0x0149
    2d90:	f0 91 4a 01 	lds	r31, 0x014A
    2d94:	87 89       	ldd	r24, Z+23	; 0x17
    2d96:	8d 7f       	andi	r24, 0xFD	; 253
    2d98:	87 8b       	std	Z+23, r24	; 0x17
    2d9a:	08 95       	ret

00002d9c <Timebase_ISR_Executables>:
  }
  #endif
}

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    2d9c:	e0 91 49 01 	lds	r30, 0x0149
    2da0:	f0 91 4a 01 	lds	r31, 0x014A
    2da4:	80 85       	ldd	r24, Z+8	; 0x08
    2da6:	91 85       	ldd	r25, Z+9	; 0x09
    2da8:	01 96       	adiw	r24, 0x01	; 1
    2daa:	91 87       	std	Z+9, r25	; 0x09
    2dac:	80 87       	std	Z+8, r24	; 0x08
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2dae:	87 89       	ldd	r24, Z+23	; 0x17
    2db0:	84 60       	ori	r24, 0x04	; 4
    2db2:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2db4:	87 89       	ldd	r24, Z+23	; 0x17
    2db6:	88 60       	ori	r24, 0x08	; 8
    2db8:	87 8b       	std	Z+23, r24	; 0x17
  #endif
  
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    2dba:	80 85       	ldd	r24, Z+8	; 0x08
    2dbc:	91 85       	ldd	r25, Z+9	; 0x09
    2dbe:	61 81       	ldd	r22, Z+1	; 0x01
    2dc0:	72 81       	ldd	r23, Z+2	; 0x02
    2dc2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__udivmodhi4>
    2dc6:	89 2b       	or	r24, r25
    2dc8:	99 f4       	brne	.+38     	; 0x2df0 <Timebase_ISR_Executables+0x54>
    Timebase->Time.Seconds++;
    2dca:	82 85       	ldd	r24, Z+10	; 0x0a
    2dcc:	93 85       	ldd	r25, Z+11	; 0x0b
    2dce:	a4 85       	ldd	r26, Z+12	; 0x0c
    2dd0:	b5 85       	ldd	r27, Z+13	; 0x0d
    2dd2:	01 96       	adiw	r24, 0x01	; 1
    2dd4:	a1 1d       	adc	r26, r1
    2dd6:	b1 1d       	adc	r27, r1
    2dd8:	82 87       	std	Z+10, r24	; 0x0a
    2dda:	93 87       	std	Z+11, r25	; 0x0b
    2ddc:	a4 87       	std	Z+12, r26	; 0x0c
    2dde:	b5 87       	std	Z+13, r27	; 0x0d
    Timebase->Time.SubSeconds = 0;
    2de0:	11 86       	std	Z+9, r1	; 0x09
    2de2:	10 86       	std	Z+8, r1	; 0x08
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2de4:	87 89       	ldd	r24, Z+23	; 0x17
    2de6:	81 60       	ori	r24, 0x01	; 1
    2de8:	87 8b       	std	Z+23, r24	; 0x17
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2dea:	87 89       	ldd	r24, Z+23	; 0x17
    2dec:	82 60       	ori	r24, 0x02	; 2
    2dee:	87 8b       	std	Z+23, r24	; 0x17
    2df0:	08 95       	ret

00002df2 <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2df2:	1f 92       	push	r1
    2df4:	0f 92       	push	r0
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	0f 92       	push	r0
    2dfa:	11 24       	eor	r1, r1
    2dfc:	2f 93       	push	r18
    2dfe:	3f 93       	push	r19
    2e00:	4f 93       	push	r20
    2e02:	5f 93       	push	r21
    2e04:	6f 93       	push	r22
    2e06:	7f 93       	push	r23
    2e08:	8f 93       	push	r24
    2e0a:	9f 93       	push	r25
    2e0c:	af 93       	push	r26
    2e0e:	bf 93       	push	r27
    2e10:	ef 93       	push	r30
    2e12:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2e14:	e0 91 49 01 	lds	r30, 0x0149
    2e18:	f0 91 4a 01 	lds	r31, 0x014A
    2e1c:	83 81       	ldd	r24, Z+3	; 0x03
    2e1e:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2e20:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <Timebase_ISR_Executables>
}
    2e24:	ff 91       	pop	r31
    2e26:	ef 91       	pop	r30
    2e28:	bf 91       	pop	r27
    2e2a:	af 91       	pop	r26
    2e2c:	9f 91       	pop	r25
    2e2e:	8f 91       	pop	r24
    2e30:	7f 91       	pop	r23
    2e32:	6f 91       	pop	r22
    2e34:	5f 91       	pop	r21
    2e36:	4f 91       	pop	r20
    2e38:	3f 91       	pop	r19
    2e3a:	2f 91       	pop	r18
    2e3c:	0f 90       	pop	r0
    2e3e:	0f be       	out	0x3f, r0	; 63
    2e40:	0f 90       	pop	r0
    2e42:	1f 90       	pop	r1
    2e44:	18 95       	reti

00002e46 <__mulsi3>:
    2e46:	62 9f       	mul	r22, r18
    2e48:	d0 01       	movw	r26, r0
    2e4a:	73 9f       	mul	r23, r19
    2e4c:	f0 01       	movw	r30, r0
    2e4e:	82 9f       	mul	r24, r18
    2e50:	e0 0d       	add	r30, r0
    2e52:	f1 1d       	adc	r31, r1
    2e54:	64 9f       	mul	r22, r20
    2e56:	e0 0d       	add	r30, r0
    2e58:	f1 1d       	adc	r31, r1
    2e5a:	92 9f       	mul	r25, r18
    2e5c:	f0 0d       	add	r31, r0
    2e5e:	83 9f       	mul	r24, r19
    2e60:	f0 0d       	add	r31, r0
    2e62:	74 9f       	mul	r23, r20
    2e64:	f0 0d       	add	r31, r0
    2e66:	65 9f       	mul	r22, r21
    2e68:	f0 0d       	add	r31, r0
    2e6a:	99 27       	eor	r25, r25
    2e6c:	72 9f       	mul	r23, r18
    2e6e:	b0 0d       	add	r27, r0
    2e70:	e1 1d       	adc	r30, r1
    2e72:	f9 1f       	adc	r31, r25
    2e74:	63 9f       	mul	r22, r19
    2e76:	b0 0d       	add	r27, r0
    2e78:	e1 1d       	adc	r30, r1
    2e7a:	f9 1f       	adc	r31, r25
    2e7c:	bd 01       	movw	r22, r26
    2e7e:	cf 01       	movw	r24, r30
    2e80:	11 24       	eor	r1, r1
    2e82:	08 95       	ret

00002e84 <__udivmodhi4>:
    2e84:	aa 1b       	sub	r26, r26
    2e86:	bb 1b       	sub	r27, r27
    2e88:	51 e1       	ldi	r21, 0x11	; 17
    2e8a:	07 c0       	rjmp	.+14     	; 0x2e9a <__udivmodhi4_ep>

00002e8c <__udivmodhi4_loop>:
    2e8c:	aa 1f       	adc	r26, r26
    2e8e:	bb 1f       	adc	r27, r27
    2e90:	a6 17       	cp	r26, r22
    2e92:	b7 07       	cpc	r27, r23
    2e94:	10 f0       	brcs	.+4      	; 0x2e9a <__udivmodhi4_ep>
    2e96:	a6 1b       	sub	r26, r22
    2e98:	b7 0b       	sbc	r27, r23

00002e9a <__udivmodhi4_ep>:
    2e9a:	88 1f       	adc	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	5a 95       	dec	r21
    2ea0:	a9 f7       	brne	.-22     	; 0x2e8c <__udivmodhi4_loop>
    2ea2:	80 95       	com	r24
    2ea4:	90 95       	com	r25
    2ea6:	bc 01       	movw	r22, r24
    2ea8:	cd 01       	movw	r24, r26
    2eaa:	08 95       	ret

00002eac <__udivmodsi4>:
    2eac:	a1 e2       	ldi	r26, 0x21	; 33
    2eae:	1a 2e       	mov	r1, r26
    2eb0:	aa 1b       	sub	r26, r26
    2eb2:	bb 1b       	sub	r27, r27
    2eb4:	fd 01       	movw	r30, r26
    2eb6:	0d c0       	rjmp	.+26     	; 0x2ed2 <__udivmodsi4_ep>

00002eb8 <__udivmodsi4_loop>:
    2eb8:	aa 1f       	adc	r26, r26
    2eba:	bb 1f       	adc	r27, r27
    2ebc:	ee 1f       	adc	r30, r30
    2ebe:	ff 1f       	adc	r31, r31
    2ec0:	a2 17       	cp	r26, r18
    2ec2:	b3 07       	cpc	r27, r19
    2ec4:	e4 07       	cpc	r30, r20
    2ec6:	f5 07       	cpc	r31, r21
    2ec8:	20 f0       	brcs	.+8      	; 0x2ed2 <__udivmodsi4_ep>
    2eca:	a2 1b       	sub	r26, r18
    2ecc:	b3 0b       	sbc	r27, r19
    2ece:	e4 0b       	sbc	r30, r20
    2ed0:	f5 0b       	sbc	r31, r21

00002ed2 <__udivmodsi4_ep>:
    2ed2:	66 1f       	adc	r22, r22
    2ed4:	77 1f       	adc	r23, r23
    2ed6:	88 1f       	adc	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	1a 94       	dec	r1
    2edc:	69 f7       	brne	.-38     	; 0x2eb8 <__udivmodsi4_loop>
    2ede:	60 95       	com	r22
    2ee0:	70 95       	com	r23
    2ee2:	80 95       	com	r24
    2ee4:	90 95       	com	r25
    2ee6:	9b 01       	movw	r18, r22
    2ee8:	ac 01       	movw	r20, r24
    2eea:	bd 01       	movw	r22, r26
    2eec:	cf 01       	movw	r24, r30
    2eee:	08 95       	ret

00002ef0 <__divmodsi4>:
    2ef0:	97 fb       	bst	r25, 7
    2ef2:	09 2e       	mov	r0, r25
    2ef4:	05 26       	eor	r0, r21
    2ef6:	0e d0       	rcall	.+28     	; 0x2f14 <__divmodsi4_neg1>
    2ef8:	57 fd       	sbrc	r21, 7
    2efa:	04 d0       	rcall	.+8      	; 0x2f04 <__divmodsi4_neg2>
    2efc:	d7 df       	rcall	.-82     	; 0x2eac <__udivmodsi4>
    2efe:	0a d0       	rcall	.+20     	; 0x2f14 <__divmodsi4_neg1>
    2f00:	00 1c       	adc	r0, r0
    2f02:	38 f4       	brcc	.+14     	; 0x2f12 <__divmodsi4_exit>

00002f04 <__divmodsi4_neg2>:
    2f04:	50 95       	com	r21
    2f06:	40 95       	com	r20
    2f08:	30 95       	com	r19
    2f0a:	21 95       	neg	r18
    2f0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0e:	4f 4f       	sbci	r20, 0xFF	; 255
    2f10:	5f 4f       	sbci	r21, 0xFF	; 255

00002f12 <__divmodsi4_exit>:
    2f12:	08 95       	ret

00002f14 <__divmodsi4_neg1>:
    2f14:	f6 f7       	brtc	.-4      	; 0x2f12 <__divmodsi4_exit>
    2f16:	90 95       	com	r25
    2f18:	80 95       	com	r24
    2f1a:	70 95       	com	r23
    2f1c:	61 95       	neg	r22
    2f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f20:	8f 4f       	sbci	r24, 0xFF	; 255
    2f22:	9f 4f       	sbci	r25, 0xFF	; 255
    2f24:	08 95       	ret

00002f26 <_exit>:
    2f26:	f8 94       	cli

00002f28 <__stop_program>:
    2f28:	ff cf       	rjmp	.-2      	; 0x2f28 <__stop_program>
