
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000039c4  00003a58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800124  00800124  00003a7c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00003a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001c57  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000053f5  00000000  00000000  00005733  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056f  00000000  00000000  0000ab28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000278f  00000000  00000000  0000b097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000c40  00000000  00000000  0000d828  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d90  00000000  00000000  0000e468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fe7  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000121df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 94 1a 	jmp	0x3528	; 0x3528 <__vector_6>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 49 1a 	jmp	0x3492	; 0x3492 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ec       	ldi	r30, 0xC4	; 196
      7c:	f9 e3       	ldi	r31, 0x39	; 57
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 32       	cpi	r26, 0x24	; 36
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e2       	ldi	r26, 0x24	; 36
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3a       	cpi	r26, 0xA6	; 166
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 e0 1c 	jmp	0x39c0	; 0x39c0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 b2 19 	call	0x3364	; 0x3364 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<0);
      ba:	50 9a       	sbi	0x0a, 0	; 10
  PORTD &=~ (1<<0);
      bc:	58 98       	cbi	0x0b, 0	; 11
      be:	88 e8       	ldi	r24, 0x88	; 136
      c0:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	2c e2       	ldi	r18, 0x2C	; 44
      c4:	31 e0       	ldi	r19, 0x01	; 1
      c6:	f9 01       	movw	r30, r18
      c8:	31 97       	sbiw	r30, 0x01	; 1
      ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x20>
  _delay_ms(500);
  
  
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	40 e2       	ldi	r20, 0x20	; 32
      d4:	5e e4       	ldi	r21, 0x4E	; 78
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	42 e1       	ldi	r20, 0x12	; 18
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	60 e0       	ldi	r22, 0x00	; 0
      e6:	70 e0       	ldi	r23, 0x00	; 0
      e8:	0e 94 9d 0b 	call	0x173a	; 0x173a <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	40 e0       	ldi	r20, 0x00	; 0
      f0:	51 e7       	ldi	r21, 0x71	; 113
      f2:	62 e0       	ldi	r22, 0x02	; 2
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	4e e0       	ldi	r20, 0x0E	; 14
      fe:	50 e0       	ldi	r21, 0x00	; 0
     100:	60 e0       	ldi	r22, 0x00	; 0
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	0e 94 cc 13 	call	0x2798	; 0x2798 <Timebase_DownCounter_Set_Securely>
  Timebase_LPDownCounter_Set_Securely(0, 5);
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	45 e0       	ldi	r20, 0x05	; 5
     10c:	50 e0       	ldi	r21, 0x00	; 0
     10e:	60 e0       	ldi	r22, 0x00	; 0
     110:	70 e0       	ldi	r23, 0x00	; 0
     112:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Timebase_LPDownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(10);
     116:	8a e0       	ldi	r24, 0x0A	; 10
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Byte_Hex(Timebase_Get_Update_Req_Sts());
     11e:	0e 94 a2 19 	call	0x3344	; 0x3344 <Timebase_Get_Update_Req_Sts>
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	bc 01       	movw	r22, r24
     12a:	cd 01       	movw	r24, r26
     12c:	0e 94 29 1b 	call	0x3652	; 0x3652 <UART_Transmit_Byte_Hex>
	UART_Transmit_Text(",");
     130:	80 e0       	ldi	r24, 0x00	; 0
     132:	91 e0       	ldi	r25, 0x01	; 1
     134:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_LPTimer_Get_Seconds());
     138:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Timebase_LPTimer_Get_Seconds>
     13c:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_LPDownCounter_Get_Value(0));
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <Timebase_LPDownCounter_Get_Value>
     14e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
     15a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <Timebase_Timer_Get_Seconds>
     15e:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	91 e0       	ldi	r25, 0x01	; 1
     166:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
     16a:	0e 94 cb 02 	call	0x596	; 0x596 <Timebase_Timer_Get_SubSeconds>
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b0 e0       	ldi	r27, 0x00	; 0
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	91 e0       	ldi	r25, 0x01	; 1
     17e:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <Timebase_UpCounter_SS_Get_Value>
     188:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     18c:	80 e0       	ldi	r24, 0x00	; 0
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 b6 09 	call	0x136c	; 0x136c <Timebase_UpCounter_Get_Value>
     19a:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <Timebase_DownCounter_SS_Get_Value>
     1ac:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	0e 94 68 12 	call	0x24d0	; 0x24d0 <Timebase_DownCounter_Get_Value>
     1be:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     1c2:	82 e0       	ldi	r24, 0x02	; 2
     1c4:	91 e0       	ldi	r25, 0x01	; 1
     1c6:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
    
	if(Timebase_LPDownCounter_Expired_Event(0)){
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	0e 94 8b 18 	call	0x3116	; 0x3116 <Timebase_LPDownCounter_Expired_Event>
     1d0:	88 23       	and	r24, r24
     1d2:	59 f0       	breq	.+22     	; 0x1ea <main+0x144>
	  Timebase_LPDownCounter_Set_Securely(0, 5);
     1d4:	80 e0       	ldi	r24, 0x00	; 0
     1d6:	45 e0       	ldi	r20, 0x05	; 5
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	60 e0       	ldi	r22, 0x00	; 0
     1dc:	70 e0       	ldi	r23, 0x00	; 0
     1de:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Timebase_LPDownCounter_Set_Securely>
	  UART_Transmit_Text("LPTIM Expired\r\n");
     1e2:	85 e0       	ldi	r24, 0x05	; 5
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
	}
	
	
	
	PORTD |= (1<<0);
     1ea:	58 9a       	sbi	0x0b, 0	; 11
	Timebase_Main_Loop_Executables();
     1ec:	0e 94 c5 19 	call	0x338a	; 0x338a <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<0);
     1f0:	58 98       	cbi	0x0b, 0	; 11
     1f2:	91 cf       	rjmp	.-222    	; 0x116 <main+0x70>

000001f4 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     1f4:	80 e3       	ldi	r24, 0x30	; 48
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	90 93 2f 01 	sts	0x012F, r25
     1fc:	80 93 2e 01 	sts	0x012E, r24
  Timebase->Config.UpdateRate = 1;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	90 93 31 01 	sts	0x0131, r25
     208:	80 93 30 01 	sts	0x0130, r24
  Timebase->Time.OVFUpdateValue=0;
     20c:	10 92 34 01 	sts	0x0134, r1
  Timebase->Time.SubSecondsShadow = 0;
     210:	10 92 40 01 	sts	0x0140, r1
     214:	10 92 3f 01 	sts	0x013F, r1
  Timebase->Time.SecondsShadow = 0;
     218:	10 92 41 01 	sts	0x0141, r1
     21c:	10 92 42 01 	sts	0x0142, r1
     220:	10 92 43 01 	sts	0x0143, r1
     224:	10 92 44 01 	sts	0x0144, r1
  Timebase->Time.SubSeconds = 0;
     228:	10 92 3a 01 	sts	0x013A, r1
     22c:	10 92 39 01 	sts	0x0139, r1
  Timebase->Time.Seconds = 0;
     230:	10 92 3b 01 	sts	0x013B, r1
     234:	10 92 3c 01 	sts	0x013C, r1
     238:	10 92 3d 01 	sts	0x013D, r1
     23c:	10 92 3e 01 	sts	0x013E, r1
  Timebase->Time.VariablesSync = 0;
     240:	10 92 45 01 	sts	0x0145, r1
  Timebase->Time.LastSample = 0;
     244:	10 92 35 01 	sts	0x0135, r1
     248:	10 92 36 01 	sts	0x0136, r1
     24c:	10 92 37 01 	sts	0x0137, r1
     250:	10 92 38 01 	sts	0x0138, r1
  Timebase->Time.StartTimeSubSeconds = 0;
  Timebase->Time.Status = 0;
  #endif
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds = 0;
     254:	10 92 47 01 	sts	0x0147, r1
     258:	10 92 46 01 	sts	0x0146, r1
  Timebase->Time.LPTimerSeconds = 0;
     25c:	10 92 48 01 	sts	0x0148, r1
     260:	10 92 49 01 	sts	0x0149, r1
     264:	10 92 4a 01 	sts	0x014A, r1
     268:	10 92 4b 01 	sts	0x014B, r1
  Timebase->Config.LPUpdateRate = 1;
     26c:	90 93 33 01 	sts	0x0133, r25
     270:	80 93 32 01 	sts	0x0132, r24
  #endif
  
  Timebase->UpdateRequest = 0;
     274:	10 92 4c 01 	sts	0x014C, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     278:	10 92 66 01 	sts	0x0166, r1
    Timebase->UpCounter[i].EndValue = 0;
     27c:	10 92 67 01 	sts	0x0167, r1
     280:	10 92 68 01 	sts	0x0168, r1
     284:	10 92 69 01 	sts	0x0169, r1
     288:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounter[i].Target = 0;
     28c:	10 92 6b 01 	sts	0x016B, r1
     290:	10 92 6c 01 	sts	0x016C, r1
     294:	10 92 6d 01 	sts	0x016D, r1
     298:	10 92 6e 01 	sts	0x016E, r1
    Timebase->UpCounter[i].Temporary = 0;    
     29c:	10 92 6f 01 	sts	0x016F, r1
     2a0:	10 92 70 01 	sts	0x0170, r1
     2a4:	10 92 71 01 	sts	0x0171, r1
     2a8:	10 92 72 01 	sts	0x0172, r1
    Timebase->UpCounter[i].Value = 0;
     2ac:	10 92 73 01 	sts	0x0173, r1
     2b0:	10 92 74 01 	sts	0x0174, r1
     2b4:	10 92 75 01 	sts	0x0175, r1
     2b8:	10 92 76 01 	sts	0x0176, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     2bc:	10 92 77 01 	sts	0x0177, r1
     2c0:	10 92 78 01 	sts	0x0178, r1
     2c4:	10 92 79 01 	sts	0x0179, r1
     2c8:	10 92 7a 01 	sts	0x017A, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     2cc:	10 92 4d 01 	sts	0x014D, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     2d0:	10 92 4e 01 	sts	0x014E, r1
     2d4:	10 92 4f 01 	sts	0x014F, r1
     2d8:	10 92 50 01 	sts	0x0150, r1
     2dc:	10 92 51 01 	sts	0x0151, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     2e0:	10 92 52 01 	sts	0x0152, r1
     2e4:	10 92 53 01 	sts	0x0153, r1
     2e8:	10 92 54 01 	sts	0x0154, r1
     2ec:	10 92 55 01 	sts	0x0155, r1
    Timebase->UpCounterSS[i].Target = 0;
     2f0:	10 92 56 01 	sts	0x0156, r1
     2f4:	10 92 57 01 	sts	0x0157, r1
     2f8:	10 92 58 01 	sts	0x0158, r1
     2fc:	10 92 59 01 	sts	0x0159, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     300:	10 92 5a 01 	sts	0x015A, r1
     304:	10 92 5b 01 	sts	0x015B, r1
     308:	10 92 5c 01 	sts	0x015C, r1
     30c:	10 92 5d 01 	sts	0x015D, r1
    Timebase->UpCounterSS[i].Value = 0;
     310:	10 92 5e 01 	sts	0x015E, r1
     314:	10 92 5f 01 	sts	0x015F, r1
     318:	10 92 60 01 	sts	0x0160, r1
     31c:	10 92 61 01 	sts	0x0161, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     320:	10 92 62 01 	sts	0x0162, r1
     324:	10 92 63 01 	sts	0x0163, r1
     328:	10 92 64 01 	sts	0x0164, r1
     32c:	10 92 65 01 	sts	0x0165, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     330:	10 92 8c 01 	sts	0x018C, r1
    Timebase->DownCounter[i].EndValue = 0;
     334:	10 92 8d 01 	sts	0x018D, r1
     338:	10 92 8e 01 	sts	0x018E, r1
     33c:	10 92 8f 01 	sts	0x018F, r1
     340:	10 92 90 01 	sts	0x0190, r1
    Timebase->DownCounter[i].Value = 0;
     344:	10 92 91 01 	sts	0x0191, r1
     348:	10 92 92 01 	sts	0x0192, r1
     34c:	10 92 93 01 	sts	0x0193, r1
     350:	10 92 94 01 	sts	0x0194, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     354:	10 92 95 01 	sts	0x0195, r1
     358:	10 92 96 01 	sts	0x0196, r1
     35c:	10 92 97 01 	sts	0x0197, r1
     360:	10 92 98 01 	sts	0x0198, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     364:	10 92 7b 01 	sts	0x017B, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     368:	10 92 7c 01 	sts	0x017C, r1
     36c:	10 92 7d 01 	sts	0x017D, r1
     370:	10 92 7e 01 	sts	0x017E, r1
     374:	10 92 7f 01 	sts	0x017F, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     378:	10 92 80 01 	sts	0x0180, r1
     37c:	10 92 81 01 	sts	0x0181, r1
     380:	10 92 82 01 	sts	0x0182, r1
     384:	10 92 83 01 	sts	0x0183, r1
    Timebase->DownCounterSS[i].Value = 0;
     388:	10 92 84 01 	sts	0x0184, r1
     38c:	10 92 85 01 	sts	0x0185, r1
     390:	10 92 86 01 	sts	0x0186, r1
     394:	10 92 87 01 	sts	0x0187, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     398:	10 92 88 01 	sts	0x0188, r1
     39c:	10 92 89 01 	sts	0x0189, r1
     3a0:	10 92 8a 01 	sts	0x018A, r1
     3a4:	10 92 8b 01 	sts	0x018B, r1
  }
  #endif
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase->LPDownCounter[i].Status.StatusByte = 0; 
     3a8:	10 92 99 01 	sts	0x0199, r1
    Timebase->LPDownCounter[i].EndValue = 0;
     3ac:	10 92 9a 01 	sts	0x019A, r1
     3b0:	10 92 9b 01 	sts	0x019B, r1
     3b4:	10 92 9c 01 	sts	0x019C, r1
     3b8:	10 92 9d 01 	sts	0x019D, r1
    Timebase->LPDownCounter[i].Value = 0;
     3bc:	10 92 9e 01 	sts	0x019E, r1
     3c0:	10 92 9f 01 	sts	0x019F, r1
     3c4:	10 92 a0 01 	sts	0x01A0, r1
     3c8:	10 92 a1 01 	sts	0x01A1, r1
    Timebase->LPDownCounter[i].PeriodValue = 0;
     3cc:	10 92 a2 01 	sts	0x01A2, r1
     3d0:	10 92 a3 01 	sts	0x01A3, r1
     3d4:	10 92 a4 01 	sts	0x01A4, r1
     3d8:	10 92 a5 01 	sts	0x01A5, r1
  }
  #endif
  
}
     3dc:	08 95       	ret

000003de <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     3de:	8f 92       	push	r8
     3e0:	9f 92       	push	r9
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	df 93       	push	r29
     3f2:	cf 93       	push	r28
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	2a 97       	sbiw	r28, 0x0a	; 10
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     406:	de 01       	movw	r26, r28
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	e5 e1       	ldi	r30, 0x15	; 21
     40c:	f1 e0       	ldi	r31, 0x01	; 1
     40e:	8a e0       	ldi	r24, 0x0A	; 10
     410:	01 90       	ld	r0, Z+
     412:	0d 92       	st	X+, r0
     414:	81 50       	subi	r24, 0x01	; 1
     416:	e1 f7       	brne	.-8      	; 0x410 <Timebase_Timer_Config+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     418:	94 01       	movw	r18, r8
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	7b e1       	ldi	r23, 0x1B	; 27
     422:	87 eb       	ldi	r24, 0xB7	; 183
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
     42a:	b2 2e       	mov	r11, r18
     42c:	c3 2e       	mov	r12, r19
     42e:	d4 2e       	mov	r13, r20
     430:	05 2f       	mov	r16, r21
     432:	7e 01       	movw	r14, r28
     434:	08 94       	sec
     436:	e1 1c       	adc	r14, r1
     438:	f1 1c       	adc	r15, r1
     43a:	c9 01       	movw	r24, r18
     43c:	da 01       	movw	r26, r20
     43e:	9c 01       	movw	r18, r24
     440:	ad 01       	movw	r20, r26
     442:	10 e0       	ldi	r17, 0x00	; 0
     444:	13 c0       	rjmp	.+38     	; 0x46c <Timebase_Timer_Config+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     446:	f7 01       	movw	r30, r14
     448:	21 91       	ld	r18, Z+
     44a:	31 91       	ld	r19, Z+
     44c:	7f 01       	movw	r14, r30
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	50 e0       	ldi	r21, 0x00	; 0
     452:	6b 2d       	mov	r22, r11
     454:	7c 2d       	mov	r23, r12
     456:	8d 2d       	mov	r24, r13
     458:	90 2f       	mov	r25, r16
     45a:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
     45e:	c9 01       	movw	r24, r18
     460:	da 01       	movw	r26, r20
     462:	9c 01       	movw	r18, r24
     464:	ad 01       	movw	r20, r26
	clock_div_index++;
     466:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     468:	15 30       	cpi	r17, 0x05	; 5
     46a:	31 f0       	breq	.+12     	; 0x478 <Timebase_Timer_Config+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     46c:	2f 3f       	cpi	r18, 0xFF	; 255
     46e:	31 05       	cpc	r19, r1
     470:	41 05       	cpc	r20, r1
     472:	51 05       	cpc	r21, r1
     474:	09 f0       	breq	.+2      	; 0x478 <Timebase_Timer_Config+0x9a>
     476:	3c f7       	brge	.-50     	; 0x446 <Timebase_Timer_Config+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     478:	81 2f       	mov	r24, r17
     47a:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     47c:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     47e:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     480:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     484:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     486:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     488:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     48a:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     48c:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     48e:	88 23       	and	r24, r24
     490:	11 f4       	brne	.+4      	; 0x496 <Timebase_Timer_Config+0xb8>
	TCCR0B = (1<<CS00);
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0f c0       	rjmp	.+30     	; 0x4b4 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 1){
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	11 f4       	brne	.+4      	; 0x49e <Timebase_Timer_Config+0xc0>
	TCCR0B = (1<<CS01);
     49a:	82 e0       	ldi	r24, 0x02	; 2
     49c:	0b c0       	rjmp	.+22     	; 0x4b4 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 2){
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	11 f4       	brne	.+4      	; 0x4a6 <Timebase_Timer_Config+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	07 c0       	rjmp	.+14     	; 0x4b4 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 3){
     4a6:	83 30       	cpi	r24, 0x03	; 3
     4a8:	11 f4       	brne	.+4      	; 0x4ae <Timebase_Timer_Config+0xd0>
	TCCR0B = (1<<CS02);
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 4){
     4ae:	84 30       	cpi	r24, 0x04	; 4
     4b0:	11 f4       	brne	.+4      	; 0x4b6 <Timebase_Timer_Config+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     4b2:	85 e0       	ldi	r24, 0x05	; 5
     4b4:	85 bd       	out	0x25, r24	; 37
  }
	
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     4b6:	e0 91 2e 01 	lds	r30, 0x012E
     4ba:	f0 91 2f 01 	lds	r31, 0x012F
     4be:	82 2f       	mov	r24, r18
     4c0:	80 95       	com	r24
     4c2:	84 83       	std	Z+4, r24	; 0x04
  TCNT0  = Timebase->Time.OVFUpdateValue;
     4c4:	84 81       	ldd	r24, Z+4	; 0x04
     4c6:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 6e 00 	sts	0x006E, r24
  sei();
     4ce:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     4d0:	91 82       	std	Z+1, r9	; 0x01
     4d2:	80 82       	st	Z, r8
}
     4d4:	2a 96       	adiw	r28, 0x0a	; 10
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	cf 91       	pop	r28
     4e2:	df 91       	pop	r29
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	bf 90       	pop	r11
     4f2:	9f 90       	pop	r9
     4f4:	8f 90       	pop	r8
     4f6:	08 95       	ret

000004f8 <Timebase_LPTimer_Config>:


#ifdef TIMEBASE_LP_TIMER_ENABLE

void Timebase_LPTimer_Config(uint16_t UpdateRateHz){
     4f8:	9c 01       	movw	r18, r24
    uint8_t  Prescaler_val;
	
    if(UpdateRateHz == 1){
     4fa:	81 30       	cpi	r24, 0x01	; 1
     4fc:	91 05       	cpc	r25, r1
     4fe:	11 f4       	brne	.+4      	; 0x504 <Timebase_LPTimer_Config+0xc>
     500:	96 e0       	ldi	r25, 0x06	; 6
     502:	19 c0       	rjmp	.+50     	; 0x536 <Timebase_LPTimer_Config+0x3e>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	91 05       	cpc	r25, r1
     508:	11 f4       	brne	.+4      	; 0x50e <Timebase_LPTimer_Config+0x16>
     50a:	95 e0       	ldi	r25, 0x05	; 5
     50c:	14 c0       	rjmp	.+40     	; 0x536 <Timebase_LPTimer_Config+0x3e>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     50e:	84 30       	cpi	r24, 0x04	; 4
     510:	91 05       	cpc	r25, r1
     512:	11 f4       	brne	.+4      	; 0x518 <Timebase_LPTimer_Config+0x20>
     514:	94 e0       	ldi	r25, 0x04	; 4
     516:	0f c0       	rjmp	.+30     	; 0x536 <Timebase_LPTimer_Config+0x3e>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     518:	88 30       	cpi	r24, 0x08	; 8
     51a:	91 05       	cpc	r25, r1
     51c:	11 f4       	brne	.+4      	; 0x522 <Timebase_LPTimer_Config+0x2a>
     51e:	93 e0       	ldi	r25, 0x03	; 3
     520:	0a c0       	rjmp	.+20     	; 0x536 <Timebase_LPTimer_Config+0x3e>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     522:	80 31       	cpi	r24, 0x10	; 16
     524:	91 05       	cpc	r25, r1
     526:	11 f4       	brne	.+4      	; 0x52c <Timebase_LPTimer_Config+0x34>
     528:	92 e0       	ldi	r25, 0x02	; 2
     52a:	05 c0       	rjmp	.+10     	; 0x536 <Timebase_LPTimer_Config+0x3e>
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	20 32       	cpi	r18, 0x20	; 32
     530:	31 05       	cpc	r19, r1
     532:	09 f4       	brne	.+2      	; 0x536 <Timebase_LPTimer_Config+0x3e>
     534:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     536:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     538:	84 b7       	in	r24, 0x34	; 52
     53a:	87 7f       	andi	r24, 0xF7	; 247
     53c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     53e:	80 91 60 00 	lds	r24, 0x0060
     542:	80 68       	ori	r24, 0x80	; 128
     544:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     548:	80 91 60 00 	lds	r24, 0x0060
     54c:	88 61       	ori	r24, 0x18	; 24
     54e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     552:	90 64       	ori	r25, 0x40	; 64
     554:	90 93 60 00 	sts	0x0060, r25
    sei();
     558:	78 94       	sei
	Timebase->Config.LPUpdateRate = UpdateRateHz;
     55a:	e0 91 2e 01 	lds	r30, 0x012E
     55e:	f0 91 2f 01 	lds	r31, 0x012F
     562:	33 83       	std	Z+3, r19	; 0x03
     564:	22 83       	std	Z+2, r18	; 0x02
}
     566:	08 95       	ret

00000568 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     568:	f8 94       	cli
}
     56a:	08 95       	ret

0000056c <Timebase_Atomic_Operation_End>:


void Timebase_Atomic_Operation_End(void){
  sei();
     56c:	78 94       	sei
}
     56e:	08 95       	ret

00000570 <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     570:	e0 91 2e 01 	lds	r30, 0x012E
     574:	f0 91 2f 01 	lds	r31, 0x012F
     578:	27 85       	ldd	r18, Z+15	; 0x0f
     57a:	30 89       	ldd	r19, Z+16	; 0x10
}
     57c:	c9 01       	movw	r24, r18
     57e:	08 95       	ret

00000580 <Timebase_Timer_Get_SecondsShadow>:


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     580:	e0 91 2e 01 	lds	r30, 0x012E
     584:	f0 91 2f 01 	lds	r31, 0x012F
     588:	21 89       	ldd	r18, Z+17	; 0x11
     58a:	32 89       	ldd	r19, Z+18	; 0x12
     58c:	43 89       	ldd	r20, Z+19	; 0x13
     58e:	54 89       	ldd	r21, Z+20	; 0x14
}
     590:	b9 01       	movw	r22, r18
     592:	ca 01       	movw	r24, r20
     594:	08 95       	ret

00000596 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     596:	e0 91 2e 01 	lds	r30, 0x012E
     59a:	f0 91 2f 01 	lds	r31, 0x012F
     59e:	21 85       	ldd	r18, Z+9	; 0x09
     5a0:	32 85       	ldd	r19, Z+10	; 0x0a
}
     5a2:	c9 01       	movw	r24, r18
     5a4:	08 95       	ret

000005a6 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     5a6:	e0 91 2e 01 	lds	r30, 0x012E
     5aa:	f0 91 2f 01 	lds	r31, 0x012F
     5ae:	23 85       	ldd	r18, Z+11	; 0x0b
     5b0:	34 85       	ldd	r19, Z+12	; 0x0c
     5b2:	45 85       	ldd	r20, Z+13	; 0x0d
     5b4:	56 85       	ldd	r21, Z+14	; 0x0e
}
     5b6:	b9 01       	movw	r22, r18
     5b8:	ca 01       	movw	r24, r20
     5ba:	08 95       	ret

000005bc <Timebase_Timer_Set_SubSeconds>:


void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     5bc:	e0 91 2e 01 	lds	r30, 0x012E
     5c0:	f0 91 2f 01 	lds	r31, 0x012F
     5c4:	92 87       	std	Z+10, r25	; 0x0a
     5c6:	81 87       	std	Z+9, r24	; 0x09
}
     5c8:	08 95       	ret

000005ca <Timebase_Timer_Set_Seconds>:


void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     5ca:	e0 91 2e 01 	lds	r30, 0x012E
     5ce:	f0 91 2f 01 	lds	r31, 0x012F
     5d2:	63 87       	std	Z+11, r22	; 0x0b
     5d4:	74 87       	std	Z+12, r23	; 0x0c
     5d6:	85 87       	std	Z+13, r24	; 0x0d
     5d8:	96 87       	std	Z+14, r25	; 0x0e
}
     5da:	08 95       	ret

000005dc <Timebase_Timer_Sync_With_Shadow_Variables>:


void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     5dc:	e0 91 2e 01 	lds	r30, 0x012E
     5e0:	f0 91 2f 01 	lds	r31, 0x012F
     5e4:	85 89       	ldd	r24, Z+21	; 0x15
     5e6:	88 23       	and	r24, r24
     5e8:	81 f4       	brne	.+32     	; 0x60a <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5ea:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     5ec:	87 85       	ldd	r24, Z+15	; 0x0f
     5ee:	90 89       	ldd	r25, Z+16	; 0x10
     5f0:	92 87       	std	Z+10, r25	; 0x0a
     5f2:	81 87       	std	Z+9, r24	; 0x09
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     5f4:	81 89       	ldd	r24, Z+17	; 0x11
     5f6:	92 89       	ldd	r25, Z+18	; 0x12
     5f8:	a3 89       	ldd	r26, Z+19	; 0x13
     5fa:	b4 89       	ldd	r27, Z+20	; 0x14
     5fc:	83 87       	std	Z+11, r24	; 0x0b
     5fe:	94 87       	std	Z+12, r25	; 0x0c
     600:	a5 87       	std	Z+13, r26	; 0x0d
     602:	b6 87       	std	Z+14, r27	; 0x0e
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     604:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	85 8b       	std	Z+21, r24	; 0x15
     60a:	08 95       	ret

0000060c <Timebase_Timer_Delay_SubSeconds>:
  }
}


void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     60c:	6f 92       	push	r6
     60e:	7f 92       	push	r7
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ef 92       	push	r14
     61e:	ff 92       	push	r15
     620:	0f 93       	push	r16
     622:	1f 93       	push	r17
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     62a:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     62c:	c0 91 2e 01 	lds	r28, 0x012E
     630:	d0 91 2f 01 	lds	r29, 0x012F
     634:	ef 84       	ldd	r14, Y+15	; 0x0f
     636:	f8 88       	ldd	r15, Y+16	; 0x10
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     638:	29 89       	ldd	r18, Y+17	; 0x11
     63a:	3a 89       	ldd	r19, Y+18	; 0x12
     63c:	4b 89       	ldd	r20, Y+19	; 0x13
     63e:	5c 89       	ldd	r21, Y+20	; 0x14
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     640:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     642:	68 81       	ld	r22, Y
     644:	79 81       	ldd	r23, Y+1	; 0x01
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 84 1c 	call	0x3908	; 0x3908 <__mulsi3>
     64e:	3b 01       	movw	r6, r22
     650:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     652:	00 e0       	ldi	r16, 0x00	; 0
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	6e 0c       	add	r6, r14
     658:	7f 1c       	adc	r7, r15
     65a:	80 1e       	adc	r8, r16
     65c:	91 1e       	adc	r9, r17
  smpl_val += value;
     65e:	cc 24       	eor	r12, r12
     660:	dd 24       	eor	r13, r13
     662:	6a 0c       	add	r6, r10
     664:	7b 1c       	adc	r7, r11
     666:	8c 1c       	adc	r8, r12
     668:	9d 1c       	adc	r9, r13
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	14 c0       	rjmp	.+40     	; 0x69c <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     674:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     676:	ef 84       	ldd	r14, Y+15	; 0x0f
     678:	f8 88       	ldd	r15, Y+16	; 0x10
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     67a:	29 89       	ldd	r18, Y+17	; 0x11
     67c:	3a 89       	ldd	r19, Y+18	; 0x12
     67e:	4b 89       	ldd	r20, Y+19	; 0x13
     680:	5c 89       	ldd	r21, Y+20	; 0x14
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     682:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     684:	68 81       	ld	r22, Y
     686:	79 81       	ldd	r23, Y+1	; 0x01
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	0e 94 84 1c 	call	0x3908	; 0x3908 <__mulsi3>
	curr_val += curr_ss;
     690:	00 e0       	ldi	r16, 0x00	; 0
     692:	10 e0       	ldi	r17, 0x00	; 0
     694:	6e 0d       	add	r22, r14
     696:	7f 1d       	adc	r23, r15
     698:	80 1f       	adc	r24, r16
     69a:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     69c:	66 15       	cp	r22, r6
     69e:	77 05       	cpc	r23, r7
     6a0:	88 05       	cpc	r24, r8
     6a2:	99 05       	cpc	r25, r9
     6a4:	3c f3       	brlt	.-50     	; 0x674 <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	9f 90       	pop	r9
     6bc:	8f 90       	pop	r8
     6be:	7f 90       	pop	r7
     6c0:	6f 90       	pop	r6
     6c2:	08 95       	ret

000006c4 <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     6c4:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6c6:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     6c8:	e0 91 2e 01 	lds	r30, 0x012E
     6cc:	f0 91 2f 01 	lds	r31, 0x012F
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6d2:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     6d4:	87 85       	ldd	r24, Z+15	; 0x0f
     6d6:	90 89       	ldd	r25, Z+16	; 0x10
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     6d8:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     6da:	25 81       	ldd	r18, Z+5	; 0x05
     6dc:	36 81       	ldd	r19, Z+6	; 0x06
     6de:	47 81       	ldd	r20, Z+7	; 0x07
     6e0:	50 85       	ldd	r21, Z+8	; 0x08
     6e2:	a0 e0       	ldi	r26, 0x00	; 0
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	82 17       	cp	r24, r18
     6e8:	93 07       	cpc	r25, r19
     6ea:	a4 07       	cpc	r26, r20
     6ec:	b5 07       	cpc	r27, r21
     6ee:	89 f7       	brne	.-30     	; 0x6d2 <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     6f0:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     6f2:	87 85       	ldd	r24, Z+15	; 0x0f
     6f4:	90 89       	ldd	r25, Z+16	; 0x10
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     6f6:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	85 83       	std	Z+5, r24	; 0x05
     6fe:	96 83       	std	Z+6, r25	; 0x06
     700:	a7 83       	std	Z+7, r26	; 0x07
     702:	b0 87       	std	Z+8, r27	; 0x08
  Timebase->Time.LastSample += value;
     704:	25 81       	ldd	r18, Z+5	; 0x05
     706:	36 81       	ldd	r19, Z+6	; 0x06
     708:	47 81       	ldd	r20, Z+7	; 0x07
     70a:	50 85       	ldd	r21, Z+8	; 0x08
     70c:	cb 01       	movw	r24, r22
     70e:	a0 e0       	ldi	r26, 0x00	; 0
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	82 0f       	add	r24, r18
     714:	93 1f       	adc	r25, r19
     716:	a4 1f       	adc	r26, r20
     718:	b5 1f       	adc	r27, r21
     71a:	85 83       	std	Z+5, r24	; 0x05
     71c:	96 83       	std	Z+6, r25	; 0x06
     71e:	a7 83       	std	Z+7, r26	; 0x07
     720:	b0 87       	std	Z+8, r27	; 0x08
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     722:	25 81       	ldd	r18, Z+5	; 0x05
     724:	36 81       	ldd	r19, Z+6	; 0x06
     726:	47 81       	ldd	r20, Z+7	; 0x07
     728:	50 85       	ldd	r21, Z+8	; 0x08
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	a0 e0       	ldi	r26, 0x00	; 0
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	28 17       	cp	r18, r24
     734:	39 07       	cpc	r19, r25
     736:	4a 07       	cpc	r20, r26
     738:	5b 07       	cpc	r21, r27
     73a:	84 f0       	brlt	.+32     	; 0x75c <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     73c:	25 81       	ldd	r18, Z+5	; 0x05
     73e:	36 81       	ldd	r19, Z+6	; 0x06
     740:	47 81       	ldd	r20, Z+7	; 0x07
     742:	50 85       	ldd	r21, Z+8	; 0x08
     744:	80 81       	ld	r24, Z
     746:	91 81       	ldd	r25, Z+1	; 0x01
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	28 1b       	sub	r18, r24
     74e:	39 0b       	sbc	r19, r25
     750:	4a 0b       	sbc	r20, r26
     752:	5b 0b       	sbc	r21, r27
     754:	25 83       	std	Z+5, r18	; 0x05
     756:	36 83       	std	Z+6, r19	; 0x06
     758:	47 83       	std	Z+7, r20	; 0x07
     75a:	50 87       	std	Z+8, r21	; 0x08
     75c:	08 95       	ret

0000075e <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     75e:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     760:	e0 91 2e 01 	lds	r30, 0x012E
     764:	f0 91 2f 01 	lds	r31, 0x012F
     768:	21 89       	ldd	r18, Z+17	; 0x11
     76a:	32 89       	ldd	r19, Z+18	; 0x12
     76c:	43 89       	ldd	r20, Z+19	; 0x13
     76e:	54 89       	ldd	r21, Z+20	; 0x14
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     770:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     772:	a0 e0       	ldi	r26, 0x00	; 0
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	82 0f       	add	r24, r18
     778:	93 1f       	adc	r25, r19
     77a:	a4 1f       	adc	r26, r20
     77c:	b5 1f       	adc	r27, r21
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e0       	ldi	r20, 0x00	; 0
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	06 c0       	rjmp	.+12     	; 0x794 <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     788:	f8 94       	cli
  return Timebase->Time.SubSecondsShadow;
}


int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     78a:	21 89       	ldd	r18, Z+17	; 0x11
     78c:	32 89       	ldd	r19, Z+18	; 0x12
     78e:	43 89       	ldd	r20, Z+19	; 0x13
     790:	54 89       	ldd	r21, Z+20	; 0x14
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     792:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     794:	28 17       	cp	r18, r24
     796:	39 07       	cpc	r19, r25
     798:	4a 07       	cpc	r20, r26
     79a:	5b 07       	cpc	r21, r27
     79c:	ac f3       	brlt	.-22     	; 0x788 <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     79e:	08 95       	ret

000007a0 <Timebase_LPTimer_Get_SubSeconds>:
#ifdef TIMEBASE_LP_TIMER_ENABLE

uint16_t Timebase_LPTimer_Get_SubSeconds(void){
  uint16_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSubSeconds;
     7a0:	e0 91 2e 01 	lds	r30, 0x012E
     7a4:	f0 91 2f 01 	lds	r31, 0x012F
     7a8:	26 89       	ldd	r18, Z+22	; 0x16
     7aa:	37 89       	ldd	r19, Z+23	; 0x17
    temp1 = Timebase->Time.LPTimerSubSeconds;
     7ac:	86 89       	ldd	r24, Z+22	; 0x16
     7ae:	97 89       	ldd	r25, Z+23	; 0x17
    if(temp0 == temp1){
     7b0:	28 17       	cp	r18, r24
     7b2:	39 07       	cpc	r19, r25
     7b4:	c9 f7       	brne	.-14     	; 0x7a8 <Timebase_LPTimer_Get_SubSeconds+0x8>
	  break;
    }
  }
  return temp0;
}
     7b6:	c9 01       	movw	r24, r18
     7b8:	08 95       	ret

000007ba <Timebase_LPTimer_Get_Seconds>:


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     7ba:	e0 91 2e 01 	lds	r30, 0x012E
     7be:	f0 91 2f 01 	lds	r31, 0x012F
     7c2:	20 8d       	ldd	r18, Z+24	; 0x18
     7c4:	31 8d       	ldd	r19, Z+25	; 0x19
     7c6:	42 8d       	ldd	r20, Z+26	; 0x1a
     7c8:	53 8d       	ldd	r21, Z+27	; 0x1b
    temp1 = Timebase->Time.LPTimerSeconds;
     7ca:	80 8d       	ldd	r24, Z+24	; 0x18
     7cc:	91 8d       	ldd	r25, Z+25	; 0x19
     7ce:	a2 8d       	ldd	r26, Z+26	; 0x1a
     7d0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    if(temp0 == temp1){
     7d2:	28 17       	cp	r18, r24
     7d4:	39 07       	cpc	r19, r25
     7d6:	4a 07       	cpc	r20, r26
     7d8:	5b 07       	cpc	r21, r27
     7da:	99 f7       	brne	.-26     	; 0x7c2 <Timebase_LPTimer_Get_Seconds+0x8>
	  break;
    }
  }
  return temp0;
}
     7dc:	b9 01       	movw	r22, r18
     7de:	ca 01       	movw	r24, r20
     7e0:	08 95       	ret

000007e2 <Timebase_LPTimer_Set_SubSeconds>:


void Timebase_LPTimer_Set_SubSeconds(uint16_t value){
  Timebase->Time.LPTimerSubSeconds = value;
     7e2:	e0 91 2e 01 	lds	r30, 0x012E
     7e6:	f0 91 2f 01 	lds	r31, 0x012F
     7ea:	97 8b       	std	Z+23, r25	; 0x17
     7ec:	86 8b       	std	Z+22, r24	; 0x16
}
     7ee:	08 95       	ret

000007f0 <Timebase_LPTimer_Set_Seconds>:


void Timebase_LPTimer_Set_Seconds(int32_t value){
  Timebase->Time.LPTimerSeconds = value;
     7f0:	e0 91 2e 01 	lds	r30, 0x012E
     7f4:	f0 91 2f 01 	lds	r31, 0x012F
     7f8:	60 8f       	std	Z+24, r22	; 0x18
     7fa:	71 8f       	std	Z+25, r23	; 0x19
     7fc:	82 8f       	std	Z+26, r24	; 0x1a
     7fe:	93 8f       	std	Z+27, r25	; 0x1b
}
     800:	08 95       	ret

00000802 <Timebase_LPTimer_Delay_Seconds>:

void Timebase_LPTimer_Delay_Seconds(uint16_t value){
     802:	ef 92       	push	r14
     804:	ff 92       	push	r15
     806:	0f 93       	push	r16
     808:	1f 93       	push	r17
     80a:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     80c:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     80e:	e0 91 2e 01 	lds	r30, 0x012E
     812:	f0 91 2f 01 	lds	r31, 0x012F
     816:	20 8d       	ldd	r18, Z+24	; 0x18
     818:	31 8d       	ldd	r19, Z+25	; 0x19
     81a:	42 8d       	ldd	r20, Z+26	; 0x1a
     81c:	53 8d       	ldd	r21, Z+27	; 0x1b
    temp1 = Timebase->Time.LPTimerSeconds;
     81e:	80 8d       	ldd	r24, Z+24	; 0x18
     820:	91 8d       	ldd	r25, Z+25	; 0x19
     822:	a2 8d       	ldd	r26, Z+26	; 0x1a
     824:	b3 8d       	ldd	r27, Z+27	; 0x1b
    if(temp0 == temp1){
     826:	28 17       	cp	r18, r24
     828:	39 07       	cpc	r19, r25
     82a:	4a 07       	cpc	r20, r26
     82c:	5b 07       	cpc	r21, r27
     82e:	99 f7       	brne	.-26     	; 0x816 <Timebase_LPTimer_Delay_Seconds+0x14>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     830:	78 94       	sei
void Timebase_LPTimer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
     832:	7b 01       	movw	r14, r22
     834:	00 e0       	ldi	r16, 0x00	; 0
     836:	10 e0       	ldi	r17, 0x00	; 0
     838:	e2 0e       	add	r14, r18
     83a:	f3 1e       	adc	r15, r19
     83c:	04 1f       	adc	r16, r20
     83e:	15 1f       	adc	r17, r21
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	50 e0       	ldi	r21, 0x00	; 0
     848:	0f c0       	rjmp	.+30     	; 0x868 <Timebase_LPTimer_Delay_Seconds+0x66>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     84a:	f8 94       	cli


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
     84c:	20 8d       	ldd	r18, Z+24	; 0x18
     84e:	31 8d       	ldd	r19, Z+25	; 0x19
     850:	42 8d       	ldd	r20, Z+26	; 0x1a
     852:	53 8d       	ldd	r21, Z+27	; 0x1b
    temp1 = Timebase->Time.LPTimerSeconds;
     854:	80 8d       	ldd	r24, Z+24	; 0x18
     856:	91 8d       	ldd	r25, Z+25	; 0x19
     858:	a2 8d       	ldd	r26, Z+26	; 0x1a
     85a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    if(temp0 == temp1){
     85c:	28 17       	cp	r18, r24
     85e:	39 07       	cpc	r19, r25
     860:	4a 07       	cpc	r20, r26
     862:	5b 07       	cpc	r21, r27
     864:	99 f7       	brne	.-26     	; 0x84c <Timebase_LPTimer_Delay_Seconds+0x4a>
  cli();
}


void Timebase_Atomic_Operation_End(void){
  sei();
     866:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_LPTimer_Get_Seconds();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     868:	2e 15       	cp	r18, r14
     86a:	3f 05       	cpc	r19, r15
     86c:	40 07       	cpc	r20, r16
     86e:	51 07       	cpc	r21, r17
     870:	64 f3       	brlt	.-40     	; 0x84a <Timebase_LPTimer_Delay_Seconds+0x48>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_LPTimer_Get_Seconds();
	Timebase_Atomic_Operation_End();
  }
}
     872:	1f 91       	pop	r17
     874:	0f 91       	pop	r16
     876:	ff 90       	pop	r15
     878:	ef 90       	pop	r14
     87a:	08 95       	ret

0000087c <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     87c:	e0 91 2e 01 	lds	r30, 0x012E
     880:	f0 91 2f 01 	lds	r31, 0x012F
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	29 e1       	ldi	r18, 0x19	; 25
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	ac 01       	movw	r20, r24
     88c:	42 9f       	mul	r20, r18
     88e:	c0 01       	movw	r24, r0
     890:	43 9f       	mul	r20, r19
     892:	90 0d       	add	r25, r0
     894:	52 9f       	mul	r21, r18
     896:	90 0d       	add	r25, r0
     898:	11 24       	eor	r1, r1
     89a:	e8 0f       	add	r30, r24
     89c:	f9 1f       	adc	r31, r25
     89e:	85 8d       	ldd	r24, Z+29	; 0x1d
     8a0:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     8a2:	8f 70       	andi	r24, 0x0F	; 15
     8a4:	08 95       	ret

000008a6 <Timebase_UpCounter_SS_Set_Status>:


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     8a6:	e0 91 2e 01 	lds	r30, 0x012E
     8aa:	f0 91 2f 01 	lds	r31, 0x012F
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	29 e1       	ldi	r18, 0x19	; 25
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	ac 01       	movw	r20, r24
     8b6:	42 9f       	mul	r20, r18
     8b8:	c0 01       	movw	r24, r0
     8ba:	43 9f       	mul	r20, r19
     8bc:	90 0d       	add	r25, r0
     8be:	52 9f       	mul	r21, r18
     8c0:	90 0d       	add	r25, r0
     8c2:	11 24       	eor	r1, r1
     8c4:	e8 0f       	add	r30, r24
     8c6:	f9 1f       	adc	r31, r25
     8c8:	6f 70       	andi	r22, 0x0F	; 15
     8ca:	66 0f       	add	r22, r22
     8cc:	85 8d       	ldd	r24, Z+29	; 0x1d
     8ce:	81 7e       	andi	r24, 0xE1	; 225
     8d0:	86 2b       	or	r24, r22
     8d2:	85 8f       	std	Z+29, r24	; 0x1d
}
     8d4:	08 95       	ret

000008d6 <Timebase_UpCounter_SS_Get_Value>:


int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     8d6:	e0 91 2e 01 	lds	r30, 0x012E
     8da:	f0 91 2f 01 	lds	r31, 0x012F
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	29 e1       	ldi	r18, 0x19	; 25
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	ac 01       	movw	r20, r24
     8e6:	42 9f       	mul	r20, r18
     8e8:	c0 01       	movw	r24, r0
     8ea:	43 9f       	mul	r20, r19
     8ec:	90 0d       	add	r25, r0
     8ee:	52 9f       	mul	r21, r18
     8f0:	90 0d       	add	r25, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	e8 0f       	add	r30, r24
     8f6:	f9 1f       	adc	r31, r25
     8f8:	df 01       	movw	r26, r30
     8fa:	9e 96       	adiw	r26, 0x2e	; 46
     8fc:	66 a5       	ldd	r22, Z+46	; 0x2e
     8fe:	11 96       	adiw	r26, 0x01	; 1
     900:	7c 91       	ld	r23, X
     902:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     904:	12 96       	adiw	r26, 0x02	; 2
     906:	8c 91       	ld	r24, X
     908:	12 97       	sbiw	r26, 0x02	; 2
     90a:	13 96       	adiw	r26, 0x03	; 3
     90c:	9c 91       	ld	r25, X
     90e:	08 95       	ret

00000910 <Timebase_UpCounter_SS_Set_Value>:


void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     914:	c0 91 2e 01 	lds	r28, 0x012E
     918:	d0 91 2f 01 	lds	r29, 0x012F
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	29 e1       	ldi	r18, 0x19	; 25
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	e2 9f       	mul	r30, r18
     926:	c0 01       	movw	r24, r0
     928:	e3 9f       	mul	r30, r19
     92a:	90 0d       	add	r25, r0
     92c:	f2 9f       	mul	r31, r18
     92e:	90 0d       	add	r25, r0
     930:	11 24       	eor	r1, r1
     932:	c8 0f       	add	r28, r24
     934:	d9 1f       	adc	r29, r25
     936:	ca 01       	movw	r24, r20
     938:	db 01       	movw	r26, r22
     93a:	b7 ff       	sbrs	r27, 7
     93c:	04 c0       	rjmp	.+8      	; 0x946 <Timebase_UpCounter_SS_Set_Value+0x36>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	8e a7       	std	Y+46, r24	; 0x2e
     948:	9f a7       	std	Y+47, r25	; 0x2f
     94a:	a8 ab       	std	Y+48, r26	; 0x30
     94c:	b9 ab       	std	Y+49, r27	; 0x31
}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	08 95       	ret

00000954 <Timebase_UpCounter_SS_Get_EndValueSec>:


int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     954:	e0 91 2e 01 	lds	r30, 0x012E
     958:	f0 91 2f 01 	lds	r31, 0x012F
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	29 e1       	ldi	r18, 0x19	; 25
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	ac 01       	movw	r20, r24
     964:	42 9f       	mul	r20, r18
     966:	c0 01       	movw	r24, r0
     968:	43 9f       	mul	r20, r19
     96a:	90 0d       	add	r25, r0
     96c:	52 9f       	mul	r21, r18
     96e:	90 0d       	add	r25, r0
     970:	11 24       	eor	r1, r1
     972:	e8 0f       	add	r30, r24
     974:	f9 1f       	adc	r31, r25
     976:	df 01       	movw	r26, r30
     978:	5e 96       	adiw	r26, 0x1e	; 30
     97a:	66 8d       	ldd	r22, Z+30	; 0x1e
     97c:	11 96       	adiw	r26, 0x01	; 1
     97e:	7c 91       	ld	r23, X
     980:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     982:	12 96       	adiw	r26, 0x02	; 2
     984:	8c 91       	ld	r24, X
     986:	12 97       	sbiw	r26, 0x02	; 2
     988:	13 96       	adiw	r26, 0x03	; 3
     98a:	9c 91       	ld	r25, X
     98c:	08 95       	ret

0000098e <Timebase_UpCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     98e:	e0 91 2e 01 	lds	r30, 0x012E
     992:	f0 91 2f 01 	lds	r31, 0x012F
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	29 e1       	ldi	r18, 0x19	; 25
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	ac 01       	movw	r20, r24
     99e:	42 9f       	mul	r20, r18
     9a0:	c0 01       	movw	r24, r0
     9a2:	43 9f       	mul	r20, r19
     9a4:	90 0d       	add	r25, r0
     9a6:	52 9f       	mul	r21, r18
     9a8:	90 0d       	add	r25, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	e8 0f       	add	r30, r24
     9ae:	f9 1f       	adc	r31, r25
     9b0:	df 01       	movw	r26, r30
     9b2:	92 96       	adiw	r26, 0x22	; 34
     9b4:	62 a1       	ldd	r22, Z+34	; 0x22
     9b6:	11 96       	adiw	r26, 0x01	; 1
     9b8:	7c 91       	ld	r23, X
     9ba:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     9bc:	12 96       	adiw	r26, 0x02	; 2
     9be:	8c 91       	ld	r24, X
     9c0:	12 97       	sbiw	r26, 0x02	; 2
     9c2:	13 96       	adiw	r26, 0x03	; 3
     9c4:	9c 91       	ld	r25, X
     9c6:	08 95       	ret

000009c8 <Timebase_UpCounter_SS_Set_EndValueSec>:


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     9c8:	e0 91 2e 01 	lds	r30, 0x012E
     9cc:	f0 91 2f 01 	lds	r31, 0x012F
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	29 e1       	ldi	r18, 0x19	; 25
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	dc 01       	movw	r26, r24
     9d8:	a2 9f       	mul	r26, r18
     9da:	c0 01       	movw	r24, r0
     9dc:	a3 9f       	mul	r26, r19
     9de:	90 0d       	add	r25, r0
     9e0:	b2 9f       	mul	r27, r18
     9e2:	90 0d       	add	r25, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	e8 0f       	add	r30, r24
     9e8:	f9 1f       	adc	r31, r25
     9ea:	46 8f       	std	Z+30, r20	; 0x1e
     9ec:	57 8f       	std	Z+31, r21	; 0x1f
     9ee:	60 a3       	std	Z+32, r22	; 0x20
     9f0:	71 a3       	std	Z+33, r23	; 0x21
}
     9f2:	08 95       	ret

000009f4 <Timebase_UpCounter_SS_Set_EndValueSubSec>:


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     9f4:	e0 91 2e 01 	lds	r30, 0x012E
     9f8:	f0 91 2f 01 	lds	r31, 0x012F
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	29 e1       	ldi	r18, 0x19	; 25
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	dc 01       	movw	r26, r24
     a04:	a2 9f       	mul	r26, r18
     a06:	c0 01       	movw	r24, r0
     a08:	a3 9f       	mul	r26, r19
     a0a:	90 0d       	add	r25, r0
     a0c:	b2 9f       	mul	r27, r18
     a0e:	90 0d       	add	r25, r0
     a10:	11 24       	eor	r1, r1
     a12:	e8 0f       	add	r30, r24
     a14:	f9 1f       	adc	r31, r25
     a16:	42 a3       	std	Z+34, r20	; 0x22
     a18:	53 a3       	std	Z+35, r21	; 0x23
     a1a:	64 a3       	std	Z+36, r22	; 0x24
     a1c:	75 a3       	std	Z+37, r23	; 0x25
}
     a1e:	08 95       	ret

00000a20 <Timebase_UpCounter_SS_Get_TargetValue>:


int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     a20:	e0 91 2e 01 	lds	r30, 0x012E
     a24:	f0 91 2f 01 	lds	r31, 0x012F
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	29 e1       	ldi	r18, 0x19	; 25
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	ac 01       	movw	r20, r24
     a30:	42 9f       	mul	r20, r18
     a32:	c0 01       	movw	r24, r0
     a34:	43 9f       	mul	r20, r19
     a36:	90 0d       	add	r25, r0
     a38:	52 9f       	mul	r21, r18
     a3a:	90 0d       	add	r25, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	e8 0f       	add	r30, r24
     a40:	f9 1f       	adc	r31, r25
     a42:	df 01       	movw	r26, r30
     a44:	96 96       	adiw	r26, 0x26	; 38
     a46:	66 a1       	ldd	r22, Z+38	; 0x26
     a48:	11 96       	adiw	r26, 0x01	; 1
     a4a:	7c 91       	ld	r23, X
     a4c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	8c 91       	ld	r24, X
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	13 96       	adiw	r26, 0x03	; 3
     a56:	9c 91       	ld	r25, X
     a58:	08 95       	ret

00000a5a <Timebase_UpCounter_SS_Set_TargetValue>:


void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     a5a:	e0 91 2e 01 	lds	r30, 0x012E
     a5e:	f0 91 2f 01 	lds	r31, 0x012F
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	29 e1       	ldi	r18, 0x19	; 25
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	dc 01       	movw	r26, r24
     a6a:	a2 9f       	mul	r26, r18
     a6c:	c0 01       	movw	r24, r0
     a6e:	a3 9f       	mul	r26, r19
     a70:	90 0d       	add	r25, r0
     a72:	b2 9f       	mul	r27, r18
     a74:	90 0d       	add	r25, r0
     a76:	11 24       	eor	r1, r1
     a78:	e8 0f       	add	r30, r24
     a7a:	f9 1f       	adc	r31, r25
     a7c:	46 a3       	std	Z+38, r20	; 0x26
     a7e:	57 a3       	std	Z+39, r21	; 0x27
     a80:	60 a7       	std	Z+40, r22	; 0x28
     a82:	71 a7       	std	Z+41, r23	; 0x29
}
     a84:	08 95       	ret

00000a86 <Timebase_UpCounter_SS_Get_TemporaryValue>:


int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     a86:	e0 91 2e 01 	lds	r30, 0x012E
     a8a:	f0 91 2f 01 	lds	r31, 0x012F
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	29 e1       	ldi	r18, 0x19	; 25
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	ac 01       	movw	r20, r24
     a96:	42 9f       	mul	r20, r18
     a98:	c0 01       	movw	r24, r0
     a9a:	43 9f       	mul	r20, r19
     a9c:	90 0d       	add	r25, r0
     a9e:	52 9f       	mul	r21, r18
     aa0:	90 0d       	add	r25, r0
     aa2:	11 24       	eor	r1, r1
     aa4:	e8 0f       	add	r30, r24
     aa6:	f9 1f       	adc	r31, r25
     aa8:	df 01       	movw	r26, r30
     aaa:	9a 96       	adiw	r26, 0x2a	; 42
     aac:	62 a5       	ldd	r22, Z+42	; 0x2a
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	7c 91       	ld	r23, X
     ab2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     ab4:	12 96       	adiw	r26, 0x02	; 2
     ab6:	8c 91       	ld	r24, X
     ab8:	12 97       	sbiw	r26, 0x02	; 2
     aba:	13 96       	adiw	r26, 0x03	; 3
     abc:	9c 91       	ld	r25, X
     abe:	08 95       	ret

00000ac0 <Timebase_UpCounter_SS_Set_TemporaryValue>:


void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     ac4:	c0 91 2e 01 	lds	r28, 0x012E
     ac8:	d0 91 2f 01 	lds	r29, 0x012F
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	29 e1       	ldi	r18, 0x19	; 25
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	fc 01       	movw	r30, r24
     ad4:	e2 9f       	mul	r30, r18
     ad6:	c0 01       	movw	r24, r0
     ad8:	e3 9f       	mul	r30, r19
     ada:	90 0d       	add	r25, r0
     adc:	f2 9f       	mul	r31, r18
     ade:	90 0d       	add	r25, r0
     ae0:	11 24       	eor	r1, r1
     ae2:	c8 0f       	add	r28, r24
     ae4:	d9 1f       	adc	r29, r25
     ae6:	ca 01       	movw	r24, r20
     ae8:	db 01       	movw	r26, r22
     aea:	b7 ff       	sbrs	r27, 7
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	8a a7       	std	Y+42, r24	; 0x2a
     af8:	9b a7       	std	Y+43, r25	; 0x2b
     afa:	ac a7       	std	Y+44, r26	; 0x2c
     afc:	bd a7       	std	Y+45, r27	; 0x2d
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <Timebase_UpCounter_SS_Get_PeriodValue>:


int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     b04:	e0 91 2e 01 	lds	r30, 0x012E
     b08:	f0 91 2f 01 	lds	r31, 0x012F
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	29 e1       	ldi	r18, 0x19	; 25
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	ac 01       	movw	r20, r24
     b14:	42 9f       	mul	r20, r18
     b16:	c0 01       	movw	r24, r0
     b18:	43 9f       	mul	r20, r19
     b1a:	90 0d       	add	r25, r0
     b1c:	52 9f       	mul	r21, r18
     b1e:	90 0d       	add	r25, r0
     b20:	11 24       	eor	r1, r1
     b22:	e8 0f       	add	r30, r24
     b24:	f9 1f       	adc	r31, r25
     b26:	df 01       	movw	r26, r30
     b28:	d2 96       	adiw	r26, 0x32	; 50
     b2a:	62 a9       	ldd	r22, Z+50	; 0x32
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	7c 91       	ld	r23, X
     b30:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     b32:	12 96       	adiw	r26, 0x02	; 2
     b34:	8c 91       	ld	r24, X
     b36:	12 97       	sbiw	r26, 0x02	; 2
     b38:	13 96       	adiw	r26, 0x03	; 3
     b3a:	9c 91       	ld	r25, X
     b3c:	08 95       	ret

00000b3e <Timebase_UpCounter_SS_Set_PeriodValue>:


void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     b3e:	e0 91 2e 01 	lds	r30, 0x012E
     b42:	f0 91 2f 01 	lds	r31, 0x012F
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	29 e1       	ldi	r18, 0x19	; 25
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	dc 01       	movw	r26, r24
     b4e:	a2 9f       	mul	r26, r18
     b50:	c0 01       	movw	r24, r0
     b52:	a3 9f       	mul	r26, r19
     b54:	90 0d       	add	r25, r0
     b56:	b2 9f       	mul	r27, r18
     b58:	90 0d       	add	r25, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	e8 0f       	add	r30, r24
     b5e:	f9 1f       	adc	r31, r25
     b60:	42 ab       	std	Z+50, r20	; 0x32
     b62:	53 ab       	std	Z+51, r21	; 0x33
     b64:	64 ab       	std	Z+52, r22	; 0x34
     b66:	75 ab       	std	Z+53, r23	; 0x35
}
     b68:	08 95       	ret

00000b6a <Timebase_UpCounter_SS_Get_Period_Flag>:


uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     b6a:	e0 91 2e 01 	lds	r30, 0x012E
     b6e:	f0 91 2f 01 	lds	r31, 0x012F
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	29 e1       	ldi	r18, 0x19	; 25
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	ac 01       	movw	r20, r24
     b7a:	42 9f       	mul	r20, r18
     b7c:	c0 01       	movw	r24, r0
     b7e:	43 9f       	mul	r20, r19
     b80:	90 0d       	add	r25, r0
     b82:	52 9f       	mul	r21, r18
     b84:	90 0d       	add	r25, r0
     b86:	11 24       	eor	r1, r1
     b88:	e8 0f       	add	r30, r24
     b8a:	f9 1f       	adc	r31, r25
     b8c:	85 8d       	ldd	r24, Z+29	; 0x1d
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     b8e:	81 70       	andi	r24, 0x01	; 1
     b90:	08 95       	ret

00000b92 <Timebase_UpCounter_SS_Set_Period_Flag>:


void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     b92:	e0 91 2e 01 	lds	r30, 0x012E
     b96:	f0 91 2f 01 	lds	r31, 0x012F
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	29 e1       	ldi	r18, 0x19	; 25
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	ac 01       	movw	r20, r24
     ba2:	42 9f       	mul	r20, r18
     ba4:	c0 01       	movw	r24, r0
     ba6:	43 9f       	mul	r20, r19
     ba8:	90 0d       	add	r25, r0
     baa:	52 9f       	mul	r21, r18
     bac:	90 0d       	add	r25, r0
     bae:	11 24       	eor	r1, r1
     bb0:	e8 0f       	add	r30, r24
     bb2:	f9 1f       	adc	r31, r25
     bb4:	85 8d       	ldd	r24, Z+29	; 0x1d
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	85 8f       	std	Z+29, r24	; 0x1d
}
     bba:	08 95       	ret

00000bbc <Timebase_UpCounter_SS_Clear_Period_Flag>:


void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     bbc:	e0 91 2e 01 	lds	r30, 0x012E
     bc0:	f0 91 2f 01 	lds	r31, 0x012F
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	29 e1       	ldi	r18, 0x19	; 25
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	ac 01       	movw	r20, r24
     bcc:	42 9f       	mul	r20, r18
     bce:	c0 01       	movw	r24, r0
     bd0:	43 9f       	mul	r20, r19
     bd2:	90 0d       	add	r25, r0
     bd4:	52 9f       	mul	r21, r18
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	85 8d       	ldd	r24, Z+29	; 0x1d
     be0:	8e 7f       	andi	r24, 0xFE	; 254
     be2:	85 8f       	std	Z+29, r24	; 0x1d
}
     be4:	08 95       	ret

00000be6 <Timebase_UpCounter_SS_Reset>:
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     be6:	e0 91 2e 01 	lds	r30, 0x012E
     bea:	f0 91 2f 01 	lds	r31, 0x012F
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	29 e1       	ldi	r18, 0x19	; 25
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	ac 01       	movw	r20, r24
     bf6:	42 9f       	mul	r20, r18
     bf8:	c0 01       	movw	r24, r0
     bfa:	43 9f       	mul	r20, r19
     bfc:	90 0d       	add	r25, r0
     bfe:	52 9f       	mul	r21, r18
     c00:	90 0d       	add	r25, r0
     c02:	11 24       	eor	r1, r1
     c04:	e8 0f       	add	r30, r24
     c06:	f9 1f       	adc	r31, r25
     c08:	85 8d       	ldd	r24, Z+29	; 0x1d

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     c0a:	16 a6       	std	Z+46, r1	; 0x2e
     c0c:	17 a6       	std	Z+47, r1	; 0x2f
     c0e:	10 aa       	std	Z+48, r1	; 0x30
     c10:	11 aa       	std	Z+49, r1	; 0x31
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     c12:	16 8e       	std	Z+30, r1	; 0x1e
     c14:	17 8e       	std	Z+31, r1	; 0x1f
     c16:	10 a2       	std	Z+32, r1	; 0x20
     c18:	11 a2       	std	Z+33, r1	; 0x21
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     c1a:	12 a2       	std	Z+34, r1	; 0x22
     c1c:	13 a2       	std	Z+35, r1	; 0x23
     c1e:	14 a2       	std	Z+36, r1	; 0x24
     c20:	15 a2       	std	Z+37, r1	; 0x25
  return Timebase->UpCounterSS[window].Target;
}


void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     c22:	16 a2       	std	Z+38, r1	; 0x26
     c24:	17 a2       	std	Z+39, r1	; 0x27
     c26:	10 a6       	std	Z+40, r1	; 0x28
     c28:	11 a6       	std	Z+41, r1	; 0x29

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     c2a:	12 a6       	std	Z+42, r1	; 0x2a
     c2c:	13 a6       	std	Z+43, r1	; 0x2b
     c2e:	14 a6       	std	Z+44, r1	; 0x2c
     c30:	15 a6       	std	Z+45, r1	; 0x2d
  return Timebase->UpCounterSS[window].PeriodValue;
}


void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     c32:	12 aa       	std	Z+50, r1	; 0x32
     c34:	13 aa       	std	Z+51, r1	; 0x33
     c36:	14 aa       	std	Z+52, r1	; 0x34
     c38:	15 aa       	std	Z+53, r1	; 0x35
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     c3a:	80 7e       	andi	r24, 0xE0	; 224
     c3c:	85 8f       	std	Z+29, r24	; 0x1d
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
     c3e:	08 95       	ret

00000c40 <Timebase_UpCounter_SS_Clear_All_Flags>:


void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     c40:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Timebase_UpCounter_SS_Reset>
}
     c44:	08 95       	ret

00000c46 <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     c46:	e0 91 2e 01 	lds	r30, 0x012E
     c4a:	f0 91 2f 01 	lds	r31, 0x012F
     c4e:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_UpCounter_SS_Reset( window );
}


void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     c50:	29 e1       	ldi	r18, 0x19	; 25
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	ac 01       	movw	r20, r24
     c56:	42 9f       	mul	r20, r18
     c58:	c0 01       	movw	r24, r0
     c5a:	43 9f       	mul	r20, r19
     c5c:	90 0d       	add	r25, r0
     c5e:	52 9f       	mul	r21, r18
     c60:	90 0d       	add	r25, r0
     c62:	11 24       	eor	r1, r1
     c64:	e8 0f       	add	r30, r24
     c66:	f9 1f       	adc	r31, r25
     c68:	95 8d       	ldd	r25, Z+29	; 0x1d
     c6a:	89 2f       	mov	r24, r25
     c6c:	86 95       	lsr	r24
     c6e:	8f 70       	andi	r24, 0x0F	; 15
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	19 f0       	breq	.+6      	; 0xc7a <Timebase_UpCounter_SS_Start+0x34>
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     c74:	91 7e       	andi	r25, 0xE1	; 225
     c76:	92 60       	ori	r25, 0x02	; 2
     c78:	95 8f       	std	Z+29, r25	; 0x1d
     c7a:	08 95       	ret

00000c7c <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     c7c:	e0 91 2e 01 	lds	r30, 0x012E
     c80:	f0 91 2f 01 	lds	r31, 0x012F
     c84:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     c86:	29 e1       	ldi	r18, 0x19	; 25
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	ac 01       	movw	r20, r24
     c8c:	42 9f       	mul	r20, r18
     c8e:	c0 01       	movw	r24, r0
     c90:	43 9f       	mul	r20, r19
     c92:	90 0d       	add	r25, r0
     c94:	52 9f       	mul	r21, r18
     c96:	90 0d       	add	r25, r0
     c98:	11 24       	eor	r1, r1
     c9a:	e8 0f       	add	r30, r24
     c9c:	f9 1f       	adc	r31, r25
     c9e:	95 8d       	ldd	r25, Z+29	; 0x1d
     ca0:	89 2f       	mov	r24, r25
     ca2:	86 95       	lsr	r24
     ca4:	8f 70       	andi	r24, 0x0F	; 15
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	19 f0       	breq	.+6      	; 0xcb0 <Timebase_UpCounter_SS_Stop+0x34>
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     caa:	91 7e       	andi	r25, 0xE1	; 225
     cac:	94 60       	ori	r25, 0x04	; 4
     cae:	95 8f       	std	Z+29, r25	; 0x1d
     cb0:	08 95       	ret

00000cb2 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
     cb2:	2f 92       	push	r2
     cb4:	3f 92       	push	r3
     cb6:	4f 92       	push	r4
     cb8:	5f 92       	push	r5
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	df 93       	push	r29
     cd4:	cf 93       	push	r28
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <Timebase_UpCounter_SS_Set_Securely+0x26>
     cd8:	00 d0       	rcall	.+0      	; 0xcda <Timebase_UpCounter_SS_Set_Securely+0x28>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	4a 01       	movw	r8, r20
     ce0:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     ce2:	20 91 2e 01 	lds	r18, 0x012E
     ce6:	30 91 2f 01 	lds	r19, 0x012F
     cea:	3c 83       	std	Y+4, r19	; 0x04
     cec:	2b 83       	std	Y+3, r18	; 0x03
     cee:	a8 2f       	mov	r26, r24
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ba 83       	std	Y+2, r27	; 0x02
     cf4:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     cf6:	89 e1       	ldi	r24, 0x19	; 25
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	a8 9f       	mul	r26, r24
     cfc:	f0 01       	movw	r30, r0
     cfe:	a9 9f       	mul	r26, r25
     d00:	f0 0d       	add	r31, r0
     d02:	b8 9f       	mul	r27, r24
     d04:	f0 0d       	add	r31, r0
     d06:	11 24       	eor	r1, r1
     d08:	e2 0f       	add	r30, r18
     d0a:	f3 1f       	adc	r31, r19
     d0c:	85 8d       	ldd	r24, Z+29	; 0x1d
     d0e:	86 95       	lsr	r24
     d10:	8f 70       	andi	r24, 0x0F	; 15
     d12:	09 f0       	breq	.+2      	; 0xd16 <Timebase_UpCounter_SS_Set_Securely+0x64>
     d14:	73 c0       	rjmp	.+230    	; 0xdfc <Timebase_UpCounter_SS_Set_Securely+0x14a>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     d16:	16 a6       	std	Z+46, r1	; 0x2e
     d18:	17 a6       	std	Z+47, r1	; 0x2f
     d1a:	10 aa       	std	Z+48, r1	; 0x30
     d1c:	11 aa       	std	Z+49, r1	; 0x31

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     d1e:	12 a6       	std	Z+42, r1	; 0x2a
     d20:	13 a6       	std	Z+43, r1	; 0x2b
     d22:	14 a6       	std	Z+44, r1	; 0x2c
     d24:	15 a6       	std	Z+45, r1	; 0x2d
  return Timebase->UpCounterSS[window].Target;
}


void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     d26:	46 a3       	std	Z+38, r20	; 0x26
     d28:	57 a3       	std	Z+39, r21	; 0x27
     d2a:	60 a7       	std	Z+40, r22	; 0x28
     d2c:	71 a7       	std	Z+41, r23	; 0x29
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     d2e:	f9 01       	movw	r30, r18
     d30:	c1 84       	ldd	r12, Z+9	; 0x09
     d32:	d2 84       	ldd	r13, Z+10	; 0x0a
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     d34:	23 84       	ldd	r2, Z+11	; 0x0b
     d36:	34 84       	ldd	r3, Z+12	; 0x0c
     d38:	45 84       	ldd	r4, Z+13	; 0x0d
     d3a:	56 84       	ldd	r5, Z+14	; 0x0e
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	subsec_val = value % Timebase->Config.UpdateRate;
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	c5 01       	movw	r24, r10
     d46:	b4 01       	movw	r22, r8
     d48:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
     d4c:	7b 01       	movw	r14, r22
     d4e:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	2d 91       	ld	r18, X+
     d56:	3c 91       	ld	r19, X
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	c5 01       	movw	r24, r10
     d5e:	b4 01       	movw	r22, r8
     d60:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
     d64:	c9 01       	movw	r24, r18
     d66:	da 01       	movw	r26, r20
     d68:	3c 01       	movw	r6, r24
     d6a:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
     d6c:	56 01       	movw	r10, r12
     d6e:	cc 24       	eor	r12, r12
     d70:	dd 24       	eor	r13, r13
     d72:	ae 0c       	add	r10, r14
     d74:	bf 1c       	adc	r11, r15
     d76:	c0 1e       	adc	r12, r16
     d78:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     d7a:	eb 81       	ldd	r30, Y+3	; 0x03
     d7c:	fc 81       	ldd	r31, Y+4	; 0x04
     d7e:	80 81       	ld	r24, Z
     d80:	91 81       	ldd	r25, Z+1	; 0x01
     d82:	a0 e0       	ldi	r26, 0x00	; 0
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	a8 16       	cp	r10, r24
     d88:	b9 06       	cpc	r11, r25
     d8a:	ca 06       	cpc	r12, r26
     d8c:	db 06       	cpc	r13, r27
     d8e:	94 f0       	brlt	.+36     	; 0xdb4 <Timebase_UpCounter_SS_Set_Securely+0x102>
	  sec_val += 1;
     d90:	08 94       	sec
     d92:	61 1c       	adc	r6, r1
     d94:	71 1c       	adc	r7, r1
     d96:	81 1c       	adc	r8, r1
     d98:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     d9a:	20 81       	ld	r18, Z
     d9c:	31 81       	ldd	r19, Z+1	; 0x01
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	c6 01       	movw	r24, r12
     da4:	b5 01       	movw	r22, r10
     da6:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
     daa:	ac 01       	movw	r20, r24
     dac:	cb 01       	movw	r24, r22
     dae:	da 01       	movw	r26, r20
     db0:	5c 01       	movw	r10, r24
     db2:	6d 01       	movw	r12, r26
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     db4:	89 e1       	ldi	r24, 0x19	; 25
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	29 81       	ldd	r18, Y+1	; 0x01
     dba:	3a 81       	ldd	r19, Y+2	; 0x02
     dbc:	28 9f       	mul	r18, r24
     dbe:	f0 01       	movw	r30, r0
     dc0:	29 9f       	mul	r18, r25
     dc2:	f0 0d       	add	r31, r0
     dc4:	38 9f       	mul	r19, r24
     dc6:	f0 0d       	add	r31, r0
     dc8:	11 24       	eor	r1, r1
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	e8 0f       	add	r30, r24
     dd0:	f9 1f       	adc	r31, r25
     dd2:	26 0c       	add	r2, r6
     dd4:	37 1c       	adc	r3, r7
     dd6:	48 1c       	adc	r4, r8
     dd8:	59 1c       	adc	r5, r9
     dda:	26 8e       	std	Z+30, r2	; 0x1e
     ddc:	37 8e       	std	Z+31, r3	; 0x1f
     dde:	40 a2       	std	Z+32, r4	; 0x20
     de0:	51 a2       	std	Z+33, r5	; 0x21
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     de2:	a2 a2       	std	Z+34, r10	; 0x22
     de4:	b3 a2       	std	Z+35, r11	; 0x23
     de6:	c4 a2       	std	Z+36, r12	; 0x24
     de8:	d5 a2       	std	Z+37, r13	; 0x25
  Timebase_UpCounter_SS_Reset( window );
}


void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     dea:	95 8d       	ldd	r25, Z+29	; 0x1d
     dec:	89 2f       	mov	r24, r25
     dee:	86 95       	lsr	r24
     df0:	8f 70       	andi	r24, 0x0F	; 15
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	19 f0       	breq	.+6      	; 0xdfc <Timebase_UpCounter_SS_Set_Securely+0x14a>
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     df6:	91 7e       	andi	r25, 0xE1	; 225
     df8:	92 60       	ori	r25, 0x02	; 2
     dfa:	95 8f       	std	Z+29, r25	; 0x1d
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	af 90       	pop	r10
     e18:	9f 90       	pop	r9
     e1a:	8f 90       	pop	r8
     e1c:	7f 90       	pop	r7
     e1e:	6f 90       	pop	r6
     e20:	5f 90       	pop	r5
     e22:	4f 90       	pop	r4
     e24:	3f 90       	pop	r3
     e26:	2f 90       	pop	r2
     e28:	08 95       	ret

00000e2a <Timebase_UpCounter_SS_Set_Forcefully>:


void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	d8 2e       	mov	r13, r24
     e36:	7a 01       	movw	r14, r20
     e38:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
     e3a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
     e3e:	8d 2d       	mov	r24, r13
     e40:	b8 01       	movw	r22, r16
     e42:	a7 01       	movw	r20, r14
     e44:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Timebase_UpCounter_SS_Set_Securely>
} 
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	ff 90       	pop	r15
     e4e:	ef 90       	pop	r14
     e50:	df 90       	pop	r13
     e52:	08 95       	ret

00000e54 <Timebase_UpCounter_SS_Update>:


void Timebase_UpCounter_SS_Update(uint8_t window){
     e54:	2f 92       	push	r2
     e56:	3f 92       	push	r3
     e58:	4f 92       	push	r4
     e5a:	5f 92       	push	r5
     e5c:	6f 92       	push	r6
     e5e:	7f 92       	push	r7
     e60:	8f 92       	push	r8
     e62:	9f 92       	push	r9
     e64:	af 92       	push	r10
     e66:	bf 92       	push	r11
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	00 d0       	rcall	.+0      	; 0xe7a <Timebase_UpCounter_SS_Update+0x26>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <Timebase_UpCounter_SS_Update+0x28>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <Timebase_UpCounter_SS_Update+0x2a>
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     e82:	20 90 2e 01 	lds	r2, 0x012E
     e86:	30 90 2f 01 	lds	r3, 0x012F
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	3e 83       	std	Y+6, r19	; 0x06
     e90:	2d 83       	std	Y+5, r18	; 0x05
     e92:	89 e1       	ldi	r24, 0x19	; 25
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	28 9f       	mul	r18, r24
     e98:	50 01       	movw	r10, r0
     e9a:	29 9f       	mul	r18, r25
     e9c:	b0 0c       	add	r11, r0
     e9e:	38 9f       	mul	r19, r24
     ea0:	b0 0c       	add	r11, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	a2 0c       	add	r10, r2
     ea6:	b3 1c       	adc	r11, r3
     ea8:	d5 01       	movw	r26, r10
     eaa:	5d 96       	adiw	r26, 0x1d	; 29
     eac:	8c 91       	ld	r24, X
     eae:	86 95       	lsr	r24
     eb0:	8f 70       	andi	r24, 0x0F	; 15
} 


void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <Timebase_UpCounter_SS_Update+0x64>
     eb6:	9f c0       	rjmp	.+318    	; 0xff6 <Timebase_UpCounter_SS_Update+0x1a2>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     eb8:	f1 01       	movw	r30, r2
     eba:	83 85       	ldd	r24, Z+11	; 0x0b
     ebc:	94 85       	ldd	r25, Z+12	; 0x0c
     ebe:	a5 85       	ldd	r26, Z+13	; 0x0d
     ec0:	b6 85       	ldd	r27, Z+14	; 0x0e
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     ec2:	e1 84       	ldd	r14, Z+9	; 0x09
     ec4:	f2 84       	ldd	r15, Z+10	; 0x0a

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
     eca:	f5 01       	movw	r30, r10
     ecc:	26 8d       	ldd	r18, Z+30	; 0x1e
     ece:	37 8d       	ldd	r19, Z+31	; 0x1f
     ed0:	40 a1       	ldd	r20, Z+32	; 0x20
     ed2:	51 a1       	ldd	r21, Z+33	; 0x21
     ed4:	28 1b       	sub	r18, r24
     ed6:	39 0b       	sbc	r19, r25
     ed8:	4a 0b       	sbc	r20, r26
     eda:	5b 0b       	sbc	r21, r27
	curr_s *= Timebase->Config.UpdateRate;
     edc:	d1 01       	movw	r26, r2
     ede:	6d 91       	ld	r22, X+
     ee0:	7c 91       	ld	r23, X
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 84 1c 	call	0x3908	; 0x3908 <__mulsi3>
     eea:	9b 01       	movw	r18, r22
     eec:	ac 01       	movw	r20, r24
     eee:	2e 19       	sub	r18, r14
     ef0:	3f 09       	sbc	r19, r15
     ef2:	40 0b       	sbc	r20, r16
     ef4:	51 0b       	sbc	r21, r17
	curr_ss += curr_s;
     ef6:	f5 01       	movw	r30, r10
     ef8:	82 a1       	ldd	r24, Z+34	; 0x22
     efa:	93 a1       	ldd	r25, Z+35	; 0x23
     efc:	a4 a1       	ldd	r26, Z+36	; 0x24
     efe:	b5 a1       	ldd	r27, Z+37	; 0x25
     f00:	28 0f       	add	r18, r24
     f02:	39 1f       	adc	r19, r25
     f04:	4a 1f       	adc	r20, r26
     f06:	5b 1f       	adc	r21, r27
     f08:	57 ff       	sbrs	r21, 7
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <Timebase_UpCounter_SS_Update+0xc0>
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     f14:	89 e1       	ldi	r24, 0x19	; 25
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	6d 81       	ldd	r22, Y+5	; 0x05
     f1a:	7e 81       	ldd	r23, Y+6	; 0x06
     f1c:	68 9f       	mul	r22, r24
     f1e:	f0 01       	movw	r30, r0
     f20:	69 9f       	mul	r22, r25
     f22:	f0 0d       	add	r31, r0
     f24:	78 9f       	mul	r23, r24
     f26:	f0 0d       	add	r31, r0
     f28:	11 24       	eor	r1, r1
     f2a:	e2 0d       	add	r30, r2
     f2c:	f3 1d       	adc	r31, r3
     f2e:	22 a7       	std	Z+42, r18	; 0x2a
     f30:	33 a7       	std	Z+43, r19	; 0x2b
     f32:	44 a7       	std	Z+44, r20	; 0x2c
     f34:	55 a7       	std	Z+45, r21	; 0x2d
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
     f36:	86 a1       	ldd	r24, Z+38	; 0x26
     f38:	97 a1       	ldd	r25, Z+39	; 0x27
     f3a:	a0 a5       	ldd	r26, Z+40	; 0x28
     f3c:	b1 a5       	ldd	r27, Z+41	; 0x29

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     f3e:	82 1b       	sub	r24, r18
     f40:	93 0b       	sbc	r25, r19
     f42:	a4 0b       	sbc	r26, r20
     f44:	b5 0b       	sbc	r27, r21
     f46:	b7 ff       	sbrs	r27, 7
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <Timebase_UpCounter_SS_Update+0xfe>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	a0 e0       	ldi	r26, 0x00	; 0
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	86 a7       	std	Z+46, r24	; 0x2e
     f54:	97 a7       	std	Z+47, r25	; 0x2f
     f56:	a0 ab       	std	Z+48, r26	; 0x30
     f58:	b1 ab       	std	Z+49, r27	; 0x31
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
     f5a:	89 e1       	ldi	r24, 0x19	; 25
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	ad 81       	ldd	r26, Y+5	; 0x05
     f60:	be 81       	ldd	r27, Y+6	; 0x06
     f62:	a8 9f       	mul	r26, r24
     f64:	b0 01       	movw	r22, r0
     f66:	a9 9f       	mul	r26, r25
     f68:	70 0d       	add	r23, r0
     f6a:	b8 9f       	mul	r27, r24
     f6c:	70 0d       	add	r23, r0
     f6e:	11 24       	eor	r1, r1
     f70:	62 0d       	add	r22, r2
     f72:	73 1d       	adc	r23, r3
     f74:	fb 01       	movw	r30, r22
     f76:	82 a5       	ldd	r24, Z+42	; 0x2a
     f78:	93 a5       	ldd	r25, Z+43	; 0x2b
     f7a:	a4 a5       	ldd	r26, Z+44	; 0x2c
     f7c:	b5 a5       	ldd	r27, Z+45	; 0x2d
     f7e:	18 16       	cp	r1, r24
     f80:	19 06       	cpc	r1, r25
     f82:	1a 06       	cpc	r1, r26
     f84:	1b 06       	cpc	r1, r27
     f86:	0c f4       	brge	.+2      	; 0xf8a <Timebase_UpCounter_SS_Update+0x136>
     f88:	c2 c0       	rjmp	.+388    	; 0x110e <Timebase_UpCounter_SS_Update+0x2ba>
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     f8a:	db 01       	movw	r26, r22
     f8c:	5e 96       	adiw	r26, 0x1e	; 30
     f8e:	1d 92       	st	X+, r1
     f90:	1d 92       	st	X+, r1
     f92:	1d 92       	st	X+, r1
     f94:	1c 92       	st	X, r1
     f96:	91 97       	sbiw	r26, 0x21	; 33
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     f98:	12 a2       	std	Z+34, r1	; 0x22
     f9a:	13 a2       	std	Z+35, r1	; 0x23
     f9c:	14 a2       	std	Z+36, r1	; 0x24
     f9e:	15 a2       	std	Z+37, r1	; 0x25

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     fa0:	9a 96       	adiw	r26, 0x2a	; 42
     fa2:	1d 92       	st	X+, r1
     fa4:	1d 92       	st	X+, r1
     fa6:	1d 92       	st	X+, r1
     fa8:	1c 92       	st	X, r1
     faa:	9d 97       	sbiw	r26, 0x2d	; 45
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}


int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
     fac:	b6 96       	adiw	r30, 0x26	; 38

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     fae:	96 96       	adiw	r26, 0x26	; 38
     fb0:	2c 91       	ld	r18, X
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	42 81       	ldd	r20, Z+2	; 0x02
     fb6:	53 81       	ldd	r21, Z+3	; 0x03
     fb8:	c9 01       	movw	r24, r18
     fba:	da 01       	movw	r26, r20
     fbc:	b7 ff       	sbrs	r27, 7
     fbe:	04 c0       	rjmp	.+8      	; 0xfc8 <Timebase_UpCounter_SS_Update+0x174>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e0       	ldi	r26, 0x00	; 0
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	fb 01       	movw	r30, r22
     fca:	86 a7       	std	Z+46, r24	; 0x2e
     fcc:	97 a7       	std	Z+47, r25	; 0x2f
     fce:	a0 ab       	std	Z+48, r26	; 0x30
     fd0:	b1 ab       	std	Z+49, r27	; 0x31
  return Timebase->UpCounterSS[window].Status.Value;
}


void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     fd2:	89 e1       	ldi	r24, 0x19	; 25
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	2d 81       	ldd	r18, Y+5	; 0x05
     fd8:	3e 81       	ldd	r19, Y+6	; 0x06
     fda:	28 9f       	mul	r18, r24
     fdc:	f0 01       	movw	r30, r0
     fde:	29 9f       	mul	r18, r25
     fe0:	f0 0d       	add	r31, r0
     fe2:	38 9f       	mul	r19, r24
     fe4:	f0 0d       	add	r31, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	e2 0d       	add	r30, r2
     fea:	f3 1d       	adc	r31, r3
     fec:	85 8d       	ldd	r24, Z+29	; 0x1d
     fee:	81 7e       	andi	r24, 0xE1	; 225
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	85 8f       	std	Z+29, r24	; 0x1d
     ff4:	8c c0       	rjmp	.+280    	; 0x110e <Timebase_UpCounter_SS_Update+0x2ba>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	09 f0       	breq	.+2      	; 0xffc <Timebase_UpCounter_SS_Update+0x1a8>
     ffa:	89 c0       	rjmp	.+274    	; 0x110e <Timebase_UpCounter_SS_Update+0x2ba>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ffc:	d1 01       	movw	r26, r2
     ffe:	1b 96       	adiw	r26, 0x0b	; 11
    1000:	6d 91       	ld	r22, X+
    1002:	7d 91       	ld	r23, X+
    1004:	8d 91       	ld	r24, X+
    1006:	9c 91       	ld	r25, X
    1008:	1e 97       	sbiw	r26, 0x0e	; 14
    100a:	69 83       	std	Y+1, r22	; 0x01
    100c:	7a 83       	std	Y+2, r23	; 0x02
    100e:	8b 83       	std	Y+3, r24	; 0x03
    1010:	9c 83       	std	Y+4, r25	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1012:	19 96       	adiw	r26, 0x09	; 9
    1014:	8d 90       	ld	r8, X+
    1016:	9c 90       	ld	r9, X
    1018:	1a 97       	sbiw	r26, 0x0a	; 10
  Timebase->UpCounterSS[window].Target = value;
}


int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
    101a:	f5 01       	movw	r30, r10
    101c:	a2 a4       	ldd	r10, Z+42	; 0x2a
    101e:	b3 a4       	ldd	r11, Z+43	; 0x2b
    1020:	c4 a4       	ldd	r12, Z+44	; 0x2c
    1022:	d5 a4       	ldd	r13, Z+45	; 0x2d
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	value      = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	subsec_val = value % Timebase->Config.UpdateRate;
    1024:	2d 91       	ld	r18, X+
    1026:	3c 91       	ld	r19, X
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	c6 01       	movw	r24, r12
    102e:	b5 01       	movw	r22, r10
    1030:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    1034:	7b 01       	movw	r14, r22
    1036:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
    1038:	d1 01       	movw	r26, r2
    103a:	2d 91       	ld	r18, X+
    103c:	3c 91       	ld	r19, X
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	c6 01       	movw	r24, r12
    1044:	b5 01       	movw	r22, r10
    1046:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    104a:	c9 01       	movw	r24, r18
    104c:	da 01       	movw	r26, r20
    104e:	2c 01       	movw	r4, r24
    1050:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
    1052:	aa 24       	eor	r10, r10
    1054:	bb 24       	eor	r11, r11
    1056:	8e 0c       	add	r8, r14
    1058:	9f 1c       	adc	r9, r15
    105a:	a0 1e       	adc	r10, r16
    105c:	b1 1e       	adc	r11, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    105e:	f1 01       	movw	r30, r2
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	88 16       	cp	r8, r24
    106a:	99 06       	cpc	r9, r25
    106c:	aa 06       	cpc	r10, r26
    106e:	bb 06       	cpc	r11, r27
    1070:	94 f0       	brlt	.+36     	; 0x1096 <Timebase_UpCounter_SS_Update+0x242>
	  sec_val += 1;
    1072:	08 94       	sec
    1074:	41 1c       	adc	r4, r1
    1076:	51 1c       	adc	r5, r1
    1078:	61 1c       	adc	r6, r1
    107a:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	c5 01       	movw	r24, r10
    1086:	b4 01       	movw	r22, r8
    1088:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    108c:	ac 01       	movw	r20, r24
    108e:	cb 01       	movw	r24, r22
    1090:	da 01       	movw	r26, r20
    1092:	4c 01       	movw	r8, r24
    1094:	5d 01       	movw	r10, r26
  return Timebase->UpCounterSS[window].EndValueSubSec;
}


void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
    1096:	89 e1       	ldi	r24, 0x19	; 25
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	2d 81       	ldd	r18, Y+5	; 0x05
    109c:	3e 81       	ldd	r19, Y+6	; 0x06
    109e:	28 9f       	mul	r18, r24
    10a0:	b0 01       	movw	r22, r0
    10a2:	29 9f       	mul	r18, r25
    10a4:	70 0d       	add	r23, r0
    10a6:	38 9f       	mul	r19, r24
    10a8:	70 0d       	add	r23, r0
    10aa:	11 24       	eor	r1, r1
    10ac:	62 0d       	add	r22, r2
    10ae:	73 1d       	adc	r23, r3
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	ab 81       	ldd	r26, Y+3	; 0x03
    10b6:	bc 81       	ldd	r27, Y+4	; 0x04
    10b8:	84 0d       	add	r24, r4
    10ba:	95 1d       	adc	r25, r5
    10bc:	a6 1d       	adc	r26, r6
    10be:	b7 1d       	adc	r27, r7
    10c0:	fb 01       	movw	r30, r22
    10c2:	86 8f       	std	Z+30, r24	; 0x1e
    10c4:	97 8f       	std	Z+31, r25	; 0x1f
    10c6:	a0 a3       	std	Z+32, r26	; 0x20
    10c8:	b1 a3       	std	Z+33, r27	; 0x21
}


void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
    10ca:	db 01       	movw	r26, r22
    10cc:	92 96       	adiw	r26, 0x22	; 34
    10ce:	8d 92       	st	X+, r8
    10d0:	9d 92       	st	X+, r9
    10d2:	ad 92       	st	X+, r10
    10d4:	bc 92       	st	X, r11
    10d6:	95 97       	sbiw	r26, 0x25	; 37
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
    10d8:	96 96       	adiw	r26, 0x26	; 38
    10da:	2d 91       	ld	r18, X+
    10dc:	3d 91       	ld	r19, X+
    10de:	4d 91       	ld	r20, X+
    10e0:	5c 91       	ld	r21, X
    10e2:	99 97       	sbiw	r26, 0x29	; 41
    10e4:	9a 96       	adiw	r26, 0x2a	; 42
    10e6:	8d 91       	ld	r24, X+
    10e8:	9d 91       	ld	r25, X+
    10ea:	0d 90       	ld	r0, X+
    10ec:	bc 91       	ld	r27, X
    10ee:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
    10f0:	28 1b       	sub	r18, r24
    10f2:	39 0b       	sbc	r19, r25
    10f4:	4a 0b       	sbc	r20, r26
    10f6:	5b 0b       	sbc	r21, r27
    10f8:	57 ff       	sbrs	r21, 7
    10fa:	04 c0       	rjmp	.+8      	; 0x1104 <Timebase_UpCounter_SS_Update+0x2b0>
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	fb 01       	movw	r30, r22
    1106:	26 a7       	std	Z+46, r18	; 0x2e
    1108:	37 a7       	std	Z+47, r19	; 0x2f
    110a:	40 ab       	std	Z+48, r20	; 0x30
    110c:	51 ab       	std	Z+49, r21	; 0x31
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
    110e:	26 96       	adiw	r28, 0x06	; 6
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	9f 90       	pop	r9
    1130:	8f 90       	pop	r8
    1132:	7f 90       	pop	r7
    1134:	6f 90       	pop	r6
    1136:	5f 90       	pop	r5
    1138:	4f 90       	pop	r4
    113a:	3f 90       	pop	r3
    113c:	2f 90       	pop	r2
    113e:	08 95       	ret

00001140 <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	e0 91 2e 01 	lds	r30, 0x012E
    1146:	f0 91 2f 01 	lds	r31, 0x012F
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	29 e1       	ldi	r18, 0x19	; 25
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	bc 01       	movw	r22, r24
    1152:	62 9f       	mul	r22, r18
    1154:	c0 01       	movw	r24, r0
    1156:	63 9f       	mul	r22, r19
    1158:	90 0d       	add	r25, r0
    115a:	72 9f       	mul	r23, r18
    115c:	90 0d       	add	r25, r0
    115e:	11 24       	eor	r1, r1
    1160:	e8 0f       	add	r30, r24
    1162:	f9 1f       	adc	r31, r25
    1164:	85 8d       	ldd	r24, Z+29	; 0x1d
    1166:	86 95       	lsr	r24
    1168:	8f 70       	andi	r24, 0x0F	; 15
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	09 f4       	brne	.+2      	; 0x1170 <Timebase_UpCounter_SS_Expired+0x30>
    116e:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1170:	84 2f       	mov	r24, r20
    1172:	08 95       	ret

00001174 <Timebase_UpCounter_SS_Expired_Event>:


uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
    1174:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1176:	e0 91 2e 01 	lds	r30, 0x012E
    117a:	f0 91 2f 01 	lds	r31, 0x012F
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	89 e1       	ldi	r24, 0x19	; 25
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	bc 01       	movw	r22, r24
    1188:	26 9f       	mul	r18, r22
    118a:	c0 01       	movw	r24, r0
    118c:	27 9f       	mul	r18, r23
    118e:	90 0d       	add	r25, r0
    1190:	36 9f       	mul	r19, r22
    1192:	90 0d       	add	r25, r0
    1194:	11 24       	eor	r1, r1
    1196:	e8 0f       	add	r30, r24
    1198:	f9 1f       	adc	r31, r25
    119a:	85 8d       	ldd	r24, Z+29	; 0x1d
    119c:	86 95       	lsr	r24
    119e:	8f 70       	andi	r24, 0x0F	; 15
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	11 f0       	breq	.+4      	; 0x11a8 <Timebase_UpCounter_SS_Expired_Event+0x34>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	08 95       	ret
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 


void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
    11a8:	84 2f       	mov	r24, r20
    11aa:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Timebase_UpCounter_SS_Reset>
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    11b0:	08 95       	ret

000011b2 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
  Timebase->UpCounterSS[window].PeriodValue = value;
}


uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
    11b2:	e0 91 2e 01 	lds	r30, 0x012E
    11b6:	f0 91 2f 01 	lds	r31, 0x012F
    11ba:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    11bc:	29 e1       	ldi	r18, 0x19	; 25
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	dc 01       	movw	r26, r24
    11c2:	a2 9f       	mul	r26, r18
    11c4:	c0 01       	movw	r24, r0
    11c6:	a3 9f       	mul	r26, r19
    11c8:	90 0d       	add	r25, r0
    11ca:	b2 9f       	mul	r27, r18
    11cc:	90 0d       	add	r25, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	e8 0f       	add	r30, r24
    11d2:	f9 1f       	adc	r31, r25
    11d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    11d6:	80 fd       	sbrc	r24, 0
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
  return Timebase->UpCounterSS[window].PeriodValue;
}


void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
    11da:	86 a5       	ldd	r24, Z+46	; 0x2e
    11dc:	97 a5       	ldd	r25, Z+47	; 0x2f
    11de:	a0 a9       	ldd	r26, Z+48	; 0x30
    11e0:	b1 a9       	ldd	r27, Z+49	; 0x31
    11e2:	84 0f       	add	r24, r20
    11e4:	95 1f       	adc	r25, r21
    11e6:	a6 1f       	adc	r26, r22
    11e8:	b7 1f       	adc	r27, r23
    11ea:	82 ab       	std	Z+50, r24	; 0x32
    11ec:	93 ab       	std	Z+51, r25	; 0x33
    11ee:	a4 ab       	std	Z+52, r26	; 0x34
    11f0:	b5 ab       	std	Z+53, r27	; 0x35
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}


void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    11f2:	85 8d       	ldd	r24, Z+29	; 0x1d
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	85 8f       	std	Z+29, r24	; 0x1d
    11f8:	08 95       	ret

000011fa <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  Timebase->UpCounterSS[window].Temporary = value;
}


int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    11fa:	e0 91 2e 01 	lds	r30, 0x012E
    11fe:	f0 91 2f 01 	lds	r31, 0x012F
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	29 e1       	ldi	r18, 0x19	; 25
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	ac 01       	movw	r20, r24
    120a:	42 9f       	mul	r20, r18
    120c:	c0 01       	movw	r24, r0
    120e:	43 9f       	mul	r20, r19
    1210:	90 0d       	add	r25, r0
    1212:	52 9f       	mul	r21, r18
    1214:	90 0d       	add	r25, r0
    1216:	11 24       	eor	r1, r1
    1218:	e8 0f       	add	r30, r24
    121a:	f9 1f       	adc	r31, r25
    121c:	22 a9       	ldd	r18, Z+50	; 0x32
    121e:	33 a9       	ldd	r19, Z+51	; 0x33
    1220:	44 a9       	ldd	r20, Z+52	; 0x34
    1222:	55 a9       	ldd	r21, Z+53	; 0x35
}


int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1224:	86 a5       	ldd	r24, Z+46	; 0x2e
    1226:	97 a5       	ldd	r25, Z+47	; 0x2f
    1228:	a0 a9       	ldd	r26, Z+48	; 0x30
    122a:	b1 a9       	ldd	r27, Z+49	; 0x31
    122c:	28 1b       	sub	r18, r24
    122e:	39 0b       	sbc	r19, r25
    1230:	4a 0b       	sbc	r20, r26
    1232:	5b 0b       	sbc	r21, r27
    1234:	57 ff       	sbrs	r21, 7
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1240:	b9 01       	movw	r22, r18
    1242:	ca 01       	movw	r24, r20
    1244:	08 95       	ret

00001246 <Timebase_UpCounter_SS_Period_Value_Expired>:


uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
  Timebase->UpCounterSS[window].Temporary = value;
}


int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    124a:	c0 91 2e 01 	lds	r28, 0x012E
    124e:	d0 91 2f 01 	lds	r29, 0x012F
    1252:	68 2f       	mov	r22, r24
    1254:	70 e0       	ldi	r23, 0x00	; 0
    1256:	89 e1       	ldi	r24, 0x19	; 25
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	68 9f       	mul	r22, r24
    125c:	f0 01       	movw	r30, r0
    125e:	69 9f       	mul	r22, r25
    1260:	f0 0d       	add	r31, r0
    1262:	78 9f       	mul	r23, r24
    1264:	f0 0d       	add	r31, r0
    1266:	11 24       	eor	r1, r1
    1268:	ec 0f       	add	r30, r28
    126a:	fd 1f       	adc	r31, r29
    126c:	22 a9       	ldd	r18, Z+50	; 0x32
    126e:	33 a9       	ldd	r19, Z+51	; 0x33
    1270:	44 a9       	ldd	r20, Z+52	; 0x34
    1272:	55 a9       	ldd	r21, Z+53	; 0x35
}


int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1274:	86 a5       	ldd	r24, Z+46	; 0x2e
    1276:	97 a5       	ldd	r25, Z+47	; 0x2f
    1278:	a0 a9       	ldd	r26, Z+48	; 0x30
    127a:	b1 a9       	ldd	r27, Z+49	; 0x31
    127c:	28 1b       	sub	r18, r24
    127e:	39 0b       	sbc	r19, r25
    1280:	4a 0b       	sbc	r20, r26
    1282:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1284:	57 fd       	sbrc	r21, 7
    1286:	07 c0       	rjmp	.+14     	; 0x1296 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  return temp;
}


uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1288:	21 15       	cp	r18, r1
    128a:	31 05       	cpc	r19, r1
    128c:	41 05       	cpc	r20, r1
    128e:	51 05       	cpc	r21, r1
    1290:	11 f0       	breq	.+4      	; 0x1296 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	12 c0       	rjmp	.+36     	; 0x12ba <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	89 e1       	ldi	r24, 0x19	; 25
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	ac 01       	movw	r20, r24
    129e:	64 9f       	mul	r22, r20
    12a0:	c0 01       	movw	r24, r0
    12a2:	65 9f       	mul	r22, r21
    12a4:	90 0d       	add	r25, r0
    12a6:	74 9f       	mul	r23, r20
    12a8:	90 0d       	add	r25, r0
    12aa:	11 24       	eor	r1, r1
    12ac:	c8 0f       	add	r28, r24
    12ae:	d9 1f       	adc	r29, r25
    12b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b2:	80 ff       	sbrs	r24, 0
    12b4:	21 e0       	ldi	r18, 0x01	; 1
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    12ba:	82 2f       	mov	r24, r18
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <Timebase_UpCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    12c2:	1f 93       	push	r17
    12c4:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    12c6:	0e 94 23 09 	call	0x1246	; 0x1246 <Timebase_UpCounter_SS_Period_Value_Expired>
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	16 c0       	rjmp	.+44     	; 0x12fe <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    12d2:	e0 91 2e 01 	lds	r30, 0x012E
    12d6:	f0 91 2f 01 	lds	r31, 0x012F
    12da:	21 2f       	mov	r18, r17
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	ac 01       	movw	r20, r24
    12e4:	24 9f       	mul	r18, r20
    12e6:	c0 01       	movw	r24, r0
    12e8:	25 9f       	mul	r18, r21
    12ea:	90 0d       	add	r25, r0
    12ec:	34 9f       	mul	r19, r20
    12ee:	90 0d       	add	r25, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	e8 0f       	add	r30, r24
    12f4:	f9 1f       	adc	r31, r25
    12f6:	85 8d       	ldd	r24, Z+29	; 0x1d
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	85 8f       	std	Z+29, r24	; 0x1d
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    12fe:	1f 91       	pop	r17
    1300:	08 95       	ret

00001302 <Timebase_UpCounter_SS_Update_All>:


void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 2a 07 	call	0xe54	; 0xe54 <Timebase_UpCounter_SS_Update>
  }
}
    1308:	08 95       	ret

0000130a <Timebase_UpCounter_SS_Reset_All>:


void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <Timebase_UpCounter_SS_Reset>
  }
}
    1310:	08 95       	ret

00001312 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    1312:	e0 91 2e 01 	lds	r30, 0x012E
    1316:	f0 91 2f 01 	lds	r31, 0x012F
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	25 e1       	ldi	r18, 0x15	; 21
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	ac 01       	movw	r20, r24
    1322:	42 9f       	mul	r20, r18
    1324:	c0 01       	movw	r24, r0
    1326:	43 9f       	mul	r20, r19
    1328:	90 0d       	add	r25, r0
    132a:	52 9f       	mul	r21, r18
    132c:	90 0d       	add	r25, r0
    132e:	11 24       	eor	r1, r1
    1330:	e8 0f       	add	r30, r24
    1332:	f9 1f       	adc	r31, r25
    1334:	86 a9       	ldd	r24, Z+54	; 0x36
    1336:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    1338:	8f 70       	andi	r24, 0x0F	; 15
    133a:	08 95       	ret

0000133c <Timebase_UpCounter_Set_Status>:


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    133c:	e0 91 2e 01 	lds	r30, 0x012E
    1340:	f0 91 2f 01 	lds	r31, 0x012F
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	25 e1       	ldi	r18, 0x15	; 21
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	ac 01       	movw	r20, r24
    134c:	42 9f       	mul	r20, r18
    134e:	c0 01       	movw	r24, r0
    1350:	43 9f       	mul	r20, r19
    1352:	90 0d       	add	r25, r0
    1354:	52 9f       	mul	r21, r18
    1356:	90 0d       	add	r25, r0
    1358:	11 24       	eor	r1, r1
    135a:	e8 0f       	add	r30, r24
    135c:	f9 1f       	adc	r31, r25
    135e:	6f 70       	andi	r22, 0x0F	; 15
    1360:	66 0f       	add	r22, r22
    1362:	86 a9       	ldd	r24, Z+54	; 0x36
    1364:	81 7e       	andi	r24, 0xE1	; 225
    1366:	86 2b       	or	r24, r22
    1368:	86 ab       	std	Z+54, r24	; 0x36
}
    136a:	08 95       	ret

0000136c <Timebase_UpCounter_Get_Value>:


int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    136c:	e0 91 2e 01 	lds	r30, 0x012E
    1370:	f0 91 2f 01 	lds	r31, 0x012F
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	25 e1       	ldi	r18, 0x15	; 21
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	ac 01       	movw	r20, r24
    137c:	42 9f       	mul	r20, r18
    137e:	c0 01       	movw	r24, r0
    1380:	43 9f       	mul	r20, r19
    1382:	90 0d       	add	r25, r0
    1384:	52 9f       	mul	r21, r18
    1386:	90 0d       	add	r25, r0
    1388:	11 24       	eor	r1, r1
    138a:	e8 0f       	add	r30, r24
    138c:	f9 1f       	adc	r31, r25
    138e:	ed 5b       	subi	r30, 0xBD	; 189
    1390:	ff 4f       	sbci	r31, 0xFF	; 255
    1392:	60 81       	ld	r22, Z
    1394:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Value;
}
    1396:	82 81       	ldd	r24, Z+2	; 0x02
    1398:	93 81       	ldd	r25, Z+3	; 0x03
    139a:	08 95       	ret

0000139c <Timebase_UpCounter_Set_Value>:


void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    13a0:	c0 91 2e 01 	lds	r28, 0x012E
    13a4:	d0 91 2f 01 	lds	r29, 0x012F
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	25 e1       	ldi	r18, 0x15	; 21
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	fc 01       	movw	r30, r24
    13b0:	e2 9f       	mul	r30, r18
    13b2:	c0 01       	movw	r24, r0
    13b4:	e3 9f       	mul	r30, r19
    13b6:	90 0d       	add	r25, r0
    13b8:	f2 9f       	mul	r31, r18
    13ba:	90 0d       	add	r25, r0
    13bc:	11 24       	eor	r1, r1
    13be:	c8 0f       	add	r28, r24
    13c0:	d9 1f       	adc	r29, r25
    13c2:	cd 5b       	subi	r28, 0xBD	; 189
    13c4:	df 4f       	sbci	r29, 0xFF	; 255
    13c6:	ca 01       	movw	r24, r20
    13c8:	db 01       	movw	r26, r22
    13ca:	b7 ff       	sbrs	r27, 7
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <Timebase_UpCounter_Set_Value+0x3a>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e0       	ldi	r26, 0x00	; 0
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	88 83       	st	Y, r24
    13d8:	99 83       	std	Y+1, r25	; 0x01
    13da:	aa 83       	std	Y+2, r26	; 0x02
    13dc:	bb 83       	std	Y+3, r27	; 0x03
}
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	08 95       	ret

000013e4 <Timebase_UpCounter_Get_EndValueSec>:


int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    13e4:	e0 91 2e 01 	lds	r30, 0x012E
    13e8:	f0 91 2f 01 	lds	r31, 0x012F
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	25 e1       	ldi	r18, 0x15	; 21
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	ac 01       	movw	r20, r24
    13f4:	42 9f       	mul	r20, r18
    13f6:	c0 01       	movw	r24, r0
    13f8:	43 9f       	mul	r20, r19
    13fa:	90 0d       	add	r25, r0
    13fc:	52 9f       	mul	r21, r18
    13fe:	90 0d       	add	r25, r0
    1400:	11 24       	eor	r1, r1
    1402:	e8 0f       	add	r30, r24
    1404:	f9 1f       	adc	r31, r25
    1406:	df 01       	movw	r26, r30
    1408:	d7 96       	adiw	r26, 0x37	; 55
    140a:	67 a9       	ldd	r22, Z+55	; 0x37
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	7c 91       	ld	r23, X
    1410:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1412:	12 96       	adiw	r26, 0x02	; 2
    1414:	8c 91       	ld	r24, X
    1416:	12 97       	sbiw	r26, 0x02	; 2
    1418:	13 96       	adiw	r26, 0x03	; 3
    141a:	9c 91       	ld	r25, X
    141c:	08 95       	ret

0000141e <Timebase_UpCounter_Get_EndValueSubSec>:


int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    141e:	e0 91 2e 01 	lds	r30, 0x012E
    1422:	f0 91 2f 01 	lds	r31, 0x012F
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	25 e1       	ldi	r18, 0x15	; 21
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	ac 01       	movw	r20, r24
    142e:	42 9f       	mul	r20, r18
    1430:	c0 01       	movw	r24, r0
    1432:	43 9f       	mul	r20, r19
    1434:	90 0d       	add	r25, r0
    1436:	52 9f       	mul	r21, r18
    1438:	90 0d       	add	r25, r0
    143a:	11 24       	eor	r1, r1
    143c:	e8 0f       	add	r30, r24
    143e:	f9 1f       	adc	r31, r25
    1440:	df 01       	movw	r26, r30
    1442:	d7 96       	adiw	r26, 0x37	; 55
    1444:	67 a9       	ldd	r22, Z+55	; 0x37
    1446:	11 96       	adiw	r26, 0x01	; 1
    1448:	7c 91       	ld	r23, X
    144a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    144c:	12 96       	adiw	r26, 0x02	; 2
    144e:	8c 91       	ld	r24, X
    1450:	12 97       	sbiw	r26, 0x02	; 2
    1452:	13 96       	adiw	r26, 0x03	; 3
    1454:	9c 91       	ld	r25, X
    1456:	08 95       	ret

00001458 <Timebase_UpCounter_Set_EndValueSec>:


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1458:	e0 91 2e 01 	lds	r30, 0x012E
    145c:	f0 91 2f 01 	lds	r31, 0x012F
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	25 e1       	ldi	r18, 0x15	; 21
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	dc 01       	movw	r26, r24
    1468:	a2 9f       	mul	r26, r18
    146a:	c0 01       	movw	r24, r0
    146c:	a3 9f       	mul	r26, r19
    146e:	90 0d       	add	r25, r0
    1470:	b2 9f       	mul	r27, r18
    1472:	90 0d       	add	r25, r0
    1474:	11 24       	eor	r1, r1
    1476:	e8 0f       	add	r30, r24
    1478:	f9 1f       	adc	r31, r25
    147a:	47 ab       	std	Z+55, r20	; 0x37
    147c:	50 af       	std	Z+56, r21	; 0x38
    147e:	61 af       	std	Z+57, r22	; 0x39
    1480:	72 af       	std	Z+58, r23	; 0x3a
}
    1482:	08 95       	ret

00001484 <Timebase_UpCounter_Set_EndValueSubSec>:


void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1484:	e0 91 2e 01 	lds	r30, 0x012E
    1488:	f0 91 2f 01 	lds	r31, 0x012F
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	25 e1       	ldi	r18, 0x15	; 21
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	dc 01       	movw	r26, r24
    1494:	a2 9f       	mul	r26, r18
    1496:	c0 01       	movw	r24, r0
    1498:	a3 9f       	mul	r26, r19
    149a:	90 0d       	add	r25, r0
    149c:	b2 9f       	mul	r27, r18
    149e:	90 0d       	add	r25, r0
    14a0:	11 24       	eor	r1, r1
    14a2:	e8 0f       	add	r30, r24
    14a4:	f9 1f       	adc	r31, r25
    14a6:	47 ab       	std	Z+55, r20	; 0x37
    14a8:	50 af       	std	Z+56, r21	; 0x38
    14aa:	61 af       	std	Z+57, r22	; 0x39
    14ac:	72 af       	std	Z+58, r23	; 0x3a
}
    14ae:	08 95       	ret

000014b0 <Timebase_UpCounter_Get_TargetValue>:


int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    14b0:	e0 91 2e 01 	lds	r30, 0x012E
    14b4:	f0 91 2f 01 	lds	r31, 0x012F
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	25 e1       	ldi	r18, 0x15	; 21
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	ac 01       	movw	r20, r24
    14c0:	42 9f       	mul	r20, r18
    14c2:	c0 01       	movw	r24, r0
    14c4:	43 9f       	mul	r20, r19
    14c6:	90 0d       	add	r25, r0
    14c8:	52 9f       	mul	r21, r18
    14ca:	90 0d       	add	r25, r0
    14cc:	11 24       	eor	r1, r1
    14ce:	e8 0f       	add	r30, r24
    14d0:	f9 1f       	adc	r31, r25
    14d2:	df 01       	movw	r26, r30
    14d4:	db 96       	adiw	r26, 0x3b	; 59
    14d6:	63 ad       	ldd	r22, Z+59	; 0x3b
    14d8:	11 96       	adiw	r26, 0x01	; 1
    14da:	7c 91       	ld	r23, X
    14dc:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    14de:	12 96       	adiw	r26, 0x02	; 2
    14e0:	8c 91       	ld	r24, X
    14e2:	12 97       	sbiw	r26, 0x02	; 2
    14e4:	13 96       	adiw	r26, 0x03	; 3
    14e6:	9c 91       	ld	r25, X
    14e8:	08 95       	ret

000014ea <Timebase_UpCounter_Set_TargetValue>:


void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    14ea:	e0 91 2e 01 	lds	r30, 0x012E
    14ee:	f0 91 2f 01 	lds	r31, 0x012F
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	25 e1       	ldi	r18, 0x15	; 21
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	dc 01       	movw	r26, r24
    14fa:	a2 9f       	mul	r26, r18
    14fc:	c0 01       	movw	r24, r0
    14fe:	a3 9f       	mul	r26, r19
    1500:	90 0d       	add	r25, r0
    1502:	b2 9f       	mul	r27, r18
    1504:	90 0d       	add	r25, r0
    1506:	11 24       	eor	r1, r1
    1508:	e8 0f       	add	r30, r24
    150a:	f9 1f       	adc	r31, r25
    150c:	43 af       	std	Z+59, r20	; 0x3b
    150e:	54 af       	std	Z+60, r21	; 0x3c
    1510:	65 af       	std	Z+61, r22	; 0x3d
    1512:	76 af       	std	Z+62, r23	; 0x3e
}
    1514:	08 95       	ret

00001516 <Timebase_UpCounter_Get_TemporaryValue>:


int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    1516:	e0 91 2e 01 	lds	r30, 0x012E
    151a:	f0 91 2f 01 	lds	r31, 0x012F
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	25 e1       	ldi	r18, 0x15	; 21
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	ac 01       	movw	r20, r24
    1526:	42 9f       	mul	r20, r18
    1528:	c0 01       	movw	r24, r0
    152a:	43 9f       	mul	r20, r19
    152c:	90 0d       	add	r25, r0
    152e:	52 9f       	mul	r21, r18
    1530:	90 0d       	add	r25, r0
    1532:	11 24       	eor	r1, r1
    1534:	e8 0f       	add	r30, r24
    1536:	f9 1f       	adc	r31, r25
    1538:	ff 96       	adiw	r30, 0x3f	; 63
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].Temporary;
}
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	08 95       	ret

00001544 <Timebase_UpCounter_Set_TemporaryValue>:


void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1548:	c0 91 2e 01 	lds	r28, 0x012E
    154c:	d0 91 2f 01 	lds	r29, 0x012F
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	25 e1       	ldi	r18, 0x15	; 21
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	fc 01       	movw	r30, r24
    1558:	e2 9f       	mul	r30, r18
    155a:	c0 01       	movw	r24, r0
    155c:	e3 9f       	mul	r30, r19
    155e:	90 0d       	add	r25, r0
    1560:	f2 9f       	mul	r31, r18
    1562:	90 0d       	add	r25, r0
    1564:	11 24       	eor	r1, r1
    1566:	c8 0f       	add	r28, r24
    1568:	d9 1f       	adc	r29, r25
    156a:	ef 96       	adiw	r28, 0x3f	; 63
    156c:	ca 01       	movw	r24, r20
    156e:	db 01       	movw	r26, r22
    1570:	b7 ff       	sbrs	r27, 7
    1572:	04 c0       	rjmp	.+8      	; 0x157c <Timebase_UpCounter_Set_TemporaryValue+0x38>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	88 83       	st	Y, r24
    157e:	99 83       	std	Y+1, r25	; 0x01
    1580:	aa 83       	std	Y+2, r26	; 0x02
    1582:	bb 83       	std	Y+3, r27	; 0x03
}
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	08 95       	ret

0000158a <Timebase_UpCounter_Get_PeriodValue>:


int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    158a:	e0 91 2e 01 	lds	r30, 0x012E
    158e:	f0 91 2f 01 	lds	r31, 0x012F
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	25 e1       	ldi	r18, 0x15	; 21
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	ac 01       	movw	r20, r24
    159a:	42 9f       	mul	r20, r18
    159c:	c0 01       	movw	r24, r0
    159e:	43 9f       	mul	r20, r19
    15a0:	90 0d       	add	r25, r0
    15a2:	52 9f       	mul	r21, r18
    15a4:	90 0d       	add	r25, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	e8 0f       	add	r30, r24
    15aa:	f9 1f       	adc	r31, r25
    15ac:	e9 5b       	subi	r30, 0xB9	; 185
    15ae:	ff 4f       	sbci	r31, 0xFF	; 255
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    15b4:	82 81       	ldd	r24, Z+2	; 0x02
    15b6:	93 81       	ldd	r25, Z+3	; 0x03
    15b8:	08 95       	ret

000015ba <Timebase_UpCounter_Set_PeriodValue>:


void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    15ba:	e0 91 2e 01 	lds	r30, 0x012E
    15be:	f0 91 2f 01 	lds	r31, 0x012F
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	25 e1       	ldi	r18, 0x15	; 21
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	dc 01       	movw	r26, r24
    15ca:	a2 9f       	mul	r26, r18
    15cc:	c0 01       	movw	r24, r0
    15ce:	a3 9f       	mul	r26, r19
    15d0:	90 0d       	add	r25, r0
    15d2:	b2 9f       	mul	r27, r18
    15d4:	90 0d       	add	r25, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	e8 0f       	add	r30, r24
    15da:	f9 1f       	adc	r31, r25
    15dc:	e9 5b       	subi	r30, 0xB9	; 185
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	40 83       	st	Z, r20
    15e2:	51 83       	std	Z+1, r21	; 0x01
    15e4:	62 83       	std	Z+2, r22	; 0x02
    15e6:	73 83       	std	Z+3, r23	; 0x03
}
    15e8:	08 95       	ret

000015ea <Timebase_UpCounter_Get_Period_Flag>:


uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    15ea:	e0 91 2e 01 	lds	r30, 0x012E
    15ee:	f0 91 2f 01 	lds	r31, 0x012F
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	25 e1       	ldi	r18, 0x15	; 21
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	ac 01       	movw	r20, r24
    15fa:	42 9f       	mul	r20, r18
    15fc:	c0 01       	movw	r24, r0
    15fe:	43 9f       	mul	r20, r19
    1600:	90 0d       	add	r25, r0
    1602:	52 9f       	mul	r21, r18
    1604:	90 0d       	add	r25, r0
    1606:	11 24       	eor	r1, r1
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
    160c:	86 a9       	ldd	r24, Z+54	; 0x36
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    160e:	81 70       	andi	r24, 0x01	; 1
    1610:	08 95       	ret

00001612 <Timebase_UpCounter_Set_Period_Flag>:


void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1612:	e0 91 2e 01 	lds	r30, 0x012E
    1616:	f0 91 2f 01 	lds	r31, 0x012F
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	25 e1       	ldi	r18, 0x15	; 21
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	ac 01       	movw	r20, r24
    1622:	42 9f       	mul	r20, r18
    1624:	c0 01       	movw	r24, r0
    1626:	43 9f       	mul	r20, r19
    1628:	90 0d       	add	r25, r0
    162a:	52 9f       	mul	r21, r18
    162c:	90 0d       	add	r25, r0
    162e:	11 24       	eor	r1, r1
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	86 a9       	ldd	r24, Z+54	; 0x36
    1636:	81 60       	ori	r24, 0x01	; 1
    1638:	86 ab       	std	Z+54, r24	; 0x36
}
    163a:	08 95       	ret

0000163c <Timebase_UpCounter_Clear_Period_Flag>:


void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    163c:	e0 91 2e 01 	lds	r30, 0x012E
    1640:	f0 91 2f 01 	lds	r31, 0x012F
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	25 e1       	ldi	r18, 0x15	; 21
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	ac 01       	movw	r20, r24
    164c:	42 9f       	mul	r20, r18
    164e:	c0 01       	movw	r24, r0
    1650:	43 9f       	mul	r20, r19
    1652:	90 0d       	add	r25, r0
    1654:	52 9f       	mul	r21, r18
    1656:	90 0d       	add	r25, r0
    1658:	11 24       	eor	r1, r1
    165a:	e8 0f       	add	r30, r24
    165c:	f9 1f       	adc	r31, r25
    165e:	86 a9       	ldd	r24, Z+54	; 0x36
    1660:	8e 7f       	andi	r24, 0xFE	; 254
    1662:	86 ab       	std	Z+54, r24	; 0x36
}
    1664:	08 95       	ret

00001666 <Timebase_UpCounter_Reset>:
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1666:	e0 91 2e 01 	lds	r30, 0x012E
    166a:	f0 91 2f 01 	lds	r31, 0x012F
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	25 e1       	ldi	r18, 0x15	; 21
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	ac 01       	movw	r20, r24
    1676:	42 9f       	mul	r20, r18
    1678:	c0 01       	movw	r24, r0
    167a:	43 9f       	mul	r20, r19
    167c:	90 0d       	add	r25, r0
    167e:	52 9f       	mul	r21, r18
    1680:	90 0d       	add	r25, r0
    1682:	11 24       	eor	r1, r1
    1684:	e8 0f       	add	r30, r24
    1686:	f9 1f       	adc	r31, r25
    1688:	86 a9       	ldd	r24, Z+54	; 0x36

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    168a:	ed 5b       	subi	r30, 0xBD	; 189
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	10 82       	st	Z, r1
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	12 82       	std	Z+2, r1	; 0x02
    1694:	13 82       	std	Z+3, r1	; 0x03
    1696:	e3 54       	subi	r30, 0x43	; 67
    1698:	f0 40       	sbci	r31, 0x00	; 0
  Timebase->UpCounter[window].EndValue = value;
}


void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    169a:	17 aa       	std	Z+55, r1	; 0x37
    169c:	10 ae       	std	Z+56, r1	; 0x38
    169e:	11 ae       	std	Z+57, r1	; 0x39
    16a0:	12 ae       	std	Z+58, r1	; 0x3a
  return Timebase->UpCounter[window].Target;
}


void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    16a2:	13 ae       	std	Z+59, r1	; 0x3b
    16a4:	14 ae       	std	Z+60, r1	; 0x3c
    16a6:	15 ae       	std	Z+61, r1	; 0x3d
    16a8:	16 ae       	std	Z+62, r1	; 0x3e

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    16aa:	ff 96       	adiw	r30, 0x3f	; 63
    16ac:	10 82       	st	Z, r1
    16ae:	11 82       	std	Z+1, r1	; 0x01
    16b0:	12 82       	std	Z+2, r1	; 0x02
    16b2:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->UpCounter[window].PeriodValue;
}


void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    16b4:	38 96       	adiw	r30, 0x08	; 8
    16b6:	10 82       	st	Z, r1
    16b8:	11 82       	std	Z+1, r1	; 0x01
    16ba:	12 82       	std	Z+2, r1	; 0x02
    16bc:	13 82       	std	Z+3, r1	; 0x03
    16be:	e7 54       	subi	r30, 0x47	; 71
    16c0:	f0 40       	sbci	r31, 0x00	; 0
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    16c2:	80 7e       	andi	r24, 0xE0	; 224
    16c4:	86 ab       	std	Z+54, r24	; 0x36
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    16c6:	08 95       	ret

000016c8 <Timebase_UpCounter_Clear_All_Flags>:


void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    16c8:	0e 94 33 0b 	call	0x1666	; 0x1666 <Timebase_UpCounter_Reset>
}
    16cc:	08 95       	ret

000016ce <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    16ce:	e0 91 2e 01 	lds	r30, 0x012E
    16d2:	f0 91 2f 01 	lds	r31, 0x012F
    16d6:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_UpCounter_Reset( window );
}


void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    16d8:	25 e1       	ldi	r18, 0x15	; 21
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	ac 01       	movw	r20, r24
    16de:	42 9f       	mul	r20, r18
    16e0:	c0 01       	movw	r24, r0
    16e2:	43 9f       	mul	r20, r19
    16e4:	90 0d       	add	r25, r0
    16e6:	52 9f       	mul	r21, r18
    16e8:	90 0d       	add	r25, r0
    16ea:	11 24       	eor	r1, r1
    16ec:	e8 0f       	add	r30, r24
    16ee:	f9 1f       	adc	r31, r25
    16f0:	96 a9       	ldd	r25, Z+54	; 0x36
    16f2:	89 2f       	mov	r24, r25
    16f4:	86 95       	lsr	r24
    16f6:	8f 70       	andi	r24, 0x0F	; 15
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	19 f0       	breq	.+6      	; 0x1702 <Timebase_UpCounter_Start+0x34>
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    16fc:	91 7e       	andi	r25, 0xE1	; 225
    16fe:	92 60       	ori	r25, 0x02	; 2
    1700:	96 ab       	std	Z+54, r25	; 0x36
    1702:	08 95       	ret

00001704 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1704:	e0 91 2e 01 	lds	r30, 0x012E
    1708:	f0 91 2f 01 	lds	r31, 0x012F
    170c:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    170e:	25 e1       	ldi	r18, 0x15	; 21
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	ac 01       	movw	r20, r24
    1714:	42 9f       	mul	r20, r18
    1716:	c0 01       	movw	r24, r0
    1718:	43 9f       	mul	r20, r19
    171a:	90 0d       	add	r25, r0
    171c:	52 9f       	mul	r21, r18
    171e:	90 0d       	add	r25, r0
    1720:	11 24       	eor	r1, r1
    1722:	e8 0f       	add	r30, r24
    1724:	f9 1f       	adc	r31, r25
    1726:	96 a9       	ldd	r25, Z+54	; 0x36
    1728:	89 2f       	mov	r24, r25
    172a:	86 95       	lsr	r24
    172c:	8f 70       	andi	r24, 0x0F	; 15
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	19 f0       	breq	.+6      	; 0x1738 <Timebase_UpCounter_Stop+0x34>
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1732:	91 7e       	andi	r25, 0xE1	; 225
    1734:	94 60       	ori	r25, 0x04	; 4
    1736:	96 ab       	std	Z+54, r25	; 0x36
    1738:	08 95       	ret

0000173a <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    173a:	a0 91 2e 01 	lds	r26, 0x012E
    173e:	b0 91 2f 01 	lds	r27, 0x012F
    1742:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1744:	25 e1       	ldi	r18, 0x15	; 21
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	82 9f       	mul	r24, r18
    174a:	f0 01       	movw	r30, r0
    174c:	83 9f       	mul	r24, r19
    174e:	f0 0d       	add	r31, r0
    1750:	92 9f       	mul	r25, r18
    1752:	f0 0d       	add	r31, r0
    1754:	11 24       	eor	r1, r1
    1756:	ea 0f       	add	r30, r26
    1758:	fb 1f       	adc	r31, r27
    175a:	86 a9       	ldd	r24, Z+54	; 0x36
    175c:	86 95       	lsr	r24
    175e:	8f 70       	andi	r24, 0x0F	; 15
    1760:	31 f5       	brne	.+76     	; 0x17ae <Timebase_UpCounter_Set_Securely+0x74>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1762:	ed 5b       	subi	r30, 0xBD	; 189
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	10 82       	st	Z, r1
    1768:	11 82       	std	Z+1, r1	; 0x01
    176a:	12 82       	std	Z+2, r1	; 0x02
    176c:	13 82       	std	Z+3, r1	; 0x03

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    176e:	12 92       	st	-Z, r1
    1770:	12 92       	st	-Z, r1
    1772:	12 92       	st	-Z, r1
    1774:	12 92       	st	-Z, r1
    1776:	ff 97       	sbiw	r30, 0x3f	; 63
  return Timebase->UpCounter[window].Target;
}


void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1778:	43 af       	std	Z+59, r20	; 0x3b
    177a:	54 af       	std	Z+60, r21	; 0x3c
    177c:	65 af       	std	Z+61, r22	; 0x3d
    177e:	76 af       	std	Z+62, r23	; 0x3e
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1780:	1b 96       	adiw	r26, 0x0b	; 11
    1782:	8d 91       	ld	r24, X+
    1784:	9d 91       	ld	r25, X+
    1786:	0d 90       	ld	r0, X+
    1788:	bc 91       	ld	r27, X
    178a:	a0 2d       	mov	r26, r0
  return Timebase->UpCounter[window].EndValue;
}


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    178c:	84 0f       	add	r24, r20
    178e:	95 1f       	adc	r25, r21
    1790:	a6 1f       	adc	r26, r22
    1792:	b7 1f       	adc	r27, r23
    1794:	87 ab       	std	Z+55, r24	; 0x37
    1796:	90 af       	std	Z+56, r25	; 0x38
    1798:	a1 af       	std	Z+57, r26	; 0x39
    179a:	b2 af       	std	Z+58, r27	; 0x3a
  Timebase_UpCounter_Reset( window );
}


void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    179c:	96 a9       	ldd	r25, Z+54	; 0x36
    179e:	89 2f       	mov	r24, r25
    17a0:	86 95       	lsr	r24
    17a2:	8f 70       	andi	r24, 0x0F	; 15
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	19 f0       	breq	.+6      	; 0x17ae <Timebase_UpCounter_Set_Securely+0x74>
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    17a8:	91 7e       	andi	r25, 0xE1	; 225
    17aa:	92 60       	ori	r25, 0x02	; 2
    17ac:	96 ab       	std	Z+54, r25	; 0x36
    17ae:	08 95       	ret

000017b0 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Start(window);
  }
}


void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    17b0:	df 92       	push	r13
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	1f 93       	push	r17
    17ba:	d8 2e       	mov	r13, r24
    17bc:	7a 01       	movw	r14, r20
    17be:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    17c0:	0e 94 33 0b 	call	0x1666	; 0x1666 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    17c4:	8d 2d       	mov	r24, r13
    17c6:	b8 01       	movw	r22, r16
    17c8:	a7 01       	movw	r20, r14
    17ca:	0e 94 9d 0b 	call	0x173a	; 0x173a <Timebase_UpCounter_Set_Securely>
} 
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	08 95       	ret

000017da <Timebase_UpCounter_Update>:


void Timebase_UpCounter_Update(uint8_t window){
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    17e6:	60 91 2e 01 	lds	r22, 0x012E
    17ea:	70 91 2f 01 	lds	r23, 0x012F
    17ee:	08 2f       	mov	r16, r24
    17f0:	10 e0       	ldi	r17, 0x00	; 0
    17f2:	85 e1       	ldi	r24, 0x15	; 21
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	08 9f       	mul	r16, r24
    17f8:	f0 01       	movw	r30, r0
    17fa:	09 9f       	mul	r16, r25
    17fc:	f0 0d       	add	r31, r0
    17fe:	18 9f       	mul	r17, r24
    1800:	f0 0d       	add	r31, r0
    1802:	11 24       	eor	r1, r1
    1804:	e6 0f       	add	r30, r22
    1806:	f7 1f       	adc	r31, r23
    1808:	86 a9       	ldd	r24, Z+54	; 0x36
    180a:	86 95       	lsr	r24
    180c:	8f 70       	andi	r24, 0x0F	; 15
} 


void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    180e:	81 30       	cpi	r24, 0x01	; 1
    1810:	09 f0       	breq	.+2      	; 0x1814 <Timebase_UpCounter_Update+0x3a>
    1812:	7f c0       	rjmp	.+254    	; 0x1912 <Timebase_UpCounter_Update+0x138>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1814:	eb 01       	movw	r28, r22
    1816:	8b 85       	ldd	r24, Y+11	; 0x0b
    1818:	9c 85       	ldd	r25, Y+12	; 0x0c
    181a:	ad 85       	ldd	r26, Y+13	; 0x0d
    181c:	be 85       	ldd	r27, Y+14	; 0x0e

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    181e:	27 a9       	ldd	r18, Z+55	; 0x37
    1820:	30 ad       	ldd	r19, Z+56	; 0x38
    1822:	41 ad       	ldd	r20, Z+57	; 0x39
    1824:	52 ad       	ldd	r21, Z+58	; 0x3a
    1826:	28 1b       	sub	r18, r24
    1828:	39 0b       	sbc	r19, r25
    182a:	4a 0b       	sbc	r20, r26
    182c:	5b 0b       	sbc	r21, r27
    182e:	57 ff       	sbrs	r21, 7
    1830:	04 c0       	rjmp	.+8      	; 0x183a <Timebase_UpCounter_Update+0x60>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    183a:	85 e1       	ldi	r24, 0x15	; 21
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	08 9f       	mul	r16, r24
    1840:	f0 01       	movw	r30, r0
    1842:	09 9f       	mul	r16, r25
    1844:	f0 0d       	add	r31, r0
    1846:	18 9f       	mul	r17, r24
    1848:	f0 0d       	add	r31, r0
    184a:	11 24       	eor	r1, r1
    184c:	e6 0f       	add	r30, r22
    184e:	f7 1f       	adc	r31, r23
    1850:	ff 96       	adiw	r30, 0x3f	; 63
    1852:	20 83       	st	Z, r18
    1854:	31 83       	std	Z+1, r19	; 0x01
    1856:	42 83       	std	Z+2, r20	; 0x02
    1858:	53 83       	std	Z+3, r21	; 0x03
    185a:	ff 97       	sbiw	r30, 0x3f	; 63
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    185c:	83 ad       	ldd	r24, Z+59	; 0x3b
    185e:	94 ad       	ldd	r25, Z+60	; 0x3c
    1860:	a5 ad       	ldd	r26, Z+61	; 0x3d
    1862:	b6 ad       	ldd	r27, Z+62	; 0x3e

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1864:	ed 5b       	subi	r30, 0xBD	; 189
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	82 1b       	sub	r24, r18
    186a:	93 0b       	sbc	r25, r19
    186c:	a4 0b       	sbc	r26, r20
    186e:	b5 0b       	sbc	r27, r21
    1870:	b7 ff       	sbrs	r27, 7
    1872:	04 c0       	rjmp	.+8      	; 0x187c <Timebase_UpCounter_Update+0xa2>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	a0 e0       	ldi	r26, 0x00	; 0
    187a:	b0 e0       	ldi	r27, 0x00	; 0
    187c:	80 83       	st	Z, r24
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	a2 83       	std	Z+2, r26	; 0x02
    1882:	b3 83       	std	Z+3, r27	; 0x03
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1884:	85 e1       	ldi	r24, 0x15	; 21
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	08 9f       	mul	r16, r24
    188a:	e0 01       	movw	r28, r0
    188c:	09 9f       	mul	r16, r25
    188e:	d0 0d       	add	r29, r0
    1890:	18 9f       	mul	r17, r24
    1892:	d0 0d       	add	r29, r0
    1894:	11 24       	eor	r1, r1
    1896:	c6 0f       	add	r28, r22
    1898:	d7 1f       	adc	r29, r23
    189a:	fe 01       	movw	r30, r28
    189c:	ff 96       	adiw	r30, 0x3f	; 63
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	a2 81       	ldd	r26, Z+2	; 0x02
    18a4:	b3 81       	ldd	r27, Z+3	; 0x03
    18a6:	18 16       	cp	r1, r24
    18a8:	19 06       	cpc	r1, r25
    18aa:	1a 06       	cpc	r1, r26
    18ac:	1b 06       	cpc	r1, r27
    18ae:	0c f4       	brge	.+2      	; 0x18b2 <Timebase_UpCounter_Update+0xd8>
    18b0:	59 c0       	rjmp	.+178    	; 0x1964 <Timebase_UpCounter_Update+0x18a>
  return Timebase->UpCounter[window].EndValue;
}


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    18b2:	1f aa       	std	Y+55, r1	; 0x37
    18b4:	18 ae       	std	Y+56, r1	; 0x38
    18b6:	19 ae       	std	Y+57, r1	; 0x39
    18b8:	1a ae       	std	Y+58, r1	; 0x3a

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    18ba:	10 82       	st	Z, r1
    18bc:	11 82       	std	Z+1, r1	; 0x01
    18be:	12 82       	std	Z+2, r1	; 0x02
    18c0:	13 82       	std	Z+3, r1	; 0x03
  Timebase->UpCounter[window].EndValue = value;
}


int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    18c2:	fe 01       	movw	r30, r28
    18c4:	fb 96       	adiw	r30, 0x3b	; 59

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    18c6:	83 e4       	ldi	r24, 0x43	; 67
    18c8:	e8 2e       	mov	r14, r24
    18ca:	f1 2c       	mov	r15, r1
    18cc:	ec 0e       	add	r14, r28
    18ce:	fd 1e       	adc	r15, r29
    18d0:	2b ad       	ldd	r18, Y+59	; 0x3b
    18d2:	31 81       	ldd	r19, Z+1	; 0x01
    18d4:	42 81       	ldd	r20, Z+2	; 0x02
    18d6:	53 81       	ldd	r21, Z+3	; 0x03
    18d8:	c9 01       	movw	r24, r18
    18da:	da 01       	movw	r26, r20
    18dc:	b7 ff       	sbrs	r27, 7
    18de:	04 c0       	rjmp	.+8      	; 0x18e8 <Timebase_UpCounter_Update+0x10e>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 e0       	ldi	r26, 0x00	; 0
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	f7 01       	movw	r30, r14
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->UpCounter[window].Status.Value;
}


void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    18f2:	85 e1       	ldi	r24, 0x15	; 21
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	08 9f       	mul	r16, r24
    18f8:	f0 01       	movw	r30, r0
    18fa:	09 9f       	mul	r16, r25
    18fc:	f0 0d       	add	r31, r0
    18fe:	18 9f       	mul	r17, r24
    1900:	f0 0d       	add	r31, r0
    1902:	11 24       	eor	r1, r1
    1904:	e6 0f       	add	r30, r22
    1906:	f7 1f       	adc	r31, r23
    1908:	86 a9       	ldd	r24, Z+54	; 0x36
    190a:	81 7e       	andi	r24, 0xE1	; 225
    190c:	88 60       	ori	r24, 0x08	; 8
    190e:	86 ab       	std	Z+54, r24	; 0x36
    1910:	29 c0       	rjmp	.+82     	; 0x1964 <Timebase_UpCounter_Update+0x18a>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	39 f5       	brne	.+78     	; 0x1964 <Timebase_UpCounter_Update+0x18a>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1916:	eb 01       	movw	r28, r22
    1918:	8b 85       	ldd	r24, Y+11	; 0x0b
    191a:	9c 85       	ldd	r25, Y+12	; 0x0c
    191c:	ad 85       	ldd	r26, Y+13	; 0x0d
    191e:	be 85       	ldd	r27, Y+14	; 0x0e
  return Timebase->UpCounter[window].EndValue;
}


void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1920:	ff 96       	adiw	r30, 0x3f	; 63
    1922:	20 81       	ld	r18, Z
    1924:	31 81       	ldd	r19, Z+1	; 0x01
    1926:	42 81       	ldd	r20, Z+2	; 0x02
    1928:	53 81       	ldd	r21, Z+3	; 0x03
    192a:	ff 97       	sbiw	r30, 0x3f	; 63
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	a4 1f       	adc	r26, r20
    1932:	b5 1f       	adc	r27, r21
    1934:	87 ab       	std	Z+55, r24	; 0x37
    1936:	90 af       	std	Z+56, r25	; 0x38
    1938:	a1 af       	std	Z+57, r26	; 0x39
    193a:	b2 af       	std	Z+58, r27	; 0x3a
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    193c:	83 ad       	ldd	r24, Z+59	; 0x3b
    193e:	94 ad       	ldd	r25, Z+60	; 0x3c
    1940:	a5 ad       	ldd	r26, Z+61	; 0x3d
    1942:	b6 ad       	ldd	r27, Z+62	; 0x3e

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1944:	ed 5b       	subi	r30, 0xBD	; 189
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	82 1b       	sub	r24, r18
    194a:	93 0b       	sbc	r25, r19
    194c:	a4 0b       	sbc	r26, r20
    194e:	b5 0b       	sbc	r27, r21
    1950:	b7 ff       	sbrs	r27, 7
    1952:	04 c0       	rjmp	.+8      	; 0x195c <Timebase_UpCounter_Update+0x182>
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	80 83       	st	Z, r24
    195e:	91 83       	std	Z+1, r25	; 0x01
    1960:	a2 83       	std	Z+2, r26	; 0x02
    1962:	b3 83       	std	Z+3, r27	; 0x03
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	08 95       	ret

00001972 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	e0 91 2e 01 	lds	r30, 0x012E
    1978:	f0 91 2f 01 	lds	r31, 0x012F
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	25 e1       	ldi	r18, 0x15	; 21
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	bc 01       	movw	r22, r24
    1984:	62 9f       	mul	r22, r18
    1986:	c0 01       	movw	r24, r0
    1988:	63 9f       	mul	r22, r19
    198a:	90 0d       	add	r25, r0
    198c:	72 9f       	mul	r23, r18
    198e:	90 0d       	add	r25, r0
    1990:	11 24       	eor	r1, r1
    1992:	e8 0f       	add	r30, r24
    1994:	f9 1f       	adc	r31, r25
    1996:	86 a9       	ldd	r24, Z+54	; 0x36
    1998:	86 95       	lsr	r24
    199a:	8f 70       	andi	r24, 0x0F	; 15
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	09 f4       	brne	.+2      	; 0x19a2 <Timebase_UpCounter_Expired+0x30>
    19a0:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19a2:	84 2f       	mov	r24, r20
    19a4:	08 95       	ret

000019a6 <Timebase_UpCounter_Expired_Event>:


uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    19a6:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    19a8:	e0 91 2e 01 	lds	r30, 0x012E
    19ac:	f0 91 2f 01 	lds	r31, 0x012F
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	85 e1       	ldi	r24, 0x15	; 21
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	bc 01       	movw	r22, r24
    19ba:	26 9f       	mul	r18, r22
    19bc:	c0 01       	movw	r24, r0
    19be:	27 9f       	mul	r18, r23
    19c0:	90 0d       	add	r25, r0
    19c2:	36 9f       	mul	r19, r22
    19c4:	90 0d       	add	r25, r0
    19c6:	11 24       	eor	r1, r1
    19c8:	e8 0f       	add	r30, r24
    19ca:	f9 1f       	adc	r31, r25
    19cc:	86 a9       	ldd	r24, Z+54	; 0x36
    19ce:	86 95       	lsr	r24
    19d0:	8f 70       	andi	r24, 0x0F	; 15
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	11 f0       	breq	.+4      	; 0x19da <Timebase_UpCounter_Expired_Event+0x34>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	08 95       	ret
  Timebase_UpCounter_Clear_Period_Flag(window);
} 


void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    19da:	84 2f       	mov	r24, r20
    19dc:	0e 94 33 0b 	call	0x1666	; 0x1666 <Timebase_UpCounter_Reset>
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    19e2:	08 95       	ret

000019e4 <Timebase_UpCounter_Set_Period_Value_Securely>:


void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
  Timebase->UpCounter[window].PeriodValue = value;
}


uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    19e8:	c0 91 2e 01 	lds	r28, 0x012E
    19ec:	d0 91 2f 01 	lds	r29, 0x012F
    19f0:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    19f2:	25 e1       	ldi	r18, 0x15	; 21
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	fc 01       	movw	r30, r24
    19f8:	e2 9f       	mul	r30, r18
    19fa:	c0 01       	movw	r24, r0
    19fc:	e3 9f       	mul	r30, r19
    19fe:	90 0d       	add	r25, r0
    1a00:	f2 9f       	mul	r31, r18
    1a02:	90 0d       	add	r25, r0
    1a04:	11 24       	eor	r1, r1
    1a06:	c8 0f       	add	r28, r24
    1a08:	d9 1f       	adc	r29, r25
    1a0a:	8e a9       	ldd	r24, Y+54	; 0x36
    1a0c:	80 fd       	sbrc	r24, 0
    1a0e:	16 c0       	rjmp	.+44     	; 0x1a3c <Timebase_UpCounter_Set_Period_Value_Securely+0x58>
  return Timebase->UpCounter[window].PeriodValue;
}


void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    1a10:	fe 01       	movw	r30, r28
    1a12:	e9 5b       	subi	r30, 0xB9	; 185
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	cd 5b       	subi	r28, 0xBD	; 189
    1a18:	df 4f       	sbci	r29, 0xFF	; 255
    1a1a:	88 81       	ld	r24, Y
    1a1c:	99 81       	ldd	r25, Y+1	; 0x01
    1a1e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a20:	bb 81       	ldd	r27, Y+3	; 0x03
    1a22:	c3 54       	subi	r28, 0x43	; 67
    1a24:	d0 40       	sbci	r29, 0x00	; 0
    1a26:	84 0f       	add	r24, r20
    1a28:	95 1f       	adc	r25, r21
    1a2a:	a6 1f       	adc	r26, r22
    1a2c:	b7 1f       	adc	r27, r23
    1a2e:	80 83       	st	Z, r24
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	a2 83       	std	Z+2, r26	; 0x02
    1a34:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->UpCounter[window].Status.PeriodFlag;
}


void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    1a36:	8e a9       	ldd	r24, Y+54	; 0x36
    1a38:	81 60       	ori	r24, 0x01	; 1
    1a3a:	8e ab       	std	Y+54, r24	; 0x36
void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_UpCounter_Set_PeriodValue( window, Timebase_UpCounter_Get_Value( window ) + value);
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}
    1a3c:	df 91       	pop	r29
    1a3e:	cf 91       	pop	r28
    1a40:	08 95       	ret

00001a42 <Timebase_UpCounter_Get_Remaining_Period_Value>:
  Timebase->UpCounter[window].Temporary = value;
}


int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1a42:	e0 91 2e 01 	lds	r30, 0x012E
    1a46:	f0 91 2f 01 	lds	r31, 0x012F
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1a4c:	25 e1       	ldi	r18, 0x15	; 21
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	ac 01       	movw	r20, r24
    1a52:	42 9f       	mul	r20, r18
    1a54:	c0 01       	movw	r24, r0
    1a56:	43 9f       	mul	r20, r19
    1a58:	90 0d       	add	r25, r0
    1a5a:	52 9f       	mul	r21, r18
    1a5c:	90 0d       	add	r25, r0
    1a5e:	11 24       	eor	r1, r1
    1a60:	e8 0f       	add	r30, r24
    1a62:	f9 1f       	adc	r31, r25
    1a64:	df 01       	movw	r26, r30
    1a66:	ad 5b       	subi	r26, 0xBD	; 189
    1a68:	bf 4f       	sbci	r27, 0xFF	; 255
    1a6a:	e9 5b       	subi	r30, 0xB9	; 185
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	20 81       	ld	r18, Z
    1a70:	31 81       	ldd	r19, Z+1	; 0x01
    1a72:	42 81       	ldd	r20, Z+2	; 0x02
    1a74:	53 81       	ldd	r21, Z+3	; 0x03
    1a76:	8d 91       	ld	r24, X+
    1a78:	9d 91       	ld	r25, X+
    1a7a:	0d 90       	ld	r0, X+
    1a7c:	bc 91       	ld	r27, X
    1a7e:	a0 2d       	mov	r26, r0
    1a80:	28 1b       	sub	r18, r24
    1a82:	39 0b       	sbc	r19, r25
    1a84:	4a 0b       	sbc	r20, r26
    1a86:	5b 0b       	sbc	r21, r27
    1a88:	57 ff       	sbrs	r21, 7
    1a8a:	04 c0       	rjmp	.+8      	; 0x1a94 <Timebase_UpCounter_Get_Remaining_Period_Value+0x52>
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1a94:	b9 01       	movw	r22, r18
    1a96:	ca 01       	movw	r24, r20
    1a98:	08 95       	ret

00001a9a <Timebase_UpCounter_Period_Value_Expired>:


uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
  Timebase->UpCounter[window].Temporary = value;
}


int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1a9e:	c0 91 2e 01 	lds	r28, 0x012E
    1aa2:	d0 91 2f 01 	lds	r29, 0x012F
    1aa6:	68 2f       	mov	r22, r24
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1aaa:	85 e1       	ldi	r24, 0x15	; 21
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	68 9f       	mul	r22, r24
    1ab0:	f0 01       	movw	r30, r0
    1ab2:	69 9f       	mul	r22, r25
    1ab4:	f0 0d       	add	r31, r0
    1ab6:	78 9f       	mul	r23, r24
    1ab8:	f0 0d       	add	r31, r0
    1aba:	11 24       	eor	r1, r1
    1abc:	ec 0f       	add	r30, r28
    1abe:	fd 1f       	adc	r31, r29
    1ac0:	df 01       	movw	r26, r30
    1ac2:	ad 5b       	subi	r26, 0xBD	; 189
    1ac4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac6:	e9 5b       	subi	r30, 0xB9	; 185
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	20 81       	ld	r18, Z
    1acc:	31 81       	ldd	r19, Z+1	; 0x01
    1ace:	42 81       	ldd	r20, Z+2	; 0x02
    1ad0:	53 81       	ldd	r21, Z+3	; 0x03
    1ad2:	8d 91       	ld	r24, X+
    1ad4:	9d 91       	ld	r25, X+
    1ad6:	0d 90       	ld	r0, X+
    1ad8:	bc 91       	ld	r27, X
    1ada:	a0 2d       	mov	r26, r0
    1adc:	28 1b       	sub	r18, r24
    1ade:	39 0b       	sbc	r19, r25
    1ae0:	4a 0b       	sbc	r20, r26
    1ae2:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1ae4:	57 fd       	sbrc	r21, 7
    1ae6:	07 c0       	rjmp	.+14     	; 0x1af6 <Timebase_UpCounter_Period_Value_Expired+0x5c>
  return temp;
}


uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1ae8:	21 15       	cp	r18, r1
    1aea:	31 05       	cpc	r19, r1
    1aec:	41 05       	cpc	r20, r1
    1aee:	51 05       	cpc	r21, r1
    1af0:	11 f0       	breq	.+4      	; 0x1af6 <Timebase_UpCounter_Period_Value_Expired+0x5c>
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	12 c0       	rjmp	.+36     	; 0x1b1a <Timebase_UpCounter_Period_Value_Expired+0x80>
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	85 e1       	ldi	r24, 0x15	; 21
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	ac 01       	movw	r20, r24
    1afe:	64 9f       	mul	r22, r20
    1b00:	c0 01       	movw	r24, r0
    1b02:	65 9f       	mul	r22, r21
    1b04:	90 0d       	add	r25, r0
    1b06:	74 9f       	mul	r23, r20
    1b08:	90 0d       	add	r25, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	c8 0f       	add	r28, r24
    1b0e:	d9 1f       	adc	r29, r25
    1b10:	8e a9       	ldd	r24, Y+54	; 0x36
    1b12:	80 ff       	sbrs	r24, 0
    1b14:	21 e0       	ldi	r18, 0x01	; 1
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1b1a:	82 2f       	mov	r24, r18
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	08 95       	ret

00001b22 <Timebase_UpCounter_Period_Value_Expired_Event>:


uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1b22:	1f 93       	push	r17
    1b24:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    1b26:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <Timebase_UpCounter_Period_Value_Expired>
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	11 f0       	breq	.+4      	; 0x1b32 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    1b2e:	80 e0       	ldi	r24, 0x00	; 0
    1b30:	16 c0       	rjmp	.+44     	; 0x1b5e <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1b32:	e0 91 2e 01 	lds	r30, 0x012E
    1b36:	f0 91 2f 01 	lds	r31, 0x012F
    1b3a:	21 2f       	mov	r18, r17
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	85 e1       	ldi	r24, 0x15	; 21
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	ac 01       	movw	r20, r24
    1b44:	24 9f       	mul	r18, r20
    1b46:	c0 01       	movw	r24, r0
    1b48:	25 9f       	mul	r18, r21
    1b4a:	90 0d       	add	r25, r0
    1b4c:	34 9f       	mul	r19, r20
    1b4e:	90 0d       	add	r25, r0
    1b50:	11 24       	eor	r1, r1
    1b52:	e8 0f       	add	r30, r24
    1b54:	f9 1f       	adc	r31, r25
    1b56:	86 a9       	ldd	r24, Z+54	; 0x36
    1b58:	8e 7f       	andi	r24, 0xFE	; 254
    1b5a:	86 ab       	std	Z+54, r24	; 0x36
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1b5e:	1f 91       	pop	r17
    1b60:	08 95       	ret

00001b62 <Timebase_UpCounter_Update_All>:


void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	0e 94 ed 0b 	call	0x17da	; 0x17da <Timebase_UpCounter_Update>
  }
}
    1b68:	08 95       	ret

00001b6a <Timebase_UpCounter_Reset_All>:


void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	0e 94 33 0b 	call	0x1666	; 0x1666 <Timebase_UpCounter_Reset>
  }
}
    1b70:	08 95       	ret

00001b72 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1b72:	e0 91 2e 01 	lds	r30, 0x012E
    1b76:	f0 91 2f 01 	lds	r31, 0x012F
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9c 01       	movw	r18, r24
    1b7e:	44 e0       	ldi	r20, 0x04	; 4
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	4a 95       	dec	r20
    1b86:	e1 f7       	brne	.-8      	; 0x1b80 <Timebase_DownCounter_SS_Get_Status+0xe>
    1b88:	28 0f       	add	r18, r24
    1b8a:	39 1f       	adc	r19, r25
    1b8c:	e2 0f       	add	r30, r18
    1b8e:	f3 1f       	adc	r31, r19
    1b90:	e5 5b       	subi	r30, 0xB5	; 181
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1b98:	8f 70       	andi	r24, 0x0F	; 15
    1b9a:	08 95       	ret

00001b9c <Timebase_DownCounter_SS_Set_Status>:


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1b9c:	e0 91 2e 01 	lds	r30, 0x012E
    1ba0:	f0 91 2f 01 	lds	r31, 0x012F
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	54 e0       	ldi	r21, 0x04	; 4
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	5a 95       	dec	r21
    1bb0:	e1 f7       	brne	.-8      	; 0x1baa <Timebase_DownCounter_SS_Set_Status+0xe>
    1bb2:	28 0f       	add	r18, r24
    1bb4:	39 1f       	adc	r19, r25
    1bb6:	e2 0f       	add	r30, r18
    1bb8:	f3 1f       	adc	r31, r19
    1bba:	e5 5b       	subi	r30, 0xB5	; 181
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	6f 70       	andi	r22, 0x0F	; 15
    1bc0:	66 0f       	add	r22, r22
    1bc2:	80 81       	ld	r24, Z
    1bc4:	81 7e       	andi	r24, 0xE1	; 225
    1bc6:	86 2b       	or	r24, r22
    1bc8:	80 83       	st	Z, r24
}
    1bca:	08 95       	ret

00001bcc <Timebase_DownCounter_SS_Get_Value>:


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    1bcc:	e0 91 2e 01 	lds	r30, 0x012E
    1bd0:	f0 91 2f 01 	lds	r31, 0x012F
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c 01       	movw	r18, r24
    1bd8:	64 e0       	ldi	r22, 0x04	; 4
    1bda:	22 0f       	add	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	6a 95       	dec	r22
    1be0:	e1 f7       	brne	.-8      	; 0x1bda <Timebase_DownCounter_SS_Get_Value+0xe>
    1be2:	28 0f       	add	r18, r24
    1be4:	39 1f       	adc	r19, r25
    1be6:	e2 0f       	add	r30, r18
    1be8:	f3 1f       	adc	r31, r19
    1bea:	ec 5a       	subi	r30, 0xAC	; 172
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	08 95       	ret

00001bf8 <Timebase_DownCounter_SS_Set_Value>:


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1bf8:	e0 91 2e 01 	lds	r30, 0x012E
    1bfc:	f0 91 2f 01 	lds	r31, 0x012F
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	9c 01       	movw	r18, r24
    1c04:	a4 e0       	ldi	r26, 0x04	; 4
    1c06:	22 0f       	add	r18, r18
    1c08:	33 1f       	adc	r19, r19
    1c0a:	aa 95       	dec	r26
    1c0c:	e1 f7       	brne	.-8      	; 0x1c06 <Timebase_DownCounter_SS_Set_Value+0xe>
    1c0e:	28 0f       	add	r18, r24
    1c10:	39 1f       	adc	r19, r25
    1c12:	e2 0f       	add	r30, r18
    1c14:	f3 1f       	adc	r31, r19
    1c16:	ec 5a       	subi	r30, 0xAC	; 172
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	40 83       	st	Z, r20
    1c1c:	51 83       	std	Z+1, r21	; 0x01
    1c1e:	62 83       	std	Z+2, r22	; 0x02
    1c20:	73 83       	std	Z+3, r23	; 0x03
}
    1c22:	08 95       	ret

00001c24 <Timebase_DownCounter_SS_Get_EndValueSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    1c24:	e0 91 2e 01 	lds	r30, 0x012E
    1c28:	f0 91 2f 01 	lds	r31, 0x012F
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9c 01       	movw	r18, r24
    1c30:	b4 e0       	ldi	r27, 0x04	; 4
    1c32:	22 0f       	add	r18, r18
    1c34:	33 1f       	adc	r19, r19
    1c36:	ba 95       	dec	r27
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    1c3a:	28 0f       	add	r18, r24
    1c3c:	39 1f       	adc	r19, r25
    1c3e:	e2 0f       	add	r30, r18
    1c40:	f3 1f       	adc	r31, r19
    1c42:	e4 5b       	subi	r30, 0xB4	; 180
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	08 95       	ret

00001c50 <Timebase_DownCounter_SS_Get_EndValueSubSec>:


int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    1c50:	e0 91 2e 01 	lds	r30, 0x012E
    1c54:	f0 91 2f 01 	lds	r31, 0x012F
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	44 e0       	ldi	r20, 0x04	; 4
    1c5e:	22 0f       	add	r18, r18
    1c60:	33 1f       	adc	r19, r19
    1c62:	4a 95       	dec	r20
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1c66:	28 0f       	add	r18, r24
    1c68:	39 1f       	adc	r19, r25
    1c6a:	e2 0f       	add	r30, r18
    1c6c:	f3 1f       	adc	r31, r19
    1c6e:	e0 5b       	subi	r30, 0xB0	; 176
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	08 95       	ret

00001c7c <Timebase_DownCounter_SS_Set_EndValueSec>:


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1c7c:	e0 91 2e 01 	lds	r30, 0x012E
    1c80:	f0 91 2f 01 	lds	r31, 0x012F
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 01       	movw	r18, r24
    1c88:	a4 e0       	ldi	r26, 0x04	; 4
    1c8a:	22 0f       	add	r18, r18
    1c8c:	33 1f       	adc	r19, r19
    1c8e:	aa 95       	dec	r26
    1c90:	e1 f7       	brne	.-8      	; 0x1c8a <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1c92:	28 0f       	add	r18, r24
    1c94:	39 1f       	adc	r19, r25
    1c96:	e2 0f       	add	r30, r18
    1c98:	f3 1f       	adc	r31, r19
    1c9a:	e4 5b       	subi	r30, 0xB4	; 180
    1c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9e:	40 83       	st	Z, r20
    1ca0:	51 83       	std	Z+1, r21	; 0x01
    1ca2:	62 83       	std	Z+2, r22	; 0x02
    1ca4:	73 83       	std	Z+3, r23	; 0x03
}
    1ca6:	08 95       	ret

00001ca8 <Timebase_DownCounter_SS_Set_EndValueSubSec>:


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1ca8:	e0 91 2e 01 	lds	r30, 0x012E
    1cac:	f0 91 2f 01 	lds	r31, 0x012F
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	b4 e0       	ldi	r27, 0x04	; 4
    1cb6:	22 0f       	add	r18, r18
    1cb8:	33 1f       	adc	r19, r19
    1cba:	ba 95       	dec	r27
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1cbe:	28 0f       	add	r18, r24
    1cc0:	39 1f       	adc	r19, r25
    1cc2:	e2 0f       	add	r30, r18
    1cc4:	f3 1f       	adc	r31, r19
    1cc6:	e0 5b       	subi	r30, 0xB0	; 176
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	40 83       	st	Z, r20
    1ccc:	51 83       	std	Z+1, r21	; 0x01
    1cce:	62 83       	std	Z+2, r22	; 0x02
    1cd0:	73 83       	std	Z+3, r23	; 0x03
}
    1cd2:	08 95       	ret

00001cd4 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1cd4:	e0 91 2e 01 	lds	r30, 0x012E
    1cd8:	f0 91 2f 01 	lds	r31, 0x012F
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9c 01       	movw	r18, r24
    1ce0:	44 e0       	ldi	r20, 0x04	; 4
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	4a 95       	dec	r20
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1cea:	28 0f       	add	r18, r24
    1cec:	39 1f       	adc	r19, r25
    1cee:	e2 0f       	add	r30, r18
    1cf0:	f3 1f       	adc	r31, r19
    1cf2:	e8 5a       	subi	r30, 0xA8	; 168
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	08 95       	ret

00001d00 <Timebase_DownCounter_SS_Set_PeriodValue>:


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1d00:	e0 91 2e 01 	lds	r30, 0x012E
    1d04:	f0 91 2f 01 	lds	r31, 0x012F
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1d0c:	77 ff       	sbrs	r23, 7
    1d0e:	11 c0       	rjmp	.+34     	; 0x1d32 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1d10:	c9 01       	movw	r24, r18
    1d12:	b4 e0       	ldi	r27, 0x04	; 4
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	ba 95       	dec	r27
    1d1a:	e1 f7       	brne	.-8      	; 0x1d14 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1d1c:	82 0f       	add	r24, r18
    1d1e:	93 1f       	adc	r25, r19
    1d20:	e8 0f       	add	r30, r24
    1d22:	f9 1f       	adc	r31, r25
    1d24:	e8 5a       	subi	r30, 0xA8	; 168
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	10 82       	st	Z, r1
    1d2a:	11 82       	std	Z+1, r1	; 0x01
    1d2c:	12 82       	std	Z+2, r1	; 0x02
    1d2e:	13 82       	std	Z+3, r1	; 0x03
    1d30:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1d32:	c9 01       	movw	r24, r18
    1d34:	a4 e0       	ldi	r26, 0x04	; 4
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	aa 95       	dec	r26
    1d3c:	e1 f7       	brne	.-8      	; 0x1d36 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1d3e:	82 0f       	add	r24, r18
    1d40:	93 1f       	adc	r25, r19
    1d42:	e8 0f       	add	r30, r24
    1d44:	f9 1f       	adc	r31, r25
    1d46:	e8 5a       	subi	r30, 0xA8	; 168
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	40 83       	st	Z, r20
    1d4c:	51 83       	std	Z+1, r21	; 0x01
    1d4e:	62 83       	std	Z+2, r22	; 0x02
    1d50:	73 83       	std	Z+3, r23	; 0x03
    1d52:	08 95       	ret

00001d54 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1d54:	e0 91 2e 01 	lds	r30, 0x012E
    1d58:	f0 91 2f 01 	lds	r31, 0x012F
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9c 01       	movw	r18, r24
    1d60:	44 e0       	ldi	r20, 0x04	; 4
    1d62:	22 0f       	add	r18, r18
    1d64:	33 1f       	adc	r19, r19
    1d66:	4a 95       	dec	r20
    1d68:	e1 f7       	brne	.-8      	; 0x1d62 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1d6a:	28 0f       	add	r18, r24
    1d6c:	39 1f       	adc	r19, r25
    1d6e:	e2 0f       	add	r30, r18
    1d70:	f3 1f       	adc	r31, r19
    1d72:	e5 5b       	subi	r30, 0xB5	; 181
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1d78:	81 70       	andi	r24, 0x01	; 1
    1d7a:	08 95       	ret

00001d7c <Timebase_DownCounter_SS_Set_Period_Flag>:


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1d7c:	e0 91 2e 01 	lds	r30, 0x012E
    1d80:	f0 91 2f 01 	lds	r31, 0x012F
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 01       	movw	r18, r24
    1d88:	54 e0       	ldi	r21, 0x04	; 4
    1d8a:	22 0f       	add	r18, r18
    1d8c:	33 1f       	adc	r19, r19
    1d8e:	5a 95       	dec	r21
    1d90:	e1 f7       	brne	.-8      	; 0x1d8a <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1d92:	28 0f       	add	r18, r24
    1d94:	39 1f       	adc	r19, r25
    1d96:	e2 0f       	add	r30, r18
    1d98:	f3 1f       	adc	r31, r19
    1d9a:	e5 5b       	subi	r30, 0xB5	; 181
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	81 60       	ori	r24, 0x01	; 1
    1da2:	80 83       	st	Z, r24
}
    1da4:	08 95       	ret

00001da6 <Timebase_DownCounter_SS_Clear_Period_Flag>:


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1da6:	e0 91 2e 01 	lds	r30, 0x012E
    1daa:	f0 91 2f 01 	lds	r31, 0x012F
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9c 01       	movw	r18, r24
    1db2:	64 e0       	ldi	r22, 0x04	; 4
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	6a 95       	dec	r22
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1dbc:	28 0f       	add	r18, r24
    1dbe:	39 1f       	adc	r19, r25
    1dc0:	e2 0f       	add	r30, r18
    1dc2:	f3 1f       	adc	r31, r19
    1dc4:	e5 5b       	subi	r30, 0xB5	; 181
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	8e 7f       	andi	r24, 0xFE	; 254
    1dcc:	80 83       	st	Z, r24
}
    1dce:	08 95       	ret

00001dd0 <Timebase_DownCounter_SS_Reset>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1dd0:	e0 91 2e 01 	lds	r30, 0x012E
    1dd4:	f0 91 2f 01 	lds	r31, 0x012F
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 01       	movw	r18, r24
    1ddc:	74 e0       	ldi	r23, 0x04	; 4
    1dde:	22 0f       	add	r18, r18
    1de0:	33 1f       	adc	r19, r19
    1de2:	7a 95       	dec	r23
    1de4:	e1 f7       	brne	.-8      	; 0x1dde <Timebase_DownCounter_SS_Reset+0xe>
    1de6:	28 0f       	add	r18, r24
    1de8:	39 1f       	adc	r19, r25
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	e0 5b       	subi	r30, 0xB0	; 176
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	10 82       	st	Z, r1
    1df4:	11 82       	std	Z+1, r1	; 0x01
    1df6:	12 82       	std	Z+2, r1	; 0x02
    1df8:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1dfa:	12 92       	st	-Z, r1
    1dfc:	12 92       	st	-Z, r1
    1dfe:	12 92       	st	-Z, r1
    1e00:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e02:	38 96       	adiw	r30, 0x08	; 8
    1e04:	10 82       	st	Z, r1
    1e06:	11 82       	std	Z+1, r1	; 0x01
    1e08:	12 82       	std	Z+2, r1	; 0x02
    1e0a:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e0c:	39 97       	sbiw	r30, 0x09	; 9
    1e0e:	80 81       	ld	r24, Z
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e10:	80 7e       	andi	r24, 0xE0	; 224
    1e12:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1e14:	08 95       	ret

00001e16 <Timebase_DownCounter_SS_Clear_All_Flags>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1e16:	e0 91 2e 01 	lds	r30, 0x012E
    1e1a:	f0 91 2f 01 	lds	r31, 0x012F
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	9c 01       	movw	r18, r24
    1e22:	a4 e0       	ldi	r26, 0x04	; 4
    1e24:	22 0f       	add	r18, r18
    1e26:	33 1f       	adc	r19, r19
    1e28:	aa 95       	dec	r26
    1e2a:	e1 f7       	brne	.-8      	; 0x1e24 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1e2c:	28 0f       	add	r18, r24
    1e2e:	39 1f       	adc	r19, r25
    1e30:	e2 0f       	add	r30, r18
    1e32:	f3 1f       	adc	r31, r19
    1e34:	e0 5b       	subi	r30, 0xB0	; 176
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	10 82       	st	Z, r1
    1e3a:	11 82       	std	Z+1, r1	; 0x01
    1e3c:	12 82       	std	Z+2, r1	; 0x02
    1e3e:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e40:	12 92       	st	-Z, r1
    1e42:	12 92       	st	-Z, r1
    1e44:	12 92       	st	-Z, r1
    1e46:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e48:	38 96       	adiw	r30, 0x08	; 8
    1e4a:	10 82       	st	Z, r1
    1e4c:	11 82       	std	Z+1, r1	; 0x01
    1e4e:	12 82       	std	Z+2, r1	; 0x02
    1e50:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e52:	39 97       	sbiw	r30, 0x09	; 9
    1e54:	80 81       	ld	r24, Z
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e56:	80 7e       	andi	r24, 0xE0	; 224
    1e58:	80 83       	st	Z, r24
} 


void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1e5a:	08 95       	ret

00001e5c <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e5c:	e0 91 2e 01 	lds	r30, 0x012E
    1e60:	f0 91 2f 01 	lds	r31, 0x012F
    1e64:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1e66:	9c 01       	movw	r18, r24
    1e68:	b4 e0       	ldi	r27, 0x04	; 4
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	ba 95       	dec	r27
    1e70:	e1 f7       	brne	.-8      	; 0x1e6a <Timebase_DownCounter_SS_Start+0xe>
    1e72:	28 0f       	add	r18, r24
    1e74:	39 1f       	adc	r19, r25
    1e76:	e2 0f       	add	r30, r18
    1e78:	f3 1f       	adc	r31, r19
    1e7a:	e5 5b       	subi	r30, 0xB5	; 181
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	90 81       	ld	r25, Z
    1e80:	89 2f       	mov	r24, r25
    1e82:	86 95       	lsr	r24
    1e84:	8f 70       	andi	r24, 0x0F	; 15
    1e86:	81 30       	cpi	r24, 0x01	; 1
    1e88:	19 f0       	breq	.+6      	; 0x1e90 <Timebase_DownCounter_SS_Start+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e8a:	91 7e       	andi	r25, 0xE1	; 225
    1e8c:	92 60       	ori	r25, 0x02	; 2
    1e8e:	90 83       	st	Z, r25
    1e90:	08 95       	ret

00001e92 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e92:	e0 91 2e 01 	lds	r30, 0x012E
    1e96:	f0 91 2f 01 	lds	r31, 0x012F
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1e9c:	9c 01       	movw	r18, r24
    1e9e:	44 e0       	ldi	r20, 0x04	; 4
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	4a 95       	dec	r20
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <Timebase_DownCounter_SS_Stop+0xe>
    1ea8:	28 0f       	add	r18, r24
    1eaa:	39 1f       	adc	r19, r25
    1eac:	e2 0f       	add	r30, r18
    1eae:	f3 1f       	adc	r31, r19
    1eb0:	e5 5b       	subi	r30, 0xB5	; 181
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	90 81       	ld	r25, Z
    1eb6:	89 2f       	mov	r24, r25
    1eb8:	86 95       	lsr	r24
    1eba:	8f 70       	andi	r24, 0x0F	; 15
    1ebc:	82 30       	cpi	r24, 0x02	; 2
    1ebe:	19 f0       	breq	.+6      	; 0x1ec6 <Timebase_DownCounter_SS_Stop+0x34>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1ec0:	91 7e       	andi	r25, 0xE1	; 225
    1ec2:	94 60       	ori	r25, 0x04	; 4
    1ec4:	90 83       	st	Z, r25
    1ec6:	08 95       	ret

00001ec8 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1ec8:	2f 92       	push	r2
    1eca:	3f 92       	push	r3
    1ecc:	4f 92       	push	r4
    1ece:	5f 92       	push	r5
    1ed0:	6f 92       	push	r6
    1ed2:	7f 92       	push	r7
    1ed4:	8f 92       	push	r8
    1ed6:	9f 92       	push	r9
    1ed8:	af 92       	push	r10
    1eda:	bf 92       	push	r11
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	00 d0       	rcall	.+0      	; 0x1eee <Timebase_DownCounter_SS_Set_Securely+0x26>
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <Timebase_DownCounter_SS_Set_Securely+0x28>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	4a 01       	movw	r8, r20
    1ef6:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ef8:	20 91 2e 01 	lds	r18, 0x012E
    1efc:	30 91 2f 01 	lds	r19, 0x012F
    1f00:	3c 83       	std	Y+4, r19	; 0x04
    1f02:	2b 83       	std	Y+3, r18	; 0x03
    1f04:	a8 2f       	mov	r26, r24
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ba 83       	std	Y+2, r27	; 0x02
    1f0a:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1f0c:	fd 01       	movw	r30, r26
    1f0e:	64 e0       	ldi	r22, 0x04	; 4
    1f10:	ee 0f       	add	r30, r30
    1f12:	ff 1f       	adc	r31, r31
    1f14:	6a 95       	dec	r22
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <Timebase_DownCounter_SS_Set_Securely+0x48>
    1f18:	ea 0f       	add	r30, r26
    1f1a:	fb 1f       	adc	r31, r27
    1f1c:	e2 0f       	add	r30, r18
    1f1e:	f3 1f       	adc	r31, r19
    1f20:	e5 5b       	subi	r30, 0xB5	; 181
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	80 81       	ld	r24, Z
    1f26:	eb 54       	subi	r30, 0x4B	; 75
    1f28:	f0 40       	sbci	r31, 0x00	; 0
    1f2a:	86 95       	lsr	r24
    1f2c:	8f 70       	andi	r24, 0x0F	; 15
    1f2e:	09 f0       	breq	.+2      	; 0x1f32 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1f30:	70 c0       	rjmp	.+224    	; 0x2012 <Timebase_DownCounter_SS_Set_Securely+0x14a>
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f32:	ec 5a       	subi	r30, 0xAC	; 172
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	80 82       	st	Z, r8
    1f38:	91 82       	std	Z+1, r9	; 0x01
    1f3a:	a2 82       	std	Z+2, r10	; 0x02
    1f3c:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1f3e:	f9 01       	movw	r30, r18
    1f40:	c1 84       	ldd	r12, Z+9	; 0x09
    1f42:	d2 84       	ldd	r13, Z+10	; 0x0a
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1f44:	23 84       	ldd	r2, Z+11	; 0x0b
    1f46:	34 84       	ldd	r3, Z+12	; 0x0c
    1f48:	45 84       	ldd	r4, Z+13	; 0x0d
    1f4a:	56 84       	ldd	r5, Z+14	; 0x0e
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
    1f4c:	20 81       	ld	r18, Z
    1f4e:	31 81       	ldd	r19, Z+1	; 0x01
    1f50:	40 e0       	ldi	r20, 0x00	; 0
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	c5 01       	movw	r24, r10
    1f56:	b4 01       	movw	r22, r8
    1f58:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    1f5c:	7b 01       	movw	r14, r22
    1f5e:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
    1f60:	ab 81       	ldd	r26, Y+3	; 0x03
    1f62:	bc 81       	ldd	r27, Y+4	; 0x04
    1f64:	2d 91       	ld	r18, X+
    1f66:	3c 91       	ld	r19, X
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	50 e0       	ldi	r21, 0x00	; 0
    1f6c:	c5 01       	movw	r24, r10
    1f6e:	b4 01       	movw	r22, r8
    1f70:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    1f74:	c9 01       	movw	r24, r18
    1f76:	da 01       	movw	r26, r20
    1f78:	3c 01       	movw	r6, r24
    1f7a:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1f7c:	56 01       	movw	r10, r12
    1f7e:	cc 24       	eor	r12, r12
    1f80:	dd 24       	eor	r13, r13
    1f82:	ae 0c       	add	r10, r14
    1f84:	bf 1c       	adc	r11, r15
    1f86:	c0 1e       	adc	r12, r16
    1f88:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f8e:	80 81       	ld	r24, Z
    1f90:	91 81       	ldd	r25, Z+1	; 0x01
    1f92:	a0 e0       	ldi	r26, 0x00	; 0
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	a8 16       	cp	r10, r24
    1f98:	b9 06       	cpc	r11, r25
    1f9a:	ca 06       	cpc	r12, r26
    1f9c:	db 06       	cpc	r13, r27
    1f9e:	94 f0       	brlt	.+36     	; 0x1fc4 <Timebase_DownCounter_SS_Set_Securely+0xfc>
	  sec_val += 1;
    1fa0:	08 94       	sec
    1fa2:	61 1c       	adc	r6, r1
    1fa4:	71 1c       	adc	r7, r1
    1fa6:	81 1c       	adc	r8, r1
    1fa8:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1faa:	20 81       	ld	r18, Z
    1fac:	31 81       	ldd	r19, Z+1	; 0x01
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	c6 01       	movw	r24, r12
    1fb4:	b5 01       	movw	r22, r10
    1fb6:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    1fba:	ac 01       	movw	r20, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	da 01       	movw	r26, r20
    1fc0:	5c 01       	movw	r10, r24
    1fc2:	6d 01       	movw	r12, r26
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	54 e0       	ldi	r21, 0x04	; 4
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	5a 95       	dec	r21
    1fd0:	e1 f7       	brne	.-8      	; 0x1fca <Timebase_DownCounter_SS_Set_Securely+0x102>
    1fd2:	29 81       	ldd	r18, Y+1	; 0x01
    1fd4:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	e8 0f       	add	r30, r24
    1fe0:	f9 1f       	adc	r31, r25
    1fe2:	e4 5b       	subi	r30, 0xB4	; 180
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	26 0c       	add	r2, r6
    1fe8:	37 1c       	adc	r3, r7
    1fea:	48 1c       	adc	r4, r8
    1fec:	59 1c       	adc	r5, r9
    1fee:	21 92       	st	Z+, r2
    1ff0:	31 92       	st	Z+, r3
    1ff2:	41 92       	st	Z+, r4
    1ff4:	51 92       	st	Z+, r5
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1ff6:	a0 82       	st	Z, r10
    1ff8:	b1 82       	std	Z+1, r11	; 0x01
    1ffa:	c2 82       	std	Z+2, r12	; 0x02
    1ffc:	d3 82       	std	Z+3, r13	; 0x03
  Timebase_DownCounter_SS_Reset( window );
}


void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1ffe:	35 97       	sbiw	r30, 0x05	; 5
    2000:	90 81       	ld	r25, Z
    2002:	89 2f       	mov	r24, r25
    2004:	86 95       	lsr	r24
    2006:	8f 70       	andi	r24, 0x0F	; 15
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	19 f0       	breq	.+6      	; 0x2012 <Timebase_DownCounter_SS_Set_Securely+0x14a>
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    200c:	91 7e       	andi	r25, 0xE1	; 225
    200e:	92 60       	ori	r25, 0x02	; 2
    2010:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	bf 90       	pop	r11
    202c:	af 90       	pop	r10
    202e:	9f 90       	pop	r9
    2030:	8f 90       	pop	r8
    2032:	7f 90       	pop	r7
    2034:	6f 90       	pop	r6
    2036:	5f 90       	pop	r5
    2038:	4f 90       	pop	r4
    203a:	3f 90       	pop	r3
    203c:	2f 90       	pop	r2
    203e:	08 95       	ret

00002040 <Timebase_DownCounter_SS_Set_Forcefully>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2040:	e0 91 2e 01 	lds	r30, 0x012E
    2044:	f0 91 2f 01 	lds	r31, 0x012F
    2048:	a8 2f       	mov	r26, r24
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	9d 01       	movw	r18, r26
    204e:	94 e0       	ldi	r25, 0x04	; 4
    2050:	22 0f       	add	r18, r18
    2052:	33 1f       	adc	r19, r19
    2054:	9a 95       	dec	r25
    2056:	e1 f7       	brne	.-8      	; 0x2050 <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    2058:	2a 0f       	add	r18, r26
    205a:	3b 1f       	adc	r19, r27
    205c:	e2 0f       	add	r30, r18
    205e:	f3 1f       	adc	r31, r19
    2060:	e0 5b       	subi	r30, 0xB0	; 176
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	10 82       	st	Z, r1
    2066:	11 82       	std	Z+1, r1	; 0x01
    2068:	12 82       	std	Z+2, r1	; 0x02
    206a:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    206c:	12 92       	st	-Z, r1
    206e:	12 92       	st	-Z, r1
    2070:	12 92       	st	-Z, r1
    2072:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2074:	38 96       	adiw	r30, 0x08	; 8
    2076:	10 82       	st	Z, r1
    2078:	11 82       	std	Z+1, r1	; 0x01
    207a:	12 82       	std	Z+2, r1	; 0x02
    207c:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    207e:	39 97       	sbiw	r30, 0x09	; 9
    2080:	90 81       	ld	r25, Z
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2082:	90 7e       	andi	r25, 0xE0	; 224
    2084:	90 83       	st	Z, r25
}


void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    2086:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <Timebase_DownCounter_SS_Set_Securely>
} 
    208a:	08 95       	ret

0000208c <Timebase_DownCounter_SS_Update>:


void Timebase_DownCounter_SS_Update(uint8_t window){
    208c:	2f 92       	push	r2
    208e:	3f 92       	push	r3
    2090:	4f 92       	push	r4
    2092:	5f 92       	push	r5
    2094:	6f 92       	push	r6
    2096:	7f 92       	push	r7
    2098:	8f 92       	push	r8
    209a:	9f 92       	push	r9
    209c:	af 92       	push	r10
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    20b0:	e0 91 2e 01 	lds	r30, 0x012E
    20b4:	f0 91 2f 01 	lds	r31, 0x012F
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	ec 01       	movw	r28, r24
    20bc:	44 e0       	ldi	r20, 0x04	; 4
    20be:	cc 0f       	add	r28, r28
    20c0:	dd 1f       	adc	r29, r29
    20c2:	4a 95       	dec	r20
    20c4:	e1 f7       	brne	.-8      	; 0x20be <Timebase_DownCounter_SS_Update+0x32>
    20c6:	c8 0f       	add	r28, r24
    20c8:	d9 1f       	adc	r29, r25
    20ca:	ce 0f       	add	r28, r30
    20cc:	df 1f       	adc	r29, r31
    20ce:	3b e4       	ldi	r19, 0x4B	; 75
    20d0:	c3 2e       	mov	r12, r19
    20d2:	d1 2c       	mov	r13, r1
    20d4:	cc 0e       	add	r12, r28
    20d6:	dd 1e       	adc	r13, r29
    20d8:	d6 01       	movw	r26, r12
    20da:	8c 91       	ld	r24, X
    20dc:	86 95       	lsr	r24
    20de:	8f 70       	andi	r24, 0x0F	; 15


void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	09 f0       	breq	.+2      	; 0x20e6 <Timebase_DownCounter_SS_Update+0x5a>
    20e4:	4e c0       	rjmp	.+156    	; 0x2182 <Timebase_DownCounter_SS_Update+0xf6>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    20e6:	e1 84       	ldd	r14, Z+9	; 0x09
    20e8:	f2 84       	ldd	r15, Z+10	; 0x0a

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
    20ea:	00 e0       	ldi	r16, 0x00	; 0
    20ec:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    20ee:	63 84       	ldd	r6, Z+11	; 0x0b
    20f0:	74 84       	ldd	r7, Z+12	; 0x0c
    20f2:	85 84       	ldd	r8, Z+13	; 0x0d
    20f4:	96 84       	ldd	r9, Z+14	; 0x0e
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    20f6:	2c e4       	ldi	r18, 0x4C	; 76
    20f8:	a2 2e       	mov	r10, r18
    20fa:	b1 2c       	mov	r11, r1
    20fc:	ac 0e       	add	r10, r28
    20fe:	bd 1e       	adc	r11, r29
    2100:	d5 01       	movw	r26, r10
    2102:	2d 91       	ld	r18, X+
    2104:	3d 91       	ld	r19, X+
    2106:	4d 91       	ld	r20, X+
    2108:	5c 91       	ld	r21, X
    210a:	26 19       	sub	r18, r6
    210c:	37 09       	sbc	r19, r7
    210e:	48 09       	sbc	r20, r8
    2110:	59 09       	sbc	r21, r9
	temp_s *= Timebase->Config.UpdateRate;
    2112:	60 81       	ld	r22, Z
    2114:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 84 1c 	call	0x3908	; 0x3908 <__mulsi3>
    211e:	6e 19       	sub	r22, r14
    2120:	7f 09       	sbc	r23, r15
    2122:	80 0b       	sbc	r24, r16
    2124:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
    2126:	de 01       	movw	r26, r28
    2128:	a0 5b       	subi	r26, 0xB0	; 176
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	2d 91       	ld	r18, X+
    212e:	3d 91       	ld	r19, X+
    2130:	4d 91       	ld	r20, X+
    2132:	5c 91       	ld	r21, X
    2134:	13 97       	sbiw	r26, 0x03	; 3
    2136:	62 0f       	add	r22, r18
    2138:	73 1f       	adc	r23, r19
    213a:	84 1f       	adc	r24, r20
    213c:	95 1f       	adc	r25, r21
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    213e:	fe 01       	movw	r30, r28
    2140:	ec 5a       	subi	r30, 0xAC	; 172
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	60 83       	st	Z, r22
    2146:	71 83       	std	Z+1, r23	; 0x01
    2148:	82 83       	std	Z+2, r24	; 0x02
    214a:	93 83       	std	Z+3, r25	; 0x03
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    214c:	16 16       	cp	r1, r22
    214e:	17 06       	cpc	r1, r23
    2150:	18 06       	cpc	r1, r24
    2152:	19 06       	cpc	r1, r25
    2154:	0c f4       	brge	.+2      	; 0x2158 <Timebase_DownCounter_SS_Update+0xcc>
    2156:	48 c0       	rjmp	.+144    	; 0x21e8 <Timebase_DownCounter_SS_Update+0x15c>
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2158:	1d 92       	st	X+, r1
    215a:	1d 92       	st	X+, r1
    215c:	1d 92       	st	X+, r1
    215e:	1c 92       	st	X, r1
    2160:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2162:	d5 01       	movw	r26, r10
    2164:	1d 92       	st	X+, r1
    2166:	1d 92       	st	X+, r1
    2168:	1d 92       	st	X+, r1
    216a:	1c 92       	st	X, r1
    216c:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    216e:	10 82       	st	Z, r1
    2170:	11 82       	std	Z+1, r1	; 0x01
    2172:	12 82       	std	Z+2, r1	; 0x02
    2174:	13 82       	std	Z+3, r1	; 0x03
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2176:	f6 01       	movw	r30, r12
    2178:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    217a:	80 7e       	andi	r24, 0xE0	; 224
    217c:	88 60       	ori	r24, 0x08	; 8
    217e:	80 83       	st	Z, r24
    2180:	33 c0       	rjmp	.+102    	; 0x21e8 <Timebase_DownCounter_SS_Update+0x15c>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    2182:	82 30       	cpi	r24, 0x02	; 2
    2184:	89 f5       	brne	.+98     	; 0x21e8 <Timebase_DownCounter_SS_Update+0x15c>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    2186:	61 84       	ldd	r6, Z+9	; 0x09
    2188:	72 84       	ldd	r7, Z+10	; 0x0a
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    218a:	e3 84       	ldd	r14, Z+11	; 0x0b
    218c:	f4 84       	ldd	r15, Z+12	; 0x0c
    218e:	05 85       	ldd	r16, Z+13	; 0x0d
    2190:	16 85       	ldd	r17, Z+14	; 0x0e
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2192:	cc 5a       	subi	r28, 0xAC	; 172
    2194:	df 4f       	sbci	r29, 0xFF	; 255
    2196:	28 80       	ld	r2, Y
    2198:	39 80       	ldd	r3, Y+1	; 0x01
    219a:	4a 80       	ldd	r4, Y+2	; 0x02
    219c:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
    219e:	20 81       	ld	r18, Z
    21a0:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
    21a2:	a0 80       	ld	r10, Z
    21a4:	b1 80       	ldd	r11, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    21a6:	28 97       	sbiw	r28, 0x08	; 8
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	c2 01       	movw	r24, r4
    21ae:	b1 01       	movw	r22, r2
    21b0:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    21b4:	e2 0e       	add	r14, r18
    21b6:	f3 1e       	adc	r15, r19
    21b8:	04 1f       	adc	r16, r20
    21ba:	15 1f       	adc	r17, r21
    21bc:	e9 92       	st	Y+, r14
    21be:	f9 92       	st	Y+, r15
    21c0:	09 93       	st	Y+, r16
    21c2:	19 93       	st	Y+, r17
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    21c4:	cc 24       	eor	r12, r12
    21c6:	dd 24       	eor	r13, r13
    21c8:	c2 01       	movw	r24, r4
    21ca:	b1 01       	movw	r22, r2
    21cc:	a6 01       	movw	r20, r12
    21ce:	95 01       	movw	r18, r10
    21d0:	0e 94 c5 1c 	call	0x398a	; 0x398a <__divmodsi4>
    21d4:	88 24       	eor	r8, r8
    21d6:	99 24       	eor	r9, r9
    21d8:	66 0e       	add	r6, r22
    21da:	77 1e       	adc	r7, r23
    21dc:	88 1e       	adc	r8, r24
    21de:	99 1e       	adc	r9, r25
    21e0:	68 82       	st	Y, r6
    21e2:	79 82       	std	Y+1, r7	; 0x01
    21e4:	8a 82       	std	Y+2, r8	; 0x02
    21e6:	9b 82       	std	Y+3, r9	; 0x03
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	df 90       	pop	r13
    21f6:	cf 90       	pop	r12
    21f8:	bf 90       	pop	r11
    21fa:	af 90       	pop	r10
    21fc:	9f 90       	pop	r9
    21fe:	8f 90       	pop	r8
    2200:	7f 90       	pop	r7
    2202:	6f 90       	pop	r6
    2204:	5f 90       	pop	r5
    2206:	4f 90       	pop	r4
    2208:	3f 90       	pop	r3
    220a:	2f 90       	pop	r2
    220c:	08 95       	ret

0000220e <Timebase_DownCounter_SS_Expired>:


uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	e0 91 2e 01 	lds	r30, 0x012E
    2214:	f0 91 2f 01 	lds	r31, 0x012F
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	9c 01       	movw	r18, r24
    221c:	54 e0       	ldi	r21, 0x04	; 4
    221e:	22 0f       	add	r18, r18
    2220:	33 1f       	adc	r19, r19
    2222:	5a 95       	dec	r21
    2224:	e1 f7       	brne	.-8      	; 0x221e <Timebase_DownCounter_SS_Expired+0x10>
    2226:	28 0f       	add	r18, r24
    2228:	39 1f       	adc	r19, r25
    222a:	e2 0f       	add	r30, r18
    222c:	f3 1f       	adc	r31, r19
    222e:	e5 5b       	subi	r30, 0xB5	; 181
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	80 81       	ld	r24, Z
    2234:	86 95       	lsr	r24
    2236:	8f 70       	andi	r24, 0x0F	; 15
    2238:	84 30       	cpi	r24, 0x04	; 4
    223a:	09 f4       	brne	.+2      	; 0x223e <Timebase_DownCounter_SS_Expired+0x30>
    223c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    223e:	84 2f       	mov	r24, r20
    2240:	08 95       	ret

00002242 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    2242:	e0 91 2e 01 	lds	r30, 0x012E
    2246:	f0 91 2f 01 	lds	r31, 0x012F
    224a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    224c:	9c 01       	movw	r18, r24
    224e:	64 e0       	ldi	r22, 0x04	; 4
    2250:	22 0f       	add	r18, r18
    2252:	33 1f       	adc	r19, r19
    2254:	6a 95       	dec	r22
    2256:	e1 f7       	brne	.-8      	; 0x2250 <Timebase_DownCounter_SS_Expired_Event+0xe>
    2258:	28 0f       	add	r18, r24
    225a:	39 1f       	adc	r19, r25
    225c:	e2 0f       	add	r30, r18
    225e:	f3 1f       	adc	r31, r19
    2260:	df 01       	movw	r26, r30
    2262:	a5 5b       	subi	r26, 0xB5	; 181
    2264:	bf 4f       	sbci	r27, 0xFF	; 255
    2266:	8c 91       	ld	r24, X
    2268:	86 95       	lsr	r24
    226a:	8f 70       	andi	r24, 0x0F	; 15
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	11 f0       	breq	.+4      	; 0x2274 <Timebase_DownCounter_SS_Expired_Event+0x32>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	08 95       	ret
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2274:	e0 5b       	subi	r30, 0xB0	; 176
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	10 82       	st	Z, r1
    227a:	11 82       	std	Z+1, r1	; 0x01
    227c:	12 82       	std	Z+2, r1	; 0x02
    227e:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2280:	12 92       	st	-Z, r1
    2282:	12 92       	st	-Z, r1
    2284:	12 92       	st	-Z, r1
    2286:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2288:	38 96       	adiw	r30, 0x08	; 8
    228a:	10 82       	st	Z, r1
    228c:	11 82       	std	Z+1, r1	; 0x01
    228e:	12 82       	std	Z+2, r1	; 0x02
    2290:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2292:	8c 91       	ld	r24, X
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2294:	80 7e       	andi	r24, 0xE0	; 224
    2296:	8c 93       	st	X, r24
    2298:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    229a:	08 95       	ret

0000229c <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    22a0:	c0 91 2e 01 	lds	r28, 0x012E
    22a4:	d0 91 2f 01 	lds	r29, 0x012F
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    22ac:	f9 01       	movw	r30, r18
    22ae:	a4 e0       	ldi	r26, 0x04	; 4
    22b0:	ee 0f       	add	r30, r30
    22b2:	ff 1f       	adc	r31, r31
    22b4:	aa 95       	dec	r26
    22b6:	e1 f7       	brne	.-8      	; 0x22b0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    22b8:	e2 0f       	add	r30, r18
    22ba:	f3 1f       	adc	r31, r19
    22bc:	ec 0f       	add	r30, r28
    22be:	fd 1f       	adc	r31, r29
    22c0:	e5 5b       	subi	r30, 0xB5	; 181
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	eb 54       	subi	r30, 0x4B	; 75
    22c8:	f0 40       	sbci	r31, 0x00	; 0
    22ca:	80 fd       	sbrc	r24, 0
    22cc:	24 c0       	rjmp	.+72     	; 0x2316 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    22ce:	ec 5a       	subi	r30, 0xAC	; 172
    22d0:	ff 4f       	sbci	r31, 0xFF	; 255
    22d2:	81 91       	ld	r24, Z+
    22d4:	91 91       	ld	r25, Z+
    22d6:	a1 91       	ld	r26, Z+
    22d8:	b1 91       	ld	r27, Z+
    22da:	84 1b       	sub	r24, r20
    22dc:	95 0b       	sbc	r25, r21
    22de:	a6 0b       	sbc	r26, r22
    22e0:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounterSS[window].PeriodValue;
}


void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    22e2:	b7 ff       	sbrs	r27, 7
    22e4:	05 c0       	rjmp	.+10     	; 0x22f0 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    22e6:	10 82       	st	Z, r1
    22e8:	11 82       	std	Z+1, r1	; 0x01
    22ea:	12 82       	std	Z+2, r1	; 0x02
    22ec:	13 82       	std	Z+3, r1	; 0x03
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    22f0:	80 83       	st	Z, r24
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	a2 83       	std	Z+2, r26	; 0x02
    22f6:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}


void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    22f8:	f9 01       	movw	r30, r18
    22fa:	74 e0       	ldi	r23, 0x04	; 4
    22fc:	ee 0f       	add	r30, r30
    22fe:	ff 1f       	adc	r31, r31
    2300:	7a 95       	dec	r23
    2302:	e1 f7       	brne	.-8      	; 0x22fc <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    2304:	e2 0f       	add	r30, r18
    2306:	f3 1f       	adc	r31, r19
    2308:	ec 0f       	add	r30, r28
    230a:	fd 1f       	adc	r31, r29
    230c:	e5 5b       	subi	r30, 0xB5	; 181
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	80 81       	ld	r24, Z
    2312:	81 60       	ori	r24, 0x01	; 1
    2314:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	08 95       	ret

0000231c <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    231c:	e0 91 2e 01 	lds	r30, 0x012E
    2320:	f0 91 2f 01 	lds	r31, 0x012F
    2324:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2326:	9c 01       	movw	r18, r24
    2328:	b4 e0       	ldi	r27, 0x04	; 4
    232a:	22 0f       	add	r18, r18
    232c:	33 1f       	adc	r19, r19
    232e:	ba 95       	dec	r27
    2330:	e1 f7       	brne	.-8      	; 0x232a <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    2332:	28 0f       	add	r18, r24
    2334:	39 1f       	adc	r19, r25
    2336:	e2 0f       	add	r30, r18
    2338:	f3 1f       	adc	r31, r19
    233a:	df 01       	movw	r26, r30
    233c:	a8 5a       	subi	r26, 0xA8	; 168
    233e:	bf 4f       	sbci	r27, 0xFF	; 255
    2340:	ec 5a       	subi	r30, 0xAC	; 172
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	20 81       	ld	r18, Z
    2346:	31 81       	ldd	r19, Z+1	; 0x01
    2348:	42 81       	ldd	r20, Z+2	; 0x02
    234a:	53 81       	ldd	r21, Z+3	; 0x03
    234c:	8d 91       	ld	r24, X+
    234e:	9d 91       	ld	r25, X+
    2350:	0d 90       	ld	r0, X+
    2352:	bc 91       	ld	r27, X
    2354:	a0 2d       	mov	r26, r0
    2356:	28 1b       	sub	r18, r24
    2358:	39 0b       	sbc	r19, r25
    235a:	4a 0b       	sbc	r20, r26
    235c:	5b 0b       	sbc	r21, r27
    235e:	57 ff       	sbrs	r21, 7
    2360:	04 c0       	rjmp	.+8      	; 0x236a <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    236a:	b9 01       	movw	r22, r18
    236c:	ca 01       	movw	r24, r20
    236e:	08 95       	ret

00002370 <Timebase_DownCounter_SS_Period_Value_Expired>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
  Timebase->DownCounterSS[window].Status.Value = value;
}


int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2374:	c0 91 2e 01 	lds	r28, 0x012E
    2378:	d0 91 2f 01 	lds	r29, 0x012F
    237c:	68 2f       	mov	r22, r24
    237e:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    2380:	fb 01       	movw	r30, r22
    2382:	44 e0       	ldi	r20, 0x04	; 4
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	4a 95       	dec	r20
    238a:	e1 f7       	brne	.-8      	; 0x2384 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    238c:	e6 0f       	add	r30, r22
    238e:	f7 1f       	adc	r31, r23
    2390:	ec 0f       	add	r30, r28
    2392:	fd 1f       	adc	r31, r29
    2394:	df 01       	movw	r26, r30
    2396:	a8 5a       	subi	r26, 0xA8	; 168
    2398:	bf 4f       	sbci	r27, 0xFF	; 255
    239a:	ec 5a       	subi	r30, 0xAC	; 172
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	20 81       	ld	r18, Z
    23a0:	31 81       	ldd	r19, Z+1	; 0x01
    23a2:	42 81       	ldd	r20, Z+2	; 0x02
    23a4:	53 81       	ldd	r21, Z+3	; 0x03
    23a6:	8d 91       	ld	r24, X+
    23a8:	9d 91       	ld	r25, X+
    23aa:	0d 90       	ld	r0, X+
    23ac:	bc 91       	ld	r27, X
    23ae:	a0 2d       	mov	r26, r0
    23b0:	28 1b       	sub	r18, r24
    23b2:	39 0b       	sbc	r19, r25
    23b4:	4a 0b       	sbc	r20, r26
    23b6:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    23b8:	57 fd       	sbrc	r21, 7
    23ba:	07 c0       	rjmp	.+14     	; 0x23ca <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  return temp;
}


uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    23bc:	21 15       	cp	r18, r1
    23be:	31 05       	cpc	r19, r1
    23c0:	41 05       	cpc	r20, r1
    23c2:	51 05       	cpc	r21, r1
    23c4:	11 f0       	breq	.+4      	; 0x23ca <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	12 c0       	rjmp	.+36     	; 0x23ee <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	cb 01       	movw	r24, r22
    23ce:	34 e0       	ldi	r19, 0x04	; 4
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	3a 95       	dec	r19
    23d6:	e1 f7       	brne	.-8      	; 0x23d0 <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    23d8:	86 0f       	add	r24, r22
    23da:	97 1f       	adc	r25, r23
    23dc:	c8 0f       	add	r28, r24
    23de:	d9 1f       	adc	r29, r25
    23e0:	c5 5b       	subi	r28, 0xB5	; 181
    23e2:	df 4f       	sbci	r29, 0xFF	; 255
    23e4:	88 81       	ld	r24, Y
    23e6:	80 ff       	sbrs	r24, 0
    23e8:	21 e0       	ldi	r18, 0x01	; 1
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    23ee:	82 2f       	mov	r24, r18
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	08 95       	ret

000023f6 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    23f6:	1f 93       	push	r17
    23f8:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    23fa:	0e 94 b8 11 	call	0x2370	; 0x2370 <Timebase_DownCounter_SS_Period_Value_Expired>
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	11 f0       	breq	.+4      	; 0x2406 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	16 c0       	rjmp	.+44     	; 0x2432 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2406:	e0 91 2e 01 	lds	r30, 0x012E
    240a:	f0 91 2f 01 	lds	r31, 0x012F
    240e:	21 2f       	mov	r18, r17
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	c9 01       	movw	r24, r18
    2414:	54 e0       	ldi	r21, 0x04	; 4
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	5a 95       	dec	r21
    241c:	e1 f7       	brne	.-8      	; 0x2416 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	e8 0f       	add	r30, r24
    2424:	f9 1f       	adc	r31, r25
    2426:	e5 5b       	subi	r30, 0xB5	; 181
    2428:	ff 4f       	sbci	r31, 0xFF	; 255
    242a:	80 81       	ld	r24, Z
    242c:	8e 7f       	andi	r24, 0xFE	; 254
    242e:	80 83       	st	Z, r24
    2430:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2432:	1f 91       	pop	r17
    2434:	08 95       	ret

00002436 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	0e 94 46 10 	call	0x208c	; 0x208c <Timebase_DownCounter_SS_Update>
  }
}
    243c:	08 95       	ret

0000243e <Timebase_DownCounter_SS_Reset_All>:
  Timebase->DownCounterSS[window].EndValueSec = value;
}


void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    243e:	e0 91 2e 01 	lds	r30, 0x012E
    2442:	f0 91 2f 01 	lds	r31, 0x012F
    2446:	e0 5b       	subi	r30, 0xB0	; 176
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	10 82       	st	Z, r1
    244c:	11 82       	std	Z+1, r1	; 0x01
    244e:	12 82       	std	Z+2, r1	; 0x02
    2450:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].EndValueSubSec;
}


void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2452:	12 92       	st	-Z, r1
    2454:	12 92       	st	-Z, r1
    2456:	12 92       	st	-Z, r1
    2458:	12 92       	st	-Z, r1
  return Timebase->DownCounterSS[window].Value;
}


void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    245a:	38 96       	adiw	r30, 0x08	; 8
    245c:	10 82       	st	Z, r1
    245e:	11 82       	std	Z+1, r1	; 0x01
    2460:	12 82       	std	Z+2, r1	; 0x02
    2462:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounterSS[window].Status.Value;
}


void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2464:	39 97       	sbiw	r30, 0x09	; 9
    2466:	80 81       	ld	r24, Z
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2468:	80 7e       	andi	r24, 0xE0	; 224
    246a:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    246c:	08 95       	ret

0000246e <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    246e:	e0 91 2e 01 	lds	r30, 0x012E
    2472:	f0 91 2f 01 	lds	r31, 0x012F
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	2d e0       	ldi	r18, 0x0D	; 13
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	ac 01       	movw	r20, r24
    247e:	42 9f       	mul	r20, r18
    2480:	c0 01       	movw	r24, r0
    2482:	43 9f       	mul	r20, r19
    2484:	90 0d       	add	r25, r0
    2486:	52 9f       	mul	r21, r18
    2488:	90 0d       	add	r25, r0
    248a:	11 24       	eor	r1, r1
    248c:	e8 0f       	add	r30, r24
    248e:	f9 1f       	adc	r31, r25
    2490:	e4 5a       	subi	r30, 0xA4	; 164
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 81       	ld	r24, Z
    2496:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2498:	8f 70       	andi	r24, 0x0F	; 15
    249a:	08 95       	ret

0000249c <Timebase_DownCounter_Set_Status>:


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    249c:	e0 91 2e 01 	lds	r30, 0x012E
    24a0:	f0 91 2f 01 	lds	r31, 0x012F
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	2d e0       	ldi	r18, 0x0D	; 13
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	ac 01       	movw	r20, r24
    24ac:	42 9f       	mul	r20, r18
    24ae:	c0 01       	movw	r24, r0
    24b0:	43 9f       	mul	r20, r19
    24b2:	90 0d       	add	r25, r0
    24b4:	52 9f       	mul	r21, r18
    24b6:	90 0d       	add	r25, r0
    24b8:	11 24       	eor	r1, r1
    24ba:	e8 0f       	add	r30, r24
    24bc:	f9 1f       	adc	r31, r25
    24be:	e4 5a       	subi	r30, 0xA4	; 164
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	6f 70       	andi	r22, 0x0F	; 15
    24c4:	66 0f       	add	r22, r22
    24c6:	80 81       	ld	r24, Z
    24c8:	81 7e       	andi	r24, 0xE1	; 225
    24ca:	86 2b       	or	r24, r22
    24cc:	80 83       	st	Z, r24
}
    24ce:	08 95       	ret

000024d0 <Timebase_DownCounter_Get_Value>:


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    24d0:	e0 91 2e 01 	lds	r30, 0x012E
    24d4:	f0 91 2f 01 	lds	r31, 0x012F
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	2d e0       	ldi	r18, 0x0D	; 13
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	ac 01       	movw	r20, r24
    24e0:	42 9f       	mul	r20, r18
    24e2:	c0 01       	movw	r24, r0
    24e4:	43 9f       	mul	r20, r19
    24e6:	90 0d       	add	r25, r0
    24e8:	52 9f       	mul	r21, r18
    24ea:	90 0d       	add	r25, r0
    24ec:	11 24       	eor	r1, r1
    24ee:	e8 0f       	add	r30, r24
    24f0:	f9 1f       	adc	r31, r25
    24f2:	ef 59       	subi	r30, 0x9F	; 159
    24f4:	ff 4f       	sbci	r31, 0xFF	; 255
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	08 95       	ret

00002500 <Timebase_DownCounter_Set_Value>:


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2500:	e0 91 2e 01 	lds	r30, 0x012E
    2504:	f0 91 2f 01 	lds	r31, 0x012F
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	2d e0       	ldi	r18, 0x0D	; 13
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	dc 01       	movw	r26, r24
    2510:	a2 9f       	mul	r26, r18
    2512:	c0 01       	movw	r24, r0
    2514:	a3 9f       	mul	r26, r19
    2516:	90 0d       	add	r25, r0
    2518:	b2 9f       	mul	r27, r18
    251a:	90 0d       	add	r25, r0
    251c:	11 24       	eor	r1, r1
    251e:	e8 0f       	add	r30, r24
    2520:	f9 1f       	adc	r31, r25
    2522:	ef 59       	subi	r30, 0x9F	; 159
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	40 83       	st	Z, r20
    2528:	51 83       	std	Z+1, r21	; 0x01
    252a:	62 83       	std	Z+2, r22	; 0x02
    252c:	73 83       	std	Z+3, r23	; 0x03
}
    252e:	08 95       	ret

00002530 <Timebase_DownCounter_Get_EndValue>:


int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    2530:	e0 91 2e 01 	lds	r30, 0x012E
    2534:	f0 91 2f 01 	lds	r31, 0x012F
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	2d e0       	ldi	r18, 0x0D	; 13
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	ac 01       	movw	r20, r24
    2540:	42 9f       	mul	r20, r18
    2542:	c0 01       	movw	r24, r0
    2544:	43 9f       	mul	r20, r19
    2546:	90 0d       	add	r25, r0
    2548:	52 9f       	mul	r21, r18
    254a:	90 0d       	add	r25, r0
    254c:	11 24       	eor	r1, r1
    254e:	e8 0f       	add	r30, r24
    2550:	f9 1f       	adc	r31, r25
    2552:	e3 5a       	subi	r30, 0xA3	; 163
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	08 95       	ret

00002560 <Timebase_DownCounter_Set_EndValue>:


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2560:	e0 91 2e 01 	lds	r30, 0x012E
    2564:	f0 91 2f 01 	lds	r31, 0x012F
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	2d e0       	ldi	r18, 0x0D	; 13
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	dc 01       	movw	r26, r24
    2570:	a2 9f       	mul	r26, r18
    2572:	c0 01       	movw	r24, r0
    2574:	a3 9f       	mul	r26, r19
    2576:	90 0d       	add	r25, r0
    2578:	b2 9f       	mul	r27, r18
    257a:	90 0d       	add	r25, r0
    257c:	11 24       	eor	r1, r1
    257e:	e8 0f       	add	r30, r24
    2580:	f9 1f       	adc	r31, r25
    2582:	e3 5a       	subi	r30, 0xA3	; 163
    2584:	ff 4f       	sbci	r31, 0xFF	; 255
    2586:	40 83       	st	Z, r20
    2588:	51 83       	std	Z+1, r21	; 0x01
    258a:	62 83       	std	Z+2, r22	; 0x02
    258c:	73 83       	std	Z+3, r23	; 0x03
}
    258e:	08 95       	ret

00002590 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    2590:	e0 91 2e 01 	lds	r30, 0x012E
    2594:	f0 91 2f 01 	lds	r31, 0x012F
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	2d e0       	ldi	r18, 0x0D	; 13
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	ac 01       	movw	r20, r24
    25a0:	42 9f       	mul	r20, r18
    25a2:	c0 01       	movw	r24, r0
    25a4:	43 9f       	mul	r20, r19
    25a6:	90 0d       	add	r25, r0
    25a8:	52 9f       	mul	r21, r18
    25aa:	90 0d       	add	r25, r0
    25ac:	11 24       	eor	r1, r1
    25ae:	e8 0f       	add	r30, r24
    25b0:	f9 1f       	adc	r31, r25
    25b2:	eb 59       	subi	r30, 0x9B	; 155
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	60 81       	ld	r22, Z
    25b8:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
    25be:	08 95       	ret

000025c0 <Timebase_DownCounter_Set_PeriodValue>:


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    25c0:	e0 91 2e 01 	lds	r30, 0x012E
    25c4:	f0 91 2f 01 	lds	r31, 0x012F
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    25cc:	77 ff       	sbrs	r23, 7
    25ce:	13 c0       	rjmp	.+38     	; 0x25f6 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    25d0:	8d e0       	ldi	r24, 0x0D	; 13
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	ac 01       	movw	r20, r24
    25d6:	24 9f       	mul	r18, r20
    25d8:	c0 01       	movw	r24, r0
    25da:	25 9f       	mul	r18, r21
    25dc:	90 0d       	add	r25, r0
    25de:	34 9f       	mul	r19, r20
    25e0:	90 0d       	add	r25, r0
    25e2:	11 24       	eor	r1, r1
    25e4:	e8 0f       	add	r30, r24
    25e6:	f9 1f       	adc	r31, r25
    25e8:	eb 59       	subi	r30, 0x9B	; 155
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	10 82       	st	Z, r1
    25ee:	11 82       	std	Z+1, r1	; 0x01
    25f0:	12 82       	std	Z+2, r1	; 0x02
    25f2:	13 82       	std	Z+3, r1	; 0x03
    25f4:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    25f6:	8d e0       	ldi	r24, 0x0D	; 13
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	dc 01       	movw	r26, r24
    25fc:	2a 9f       	mul	r18, r26
    25fe:	c0 01       	movw	r24, r0
    2600:	2b 9f       	mul	r18, r27
    2602:	90 0d       	add	r25, r0
    2604:	3a 9f       	mul	r19, r26
    2606:	90 0d       	add	r25, r0
    2608:	11 24       	eor	r1, r1
    260a:	e8 0f       	add	r30, r24
    260c:	f9 1f       	adc	r31, r25
    260e:	eb 59       	subi	r30, 0x9B	; 155
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	40 83       	st	Z, r20
    2614:	51 83       	std	Z+1, r21	; 0x01
    2616:	62 83       	std	Z+2, r22	; 0x02
    2618:	73 83       	std	Z+3, r23	; 0x03
    261a:	08 95       	ret

0000261c <Timebase_DownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    261c:	e0 91 2e 01 	lds	r30, 0x012E
    2620:	f0 91 2f 01 	lds	r31, 0x012F
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	2d e0       	ldi	r18, 0x0D	; 13
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	ac 01       	movw	r20, r24
    262c:	42 9f       	mul	r20, r18
    262e:	c0 01       	movw	r24, r0
    2630:	43 9f       	mul	r20, r19
    2632:	90 0d       	add	r25, r0
    2634:	52 9f       	mul	r21, r18
    2636:	90 0d       	add	r25, r0
    2638:	11 24       	eor	r1, r1
    263a:	e8 0f       	add	r30, r24
    263c:	f9 1f       	adc	r31, r25
    263e:	e4 5a       	subi	r30, 0xA4	; 164
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    2644:	81 70       	andi	r24, 0x01	; 1
    2646:	08 95       	ret

00002648 <Timebase_DownCounter_Set_Period_Flag>:


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2648:	e0 91 2e 01 	lds	r30, 0x012E
    264c:	f0 91 2f 01 	lds	r31, 0x012F
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	2d e0       	ldi	r18, 0x0D	; 13
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	ac 01       	movw	r20, r24
    2658:	42 9f       	mul	r20, r18
    265a:	c0 01       	movw	r24, r0
    265c:	43 9f       	mul	r20, r19
    265e:	90 0d       	add	r25, r0
    2660:	52 9f       	mul	r21, r18
    2662:	90 0d       	add	r25, r0
    2664:	11 24       	eor	r1, r1
    2666:	e8 0f       	add	r30, r24
    2668:	f9 1f       	adc	r31, r25
    266a:	e4 5a       	subi	r30, 0xA4	; 164
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 81       	ld	r24, Z
    2670:	81 60       	ori	r24, 0x01	; 1
    2672:	80 83       	st	Z, r24
}
    2674:	08 95       	ret

00002676 <Timebase_DownCounter_Clear_Period_Flag>:


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2676:	e0 91 2e 01 	lds	r30, 0x012E
    267a:	f0 91 2f 01 	lds	r31, 0x012F
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	2d e0       	ldi	r18, 0x0D	; 13
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	ac 01       	movw	r20, r24
    2686:	42 9f       	mul	r20, r18
    2688:	c0 01       	movw	r24, r0
    268a:	43 9f       	mul	r20, r19
    268c:	90 0d       	add	r25, r0
    268e:	52 9f       	mul	r21, r18
    2690:	90 0d       	add	r25, r0
    2692:	11 24       	eor	r1, r1
    2694:	e8 0f       	add	r30, r24
    2696:	f9 1f       	adc	r31, r25
    2698:	e4 5a       	subi	r30, 0xA4	; 164
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	8e 7f       	andi	r24, 0xFE	; 254
    26a0:	80 83       	st	Z, r24
}
    26a2:	08 95       	ret

000026a4 <Timebase_DownCounter_Reset>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    26a4:	e0 91 2e 01 	lds	r30, 0x012E
    26a8:	f0 91 2f 01 	lds	r31, 0x012F
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	2d e0       	ldi	r18, 0x0D	; 13
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	ac 01       	movw	r20, r24
    26b4:	42 9f       	mul	r20, r18
    26b6:	c0 01       	movw	r24, r0
    26b8:	43 9f       	mul	r20, r19
    26ba:	90 0d       	add	r25, r0
    26bc:	52 9f       	mul	r21, r18
    26be:	90 0d       	add	r25, r0
    26c0:	11 24       	eor	r1, r1
    26c2:	e8 0f       	add	r30, r24
    26c4:	f9 1f       	adc	r31, r25
    26c6:	e3 5a       	subi	r30, 0xA3	; 163
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	11 92       	st	Z+, r1
    26cc:	11 92       	st	Z+, r1
    26ce:	11 92       	st	Z+, r1
    26d0:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    26d2:	10 82       	st	Z, r1
    26d4:	11 82       	std	Z+1, r1	; 0x01
    26d6:	12 82       	std	Z+2, r1	; 0x02
    26d8:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    26da:	35 97       	sbiw	r30, 0x05	; 5
    26dc:	80 81       	ld	r24, Z
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    26de:	80 7e       	andi	r24, 0xE0	; 224
    26e0:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    26e2:	08 95       	ret

000026e4 <Timebase_DownCounter_Clear_All_Flags>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    26e4:	e0 91 2e 01 	lds	r30, 0x012E
    26e8:	f0 91 2f 01 	lds	r31, 0x012F
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	2d e0       	ldi	r18, 0x0D	; 13
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	ac 01       	movw	r20, r24
    26f4:	42 9f       	mul	r20, r18
    26f6:	c0 01       	movw	r24, r0
    26f8:	43 9f       	mul	r20, r19
    26fa:	90 0d       	add	r25, r0
    26fc:	52 9f       	mul	r21, r18
    26fe:	90 0d       	add	r25, r0
    2700:	11 24       	eor	r1, r1
    2702:	e8 0f       	add	r30, r24
    2704:	f9 1f       	adc	r31, r25
    2706:	e3 5a       	subi	r30, 0xA3	; 163
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	11 92       	st	Z+, r1
    270c:	11 92       	st	Z+, r1
    270e:	11 92       	st	Z+, r1
    2710:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2712:	10 82       	st	Z, r1
    2714:	11 82       	std	Z+1, r1	; 0x01
    2716:	12 82       	std	Z+2, r1	; 0x02
    2718:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    271a:	35 97       	sbiw	r30, 0x05	; 5
    271c:	80 81       	ld	r24, Z
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    271e:	80 7e       	andi	r24, 0xE0	; 224
    2720:	80 83       	st	Z, r24
} 


void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    2722:	08 95       	ret

00002724 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2724:	e0 91 2e 01 	lds	r30, 0x012E
    2728:	f0 91 2f 01 	lds	r31, 0x012F
    272c:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    272e:	2d e0       	ldi	r18, 0x0D	; 13
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	ac 01       	movw	r20, r24
    2734:	42 9f       	mul	r20, r18
    2736:	c0 01       	movw	r24, r0
    2738:	43 9f       	mul	r20, r19
    273a:	90 0d       	add	r25, r0
    273c:	52 9f       	mul	r21, r18
    273e:	90 0d       	add	r25, r0
    2740:	11 24       	eor	r1, r1
    2742:	e8 0f       	add	r30, r24
    2744:	f9 1f       	adc	r31, r25
    2746:	e4 5a       	subi	r30, 0xA4	; 164
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	90 81       	ld	r25, Z
    274c:	89 2f       	mov	r24, r25
    274e:	86 95       	lsr	r24
    2750:	8f 70       	andi	r24, 0x0F	; 15
    2752:	81 30       	cpi	r24, 0x01	; 1
    2754:	19 f0       	breq	.+6      	; 0x275c <Timebase_DownCounter_Start+0x38>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2756:	91 7e       	andi	r25, 0xE1	; 225
    2758:	92 60       	ori	r25, 0x02	; 2
    275a:	90 83       	st	Z, r25
    275c:	08 95       	ret

0000275e <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    275e:	e0 91 2e 01 	lds	r30, 0x012E
    2762:	f0 91 2f 01 	lds	r31, 0x012F
    2766:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2768:	2d e0       	ldi	r18, 0x0D	; 13
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	ac 01       	movw	r20, r24
    276e:	42 9f       	mul	r20, r18
    2770:	c0 01       	movw	r24, r0
    2772:	43 9f       	mul	r20, r19
    2774:	90 0d       	add	r25, r0
    2776:	52 9f       	mul	r21, r18
    2778:	90 0d       	add	r25, r0
    277a:	11 24       	eor	r1, r1
    277c:	e8 0f       	add	r30, r24
    277e:	f9 1f       	adc	r31, r25
    2780:	e4 5a       	subi	r30, 0xA4	; 164
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	90 81       	ld	r25, Z
    2786:	89 2f       	mov	r24, r25
    2788:	86 95       	lsr	r24
    278a:	8f 70       	andi	r24, 0x0F	; 15
    278c:	82 30       	cpi	r24, 0x02	; 2
    278e:	19 f0       	breq	.+6      	; 0x2796 <Timebase_DownCounter_Stop+0x38>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2790:	91 7e       	andi	r25, 0xE1	; 225
    2792:	94 60       	ori	r25, 0x04	; 4
    2794:	90 83       	st	Z, r25
    2796:	08 95       	ret

00002798 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    279c:	a0 91 2e 01 	lds	r26, 0x012E
    27a0:	b0 91 2f 01 	lds	r27, 0x012F
    27a4:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    27a6:	2d e0       	ldi	r18, 0x0D	; 13
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	82 9f       	mul	r24, r18
    27ac:	f0 01       	movw	r30, r0
    27ae:	83 9f       	mul	r24, r19
    27b0:	f0 0d       	add	r31, r0
    27b2:	92 9f       	mul	r25, r18
    27b4:	f0 0d       	add	r31, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	ea 0f       	add	r30, r26
    27ba:	fb 1f       	adc	r31, r27
    27bc:	ef 01       	movw	r28, r30
    27be:	c4 5a       	subi	r28, 0xA4	; 164
    27c0:	df 4f       	sbci	r29, 0xFF	; 255
    27c2:	88 81       	ld	r24, Y
    27c4:	86 95       	lsr	r24
    27c6:	8f 70       	andi	r24, 0x0F	; 15
    27c8:	e9 f4       	brne	.+58     	; 0x2804 <Timebase_DownCounter_Set_Securely+0x6c>
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    27ca:	ef 59       	subi	r30, 0x9F	; 159
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	40 83       	st	Z, r20
    27d0:	51 83       	std	Z+1, r21	; 0x01
    27d2:	62 83       	std	Z+2, r22	; 0x02
    27d4:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    27d6:	1b 96       	adiw	r26, 0x0b	; 11
    27d8:	8d 91       	ld	r24, X+
    27da:	9d 91       	ld	r25, X+
    27dc:	0d 90       	ld	r0, X+
    27de:	bc 91       	ld	r27, X
    27e0:	a0 2d       	mov	r26, r0
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    27e2:	84 0f       	add	r24, r20
    27e4:	95 1f       	adc	r25, r21
    27e6:	a6 1f       	adc	r26, r22
    27e8:	b7 1f       	adc	r27, r23
    27ea:	b2 93       	st	-Z, r27
    27ec:	a2 93       	st	-Z, r26
    27ee:	92 93       	st	-Z, r25
    27f0:	82 93       	st	-Z, r24
  Timebase_DownCounter_Reset( window );
}


void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    27f2:	98 81       	ld	r25, Y
    27f4:	89 2f       	mov	r24, r25
    27f6:	86 95       	lsr	r24
    27f8:	8f 70       	andi	r24, 0x0F	; 15
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	19 f0       	breq	.+6      	; 0x2804 <Timebase_DownCounter_Set_Securely+0x6c>
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    27fe:	91 7e       	andi	r25, 0xE1	; 225
    2800:	92 60       	ori	r25, 0x02	; 2
    2802:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	08 95       	ret

0000280a <Timebase_DownCounter_Set_Forcefully>:


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    280e:	e0 91 2e 01 	lds	r30, 0x012E
    2812:	f0 91 2f 01 	lds	r31, 0x012F
    2816:	a8 2f       	mov	r26, r24
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	2d e0       	ldi	r18, 0x0D	; 13
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	e9 01       	movw	r28, r18
    2820:	ac 9f       	mul	r26, r28
    2822:	90 01       	movw	r18, r0
    2824:	ad 9f       	mul	r26, r29
    2826:	30 0d       	add	r19, r0
    2828:	bc 9f       	mul	r27, r28
    282a:	30 0d       	add	r19, r0
    282c:	11 24       	eor	r1, r1
    282e:	e2 0f       	add	r30, r18
    2830:	f3 1f       	adc	r31, r19
    2832:	e3 5a       	subi	r30, 0xA3	; 163
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	11 92       	st	Z+, r1
    2838:	11 92       	st	Z+, r1
    283a:	11 92       	st	Z+, r1
    283c:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    283e:	10 82       	st	Z, r1
    2840:	11 82       	std	Z+1, r1	; 0x01
    2842:	12 82       	std	Z+2, r1	; 0x02
    2844:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2846:	35 97       	sbiw	r30, 0x05	; 5
    2848:	90 81       	ld	r25, Z
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    284a:	90 7e       	andi	r25, 0xE0	; 224
    284c:	90 83       	st	Z, r25
}


void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    284e:	0e 94 cc 13 	call	0x2798	; 0x2798 <Timebase_DownCounter_Set_Securely>
} 
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	08 95       	ret

00002858 <Timebase_DownCounter_Update>:


void Timebase_DownCounter_Update(uint8_t window){
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2860:	a0 91 2e 01 	lds	r26, 0x012E
    2864:	b0 91 2f 01 	lds	r27, 0x012F
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	2d e0       	ldi	r18, 0x0D	; 13
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	82 9f       	mul	r24, r18
    2870:	f0 01       	movw	r30, r0
    2872:	83 9f       	mul	r24, r19
    2874:	f0 0d       	add	r31, r0
    2876:	92 9f       	mul	r25, r18
    2878:	f0 0d       	add	r31, r0
    287a:	11 24       	eor	r1, r1
    287c:	ea 0f       	add	r30, r26
    287e:	fb 1f       	adc	r31, r27
    2880:	8f 01       	movw	r16, r30
    2882:	04 5a       	subi	r16, 0xA4	; 164
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	e8 01       	movw	r28, r16
    2888:	88 81       	ld	r24, Y
    288a:	86 95       	lsr	r24
    288c:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Set_Securely( window, value );
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	69 f5       	brne	.+90     	; 0x28ec <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2892:	1b 96       	adiw	r26, 0x0b	; 11
    2894:	2d 91       	ld	r18, X+
    2896:	3d 91       	ld	r19, X+
    2898:	4d 91       	ld	r20, X+
    289a:	5c 91       	ld	r21, X
    289c:	1e 97       	sbiw	r26, 0x0e	; 14
} 


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    289e:	bf 01       	movw	r22, r30
    28a0:	63 5a       	subi	r22, 0xA3	; 163
    28a2:	7f 4f       	sbci	r23, 0xFF	; 255
    28a4:	eb 01       	movw	r28, r22
    28a6:	88 81       	ld	r24, Y
    28a8:	99 81       	ldd	r25, Y+1	; 0x01
    28aa:	aa 81       	ldd	r26, Y+2	; 0x02
    28ac:	bb 81       	ldd	r27, Y+3	; 0x03
    28ae:	82 1b       	sub	r24, r18
    28b0:	93 0b       	sbc	r25, r19
    28b2:	a4 0b       	sbc	r26, r20
    28b4:	b5 0b       	sbc	r27, r21
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28b6:	ef 59       	subi	r30, 0x9F	; 159
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 83       	st	Z, r24
    28bc:	91 83       	std	Z+1, r25	; 0x01
    28be:	a2 83       	std	Z+2, r26	; 0x02
    28c0:	b3 83       	std	Z+3, r27	; 0x03


void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    28c2:	18 16       	cp	r1, r24
    28c4:	19 06       	cpc	r1, r25
    28c6:	1a 06       	cpc	r1, r26
    28c8:	1b 06       	cpc	r1, r27
    28ca:	34 f1       	brlt	.+76     	; 0x2918 <Timebase_DownCounter_Update+0xc0>
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    28cc:	db 01       	movw	r26, r22
    28ce:	1d 92       	st	X+, r1
    28d0:	1d 92       	st	X+, r1
    28d2:	1d 92       	st	X+, r1
    28d4:	1c 92       	st	X, r1
    28d6:	13 97       	sbiw	r26, 0x03	; 3
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    28d8:	10 82       	st	Z, r1
    28da:	11 82       	std	Z+1, r1	; 0x01
    28dc:	12 82       	std	Z+2, r1	; 0x02
    28de:	13 82       	std	Z+3, r1	; 0x03
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28e0:	e8 01       	movw	r28, r16
    28e2:	88 81       	ld	r24, Y
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    28e4:	80 7e       	andi	r24, 0xE0	; 224
    28e6:	88 60       	ori	r24, 0x08	; 8
    28e8:	88 83       	st	Y, r24
    28ea:	16 c0       	rjmp	.+44     	; 0x2918 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    28ec:	82 30       	cpi	r24, 0x02	; 2
    28ee:	a1 f4       	brne	.+40     	; 0x2918 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    28f0:	1b 96       	adiw	r26, 0x0b	; 11
    28f2:	8d 91       	ld	r24, X+
    28f4:	9d 91       	ld	r25, X+
    28f6:	0d 90       	ld	r0, X+
    28f8:	bc 91       	ld	r27, X
    28fa:	a0 2d       	mov	r26, r0
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    28fc:	ef 59       	subi	r30, 0x9F	; 159
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	20 81       	ld	r18, Z
    2902:	31 81       	ldd	r19, Z+1	; 0x01
    2904:	42 81       	ldd	r20, Z+2	; 0x02
    2906:	53 81       	ldd	r21, Z+3	; 0x03
    2908:	82 0f       	add	r24, r18
    290a:	93 1f       	adc	r25, r19
    290c:	a4 1f       	adc	r26, r20
    290e:	b5 1f       	adc	r27, r21
    2910:	b2 93       	st	-Z, r27
    2912:	a2 93       	st	-Z, r26
    2914:	92 93       	st	-Z, r25
    2916:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	08 95       	ret

00002922 <Timebase_DownCounter_Expired>:


uint8_t Timebase_DownCounter_Expired(uint8_t window){
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	e0 91 2e 01 	lds	r30, 0x012E
    2928:	f0 91 2f 01 	lds	r31, 0x012F
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	2d e0       	ldi	r18, 0x0D	; 13
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	bc 01       	movw	r22, r24
    2934:	62 9f       	mul	r22, r18
    2936:	c0 01       	movw	r24, r0
    2938:	63 9f       	mul	r22, r19
    293a:	90 0d       	add	r25, r0
    293c:	72 9f       	mul	r23, r18
    293e:	90 0d       	add	r25, r0
    2940:	11 24       	eor	r1, r1
    2942:	e8 0f       	add	r30, r24
    2944:	f9 1f       	adc	r31, r25
    2946:	e4 5a       	subi	r30, 0xA4	; 164
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 81       	ld	r24, Z
    294c:	86 95       	lsr	r24
    294e:	8f 70       	andi	r24, 0x0F	; 15
    2950:	84 30       	cpi	r24, 0x04	; 4
    2952:	09 f4       	brne	.+2      	; 0x2956 <Timebase_DownCounter_Expired+0x34>
    2954:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2956:	84 2f       	mov	r24, r20
    2958:	08 95       	ret

0000295a <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    295a:	e0 91 2e 01 	lds	r30, 0x012E
    295e:	f0 91 2f 01 	lds	r31, 0x012F
    2962:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2964:	2d e0       	ldi	r18, 0x0D	; 13
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	ac 01       	movw	r20, r24
    296a:	42 9f       	mul	r20, r18
    296c:	c0 01       	movw	r24, r0
    296e:	43 9f       	mul	r20, r19
    2970:	90 0d       	add	r25, r0
    2972:	52 9f       	mul	r21, r18
    2974:	90 0d       	add	r25, r0
    2976:	11 24       	eor	r1, r1
    2978:	e8 0f       	add	r30, r24
    297a:	f9 1f       	adc	r31, r25
    297c:	df 01       	movw	r26, r30
    297e:	a4 5a       	subi	r26, 0xA4	; 164
    2980:	bf 4f       	sbci	r27, 0xFF	; 255
    2982:	8c 91       	ld	r24, X
    2984:	86 95       	lsr	r24
    2986:	8f 70       	andi	r24, 0x0F	; 15
    2988:	84 30       	cpi	r24, 0x04	; 4
    298a:	11 f0       	breq	.+4      	; 0x2990 <Timebase_DownCounter_Expired_Event+0x36>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	08 95       	ret
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2990:	e3 5a       	subi	r30, 0xA3	; 163
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	11 92       	st	Z+, r1
    2996:	11 92       	st	Z+, r1
    2998:	11 92       	st	Z+, r1
    299a:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    299c:	10 82       	st	Z, r1
    299e:	11 82       	std	Z+1, r1	; 0x01
    29a0:	12 82       	std	Z+2, r1	; 0x02
    29a2:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    29a4:	8c 91       	ld	r24, X
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    29a6:	80 7e       	andi	r24, 0xE0	; 224
    29a8:	8c 93       	st	X, r24
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    29ac:	08 95       	ret

000029ae <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
  }
}


uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    29b2:	c0 91 2e 01 	lds	r28, 0x012E
    29b6:	d0 91 2f 01 	lds	r29, 0x012F
    29ba:	28 2f       	mov	r18, r24
    29bc:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    29be:	8d e0       	ldi	r24, 0x0D	; 13
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	28 9f       	mul	r18, r24
    29c4:	f0 01       	movw	r30, r0
    29c6:	29 9f       	mul	r18, r25
    29c8:	f0 0d       	add	r31, r0
    29ca:	38 9f       	mul	r19, r24
    29cc:	f0 0d       	add	r31, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	ec 0f       	add	r30, r28
    29d2:	fd 1f       	adc	r31, r29
    29d4:	e4 5a       	subi	r30, 0xA4	; 164
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	ec 55       	subi	r30, 0x5C	; 92
    29dc:	f0 40       	sbci	r31, 0x00	; 0
    29de:	80 fd       	sbrc	r24, 0
    29e0:	25 c0       	rjmp	.+74     	; 0x2a2c <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    29e2:	ef 59       	subi	r30, 0x9F	; 159
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	81 91       	ld	r24, Z+
    29e8:	91 91       	ld	r25, Z+
    29ea:	a1 91       	ld	r26, Z+
    29ec:	b1 91       	ld	r27, Z+
    29ee:	84 1b       	sub	r24, r20
    29f0:	95 0b       	sbc	r25, r21
    29f2:	a6 0b       	sbc	r26, r22
    29f4:	b7 0b       	sbc	r27, r23
  return Timebase->DownCounter[window].PeriodValue;
}


void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    29f6:	b7 ff       	sbrs	r27, 7
    29f8:	05 c0       	rjmp	.+10     	; 0x2a04 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    29fa:	10 82       	st	Z, r1
    29fc:	11 82       	std	Z+1, r1	; 0x01
    29fe:	12 82       	std	Z+2, r1	; 0x02
    2a00:	13 82       	std	Z+3, r1	; 0x03
    2a02:	04 c0       	rjmp	.+8      	; 0x2a0c <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    2a04:	80 83       	st	Z, r24
    2a06:	91 83       	std	Z+1, r25	; 0x01
    2a08:	a2 83       	std	Z+2, r26	; 0x02
    2a0a:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->DownCounter[window].Status.PeriodFlag;
}


void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2a0c:	8d e0       	ldi	r24, 0x0D	; 13
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	28 9f       	mul	r18, r24
    2a12:	f0 01       	movw	r30, r0
    2a14:	29 9f       	mul	r18, r25
    2a16:	f0 0d       	add	r31, r0
    2a18:	38 9f       	mul	r19, r24
    2a1a:	f0 0d       	add	r31, r0
    2a1c:	11 24       	eor	r1, r1
    2a1e:	ec 0f       	add	r30, r28
    2a20:	fd 1f       	adc	r31, r29
    2a22:	e4 5a       	subi	r30, 0xA4	; 164
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 81       	ld	r24, Z
    2a28:	81 60       	ori	r24, 0x01	; 1
    2a2a:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    2a2c:	df 91       	pop	r29
    2a2e:	cf 91       	pop	r28
    2a30:	08 95       	ret

00002a32 <Timebase_DownCounter_Get_Remaining_Period_Value>:
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2a32:	e0 91 2e 01 	lds	r30, 0x012E
    2a36:	f0 91 2f 01 	lds	r31, 0x012F
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2a3c:	2d e0       	ldi	r18, 0x0D	; 13
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	ac 01       	movw	r20, r24
    2a42:	42 9f       	mul	r20, r18
    2a44:	c0 01       	movw	r24, r0
    2a46:	43 9f       	mul	r20, r19
    2a48:	90 0d       	add	r25, r0
    2a4a:	52 9f       	mul	r21, r18
    2a4c:	90 0d       	add	r25, r0
    2a4e:	11 24       	eor	r1, r1
    2a50:	e8 0f       	add	r30, r24
    2a52:	f9 1f       	adc	r31, r25
    2a54:	df 01       	movw	r26, r30
    2a56:	ab 59       	subi	r26, 0x9B	; 155
    2a58:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5a:	ef 59       	subi	r30, 0x9F	; 159
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	20 81       	ld	r18, Z
    2a60:	31 81       	ldd	r19, Z+1	; 0x01
    2a62:	42 81       	ldd	r20, Z+2	; 0x02
    2a64:	53 81       	ldd	r21, Z+3	; 0x03
    2a66:	8d 91       	ld	r24, X+
    2a68:	9d 91       	ld	r25, X+
    2a6a:	0d 90       	ld	r0, X+
    2a6c:	bc 91       	ld	r27, X
    2a6e:	a0 2d       	mov	r26, r0
    2a70:	28 1b       	sub	r18, r24
    2a72:	39 0b       	sbc	r19, r25
    2a74:	4a 0b       	sbc	r20, r26
    2a76:	5b 0b       	sbc	r21, r27
    2a78:	57 ff       	sbrs	r21, 7
    2a7a:	04 c0       	rjmp	.+8      	; 0x2a84 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2a84:	b9 01       	movw	r22, r18
    2a86:	ca 01       	movw	r24, r20
    2a88:	08 95       	ret

00002a8a <Timebase_DownCounter_Period_Value_Expired>:


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
  Timebase->DownCounter[window].Status.Value = value;
}


int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    2a8e:	c0 91 2e 01 	lds	r28, 0x012E
    2a92:	d0 91 2f 01 	lds	r29, 0x012F
    2a96:	68 2f       	mov	r22, r24
    2a98:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2a9a:	8d e0       	ldi	r24, 0x0D	; 13
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	68 9f       	mul	r22, r24
    2aa0:	f0 01       	movw	r30, r0
    2aa2:	69 9f       	mul	r22, r25
    2aa4:	f0 0d       	add	r31, r0
    2aa6:	78 9f       	mul	r23, r24
    2aa8:	f0 0d       	add	r31, r0
    2aaa:	11 24       	eor	r1, r1
    2aac:	ec 0f       	add	r30, r28
    2aae:	fd 1f       	adc	r31, r29
    2ab0:	df 01       	movw	r26, r30
    2ab2:	ab 59       	subi	r26, 0x9B	; 155
    2ab4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab6:	ef 59       	subi	r30, 0x9F	; 159
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	20 81       	ld	r18, Z
    2abc:	31 81       	ldd	r19, Z+1	; 0x01
    2abe:	42 81       	ldd	r20, Z+2	; 0x02
    2ac0:	53 81       	ldd	r21, Z+3	; 0x03
    2ac2:	8d 91       	ld	r24, X+
    2ac4:	9d 91       	ld	r25, X+
    2ac6:	0d 90       	ld	r0, X+
    2ac8:	bc 91       	ld	r27, X
    2aca:	a0 2d       	mov	r26, r0
    2acc:	28 1b       	sub	r18, r24
    2ace:	39 0b       	sbc	r19, r25
    2ad0:	4a 0b       	sbc	r20, r26
    2ad2:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2ad4:	57 fd       	sbrc	r21, 7
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  return temp;
}


uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2ad8:	21 15       	cp	r18, r1
    2ada:	31 05       	cpc	r19, r1
    2adc:	41 05       	cpc	r20, r1
    2ade:	51 05       	cpc	r21, r1
    2ae0:	11 f0       	breq	.+4      	; 0x2ae6 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	14 c0       	rjmp	.+40     	; 0x2b0e <Timebase_DownCounter_Period_Value_Expired+0x84>
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	8d e0       	ldi	r24, 0x0D	; 13
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	ac 01       	movw	r20, r24
    2aee:	64 9f       	mul	r22, r20
    2af0:	c0 01       	movw	r24, r0
    2af2:	65 9f       	mul	r22, r21
    2af4:	90 0d       	add	r25, r0
    2af6:	74 9f       	mul	r23, r20
    2af8:	90 0d       	add	r25, r0
    2afa:	11 24       	eor	r1, r1
    2afc:	c8 0f       	add	r28, r24
    2afe:	d9 1f       	adc	r29, r25
    2b00:	c4 5a       	subi	r28, 0xA4	; 164
    2b02:	df 4f       	sbci	r29, 0xFF	; 255
    2b04:	88 81       	ld	r24, Y
    2b06:	80 ff       	sbrs	r24, 0
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2b0e:	82 2f       	mov	r24, r18
    2b10:	df 91       	pop	r29
    2b12:	cf 91       	pop	r28
    2b14:	08 95       	ret

00002b16 <Timebase_DownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    2b16:	1f 93       	push	r17
    2b18:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    2b1a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <Timebase_DownCounter_Period_Value_Expired>
    2b1e:	81 30       	cpi	r24, 0x01	; 1
    2b20:	11 f0       	breq	.+4      	; 0x2b26 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	18 c0       	rjmp	.+48     	; 0x2b56 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b26:	e0 91 2e 01 	lds	r30, 0x012E
    2b2a:	f0 91 2f 01 	lds	r31, 0x012F
    2b2e:	21 2f       	mov	r18, r17
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	8d e0       	ldi	r24, 0x0D	; 13
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	ac 01       	movw	r20, r24
    2b38:	24 9f       	mul	r18, r20
    2b3a:	c0 01       	movw	r24, r0
    2b3c:	25 9f       	mul	r18, r21
    2b3e:	90 0d       	add	r25, r0
    2b40:	34 9f       	mul	r19, r20
    2b42:	90 0d       	add	r25, r0
    2b44:	11 24       	eor	r1, r1
    2b46:	e8 0f       	add	r30, r24
    2b48:	f9 1f       	adc	r31, r25
    2b4a:	e4 5a       	subi	r30, 0xA4	; 164
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	80 81       	ld	r24, Z
    2b50:	8e 7f       	andi	r24, 0xFE	; 254
    2b52:	80 83       	st	Z, r24
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2b56:	1f 91       	pop	r17
    2b58:	08 95       	ret

00002b5a <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 2c 14 	call	0x2858	; 0x2858 <Timebase_DownCounter_Update>
  }
}
    2b60:	08 95       	ret

00002b62 <Timebase_DownCounter_Reset_All>:
  return Timebase->DownCounter[window].EndValue;
}


void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2b62:	e0 91 2e 01 	lds	r30, 0x012E
    2b66:	f0 91 2f 01 	lds	r31, 0x012F
    2b6a:	e3 5a       	subi	r30, 0xA3	; 163
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	11 92       	st	Z+, r1
    2b70:	11 92       	st	Z+, r1
    2b72:	11 92       	st	Z+, r1
    2b74:	11 92       	st	Z+, r1
  return Timebase->DownCounter[window].Value;
}


void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2b76:	10 82       	st	Z, r1
    2b78:	11 82       	std	Z+1, r1	; 0x01
    2b7a:	12 82       	std	Z+2, r1	; 0x02
    2b7c:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->DownCounter[window].Status.Value;
}


void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2b7e:	35 97       	sbiw	r30, 0x05	; 5
    2b80:	80 81       	ld	r24, Z
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2b82:	80 7e       	andi	r24, 0xE0	; 224
    2b84:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2b86:	08 95       	ret

00002b88 <Timebase_LPDownCounter_Get_Status>:


/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
    2b88:	e0 91 2e 01 	lds	r30, 0x012E
    2b8c:	f0 91 2f 01 	lds	r31, 0x012F
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	2d e0       	ldi	r18, 0x0D	; 13
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	ac 01       	movw	r20, r24
    2b98:	42 9f       	mul	r20, r18
    2b9a:	c0 01       	movw	r24, r0
    2b9c:	43 9f       	mul	r20, r19
    2b9e:	90 0d       	add	r25, r0
    2ba0:	52 9f       	mul	r21, r18
    2ba2:	90 0d       	add	r25, r0
    2ba4:	11 24       	eor	r1, r1
    2ba6:	e8 0f       	add	r30, r24
    2ba8:	f9 1f       	adc	r31, r25
    2baa:	e7 59       	subi	r30, 0x97	; 151
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	86 95       	lsr	r24
  return Timebase->LPDownCounter[window].Status.Value;
}
    2bb2:	8f 70       	andi	r24, 0x0F	; 15
    2bb4:	08 95       	ret

00002bb6 <Timebase_LPDownCounter_Set_Status>:


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2bb6:	e0 91 2e 01 	lds	r30, 0x012E
    2bba:	f0 91 2f 01 	lds	r31, 0x012F
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	2d e0       	ldi	r18, 0x0D	; 13
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	ac 01       	movw	r20, r24
    2bc6:	42 9f       	mul	r20, r18
    2bc8:	c0 01       	movw	r24, r0
    2bca:	43 9f       	mul	r20, r19
    2bcc:	90 0d       	add	r25, r0
    2bce:	52 9f       	mul	r21, r18
    2bd0:	90 0d       	add	r25, r0
    2bd2:	11 24       	eor	r1, r1
    2bd4:	e8 0f       	add	r30, r24
    2bd6:	f9 1f       	adc	r31, r25
    2bd8:	e7 59       	subi	r30, 0x97	; 151
    2bda:	ff 4f       	sbci	r31, 0xFF	; 255
    2bdc:	6f 70       	andi	r22, 0x0F	; 15
    2bde:	66 0f       	add	r22, r22
    2be0:	80 81       	ld	r24, Z
    2be2:	81 7e       	andi	r24, 0xE1	; 225
    2be4:	86 2b       	or	r24, r22
    2be6:	80 83       	st	Z, r24
}
    2be8:	08 95       	ret

00002bea <Timebase_LPDownCounter_Get_Value>:


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
    2bea:	e0 91 2e 01 	lds	r30, 0x012E
    2bee:	f0 91 2f 01 	lds	r31, 0x012F
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	2d e0       	ldi	r18, 0x0D	; 13
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	ac 01       	movw	r20, r24
    2bfa:	42 9f       	mul	r20, r18
    2bfc:	c0 01       	movw	r24, r0
    2bfe:	43 9f       	mul	r20, r19
    2c00:	90 0d       	add	r25, r0
    2c02:	52 9f       	mul	r21, r18
    2c04:	90 0d       	add	r25, r0
    2c06:	11 24       	eor	r1, r1
    2c08:	e8 0f       	add	r30, r24
    2c0a:	f9 1f       	adc	r31, r25
    2c0c:	e2 59       	subi	r30, 0x92	; 146
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].Value;
}
    2c14:	82 81       	ldd	r24, Z+2	; 0x02
    2c16:	93 81       	ldd	r25, Z+3	; 0x03
    2c18:	08 95       	ret

00002c1a <Timebase_LPDownCounter_Set_Value>:


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    2c1a:	e0 91 2e 01 	lds	r30, 0x012E
    2c1e:	f0 91 2f 01 	lds	r31, 0x012F
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	2d e0       	ldi	r18, 0x0D	; 13
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	dc 01       	movw	r26, r24
    2c2a:	a2 9f       	mul	r26, r18
    2c2c:	c0 01       	movw	r24, r0
    2c2e:	a3 9f       	mul	r26, r19
    2c30:	90 0d       	add	r25, r0
    2c32:	b2 9f       	mul	r27, r18
    2c34:	90 0d       	add	r25, r0
    2c36:	11 24       	eor	r1, r1
    2c38:	e8 0f       	add	r30, r24
    2c3a:	f9 1f       	adc	r31, r25
    2c3c:	e2 59       	subi	r30, 0x92	; 146
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	40 83       	st	Z, r20
    2c42:	51 83       	std	Z+1, r21	; 0x01
    2c44:	62 83       	std	Z+2, r22	; 0x02
    2c46:	73 83       	std	Z+3, r23	; 0x03
}
    2c48:	08 95       	ret

00002c4a <Timebase_LPDownCounter_Get_EndValue>:


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
    2c4a:	e0 91 2e 01 	lds	r30, 0x012E
    2c4e:	f0 91 2f 01 	lds	r31, 0x012F
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	2d e0       	ldi	r18, 0x0D	; 13
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	ac 01       	movw	r20, r24
    2c5a:	42 9f       	mul	r20, r18
    2c5c:	c0 01       	movw	r24, r0
    2c5e:	43 9f       	mul	r20, r19
    2c60:	90 0d       	add	r25, r0
    2c62:	52 9f       	mul	r21, r18
    2c64:	90 0d       	add	r25, r0
    2c66:	11 24       	eor	r1, r1
    2c68:	e8 0f       	add	r30, r24
    2c6a:	f9 1f       	adc	r31, r25
    2c6c:	e6 59       	subi	r30, 0x96	; 150
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	60 81       	ld	r22, Z
    2c72:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].EndValue;
}
    2c74:	82 81       	ldd	r24, Z+2	; 0x02
    2c76:	93 81       	ldd	r25, Z+3	; 0x03
    2c78:	08 95       	ret

00002c7a <Timebase_LPDownCounter_Set_EndValue>:


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    2c7a:	e0 91 2e 01 	lds	r30, 0x012E
    2c7e:	f0 91 2f 01 	lds	r31, 0x012F
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	2d e0       	ldi	r18, 0x0D	; 13
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	dc 01       	movw	r26, r24
    2c8a:	a2 9f       	mul	r26, r18
    2c8c:	c0 01       	movw	r24, r0
    2c8e:	a3 9f       	mul	r26, r19
    2c90:	90 0d       	add	r25, r0
    2c92:	b2 9f       	mul	r27, r18
    2c94:	90 0d       	add	r25, r0
    2c96:	11 24       	eor	r1, r1
    2c98:	e8 0f       	add	r30, r24
    2c9a:	f9 1f       	adc	r31, r25
    2c9c:	e6 59       	subi	r30, 0x96	; 150
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	40 83       	st	Z, r20
    2ca2:	51 83       	std	Z+1, r21	; 0x01
    2ca4:	62 83       	std	Z+2, r22	; 0x02
    2ca6:	73 83       	std	Z+3, r23	; 0x03
}
    2ca8:	08 95       	ret

00002caa <Timebase_LPDownCounter_Get_PeriodValue>:


int32_t Timebase_LPDownCounter_Get_PeriodValue(uint8_t window){
    2caa:	e0 91 2e 01 	lds	r30, 0x012E
    2cae:	f0 91 2f 01 	lds	r31, 0x012F
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	2d e0       	ldi	r18, 0x0D	; 13
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	ac 01       	movw	r20, r24
    2cba:	42 9f       	mul	r20, r18
    2cbc:	c0 01       	movw	r24, r0
    2cbe:	43 9f       	mul	r20, r19
    2cc0:	90 0d       	add	r25, r0
    2cc2:	52 9f       	mul	r21, r18
    2cc4:	90 0d       	add	r25, r0
    2cc6:	11 24       	eor	r1, r1
    2cc8:	e8 0f       	add	r30, r24
    2cca:	f9 1f       	adc	r31, r25
    2ccc:	ee 58       	subi	r30, 0x8E	; 142
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->LPDownCounter[window].PeriodValue;
}
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	08 95       	ret

00002cda <Timebase_LPDownCounter_Set_PeriodValue>:


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    2cda:	e0 91 2e 01 	lds	r30, 0x012E
    2cde:	f0 91 2f 01 	lds	r31, 0x012F
    2ce2:	28 2f       	mov	r18, r24
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    2ce6:	77 ff       	sbrs	r23, 7
    2ce8:	13 c0       	rjmp	.+38     	; 0x2d10 <Timebase_LPDownCounter_Set_PeriodValue+0x36>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    2cea:	8d e0       	ldi	r24, 0x0D	; 13
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	ac 01       	movw	r20, r24
    2cf0:	24 9f       	mul	r18, r20
    2cf2:	c0 01       	movw	r24, r0
    2cf4:	25 9f       	mul	r18, r21
    2cf6:	90 0d       	add	r25, r0
    2cf8:	34 9f       	mul	r19, r20
    2cfa:	90 0d       	add	r25, r0
    2cfc:	11 24       	eor	r1, r1
    2cfe:	e8 0f       	add	r30, r24
    2d00:	f9 1f       	adc	r31, r25
    2d02:	ee 58       	subi	r30, 0x8E	; 142
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	10 82       	st	Z, r1
    2d08:	11 82       	std	Z+1, r1	; 0x01
    2d0a:	12 82       	std	Z+2, r1	; 0x02
    2d0c:	13 82       	std	Z+3, r1	; 0x03
    2d0e:	08 95       	ret
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    2d10:	8d e0       	ldi	r24, 0x0D	; 13
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	dc 01       	movw	r26, r24
    2d16:	2a 9f       	mul	r18, r26
    2d18:	c0 01       	movw	r24, r0
    2d1a:	2b 9f       	mul	r18, r27
    2d1c:	90 0d       	add	r25, r0
    2d1e:	3a 9f       	mul	r19, r26
    2d20:	90 0d       	add	r25, r0
    2d22:	11 24       	eor	r1, r1
    2d24:	e8 0f       	add	r30, r24
    2d26:	f9 1f       	adc	r31, r25
    2d28:	ee 58       	subi	r30, 0x8E	; 142
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	40 83       	st	Z, r20
    2d2e:	51 83       	std	Z+1, r21	; 0x01
    2d30:	62 83       	std	Z+2, r22	; 0x02
    2d32:	73 83       	std	Z+3, r23	; 0x03
    2d34:	08 95       	ret

00002d36 <Timebase_LPDownCounter_Get_Period_Flag>:
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
    2d36:	e0 91 2e 01 	lds	r30, 0x012E
    2d3a:	f0 91 2f 01 	lds	r31, 0x012F
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	2d e0       	ldi	r18, 0x0D	; 13
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	ac 01       	movw	r20, r24
    2d46:	42 9f       	mul	r20, r18
    2d48:	c0 01       	movw	r24, r0
    2d4a:	43 9f       	mul	r20, r19
    2d4c:	90 0d       	add	r25, r0
    2d4e:	52 9f       	mul	r21, r18
    2d50:	90 0d       	add	r25, r0
    2d52:	11 24       	eor	r1, r1
    2d54:	e8 0f       	add	r30, r24
    2d56:	f9 1f       	adc	r31, r25
    2d58:	e7 59       	subi	r30, 0x97	; 151
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}
    2d5e:	81 70       	andi	r24, 0x01	; 1
    2d60:	08 95       	ret

00002d62 <Timebase_LPDownCounter_Set_Period_Flag>:


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    2d62:	e0 91 2e 01 	lds	r30, 0x012E
    2d66:	f0 91 2f 01 	lds	r31, 0x012F
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	2d e0       	ldi	r18, 0x0D	; 13
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	ac 01       	movw	r20, r24
    2d72:	42 9f       	mul	r20, r18
    2d74:	c0 01       	movw	r24, r0
    2d76:	43 9f       	mul	r20, r19
    2d78:	90 0d       	add	r25, r0
    2d7a:	52 9f       	mul	r21, r18
    2d7c:	90 0d       	add	r25, r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	e8 0f       	add	r30, r24
    2d82:	f9 1f       	adc	r31, r25
    2d84:	e7 59       	subi	r30, 0x97	; 151
    2d86:	ff 4f       	sbci	r31, 0xFF	; 255
    2d88:	80 81       	ld	r24, Z
    2d8a:	81 60       	ori	r24, 0x01	; 1
    2d8c:	80 83       	st	Z, r24
}
    2d8e:	08 95       	ret

00002d90 <Timebase_LPDownCounter_Clear_Period_Flag>:


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2d90:	e0 91 2e 01 	lds	r30, 0x012E
    2d94:	f0 91 2f 01 	lds	r31, 0x012F
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	2d e0       	ldi	r18, 0x0D	; 13
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	ac 01       	movw	r20, r24
    2da0:	42 9f       	mul	r20, r18
    2da2:	c0 01       	movw	r24, r0
    2da4:	43 9f       	mul	r20, r19
    2da6:	90 0d       	add	r25, r0
    2da8:	52 9f       	mul	r21, r18
    2daa:	90 0d       	add	r25, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	e8 0f       	add	r30, r24
    2db0:	f9 1f       	adc	r31, r25
    2db2:	e7 59       	subi	r30, 0x97	; 151
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 81       	ld	r24, Z
    2db8:	8e 7f       	andi	r24, 0xFE	; 254
    2dba:	80 83       	st	Z, r24
}
    2dbc:	08 95       	ret

00002dbe <Timebase_LPDownCounter_Reset>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    2dbe:	e0 91 2e 01 	lds	r30, 0x012E
    2dc2:	f0 91 2f 01 	lds	r31, 0x012F
    2dc6:	90 e0       	ldi	r25, 0x00	; 0
    2dc8:	2d e0       	ldi	r18, 0x0D	; 13
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	ac 01       	movw	r20, r24
    2dce:	42 9f       	mul	r20, r18
    2dd0:	c0 01       	movw	r24, r0
    2dd2:	43 9f       	mul	r20, r19
    2dd4:	90 0d       	add	r25, r0
    2dd6:	52 9f       	mul	r21, r18
    2dd8:	90 0d       	add	r25, r0
    2dda:	11 24       	eor	r1, r1
    2ddc:	e8 0f       	add	r30, r24
    2dde:	f9 1f       	adc	r31, r25
    2de0:	e6 59       	subi	r30, 0x96	; 150
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	11 92       	st	Z+, r1
    2de6:	11 92       	st	Z+, r1
    2de8:	11 92       	st	Z+, r1
    2dea:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    2dec:	10 82       	st	Z, r1
    2dee:	11 82       	std	Z+1, r1	; 0x01
    2df0:	12 82       	std	Z+2, r1	; 0x02
    2df2:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2df4:	35 97       	sbiw	r30, 0x05	; 5
    2df6:	80 81       	ld	r24, Z
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2df8:	80 7e       	andi	r24, 0xE0	; 224
    2dfa:	80 83       	st	Z, r24
void Timebase_LPDownCounter_Reset(uint8_t window){
  Timebase_LPDownCounter_Set_EndValue(window, 0);
  Timebase_LPDownCounter_Set_Value(window, 0);
  Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_LPDownCounter_Clear_Period_Flag(window);
} 
    2dfc:	08 95       	ret

00002dfe <Timebase_LPDownCounter_Clear_All_Flags>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    2dfe:	e0 91 2e 01 	lds	r30, 0x012E
    2e02:	f0 91 2f 01 	lds	r31, 0x012F
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	2d e0       	ldi	r18, 0x0D	; 13
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	ac 01       	movw	r20, r24
    2e0e:	42 9f       	mul	r20, r18
    2e10:	c0 01       	movw	r24, r0
    2e12:	43 9f       	mul	r20, r19
    2e14:	90 0d       	add	r25, r0
    2e16:	52 9f       	mul	r21, r18
    2e18:	90 0d       	add	r25, r0
    2e1a:	11 24       	eor	r1, r1
    2e1c:	e8 0f       	add	r30, r24
    2e1e:	f9 1f       	adc	r31, r25
    2e20:	e6 59       	subi	r30, 0x96	; 150
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	11 92       	st	Z+, r1
    2e26:	11 92       	st	Z+, r1
    2e28:	11 92       	st	Z+, r1
    2e2a:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    2e2c:	10 82       	st	Z, r1
    2e2e:	11 82       	std	Z+1, r1	; 0x01
    2e30:	12 82       	std	Z+2, r1	; 0x02
    2e32:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2e34:	35 97       	sbiw	r30, 0x05	; 5
    2e36:	80 81       	ld	r24, Z
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2e38:	80 7e       	andi	r24, 0xE0	; 224
    2e3a:	80 83       	st	Z, r24
} 


void Timebase_LPDownCounter_Clear_All_Flags(uint8_t window){
  Timebase_LPDownCounter_Reset( window );
}
    2e3c:	08 95       	ret

00002e3e <Timebase_LPDownCounter_Start>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    2e3e:	e0 91 2e 01 	lds	r30, 0x012E
    2e42:	f0 91 2f 01 	lds	r31, 0x012F
    2e46:	90 e0       	ldi	r25, 0x00	; 0
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2e48:	2d e0       	ldi	r18, 0x0D	; 13
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	ac 01       	movw	r20, r24
    2e4e:	42 9f       	mul	r20, r18
    2e50:	c0 01       	movw	r24, r0
    2e52:	43 9f       	mul	r20, r19
    2e54:	90 0d       	add	r25, r0
    2e56:	52 9f       	mul	r21, r18
    2e58:	90 0d       	add	r25, r0
    2e5a:	11 24       	eor	r1, r1
    2e5c:	e8 0f       	add	r30, r24
    2e5e:	f9 1f       	adc	r31, r25
    2e60:	e7 59       	subi	r30, 0x97	; 151
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	90 81       	ld	r25, Z
    2e66:	89 2f       	mov	r24, r25
    2e68:	86 95       	lsr	r24
    2e6a:	8f 70       	andi	r24, 0x0F	; 15
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	19 f0       	breq	.+6      	; 0x2e76 <Timebase_LPDownCounter_Start+0x38>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2e70:	91 7e       	andi	r25, 0xE1	; 225
    2e72:	92 60       	ori	r25, 0x02	; 2
    2e74:	90 83       	st	Z, r25
    2e76:	08 95       	ret

00002e78 <Timebase_LPDownCounter_Stop>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    2e78:	e0 91 2e 01 	lds	r30, 0x012E
    2e7c:	f0 91 2f 01 	lds	r31, 0x012F
    2e80:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Stop(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2e82:	2d e0       	ldi	r18, 0x0D	; 13
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	ac 01       	movw	r20, r24
    2e88:	42 9f       	mul	r20, r18
    2e8a:	c0 01       	movw	r24, r0
    2e8c:	43 9f       	mul	r20, r19
    2e8e:	90 0d       	add	r25, r0
    2e90:	52 9f       	mul	r21, r18
    2e92:	90 0d       	add	r25, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	e8 0f       	add	r30, r24
    2e98:	f9 1f       	adc	r31, r25
    2e9a:	e7 59       	subi	r30, 0x97	; 151
    2e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9e:	90 81       	ld	r25, Z
    2ea0:	89 2f       	mov	r24, r25
    2ea2:	86 95       	lsr	r24
    2ea4:	8f 70       	andi	r24, 0x0F	; 15
    2ea6:	82 30       	cpi	r24, 0x02	; 2
    2ea8:	19 f0       	breq	.+6      	; 0x2eb0 <Timebase_LPDownCounter_Stop+0x38>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2eaa:	91 7e       	andi	r25, 0xE1	; 225
    2eac:	94 60       	ori	r25, 0x04	; 4
    2eae:	90 83       	st	Z, r25
    2eb0:	08 95       	ret

00002eb2 <Timebase_LPDownCounter_Set_Securely>:
    Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	7a 01       	movw	r14, r20
    2ec0:	8b 01       	movw	r16, r22

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    2ec2:	c0 91 2e 01 	lds	r28, 0x012E
    2ec6:	d0 91 2f 01 	lds	r29, 0x012F
    2eca:	68 2f       	mov	r22, r24
    2ecc:	70 e0       	ldi	r23, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2ece:	8d e0       	ldi	r24, 0x0D	; 13
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	68 9f       	mul	r22, r24
    2ed4:	f0 01       	movw	r30, r0
    2ed6:	69 9f       	mul	r22, r25
    2ed8:	f0 0d       	add	r31, r0
    2eda:	78 9f       	mul	r23, r24
    2edc:	f0 0d       	add	r31, r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	ec 0f       	add	r30, r28
    2ee2:	fd 1f       	adc	r31, r29
    2ee4:	e7 59       	subi	r30, 0x97	; 151
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	e9 56       	subi	r30, 0x69	; 105
    2eec:	f0 40       	sbci	r31, 0x00	; 0
    2eee:	86 95       	lsr	r24
    2ef0:	8f 70       	andi	r24, 0x0F	; 15
    2ef2:	89 f5       	brne	.+98     	; 0x2f56 <Timebase_LPDownCounter_Set_Securely+0xa4>
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    2ef4:	e2 59       	subi	r30, 0x92	; 146
    2ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef8:	e0 82       	st	Z, r14
    2efa:	f1 82       	std	Z+1, r15	; 0x01
    2efc:	02 83       	std	Z+2, r16	; 0x02
    2efe:	13 83       	std	Z+3, r17	; 0x03


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    2f00:	28 8d       	ldd	r18, Y+24	; 0x18
    2f02:	39 8d       	ldd	r19, Y+25	; 0x19
    2f04:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2f06:	5b 8d       	ldd	r21, Y+27	; 0x1b
    temp1 = Timebase->Time.LPTimerSeconds;
    2f08:	88 8d       	ldd	r24, Y+24	; 0x18
    2f0a:	99 8d       	ldd	r25, Y+25	; 0x19
    2f0c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2f0e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    if(temp0 == temp1){
    2f10:	28 17       	cp	r18, r24
    2f12:	39 07       	cpc	r19, r25
    2f14:	4a 07       	cpc	r20, r26
    2f16:	5b 07       	cpc	r21, r27
    2f18:	99 f7       	brne	.-26     	; 0x2f00 <Timebase_LPDownCounter_Set_Securely+0x4e>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    2f1a:	8d e0       	ldi	r24, 0x0D	; 13
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	68 9f       	mul	r22, r24
    2f20:	f0 01       	movw	r30, r0
    2f22:	69 9f       	mul	r22, r25
    2f24:	f0 0d       	add	r31, r0
    2f26:	78 9f       	mul	r23, r24
    2f28:	f0 0d       	add	r31, r0
    2f2a:	11 24       	eor	r1, r1
    2f2c:	ec 0f       	add	r30, r28
    2f2e:	fd 1f       	adc	r31, r29
    2f30:	e6 59       	subi	r30, 0x96	; 150
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	2e 0d       	add	r18, r14
    2f36:	3f 1d       	adc	r19, r15
    2f38:	40 1f       	adc	r20, r16
    2f3a:	51 1f       	adc	r21, r17
    2f3c:	20 83       	st	Z, r18
    2f3e:	31 83       	std	Z+1, r19	; 0x01
    2f40:	42 83       	std	Z+2, r20	; 0x02
    2f42:	53 83       	std	Z+3, r21	; 0x03
  Timebase_LPDownCounter_Reset( window );
}


void Timebase_LPDownCounter_Start(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    2f44:	92 91       	ld	r25, -Z
    2f46:	89 2f       	mov	r24, r25
    2f48:	86 95       	lsr	r24
    2f4a:	8f 70       	andi	r24, 0x0F	; 15
    2f4c:	81 30       	cpi	r24, 0x01	; 1
    2f4e:	19 f0       	breq	.+6      	; 0x2f56 <Timebase_LPDownCounter_Set_Securely+0xa4>
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2f50:	91 7e       	andi	r25, 0xE1	; 225
    2f52:	92 60       	ori	r25, 0x02	; 2
    2f54:	90 83       	st	Z, r25
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_LPDownCounter_Set_Value(window, value);
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPTimer_Get_Seconds() + value);
    Timebase_LPDownCounter_Start(window);
  }
}
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	ff 90       	pop	r15
    2f60:	ef 90       	pop	r14
    2f62:	08 95       	ret

00002f64 <Timebase_LPDownCounter_Set_Forcefully>:


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    2f68:	e0 91 2e 01 	lds	r30, 0x012E
    2f6c:	f0 91 2f 01 	lds	r31, 0x012F
    2f70:	a8 2f       	mov	r26, r24
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	2d e0       	ldi	r18, 0x0D	; 13
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	e9 01       	movw	r28, r18
    2f7a:	ac 9f       	mul	r26, r28
    2f7c:	90 01       	movw	r18, r0
    2f7e:	ad 9f       	mul	r26, r29
    2f80:	30 0d       	add	r19, r0
    2f82:	bc 9f       	mul	r27, r28
    2f84:	30 0d       	add	r19, r0
    2f86:	11 24       	eor	r1, r1
    2f88:	e2 0f       	add	r30, r18
    2f8a:	f3 1f       	adc	r31, r19
    2f8c:	e6 59       	subi	r30, 0x96	; 150
    2f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f90:	11 92       	st	Z+, r1
    2f92:	11 92       	st	Z+, r1
    2f94:	11 92       	st	Z+, r1
    2f96:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    2f98:	10 82       	st	Z, r1
    2f9a:	11 82       	std	Z+1, r1	; 0x01
    2f9c:	12 82       	std	Z+2, r1	; 0x02
    2f9e:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    2fa0:	35 97       	sbiw	r30, 0x05	; 5
    2fa2:	90 81       	ld	r25, Z
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2fa4:	90 7e       	andi	r25, 0xE0	; 224
    2fa6:	90 83       	st	Z, r25
}


void Timebase_LPDownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_LPDownCounter_Reset( window );
  Timebase_LPDownCounter_Set_Securely( window, value );
    2fa8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Timebase_LPDownCounter_Set_Securely>
} 
    2fac:	df 91       	pop	r29
    2fae:	cf 91       	pop	r28
    2fb0:	08 95       	ret

00002fb2 <Timebase_LPDownCounter_Update>:


void Timebase_LPDownCounter_Update(uint8_t window){
    2fb2:	ef 92       	push	r14
    2fb4:	ff 92       	push	r15
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    2fbe:	c0 91 2e 01 	lds	r28, 0x012E
    2fc2:	d0 91 2f 01 	lds	r29, 0x012F
    2fc6:	68 2f       	mov	r22, r24
    2fc8:	70 e0       	ldi	r23, 0x00	; 0
    2fca:	8d e0       	ldi	r24, 0x0D	; 13
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	68 9f       	mul	r22, r24
    2fd0:	f0 01       	movw	r30, r0
    2fd2:	69 9f       	mul	r22, r25
    2fd4:	f0 0d       	add	r31, r0
    2fd6:	78 9f       	mul	r23, r24
    2fd8:	f0 0d       	add	r31, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	ec 0f       	add	r30, r28
    2fde:	fd 1f       	adc	r31, r29
    2fe0:	e7 59       	subi	r30, 0x97	; 151
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	e9 56       	subi	r30, 0x69	; 105
    2fe8:	f0 40       	sbci	r31, 0x00	; 0
    2fea:	86 95       	lsr	r24
    2fec:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_LPDownCounter_Set_Securely( window, value );
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <Timebase_LPDownCounter_Update+0x42>
    2ff2:	43 c0       	rjmp	.+134    	; 0x307a <Timebase_LPDownCounter_Update+0xc8>
  Timebase->LPDownCounter[window].Value = value;
}


int32_t Timebase_LPDownCounter_Get_EndValue(uint8_t window){
  return Timebase->LPDownCounter[window].EndValue;
    2ff4:	e6 59       	subi	r30, 0x96	; 150
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	e0 80       	ld	r14, Z
    2ffa:	f1 80       	ldd	r15, Z+1	; 0x01
    2ffc:	02 81       	ldd	r16, Z+2	; 0x02
    2ffe:	13 81       	ldd	r17, Z+3	; 0x03


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    3000:	28 8d       	ldd	r18, Y+24	; 0x18
    3002:	39 8d       	ldd	r19, Y+25	; 0x19
    3004:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3006:	5b 8d       	ldd	r21, Y+27	; 0x1b
    temp1 = Timebase->Time.LPTimerSeconds;
    3008:	88 8d       	ldd	r24, Y+24	; 0x18
    300a:	99 8d       	ldd	r25, Y+25	; 0x19
    300c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    300e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    if(temp0 == temp1){
    3010:	28 17       	cp	r18, r24
    3012:	39 07       	cpc	r19, r25
    3014:	4a 07       	cpc	r20, r26
    3016:	5b 07       	cpc	r21, r27
    3018:	99 f7       	brne	.-26     	; 0x3000 <Timebase_LPDownCounter_Update+0x4e>
} 


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    301a:	d8 01       	movw	r26, r16
    301c:	c7 01       	movw	r24, r14
    301e:	82 1b       	sub	r24, r18
    3020:	93 0b       	sbc	r25, r19
    3022:	a4 0b       	sbc	r26, r20
    3024:	b5 0b       	sbc	r27, r21
    3026:	9c 01       	movw	r18, r24
    3028:	ad 01       	movw	r20, r26
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    302a:	8d e0       	ldi	r24, 0x0D	; 13
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	68 9f       	mul	r22, r24
    3030:	f0 01       	movw	r30, r0
    3032:	69 9f       	mul	r22, r25
    3034:	f0 0d       	add	r31, r0
    3036:	78 9f       	mul	r23, r24
    3038:	f0 0d       	add	r31, r0
    303a:	11 24       	eor	r1, r1
    303c:	ec 0f       	add	r30, r28
    303e:	fd 1f       	adc	r31, r29
    3040:	df 01       	movw	r26, r30
    3042:	a2 59       	subi	r26, 0x92	; 146
    3044:	bf 4f       	sbci	r27, 0xFF	; 255
    3046:	2d 93       	st	X+, r18
    3048:	3d 93       	st	X+, r19
    304a:	4d 93       	st	X+, r20
    304c:	5c 93       	st	X, r21
    304e:	13 97       	sbiw	r26, 0x03	; 3


void Timebase_LPDownCounter_Update(uint8_t window){
  if( Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
    3050:	12 16       	cp	r1, r18
    3052:	13 06       	cpc	r1, r19
    3054:	14 06       	cpc	r1, r20
    3056:	15 06       	cpc	r1, r21
    3058:	dc f1       	brlt	.+118    	; 0x30d0 <Timebase_LPDownCounter_Update+0x11e>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    305a:	e6 59       	subi	r30, 0x96	; 150
    305c:	ff 4f       	sbci	r31, 0xFF	; 255
    305e:	10 82       	st	Z, r1
    3060:	11 82       	std	Z+1, r1	; 0x01
    3062:	12 82       	std	Z+2, r1	; 0x02
    3064:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    3066:	1d 92       	st	X+, r1
    3068:	1d 92       	st	X+, r1
    306a:	1d 92       	st	X+, r1
    306c:	1c 92       	st	X, r1
    306e:	13 97       	sbiw	r26, 0x03	; 3
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3070:	82 91       	ld	r24, -Z
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3072:	80 7e       	andi	r24, 0xE0	; 224
    3074:	88 60       	ori	r24, 0x08	; 8
    3076:	80 83       	st	Z, r24
    3078:	2b c0       	rjmp	.+86     	; 0x30d0 <Timebase_LPDownCounter_Update+0x11e>
    Timebase_LPDownCounter_Set_Value(window, Timebase_LPDownCounter_Get_EndValue(window) - Timebase_LPTimer_Get_Seconds());
    if(Timebase_LPDownCounter_Get_Value(window) <= 0){
      Timebase_LPDownCounter_Reset(window);
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    307a:	82 30       	cpi	r24, 0x02	; 2
    307c:	49 f5       	brne	.+82     	; 0x30d0 <Timebase_LPDownCounter_Update+0x11e>
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    307e:	e2 59       	subi	r30, 0x92	; 146
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	e0 80       	ld	r14, Z
    3084:	f1 80       	ldd	r15, Z+1	; 0x01
    3086:	02 81       	ldd	r16, Z+2	; 0x02
    3088:	13 81       	ldd	r17, Z+3	; 0x03


int32_t Timebase_LPTimer_Get_Seconds(void){
  int32_t temp0, temp1;
  while(1){
    temp0 = Timebase->Time.LPTimerSeconds;
    308a:	28 8d       	ldd	r18, Y+24	; 0x18
    308c:	39 8d       	ldd	r19, Y+25	; 0x19
    308e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    3090:	5b 8d       	ldd	r21, Y+27	; 0x1b
    temp1 = Timebase->Time.LPTimerSeconds;
    3092:	88 8d       	ldd	r24, Y+24	; 0x18
    3094:	99 8d       	ldd	r25, Y+25	; 0x19
    3096:	aa 8d       	ldd	r26, Y+26	; 0x1a
    3098:	bb 8d       	ldd	r27, Y+27	; 0x1b
    if(temp0 == temp1){
    309a:	28 17       	cp	r18, r24
    309c:	39 07       	cpc	r19, r25
    309e:	4a 07       	cpc	r20, r26
    30a0:	5b 07       	cpc	r21, r27
    30a2:	99 f7       	brne	.-26     	; 0x308a <Timebase_LPDownCounter_Update+0xd8>
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    30a4:	8d e0       	ldi	r24, 0x0D	; 13
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	dc 01       	movw	r26, r24
    30aa:	6a 9f       	mul	r22, r26
    30ac:	c0 01       	movw	r24, r0
    30ae:	6b 9f       	mul	r22, r27
    30b0:	90 0d       	add	r25, r0
    30b2:	7a 9f       	mul	r23, r26
    30b4:	90 0d       	add	r25, r0
    30b6:	11 24       	eor	r1, r1
    30b8:	c8 0f       	add	r28, r24
    30ba:	d9 1f       	adc	r29, r25
    30bc:	c6 59       	subi	r28, 0x96	; 150
    30be:	df 4f       	sbci	r29, 0xFF	; 255
    30c0:	2e 0d       	add	r18, r14
    30c2:	3f 1d       	adc	r19, r15
    30c4:	40 1f       	adc	r20, r16
    30c6:	51 1f       	adc	r21, r17
    30c8:	28 83       	st	Y, r18
    30ca:	39 83       	std	Y+1, r19	; 0x01
    30cc:	4a 83       	std	Y+2, r20	; 0x02
    30ce:	5b 83       	std	Y+3, r21	; 0x03
      Timebase_LPDownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_LPDownCounter_Set_EndValue(window, Timebase_LPDownCounter_Get_Value(window) + Timebase_LPTimer_Get_Seconds());
  }
}
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	08 95       	ret

000030de <Timebase_LPDownCounter_Expired>:


uint8_t Timebase_LPDownCounter_Expired(uint8_t window){
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	e0 91 2e 01 	lds	r30, 0x012E
    30e4:	f0 91 2f 01 	lds	r31, 0x012F
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	2d e0       	ldi	r18, 0x0D	; 13
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	bc 01       	movw	r22, r24
    30f0:	62 9f       	mul	r22, r18
    30f2:	c0 01       	movw	r24, r0
    30f4:	63 9f       	mul	r22, r19
    30f6:	90 0d       	add	r25, r0
    30f8:	72 9f       	mul	r23, r18
    30fa:	90 0d       	add	r25, r0
    30fc:	11 24       	eor	r1, r1
    30fe:	e8 0f       	add	r30, r24
    3100:	f9 1f       	adc	r31, r25
    3102:	e7 59       	subi	r30, 0x97	; 151
    3104:	ff 4f       	sbci	r31, 0xFF	; 255
    3106:	80 81       	ld	r24, Z
    3108:	86 95       	lsr	r24
    310a:	8f 70       	andi	r24, 0x0F	; 15
    310c:	84 30       	cpi	r24, 0x04	; 4
    310e:	09 f4       	brne	.+2      	; 0x3112 <Timebase_LPDownCounter_Expired+0x34>
    3110:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3112:	84 2f       	mov	r24, r20
    3114:	08 95       	ret

00003116 <Timebase_LPDownCounter_Expired_Event>:

/****************************LPDownCounter Functions Start***************************/

#ifdef TIMEBASE_LP_DOWNCOUNTER
uint8_t Timebase_LPDownCounter_Get_Status(uint8_t window){
  return Timebase->LPDownCounter[window].Status.Value;
    3116:	e0 91 2e 01 	lds	r30, 0x012E
    311a:	f0 91 2f 01 	lds	r31, 0x012F
    311e:	90 e0       	ldi	r25, 0x00	; 0
  }
}


uint8_t Timebase_LPDownCounter_Expired_Event(uint8_t window){
  if(Timebase_LPDownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    3120:	2d e0       	ldi	r18, 0x0D	; 13
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	ac 01       	movw	r20, r24
    3126:	42 9f       	mul	r20, r18
    3128:	c0 01       	movw	r24, r0
    312a:	43 9f       	mul	r20, r19
    312c:	90 0d       	add	r25, r0
    312e:	52 9f       	mul	r21, r18
    3130:	90 0d       	add	r25, r0
    3132:	11 24       	eor	r1, r1
    3134:	e8 0f       	add	r30, r24
    3136:	f9 1f       	adc	r31, r25
    3138:	df 01       	movw	r26, r30
    313a:	a7 59       	subi	r26, 0x97	; 151
    313c:	bf 4f       	sbci	r27, 0xFF	; 255
    313e:	8c 91       	ld	r24, X
    3140:	86 95       	lsr	r24
    3142:	8f 70       	andi	r24, 0x0F	; 15
    3144:	84 30       	cpi	r24, 0x04	; 4
    3146:	11 f0       	breq	.+4      	; 0x314c <Timebase_LPDownCounter_Expired_Event+0x36>
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	08 95       	ret
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    314c:	e6 59       	subi	r30, 0x96	; 150
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	11 92       	st	Z+, r1
    3152:	11 92       	st	Z+, r1
    3154:	11 92       	st	Z+, r1
    3156:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    3158:	10 82       	st	Z, r1
    315a:	11 82       	std	Z+1, r1	; 0x01
    315c:	12 82       	std	Z+2, r1	; 0x02
    315e:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    3160:	8c 91       	ld	r24, X
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    3162:	80 7e       	andi	r24, 0xE0	; 224
    3164:	8c 93       	st	X, r24
    3166:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3168:	08 95       	ret

0000316a <Timebase_LPDownCounter_Set_Period_Value_Securely>:


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
  }
}


uint8_t Timebase_LPDownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
    316e:	c0 91 2e 01 	lds	r28, 0x012E
    3172:	d0 91 2f 01 	lds	r29, 0x012F
    3176:	28 2f       	mov	r18, r24
    3178:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    317a:	8d e0       	ldi	r24, 0x0D	; 13
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	28 9f       	mul	r18, r24
    3180:	f0 01       	movw	r30, r0
    3182:	29 9f       	mul	r18, r25
    3184:	f0 0d       	add	r31, r0
    3186:	38 9f       	mul	r19, r24
    3188:	f0 0d       	add	r31, r0
    318a:	11 24       	eor	r1, r1
    318c:	ec 0f       	add	r30, r28
    318e:	fd 1f       	adc	r31, r29
    3190:	e7 59       	subi	r30, 0x97	; 151
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	80 81       	ld	r24, Z
    3196:	e9 56       	subi	r30, 0x69	; 105
    3198:	f0 40       	sbci	r31, 0x00	; 0
    319a:	80 fd       	sbrc	r24, 0
    319c:	25 c0       	rjmp	.+74     	; 0x31e8 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    319e:	e2 59       	subi	r30, 0x92	; 146
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	81 91       	ld	r24, Z+
    31a4:	91 91       	ld	r25, Z+
    31a6:	a1 91       	ld	r26, Z+
    31a8:	b1 91       	ld	r27, Z+
    31aa:	84 1b       	sub	r24, r20
    31ac:	95 0b       	sbc	r25, r21
    31ae:	a6 0b       	sbc	r26, r22
    31b0:	b7 0b       	sbc	r27, r23
  return Timebase->LPDownCounter[window].PeriodValue;
}


void Timebase_LPDownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    31b2:	b7 ff       	sbrs	r27, 7
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x56>
    Timebase->LPDownCounter[window].PeriodValue = 0;
    31b6:	10 82       	st	Z, r1
    31b8:	11 82       	std	Z+1, r1	; 0x01
    31ba:	12 82       	std	Z+2, r1	; 0x02
    31bc:	13 82       	std	Z+3, r1	; 0x03
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <Timebase_LPDownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->LPDownCounter[window].PeriodValue = value;
    31c0:	80 83       	st	Z, r24
    31c2:	91 83       	std	Z+1, r25	; 0x01
    31c4:	a2 83       	std	Z+2, r26	; 0x02
    31c6:	b3 83       	std	Z+3, r27	; 0x03
  return Timebase->LPDownCounter[window].Status.PeriodFlag;
}


void Timebase_LPDownCounter_Set_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    31c8:	8d e0       	ldi	r24, 0x0D	; 13
    31ca:	90 e0       	ldi	r25, 0x00	; 0
    31cc:	28 9f       	mul	r18, r24
    31ce:	f0 01       	movw	r30, r0
    31d0:	29 9f       	mul	r18, r25
    31d2:	f0 0d       	add	r31, r0
    31d4:	38 9f       	mul	r19, r24
    31d6:	f0 0d       	add	r31, r0
    31d8:	11 24       	eor	r1, r1
    31da:	ec 0f       	add	r30, r28
    31dc:	fd 1f       	adc	r31, r29
    31de:	e7 59       	subi	r30, 0x97	; 151
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 81       	ld	r24, Z
    31e4:	81 60       	ori	r24, 0x01	; 1
    31e6:	80 83       	st	Z, r24
void Timebase_LPDownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_LPDownCounter_Set_PeriodValue(window, Timebase_LPDownCounter_Get_Value(window) - value);
    Timebase_LPDownCounter_Set_Period_Flag(window);
  }
}
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	08 95       	ret

000031ee <Timebase_LPDownCounter_Get_Remaining_Period_Value>:
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    31ee:	e0 91 2e 01 	lds	r30, 0x012E
    31f2:	f0 91 2f 01 	lds	r31, 0x012F
    31f6:	90 e0       	ldi	r25, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    31f8:	2d e0       	ldi	r18, 0x0D	; 13
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	ac 01       	movw	r20, r24
    31fe:	42 9f       	mul	r20, r18
    3200:	c0 01       	movw	r24, r0
    3202:	43 9f       	mul	r20, r19
    3204:	90 0d       	add	r25, r0
    3206:	52 9f       	mul	r21, r18
    3208:	90 0d       	add	r25, r0
    320a:	11 24       	eor	r1, r1
    320c:	e8 0f       	add	r30, r24
    320e:	f9 1f       	adc	r31, r25
    3210:	df 01       	movw	r26, r30
    3212:	ae 58       	subi	r26, 0x8E	; 142
    3214:	bf 4f       	sbci	r27, 0xFF	; 255
    3216:	e2 59       	subi	r30, 0x92	; 146
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	20 81       	ld	r18, Z
    321c:	31 81       	ldd	r19, Z+1	; 0x01
    321e:	42 81       	ldd	r20, Z+2	; 0x02
    3220:	53 81       	ldd	r21, Z+3	; 0x03
    3222:	8d 91       	ld	r24, X+
    3224:	9d 91       	ld	r25, X+
    3226:	0d 90       	ld	r0, X+
    3228:	bc 91       	ld	r27, X
    322a:	a0 2d       	mov	r26, r0
    322c:	28 1b       	sub	r18, r24
    322e:	39 0b       	sbc	r19, r25
    3230:	4a 0b       	sbc	r20, r26
    3232:	5b 0b       	sbc	r21, r27
    3234:	57 ff       	sbrs	r21, 7
    3236:	04 c0       	rjmp	.+8      	; 0x3240 <Timebase_LPDownCounter_Get_Remaining_Period_Value+0x52>
    3238:	20 e0       	ldi	r18, 0x00	; 0
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    3240:	b9 01       	movw	r22, r18
    3242:	ca 01       	movw	r24, r20
    3244:	08 95       	ret

00003246 <Timebase_LPDownCounter_Period_Value_Expired>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
  Timebase->LPDownCounter[window].Status.Value = value;
}


int32_t Timebase_LPDownCounter_Get_Value(uint8_t window){
  return Timebase->LPDownCounter[window].Value;
    324a:	c0 91 2e 01 	lds	r28, 0x012E
    324e:	d0 91 2f 01 	lds	r29, 0x012F
    3252:	68 2f       	mov	r22, r24
    3254:	70 e0       	ldi	r23, 0x00	; 0
  }
}


int32_t Timebase_LPDownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_LPDownCounter_Get_Value(window) - Timebase_LPDownCounter_Get_PeriodValue(window) ;
    3256:	8d e0       	ldi	r24, 0x0D	; 13
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	68 9f       	mul	r22, r24
    325c:	f0 01       	movw	r30, r0
    325e:	69 9f       	mul	r22, r25
    3260:	f0 0d       	add	r31, r0
    3262:	78 9f       	mul	r23, r24
    3264:	f0 0d       	add	r31, r0
    3266:	11 24       	eor	r1, r1
    3268:	ec 0f       	add	r30, r28
    326a:	fd 1f       	adc	r31, r29
    326c:	df 01       	movw	r26, r30
    326e:	ae 58       	subi	r26, 0x8E	; 142
    3270:	bf 4f       	sbci	r27, 0xFF	; 255
    3272:	e2 59       	subi	r30, 0x92	; 146
    3274:	ff 4f       	sbci	r31, 0xFF	; 255
    3276:	20 81       	ld	r18, Z
    3278:	31 81       	ldd	r19, Z+1	; 0x01
    327a:	42 81       	ldd	r20, Z+2	; 0x02
    327c:	53 81       	ldd	r21, Z+3	; 0x03
    327e:	8d 91       	ld	r24, X+
    3280:	9d 91       	ld	r25, X+
    3282:	0d 90       	ld	r0, X+
    3284:	bc 91       	ld	r27, X
    3286:	a0 2d       	mov	r26, r0
    3288:	28 1b       	sub	r18, r24
    328a:	39 0b       	sbc	r19, r25
    328c:	4a 0b       	sbc	r20, r26
    328e:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    3290:	57 fd       	sbrc	r21, 7
    3292:	07 c0       	rjmp	.+14     	; 0x32a2 <Timebase_LPDownCounter_Period_Value_Expired+0x5c>
  return temp;
}


uint8_t Timebase_LPDownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_LPDownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_LPDownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    3294:	21 15       	cp	r18, r1
    3296:	31 05       	cpc	r19, r1
    3298:	41 05       	cpc	r20, r1
    329a:	51 05       	cpc	r21, r1
    329c:	11 f0       	breq	.+4      	; 0x32a2 <Timebase_LPDownCounter_Period_Value_Expired+0x5c>
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	14 c0       	rjmp	.+40     	; 0x32ca <Timebase_LPDownCounter_Period_Value_Expired+0x84>
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	8d e0       	ldi	r24, 0x0D	; 13
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	ac 01       	movw	r20, r24
    32aa:	64 9f       	mul	r22, r20
    32ac:	c0 01       	movw	r24, r0
    32ae:	65 9f       	mul	r22, r21
    32b0:	90 0d       	add	r25, r0
    32b2:	74 9f       	mul	r23, r20
    32b4:	90 0d       	add	r25, r0
    32b6:	11 24       	eor	r1, r1
    32b8:	c8 0f       	add	r28, r24
    32ba:	d9 1f       	adc	r29, r25
    32bc:	c7 59       	subi	r28, 0x97	; 151
    32be:	df 4f       	sbci	r29, 0xFF	; 255
    32c0:	88 81       	ld	r24, Y
    32c2:	80 ff       	sbrs	r24, 0
    32c4:	21 e0       	ldi	r18, 0x01	; 1
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    32ca:	82 2f       	mov	r24, r18
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	08 95       	ret

000032d2 <Timebase_LPDownCounter_Period_Value_Expired_Event>:


uint8_t Timebase_LPDownCounter_Period_Value_Expired_Event(uint8_t window){
    32d2:	1f 93       	push	r17
    32d4:	18 2f       	mov	r17, r24
  if(Timebase_LPDownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    32d6:	0e 94 23 19 	call	0x3246	; 0x3246 <Timebase_LPDownCounter_Period_Value_Expired>
    32da:	81 30       	cpi	r24, 0x01	; 1
    32dc:	11 f0       	breq	.+4      	; 0x32e2 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x10>
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	18 c0       	rjmp	.+48     	; 0x3312 <Timebase_LPDownCounter_Period_Value_Expired_Event+0x40>
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    32e2:	e0 91 2e 01 	lds	r30, 0x012E
    32e6:	f0 91 2f 01 	lds	r31, 0x012F
    32ea:	21 2f       	mov	r18, r17
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	8d e0       	ldi	r24, 0x0D	; 13
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	ac 01       	movw	r20, r24
    32f4:	24 9f       	mul	r18, r20
    32f6:	c0 01       	movw	r24, r0
    32f8:	25 9f       	mul	r18, r21
    32fa:	90 0d       	add	r25, r0
    32fc:	34 9f       	mul	r19, r20
    32fe:	90 0d       	add	r25, r0
    3300:	11 24       	eor	r1, r1
    3302:	e8 0f       	add	r30, r24
    3304:	f9 1f       	adc	r31, r25
    3306:	e7 59       	subi	r30, 0x97	; 151
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	80 81       	ld	r24, Z
    330c:	8e 7f       	andi	r24, 0xFE	; 254
    330e:	80 83       	st	Z, r24
    3310:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_LPDownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    3312:	1f 91       	pop	r17
    3314:	08 95       	ret

00003316 <Timebase_LPDownCounter_Update_All>:


void Timebase_LPDownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Update(i);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <Timebase_LPDownCounter_Update>
  }
}
    331c:	08 95       	ret

0000331e <Timebase_LPDownCounter_Reset_All>:
  return Timebase->LPDownCounter[window].EndValue;
}


void Timebase_LPDownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].EndValue = value;
    331e:	e0 91 2e 01 	lds	r30, 0x012E
    3322:	f0 91 2f 01 	lds	r31, 0x012F
    3326:	e6 59       	subi	r30, 0x96	; 150
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	11 92       	st	Z+, r1
    332c:	11 92       	st	Z+, r1
    332e:	11 92       	st	Z+, r1
    3330:	11 92       	st	Z+, r1
  return Timebase->LPDownCounter[window].Value;
}


void Timebase_LPDownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->LPDownCounter[window].Value = value;
    3332:	10 82       	st	Z, r1
    3334:	11 82       	std	Z+1, r1	; 0x01
    3336:	12 82       	std	Z+2, r1	; 0x02
    3338:	13 82       	std	Z+3, r1	; 0x03
  return Timebase->LPDownCounter[window].Status.Value;
}


void Timebase_LPDownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->LPDownCounter[window].Status.Value = value;
    333a:	35 97       	sbiw	r30, 0x05	; 5
    333c:	80 81       	ld	r24, Z
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}


void Timebase_LPDownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->LPDownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    333e:	80 7e       	andi	r24, 0xE0	; 224
    3340:	80 83       	st	Z, r24

void Timebase_LPDownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_LP_DOWNCOUNTER; i++){
    Timebase_LPDownCounter_Reset(i);
  }
}
    3342:	08 95       	ret

00003344 <Timebase_Get_Update_Req_Sts>:


/*******************************Common Functions Start******************************/

uint8_t  Timebase_Get_Update_Req_Sts(void){
  return Timebase->UpdateRequest;
    3344:	e0 91 2e 01 	lds	r30, 0x012E
    3348:	f0 91 2f 01 	lds	r31, 0x012F
    334c:	84 8d       	ldd	r24, Z+28	; 0x1c
}
    334e:	08 95       	ret

00003350 <Timebase_Reset>:


void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    3350:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Timebase_UpCounter_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    3354:	0e 94 1f 12 	call	0x243e	; 0x243e <Timebase_DownCounter_SS_Reset_All>
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    3358:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <Timebase_DownCounter_Reset_All>
  #endif
}
    335c:	08 95       	ret

0000335e <Timebase_LP_Reset>:


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    335e:	0e 94 8f 19 	call	0x331e	; 0x331e <Timebase_LPDownCounter_Reset_All>
  #endif
}
    3362:	08 95       	ret

00003364 <Timebase_Init>:


void Timebase_Init(uint16_t UpdateRateHz){
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    336a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    336e:	c8 01       	movw	r24, r16
    3370:	0e 94 ef 01 	call	0x3de	; 0x3de <Timebase_Timer_Config>
  Timebase_Reset();
    3374:	0e 94 a8 19 	call	0x3350	; 0x3350 <Timebase_Reset>
  
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Config(1);
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <Timebase_LPTimer_Config>
}


void Timebase_LP_Reset(void){
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  Timebase_LPDownCounter_Reset_All();
    3380:	0e 94 8f 19 	call	0x331e	; 0x331e <Timebase_LPDownCounter_Reset_All>
  #warning LPTimer default Freq 1Hz
  Timebase_LPTimer_Config(1);
  Timebase_LP_Reset();
  #endif
  
}
    3384:	1f 91       	pop	r17
    3386:	0f 91       	pop	r16
    3388:	08 95       	ret

0000338a <Timebase_Main_Loop_Executables>:


void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    338a:	e0 91 2e 01 	lds	r30, 0x012E
    338e:	f0 91 2f 01 	lds	r31, 0x012F
    3392:	84 8d       	ldd	r24, Z+28	; 0x1c
    3394:	82 ff       	sbrs	r24, 2
    3396:	0b c0       	rjmp	.+22     	; 0x33ae <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3398:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    339c:	0e 94 81 09 	call	0x1302	; 0x1302 <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    33a0:	e0 91 2e 01 	lds	r30, 0x012E
    33a4:	f0 91 2f 01 	lds	r31, 0x012F
    33a8:	84 8d       	ldd	r24, Z+28	; 0x1c
    33aa:	8b 7f       	andi	r24, 0xFB	; 251
    33ac:	84 8f       	std	Z+28, r24	; 0x1c
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    33ae:	e0 91 2e 01 	lds	r30, 0x012E
    33b2:	f0 91 2f 01 	lds	r31, 0x012F
    33b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    33b8:	80 ff       	sbrs	r24, 0
    33ba:	0b c0       	rjmp	.+22     	; 0x33d2 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    33bc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    33c0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    33c4:	e0 91 2e 01 	lds	r30, 0x012E
    33c8:	f0 91 2f 01 	lds	r31, 0x012F
    33cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    33ce:	8e 7f       	andi	r24, 0xFE	; 254
    33d0:	84 8f       	std	Z+28, r24	; 0x1c
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    33d2:	e0 91 2e 01 	lds	r30, 0x012E
    33d6:	f0 91 2f 01 	lds	r31, 0x012F
    33da:	84 8d       	ldd	r24, Z+28	; 0x1c
    33dc:	83 ff       	sbrs	r24, 3
    33de:	0b c0       	rjmp	.+22     	; 0x33f6 <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    33e0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    33e4:	0e 94 1b 12 	call	0x2436	; 0x2436 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    33e8:	e0 91 2e 01 	lds	r30, 0x012E
    33ec:	f0 91 2f 01 	lds	r31, 0x012F
    33f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    33f2:	87 7f       	andi	r24, 0xF7	; 247
    33f4:	84 8f       	std	Z+28, r24	; 0x1c
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    33f6:	e0 91 2e 01 	lds	r30, 0x012E
    33fa:	f0 91 2f 01 	lds	r31, 0x012F
    33fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    3400:	81 ff       	sbrs	r24, 1
    3402:	0b c0       	rjmp	.+22     	; 0x341a <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    3404:	0e 94 ee 02 	call	0x5dc	; 0x5dc <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    3408:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    340c:	e0 91 2e 01 	lds	r30, 0x012E
    3410:	f0 91 2f 01 	lds	r31, 0x012F
    3414:	84 8d       	ldd	r24, Z+28	; 0x1c
    3416:	8d 7f       	andi	r24, 0xFD	; 253
    3418:	84 8f       	std	Z+28, r24	; 0x1c
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    341a:	e0 91 2e 01 	lds	r30, 0x012E
    341e:	f0 91 2f 01 	lds	r31, 0x012F
    3422:	15 8a       	std	Z+21, r1	; 0x15
  
  #ifdef TIMEBASE_LP_DOWNCOUNTER
  if(Timebase->UpdateRequest & LPDOWNCOUNTER_UPDATE_REQ){
    3424:	84 8d       	ldd	r24, Z+28	; 0x1c
    3426:	85 ff       	sbrs	r24, 5
    3428:	09 c0       	rjmp	.+18     	; 0x343c <Timebase_Main_Loop_Executables+0xb2>
    Timebase_LPDownCounter_Update_All();
    342a:	0e 94 8b 19 	call	0x3316	; 0x3316 <Timebase_LPDownCounter_Update_All>
	Timebase->UpdateRequest &=~ LPDOWNCOUNTER_UPDATE_REQ;
    342e:	e0 91 2e 01 	lds	r30, 0x012E
    3432:	f0 91 2f 01 	lds	r31, 0x012F
    3436:	84 8d       	ldd	r24, Z+28	; 0x1c
    3438:	8f 7d       	andi	r24, 0xDF	; 223
    343a:	84 8f       	std	Z+28, r24	; 0x1c
    343c:	08 95       	ret

0000343e <Timebase_ISR_Executables>:
  #endif
}


void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    343e:	e0 91 2e 01 	lds	r30, 0x012E
    3442:	f0 91 2f 01 	lds	r31, 0x012F
    3446:	87 85       	ldd	r24, Z+15	; 0x0f
    3448:	90 89       	ldd	r25, Z+16	; 0x10
    344a:	01 96       	adiw	r24, 0x01	; 1
    344c:	90 8b       	std	Z+16, r25	; 0x10
    344e:	87 87       	std	Z+15, r24	; 0x0f
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    3450:	84 8d       	ldd	r24, Z+28	; 0x1c
    3452:	84 60       	ori	r24, 0x04	; 4
    3454:	84 8f       	std	Z+28, r24	; 0x1c
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    3456:	84 8d       	ldd	r24, Z+28	; 0x1c
    3458:	88 60       	ori	r24, 0x08	; 8
    345a:	84 8f       	std	Z+28, r24	; 0x1c
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    345c:	27 85       	ldd	r18, Z+15	; 0x0f
    345e:	30 89       	ldd	r19, Z+16	; 0x10
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	28 17       	cp	r18, r24
    3466:	39 07       	cpc	r19, r25
    3468:	98 f0       	brcs	.+38     	; 0x3490 <Timebase_ISR_Executables+0x52>
    Timebase->Time.SubSecondsShadow = 0;
    346a:	10 8a       	std	Z+16, r1	; 0x10
    346c:	17 86       	std	Z+15, r1	; 0x0f
    Timebase->Time.SecondsShadow++;
    346e:	81 89       	ldd	r24, Z+17	; 0x11
    3470:	92 89       	ldd	r25, Z+18	; 0x12
    3472:	a3 89       	ldd	r26, Z+19	; 0x13
    3474:	b4 89       	ldd	r27, Z+20	; 0x14
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	a1 1d       	adc	r26, r1
    347a:	b1 1d       	adc	r27, r1
    347c:	81 8b       	std	Z+17, r24	; 0x11
    347e:	92 8b       	std	Z+18, r25	; 0x12
    3480:	a3 8b       	std	Z+19, r26	; 0x13
    3482:	b4 8b       	std	Z+20, r27	; 0x14
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    3484:	84 8d       	ldd	r24, Z+28	; 0x1c
    3486:	81 60       	ori	r24, 0x01	; 1
    3488:	84 8f       	std	Z+28, r24	; 0x1c
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    348a:	84 8d       	ldd	r24, Z+28	; 0x1c
    348c:	82 60       	ori	r24, 0x02	; 2
    348e:	84 8f       	std	Z+28, r24	; 0x1c
    3490:	08 95       	ret

00003492 <__vector_16>:



/***********************************Timer ISR Start**********************************/

ISR(TIMER0_OVF_vect){
    3492:	1f 92       	push	r1
    3494:	0f 92       	push	r0
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	0f 92       	push	r0
    349a:	11 24       	eor	r1, r1
    349c:	2f 93       	push	r18
    349e:	3f 93       	push	r19
    34a0:	4f 93       	push	r20
    34a2:	5f 93       	push	r21
    34a4:	6f 93       	push	r22
    34a6:	7f 93       	push	r23
    34a8:	8f 93       	push	r24
    34aa:	9f 93       	push	r25
    34ac:	af 93       	push	r26
    34ae:	bf 93       	push	r27
    34b0:	ef 93       	push	r30
    34b2:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    34b4:	e0 91 2e 01 	lds	r30, 0x012E
    34b8:	f0 91 2f 01 	lds	r31, 0x012F
    34bc:	84 81       	ldd	r24, Z+4	; 0x04
    34be:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    34c0:	0e 94 1f 1a 	call	0x343e	; 0x343e <Timebase_ISR_Executables>
}
    34c4:	ff 91       	pop	r31
    34c6:	ef 91       	pop	r30
    34c8:	bf 91       	pop	r27
    34ca:	af 91       	pop	r26
    34cc:	9f 91       	pop	r25
    34ce:	8f 91       	pop	r24
    34d0:	7f 91       	pop	r23
    34d2:	6f 91       	pop	r22
    34d4:	5f 91       	pop	r21
    34d6:	4f 91       	pop	r20
    34d8:	3f 91       	pop	r19
    34da:	2f 91       	pop	r18
    34dc:	0f 90       	pop	r0
    34de:	0f be       	out	0x3f, r0	; 63
    34e0:	0f 90       	pop	r0
    34e2:	1f 90       	pop	r1
    34e4:	18 95       	reti

000034e6 <Timebase_LP_ISR_Executables>:
}


void Timebase_LP_ISR_Executables(void){
  #ifdef TIMEBASE_LP_TIMER_ENABLE
  Timebase->Time.LPTimerSubSeconds++;
    34e6:	e0 91 2e 01 	lds	r30, 0x012E
    34ea:	f0 91 2f 01 	lds	r31, 0x012F
    34ee:	86 89       	ldd	r24, Z+22	; 0x16
    34f0:	97 89       	ldd	r25, Z+23	; 0x17
    34f2:	01 96       	adiw	r24, 0x01	; 1
    34f4:	97 8b       	std	Z+23, r25	; 0x17
    34f6:	86 8b       	std	Z+22, r24	; 0x16
  if(Timebase->Time.LPTimerSubSeconds >= Timebase->Config.LPUpdateRate){
    34f8:	26 89       	ldd	r18, Z+22	; 0x16
    34fa:	37 89       	ldd	r19, Z+23	; 0x17
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	93 81       	ldd	r25, Z+3	; 0x03
    3500:	28 17       	cp	r18, r24
    3502:	39 07       	cpc	r19, r25
    3504:	68 f0       	brcs	.+26     	; 0x3520 <Timebase_LP_ISR_Executables+0x3a>
    Timebase->Time.LPTimerSubSeconds = 0;
    3506:	17 8a       	std	Z+23, r1	; 0x17
    3508:	16 8a       	std	Z+22, r1	; 0x16
    Timebase->Time.LPTimerSeconds++;
    350a:	80 8d       	ldd	r24, Z+24	; 0x18
    350c:	91 8d       	ldd	r25, Z+25	; 0x19
    350e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3510:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3512:	01 96       	adiw	r24, 0x01	; 1
    3514:	a1 1d       	adc	r26, r1
    3516:	b1 1d       	adc	r27, r1
    3518:	80 8f       	std	Z+24, r24	; 0x18
    351a:	91 8f       	std	Z+25, r25	; 0x19
    351c:	a2 8f       	std	Z+26, r26	; 0x1a
    351e:	b3 8f       	std	Z+27, r27	; 0x1b
  }
  Timebase->UpdateRequest |= LPDOWNCOUNTER_UPDATE_REQ;
    3520:	84 8d       	ldd	r24, Z+28	; 0x1c
    3522:	80 62       	ori	r24, 0x20	; 32
    3524:	84 8f       	std	Z+28, r24	; 0x1c
  #endif
}
    3526:	08 95       	ret

00003528 <__vector_6>:

/**********************************LPTimer ISR Start*********************************/

#ifdef TIMEBASE_LP_TIMER_ENABLE

ISR(WDT_vect){
    3528:	1f 92       	push	r1
    352a:	0f 92       	push	r0
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	0f 92       	push	r0
    3530:	11 24       	eor	r1, r1
    3532:	2f 93       	push	r18
    3534:	3f 93       	push	r19
    3536:	4f 93       	push	r20
    3538:	5f 93       	push	r21
    353a:	6f 93       	push	r22
    353c:	7f 93       	push	r23
    353e:	8f 93       	push	r24
    3540:	9f 93       	push	r25
    3542:	af 93       	push	r26
    3544:	bf 93       	push	r27
    3546:	ef 93       	push	r30
    3548:	ff 93       	push	r31
  WDTCSR |= (1<<WDIE);
    354a:	e0 e6       	ldi	r30, 0x60	; 96
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	80 64       	ori	r24, 0x40	; 64
    3552:	80 83       	st	Z, r24
  Timebase_LP_ISR_Executables();
    3554:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <Timebase_LP_ISR_Executables>
}
    3558:	ff 91       	pop	r31
    355a:	ef 91       	pop	r30
    355c:	bf 91       	pop	r27
    355e:	af 91       	pop	r26
    3560:	9f 91       	pop	r25
    3562:	8f 91       	pop	r24
    3564:	7f 91       	pop	r23
    3566:	6f 91       	pop	r22
    3568:	5f 91       	pop	r21
    356a:	4f 91       	pop	r20
    356c:	3f 91       	pop	r19
    356e:	2f 91       	pop	r18
    3570:	0f 90       	pop	r0
    3572:	0f be       	out	0x3f, r0	; 63
    3574:	0f 90       	pop	r0
    3576:	1f 90       	pop	r1
    3578:	18 95       	reti

0000357a <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    357a:	10 92 24 01 	sts	0x0124, r1
    357e:	e5 e2       	ldi	r30, 0x25	; 37
    3580:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    3582:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    3584:	81 e0       	ldi	r24, 0x01	; 1
    3586:	ed 32       	cpi	r30, 0x2D	; 45
    3588:	f8 07       	cpc	r31, r24
    358a:	d9 f7       	brne	.-10     	; 0x3582 <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    358c:	10 82       	st	Z, r1
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
  }
  #endif
  
}
    358e:	08 95       	ret

00003590 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    3590:	08 95       	ret

00003592 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    3592:	08 95       	ret

00003594 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    3594:	9b 01       	movw	r18, r22
    3596:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    3598:	60 e6       	ldi	r22, 0x60	; 96
    359a:	73 ee       	ldi	r23, 0xE3	; 227
    359c:	86 e1       	ldi	r24, 0x16	; 22
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__udivmodsi4>
    35a4:	21 50       	subi	r18, 0x01	; 1
    35a6:	30 40       	sbci	r19, 0x00	; 0
    35a8:	40 40       	sbci	r20, 0x00	; 0
    35aa:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    35ac:	e0 ec       	ldi	r30, 0xC0	; 192
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	82 60       	ori	r24, 0x02	; 2
    35b4:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    35b6:	bb 27       	eor	r27, r27
    35b8:	a5 2f       	mov	r26, r21
    35ba:	94 2f       	mov	r25, r20
    35bc:	83 2f       	mov	r24, r19
    35be:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    35c2:	20 93 c4 00 	sts	0x00C4, r18
}
    35c6:	08 95       	ret

000035c8 <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    35c8:	e1 ec       	ldi	r30, 0xC1	; 193
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 60       	ori	r24, 0x08	; 8
    35d0:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    35d2:	86 e0       	ldi	r24, 0x06	; 6
    35d4:	80 93 c2 00 	sts	0x00C2, r24
}
    35d8:	08 95       	ret

000035da <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    35da:	e1 ec       	ldi	r30, 0xC1	; 193
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	80 81       	ld	r24, Z
    35e0:	80 61       	ori	r24, 0x10	; 16
    35e2:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    35e4:	86 e0       	ldi	r24, 0x06	; 6
    35e6:	80 93 c2 00 	sts	0x00C2, r24
}
    35ea:	08 95       	ret

000035ec <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    35ec:	e1 ec       	ldi	r30, 0xC1	; 193
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	80 81       	ld	r24, Z
    35f2:	80 68       	ori	r24, 0x80	; 128
    35f4:	80 83       	st	Z, r24
  sei();
    35f6:	78 94       	sei
}
    35f8:	08 95       	ret

000035fa <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    35fa:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    35fc:	80 91 c0 00 	lds	r24, 0x00C0
    3600:	85 ff       	sbrs	r24, 5
    3602:	fc cf       	rjmp	.-8      	; 0x35fc <UART_Transmit_Byte+0x2>
  UDR0=val;
    3604:	90 93 c6 00 	sts	0x00C6, r25
}
    3608:	08 95       	ret

0000360a <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	0f 92       	push	r0
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    3614:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    3616:	80 91 c0 00 	lds	r24, 0x00C0
    361a:	84 ff       	sbrs	r24, 4
    361c:	05 c0       	rjmp	.+10     	; 0x3628 <UART_Receive_Byte+0x1e>
    val=UDR0;
    361e:	80 91 c6 00 	lds	r24, 0x00C6
    3622:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	08 c0       	rjmp	.+16     	; 0x3638 <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    3628:	80 91 c0 00 	lds	r24, 0x00C0
    362c:	83 ff       	sbrs	r24, 3
    362e:	07 c0       	rjmp	.+14     	; 0x363e <UART_Receive_Byte+0x34>
    val=UDR0;
    3630:	80 91 c6 00 	lds	r24, 0x00C6
    3634:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    3636:	82 e0       	ldi	r24, 0x02	; 2
    3638:	80 93 24 01 	sts	0x0124, r24
    363c:	05 c0       	rjmp	.+10     	; 0x3648 <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    363e:	80 91 c6 00 	lds	r24, 0x00C6
    3642:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    3644:	10 92 24 01 	sts	0x0124, r1
  }
  return val;
    3648:	89 81       	ldd	r24, Y+1	; 0x01
}
    364a:	0f 90       	pop	r0
    364c:	cf 91       	pop	r28
    364e:	df 91       	pop	r29
    3650:	08 95       	ret

00003652 <UART_Transmit_Byte_Hex>:
}
#endif



void UART_Transmit_Byte_Hex(uint32_t val){
    3652:	1f 93       	push	r17
    3654:	cf 93       	push	r28
    3656:	df 93       	push	r29
    3658:	ab 01       	movw	r20, r22
    365a:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    365c:	4f 3f       	cpi	r20, 0xFF	; 255
    365e:	51 05       	cpc	r21, r1
    3660:	61 05       	cpc	r22, r1
    3662:	71 05       	cpc	r23, r1
    3664:	09 f0       	breq	.+2      	; 0x3668 <UART_Transmit_Byte_Hex+0x16>
    3666:	28 f4       	brcc	.+10     	; 0x3672 <UART_Transmit_Byte_Hex+0x20>
    3668:	e8 e0       	ldi	r30, 0x08	; 8
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	c2 e0       	ldi	r28, 0x02	; 2
    366e:	d0 e0       	ldi	r29, 0x00	; 0
    3670:	11 c0       	rjmp	.+34     	; 0x3694 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    3672:	40 30       	cpi	r20, 0x00	; 0
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	58 07       	cpc	r21, r24
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	68 07       	cpc	r22, r24
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	78 07       	cpc	r23, r24
    3680:	28 f0       	brcs	.+10     	; 0x368c <UART_Transmit_Byte_Hex+0x3a>
    3682:	e0 e2       	ldi	r30, 0x20	; 32
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	c8 e0       	ldi	r28, 0x08	; 8
    3688:	d0 e0       	ldi	r29, 0x00	; 0
    368a:	04 c0       	rjmp	.+8      	; 0x3694 <UART_Transmit_Byte_Hex+0x42>
    368c:	e0 e1       	ldi	r30, 0x10	; 16
    368e:	f0 e0       	ldi	r31, 0x00	; 0
    3690:	c4 e0       	ldi	r28, 0x04	; 4
    3692:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    3694:	80 91 c0 00 	lds	r24, 0x00C0
    3698:	85 ff       	sbrs	r24, 5
    369a:	fc cf       	rjmp	.-8      	; 0x3694 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    369c:	80 e3       	ldi	r24, 0x30	; 48
    369e:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    36a2:	80 91 c0 00 	lds	r24, 0x00C0
    36a6:	85 ff       	sbrs	r24, 5
    36a8:	fc cf       	rjmp	.-8      	; 0x36a2 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    36aa:	88 e7       	ldi	r24, 0x78	; 120
    36ac:	80 93 c6 00 	sts	0x00C6, r24
    36b0:	10 e0       	ldi	r17, 0x00	; 0
    36b2:	1f c0       	rjmp	.+62     	; 0x36f2 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    36b4:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    36b6:	db 01       	movw	r26, r22
    36b8:	ca 01       	movw	r24, r20
    36ba:	0e 2e       	mov	r0, r30
    36bc:	04 c0       	rjmp	.+8      	; 0x36c6 <UART_Transmit_Byte_Hex+0x74>
    36be:	b6 95       	lsr	r27
    36c0:	a7 95       	ror	r26
    36c2:	97 95       	ror	r25
    36c4:	87 95       	ror	r24
    36c6:	0a 94       	dec	r0
    36c8:	d2 f7       	brpl	.-12     	; 0x36be <UART_Transmit_Byte_Hex+0x6c>
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	8f 70       	andi	r24, 0x0F	; 15
    36ce:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    36d0:	8a 30       	cpi	r24, 0x0A	; 10
    36d2:	91 05       	cpc	r25, r1
    36d4:	20 f0       	brcs	.+8      	; 0x36de <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    36d6:	9c 01       	movw	r18, r24
    36d8:	29 5c       	subi	r18, 0xC9	; 201
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	03 c0       	rjmp	.+6      	; 0x36e4 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    36de:	9c 01       	movw	r18, r24
    36e0:	20 5d       	subi	r18, 0xD0	; 208
    36e2:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    36e4:	80 91 c0 00 	lds	r24, 0x00C0
    36e8:	85 ff       	sbrs	r24, 5
    36ea:	fc cf       	rjmp	.-8      	; 0x36e4 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    36ec:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    36f0:	1f 5f       	subi	r17, 0xFF	; 255
    36f2:	81 2f       	mov	r24, r17
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	8c 17       	cp	r24, r28
    36f8:	9d 07       	cpc	r25, r29
    36fa:	e0 f2       	brcs	.-72     	; 0x36b4 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	08 95       	ret

00003704 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    3704:	cf 92       	push	r12
    3706:	df 92       	push	r13
    3708:	ef 92       	push	r14
    370a:	ff 92       	push	r15
    370c:	0f 93       	push	r16
    370e:	1f 93       	push	r17
    3710:	cf 93       	push	r28
    3712:	df 93       	push	r29
    3714:	ab 01       	movw	r20, r22
    3716:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    3718:	4f 3f       	cpi	r20, 0xFF	; 255
    371a:	51 05       	cpc	r21, r1
    371c:	61 05       	cpc	r22, r1
    371e:	71 05       	cpc	r23, r1
    3720:	09 f0       	breq	.+2      	; 0x3724 <UART_Transmit_Byte_Bin+0x20>
    3722:	10 f4       	brcc	.+4      	; 0x3728 <UART_Transmit_Byte_Bin+0x24>
    3724:	97 e0       	ldi	r25, 0x07	; 7
    3726:	0b c0       	rjmp	.+22     	; 0x373e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    3728:	40 30       	cpi	r20, 0x00	; 0
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	58 07       	cpc	r21, r24
    372e:	81 e0       	ldi	r24, 0x01	; 1
    3730:	68 07       	cpc	r22, r24
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	78 07       	cpc	r23, r24
    3736:	10 f0       	brcs	.+4      	; 0x373c <UART_Transmit_Byte_Bin+0x38>
    3738:	9f e1       	ldi	r25, 0x1F	; 31
    373a:	01 c0       	rjmp	.+2      	; 0x373e <UART_Transmit_Byte_Bin+0x3a>
    373c:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    373e:	80 91 c0 00 	lds	r24, 0x00C0
    3742:	85 ff       	sbrs	r24, 5
    3744:	fc cf       	rjmp	.-8      	; 0x373e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    3746:	80 e3       	ldi	r24, 0x30	; 48
    3748:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    374c:	80 91 c0 00 	lds	r24, 0x00C0
    3750:	85 ff       	sbrs	r24, 5
    3752:	fc cf       	rjmp	.-8      	; 0x374c <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    3754:	82 e6       	ldi	r24, 0x62	; 98
    3756:	80 93 c6 00 	sts	0x00C6, r24
    375a:	20 e0       	ldi	r18, 0x00	; 0
    375c:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    375e:	e9 2f       	mov	r30, r25
    3760:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    3762:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    3764:	11 e3       	ldi	r17, 0x31	; 49
    3766:	ef 01       	movw	r28, r30
    3768:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    376a:	cf 01       	movw	r24, r30
    376c:	82 1b       	sub	r24, r18
    376e:	93 0b       	sbc	r25, r19
    3770:	6a 01       	movw	r12, r20
    3772:	7b 01       	movw	r14, r22
    3774:	04 c0       	rjmp	.+8      	; 0x377e <UART_Transmit_Byte_Bin+0x7a>
    3776:	f6 94       	lsr	r15
    3778:	e7 94       	ror	r14
    377a:	d7 94       	ror	r13
    377c:	c7 94       	ror	r12
    377e:	8a 95       	dec	r24
    3780:	d2 f7       	brpl	.-12     	; 0x3776 <UART_Transmit_Byte_Bin+0x72>
    3782:	d7 01       	movw	r26, r14
    3784:	c6 01       	movw	r24, r12
    3786:	81 70       	andi	r24, 0x01	; 1
    3788:	90 70       	andi	r25, 0x00	; 0
    378a:	89 2b       	or	r24, r25
    378c:	39 f0       	breq	.+14     	; 0x379c <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    378e:	80 91 c0 00 	lds	r24, 0x00C0
    3792:	85 ff       	sbrs	r24, 5
    3794:	fc cf       	rjmp	.-8      	; 0x378e <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    3796:	10 93 c6 00 	sts	0x00C6, r17
    379a:	06 c0       	rjmp	.+12     	; 0x37a8 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    379c:	80 91 c0 00 	lds	r24, 0x00C0
    37a0:	85 ff       	sbrs	r24, 5
    37a2:	fc cf       	rjmp	.-8      	; 0x379c <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    37a4:	00 93 c6 00 	sts	0x00C6, r16
    37a8:	2f 5f       	subi	r18, 0xFF	; 255
    37aa:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    37ac:	2c 17       	cp	r18, r28
    37ae:	3d 07       	cpc	r19, r29
    37b0:	e1 f6       	brne	.-72     	; 0x376a <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	1f 91       	pop	r17
    37b8:	0f 91       	pop	r16
    37ba:	ff 90       	pop	r15
    37bc:	ef 90       	pop	r14
    37be:	df 90       	pop	r13
    37c0:	cf 90       	pop	r12
    37c2:	08 95       	ret

000037c4 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    37c4:	ac 01       	movw	r20, r24
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	07 c0       	rjmp	.+14     	; 0x37d8 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    37ca:	80 91 c0 00 	lds	r24, 0x00C0
    37ce:	85 ff       	sbrs	r24, 5
    37d0:	fc cf       	rjmp	.-8      	; 0x37ca <UART_Transmit_Text+0x6>
  UDR0=val;
    37d2:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    37d6:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    37d8:	fa 01       	movw	r30, r20
    37da:	e2 0f       	add	r30, r18
    37dc:	f1 1d       	adc	r31, r1
    37de:	e0 81       	ld	r30, Z
    37e0:	ee 23       	and	r30, r30
    37e2:	99 f7       	brne	.-26     	; 0x37ca <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    37e4:	08 95       	ret

000037e6 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    37e6:	8f e1       	ldi	r24, 0x1F	; 31
    37e8:	91 e0       	ldi	r25, 0x01	; 1
    37ea:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
}
    37ee:	08 95       	ret

000037f0 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    37f0:	82 e2       	ldi	r24, 0x22	; 34
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <UART_Transmit_Text>
}
    37f8:	08 95       	ret

000037fa <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    37fa:	bf 92       	push	r11
    37fc:	cf 92       	push	r12
    37fe:	df 92       	push	r13
    3800:	ef 92       	push	r14
    3802:	ff 92       	push	r15
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	6b 01       	movw	r12, r22
    380a:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    380c:	61 15       	cp	r22, r1
    380e:	71 05       	cpc	r23, r1
    3810:	81 05       	cpc	r24, r1
    3812:	91 05       	cpc	r25, r1
    3814:	31 f4       	brne	.+12     	; 0x3822 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    3816:	10 92 25 01 	sts	0x0125, r1
    UART.InputNumberDigits=1;
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	80 93 2d 01 	sts	0x012D, r24
    3820:	23 c0       	rjmp	.+70     	; 0x3868 <UART_Determine_Digit_Numbers+0x6e>
    3822:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    3824:	0b 2d       	mov	r16, r11
    3826:	10 e0       	ldi	r17, 0x00	; 0
    3828:	0c 5d       	subi	r16, 0xDC	; 220
    382a:	1e 4f       	sbci	r17, 0xFE	; 254
    382c:	c7 01       	movw	r24, r14
    382e:	b6 01       	movw	r22, r12
    3830:	2a e0       	ldi	r18, 0x0A	; 10
    3832:	30 e0       	ldi	r19, 0x00	; 0
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__udivmodsi4>
    383c:	f8 01       	movw	r30, r16
    383e:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    3840:	c7 01       	movw	r24, r14
    3842:	b6 01       	movw	r22, r12
    3844:	2a e0       	ldi	r18, 0x0A	; 10
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	50 e0       	ldi	r21, 0x00	; 0
    384c:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__udivmodsi4>
    3850:	c9 01       	movw	r24, r18
    3852:	da 01       	movw	r26, r20
    3854:	6c 01       	movw	r12, r24
    3856:	7d 01       	movw	r14, r26
      i++;
    3858:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    385a:	c1 14       	cp	r12, r1
    385c:	d1 04       	cpc	r13, r1
    385e:	e1 04       	cpc	r14, r1
    3860:	f1 04       	cpc	r15, r1
    3862:	01 f7       	brne	.-64     	; 0x3824 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    3864:	b0 92 2d 01 	sts	0x012D, r11
  }
}
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	bf 90       	pop	r11
    3876:	08 95       	ret

00003878 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    3878:	e0 91 2d 01 	lds	r30, 0x012D
    387c:	0f c0       	rjmp	.+30     	; 0x389c <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    387e:	2e 2f       	mov	r18, r30
    3880:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    3882:	e2 2f       	mov	r30, r18
    3884:	f0 e0       	ldi	r31, 0x00	; 0
    3886:	ec 5d       	subi	r30, 0xDC	; 220
    3888:	fe 4f       	sbci	r31, 0xFE	; 254
    388a:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    388c:	80 91 c0 00 	lds	r24, 0x00C0
    3890:	85 ff       	sbrs	r24, 5
    3892:	fc cf       	rjmp	.-8      	; 0x388c <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    3894:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    3896:	90 93 c6 00 	sts	0x00C6, r25
    389a:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    389c:	ee 23       	and	r30, r30
    389e:	79 f7       	brne	.-34     	; 0x387e <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    38a0:	08 95       	ret

000038a2 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    38a2:	9b 01       	movw	r18, r22
    38a4:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    38a6:	97 ff       	sbrs	r25, 7
    38a8:	0e c0       	rjmp	.+28     	; 0x38c6 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    38aa:	80 91 c0 00 	lds	r24, 0x00C0
    38ae:	85 ff       	sbrs	r24, 5
    38b0:	fc cf       	rjmp	.-8      	; 0x38aa <UART_Transmit_Number+0x8>
  UDR0=val;
    38b2:	8d e2       	ldi	r24, 0x2D	; 45
    38b4:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    38b8:	50 95       	com	r21
    38ba:	40 95       	com	r20
    38bc:	30 95       	com	r19
    38be:	21 95       	neg	r18
    38c0:	3f 4f       	sbci	r19, 0xFF	; 255
    38c2:	4f 4f       	sbci	r20, 0xFF	; 255
    38c4:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    38c6:	ca 01       	movw	r24, r20
    38c8:	b9 01       	movw	r22, r18
    38ca:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    38ce:	0e 94 3c 1c 	call	0x3878	; 0x3878 <UART_Transmit_Number_Digits>
}
    38d2:	08 95       	ret

000038d4 <UART_Flush_Buffer>:
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
  #endif
}
    38d4:	08 95       	ret

000038d6 <UART_Init>:
}
#endif



void UART_Init(uint32_t baud){
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	0f 93       	push	r16
    38dc:	1f 93       	push	r17
    38de:	7b 01       	movw	r14, r22
    38e0:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    38e2:	0e 94 bd 1a 	call	0x357a	; 0x357a <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    38e6:	c8 01       	movw	r24, r16
    38e8:	b7 01       	movw	r22, r14
    38ea:	0e 94 ca 1a 	call	0x3594	; 0x3594 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    38ee:	e1 ec       	ldi	r30, 0xC1	; 193
    38f0:	f0 e0       	ldi	r31, 0x00	; 0
    38f2:	80 81       	ld	r24, Z
    38f4:	88 60       	ori	r24, 0x08	; 8
    38f6:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    38f8:	86 e0       	ldi	r24, 0x06	; 6
    38fa:	80 93 c2 00 	sts	0x00C2, r24
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
}
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	ff 90       	pop	r15
    3904:	ef 90       	pop	r14
    3906:	08 95       	ret

00003908 <__mulsi3>:
    3908:	62 9f       	mul	r22, r18
    390a:	d0 01       	movw	r26, r0
    390c:	73 9f       	mul	r23, r19
    390e:	f0 01       	movw	r30, r0
    3910:	82 9f       	mul	r24, r18
    3912:	e0 0d       	add	r30, r0
    3914:	f1 1d       	adc	r31, r1
    3916:	64 9f       	mul	r22, r20
    3918:	e0 0d       	add	r30, r0
    391a:	f1 1d       	adc	r31, r1
    391c:	92 9f       	mul	r25, r18
    391e:	f0 0d       	add	r31, r0
    3920:	83 9f       	mul	r24, r19
    3922:	f0 0d       	add	r31, r0
    3924:	74 9f       	mul	r23, r20
    3926:	f0 0d       	add	r31, r0
    3928:	65 9f       	mul	r22, r21
    392a:	f0 0d       	add	r31, r0
    392c:	99 27       	eor	r25, r25
    392e:	72 9f       	mul	r23, r18
    3930:	b0 0d       	add	r27, r0
    3932:	e1 1d       	adc	r30, r1
    3934:	f9 1f       	adc	r31, r25
    3936:	63 9f       	mul	r22, r19
    3938:	b0 0d       	add	r27, r0
    393a:	e1 1d       	adc	r30, r1
    393c:	f9 1f       	adc	r31, r25
    393e:	bd 01       	movw	r22, r26
    3940:	cf 01       	movw	r24, r30
    3942:	11 24       	eor	r1, r1
    3944:	08 95       	ret

00003946 <__udivmodsi4>:
    3946:	a1 e2       	ldi	r26, 0x21	; 33
    3948:	1a 2e       	mov	r1, r26
    394a:	aa 1b       	sub	r26, r26
    394c:	bb 1b       	sub	r27, r27
    394e:	fd 01       	movw	r30, r26
    3950:	0d c0       	rjmp	.+26     	; 0x396c <__udivmodsi4_ep>

00003952 <__udivmodsi4_loop>:
    3952:	aa 1f       	adc	r26, r26
    3954:	bb 1f       	adc	r27, r27
    3956:	ee 1f       	adc	r30, r30
    3958:	ff 1f       	adc	r31, r31
    395a:	a2 17       	cp	r26, r18
    395c:	b3 07       	cpc	r27, r19
    395e:	e4 07       	cpc	r30, r20
    3960:	f5 07       	cpc	r31, r21
    3962:	20 f0       	brcs	.+8      	; 0x396c <__udivmodsi4_ep>
    3964:	a2 1b       	sub	r26, r18
    3966:	b3 0b       	sbc	r27, r19
    3968:	e4 0b       	sbc	r30, r20
    396a:	f5 0b       	sbc	r31, r21

0000396c <__udivmodsi4_ep>:
    396c:	66 1f       	adc	r22, r22
    396e:	77 1f       	adc	r23, r23
    3970:	88 1f       	adc	r24, r24
    3972:	99 1f       	adc	r25, r25
    3974:	1a 94       	dec	r1
    3976:	69 f7       	brne	.-38     	; 0x3952 <__udivmodsi4_loop>
    3978:	60 95       	com	r22
    397a:	70 95       	com	r23
    397c:	80 95       	com	r24
    397e:	90 95       	com	r25
    3980:	9b 01       	movw	r18, r22
    3982:	ac 01       	movw	r20, r24
    3984:	bd 01       	movw	r22, r26
    3986:	cf 01       	movw	r24, r30
    3988:	08 95       	ret

0000398a <__divmodsi4>:
    398a:	97 fb       	bst	r25, 7
    398c:	09 2e       	mov	r0, r25
    398e:	05 26       	eor	r0, r21
    3990:	0e d0       	rcall	.+28     	; 0x39ae <__divmodsi4_neg1>
    3992:	57 fd       	sbrc	r21, 7
    3994:	04 d0       	rcall	.+8      	; 0x399e <__divmodsi4_neg2>
    3996:	d7 df       	rcall	.-82     	; 0x3946 <__udivmodsi4>
    3998:	0a d0       	rcall	.+20     	; 0x39ae <__divmodsi4_neg1>
    399a:	00 1c       	adc	r0, r0
    399c:	38 f4       	brcc	.+14     	; 0x39ac <__divmodsi4_exit>

0000399e <__divmodsi4_neg2>:
    399e:	50 95       	com	r21
    39a0:	40 95       	com	r20
    39a2:	30 95       	com	r19
    39a4:	21 95       	neg	r18
    39a6:	3f 4f       	sbci	r19, 0xFF	; 255
    39a8:	4f 4f       	sbci	r20, 0xFF	; 255
    39aa:	5f 4f       	sbci	r21, 0xFF	; 255

000039ac <__divmodsi4_exit>:
    39ac:	08 95       	ret

000039ae <__divmodsi4_neg1>:
    39ae:	f6 f7       	brtc	.-4      	; 0x39ac <__divmodsi4_exit>
    39b0:	90 95       	com	r25
    39b2:	80 95       	com	r24
    39b4:	70 95       	com	r23
    39b6:	61 95       	neg	r22
    39b8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ba:	8f 4f       	sbci	r24, 0xFF	; 255
    39bc:	9f 4f       	sbci	r25, 0xFF	; 255
    39be:	08 95       	ret

000039c0 <_exit>:
    39c0:	f8 94       	cli

000039c2 <__stop_program>:
    39c2:	ff cf       	rjmp	.-2      	; 0x39c2 <__stop_program>
