
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000302c  000030c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000302c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800114  00800114  000030d4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000030d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000017aa  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000045a3  00000000  00000000  000048de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c8  00000000  00000000  00008e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000216e  00000000  00000000  00009449  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a60  00000000  00000000  0000b5b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000194e  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001acb  00000000  00000000  0000d966  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000f431  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e2       	ldi	r30, 0x2C	; 44
      7c:	f0 e3       	ldi	r31, 0x30	; 48
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a4 31       	cpi	r26, 0x14	; 20
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a4 e1       	ldi	r26, 0x14	; 20
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3a       	cpi	r26, 0xA6	; 166
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 14 18 	jmp	0x3028	; 0x3028 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int main(void){
  
  
  
  UART_Init(57600);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	71 ee       	ldi	r23, 0xE1	; 225
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	0e 94 94 17 	call	0x2f28	; 0x2f28 <UART_Init>
  Timebase_Init(1000);
      b2:	88 ee       	ldi	r24, 0xE8	; 232
      b4:	93 e0       	ldi	r25, 0x03	; 3
      b6:	0e 94 a2 14 	call	0x2944	; 0x2944 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD  |=  (1<<5)|(1<<6);
      ba:	8a b1       	in	r24, 0x0a	; 10
      bc:	80 66       	ori	r24, 0x60	; 96
      be:	8a b9       	out	0x0a, r24	; 10
  PORTD &=~ ((1<<5)|(1<<6));
      c0:	8b b1       	in	r24, 0x0b	; 11
      c2:	8f 79       	andi	r24, 0x9F	; 159
      c4:	8b b9       	out	0x0b, r24	; 11
      c6:	88 e8       	ldi	r24, 0x88	; 136
      c8:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	2c e2       	ldi	r18, 0x2C	; 44
      cc:	31 e0       	ldi	r19, 0x01	; 1
      ce:	f9 01       	movw	r30, r18
      d0:	31 97       	sbiw	r30, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d6:	d9 f7       	brne	.-10     	; 0xce <main+0x28>
  _delay_ms(500);
  Timebase_UpCounter_SS_Set_Securely(0, 20000);
      d8:	80 e0       	ldi	r24, 0x00	; 0
      da:	40 e2       	ldi	r20, 0x20	; 32
      dc:	5e e4       	ldi	r21, 0x4E	; 78
      de:	60 e0       	ldi	r22, 0x00	; 0
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	0e 94 58 05 	call	0xab0	; 0xab0 <Timebase_UpCounter_SS_Set_Securely>
  Timebase_UpCounter_Set_Securely(0, 18);
      e6:	80 e0       	ldi	r24, 0x00	; 0
      e8:	42 e1       	ldi	r20, 0x12	; 18
      ea:	50 e0       	ldi	r21, 0x00	; 0
      ec:	60 e0       	ldi	r22, 0x00	; 0
      ee:	70 e0       	ldi	r23, 0x00	; 0
      f0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <Timebase_UpCounter_Set_Securely>
  Timebase_DownCounter_SS_Set_Securely(0, 160000);
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	51 e7       	ldi	r21, 0x71	; 113
      fa:	62 e0       	ldi	r22, 0x02	; 2
      fc:	70 e0       	ldi	r23, 0x00	; 0
      fe:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <Timebase_DownCounter_SS_Set_Securely>
  Timebase_DownCounter_Set_Securely(0, 14);
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	4e e0       	ldi	r20, 0x0E	; 14
     106:	50 e0       	ldi	r21, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	70 e0       	ldi	r23, 0x00	; 0
     10c:	0e 94 a3 12 	call	0x2546	; 0x2546 <Timebase_DownCounter_Set_Securely>
  
  while(1){
    
	Timebase_Timer_Await_SubSeconds(50);
     110:	82 e3       	ldi	r24, 0x32	; 50
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 cf 02 	call	0x59e	; 0x59e <Timebase_Timer_Await_SubSeconds>
	
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
     118:	0e 94 40 02 	call	0x480	; 0x480 <Timebase_Timer_Get_Seconds>
     11c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	91 e0       	ldi	r25, 0x01	; 1
     124:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
     128:	0e 94 38 02 	call	0x470	; 0x470 <Timebase_Timer_Get_SubSeconds>
     12c:	a0 e0       	ldi	r26, 0x00	; 0
     12e:	b0 e0       	ldi	r27, 0x00	; 0
     130:	bc 01       	movw	r22, r24
     132:	cd 01       	movw	r24, r26
     134:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     138:	80 e0       	ldi	r24, 0x00	; 0
     13a:	91 e0       	ldi	r25, 0x01	; 1
     13c:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
	
	UART_Transmit_Number(Timebase_UpCounter_SS_Get_Value(0));
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Timebase_UpCounter_SS_Get_Value>
     146:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_UpCounter_Get_Value(0));
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	0e 94 b5 08 	call	0x116a	; 0x116a <Timebase_UpCounter_Get_Value>
     158:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	0e 94 bd 0c 	call	0x197a	; 0x197a <Timebase_DownCounter_SS_Get_Value>
     16a:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_Transmit_Number>
	UART_Transmit_Text(",");
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_DownCounter_Get_Value(0));
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	0e 94 3f 11 	call	0x227e	; 0x227e <Timebase_DownCounter_Get_Value>
     17c:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_Transmit_Number>
	UART_Transmit_Text("\r\n");
     180:	82 e0       	ldi	r24, 0x02	; 2
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
	//UART_Transmit_Number(Timebase_DownCounter_SS_Get_Value(0));
	//UART_Transmit_New_Line();
	//Timebase_Timer_Delay_SubSeconds(100);
	
	//Add update req flag
	PORTD |= (1<<6);
     188:	5e 9a       	sbi	0x0b, 6	; 11
	Timebase_Main_Loop_Executables();
     18a:	0e 94 af 14 	call	0x295e	; 0x295e <Timebase_Main_Loop_Executables>
	PORTD &=~(1<<6);
     18e:	5e 98       	cbi	0x0b, 6	; 11
     190:	bf cf       	rjmp	.-130    	; 0x110 <main+0x6a>

00000192 <Timebase_Struct_Init>:


/************************************Basic Functions Start*******************************/

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     192:	85 e4       	ldi	r24, 0x45	; 69
     194:	91 e0       	ldi	r25, 0x01	; 1
     196:	90 93 44 01 	sts	0x0144, r25
     19a:	80 93 43 01 	sts	0x0143, r24
  Timebase->Config.UpdateRate = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	90 93 46 01 	sts	0x0146, r25
     1a6:	80 93 45 01 	sts	0x0145, r24
  Timebase->Time.OVFUpdateValue=0;
     1aa:	10 92 47 01 	sts	0x0147, r1
  Timebase->Time.SubSecondsShadow = 0;
     1ae:	10 92 53 01 	sts	0x0153, r1
     1b2:	10 92 52 01 	sts	0x0152, r1
  Timebase->Time.SecondsShadow = 0;
     1b6:	10 92 54 01 	sts	0x0154, r1
     1ba:	10 92 55 01 	sts	0x0155, r1
     1be:	10 92 56 01 	sts	0x0156, r1
     1c2:	10 92 57 01 	sts	0x0157, r1
  Timebase->Time.SubSeconds = 0;
     1c6:	10 92 4d 01 	sts	0x014D, r1
     1ca:	10 92 4c 01 	sts	0x014C, r1
  Timebase->Time.Seconds = 0;
     1ce:	10 92 4e 01 	sts	0x014E, r1
     1d2:	10 92 4f 01 	sts	0x014F, r1
     1d6:	10 92 50 01 	sts	0x0150, r1
     1da:	10 92 51 01 	sts	0x0151, r1
  Timebase->Time.VariablesSync = 0;
     1de:	10 92 58 01 	sts	0x0158, r1
  Timebase->Time.LastSample = 0;
     1e2:	10 92 48 01 	sts	0x0148, r1
     1e6:	10 92 49 01 	sts	0x0149, r1
     1ea:	10 92 4a 01 	sts	0x014A, r1
     1ee:	10 92 4b 01 	sts	0x014B, r1
    Timebase->Time.StartTimeSeconds = 0;
	Timebase->Time.StartTimeSubSeconds = 0;
	Timebase->Time.Status = 0;
  #endif
  
  Timebase->UpdateRequest = 0;
     1f2:	10 92 59 01 	sts	0x0159, r1
  Timebase->ActiveTokens = 0;
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     1f6:	10 92 73 01 	sts	0x0173, r1
    Timebase->UpCounter[i].EndValue = 0;
     1fa:	10 92 74 01 	sts	0x0174, r1
     1fe:	10 92 75 01 	sts	0x0175, r1
     202:	10 92 76 01 	sts	0x0176, r1
     206:	10 92 77 01 	sts	0x0177, r1
    Timebase->UpCounter[i].Target = 0;
     20a:	10 92 78 01 	sts	0x0178, r1
     20e:	10 92 79 01 	sts	0x0179, r1
     212:	10 92 7a 01 	sts	0x017A, r1
     216:	10 92 7b 01 	sts	0x017B, r1
    Timebase->UpCounter[i].Temporary = 0;    
     21a:	10 92 7c 01 	sts	0x017C, r1
     21e:	10 92 7d 01 	sts	0x017D, r1
     222:	10 92 7e 01 	sts	0x017E, r1
     226:	10 92 7f 01 	sts	0x017F, r1
    Timebase->UpCounter[i].Value = 0;
     22a:	10 92 80 01 	sts	0x0180, r1
     22e:	10 92 81 01 	sts	0x0181, r1
     232:	10 92 82 01 	sts	0x0182, r1
     236:	10 92 83 01 	sts	0x0183, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     23a:	10 92 84 01 	sts	0x0184, r1
     23e:	10 92 85 01 	sts	0x0185, r1
     242:	10 92 86 01 	sts	0x0186, r1
     246:	10 92 87 01 	sts	0x0187, r1
  }
  #endif
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER_SUBSECONDS; i++){
    Timebase->UpCounterSS[i].Status.StatusByte = 0;  
     24a:	10 92 5a 01 	sts	0x015A, r1
    Timebase->UpCounterSS[i].EndValueSec = 0;
     24e:	10 92 5b 01 	sts	0x015B, r1
     252:	10 92 5c 01 	sts	0x015C, r1
     256:	10 92 5d 01 	sts	0x015D, r1
     25a:	10 92 5e 01 	sts	0x015E, r1
	Timebase->UpCounterSS[i].EndValueSubSec = 0;
     25e:	10 92 5f 01 	sts	0x015F, r1
     262:	10 92 60 01 	sts	0x0160, r1
     266:	10 92 61 01 	sts	0x0161, r1
     26a:	10 92 62 01 	sts	0x0162, r1
    Timebase->UpCounterSS[i].Target = 0;
     26e:	10 92 63 01 	sts	0x0163, r1
     272:	10 92 64 01 	sts	0x0164, r1
     276:	10 92 65 01 	sts	0x0165, r1
     27a:	10 92 66 01 	sts	0x0166, r1
    Timebase->UpCounterSS[i].Temporary = 0;    
     27e:	10 92 67 01 	sts	0x0167, r1
     282:	10 92 68 01 	sts	0x0168, r1
     286:	10 92 69 01 	sts	0x0169, r1
     28a:	10 92 6a 01 	sts	0x016A, r1
    Timebase->UpCounterSS[i].Value = 0;
     28e:	10 92 6b 01 	sts	0x016B, r1
     292:	10 92 6c 01 	sts	0x016C, r1
     296:	10 92 6d 01 	sts	0x016D, r1
     29a:	10 92 6e 01 	sts	0x016E, r1
    Timebase->UpCounterSS[i].PeriodValue = 0;
     29e:	10 92 6f 01 	sts	0x016F, r1
     2a2:	10 92 70 01 	sts	0x0170, r1
     2a6:	10 92 71 01 	sts	0x0171, r1
     2aa:	10 92 72 01 	sts	0x0172, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     2ae:	10 92 99 01 	sts	0x0199, r1
    Timebase->DownCounter[i].EndValue = 0;
     2b2:	10 92 9a 01 	sts	0x019A, r1
     2b6:	10 92 9b 01 	sts	0x019B, r1
     2ba:	10 92 9c 01 	sts	0x019C, r1
     2be:	10 92 9d 01 	sts	0x019D, r1
    Timebase->DownCounter[i].Value = 0;
     2c2:	10 92 9e 01 	sts	0x019E, r1
     2c6:	10 92 9f 01 	sts	0x019F, r1
     2ca:	10 92 a0 01 	sts	0x01A0, r1
     2ce:	10 92 a1 01 	sts	0x01A1, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     2d2:	10 92 a2 01 	sts	0x01A2, r1
     2d6:	10 92 a3 01 	sts	0x01A3, r1
     2da:	10 92 a4 01 	sts	0x01A4, r1
     2de:	10 92 a5 01 	sts	0x01A5, r1
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase->DownCounterSS[i].Status.StatusByte = 0; 
     2e2:	10 92 88 01 	sts	0x0188, r1
    Timebase->DownCounterSS[i].EndValueSec = 0;
     2e6:	10 92 89 01 	sts	0x0189, r1
     2ea:	10 92 8a 01 	sts	0x018A, r1
     2ee:	10 92 8b 01 	sts	0x018B, r1
     2f2:	10 92 8c 01 	sts	0x018C, r1
	Timebase->DownCounterSS[i].EndValueSubSec = 0;
     2f6:	10 92 8d 01 	sts	0x018D, r1
     2fa:	10 92 8e 01 	sts	0x018E, r1
     2fe:	10 92 8f 01 	sts	0x018F, r1
     302:	10 92 90 01 	sts	0x0190, r1
    Timebase->DownCounterSS[i].Value = 0;
     306:	10 92 91 01 	sts	0x0191, r1
     30a:	10 92 92 01 	sts	0x0192, r1
     30e:	10 92 93 01 	sts	0x0193, r1
     312:	10 92 94 01 	sts	0x0194, r1
    Timebase->DownCounterSS[i].PeriodValue = 0;
     316:	10 92 95 01 	sts	0x0195, r1
     31a:	10 92 96 01 	sts	0x0196, r1
     31e:	10 92 97 01 	sts	0x0197, r1
     322:	10 92 98 01 	sts	0x0198, r1
  }
  #endif
  
}
     326:	08 95       	ret

00000328 <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     328:	8f 92       	push	r8
     32a:	9f 92       	push	r9
     32c:	bf 92       	push	r11
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	df 93       	push	r29
     33c:	cf 93       	push	r28
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	2a 97       	sbiw	r28, 0x0a	; 10
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	f8 94       	cli
     348:	de bf       	out	0x3e, r29	; 62
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	cd bf       	out	0x3d, r28	; 61
     34e:	4c 01       	movw	r8, r24
  uint8_t  clock_div_index = 0;
  uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     350:	de 01       	movw	r26, r28
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	e5 e0       	ldi	r30, 0x05	; 5
     356:	f1 e0       	ldi	r31, 0x01	; 1
     358:	8a e0       	ldi	r24, 0x0A	; 10
     35a:	01 90       	ld	r0, Z+
     35c:	0d 92       	st	X+, r0
     35e:	81 50       	subi	r24, 0x01	; 1
     360:	e1 f7       	brne	.-8      	; 0x35a <Timebase_Timer_Config+0x32>
  int32_t  temp, curr_freq;

  temp = F_CPU;
  temp /= UpdateRateHz;
     362:	94 01       	movw	r18, r8
     364:	40 e0       	ldi	r20, 0x00	; 0
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	7b e1       	ldi	r23, 0x1B	; 27
     36c:	87 eb       	ldi	r24, 0xB7	; 183
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     374:	b2 2e       	mov	r11, r18
     376:	c3 2e       	mov	r12, r19
     378:	d4 2e       	mov	r13, r20
     37a:	05 2f       	mov	r16, r21
     37c:	7e 01       	movw	r14, r28
     37e:	08 94       	sec
     380:	e1 1c       	adc	r14, r1
     382:	f1 1c       	adc	r15, r1
     384:	c9 01       	movw	r24, r18
     386:	da 01       	movw	r26, r20
     388:	9c 01       	movw	r18, r24
     38a:	ad 01       	movw	r20, r26
     38c:	10 e0       	ldi	r17, 0x00	; 0
     38e:	13 c0       	rjmp	.+38     	; 0x3b6 <Timebase_Timer_Config+0x8e>
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
	curr_freq  = temp;
	curr_freq /= clock_div_factor[clock_div_index];
     390:	f7 01       	movw	r30, r14
     392:	21 91       	ld	r18, Z+
     394:	31 91       	ld	r19, Z+
     396:	7f 01       	movw	r14, r30
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	6b 2d       	mov	r22, r11
     39e:	7c 2d       	mov	r23, r12
     3a0:	8d 2d       	mov	r24, r13
     3a2:	90 2f       	mov	r25, r16
     3a4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     3a8:	c9 01       	movw	r24, r18
     3aa:	da 01       	movw	r26, r20
     3ac:	9c 01       	movw	r18, r24
     3ae:	ad 01       	movw	r20, r26
	clock_div_index++;
     3b0:	1f 5f       	subi	r17, 0xFF	; 255
	if(clock_div_index == 5){
     3b2:	15 30       	cpi	r17, 0x05	; 5
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <Timebase_Timer_Config+0x9a>
  temp /= UpdateRateHz;
	
  clock_div_index = 0;
  curr_freq = temp;
	
  while( curr_freq > 0xFF ){
     3b6:	2f 3f       	cpi	r18, 0xFF	; 255
     3b8:	31 05       	cpc	r19, r1
     3ba:	41 05       	cpc	r20, r1
     3bc:	51 05       	cpc	r21, r1
     3be:	09 f0       	breq	.+2      	; 0x3c2 <Timebase_Timer_Config+0x9a>
     3c0:	3c f7       	brge	.-50     	; 0x390 <Timebase_Timer_Config+0x68>
	if(clock_div_index == 5){
	  break;
	}
  }
	
  clock_div_index -= 1;
     3c2:	81 2f       	mov	r24, r17
     3c4:	81 50       	subi	r24, 0x01	; 1
	
  TCCR0A = 0x00;
     3c6:	14 bc       	out	0x24, r1	; 36
  TCCR0B = 0x00;
     3c8:	15 bc       	out	0x25, r1	; 37
  TIMSK0 = 0x00;
     3ca:	10 92 6e 00 	sts	0x006E, r1
  TIFR0  = 0x00;
     3ce:	15 ba       	out	0x15, r1	; 21
  OCR0A  = 0x00;
     3d0:	17 bc       	out	0x27, r1	; 39
  OCR0B  = 0x00;
     3d2:	18 bc       	out	0x28, r1	; 40
  TCNT0  = 0x00;
     3d4:	16 bc       	out	0x26, r1	; 38
  OCR0A  = 0x00;
     3d6:	17 bc       	out	0x27, r1	; 39
	
  if(clock_div_index == 0){
     3d8:	88 23       	and	r24, r24
     3da:	11 f4       	brne	.+4      	; 0x3e0 <Timebase_Timer_Config+0xb8>
	TCCR0B = (1<<CS00);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0f c0       	rjmp	.+30     	; 0x3fe <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 1){
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <Timebase_Timer_Config+0xc0>
	TCCR0B = (1<<CS01);
     3e4:	82 e0       	ldi	r24, 0x02	; 2
     3e6:	0b c0       	rjmp	.+22     	; 0x3fe <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 2){
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <Timebase_Timer_Config+0xc8>
	TCCR0B = (1<<CS00)|(1<<CS01);
     3ec:	83 e0       	ldi	r24, 0x03	; 3
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 3){
     3f0:	83 30       	cpi	r24, 0x03	; 3
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <Timebase_Timer_Config+0xd0>
	TCCR0B = (1<<CS02);
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <Timebase_Timer_Config+0xd6>
  }else if(clock_div_index == 4){
     3f8:	84 30       	cpi	r24, 0x04	; 4
     3fa:	11 f4       	brne	.+4      	; 0x400 <Timebase_Timer_Config+0xd8>
	TCCR0B = (1<<CS00)|(1<<CS02);
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	85 bd       	out	0x25, r24	; 37
  }
	
  Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     400:	e0 91 43 01 	lds	r30, 0x0143
     404:	f0 91 44 01 	lds	r31, 0x0144
     408:	82 2f       	mov	r24, r18
     40a:	80 95       	com	r24
     40c:	82 83       	std	Z+2, r24	; 0x02
  TCNT0  = Timebase->Time.OVFUpdateValue;
     40e:	82 81       	ldd	r24, Z+2	; 0x02
     410:	86 bd       	out	0x26, r24	; 38
  TIMSK0 = (1<<TOIE0);
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 6e 00 	sts	0x006E, r24
  sei();
     418:	78 94       	sei

  Timebase->Config.UpdateRate = UpdateRateHz;
     41a:	91 82       	std	Z+1, r9	; 0x01
     41c:	80 82       	st	Z, r8
}
     41e:	2a 96       	adiw	r28, 0x0a	; 10
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	cf 91       	pop	r28
     42c:	df 91       	pop	r29
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	9f 90       	pop	r9
     43e:	8f 90       	pop	r8
     440:	08 95       	ret

00000442 <Timebase_Atomic_Operation_Start>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     442:	f8 94       	cli
}
     444:	08 95       	ret

00000446 <Timebase_Atomic_Operation_End>:

void Timebase_Atomic_Operation_End(void){
  sei();
     446:	78 94       	sei
}
     448:	08 95       	ret

0000044a <Timebase_Timer_Get_SubSecondsShadow>:


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     44a:	e0 91 43 01 	lds	r30, 0x0143
     44e:	f0 91 44 01 	lds	r31, 0x0144
     452:	25 85       	ldd	r18, Z+13	; 0x0d
     454:	36 85       	ldd	r19, Z+14	; 0x0e
}
     456:	c9 01       	movw	r24, r18
     458:	08 95       	ret

0000045a <Timebase_Timer_Get_SecondsShadow>:

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     45a:	e0 91 43 01 	lds	r30, 0x0143
     45e:	f0 91 44 01 	lds	r31, 0x0144
     462:	27 85       	ldd	r18, Z+15	; 0x0f
     464:	30 89       	ldd	r19, Z+16	; 0x10
     466:	41 89       	ldd	r20, Z+17	; 0x11
     468:	52 89       	ldd	r21, Z+18	; 0x12
}
     46a:	b9 01       	movw	r22, r18
     46c:	ca 01       	movw	r24, r20
     46e:	08 95       	ret

00000470 <Timebase_Timer_Get_SubSeconds>:


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     470:	e0 91 43 01 	lds	r30, 0x0143
     474:	f0 91 44 01 	lds	r31, 0x0144
     478:	27 81       	ldd	r18, Z+7	; 0x07
     47a:	30 85       	ldd	r19, Z+8	; 0x08
}
     47c:	c9 01       	movw	r24, r18
     47e:	08 95       	ret

00000480 <Timebase_Timer_Get_Seconds>:


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     480:	e0 91 43 01 	lds	r30, 0x0143
     484:	f0 91 44 01 	lds	r31, 0x0144
     488:	21 85       	ldd	r18, Z+9	; 0x09
     48a:	32 85       	ldd	r19, Z+10	; 0x0a
     48c:	43 85       	ldd	r20, Z+11	; 0x0b
     48e:	54 85       	ldd	r21, Z+12	; 0x0c
}
     490:	b9 01       	movw	r22, r18
     492:	ca 01       	movw	r24, r20
     494:	08 95       	ret

00000496 <Timebase_Timer_Set_SubSeconds>:



void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     496:	e0 91 43 01 	lds	r30, 0x0143
     49a:	f0 91 44 01 	lds	r31, 0x0144
     49e:	90 87       	std	Z+8, r25	; 0x08
     4a0:	87 83       	std	Z+7, r24	; 0x07
}
     4a2:	08 95       	ret

000004a4 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     4a4:	e0 91 43 01 	lds	r30, 0x0143
     4a8:	f0 91 44 01 	lds	r31, 0x0144
     4ac:	61 87       	std	Z+9, r22	; 0x09
     4ae:	72 87       	std	Z+10, r23	; 0x0a
     4b0:	83 87       	std	Z+11, r24	; 0x0b
     4b2:	94 87       	std	Z+12, r25	; 0x0c
}
     4b4:	08 95       	ret

000004b6 <Timebase_Timer_Sync_With_Shadow_Variables>:

void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
     4b6:	e0 91 43 01 	lds	r30, 0x0143
     4ba:	f0 91 44 01 	lds	r31, 0x0144
     4be:	83 89       	ldd	r24, Z+19	; 0x13
     4c0:	88 23       	and	r24, r24
     4c2:	81 f4       	brne	.+32     	; 0x4e4 <Timebase_Timer_Sync_With_Shadow_Variables+0x2e>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     4c4:	f8 94       	cli
void Timebase_Timer_Sync_With_Shadow_Variables(void){
  if(Timebase->Time.VariablesSync == TIMEBASE_FALSE){
    
	#ifdef TIMEBASE_COUNT_ATOMIC_OPERATION
    Timebase_Atomic_Operation_Start();
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
     4c6:	85 85       	ldd	r24, Z+13	; 0x0d
     4c8:	96 85       	ldd	r25, Z+14	; 0x0e
     4ca:	90 87       	std	Z+8, r25	; 0x08
     4cc:	87 83       	std	Z+7, r24	; 0x07
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
     4ce:	87 85       	ldd	r24, Z+15	; 0x0f
     4d0:	90 89       	ldd	r25, Z+16	; 0x10
     4d2:	a1 89       	ldd	r26, Z+17	; 0x11
     4d4:	b2 89       	ldd	r27, Z+18	; 0x12
     4d6:	81 87       	std	Z+9, r24	; 0x09
     4d8:	92 87       	std	Z+10, r25	; 0x0a
     4da:	a3 87       	std	Z+11, r26	; 0x0b
     4dc:	b4 87       	std	Z+12, r27	; 0x0c
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     4de:	78 94       	sei
    #warning Shadow Variables Atomic Sync Turned Off
    Timebase->Time.SubSeconds = Timebase->Time.SubSecondsShadow;
    Timebase->Time.Seconds    = Timebase->Time.SecondsShadow;
    #endif
	
	Timebase->Time.VariablesSync = TIMEBASE_TRUE;
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	83 8b       	std	Z+19, r24	; 0x13
     4e4:	08 95       	ret

000004e6 <Timebase_Timer_Delay_SubSeconds>:
  }
}

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	5c 01       	movw	r10, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     504:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     506:	c0 91 43 01 	lds	r28, 0x0143
     50a:	d0 91 44 01 	lds	r29, 0x0144
     50e:	ed 84       	ldd	r14, Y+13	; 0x0d
     510:	fe 84       	ldd	r15, Y+14	; 0x0e
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     512:	2f 85       	ldd	r18, Y+15	; 0x0f
     514:	38 89       	ldd	r19, Y+16	; 0x10
     516:	49 89       	ldd	r20, Y+17	; 0x11
     518:	5a 89       	ldd	r21, Y+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     51a:	78 94       	sei
  smpl_ss  = Timebase_Timer_Get_SubSecondsShadow();
  smpl_s   = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
     51c:	68 81       	ld	r22, Y
     51e:	79 81       	ldd	r23, Y+1	; 0x01
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsi3>
     528:	3b 01       	movw	r6, r22
     52a:	4c 01       	movw	r8, r24
  smpl_val += smpl_ss;
     52c:	00 e0       	ldi	r16, 0x00	; 0
     52e:	10 e0       	ldi	r17, 0x00	; 0
     530:	6e 0c       	add	r6, r14
     532:	7f 1c       	adc	r7, r15
     534:	80 1e       	adc	r8, r16
     536:	91 1e       	adc	r9, r17
  smpl_val += value;
     538:	cc 24       	eor	r12, r12
     53a:	dd 24       	eor	r13, r13
     53c:	6a 0c       	add	r6, r10
     53e:	7b 1c       	adc	r7, r11
     540:	8c 1c       	adc	r8, r12
     542:	9d 1c       	adc	r9, r13
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	14 c0       	rjmp	.+40     	; 0x576 <Timebase_Timer_Delay_SubSeconds+0x90>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     54e:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     550:	ed 84       	ldd	r14, Y+13	; 0x0d
     552:	fe 84       	ldd	r15, Y+14	; 0x0e
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     554:	2f 85       	ldd	r18, Y+15	; 0x0f
     556:	38 89       	ldd	r19, Y+16	; 0x10
     558:	49 89       	ldd	r20, Y+17	; 0x11
     55a:	5a 89       	ldd	r21, Y+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     55c:	78 94       	sei
    Timebase_Atomic_Operation_Start();
    curr_ss   = Timebase_Timer_Get_SubSecondsShadow();
	curr_s    = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
     55e:	68 81       	ld	r22, Y
     560:	79 81       	ldd	r23, Y+1	; 0x01
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsi3>
	curr_val += curr_ss;
     56a:	00 e0       	ldi	r16, 0x00	; 0
     56c:	10 e0       	ldi	r17, 0x00	; 0
     56e:	6e 0d       	add	r22, r14
     570:	7f 1d       	adc	r23, r15
     572:	80 1f       	adc	r24, r16
     574:	91 1f       	adc	r25, r17
  smpl_val  = smpl_s;
  smpl_val *= Timebase->Config.UpdateRate;
  smpl_val += smpl_ss;
  smpl_val += value;
  
  while(curr_val<smpl_val){
     576:	66 15       	cp	r22, r6
     578:	77 05       	cpc	r23, r7
     57a:	88 05       	cpc	r24, r8
     57c:	99 05       	cpc	r25, r9
     57e:	3c f3       	brlt	.-50     	; 0x54e <Timebase_Timer_Delay_SubSeconds+0x68>
    curr_val  = curr_s;
	curr_val *= Timebase->Config.UpdateRate;
	curr_val += curr_ss;
  }
  
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	9f 90       	pop	r9
     596:	8f 90       	pop	r8
     598:	7f 90       	pop	r7
     59a:	6f 90       	pop	r6
     59c:	08 95       	ret

0000059e <Timebase_Timer_Await_SubSeconds>:


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     59e:	bc 01       	movw	r22, r24

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5a0:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5a2:	e0 91 43 01 	lds	r30, 0x0143
     5a6:	f0 91 44 01 	lds	r31, 0x0144
     5aa:	01 c0       	rjmp	.+2      	; 0x5ae <Timebase_Timer_Await_SubSeconds+0x10>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5ac:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5ae:	85 85       	ldd	r24, Z+13	; 0x0d
     5b0:	96 85       	ldd	r25, Z+14	; 0x0e
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     5b2:	78 94       	sei
void Timebase_Timer_Await_SubSeconds(uint16_t value){
  uint16_t temp=0;
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  while(temp != Timebase->Time.LastSample){
     5b4:	23 81       	ldd	r18, Z+3	; 0x03
     5b6:	34 81       	ldd	r19, Z+4	; 0x04
     5b8:	45 81       	ldd	r20, Z+5	; 0x05
     5ba:	56 81       	ldd	r21, Z+6	; 0x06
     5bc:	a0 e0       	ldi	r26, 0x00	; 0
     5be:	b0 e0       	ldi	r27, 0x00	; 0
     5c0:	82 17       	cp	r24, r18
     5c2:	93 07       	cpc	r25, r19
     5c4:	a4 07       	cpc	r26, r20
     5c6:	b5 07       	cpc	r27, r21
     5c8:	89 f7       	brne	.-30     	; 0x5ac <Timebase_Timer_Await_SubSeconds+0xe>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     5ca:	f8 94       	cli


/*****************************Base Timer Functions Start*****************************/

uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
     5cc:	85 85       	ldd	r24, Z+13	; 0x0d
     5ce:	96 85       	ldd	r25, Z+14	; 0x0e
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     5d0:	78 94       	sei
    Timebase_Atomic_Operation_End();
  }
  Timebase_Atomic_Operation_Start();
  temp = Timebase_Timer_Get_SubSecondsShadow();
  Timebase_Atomic_Operation_End();
  Timebase->Time.LastSample = temp;
     5d2:	a0 e0       	ldi	r26, 0x00	; 0
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	83 83       	std	Z+3, r24	; 0x03
     5d8:	94 83       	std	Z+4, r25	; 0x04
     5da:	a5 83       	std	Z+5, r26	; 0x05
     5dc:	b6 83       	std	Z+6, r27	; 0x06
  Timebase->Time.LastSample += value;
     5de:	23 81       	ldd	r18, Z+3	; 0x03
     5e0:	34 81       	ldd	r19, Z+4	; 0x04
     5e2:	45 81       	ldd	r20, Z+5	; 0x05
     5e4:	56 81       	ldd	r21, Z+6	; 0x06
     5e6:	cb 01       	movw	r24, r22
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	82 0f       	add	r24, r18
     5ee:	93 1f       	adc	r25, r19
     5f0:	a4 1f       	adc	r26, r20
     5f2:	b5 1f       	adc	r27, r21
     5f4:	83 83       	std	Z+3, r24	; 0x03
     5f6:	94 83       	std	Z+4, r25	; 0x04
     5f8:	a5 83       	std	Z+5, r26	; 0x05
     5fa:	b6 83       	std	Z+6, r27	; 0x06
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     5fc:	23 81       	ldd	r18, Z+3	; 0x03
     5fe:	34 81       	ldd	r19, Z+4	; 0x04
     600:	45 81       	ldd	r20, Z+5	; 0x05
     602:	56 81       	ldd	r21, Z+6	; 0x06
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	28 17       	cp	r18, r24
     60e:	39 07       	cpc	r19, r25
     610:	4a 07       	cpc	r20, r26
     612:	5b 07       	cpc	r21, r27
     614:	84 f0       	brlt	.+32     	; 0x636 <Timebase_Timer_Await_SubSeconds+0x98>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     616:	23 81       	ldd	r18, Z+3	; 0x03
     618:	34 81       	ldd	r19, Z+4	; 0x04
     61a:	45 81       	ldd	r20, Z+5	; 0x05
     61c:	56 81       	ldd	r21, Z+6	; 0x06
     61e:	80 81       	ld	r24, Z
     620:	91 81       	ldd	r25, Z+1	; 0x01
     622:	a0 e0       	ldi	r26, 0x00	; 0
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	28 1b       	sub	r18, r24
     628:	39 0b       	sbc	r19, r25
     62a:	4a 0b       	sbc	r20, r26
     62c:	5b 0b       	sbc	r21, r27
     62e:	23 83       	std	Z+3, r18	; 0x03
     630:	34 83       	std	Z+4, r19	; 0x04
     632:	45 83       	std	Z+5, r20	; 0x05
     634:	56 83       	std	Z+6, r21	; 0x06
     636:	08 95       	ret

00000638 <Timebase_Timer_Delay_Seconds>:

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     638:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     63a:	e0 91 43 01 	lds	r30, 0x0143
     63e:	f0 91 44 01 	lds	r31, 0x0144
     642:	27 85       	ldd	r18, Z+15	; 0x0f
     644:	30 89       	ldd	r19, Z+16	; 0x10
     646:	41 89       	ldd	r20, Z+17	; 0x11
     648:	52 89       	ldd	r21, Z+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     64a:	78 94       	sei
void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
     64c:	a0 e0       	ldi	r26, 0x00	; 0
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	82 0f       	add	r24, r18
     652:	93 1f       	adc	r25, r19
     654:	a4 1f       	adc	r26, r20
     656:	b5 1f       	adc	r27, r21
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	06 c0       	rjmp	.+12     	; 0x66e <Timebase_Timer_Delay_Seconds+0x36>

/********************************Atomic Functions Start*******************************/


void Timebase_Atomic_Operation_Start(void){
  cli();
     662:	f8 94       	cli
uint16_t Timebase_Timer_Get_SubSecondsShadow(void){
  return Timebase->Time.SubSecondsShadow;
}

int32_t Timebase_Timer_Get_SecondsShadow(void){
  return Timebase->Time.SecondsShadow;
     664:	27 85       	ldd	r18, Z+15	; 0x0f
     666:	30 89       	ldd	r19, Z+16	; 0x10
     668:	41 89       	ldd	r20, Z+17	; 0x11
     66a:	52 89       	ldd	r21, Z+18	; 0x12
void Timebase_Atomic_Operation_Start(void){
  cli();
}

void Timebase_Atomic_Operation_End(void){
  sei();
     66c:	78 94       	sei
  int32_t curr_s = 0, target_s = 0;
  Timebase_Atomic_Operation_Start();
  target_s = Timebase_Timer_Get_SecondsShadow();
  Timebase_Atomic_Operation_End();
  target_s += value;
  while(target_s > curr_s){
     66e:	28 17       	cp	r18, r24
     670:	39 07       	cpc	r19, r25
     672:	4a 07       	cpc	r20, r26
     674:	5b 07       	cpc	r21, r27
     676:	ac f3       	brlt	.-22     	; 0x662 <Timebase_Timer_Delay_Seconds+0x2a>
    Timebase_Atomic_Operation_Start();
    curr_s = Timebase_Timer_Get_SecondsShadow();
	Timebase_Atomic_Operation_End();
  }
}
     678:	08 95       	ret

0000067a <Timebase_UpCounter_SS_Get_Status>:


/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
     67a:	e0 91 43 01 	lds	r30, 0x0143
     67e:	f0 91 44 01 	lds	r31, 0x0144
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	29 e1       	ldi	r18, 0x19	; 25
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	ac 01       	movw	r20, r24
     68a:	42 9f       	mul	r20, r18
     68c:	c0 01       	movw	r24, r0
     68e:	43 9f       	mul	r20, r19
     690:	90 0d       	add	r25, r0
     692:	52 9f       	mul	r21, r18
     694:	90 0d       	add	r25, r0
     696:	11 24       	eor	r1, r1
     698:	e8 0f       	add	r30, r24
     69a:	f9 1f       	adc	r31, r25
     69c:	85 89       	ldd	r24, Z+21	; 0x15
     69e:	86 95       	lsr	r24
  return Timebase->UpCounterSS[window].Status.Value;
}
     6a0:	8f 70       	andi	r24, 0x0F	; 15
     6a2:	08 95       	ret

000006a4 <Timebase_UpCounter_SS_Set_Status>:

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     6a4:	e0 91 43 01 	lds	r30, 0x0143
     6a8:	f0 91 44 01 	lds	r31, 0x0144
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	29 e1       	ldi	r18, 0x19	; 25
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	ac 01       	movw	r20, r24
     6b4:	42 9f       	mul	r20, r18
     6b6:	c0 01       	movw	r24, r0
     6b8:	43 9f       	mul	r20, r19
     6ba:	90 0d       	add	r25, r0
     6bc:	52 9f       	mul	r21, r18
     6be:	90 0d       	add	r25, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	e8 0f       	add	r30, r24
     6c4:	f9 1f       	adc	r31, r25
     6c6:	6f 70       	andi	r22, 0x0F	; 15
     6c8:	66 0f       	add	r22, r22
     6ca:	85 89       	ldd	r24, Z+21	; 0x15
     6cc:	81 7e       	andi	r24, 0xE1	; 225
     6ce:	86 2b       	or	r24, r22
     6d0:	85 8b       	std	Z+21, r24	; 0x15
}
     6d2:	08 95       	ret

000006d4 <Timebase_UpCounter_SS_Get_Value>:

int32_t Timebase_UpCounter_SS_Get_Value(uint8_t window){
     6d4:	e0 91 43 01 	lds	r30, 0x0143
     6d8:	f0 91 44 01 	lds	r31, 0x0144
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	29 e1       	ldi	r18, 0x19	; 25
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	ac 01       	movw	r20, r24
     6e4:	42 9f       	mul	r20, r18
     6e6:	c0 01       	movw	r24, r0
     6e8:	43 9f       	mul	r20, r19
     6ea:	90 0d       	add	r25, r0
     6ec:	52 9f       	mul	r21, r18
     6ee:	90 0d       	add	r25, r0
     6f0:	11 24       	eor	r1, r1
     6f2:	e8 0f       	add	r30, r24
     6f4:	f9 1f       	adc	r31, r25
     6f6:	df 01       	movw	r26, r30
     6f8:	96 96       	adiw	r26, 0x26	; 38
     6fa:	66 a1       	ldd	r22, Z+38	; 0x26
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	7c 91       	ld	r23, X
     700:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Value;
}
     702:	12 96       	adiw	r26, 0x02	; 2
     704:	8c 91       	ld	r24, X
     706:	12 97       	sbiw	r26, 0x02	; 2
     708:	13 96       	adiw	r26, 0x03	; 3
     70a:	9c 91       	ld	r25, X
     70c:	08 95       	ret

0000070e <Timebase_UpCounter_SS_Set_Value>:

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     712:	c0 91 43 01 	lds	r28, 0x0143
     716:	d0 91 44 01 	lds	r29, 0x0144
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	29 e1       	ldi	r18, 0x19	; 25
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	fc 01       	movw	r30, r24
     722:	e2 9f       	mul	r30, r18
     724:	c0 01       	movw	r24, r0
     726:	e3 9f       	mul	r30, r19
     728:	90 0d       	add	r25, r0
     72a:	f2 9f       	mul	r31, r18
     72c:	90 0d       	add	r25, r0
     72e:	11 24       	eor	r1, r1
     730:	c8 0f       	add	r28, r24
     732:	d9 1f       	adc	r29, r25
     734:	ca 01       	movw	r24, r20
     736:	db 01       	movw	r26, r22
     738:	b7 ff       	sbrs	r27, 7
     73a:	04 c0       	rjmp	.+8      	; 0x744 <Timebase_UpCounter_SS_Set_Value+0x36>
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e0       	ldi	r26, 0x00	; 0
     742:	b0 e0       	ldi	r27, 0x00	; 0
     744:	8e a3       	std	Y+38, r24	; 0x26
     746:	9f a3       	std	Y+39, r25	; 0x27
     748:	a8 a7       	std	Y+40, r26	; 0x28
     74a:	b9 a7       	std	Y+41, r27	; 0x29
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <Timebase_UpCounter_SS_Get_EndValueSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSec(uint8_t window){
     752:	e0 91 43 01 	lds	r30, 0x0143
     756:	f0 91 44 01 	lds	r31, 0x0144
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	29 e1       	ldi	r18, 0x19	; 25
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	ac 01       	movw	r20, r24
     762:	42 9f       	mul	r20, r18
     764:	c0 01       	movw	r24, r0
     766:	43 9f       	mul	r20, r19
     768:	90 0d       	add	r25, r0
     76a:	52 9f       	mul	r21, r18
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	e8 0f       	add	r30, r24
     772:	f9 1f       	adc	r31, r25
     774:	df 01       	movw	r26, r30
     776:	56 96       	adiw	r26, 0x16	; 22
     778:	66 89       	ldd	r22, Z+22	; 0x16
     77a:	11 96       	adiw	r26, 0x01	; 1
     77c:	7c 91       	ld	r23, X
     77e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSec;
}
     780:	12 96       	adiw	r26, 0x02	; 2
     782:	8c 91       	ld	r24, X
     784:	12 97       	sbiw	r26, 0x02	; 2
     786:	13 96       	adiw	r26, 0x03	; 3
     788:	9c 91       	ld	r25, X
     78a:	08 95       	ret

0000078c <Timebase_UpCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
     78c:	e0 91 43 01 	lds	r30, 0x0143
     790:	f0 91 44 01 	lds	r31, 0x0144
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	29 e1       	ldi	r18, 0x19	; 25
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	ac 01       	movw	r20, r24
     79c:	42 9f       	mul	r20, r18
     79e:	c0 01       	movw	r24, r0
     7a0:	43 9f       	mul	r20, r19
     7a2:	90 0d       	add	r25, r0
     7a4:	52 9f       	mul	r21, r18
     7a6:	90 0d       	add	r25, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	df 01       	movw	r26, r30
     7b0:	5a 96       	adiw	r26, 0x1a	; 26
     7b2:	62 8d       	ldd	r22, Z+26	; 0x1a
     7b4:	11 96       	adiw	r26, 0x01	; 1
     7b6:	7c 91       	ld	r23, X
     7b8:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].EndValueSubSec;
}
     7ba:	12 96       	adiw	r26, 0x02	; 2
     7bc:	8c 91       	ld	r24, X
     7be:	12 97       	sbiw	r26, 0x02	; 2
     7c0:	13 96       	adiw	r26, 0x03	; 3
     7c2:	9c 91       	ld	r25, X
     7c4:	08 95       	ret

000007c6 <Timebase_UpCounter_SS_Set_EndValueSec>:

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     7c6:	e0 91 43 01 	lds	r30, 0x0143
     7ca:	f0 91 44 01 	lds	r31, 0x0144
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	29 e1       	ldi	r18, 0x19	; 25
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	dc 01       	movw	r26, r24
     7d6:	a2 9f       	mul	r26, r18
     7d8:	c0 01       	movw	r24, r0
     7da:	a3 9f       	mul	r26, r19
     7dc:	90 0d       	add	r25, r0
     7de:	b2 9f       	mul	r27, r18
     7e0:	90 0d       	add	r25, r0
     7e2:	11 24       	eor	r1, r1
     7e4:	e8 0f       	add	r30, r24
     7e6:	f9 1f       	adc	r31, r25
     7e8:	46 8b       	std	Z+22, r20	; 0x16
     7ea:	57 8b       	std	Z+23, r21	; 0x17
     7ec:	60 8f       	std	Z+24, r22	; 0x18
     7ee:	71 8f       	std	Z+25, r23	; 0x19
}
     7f0:	08 95       	ret

000007f2 <Timebase_UpCounter_SS_Set_EndValueSubSec>:

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     7f2:	e0 91 43 01 	lds	r30, 0x0143
     7f6:	f0 91 44 01 	lds	r31, 0x0144
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	29 e1       	ldi	r18, 0x19	; 25
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	dc 01       	movw	r26, r24
     802:	a2 9f       	mul	r26, r18
     804:	c0 01       	movw	r24, r0
     806:	a3 9f       	mul	r26, r19
     808:	90 0d       	add	r25, r0
     80a:	b2 9f       	mul	r27, r18
     80c:	90 0d       	add	r25, r0
     80e:	11 24       	eor	r1, r1
     810:	e8 0f       	add	r30, r24
     812:	f9 1f       	adc	r31, r25
     814:	42 8f       	std	Z+26, r20	; 0x1a
     816:	53 8f       	std	Z+27, r21	; 0x1b
     818:	64 8f       	std	Z+28, r22	; 0x1c
     81a:	75 8f       	std	Z+29, r23	; 0x1d
}
     81c:	08 95       	ret

0000081e <Timebase_UpCounter_SS_Get_TargetValue>:

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
     81e:	e0 91 43 01 	lds	r30, 0x0143
     822:	f0 91 44 01 	lds	r31, 0x0144
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	29 e1       	ldi	r18, 0x19	; 25
     82a:	30 e0       	ldi	r19, 0x00	; 0
     82c:	ac 01       	movw	r20, r24
     82e:	42 9f       	mul	r20, r18
     830:	c0 01       	movw	r24, r0
     832:	43 9f       	mul	r20, r19
     834:	90 0d       	add	r25, r0
     836:	52 9f       	mul	r21, r18
     838:	90 0d       	add	r25, r0
     83a:	11 24       	eor	r1, r1
     83c:	e8 0f       	add	r30, r24
     83e:	f9 1f       	adc	r31, r25
     840:	df 01       	movw	r26, r30
     842:	5e 96       	adiw	r26, 0x1e	; 30
     844:	66 8d       	ldd	r22, Z+30	; 0x1e
     846:	11 96       	adiw	r26, 0x01	; 1
     848:	7c 91       	ld	r23, X
     84a:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Target;
}
     84c:	12 96       	adiw	r26, 0x02	; 2
     84e:	8c 91       	ld	r24, X
     850:	12 97       	sbiw	r26, 0x02	; 2
     852:	13 96       	adiw	r26, 0x03	; 3
     854:	9c 91       	ld	r25, X
     856:	08 95       	ret

00000858 <Timebase_UpCounter_SS_Set_TargetValue>:

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     858:	e0 91 43 01 	lds	r30, 0x0143
     85c:	f0 91 44 01 	lds	r31, 0x0144
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	29 e1       	ldi	r18, 0x19	; 25
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	dc 01       	movw	r26, r24
     868:	a2 9f       	mul	r26, r18
     86a:	c0 01       	movw	r24, r0
     86c:	a3 9f       	mul	r26, r19
     86e:	90 0d       	add	r25, r0
     870:	b2 9f       	mul	r27, r18
     872:	90 0d       	add	r25, r0
     874:	11 24       	eor	r1, r1
     876:	e8 0f       	add	r30, r24
     878:	f9 1f       	adc	r31, r25
     87a:	46 8f       	std	Z+30, r20	; 0x1e
     87c:	57 8f       	std	Z+31, r21	; 0x1f
     87e:	60 a3       	std	Z+32, r22	; 0x20
     880:	71 a3       	std	Z+33, r23	; 0x21
}
     882:	08 95       	ret

00000884 <Timebase_UpCounter_SS_Get_TemporaryValue>:

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
     884:	e0 91 43 01 	lds	r30, 0x0143
     888:	f0 91 44 01 	lds	r31, 0x0144
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	29 e1       	ldi	r18, 0x19	; 25
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	ac 01       	movw	r20, r24
     894:	42 9f       	mul	r20, r18
     896:	c0 01       	movw	r24, r0
     898:	43 9f       	mul	r20, r19
     89a:	90 0d       	add	r25, r0
     89c:	52 9f       	mul	r21, r18
     89e:	90 0d       	add	r25, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	e8 0f       	add	r30, r24
     8a4:	f9 1f       	adc	r31, r25
     8a6:	df 01       	movw	r26, r30
     8a8:	92 96       	adiw	r26, 0x22	; 34
     8aa:	62 a1       	ldd	r22, Z+34	; 0x22
     8ac:	11 96       	adiw	r26, 0x01	; 1
     8ae:	7c 91       	ld	r23, X
     8b0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].Temporary;
}
     8b2:	12 96       	adiw	r26, 0x02	; 2
     8b4:	8c 91       	ld	r24, X
     8b6:	12 97       	sbiw	r26, 0x02	; 2
     8b8:	13 96       	adiw	r26, 0x03	; 3
     8ba:	9c 91       	ld	r25, X
     8bc:	08 95       	ret

000008be <Timebase_UpCounter_SS_Set_TemporaryValue>:

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     8c2:	c0 91 43 01 	lds	r28, 0x0143
     8c6:	d0 91 44 01 	lds	r29, 0x0144
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	29 e1       	ldi	r18, 0x19	; 25
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	fc 01       	movw	r30, r24
     8d2:	e2 9f       	mul	r30, r18
     8d4:	c0 01       	movw	r24, r0
     8d6:	e3 9f       	mul	r30, r19
     8d8:	90 0d       	add	r25, r0
     8da:	f2 9f       	mul	r31, r18
     8dc:	90 0d       	add	r25, r0
     8de:	11 24       	eor	r1, r1
     8e0:	c8 0f       	add	r28, r24
     8e2:	d9 1f       	adc	r29, r25
     8e4:	ca 01       	movw	r24, r20
     8e6:	db 01       	movw	r26, r22
     8e8:	b7 ff       	sbrs	r27, 7
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <Timebase_UpCounter_SS_Set_TemporaryValue+0x36>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	8a a3       	std	Y+34, r24	; 0x22
     8f6:	9b a3       	std	Y+35, r25	; 0x23
     8f8:	ac a3       	std	Y+36, r26	; 0x24
     8fa:	bd a3       	std	Y+37, r27	; 0x25
}
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret

00000902 <Timebase_UpCounter_SS_Get_PeriodValue>:

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
     902:	e0 91 43 01 	lds	r30, 0x0143
     906:	f0 91 44 01 	lds	r31, 0x0144
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	29 e1       	ldi	r18, 0x19	; 25
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	ac 01       	movw	r20, r24
     912:	42 9f       	mul	r20, r18
     914:	c0 01       	movw	r24, r0
     916:	43 9f       	mul	r20, r19
     918:	90 0d       	add	r25, r0
     91a:	52 9f       	mul	r21, r18
     91c:	90 0d       	add	r25, r0
     91e:	11 24       	eor	r1, r1
     920:	e8 0f       	add	r30, r24
     922:	f9 1f       	adc	r31, r25
     924:	df 01       	movw	r26, r30
     926:	9a 96       	adiw	r26, 0x2a	; 42
     928:	62 a5       	ldd	r22, Z+42	; 0x2a
     92a:	11 96       	adiw	r26, 0x01	; 1
     92c:	7c 91       	ld	r23, X
     92e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounterSS[window].PeriodValue;
}
     930:	12 96       	adiw	r26, 0x02	; 2
     932:	8c 91       	ld	r24, X
     934:	12 97       	sbiw	r26, 0x02	; 2
     936:	13 96       	adiw	r26, 0x03	; 3
     938:	9c 91       	ld	r25, X
     93a:	08 95       	ret

0000093c <Timebase_UpCounter_SS_Set_PeriodValue>:

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     93c:	e0 91 43 01 	lds	r30, 0x0143
     940:	f0 91 44 01 	lds	r31, 0x0144
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	29 e1       	ldi	r18, 0x19	; 25
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	dc 01       	movw	r26, r24
     94c:	a2 9f       	mul	r26, r18
     94e:	c0 01       	movw	r24, r0
     950:	a3 9f       	mul	r26, r19
     952:	90 0d       	add	r25, r0
     954:	b2 9f       	mul	r27, r18
     956:	90 0d       	add	r25, r0
     958:	11 24       	eor	r1, r1
     95a:	e8 0f       	add	r30, r24
     95c:	f9 1f       	adc	r31, r25
     95e:	42 a7       	std	Z+42, r20	; 0x2a
     960:	53 a7       	std	Z+43, r21	; 0x2b
     962:	64 a7       	std	Z+44, r22	; 0x2c
     964:	75 a7       	std	Z+45, r23	; 0x2d
}
     966:	08 95       	ret

00000968 <Timebase_UpCounter_SS_Get_Period_Flag>:

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
     968:	e0 91 43 01 	lds	r30, 0x0143
     96c:	f0 91 44 01 	lds	r31, 0x0144
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	29 e1       	ldi	r18, 0x19	; 25
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	ac 01       	movw	r20, r24
     978:	42 9f       	mul	r20, r18
     97a:	c0 01       	movw	r24, r0
     97c:	43 9f       	mul	r20, r19
     97e:	90 0d       	add	r25, r0
     980:	52 9f       	mul	r21, r18
     982:	90 0d       	add	r25, r0
     984:	11 24       	eor	r1, r1
     986:	e8 0f       	add	r30, r24
     988:	f9 1f       	adc	r31, r25
     98a:	85 89       	ldd	r24, Z+21	; 0x15
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}
     98c:	81 70       	andi	r24, 0x01	; 1
     98e:	08 95       	ret

00000990 <Timebase_UpCounter_SS_Set_Period_Flag>:

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     990:	e0 91 43 01 	lds	r30, 0x0143
     994:	f0 91 44 01 	lds	r31, 0x0144
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	29 e1       	ldi	r18, 0x19	; 25
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	ac 01       	movw	r20, r24
     9a0:	42 9f       	mul	r20, r18
     9a2:	c0 01       	movw	r24, r0
     9a4:	43 9f       	mul	r20, r19
     9a6:	90 0d       	add	r25, r0
     9a8:	52 9f       	mul	r21, r18
     9aa:	90 0d       	add	r25, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	e8 0f       	add	r30, r24
     9b0:	f9 1f       	adc	r31, r25
     9b2:	85 89       	ldd	r24, Z+21	; 0x15
     9b4:	81 60       	ori	r24, 0x01	; 1
     9b6:	85 8b       	std	Z+21, r24	; 0x15
}
     9b8:	08 95       	ret

000009ba <Timebase_UpCounter_SS_Clear_Period_Flag>:

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     9ba:	e0 91 43 01 	lds	r30, 0x0143
     9be:	f0 91 44 01 	lds	r31, 0x0144
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	29 e1       	ldi	r18, 0x19	; 25
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	ac 01       	movw	r20, r24
     9ca:	42 9f       	mul	r20, r18
     9cc:	c0 01       	movw	r24, r0
     9ce:	43 9f       	mul	r20, r19
     9d0:	90 0d       	add	r25, r0
     9d2:	52 9f       	mul	r21, r18
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	e8 0f       	add	r30, r24
     9da:	f9 1f       	adc	r31, r25
     9dc:	85 89       	ldd	r24, Z+21	; 0x15
     9de:	8e 7f       	andi	r24, 0xFE	; 254
     9e0:	85 8b       	std	Z+21, r24	; 0x15
}
     9e2:	08 95       	ret

000009e4 <Timebase_UpCounter_SS_Reset>:
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     9e4:	e0 91 43 01 	lds	r30, 0x0143
     9e8:	f0 91 44 01 	lds	r31, 0x0144
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	29 e1       	ldi	r18, 0x19	; 25
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	ac 01       	movw	r20, r24
     9f4:	42 9f       	mul	r20, r18
     9f6:	c0 01       	movw	r24, r0
     9f8:	43 9f       	mul	r20, r19
     9fa:	90 0d       	add	r25, r0
     9fc:	52 9f       	mul	r21, r18
     9fe:	90 0d       	add	r25, r0
     a00:	11 24       	eor	r1, r1
     a02:	e8 0f       	add	r30, r24
     a04:	f9 1f       	adc	r31, r25
     a06:	85 89       	ldd	r24, Z+21	; 0x15

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     a08:	16 a2       	std	Z+38, r1	; 0x26
     a0a:	17 a2       	std	Z+39, r1	; 0x27
     a0c:	10 a6       	std	Z+40, r1	; 0x28
     a0e:	11 a6       	std	Z+41, r1	; 0x29
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     a10:	16 8a       	std	Z+22, r1	; 0x16
     a12:	17 8a       	std	Z+23, r1	; 0x17
     a14:	10 8e       	std	Z+24, r1	; 0x18
     a16:	11 8e       	std	Z+25, r1	; 0x19
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     a18:	12 8e       	std	Z+26, r1	; 0x1a
     a1a:	13 8e       	std	Z+27, r1	; 0x1b
     a1c:	14 8e       	std	Z+28, r1	; 0x1c
     a1e:	15 8e       	std	Z+29, r1	; 0x1d
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     a20:	16 8e       	std	Z+30, r1	; 0x1e
     a22:	17 8e       	std	Z+31, r1	; 0x1f
     a24:	10 a2       	std	Z+32, r1	; 0x20
     a26:	11 a2       	std	Z+33, r1	; 0x21

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     a28:	12 a2       	std	Z+34, r1	; 0x22
     a2a:	13 a2       	std	Z+35, r1	; 0x23
     a2c:	14 a2       	std	Z+36, r1	; 0x24
     a2e:	15 a2       	std	Z+37, r1	; 0x25
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     a30:	12 a6       	std	Z+42, r1	; 0x2a
     a32:	13 a6       	std	Z+43, r1	; 0x2b
     a34:	14 a6       	std	Z+44, r1	; 0x2c
     a36:	15 a6       	std	Z+45, r1	; 0x2d
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
     a38:	80 7e       	andi	r24, 0xE0	; 224
     a3a:	85 8b       	std	Z+21, r24	; 0x15
  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_SS_Set_TargetValue(window, 0);
  Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 
     a3c:	08 95       	ret

00000a3e <Timebase_UpCounter_SS_Clear_All_Flags>:

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     a3e:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Timebase_UpCounter_SS_Reset>
}
     a42:	08 95       	ret

00000a44 <Timebase_UpCounter_SS_Start>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     a44:	e0 91 43 01 	lds	r30, 0x0143
     a48:	f0 91 44 01 	lds	r31, 0x0144
     a4c:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     a4e:	29 e1       	ldi	r18, 0x19	; 25
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	ac 01       	movw	r20, r24
     a54:	42 9f       	mul	r20, r18
     a56:	c0 01       	movw	r24, r0
     a58:	43 9f       	mul	r20, r19
     a5a:	90 0d       	add	r25, r0
     a5c:	52 9f       	mul	r21, r18
     a5e:	90 0d       	add	r25, r0
     a60:	11 24       	eor	r1, r1
     a62:	e8 0f       	add	r30, r24
     a64:	f9 1f       	adc	r31, r25
     a66:	95 89       	ldd	r25, Z+21	; 0x15
     a68:	89 2f       	mov	r24, r25
     a6a:	86 95       	lsr	r24
     a6c:	8f 70       	andi	r24, 0x0F	; 15
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	19 f0       	breq	.+6      	; 0xa78 <Timebase_UpCounter_SS_Start+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     a72:	91 7e       	andi	r25, 0xE1	; 225
     a74:	92 60       	ori	r25, 0x02	; 2
     a76:	95 8b       	std	Z+21, r25	; 0x15
     a78:	08 95       	ret

00000a7a <Timebase_UpCounter_SS_Stop>:

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     a7a:	e0 91 43 01 	lds	r30, 0x0143
     a7e:	f0 91 44 01 	lds	r31, 0x0144
     a82:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_START);
  }
}

void Timebase_UpCounter_SS_Stop(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
     a84:	29 e1       	ldi	r18, 0x19	; 25
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	ac 01       	movw	r20, r24
     a8a:	42 9f       	mul	r20, r18
     a8c:	c0 01       	movw	r24, r0
     a8e:	43 9f       	mul	r20, r19
     a90:	90 0d       	add	r25, r0
     a92:	52 9f       	mul	r21, r18
     a94:	90 0d       	add	r25, r0
     a96:	11 24       	eor	r1, r1
     a98:	e8 0f       	add	r30, r24
     a9a:	f9 1f       	adc	r31, r25
     a9c:	95 89       	ldd	r25, Z+21	; 0x15
     a9e:	89 2f       	mov	r24, r25
     aa0:	86 95       	lsr	r24
     aa2:	8f 70       	andi	r24, 0x0F	; 15
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	19 f0       	breq	.+6      	; 0xaae <Timebase_UpCounter_SS_Stop+0x34>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     aa8:	91 7e       	andi	r25, 0xE1	; 225
     aaa:	94 60       	ori	r25, 0x04	; 4
     aac:	95 8b       	std	Z+21, r25	; 0x15
     aae:	08 95       	ret

00000ab0 <Timebase_UpCounter_SS_Set_Securely>:
    Timebase_UpCounter_SS_Set_Status(window , COUNTER_STATE_STOP);
  }
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
     ab0:	2f 92       	push	r2
     ab2:	3f 92       	push	r3
     ab4:	4f 92       	push	r4
     ab6:	5f 92       	push	r5
     ab8:	6f 92       	push	r6
     aba:	7f 92       	push	r7
     abc:	8f 92       	push	r8
     abe:	9f 92       	push	r9
     ac0:	af 92       	push	r10
     ac2:	bf 92       	push	r11
     ac4:	cf 92       	push	r12
     ac6:	df 92       	push	r13
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	00 d0       	rcall	.+0      	; 0xad6 <Timebase_UpCounter_SS_Set_Securely+0x26>
     ad6:	00 d0       	rcall	.+0      	; 0xad8 <Timebase_UpCounter_SS_Set_Securely+0x28>
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	4a 01       	movw	r8, r20
     ade:	5b 01       	movw	r10, r22

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     ae0:	20 91 43 01 	lds	r18, 0x0143
     ae4:	30 91 44 01 	lds	r19, 0x0144
     ae8:	3c 83       	std	Y+4, r19	; 0x04
     aea:	2b 83       	std	Y+3, r18	; 0x03
     aec:	a8 2f       	mov	r26, r24
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	ba 83       	std	Y+2, r27	; 0x02
     af2:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_UpCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s, curr_ss, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
     af4:	89 e1       	ldi	r24, 0x19	; 25
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	a8 9f       	mul	r26, r24
     afa:	f0 01       	movw	r30, r0
     afc:	a9 9f       	mul	r26, r25
     afe:	f0 0d       	add	r31, r0
     b00:	b8 9f       	mul	r27, r24
     b02:	f0 0d       	add	r31, r0
     b04:	11 24       	eor	r1, r1
     b06:	e2 0f       	add	r30, r18
     b08:	f3 1f       	adc	r31, r19
     b0a:	85 89       	ldd	r24, Z+21	; 0x15
     b0c:	86 95       	lsr	r24
     b0e:	8f 70       	andi	r24, 0x0F	; 15
     b10:	09 f0       	breq	.+2      	; 0xb14 <Timebase_UpCounter_SS_Set_Securely+0x64>
     b12:	73 c0       	rjmp	.+230    	; 0xbfa <Timebase_UpCounter_SS_Set_Securely+0x14a>

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     b14:	16 a2       	std	Z+38, r1	; 0x26
     b16:	17 a2       	std	Z+39, r1	; 0x27
     b18:	10 a6       	std	Z+40, r1	; 0x28
     b1a:	11 a6       	std	Z+41, r1	; 0x29

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     b1c:	12 a2       	std	Z+34, r1	; 0x22
     b1e:	13 a2       	std	Z+35, r1	; 0x23
     b20:	14 a2       	std	Z+36, r1	; 0x24
     b22:	15 a2       	std	Z+37, r1	; 0x25
int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
}

void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
     b24:	46 8f       	std	Z+30, r20	; 0x1e
     b26:	57 8f       	std	Z+31, r21	; 0x1f
     b28:	60 a3       	std	Z+32, r22	; 0x20
     b2a:	71 a3       	std	Z+33, r23	; 0x21
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     b2c:	f9 01       	movw	r30, r18
     b2e:	c7 80       	ldd	r12, Z+7	; 0x07
     b30:	d0 84       	ldd	r13, Z+8	; 0x08
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     b32:	21 84       	ldd	r2, Z+9	; 0x09
     b34:	32 84       	ldd	r3, Z+10	; 0x0a
     b36:	43 84       	ldd	r4, Z+11	; 0x0b
     b38:	54 84       	ldd	r5, Z+12	; 0x0c
    Timebase_UpCounter_SS_Set_Value(window, 0);
    Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
    Timebase_UpCounter_SS_Set_TargetValue(window, value);
	curr_ss = Timebase_Timer_Get_SubSeconds();
	curr_s  = Timebase_Timer_Get_Seconds();
	subsec_val = value % Timebase->Config.UpdateRate;
     b3a:	20 81       	ld	r18, Z
     b3c:	31 81       	ldd	r19, Z+1	; 0x01
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	c5 01       	movw	r24, r10
     b44:	b4 01       	movw	r22, r8
     b46:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     b4a:	7b 01       	movw	r14, r22
     b4c:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     b4e:	ab 81       	ldd	r26, Y+3	; 0x03
     b50:	bc 81       	ldd	r27, Y+4	; 0x04
     b52:	2d 91       	ld	r18, X+
     b54:	3c 91       	ld	r19, X
     b56:	40 e0       	ldi	r20, 0x00	; 0
     b58:	50 e0       	ldi	r21, 0x00	; 0
     b5a:	c5 01       	movw	r24, r10
     b5c:	b4 01       	movw	r22, r8
     b5e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     b62:	c9 01       	movw	r24, r18
     b64:	da 01       	movw	r26, r20
     b66:	3c 01       	movw	r6, r24
     b68:	4d 01       	movw	r8, r26
	subsec_val += curr_ss;
     b6a:	56 01       	movw	r10, r12
     b6c:	cc 24       	eor	r12, r12
     b6e:	dd 24       	eor	r13, r13
     b70:	ae 0c       	add	r10, r14
     b72:	bf 1c       	adc	r11, r15
     b74:	c0 1e       	adc	r12, r16
     b76:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	80 81       	ld	r24, Z
     b7e:	91 81       	ldd	r25, Z+1	; 0x01
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	a8 16       	cp	r10, r24
     b86:	b9 06       	cpc	r11, r25
     b88:	ca 06       	cpc	r12, r26
     b8a:	db 06       	cpc	r13, r27
     b8c:	94 f0       	brlt	.+36     	; 0xbb2 <Timebase_UpCounter_SS_Set_Securely+0x102>
	  sec_val += 1;
     b8e:	08 94       	sec
     b90:	61 1c       	adc	r6, r1
     b92:	71 1c       	adc	r7, r1
     b94:	81 1c       	adc	r8, r1
     b96:	91 1c       	adc	r9, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     b98:	20 81       	ld	r18, Z
     b9a:	31 81       	ldd	r19, Z+1	; 0x01
     b9c:	40 e0       	ldi	r20, 0x00	; 0
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	c6 01       	movw	r24, r12
     ba2:	b5 01       	movw	r22, r10
     ba4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     ba8:	ac 01       	movw	r20, r24
     baa:	cb 01       	movw	r24, r22
     bac:	da 01       	movw	r26, r20
     bae:	5c 01       	movw	r10, r24
     bb0:	6d 01       	movw	r12, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     bb2:	89 e1       	ldi	r24, 0x19	; 25
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	29 81       	ldd	r18, Y+1	; 0x01
     bb8:	3a 81       	ldd	r19, Y+2	; 0x02
     bba:	28 9f       	mul	r18, r24
     bbc:	f0 01       	movw	r30, r0
     bbe:	29 9f       	mul	r18, r25
     bc0:	f0 0d       	add	r31, r0
     bc2:	38 9f       	mul	r19, r24
     bc4:	f0 0d       	add	r31, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	e8 0f       	add	r30, r24
     bce:	f9 1f       	adc	r31, r25
     bd0:	26 0c       	add	r2, r6
     bd2:	37 1c       	adc	r3, r7
     bd4:	48 1c       	adc	r4, r8
     bd6:	59 1c       	adc	r5, r9
     bd8:	26 8a       	std	Z+22, r2	; 0x16
     bda:	37 8a       	std	Z+23, r3	; 0x17
     bdc:	40 8e       	std	Z+24, r4	; 0x18
     bde:	51 8e       	std	Z+25, r5	; 0x19
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     be0:	a2 8e       	std	Z+26, r10	; 0x1a
     be2:	b3 8e       	std	Z+27, r11	; 0x1b
     be4:	c4 8e       	std	Z+28, r12	; 0x1c
     be6:	d5 8e       	std	Z+29, r13	; 0x1d
void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
}

void Timebase_UpCounter_SS_Start(uint8_t window){
  if(Timebase_UpCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
     be8:	95 89       	ldd	r25, Z+21	; 0x15
     bea:	89 2f       	mov	r24, r25
     bec:	86 95       	lsr	r24
     bee:	8f 70       	andi	r24, 0x0F	; 15
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	19 f0       	breq	.+6      	; 0xbfa <Timebase_UpCounter_SS_Set_Securely+0x14a>
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     bf4:	91 7e       	andi	r25, 0xE1	; 225
     bf6:	92 60       	ori	r25, 0x02	; 2
     bf8:	95 8b       	std	Z+21, r25	; 0x15
	sec_val += curr_s;
    Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Start(window);
  }
}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	cf 91       	pop	r28
     c04:	df 91       	pop	r29
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	bf 90       	pop	r11
     c14:	af 90       	pop	r10
     c16:	9f 90       	pop	r9
     c18:	8f 90       	pop	r8
     c1a:	7f 90       	pop	r7
     c1c:	6f 90       	pop	r6
     c1e:	5f 90       	pop	r5
     c20:	4f 90       	pop	r4
     c22:	3f 90       	pop	r3
     c24:	2f 90       	pop	r2
     c26:	08 95       	ret

00000c28 <Timebase_UpCounter_SS_Set_Forcefully>:

void Timebase_UpCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	d8 2e       	mov	r13, r24
     c34:	7a 01       	movw	r14, r20
     c36:	8b 01       	movw	r16, r22
  Timebase_UpCounter_SS_Reset( window );
     c38:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Timebase_UpCounter_SS_Reset>
  Timebase_UpCounter_SS_Set_Securely( window, value );
     c3c:	8d 2d       	mov	r24, r13
     c3e:	b8 01       	movw	r22, r16
     c40:	a7 01       	movw	r20, r14
     c42:	0e 94 58 05 	call	0xab0	; 0xab0 <Timebase_UpCounter_SS_Set_Securely>
} 
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	08 95       	ret

00000c52 <Timebase_UpCounter_SS_Update>:

void Timebase_UpCounter_SS_Update(uint8_t window){
     c52:	2f 92       	push	r2
     c54:	3f 92       	push	r3
     c56:	4f 92       	push	r4
     c58:	5f 92       	push	r5
     c5a:	6f 92       	push	r6
     c5c:	7f 92       	push	r7
     c5e:	8f 92       	push	r8
     c60:	9f 92       	push	r9
     c62:	af 92       	push	r10
     c64:	bf 92       	push	r11
     c66:	cf 92       	push	r12
     c68:	df 92       	push	r13
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	df 93       	push	r29
     c74:	cf 93       	push	r28
     c76:	00 d0       	rcall	.+0      	; 0xc78 <Timebase_UpCounter_SS_Update+0x26>
     c78:	00 d0       	rcall	.+0      	; 0xc7a <Timebase_UpCounter_SS_Update+0x28>
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <Timebase_UpCounter_SS_Update+0x2a>
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62

/****************************UpCounter SS Functions Start****************************/

#ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
     c80:	20 90 43 01 	lds	r2, 0x0143
     c84:	30 90 44 01 	lds	r3, 0x0144
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	3e 83       	std	Y+6, r19	; 0x06
     c8e:	2d 83       	std	Y+5, r18	; 0x05
     c90:	89 e1       	ldi	r24, 0x19	; 25
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	28 9f       	mul	r18, r24
     c96:	50 01       	movw	r10, r0
     c98:	29 9f       	mul	r18, r25
     c9a:	b0 0c       	add	r11, r0
     c9c:	38 9f       	mul	r19, r24
     c9e:	b0 0c       	add	r11, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	a2 0c       	add	r10, r2
     ca4:	b3 1c       	adc	r11, r3
     ca6:	d5 01       	movw	r26, r10
     ca8:	55 96       	adiw	r26, 0x15	; 21
     caa:	8c 91       	ld	r24, X
     cac:	86 95       	lsr	r24
     cae:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_SS_Set_Securely( window, value );
} 

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <Timebase_UpCounter_SS_Update+0x64>
     cb4:	9f c0       	rjmp	.+318    	; 0xdf4 <Timebase_UpCounter_SS_Update+0x1a2>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     cb6:	f1 01       	movw	r30, r2
     cb8:	81 85       	ldd	r24, Z+9	; 0x09
     cba:	92 85       	ldd	r25, Z+10	; 0x0a
     cbc:	a3 85       	ldd	r26, Z+11	; 0x0b
     cbe:	b4 85       	ldd	r27, Z+12	; 0x0c
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     cc0:	e7 80       	ldd	r14, Z+7	; 0x07
     cc2:	f0 84       	ldd	r15, Z+8	; 0x08

void Timebase_UpCounter_SS_Update(uint8_t window){
  int32_t curr_s, curr_ss, value, subsec_val, sec_val;
  if( Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
     cc4:	00 e0       	ldi	r16, 0x00	; 0
     cc6:	10 e0       	ldi	r17, 0x00	; 0
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
     cc8:	f5 01       	movw	r30, r10
     cca:	26 89       	ldd	r18, Z+22	; 0x16
     ccc:	37 89       	ldd	r19, Z+23	; 0x17
     cce:	40 8d       	ldd	r20, Z+24	; 0x18
     cd0:	51 8d       	ldd	r21, Z+25	; 0x19
     cd2:	28 1b       	sub	r18, r24
     cd4:	39 0b       	sbc	r19, r25
     cd6:	4a 0b       	sbc	r20, r26
     cd8:	5b 0b       	sbc	r21, r27
	curr_s *= Timebase->Config.UpdateRate;
     cda:	d1 01       	movw	r26, r2
     cdc:	6d 91       	ld	r22, X+
     cde:	7c 91       	ld	r23, X
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsi3>
     ce8:	9b 01       	movw	r18, r22
     cea:	ac 01       	movw	r20, r24
     cec:	2e 19       	sub	r18, r14
     cee:	3f 09       	sbc	r19, r15
     cf0:	40 0b       	sbc	r20, r16
     cf2:	51 0b       	sbc	r21, r17
	curr_ss += curr_s;
     cf4:	f5 01       	movw	r30, r10
     cf6:	82 8d       	ldd	r24, Z+26	; 0x1a
     cf8:	93 8d       	ldd	r25, Z+27	; 0x1b
     cfa:	a4 8d       	ldd	r26, Z+28	; 0x1c
     cfc:	b5 8d       	ldd	r27, Z+29	; 0x1d
     cfe:	28 0f       	add	r18, r24
     d00:	39 1f       	adc	r19, r25
     d02:	4a 1f       	adc	r20, r26
     d04:	5b 1f       	adc	r21, r27
     d06:	57 ff       	sbrs	r21, 7
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <Timebase_UpCounter_SS_Update+0xc0>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     d12:	89 e1       	ldi	r24, 0x19	; 25
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	6d 81       	ldd	r22, Y+5	; 0x05
     d18:	7e 81       	ldd	r23, Y+6	; 0x06
     d1a:	68 9f       	mul	r22, r24
     d1c:	f0 01       	movw	r30, r0
     d1e:	69 9f       	mul	r22, r25
     d20:	f0 0d       	add	r31, r0
     d22:	78 9f       	mul	r23, r24
     d24:	f0 0d       	add	r31, r0
     d26:	11 24       	eor	r1, r1
     d28:	e2 0d       	add	r30, r2
     d2a:	f3 1d       	adc	r31, r3
     d2c:	22 a3       	std	Z+34, r18	; 0x22
     d2e:	33 a3       	std	Z+35, r19	; 0x23
     d30:	44 a3       	std	Z+36, r20	; 0x24
     d32:	55 a3       	std	Z+37, r21	; 0x25
	curr_s  = Timebase_UpCounter_SS_Get_EndValueSec(window) - curr_s;
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
     d34:	86 8d       	ldd	r24, Z+30	; 0x1e
     d36:	97 8d       	ldd	r25, Z+31	; 0x1f
     d38:	a0 a1       	ldd	r26, Z+32	; 0x20
     d3a:	b1 a1       	ldd	r27, Z+33	; 0x21

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     d3c:	82 1b       	sub	r24, r18
     d3e:	93 0b       	sbc	r25, r19
     d40:	a4 0b       	sbc	r26, r20
     d42:	b5 0b       	sbc	r27, r21
     d44:	b7 ff       	sbrs	r27, 7
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <Timebase_UpCounter_SS_Update+0xfe>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	86 a3       	std	Z+38, r24	; 0x26
     d52:	97 a3       	std	Z+39, r25	; 0x27
     d54:	a0 a7       	std	Z+40, r26	; 0x28
     d56:	b1 a7       	std	Z+41, r27	; 0x29
	curr_s *= Timebase->Config.UpdateRate;
	curr_ss = Timebase_UpCounter_SS_Get_EndValueSubSec(window) - curr_ss;
	curr_ss += curr_s;
    Timebase_UpCounter_SS_Set_TemporaryValue(window, curr_ss );
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_SS_Get_TemporaryValue(window) <= 0){
     d58:	89 e1       	ldi	r24, 0x19	; 25
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	ad 81       	ldd	r26, Y+5	; 0x05
     d5e:	be 81       	ldd	r27, Y+6	; 0x06
     d60:	a8 9f       	mul	r26, r24
     d62:	b0 01       	movw	r22, r0
     d64:	a9 9f       	mul	r26, r25
     d66:	70 0d       	add	r23, r0
     d68:	b8 9f       	mul	r27, r24
     d6a:	70 0d       	add	r23, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	62 0d       	add	r22, r2
     d70:	73 1d       	adc	r23, r3
     d72:	fb 01       	movw	r30, r22
     d74:	82 a1       	ldd	r24, Z+34	; 0x22
     d76:	93 a1       	ldd	r25, Z+35	; 0x23
     d78:	a4 a1       	ldd	r26, Z+36	; 0x24
     d7a:	b5 a1       	ldd	r27, Z+37	; 0x25
     d7c:	18 16       	cp	r1, r24
     d7e:	19 06       	cpc	r1, r25
     d80:	1a 06       	cpc	r1, r26
     d82:	1b 06       	cpc	r1, r27
     d84:	0c f4       	brge	.+2      	; 0xd88 <Timebase_UpCounter_SS_Update+0x136>
     d86:	c2 c0       	rjmp	.+388    	; 0xf0c <Timebase_UpCounter_SS_Update+0x2ba>
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     d88:	db 01       	movw	r26, r22
     d8a:	56 96       	adiw	r26, 0x16	; 22
     d8c:	1d 92       	st	X+, r1
     d8e:	1d 92       	st	X+, r1
     d90:	1d 92       	st	X+, r1
     d92:	1c 92       	st	X, r1
     d94:	59 97       	sbiw	r26, 0x19	; 25
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     d96:	12 8e       	std	Z+26, r1	; 0x1a
     d98:	13 8e       	std	Z+27, r1	; 0x1b
     d9a:	14 8e       	std	Z+28, r1	; 0x1c
     d9c:	15 8e       	std	Z+29, r1	; 0x1d

void Timebase_UpCounter_SS_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value<0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Temporary = value;
     d9e:	92 96       	adiw	r26, 0x22	; 34
     da0:	1d 92       	st	X+, r1
     da2:	1d 92       	st	X+, r1
     da4:	1d 92       	st	X+, r1
     da6:	1c 92       	st	X, r1
     da8:	95 97       	sbiw	r26, 0x25	; 37
void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
}

int32_t Timebase_UpCounter_SS_Get_TargetValue(uint8_t window){
  return Timebase->UpCounterSS[window].Target;
     daa:	7e 96       	adiw	r30, 0x1e	; 30

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     dac:	5e 96       	adiw	r26, 0x1e	; 30
     dae:	2c 91       	ld	r18, X
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	42 81       	ldd	r20, Z+2	; 0x02
     db4:	53 81       	ldd	r21, Z+3	; 0x03
     db6:	c9 01       	movw	r24, r18
     db8:	da 01       	movw	r26, r20
     dba:	b7 ff       	sbrs	r27, 7
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <Timebase_UpCounter_SS_Update+0x174>
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	a0 e0       	ldi	r26, 0x00	; 0
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	fb 01       	movw	r30, r22
     dc8:	86 a3       	std	Z+38, r24	; 0x26
     dca:	97 a3       	std	Z+39, r25	; 0x27
     dcc:	a0 a7       	std	Z+40, r26	; 0x28
     dce:	b1 a7       	std	Z+41, r27	; 0x29
uint8_t Timebase_UpCounter_SS_Get_Status(uint8_t window){
  return Timebase->UpCounterSS[window].Status.Value;
}

void Timebase_UpCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounterSS[window].Status.Value = value;
     dd0:	89 e1       	ldi	r24, 0x19	; 25
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	2d 81       	ldd	r18, Y+5	; 0x05
     dd6:	3e 81       	ldd	r19, Y+6	; 0x06
     dd8:	28 9f       	mul	r18, r24
     dda:	f0 01       	movw	r30, r0
     ddc:	29 9f       	mul	r18, r25
     dde:	f0 0d       	add	r31, r0
     de0:	38 9f       	mul	r19, r24
     de2:	f0 0d       	add	r31, r0
     de4:	11 24       	eor	r1, r1
     de6:	e2 0d       	add	r30, r2
     de8:	f3 1d       	adc	r31, r3
     dea:	85 89       	ldd	r24, Z+21	; 0x15
     dec:	81 7e       	andi	r24, 0xE1	; 225
     dee:	88 60       	ori	r24, 0x08	; 8
     df0:	85 8b       	std	Z+21, r24	; 0x15
     df2:	8c c0       	rjmp	.+280    	; 0xf0c <Timebase_UpCounter_SS_Update+0x2ba>
	  Timebase_UpCounter_SS_Set_EndValueSubSec(window, 0);
      Timebase_UpCounter_SS_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window));
      Timebase_UpCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
     df4:	82 30       	cpi	r24, 0x02	; 2
     df6:	09 f0       	breq	.+2      	; 0xdfa <Timebase_UpCounter_SS_Update+0x1a8>
     df8:	89 c0       	rjmp	.+274    	; 0xf0c <Timebase_UpCounter_SS_Update+0x2ba>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     dfa:	d1 01       	movw	r26, r2
     dfc:	19 96       	adiw	r26, 0x09	; 9
     dfe:	6d 91       	ld	r22, X+
     e00:	7d 91       	ld	r23, X+
     e02:	8d 91       	ld	r24, X+
     e04:	9c 91       	ld	r25, X
     e06:	1c 97       	sbiw	r26, 0x0c	; 12
     e08:	69 83       	std	Y+1, r22	; 0x01
     e0a:	7a 83       	std	Y+2, r23	; 0x02
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	9c 83       	std	Y+4, r25	; 0x04
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     e10:	17 96       	adiw	r26, 0x07	; 7
     e12:	8d 90       	ld	r8, X+
     e14:	9c 90       	ld	r9, X
     e16:	18 97       	sbiw	r26, 0x08	; 8
void Timebase_UpCounter_SS_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].Target = value;
}

int32_t Timebase_UpCounter_SS_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounterSS[window].Temporary;
     e18:	f5 01       	movw	r30, r10
     e1a:	a2 a0       	ldd	r10, Z+34	; 0x22
     e1c:	b3 a0       	ldd	r11, Z+35	; 0x23
     e1e:	c4 a0       	ldd	r12, Z+36	; 0x24
     e20:	d5 a0       	ldd	r13, Z+37	; 0x25
    }
  } else if (Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s  = Timebase_Timer_Get_Seconds();
	curr_ss = Timebase_Timer_Get_SubSeconds();
	value      = Timebase_UpCounter_SS_Get_TemporaryValue(window);
	subsec_val = value % Timebase->Config.UpdateRate;
     e22:	2d 91       	ld	r18, X+
     e24:	3c 91       	ld	r19, X
     e26:	40 e0       	ldi	r20, 0x00	; 0
     e28:	50 e0       	ldi	r21, 0x00	; 0
     e2a:	c6 01       	movw	r24, r12
     e2c:	b5 01       	movw	r22, r10
     e2e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     e32:	7b 01       	movw	r14, r22
     e34:	8c 01       	movw	r16, r24
	sec_val    = value / Timebase->Config.UpdateRate;
     e36:	d1 01       	movw	r26, r2
     e38:	2d 91       	ld	r18, X+
     e3a:	3c 91       	ld	r19, X
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	c6 01       	movw	r24, r12
     e42:	b5 01       	movw	r22, r10
     e44:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     e48:	c9 01       	movw	r24, r18
     e4a:	da 01       	movw	r26, r20
     e4c:	2c 01       	movw	r4, r24
     e4e:	3d 01       	movw	r6, r26
	subsec_val += curr_ss;
     e50:	aa 24       	eor	r10, r10
     e52:	bb 24       	eor	r11, r11
     e54:	8e 0c       	add	r8, r14
     e56:	9f 1c       	adc	r9, r15
     e58:	a0 1e       	adc	r10, r16
     e5a:	b1 1e       	adc	r11, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
     e5c:	f1 01       	movw	r30, r2
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	a0 e0       	ldi	r26, 0x00	; 0
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	88 16       	cp	r8, r24
     e68:	99 06       	cpc	r9, r25
     e6a:	aa 06       	cpc	r10, r26
     e6c:	bb 06       	cpc	r11, r27
     e6e:	94 f0       	brlt	.+36     	; 0xe94 <Timebase_UpCounter_SS_Update+0x242>
	  sec_val += 1;
     e70:	08 94       	sec
     e72:	41 1c       	adc	r4, r1
     e74:	51 1c       	adc	r5, r1
     e76:	61 1c       	adc	r6, r1
     e78:	71 1c       	adc	r7, r1
	  subsec_val %= Timebase->Config.UpdateRate;
     e7a:	20 81       	ld	r18, Z
     e7c:	31 81       	ldd	r19, Z+1	; 0x01
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	c5 01       	movw	r24, r10
     e84:	b4 01       	movw	r22, r8
     e86:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
     e8a:	ac 01       	movw	r20, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	da 01       	movw	r26, r20
     e90:	4c 01       	movw	r8, r24
     e92:	5d 01       	movw	r10, r26
int32_t Timebase_UpCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounterSS[window].EndValueSubSec;
}

void Timebase_UpCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSec = value;
     e94:	89 e1       	ldi	r24, 0x19	; 25
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	2d 81       	ldd	r18, Y+5	; 0x05
     e9a:	3e 81       	ldd	r19, Y+6	; 0x06
     e9c:	28 9f       	mul	r18, r24
     e9e:	b0 01       	movw	r22, r0
     ea0:	29 9f       	mul	r18, r25
     ea2:	70 0d       	add	r23, r0
     ea4:	38 9f       	mul	r19, r24
     ea6:	70 0d       	add	r23, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	62 0d       	add	r22, r2
     eac:	73 1d       	adc	r23, r3
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	ab 81       	ldd	r26, Y+3	; 0x03
     eb4:	bc 81       	ldd	r27, Y+4	; 0x04
     eb6:	84 0d       	add	r24, r4
     eb8:	95 1d       	adc	r25, r5
     eba:	a6 1d       	adc	r26, r6
     ebc:	b7 1d       	adc	r27, r7
     ebe:	fb 01       	movw	r30, r22
     ec0:	86 8b       	std	Z+22, r24	; 0x16
     ec2:	97 8b       	std	Z+23, r25	; 0x17
     ec4:	a0 8f       	std	Z+24, r26	; 0x18
     ec6:	b1 8f       	std	Z+25, r27	; 0x19
}

void Timebase_UpCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].EndValueSubSec = value;
     ec8:	db 01       	movw	r26, r22
     eca:	5a 96       	adiw	r26, 0x1a	; 26
     ecc:	8d 92       	st	X+, r8
     ece:	9d 92       	st	X+, r9
     ed0:	ad 92       	st	X+, r10
     ed2:	bc 92       	st	X, r11
     ed4:	5d 97       	sbiw	r26, 0x1d	; 29
	  subsec_val %= Timebase->Config.UpdateRate;
	}
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
     ed6:	5e 96       	adiw	r26, 0x1e	; 30
     ed8:	2d 91       	ld	r18, X+
     eda:	3d 91       	ld	r19, X+
     edc:	4d 91       	ld	r20, X+
     ede:	5c 91       	ld	r21, X
     ee0:	91 97       	sbiw	r26, 0x21	; 33
     ee2:	92 96       	adiw	r26, 0x22	; 34
     ee4:	8d 91       	ld	r24, X+
     ee6:	9d 91       	ld	r25, X+
     ee8:	0d 90       	ld	r0, X+
     eea:	bc 91       	ld	r27, X
     eec:	a0 2d       	mov	r26, r0

void Timebase_UpCounter_SS_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounterSS[window].Value = value;
     eee:	28 1b       	sub	r18, r24
     ef0:	39 0b       	sbc	r19, r25
     ef2:	4a 0b       	sbc	r20, r26
     ef4:	5b 0b       	sbc	r21, r27
     ef6:	57 ff       	sbrs	r21, 7
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <Timebase_UpCounter_SS_Update+0x2b0>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	fb 01       	movw	r30, r22
     f04:	26 a3       	std	Z+38, r18	; 0x26
     f06:	37 a3       	std	Z+39, r19	; 0x27
     f08:	40 a7       	std	Z+40, r20	; 0x28
     f0a:	51 a7       	std	Z+41, r21	; 0x29
	sec_val += curr_s;
	Timebase_UpCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_UpCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_UpCounter_SS_Set_Value(window, Timebase_UpCounter_SS_Get_TargetValue(window) - Timebase_UpCounter_SS_Get_TemporaryValue(window));
  }
}
     f0c:	26 96       	adiw	r28, 0x06	; 6
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
     f28:	bf 90       	pop	r11
     f2a:	af 90       	pop	r10
     f2c:	9f 90       	pop	r9
     f2e:	8f 90       	pop	r8
     f30:	7f 90       	pop	r7
     f32:	6f 90       	pop	r6
     f34:	5f 90       	pop	r5
     f36:	4f 90       	pop	r4
     f38:	3f 90       	pop	r3
     f3a:	2f 90       	pop	r2
     f3c:	08 95       	ret

00000f3e <Timebase_UpCounter_SS_Expired>:


uint8_t Timebase_UpCounter_SS_Expired(uint8_t window){
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	e0 91 43 01 	lds	r30, 0x0143
     f44:	f0 91 44 01 	lds	r31, 0x0144
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	29 e1       	ldi	r18, 0x19	; 25
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	bc 01       	movw	r22, r24
     f50:	62 9f       	mul	r22, r18
     f52:	c0 01       	movw	r24, r0
     f54:	63 9f       	mul	r22, r19
     f56:	90 0d       	add	r25, r0
     f58:	72 9f       	mul	r23, r18
     f5a:	90 0d       	add	r25, r0
     f5c:	11 24       	eor	r1, r1
     f5e:	e8 0f       	add	r30, r24
     f60:	f9 1f       	adc	r31, r25
     f62:	85 89       	ldd	r24, Z+21	; 0x15
     f64:	86 95       	lsr	r24
     f66:	8f 70       	andi	r24, 0x0F	; 15
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	09 f4       	brne	.+2      	; 0xf6e <Timebase_UpCounter_SS_Expired+0x30>
     f6c:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     f6e:	84 2f       	mov	r24, r20
     f70:	08 95       	ret

00000f72 <Timebase_UpCounter_SS_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Expired_Event(uint8_t window){
     f72:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
     f74:	e0 91 43 01 	lds	r30, 0x0143
     f78:	f0 91 44 01 	lds	r31, 0x0144
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	89 e1       	ldi	r24, 0x19	; 25
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	bc 01       	movw	r22, r24
     f86:	26 9f       	mul	r18, r22
     f88:	c0 01       	movw	r24, r0
     f8a:	27 9f       	mul	r18, r23
     f8c:	90 0d       	add	r25, r0
     f8e:	36 9f       	mul	r19, r22
     f90:	90 0d       	add	r25, r0
     f92:	11 24       	eor	r1, r1
     f94:	e8 0f       	add	r30, r24
     f96:	f9 1f       	adc	r31, r25
     f98:	85 89       	ldd	r24, Z+21	; 0x15
     f9a:	86 95       	lsr	r24
     f9c:	8f 70       	andi	r24, 0x0F	; 15
     f9e:	84 30       	cpi	r24, 0x04	; 4
     fa0:	11 f0       	breq	.+4      	; 0xfa6 <Timebase_UpCounter_SS_Expired_Event+0x34>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	08 95       	ret
  Timebase_UpCounter_SS_Set_PeriodValue(window, 0);
  Timebase_UpCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_SS_Reset( window );
     fa6:	84 2f       	mov	r24, r20
     fa8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Timebase_UpCounter_SS_Reset>
     fac:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
     fae:	08 95       	ret

00000fb0 <Timebase_UpCounter_SS_Set_Period_Value_Securely>:
void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
     fb0:	e0 91 43 01 	lds	r30, 0x0143
     fb4:	f0 91 44 01 	lds	r31, 0x0144
     fb8:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
     fba:	29 e1       	ldi	r18, 0x19	; 25
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	dc 01       	movw	r26, r24
     fc0:	a2 9f       	mul	r26, r18
     fc2:	c0 01       	movw	r24, r0
     fc4:	a3 9f       	mul	r26, r19
     fc6:	90 0d       	add	r25, r0
     fc8:	b2 9f       	mul	r27, r18
     fca:	90 0d       	add	r25, r0
     fcc:	11 24       	eor	r1, r1
     fce:	e8 0f       	add	r30, r24
     fd0:	f9 1f       	adc	r31, r25
     fd2:	85 89       	ldd	r24, Z+21	; 0x15
     fd4:	80 fd       	sbrc	r24, 0
     fd6:	0f c0       	rjmp	.+30     	; 0xff6 <Timebase_UpCounter_SS_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
}

void Timebase_UpCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounterSS[window].PeriodValue = value;
     fd8:	86 a1       	ldd	r24, Z+38	; 0x26
     fda:	97 a1       	ldd	r25, Z+39	; 0x27
     fdc:	a0 a5       	ldd	r26, Z+40	; 0x28
     fde:	b1 a5       	ldd	r27, Z+41	; 0x29
     fe0:	84 0f       	add	r24, r20
     fe2:	95 1f       	adc	r25, r21
     fe4:	a6 1f       	adc	r26, r22
     fe6:	b7 1f       	adc	r27, r23
     fe8:	82 a7       	std	Z+42, r24	; 0x2a
     fea:	93 a7       	std	Z+43, r25	; 0x2b
     fec:	a4 a7       	std	Z+44, r26	; 0x2c
     fee:	b5 a7       	std	Z+45, r27	; 0x2d
uint8_t Timebase_UpCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounterSS[window].Status.PeriodFlag;
}

void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
     ff0:	85 89       	ldd	r24, Z+21	; 0x15
     ff2:	81 60       	ori	r24, 0x01	; 1
     ff4:	85 8b       	std	Z+21, r24	; 0x15
     ff6:	08 95       	ret

00000ff8 <Timebase_UpCounter_SS_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
     ff8:	e0 91 43 01 	lds	r30, 0x0143
     ffc:	f0 91 44 01 	lds	r31, 0x0144
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	29 e1       	ldi	r18, 0x19	; 25
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	ac 01       	movw	r20, r24
    1008:	42 9f       	mul	r20, r18
    100a:	c0 01       	movw	r24, r0
    100c:	43 9f       	mul	r20, r19
    100e:	90 0d       	add	r25, r0
    1010:	52 9f       	mul	r21, r18
    1012:	90 0d       	add	r25, r0
    1014:	11 24       	eor	r1, r1
    1016:	e8 0f       	add	r30, r24
    1018:	f9 1f       	adc	r31, r25
    101a:	22 a5       	ldd	r18, Z+42	; 0x2a
    101c:	33 a5       	ldd	r19, Z+43	; 0x2b
    101e:	44 a5       	ldd	r20, Z+44	; 0x2c
    1020:	55 a5       	ldd	r21, Z+45	; 0x2d
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1022:	86 a1       	ldd	r24, Z+38	; 0x26
    1024:	97 a1       	ldd	r25, Z+39	; 0x27
    1026:	a0 a5       	ldd	r26, Z+40	; 0x28
    1028:	b1 a5       	ldd	r27, Z+41	; 0x29
    102a:	28 1b       	sub	r18, r24
    102c:	39 0b       	sbc	r19, r25
    102e:	4a 0b       	sbc	r20, r26
    1030:	5b 0b       	sbc	r21, r27
    1032:	57 ff       	sbrs	r21, 7
    1034:	04 c0       	rjmp	.+8      	; 0x103e <Timebase_UpCounter_SS_Get_Remaining_Period_Value+0x46>
    1036:	20 e0       	ldi	r18, 0x00	; 0
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	40 e0       	ldi	r20, 0x00	; 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    103e:	b9 01       	movw	r22, r18
    1040:	ca 01       	movw	r24, r20
    1042:	08 95       	ret

00001044 <Timebase_UpCounter_SS_Period_Value_Expired>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
  }
  Timebase->UpCounterSS[window].Temporary = value;
}

int32_t Timebase_UpCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounterSS[window].PeriodValue;
    1048:	c0 91 43 01 	lds	r28, 0x0143
    104c:	d0 91 44 01 	lds	r29, 0x0144
    1050:	68 2f       	mov	r22, r24
    1052:	70 e0       	ldi	r23, 0x00	; 0
    1054:	89 e1       	ldi	r24, 0x19	; 25
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	68 9f       	mul	r22, r24
    105a:	f0 01       	movw	r30, r0
    105c:	69 9f       	mul	r22, r25
    105e:	f0 0d       	add	r31, r0
    1060:	78 9f       	mul	r23, r24
    1062:	f0 0d       	add	r31, r0
    1064:	11 24       	eor	r1, r1
    1066:	ec 0f       	add	r30, r28
    1068:	fd 1f       	adc	r31, r29
    106a:	22 a5       	ldd	r18, Z+42	; 0x2a
    106c:	33 a5       	ldd	r19, Z+43	; 0x2b
    106e:	44 a5       	ldd	r20, Z+44	; 0x2c
    1070:	55 a5       	ldd	r21, Z+45	; 0x2d
  }
}

int32_t Timebase_UpCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_SS_Get_PeriodValue( window );
  temp -= Timebase_UpCounter_SS_Get_Value( window );
    1072:	86 a1       	ldd	r24, Z+38	; 0x26
    1074:	97 a1       	ldd	r25, Z+39	; 0x27
    1076:	a0 a5       	ldd	r26, Z+40	; 0x28
    1078:	b1 a5       	ldd	r27, Z+41	; 0x29
    107a:	28 1b       	sub	r18, r24
    107c:	39 0b       	sbc	r19, r25
    107e:	4a 0b       	sbc	r20, r26
    1080:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1082:	57 fd       	sbrc	r21, 7
    1084:	07 c0       	rjmp	.+14     	; 0x1094 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1086:	21 15       	cp	r18, r1
    1088:	31 05       	cpc	r19, r1
    108a:	41 05       	cpc	r20, r1
    108c:	51 05       	cpc	r21, r1
    108e:	11 f0       	breq	.+4      	; 0x1094 <Timebase_UpCounter_SS_Period_Value_Expired+0x50>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	12 c0       	rjmp	.+36     	; 0x10b8 <Timebase_UpCounter_SS_Period_Value_Expired+0x74>
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	89 e1       	ldi	r24, 0x19	; 25
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	ac 01       	movw	r20, r24
    109c:	64 9f       	mul	r22, r20
    109e:	c0 01       	movw	r24, r0
    10a0:	65 9f       	mul	r22, r21
    10a2:	90 0d       	add	r25, r0
    10a4:	74 9f       	mul	r23, r20
    10a6:	90 0d       	add	r25, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	c8 0f       	add	r28, r24
    10ac:	d9 1f       	adc	r29, r25
    10ae:	8d 89       	ldd	r24, Y+21	; 0x15
    10b0:	80 ff       	sbrs	r24, 0
    10b2:	21 e0       	ldi	r18, 0x01	; 1
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    10b8:	82 2f       	mov	r24, r18
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <Timebase_UpCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_SS_Period_Value_Expired_Event(uint8_t window){
    10c0:	1f 93       	push	r17
    10c2:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    10c4:	0e 94 22 08 	call	0x1044	; 0x1044 <Timebase_UpCounter_SS_Period_Value_Expired>
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	11 f0       	breq	.+4      	; 0x10d0 <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x10>
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <Timebase_UpCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    10d0:	e0 91 43 01 	lds	r30, 0x0143
    10d4:	f0 91 44 01 	lds	r31, 0x0144
    10d8:	21 2f       	mov	r18, r17
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	89 e1       	ldi	r24, 0x19	; 25
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	ac 01       	movw	r20, r24
    10e2:	24 9f       	mul	r18, r20
    10e4:	c0 01       	movw	r24, r0
    10e6:	25 9f       	mul	r18, r21
    10e8:	90 0d       	add	r25, r0
    10ea:	34 9f       	mul	r19, r20
    10ec:	90 0d       	add	r25, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	e8 0f       	add	r30, r24
    10f2:	f9 1f       	adc	r31, r25
    10f4:	85 89       	ldd	r24, Z+21	; 0x15
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	85 8b       	std	Z+21, r24	; 0x15
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    10fc:	1f 91       	pop	r17
    10fe:	08 95       	ret

00001100 <Timebase_UpCounter_SS_Update_All>:

void Timebase_UpCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Update(i);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	0e 94 29 06 	call	0xc52	; 0xc52 <Timebase_UpCounter_SS_Update>
  }
}
    1106:	08 95       	ret

00001108 <Timebase_UpCounter_SS_Reset_All>:

void Timebase_UpCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_SS_Reset(i);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Timebase_UpCounter_SS_Reset>
  }
}
    110e:	08 95       	ret

00001110 <Timebase_UpCounter_Get_Status>:


/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
    1110:	e0 91 43 01 	lds	r30, 0x0143
    1114:	f0 91 44 01 	lds	r31, 0x0144
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	25 e1       	ldi	r18, 0x15	; 21
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	ac 01       	movw	r20, r24
    1120:	42 9f       	mul	r20, r18
    1122:	c0 01       	movw	r24, r0
    1124:	43 9f       	mul	r20, r19
    1126:	90 0d       	add	r25, r0
    1128:	52 9f       	mul	r21, r18
    112a:	90 0d       	add	r25, r0
    112c:	11 24       	eor	r1, r1
    112e:	e8 0f       	add	r30, r24
    1130:	f9 1f       	adc	r31, r25
    1132:	86 a5       	ldd	r24, Z+46	; 0x2e
    1134:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
    1136:	8f 70       	andi	r24, 0x0F	; 15
    1138:	08 95       	ret

0000113a <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    113a:	e0 91 43 01 	lds	r30, 0x0143
    113e:	f0 91 44 01 	lds	r31, 0x0144
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	25 e1       	ldi	r18, 0x15	; 21
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	ac 01       	movw	r20, r24
    114a:	42 9f       	mul	r20, r18
    114c:	c0 01       	movw	r24, r0
    114e:	43 9f       	mul	r20, r19
    1150:	90 0d       	add	r25, r0
    1152:	52 9f       	mul	r21, r18
    1154:	90 0d       	add	r25, r0
    1156:	11 24       	eor	r1, r1
    1158:	e8 0f       	add	r30, r24
    115a:	f9 1f       	adc	r31, r25
    115c:	6f 70       	andi	r22, 0x0F	; 15
    115e:	66 0f       	add	r22, r22
    1160:	86 a5       	ldd	r24, Z+46	; 0x2e
    1162:	81 7e       	andi	r24, 0xE1	; 225
    1164:	86 2b       	or	r24, r22
    1166:	86 a7       	std	Z+46, r24	; 0x2e
}
    1168:	08 95       	ret

0000116a <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
    116a:	e0 91 43 01 	lds	r30, 0x0143
    116e:	f0 91 44 01 	lds	r31, 0x0144
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	25 e1       	ldi	r18, 0x15	; 21
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	ac 01       	movw	r20, r24
    117a:	42 9f       	mul	r20, r18
    117c:	c0 01       	movw	r24, r0
    117e:	43 9f       	mul	r20, r19
    1180:	90 0d       	add	r25, r0
    1182:	52 9f       	mul	r21, r18
    1184:	90 0d       	add	r25, r0
    1186:	11 24       	eor	r1, r1
    1188:	e8 0f       	add	r30, r24
    118a:	f9 1f       	adc	r31, r25
    118c:	df 01       	movw	r26, r30
    118e:	db 96       	adiw	r26, 0x3b	; 59
    1190:	63 ad       	ldd	r22, Z+59	; 0x3b
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	7c 91       	ld	r23, X
    1196:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Value;
}
    1198:	12 96       	adiw	r26, 0x02	; 2
    119a:	8c 91       	ld	r24, X
    119c:	12 97       	sbiw	r26, 0x02	; 2
    119e:	13 96       	adiw	r26, 0x03	; 3
    11a0:	9c 91       	ld	r25, X
    11a2:	08 95       	ret

000011a4 <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    11a8:	c0 91 43 01 	lds	r28, 0x0143
    11ac:	d0 91 44 01 	lds	r29, 0x0144
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	25 e1       	ldi	r18, 0x15	; 21
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	e2 9f       	mul	r30, r18
    11ba:	c0 01       	movw	r24, r0
    11bc:	e3 9f       	mul	r30, r19
    11be:	90 0d       	add	r25, r0
    11c0:	f2 9f       	mul	r31, r18
    11c2:	90 0d       	add	r25, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	c8 0f       	add	r28, r24
    11c8:	d9 1f       	adc	r29, r25
    11ca:	ca 01       	movw	r24, r20
    11cc:	db 01       	movw	r26, r22
    11ce:	b7 ff       	sbrs	r27, 7
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <Timebase_UpCounter_Set_Value+0x36>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	a0 e0       	ldi	r26, 0x00	; 0
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	8b af       	std	Y+59, r24	; 0x3b
    11dc:	9c af       	std	Y+60, r25	; 0x3c
    11de:	ad af       	std	Y+61, r26	; 0x3d
    11e0:	be af       	std	Y+62, r27	; 0x3e
}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <Timebase_UpCounter_Get_EndValueSec>:

int32_t Timebase_UpCounter_Get_EndValueSec(uint8_t window){
    11e8:	e0 91 43 01 	lds	r30, 0x0143
    11ec:	f0 91 44 01 	lds	r31, 0x0144
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	25 e1       	ldi	r18, 0x15	; 21
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	ac 01       	movw	r20, r24
    11f8:	42 9f       	mul	r20, r18
    11fa:	c0 01       	movw	r24, r0
    11fc:	43 9f       	mul	r20, r19
    11fe:	90 0d       	add	r25, r0
    1200:	52 9f       	mul	r21, r18
    1202:	90 0d       	add	r25, r0
    1204:	11 24       	eor	r1, r1
    1206:	e8 0f       	add	r30, r24
    1208:	f9 1f       	adc	r31, r25
    120a:	df 01       	movw	r26, r30
    120c:	9f 96       	adiw	r26, 0x2f	; 47
    120e:	67 a5       	ldd	r22, Z+47	; 0x2f
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	7c 91       	ld	r23, X
    1214:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1216:	12 96       	adiw	r26, 0x02	; 2
    1218:	8c 91       	ld	r24, X
    121a:	12 97       	sbiw	r26, 0x02	; 2
    121c:	13 96       	adiw	r26, 0x03	; 3
    121e:	9c 91       	ld	r25, X
    1220:	08 95       	ret

00001222 <Timebase_UpCounter_Get_EndValueSubSec>:

int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
    1222:	e0 91 43 01 	lds	r30, 0x0143
    1226:	f0 91 44 01 	lds	r31, 0x0144
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	25 e1       	ldi	r18, 0x15	; 21
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	ac 01       	movw	r20, r24
    1232:	42 9f       	mul	r20, r18
    1234:	c0 01       	movw	r24, r0
    1236:	43 9f       	mul	r20, r19
    1238:	90 0d       	add	r25, r0
    123a:	52 9f       	mul	r21, r18
    123c:	90 0d       	add	r25, r0
    123e:	11 24       	eor	r1, r1
    1240:	e8 0f       	add	r30, r24
    1242:	f9 1f       	adc	r31, r25
    1244:	df 01       	movw	r26, r30
    1246:	9f 96       	adiw	r26, 0x2f	; 47
    1248:	67 a5       	ldd	r22, Z+47	; 0x2f
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	7c 91       	ld	r23, X
    124e:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
    1250:	12 96       	adiw	r26, 0x02	; 2
    1252:	8c 91       	ld	r24, X
    1254:	12 97       	sbiw	r26, 0x02	; 2
    1256:	13 96       	adiw	r26, 0x03	; 3
    1258:	9c 91       	ld	r25, X
    125a:	08 95       	ret

0000125c <Timebase_UpCounter_Set_EndValueSec>:

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    125c:	e0 91 43 01 	lds	r30, 0x0143
    1260:	f0 91 44 01 	lds	r31, 0x0144
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	25 e1       	ldi	r18, 0x15	; 21
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	dc 01       	movw	r26, r24
    126c:	a2 9f       	mul	r26, r18
    126e:	c0 01       	movw	r24, r0
    1270:	a3 9f       	mul	r26, r19
    1272:	90 0d       	add	r25, r0
    1274:	b2 9f       	mul	r27, r18
    1276:	90 0d       	add	r25, r0
    1278:	11 24       	eor	r1, r1
    127a:	e8 0f       	add	r30, r24
    127c:	f9 1f       	adc	r31, r25
    127e:	47 a7       	std	Z+47, r20	; 0x2f
    1280:	50 ab       	std	Z+48, r21	; 0x30
    1282:	61 ab       	std	Z+49, r22	; 0x31
    1284:	72 ab       	std	Z+50, r23	; 0x32
}
    1286:	08 95       	ret

00001288 <Timebase_UpCounter_Set_EndValueSubSec>:

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1288:	e0 91 43 01 	lds	r30, 0x0143
    128c:	f0 91 44 01 	lds	r31, 0x0144
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	25 e1       	ldi	r18, 0x15	; 21
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	dc 01       	movw	r26, r24
    1298:	a2 9f       	mul	r26, r18
    129a:	c0 01       	movw	r24, r0
    129c:	a3 9f       	mul	r26, r19
    129e:	90 0d       	add	r25, r0
    12a0:	b2 9f       	mul	r27, r18
    12a2:	90 0d       	add	r25, r0
    12a4:	11 24       	eor	r1, r1
    12a6:	e8 0f       	add	r30, r24
    12a8:	f9 1f       	adc	r31, r25
    12aa:	47 a7       	std	Z+47, r20	; 0x2f
    12ac:	50 ab       	std	Z+48, r21	; 0x30
    12ae:	61 ab       	std	Z+49, r22	; 0x31
    12b0:	72 ab       	std	Z+50, r23	; 0x32
}
    12b2:	08 95       	ret

000012b4 <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
    12b4:	e0 91 43 01 	lds	r30, 0x0143
    12b8:	f0 91 44 01 	lds	r31, 0x0144
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	25 e1       	ldi	r18, 0x15	; 21
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	ac 01       	movw	r20, r24
    12c4:	42 9f       	mul	r20, r18
    12c6:	c0 01       	movw	r24, r0
    12c8:	43 9f       	mul	r20, r19
    12ca:	90 0d       	add	r25, r0
    12cc:	52 9f       	mul	r21, r18
    12ce:	90 0d       	add	r25, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	e8 0f       	add	r30, r24
    12d4:	f9 1f       	adc	r31, r25
    12d6:	df 01       	movw	r26, r30
    12d8:	d3 96       	adiw	r26, 0x33	; 51
    12da:	63 a9       	ldd	r22, Z+51	; 0x33
    12dc:	11 96       	adiw	r26, 0x01	; 1
    12de:	7c 91       	ld	r23, X
    12e0:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
    12e2:	12 96       	adiw	r26, 0x02	; 2
    12e4:	8c 91       	ld	r24, X
    12e6:	12 97       	sbiw	r26, 0x02	; 2
    12e8:	13 96       	adiw	r26, 0x03	; 3
    12ea:	9c 91       	ld	r25, X
    12ec:	08 95       	ret

000012ee <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    12ee:	e0 91 43 01 	lds	r30, 0x0143
    12f2:	f0 91 44 01 	lds	r31, 0x0144
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	25 e1       	ldi	r18, 0x15	; 21
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	dc 01       	movw	r26, r24
    12fe:	a2 9f       	mul	r26, r18
    1300:	c0 01       	movw	r24, r0
    1302:	a3 9f       	mul	r26, r19
    1304:	90 0d       	add	r25, r0
    1306:	b2 9f       	mul	r27, r18
    1308:	90 0d       	add	r25, r0
    130a:	11 24       	eor	r1, r1
    130c:	e8 0f       	add	r30, r24
    130e:	f9 1f       	adc	r31, r25
    1310:	43 ab       	std	Z+51, r20	; 0x33
    1312:	54 ab       	std	Z+52, r21	; 0x34
    1314:	65 ab       	std	Z+53, r22	; 0x35
    1316:	76 ab       	std	Z+54, r23	; 0x36
}
    1318:	08 95       	ret

0000131a <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
    131a:	e0 91 43 01 	lds	r30, 0x0143
    131e:	f0 91 44 01 	lds	r31, 0x0144
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	25 e1       	ldi	r18, 0x15	; 21
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	ac 01       	movw	r20, r24
    132a:	42 9f       	mul	r20, r18
    132c:	c0 01       	movw	r24, r0
    132e:	43 9f       	mul	r20, r19
    1330:	90 0d       	add	r25, r0
    1332:	52 9f       	mul	r21, r18
    1334:	90 0d       	add	r25, r0
    1336:	11 24       	eor	r1, r1
    1338:	e8 0f       	add	r30, r24
    133a:	f9 1f       	adc	r31, r25
    133c:	df 01       	movw	r26, r30
    133e:	d7 96       	adiw	r26, 0x37	; 55
    1340:	67 a9       	ldd	r22, Z+55	; 0x37
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	7c 91       	ld	r23, X
    1346:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
    1348:	12 96       	adiw	r26, 0x02	; 2
    134a:	8c 91       	ld	r24, X
    134c:	12 97       	sbiw	r26, 0x02	; 2
    134e:	13 96       	adiw	r26, 0x03	; 3
    1350:	9c 91       	ld	r25, X
    1352:	08 95       	ret

00001354 <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1358:	c0 91 43 01 	lds	r28, 0x0143
    135c:	d0 91 44 01 	lds	r29, 0x0144
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	25 e1       	ldi	r18, 0x15	; 21
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	fc 01       	movw	r30, r24
    1368:	e2 9f       	mul	r30, r18
    136a:	c0 01       	movw	r24, r0
    136c:	e3 9f       	mul	r30, r19
    136e:	90 0d       	add	r25, r0
    1370:	f2 9f       	mul	r31, r18
    1372:	90 0d       	add	r25, r0
    1374:	11 24       	eor	r1, r1
    1376:	c8 0f       	add	r28, r24
    1378:	d9 1f       	adc	r29, r25
    137a:	ca 01       	movw	r24, r20
    137c:	db 01       	movw	r26, r22
    137e:	b7 ff       	sbrs	r27, 7
    1380:	04 c0       	rjmp	.+8      	; 0x138a <Timebase_UpCounter_Set_TemporaryValue+0x36>
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	8f ab       	std	Y+55, r24	; 0x37
    138c:	98 af       	std	Y+56, r25	; 0x38
    138e:	a9 af       	std	Y+57, r26	; 0x39
    1390:	ba af       	std	Y+58, r27	; 0x3a
}
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	08 95       	ret

00001398 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
    1398:	e0 91 43 01 	lds	r30, 0x0143
    139c:	f0 91 44 01 	lds	r31, 0x0144
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	25 e1       	ldi	r18, 0x15	; 21
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	ac 01       	movw	r20, r24
    13a8:	42 9f       	mul	r20, r18
    13aa:	c0 01       	movw	r24, r0
    13ac:	43 9f       	mul	r20, r19
    13ae:	90 0d       	add	r25, r0
    13b0:	52 9f       	mul	r21, r18
    13b2:	90 0d       	add	r25, r0
    13b4:	11 24       	eor	r1, r1
    13b6:	e8 0f       	add	r30, r24
    13b8:	f9 1f       	adc	r31, r25
    13ba:	ff 96       	adiw	r30, 0x3f	; 63
    13bc:	60 81       	ld	r22, Z
    13be:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->UpCounter[window].PeriodValue;
}
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	08 95       	ret

000013c6 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    13c6:	e0 91 43 01 	lds	r30, 0x0143
    13ca:	f0 91 44 01 	lds	r31, 0x0144
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	25 e1       	ldi	r18, 0x15	; 21
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	dc 01       	movw	r26, r24
    13d6:	a2 9f       	mul	r26, r18
    13d8:	c0 01       	movw	r24, r0
    13da:	a3 9f       	mul	r26, r19
    13dc:	90 0d       	add	r25, r0
    13de:	b2 9f       	mul	r27, r18
    13e0:	90 0d       	add	r25, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	e8 0f       	add	r30, r24
    13e6:	f9 1f       	adc	r31, r25
    13e8:	ff 96       	adiw	r30, 0x3f	; 63
    13ea:	40 83       	st	Z, r20
    13ec:	51 83       	std	Z+1, r21	; 0x01
    13ee:	62 83       	std	Z+2, r22	; 0x02
    13f0:	73 83       	std	Z+3, r23	; 0x03
}
    13f2:	08 95       	ret

000013f4 <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
    13f4:	e0 91 43 01 	lds	r30, 0x0143
    13f8:	f0 91 44 01 	lds	r31, 0x0144
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	25 e1       	ldi	r18, 0x15	; 21
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	ac 01       	movw	r20, r24
    1404:	42 9f       	mul	r20, r18
    1406:	c0 01       	movw	r24, r0
    1408:	43 9f       	mul	r20, r19
    140a:	90 0d       	add	r25, r0
    140c:	52 9f       	mul	r21, r18
    140e:	90 0d       	add	r25, r0
    1410:	11 24       	eor	r1, r1
    1412:	e8 0f       	add	r30, r24
    1414:	f9 1f       	adc	r31, r25
    1416:	86 a5       	ldd	r24, Z+46	; 0x2e
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
    1418:	81 70       	andi	r24, 0x01	; 1
    141a:	08 95       	ret

0000141c <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    141c:	e0 91 43 01 	lds	r30, 0x0143
    1420:	f0 91 44 01 	lds	r31, 0x0144
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	25 e1       	ldi	r18, 0x15	; 21
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	ac 01       	movw	r20, r24
    142c:	42 9f       	mul	r20, r18
    142e:	c0 01       	movw	r24, r0
    1430:	43 9f       	mul	r20, r19
    1432:	90 0d       	add	r25, r0
    1434:	52 9f       	mul	r21, r18
    1436:	90 0d       	add	r25, r0
    1438:	11 24       	eor	r1, r1
    143a:	e8 0f       	add	r30, r24
    143c:	f9 1f       	adc	r31, r25
    143e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1440:	81 60       	ori	r24, 0x01	; 1
    1442:	86 a7       	std	Z+46, r24	; 0x2e
}
    1444:	08 95       	ret

00001446 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1446:	e0 91 43 01 	lds	r30, 0x0143
    144a:	f0 91 44 01 	lds	r31, 0x0144
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	25 e1       	ldi	r18, 0x15	; 21
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	ac 01       	movw	r20, r24
    1456:	42 9f       	mul	r20, r18
    1458:	c0 01       	movw	r24, r0
    145a:	43 9f       	mul	r20, r19
    145c:	90 0d       	add	r25, r0
    145e:	52 9f       	mul	r21, r18
    1460:	90 0d       	add	r25, r0
    1462:	11 24       	eor	r1, r1
    1464:	e8 0f       	add	r30, r24
    1466:	f9 1f       	adc	r31, r25
    1468:	86 a5       	ldd	r24, Z+46	; 0x2e
    146a:	8e 7f       	andi	r24, 0xFE	; 254
    146c:	86 a7       	std	Z+46, r24	; 0x2e
}
    146e:	08 95       	ret

00001470 <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1470:	e0 91 43 01 	lds	r30, 0x0143
    1474:	f0 91 44 01 	lds	r31, 0x0144
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	25 e1       	ldi	r18, 0x15	; 21
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	ac 01       	movw	r20, r24
    1480:	42 9f       	mul	r20, r18
    1482:	c0 01       	movw	r24, r0
    1484:	43 9f       	mul	r20, r19
    1486:	90 0d       	add	r25, r0
    1488:	52 9f       	mul	r21, r18
    148a:	90 0d       	add	r25, r0
    148c:	11 24       	eor	r1, r1
    148e:	e8 0f       	add	r30, r24
    1490:	f9 1f       	adc	r31, r25
    1492:	86 a5       	ldd	r24, Z+46	; 0x2e

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1494:	13 ae       	std	Z+59, r1	; 0x3b
    1496:	14 ae       	std	Z+60, r1	; 0x3c
    1498:	15 ae       	std	Z+61, r1	; 0x3d
    149a:	16 ae       	std	Z+62, r1	; 0x3e
void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    149c:	17 a6       	std	Z+47, r1	; 0x2f
    149e:	10 aa       	std	Z+48, r1	; 0x30
    14a0:	11 aa       	std	Z+49, r1	; 0x31
    14a2:	12 aa       	std	Z+50, r1	; 0x32
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    14a4:	13 aa       	std	Z+51, r1	; 0x33
    14a6:	14 aa       	std	Z+52, r1	; 0x34
    14a8:	15 aa       	std	Z+53, r1	; 0x35
    14aa:	16 aa       	std	Z+54, r1	; 0x36

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    14ac:	17 aa       	std	Z+55, r1	; 0x37
    14ae:	10 ae       	std	Z+56, r1	; 0x38
    14b0:	11 ae       	std	Z+57, r1	; 0x39
    14b2:	12 ae       	std	Z+58, r1	; 0x3a
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    14b4:	ff 96       	adiw	r30, 0x3f	; 63
    14b6:	10 82       	st	Z, r1
    14b8:	11 82       	std	Z+1, r1	; 0x01
    14ba:	12 82       	std	Z+2, r1	; 0x02
    14bc:	13 82       	std	Z+3, r1	; 0x03
    14be:	ff 97       	sbiw	r30, 0x3f	; 63
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    14c0:	80 7e       	andi	r24, 0xE0	; 224
    14c2:	86 a7       	std	Z+46, r24	; 0x2e
  Timebase_UpCounter_Set_EndValueSubSec(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
    14c4:	08 95       	ret

000014c6 <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    14c6:	0e 94 38 0a 	call	0x1470	; 0x1470 <Timebase_UpCounter_Reset>
}
    14ca:	08 95       	ret

000014cc <Timebase_UpCounter_Start>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    14cc:	e0 91 43 01 	lds	r30, 0x0143
    14d0:	f0 91 44 01 	lds	r31, 0x0144
    14d4:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    14d6:	25 e1       	ldi	r18, 0x15	; 21
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	ac 01       	movw	r20, r24
    14dc:	42 9f       	mul	r20, r18
    14de:	c0 01       	movw	r24, r0
    14e0:	43 9f       	mul	r20, r19
    14e2:	90 0d       	add	r25, r0
    14e4:	52 9f       	mul	r21, r18
    14e6:	90 0d       	add	r25, r0
    14e8:	11 24       	eor	r1, r1
    14ea:	e8 0f       	add	r30, r24
    14ec:	f9 1f       	adc	r31, r25
    14ee:	96 a5       	ldd	r25, Z+46	; 0x2e
    14f0:	89 2f       	mov	r24, r25
    14f2:	86 95       	lsr	r24
    14f4:	8f 70       	andi	r24, 0x0F	; 15
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	19 f0       	breq	.+6      	; 0x1500 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    14fa:	91 7e       	andi	r25, 0xE1	; 225
    14fc:	92 60       	ori	r25, 0x02	; 2
    14fe:	96 a7       	std	Z+46, r25	; 0x2e
    1500:	08 95       	ret

00001502 <Timebase_UpCounter_Stop>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1502:	e0 91 43 01 	lds	r30, 0x0143
    1506:	f0 91 44 01 	lds	r31, 0x0144
    150a:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    150c:	25 e1       	ldi	r18, 0x15	; 21
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	ac 01       	movw	r20, r24
    1512:	42 9f       	mul	r20, r18
    1514:	c0 01       	movw	r24, r0
    1516:	43 9f       	mul	r20, r19
    1518:	90 0d       	add	r25, r0
    151a:	52 9f       	mul	r21, r18
    151c:	90 0d       	add	r25, r0
    151e:	11 24       	eor	r1, r1
    1520:	e8 0f       	add	r30, r24
    1522:	f9 1f       	adc	r31, r25
    1524:	96 a5       	ldd	r25, Z+46	; 0x2e
    1526:	89 2f       	mov	r24, r25
    1528:	86 95       	lsr	r24
    152a:	8f 70       	andi	r24, 0x0F	; 15
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	19 f0       	breq	.+6      	; 0x1536 <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    1530:	91 7e       	andi	r25, 0xE1	; 225
    1532:	94 60       	ori	r25, 0x04	; 4
    1534:	96 a7       	std	Z+46, r25	; 0x2e
    1536:	08 95       	ret

00001538 <Timebase_UpCounter_Set_Securely>:

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    1538:	a0 91 43 01 	lds	r26, 0x0143
    153c:	b0 91 44 01 	lds	r27, 0x0144
    1540:	90 e0       	ldi	r25, 0x00	; 0
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  int32_t curr_s;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    1542:	25 e1       	ldi	r18, 0x15	; 21
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	82 9f       	mul	r24, r18
    1548:	f0 01       	movw	r30, r0
    154a:	83 9f       	mul	r24, r19
    154c:	f0 0d       	add	r31, r0
    154e:	92 9f       	mul	r25, r18
    1550:	f0 0d       	add	r31, r0
    1552:	11 24       	eor	r1, r1
    1554:	ea 0f       	add	r30, r26
    1556:	fb 1f       	adc	r31, r27
    1558:	86 a5       	ldd	r24, Z+46	; 0x2e
    155a:	86 95       	lsr	r24
    155c:	8f 70       	andi	r24, 0x0F	; 15
    155e:	19 f5       	brne	.+70     	; 0x15a6 <Timebase_UpCounter_Set_Securely+0x6e>

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1560:	13 ae       	std	Z+59, r1	; 0x3b
    1562:	14 ae       	std	Z+60, r1	; 0x3c
    1564:	15 ae       	std	Z+61, r1	; 0x3d
    1566:	16 ae       	std	Z+62, r1	; 0x3e

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    1568:	17 aa       	std	Z+55, r1	; 0x37
    156a:	10 ae       	std	Z+56, r1	; 0x38
    156c:	11 ae       	std	Z+57, r1	; 0x39
    156e:	12 ae       	std	Z+58, r1	; 0x3a
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
    1570:	43 ab       	std	Z+51, r20	; 0x33
    1572:	54 ab       	std	Z+52, r21	; 0x34
    1574:	65 ab       	std	Z+53, r22	; 0x35
    1576:	76 ab       	std	Z+54, r23	; 0x36
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1578:	19 96       	adiw	r26, 0x09	; 9
    157a:	8d 91       	ld	r24, X+
    157c:	9d 91       	ld	r25, X+
    157e:	0d 90       	ld	r0, X+
    1580:	bc 91       	ld	r27, X
    1582:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    1584:	84 0f       	add	r24, r20
    1586:	95 1f       	adc	r25, r21
    1588:	a6 1f       	adc	r26, r22
    158a:	b7 1f       	adc	r27, r23
    158c:	87 a7       	std	Z+47, r24	; 0x2f
    158e:	90 ab       	std	Z+48, r25	; 0x30
    1590:	a1 ab       	std	Z+49, r26	; 0x31
    1592:	b2 ab       	std	Z+50, r27	; 0x32
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1594:	96 a5       	ldd	r25, Z+46	; 0x2e
    1596:	89 2f       	mov	r24, r25
    1598:	86 95       	lsr	r24
    159a:	8f 70       	andi	r24, 0x0F	; 15
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	19 f0       	breq	.+6      	; 0x15a6 <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    15a0:	91 7e       	andi	r25, 0xE1	; 225
    15a2:	92 60       	ori	r25, 0x02	; 2
    15a4:	96 a7       	std	Z+46, r25	; 0x2e
    15a6:	08 95       	ret

000015a8 <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValueSec(window, curr_s + value);
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
    15a8:	df 92       	push	r13
    15aa:	ef 92       	push	r14
    15ac:	ff 92       	push	r15
    15ae:	0f 93       	push	r16
    15b0:	1f 93       	push	r17
    15b2:	d8 2e       	mov	r13, r24
    15b4:	7a 01       	movw	r14, r20
    15b6:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
    15b8:	0e 94 38 0a 	call	0x1470	; 0x1470 <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
    15bc:	8d 2d       	mov	r24, r13
    15be:	b8 01       	movw	r22, r16
    15c0:	a7 01       	movw	r20, r14
    15c2:	0e 94 9c 0a 	call	0x1538	; 0x1538 <Timebase_UpCounter_Set_Securely>
} 
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	08 95       	ret

000015d2 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29

/******************************UpCounter Functions Start*****************************/

#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
    15da:	60 91 43 01 	lds	r22, 0x0143
    15de:	70 91 44 01 	lds	r23, 0x0144
    15e2:	08 2f       	mov	r16, r24
    15e4:	10 e0       	ldi	r17, 0x00	; 0
    15e6:	85 e1       	ldi	r24, 0x15	; 21
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 9f       	mul	r16, r24
    15ec:	f0 01       	movw	r30, r0
    15ee:	09 9f       	mul	r16, r25
    15f0:	f0 0d       	add	r31, r0
    15f2:	18 9f       	mul	r17, r24
    15f4:	f0 0d       	add	r31, r0
    15f6:	11 24       	eor	r1, r1
    15f8:	e6 0f       	add	r30, r22
    15fa:	f7 1f       	adc	r31, r23
    15fc:	86 a5       	ldd	r24, Z+46	; 0x2e
    15fe:	86 95       	lsr	r24
    1600:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	09 f0       	breq	.+2      	; 0x1608 <Timebase_UpCounter_Update+0x36>
    1606:	73 c0       	rjmp	.+230    	; 0x16ee <Timebase_UpCounter_Update+0x11c>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1608:	eb 01       	movw	r28, r22
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1610:	bc 85       	ldd	r27, Y+12	; 0x0c

void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    1612:	27 a5       	ldd	r18, Z+47	; 0x2f
    1614:	30 a9       	ldd	r19, Z+48	; 0x30
    1616:	41 a9       	ldd	r20, Z+49	; 0x31
    1618:	52 a9       	ldd	r21, Z+50	; 0x32
    161a:	28 1b       	sub	r18, r24
    161c:	39 0b       	sbc	r19, r25
    161e:	4a 0b       	sbc	r20, r26
    1620:	5b 0b       	sbc	r21, r27
    1622:	57 ff       	sbrs	r21, 7
    1624:	04 c0       	rjmp	.+8      	; 0x162e <Timebase_UpCounter_Update+0x5c>
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e0       	ldi	r20, 0x00	; 0
    162c:	50 e0       	ldi	r21, 0x00	; 0

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    162e:	85 e1       	ldi	r24, 0x15	; 21
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	08 9f       	mul	r16, r24
    1634:	f0 01       	movw	r30, r0
    1636:	09 9f       	mul	r16, r25
    1638:	f0 0d       	add	r31, r0
    163a:	18 9f       	mul	r17, r24
    163c:	f0 0d       	add	r31, r0
    163e:	11 24       	eor	r1, r1
    1640:	e6 0f       	add	r30, r22
    1642:	f7 1f       	adc	r31, r23
    1644:	27 ab       	std	Z+55, r18	; 0x37
    1646:	30 af       	std	Z+56, r19	; 0x38
    1648:	41 af       	std	Z+57, r20	; 0x39
    164a:	52 af       	std	Z+58, r21	; 0x3a
void Timebase_UpCounter_Update(uint8_t window){
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    164c:	83 a9       	ldd	r24, Z+51	; 0x33
    164e:	94 a9       	ldd	r25, Z+52	; 0x34
    1650:	a5 a9       	ldd	r26, Z+53	; 0x35
    1652:	b6 a9       	ldd	r27, Z+54	; 0x36

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    1654:	82 1b       	sub	r24, r18
    1656:	93 0b       	sbc	r25, r19
    1658:	a4 0b       	sbc	r26, r20
    165a:	b5 0b       	sbc	r27, r21
    165c:	b7 ff       	sbrs	r27, 7
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <Timebase_UpCounter_Update+0x96>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	83 af       	std	Z+59, r24	; 0x3b
    166a:	94 af       	std	Z+60, r25	; 0x3c
    166c:	a5 af       	std	Z+61, r26	; 0x3d
    166e:	b6 af       	std	Z+62, r27	; 0x3e
  int32_t curr_s = 0;
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){
	curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValueSec(window) - curr_s );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
    1670:	85 e1       	ldi	r24, 0x15	; 21
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	08 9f       	mul	r16, r24
    1676:	e0 01       	movw	r28, r0
    1678:	09 9f       	mul	r16, r25
    167a:	d0 0d       	add	r29, r0
    167c:	18 9f       	mul	r17, r24
    167e:	d0 0d       	add	r29, r0
    1680:	11 24       	eor	r1, r1
    1682:	c6 0f       	add	r28, r22
    1684:	d7 1f       	adc	r29, r23
    1686:	8f a9       	ldd	r24, Y+55	; 0x37
    1688:	98 ad       	ldd	r25, Y+56	; 0x38
    168a:	a9 ad       	ldd	r26, Y+57	; 0x39
    168c:	ba ad       	ldd	r27, Y+58	; 0x3a
    168e:	18 16       	cp	r1, r24
    1690:	19 06       	cpc	r1, r25
    1692:	1a 06       	cpc	r1, r26
    1694:	1b 06       	cpc	r1, r27
    1696:	0c f4       	brge	.+2      	; 0x169a <Timebase_UpCounter_Update+0xc8>
    1698:	4f c0       	rjmp	.+158    	; 0x1738 <Timebase_UpCounter_Update+0x166>
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    169a:	1f a6       	std	Y+47, r1	; 0x2f
    169c:	18 aa       	std	Y+48, r1	; 0x30
    169e:	19 aa       	std	Y+49, r1	; 0x31
    16a0:	1a aa       	std	Y+50, r1	; 0x32

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Temporary = value;
    16a2:	1f aa       	std	Y+55, r1	; 0x37
    16a4:	18 ae       	std	Y+56, r1	; 0x38
    16a6:	19 ae       	std	Y+57, r1	; 0x39
    16a8:	1a ae       	std	Y+58, r1	; 0x3a
void Timebase_UpCounter_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
}

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
    16aa:	fe 01       	movw	r30, r28
    16ac:	f3 96       	adiw	r30, 0x33	; 51

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    16ae:	2b a9       	ldd	r18, Y+51	; 0x33
    16b0:	31 81       	ldd	r19, Z+1	; 0x01
    16b2:	42 81       	ldd	r20, Z+2	; 0x02
    16b4:	53 81       	ldd	r21, Z+3	; 0x03
    16b6:	c9 01       	movw	r24, r18
    16b8:	da 01       	movw	r26, r20
    16ba:	b7 ff       	sbrs	r27, 7
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <Timebase_UpCounter_Update+0xf4>
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	8b af       	std	Y+59, r24	; 0x3b
    16c8:	9c af       	std	Y+60, r25	; 0x3c
    16ca:	ad af       	std	Y+61, r26	; 0x3d
    16cc:	be af       	std	Y+62, r27	; 0x3e
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
    16ce:	85 e1       	ldi	r24, 0x15	; 21
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	08 9f       	mul	r16, r24
    16d4:	f0 01       	movw	r30, r0
    16d6:	09 9f       	mul	r16, r25
    16d8:	f0 0d       	add	r31, r0
    16da:	18 9f       	mul	r17, r24
    16dc:	f0 0d       	add	r31, r0
    16de:	11 24       	eor	r1, r1
    16e0:	e6 0f       	add	r30, r22
    16e2:	f7 1f       	adc	r31, r23
    16e4:	86 a5       	ldd	r24, Z+46	; 0x2e
    16e6:	81 7e       	andi	r24, 0xE1	; 225
    16e8:	88 60       	ori	r24, 0x08	; 8
    16ea:	86 a7       	std	Z+46, r24	; 0x2e
    16ec:	25 c0       	rjmp	.+74     	; 0x1738 <Timebase_UpCounter_Update+0x166>
      Timebase_UpCounter_Set_EndValueSec(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    16ee:	82 30       	cpi	r24, 0x02	; 2
    16f0:	19 f5       	brne	.+70     	; 0x1738 <Timebase_UpCounter_Update+0x166>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    16f2:	eb 01       	movw	r28, r22
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    16fa:	bc 85       	ldd	r27, Y+12	; 0x0c
int32_t Timebase_UpCounter_Get_EndValueSubSec(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
    16fc:	27 a9       	ldd	r18, Z+55	; 0x37
    16fe:	30 ad       	ldd	r19, Z+56	; 0x38
    1700:	41 ad       	ldd	r20, Z+57	; 0x39
    1702:	52 ad       	ldd	r21, Z+58	; 0x3a
    1704:	82 0f       	add	r24, r18
    1706:	93 1f       	adc	r25, r19
    1708:	a4 1f       	adc	r26, r20
    170a:	b5 1f       	adc	r27, r21
    170c:	87 a7       	std	Z+47, r24	; 0x2f
    170e:	90 ab       	std	Z+48, r25	; 0x30
    1710:	a1 ab       	std	Z+49, r26	; 0x31
    1712:	b2 ab       	std	Z+50, r27	; 0x32
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
    1714:	83 a9       	ldd	r24, Z+51	; 0x33
    1716:	94 a9       	ldd	r25, Z+52	; 0x34
    1718:	a5 a9       	ldd	r26, Z+53	; 0x35
    171a:	b6 a9       	ldd	r27, Z+54	; 0x36

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  if(value < 0){
    value = 0;
  }
  Timebase->UpCounter[window].Value = value;
    171c:	82 1b       	sub	r24, r18
    171e:	93 0b       	sbc	r25, r19
    1720:	a4 0b       	sbc	r26, r20
    1722:	b5 0b       	sbc	r27, r21
    1724:	b7 ff       	sbrs	r27, 7
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <Timebase_UpCounter_Update+0x15e>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e0       	ldi	r26, 0x00	; 0
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	83 af       	std	Z+59, r24	; 0x3b
    1732:	94 af       	std	Z+60, r25	; 0x3c
    1734:	a5 af       	std	Z+61, r26	; 0x3d
    1736:	b6 af       	std	Z+62, r27	; 0x3e
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    curr_s = Timebase_Timer_Get_Seconds();
    Timebase_UpCounter_Set_EndValueSec(window, Timebase_UpCounter_Get_TemporaryValue(window) + curr_s);
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1738:	df 91       	pop	r29
    173a:	cf 91       	pop	r28
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	08 95       	ret

00001742 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1742:	40 e0       	ldi	r20, 0x00	; 0
    1744:	e0 91 43 01 	lds	r30, 0x0143
    1748:	f0 91 44 01 	lds	r31, 0x0144
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	25 e1       	ldi	r18, 0x15	; 21
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	bc 01       	movw	r22, r24
    1754:	62 9f       	mul	r22, r18
    1756:	c0 01       	movw	r24, r0
    1758:	63 9f       	mul	r22, r19
    175a:	90 0d       	add	r25, r0
    175c:	72 9f       	mul	r23, r18
    175e:	90 0d       	add	r25, r0
    1760:	11 24       	eor	r1, r1
    1762:	e8 0f       	add	r30, r24
    1764:	f9 1f       	adc	r31, r25
    1766:	86 a5       	ldd	r24, Z+46	; 0x2e
    1768:	86 95       	lsr	r24
    176a:	8f 70       	andi	r24, 0x0F	; 15
    176c:	84 30       	cpi	r24, 0x04	; 4
    176e:	09 f4       	brne	.+2      	; 0x1772 <Timebase_UpCounter_Expired+0x30>
    1770:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1772:	84 2f       	mov	r24, r20
    1774:	08 95       	ret

00001776 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1776:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1778:	e0 91 43 01 	lds	r30, 0x0143
    177c:	f0 91 44 01 	lds	r31, 0x0144
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	85 e1       	ldi	r24, 0x15	; 21
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	bc 01       	movw	r22, r24
    178a:	26 9f       	mul	r18, r22
    178c:	c0 01       	movw	r24, r0
    178e:	27 9f       	mul	r18, r23
    1790:	90 0d       	add	r25, r0
    1792:	36 9f       	mul	r19, r22
    1794:	90 0d       	add	r25, r0
    1796:	11 24       	eor	r1, r1
    1798:	e8 0f       	add	r30, r24
    179a:	f9 1f       	adc	r31, r25
    179c:	86 a5       	ldd	r24, Z+46	; 0x2e
    179e:	86 95       	lsr	r24
    17a0:	8f 70       	andi	r24, 0x0F	; 15
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	11 f0       	breq	.+4      	; 0x17aa <Timebase_UpCounter_Expired_Event+0x34>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    17aa:	84 2f       	mov	r24, r20
    17ac:	0e 94 38 0a 	call	0x1470	; 0x1470 <Timebase_UpCounter_Reset>
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    17b2:	08 95       	ret

000017b4 <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    17b4:	e0 91 43 01 	lds	r30, 0x0143
    17b8:	f0 91 44 01 	lds	r31, 0x0144
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    17be:	25 e1       	ldi	r18, 0x15	; 21
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	dc 01       	movw	r26, r24
    17c4:	a2 9f       	mul	r26, r18
    17c6:	c0 01       	movw	r24, r0
    17c8:	a3 9f       	mul	r26, r19
    17ca:	90 0d       	add	r25, r0
    17cc:	b2 9f       	mul	r27, r18
    17ce:	90 0d       	add	r25, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	e8 0f       	add	r30, r24
    17d4:	f9 1f       	adc	r31, r25
    17d6:	86 a5       	ldd	r24, Z+46	; 0x2e
    17d8:	80 fd       	sbrc	r24, 0
    17da:	11 c0       	rjmp	.+34     	; 0x17fe <Timebase_UpCounter_Set_Period_Value_Securely+0x4a>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    17dc:	83 ad       	ldd	r24, Z+59	; 0x3b
    17de:	94 ad       	ldd	r25, Z+60	; 0x3c
    17e0:	a5 ad       	ldd	r26, Z+61	; 0x3d
    17e2:	b6 ad       	ldd	r27, Z+62	; 0x3e
    17e4:	84 0f       	add	r24, r20
    17e6:	95 1f       	adc	r25, r21
    17e8:	a6 1f       	adc	r26, r22
    17ea:	b7 1f       	adc	r27, r23
    17ec:	ff 96       	adiw	r30, 0x3f	; 63
    17ee:	80 83       	st	Z, r24
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	a2 83       	std	Z+2, r26	; 0x02
    17f4:	b3 83       	std	Z+3, r27	; 0x03
    17f6:	ff 97       	sbiw	r30, 0x3f	; 63
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    17f8:	86 a5       	ldd	r24, Z+46	; 0x2e
    17fa:	81 60       	ori	r24, 0x01	; 1
    17fc:	86 a7       	std	Z+46, r24	; 0x2e
    17fe:	08 95       	ret

00001800 <Timebase_UpCounter_Get_Remaining_Period_Value>:
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1800:	e0 91 43 01 	lds	r30, 0x0143
    1804:	f0 91 44 01 	lds	r31, 0x0144
    1808:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    180a:	25 e1       	ldi	r18, 0x15	; 21
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	ac 01       	movw	r20, r24
    1810:	42 9f       	mul	r20, r18
    1812:	c0 01       	movw	r24, r0
    1814:	43 9f       	mul	r20, r19
    1816:	90 0d       	add	r25, r0
    1818:	52 9f       	mul	r21, r18
    181a:	90 0d       	add	r25, r0
    181c:	11 24       	eor	r1, r1
    181e:	e8 0f       	add	r30, r24
    1820:	f9 1f       	adc	r31, r25
    1822:	ff 96       	adiw	r30, 0x3f	; 63
    1824:	20 81       	ld	r18, Z
    1826:	31 81       	ldd	r19, Z+1	; 0x01
    1828:	42 81       	ldd	r20, Z+2	; 0x02
    182a:	53 81       	ldd	r21, Z+3	; 0x03
    182c:	ff 97       	sbiw	r30, 0x3f	; 63
    182e:	83 ad       	ldd	r24, Z+59	; 0x3b
    1830:	94 ad       	ldd	r25, Z+60	; 0x3c
    1832:	a5 ad       	ldd	r26, Z+61	; 0x3d
    1834:	b6 ad       	ldd	r27, Z+62	; 0x3e
    1836:	28 1b       	sub	r18, r24
    1838:	39 0b       	sbc	r19, r25
    183a:	4a 0b       	sbc	r20, r26
    183c:	5b 0b       	sbc	r21, r27
    183e:	57 ff       	sbrs	r21, 7
    1840:	04 c0       	rjmp	.+8      	; 0x184a <Timebase_UpCounter_Get_Remaining_Period_Value+0x4a>
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    184a:	b9 01       	movw	r22, r18
    184c:	ca 01       	movw	r24, r20
    184e:	08 95       	ret

00001850 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
  }
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    1854:	c0 91 43 01 	lds	r28, 0x0143
    1858:	d0 91 44 01 	lds	r29, 0x0144
    185c:	68 2f       	mov	r22, r24
    185e:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1860:	85 e1       	ldi	r24, 0x15	; 21
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	68 9f       	mul	r22, r24
    1866:	f0 01       	movw	r30, r0
    1868:	69 9f       	mul	r22, r25
    186a:	f0 0d       	add	r31, r0
    186c:	78 9f       	mul	r23, r24
    186e:	f0 0d       	add	r31, r0
    1870:	11 24       	eor	r1, r1
    1872:	ec 0f       	add	r30, r28
    1874:	fd 1f       	adc	r31, r29
    1876:	ff 96       	adiw	r30, 0x3f	; 63
    1878:	20 81       	ld	r18, Z
    187a:	31 81       	ldd	r19, Z+1	; 0x01
    187c:	42 81       	ldd	r20, Z+2	; 0x02
    187e:	53 81       	ldd	r21, Z+3	; 0x03
    1880:	ff 97       	sbiw	r30, 0x3f	; 63
    1882:	83 ad       	ldd	r24, Z+59	; 0x3b
    1884:	94 ad       	ldd	r25, Z+60	; 0x3c
    1886:	a5 ad       	ldd	r26, Z+61	; 0x3d
    1888:	b6 ad       	ldd	r27, Z+62	; 0x3e
    188a:	28 1b       	sub	r18, r24
    188c:	39 0b       	sbc	r19, r25
    188e:	4a 0b       	sbc	r20, r26
    1890:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1892:	57 fd       	sbrc	r21, 7
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <Timebase_UpCounter_Period_Value_Expired+0x54>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_UpCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    1896:	21 15       	cp	r18, r1
    1898:	31 05       	cpc	r19, r1
    189a:	41 05       	cpc	r20, r1
    189c:	51 05       	cpc	r21, r1
    189e:	11 f0       	breq	.+4      	; 0x18a4 <Timebase_UpCounter_Period_Value_Expired+0x54>
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	12 c0       	rjmp	.+36     	; 0x18c8 <Timebase_UpCounter_Period_Value_Expired+0x78>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	85 e1       	ldi	r24, 0x15	; 21
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	ac 01       	movw	r20, r24
    18ac:	64 9f       	mul	r22, r20
    18ae:	c0 01       	movw	r24, r0
    18b0:	65 9f       	mul	r22, r21
    18b2:	90 0d       	add	r25, r0
    18b4:	74 9f       	mul	r23, r20
    18b6:	90 0d       	add	r25, r0
    18b8:	11 24       	eor	r1, r1
    18ba:	c8 0f       	add	r28, r24
    18bc:	d9 1f       	adc	r29, r25
    18be:	8e a5       	ldd	r24, Y+46	; 0x2e
    18c0:	80 ff       	sbrs	r24, 0
    18c2:	21 e0       	ldi	r18, 0x01	; 1
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    18c8:	82 2f       	mov	r24, r18
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    18d0:	1f 93       	push	r17
    18d2:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    18d4:	0e 94 28 0c 	call	0x1850	; 0x1850 <Timebase_UpCounter_Period_Value_Expired>
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	11 f0       	breq	.+4      	; 0x18e0 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	16 c0       	rjmp	.+44     	; 0x190c <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    18e0:	e0 91 43 01 	lds	r30, 0x0143
    18e4:	f0 91 44 01 	lds	r31, 0x0144
    18e8:	21 2f       	mov	r18, r17
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	85 e1       	ldi	r24, 0x15	; 21
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	ac 01       	movw	r20, r24
    18f2:	24 9f       	mul	r18, r20
    18f4:	c0 01       	movw	r24, r0
    18f6:	25 9f       	mul	r18, r21
    18f8:	90 0d       	add	r25, r0
    18fa:	34 9f       	mul	r19, r20
    18fc:	90 0d       	add	r25, r0
    18fe:	11 24       	eor	r1, r1
    1900:	e8 0f       	add	r30, r24
    1902:	f9 1f       	adc	r31, r25
    1904:	86 a5       	ldd	r24, Z+46	; 0x2e
    1906:	8e 7f       	andi	r24, 0xFE	; 254
    1908:	86 a7       	std	Z+46, r24	; 0x2e
    190a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    190c:	1f 91       	pop	r17
    190e:	08 95       	ret

00001910 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <Timebase_UpCounter_Update>
  }
}
    1916:	08 95       	ret

00001918 <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	0e 94 38 0a 	call	0x1470	; 0x1470 <Timebase_UpCounter_Reset>
  }
}
    191e:	08 95       	ret

00001920 <Timebase_DownCounter_SS_Get_Status>:


/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
    1920:	e0 91 43 01 	lds	r30, 0x0143
    1924:	f0 91 44 01 	lds	r31, 0x0144
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9c 01       	movw	r18, r24
    192c:	44 e0       	ldi	r20, 0x04	; 4
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	4a 95       	dec	r20
    1934:	e1 f7       	brne	.-8      	; 0x192e <Timebase_DownCounter_SS_Get_Status+0xe>
    1936:	28 0f       	add	r18, r24
    1938:	39 1f       	adc	r19, r25
    193a:	e2 0f       	add	r30, r18
    193c:	f3 1f       	adc	r31, r19
    193e:	ed 5b       	subi	r30, 0xBD	; 189
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	80 81       	ld	r24, Z
    1944:	86 95       	lsr	r24
  return Timebase->DownCounterSS[window].Status.Value;
}
    1946:	8f 70       	andi	r24, 0x0F	; 15
    1948:	08 95       	ret

0000194a <Timebase_DownCounter_SS_Set_Status>:

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    194a:	e0 91 43 01 	lds	r30, 0x0143
    194e:	f0 91 44 01 	lds	r31, 0x0144
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	9c 01       	movw	r18, r24
    1956:	54 e0       	ldi	r21, 0x04	; 4
    1958:	22 0f       	add	r18, r18
    195a:	33 1f       	adc	r19, r19
    195c:	5a 95       	dec	r21
    195e:	e1 f7       	brne	.-8      	; 0x1958 <Timebase_DownCounter_SS_Set_Status+0xe>
    1960:	28 0f       	add	r18, r24
    1962:	39 1f       	adc	r19, r25
    1964:	e2 0f       	add	r30, r18
    1966:	f3 1f       	adc	r31, r19
    1968:	ed 5b       	subi	r30, 0xBD	; 189
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	6f 70       	andi	r22, 0x0F	; 15
    196e:	66 0f       	add	r22, r22
    1970:	80 81       	ld	r24, Z
    1972:	81 7e       	andi	r24, 0xE1	; 225
    1974:	86 2b       	or	r24, r22
    1976:	80 83       	st	Z, r24
}
    1978:	08 95       	ret

0000197a <Timebase_DownCounter_SS_Get_Value>:

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
    197a:	e0 91 43 01 	lds	r30, 0x0143
    197e:	f0 91 44 01 	lds	r31, 0x0144
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9c 01       	movw	r18, r24
    1986:	64 e0       	ldi	r22, 0x04	; 4
    1988:	22 0f       	add	r18, r18
    198a:	33 1f       	adc	r19, r19
    198c:	6a 95       	dec	r22
    198e:	e1 f7       	brne	.-8      	; 0x1988 <Timebase_DownCounter_SS_Get_Value+0xe>
    1990:	28 0f       	add	r18, r24
    1992:	39 1f       	adc	r19, r25
    1994:	e2 0f       	add	r30, r18
    1996:	f3 1f       	adc	r31, r19
    1998:	e4 5b       	subi	r30, 0xB4	; 180
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	60 81       	ld	r22, Z
    199e:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].Value;
}
    19a0:	82 81       	ldd	r24, Z+2	; 0x02
    19a2:	93 81       	ldd	r25, Z+3	; 0x03
    19a4:	08 95       	ret

000019a6 <Timebase_DownCounter_SS_Set_Value>:

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    19a6:	e0 91 43 01 	lds	r30, 0x0143
    19aa:	f0 91 44 01 	lds	r31, 0x0144
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 01       	movw	r18, r24
    19b2:	a4 e0       	ldi	r26, 0x04	; 4
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	aa 95       	dec	r26
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <Timebase_DownCounter_SS_Set_Value+0xe>
    19bc:	28 0f       	add	r18, r24
    19be:	39 1f       	adc	r19, r25
    19c0:	e2 0f       	add	r30, r18
    19c2:	f3 1f       	adc	r31, r19
    19c4:	e4 5b       	subi	r30, 0xB4	; 180
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	40 83       	st	Z, r20
    19ca:	51 83       	std	Z+1, r21	; 0x01
    19cc:	62 83       	std	Z+2, r22	; 0x02
    19ce:	73 83       	std	Z+3, r23	; 0x03
}
    19d0:	08 95       	ret

000019d2 <Timebase_DownCounter_SS_Get_EndValueSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSec(uint8_t window){
    19d2:	e0 91 43 01 	lds	r30, 0x0143
    19d6:	f0 91 44 01 	lds	r31, 0x0144
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 01       	movw	r18, r24
    19de:	b4 e0       	ldi	r27, 0x04	; 4
    19e0:	22 0f       	add	r18, r18
    19e2:	33 1f       	adc	r19, r19
    19e4:	ba 95       	dec	r27
    19e6:	e1 f7       	brne	.-8      	; 0x19e0 <Timebase_DownCounter_SS_Get_EndValueSec+0xe>
    19e8:	28 0f       	add	r18, r24
    19ea:	39 1f       	adc	r19, r25
    19ec:	e2 0f       	add	r30, r18
    19ee:	f3 1f       	adc	r31, r19
    19f0:	ec 5b       	subi	r30, 0xBC	; 188
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSec;
}
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	08 95       	ret

000019fe <Timebase_DownCounter_SS_Get_EndValueSubSec>:

int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
    19fe:	e0 91 43 01 	lds	r30, 0x0143
    1a02:	f0 91 44 01 	lds	r31, 0x0144
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9c 01       	movw	r18, r24
    1a0a:	44 e0       	ldi	r20, 0x04	; 4
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	4a 95       	dec	r20
    1a12:	e1 f7       	brne	.-8      	; 0x1a0c <Timebase_DownCounter_SS_Get_EndValueSubSec+0xe>
    1a14:	28 0f       	add	r18, r24
    1a16:	39 1f       	adc	r19, r25
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f3 1f       	adc	r31, r19
    1a1c:	e8 5b       	subi	r30, 0xB8	; 184
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].EndValueSubSec;
}
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	08 95       	ret

00001a2a <Timebase_DownCounter_SS_Set_EndValueSec>:

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1a2a:	e0 91 43 01 	lds	r30, 0x0143
    1a2e:	f0 91 44 01 	lds	r31, 0x0144
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	9c 01       	movw	r18, r24
    1a36:	a4 e0       	ldi	r26, 0x04	; 4
    1a38:	22 0f       	add	r18, r18
    1a3a:	33 1f       	adc	r19, r19
    1a3c:	aa 95       	dec	r26
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <Timebase_DownCounter_SS_Set_EndValueSec+0xe>
    1a40:	28 0f       	add	r18, r24
    1a42:	39 1f       	adc	r19, r25
    1a44:	e2 0f       	add	r30, r18
    1a46:	f3 1f       	adc	r31, r19
    1a48:	ec 5b       	subi	r30, 0xBC	; 188
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	40 83       	st	Z, r20
    1a4e:	51 83       	std	Z+1, r21	; 0x01
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	73 83       	std	Z+3, r23	; 0x03
}
    1a54:	08 95       	ret

00001a56 <Timebase_DownCounter_SS_Set_EndValueSubSec>:

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1a56:	e0 91 43 01 	lds	r30, 0x0143
    1a5a:	f0 91 44 01 	lds	r31, 0x0144
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9c 01       	movw	r18, r24
    1a62:	b4 e0       	ldi	r27, 0x04	; 4
    1a64:	22 0f       	add	r18, r18
    1a66:	33 1f       	adc	r19, r19
    1a68:	ba 95       	dec	r27
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <Timebase_DownCounter_SS_Set_EndValueSubSec+0xe>
    1a6c:	28 0f       	add	r18, r24
    1a6e:	39 1f       	adc	r19, r25
    1a70:	e2 0f       	add	r30, r18
    1a72:	f3 1f       	adc	r31, r19
    1a74:	e8 5b       	subi	r30, 0xB8	; 184
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	40 83       	st	Z, r20
    1a7a:	51 83       	std	Z+1, r21	; 0x01
    1a7c:	62 83       	std	Z+2, r22	; 0x02
    1a7e:	73 83       	std	Z+3, r23	; 0x03
}
    1a80:	08 95       	ret

00001a82 <Timebase_DownCounter_SS_Get_PeriodValue>:


int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
    1a82:	e0 91 43 01 	lds	r30, 0x0143
    1a86:	f0 91 44 01 	lds	r31, 0x0144
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	9c 01       	movw	r18, r24
    1a8e:	44 e0       	ldi	r20, 0x04	; 4
    1a90:	22 0f       	add	r18, r18
    1a92:	33 1f       	adc	r19, r19
    1a94:	4a 95       	dec	r20
    1a96:	e1 f7       	brne	.-8      	; 0x1a90 <Timebase_DownCounter_SS_Get_PeriodValue+0xe>
    1a98:	28 0f       	add	r18, r24
    1a9a:	39 1f       	adc	r19, r25
    1a9c:	e2 0f       	add	r30, r18
    1a9e:	f3 1f       	adc	r31, r19
    1aa0:	e0 5b       	subi	r30, 0xB0	; 176
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounterSS[window].PeriodValue;
}
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	08 95       	ret

00001aae <Timebase_DownCounter_SS_Set_PeriodValue>:

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
    1aae:	e0 91 43 01 	lds	r30, 0x0143
    1ab2:	f0 91 44 01 	lds	r31, 0x0144
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    1aba:	77 ff       	sbrs	r23, 7
    1abc:	11 c0       	rjmp	.+34     	; 0x1ae0 <Timebase_DownCounter_SS_Set_PeriodValue+0x32>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    1abe:	c9 01       	movw	r24, r18
    1ac0:	b4 e0       	ldi	r27, 0x04	; 4
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	ba 95       	dec	r27
    1ac8:	e1 f7       	brne	.-8      	; 0x1ac2 <Timebase_DownCounter_SS_Set_PeriodValue+0x14>
    1aca:	82 0f       	add	r24, r18
    1acc:	93 1f       	adc	r25, r19
    1ace:	e8 0f       	add	r30, r24
    1ad0:	f9 1f       	adc	r31, r25
    1ad2:	e0 5b       	subi	r30, 0xB0	; 176
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	10 82       	st	Z, r1
    1ad8:	11 82       	std	Z+1, r1	; 0x01
    1ada:	12 82       	std	Z+2, r1	; 0x02
    1adc:	13 82       	std	Z+3, r1	; 0x03
    1ade:	08 95       	ret
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    1ae0:	c9 01       	movw	r24, r18
    1ae2:	a4 e0       	ldi	r26, 0x04	; 4
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	aa 95       	dec	r26
    1aea:	e1 f7       	brne	.-8      	; 0x1ae4 <Timebase_DownCounter_SS_Set_PeriodValue+0x36>
    1aec:	82 0f       	add	r24, r18
    1aee:	93 1f       	adc	r25, r19
    1af0:	e8 0f       	add	r30, r24
    1af2:	f9 1f       	adc	r31, r25
    1af4:	e0 5b       	subi	r30, 0xB0	; 176
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	40 83       	st	Z, r20
    1afa:	51 83       	std	Z+1, r21	; 0x01
    1afc:	62 83       	std	Z+2, r22	; 0x02
    1afe:	73 83       	std	Z+3, r23	; 0x03
    1b00:	08 95       	ret

00001b02 <Timebase_DownCounter_SS_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
    1b02:	e0 91 43 01 	lds	r30, 0x0143
    1b06:	f0 91 44 01 	lds	r31, 0x0144
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9c 01       	movw	r18, r24
    1b0e:	44 e0       	ldi	r20, 0x04	; 4
    1b10:	22 0f       	add	r18, r18
    1b12:	33 1f       	adc	r19, r19
    1b14:	4a 95       	dec	r20
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <Timebase_DownCounter_SS_Get_Period_Flag+0xe>
    1b18:	28 0f       	add	r18, r24
    1b1a:	39 1f       	adc	r19, r25
    1b1c:	e2 0f       	add	r30, r18
    1b1e:	f3 1f       	adc	r31, r19
    1b20:	ed 5b       	subi	r30, 0xBD	; 189
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}
    1b26:	81 70       	andi	r24, 0x01	; 1
    1b28:	08 95       	ret

00001b2a <Timebase_DownCounter_SS_Set_Period_Flag>:

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    1b2a:	e0 91 43 01 	lds	r30, 0x0143
    1b2e:	f0 91 44 01 	lds	r31, 0x0144
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	9c 01       	movw	r18, r24
    1b36:	54 e0       	ldi	r21, 0x04	; 4
    1b38:	22 0f       	add	r18, r18
    1b3a:	33 1f       	adc	r19, r19
    1b3c:	5a 95       	dec	r21
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <Timebase_DownCounter_SS_Set_Period_Flag+0xe>
    1b40:	28 0f       	add	r18, r24
    1b42:	39 1f       	adc	r19, r25
    1b44:	e2 0f       	add	r30, r18
    1b46:	f3 1f       	adc	r31, r19
    1b48:	ed 5b       	subi	r30, 0xBD	; 189
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	81 60       	ori	r24, 0x01	; 1
    1b50:	80 83       	st	Z, r24
}
    1b52:	08 95       	ret

00001b54 <Timebase_DownCounter_SS_Clear_Period_Flag>:

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1b54:	e0 91 43 01 	lds	r30, 0x0143
    1b58:	f0 91 44 01 	lds	r31, 0x0144
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	9c 01       	movw	r18, r24
    1b60:	64 e0       	ldi	r22, 0x04	; 4
    1b62:	22 0f       	add	r18, r18
    1b64:	33 1f       	adc	r19, r19
    1b66:	6a 95       	dec	r22
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <Timebase_DownCounter_SS_Clear_Period_Flag+0xe>
    1b6a:	28 0f       	add	r18, r24
    1b6c:	39 1f       	adc	r19, r25
    1b6e:	e2 0f       	add	r30, r18
    1b70:	f3 1f       	adc	r31, r19
    1b72:	ed 5b       	subi	r30, 0xBD	; 189
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	8e 7f       	andi	r24, 0xFE	; 254
    1b7a:	80 83       	st	Z, r24
}
    1b7c:	08 95       	ret

00001b7e <Timebase_DownCounter_SS_Reset>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1b7e:	e0 91 43 01 	lds	r30, 0x0143
    1b82:	f0 91 44 01 	lds	r31, 0x0144
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9c 01       	movw	r18, r24
    1b8a:	74 e0       	ldi	r23, 0x04	; 4
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	7a 95       	dec	r23
    1b92:	e1 f7       	brne	.-8      	; 0x1b8c <Timebase_DownCounter_SS_Reset+0xe>
    1b94:	28 0f       	add	r18, r24
    1b96:	39 1f       	adc	r19, r25
    1b98:	e2 0f       	add	r30, r18
    1b9a:	f3 1f       	adc	r31, r19
    1b9c:	e8 5b       	subi	r30, 0xB8	; 184
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	10 82       	st	Z, r1
    1ba2:	11 82       	std	Z+1, r1	; 0x01
    1ba4:	12 82       	std	Z+2, r1	; 0x02
    1ba6:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1ba8:	12 92       	st	-Z, r1
    1baa:	12 92       	st	-Z, r1
    1bac:	12 92       	st	-Z, r1
    1bae:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1bb0:	38 96       	adiw	r30, 0x08	; 8
    1bb2:	10 82       	st	Z, r1
    1bb4:	11 82       	std	Z+1, r1	; 0x01
    1bb6:	12 82       	std	Z+2, r1	; 0x02
    1bb8:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1bba:	39 97       	sbiw	r30, 0x09	; 9
    1bbc:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1bbe:	80 7e       	andi	r24, 0xE0	; 224
    1bc0:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Set_EndValueSubSec(window, 0);
  Timebase_DownCounter_SS_Set_EndValueSec(window, 0);
  Timebase_DownCounter_SS_Set_Value(window, 0);
  Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 
    1bc2:	08 95       	ret

00001bc4 <Timebase_DownCounter_SS_Clear_All_Flags>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1bc4:	e0 91 43 01 	lds	r30, 0x0143
    1bc8:	f0 91 44 01 	lds	r31, 0x0144
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9c 01       	movw	r18, r24
    1bd0:	a4 e0       	ldi	r26, 0x04	; 4
    1bd2:	22 0f       	add	r18, r18
    1bd4:	33 1f       	adc	r19, r19
    1bd6:	aa 95       	dec	r26
    1bd8:	e1 f7       	brne	.-8      	; 0x1bd2 <Timebase_DownCounter_SS_Clear_All_Flags+0xe>
    1bda:	28 0f       	add	r18, r24
    1bdc:	39 1f       	adc	r19, r25
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	e8 5b       	subi	r30, 0xB8	; 184
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	10 82       	st	Z, r1
    1be8:	11 82       	std	Z+1, r1	; 0x01
    1bea:	12 82       	std	Z+2, r1	; 0x02
    1bec:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1bee:	12 92       	st	-Z, r1
    1bf0:	12 92       	st	-Z, r1
    1bf2:	12 92       	st	-Z, r1
    1bf4:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1bf6:	38 96       	adiw	r30, 0x08	; 8
    1bf8:	10 82       	st	Z, r1
    1bfa:	11 82       	std	Z+1, r1	; 0x01
    1bfc:	12 82       	std	Z+2, r1	; 0x02
    1bfe:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c00:	39 97       	sbiw	r30, 0x09	; 9
    1c02:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1c04:	80 7e       	andi	r24, 0xE0	; 224
    1c06:	80 83       	st	Z, r24
  Timebase_DownCounter_SS_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}
    1c08:	08 95       	ret

00001c0a <Timebase_DownCounter_SS_Start>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1c0a:	e0 91 43 01 	lds	r30, 0x0143
    1c0e:	f0 91 44 01 	lds	r31, 0x0144
    1c12:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1c14:	9c 01       	movw	r18, r24
    1c16:	b4 e0       	ldi	r27, 0x04	; 4
    1c18:	22 0f       	add	r18, r18
    1c1a:	33 1f       	adc	r19, r19
    1c1c:	ba 95       	dec	r27
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <Timebase_DownCounter_SS_Start+0xe>
    1c20:	28 0f       	add	r18, r24
    1c22:	39 1f       	adc	r19, r25
    1c24:	e2 0f       	add	r30, r18
    1c26:	f3 1f       	adc	r31, r19
    1c28:	ed 5b       	subi	r30, 0xBD	; 189
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	90 81       	ld	r25, Z
    1c2e:	89 2f       	mov	r24, r25
    1c30:	86 95       	lsr	r24
    1c32:	8f 70       	andi	r24, 0x0F	; 15
    1c34:	81 30       	cpi	r24, 0x01	; 1
    1c36:	19 f0       	breq	.+6      	; 0x1c3e <Timebase_DownCounter_SS_Start+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c38:	91 7e       	andi	r25, 0xE1	; 225
    1c3a:	92 60       	ori	r25, 0x02	; 2
    1c3c:	90 83       	st	Z, r25
    1c3e:	08 95       	ret

00001c40 <Timebase_DownCounter_SS_Stop>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1c40:	e0 91 43 01 	lds	r30, 0x0143
    1c44:	f0 91 44 01 	lds	r31, 0x0144
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_SS_Stop(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STOPPED){
    1c4a:	9c 01       	movw	r18, r24
    1c4c:	44 e0       	ldi	r20, 0x04	; 4
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	4a 95       	dec	r20
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <Timebase_DownCounter_SS_Stop+0xe>
    1c56:	28 0f       	add	r18, r24
    1c58:	39 1f       	adc	r19, r25
    1c5a:	e2 0f       	add	r30, r18
    1c5c:	f3 1f       	adc	r31, r19
    1c5e:	ed 5b       	subi	r30, 0xBD	; 189
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	90 81       	ld	r25, Z
    1c64:	89 2f       	mov	r24, r25
    1c66:	86 95       	lsr	r24
    1c68:	8f 70       	andi	r24, 0x0F	; 15
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	19 f0       	breq	.+6      	; 0x1c74 <Timebase_DownCounter_SS_Stop+0x34>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1c6e:	91 7e       	andi	r25, 0xE1	; 225
    1c70:	94 60       	ori	r25, 0x04	; 4
    1c72:	90 83       	st	Z, r25
    1c74:	08 95       	ret

00001c76 <Timebase_DownCounter_SS_Set_Securely>:
    Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
    1c76:	2f 92       	push	r2
    1c78:	3f 92       	push	r3
    1c7a:	4f 92       	push	r4
    1c7c:	5f 92       	push	r5
    1c7e:	6f 92       	push	r6
    1c80:	7f 92       	push	r7
    1c82:	8f 92       	push	r8
    1c84:	9f 92       	push	r9
    1c86:	af 92       	push	r10
    1c88:	bf 92       	push	r11
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <Timebase_DownCounter_SS_Set_Securely+0x26>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <Timebase_DownCounter_SS_Set_Securely+0x28>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	4a 01       	movw	r8, r20
    1ca4:	5b 01       	movw	r10, r22

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ca6:	20 91 43 01 	lds	r18, 0x0143
    1caa:	30 91 44 01 	lds	r19, 0x0144
    1cae:	3c 83       	std	Y+4, r19	; 0x04
    1cb0:	2b 83       	std	Y+3, r18	; 0x03
    1cb2:	a8 2f       	mov	r26, r24
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ba 83       	std	Y+2, r27	; 0x02
    1cb8:	a9 83       	std	Y+1, r26	; 0x01
}


void Timebase_DownCounter_SS_Set_Securely(uint8_t window, int32_t value){
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    1cba:	fd 01       	movw	r30, r26
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	6a 95       	dec	r22
    1cc4:	e1 f7       	brne	.-8      	; 0x1cbe <Timebase_DownCounter_SS_Set_Securely+0x48>
    1cc6:	ea 0f       	add	r30, r26
    1cc8:	fb 1f       	adc	r31, r27
    1cca:	e2 0f       	add	r30, r18
    1ccc:	f3 1f       	adc	r31, r19
    1cce:	ed 5b       	subi	r30, 0xBD	; 189
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	80 81       	ld	r24, Z
    1cd4:	e3 54       	subi	r30, 0x43	; 67
    1cd6:	f0 40       	sbci	r31, 0x00	; 0
    1cd8:	86 95       	lsr	r24
    1cda:	8f 70       	andi	r24, 0x0F	; 15
    1cdc:	09 f0       	breq	.+2      	; 0x1ce0 <Timebase_DownCounter_SS_Set_Securely+0x6a>
    1cde:	70 c0       	rjmp	.+224    	; 0x1dc0 <Timebase_DownCounter_SS_Set_Securely+0x14a>
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1ce0:	e4 5b       	subi	r30, 0xB4	; 180
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 82       	st	Z, r8
    1ce6:	91 82       	std	Z+1, r9	; 0x01
    1ce8:	a2 82       	std	Z+2, r10	; 0x02
    1cea:	b3 82       	std	Z+3, r11	; 0x03
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1cec:	f9 01       	movw	r30, r18
    1cee:	c7 80       	ldd	r12, Z+7	; 0x07
    1cf0:	d0 84       	ldd	r13, Z+8	; 0x08
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1cf2:	21 84       	ldd	r2, Z+9	; 0x09
    1cf4:	32 84       	ldd	r3, Z+10	; 0x0a
    1cf6:	43 84       	ldd	r4, Z+11	; 0x0b
    1cf8:	54 84       	ldd	r5, Z+12	; 0x0c
  int32_t temp_ss, temp_s, subsec_val, sec_val;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_SS_Set_Value(window, value);
	temp_ss     = Timebase_Timer_Get_SubSeconds();
	temp_s      = Timebase_Timer_Get_Seconds();
	subsec_val  = value % Timebase->Config.UpdateRate;
    1cfa:	20 81       	ld	r18, Z
    1cfc:	31 81       	ldd	r19, Z+1	; 0x01
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
    1d02:	c5 01       	movw	r24, r10
    1d04:	b4 01       	movw	r22, r8
    1d06:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
    1d0a:	7b 01       	movw	r14, r22
    1d0c:	8c 01       	movw	r16, r24
	sec_val     = value / Timebase->Config.UpdateRate;
    1d0e:	ab 81       	ldd	r26, Y+3	; 0x03
    1d10:	bc 81       	ldd	r27, Y+4	; 0x04
    1d12:	2d 91       	ld	r18, X+
    1d14:	3c 91       	ld	r19, X
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	c5 01       	movw	r24, r10
    1d1c:	b4 01       	movw	r22, r8
    1d1e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
    1d22:	c9 01       	movw	r24, r18
    1d24:	da 01       	movw	r26, r20
    1d26:	3c 01       	movw	r6, r24
    1d28:	4d 01       	movw	r8, r26
	subsec_val += temp_ss;
    1d2a:	56 01       	movw	r10, r12
    1d2c:	cc 24       	eor	r12, r12
    1d2e:	dd 24       	eor	r13, r13
    1d30:	ae 0c       	add	r10, r14
    1d32:	bf 1c       	adc	r11, r15
    1d34:	c0 1e       	adc	r12, r16
    1d36:	d1 1e       	adc	r13, r17
	if(subsec_val >= Timebase->Config.UpdateRate){
    1d38:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	a0 e0       	ldi	r26, 0x00	; 0
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	a8 16       	cp	r10, r24
    1d46:	b9 06       	cpc	r11, r25
    1d48:	ca 06       	cpc	r12, r26
    1d4a:	db 06       	cpc	r13, r27
    1d4c:	94 f0       	brlt	.+36     	; 0x1d72 <Timebase_DownCounter_SS_Set_Securely+0xfc>
	  sec_val += 1;
    1d4e:	08 94       	sec
    1d50:	61 1c       	adc	r6, r1
    1d52:	71 1c       	adc	r7, r1
    1d54:	81 1c       	adc	r8, r1
    1d56:	91 1c       	adc	r9, r1
	  subsec_val = subsec_val % Timebase->Config.UpdateRate;
    1d58:	20 81       	ld	r18, Z
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	c6 01       	movw	r24, r12
    1d62:	b5 01       	movw	r22, r10
    1d64:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
    1d68:	ac 01       	movw	r20, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	da 01       	movw	r26, r20
    1d6e:	5c 01       	movw	r10, r24
    1d70:	6d 01       	movw	r12, r26
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1d72:	e9 81       	ldd	r30, Y+1	; 0x01
    1d74:	fa 81       	ldd	r31, Y+2	; 0x02
    1d76:	54 e0       	ldi	r21, 0x04	; 4
    1d78:	ee 0f       	add	r30, r30
    1d7a:	ff 1f       	adc	r31, r31
    1d7c:	5a 95       	dec	r21
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <Timebase_DownCounter_SS_Set_Securely+0x102>
    1d80:	29 81       	ldd	r18, Y+1	; 0x01
    1d82:	3a 81       	ldd	r19, Y+2	; 0x02
    1d84:	e2 0f       	add	r30, r18
    1d86:	f3 1f       	adc	r31, r19
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	e8 0f       	add	r30, r24
    1d8e:	f9 1f       	adc	r31, r25
    1d90:	ec 5b       	subi	r30, 0xBC	; 188
    1d92:	ff 4f       	sbci	r31, 0xFF	; 255
    1d94:	26 0c       	add	r2, r6
    1d96:	37 1c       	adc	r3, r7
    1d98:	48 1c       	adc	r4, r8
    1d9a:	59 1c       	adc	r5, r9
    1d9c:	21 92       	st	Z+, r2
    1d9e:	31 92       	st	Z+, r3
    1da0:	41 92       	st	Z+, r4
    1da2:	51 92       	st	Z+, r5
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1da4:	a0 82       	st	Z, r10
    1da6:	b1 82       	std	Z+1, r11	; 0x01
    1da8:	c2 82       	std	Z+2, r12	; 0x02
    1daa:	d3 82       	std	Z+3, r13	; 0x03
void Timebase_DownCounter_SS_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_SS_Reset( window );
}

void Timebase_DownCounter_SS_Start(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status(window) != COUNTER_STATE_STARTED){
    1dac:	35 97       	sbiw	r30, 0x05	; 5
    1dae:	90 81       	ld	r25, Z
    1db0:	89 2f       	mov	r24, r25
    1db2:	86 95       	lsr	r24
    1db4:	8f 70       	andi	r24, 0x0F	; 15
    1db6:	81 30       	cpi	r24, 0x01	; 1
    1db8:	19 f0       	breq	.+6      	; 0x1dc0 <Timebase_DownCounter_SS_Set_Securely+0x14a>
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1dba:	91 7e       	andi	r25, 0xE1	; 225
    1dbc:	92 60       	ori	r25, 0x02	; 2
    1dbe:	90 83       	st	Z, r25
	sec_val += temp_s;
    Timebase_DownCounter_SS_Set_EndValueSec(window, sec_val);
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, subsec_val);
    Timebase_DownCounter_SS_Start(window);
  }
}
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	df 90       	pop	r13
    1dd6:	cf 90       	pop	r12
    1dd8:	bf 90       	pop	r11
    1dda:	af 90       	pop	r10
    1ddc:	9f 90       	pop	r9
    1dde:	8f 90       	pop	r8
    1de0:	7f 90       	pop	r7
    1de2:	6f 90       	pop	r6
    1de4:	5f 90       	pop	r5
    1de6:	4f 90       	pop	r4
    1de8:	3f 90       	pop	r3
    1dea:	2f 90       	pop	r2
    1dec:	08 95       	ret

00001dee <Timebase_DownCounter_SS_Set_Forcefully>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1dee:	e0 91 43 01 	lds	r30, 0x0143
    1df2:	f0 91 44 01 	lds	r31, 0x0144
    1df6:	a8 2f       	mov	r26, r24
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	9d 01       	movw	r18, r26
    1dfc:	94 e0       	ldi	r25, 0x04	; 4
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	9a 95       	dec	r25
    1e04:	e1 f7       	brne	.-8      	; 0x1dfe <Timebase_DownCounter_SS_Set_Forcefully+0x10>
    1e06:	2a 0f       	add	r18, r26
    1e08:	3b 1f       	adc	r19, r27
    1e0a:	e2 0f       	add	r30, r18
    1e0c:	f3 1f       	adc	r31, r19
    1e0e:	e8 5b       	subi	r30, 0xB8	; 184
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	10 82       	st	Z, r1
    1e14:	11 82       	std	Z+1, r1	; 0x01
    1e16:	12 82       	std	Z+2, r1	; 0x02
    1e18:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1e1a:	12 92       	st	-Z, r1
    1e1c:	12 92       	st	-Z, r1
    1e1e:	12 92       	st	-Z, r1
    1e20:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1e22:	38 96       	adiw	r30, 0x08	; 8
    1e24:	10 82       	st	Z, r1
    1e26:	11 82       	std	Z+1, r1	; 0x01
    1e28:	12 82       	std	Z+2, r1	; 0x02
    1e2a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1e2c:	39 97       	sbiw	r30, 0x09	; 9
    1e2e:	90 81       	ld	r25, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1e30:	90 7e       	andi	r25, 0xE0	; 224
    1e32:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_SS_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_SS_Reset( window );
  Timebase_DownCounter_SS_Set_Securely( window, value );
    1e34:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <Timebase_DownCounter_SS_Set_Securely>
} 
    1e38:	08 95       	ret

00001e3a <Timebase_DownCounter_SS_Update>:

void Timebase_DownCounter_SS_Update(uint8_t window){
    1e3a:	2f 92       	push	r2
    1e3c:	3f 92       	push	r3
    1e3e:	4f 92       	push	r4
    1e40:	5f 92       	push	r5
    1e42:	6f 92       	push	r6
    1e44:	7f 92       	push	r7
    1e46:	8f 92       	push	r8
    1e48:	9f 92       	push	r9
    1e4a:	af 92       	push	r10
    1e4c:	bf 92       	push	r11
    1e4e:	cf 92       	push	r12
    1e50:	df 92       	push	r13
    1e52:	ef 92       	push	r14
    1e54:	ff 92       	push	r15
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1e5e:	e0 91 43 01 	lds	r30, 0x0143
    1e62:	f0 91 44 01 	lds	r31, 0x0144
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	ec 01       	movw	r28, r24
    1e6a:	44 e0       	ldi	r20, 0x04	; 4
    1e6c:	cc 0f       	add	r28, r28
    1e6e:	dd 1f       	adc	r29, r29
    1e70:	4a 95       	dec	r20
    1e72:	e1 f7       	brne	.-8      	; 0x1e6c <Timebase_DownCounter_SS_Update+0x32>
    1e74:	c8 0f       	add	r28, r24
    1e76:	d9 1f       	adc	r29, r25
    1e78:	ce 0f       	add	r28, r30
    1e7a:	df 1f       	adc	r29, r31
    1e7c:	33 e4       	ldi	r19, 0x43	; 67
    1e7e:	c3 2e       	mov	r12, r19
    1e80:	d1 2c       	mov	r13, r1
    1e82:	cc 0e       	add	r12, r28
    1e84:	dd 1e       	adc	r13, r29
    1e86:	d6 01       	movw	r26, r12
    1e88:	8c 91       	ld	r24, X
    1e8a:	86 95       	lsr	r24
    1e8c:	8f 70       	andi	r24, 0x0F	; 15
} 

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	09 f0       	breq	.+2      	; 0x1e94 <Timebase_DownCounter_SS_Update+0x5a>
    1e92:	4e c0       	rjmp	.+156    	; 0x1f30 <Timebase_DownCounter_SS_Update+0xf6>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1e94:	e7 80       	ldd	r14, Z+7	; 0x07
    1e96:	f0 84       	ldd	r15, Z+8	; 0x08

void Timebase_DownCounter_SS_Update(uint8_t window){
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
    1e98:	00 e0       	ldi	r16, 0x00	; 0
    1e9a:	10 e0       	ldi	r17, 0x00	; 0
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1e9c:	61 84       	ldd	r6, Z+9	; 0x09
    1e9e:	72 84       	ldd	r7, Z+10	; 0x0a
    1ea0:	83 84       	ldd	r8, Z+11	; 0x0b
    1ea2:	94 84       	ldd	r9, Z+12	; 0x0c
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
    1ea4:	24 e4       	ldi	r18, 0x44	; 68
    1ea6:	a2 2e       	mov	r10, r18
    1ea8:	b1 2c       	mov	r11, r1
    1eaa:	ac 0e       	add	r10, r28
    1eac:	bd 1e       	adc	r11, r29
    1eae:	d5 01       	movw	r26, r10
    1eb0:	2d 91       	ld	r18, X+
    1eb2:	3d 91       	ld	r19, X+
    1eb4:	4d 91       	ld	r20, X+
    1eb6:	5c 91       	ld	r21, X
    1eb8:	26 19       	sub	r18, r6
    1eba:	37 09       	sbc	r19, r7
    1ebc:	48 09       	sbc	r20, r8
    1ebe:	59 09       	sbc	r21, r9
	temp_s *= Timebase->Config.UpdateRate;
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
  int32_t temp_s, temp_ss;
  int32_t curr_val, curr_s, curr_ss;
  if( Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STARTED ){
    temp_ss = Timebase_Timer_Get_SubSeconds();
	temp_s  = Timebase_Timer_Get_Seconds();
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__mulsi3>
    1ecc:	6e 19       	sub	r22, r14
    1ece:	7f 09       	sbc	r23, r15
    1ed0:	80 0b       	sbc	r24, r16
    1ed2:	91 0b       	sbc	r25, r17
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
    1ed4:	de 01       	movw	r26, r28
    1ed6:	a8 5b       	subi	r26, 0xB8	; 184
    1ed8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eda:	2d 91       	ld	r18, X+
    1edc:	3d 91       	ld	r19, X+
    1ede:	4d 91       	ld	r20, X+
    1ee0:	5c 91       	ld	r21, X
    1ee2:	13 97       	sbiw	r26, 0x03	; 3
    1ee4:	62 0f       	add	r22, r18
    1ee6:	73 1f       	adc	r23, r19
    1ee8:	84 1f       	adc	r24, r20
    1eea:	95 1f       	adc	r25, r21
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1eec:	fe 01       	movw	r30, r28
    1eee:	e4 5b       	subi	r30, 0xB4	; 180
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 83       	st	Z, r22
    1ef4:	71 83       	std	Z+1, r23	; 0x01
    1ef6:	82 83       	std	Z+2, r24	; 0x02
    1ef8:	93 83       	std	Z+3, r25	; 0x03
	temp_ss = Timebase_DownCounter_SS_Get_EndValueSubSec(window) - temp_ss;
	temp_s  = Timebase_DownCounter_SS_Get_EndValueSec(window) - temp_s;
	temp_s *= Timebase->Config.UpdateRate;
	temp_s += temp_ss;
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
    1efa:	16 16       	cp	r1, r22
    1efc:	17 06       	cpc	r1, r23
    1efe:	18 06       	cpc	r1, r24
    1f00:	19 06       	cpc	r1, r25
    1f02:	0c f4       	brge	.+2      	; 0x1f06 <Timebase_DownCounter_SS_Update+0xcc>
    1f04:	48 c0       	rjmp	.+144    	; 0x1f96 <Timebase_DownCounter_SS_Update+0x15c>
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1f06:	1d 92       	st	X+, r1
    1f08:	1d 92       	st	X+, r1
    1f0a:	1d 92       	st	X+, r1
    1f0c:	1c 92       	st	X, r1
    1f0e:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1f10:	d5 01       	movw	r26, r10
    1f12:	1d 92       	st	X+, r1
    1f14:	1d 92       	st	X+, r1
    1f16:	1d 92       	st	X+, r1
    1f18:	1c 92       	st	X, r1
    1f1a:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    1f1c:	10 82       	st	Z, r1
    1f1e:	11 82       	std	Z+1, r1	; 0x01
    1f20:	12 82       	std	Z+2, r1	; 0x02
    1f22:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    1f24:	f6 01       	movw	r30, r12
    1f26:	80 81       	ld	r24, Z
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    1f28:	80 7e       	andi	r24, 0xE0	; 224
    1f2a:	88 60       	ori	r24, 0x08	; 8
    1f2c:	80 83       	st	Z, r24
    1f2e:	33 c0       	rjmp	.+102    	; 0x1f96 <Timebase_DownCounter_SS_Update+0x15c>
	Timebase_DownCounter_SS_Set_Value(window, temp_s);
    if(Timebase_DownCounter_SS_Get_Value(window) <= 0){
      Timebase_DownCounter_SS_Reset(window);
      Timebase_DownCounter_SS_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	89 f5       	brne	.+98     	; 0x1f96 <Timebase_DownCounter_SS_Update+0x15c>
  return Timebase->Time.SecondsShadow;
}


uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
    1f34:	67 80       	ldd	r6, Z+7	; 0x07
    1f36:	70 84       	ldd	r7, Z+8	; 0x08
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1f38:	e1 84       	ldd	r14, Z+9	; 0x09
    1f3a:	f2 84       	ldd	r15, Z+10	; 0x0a
    1f3c:	03 85       	ldd	r16, Z+11	; 0x0b
    1f3e:	14 85       	ldd	r17, Z+12	; 0x0c
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    1f40:	c4 5b       	subi	r28, 0xB4	; 180
    1f42:	df 4f       	sbci	r29, 0xFF	; 255
    1f44:	28 80       	ld	r2, Y
    1f46:	39 80       	ldd	r3, Y+1	; 0x01
    1f48:	4a 80       	ldd	r4, Y+2	; 0x02
    1f4a:	5b 80       	ldd	r5, Y+3	; 0x03
    }
  } else if (Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_STOPPED){
    temp_ss  = Timebase_Timer_Get_SubSeconds();
	temp_s   = Timebase_Timer_Get_Seconds();
	curr_val = Timebase_DownCounter_SS_Get_Value(window);
	curr_s   = curr_val / Timebase->Config.UpdateRate;
    1f4c:	20 81       	ld	r18, Z
    1f4e:	31 81       	ldd	r19, Z+1	; 0x01
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
    1f50:	a0 80       	ld	r10, Z
    1f52:	b1 80       	ldd	r11, Z+1	; 0x01
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    1f54:	28 97       	sbiw	r28, 0x08	; 8
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	c2 01       	movw	r24, r4
    1f5c:	b1 01       	movw	r22, r2
    1f5e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
    1f62:	e2 0e       	add	r14, r18
    1f64:	f3 1e       	adc	r15, r19
    1f66:	04 1f       	adc	r16, r20
    1f68:	15 1f       	adc	r17, r21
    1f6a:	e9 92       	st	Y+, r14
    1f6c:	f9 92       	st	Y+, r15
    1f6e:	09 93       	st	Y+, r16
    1f70:	19 93       	st	Y+, r17
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    1f72:	cc 24       	eor	r12, r12
    1f74:	dd 24       	eor	r13, r13
    1f76:	c2 01       	movw	r24, r4
    1f78:	b1 01       	movw	r22, r2
    1f7a:	a6 01       	movw	r20, r12
    1f7c:	95 01       	movw	r18, r10
    1f7e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__divmodsi4>
    1f82:	88 24       	eor	r8, r8
    1f84:	99 24       	eor	r9, r9
    1f86:	66 0e       	add	r6, r22
    1f88:	77 1e       	adc	r7, r23
    1f8a:	88 1e       	adc	r8, r24
    1f8c:	99 1e       	adc	r9, r25
    1f8e:	68 82       	st	Y, r6
    1f90:	79 82       	std	Y+1, r7	; 0x01
    1f92:	8a 82       	std	Y+2, r8	; 0x02
    1f94:	9b 82       	std	Y+3, r9	; 0x03
	curr_s   = curr_val / Timebase->Config.UpdateRate;
	curr_ss  = curr_val % Timebase->Config.UpdateRate;
	Timebase_DownCounter_SS_Set_EndValueSec(window, curr_s + temp_s );
	Timebase_DownCounter_SS_Set_EndValueSubSec(window, curr_ss + temp_ss);
  }
}
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	df 90       	pop	r13
    1fa4:	cf 90       	pop	r12
    1fa6:	bf 90       	pop	r11
    1fa8:	af 90       	pop	r10
    1faa:	9f 90       	pop	r9
    1fac:	8f 90       	pop	r8
    1fae:	7f 90       	pop	r7
    1fb0:	6f 90       	pop	r6
    1fb2:	5f 90       	pop	r5
    1fb4:	4f 90       	pop	r4
    1fb6:	3f 90       	pop	r3
    1fb8:	2f 90       	pop	r2
    1fba:	08 95       	ret

00001fbc <Timebase_DownCounter_SS_Expired>:

uint8_t Timebase_DownCounter_SS_Expired(uint8_t window){
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	e0 91 43 01 	lds	r30, 0x0143
    1fc2:	f0 91 44 01 	lds	r31, 0x0144
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	9c 01       	movw	r18, r24
    1fca:	54 e0       	ldi	r21, 0x04	; 4
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	5a 95       	dec	r21
    1fd2:	e1 f7       	brne	.-8      	; 0x1fcc <Timebase_DownCounter_SS_Expired+0x10>
    1fd4:	28 0f       	add	r18, r24
    1fd6:	39 1f       	adc	r19, r25
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	ed 5b       	subi	r30, 0xBD	; 189
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	86 95       	lsr	r24
    1fe4:	8f 70       	andi	r24, 0x0F	; 15
    1fe6:	84 30       	cpi	r24, 0x04	; 4
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <Timebase_DownCounter_SS_Expired+0x30>
    1fea:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    1fec:	84 2f       	mov	r24, r20
    1fee:	08 95       	ret

00001ff0 <Timebase_DownCounter_SS_Expired_Event>:

/***************************DownCounter SS Functions Start**************************/

#ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
    1ff0:	e0 91 43 01 	lds	r30, 0x0143
    1ff4:	f0 91 44 01 	lds	r31, 0x0144
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_SS_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_SS_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1ffa:	9c 01       	movw	r18, r24
    1ffc:	64 e0       	ldi	r22, 0x04	; 4
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	6a 95       	dec	r22
    2004:	e1 f7       	brne	.-8      	; 0x1ffe <Timebase_DownCounter_SS_Expired_Event+0xe>
    2006:	28 0f       	add	r18, r24
    2008:	39 1f       	adc	r19, r25
    200a:	e2 0f       	add	r30, r18
    200c:	f3 1f       	adc	r31, r19
    200e:	df 01       	movw	r26, r30
    2010:	ad 5b       	subi	r26, 0xBD	; 189
    2012:	bf 4f       	sbci	r27, 0xFF	; 255
    2014:	8c 91       	ld	r24, X
    2016:	86 95       	lsr	r24
    2018:	8f 70       	andi	r24, 0x0F	; 15
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	11 f0       	breq	.+4      	; 0x2022 <Timebase_DownCounter_SS_Expired_Event+0x32>
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	08 95       	ret
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    2022:	e8 5b       	subi	r30, 0xB8	; 184
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	10 82       	st	Z, r1
    2028:	11 82       	std	Z+1, r1	; 0x01
    202a:	12 82       	std	Z+2, r1	; 0x02
    202c:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    202e:	12 92       	st	-Z, r1
    2030:	12 92       	st	-Z, r1
    2032:	12 92       	st	-Z, r1
    2034:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2036:	38 96       	adiw	r30, 0x08	; 8
    2038:	10 82       	st	Z, r1
    203a:	11 82       	std	Z+1, r1	; 0x01
    203c:	12 82       	std	Z+2, r1	; 0x02
    203e:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2040:	8c 91       	ld	r24, X
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2042:	80 7e       	andi	r24, 0xE0	; 224
    2044:	8c 93       	st	X, r24
    2046:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2048:	08 95       	ret

0000204a <Timebase_DownCounter_SS_Set_Period_Value_Securely>:


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
    204e:	c0 91 43 01 	lds	r28, 0x0143
    2052:	d0 91 44 01 	lds	r29, 0x0144
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    205a:	f9 01       	movw	r30, r18
    205c:	a4 e0       	ldi	r26, 0x04	; 4
    205e:	ee 0f       	add	r30, r30
    2060:	ff 1f       	adc	r31, r31
    2062:	aa 95       	dec	r26
    2064:	e1 f7       	brne	.-8      	; 0x205e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x14>
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	ec 0f       	add	r30, r28
    206c:	fd 1f       	adc	r31, r29
    206e:	ed 5b       	subi	r30, 0xBD	; 189
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	e3 54       	subi	r30, 0x43	; 67
    2076:	f0 40       	sbci	r31, 0x00	; 0
    2078:	80 fd       	sbrc	r24, 0
    207a:	24 c0       	rjmp	.+72     	; 0x20c4 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x7a>
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    207c:	e4 5b       	subi	r30, 0xB4	; 180
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	81 91       	ld	r24, Z+
    2082:	91 91       	ld	r25, Z+
    2084:	a1 91       	ld	r26, Z+
    2086:	b1 91       	ld	r27, Z+
    2088:	84 1b       	sub	r24, r20
    208a:	95 0b       	sbc	r25, r21
    208c:	a6 0b       	sbc	r26, r22
    208e:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_SS_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounterSS[window].PeriodValue;
}

void Timebase_DownCounter_SS_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    2090:	b7 ff       	sbrs	r27, 7
    2092:	05 c0       	rjmp	.+10     	; 0x209e <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x54>
    Timebase->DownCounterSS[window].PeriodValue = 0;
    2094:	10 82       	st	Z, r1
    2096:	11 82       	std	Z+1, r1	; 0x01
    2098:	12 82       	std	Z+2, r1	; 0x02
    209a:	13 82       	std	Z+3, r1	; 0x03
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x5c>
  }else{
    Timebase->DownCounterSS[window].PeriodValue = value;
    209e:	80 83       	st	Z, r24
    20a0:	91 83       	std	Z+1, r25	; 0x01
    20a2:	a2 83       	std	Z+2, r26	; 0x02
    20a4:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounterSS[window].Status.PeriodFlag;
}

void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
    20a6:	f9 01       	movw	r30, r18
    20a8:	74 e0       	ldi	r23, 0x04	; 4
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	7a 95       	dec	r23
    20b0:	e1 f7       	brne	.-8      	; 0x20aa <Timebase_DownCounter_SS_Set_Period_Value_Securely+0x60>
    20b2:	e2 0f       	add	r30, r18
    20b4:	f3 1f       	adc	r31, r19
    20b6:	ec 0f       	add	r30, r28
    20b8:	fd 1f       	adc	r31, r29
    20ba:	ed 5b       	subi	r30, 0xBD	; 189
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	81 60       	ori	r24, 0x01	; 1
    20c2:	80 83       	st	Z, r24
void Timebase_DownCounter_SS_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_SS_Set_PeriodValue(window, Timebase_DownCounter_SS_Get_Value(window) - value);
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret

000020ca <Timebase_DownCounter_SS_Get_Remaining_Period_Value>:
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    20ca:	e0 91 43 01 	lds	r30, 0x0143
    20ce:	f0 91 44 01 	lds	r31, 0x0144
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    20d4:	9c 01       	movw	r18, r24
    20d6:	b4 e0       	ldi	r27, 0x04	; 4
    20d8:	22 0f       	add	r18, r18
    20da:	33 1f       	adc	r19, r19
    20dc:	ba 95       	dec	r27
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0xe>
    20e0:	28 0f       	add	r18, r24
    20e2:	39 1f       	adc	r19, r25
    20e4:	e2 0f       	add	r30, r18
    20e6:	f3 1f       	adc	r31, r19
    20e8:	df 01       	movw	r26, r30
    20ea:	a0 5b       	subi	r26, 0xB0	; 176
    20ec:	bf 4f       	sbci	r27, 0xFF	; 255
    20ee:	e4 5b       	subi	r30, 0xB4	; 180
    20f0:	ff 4f       	sbci	r31, 0xFF	; 255
    20f2:	20 81       	ld	r18, Z
    20f4:	31 81       	ldd	r19, Z+1	; 0x01
    20f6:	42 81       	ldd	r20, Z+2	; 0x02
    20f8:	53 81       	ldd	r21, Z+3	; 0x03
    20fa:	8d 91       	ld	r24, X+
    20fc:	9d 91       	ld	r25, X+
    20fe:	0d 90       	ld	r0, X+
    2100:	bc 91       	ld	r27, X
    2102:	a0 2d       	mov	r26, r0
    2104:	28 1b       	sub	r18, r24
    2106:	39 0b       	sbc	r19, r25
    2108:	4a 0b       	sbc	r20, r26
    210a:	5b 0b       	sbc	r21, r27
    210c:	57 ff       	sbrs	r21, 7
    210e:	04 c0       	rjmp	.+8      	; 0x2118 <Timebase_DownCounter_SS_Get_Remaining_Period_Value+0x4e>
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2118:	b9 01       	movw	r22, r18
    211a:	ca 01       	movw	r24, r20
    211c:	08 95       	ret

0000211e <Timebase_DownCounter_SS_Period_Value_Expired>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
}

int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
    2122:	c0 91 43 01 	lds	r28, 0x0143
    2126:	d0 91 44 01 	lds	r29, 0x0144
    212a:	68 2f       	mov	r22, r24
    212c:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_SS_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_SS_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_SS_Get_Value(window) - Timebase_DownCounter_SS_Get_PeriodValue(window) ;
    212e:	fb 01       	movw	r30, r22
    2130:	44 e0       	ldi	r20, 0x04	; 4
    2132:	ee 0f       	add	r30, r30
    2134:	ff 1f       	adc	r31, r31
    2136:	4a 95       	dec	r20
    2138:	e1 f7       	brne	.-8      	; 0x2132 <Timebase_DownCounter_SS_Period_Value_Expired+0x14>
    213a:	e6 0f       	add	r30, r22
    213c:	f7 1f       	adc	r31, r23
    213e:	ec 0f       	add	r30, r28
    2140:	fd 1f       	adc	r31, r29
    2142:	df 01       	movw	r26, r30
    2144:	a0 5b       	subi	r26, 0xB0	; 176
    2146:	bf 4f       	sbci	r27, 0xFF	; 255
    2148:	e4 5b       	subi	r30, 0xB4	; 180
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	20 81       	ld	r18, Z
    214e:	31 81       	ldd	r19, Z+1	; 0x01
    2150:	42 81       	ldd	r20, Z+2	; 0x02
    2152:	53 81       	ldd	r21, Z+3	; 0x03
    2154:	8d 91       	ld	r24, X+
    2156:	9d 91       	ld	r25, X+
    2158:	0d 90       	ld	r0, X+
    215a:	bc 91       	ld	r27, X
    215c:	a0 2d       	mov	r26, r0
    215e:	28 1b       	sub	r18, r24
    2160:	39 0b       	sbc	r19, r25
    2162:	4a 0b       	sbc	r20, r26
    2164:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2166:	57 fd       	sbrc	r21, 7
    2168:	07 c0       	rjmp	.+14     	; 0x2178 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
  }
  return temp;
}

uint8_t Timebase_DownCounter_SS_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_SS_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_SS_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    216a:	21 15       	cp	r18, r1
    216c:	31 05       	cpc	r19, r1
    216e:	41 05       	cpc	r20, r1
    2170:	51 05       	cpc	r21, r1
    2172:	11 f0       	breq	.+4      	; 0x2178 <Timebase_DownCounter_SS_Period_Value_Expired+0x5a>
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	12 c0       	rjmp	.+36     	; 0x219c <Timebase_DownCounter_SS_Period_Value_Expired+0x7e>
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	cb 01       	movw	r24, r22
    217c:	34 e0       	ldi	r19, 0x04	; 4
    217e:	88 0f       	add	r24, r24
    2180:	99 1f       	adc	r25, r25
    2182:	3a 95       	dec	r19
    2184:	e1 f7       	brne	.-8      	; 0x217e <Timebase_DownCounter_SS_Period_Value_Expired+0x60>
    2186:	86 0f       	add	r24, r22
    2188:	97 1f       	adc	r25, r23
    218a:	c8 0f       	add	r28, r24
    218c:	d9 1f       	adc	r29, r25
    218e:	cd 5b       	subi	r28, 0xBD	; 189
    2190:	df 4f       	sbci	r29, 0xFF	; 255
    2192:	88 81       	ld	r24, Y
    2194:	80 ff       	sbrs	r24, 0
    2196:	21 e0       	ldi	r18, 0x01	; 1
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    219c:	82 2f       	mov	r24, r18
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	08 95       	ret

000021a4 <Timebase_DownCounter_SS_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_SS_Period_Value_Expired_Event(uint8_t window){
    21a4:	1f 93       	push	r17
    21a6:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_SS_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    21a8:	0e 94 8f 10 	call	0x211e	; 0x211e <Timebase_DownCounter_SS_Period_Value_Expired>
    21ac:	81 30       	cpi	r24, 0x01	; 1
    21ae:	11 f0       	breq	.+4      	; 0x21b4 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x10>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	16 c0       	rjmp	.+44     	; 0x21e0 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    21b4:	e0 91 43 01 	lds	r30, 0x0143
    21b8:	f0 91 44 01 	lds	r31, 0x0144
    21bc:	21 2f       	mov	r18, r17
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	c9 01       	movw	r24, r18
    21c2:	54 e0       	ldi	r21, 0x04	; 4
    21c4:	88 0f       	add	r24, r24
    21c6:	99 1f       	adc	r25, r25
    21c8:	5a 95       	dec	r21
    21ca:	e1 f7       	brne	.-8      	; 0x21c4 <Timebase_DownCounter_SS_Period_Value_Expired_Event+0x20>
    21cc:	82 0f       	add	r24, r18
    21ce:	93 1f       	adc	r25, r19
    21d0:	e8 0f       	add	r30, r24
    21d2:	f9 1f       	adc	r31, r25
    21d4:	ed 5b       	subi	r30, 0xBD	; 189
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	8e 7f       	andi	r24, 0xFE	; 254
    21dc:	80 83       	st	Z, r24
    21de:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_SS_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    21e0:	1f 91       	pop	r17
    21e2:	08 95       	ret

000021e4 <Timebase_DownCounter_SS_Update_All>:


void Timebase_DownCounter_SS_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Update(i);
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <Timebase_DownCounter_SS_Update>
  }
}
    21ea:	08 95       	ret

000021ec <Timebase_DownCounter_SS_Reset_All>:
void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
}

void Timebase_DownCounter_SS_Set_EndValueSubSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSubSec = value;
    21ec:	e0 91 43 01 	lds	r30, 0x0143
    21f0:	f0 91 44 01 	lds	r31, 0x0144
    21f4:	e8 5b       	subi	r30, 0xB8	; 184
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	10 82       	st	Z, r1
    21fa:	11 82       	std	Z+1, r1	; 0x01
    21fc:	12 82       	std	Z+2, r1	; 0x02
    21fe:	13 82       	std	Z+3, r1	; 0x03
int32_t Timebase_DownCounter_SS_Get_EndValueSubSec(uint8_t window){
  return Timebase->DownCounterSS[window].EndValueSubSec;
}

void Timebase_DownCounter_SS_Set_EndValueSec(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].EndValueSec = value;
    2200:	12 92       	st	-Z, r1
    2202:	12 92       	st	-Z, r1
    2204:	12 92       	st	-Z, r1
    2206:	12 92       	st	-Z, r1
int32_t Timebase_DownCounter_SS_Get_Value(uint8_t window){
  return Timebase->DownCounterSS[window].Value;
}

void Timebase_DownCounter_SS_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounterSS[window].Value = value;
    2208:	38 96       	adiw	r30, 0x08	; 8
    220a:	10 82       	st	Z, r1
    220c:	11 82       	std	Z+1, r1	; 0x01
    220e:	12 82       	std	Z+2, r1	; 0x02
    2210:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_SS_Get_Status(uint8_t window){
  return Timebase->DownCounterSS[window].Status.Value;
}

void Timebase_DownCounter_SS_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounterSS[window].Status.Value = value;
    2212:	39 97       	sbiw	r30, 0x09	; 9
    2214:	80 81       	ld	r24, Z
void Timebase_DownCounter_SS_Set_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_SS_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounterSS[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2216:	80 7e       	andi	r24, 0xE0	; 224
    2218:	80 83       	st	Z, r24

void Timebase_DownCounter_SS_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER_SUBSECONDS; i++){
    Timebase_DownCounter_SS_Reset(i);
  }
}
    221a:	08 95       	ret

0000221c <Timebase_DownCounter_Get_Status>:


/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    221c:	e0 91 43 01 	lds	r30, 0x0143
    2220:	f0 91 44 01 	lds	r31, 0x0144
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	2d e0       	ldi	r18, 0x0D	; 13
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	ac 01       	movw	r20, r24
    222c:	42 9f       	mul	r20, r18
    222e:	c0 01       	movw	r24, r0
    2230:	43 9f       	mul	r20, r19
    2232:	90 0d       	add	r25, r0
    2234:	52 9f       	mul	r21, r18
    2236:	90 0d       	add	r25, r0
    2238:	11 24       	eor	r1, r1
    223a:	e8 0f       	add	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	ec 5a       	subi	r30, 0xAC	; 172
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    2246:	8f 70       	andi	r24, 0x0F	; 15
    2248:	08 95       	ret

0000224a <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    224a:	e0 91 43 01 	lds	r30, 0x0143
    224e:	f0 91 44 01 	lds	r31, 0x0144
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	2d e0       	ldi	r18, 0x0D	; 13
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	ac 01       	movw	r20, r24
    225a:	42 9f       	mul	r20, r18
    225c:	c0 01       	movw	r24, r0
    225e:	43 9f       	mul	r20, r19
    2260:	90 0d       	add	r25, r0
    2262:	52 9f       	mul	r21, r18
    2264:	90 0d       	add	r25, r0
    2266:	11 24       	eor	r1, r1
    2268:	e8 0f       	add	r30, r24
    226a:	f9 1f       	adc	r31, r25
    226c:	ec 5a       	subi	r30, 0xAC	; 172
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	6f 70       	andi	r22, 0x0F	; 15
    2272:	66 0f       	add	r22, r22
    2274:	80 81       	ld	r24, Z
    2276:	81 7e       	andi	r24, 0xE1	; 225
    2278:	86 2b       	or	r24, r22
    227a:	80 83       	st	Z, r24
}
    227c:	08 95       	ret

0000227e <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    227e:	e0 91 43 01 	lds	r30, 0x0143
    2282:	f0 91 44 01 	lds	r31, 0x0144
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	2d e0       	ldi	r18, 0x0D	; 13
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	ac 01       	movw	r20, r24
    228e:	42 9f       	mul	r20, r18
    2290:	c0 01       	movw	r24, r0
    2292:	43 9f       	mul	r20, r19
    2294:	90 0d       	add	r25, r0
    2296:	52 9f       	mul	r21, r18
    2298:	90 0d       	add	r25, r0
    229a:	11 24       	eor	r1, r1
    229c:	e8 0f       	add	r30, r24
    229e:	f9 1f       	adc	r31, r25
    22a0:	e7 5a       	subi	r30, 0xA7	; 167
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].Value;
}
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	08 95       	ret

000022ae <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    22ae:	e0 91 43 01 	lds	r30, 0x0143
    22b2:	f0 91 44 01 	lds	r31, 0x0144
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	2d e0       	ldi	r18, 0x0D	; 13
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	dc 01       	movw	r26, r24
    22be:	a2 9f       	mul	r26, r18
    22c0:	c0 01       	movw	r24, r0
    22c2:	a3 9f       	mul	r26, r19
    22c4:	90 0d       	add	r25, r0
    22c6:	b2 9f       	mul	r27, r18
    22c8:	90 0d       	add	r25, r0
    22ca:	11 24       	eor	r1, r1
    22cc:	e8 0f       	add	r30, r24
    22ce:	f9 1f       	adc	r31, r25
    22d0:	e7 5a       	subi	r30, 0xA7	; 167
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	40 83       	st	Z, r20
    22d6:	51 83       	std	Z+1, r21	; 0x01
    22d8:	62 83       	std	Z+2, r22	; 0x02
    22da:	73 83       	std	Z+3, r23	; 0x03
}
    22dc:	08 95       	ret

000022de <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    22de:	e0 91 43 01 	lds	r30, 0x0143
    22e2:	f0 91 44 01 	lds	r31, 0x0144
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	2d e0       	ldi	r18, 0x0D	; 13
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	ac 01       	movw	r20, r24
    22ee:	42 9f       	mul	r20, r18
    22f0:	c0 01       	movw	r24, r0
    22f2:	43 9f       	mul	r20, r19
    22f4:	90 0d       	add	r25, r0
    22f6:	52 9f       	mul	r21, r18
    22f8:	90 0d       	add	r25, r0
    22fa:	11 24       	eor	r1, r1
    22fc:	e8 0f       	add	r30, r24
    22fe:	f9 1f       	adc	r31, r25
    2300:	eb 5a       	subi	r30, 0xAB	; 171
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	60 81       	ld	r22, Z
    2306:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].EndValue;
}
    2308:	82 81       	ldd	r24, Z+2	; 0x02
    230a:	93 81       	ldd	r25, Z+3	; 0x03
    230c:	08 95       	ret

0000230e <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    230e:	e0 91 43 01 	lds	r30, 0x0143
    2312:	f0 91 44 01 	lds	r31, 0x0144
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	2d e0       	ldi	r18, 0x0D	; 13
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	dc 01       	movw	r26, r24
    231e:	a2 9f       	mul	r26, r18
    2320:	c0 01       	movw	r24, r0
    2322:	a3 9f       	mul	r26, r19
    2324:	90 0d       	add	r25, r0
    2326:	b2 9f       	mul	r27, r18
    2328:	90 0d       	add	r25, r0
    232a:	11 24       	eor	r1, r1
    232c:	e8 0f       	add	r30, r24
    232e:	f9 1f       	adc	r31, r25
    2330:	eb 5a       	subi	r30, 0xAB	; 171
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	40 83       	st	Z, r20
    2336:	51 83       	std	Z+1, r21	; 0x01
    2338:	62 83       	std	Z+2, r22	; 0x02
    233a:	73 83       	std	Z+3, r23	; 0x03
}
    233c:	08 95       	ret

0000233e <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    233e:	e0 91 43 01 	lds	r30, 0x0143
    2342:	f0 91 44 01 	lds	r31, 0x0144
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	2d e0       	ldi	r18, 0x0D	; 13
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	ac 01       	movw	r20, r24
    234e:	42 9f       	mul	r20, r18
    2350:	c0 01       	movw	r24, r0
    2352:	43 9f       	mul	r20, r19
    2354:	90 0d       	add	r25, r0
    2356:	52 9f       	mul	r21, r18
    2358:	90 0d       	add	r25, r0
    235a:	11 24       	eor	r1, r1
    235c:	e8 0f       	add	r30, r24
    235e:	f9 1f       	adc	r31, r25
    2360:	e3 5a       	subi	r30, 0xA3	; 163
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
  return Timebase->DownCounter[window].PeriodValue;
}
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	08 95       	ret

0000236e <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    236e:	e0 91 43 01 	lds	r30, 0x0143
    2372:	f0 91 44 01 	lds	r31, 0x0144
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    237a:	77 ff       	sbrs	r23, 7
    237c:	13 c0       	rjmp	.+38     	; 0x23a4 <Timebase_DownCounter_Set_PeriodValue+0x36>
    Timebase->DownCounter[window].PeriodValue = 0;
    237e:	8d e0       	ldi	r24, 0x0D	; 13
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	ac 01       	movw	r20, r24
    2384:	24 9f       	mul	r18, r20
    2386:	c0 01       	movw	r24, r0
    2388:	25 9f       	mul	r18, r21
    238a:	90 0d       	add	r25, r0
    238c:	34 9f       	mul	r19, r20
    238e:	90 0d       	add	r25, r0
    2390:	11 24       	eor	r1, r1
    2392:	e8 0f       	add	r30, r24
    2394:	f9 1f       	adc	r31, r25
    2396:	e3 5a       	subi	r30, 0xA3	; 163
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	10 82       	st	Z, r1
    239c:	11 82       	std	Z+1, r1	; 0x01
    239e:	12 82       	std	Z+2, r1	; 0x02
    23a0:	13 82       	std	Z+3, r1	; 0x03
    23a2:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    23a4:	8d e0       	ldi	r24, 0x0D	; 13
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	dc 01       	movw	r26, r24
    23aa:	2a 9f       	mul	r18, r26
    23ac:	c0 01       	movw	r24, r0
    23ae:	2b 9f       	mul	r18, r27
    23b0:	90 0d       	add	r25, r0
    23b2:	3a 9f       	mul	r19, r26
    23b4:	90 0d       	add	r25, r0
    23b6:	11 24       	eor	r1, r1
    23b8:	e8 0f       	add	r30, r24
    23ba:	f9 1f       	adc	r31, r25
    23bc:	e3 5a       	subi	r30, 0xA3	; 163
    23be:	ff 4f       	sbci	r31, 0xFF	; 255
    23c0:	40 83       	st	Z, r20
    23c2:	51 83       	std	Z+1, r21	; 0x01
    23c4:	62 83       	std	Z+2, r22	; 0x02
    23c6:	73 83       	std	Z+3, r23	; 0x03
    23c8:	08 95       	ret

000023ca <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    23ca:	e0 91 43 01 	lds	r30, 0x0143
    23ce:	f0 91 44 01 	lds	r31, 0x0144
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	2d e0       	ldi	r18, 0x0D	; 13
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	ac 01       	movw	r20, r24
    23da:	42 9f       	mul	r20, r18
    23dc:	c0 01       	movw	r24, r0
    23de:	43 9f       	mul	r20, r19
    23e0:	90 0d       	add	r25, r0
    23e2:	52 9f       	mul	r21, r18
    23e4:	90 0d       	add	r25, r0
    23e6:	11 24       	eor	r1, r1
    23e8:	e8 0f       	add	r30, r24
    23ea:	f9 1f       	adc	r31, r25
    23ec:	ec 5a       	subi	r30, 0xAC	; 172
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 81       	ld	r24, Z
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    23f2:	81 70       	andi	r24, 0x01	; 1
    23f4:	08 95       	ret

000023f6 <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    23f6:	e0 91 43 01 	lds	r30, 0x0143
    23fa:	f0 91 44 01 	lds	r31, 0x0144
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	2d e0       	ldi	r18, 0x0D	; 13
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	ac 01       	movw	r20, r24
    2406:	42 9f       	mul	r20, r18
    2408:	c0 01       	movw	r24, r0
    240a:	43 9f       	mul	r20, r19
    240c:	90 0d       	add	r25, r0
    240e:	52 9f       	mul	r21, r18
    2410:	90 0d       	add	r25, r0
    2412:	11 24       	eor	r1, r1
    2414:	e8 0f       	add	r30, r24
    2416:	f9 1f       	adc	r31, r25
    2418:	ec 5a       	subi	r30, 0xAC	; 172
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	81 60       	ori	r24, 0x01	; 1
    2420:	80 83       	st	Z, r24
}
    2422:	08 95       	ret

00002424 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2424:	e0 91 43 01 	lds	r30, 0x0143
    2428:	f0 91 44 01 	lds	r31, 0x0144
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	2d e0       	ldi	r18, 0x0D	; 13
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	ac 01       	movw	r20, r24
    2434:	42 9f       	mul	r20, r18
    2436:	c0 01       	movw	r24, r0
    2438:	43 9f       	mul	r20, r19
    243a:	90 0d       	add	r25, r0
    243c:	52 9f       	mul	r21, r18
    243e:	90 0d       	add	r25, r0
    2440:	11 24       	eor	r1, r1
    2442:	e8 0f       	add	r30, r24
    2444:	f9 1f       	adc	r31, r25
    2446:	ec 5a       	subi	r30, 0xAC	; 172
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	80 81       	ld	r24, Z
    244c:	8e 7f       	andi	r24, 0xFE	; 254
    244e:	80 83       	st	Z, r24
}
    2450:	08 95       	ret

00002452 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2452:	e0 91 43 01 	lds	r30, 0x0143
    2456:	f0 91 44 01 	lds	r31, 0x0144
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	2d e0       	ldi	r18, 0x0D	; 13
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	ac 01       	movw	r20, r24
    2462:	42 9f       	mul	r20, r18
    2464:	c0 01       	movw	r24, r0
    2466:	43 9f       	mul	r20, r19
    2468:	90 0d       	add	r25, r0
    246a:	52 9f       	mul	r21, r18
    246c:	90 0d       	add	r25, r0
    246e:	11 24       	eor	r1, r1
    2470:	e8 0f       	add	r30, r24
    2472:	f9 1f       	adc	r31, r25
    2474:	eb 5a       	subi	r30, 0xAB	; 171
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	11 92       	st	Z+, r1
    247a:	11 92       	st	Z+, r1
    247c:	11 92       	st	Z+, r1
    247e:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2480:	10 82       	st	Z, r1
    2482:	11 82       	std	Z+1, r1	; 0x01
    2484:	12 82       	std	Z+2, r1	; 0x02
    2486:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2488:	35 97       	sbiw	r30, 0x05	; 5
    248a:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    248c:	80 7e       	andi	r24, 0xE0	; 224
    248e:	80 83       	st	Z, r24
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    2490:	08 95       	ret

00002492 <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2492:	e0 91 43 01 	lds	r30, 0x0143
    2496:	f0 91 44 01 	lds	r31, 0x0144
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	2d e0       	ldi	r18, 0x0D	; 13
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	ac 01       	movw	r20, r24
    24a2:	42 9f       	mul	r20, r18
    24a4:	c0 01       	movw	r24, r0
    24a6:	43 9f       	mul	r20, r19
    24a8:	90 0d       	add	r25, r0
    24aa:	52 9f       	mul	r21, r18
    24ac:	90 0d       	add	r25, r0
    24ae:	11 24       	eor	r1, r1
    24b0:	e8 0f       	add	r30, r24
    24b2:	f9 1f       	adc	r31, r25
    24b4:	eb 5a       	subi	r30, 0xAB	; 171
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	11 92       	st	Z+, r1
    24ba:	11 92       	st	Z+, r1
    24bc:	11 92       	st	Z+, r1
    24be:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    24c0:	10 82       	st	Z, r1
    24c2:	11 82       	std	Z+1, r1	; 0x01
    24c4:	12 82       	std	Z+2, r1	; 0x02
    24c6:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    24c8:	35 97       	sbiw	r30, 0x05	; 5
    24ca:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    24cc:	80 7e       	andi	r24, 0xE0	; 224
    24ce:	80 83       	st	Z, r24
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    24d0:	08 95       	ret

000024d2 <Timebase_DownCounter_Start>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    24d2:	e0 91 43 01 	lds	r30, 0x0143
    24d6:	f0 91 44 01 	lds	r31, 0x0144
    24da:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    24dc:	2d e0       	ldi	r18, 0x0D	; 13
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	ac 01       	movw	r20, r24
    24e2:	42 9f       	mul	r20, r18
    24e4:	c0 01       	movw	r24, r0
    24e6:	43 9f       	mul	r20, r19
    24e8:	90 0d       	add	r25, r0
    24ea:	52 9f       	mul	r21, r18
    24ec:	90 0d       	add	r25, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	e8 0f       	add	r30, r24
    24f2:	f9 1f       	adc	r31, r25
    24f4:	ec 5a       	subi	r30, 0xAC	; 172
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	90 81       	ld	r25, Z
    24fa:	89 2f       	mov	r24, r25
    24fc:	86 95       	lsr	r24
    24fe:	8f 70       	andi	r24, 0x0F	; 15
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	19 f0       	breq	.+6      	; 0x250a <Timebase_DownCounter_Start+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2504:	91 7e       	andi	r25, 0xE1	; 225
    2506:	92 60       	ori	r25, 0x02	; 2
    2508:	90 83       	st	Z, r25
    250a:	08 95       	ret

0000250c <Timebase_DownCounter_Stop>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    250c:	e0 91 43 01 	lds	r30, 0x0143
    2510:	f0 91 44 01 	lds	r31, 0x0144
    2514:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    2516:	2d e0       	ldi	r18, 0x0D	; 13
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	ac 01       	movw	r20, r24
    251c:	42 9f       	mul	r20, r18
    251e:	c0 01       	movw	r24, r0
    2520:	43 9f       	mul	r20, r19
    2522:	90 0d       	add	r25, r0
    2524:	52 9f       	mul	r21, r18
    2526:	90 0d       	add	r25, r0
    2528:	11 24       	eor	r1, r1
    252a:	e8 0f       	add	r30, r24
    252c:	f9 1f       	adc	r31, r25
    252e:	ec 5a       	subi	r30, 0xAC	; 172
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	90 81       	ld	r25, Z
    2534:	89 2f       	mov	r24, r25
    2536:	86 95       	lsr	r24
    2538:	8f 70       	andi	r24, 0x0F	; 15
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	19 f0       	breq	.+6      	; 0x2544 <Timebase_DownCounter_Stop+0x38>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    253e:	91 7e       	andi	r25, 0xE1	; 225
    2540:	94 60       	ori	r25, 0x04	; 4
    2542:	90 83       	st	Z, r25
    2544:	08 95       	ret

00002546 <Timebase_DownCounter_Set_Securely>:
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_STOP);    
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
    2546:	cf 93       	push	r28
    2548:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    254a:	a0 91 43 01 	lds	r26, 0x0143
    254e:	b0 91 44 01 	lds	r27, 0x0144
    2552:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    2554:	2d e0       	ldi	r18, 0x0D	; 13
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	82 9f       	mul	r24, r18
    255a:	f0 01       	movw	r30, r0
    255c:	83 9f       	mul	r24, r19
    255e:	f0 0d       	add	r31, r0
    2560:	92 9f       	mul	r25, r18
    2562:	f0 0d       	add	r31, r0
    2564:	11 24       	eor	r1, r1
    2566:	ea 0f       	add	r30, r26
    2568:	fb 1f       	adc	r31, r27
    256a:	ef 01       	movw	r28, r30
    256c:	cc 5a       	subi	r28, 0xAC	; 172
    256e:	df 4f       	sbci	r29, 0xFF	; 255
    2570:	88 81       	ld	r24, Y
    2572:	86 95       	lsr	r24
    2574:	8f 70       	andi	r24, 0x0F	; 15
    2576:	e9 f4       	brne	.+58     	; 0x25b2 <Timebase_DownCounter_Set_Securely+0x6c>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2578:	e7 5a       	subi	r30, 0xA7	; 167
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	40 83       	st	Z, r20
    257e:	51 83       	std	Z+1, r21	; 0x01
    2580:	62 83       	std	Z+2, r22	; 0x02
    2582:	73 83       	std	Z+3, r23	; 0x03
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2584:	19 96       	adiw	r26, 0x09	; 9
    2586:	8d 91       	ld	r24, X+
    2588:	9d 91       	ld	r25, X+
    258a:	0d 90       	ld	r0, X+
    258c:	bc 91       	ld	r27, X
    258e:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2590:	84 0f       	add	r24, r20
    2592:	95 1f       	adc	r25, r21
    2594:	a6 1f       	adc	r26, r22
    2596:	b7 1f       	adc	r27, r23
    2598:	b2 93       	st	-Z, r27
    259a:	a2 93       	st	-Z, r26
    259c:	92 93       	st	-Z, r25
    259e:	82 93       	st	-Z, r24
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    25a0:	98 81       	ld	r25, Y
    25a2:	89 2f       	mov	r24, r25
    25a4:	86 95       	lsr	r24
    25a6:	8f 70       	andi	r24, 0x0F	; 15
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	19 f0       	breq	.+6      	; 0x25b2 <Timebase_DownCounter_Set_Securely+0x6c>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25ac:	91 7e       	andi	r25, 0xE1	; 225
    25ae:	92 60       	ori	r25, 0x02	; 2
    25b0:	98 83       	st	Y, r25
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    Timebase_DownCounter_Set_Value(window, value);
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <Timebase_DownCounter_Set_Forcefully>:

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    25bc:	e0 91 43 01 	lds	r30, 0x0143
    25c0:	f0 91 44 01 	lds	r31, 0x0144
    25c4:	a8 2f       	mov	r26, r24
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	2d e0       	ldi	r18, 0x0D	; 13
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	e9 01       	movw	r28, r18
    25ce:	ac 9f       	mul	r26, r28
    25d0:	90 01       	movw	r18, r0
    25d2:	ad 9f       	mul	r26, r29
    25d4:	30 0d       	add	r19, r0
    25d6:	bc 9f       	mul	r27, r28
    25d8:	30 0d       	add	r19, r0
    25da:	11 24       	eor	r1, r1
    25dc:	e2 0f       	add	r30, r18
    25de:	f3 1f       	adc	r31, r19
    25e0:	eb 5a       	subi	r30, 0xAB	; 171
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	11 92       	st	Z+, r1
    25e6:	11 92       	st	Z+, r1
    25e8:	11 92       	st	Z+, r1
    25ea:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    25ec:	10 82       	st	Z, r1
    25ee:	11 82       	std	Z+1, r1	; 0x01
    25f0:	12 82       	std	Z+2, r1	; 0x02
    25f2:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    25f4:	35 97       	sbiw	r30, 0x05	; 5
    25f6:	90 81       	ld	r25, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    25f8:	90 7e       	andi	r25, 0xE0	; 224
    25fa:	90 83       	st	Z, r25
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    25fc:	0e 94 a3 12 	call	0x2546	; 0x2546 <Timebase_DownCounter_Set_Securely>
} 
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	08 95       	ret

00002606 <Timebase_DownCounter_Update>:

void Timebase_DownCounter_Update(uint8_t window){
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    260e:	a0 91 43 01 	lds	r26, 0x0143
    2612:	b0 91 44 01 	lds	r27, 0x0144
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	2d e0       	ldi	r18, 0x0D	; 13
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	82 9f       	mul	r24, r18
    261e:	f0 01       	movw	r30, r0
    2620:	83 9f       	mul	r24, r19
    2622:	f0 0d       	add	r31, r0
    2624:	92 9f       	mul	r25, r18
    2626:	f0 0d       	add	r31, r0
    2628:	11 24       	eor	r1, r1
    262a:	ea 0f       	add	r30, r26
    262c:	fb 1f       	adc	r31, r27
    262e:	8f 01       	movw	r16, r30
    2630:	0c 5a       	subi	r16, 0xAC	; 172
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	e8 01       	movw	r28, r16
    2636:	88 81       	ld	r24, Y
    2638:	86 95       	lsr	r24
    263a:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    263c:	81 30       	cpi	r24, 0x01	; 1
    263e:	69 f5       	brne	.+90     	; 0x269a <Timebase_DownCounter_Update+0x94>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    2640:	19 96       	adiw	r26, 0x09	; 9
    2642:	2d 91       	ld	r18, X+
    2644:	3d 91       	ld	r19, X+
    2646:	4d 91       	ld	r20, X+
    2648:	5c 91       	ld	r21, X
    264a:	1c 97       	sbiw	r26, 0x0c	; 12
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    264c:	bf 01       	movw	r22, r30
    264e:	6b 5a       	subi	r22, 0xAB	; 171
    2650:	7f 4f       	sbci	r23, 0xFF	; 255
    2652:	eb 01       	movw	r28, r22
    2654:	88 81       	ld	r24, Y
    2656:	99 81       	ldd	r25, Y+1	; 0x01
    2658:	aa 81       	ldd	r26, Y+2	; 0x02
    265a:	bb 81       	ldd	r27, Y+3	; 0x03
    265c:	82 1b       	sub	r24, r18
    265e:	93 0b       	sbc	r25, r19
    2660:	a4 0b       	sbc	r26, r20
    2662:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2664:	e7 5a       	subi	r30, 0xA7	; 167
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 83       	st	Z, r24
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	a2 83       	std	Z+2, r26	; 0x02
    266e:	b3 83       	std	Z+3, r27	; 0x03
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    2670:	18 16       	cp	r1, r24
    2672:	19 06       	cpc	r1, r25
    2674:	1a 06       	cpc	r1, r26
    2676:	1b 06       	cpc	r1, r27
    2678:	34 f1       	brlt	.+76     	; 0x26c6 <Timebase_DownCounter_Update+0xc0>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    267a:	db 01       	movw	r26, r22
    267c:	1d 92       	st	X+, r1
    267e:	1d 92       	st	X+, r1
    2680:	1d 92       	st	X+, r1
    2682:	1c 92       	st	X, r1
    2684:	13 97       	sbiw	r26, 0x03	; 3
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2686:	10 82       	st	Z, r1
    2688:	11 82       	std	Z+1, r1	; 0x01
    268a:	12 82       	std	Z+2, r1	; 0x02
    268c:	13 82       	std	Z+3, r1	; 0x03
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    268e:	e8 01       	movw	r28, r16
    2690:	88 81       	ld	r24, Y
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2692:	80 7e       	andi	r24, 0xE0	; 224
    2694:	88 60       	ori	r24, 0x08	; 8
    2696:	88 83       	st	Y, r24
    2698:	16 c0       	rjmp	.+44     	; 0x26c6 <Timebase_DownCounter_Update+0xc0>
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	a1 f4       	brne	.+40     	; 0x26c6 <Timebase_DownCounter_Update+0xc0>
  return Timebase->Time.SubSeconds;
}


int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    269e:	19 96       	adiw	r26, 0x09	; 9
    26a0:	8d 91       	ld	r24, X+
    26a2:	9d 91       	ld	r25, X+
    26a4:	0d 90       	ld	r0, X+
    26a6:	bc 91       	ld	r27, X
    26a8:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    26aa:	e7 5a       	subi	r30, 0xA7	; 167
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	20 81       	ld	r18, Z
    26b0:	31 81       	ldd	r19, Z+1	; 0x01
    26b2:	42 81       	ldd	r20, Z+2	; 0x02
    26b4:	53 81       	ldd	r21, Z+3	; 0x03
    26b6:	82 0f       	add	r24, r18
    26b8:	93 1f       	adc	r25, r19
    26ba:	a4 1f       	adc	r26, r20
    26bc:	b5 1f       	adc	r27, r21
    26be:	b2 93       	st	-Z, r27
    26c0:	a2 93       	st	-Z, r26
    26c2:	92 93       	st	-Z, r25
    26c4:	82 93       	st	-Z, r24
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	1f 91       	pop	r17
    26cc:	0f 91       	pop	r16
    26ce:	08 95       	ret

000026d0 <Timebase_DownCounter_Expired>:

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	e0 91 43 01 	lds	r30, 0x0143
    26d6:	f0 91 44 01 	lds	r31, 0x0144
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	2d e0       	ldi	r18, 0x0D	; 13
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	bc 01       	movw	r22, r24
    26e2:	62 9f       	mul	r22, r18
    26e4:	c0 01       	movw	r24, r0
    26e6:	63 9f       	mul	r22, r19
    26e8:	90 0d       	add	r25, r0
    26ea:	72 9f       	mul	r23, r18
    26ec:	90 0d       	add	r25, r0
    26ee:	11 24       	eor	r1, r1
    26f0:	e8 0f       	add	r30, r24
    26f2:	f9 1f       	adc	r31, r25
    26f4:	ec 5a       	subi	r30, 0xAC	; 172
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 81       	ld	r24, Z
    26fa:	86 95       	lsr	r24
    26fc:	8f 70       	andi	r24, 0x0F	; 15
    26fe:	84 30       	cpi	r24, 0x04	; 4
    2700:	09 f4       	brne	.+2      	; 0x2704 <Timebase_DownCounter_Expired+0x34>
    2702:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2704:	84 2f       	mov	r24, r20
    2706:	08 95       	ret

00002708 <Timebase_DownCounter_Expired_Event>:

/*****************************DownCounter Functions Start****************************/

#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    2708:	e0 91 43 01 	lds	r30, 0x0143
    270c:	f0 91 44 01 	lds	r31, 0x0144
    2710:	90 e0       	ldi	r25, 0x00	; 0
    return TIMEBASE_FALSE;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    2712:	2d e0       	ldi	r18, 0x0D	; 13
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	ac 01       	movw	r20, r24
    2718:	42 9f       	mul	r20, r18
    271a:	c0 01       	movw	r24, r0
    271c:	43 9f       	mul	r20, r19
    271e:	90 0d       	add	r25, r0
    2720:	52 9f       	mul	r21, r18
    2722:	90 0d       	add	r25, r0
    2724:	11 24       	eor	r1, r1
    2726:	e8 0f       	add	r30, r24
    2728:	f9 1f       	adc	r31, r25
    272a:	df 01       	movw	r26, r30
    272c:	ac 5a       	subi	r26, 0xAC	; 172
    272e:	bf 4f       	sbci	r27, 0xFF	; 255
    2730:	8c 91       	ld	r24, X
    2732:	86 95       	lsr	r24
    2734:	8f 70       	andi	r24, 0x0F	; 15
    2736:	84 30       	cpi	r24, 0x04	; 4
    2738:	11 f0       	breq	.+4      	; 0x273e <Timebase_DownCounter_Expired_Event+0x36>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    273e:	eb 5a       	subi	r30, 0xAB	; 171
    2740:	ff 4f       	sbci	r31, 0xFF	; 255
    2742:	11 92       	st	Z+, r1
    2744:	11 92       	st	Z+, r1
    2746:	11 92       	st	Z+, r1
    2748:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    274a:	10 82       	st	Z, r1
    274c:	11 82       	std	Z+1, r1	; 0x01
    274e:	12 82       	std	Z+2, r1	; 0x02
    2750:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    2752:	8c 91       	ld	r24, X
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2754:	80 7e       	andi	r24, 0xE0	; 224
    2756:	8c 93       	st	X, r24
    2758:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    275a:	08 95       	ret

0000275c <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    2760:	c0 91 43 01 	lds	r28, 0x0143
    2764:	d0 91 44 01 	lds	r29, 0x0144
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    276c:	8d e0       	ldi	r24, 0x0D	; 13
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	28 9f       	mul	r18, r24
    2772:	f0 01       	movw	r30, r0
    2774:	29 9f       	mul	r18, r25
    2776:	f0 0d       	add	r31, r0
    2778:	38 9f       	mul	r19, r24
    277a:	f0 0d       	add	r31, r0
    277c:	11 24       	eor	r1, r1
    277e:	ec 0f       	add	r30, r28
    2780:	fd 1f       	adc	r31, r29
    2782:	ec 5a       	subi	r30, 0xAC	; 172
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	e4 55       	subi	r30, 0x54	; 84
    278a:	f0 40       	sbci	r31, 0x00	; 0
    278c:	80 fd       	sbrc	r24, 0
    278e:	25 c0       	rjmp	.+74     	; 0x27da <Timebase_DownCounter_Set_Period_Value_Securely+0x7e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    2790:	e7 5a       	subi	r30, 0xA7	; 167
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	81 91       	ld	r24, Z+
    2796:	91 91       	ld	r25, Z+
    2798:	a1 91       	ld	r26, Z+
    279a:	b1 91       	ld	r27, Z+
    279c:	84 1b       	sub	r24, r20
    279e:	95 0b       	sbc	r25, r21
    27a0:	a6 0b       	sbc	r26, r22
    27a2:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    27a4:	b7 ff       	sbrs	r27, 7
    27a6:	05 c0       	rjmp	.+10     	; 0x27b2 <Timebase_DownCounter_Set_Period_Value_Securely+0x56>
    Timebase->DownCounter[window].PeriodValue = 0;
    27a8:	10 82       	st	Z, r1
    27aa:	11 82       	std	Z+1, r1	; 0x01
    27ac:	12 82       	std	Z+2, r1	; 0x02
    27ae:	13 82       	std	Z+3, r1	; 0x03
    27b0:	04 c0       	rjmp	.+8      	; 0x27ba <Timebase_DownCounter_Set_Period_Value_Securely+0x5e>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    27b2:	80 83       	st	Z, r24
    27b4:	91 83       	std	Z+1, r25	; 0x01
    27b6:	a2 83       	std	Z+2, r26	; 0x02
    27b8:	b3 83       	std	Z+3, r27	; 0x03
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
    27ba:	8d e0       	ldi	r24, 0x0D	; 13
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	28 9f       	mul	r18, r24
    27c0:	f0 01       	movw	r30, r0
    27c2:	29 9f       	mul	r18, r25
    27c4:	f0 0d       	add	r31, r0
    27c6:	38 9f       	mul	r19, r24
    27c8:	f0 0d       	add	r31, r0
    27ca:	11 24       	eor	r1, r1
    27cc:	ec 0f       	add	r30, r28
    27ce:	fd 1f       	adc	r31, r29
    27d0:	ec 5a       	subi	r30, 0xAC	; 172
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	81 60       	ori	r24, 0x01	; 1
    27d8:	80 83       	st	Z, r24
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_RESET){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	08 95       	ret

000027e0 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    27e0:	e0 91 43 01 	lds	r30, 0x0143
    27e4:	f0 91 44 01 	lds	r31, 0x0144
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    27ea:	2d e0       	ldi	r18, 0x0D	; 13
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	ac 01       	movw	r20, r24
    27f0:	42 9f       	mul	r20, r18
    27f2:	c0 01       	movw	r24, r0
    27f4:	43 9f       	mul	r20, r19
    27f6:	90 0d       	add	r25, r0
    27f8:	52 9f       	mul	r21, r18
    27fa:	90 0d       	add	r25, r0
    27fc:	11 24       	eor	r1, r1
    27fe:	e8 0f       	add	r30, r24
    2800:	f9 1f       	adc	r31, r25
    2802:	df 01       	movw	r26, r30
    2804:	a3 5a       	subi	r26, 0xA3	; 163
    2806:	bf 4f       	sbci	r27, 0xFF	; 255
    2808:	e7 5a       	subi	r30, 0xA7	; 167
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	20 81       	ld	r18, Z
    280e:	31 81       	ldd	r19, Z+1	; 0x01
    2810:	42 81       	ldd	r20, Z+2	; 0x02
    2812:	53 81       	ldd	r21, Z+3	; 0x03
    2814:	8d 91       	ld	r24, X+
    2816:	9d 91       	ld	r25, X+
    2818:	0d 90       	ld	r0, X+
    281a:	bc 91       	ld	r27, X
    281c:	a0 2d       	mov	r26, r0
    281e:	28 1b       	sub	r18, r24
    2820:	39 0b       	sbc	r19, r25
    2822:	4a 0b       	sbc	r20, r26
    2824:	5b 0b       	sbc	r21, r27
    2826:	57 ff       	sbrs	r21, 7
    2828:	04 c0       	rjmp	.+8      	; 0x2832 <Timebase_DownCounter_Get_Remaining_Period_Value+0x52>
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    2832:	b9 01       	movw	r22, r18
    2834:	ca 01       	movw	r24, r20
    2836:	08 95       	ret

00002838 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    283c:	c0 91 43 01 	lds	r28, 0x0143
    2840:	d0 91 44 01 	lds	r29, 0x0144
    2844:	68 2f       	mov	r22, r24
    2846:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    2848:	8d e0       	ldi	r24, 0x0D	; 13
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	68 9f       	mul	r22, r24
    284e:	f0 01       	movw	r30, r0
    2850:	69 9f       	mul	r22, r25
    2852:	f0 0d       	add	r31, r0
    2854:	78 9f       	mul	r23, r24
    2856:	f0 0d       	add	r31, r0
    2858:	11 24       	eor	r1, r1
    285a:	ec 0f       	add	r30, r28
    285c:	fd 1f       	adc	r31, r29
    285e:	df 01       	movw	r26, r30
    2860:	a3 5a       	subi	r26, 0xA3	; 163
    2862:	bf 4f       	sbci	r27, 0xFF	; 255
    2864:	e7 5a       	subi	r30, 0xA7	; 167
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	20 81       	ld	r18, Z
    286a:	31 81       	ldd	r19, Z+1	; 0x01
    286c:	42 81       	ldd	r20, Z+2	; 0x02
    286e:	53 81       	ldd	r21, Z+3	; 0x03
    2870:	8d 91       	ld	r24, X+
    2872:	9d 91       	ld	r25, X+
    2874:	0d 90       	ld	r0, X+
    2876:	bc 91       	ld	r27, X
    2878:	a0 2d       	mov	r26, r0
    287a:	28 1b       	sub	r18, r24
    287c:	39 0b       	sbc	r19, r25
    287e:	4a 0b       	sbc	r20, r26
    2880:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    2882:	57 fd       	sbrc	r21, 7
    2884:	07 c0       	rjmp	.+14     	; 0x2894 <Timebase_DownCounter_Period_Value_Expired+0x5c>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && (Timebase_DownCounter_Get_Period_Flag( window ) == FLAG_STATE_SET) ){
    2886:	21 15       	cp	r18, r1
    2888:	31 05       	cpc	r19, r1
    288a:	41 05       	cpc	r20, r1
    288c:	51 05       	cpc	r21, r1
    288e:	11 f0       	breq	.+4      	; 0x2894 <Timebase_DownCounter_Period_Value_Expired+0x5c>
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	14 c0       	rjmp	.+40     	; 0x28bc <Timebase_DownCounter_Period_Value_Expired+0x84>
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	8d e0       	ldi	r24, 0x0D	; 13
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	ac 01       	movw	r20, r24
    289c:	64 9f       	mul	r22, r20
    289e:	c0 01       	movw	r24, r0
    28a0:	65 9f       	mul	r22, r21
    28a2:	90 0d       	add	r25, r0
    28a4:	74 9f       	mul	r23, r20
    28a6:	90 0d       	add	r25, r0
    28a8:	11 24       	eor	r1, r1
    28aa:	c8 0f       	add	r28, r24
    28ac:	d9 1f       	adc	r29, r25
    28ae:	cc 5a       	subi	r28, 0xAC	; 172
    28b0:	df 4f       	sbci	r29, 0xFF	; 255
    28b2:	88 81       	ld	r24, Y
    28b4:	80 ff       	sbrs	r24, 0
    28b6:	21 e0       	ldi	r18, 0x01	; 1
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	28 27       	eor	r18, r24
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    28bc:	82 2f       	mov	r24, r18
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	08 95       	ret

000028c4 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    28c4:	1f 93       	push	r17
    28c6:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == TIMEBASE_TRUE){
    28c8:	0e 94 1c 14 	call	0x2838	; 0x2838 <Timebase_DownCounter_Period_Value_Expired>
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	11 f0       	breq	.+4      	; 0x28d4 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	18 c0       	rjmp	.+48     	; 0x2904 <Timebase_DownCounter_Period_Value_Expired_Event+0x40>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    28d4:	e0 91 43 01 	lds	r30, 0x0143
    28d8:	f0 91 44 01 	lds	r31, 0x0144
    28dc:	21 2f       	mov	r18, r17
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8d e0       	ldi	r24, 0x0D	; 13
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	ac 01       	movw	r20, r24
    28e6:	24 9f       	mul	r18, r20
    28e8:	c0 01       	movw	r24, r0
    28ea:	25 9f       	mul	r18, r21
    28ec:	90 0d       	add	r25, r0
    28ee:	34 9f       	mul	r19, r20
    28f0:	90 0d       	add	r25, r0
    28f2:	11 24       	eor	r1, r1
    28f4:	e8 0f       	add	r30, r24
    28f6:	f9 1f       	adc	r31, r25
    28f8:	ec 5a       	subi	r30, 0xAC	; 172
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	8e 7f       	andi	r24, 0xFE	; 254
    2900:	80 83       	st	Z, r24
    2902:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return TIMEBASE_TRUE;
  }else{
    return TIMEBASE_FALSE;
  }
}
    2904:	1f 91       	pop	r17
    2906:	08 95       	ret

00002908 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	0e 94 03 13 	call	0x2606	; 0x2606 <Timebase_DownCounter_Update>
  }
}
    290e:	08 95       	ret

00002910 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    2910:	e0 91 43 01 	lds	r30, 0x0143
    2914:	f0 91 44 01 	lds	r31, 0x0144
    2918:	eb 5a       	subi	r30, 0xAB	; 171
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	11 92       	st	Z+, r1
    291e:	11 92       	st	Z+, r1
    2920:	11 92       	st	Z+, r1
    2922:	11 92       	st	Z+, r1
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    2924:	10 82       	st	Z, r1
    2926:	11 82       	std	Z+1, r1	; 0x01
    2928:	12 82       	std	Z+2, r1	; 0x02
    292a:	13 82       	std	Z+3, r1	; 0x03
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    292c:	35 97       	sbiw	r30, 0x05	; 5
    292e:	80 81       	ld	r24, Z
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_SET;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = FLAG_STATE_RESET;
    2930:	80 7e       	andi	r24, 0xE0	; 224
    2932:	80 83       	st	Z, r24

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    2934:	08 95       	ret

00002936 <Timebase_Reset>:

/*******************************Common Functions Start******************************/

void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    2936:	0e 94 8c 0c 	call	0x1918	; 0x1918 <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase_DownCounter_SS_Reset_All();
    293a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <Timebase_DownCounter_SS_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    293e:	0e 94 88 14 	call	0x2910	; 0x2910 <Timebase_DownCounter_Reset_All>
  #endif
  
}
    2942:	08 95       	ret

00002944 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    294a:	0e 94 c9 00 	call	0x192	; 0x192 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    294e:	c8 01       	movw	r24, r16
    2950:	0e 94 94 01 	call	0x328	; 0x328 <Timebase_Timer_Config>
  Timebase_Reset();
    2954:	0e 94 9b 14 	call	0x2936	; 0x2936 <Timebase_Reset>
}
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	08 95       	ret

0000295e <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & UPCOUNTER_SS_UPDATE_REQ){
    295e:	e0 91 43 01 	lds	r30, 0x0143
    2962:	f0 91 44 01 	lds	r31, 0x0144
    2966:	84 89       	ldd	r24, Z+20	; 0x14
    2968:	82 ff       	sbrs	r24, 2
    296a:	0b c0       	rjmp	.+22     	; 0x2982 <Timebase_Main_Loop_Executables+0x24>
    Timebase_Timer_Sync_With_Shadow_Variables();
    296c:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_SS_Update_All();
    2970:	0e 94 80 08 	call	0x1100	; 0x1100 <Timebase_UpCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_SS_UPDATE_REQ;
    2974:	e0 91 43 01 	lds	r30, 0x0143
    2978:	f0 91 44 01 	lds	r31, 0x0144
    297c:	84 89       	ldd	r24, Z+20	; 0x14
    297e:	8b 7f       	andi	r24, 0xFB	; 251
    2980:	84 8b       	std	Z+20, r24	; 0x14
  }
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  if(Timebase->UpdateRequest & UPCOUNTER_UPDATE_REQ){
    2982:	e0 91 43 01 	lds	r30, 0x0143
    2986:	f0 91 44 01 	lds	r31, 0x0144
    298a:	84 89       	ldd	r24, Z+20	; 0x14
    298c:	80 ff       	sbrs	r24, 0
    298e:	0b c0       	rjmp	.+22     	; 0x29a6 <Timebase_Main_Loop_Executables+0x48>
    Timebase_Timer_Sync_With_Shadow_Variables();
    2990:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_UpCounter_Update_All();
    2994:	0e 94 88 0c 	call	0x1910	; 0x1910 <Timebase_UpCounter_Update_All>
	Timebase->UpdateRequest &=~ UPCOUNTER_UPDATE_REQ;
    2998:	e0 91 43 01 	lds	r30, 0x0143
    299c:	f0 91 44 01 	lds	r31, 0x0144
    29a0:	84 89       	ldd	r24, Z+20	; 0x14
    29a2:	8e 7f       	andi	r24, 0xFE	; 254
    29a4:	84 8b       	std	Z+20, r24	; 0x14
  #endif
  
  
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  if(Timebase->UpdateRequest & DOWNCOUNTER_SS_UPDATE_REQ){
    29a6:	e0 91 43 01 	lds	r30, 0x0143
    29aa:	f0 91 44 01 	lds	r31, 0x0144
    29ae:	84 89       	ldd	r24, Z+20	; 0x14
    29b0:	83 ff       	sbrs	r24, 3
    29b2:	0b c0       	rjmp	.+22     	; 0x29ca <Timebase_Main_Loop_Executables+0x6c>
    Timebase_Timer_Sync_With_Shadow_Variables();
    29b4:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_SS_Update_All();
    29b8:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <Timebase_DownCounter_SS_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_SS_UPDATE_REQ;
    29bc:	e0 91 43 01 	lds	r30, 0x0143
    29c0:	f0 91 44 01 	lds	r31, 0x0144
    29c4:	84 89       	ldd	r24, Z+20	; 0x14
    29c6:	87 7f       	andi	r24, 0xF7	; 247
    29c8:	84 8b       	std	Z+20, r24	; 0x14
  }
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER
  if(Timebase->UpdateRequest & DOWNCOUNTER_UPDATE_REQ){
    29ca:	e0 91 43 01 	lds	r30, 0x0143
    29ce:	f0 91 44 01 	lds	r31, 0x0144
    29d2:	84 89       	ldd	r24, Z+20	; 0x14
    29d4:	81 ff       	sbrs	r24, 1
    29d6:	0b c0       	rjmp	.+22     	; 0x29ee <Timebase_Main_Loop_Executables+0x90>
    Timebase_Timer_Sync_With_Shadow_Variables();
    29d8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <Timebase_Timer_Sync_With_Shadow_Variables>
    Timebase_DownCounter_Update_All();
    29dc:	0e 94 84 14 	call	0x2908	; 0x2908 <Timebase_DownCounter_Update_All>
	Timebase->UpdateRequest &=~ DOWNCOUNTER_UPDATE_REQ;
    29e0:	e0 91 43 01 	lds	r30, 0x0143
    29e4:	f0 91 44 01 	lds	r31, 0x0144
    29e8:	84 89       	ldd	r24, Z+20	; 0x14
    29ea:	8d 7f       	andi	r24, 0xFD	; 253
    29ec:	84 8b       	std	Z+20, r24	; 0x14
  }
  #endif
  Timebase->Time.VariablesSync = TIMEBASE_FALSE;
    29ee:	e0 91 43 01 	lds	r30, 0x0143
    29f2:	f0 91 44 01 	lds	r31, 0x0144
    29f6:	13 8a       	std	Z+19, r1	; 0x13
}
    29f8:	08 95       	ret

000029fa <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSecondsShadow++;
    29fa:	e0 91 43 01 	lds	r30, 0x0143
    29fe:	f0 91 44 01 	lds	r31, 0x0144
    2a02:	85 85       	ldd	r24, Z+13	; 0x0d
    2a04:	96 85       	ldd	r25, Z+14	; 0x0e
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	96 87       	std	Z+14, r25	; 0x0e
    2a0a:	85 87       	std	Z+13, r24	; 0x0d
  
  #ifdef TIMEBASE_UPCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= UPCOUNTER_SS_UPDATE_REQ;
    2a0c:	84 89       	ldd	r24, Z+20	; 0x14
    2a0e:	84 60       	ori	r24, 0x04	; 4
    2a10:	84 8b       	std	Z+20, r24	; 0x14
  #endif
  
  #ifdef TIMEBASE_DOWNCOUNTER_SUBSECONDS
  Timebase->UpdateRequest |= DOWNCOUNTER_SS_UPDATE_REQ;
    2a12:	84 89       	ldd	r24, Z+20	; 0x14
    2a14:	88 60       	ori	r24, 0x08	; 8
    2a16:	84 8b       	std	Z+20, r24	; 0x14
  #endif
  
  if(Timebase->Time.SubSecondsShadow >= Timebase->Config.UpdateRate){
    2a18:	25 85       	ldd	r18, Z+13	; 0x0d
    2a1a:	36 85       	ldd	r19, Z+14	; 0x0e
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	28 17       	cp	r18, r24
    2a22:	39 07       	cpc	r19, r25
    2a24:	98 f0       	brcs	.+38     	; 0x2a4c <Timebase_ISR_Executables+0x52>
    Timebase->Time.SecondsShadow++;
    2a26:	87 85       	ldd	r24, Z+15	; 0x0f
    2a28:	90 89       	ldd	r25, Z+16	; 0x10
    2a2a:	a1 89       	ldd	r26, Z+17	; 0x11
    2a2c:	b2 89       	ldd	r27, Z+18	; 0x12
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	a1 1d       	adc	r26, r1
    2a32:	b1 1d       	adc	r27, r1
    2a34:	87 87       	std	Z+15, r24	; 0x0f
    2a36:	90 8b       	std	Z+16, r25	; 0x10
    2a38:	a1 8b       	std	Z+17, r26	; 0x11
    2a3a:	b2 8b       	std	Z+18, r27	; 0x12
    Timebase->Time.SubSecondsShadow = 0;
    2a3c:	16 86       	std	Z+14, r1	; 0x0e
    2a3e:	15 86       	std	Z+13, r1	; 0x0d
	
	#ifdef TIMEBASE_UPCOUNTER
    Timebase->UpdateRequest |= UPCOUNTER_UPDATE_REQ;
    2a40:	84 89       	ldd	r24, Z+20	; 0x14
    2a42:	81 60       	ori	r24, 0x01	; 1
    2a44:	84 8b       	std	Z+20, r24	; 0x14
    #endif
	
	#ifdef TIMEBASE_DOWNCOUNTER
    Timebase->UpdateRequest |= DOWNCOUNTER_UPDATE_REQ;
    2a46:	84 89       	ldd	r24, Z+20	; 0x14
    2a48:	82 60       	ori	r24, 0x02	; 2
    2a4a:	84 8b       	std	Z+20, r24	; 0x14
    2a4c:	08 95       	ret

00002a4e <__vector_16>:



/*************************************ISR Start************************************/

ISR(TIMER0_OVF_vect){
    2a4e:	1f 92       	push	r1
    2a50:	0f 92       	push	r0
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	0f 92       	push	r0
    2a56:	11 24       	eor	r1, r1
    2a58:	2f 93       	push	r18
    2a5a:	3f 93       	push	r19
    2a5c:	4f 93       	push	r20
    2a5e:	5f 93       	push	r21
    2a60:	6f 93       	push	r22
    2a62:	7f 93       	push	r23
    2a64:	8f 93       	push	r24
    2a66:	9f 93       	push	r25
    2a68:	af 93       	push	r26
    2a6a:	bf 93       	push	r27
    2a6c:	ef 93       	push	r30
    2a6e:	ff 93       	push	r31
  TCNT0  = Timebase->Time.OVFUpdateValue;
    2a70:	e0 91 43 01 	lds	r30, 0x0143
    2a74:	f0 91 44 01 	lds	r31, 0x0144
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	86 bd       	out	0x26, r24	; 38
  Timebase_ISR_Executables();
    2a7c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <Timebase_ISR_Executables>
}
    2a80:	ff 91       	pop	r31
    2a82:	ef 91       	pop	r30
    2a84:	bf 91       	pop	r27
    2a86:	af 91       	pop	r26
    2a88:	9f 91       	pop	r25
    2a8a:	8f 91       	pop	r24
    2a8c:	7f 91       	pop	r23
    2a8e:	6f 91       	pop	r22
    2a90:	5f 91       	pop	r21
    2a92:	4f 91       	pop	r20
    2a94:	3f 91       	pop	r19
    2a96:	2f 91       	pop	r18
    2a98:	0f 90       	pop	r0
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	0f 90       	pop	r0
    2a9e:	1f 90       	pop	r1
    2aa0:	18 95       	reti

00002aa2 <UART_Struct_Init>:




void UART_Struct_Init(void){
  UART.Error=0;
    2aa2:	10 92 14 01 	sts	0x0114, r1
    2aa6:	e5 e1       	ldi	r30, 0x15	; 21
    2aa8:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint8_t i=0;i<8;i++){
    UART.Digits[i]=0;
    2aaa:	11 92       	st	Z+, r1



void UART_Struct_Init(void){
  UART.Error=0;
  for(uint8_t i=0;i<8;i++){
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	ed 31       	cpi	r30, 0x1D	; 29
    2ab0:	f8 07       	cpc	r31, r24
    2ab2:	d9 f7       	brne	.-10     	; 0x2aaa <UART_Struct_Init+0x8>
    UART.Digits[i]=0;
  }
  UART.InputNumberDigits=0;
    2ab4:	10 82       	st	Z, r1
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
    2ab6:	11 82       	std	Z+1, r1	; 0x01
  UART.BufferSize=UART_BUFFER_SIZE;
    2ab8:	80 e2       	ldi	r24, 0x20	; 32
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	93 a3       	std	Z+35, r25	; 0x23
    2abe:	82 a3       	std	Z+34, r24	; 0x22
  UART.BufferIndex=0;
    2ac0:	15 a2       	std	Z+37, r1	; 0x25
    2ac2:	14 a2       	std	Z+36, r1	; 0x24
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	04 c0       	rjmp	.+8      	; 0x2ad0 <UART_Struct_Init+0x2e>
  for(uint8_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0;
    2ac8:	ec 5e       	subi	r30, 0xEC	; 236
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	13 86       	std	Z+11, r1	; 0x0b
    
  #ifdef UART_ENABLE_RX_INT
  UART.LastByteReceived=0;
  UART.BufferSize=UART_BUFFER_SIZE;
  UART.BufferIndex=0;
  for(uint8_t i=0;i<UART.BufferSize;i++){
    2ace:	2f 5f       	subi	r18, 0xFF	; 255
    2ad0:	80 91 3f 01 	lds	r24, 0x013F
    2ad4:	90 91 40 01 	lds	r25, 0x0140
    2ad8:	e2 2f       	mov	r30, r18
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	e8 17       	cp	r30, r24
    2ade:	f9 07       	cpc	r31, r25
    2ae0:	98 f3       	brcs	.-26     	; 0x2ac8 <UART_Struct_Init+0x26>
    UART.Buffer[i]=0;
  }
  #endif
  
}
    2ae2:	08 95       	ret

00002ae4 <UART_Config_GPIO>:


void UART_Config_GPIO(void){
	
}
    2ae4:	08 95       	ret

00002ae6 <UART_Config_Clock>:

void UART_Config_Clock(void){
  
}
    2ae6:	08 95       	ret

00002ae8 <UART_Config_BAUD_Rate>:

void UART_Config_BAUD_Rate(uint32_t baud_rate){
    2ae8:	9b 01       	movw	r18, r22
    2aea:	ac 01       	movw	r20, r24
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/baud_rate)-1 ;
    2aec:	60 e6       	ldi	r22, 0x60	; 96
    2aee:	73 ee       	ldi	r23, 0xE3	; 227
    2af0:	86 e1       	ldi	r24, 0x16	; 22
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodsi4>
    2af8:	21 50       	subi	r18, 0x01	; 1
    2afa:	30 40       	sbci	r19, 0x00	; 0
    2afc:	40 40       	sbci	r20, 0x00	; 0
    2afe:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    2b00:	e0 ec       	ldi	r30, 0xC0	; 192
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	82 60       	ori	r24, 0x02	; 2
    2b08:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/baud_rate)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
    2b0a:	bb 27       	eor	r27, r27
    2b0c:	a5 2f       	mov	r26, r21
    2b0e:	94 2f       	mov	r25, r20
    2b10:	83 2f       	mov	r24, r19
    2b12:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
    2b16:	20 93 c4 00 	sts	0x00C4, r18
}
    2b1a:	08 95       	ret

00002b1c <UART_Config_Transmitter>:


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    2b1c:	e1 ec       	ldi	r30, 0xC1	; 193
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	88 60       	ori	r24, 0x08	; 8
    2b24:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2b26:	86 e0       	ldi	r24, 0x06	; 6
    2b28:	80 93 c2 00 	sts	0x00C2, r24
}
    2b2c:	08 95       	ret

00002b2e <UART_Config_Receiver>:


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    2b2e:	e1 ec       	ldi	r30, 0xC1	; 193
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	80 61       	ori	r24, 0x10	; 16
    2b36:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2b38:	86 e0       	ldi	r24, 0x06	; 6
    2b3a:	80 93 c2 00 	sts	0x00C2, r24
}
    2b3e:	08 95       	ret

00002b40 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    2b40:	e1 ec       	ldi	r30, 0xC1	; 193
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	80 81       	ld	r24, Z
    2b46:	80 68       	ori	r24, 0x80	; 128
    2b48:	80 83       	st	Z, r24
  sei();
    2b4a:	78 94       	sei
}
    2b4c:	08 95       	ret

00002b4e <UART_Transmit_Byte>:





void UART_Transmit_Byte(uint8_t val){
    2b4e:	98 2f       	mov	r25, r24
  while(!(UCSR0A & (1<<UDRE0)));
    2b50:	80 91 c0 00 	lds	r24, 0x00C0
    2b54:	85 ff       	sbrs	r24, 5
    2b56:	fc cf       	rjmp	.-8      	; 0x2b50 <UART_Transmit_Byte+0x2>
  UDR0=val;
    2b58:	90 93 c6 00 	sts	0x00C6, r25
}
    2b5c:	08 95       	ret

00002b5e <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	0f 92       	push	r0
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
    2b68:	19 82       	std	Y+1, r1	; 0x01
  if( UCSR0A & (1<<FE0) ){
    2b6a:	80 91 c0 00 	lds	r24, 0x00C0
    2b6e:	84 ff       	sbrs	r24, 4
    2b70:	05 c0       	rjmp	.+10     	; 0x2b7c <UART_Receive_Byte+0x1e>
    val=UDR0;
    2b72:	80 91 c6 00 	lds	r24, 0x00C6
    2b76:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	08 c0       	rjmp	.+16     	; 0x2b8c <UART_Receive_Byte+0x2e>
  }else if(UCSR0A & (1<<DOR0) ){
    2b7c:	80 91 c0 00 	lds	r24, 0x00C0
    2b80:	83 ff       	sbrs	r24, 3
    2b82:	07 c0       	rjmp	.+14     	; 0x2b92 <UART_Receive_Byte+0x34>
    val=UDR0;
    2b84:	80 91 c6 00 	lds	r24, 0x00C6
    2b88:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
    2b8a:	82 e0       	ldi	r24, 0x02	; 2
    2b8c:	80 93 14 01 	sts	0x0114, r24
    2b90:	05 c0       	rjmp	.+10     	; 0x2b9c <UART_Receive_Byte+0x3e>
  }else{
    val=UDR0;
    2b92:	80 91 c6 00 	lds	r24, 0x00C6
    2b96:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
    2b98:	10 92 14 01 	sts	0x0114, r1
  }
  return val;
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <UART_Last_Received_Byte>:

uint8_t UART_Last_Received_Byte(void){
  return UART.LastByteReceived;
    2ba6:	80 91 1e 01 	lds	r24, 0x011E
}
    2baa:	08 95       	ret

00002bac <UART_Reset_Last_Received_Byte>:

void UART_Reset_Last_Received_Byte(void){
  UART.LastByteReceived = 0;
    2bac:	10 92 1e 01 	sts	0x011E, r1
}
    2bb0:	08 95       	ret

00002bb2 <UART_Transmit_Byte_Hex>:




void UART_Transmit_Byte_Hex(uint32_t val){
    2bb2:	1f 93       	push	r17
    2bb4:	cf 93       	push	r28
    2bb6:	df 93       	push	r29
    2bb8:	ab 01       	movw	r20, r22
    2bba:	bc 01       	movw	r22, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    2bbc:	4f 3f       	cpi	r20, 0xFF	; 255
    2bbe:	51 05       	cpc	r21, r1
    2bc0:	61 05       	cpc	r22, r1
    2bc2:	71 05       	cpc	r23, r1
    2bc4:	09 f0       	breq	.+2      	; 0x2bc8 <UART_Transmit_Byte_Hex+0x16>
    2bc6:	28 f4       	brcc	.+10     	; 0x2bd2 <UART_Transmit_Byte_Hex+0x20>
    2bc8:	e8 e0       	ldi	r30, 0x08	; 8
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	c2 e0       	ldi	r28, 0x02	; 2
    2bce:	d0 e0       	ldi	r29, 0x00	; 0
    2bd0:	11 c0       	rjmp	.+34     	; 0x2bf4 <UART_Transmit_Byte_Hex+0x42>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    2bd2:	40 30       	cpi	r20, 0x00	; 0
    2bd4:	80 e0       	ldi	r24, 0x00	; 0
    2bd6:	58 07       	cpc	r21, r24
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	68 07       	cpc	r22, r24
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	78 07       	cpc	r23, r24
    2be0:	28 f0       	brcs	.+10     	; 0x2bec <UART_Transmit_Byte_Hex+0x3a>
    2be2:	e0 e2       	ldi	r30, 0x20	; 32
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	c8 e0       	ldi	r28, 0x08	; 8
    2be8:	d0 e0       	ldi	r29, 0x00	; 0
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <UART_Transmit_Byte_Hex+0x42>
    2bec:	e0 e1       	ldi	r30, 0x10	; 16
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	c4 e0       	ldi	r28, 0x04	; 4
    2bf2:	d0 e0       	ldi	r29, 0x00	; 0




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2bf4:	80 91 c0 00 	lds	r24, 0x00C0
    2bf8:	85 ff       	sbrs	r24, 5
    2bfa:	fc cf       	rjmp	.-8      	; 0x2bf4 <UART_Transmit_Byte_Hex+0x42>
  UDR0=val;
    2bfc:	80 e3       	ldi	r24, 0x30	; 48
    2bfe:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2c02:	80 91 c0 00 	lds	r24, 0x00C0
    2c06:	85 ff       	sbrs	r24, 5
    2c08:	fc cf       	rjmp	.-8      	; 0x2c02 <UART_Transmit_Byte_Hex+0x50>
  UDR0=val;
    2c0a:	88 e7       	ldi	r24, 0x78	; 120
    2c0c:	80 93 c6 00 	sts	0x00C6, r24
    2c10:	10 e0       	ldi	r17, 0x00	; 0
    2c12:	1f c0       	rjmp	.+62     	; 0x2c52 <UART_Transmit_Byte_Hex+0xa0>
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    2c14:	34 97       	sbiw	r30, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    2c16:	db 01       	movw	r26, r22
    2c18:	ca 01       	movw	r24, r20
    2c1a:	0e 2e       	mov	r0, r30
    2c1c:	04 c0       	rjmp	.+8      	; 0x2c26 <UART_Transmit_Byte_Hex+0x74>
    2c1e:	b6 95       	lsr	r27
    2c20:	a7 95       	ror	r26
    2c22:	97 95       	ror	r25
    2c24:	87 95       	ror	r24
    2c26:	0a 94       	dec	r0
    2c28:	d2 f7       	brpl	.-12     	; 0x2c1e <UART_Transmit_Byte_Hex+0x6c>
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	8f 70       	andi	r24, 0x0F	; 15
    2c2e:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    2c30:	8a 30       	cpi	r24, 0x0A	; 10
    2c32:	91 05       	cpc	r25, r1
    2c34:	20 f0       	brcs	.+8      	; 0x2c3e <UART_Transmit_Byte_Hex+0x8c>
	    hex_digit+=55;
    2c36:	9c 01       	movw	r18, r24
    2c38:	29 5c       	subi	r18, 0xC9	; 201
    2c3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c3c:	03 c0       	rjmp	.+6      	; 0x2c44 <UART_Transmit_Byte_Hex+0x92>
	  }else {
	    hex_digit+=48;
    2c3e:	9c 01       	movw	r18, r24
    2c40:	20 5d       	subi	r18, 0xD0	; 208
    2c42:	3f 4f       	sbci	r19, 0xFF	; 255




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2c44:	80 91 c0 00 	lds	r24, 0x00C0
    2c48:	85 ff       	sbrs	r24, 5
    2c4a:	fc cf       	rjmp	.-8      	; 0x2c44 <UART_Transmit_Byte_Hex+0x92>
  UDR0=val;
    2c4c:	20 93 c6 00 	sts	0x00C6, r18
    index=32;
    loop_counter=8;
  }
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    2c50:	1f 5f       	subi	r17, 0xFF	; 255
    2c52:	81 2f       	mov	r24, r17
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	8c 17       	cp	r24, r28
    2c58:	9d 07       	cpc	r25, r29
    2c5a:	e0 f2       	brcs	.-72     	; 0x2c14 <UART_Transmit_Byte_Hex+0x62>
	  }else {
	    hex_digit+=48;
	  }
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	08 95       	ret

00002c64 <UART_Transmit_Byte_Bin>:


void UART_Transmit_Byte_Bin(uint32_t val){
    2c64:	cf 92       	push	r12
    2c66:	df 92       	push	r13
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	ab 01       	movw	r20, r22
    2c76:	bc 01       	movw	r22, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    2c78:	4f 3f       	cpi	r20, 0xFF	; 255
    2c7a:	51 05       	cpc	r21, r1
    2c7c:	61 05       	cpc	r22, r1
    2c7e:	71 05       	cpc	r23, r1
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <UART_Transmit_Byte_Bin+0x20>
    2c82:	10 f4       	brcc	.+4      	; 0x2c88 <UART_Transmit_Byte_Bin+0x24>
    2c84:	97 e0       	ldi	r25, 0x07	; 7
    2c86:	0b c0       	rjmp	.+22     	; 0x2c9e <UART_Transmit_Byte_Bin+0x3a>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    2c88:	40 30       	cpi	r20, 0x00	; 0
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	58 07       	cpc	r21, r24
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	68 07       	cpc	r22, r24
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	78 07       	cpc	r23, r24
    2c96:	10 f0       	brcs	.+4      	; 0x2c9c <UART_Transmit_Byte_Bin+0x38>
    2c98:	9f e1       	ldi	r25, 0x1F	; 31
    2c9a:	01 c0       	rjmp	.+2      	; 0x2c9e <UART_Transmit_Byte_Bin+0x3a>
    2c9c:	9f e0       	ldi	r25, 0x0F	; 15




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2c9e:	80 91 c0 00 	lds	r24, 0x00C0
    2ca2:	85 ff       	sbrs	r24, 5
    2ca4:	fc cf       	rjmp	.-8      	; 0x2c9e <UART_Transmit_Byte_Bin+0x3a>
  UDR0=val;
    2ca6:	80 e3       	ldi	r24, 0x30	; 48
    2ca8:	80 93 c6 00 	sts	0x00C6, r24




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2cac:	80 91 c0 00 	lds	r24, 0x00C0
    2cb0:	85 ff       	sbrs	r24, 5
    2cb2:	fc cf       	rjmp	.-8      	; 0x2cac <UART_Transmit_Byte_Bin+0x48>
  UDR0=val;
    2cb4:	82 e6       	ldi	r24, 0x62	; 98
    2cb6:	80 93 c6 00 	sts	0x00C6, r24
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
	  UART_Transmit_Byte((uint8_t)hex_digit);
	}
}


void UART_Transmit_Byte_Bin(uint32_t val){
    2cbe:	e9 2f       	mov	r30, r25
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2cc2:	00 e3       	ldi	r16, 0x30	; 48
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2cc4:	11 e3       	ldi	r17, 0x31	; 49
    2cc6:	ef 01       	movw	r28, r30
    2cc8:	21 96       	adiw	r28, 0x01	; 1
    if( (val>>i) & 1){
    2cca:	cf 01       	movw	r24, r30
    2ccc:	82 1b       	sub	r24, r18
    2cce:	93 0b       	sbc	r25, r19
    2cd0:	6a 01       	movw	r12, r20
    2cd2:	7b 01       	movw	r14, r22
    2cd4:	04 c0       	rjmp	.+8      	; 0x2cde <UART_Transmit_Byte_Bin+0x7a>
    2cd6:	f6 94       	lsr	r15
    2cd8:	e7 94       	ror	r14
    2cda:	d7 94       	ror	r13
    2cdc:	c7 94       	ror	r12
    2cde:	8a 95       	dec	r24
    2ce0:	d2 f7       	brpl	.-12     	; 0x2cd6 <UART_Transmit_Byte_Bin+0x72>
    2ce2:	d7 01       	movw	r26, r14
    2ce4:	c6 01       	movw	r24, r12
    2ce6:	81 70       	andi	r24, 0x01	; 1
    2ce8:	90 70       	andi	r25, 0x00	; 0
    2cea:	89 2b       	or	r24, r25
    2cec:	39 f0       	breq	.+14     	; 0x2cfc <UART_Transmit_Byte_Bin+0x98>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2cee:	80 91 c0 00 	lds	r24, 0x00C0
    2cf2:	85 ff       	sbrs	r24, 5
    2cf4:	fc cf       	rjmp	.-8      	; 0x2cee <UART_Transmit_Byte_Bin+0x8a>
  UDR0=val;
    2cf6:	10 93 c6 00 	sts	0x00C6, r17
    2cfa:	06 c0       	rjmp	.+12     	; 0x2d08 <UART_Transmit_Byte_Bin+0xa4>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2cfc:	80 91 c0 00 	lds	r24, 0x00C0
    2d00:	85 ff       	sbrs	r24, 5
    2d02:	fc cf       	rjmp	.-8      	; 0x2cfc <UART_Transmit_Byte_Bin+0x98>
  UDR0=val;
    2d04:	00 93 c6 00 	sts	0x00C6, r16
    2d08:	2f 5f       	subi	r18, 0xFF	; 255
    2d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    loop_counter=31;
  }
  
  UART_Transmit_Byte('0');
  UART_Transmit_Byte('b');
  for(int i=loop_counter; i>=0; i--){
    2d0c:	2c 17       	cp	r18, r28
    2d0e:	3d 07       	cpc	r19, r29
    2d10:	e1 f6       	brne	.-72     	; 0x2cca <UART_Transmit_Byte_Bin+0x66>
      UART_Transmit_Byte( 49 );   
    }else{
      UART_Transmit_Byte( 48 );         
    }
  }
}
    2d12:	df 91       	pop	r29
    2d14:	cf 91       	pop	r28
    2d16:	1f 91       	pop	r17
    2d18:	0f 91       	pop	r16
    2d1a:	ff 90       	pop	r15
    2d1c:	ef 90       	pop	r14
    2d1e:	df 90       	pop	r13
    2d20:	cf 90       	pop	r12
    2d22:	08 95       	ret

00002d24 <UART_Transmit_Text>:


void UART_Transmit_Text(char *str){
    2d24:	ac 01       	movw	r20, r24
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	07 c0       	rjmp	.+14     	; 0x2d38 <UART_Transmit_Text+0x14>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2d2a:	80 91 c0 00 	lds	r24, 0x00C0
    2d2e:	85 ff       	sbrs	r24, 5
    2d30:	fc cf       	rjmp	.-8      	; 0x2d2a <UART_Transmit_Text+0x6>
  UDR0=val;
    2d32:	e0 93 c6 00 	sts	0x00C6, r30

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
    2d36:	2f 5f       	subi	r18, 0xFF	; 255
}


void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    2d38:	fa 01       	movw	r30, r20
    2d3a:	e2 0f       	add	r30, r18
    2d3c:	f1 1d       	adc	r31, r1
    2d3e:	e0 81       	ld	r30, Z
    2d40:	ee 23       	and	r30, r30
    2d42:	99 f7       	brne	.-26     	; 0x2d2a <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
    2d44:	08 95       	ret

00002d46 <UART_Transmit_New_Line>:

void UART_Transmit_New_Line(void){
    UART_Transmit_Text("\r\n");
    2d46:	8f e0       	ldi	r24, 0x0F	; 15
    2d48:	91 e0       	ldi	r25, 0x01	; 1
    2d4a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
}
    2d4e:	08 95       	ret

00002d50 <UART_Transmit_Space>:

void UART_Transmit_Space(void){
    UART_Transmit_Text(" ");
    2d50:	82 e1       	ldi	r24, 0x12	; 18
    2d52:	91 e0       	ldi	r25, 0x01	; 1
    2d54:	0e 94 92 16 	call	0x2d24	; 0x2d24 <UART_Transmit_Text>
}
    2d58:	08 95       	ret

00002d5a <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
    2d5a:	bf 92       	push	r11
    2d5c:	cf 92       	push	r12
    2d5e:	df 92       	push	r13
    2d60:	ef 92       	push	r14
    2d62:	ff 92       	push	r15
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	6b 01       	movw	r12, r22
    2d6a:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    2d6c:	61 15       	cp	r22, r1
    2d6e:	71 05       	cpc	r23, r1
    2d70:	81 05       	cpc	r24, r1
    2d72:	91 05       	cpc	r25, r1
    2d74:	31 f4       	brne	.+12     	; 0x2d82 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
    2d76:	10 92 15 01 	sts	0x0115, r1
    UART.InputNumberDigits=1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	80 93 1d 01 	sts	0x011D, r24
    2d80:	23 c0       	rjmp	.+70     	; 0x2dc8 <UART_Determine_Digit_Numbers+0x6e>
    2d82:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
    2d84:	0b 2d       	mov	r16, r11
    2d86:	10 e0       	ldi	r17, 0x00	; 0
    2d88:	0c 5e       	subi	r16, 0xEC	; 236
    2d8a:	1e 4f       	sbci	r17, 0xFE	; 254
    2d8c:	c7 01       	movw	r24, r14
    2d8e:	b6 01       	movw	r22, r12
    2d90:	2a e0       	ldi	r18, 0x0A	; 10
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodsi4>
    2d9c:	f8 01       	movw	r30, r16
    2d9e:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
    2da0:	c7 01       	movw	r24, r14
    2da2:	b6 01       	movw	r22, r12
    2da4:	2a e0       	ldi	r18, 0x0A	; 10
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e0       	ldi	r20, 0x00	; 0
    2daa:	50 e0       	ldi	r21, 0x00	; 0
    2dac:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__udivmodsi4>
    2db0:	c9 01       	movw	r24, r18
    2db2:	da 01       	movw	r26, r20
    2db4:	6c 01       	movw	r12, r24
    2db6:	7d 01       	movw	r14, r26
      i++;
    2db8:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
    2dba:	c1 14       	cp	r12, r1
    2dbc:	d1 04       	cpc	r13, r1
    2dbe:	e1 04       	cpc	r14, r1
    2dc0:	f1 04       	cpc	r15, r1
    2dc2:	01 f7       	brne	.-64     	; 0x2d84 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
    2dc4:	b0 92 1d 01 	sts	0x011D, r11
  }
}
    2dc8:	1f 91       	pop	r17
    2dca:	0f 91       	pop	r16
    2dcc:	ff 90       	pop	r15
    2dce:	ef 90       	pop	r14
    2dd0:	df 90       	pop	r13
    2dd2:	cf 90       	pop	r12
    2dd4:	bf 90       	pop	r11
    2dd6:	08 95       	ret

00002dd8 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2dd8:	e0 91 1d 01 	lds	r30, 0x011D
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
    2dde:	2e 2f       	mov	r18, r30
    2de0:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
    2de2:	e2 2f       	mov	r30, r18
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	ec 5e       	subi	r30, 0xEC	; 236
    2de8:	fe 4f       	sbci	r31, 0xFE	; 254
    2dea:	91 81       	ldd	r25, Z+1	; 0x01




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2dec:	80 91 c0 00 	lds	r24, 0x00C0
    2df0:	85 ff       	sbrs	r24, 5
    2df2:	fc cf       	rjmp	.-8      	; 0x2dec <UART_Transmit_Number_Digits+0x14>
void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    uint8_t temp=i;
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    2df4:	90 5d       	subi	r25, 0xD0	; 208



void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
  UDR0=val;
    2df6:	90 93 c6 00 	sts	0x00C6, r25
    2dfa:	e2 2f       	mov	r30, r18
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
    2dfc:	ee 23       	and	r30, r30
    2dfe:	79 f7       	brne	.-34     	; 0x2dde <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
    2e00:	08 95       	ret

00002e02 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
    2e02:	9b 01       	movw	r18, r22
    2e04:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2e06:	97 ff       	sbrs	r25, 7
    2e08:	0e c0       	rjmp	.+28     	; 0x2e26 <UART_Transmit_Number+0x24>




void UART_Transmit_Byte(uint8_t val){
  while(!(UCSR0A & (1<<UDRE0)));
    2e0a:	80 91 c0 00 	lds	r24, 0x00C0
    2e0e:	85 ff       	sbrs	r24, 5
    2e10:	fc cf       	rjmp	.-8      	; 0x2e0a <UART_Transmit_Number+0x8>
  UDR0=val;
    2e12:	8d e2       	ldi	r24, 0x2D	; 45
    2e14:	80 93 c6 00 	sts	0x00C6, r24
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
    2e18:	50 95       	com	r21
    2e1a:	40 95       	com	r20
    2e1c:	30 95       	com	r19
    2e1e:	21 95       	neg	r18
    2e20:	3f 4f       	sbci	r19, 0xFF	; 255
    2e22:	4f 4f       	sbci	r20, 0xFF	; 255
    2e24:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
    2e26:	ca 01       	movw	r24, r20
    2e28:	b9 01       	movw	r22, r18
    2e2a:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
    2e2e:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <UART_Transmit_Number_Digits>
}
    2e32:	08 95       	ret

00002e34 <UART_Read_From_Buffer>:



uint8_t UART_Read_From_Buffer(uint16_t index){
  return UART.Buffer[index];
    2e34:	fc 01       	movw	r30, r24
    2e36:	ec 5e       	subi	r30, 0xEC	; 236
    2e38:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3a:	83 85       	ldd	r24, Z+11	; 0x0b
}
    2e3c:	08 95       	ret

00002e3e <UART_Current_Buffer_Index>:


uint16_t UART_Current_Buffer_Index(void){
  return UART.BufferIndex;
    2e3e:	20 91 41 01 	lds	r18, 0x0141
    2e42:	30 91 42 01 	lds	r19, 0x0142
}
    2e46:	c9 01       	movw	r24, r18
    2e48:	08 95       	ret

00002e4a <UART_Flush_Buffer>:



void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
    2e4a:	10 92 14 01 	sts	0x0114, r1
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	06 c0       	rjmp	.+12     	; 0x2e60 <UART_Flush_Buffer+0x16>
  for(uint16_t i=0;i<UART.BufferSize;i++){
    UART.Buffer[i]=0x00;
    2e54:	f9 01       	movw	r30, r18
    2e56:	ec 5e       	subi	r30, 0xEC	; 236
    2e58:	fe 4f       	sbci	r31, 0xFE	; 254
    2e5a:	13 86       	std	Z+11, r1	; 0x0b


void UART_Flush_Buffer(void){
  #ifdef UART_ENABLE_RX_INT
  UART.Error=0x00;
  for(uint16_t i=0;i<UART.BufferSize;i++){
    2e5c:	2f 5f       	subi	r18, 0xFF	; 255
    2e5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e60:	80 91 3f 01 	lds	r24, 0x013F
    2e64:	90 91 40 01 	lds	r25, 0x0140
    2e68:	28 17       	cp	r18, r24
    2e6a:	39 07       	cpc	r19, r25
    2e6c:	98 f3       	brcs	.-26     	; 0x2e54 <UART_Flush_Buffer+0xa>
    UART.Buffer[i]=0x00;
  }
  UART.BufferIndex=0;
    2e6e:	10 92 42 01 	sts	0x0142, r1
    2e72:	10 92 41 01 	sts	0x0141, r1
  #endif
}
    2e76:	08 95       	ret

00002e78 <UART_Interrupt_Service_Routine>:



#ifdef UART_ENABLE_RX_INT
void UART_Interrupt_Service_Routine(void){
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	0f 92       	push	r0
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t received_byte=0;
    2e82:	19 82       	std	Y+1, r1	; 0x01
  received_byte=(uint8_t)UART_Receive_Byte();
    2e84:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <UART_Receive_Byte>
    2e88:	89 83       	std	Y+1, r24	; 0x01
  if(UART.Error==0x00){
    2e8a:	80 91 14 01 	lds	r24, 0x0114
    2e8e:	88 23       	and	r24, r24
    2e90:	19 f5       	brne	.+70     	; 0x2ed8 <UART_Interrupt_Service_Routine+0x60>
    UART.LastByteReceived=received_byte;
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	80 93 1e 01 	sts	0x011E, r24
    UART.Buffer[UART.BufferIndex]=received_byte;
    2e98:	e0 91 41 01 	lds	r30, 0x0141
    2e9c:	f0 91 42 01 	lds	r31, 0x0142
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	ec 5e       	subi	r30, 0xEC	; 236
    2ea4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea6:	83 87       	std	Z+11, r24	; 0x0b
    UART.BufferIndex++;
    2ea8:	80 91 41 01 	lds	r24, 0x0141
    2eac:	90 91 42 01 	lds	r25, 0x0142
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	90 93 42 01 	sts	0x0142, r25
    2eb6:	80 93 41 01 	sts	0x0141, r24

    if(UART.BufferIndex>=UART.BufferSize){
    2eba:	20 91 41 01 	lds	r18, 0x0141
    2ebe:	30 91 42 01 	lds	r19, 0x0142
    2ec2:	80 91 3f 01 	lds	r24, 0x013F
    2ec6:	90 91 40 01 	lds	r25, 0x0140
    2eca:	28 17       	cp	r18, r24
    2ecc:	39 07       	cpc	r19, r25
    2ece:	20 f0       	brcs	.+8      	; 0x2ed8 <UART_Interrupt_Service_Routine+0x60>
      UART.BufferIndex=0;
    2ed0:	10 92 42 01 	sts	0x0142, r1
    2ed4:	10 92 41 01 	sts	0x0141, r1
    }
  }
}
    2ed8:	0f 90       	pop	r0
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <__vector_18>:
#endif


#ifdef UART_ENABLE_RX_INT
ISR(USART_RX_vect){
    2ee0:	1f 92       	push	r1
    2ee2:	0f 92       	push	r0
    2ee4:	0f b6       	in	r0, 0x3f	; 63
    2ee6:	0f 92       	push	r0
    2ee8:	11 24       	eor	r1, r1
    2eea:	2f 93       	push	r18
    2eec:	3f 93       	push	r19
    2eee:	4f 93       	push	r20
    2ef0:	5f 93       	push	r21
    2ef2:	6f 93       	push	r22
    2ef4:	7f 93       	push	r23
    2ef6:	8f 93       	push	r24
    2ef8:	9f 93       	push	r25
    2efa:	af 93       	push	r26
    2efc:	bf 93       	push	r27
    2efe:	ef 93       	push	r30
    2f00:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
    2f02:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <UART_Interrupt_Service_Routine>
}
    2f06:	ff 91       	pop	r31
    2f08:	ef 91       	pop	r30
    2f0a:	bf 91       	pop	r27
    2f0c:	af 91       	pop	r26
    2f0e:	9f 91       	pop	r25
    2f10:	8f 91       	pop	r24
    2f12:	7f 91       	pop	r23
    2f14:	6f 91       	pop	r22
    2f16:	5f 91       	pop	r21
    2f18:	4f 91       	pop	r20
    2f1a:	3f 91       	pop	r19
    2f1c:	2f 91       	pop	r18
    2f1e:	0f 90       	pop	r0
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	0f 90       	pop	r0
    2f24:	1f 90       	pop	r1
    2f26:	18 95       	reti

00002f28 <UART_Init>:
#endif



void UART_Init(uint32_t baud){
    2f28:	ef 92       	push	r14
    2f2a:	ff 92       	push	r15
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	7b 01       	movw	r14, r22
    2f32:	8c 01       	movw	r16, r24
  UART_Struct_Init();
    2f34:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <UART_Struct_Init>
  UART_Config_GPIO();
  UART_Config_Clock();
  UART_Config_BAUD_Rate(baud);
    2f38:	c8 01       	movw	r24, r16
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <UART_Config_BAUD_Rate>
  UBRR0L = UBRR_VAL & 0xFF ;
}


void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
    2f40:	e1 ec       	ldi	r30, 0xC1	; 193
    2f42:	f0 e0       	ldi	r31, 0x00	; 0
    2f44:	80 81       	ld	r24, Z
    2f46:	88 60       	ori	r24, 0x08	; 8
    2f48:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2f4a:	a2 ec       	ldi	r26, 0xC2	; 194
    2f4c:	b0 e0       	ldi	r27, 0x00	; 0
    2f4e:	96 e0       	ldi	r25, 0x06	; 6
    2f50:	9c 93       	st	X, r25
}


void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    2f52:	80 81       	ld	r24, Z
    2f54:	80 61       	ori	r24, 0x10	; 16
    2f56:	80 83       	st	Z, r24
  UCSR0C=(1<<UCSZ00)| (1<<UCSZ01);
    2f58:	9c 93       	st	X, r25
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    2f5a:	80 81       	ld	r24, Z
    2f5c:	80 68       	ori	r24, 0x80	; 128
    2f5e:	80 83       	st	Z, r24
  sei();
    2f60:	78 94       	sei
  
  #ifdef UART_ENABLE_RX_INT
  UART_Config_Receiver_Interrupt();
  #endif
  
  UART_Flush_Buffer();
    2f62:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <UART_Flush_Buffer>
}
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	ff 90       	pop	r15
    2f6c:	ef 90       	pop	r14
    2f6e:	08 95       	ret

00002f70 <__mulsi3>:
    2f70:	62 9f       	mul	r22, r18
    2f72:	d0 01       	movw	r26, r0
    2f74:	73 9f       	mul	r23, r19
    2f76:	f0 01       	movw	r30, r0
    2f78:	82 9f       	mul	r24, r18
    2f7a:	e0 0d       	add	r30, r0
    2f7c:	f1 1d       	adc	r31, r1
    2f7e:	64 9f       	mul	r22, r20
    2f80:	e0 0d       	add	r30, r0
    2f82:	f1 1d       	adc	r31, r1
    2f84:	92 9f       	mul	r25, r18
    2f86:	f0 0d       	add	r31, r0
    2f88:	83 9f       	mul	r24, r19
    2f8a:	f0 0d       	add	r31, r0
    2f8c:	74 9f       	mul	r23, r20
    2f8e:	f0 0d       	add	r31, r0
    2f90:	65 9f       	mul	r22, r21
    2f92:	f0 0d       	add	r31, r0
    2f94:	99 27       	eor	r25, r25
    2f96:	72 9f       	mul	r23, r18
    2f98:	b0 0d       	add	r27, r0
    2f9a:	e1 1d       	adc	r30, r1
    2f9c:	f9 1f       	adc	r31, r25
    2f9e:	63 9f       	mul	r22, r19
    2fa0:	b0 0d       	add	r27, r0
    2fa2:	e1 1d       	adc	r30, r1
    2fa4:	f9 1f       	adc	r31, r25
    2fa6:	bd 01       	movw	r22, r26
    2fa8:	cf 01       	movw	r24, r30
    2faa:	11 24       	eor	r1, r1
    2fac:	08 95       	ret

00002fae <__udivmodsi4>:
    2fae:	a1 e2       	ldi	r26, 0x21	; 33
    2fb0:	1a 2e       	mov	r1, r26
    2fb2:	aa 1b       	sub	r26, r26
    2fb4:	bb 1b       	sub	r27, r27
    2fb6:	fd 01       	movw	r30, r26
    2fb8:	0d c0       	rjmp	.+26     	; 0x2fd4 <__udivmodsi4_ep>

00002fba <__udivmodsi4_loop>:
    2fba:	aa 1f       	adc	r26, r26
    2fbc:	bb 1f       	adc	r27, r27
    2fbe:	ee 1f       	adc	r30, r30
    2fc0:	ff 1f       	adc	r31, r31
    2fc2:	a2 17       	cp	r26, r18
    2fc4:	b3 07       	cpc	r27, r19
    2fc6:	e4 07       	cpc	r30, r20
    2fc8:	f5 07       	cpc	r31, r21
    2fca:	20 f0       	brcs	.+8      	; 0x2fd4 <__udivmodsi4_ep>
    2fcc:	a2 1b       	sub	r26, r18
    2fce:	b3 0b       	sbc	r27, r19
    2fd0:	e4 0b       	sbc	r30, r20
    2fd2:	f5 0b       	sbc	r31, r21

00002fd4 <__udivmodsi4_ep>:
    2fd4:	66 1f       	adc	r22, r22
    2fd6:	77 1f       	adc	r23, r23
    2fd8:	88 1f       	adc	r24, r24
    2fda:	99 1f       	adc	r25, r25
    2fdc:	1a 94       	dec	r1
    2fde:	69 f7       	brne	.-38     	; 0x2fba <__udivmodsi4_loop>
    2fe0:	60 95       	com	r22
    2fe2:	70 95       	com	r23
    2fe4:	80 95       	com	r24
    2fe6:	90 95       	com	r25
    2fe8:	9b 01       	movw	r18, r22
    2fea:	ac 01       	movw	r20, r24
    2fec:	bd 01       	movw	r22, r26
    2fee:	cf 01       	movw	r24, r30
    2ff0:	08 95       	ret

00002ff2 <__divmodsi4>:
    2ff2:	97 fb       	bst	r25, 7
    2ff4:	09 2e       	mov	r0, r25
    2ff6:	05 26       	eor	r0, r21
    2ff8:	0e d0       	rcall	.+28     	; 0x3016 <__divmodsi4_neg1>
    2ffa:	57 fd       	sbrc	r21, 7
    2ffc:	04 d0       	rcall	.+8      	; 0x3006 <__divmodsi4_neg2>
    2ffe:	d7 df       	rcall	.-82     	; 0x2fae <__udivmodsi4>
    3000:	0a d0       	rcall	.+20     	; 0x3016 <__divmodsi4_neg1>
    3002:	00 1c       	adc	r0, r0
    3004:	38 f4       	brcc	.+14     	; 0x3014 <__divmodsi4_exit>

00003006 <__divmodsi4_neg2>:
    3006:	50 95       	com	r21
    3008:	40 95       	com	r20
    300a:	30 95       	com	r19
    300c:	21 95       	neg	r18
    300e:	3f 4f       	sbci	r19, 0xFF	; 255
    3010:	4f 4f       	sbci	r20, 0xFF	; 255
    3012:	5f 4f       	sbci	r21, 0xFF	; 255

00003014 <__divmodsi4_exit>:
    3014:	08 95       	ret

00003016 <__divmodsi4_neg1>:
    3016:	f6 f7       	brtc	.-4      	; 0x3014 <__divmodsi4_exit>
    3018:	90 95       	com	r25
    301a:	80 95       	com	r24
    301c:	70 95       	com	r23
    301e:	61 95       	neg	r22
    3020:	7f 4f       	sbci	r23, 0xFF	; 255
    3022:	8f 4f       	sbci	r24, 0xFF	; 255
    3024:	9f 4f       	sbci	r25, 0xFF	; 255
    3026:	08 95       	ret

00003028 <_exit>:
    3028:	f8 94       	cli

0000302a <__stop_program>:
    302a:	ff cf       	rjmp	.-2      	; 0x302a <__stop_program>
