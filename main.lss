
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000019fe  00001a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006b  0080011c  0080011c  00001aae  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000dcd  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027b7  00000000  00000000  000028db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  00005092  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015a9  00000000  00000000  000056b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006b0  00000000  00000000  00006c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fdb  00000000  00000000  00007310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e05  00000000  00000000  000082eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ac 31       	cpi	r26, 0x1C	; 28
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	ac e1       	ldi	r26, 0x1C	; 28
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 38       	cpi	r26, 0x87	; 135
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "timebase.h"
#include "uart.h"

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
  
  UART_Init(19200);
      aa:	60 e0       	ldi	r22, 0x00	; 0
      ac:	7b e4       	ldi	r23, 0x4B	; 75
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 c4 02 	call	0x588	; 0x588 <UART_Init>
  Timebase_Init(1000);
      b6:	88 ee       	ldi	r24, 0xE8	; 232
      b8:	93 e0       	ldi	r25, 0x03	; 3
      ba:	0e 94 31 0c 	call	0x1862	; 0x1862 <Timebase_Init>
  
  //For test, also added inside ISR
  DDRD|=(1<<5);
      be:	55 9a       	sbi	0x0a, 5	; 10
  PORTD&=~(1<<5);
      c0:	5d 98       	cbi	0x0b, 5	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      c2:	c8 ec       	ldi	r28, 0xC8	; 200
      c4:	d0 e0       	ldi	r29, 0x00	; 0
  
  while(1){
    
    UART_Transmit_Text("Timebase ");
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	91 e0       	ldi	r25, 0x01	; 1
      ca:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_Seconds());
      ce:	0e 94 66 04 	call	0x8cc	; 0x8cc <Timebase_Timer_Get_Seconds>
      d2:	0e 94 31 02 	call	0x462	; 0x462 <UART_Transmit_Number>
	UART_Transmit_Text(" ");
      d6:	8a e0       	ldi	r24, 0x0A	; 10
      d8:	91 e0       	ldi	r25, 0x01	; 1
      da:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
	UART_Transmit_Number(Timebase_Timer_Get_SubSeconds());
      de:	0e 94 5e 04 	call	0x8bc	; 0x8bc <Timebase_Timer_Get_SubSeconds>
      e2:	a0 e0       	ldi	r26, 0x00	; 0
      e4:	b0 e0       	ldi	r27, 0x00	; 0
      e6:	bc 01       	movw	r22, r24
      e8:	cd 01       	movw	r24, r26
      ea:	0e 94 31 02 	call	0x462	; 0x462 <UART_Transmit_Number>
	UART_Transmit_New_Line();
      ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Transmit_New_Line>
      f2:	88 ee       	ldi	r24, 0xE8	; 232
      f4:	93 e0       	ldi	r25, 0x03	; 3
      f6:	fe 01       	movw	r30, r28
      f8:	31 97       	sbiw	r30, 0x01	; 1
      fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x52>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      fc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      fe:	d9 f7       	brne	.-10     	; 0xf6 <main+0x50>
     100:	e2 cf       	rjmp	.-60     	; 0xc6 <main+0x20>

00000102 <UART_Struct_Init>:
     102:	10 92 1c 01 	sts	0x011C, r1
     106:	ed e1       	ldi	r30, 0x1D	; 29
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	11 92       	st	Z+, r1
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	e5 32       	cpi	r30, 0x25	; 37
     110:	f8 07       	cpc	r31, r24
     112:	d9 f7       	brne	.-10     	; 0x10a <UART_Struct_Init+0x8>
     114:	10 82       	st	Z, r1
     116:	11 82       	std	Z+1, r1	; 0x01
     118:	80 e2       	ldi	r24, 0x20	; 32
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	93 a3       	std	Z+35, r25	; 0x23
     11e:	82 a3       	std	Z+34, r24	; 0x22
     120:	15 a2       	std	Z+37, r1	; 0x25
     122:	14 a2       	std	Z+36, r1	; 0x24
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	04 c0       	rjmp	.+8      	; 0x130 <UART_Struct_Init+0x2e>
     128:	e4 5e       	subi	r30, 0xE4	; 228
     12a:	fe 4f       	sbci	r31, 0xFE	; 254
     12c:	13 86       	std	Z+11, r1	; 0x0b
     12e:	2f 5f       	subi	r18, 0xFF	; 255
     130:	80 91 47 01 	lds	r24, 0x0147
     134:	90 91 48 01 	lds	r25, 0x0148
     138:	e2 2f       	mov	r30, r18
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	e8 17       	cp	r30, r24
     13e:	f9 07       	cpc	r31, r25
     140:	98 f3       	brcs	.-26     	; 0x128 <UART_Struct_Init+0x26>
     142:	08 95       	ret

00000144 <UART_Config_GPIO>:
     144:	08 95       	ret

00000146 <UART_Config_Clock>:
     146:	08 95       	ret

00000148 <UART_Config_BAUD_Rate>:
     148:	9b 01       	movw	r18, r22
     14a:	ac 01       	movw	r20, r24
     14c:	60 e4       	ldi	r22, 0x40	; 64
     14e:	72 e4       	ldi	r23, 0x42	; 66
     150:	8f e0       	ldi	r24, 0x0F	; 15
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodsi4>
     158:	21 50       	subi	r18, 0x01	; 1
     15a:	30 40       	sbci	r19, 0x00	; 0
     15c:	40 40       	sbci	r20, 0x00	; 0
     15e:	50 40       	sbci	r21, 0x00	; 0
     160:	e0 ec       	ldi	r30, 0xC0	; 192
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	82 60       	ori	r24, 0x02	; 2
     168:	80 83       	st	Z, r24
     16a:	bb 27       	eor	r27, r27
     16c:	a5 2f       	mov	r26, r21
     16e:	94 2f       	mov	r25, r20
     170:	83 2f       	mov	r24, r19
     172:	80 93 c5 00 	sts	0x00C5, r24
     176:	20 93 c4 00 	sts	0x00C4, r18
     17a:	08 95       	ret

0000017c <UART_Config_Transmitter>:
     17c:	e1 ec       	ldi	r30, 0xC1	; 193
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	88 60       	ori	r24, 0x08	; 8
     184:	80 83       	st	Z, r24
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	80 93 c2 00 	sts	0x00C2, r24
     18c:	08 95       	ret

0000018e <UART_Config_Receiver>:
     18e:	e1 ec       	ldi	r30, 0xC1	; 193
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	80 61       	ori	r24, 0x10	; 16
     196:	80 83       	st	Z, r24
     198:	86 e0       	ldi	r24, 0x06	; 6
     19a:	80 93 c2 00 	sts	0x00C2, r24
     19e:	08 95       	ret

000001a0 <UART_Config_Receiver_Interrupt>:
     1a0:	e1 ec       	ldi	r30, 0xC1	; 193
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
     1a6:	80 68       	ori	r24, 0x80	; 128
     1a8:	80 83       	st	Z, r24
     1aa:	78 94       	sei
     1ac:	08 95       	ret

000001ae <UART_Transmit_Byte>:
     1ae:	98 2f       	mov	r25, r24
     1b0:	80 91 c0 00 	lds	r24, 0x00C0
     1b4:	85 ff       	sbrs	r24, 5
     1b6:	fc cf       	rjmp	.-8      	; 0x1b0 <UART_Transmit_Byte+0x2>
     1b8:	90 93 c6 00 	sts	0x00C6, r25
     1bc:	08 95       	ret

000001be <UART_Receive_Byte>:
     1be:	df 93       	push	r29
     1c0:	cf 93       	push	r28
     1c2:	0f 92       	push	r0
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	19 82       	std	Y+1, r1	; 0x01
     1ca:	80 91 c0 00 	lds	r24, 0x00C0
     1ce:	84 ff       	sbrs	r24, 4
     1d0:	05 c0       	rjmp	.+10     	; 0x1dc <UART_Receive_Byte+0x1e>
     1d2:	80 91 c6 00 	lds	r24, 0x00C6
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	08 c0       	rjmp	.+16     	; 0x1ec <UART_Receive_Byte+0x2e>
     1dc:	80 91 c0 00 	lds	r24, 0x00C0
     1e0:	83 ff       	sbrs	r24, 3
     1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <UART_Receive_Byte+0x34>
     1e4:	80 91 c6 00 	lds	r24, 0x00C6
     1e8:	89 83       	std	Y+1, r24	; 0x01
     1ea:	82 e0       	ldi	r24, 0x02	; 2
     1ec:	80 93 1c 01 	sts	0x011C, r24
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <UART_Receive_Byte+0x3e>
     1f2:	80 91 c6 00 	lds	r24, 0x00C6
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	10 92 1c 01 	sts	0x011C, r1
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	0f 90       	pop	r0
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <UART_Last_Received_Byte>:
     206:	80 91 26 01 	lds	r24, 0x0126
     20a:	08 95       	ret

0000020c <UART_Reset_Last_Received_Byte>:
     20c:	10 92 26 01 	sts	0x0126, r1
     210:	08 95       	ret

00000212 <UART_Transmit_Byte_Hex>:
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
     218:	ab 01       	movw	r20, r22
     21a:	bc 01       	movw	r22, r24
     21c:	4f 3f       	cpi	r20, 0xFF	; 255
     21e:	51 05       	cpc	r21, r1
     220:	61 05       	cpc	r22, r1
     222:	71 05       	cpc	r23, r1
     224:	09 f0       	breq	.+2      	; 0x228 <UART_Transmit_Byte_Hex+0x16>
     226:	28 f4       	brcc	.+10     	; 0x232 <UART_Transmit_Byte_Hex+0x20>
     228:	e8 e0       	ldi	r30, 0x08	; 8
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	c2 e0       	ldi	r28, 0x02	; 2
     22e:	d0 e0       	ldi	r29, 0x00	; 0
     230:	11 c0       	rjmp	.+34     	; 0x254 <UART_Transmit_Byte_Hex+0x42>
     232:	40 30       	cpi	r20, 0x00	; 0
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	58 07       	cpc	r21, r24
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	68 07       	cpc	r22, r24
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	78 07       	cpc	r23, r24
     240:	28 f0       	brcs	.+10     	; 0x24c <UART_Transmit_Byte_Hex+0x3a>
     242:	e0 e2       	ldi	r30, 0x20	; 32
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	c8 e0       	ldi	r28, 0x08	; 8
     248:	d0 e0       	ldi	r29, 0x00	; 0
     24a:	04 c0       	rjmp	.+8      	; 0x254 <UART_Transmit_Byte_Hex+0x42>
     24c:	e0 e1       	ldi	r30, 0x10	; 16
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	c4 e0       	ldi	r28, 0x04	; 4
     252:	d0 e0       	ldi	r29, 0x00	; 0
     254:	80 91 c0 00 	lds	r24, 0x00C0
     258:	85 ff       	sbrs	r24, 5
     25a:	fc cf       	rjmp	.-8      	; 0x254 <UART_Transmit_Byte_Hex+0x42>
     25c:	80 e3       	ldi	r24, 0x30	; 48
     25e:	80 93 c6 00 	sts	0x00C6, r24
     262:	80 91 c0 00 	lds	r24, 0x00C0
     266:	85 ff       	sbrs	r24, 5
     268:	fc cf       	rjmp	.-8      	; 0x262 <UART_Transmit_Byte_Hex+0x50>
     26a:	88 e7       	ldi	r24, 0x78	; 120
     26c:	80 93 c6 00 	sts	0x00C6, r24
     270:	10 e0       	ldi	r17, 0x00	; 0
     272:	1f c0       	rjmp	.+62     	; 0x2b2 <UART_Transmit_Byte_Hex+0xa0>
     274:	34 97       	sbiw	r30, 0x04	; 4
     276:	db 01       	movw	r26, r22
     278:	ca 01       	movw	r24, r20
     27a:	0e 2e       	mov	r0, r30
     27c:	04 c0       	rjmp	.+8      	; 0x286 <UART_Transmit_Byte_Hex+0x74>
     27e:	b6 95       	lsr	r27
     280:	a7 95       	ror	r26
     282:	97 95       	ror	r25
     284:	87 95       	ror	r24
     286:	0a 94       	dec	r0
     288:	d2 f7       	brpl	.-12     	; 0x27e <UART_Transmit_Byte_Hex+0x6c>
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	8f 70       	andi	r24, 0x0F	; 15
     28e:	90 70       	andi	r25, 0x00	; 0
     290:	8a 30       	cpi	r24, 0x0A	; 10
     292:	91 05       	cpc	r25, r1
     294:	20 f0       	brcs	.+8      	; 0x29e <UART_Transmit_Byte_Hex+0x8c>
     296:	9c 01       	movw	r18, r24
     298:	29 5c       	subi	r18, 0xC9	; 201
     29a:	3f 4f       	sbci	r19, 0xFF	; 255
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <UART_Transmit_Byte_Hex+0x92>
     29e:	9c 01       	movw	r18, r24
     2a0:	20 5d       	subi	r18, 0xD0	; 208
     2a2:	3f 4f       	sbci	r19, 0xFF	; 255
     2a4:	80 91 c0 00 	lds	r24, 0x00C0
     2a8:	85 ff       	sbrs	r24, 5
     2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <UART_Transmit_Byte_Hex+0x92>
     2ac:	20 93 c6 00 	sts	0x00C6, r18
     2b0:	1f 5f       	subi	r17, 0xFF	; 255
     2b2:	81 2f       	mov	r24, r17
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	8c 17       	cp	r24, r28
     2b8:	9d 07       	cpc	r25, r29
     2ba:	e0 f2       	brcs	.-72     	; 0x274 <UART_Transmit_Byte_Hex+0x62>
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	08 95       	ret

000002c4 <UART_Transmit_Byte_Bin>:
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ab 01       	movw	r20, r22
     2d6:	bc 01       	movw	r22, r24
     2d8:	4f 3f       	cpi	r20, 0xFF	; 255
     2da:	51 05       	cpc	r21, r1
     2dc:	61 05       	cpc	r22, r1
     2de:	71 05       	cpc	r23, r1
     2e0:	09 f0       	breq	.+2      	; 0x2e4 <UART_Transmit_Byte_Bin+0x20>
     2e2:	10 f4       	brcc	.+4      	; 0x2e8 <UART_Transmit_Byte_Bin+0x24>
     2e4:	97 e0       	ldi	r25, 0x07	; 7
     2e6:	0b c0       	rjmp	.+22     	; 0x2fe <UART_Transmit_Byte_Bin+0x3a>
     2e8:	40 30       	cpi	r20, 0x00	; 0
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	58 07       	cpc	r21, r24
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	68 07       	cpc	r22, r24
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	78 07       	cpc	r23, r24
     2f6:	10 f0       	brcs	.+4      	; 0x2fc <UART_Transmit_Byte_Bin+0x38>
     2f8:	9f e1       	ldi	r25, 0x1F	; 31
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <UART_Transmit_Byte_Bin+0x3a>
     2fc:	9f e0       	ldi	r25, 0x0F	; 15
     2fe:	80 91 c0 00 	lds	r24, 0x00C0
     302:	85 ff       	sbrs	r24, 5
     304:	fc cf       	rjmp	.-8      	; 0x2fe <UART_Transmit_Byte_Bin+0x3a>
     306:	80 e3       	ldi	r24, 0x30	; 48
     308:	80 93 c6 00 	sts	0x00C6, r24
     30c:	80 91 c0 00 	lds	r24, 0x00C0
     310:	85 ff       	sbrs	r24, 5
     312:	fc cf       	rjmp	.-8      	; 0x30c <UART_Transmit_Byte_Bin+0x48>
     314:	82 e6       	ldi	r24, 0x62	; 98
     316:	80 93 c6 00 	sts	0x00C6, r24
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	e9 2f       	mov	r30, r25
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	00 e3       	ldi	r16, 0x30	; 48
     324:	11 e3       	ldi	r17, 0x31	; 49
     326:	ef 01       	movw	r28, r30
     328:	21 96       	adiw	r28, 0x01	; 1
     32a:	cf 01       	movw	r24, r30
     32c:	82 1b       	sub	r24, r18
     32e:	93 0b       	sbc	r25, r19
     330:	6a 01       	movw	r12, r20
     332:	7b 01       	movw	r14, r22
     334:	04 c0       	rjmp	.+8      	; 0x33e <UART_Transmit_Byte_Bin+0x7a>
     336:	f6 94       	lsr	r15
     338:	e7 94       	ror	r14
     33a:	d7 94       	ror	r13
     33c:	c7 94       	ror	r12
     33e:	8a 95       	dec	r24
     340:	d2 f7       	brpl	.-12     	; 0x336 <UART_Transmit_Byte_Bin+0x72>
     342:	d7 01       	movw	r26, r14
     344:	c6 01       	movw	r24, r12
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	89 2b       	or	r24, r25
     34c:	39 f0       	breq	.+14     	; 0x35c <UART_Transmit_Byte_Bin+0x98>
     34e:	80 91 c0 00 	lds	r24, 0x00C0
     352:	85 ff       	sbrs	r24, 5
     354:	fc cf       	rjmp	.-8      	; 0x34e <UART_Transmit_Byte_Bin+0x8a>
     356:	10 93 c6 00 	sts	0x00C6, r17
     35a:	06 c0       	rjmp	.+12     	; 0x368 <UART_Transmit_Byte_Bin+0xa4>
     35c:	80 91 c0 00 	lds	r24, 0x00C0
     360:	85 ff       	sbrs	r24, 5
     362:	fc cf       	rjmp	.-8      	; 0x35c <UART_Transmit_Byte_Bin+0x98>
     364:	00 93 c6 00 	sts	0x00C6, r16
     368:	2f 5f       	subi	r18, 0xFF	; 255
     36a:	3f 4f       	sbci	r19, 0xFF	; 255
     36c:	2c 17       	cp	r18, r28
     36e:	3d 07       	cpc	r19, r29
     370:	e1 f6       	brne	.-72     	; 0x32a <UART_Transmit_Byte_Bin+0x66>
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	0f 91       	pop	r16
     37a:	ff 90       	pop	r15
     37c:	ef 90       	pop	r14
     37e:	df 90       	pop	r13
     380:	cf 90       	pop	r12
     382:	08 95       	ret

00000384 <UART_Transmit_Text>:
     384:	ac 01       	movw	r20, r24
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	07 c0       	rjmp	.+14     	; 0x398 <UART_Transmit_Text+0x14>
     38a:	80 91 c0 00 	lds	r24, 0x00C0
     38e:	85 ff       	sbrs	r24, 5
     390:	fc cf       	rjmp	.-8      	; 0x38a <UART_Transmit_Text+0x6>
     392:	e0 93 c6 00 	sts	0x00C6, r30
     396:	2f 5f       	subi	r18, 0xFF	; 255
     398:	fa 01       	movw	r30, r20
     39a:	e2 0f       	add	r30, r18
     39c:	f1 1d       	adc	r31, r1
     39e:	e0 81       	ld	r30, Z
     3a0:	ee 23       	and	r30, r30
     3a2:	99 f7       	brne	.-26     	; 0x38a <UART_Transmit_Text+0x6>
     3a4:	08 95       	ret

000003a6 <UART_Transmit_New_Line>:
     3a6:	8c e0       	ldi	r24, 0x0C	; 12
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
     3ae:	08 95       	ret

000003b0 <UART_Transmit_Space>:
     3b0:	8f e0       	ldi	r24, 0x0F	; 15
     3b2:	91 e0       	ldi	r25, 0x01	; 1
     3b4:	0e 94 c2 01 	call	0x384	; 0x384 <UART_Transmit_Text>
     3b8:	08 95       	ret

000003ba <UART_Determine_Digit_Numbers>:
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	6b 01       	movw	r12, r22
     3ca:	7c 01       	movw	r14, r24
     3cc:	61 15       	cp	r22, r1
     3ce:	71 05       	cpc	r23, r1
     3d0:	81 05       	cpc	r24, r1
     3d2:	91 05       	cpc	r25, r1
     3d4:	31 f4       	brne	.+12     	; 0x3e2 <UART_Determine_Digit_Numbers+0x28>
     3d6:	10 92 1d 01 	sts	0x011D, r1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	80 93 25 01 	sts	0x0125, r24
     3e0:	23 c0       	rjmp	.+70     	; 0x428 <UART_Determine_Digit_Numbers+0x6e>
     3e2:	bb 24       	eor	r11, r11
     3e4:	0b 2d       	mov	r16, r11
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	04 5e       	subi	r16, 0xE4	; 228
     3ea:	1e 4f       	sbci	r17, 0xFE	; 254
     3ec:	c7 01       	movw	r24, r14
     3ee:	b6 01       	movw	r22, r12
     3f0:	2a e0       	ldi	r18, 0x0A	; 10
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodsi4>
     3fc:	f8 01       	movw	r30, r16
     3fe:	61 83       	std	Z+1, r22	; 0x01
     400:	c7 01       	movw	r24, r14
     402:	b6 01       	movw	r22, r12
     404:	2a e0       	ldi	r18, 0x0A	; 10
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__udivmodsi4>
     410:	c9 01       	movw	r24, r18
     412:	da 01       	movw	r26, r20
     414:	6c 01       	movw	r12, r24
     416:	7d 01       	movw	r14, r26
     418:	b3 94       	inc	r11
     41a:	c1 14       	cp	r12, r1
     41c:	d1 04       	cpc	r13, r1
     41e:	e1 04       	cpc	r14, r1
     420:	f1 04       	cpc	r15, r1
     422:	01 f7       	brne	.-64     	; 0x3e4 <UART_Determine_Digit_Numbers+0x2a>
     424:	b0 92 25 01 	sts	0x0125, r11
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	08 95       	ret

00000438 <UART_Transmit_Number_Digits>:
     438:	e0 91 25 01 	lds	r30, 0x0125
     43c:	0f c0       	rjmp	.+30     	; 0x45c <UART_Transmit_Number_Digits+0x24>
     43e:	2e 2f       	mov	r18, r30
     440:	21 50       	subi	r18, 0x01	; 1
     442:	e2 2f       	mov	r30, r18
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	e4 5e       	subi	r30, 0xE4	; 228
     448:	fe 4f       	sbci	r31, 0xFE	; 254
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	80 91 c0 00 	lds	r24, 0x00C0
     450:	85 ff       	sbrs	r24, 5
     452:	fc cf       	rjmp	.-8      	; 0x44c <UART_Transmit_Number_Digits+0x14>
     454:	90 5d       	subi	r25, 0xD0	; 208
     456:	90 93 c6 00 	sts	0x00C6, r25
     45a:	e2 2f       	mov	r30, r18
     45c:	ee 23       	and	r30, r30
     45e:	79 f7       	brne	.-34     	; 0x43e <UART_Transmit_Number_Digits+0x6>
     460:	08 95       	ret

00000462 <UART_Transmit_Number>:
     462:	9b 01       	movw	r18, r22
     464:	ac 01       	movw	r20, r24
     466:	97 ff       	sbrs	r25, 7
     468:	0e c0       	rjmp	.+28     	; 0x486 <UART_Transmit_Number+0x24>
     46a:	80 91 c0 00 	lds	r24, 0x00C0
     46e:	85 ff       	sbrs	r24, 5
     470:	fc cf       	rjmp	.-8      	; 0x46a <UART_Transmit_Number+0x8>
     472:	8d e2       	ldi	r24, 0x2D	; 45
     474:	80 93 c6 00 	sts	0x00C6, r24
     478:	50 95       	com	r21
     47a:	40 95       	com	r20
     47c:	30 95       	com	r19
     47e:	21 95       	neg	r18
     480:	3f 4f       	sbci	r19, 0xFF	; 255
     482:	4f 4f       	sbci	r20, 0xFF	; 255
     484:	5f 4f       	sbci	r21, 0xFF	; 255
     486:	ca 01       	movw	r24, r20
     488:	b9 01       	movw	r22, r18
     48a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <UART_Determine_Digit_Numbers>
     48e:	0e 94 1c 02 	call	0x438	; 0x438 <UART_Transmit_Number_Digits>
     492:	08 95       	ret

00000494 <UART_Read_From_Buffer>:
     494:	fc 01       	movw	r30, r24
     496:	e4 5e       	subi	r30, 0xE4	; 228
     498:	fe 4f       	sbci	r31, 0xFE	; 254
     49a:	83 85       	ldd	r24, Z+11	; 0x0b
     49c:	08 95       	ret

0000049e <UART_Current_Buffer_Index>:
     49e:	20 91 49 01 	lds	r18, 0x0149
     4a2:	30 91 4a 01 	lds	r19, 0x014A
     4a6:	c9 01       	movw	r24, r18
     4a8:	08 95       	ret

000004aa <UART_Flush_Buffer>:
     4aa:	10 92 1c 01 	sts	0x011C, r1
     4ae:	20 e0       	ldi	r18, 0x00	; 0
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	06 c0       	rjmp	.+12     	; 0x4c0 <UART_Flush_Buffer+0x16>
     4b4:	f9 01       	movw	r30, r18
     4b6:	e4 5e       	subi	r30, 0xE4	; 228
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	13 86       	std	Z+11, r1	; 0x0b
     4bc:	2f 5f       	subi	r18, 0xFF	; 255
     4be:	3f 4f       	sbci	r19, 0xFF	; 255
     4c0:	80 91 47 01 	lds	r24, 0x0147
     4c4:	90 91 48 01 	lds	r25, 0x0148
     4c8:	28 17       	cp	r18, r24
     4ca:	39 07       	cpc	r19, r25
     4cc:	98 f3       	brcs	.-26     	; 0x4b4 <UART_Flush_Buffer+0xa>
     4ce:	10 92 4a 01 	sts	0x014A, r1
     4d2:	10 92 49 01 	sts	0x0149, r1
     4d6:	08 95       	ret

000004d8 <UART_Interrupt_Service_Routine>:
     4d8:	df 93       	push	r29
     4da:	cf 93       	push	r28
     4dc:	0f 92       	push	r0
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	19 82       	std	Y+1, r1	; 0x01
     4e4:	0e 94 df 00 	call	0x1be	; 0x1be <UART_Receive_Byte>
     4e8:	89 83       	std	Y+1, r24	; 0x01
     4ea:	80 91 1c 01 	lds	r24, 0x011C
     4ee:	88 23       	and	r24, r24
     4f0:	19 f5       	brne	.+70     	; 0x538 <UART_Interrupt_Service_Routine+0x60>
     4f2:	89 81       	ldd	r24, Y+1	; 0x01
     4f4:	80 93 26 01 	sts	0x0126, r24
     4f8:	e0 91 49 01 	lds	r30, 0x0149
     4fc:	f0 91 4a 01 	lds	r31, 0x014A
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	e4 5e       	subi	r30, 0xE4	; 228
     504:	fe 4f       	sbci	r31, 0xFE	; 254
     506:	83 87       	std	Z+11, r24	; 0x0b
     508:	80 91 49 01 	lds	r24, 0x0149
     50c:	90 91 4a 01 	lds	r25, 0x014A
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	90 93 4a 01 	sts	0x014A, r25
     516:	80 93 49 01 	sts	0x0149, r24
     51a:	20 91 49 01 	lds	r18, 0x0149
     51e:	30 91 4a 01 	lds	r19, 0x014A
     522:	80 91 47 01 	lds	r24, 0x0147
     526:	90 91 48 01 	lds	r25, 0x0148
     52a:	28 17       	cp	r18, r24
     52c:	39 07       	cpc	r19, r25
     52e:	20 f0       	brcs	.+8      	; 0x538 <UART_Interrupt_Service_Routine+0x60>
     530:	10 92 4a 01 	sts	0x014A, r1
     534:	10 92 49 01 	sts	0x0149, r1
     538:	0f 90       	pop	r0
     53a:	cf 91       	pop	r28
     53c:	df 91       	pop	r29
     53e:	08 95       	ret

00000540 <__vector_18>:
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31
     562:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <UART_Interrupt_Service_Routine>
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	0f be       	out	0x3f, r0	; 63
     582:	0f 90       	pop	r0
     584:	1f 90       	pop	r1
     586:	18 95       	reti

00000588 <UART_Init>:
     588:	ef 92       	push	r14
     58a:	ff 92       	push	r15
     58c:	0f 93       	push	r16
     58e:	1f 93       	push	r17
     590:	7b 01       	movw	r14, r22
     592:	8c 01       	movw	r16, r24
     594:	0e 94 81 00 	call	0x102	; 0x102 <UART_Struct_Init>
     598:	c8 01       	movw	r24, r16
     59a:	b7 01       	movw	r22, r14
     59c:	0e 94 a4 00 	call	0x148	; 0x148 <UART_Config_BAUD_Rate>
     5a0:	e1 ec       	ldi	r30, 0xC1	; 193
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	88 60       	ori	r24, 0x08	; 8
     5a8:	80 83       	st	Z, r24
     5aa:	a2 ec       	ldi	r26, 0xC2	; 194
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	96 e0       	ldi	r25, 0x06	; 6
     5b0:	9c 93       	st	X, r25
     5b2:	80 81       	ld	r24, Z
     5b4:	80 61       	ori	r24, 0x10	; 16
     5b6:	80 83       	st	Z, r24
     5b8:	9c 93       	st	X, r25
     5ba:	80 81       	ld	r24, Z
     5bc:	80 68       	ori	r24, 0x80	; 128
     5be:	80 83       	st	Z, r24
     5c0:	78 94       	sei
     5c2:	0e 94 55 02 	call	0x4aa	; 0x4aa <UART_Flush_Buffer>
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <Timebase_Struct_Init>:

timebase_t Timebase_type;
timebase_t *Timebase;

void Timebase_Struct_Init(void){
  Timebase=&Timebase_type;
     5d0:	8d e4       	ldi	r24, 0x4D	; 77
     5d2:	91 e0       	ldi	r25, 0x01	; 1
     5d4:	90 93 4c 01 	sts	0x014C, r25
     5d8:	80 93 4b 01 	sts	0x014B, r24
  Timebase->Config.TimerType.Value = 0;
     5dc:	10 92 4d 01 	sts	0x014D, r1
  Timebase->Config.TimerType.GeneralTimer = 1;
     5e0:	80 91 4d 01 	lds	r24, 0x014D
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.TimerType.TimerIndex = 0;
     5ea:	80 91 4d 01 	lds	r24, 0x014D
     5ee:	87 70       	andi	r24, 0x07	; 7
     5f0:	80 93 4d 01 	sts	0x014D, r24
  Timebase->Config.UpdateRate = 1;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	90 93 4f 01 	sts	0x014F, r25
     5fc:	80 93 4e 01 	sts	0x014E, r24
  Timebase->Time.OVFUpdateValue=0;
     600:	10 92 50 01 	sts	0x0150, r1
  Timebase->Time.SubSeconds = 0;
     604:	10 92 56 01 	sts	0x0156, r1
     608:	10 92 55 01 	sts	0x0155, r1
  Timebase->Time.Seconds = 0;
     60c:	10 92 57 01 	sts	0x0157, r1
     610:	10 92 58 01 	sts	0x0158, r1
     614:	10 92 59 01 	sts	0x0159, r1
     618:	10 92 5a 01 	sts	0x015A, r1
  Timebase->Time.LastSample = 0;
     61c:	10 92 51 01 	sts	0x0151, r1
     620:	10 92 52 01 	sts	0x0152, r1
     624:	10 92 53 01 	sts	0x0153, r1
     628:	10 92 54 01 	sts	0x0154, r1
  
  #ifdef TIMEBASE_TIME_WINDOW_CALCULATION
    Timebase->Time.StartTimeSeconds = 0;
     62c:	10 92 5b 01 	sts	0x015B, r1
     630:	10 92 5c 01 	sts	0x015C, r1
     634:	10 92 5d 01 	sts	0x015D, r1
     638:	10 92 5e 01 	sts	0x015E, r1
	Timebase->Time.StartTimeSubSeconds = 0;
     63c:	10 92 5f 01 	sts	0x015F, r1
     640:	10 92 60 01 	sts	0x0160, r1
     644:	10 92 61 01 	sts	0x0161, r1
     648:	10 92 62 01 	sts	0x0162, r1
	Timebase->Time.Status = 0;
     64c:	10 92 63 01 	sts	0x0163, r1
  #endif
  
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase->ActiveTokens = 0;
     650:	10 92 64 01 	sts	0x0164, r1
  #endif

  #ifdef TIMEBASE_UPCOUNTER
  for(uint8_t i=0; i < TIMEBASE_UPCOUNTER; i++){
    Timebase->UpCounter[i].Status.StatusByte = 0;  
     654:	10 92 65 01 	sts	0x0165, r1
    Timebase->UpCounter[i].EndValue = 0;
     658:	10 92 66 01 	sts	0x0166, r1
     65c:	10 92 67 01 	sts	0x0167, r1
     660:	10 92 68 01 	sts	0x0168, r1
     664:	10 92 69 01 	sts	0x0169, r1
    Timebase->UpCounter[i].Target = 0;
     668:	10 92 6a 01 	sts	0x016A, r1
     66c:	10 92 6b 01 	sts	0x016B, r1
     670:	10 92 6c 01 	sts	0x016C, r1
     674:	10 92 6d 01 	sts	0x016D, r1
    Timebase->UpCounter[i].Temporary = 0;    
     678:	10 92 6e 01 	sts	0x016E, r1
     67c:	10 92 6f 01 	sts	0x016F, r1
     680:	10 92 70 01 	sts	0x0170, r1
     684:	10 92 71 01 	sts	0x0171, r1
    Timebase->UpCounter[i].Value = 0;
     688:	10 92 72 01 	sts	0x0172, r1
     68c:	10 92 73 01 	sts	0x0173, r1
     690:	10 92 74 01 	sts	0x0174, r1
     694:	10 92 75 01 	sts	0x0175, r1
    Timebase->UpCounter[i].PeriodValue = 0;
     698:	10 92 76 01 	sts	0x0176, r1
     69c:	10 92 77 01 	sts	0x0177, r1
     6a0:	10 92 78 01 	sts	0x0178, r1
     6a4:	10 92 79 01 	sts	0x0179, r1
  }
  #endif

  #ifdef TIMEBASE_DOWNCOUNTER
  for(uint8_t i=0; i < TIMEBASE_DOWNCOUNTER; i++){
    Timebase->DownCounter[i].Status.StatusByte = 0; 
     6a8:	10 92 7a 01 	sts	0x017A, r1
    Timebase->DownCounter[i].EndValue = 0;
     6ac:	10 92 7b 01 	sts	0x017B, r1
     6b0:	10 92 7c 01 	sts	0x017C, r1
     6b4:	10 92 7d 01 	sts	0x017D, r1
     6b8:	10 92 7e 01 	sts	0x017E, r1
    Timebase->DownCounter[i].Value = 0;
     6bc:	10 92 7f 01 	sts	0x017F, r1
     6c0:	10 92 80 01 	sts	0x0180, r1
     6c4:	10 92 81 01 	sts	0x0181, r1
     6c8:	10 92 82 01 	sts	0x0182, r1
    Timebase->DownCounter[i].PeriodValue = 0;
     6cc:	10 92 83 01 	sts	0x0183, r1
     6d0:	10 92 84 01 	sts	0x0184, r1
     6d4:	10 92 85 01 	sts	0x0185, r1
     6d8:	10 92 86 01 	sts	0x0186, r1
  }
  #endif
}
     6dc:	08 95       	ret

000006de <Timebase_Timer_Config>:


void Timebase_Timer_Config(uint16_t UpdateRateHz){
     6de:	7f 92       	push	r7
     6e0:	8f 92       	push	r8
     6e2:	9f 92       	push	r9
     6e4:	af 92       	push	r10
     6e6:	bf 92       	push	r11
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	df 93       	push	r29
     6f6:	cf 93       	push	r28
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	2a 97       	sbiw	r28, 0x0a	; 10
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	8c 01       	movw	r16, r24
  if(Timebase->Config.TimerType.WatchDogTimer == 1){
     70a:	c0 90 4b 01 	lds	r12, 0x014B
     70e:	d0 90 4c 01 	lds	r13, 0x014C
     712:	f6 01       	movw	r30, r12
     714:	80 81       	ld	r24, Z
     716:	80 ff       	sbrs	r24, 0
     718:	31 c0       	rjmp	.+98     	; 0x77c <Timebase_Timer_Config+0x9e>
    uint8_t Prescaler_val = 0;
    if(UpdateRateHz == 1){
     71a:	01 30       	cpi	r16, 0x01	; 1
     71c:	11 05       	cpc	r17, r1
     71e:	11 f4       	brne	.+4      	; 0x724 <Timebase_Timer_Config+0x46>
     720:	96 e0       	ldi	r25, 0x06	; 6
     722:	19 c0       	rjmp	.+50     	; 0x756 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x06;
    }else if(UpdateRateHz ==2 ){
     724:	02 30       	cpi	r16, 0x02	; 2
     726:	11 05       	cpc	r17, r1
     728:	11 f4       	brne	.+4      	; 0x72e <Timebase_Timer_Config+0x50>
     72a:	95 e0       	ldi	r25, 0x05	; 5
     72c:	14 c0       	rjmp	.+40     	; 0x756 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x05;
    }else if(UpdateRateHz == 4){
     72e:	04 30       	cpi	r16, 0x04	; 4
     730:	11 05       	cpc	r17, r1
     732:	11 f4       	brne	.+4      	; 0x738 <Timebase_Timer_Config+0x5a>
     734:	94 e0       	ldi	r25, 0x04	; 4
     736:	0f c0       	rjmp	.+30     	; 0x756 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x04;
    }else if(UpdateRateHz == 8){
     738:	08 30       	cpi	r16, 0x08	; 8
     73a:	11 05       	cpc	r17, r1
     73c:	11 f4       	brne	.+4      	; 0x742 <Timebase_Timer_Config+0x64>
     73e:	93 e0       	ldi	r25, 0x03	; 3
     740:	0a c0       	rjmp	.+20     	; 0x756 <Timebase_Timer_Config+0x78>
      Prescaler_val = 0x03;
    }else if(UpdateRateHz == 16){
     742:	00 31       	cpi	r16, 0x10	; 16
     744:	11 05       	cpc	r17, r1
     746:	11 f4       	brne	.+4      	; 0x74c <Timebase_Timer_Config+0x6e>
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	05 c0       	rjmp	.+10     	; 0x756 <Timebase_Timer_Config+0x78>
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	00 32       	cpi	r16, 0x20	; 32
     750:	11 05       	cpc	r17, r1
     752:	09 f4       	brne	.+2      	; 0x756 <Timebase_Timer_Config+0x78>
     754:	91 e0       	ldi	r25, 0x01	; 1
    }else if(UpdateRateHz == 64){
      Prescaler_val = 0x00;
    }else{
      Prescaler_val = 0x00;
    }
    cli();
     756:	f8 94       	cli
    MCUSR  &=~(1<<WDRF);
     758:	84 b7       	in	r24, 0x34	; 52
     75a:	87 7f       	andi	r24, 0xF7	; 247
     75c:	84 bf       	out	0x34, r24	; 52
    WDTCSR |= (1<<WDIF);
     75e:	80 91 60 00 	lds	r24, 0x0060
     762:	80 68       	ori	r24, 0x80	; 128
     764:	80 93 60 00 	sts	0x0060, r24
    WDTCSR |= (1<<WDCE)|(1<<WDE);
     768:	80 91 60 00 	lds	r24, 0x0060
     76c:	88 61       	ori	r24, 0x18	; 24
     76e:	80 93 60 00 	sts	0x0060, r24
    WDTCSR  = (1<<WDIE)|Prescaler_val;
     772:	90 64       	ori	r25, 0x40	; 64
     774:	90 93 60 00 	sts	0x0060, r25
    sei();
     778:	78 94       	sei
     77a:	67 c0       	rjmp	.+206    	; 0x84a <Timebase_Timer_Config+0x16c>
  }else if(Timebase->Config.TimerType.RealTimeCounter == 1){
     77c:	81 fd       	sbrc	r24, 1
     77e:	65 c0       	rjmp	.+202    	; 0x84a <Timebase_Timer_Config+0x16c>
    //add rtc functions
  }else if(Timebase->Config.TimerType.GeneralTimer == 1){
     780:	82 ff       	sbrs	r24, 2
     782:	63 c0       	rjmp	.+198    	; 0x84a <Timebase_Timer_Config+0x16c>
    
	int32_t temp = F_CPU;
	uint16_t clock_div_factor[5] = {1, 8, 64, 256, 1024};
     784:	de 01       	movw	r26, r28
     786:	11 96       	adiw	r26, 0x01	; 1
     788:	e1 e1       	ldi	r30, 0x11	; 17
     78a:	f1 e0       	ldi	r31, 0x01	; 1
     78c:	8a e0       	ldi	r24, 0x0A	; 10
     78e:	01 90       	ld	r0, Z+
     790:	0d 92       	st	X+, r0
     792:	81 50       	subi	r24, 0x01	; 1
     794:	e1 f7       	brne	.-8      	; 0x78e <Timebase_Timer_Config+0xb0>
	
	temp /= UpdateRateHz;
     796:	98 01       	movw	r18, r16
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	72 e1       	ldi	r23, 0x12	; 18
     7a0:	8a e7       	ldi	r24, 0x7A	; 122
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divmodsi4>
     7a8:	72 2e       	mov	r7, r18
     7aa:	83 2e       	mov	r8, r19
     7ac:	94 2e       	mov	r9, r20
     7ae:	e5 2e       	mov	r14, r21
     7b0:	5e 01       	movw	r10, r28
     7b2:	08 94       	sec
     7b4:	a1 1c       	adc	r10, r1
     7b6:	b1 1c       	adc	r11, r1
     7b8:	c9 01       	movw	r24, r18
     7ba:	da 01       	movw	r26, r20
     7bc:	9c 01       	movw	r18, r24
     7be:	ad 01       	movw	r20, r26
     7c0:	ff 24       	eor	r15, r15
     7c2:	14 c0       	rjmp	.+40     	; 0x7ec <Timebase_Timer_Config+0x10e>
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
	  curr_freq  = temp;
	  curr_freq /= clock_div_factor[clock_div_index];
     7c4:	f5 01       	movw	r30, r10
     7c6:	21 91       	ld	r18, Z+
     7c8:	31 91       	ld	r19, Z+
     7ca:	5f 01       	movw	r10, r30
     7cc:	40 e0       	ldi	r20, 0x00	; 0
     7ce:	50 e0       	ldi	r21, 0x00	; 0
     7d0:	67 2d       	mov	r22, r7
     7d2:	78 2d       	mov	r23, r8
     7d4:	89 2d       	mov	r24, r9
     7d6:	9e 2d       	mov	r25, r14
     7d8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__divmodsi4>
     7dc:	c9 01       	movw	r24, r18
     7de:	da 01       	movw	r26, r20
     7e0:	9c 01       	movw	r18, r24
     7e2:	ad 01       	movw	r20, r26
	  clock_div_index++;
     7e4:	f3 94       	inc	r15
	  if(clock_div_index == 5){
     7e6:	f5 e0       	ldi	r31, 0x05	; 5
     7e8:	ff 16       	cp	r15, r31
     7ea:	31 f0       	breq	.+12     	; 0x7f8 <Timebase_Timer_Config+0x11a>
	temp /= UpdateRateHz;
	
	uint8_t  clock_div_index = 0;
	int32_t  curr_freq = temp;
	
	while( curr_freq > 0xFF ){
     7ec:	2f 3f       	cpi	r18, 0xFF	; 255
     7ee:	31 05       	cpc	r19, r1
     7f0:	41 05       	cpc	r20, r1
     7f2:	51 05       	cpc	r21, r1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <Timebase_Timer_Config+0x11a>
     7f6:	34 f7       	brge	.-52     	; 0x7c4 <Timebase_Timer_Config+0xe6>
	  if(clock_div_index == 5){
	    break;
	  }
	}
	
	clock_div_index -= 1;
     7f8:	8f 2d       	mov	r24, r15
     7fa:	81 50       	subi	r24, 0x01	; 1
	
	TCCR0A = 0x00;
     7fc:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0x00;
     7fe:	15 bc       	out	0x25, r1	; 37
    TIMSK0 = 0x00;
     800:	10 92 6e 00 	sts	0x006E, r1
    TIFR0  = 0x00;
     804:	15 ba       	out	0x15, r1	; 21
    OCR0A  = 0x00;
     806:	17 bc       	out	0x27, r1	; 39
    OCR0B  = 0x00;
     808:	18 bc       	out	0x28, r1	; 40
    TCNT0  = 0x00;
     80a:	16 bc       	out	0x26, r1	; 38
    OCR0A  = 0x00;
     80c:	17 bc       	out	0x27, r1	; 39
	
	if(clock_div_index == 0){
     80e:	88 23       	and	r24, r24
     810:	11 f4       	brne	.+4      	; 0x816 <Timebase_Timer_Config+0x138>
	  TCCR0B = (1<<CS00);
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	0f c0       	rjmp	.+30     	; 0x834 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 1){
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	11 f4       	brne	.+4      	; 0x81e <Timebase_Timer_Config+0x140>
	  TCCR0B = (1<<CS01);
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	0b c0       	rjmp	.+22     	; 0x834 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 2){
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	11 f4       	brne	.+4      	; 0x826 <Timebase_Timer_Config+0x148>
	  TCCR0B = (1<<CS00)|(1<<CS01);
     822:	83 e0       	ldi	r24, 0x03	; 3
     824:	07 c0       	rjmp	.+14     	; 0x834 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 3){
     826:	83 30       	cpi	r24, 0x03	; 3
     828:	11 f4       	brne	.+4      	; 0x82e <Timebase_Timer_Config+0x150>
	  TCCR0B = (1<<CS02);
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	03 c0       	rjmp	.+6      	; 0x834 <Timebase_Timer_Config+0x156>
	}else if(clock_div_index == 4){
     82e:	84 30       	cpi	r24, 0x04	; 4
     830:	11 f4       	brne	.+4      	; 0x836 <Timebase_Timer_Config+0x158>
	  TCCR0B = (1<<CS00)|(1<<CS02);
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	85 bd       	out	0x25, r24	; 37
	}
	
	Timebase->Time.OVFUpdateValue = (0xFF-curr_freq);
     836:	82 2f       	mov	r24, r18
     838:	80 95       	com	r24
     83a:	f6 01       	movw	r30, r12
     83c:	83 83       	std	Z+3, r24	; 0x03
	TCNT0  = Timebase->Time.OVFUpdateValue;
     83e:	83 81       	ldd	r24, Z+3	; 0x03
     840:	86 bd       	out	0x26, r24	; 38
	TIMSK0 = (1<<TOIE0);
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 6e 00 	sts	0x006E, r24
    sei();
     848:	78 94       	sei
  }
  Timebase->Config.UpdateRate = UpdateRateHz;
     84a:	f6 01       	movw	r30, r12
     84c:	12 83       	std	Z+2, r17	; 0x02
     84e:	01 83       	std	Z+1, r16	; 0x01
}
     850:	2a 96       	adiw	r28, 0x0a	; 10
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	cf 91       	pop	r28
     85e:	df 91       	pop	r29
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	af 90       	pop	r10
     870:	9f 90       	pop	r9
     872:	8f 90       	pop	r8
     874:	7f 90       	pop	r7
     876:	08 95       	ret

00000878 <Timebase_Token_Executing>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     878:	e0 91 4b 01 	lds	r30, 0x014B
     87c:	f0 91 4c 01 	lds	r31, 0x014C
     880:	87 89       	ldd	r24, Z+23	; 0x17
}
     882:	08 95       	ret

00000884 <Timebase_Token_Add>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     884:	e0 91 4b 01 	lds	r30, 0x014B
     888:	f0 91 4c 01 	lds	r31, 0x014C
     88c:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     88e:	8f 33       	cpi	r24, 0x3F	; 63
     890:	18 f4       	brcc	.+6      	; 0x898 <Timebase_Token_Add+0x14>
    Timebase->ActiveTokens += 1;
     892:	87 89       	ldd	r24, Z+23	; 0x17
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	87 8b       	std	Z+23, r24	; 0x17
     898:	08 95       	ret

0000089a <Timebase_Token_Remove>:


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     89a:	e0 91 4b 01 	lds	r30, 0x014B
     89e:	f0 91 4c 01 	lds	r31, 0x014C
     8a2:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     8a4:	88 23       	and	r24, r24
     8a6:	19 f0       	breq	.+6      	; 0x8ae <Timebase_Token_Remove+0x14>
    Timebase->ActiveTokens -= 1;
     8a8:	87 89       	ldd	r24, Z+23	; 0x17
     8aa:	81 50       	subi	r24, 0x01	; 1
     8ac:	87 8b       	std	Z+23, r24	; 0x17
     8ae:	08 95       	ret

000008b0 <Timebase_Token_Remove_All>:
  }
}

void Timebase_Token_Remove_All(void){
  Timebase->ActiveTokens = 0;
     8b0:	e0 91 4b 01 	lds	r30, 0x014B
     8b4:	f0 91 4c 01 	lds	r31, 0x014C
     8b8:	17 8a       	std	Z+23, r1	; 0x17
}
     8ba:	08 95       	ret

000008bc <Timebase_Timer_Get_SubSeconds>:
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     8bc:	e0 91 4b 01 	lds	r30, 0x014B
     8c0:	f0 91 4c 01 	lds	r31, 0x014C
     8c4:	20 85       	ldd	r18, Z+8	; 0x08
     8c6:	31 85       	ldd	r19, Z+9	; 0x09
}
     8c8:	c9 01       	movw	r24, r18
     8ca:	08 95       	ret

000008cc <Timebase_Timer_Get_Seconds>:

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     8cc:	e0 91 4b 01 	lds	r30, 0x014B
     8d0:	f0 91 4c 01 	lds	r31, 0x014C
     8d4:	22 85       	ldd	r18, Z+10	; 0x0a
     8d6:	33 85       	ldd	r19, Z+11	; 0x0b
     8d8:	44 85       	ldd	r20, Z+12	; 0x0c
     8da:	55 85       	ldd	r21, Z+13	; 0x0d
}
     8dc:	b9 01       	movw	r22, r18
     8de:	ca 01       	movw	r24, r20
     8e0:	08 95       	ret

000008e2 <Timebase_Timer_Set_SubSeconds>:

void Timebase_Timer_Set_SubSeconds(uint16_t value){
  Timebase->Time.SubSeconds = value;
     8e2:	e0 91 4b 01 	lds	r30, 0x014B
     8e6:	f0 91 4c 01 	lds	r31, 0x014C
     8ea:	91 87       	std	Z+9, r25	; 0x09
     8ec:	80 87       	std	Z+8, r24	; 0x08
}
     8ee:	08 95       	ret

000008f0 <Timebase_Timer_Set_Seconds>:

void Timebase_Timer_Set_Seconds(int32_t value){
  Timebase->Time.Seconds = value;
     8f0:	e0 91 4b 01 	lds	r30, 0x014B
     8f4:	f0 91 4c 01 	lds	r31, 0x014C
     8f8:	62 87       	std	Z+10, r22	; 0x0a
     8fa:	73 87       	std	Z+11, r23	; 0x0b
     8fc:	84 87       	std	Z+12, r24	; 0x0c
     8fe:	95 87       	std	Z+13, r25	; 0x0d
}
     900:	08 95       	ret

00000902 <Timebase_Timer_Delay_SubSeconds>:

void Timebase_Timer_Delay_SubSeconds(uint16_t value){
     902:	9c 01       	movw	r18, r24


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     904:	e0 91 4b 01 	lds	r30, 0x014B
     908:	f0 91 4c 01 	lds	r31, 0x014C
     90c:	87 89       	ldd	r24, Z+23	; 0x17
}

void Timebase_Token_Add(void){ 
  if( Timebase_Token_Executing() < 63){
     90e:	8f 33       	cpi	r24, 0x3F	; 63
     910:	18 f4       	brcc	.+6      	; 0x918 <Timebase_Timer_Delay_SubSeconds+0x16>
    Timebase->ActiveTokens += 1;
     912:	87 89       	ldd	r24, Z+23	; 0x17
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	87 8b       	std	Z+23, r24	; 0x17
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     918:	80 85       	ldd	r24, Z+8	; 0x08
     91a:	91 85       	ldd	r25, Z+9	; 0x09
void Timebase_Timer_Delay_SubSeconds(uint16_t value){
  #ifdef TIMEBASE_TOKEN_FUNCTIONS
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds();
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
  temp += value;
     920:	40 e0       	ldi	r20, 0x00	; 0
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	28 0f       	add	r18, r24
     926:	39 1f       	adc	r19, r25
     928:	4a 1f       	adc	r20, r26
     92a:	5b 1f       	adc	r21, r27
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     92c:	80 85       	ldd	r24, Z+8	; 0x08
     92e:	91 85       	ldd	r25, Z+9	; 0x09
  Timebase_Token_Add();
  #endif
  
  int32_t temp = Timebase_Timer_Get_SubSeconds();
  temp += value;
  while(temp > Timebase_Timer_Get_SubSeconds());
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	82 17       	cp	r24, r18
     936:	93 07       	cpc	r25, r19
     938:	a4 07       	cpc	r26, r20
     93a:	b5 07       	cpc	r27, r21
     93c:	bc f3       	brlt	.-18     	; 0x92c <Timebase_Timer_Delay_SubSeconds+0x2a>


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
     93e:	87 89       	ldd	r24, Z+23	; 0x17
    Timebase->ActiveTokens += 1;
  }
}

void Timebase_Token_Remove(void){
  if( Timebase_Token_Executing() > 0){
     940:	88 23       	and	r24, r24
     942:	19 f0       	breq	.+6      	; 0x94a <Timebase_Timer_Delay_SubSeconds+0x48>
    Timebase->ActiveTokens -= 1;
     944:	87 89       	ldd	r24, Z+23	; 0x17
     946:	81 50       	subi	r24, 0x01	; 1
     948:	87 8b       	std	Z+23, r24	; 0x17
     94a:	08 95       	ret

0000094c <Timebase_Timer_Await_SubSeconds>:
  Timebase_Token_Remove();
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
     94c:	bc 01       	movw	r22, r24
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     94e:	e0 91 4b 01 	lds	r30, 0x014B
     952:	f0 91 4c 01 	lds	r31, 0x014C
     956:	80 85       	ldd	r24, Z+8	; 0x08
     958:	91 85       	ldd	r25, Z+9	; 0x09
  #endif
}


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
     95a:	24 81       	ldd	r18, Z+4	; 0x04
     95c:	35 81       	ldd	r19, Z+5	; 0x05
     95e:	46 81       	ldd	r20, Z+6	; 0x06
     960:	57 81       	ldd	r21, Z+7	; 0x07
     962:	a0 e0       	ldi	r26, 0x00	; 0
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	82 17       	cp	r24, r18
     968:	93 07       	cpc	r25, r19
     96a:	a4 07       	cpc	r26, r20
     96c:	b5 07       	cpc	r27, r21
     96e:	99 f7       	brne	.-26     	; 0x956 <Timebase_Timer_Await_SubSeconds+0xa>
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     970:	80 85       	ldd	r24, Z+8	; 0x08
     972:	91 85       	ldd	r25, Z+9	; 0x09


void Timebase_Timer_Await_SubSeconds(uint16_t value){
  while(Timebase_Timer_Get_SubSeconds() != Timebase->Time.LastSample);
  
  Timebase->Time.LastSample = Timebase_Timer_Get_SubSeconds() + value;
     974:	86 0f       	add	r24, r22
     976:	97 1f       	adc	r25, r23
     978:	a0 e0       	ldi	r26, 0x00	; 0
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	84 83       	std	Z+4, r24	; 0x04
     97e:	95 83       	std	Z+5, r25	; 0x05
     980:	a6 83       	std	Z+6, r26	; 0x06
     982:	b7 83       	std	Z+7, r27	; 0x07
  if(Timebase->Time.LastSample >= Timebase->Config.UpdateRate){
     984:	24 81       	ldd	r18, Z+4	; 0x04
     986:	35 81       	ldd	r19, Z+5	; 0x05
     988:	46 81       	ldd	r20, Z+6	; 0x06
     98a:	57 81       	ldd	r21, Z+7	; 0x07
     98c:	81 81       	ldd	r24, Z+1	; 0x01
     98e:	92 81       	ldd	r25, Z+2	; 0x02
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	b0 e0       	ldi	r27, 0x00	; 0
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	4a 07       	cpc	r20, r26
     99a:	5b 07       	cpc	r21, r27
     99c:	84 f0       	brlt	.+32     	; 0x9be <Timebase_Timer_Await_SubSeconds+0x72>
    Timebase->Time.LastSample -= Timebase->Config.UpdateRate;
     99e:	24 81       	ldd	r18, Z+4	; 0x04
     9a0:	35 81       	ldd	r19, Z+5	; 0x05
     9a2:	46 81       	ldd	r20, Z+6	; 0x06
     9a4:	57 81       	ldd	r21, Z+7	; 0x07
     9a6:	81 81       	ldd	r24, Z+1	; 0x01
     9a8:	92 81       	ldd	r25, Z+2	; 0x02
     9aa:	a0 e0       	ldi	r26, 0x00	; 0
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	28 1b       	sub	r18, r24
     9b0:	39 0b       	sbc	r19, r25
     9b2:	4a 0b       	sbc	r20, r26
     9b4:	5b 0b       	sbc	r21, r27
     9b6:	24 83       	std	Z+4, r18	; 0x04
     9b8:	35 83       	std	Z+5, r19	; 0x05
     9ba:	46 83       	std	Z+6, r20	; 0x06
     9bc:	57 83       	std	Z+7, r21	; 0x07
     9be:	08 95       	ret

000009c0 <Timebase_Timer_Delay_Seconds>:
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9c8:	e0 91 4b 01 	lds	r30, 0x014B
     9cc:	f0 91 4c 01 	lds	r31, 0x014C
     9d0:	22 85       	ldd	r18, Z+10	; 0x0a
     9d2:	33 85       	ldd	r19, Z+11	; 0x0b
     9d4:	44 85       	ldd	r20, Z+12	; 0x0c
     9d6:	55 85       	ldd	r21, Z+13	; 0x0d
  }
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
     9d8:	7c 01       	movw	r14, r24
     9da:	00 e0       	ldi	r16, 0x00	; 0
     9dc:	10 e0       	ldi	r17, 0x00	; 0
     9de:	e2 0e       	add	r14, r18
     9e0:	f3 1e       	adc	r15, r19
     9e2:	04 1f       	adc	r16, r20
     9e4:	15 1f       	adc	r17, r21
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     9e6:	82 85       	ldd	r24, Z+10	; 0x0a
     9e8:	93 85       	ldd	r25, Z+11	; 0x0b
     9ea:	a4 85       	ldd	r26, Z+12	; 0x0c
     9ec:	b5 85       	ldd	r27, Z+13	; 0x0d
}


void Timebase_Timer_Delay_Seconds(uint16_t value){
  int32_t temp = Timebase_Timer_Get_Seconds() + value;
  while(temp > Timebase_Timer_Get_Seconds());
     9ee:	8e 15       	cp	r24, r14
     9f0:	9f 05       	cpc	r25, r15
     9f2:	a0 07       	cpc	r26, r16
     9f4:	b1 07       	cpc	r27, r17
     9f6:	bc f3       	brlt	.-18     	; 0x9e6 <Timebase_Timer_Delay_Seconds+0x26>
}
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	ef 90       	pop	r14
     a00:	08 95       	ret

00000a02 <Timebase_Window_Timer_Reset>:


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     a02:	e0 91 4b 01 	lds	r30, 0x014B
     a06:	f0 91 4c 01 	lds	r31, 0x014C
     a0a:	16 86       	std	Z+14, r1	; 0x0e
     a0c:	17 86       	std	Z+15, r1	; 0x0f
     a0e:	10 8a       	std	Z+16, r1	; 0x10
     a10:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     a12:	12 8a       	std	Z+18, r1	; 0x12
     a14:	13 8a       	std	Z+19, r1	; 0x13
     a16:	14 8a       	std	Z+20, r1	; 0x14
     a18:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     a1a:	16 8a       	std	Z+22, r1	; 0x16
}
     a1c:	08 95       	ret

00000a1e <Timebase_Window_Timer_Start>:

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
     a1e:	e0 91 4b 01 	lds	r30, 0x014B
     a22:	f0 91 4c 01 	lds	r31, 0x014C
     a26:	86 89       	ldd	r24, Z+22	; 0x16
     a28:	88 23       	and	r24, r24
     a2a:	91 f4       	brne	.+36     	; 0xa50 <Timebase_Window_Timer_Start+0x32>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a2c:	82 85       	ldd	r24, Z+10	; 0x0a
     a2e:	93 85       	ldd	r25, Z+11	; 0x0b
     a30:	a4 85       	ldd	r26, Z+12	; 0x0c
     a32:	b5 85       	ldd	r27, Z+13	; 0x0d
  Timebase->Time.Status = COUNTER_STATE_RESET;
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
     a34:	86 87       	std	Z+14, r24	; 0x0e
     a36:	97 87       	std	Z+15, r25	; 0x0f
     a38:	a0 8b       	std	Z+16, r26	; 0x10
     a3a:	b1 8b       	std	Z+17, r27	; 0x11
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a3c:	80 85       	ldd	r24, Z+8	; 0x08
     a3e:	91 85       	ldd	r25, Z+9	; 0x09
}

void Timebase_Window_Timer_Start(void){
  if(Timebase->Time.Status == COUNTER_STATE_RESET){
    Timebase->Time.StartTimeSeconds = Timebase_Timer_Get_Seconds();
    Timebase->Time.StartTimeSubSeconds = Timebase_Timer_Get_SubSeconds();
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	82 8b       	std	Z+18, r24	; 0x12
     a46:	93 8b       	std	Z+19, r25	; 0x13
     a48:	a4 8b       	std	Z+20, r26	; 0x14
     a4a:	b5 8b       	std	Z+21, r27	; 0x15
    Timebase->Time.Status = COUNTER_STATE_STARTED;
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	86 8b       	std	Z+22, r24	; 0x16
     a50:	08 95       	ret

00000a52 <Timebase_Window_Timer_Get_Interval>:
  }
}

//Unit in subseconds -> 20mS
int32_t Timebase_Window_Timer_Get_Interval(void){
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     a5e:	c0 91 4b 01 	lds	r28, 0x014B
     a62:	d0 91 4c 01 	lds	r29, 0x014C
     a66:	8e 89       	ldd	r24, Y+22	; 0x16
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	21 f0       	breq	.+8      	; 0xa74 <Timebase_Window_Timer_Get_Interval+0x22>
     a6c:	ee 24       	eor	r14, r14
     a6e:	ff 24       	eor	r15, r15
     a70:	87 01       	movw	r16, r14
     a72:	23 c0       	rjmp	.+70     	; 0xaba <Timebase_Window_Timer_Get_Interval+0x68>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     a74:	2a 85       	ldd	r18, Y+10	; 0x0a
     a76:	3b 85       	ldd	r19, Y+11	; 0x0b
     a78:	4c 85       	ldd	r20, Y+12	; 0x0c
     a7a:	5d 85       	ldd	r21, Y+13	; 0x0d
#endif


//Timer Functions
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
     a7c:	88 85       	ldd	r24, Y+8	; 0x08
     a7e:	99 85       	ldd	r25, Y+9	; 0x09

//Unit in subseconds -> 20mS
int32_t Timebase_Window_Timer_Get_Interval(void){
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    int32_t curr_s = Timebase_Timer_Get_Seconds();
    int32_t curr_ss = Timebase_Timer_Get_SubSeconds();
     a80:	7c 01       	movw	r14, r24
     a82:	00 e0       	ldi	r16, 0x00	; 0
     a84:	10 e0       	ldi	r17, 0x00	; 0
	curr_s -= Timebase->Time.StartTimeSeconds;
     a86:	8e 85       	ldd	r24, Y+14	; 0x0e
     a88:	9f 85       	ldd	r25, Y+15	; 0x0f
     a8a:	a8 89       	ldd	r26, Y+16	; 0x10
     a8c:	b9 89       	ldd	r27, Y+17	; 0x11
     a8e:	28 1b       	sub	r18, r24
     a90:	39 0b       	sbc	r19, r25
     a92:	4a 0b       	sbc	r20, r26
     a94:	5b 0b       	sbc	r21, r27
	curr_ss -= Timebase->Time.StartTimeSubSeconds;
	curr_s *= Timebase->Config.UpdateRate;
     a96:	69 81       	ldd	r22, Y+1	; 0x01
     a98:	7a 81       	ldd	r23, Y+2	; 0x02
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 8d 0c 	call	0x191a	; 0x191a <__mulsi3>
	curr_s += curr_ss;
     aa2:	2a 89       	ldd	r18, Y+18	; 0x12
     aa4:	3b 89       	ldd	r19, Y+19	; 0x13
     aa6:	4c 89       	ldd	r20, Y+20	; 0x14
     aa8:	5d 89       	ldd	r21, Y+21	; 0x15
     aaa:	e2 1a       	sub	r14, r18
     aac:	f3 0a       	sbc	r15, r19
     aae:	04 0b       	sbc	r16, r20
     ab0:	15 0b       	sbc	r17, r21
     ab2:	e6 0e       	add	r14, r22
     ab4:	f7 1e       	adc	r15, r23
     ab6:	08 1f       	adc	r16, r24
     ab8:	19 1f       	adc	r17, r25
	return curr_s;
  }else{
    return 0;
  }
}
     aba:	b7 01       	movw	r22, r14
     abc:	c8 01       	movw	r24, r16
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	08 95       	ret

00000acc <Timebase_Window_Timer_Get_Interval_Reset>:

int32_t Timebase_Window_Timer_Get_Interval_Reset(void){
  int32_t val=Timebase_Window_Timer_Get_Interval();
     acc:	0e 94 29 05 	call	0xa52	; 0xa52 <Timebase_Window_Timer_Get_Interval>
     ad0:	28 2f       	mov	r18, r24
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
     ad2:	e0 91 4b 01 	lds	r30, 0x014B
     ad6:	f0 91 4c 01 	lds	r31, 0x014C
     ada:	86 89       	ldd	r24, Z+22	; 0x16
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	49 f4       	brne	.+18     	; 0xaf2 <Timebase_Window_Timer_Get_Interval_Reset+0x26>
  while(temp > Timebase_Timer_Get_Seconds());
}


void Timebase_Window_Timer_Reset(void){
  Timebase->Time.StartTimeSeconds = 0;
     ae0:	16 86       	std	Z+14, r1	; 0x0e
     ae2:	17 86       	std	Z+15, r1	; 0x0f
     ae4:	10 8a       	std	Z+16, r1	; 0x10
     ae6:	11 8a       	std	Z+17, r1	; 0x11
  Timebase->Time.StartTimeSubSeconds = 0;
     ae8:	12 8a       	std	Z+18, r1	; 0x12
     aea:	13 8a       	std	Z+19, r1	; 0x13
     aec:	14 8a       	std	Z+20, r1	; 0x14
     aee:	15 8a       	std	Z+21, r1	; 0x15
  Timebase->Time.Status = COUNTER_STATE_RESET;
     af0:	16 8a       	std	Z+22, r1	; 0x16
  int32_t val=Timebase_Window_Timer_Get_Interval();
  if(Timebase->Time.Status == COUNTER_STATE_STARTED){
    Timebase_Window_Timer_Reset();
  }
  return val;
}
     af2:	82 2f       	mov	r24, r18
     af4:	08 95       	ret

00000af6 <Timebase_UpCounter_Get_Status>:



//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
     af6:	e0 91 4b 01 	lds	r30, 0x014B
     afa:	f0 91 4c 01 	lds	r31, 0x014C
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	25 e1       	ldi	r18, 0x15	; 21
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	ac 01       	movw	r20, r24
     b06:	42 9f       	mul	r20, r18
     b08:	c0 01       	movw	r24, r0
     b0a:	43 9f       	mul	r20, r19
     b0c:	90 0d       	add	r25, r0
     b0e:	52 9f       	mul	r21, r18
     b10:	90 0d       	add	r25, r0
     b12:	11 24       	eor	r1, r1
     b14:	e8 0f       	add	r30, r24
     b16:	f9 1f       	adc	r31, r25
     b18:	80 8d       	ldd	r24, Z+24	; 0x18
     b1a:	86 95       	lsr	r24
  return Timebase->UpCounter[window].Status.Value;
}
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	08 95       	ret

00000b20 <Timebase_UpCounter_Set_Status>:

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     b20:	e0 91 4b 01 	lds	r30, 0x014B
     b24:	f0 91 4c 01 	lds	r31, 0x014C
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	25 e1       	ldi	r18, 0x15	; 21
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	ac 01       	movw	r20, r24
     b30:	42 9f       	mul	r20, r18
     b32:	c0 01       	movw	r24, r0
     b34:	43 9f       	mul	r20, r19
     b36:	90 0d       	add	r25, r0
     b38:	52 9f       	mul	r21, r18
     b3a:	90 0d       	add	r25, r0
     b3c:	11 24       	eor	r1, r1
     b3e:	e8 0f       	add	r30, r24
     b40:	f9 1f       	adc	r31, r25
     b42:	6f 70       	andi	r22, 0x0F	; 15
     b44:	66 0f       	add	r22, r22
     b46:	80 8d       	ldd	r24, Z+24	; 0x18
     b48:	81 7e       	andi	r24, 0xE1	; 225
     b4a:	86 2b       	or	r24, r22
     b4c:	80 8f       	std	Z+24, r24	; 0x18
}
     b4e:	08 95       	ret

00000b50 <Timebase_UpCounter_Get_Value>:

int32_t Timebase_UpCounter_Get_Value(uint8_t window){
     b50:	e0 91 4b 01 	lds	r30, 0x014B
     b54:	f0 91 4c 01 	lds	r31, 0x014C
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	25 e1       	ldi	r18, 0x15	; 21
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	ac 01       	movw	r20, r24
     b60:	42 9f       	mul	r20, r18
     b62:	c0 01       	movw	r24, r0
     b64:	43 9f       	mul	r20, r19
     b66:	90 0d       	add	r25, r0
     b68:	52 9f       	mul	r21, r18
     b6a:	90 0d       	add	r25, r0
     b6c:	11 24       	eor	r1, r1
     b6e:	e8 0f       	add	r30, r24
     b70:	f9 1f       	adc	r31, r25
     b72:	df 01       	movw	r26, r30
     b74:	95 96       	adiw	r26, 0x25	; 37
     b76:	65 a1       	ldd	r22, Z+37	; 0x25
     b78:	11 96       	adiw	r26, 0x01	; 1
     b7a:	7c 91       	ld	r23, X
     b7c:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Value;
}
     b7e:	12 96       	adiw	r26, 0x02	; 2
     b80:	8c 91       	ld	r24, X
     b82:	12 97       	sbiw	r26, 0x02	; 2
     b84:	13 96       	adiw	r26, 0x03	; 3
     b86:	9c 91       	ld	r25, X
     b88:	08 95       	ret

00000b8a <Timebase_UpCounter_Set_Value>:

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     b8a:	e0 91 4b 01 	lds	r30, 0x014B
     b8e:	f0 91 4c 01 	lds	r31, 0x014C
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	25 e1       	ldi	r18, 0x15	; 21
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	dc 01       	movw	r26, r24
     b9a:	a2 9f       	mul	r26, r18
     b9c:	c0 01       	movw	r24, r0
     b9e:	a3 9f       	mul	r26, r19
     ba0:	90 0d       	add	r25, r0
     ba2:	b2 9f       	mul	r27, r18
     ba4:	90 0d       	add	r25, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	e8 0f       	add	r30, r24
     baa:	f9 1f       	adc	r31, r25
     bac:	45 a3       	std	Z+37, r20	; 0x25
     bae:	56 a3       	std	Z+38, r21	; 0x26
     bb0:	67 a3       	std	Z+39, r22	; 0x27
     bb2:	70 a7       	std	Z+40, r23	; 0x28
}
     bb4:	08 95       	ret

00000bb6 <Timebase_UpCounter_Get_EndValue>:

int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
     bb6:	e0 91 4b 01 	lds	r30, 0x014B
     bba:	f0 91 4c 01 	lds	r31, 0x014C
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	25 e1       	ldi	r18, 0x15	; 21
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	ac 01       	movw	r20, r24
     bc6:	42 9f       	mul	r20, r18
     bc8:	c0 01       	movw	r24, r0
     bca:	43 9f       	mul	r20, r19
     bcc:	90 0d       	add	r25, r0
     bce:	52 9f       	mul	r21, r18
     bd0:	90 0d       	add	r25, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	e8 0f       	add	r30, r24
     bd6:	f9 1f       	adc	r31, r25
     bd8:	df 01       	movw	r26, r30
     bda:	59 96       	adiw	r26, 0x19	; 25
     bdc:	61 8d       	ldd	r22, Z+25	; 0x19
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	7c 91       	ld	r23, X
     be2:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].EndValue;
}
     be4:	12 96       	adiw	r26, 0x02	; 2
     be6:	8c 91       	ld	r24, X
     be8:	12 97       	sbiw	r26, 0x02	; 2
     bea:	13 96       	adiw	r26, 0x03	; 3
     bec:	9c 91       	ld	r25, X
     bee:	08 95       	ret

00000bf0 <Timebase_UpCounter_Set_EndValue>:

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     bf0:	e0 91 4b 01 	lds	r30, 0x014B
     bf4:	f0 91 4c 01 	lds	r31, 0x014C
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	25 e1       	ldi	r18, 0x15	; 21
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	dc 01       	movw	r26, r24
     c00:	a2 9f       	mul	r26, r18
     c02:	c0 01       	movw	r24, r0
     c04:	a3 9f       	mul	r26, r19
     c06:	90 0d       	add	r25, r0
     c08:	b2 9f       	mul	r27, r18
     c0a:	90 0d       	add	r25, r0
     c0c:	11 24       	eor	r1, r1
     c0e:	e8 0f       	add	r30, r24
     c10:	f9 1f       	adc	r31, r25
     c12:	41 8f       	std	Z+25, r20	; 0x19
     c14:	52 8f       	std	Z+26, r21	; 0x1a
     c16:	63 8f       	std	Z+27, r22	; 0x1b
     c18:	74 8f       	std	Z+28, r23	; 0x1c
}
     c1a:	08 95       	ret

00000c1c <Timebase_UpCounter_Get_TargetValue>:

int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
     c1c:	e0 91 4b 01 	lds	r30, 0x014B
     c20:	f0 91 4c 01 	lds	r31, 0x014C
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	25 e1       	ldi	r18, 0x15	; 21
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	ac 01       	movw	r20, r24
     c2c:	42 9f       	mul	r20, r18
     c2e:	c0 01       	movw	r24, r0
     c30:	43 9f       	mul	r20, r19
     c32:	90 0d       	add	r25, r0
     c34:	52 9f       	mul	r21, r18
     c36:	90 0d       	add	r25, r0
     c38:	11 24       	eor	r1, r1
     c3a:	e8 0f       	add	r30, r24
     c3c:	f9 1f       	adc	r31, r25
     c3e:	df 01       	movw	r26, r30
     c40:	5d 96       	adiw	r26, 0x1d	; 29
     c42:	65 8d       	ldd	r22, Z+29	; 0x1d
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	7c 91       	ld	r23, X
     c48:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Target;
}
     c4a:	12 96       	adiw	r26, 0x02	; 2
     c4c:	8c 91       	ld	r24, X
     c4e:	12 97       	sbiw	r26, 0x02	; 2
     c50:	13 96       	adiw	r26, 0x03	; 3
     c52:	9c 91       	ld	r25, X
     c54:	08 95       	ret

00000c56 <Timebase_UpCounter_Set_TargetValue>:

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     c56:	e0 91 4b 01 	lds	r30, 0x014B
     c5a:	f0 91 4c 01 	lds	r31, 0x014C
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	25 e1       	ldi	r18, 0x15	; 21
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	dc 01       	movw	r26, r24
     c66:	a2 9f       	mul	r26, r18
     c68:	c0 01       	movw	r24, r0
     c6a:	a3 9f       	mul	r26, r19
     c6c:	90 0d       	add	r25, r0
     c6e:	b2 9f       	mul	r27, r18
     c70:	90 0d       	add	r25, r0
     c72:	11 24       	eor	r1, r1
     c74:	e8 0f       	add	r30, r24
     c76:	f9 1f       	adc	r31, r25
     c78:	45 8f       	std	Z+29, r20	; 0x1d
     c7a:	56 8f       	std	Z+30, r21	; 0x1e
     c7c:	67 8f       	std	Z+31, r22	; 0x1f
     c7e:	70 a3       	std	Z+32, r23	; 0x20
}
     c80:	08 95       	ret

00000c82 <Timebase_UpCounter_Get_TemporaryValue>:

int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
     c82:	e0 91 4b 01 	lds	r30, 0x014B
     c86:	f0 91 4c 01 	lds	r31, 0x014C
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	25 e1       	ldi	r18, 0x15	; 21
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	ac 01       	movw	r20, r24
     c92:	42 9f       	mul	r20, r18
     c94:	c0 01       	movw	r24, r0
     c96:	43 9f       	mul	r20, r19
     c98:	90 0d       	add	r25, r0
     c9a:	52 9f       	mul	r21, r18
     c9c:	90 0d       	add	r25, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	e8 0f       	add	r30, r24
     ca2:	f9 1f       	adc	r31, r25
     ca4:	df 01       	movw	r26, r30
     ca6:	91 96       	adiw	r26, 0x21	; 33
     ca8:	61 a1       	ldd	r22, Z+33	; 0x21
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	7c 91       	ld	r23, X
     cae:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].Temporary;
}
     cb0:	12 96       	adiw	r26, 0x02	; 2
     cb2:	8c 91       	ld	r24, X
     cb4:	12 97       	sbiw	r26, 0x02	; 2
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	9c 91       	ld	r25, X
     cba:	08 95       	ret

00000cbc <Timebase_UpCounter_Set_TemporaryValue>:

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     cbc:	e0 91 4b 01 	lds	r30, 0x014B
     cc0:	f0 91 4c 01 	lds	r31, 0x014C
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	25 e1       	ldi	r18, 0x15	; 21
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	dc 01       	movw	r26, r24
     ccc:	a2 9f       	mul	r26, r18
     cce:	c0 01       	movw	r24, r0
     cd0:	a3 9f       	mul	r26, r19
     cd2:	90 0d       	add	r25, r0
     cd4:	b2 9f       	mul	r27, r18
     cd6:	90 0d       	add	r25, r0
     cd8:	11 24       	eor	r1, r1
     cda:	e8 0f       	add	r30, r24
     cdc:	f9 1f       	adc	r31, r25
     cde:	41 a3       	std	Z+33, r20	; 0x21
     ce0:	52 a3       	std	Z+34, r21	; 0x22
     ce2:	63 a3       	std	Z+35, r22	; 0x23
     ce4:	74 a3       	std	Z+36, r23	; 0x24
}
     ce6:	08 95       	ret

00000ce8 <Timebase_UpCounter_Get_PeriodValue>:

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
     ce8:	e0 91 4b 01 	lds	r30, 0x014B
     cec:	f0 91 4c 01 	lds	r31, 0x014C
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	25 e1       	ldi	r18, 0x15	; 21
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	ac 01       	movw	r20, r24
     cf8:	42 9f       	mul	r20, r18
     cfa:	c0 01       	movw	r24, r0
     cfc:	43 9f       	mul	r20, r19
     cfe:	90 0d       	add	r25, r0
     d00:	52 9f       	mul	r21, r18
     d02:	90 0d       	add	r25, r0
     d04:	11 24       	eor	r1, r1
     d06:	e8 0f       	add	r30, r24
     d08:	f9 1f       	adc	r31, r25
     d0a:	df 01       	movw	r26, r30
     d0c:	99 96       	adiw	r26, 0x29	; 41
     d0e:	61 a5       	ldd	r22, Z+41	; 0x29
     d10:	11 96       	adiw	r26, 0x01	; 1
     d12:	7c 91       	ld	r23, X
     d14:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->UpCounter[window].PeriodValue;
}
     d16:	12 96       	adiw	r26, 0x02	; 2
     d18:	8c 91       	ld	r24, X
     d1a:	12 97       	sbiw	r26, 0x02	; 2
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	9c 91       	ld	r25, X
     d20:	08 95       	ret

00000d22 <Timebase_UpCounter_Set_PeriodValue>:

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     d22:	e0 91 4b 01 	lds	r30, 0x014B
     d26:	f0 91 4c 01 	lds	r31, 0x014C
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	25 e1       	ldi	r18, 0x15	; 21
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	dc 01       	movw	r26, r24
     d32:	a2 9f       	mul	r26, r18
     d34:	c0 01       	movw	r24, r0
     d36:	a3 9f       	mul	r26, r19
     d38:	90 0d       	add	r25, r0
     d3a:	b2 9f       	mul	r27, r18
     d3c:	90 0d       	add	r25, r0
     d3e:	11 24       	eor	r1, r1
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	41 a7       	std	Z+41, r20	; 0x29
     d46:	52 a7       	std	Z+42, r21	; 0x2a
     d48:	63 a7       	std	Z+43, r22	; 0x2b
     d4a:	74 a7       	std	Z+44, r23	; 0x2c
}
     d4c:	08 95       	ret

00000d4e <Timebase_UpCounter_Get_Period_Flag>:

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
     d4e:	e0 91 4b 01 	lds	r30, 0x014B
     d52:	f0 91 4c 01 	lds	r31, 0x014C
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	25 e1       	ldi	r18, 0x15	; 21
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	ac 01       	movw	r20, r24
     d5e:	42 9f       	mul	r20, r18
     d60:	c0 01       	movw	r24, r0
     d62:	43 9f       	mul	r20, r19
     d64:	90 0d       	add	r25, r0
     d66:	52 9f       	mul	r21, r18
     d68:	90 0d       	add	r25, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	e8 0f       	add	r30, r24
     d6e:	f9 1f       	adc	r31, r25
     d70:	80 8d       	ldd	r24, Z+24	; 0x18
  return Timebase->UpCounter[window].Status.PeriodFlag;
}
     d72:	81 70       	andi	r24, 0x01	; 1
     d74:	08 95       	ret

00000d76 <Timebase_UpCounter_Set_Period_Flag>:

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
     d76:	e0 91 4b 01 	lds	r30, 0x014B
     d7a:	f0 91 4c 01 	lds	r31, 0x014C
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	25 e1       	ldi	r18, 0x15	; 21
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	ac 01       	movw	r20, r24
     d86:	42 9f       	mul	r20, r18
     d88:	c0 01       	movw	r24, r0
     d8a:	43 9f       	mul	r20, r19
     d8c:	90 0d       	add	r25, r0
     d8e:	52 9f       	mul	r21, r18
     d90:	90 0d       	add	r25, r0
     d92:	11 24       	eor	r1, r1
     d94:	e8 0f       	add	r30, r24
     d96:	f9 1f       	adc	r31, r25
     d98:	80 8d       	ldd	r24, Z+24	; 0x18
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	80 8f       	std	Z+24, r24	; 0x18
}
     d9e:	08 95       	ret

00000da0 <Timebase_UpCounter_Clear_Period_Flag>:

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     da0:	e0 91 4b 01 	lds	r30, 0x014B
     da4:	f0 91 4c 01 	lds	r31, 0x014C
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	25 e1       	ldi	r18, 0x15	; 21
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	ac 01       	movw	r20, r24
     db0:	42 9f       	mul	r20, r18
     db2:	c0 01       	movw	r24, r0
     db4:	43 9f       	mul	r20, r19
     db6:	90 0d       	add	r25, r0
     db8:	52 9f       	mul	r21, r18
     dba:	90 0d       	add	r25, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	e8 0f       	add	r30, r24
     dc0:	f9 1f       	adc	r31, r25
     dc2:	80 8d       	ldd	r24, Z+24	; 0x18
     dc4:	8e 7f       	andi	r24, 0xFE	; 254
     dc6:	80 8f       	std	Z+24, r24	; 0x18
}
     dc8:	08 95       	ret

00000dca <Timebase_UpCounter_Reset>:
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     dca:	e0 91 4b 01 	lds	r30, 0x014B
     dce:	f0 91 4c 01 	lds	r31, 0x014C
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	25 e1       	ldi	r18, 0x15	; 21
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	ac 01       	movw	r20, r24
     dda:	42 9f       	mul	r20, r18
     ddc:	c0 01       	movw	r24, r0
     dde:	43 9f       	mul	r20, r19
     de0:	90 0d       	add	r25, r0
     de2:	52 9f       	mul	r21, r18
     de4:	90 0d       	add	r25, r0
     de6:	11 24       	eor	r1, r1
     de8:	e8 0f       	add	r30, r24
     dea:	f9 1f       	adc	r31, r25
     dec:	80 8d       	ldd	r24, Z+24	; 0x18
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     dee:	15 a2       	std	Z+37, r1	; 0x25
     df0:	16 a2       	std	Z+38, r1	; 0x26
     df2:	17 a2       	std	Z+39, r1	; 0x27
     df4:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     df6:	11 8e       	std	Z+25, r1	; 0x19
     df8:	12 8e       	std	Z+26, r1	; 0x1a
     dfa:	13 8e       	std	Z+27, r1	; 0x1b
     dfc:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     dfe:	15 8e       	std	Z+29, r1	; 0x1d
     e00:	16 8e       	std	Z+30, r1	; 0x1e
     e02:	17 8e       	std	Z+31, r1	; 0x1f
     e04:	10 a2       	std	Z+32, r1	; 0x20
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     e06:	11 a2       	std	Z+33, r1	; 0x21
     e08:	12 a2       	std	Z+34, r1	; 0x22
     e0a:	13 a2       	std	Z+35, r1	; 0x23
     e0c:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
     e0e:	11 a6       	std	Z+41, r1	; 0x29
     e10:	12 a6       	std	Z+42, r1	; 0x2a
     e12:	13 a6       	std	Z+43, r1	; 0x2b
     e14:	14 a6       	std	Z+44, r1	; 0x2c
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
     e16:	80 7e       	andi	r24, 0xE0	; 224
     e18:	80 8f       	std	Z+24, r24	; 0x18
  Timebase_UpCounter_Set_EndValue(window, 0);
  Timebase_UpCounter_Set_TargetValue(window, 0);
  Timebase_UpCounter_Set_TemporaryValue(window, 0);
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 
     e1a:	08 95       	ret

00000e1c <Timebase_UpCounter_Clear_All_Flags>:

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
     e1c:	0e 94 e5 06 	call	0xdca	; 0xdca <Timebase_UpCounter_Reset>
}
     e20:	08 95       	ret

00000e22 <Timebase_UpCounter_Start>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e22:	e0 91 4b 01 	lds	r30, 0x014B
     e26:	f0 91 4c 01 	lds	r31, 0x014C
     e2a:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     e2c:	25 e1       	ldi	r18, 0x15	; 21
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	ac 01       	movw	r20, r24
     e32:	42 9f       	mul	r20, r18
     e34:	c0 01       	movw	r24, r0
     e36:	43 9f       	mul	r20, r19
     e38:	90 0d       	add	r25, r0
     e3a:	52 9f       	mul	r21, r18
     e3c:	90 0d       	add	r25, r0
     e3e:	11 24       	eor	r1, r1
     e40:	e8 0f       	add	r30, r24
     e42:	f9 1f       	adc	r31, r25
     e44:	90 8d       	ldd	r25, Z+24	; 0x18
     e46:	89 2f       	mov	r24, r25
     e48:	86 95       	lsr	r24
     e4a:	8f 70       	andi	r24, 0x0F	; 15
     e4c:	81 30       	cpi	r24, 0x01	; 1
     e4e:	19 f0       	breq	.+6      	; 0xe56 <Timebase_UpCounter_Start+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     e50:	91 7e       	andi	r25, 0xE1	; 225
     e52:	92 60       	ori	r25, 0x02	; 2
     e54:	90 8f       	std	Z+24, r25	; 0x18
     e56:	08 95       	ret

00000e58 <Timebase_UpCounter_Stop>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e58:	e0 91 4b 01 	lds	r30, 0x014B
     e5c:	f0 91 4c 01 	lds	r31, 0x014C
     e60:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Status(window , COUNTER_STATE_START);    
  }
}

void Timebase_UpCounter_Stop(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
     e62:	25 e1       	ldi	r18, 0x15	; 21
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	ac 01       	movw	r20, r24
     e68:	42 9f       	mul	r20, r18
     e6a:	c0 01       	movw	r24, r0
     e6c:	43 9f       	mul	r20, r19
     e6e:	90 0d       	add	r25, r0
     e70:	52 9f       	mul	r21, r18
     e72:	90 0d       	add	r25, r0
     e74:	11 24       	eor	r1, r1
     e76:	e8 0f       	add	r30, r24
     e78:	f9 1f       	adc	r31, r25
     e7a:	90 8d       	ldd	r25, Z+24	; 0x18
     e7c:	89 2f       	mov	r24, r25
     e7e:	86 95       	lsr	r24
     e80:	8f 70       	andi	r24, 0x0F	; 15
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	19 f0       	breq	.+6      	; 0xe8c <Timebase_UpCounter_Stop+0x34>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     e86:	91 7e       	andi	r25, 0xE1	; 225
     e88:	94 60       	ori	r25, 0x04	; 4
     e8a:	90 8f       	std	Z+24, r25	; 0x18
     e8c:	08 95       	ret

00000e8e <Timebase_UpCounter_Set_Securely>:


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     e8e:	a0 91 4b 01 	lds	r26, 0x014B
     e92:	b0 91 4c 01 	lds	r27, 0x014C
     e96:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_UpCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
     e98:	25 e1       	ldi	r18, 0x15	; 21
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	82 9f       	mul	r24, r18
     e9e:	f0 01       	movw	r30, r0
     ea0:	83 9f       	mul	r24, r19
     ea2:	f0 0d       	add	r31, r0
     ea4:	92 9f       	mul	r25, r18
     ea6:	f0 0d       	add	r31, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ea 0f       	add	r30, r26
     eac:	fb 1f       	adc	r31, r27
     eae:	80 8d       	ldd	r24, Z+24	; 0x18
     eb0:	86 95       	lsr	r24
     eb2:	8f 70       	andi	r24, 0x0F	; 15
     eb4:	19 f5       	brne	.+70     	; 0xefc <Timebase_UpCounter_Set_Securely+0x6e>
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     eb6:	15 a2       	std	Z+37, r1	; 0x25
     eb8:	16 a2       	std	Z+38, r1	; 0x26
     eba:	17 a2       	std	Z+39, r1	; 0x27
     ebc:	10 a6       	std	Z+40, r1	; 0x28
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     ebe:	11 a2       	std	Z+33, r1	; 0x21
     ec0:	12 a2       	std	Z+34, r1	; 0x22
     ec2:	13 a2       	std	Z+35, r1	; 0x23
     ec4:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_TargetValue(uint8_t window){
  return Timebase->UpCounter[window].Target;
}

void Timebase_UpCounter_Set_TargetValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Target = value;
     ec6:	45 8f       	std	Z+29, r20	; 0x1d
     ec8:	56 8f       	std	Z+30, r21	; 0x1e
     eca:	67 8f       	std	Z+31, r22	; 0x1f
     ecc:	70 a3       	std	Z+32, r23	; 0x20
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     ece:	1a 96       	adiw	r26, 0x0a	; 10
     ed0:	8d 91       	ld	r24, X+
     ed2:	9d 91       	ld	r25, X+
     ed4:	0d 90       	ld	r0, X+
     ed6:	bc 91       	ld	r27, X
     ed8:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     eda:	84 0f       	add	r24, r20
     edc:	95 1f       	adc	r25, r21
     ede:	a6 1f       	adc	r26, r22
     ee0:	b7 1f       	adc	r27, r23
     ee2:	81 8f       	std	Z+25, r24	; 0x19
     ee4:	92 8f       	std	Z+26, r25	; 0x1a
     ee6:	a3 8f       	std	Z+27, r26	; 0x1b
     ee8:	b4 8f       	std	Z+28, r27	; 0x1c
void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
}

void Timebase_UpCounter_Start(uint8_t window){
  if(Timebase_UpCounter_Get_Status(window) != COUNTER_STATE_STARTED){
     eea:	90 8d       	ldd	r25, Z+24	; 0x18
     eec:	89 2f       	mov	r24, r25
     eee:	86 95       	lsr	r24
     ef0:	8f 70       	andi	r24, 0x0F	; 15
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	19 f0       	breq	.+6      	; 0xefc <Timebase_UpCounter_Set_Securely+0x6e>
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     ef6:	91 7e       	andi	r25, 0xE1	; 225
     ef8:	92 60       	ori	r25, 0x02	; 2
     efa:	90 8f       	std	Z+24, r25	; 0x18
     efc:	08 95       	ret

00000efe <Timebase_UpCounter_Set_Forcefully>:
    Timebase_UpCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);  
    Timebase_UpCounter_Start(window);
  }
}

void Timebase_UpCounter_Set_Forcefully(uint8_t window, int32_t value){
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	d8 2e       	mov	r13, r24
     f0a:	7a 01       	movw	r14, r20
     f0c:	8b 01       	movw	r16, r22
  Timebase_UpCounter_Reset( window );
     f0e:	0e 94 e5 06 	call	0xdca	; 0xdca <Timebase_UpCounter_Reset>
  Timebase_UpCounter_Set_Securely( window, value );
     f12:	8d 2d       	mov	r24, r13
     f14:	b8 01       	movw	r22, r16
     f16:	a7 01       	movw	r20, r14
     f18:	0e 94 47 07 	call	0xe8e	; 0xe8e <Timebase_UpCounter_Set_Securely>
} 
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	08 95       	ret

00000f28 <Timebase_UpCounter_Update>:

void Timebase_UpCounter_Update(uint8_t window){
     f28:	ef 92       	push	r14
     f2a:	ff 92       	push	r15
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17


//UpCounter Functions
#ifdef TIMEBASE_UPCOUNTER
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
     f30:	a0 91 4b 01 	lds	r26, 0x014B
     f34:	b0 91 4c 01 	lds	r27, 0x014C
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	25 e1       	ldi	r18, 0x15	; 21
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	82 9f       	mul	r24, r18
     f40:	f0 01       	movw	r30, r0
     f42:	83 9f       	mul	r24, r19
     f44:	f0 0d       	add	r31, r0
     f46:	92 9f       	mul	r25, r18
     f48:	f0 0d       	add	r31, r0
     f4a:	11 24       	eor	r1, r1
     f4c:	ea 0f       	add	r30, r26
     f4e:	fb 1f       	adc	r31, r27
     f50:	80 8d       	ldd	r24, Z+24	; 0x18
     f52:	86 95       	lsr	r24
     f54:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_UpCounter_Reset( window );
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
     f56:	81 30       	cpi	r24, 0x01	; 1
     f58:	b1 f5       	brne	.+108    	; 0xfc6 <Timebase_UpCounter_Update+0x9e>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     f5a:	1a 96       	adiw	r26, 0x0a	; 10
     f5c:	8d 91       	ld	r24, X+
     f5e:	9d 91       	ld	r25, X+
     f60:	0d 90       	ld	r0, X+
     f62:	bc 91       	ld	r27, X
     f64:	a0 2d       	mov	r26, r0
  Timebase_UpCounter_Set_Securely( window, value );
} 

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
     f66:	21 8d       	ldd	r18, Z+25	; 0x19
     f68:	32 8d       	ldd	r19, Z+26	; 0x1a
     f6a:	43 8d       	ldd	r20, Z+27	; 0x1b
     f6c:	54 8d       	ldd	r21, Z+28	; 0x1c
     f6e:	28 1b       	sub	r18, r24
     f70:	39 0b       	sbc	r19, r25
     f72:	4a 0b       	sbc	r20, r26
     f74:	5b 0b       	sbc	r21, r27
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     f76:	21 a3       	std	Z+33, r18	; 0x21
     f78:	32 a3       	std	Z+34, r19	; 0x22
     f7a:	43 a3       	std	Z+35, r20	; 0x23
     f7c:	54 a3       	std	Z+36, r21	; 0x24
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     f7e:	e5 8c       	ldd	r14, Z+29	; 0x1d
     f80:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f82:	07 8d       	ldd	r16, Z+31	; 0x1f
     f84:	10 a1       	ldd	r17, Z+32	; 0x20
     f86:	d8 01       	movw	r26, r16
     f88:	c7 01       	movw	r24, r14
     f8a:	82 1b       	sub	r24, r18
     f8c:	93 0b       	sbc	r25, r19
     f8e:	a4 0b       	sbc	r26, r20
     f90:	b5 0b       	sbc	r27, r21
     f92:	85 a3       	std	Z+37, r24	; 0x25
     f94:	96 a3       	std	Z+38, r25	; 0x26
     f96:	a7 a3       	std	Z+39, r26	; 0x27
     f98:	b0 a7       	std	Z+40, r27	; 0x28

void Timebase_UpCounter_Update(uint8_t window){
  if( Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_UpCounter_Set_TemporaryValue(window, Timebase_UpCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds() );
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window) );
    if(Timebase_UpCounter_Get_TemporaryValue(window) <= 0){
     f9a:	12 16       	cp	r1, r18
     f9c:	13 06       	cpc	r1, r19
     f9e:	14 06       	cpc	r1, r20
     fa0:	15 06       	cpc	r1, r21
     fa2:	8c f1       	brlt	.+98     	; 0x1006 <Timebase_UpCounter_Update+0xde>
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     fa4:	11 8e       	std	Z+25, r1	; 0x19
     fa6:	12 8e       	std	Z+26, r1	; 0x1a
     fa8:	13 8e       	std	Z+27, r1	; 0x1b
     faa:	14 8e       	std	Z+28, r1	; 0x1c
int32_t Timebase_UpCounter_Get_TemporaryValue(uint8_t window){
  return Timebase->UpCounter[window].Temporary;
}

void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
     fac:	11 a2       	std	Z+33, r1	; 0x21
     fae:	12 a2       	std	Z+34, r1	; 0x22
     fb0:	13 a2       	std	Z+35, r1	; 0x23
     fb2:	14 a2       	std	Z+36, r1	; 0x24
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     fb4:	e5 a2       	std	Z+37, r14	; 0x25
     fb6:	f6 a2       	std	Z+38, r15	; 0x26
     fb8:	07 a3       	std	Z+39, r16	; 0x27
     fba:	10 a7       	std	Z+40, r17	; 0x28
uint8_t Timebase_UpCounter_Get_Status(uint8_t window){
  return Timebase->UpCounter[window].Status.Value;
}

void Timebase_UpCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->UpCounter[window].Status.Value = value;
     fbc:	80 8d       	ldd	r24, Z+24	; 0x18
     fbe:	81 7e       	andi	r24, 0xE1	; 225
     fc0:	88 60       	ori	r24, 0x08	; 8
     fc2:	80 8f       	std	Z+24, r24	; 0x18
     fc4:	20 c0       	rjmp	.+64     	; 0x1006 <Timebase_UpCounter_Update+0xde>
      Timebase_UpCounter_Set_EndValue(window, 0);
      Timebase_UpCounter_Set_TemporaryValue(window, 0);
      Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window));
      Timebase_UpCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	f1 f4       	brne	.+60     	; 0x1006 <Timebase_UpCounter_Update+0xde>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
     fca:	1a 96       	adiw	r26, 0x0a	; 10
     fcc:	8d 91       	ld	r24, X+
     fce:	9d 91       	ld	r25, X+
     fd0:	0d 90       	ld	r0, X+
     fd2:	bc 91       	ld	r27, X
     fd4:	a0 2d       	mov	r26, r0
int32_t Timebase_UpCounter_Get_EndValue(uint8_t window){
  return Timebase->UpCounter[window].EndValue;
}

void Timebase_UpCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].EndValue = value;
     fd6:	21 a1       	ldd	r18, Z+33	; 0x21
     fd8:	32 a1       	ldd	r19, Z+34	; 0x22
     fda:	43 a1       	ldd	r20, Z+35	; 0x23
     fdc:	54 a1       	ldd	r21, Z+36	; 0x24
     fde:	82 0f       	add	r24, r18
     fe0:	93 1f       	adc	r25, r19
     fe2:	a4 1f       	adc	r26, r20
     fe4:	b5 1f       	adc	r27, r21
     fe6:	81 8f       	std	Z+25, r24	; 0x19
     fe8:	92 8f       	std	Z+26, r25	; 0x1a
     fea:	a3 8f       	std	Z+27, r26	; 0x1b
     fec:	b4 8f       	std	Z+28, r27	; 0x1c
int32_t Timebase_UpCounter_Get_Value(uint8_t window){
  return Timebase->UpCounter[window].Value;
}

void Timebase_UpCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Value = value;
     fee:	85 8d       	ldd	r24, Z+29	; 0x1d
     ff0:	96 8d       	ldd	r25, Z+30	; 0x1e
     ff2:	a7 8d       	ldd	r26, Z+31	; 0x1f
     ff4:	b0 a1       	ldd	r27, Z+32	; 0x20
     ff6:	82 1b       	sub	r24, r18
     ff8:	93 0b       	sbc	r25, r19
     ffa:	a4 0b       	sbc	r26, r20
     ffc:	b5 0b       	sbc	r27, r21
     ffe:	85 a3       	std	Z+37, r24	; 0x25
    1000:	96 a3       	std	Z+38, r25	; 0x26
    1002:	a7 a3       	std	Z+39, r26	; 0x27
    1004:	b0 a7       	std	Z+40, r27	; 0x28
    }
  } else if (Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){
    Timebase_UpCounter_Set_EndValue(window, Timebase_UpCounter_Get_TemporaryValue(window) + Timebase_Timer_Get_Seconds());
    Timebase_UpCounter_Set_Value(window, Timebase_UpCounter_Get_TargetValue(window) - Timebase_UpCounter_Get_TemporaryValue(window));
  }
}
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	08 95       	ret

00001010 <Timebase_UpCounter_Expired>:


uint8_t Timebase_UpCounter_Expired(uint8_t window){
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	e0 91 4b 01 	lds	r30, 0x014B
    1016:	f0 91 4c 01 	lds	r31, 0x014C
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	25 e1       	ldi	r18, 0x15	; 21
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	bc 01       	movw	r22, r24
    1022:	62 9f       	mul	r22, r18
    1024:	c0 01       	movw	r24, r0
    1026:	63 9f       	mul	r22, r19
    1028:	90 0d       	add	r25, r0
    102a:	72 9f       	mul	r23, r18
    102c:	90 0d       	add	r25, r0
    102e:	11 24       	eor	r1, r1
    1030:	e8 0f       	add	r30, r24
    1032:	f9 1f       	adc	r31, r25
    1034:	80 8d       	ldd	r24, Z+24	; 0x18
    1036:	86 95       	lsr	r24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	09 f4       	brne	.+2      	; 0x1040 <Timebase_UpCounter_Expired+0x30>
    103e:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1040:	84 2f       	mov	r24, r20
    1042:	08 95       	ret

00001044 <Timebase_UpCounter_Expired_Event>:

uint8_t Timebase_UpCounter_Expired_Event(uint8_t window){
    1044:	48 2f       	mov	r20, r24
  if(Timebase_UpCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1046:	e0 91 4b 01 	lds	r30, 0x014B
    104a:	f0 91 4c 01 	lds	r31, 0x014C
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	85 e1       	ldi	r24, 0x15	; 21
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	bc 01       	movw	r22, r24
    1058:	26 9f       	mul	r18, r22
    105a:	c0 01       	movw	r24, r0
    105c:	27 9f       	mul	r18, r23
    105e:	90 0d       	add	r25, r0
    1060:	36 9f       	mul	r19, r22
    1062:	90 0d       	add	r25, r0
    1064:	11 24       	eor	r1, r1
    1066:	e8 0f       	add	r30, r24
    1068:	f9 1f       	adc	r31, r25
    106a:	80 8d       	ldd	r24, Z+24	; 0x18
    106c:	86 95       	lsr	r24
    106e:	8f 70       	andi	r24, 0x0F	; 15
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	11 f0       	breq	.+4      	; 0x1078 <Timebase_UpCounter_Expired_Event+0x34>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	08 95       	ret
  Timebase_UpCounter_Set_PeriodValue(window, 0);
  Timebase_UpCounter_Clear_Period_Flag(window);
} 

void Timebase_UpCounter_Clear_All_Flags(uint8_t window){
  Timebase_UpCounter_Reset( window );
    1078:	84 2f       	mov	r24, r20
    107a:	0e 94 e5 06 	call	0xdca	; 0xdca <Timebase_UpCounter_Reset>
    107e:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    1080:	08 95       	ret

00001082 <Timebase_UpCounter_Set_Period_Value_Securely>:
void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
}

uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
    1082:	e0 91 4b 01 	lds	r30, 0x014B
    1086:	f0 91 4c 01 	lds	r31, 0x014C
    108a:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

void Timebase_UpCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_UpCounter_Get_Period_Flag( window ) == 0){
    108c:	25 e1       	ldi	r18, 0x15	; 21
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	dc 01       	movw	r26, r24
    1092:	a2 9f       	mul	r26, r18
    1094:	c0 01       	movw	r24, r0
    1096:	a3 9f       	mul	r26, r19
    1098:	90 0d       	add	r25, r0
    109a:	b2 9f       	mul	r27, r18
    109c:	90 0d       	add	r25, r0
    109e:	11 24       	eor	r1, r1
    10a0:	e8 0f       	add	r30, r24
    10a2:	f9 1f       	adc	r31, r25
    10a4:	80 8d       	ldd	r24, Z+24	; 0x18
    10a6:	80 fd       	sbrc	r24, 0
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <Timebase_UpCounter_Set_Period_Value_Securely+0x46>
int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
}

void Timebase_UpCounter_Set_PeriodValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].PeriodValue = value;
    10aa:	85 a1       	ldd	r24, Z+37	; 0x25
    10ac:	96 a1       	ldd	r25, Z+38	; 0x26
    10ae:	a7 a1       	ldd	r26, Z+39	; 0x27
    10b0:	b0 a5       	ldd	r27, Z+40	; 0x28
    10b2:	84 0f       	add	r24, r20
    10b4:	95 1f       	adc	r25, r21
    10b6:	a6 1f       	adc	r26, r22
    10b8:	b7 1f       	adc	r27, r23
    10ba:	81 a7       	std	Z+41, r24	; 0x29
    10bc:	92 a7       	std	Z+42, r25	; 0x2a
    10be:	a3 a7       	std	Z+43, r26	; 0x2b
    10c0:	b4 a7       	std	Z+44, r27	; 0x2c
uint8_t Timebase_UpCounter_Get_Period_Flag(uint8_t window){
  return Timebase->UpCounter[window].Status.PeriodFlag;
}

void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
    10c2:	80 8d       	ldd	r24, Z+24	; 0x18
    10c4:	81 60       	ori	r24, 0x01	; 1
    10c6:	80 8f       	std	Z+24, r24	; 0x18
    10c8:	08 95       	ret

000010ca <Timebase_UpCounter_Get_Remaining_Period_Value>:
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    10ca:	e0 91 4b 01 	lds	r30, 0x014B
    10ce:	f0 91 4c 01 	lds	r31, 0x014C
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    10d4:	25 e1       	ldi	r18, 0x15	; 21
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	ac 01       	movw	r20, r24
    10da:	42 9f       	mul	r20, r18
    10dc:	c0 01       	movw	r24, r0
    10de:	43 9f       	mul	r20, r19
    10e0:	90 0d       	add	r25, r0
    10e2:	52 9f       	mul	r21, r18
    10e4:	90 0d       	add	r25, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	e8 0f       	add	r30, r24
    10ea:	f9 1f       	adc	r31, r25
    10ec:	21 a5       	ldd	r18, Z+41	; 0x29
    10ee:	32 a5       	ldd	r19, Z+42	; 0x2a
    10f0:	43 a5       	ldd	r20, Z+43	; 0x2b
    10f2:	54 a5       	ldd	r21, Z+44	; 0x2c
    10f4:	85 a1       	ldd	r24, Z+37	; 0x25
    10f6:	96 a1       	ldd	r25, Z+38	; 0x26
    10f8:	a7 a1       	ldd	r26, Z+39	; 0x27
    10fa:	b0 a5       	ldd	r27, Z+40	; 0x28
    10fc:	28 1b       	sub	r18, r24
    10fe:	39 0b       	sbc	r19, r25
    1100:	4a 0b       	sbc	r20, r26
    1102:	5b 0b       	sbc	r21, r27
    1104:	57 ff       	sbrs	r21, 7
    1106:	04 c0       	rjmp	.+8      	; 0x1110 <Timebase_UpCounter_Get_Remaining_Period_Value+0x46>
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	40 e0       	ldi	r20, 0x00	; 0
    110e:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    1110:	b9 01       	movw	r22, r18
    1112:	ca 01       	movw	r24, r20
    1114:	08 95       	ret

00001116 <Timebase_UpCounter_Period_Value_Expired>:

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
void Timebase_UpCounter_Set_TemporaryValue(uint8_t window, int32_t value){
  Timebase->UpCounter[window].Temporary = value;
}

int32_t Timebase_UpCounter_Get_PeriodValue(uint8_t window){
  return Timebase->UpCounter[window].PeriodValue;
    111a:	c0 91 4b 01 	lds	r28, 0x014B
    111e:	d0 91 4c 01 	lds	r29, 0x014C
    1122:	68 2f       	mov	r22, r24
    1124:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_UpCounter_Set_Period_Flag( window);
  }
}

int32_t Timebase_UpCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_UpCounter_Get_PeriodValue( window ) - Timebase_UpCounter_Get_Value( window );
    1126:	85 e1       	ldi	r24, 0x15	; 21
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	68 9f       	mul	r22, r24
    112c:	f0 01       	movw	r30, r0
    112e:	69 9f       	mul	r22, r25
    1130:	f0 0d       	add	r31, r0
    1132:	78 9f       	mul	r23, r24
    1134:	f0 0d       	add	r31, r0
    1136:	11 24       	eor	r1, r1
    1138:	ec 0f       	add	r30, r28
    113a:	fd 1f       	adc	r31, r29
    113c:	21 a5       	ldd	r18, Z+41	; 0x29
    113e:	32 a5       	ldd	r19, Z+42	; 0x2a
    1140:	43 a5       	ldd	r20, Z+43	; 0x2b
    1142:	54 a5       	ldd	r21, Z+44	; 0x2c
    1144:	85 a1       	ldd	r24, Z+37	; 0x25
    1146:	96 a1       	ldd	r25, Z+38	; 0x26
    1148:	a7 a1       	ldd	r26, Z+39	; 0x27
    114a:	b0 a5       	ldd	r27, Z+40	; 0x28
    114c:	28 1b       	sub	r18, r24
    114e:	39 0b       	sbc	r19, r25
    1150:	4a 0b       	sbc	r20, r26
    1152:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    1154:	57 fd       	sbrc	r21, 7
    1156:	07 c0       	rjmp	.+14     	; 0x1166 <Timebase_UpCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_UpCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_UpCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_UpCounter_Get_Period_Flag( window )){
    1158:	21 15       	cp	r18, r1
    115a:	31 05       	cpc	r19, r1
    115c:	41 05       	cpc	r20, r1
    115e:	51 05       	cpc	r21, r1
    1160:	11 f0       	breq	.+4      	; 0x1166 <Timebase_UpCounter_Period_Value_Expired+0x50>
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	12 c0       	rjmp	.+36     	; 0x118a <Timebase_UpCounter_Period_Value_Expired+0x74>
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	85 e1       	ldi	r24, 0x15	; 21
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	ac 01       	movw	r20, r24
    116e:	64 9f       	mul	r22, r20
    1170:	c0 01       	movw	r24, r0
    1172:	65 9f       	mul	r22, r21
    1174:	90 0d       	add	r25, r0
    1176:	74 9f       	mul	r23, r20
    1178:	90 0d       	add	r25, r0
    117a:	11 24       	eor	r1, r1
    117c:	c8 0f       	add	r28, r24
    117e:	d9 1f       	adc	r29, r25
    1180:	88 8d       	ldd	r24, Y+24	; 0x18
    1182:	80 ff       	sbrs	r24, 0
    1184:	21 e0       	ldi	r18, 0x01	; 1
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    118a:	82 2f       	mov	r24, r18
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <Timebase_UpCounter_Period_Value_Expired_Event>:

uint8_t Timebase_UpCounter_Period_Value_Expired_Event(uint8_t window){
    1192:	1f 93       	push	r17
    1194:	18 2f       	mov	r17, r24
  if(Timebase_UpCounter_Period_Value_Expired( window ) == 1){
    1196:	0e 94 8b 08 	call	0x1116	; 0x1116 <Timebase_UpCounter_Period_Value_Expired>
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	11 f0       	breq	.+4      	; 0x11a2 <Timebase_UpCounter_Period_Value_Expired_Event+0x10>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	16 c0       	rjmp	.+44     	; 0x11ce <Timebase_UpCounter_Period_Value_Expired_Event+0x3c>
void Timebase_UpCounter_Set_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 1;
}

void Timebase_UpCounter_Clear_Period_Flag(uint8_t window){
  Timebase->UpCounter[window].Status.PeriodFlag = 0;
    11a2:	e0 91 4b 01 	lds	r30, 0x014B
    11a6:	f0 91 4c 01 	lds	r31, 0x014C
    11aa:	21 2f       	mov	r18, r17
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	85 e1       	ldi	r24, 0x15	; 21
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	ac 01       	movw	r20, r24
    11b4:	24 9f       	mul	r18, r20
    11b6:	c0 01       	movw	r24, r0
    11b8:	25 9f       	mul	r18, r21
    11ba:	90 0d       	add	r25, r0
    11bc:	34 9f       	mul	r19, r20
    11be:	90 0d       	add	r25, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	e8 0f       	add	r30, r24
    11c4:	f9 1f       	adc	r31, r25
    11c6:	80 8d       	ldd	r24, Z+24	; 0x18
    11c8:	8e 7f       	andi	r24, 0xFE	; 254
    11ca:	80 8f       	std	Z+24, r24	; 0x18
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_UpCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    11ce:	1f 91       	pop	r17
    11d0:	08 95       	ret

000011d2 <Timebase_UpCounter_Update_All>:

void Timebase_UpCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Update(i);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	0e 94 94 07 	call	0xf28	; 0xf28 <Timebase_UpCounter_Update>
  }
}
    11d8:	08 95       	ret

000011da <Timebase_UpCounter_Reset_All>:

void Timebase_UpCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_UPCOUNTER; i++){
    Timebase_UpCounter_Reset(i);
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	0e 94 e5 06 	call	0xdca	; 0xdca <Timebase_UpCounter_Reset>
  }
}
    11e0:	08 95       	ret

000011e2 <Timebase_DownCounter_Get_Status>:
#endif



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
    11e2:	e0 91 4b 01 	lds	r30, 0x014B
    11e6:	f0 91 4c 01 	lds	r31, 0x014C
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	2d e0       	ldi	r18, 0x0D	; 13
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	ac 01       	movw	r20, r24
    11f2:	42 9f       	mul	r20, r18
    11f4:	c0 01       	movw	r24, r0
    11f6:	43 9f       	mul	r20, r19
    11f8:	90 0d       	add	r25, r0
    11fa:	52 9f       	mul	r21, r18
    11fc:	90 0d       	add	r25, r0
    11fe:	11 24       	eor	r1, r1
    1200:	e8 0f       	add	r30, r24
    1202:	f9 1f       	adc	r31, r25
    1204:	85 a5       	ldd	r24, Z+45	; 0x2d
    1206:	86 95       	lsr	r24
  return Timebase->DownCounter[window].Status.Value;
}
    1208:	8f 70       	andi	r24, 0x0F	; 15
    120a:	08 95       	ret

0000120c <Timebase_DownCounter_Set_Status>:

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    120c:	e0 91 4b 01 	lds	r30, 0x014B
    1210:	f0 91 4c 01 	lds	r31, 0x014C
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	2d e0       	ldi	r18, 0x0D	; 13
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	ac 01       	movw	r20, r24
    121c:	42 9f       	mul	r20, r18
    121e:	c0 01       	movw	r24, r0
    1220:	43 9f       	mul	r20, r19
    1222:	90 0d       	add	r25, r0
    1224:	52 9f       	mul	r21, r18
    1226:	90 0d       	add	r25, r0
    1228:	11 24       	eor	r1, r1
    122a:	e8 0f       	add	r30, r24
    122c:	f9 1f       	adc	r31, r25
    122e:	6f 70       	andi	r22, 0x0F	; 15
    1230:	66 0f       	add	r22, r22
    1232:	85 a5       	ldd	r24, Z+45	; 0x2d
    1234:	81 7e       	andi	r24, 0xE1	; 225
    1236:	86 2b       	or	r24, r22
    1238:	85 a7       	std	Z+45, r24	; 0x2d
}
    123a:	08 95       	ret

0000123c <Timebase_DownCounter_Get_Value>:

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
    123c:	e0 91 4b 01 	lds	r30, 0x014B
    1240:	f0 91 4c 01 	lds	r31, 0x014C
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	2d e0       	ldi	r18, 0x0D	; 13
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	ac 01       	movw	r20, r24
    124c:	42 9f       	mul	r20, r18
    124e:	c0 01       	movw	r24, r0
    1250:	43 9f       	mul	r20, r19
    1252:	90 0d       	add	r25, r0
    1254:	52 9f       	mul	r21, r18
    1256:	90 0d       	add	r25, r0
    1258:	11 24       	eor	r1, r1
    125a:	e8 0f       	add	r30, r24
    125c:	f9 1f       	adc	r31, r25
    125e:	df 01       	movw	r26, r30
    1260:	d2 96       	adiw	r26, 0x32	; 50
    1262:	62 a9       	ldd	r22, Z+50	; 0x32
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	7c 91       	ld	r23, X
    1268:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].Value;
}
    126a:	12 96       	adiw	r26, 0x02	; 2
    126c:	8c 91       	ld	r24, X
    126e:	12 97       	sbiw	r26, 0x02	; 2
    1270:	13 96       	adiw	r26, 0x03	; 3
    1272:	9c 91       	ld	r25, X
    1274:	08 95       	ret

00001276 <Timebase_DownCounter_Set_Value>:

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1276:	e0 91 4b 01 	lds	r30, 0x014B
    127a:	f0 91 4c 01 	lds	r31, 0x014C
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	2d e0       	ldi	r18, 0x0D	; 13
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	dc 01       	movw	r26, r24
    1286:	a2 9f       	mul	r26, r18
    1288:	c0 01       	movw	r24, r0
    128a:	a3 9f       	mul	r26, r19
    128c:	90 0d       	add	r25, r0
    128e:	b2 9f       	mul	r27, r18
    1290:	90 0d       	add	r25, r0
    1292:	11 24       	eor	r1, r1
    1294:	e8 0f       	add	r30, r24
    1296:	f9 1f       	adc	r31, r25
    1298:	42 ab       	std	Z+50, r20	; 0x32
    129a:	53 ab       	std	Z+51, r21	; 0x33
    129c:	64 ab       	std	Z+52, r22	; 0x34
    129e:	75 ab       	std	Z+53, r23	; 0x35
}
    12a0:	08 95       	ret

000012a2 <Timebase_DownCounter_Get_EndValue>:

int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
    12a2:	e0 91 4b 01 	lds	r30, 0x014B
    12a6:	f0 91 4c 01 	lds	r31, 0x014C
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	2d e0       	ldi	r18, 0x0D	; 13
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	ac 01       	movw	r20, r24
    12b2:	42 9f       	mul	r20, r18
    12b4:	c0 01       	movw	r24, r0
    12b6:	43 9f       	mul	r20, r19
    12b8:	90 0d       	add	r25, r0
    12ba:	52 9f       	mul	r21, r18
    12bc:	90 0d       	add	r25, r0
    12be:	11 24       	eor	r1, r1
    12c0:	e8 0f       	add	r30, r24
    12c2:	f9 1f       	adc	r31, r25
    12c4:	df 01       	movw	r26, r30
    12c6:	9e 96       	adiw	r26, 0x2e	; 46
    12c8:	66 a5       	ldd	r22, Z+46	; 0x2e
    12ca:	11 96       	adiw	r26, 0x01	; 1
    12cc:	7c 91       	ld	r23, X
    12ce:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].EndValue;
}
    12d0:	12 96       	adiw	r26, 0x02	; 2
    12d2:	8c 91       	ld	r24, X
    12d4:	12 97       	sbiw	r26, 0x02	; 2
    12d6:	13 96       	adiw	r26, 0x03	; 3
    12d8:	9c 91       	ld	r25, X
    12da:	08 95       	ret

000012dc <Timebase_DownCounter_Set_EndValue>:

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    12dc:	e0 91 4b 01 	lds	r30, 0x014B
    12e0:	f0 91 4c 01 	lds	r31, 0x014C
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	2d e0       	ldi	r18, 0x0D	; 13
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	dc 01       	movw	r26, r24
    12ec:	a2 9f       	mul	r26, r18
    12ee:	c0 01       	movw	r24, r0
    12f0:	a3 9f       	mul	r26, r19
    12f2:	90 0d       	add	r25, r0
    12f4:	b2 9f       	mul	r27, r18
    12f6:	90 0d       	add	r25, r0
    12f8:	11 24       	eor	r1, r1
    12fa:	e8 0f       	add	r30, r24
    12fc:	f9 1f       	adc	r31, r25
    12fe:	46 a7       	std	Z+46, r20	; 0x2e
    1300:	57 a7       	std	Z+47, r21	; 0x2f
    1302:	60 ab       	std	Z+48, r22	; 0x30
    1304:	71 ab       	std	Z+49, r23	; 0x31
}
    1306:	08 95       	ret

00001308 <Timebase_DownCounter_Get_PeriodValue>:


int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
    1308:	e0 91 4b 01 	lds	r30, 0x014B
    130c:	f0 91 4c 01 	lds	r31, 0x014C
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	2d e0       	ldi	r18, 0x0D	; 13
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	ac 01       	movw	r20, r24
    1318:	42 9f       	mul	r20, r18
    131a:	c0 01       	movw	r24, r0
    131c:	43 9f       	mul	r20, r19
    131e:	90 0d       	add	r25, r0
    1320:	52 9f       	mul	r21, r18
    1322:	90 0d       	add	r25, r0
    1324:	11 24       	eor	r1, r1
    1326:	e8 0f       	add	r30, r24
    1328:	f9 1f       	adc	r31, r25
    132a:	df 01       	movw	r26, r30
    132c:	d6 96       	adiw	r26, 0x36	; 54
    132e:	66 a9       	ldd	r22, Z+54	; 0x36
    1330:	11 96       	adiw	r26, 0x01	; 1
    1332:	7c 91       	ld	r23, X
    1334:	11 97       	sbiw	r26, 0x01	; 1
  return Timebase->DownCounter[window].PeriodValue;
}
    1336:	12 96       	adiw	r26, 0x02	; 2
    1338:	8c 91       	ld	r24, X
    133a:	12 97       	sbiw	r26, 0x02	; 2
    133c:	13 96       	adiw	r26, 0x03	; 3
    133e:	9c 91       	ld	r25, X
    1340:	08 95       	ret

00001342 <Timebase_DownCounter_Set_PeriodValue>:

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
    1342:	e0 91 4b 01 	lds	r30, 0x014B
    1346:	f0 91 4c 01 	lds	r31, 0x014C
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
  if(value < 0){
    134e:	77 ff       	sbrs	r23, 7
    1350:	11 c0       	rjmp	.+34     	; 0x1374 <Timebase_DownCounter_Set_PeriodValue+0x32>
    Timebase->DownCounter[window].PeriodValue = 0;
    1352:	8d e0       	ldi	r24, 0x0D	; 13
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	ac 01       	movw	r20, r24
    1358:	24 9f       	mul	r18, r20
    135a:	c0 01       	movw	r24, r0
    135c:	25 9f       	mul	r18, r21
    135e:	90 0d       	add	r25, r0
    1360:	34 9f       	mul	r19, r20
    1362:	90 0d       	add	r25, r0
    1364:	11 24       	eor	r1, r1
    1366:	e8 0f       	add	r30, r24
    1368:	f9 1f       	adc	r31, r25
    136a:	16 aa       	std	Z+54, r1	; 0x36
    136c:	17 aa       	std	Z+55, r1	; 0x37
    136e:	10 ae       	std	Z+56, r1	; 0x38
    1370:	11 ae       	std	Z+57, r1	; 0x39
    1372:	08 95       	ret
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    1374:	8d e0       	ldi	r24, 0x0D	; 13
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	dc 01       	movw	r26, r24
    137a:	2a 9f       	mul	r18, r26
    137c:	c0 01       	movw	r24, r0
    137e:	2b 9f       	mul	r18, r27
    1380:	90 0d       	add	r25, r0
    1382:	3a 9f       	mul	r19, r26
    1384:	90 0d       	add	r25, r0
    1386:	11 24       	eor	r1, r1
    1388:	e8 0f       	add	r30, r24
    138a:	f9 1f       	adc	r31, r25
    138c:	46 ab       	std	Z+54, r20	; 0x36
    138e:	57 ab       	std	Z+55, r21	; 0x37
    1390:	60 af       	std	Z+56, r22	; 0x38
    1392:	71 af       	std	Z+57, r23	; 0x39
    1394:	08 95       	ret

00001396 <Timebase_DownCounter_Get_Period_Flag>:
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
    1396:	e0 91 4b 01 	lds	r30, 0x014B
    139a:	f0 91 4c 01 	lds	r31, 0x014C
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	2d e0       	ldi	r18, 0x0D	; 13
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	ac 01       	movw	r20, r24
    13a6:	42 9f       	mul	r20, r18
    13a8:	c0 01       	movw	r24, r0
    13aa:	43 9f       	mul	r20, r19
    13ac:	90 0d       	add	r25, r0
    13ae:	52 9f       	mul	r21, r18
    13b0:	90 0d       	add	r25, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	e8 0f       	add	r30, r24
    13b6:	f9 1f       	adc	r31, r25
    13b8:	85 a5       	ldd	r24, Z+45	; 0x2d
  return Timebase->DownCounter[window].Status.PeriodFlag;
}
    13ba:	81 70       	andi	r24, 0x01	; 1
    13bc:	08 95       	ret

000013be <Timebase_DownCounter_Set_Period_Flag>:

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    13be:	e0 91 4b 01 	lds	r30, 0x014B
    13c2:	f0 91 4c 01 	lds	r31, 0x014C
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	2d e0       	ldi	r18, 0x0D	; 13
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	ac 01       	movw	r20, r24
    13ce:	42 9f       	mul	r20, r18
    13d0:	c0 01       	movw	r24, r0
    13d2:	43 9f       	mul	r20, r19
    13d4:	90 0d       	add	r25, r0
    13d6:	52 9f       	mul	r21, r18
    13d8:	90 0d       	add	r25, r0
    13da:	11 24       	eor	r1, r1
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	85 a5       	ldd	r24, Z+45	; 0x2d
    13e2:	81 60       	ori	r24, 0x01	; 1
    13e4:	85 a7       	std	Z+45, r24	; 0x2d
}
    13e6:	08 95       	ret

000013e8 <Timebase_DownCounter_Clear_Period_Flag>:

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    13e8:	e0 91 4b 01 	lds	r30, 0x014B
    13ec:	f0 91 4c 01 	lds	r31, 0x014C
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	2d e0       	ldi	r18, 0x0D	; 13
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	ac 01       	movw	r20, r24
    13f8:	42 9f       	mul	r20, r18
    13fa:	c0 01       	movw	r24, r0
    13fc:	43 9f       	mul	r20, r19
    13fe:	90 0d       	add	r25, r0
    1400:	52 9f       	mul	r21, r18
    1402:	90 0d       	add	r25, r0
    1404:	11 24       	eor	r1, r1
    1406:	e8 0f       	add	r30, r24
    1408:	f9 1f       	adc	r31, r25
    140a:	85 a5       	ldd	r24, Z+45	; 0x2d
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	85 a7       	std	Z+45, r24	; 0x2d
}
    1410:	08 95       	ret

00001412 <Timebase_DownCounter_Reset>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1412:	e0 91 4b 01 	lds	r30, 0x014B
    1416:	f0 91 4c 01 	lds	r31, 0x014C
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	2d e0       	ldi	r18, 0x0D	; 13
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	ac 01       	movw	r20, r24
    1422:	42 9f       	mul	r20, r18
    1424:	c0 01       	movw	r24, r0
    1426:	43 9f       	mul	r20, r19
    1428:	90 0d       	add	r25, r0
    142a:	52 9f       	mul	r21, r18
    142c:	90 0d       	add	r25, r0
    142e:	11 24       	eor	r1, r1
    1430:	e8 0f       	add	r30, r24
    1432:	f9 1f       	adc	r31, r25
    1434:	16 a6       	std	Z+46, r1	; 0x2e
    1436:	17 a6       	std	Z+47, r1	; 0x2f
    1438:	10 aa       	std	Z+48, r1	; 0x30
    143a:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    143c:	12 aa       	std	Z+50, r1	; 0x32
    143e:	13 aa       	std	Z+51, r1	; 0x33
    1440:	14 aa       	std	Z+52, r1	; 0x34
    1442:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1444:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1446:	80 7e       	andi	r24, 0xE0	; 224
    1448:	85 a7       	std	Z+45, r24	; 0x2d
void Timebase_DownCounter_Reset(uint8_t window){
  Timebase_DownCounter_Set_EndValue(window, 0);
  Timebase_DownCounter_Set_Value(window, 0);
  Timebase_DownCounter_Set_Status(window, COUNTER_STATE_RESET);
  Timebase_DownCounter_Clear_Period_Flag(window);
} 
    144a:	08 95       	ret

0000144c <Timebase_DownCounter_Clear_All_Flags>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    144c:	e0 91 4b 01 	lds	r30, 0x014B
    1450:	f0 91 4c 01 	lds	r31, 0x014C
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	2d e0       	ldi	r18, 0x0D	; 13
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	ac 01       	movw	r20, r24
    145c:	42 9f       	mul	r20, r18
    145e:	c0 01       	movw	r24, r0
    1460:	43 9f       	mul	r20, r19
    1462:	90 0d       	add	r25, r0
    1464:	52 9f       	mul	r21, r18
    1466:	90 0d       	add	r25, r0
    1468:	11 24       	eor	r1, r1
    146a:	e8 0f       	add	r30, r24
    146c:	f9 1f       	adc	r31, r25
    146e:	16 a6       	std	Z+46, r1	; 0x2e
    1470:	17 a6       	std	Z+47, r1	; 0x2f
    1472:	10 aa       	std	Z+48, r1	; 0x30
    1474:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1476:	12 aa       	std	Z+50, r1	; 0x32
    1478:	13 aa       	std	Z+51, r1	; 0x33
    147a:	14 aa       	std	Z+52, r1	; 0x34
    147c:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    147e:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1480:	80 7e       	andi	r24, 0xE0	; 224
    1482:	85 a7       	std	Z+45, r24	; 0x2d
  Timebase_DownCounter_Clear_Period_Flag(window);
} 

void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}
    1484:	08 95       	ret

00001486 <Timebase_DownCounter_Start>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    1486:	e0 91 4b 01 	lds	r30, 0x014B
    148a:	f0 91 4c 01 	lds	r31, 0x014C
    148e:	90 e0       	ldi	r25, 0x00	; 0
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    1490:	2d e0       	ldi	r18, 0x0D	; 13
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	ac 01       	movw	r20, r24
    1496:	42 9f       	mul	r20, r18
    1498:	c0 01       	movw	r24, r0
    149a:	43 9f       	mul	r20, r19
    149c:	90 0d       	add	r25, r0
    149e:	52 9f       	mul	r21, r18
    14a0:	90 0d       	add	r25, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	e8 0f       	add	r30, r24
    14a6:	f9 1f       	adc	r31, r25
    14a8:	95 a5       	ldd	r25, Z+45	; 0x2d
    14aa:	89 2f       	mov	r24, r25
    14ac:	86 95       	lsr	r24
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	19 f0       	breq	.+6      	; 0x14ba <Timebase_DownCounter_Start+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14b4:	91 7e       	andi	r25, 0xE1	; 225
    14b6:	92 60       	ori	r25, 0x02	; 2
    14b8:	95 a7       	std	Z+45, r25	; 0x2d
    14ba:	08 95       	ret

000014bc <Timebase_DownCounter_Stop>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    14bc:	e0 91 4b 01 	lds	r30, 0x014B
    14c0:	f0 91 4c 01 	lds	r31, 0x014C
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Status(window, COUNTER_STATE_START); 
  }
}

void Timebase_DownCounter_Stop(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STOPPED){
    14c6:	2d e0       	ldi	r18, 0x0D	; 13
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	ac 01       	movw	r20, r24
    14cc:	42 9f       	mul	r20, r18
    14ce:	c0 01       	movw	r24, r0
    14d0:	43 9f       	mul	r20, r19
    14d2:	90 0d       	add	r25, r0
    14d4:	52 9f       	mul	r21, r18
    14d6:	90 0d       	add	r25, r0
    14d8:	11 24       	eor	r1, r1
    14da:	e8 0f       	add	r30, r24
    14dc:	f9 1f       	adc	r31, r25
    14de:	95 a5       	ldd	r25, Z+45	; 0x2d
    14e0:	89 2f       	mov	r24, r25
    14e2:	86 95       	lsr	r24
    14e4:	8f 70       	andi	r24, 0x0F	; 15
    14e6:	82 30       	cpi	r24, 0x02	; 2
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <Timebase_DownCounter_Stop+0x34>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    14ea:	91 7e       	andi	r25, 0xE1	; 225
    14ec:	94 60       	ori	r25, 0x04	; 4
    14ee:	95 a7       	std	Z+45, r25	; 0x2d
    14f0:	08 95       	ret

000014f2 <Timebase_DownCounter_Set_Securely>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    14f2:	a0 91 4b 01 	lds	r26, 0x014B
    14f6:	b0 91 4c 01 	lds	r27, 0x014C
    14fa:	90 e0       	ldi	r25, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Securely(uint8_t window, int32_t value){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_RESET ){
    14fc:	2d e0       	ldi	r18, 0x0D	; 13
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	82 9f       	mul	r24, r18
    1502:	f0 01       	movw	r30, r0
    1504:	83 9f       	mul	r24, r19
    1506:	f0 0d       	add	r31, r0
    1508:	92 9f       	mul	r25, r18
    150a:	f0 0d       	add	r31, r0
    150c:	11 24       	eor	r1, r1
    150e:	ea 0f       	add	r30, r26
    1510:	fb 1f       	adc	r31, r27
    1512:	85 a5       	ldd	r24, Z+45	; 0x2d
    1514:	86 95       	lsr	r24
    1516:	8f 70       	andi	r24, 0x0F	; 15
    1518:	d9 f4       	brne	.+54     	; 0x1550 <Timebase_DownCounter_Set_Securely+0x5e>
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    151a:	42 ab       	std	Z+50, r20	; 0x32
    151c:	53 ab       	std	Z+51, r21	; 0x33
    151e:	64 ab       	std	Z+52, r22	; 0x34
    1520:	75 ab       	std	Z+53, r23	; 0x35
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1522:	1a 96       	adiw	r26, 0x0a	; 10
    1524:	8d 91       	ld	r24, X+
    1526:	9d 91       	ld	r25, X+
    1528:	0d 90       	ld	r0, X+
    152a:	bc 91       	ld	r27, X
    152c:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    152e:	84 0f       	add	r24, r20
    1530:	95 1f       	adc	r25, r21
    1532:	a6 1f       	adc	r26, r22
    1534:	b7 1f       	adc	r27, r23
    1536:	86 a7       	std	Z+46, r24	; 0x2e
    1538:	97 a7       	std	Z+47, r25	; 0x2f
    153a:	a0 ab       	std	Z+48, r26	; 0x30
    153c:	b1 ab       	std	Z+49, r27	; 0x31
void Timebase_DownCounter_Clear_All_Flags(uint8_t window){
  Timebase_DownCounter_Reset( window );
}

void Timebase_DownCounter_Start(uint8_t window){
  if(Timebase_DownCounter_Get_Status(window) != COUNTER_STATE_STARTED){
    153e:	95 a5       	ldd	r25, Z+45	; 0x2d
    1540:	89 2f       	mov	r24, r25
    1542:	86 95       	lsr	r24
    1544:	8f 70       	andi	r24, 0x0F	; 15
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	19 f0       	breq	.+6      	; 0x1550 <Timebase_DownCounter_Set_Securely+0x5e>
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    154a:	91 7e       	andi	r25, 0xE1	; 225
    154c:	92 60       	ori	r25, 0x02	; 2
    154e:	95 a7       	std	Z+45, r25	; 0x2d
    1550:	08 95       	ret

00001552 <Timebase_DownCounter_Set_Forcefully>:
    Timebase_DownCounter_Set_EndValue(window, Timebase_Timer_Get_Seconds() + value);
    Timebase_DownCounter_Start(window);
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1556:	e0 91 4b 01 	lds	r30, 0x014B
    155a:	f0 91 4c 01 	lds	r31, 0x014C
    155e:	a8 2f       	mov	r26, r24
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	2d e0       	ldi	r18, 0x0D	; 13
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	e9 01       	movw	r28, r18
    1568:	ac 9f       	mul	r26, r28
    156a:	90 01       	movw	r18, r0
    156c:	ad 9f       	mul	r26, r29
    156e:	30 0d       	add	r19, r0
    1570:	bc 9f       	mul	r27, r28
    1572:	30 0d       	add	r19, r0
    1574:	11 24       	eor	r1, r1
    1576:	e2 0f       	add	r30, r18
    1578:	f3 1f       	adc	r31, r19
    157a:	16 a6       	std	Z+46, r1	; 0x2e
    157c:	17 a6       	std	Z+47, r1	; 0x2f
    157e:	10 aa       	std	Z+48, r1	; 0x30
    1580:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1582:	12 aa       	std	Z+50, r1	; 0x32
    1584:	13 aa       	std	Z+51, r1	; 0x33
    1586:	14 aa       	std	Z+52, r1	; 0x34
    1588:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    158a:	95 a5       	ldd	r25, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    158c:	90 7e       	andi	r25, 0xE0	; 224
    158e:	95 a7       	std	Z+45, r25	; 0x2d
  }
}

void Timebase_DownCounter_Set_Forcefully(uint8_t window, int32_t value){
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
    1590:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <Timebase_DownCounter_Set_Securely>
} 
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <Timebase_DownCounter_Update>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    159a:	a0 91 4b 01 	lds	r26, 0x014B
    159e:	b0 91 4c 01 	lds	r27, 0x014C
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	2d e0       	ldi	r18, 0x0D	; 13
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	82 9f       	mul	r24, r18
    15aa:	f0 01       	movw	r30, r0
    15ac:	83 9f       	mul	r24, r19
    15ae:	f0 0d       	add	r31, r0
    15b0:	92 9f       	mul	r25, r18
    15b2:	f0 0d       	add	r31, r0
    15b4:	11 24       	eor	r1, r1
    15b6:	ea 0f       	add	r30, r26
    15b8:	fb 1f       	adc	r31, r27
    15ba:	85 a5       	ldd	r24, Z+45	; 0x2d
    15bc:	86 95       	lsr	r24
    15be:	8f 70       	andi	r24, 0x0F	; 15
  Timebase_DownCounter_Reset( window );
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	21 f5       	brne	.+72     	; 0x160c <Timebase_DownCounter_Update+0x72>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    15c4:	1a 96       	adiw	r26, 0x0a	; 10
    15c6:	2d 91       	ld	r18, X+
    15c8:	3d 91       	ld	r19, X+
    15ca:	4d 91       	ld	r20, X+
    15cc:	5c 91       	ld	r21, X
    15ce:	1d 97       	sbiw	r26, 0x0d	; 13
  Timebase_DownCounter_Set_Securely( window, value );
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    15d0:	86 a5       	ldd	r24, Z+46	; 0x2e
    15d2:	97 a5       	ldd	r25, Z+47	; 0x2f
    15d4:	a0 a9       	ldd	r26, Z+48	; 0x30
    15d6:	b1 a9       	ldd	r27, Z+49	; 0x31
    15d8:	82 1b       	sub	r24, r18
    15da:	93 0b       	sbc	r25, r19
    15dc:	a4 0b       	sbc	r26, r20
    15de:	b5 0b       	sbc	r27, r21
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    15e0:	82 ab       	std	Z+50, r24	; 0x32
    15e2:	93 ab       	std	Z+51, r25	; 0x33
    15e4:	a4 ab       	std	Z+52, r26	; 0x34
    15e6:	b5 ab       	std	Z+53, r27	; 0x35
} 

void Timebase_DownCounter_Update(uint8_t window){
  if( Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STARTED ){ 
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
    15e8:	18 16       	cp	r1, r24
    15ea:	19 06       	cpc	r1, r25
    15ec:	1a 06       	cpc	r1, r26
    15ee:	1b 06       	cpc	r1, r27
    15f0:	0c f1       	brlt	.+66     	; 0x1634 <Timebase_DownCounter_Update+0x9a>
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    15f2:	16 a6       	std	Z+46, r1	; 0x2e
    15f4:	17 a6       	std	Z+47, r1	; 0x2f
    15f6:	10 aa       	std	Z+48, r1	; 0x30
    15f8:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    15fa:	12 aa       	std	Z+50, r1	; 0x32
    15fc:	13 aa       	std	Z+51, r1	; 0x33
    15fe:	14 aa       	std	Z+52, r1	; 0x34
    1600:	15 aa       	std	Z+53, r1	; 0x35
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1602:	85 a5       	ldd	r24, Z+45	; 0x2d
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1604:	80 7e       	andi	r24, 0xE0	; 224
    1606:	88 60       	ori	r24, 0x08	; 8
    1608:	85 a7       	std	Z+45, r24	; 0x2d
    160a:	08 95       	ret
    Timebase_DownCounter_Set_Value(window, Timebase_DownCounter_Get_EndValue(window) - Timebase_Timer_Get_Seconds());
    if(Timebase_DownCounter_Get_Value(window) <= 0){
      Timebase_DownCounter_Reset(window);
      Timebase_DownCounter_Set_Status(window, COUNTER_STATE_EXPIRED);
    }
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){ 
    160c:	82 30       	cpi	r24, 0x02	; 2
    160e:	91 f4       	brne	.+36     	; 0x1634 <Timebase_DownCounter_Update+0x9a>
uint16_t Timebase_Timer_Get_SubSeconds(void){
  return Timebase->Time.SubSeconds;
}

int32_t Timebase_Timer_Get_Seconds(void){
  return Timebase->Time.Seconds;
    1610:	1a 96       	adiw	r26, 0x0a	; 10
    1612:	8d 91       	ld	r24, X+
    1614:	9d 91       	ld	r25, X+
    1616:	0d 90       	ld	r0, X+
    1618:	bc 91       	ld	r27, X
    161a:	a0 2d       	mov	r26, r0
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    161c:	22 a9       	ldd	r18, Z+50	; 0x32
    161e:	33 a9       	ldd	r19, Z+51	; 0x33
    1620:	44 a9       	ldd	r20, Z+52	; 0x34
    1622:	55 a9       	ldd	r21, Z+53	; 0x35
    1624:	82 0f       	add	r24, r18
    1626:	93 1f       	adc	r25, r19
    1628:	a4 1f       	adc	r26, r20
    162a:	b5 1f       	adc	r27, r21
    162c:	86 a7       	std	Z+46, r24	; 0x2e
    162e:	97 a7       	std	Z+47, r25	; 0x2f
    1630:	a0 ab       	std	Z+48, r26	; 0x30
    1632:	b1 ab       	std	Z+49, r27	; 0x31
    1634:	08 95       	ret

00001636 <Timebase_DownCounter_Expired>:
  } else if (Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_STOPPED){ 
    Timebase_DownCounter_Set_EndValue(window, Timebase_DownCounter_Get_Value(window) + Timebase_Timer_Get_Seconds());
  }
}

uint8_t Timebase_DownCounter_Expired(uint8_t window){
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	e0 91 4b 01 	lds	r30, 0x014B
    163c:	f0 91 4c 01 	lds	r31, 0x014C
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	2d e0       	ldi	r18, 0x0D	; 13
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	bc 01       	movw	r22, r24
    1648:	62 9f       	mul	r22, r18
    164a:	c0 01       	movw	r24, r0
    164c:	63 9f       	mul	r22, r19
    164e:	90 0d       	add	r25, r0
    1650:	72 9f       	mul	r23, r18
    1652:	90 0d       	add	r25, r0
    1654:	11 24       	eor	r1, r1
    1656:	e8 0f       	add	r30, r24
    1658:	f9 1f       	adc	r31, r25
    165a:	85 a5       	ldd	r24, Z+45	; 0x2d
    165c:	86 95       	lsr	r24
    165e:	8f 70       	andi	r24, 0x0F	; 15
    1660:	84 30       	cpi	r24, 0x04	; 4
    1662:	09 f4       	brne	.+2      	; 0x1666 <Timebase_DownCounter_Expired+0x30>
    1664:	41 e0       	ldi	r20, 0x01	; 1
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    return 1;
  }else{
    return 0;
  }
}
    1666:	84 2f       	mov	r24, r20
    1668:	08 95       	ret

0000166a <Timebase_DownCounter_Expired_Event>:



#ifdef TIMEBASE_DOWNCOUNTER
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
    166a:	e0 91 4b 01 	lds	r30, 0x014B
    166e:	f0 91 4c 01 	lds	r31, 0x014C
    1672:	90 e0       	ldi	r25, 0x00	; 0
    return 0;
  }
}

uint8_t Timebase_DownCounter_Expired_Event(uint8_t window){
  if(Timebase_DownCounter_Get_Status( window ) == COUNTER_STATE_EXPIRED){
    1674:	2d e0       	ldi	r18, 0x0D	; 13
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	ac 01       	movw	r20, r24
    167a:	42 9f       	mul	r20, r18
    167c:	c0 01       	movw	r24, r0
    167e:	43 9f       	mul	r20, r19
    1680:	90 0d       	add	r25, r0
    1682:	52 9f       	mul	r21, r18
    1684:	90 0d       	add	r25, r0
    1686:	11 24       	eor	r1, r1
    1688:	e8 0f       	add	r30, r24
    168a:	f9 1f       	adc	r31, r25
    168c:	85 a5       	ldd	r24, Z+45	; 0x2d
    168e:	86 95       	lsr	r24
    1690:	8f 70       	andi	r24, 0x0F	; 15
    1692:	84 30       	cpi	r24, 0x04	; 4
    1694:	11 f0       	breq	.+4      	; 0x169a <Timebase_DownCounter_Expired_Event+0x30>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	08 95       	ret
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    169a:	16 a6       	std	Z+46, r1	; 0x2e
    169c:	17 a6       	std	Z+47, r1	; 0x2f
    169e:	10 aa       	std	Z+48, r1	; 0x30
    16a0:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    16a2:	12 aa       	std	Z+50, r1	; 0x32
    16a4:	13 aa       	std	Z+51, r1	; 0x33
    16a6:	14 aa       	std	Z+52, r1	; 0x34
    16a8:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    16aa:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    16ac:	80 7e       	andi	r24, 0xE0	; 224
    16ae:	85 a7       	std	Z+45, r24	; 0x2d
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_All_Flags( window );
    return 1;
  }else{
    return 0;
  }
}
    16b2:	08 95       	ret

000016b4 <Timebase_DownCounter_Set_Period_Value_Securely>:


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
    16b4:	cf 93       	push	r28
    16b6:	df 93       	push	r29
  }
  
}

uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
    16b8:	c0 91 4b 01 	lds	r28, 0x014B
    16bc:	d0 91 4c 01 	lds	r29, 0x014C
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
  }
}


void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    16c4:	8d e0       	ldi	r24, 0x0D	; 13
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	28 9f       	mul	r18, r24
    16ca:	f0 01       	movw	r30, r0
    16cc:	29 9f       	mul	r18, r25
    16ce:	f0 0d       	add	r31, r0
    16d0:	38 9f       	mul	r19, r24
    16d2:	f0 0d       	add	r31, r0
    16d4:	11 24       	eor	r1, r1
    16d6:	ec 0f       	add	r30, r28
    16d8:	fd 1f       	adc	r31, r29
    16da:	85 a5       	ldd	r24, Z+45	; 0x2d
    16dc:	80 fd       	sbrc	r24, 0
    16de:	21 c0       	rjmp	.+66     	; 0x1722 <Timebase_DownCounter_Set_Period_Value_Securely+0x6e>
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    16e0:	82 a9       	ldd	r24, Z+50	; 0x32
    16e2:	93 a9       	ldd	r25, Z+51	; 0x33
    16e4:	a4 a9       	ldd	r26, Z+52	; 0x34
    16e6:	b5 a9       	ldd	r27, Z+53	; 0x35
    16e8:	84 1b       	sub	r24, r20
    16ea:	95 0b       	sbc	r25, r21
    16ec:	a6 0b       	sbc	r26, r22
    16ee:	b7 0b       	sbc	r27, r23
int32_t Timebase_DownCounter_Get_PeriodValue(uint8_t window){
  return Timebase->DownCounter[window].PeriodValue;
}

void Timebase_DownCounter_Set_PeriodValue(uint8_t window, int32_t value){
  if(value < 0){
    16f0:	b7 ff       	sbrs	r27, 7
    16f2:	05 c0       	rjmp	.+10     	; 0x16fe <Timebase_DownCounter_Set_Period_Value_Securely+0x4a>
    Timebase->DownCounter[window].PeriodValue = 0;
    16f4:	16 aa       	std	Z+54, r1	; 0x36
    16f6:	17 aa       	std	Z+55, r1	; 0x37
    16f8:	10 ae       	std	Z+56, r1	; 0x38
    16fa:	11 ae       	std	Z+57, r1	; 0x39
    16fc:	04 c0       	rjmp	.+8      	; 0x1706 <Timebase_DownCounter_Set_Period_Value_Securely+0x52>
  }else{
    Timebase->DownCounter[window].PeriodValue = value;
    16fe:	86 ab       	std	Z+54, r24	; 0x36
    1700:	97 ab       	std	Z+55, r25	; 0x37
    1702:	a0 af       	std	Z+56, r26	; 0x38
    1704:	b1 af       	std	Z+57, r27	; 0x39
uint8_t Timebase_DownCounter_Get_Period_Flag(uint8_t window){
  return Timebase->DownCounter[window].Status.PeriodFlag;
}

void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
    1706:	8d e0       	ldi	r24, 0x0D	; 13
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	28 9f       	mul	r18, r24
    170c:	f0 01       	movw	r30, r0
    170e:	29 9f       	mul	r18, r25
    1710:	f0 0d       	add	r31, r0
    1712:	38 9f       	mul	r19, r24
    1714:	f0 0d       	add	r31, r0
    1716:	11 24       	eor	r1, r1
    1718:	ec 0f       	add	r30, r28
    171a:	fd 1f       	adc	r31, r29
    171c:	85 a5       	ldd	r24, Z+45	; 0x2d
    171e:	81 60       	ori	r24, 0x01	; 1
    1720:	85 a7       	std	Z+45, r24	; 0x2d
void Timebase_DownCounter_Set_Period_Value_Securely(uint8_t window, int32_t value){
  if(Timebase_DownCounter_Get_Period_Flag( window ) == 0){
    Timebase_DownCounter_Set_PeriodValue(window, Timebase_DownCounter_Get_Value(window) - value);
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <Timebase_DownCounter_Get_Remaining_Period_Value>:
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1728:	e0 91 4b 01 	lds	r30, 0x014B
    172c:	f0 91 4c 01 	lds	r31, 0x014C
    1730:	90 e0       	ldi	r25, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1732:	2d e0       	ldi	r18, 0x0D	; 13
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	ac 01       	movw	r20, r24
    1738:	42 9f       	mul	r20, r18
    173a:	c0 01       	movw	r24, r0
    173c:	43 9f       	mul	r20, r19
    173e:	90 0d       	add	r25, r0
    1740:	52 9f       	mul	r21, r18
    1742:	90 0d       	add	r25, r0
    1744:	11 24       	eor	r1, r1
    1746:	e8 0f       	add	r30, r24
    1748:	f9 1f       	adc	r31, r25
    174a:	22 a9       	ldd	r18, Z+50	; 0x32
    174c:	33 a9       	ldd	r19, Z+51	; 0x33
    174e:	44 a9       	ldd	r20, Z+52	; 0x34
    1750:	55 a9       	ldd	r21, Z+53	; 0x35
    1752:	86 a9       	ldd	r24, Z+54	; 0x36
    1754:	97 a9       	ldd	r25, Z+55	; 0x37
    1756:	a0 ad       	ldd	r26, Z+56	; 0x38
    1758:	b1 ad       	ldd	r27, Z+57	; 0x39
    175a:	28 1b       	sub	r18, r24
    175c:	39 0b       	sbc	r19, r25
    175e:	4a 0b       	sbc	r20, r26
    1760:	5b 0b       	sbc	r21, r27
    1762:	57 ff       	sbrs	r21, 7
    1764:	04 c0       	rjmp	.+8      	; 0x176e <Timebase_DownCounter_Get_Remaining_Period_Value+0x46>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	40 e0       	ldi	r20, 0x00	; 0
    176c:	50 e0       	ldi	r21, 0x00	; 0
  if(temp < 0){
    temp = 0;
  }
  return temp;
}
    176e:	b9 01       	movw	r22, r18
    1770:	ca 01       	movw	r24, r20
    1772:	08 95       	ret

00001774 <Timebase_DownCounter_Period_Value_Expired>:

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
}

int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
    1778:	c0 91 4b 01 	lds	r28, 0x014B
    177c:	d0 91 4c 01 	lds	r29, 0x014C
    1780:	68 2f       	mov	r22, r24
    1782:	70 e0       	ldi	r23, 0x00	; 0
    Timebase_DownCounter_Set_Period_Flag(window);
  }
}

int32_t Timebase_DownCounter_Get_Remaining_Period_Value(uint8_t window){
  int32_t temp = Timebase_DownCounter_Get_Value(window) - Timebase_DownCounter_Get_PeriodValue(window) ;
    1784:	8d e0       	ldi	r24, 0x0D	; 13
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	68 9f       	mul	r22, r24
    178a:	f0 01       	movw	r30, r0
    178c:	69 9f       	mul	r22, r25
    178e:	f0 0d       	add	r31, r0
    1790:	78 9f       	mul	r23, r24
    1792:	f0 0d       	add	r31, r0
    1794:	11 24       	eor	r1, r1
    1796:	ec 0f       	add	r30, r28
    1798:	fd 1f       	adc	r31, r29
    179a:	22 a9       	ldd	r18, Z+50	; 0x32
    179c:	33 a9       	ldd	r19, Z+51	; 0x33
    179e:	44 a9       	ldd	r20, Z+52	; 0x34
    17a0:	55 a9       	ldd	r21, Z+53	; 0x35
    17a2:	86 a9       	ldd	r24, Z+54	; 0x36
    17a4:	97 a9       	ldd	r25, Z+55	; 0x37
    17a6:	a0 ad       	ldd	r26, Z+56	; 0x38
    17a8:	b1 ad       	ldd	r27, Z+57	; 0x39
    17aa:	28 1b       	sub	r18, r24
    17ac:	39 0b       	sbc	r19, r25
    17ae:	4a 0b       	sbc	r20, r26
    17b0:	5b 0b       	sbc	r21, r27
  if(temp < 0){
    17b2:	57 fd       	sbrc	r21, 7
    17b4:	07 c0       	rjmp	.+14     	; 0x17c4 <Timebase_DownCounter_Period_Value_Expired+0x50>
  }
  return temp;
}

uint8_t Timebase_DownCounter_Period_Value_Expired(uint8_t window){
  if( (Timebase_DownCounter_Get_Remaining_Period_Value( window ) == 0) && Timebase_DownCounter_Get_Period_Flag( window )){
    17b6:	21 15       	cp	r18, r1
    17b8:	31 05       	cpc	r19, r1
    17ba:	41 05       	cpc	r20, r1
    17bc:	51 05       	cpc	r21, r1
    17be:	11 f0       	breq	.+4      	; 0x17c4 <Timebase_DownCounter_Period_Value_Expired+0x50>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	12 c0       	rjmp	.+36     	; 0x17e8 <Timebase_DownCounter_Period_Value_Expired+0x74>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	8d e0       	ldi	r24, 0x0D	; 13
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	ac 01       	movw	r20, r24
    17cc:	64 9f       	mul	r22, r20
    17ce:	c0 01       	movw	r24, r0
    17d0:	65 9f       	mul	r22, r21
    17d2:	90 0d       	add	r25, r0
    17d4:	74 9f       	mul	r23, r20
    17d6:	90 0d       	add	r25, r0
    17d8:	11 24       	eor	r1, r1
    17da:	c8 0f       	add	r28, r24
    17dc:	d9 1f       	adc	r29, r25
    17de:	8d a5       	ldd	r24, Y+45	; 0x2d
    17e0:	80 ff       	sbrs	r24, 0
    17e2:	21 e0       	ldi	r18, 0x01	; 1
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	28 27       	eor	r18, r24
    return 1;
  }else{
    return 0;
  }
}
    17e8:	82 2f       	mov	r24, r18
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <Timebase_DownCounter_Period_Value_Expired_Event>:

uint8_t Timebase_DownCounter_Period_Value_Expired_Event(uint8_t window){
    17f0:	1f 93       	push	r17
    17f2:	18 2f       	mov	r17, r24
  if(Timebase_DownCounter_Period_Value_Expired( window ) == 1){
    17f4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <Timebase_DownCounter_Period_Value_Expired>
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	11 f0       	breq	.+4      	; 0x1800 <Timebase_DownCounter_Period_Value_Expired_Event+0x10>
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	16 c0       	rjmp	.+44     	; 0x182c <Timebase_DownCounter_Period_Value_Expired_Event+0x3c>
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1800:	e0 91 4b 01 	lds	r30, 0x014B
    1804:	f0 91 4c 01 	lds	r31, 0x014C
    1808:	21 2f       	mov	r18, r17
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	8d e0       	ldi	r24, 0x0D	; 13
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	ac 01       	movw	r20, r24
    1812:	24 9f       	mul	r18, r20
    1814:	c0 01       	movw	r24, r0
    1816:	25 9f       	mul	r18, r21
    1818:	90 0d       	add	r25, r0
    181a:	34 9f       	mul	r19, r20
    181c:	90 0d       	add	r25, r0
    181e:	11 24       	eor	r1, r1
    1820:	e8 0f       	add	r30, r24
    1822:	f9 1f       	adc	r31, r25
    1824:	85 a5       	ldd	r24, Z+45	; 0x2d
    1826:	8e 7f       	andi	r24, 0xFE	; 254
    1828:	85 a7       	std	Z+45, r24	; 0x2d
    182a:	81 e0       	ldi	r24, 0x01	; 1
    Timebase_DownCounter_Clear_Period_Flag( window );
    return 1;
  }else{
    return 0;
  }
}
    182c:	1f 91       	pop	r17
    182e:	08 95       	ret

00001830 <Timebase_DownCounter_Update_All>:


void Timebase_DownCounter_Update_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Update(i);
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	0e 94 cd 0a 	call	0x159a	; 0x159a <Timebase_DownCounter_Update>
  }
}
    1836:	08 95       	ret

00001838 <Timebase_DownCounter_Reset_All>:
int32_t Timebase_DownCounter_Get_EndValue(uint8_t window){
  return Timebase->DownCounter[window].EndValue;
}

void Timebase_DownCounter_Set_EndValue(uint8_t window, int32_t value){
  Timebase->DownCounter[window].EndValue = value;
    1838:	e0 91 4b 01 	lds	r30, 0x014B
    183c:	f0 91 4c 01 	lds	r31, 0x014C
    1840:	16 a6       	std	Z+46, r1	; 0x2e
    1842:	17 a6       	std	Z+47, r1	; 0x2f
    1844:	10 aa       	std	Z+48, r1	; 0x30
    1846:	11 aa       	std	Z+49, r1	; 0x31
int32_t Timebase_DownCounter_Get_Value(uint8_t window){
  return Timebase->DownCounter[window].Value;
}

void Timebase_DownCounter_Set_Value(uint8_t window, int32_t value){
  Timebase->DownCounter[window].Value = value;
    1848:	12 aa       	std	Z+50, r1	; 0x32
    184a:	13 aa       	std	Z+51, r1	; 0x33
    184c:	14 aa       	std	Z+52, r1	; 0x34
    184e:	15 aa       	std	Z+53, r1	; 0x35
uint8_t Timebase_DownCounter_Get_Status(uint8_t window){
  return Timebase->DownCounter[window].Status.Value;
}

void Timebase_DownCounter_Set_Status(uint8_t window, uint8_t value){
  Timebase->DownCounter[window].Status.Value = value;
    1850:	85 a5       	ldd	r24, Z+45	; 0x2d
void Timebase_DownCounter_Set_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 1;
}

void Timebase_DownCounter_Clear_Period_Flag(uint8_t window){
  Timebase->DownCounter[window].Status.PeriodFlag = 0;
    1852:	80 7e       	andi	r24, 0xE0	; 224
    1854:	85 a7       	std	Z+45, r24	; 0x2d

void Timebase_DownCounter_Reset_All(void){
  for(uint8_t i=0; i<TIMEBASE_DOWNCOUNTER; i++){
    Timebase_DownCounter_Reset(i);
  }
}
    1856:	08 95       	ret

00001858 <Timebase_Reset>:



void Timebase_Reset(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Reset_All();
    1858:	0e 94 ed 08 	call	0x11da	; 0x11da <Timebase_UpCounter_Reset_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Reset_All();
    185c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <Timebase_DownCounter_Reset_All>
  #endif
}
    1860:	08 95       	ret

00001862 <Timebase_Init>:

void Timebase_Init(uint16_t UpdateRateHz){
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	8c 01       	movw	r16, r24
  Timebase_Struct_Init();
    1868:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Timebase_Struct_Init>
  Timebase_Timer_Config(UpdateRateHz);
    186c:	c8 01       	movw	r24, r16
    186e:	0e 94 6f 03 	call	0x6de	; 0x6de <Timebase_Timer_Config>
  Timebase_Reset();
    1872:	0e 94 2c 0c 	call	0x1858	; 0x1858 <Timebase_Reset>
}
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <Timebase_Main_Loop_Executables>:

void Timebase_Main_Loop_Executables(void){
  #ifdef TIMEBASE_UPCOUNTER
  Timebase_UpCounter_Update_All();
    187c:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <Timebase_UpCounter_Update_All>
  #endif
  #ifdef TIMEBASE_DOWNCOUNTER
  Timebase_DownCounter_Update_All();
    1880:	0e 94 18 0c 	call	0x1830	; 0x1830 <Timebase_DownCounter_Update_All>
  #endif
}
    1884:	08 95       	ret

00001886 <Timebase_ISR_Executables>:

void Timebase_ISR_Executables(void){
  Timebase->Time.SubSeconds++;
    1886:	e0 91 4b 01 	lds	r30, 0x014B
    188a:	f0 91 4c 01 	lds	r31, 0x014C
    188e:	80 85       	ldd	r24, Z+8	; 0x08
    1890:	91 85       	ldd	r25, Z+9	; 0x09
    1892:	01 96       	adiw	r24, 0x01	; 1
    1894:	91 87       	std	Z+9, r25	; 0x09
    1896:	80 87       	std	Z+8, r24	; 0x08
  TCNT0  = Timebase->Time.OVFUpdateValue;
    1898:	83 81       	ldd	r24, Z+3	; 0x03
    189a:	86 bd       	out	0x26, r24	; 38
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    189c:	80 85       	ldd	r24, Z+8	; 0x08
    189e:	91 85       	ldd	r25, Z+9	; 0x09
    18a0:	61 81       	ldd	r22, Z+1	; 0x01
    18a2:	72 81       	ldd	r23, Z+2	; 0x02
    18a4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__udivmodhi4>
    18a8:	89 2b       	or	r24, r25
    18aa:	81 f4       	brne	.+32     	; 0x18cc <Timebase_ISR_Executables+0x46>
    Timebase->Time.Seconds++;
    18ac:	82 85       	ldd	r24, Z+10	; 0x0a
    18ae:	93 85       	ldd	r25, Z+11	; 0x0b
    18b0:	a4 85       	ldd	r26, Z+12	; 0x0c
    18b2:	b5 85       	ldd	r27, Z+13	; 0x0d
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	a1 1d       	adc	r26, r1
    18b8:	b1 1d       	adc	r27, r1
    18ba:	82 87       	std	Z+10, r24	; 0x0a
    18bc:	93 87       	std	Z+11, r25	; 0x0b
    18be:	a4 87       	std	Z+12, r26	; 0x0c
    18c0:	b5 87       	std	Z+13, r27	; 0x0d


//Token Functions
#ifdef TIMEBASE_TOKEN_FUNCTIONS
uint8_t Timebase_Token_Executing(void){
  return Timebase->ActiveTokens;
    18c2:	87 89       	ldd	r24, Z+23	; 0x17
  Timebase->Time.SubSeconds++;
  TCNT0  = Timebase->Time.OVFUpdateValue;
  if((Timebase->Time.SubSeconds % Timebase->Config.UpdateRate) == 0){
    Timebase->Time.Seconds++;
	#ifdef TIMEBASE_TOKEN_FUNCTIONS
    if(Timebase_Token_Executing() == 0){
    18c4:	88 23       	and	r24, r24
    18c6:	11 f4       	brne	.+4      	; 0x18cc <Timebase_ISR_Executables+0x46>
      Timebase->Time.SubSeconds = 0;
    18c8:	11 86       	std	Z+9, r1	; 0x09
    18ca:	10 86       	std	Z+8, r1	; 0x08
    18cc:	08 95       	ret

000018ce <__vector_16>:
    }
	#endif
  }
}

ISR(TIMER0_OVF_vect){
    18ce:	1f 92       	push	r1
    18d0:	0f 92       	push	r0
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	0f 92       	push	r0
    18d6:	11 24       	eor	r1, r1
    18d8:	2f 93       	push	r18
    18da:	3f 93       	push	r19
    18dc:	4f 93       	push	r20
    18de:	5f 93       	push	r21
    18e0:	6f 93       	push	r22
    18e2:	7f 93       	push	r23
    18e4:	8f 93       	push	r24
    18e6:	9f 93       	push	r25
    18e8:	af 93       	push	r26
    18ea:	bf 93       	push	r27
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
  PORTD|=(1<<5);
    18f0:	5d 9a       	sbi	0x0b, 5	; 11
  Timebase_ISR_Executables();
    18f2:	0e 94 43 0c 	call	0x1886	; 0x1886 <Timebase_ISR_Executables>
  PORTD&=~(1<<5);
    18f6:	5d 98       	cbi	0x0b, 5	; 11
}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	0f 90       	pop	r0
    1916:	1f 90       	pop	r1
    1918:	18 95       	reti

0000191a <__mulsi3>:
    191a:	62 9f       	mul	r22, r18
    191c:	d0 01       	movw	r26, r0
    191e:	73 9f       	mul	r23, r19
    1920:	f0 01       	movw	r30, r0
    1922:	82 9f       	mul	r24, r18
    1924:	e0 0d       	add	r30, r0
    1926:	f1 1d       	adc	r31, r1
    1928:	64 9f       	mul	r22, r20
    192a:	e0 0d       	add	r30, r0
    192c:	f1 1d       	adc	r31, r1
    192e:	92 9f       	mul	r25, r18
    1930:	f0 0d       	add	r31, r0
    1932:	83 9f       	mul	r24, r19
    1934:	f0 0d       	add	r31, r0
    1936:	74 9f       	mul	r23, r20
    1938:	f0 0d       	add	r31, r0
    193a:	65 9f       	mul	r22, r21
    193c:	f0 0d       	add	r31, r0
    193e:	99 27       	eor	r25, r25
    1940:	72 9f       	mul	r23, r18
    1942:	b0 0d       	add	r27, r0
    1944:	e1 1d       	adc	r30, r1
    1946:	f9 1f       	adc	r31, r25
    1948:	63 9f       	mul	r22, r19
    194a:	b0 0d       	add	r27, r0
    194c:	e1 1d       	adc	r30, r1
    194e:	f9 1f       	adc	r31, r25
    1950:	bd 01       	movw	r22, r26
    1952:	cf 01       	movw	r24, r30
    1954:	11 24       	eor	r1, r1
    1956:	08 95       	ret

00001958 <__udivmodhi4>:
    1958:	aa 1b       	sub	r26, r26
    195a:	bb 1b       	sub	r27, r27
    195c:	51 e1       	ldi	r21, 0x11	; 17
    195e:	07 c0       	rjmp	.+14     	; 0x196e <__udivmodhi4_ep>

00001960 <__udivmodhi4_loop>:
    1960:	aa 1f       	adc	r26, r26
    1962:	bb 1f       	adc	r27, r27
    1964:	a6 17       	cp	r26, r22
    1966:	b7 07       	cpc	r27, r23
    1968:	10 f0       	brcs	.+4      	; 0x196e <__udivmodhi4_ep>
    196a:	a6 1b       	sub	r26, r22
    196c:	b7 0b       	sbc	r27, r23

0000196e <__udivmodhi4_ep>:
    196e:	88 1f       	adc	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	5a 95       	dec	r21
    1974:	a9 f7       	brne	.-22     	; 0x1960 <__udivmodhi4_loop>
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	08 95       	ret

00001980 <__udivmodsi4>:
    1980:	a1 e2       	ldi	r26, 0x21	; 33
    1982:	1a 2e       	mov	r1, r26
    1984:	aa 1b       	sub	r26, r26
    1986:	bb 1b       	sub	r27, r27
    1988:	fd 01       	movw	r30, r26
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <__udivmodsi4_ep>

0000198c <__udivmodsi4_loop>:
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	ee 1f       	adc	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	a2 17       	cp	r26, r18
    1996:	b3 07       	cpc	r27, r19
    1998:	e4 07       	cpc	r30, r20
    199a:	f5 07       	cpc	r31, r21
    199c:	20 f0       	brcs	.+8      	; 0x19a6 <__udivmodsi4_ep>
    199e:	a2 1b       	sub	r26, r18
    19a0:	b3 0b       	sbc	r27, r19
    19a2:	e4 0b       	sbc	r30, r20
    19a4:	f5 0b       	sbc	r31, r21

000019a6 <__udivmodsi4_ep>:
    19a6:	66 1f       	adc	r22, r22
    19a8:	77 1f       	adc	r23, r23
    19aa:	88 1f       	adc	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	1a 94       	dec	r1
    19b0:	69 f7       	brne	.-38     	; 0x198c <__udivmodsi4_loop>
    19b2:	60 95       	com	r22
    19b4:	70 95       	com	r23
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	9b 01       	movw	r18, r22
    19bc:	ac 01       	movw	r20, r24
    19be:	bd 01       	movw	r22, r26
    19c0:	cf 01       	movw	r24, r30
    19c2:	08 95       	ret

000019c4 <__divmodsi4>:
    19c4:	97 fb       	bst	r25, 7
    19c6:	09 2e       	mov	r0, r25
    19c8:	05 26       	eor	r0, r21
    19ca:	0e d0       	rcall	.+28     	; 0x19e8 <__divmodsi4_neg1>
    19cc:	57 fd       	sbrc	r21, 7
    19ce:	04 d0       	rcall	.+8      	; 0x19d8 <__divmodsi4_neg2>
    19d0:	d7 df       	rcall	.-82     	; 0x1980 <__udivmodsi4>
    19d2:	0a d0       	rcall	.+20     	; 0x19e8 <__divmodsi4_neg1>
    19d4:	00 1c       	adc	r0, r0
    19d6:	38 f4       	brcc	.+14     	; 0x19e6 <__divmodsi4_exit>

000019d8 <__divmodsi4_neg2>:
    19d8:	50 95       	com	r21
    19da:	40 95       	com	r20
    19dc:	30 95       	com	r19
    19de:	21 95       	neg	r18
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	4f 4f       	sbci	r20, 0xFF	; 255
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255

000019e6 <__divmodsi4_exit>:
    19e6:	08 95       	ret

000019e8 <__divmodsi4_neg1>:
    19e8:	f6 f7       	brtc	.-4      	; 0x19e6 <__divmodsi4_exit>
    19ea:	90 95       	com	r25
    19ec:	80 95       	com	r24
    19ee:	70 95       	com	r23
    19f0:	61 95       	neg	r22
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	08 95       	ret

000019fa <_exit>:
    19fa:	f8 94       	cli

000019fc <__stop_program>:
    19fc:	ff cf       	rjmp	.-2      	; 0x19fc <__stop_program>
